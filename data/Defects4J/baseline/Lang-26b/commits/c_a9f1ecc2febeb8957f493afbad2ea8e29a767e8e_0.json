{"sha": "a9f1ecc2febeb8957f493afbad2ea8e29a767e8e", "log": "Tidy up contexted exception classes, better Javadoc, final variables, etc.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ContextedException.java\n+++ b/src/java/org/apache/commons/lang/exception/ContextedException.java\n import java.util.Set;\n \n /**\n- * Provides an easier and safer way for developers to provide context when\n- * generating checked exceptions.  Often, additional information, besides what's\n- * embedded in the exception cause, is needed for developers to debug and correct \n- * a bug.  Often, this additional information can reduce the time it takes\n- * to replicate and fix a bug.\n- * \n- * <p>ContextedException is easier as developers don't need to be concerned \n- * with formatting the exception message to include additional information \n- * with the exception.  Additional information is automatically included\n- * in the message and printed stack trace.  This often thins out exception\n- * handling code.</p>\n- * \n- * <p>ContextedException is safer as the additional code needed to embed additional\n- * information in a normal exception tends to be tested less and is more vulnerable\n- * to errors such as null pointer exceptions.</p>\n- * \n- * <p>An unchecked version of this exception is provided by ContextedRuntimeException.</p>\n- * \n- * <p>To use this class write code as follows:</p>\n- *\n+ * <p>\n+ * An exception that provides an easy and safe way to add contextual information.\n+ * </p><p>\n+ * An exception trace itself is often insufficient to provide rapid diagnosis of the issue.\n+ * Frequently what is needed is a select few pieces of local contextual data.\n+ * Providing this data is tricky however, due to concerns over formatting and nulls.\n+ * </p><p>\n+ * The contexted exception approach allows the exception to be created together with a\n+ * map of context values. This additional information is automatically included in the\n+ * message and printed stack trace.\n+ * </p><p>\n+ * An unchecked version of this exception is provided by ContextedRuntimeException.\n+ * </p>\n+ * <p>\n+ * To use this class write code as follows:\n+ * </p>\n  * <pre>\n  *   try {\n- * \n- *   ...\n- * \n+ *     ...\n  *   } catch (Throwable e) {\n  *     throw new ContextedException(\"Error posting account transaction\", e)\n  *          .addLabeledValue(\"accountNumber\", accountNumber)\n  *   }\n  * }\n  * </pre>\n- * \n- * <p>The output in a printStacktrace() (which often is written to a log) would look something like the following:\n+ * </p><p>\n+ * The output in a printStacktrace() (which often is written to a log) would look something like the following:\n  * <pre>\n  * org.apache.commons.lang.exception.ContextedException: java.lang.Exception: Error posting account transaction\n  *  Exception Context:\n  *  at org.apache.commons.lang.exception.ContextedExceptionTest.testAddLabeledValue(ContextedExceptionTest.java:88)\n  *  ..... (rest of trace)\n  * </pre>\n+ * </p>\n  * \n  * @see ContextedRuntimeException\n  * @author D. Ashmore\n  * @since 3.0\n- *\n  */\n public class ContextedException extends Exception implements ExceptionContext {\n \n+    /** The serialization version. */\n     private static final long serialVersionUID = 8940917952810290164L;\n-    private ExceptionContext exceptionContext = new DefaultExceptionContext();\n+    /** The context where the data is stored. */\n+    private final ExceptionContext exceptionContext;\n \n     /**\n      * Instantiates ContextedException without message or cause.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * <p>\n+     * The context information is stored using a default implementation.\n      */\n     public ContextedException() {\n+        super();\n+        exceptionContext = new DefaultExceptionContext();\n     }\n \n     /**\n      * Instantiates ContextedException with message, but without cause.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * @param message The exception message\n+     * <p>\n+     * The context information is stored using a default implementation.\n+     * \n+     * @param message  the exception message, may be null\n      */\n     public ContextedException(String message) {\n         super(message);\n+        exceptionContext = new DefaultExceptionContext();\n     }\n \n     /**\n      * Instantiates ContextedException with cause, but without message.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * @param cause Exception creating need for ContextedException\n+     * <p>\n+     * The context information is stored using a default implementation.\n+     * \n+     * @param cause  the underlying cause of the exception, may be null\n      */\n     public ContextedException(Throwable cause) {\n         super(cause);\n+        exceptionContext = new DefaultExceptionContext();\n     }\n \n     /**\n      * Instantiates ContextedException with cause and message.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * @param message The exception message\n-     * @param cause Exception creating need for ContextedException\n+     * <p>\n+     * The context information is stored using a default implementation.\n+     * \n+     * @param message  the exception message, may be null\n+     * @param cause  the underlying cause of the exception, may be null\n      */\n     public ContextedException(String message, Throwable cause) {\n         super(message, cause);\n+        exceptionContext = new DefaultExceptionContext();\n     }\n-    \n+\n     /**\n      * Instantiates ContextedException with cause, message, and ExceptionContext.\n-     * @param message The exception message\n-     * @param cause Exception creating need for ContextedException\n-     * @param context Context used to store additional information\n-     * @since 3.0\n+     * \n+     * @param message  the exception message, may be null\n+     * @param cause  the underlying cause of the exception, may be null\n+     * @param context  the context used to store the additional information, null uses default implementation\n      */\n     public ContextedException(String message, Throwable cause, ExceptionContext context) {\n         super(message, cause);\n-        if (context != null) {\n-            this.exceptionContext = context;\n+        if (context == null) {\n+            context = new DefaultExceptionContext();\n         }\n+        exceptionContext = context;\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Adds information helpful to a developer in diagnosing and correcting\n      * the problem.  For the information to be meaningful, the value passed\n      * should have a reasonable toString() implementation.\n+     * <p>\n+     * Note:  If the value provided isn't Serializable, one solution would be\n+     * to provide its toString() if it has a meaningful implementation or \n+     * individual properties of the value object instead.\n      * \n-     * <p>Note:  If the value provided isn't Serializable, one solution would be\n-     * to provide its toString() if it has a meaningful implementation or \n-     * individual properties of the value object instead.</p>\n-     * @param label  a textual label associated with information\n-     * @param value  information needed to understand exception.  May be <code>null</code>.\n-     * @return this\n-     * @since 3.0\n+     * @param label  a textual label associated with information, null not recommended\n+     * @param value  information needed to understand exception, may be null\n+     * @return this, for method chaining\n      */\n     public ContextedException addLabeledValue(String label, Serializable value) {        \n-        this.exceptionContext.addLabeledValue(label, value);\n-        \n+        exceptionContext.addLabeledValue(label, value);\n         return this;\n     }\n-    \n+\n     /**\n-     * Convenience method to retrieve a value from the underlying ExceptionContext.\n-     * @param label  a textual label associated with information\n-     * @return value  information needed to understand exception.  May be <code>null</code>.\n-     * @since 3.0\n+     * Retrieves a contextual data value associated with the label.\n+     * \n+     * @param label  the label to get the contextual value for, may be null\n+     * @return the contextual value associated with the label, may be null\n      */\n     public Serializable getLabeledValue(String label) {\n-        return  this.exceptionContext.getLabeledValue(label);\n+        return exceptionContext.getLabeledValue(label);\n     }\n-    \n+\n     /**\n-     * Convenience method to retrieve currently defined labels from the underlying ExceptionContext.\n-     * @return labelSet\n-     * @since 3.0\n+     * Retrieves the labels defined in the contextual data.\n+     * \n+     * @return the set of labels, never null\n      */\n     public Set<String> getLabelSet() {\n-        return this.exceptionContext.getLabelSet();\n+        return exceptionContext.getLabelSet();\n     }\n-    \n+\n     /**\n-     * Provides message pertaining to exception.\n+     * Provides the message explaining the exception, including the contextual data.\n+     * \n      * @see java.lang.Throwable#getMessage()\n-     * @return message\n-     * @since 3.0\n+     * @return the message, never null\n      */\n     @Override\n     public String getMessage(){\n      * {@inheritDoc}\n      */\n     public String getFormattedExceptionMessage(String baseMessage) {\n-        return this.exceptionContext.getFormattedExceptionMessage(baseMessage);\n+        return exceptionContext.getFormattedExceptionMessage(baseMessage);\n     }\n }\n--- a/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n import java.util.Set;\n \n /**\n- * Provides an unchecked version of ContextedException\n+ * <p>\n+ * A runtime exception that provides an easy and safe way to add contextual information.\n+ * </p><p>\n+ * An exception trace itself is often insufficient to provide rapid diagnosis of the issue.\n+ * Frequently what is needed is a select few pieces of local contextual data.\n+ * Providing this data is tricky however, due to concerns over formatting and nulls.\n+ * </p><p>\n+ * The contexted exception approach allows the exception to be created together with a\n+ * map of context values. This additional information is automatically included in the\n+ * message and printed stack trace.\n+ * </p><p>\n+ * An checked version of this exception is provided by ContextedException.\n+ * </p>\n+ * <p>\n+ * To use this class write code as follows:\n+ * </p>\n+ * <pre>\n+ *   try {\n+ *     ...\n+ *   } catch (Throwable e) {\n+ *     throw new ContextedException(\"Error posting account transaction\", e)\n+ *          .addLabeledValue(\"accountNumber\", accountNumber)\n+ *          .addLabeledValue(\"amountPosted\", amountPosted)\n+ *          .addLabeledValue(\"previousBalance\", previousBalance)\n+ *   }\n+ * }\n+ * </pre>\n+ * </p><p>\n+ * The output in a printStacktrace() (which often is written to a log) would look something like the following:\n+ * <pre>\n+ * org.apache.commons.lang.exception.ContextedRuntimeException: java.lang.Exception: Error posting account transaction\n+ *  Exception Context:\n+ *  [accountNumber=null]\n+ *  [amountPosted=100.00]\n+ *  [previousBalance=-2.17]\n+ *\n+ *  ---------------------------------\n+ *  at org.apache.commons.lang.exception.ContextedRuntimeExceptionTest.testAddLabeledValue(ContextedExceptionTest.java:88)\n+ *  ..... (rest of trace)\n+ * </pre>\n+ * </p>\n+ * \n  * @see ContextedException\n  * @author D. Ashmore\n  * @author J&ouml;rg Schaible\n  * @since 3.0\n- *\n  */\n-public class ContextedRuntimeException extends RuntimeException implements ExceptionContext {\n+public class ContextedRuntimeException extends Exception implements ExceptionContext {\n \n+    /** The serialization version. */\n     private static final long serialVersionUID = 1459691936045811817L;\n-    private ExceptionContext exceptionContext = new DefaultExceptionContext();\n-    \n+    /** The context where the data is stored. */\n+    private final ExceptionContext exceptionContext;\n+\n     /**\n      * Instantiates ContextedRuntimeException without message or cause.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * \n+     * <p>\n+     * The context information is stored using a default implementation.\n      */\n     public ContextedRuntimeException() {\n+        super();\n+        exceptionContext = new DefaultExceptionContext();\n     }\n \n     /**\n      * Instantiates ContextedRuntimeException with message, but without cause.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * @param message The exception message\n-     * @since 3.0\n+     * <p>\n+     * The context information is stored using a default implementation.\n+     * \n+     * @param message  the exception message, may be null\n      */\n     public ContextedRuntimeException(String message) {\n         super(message);\n+        exceptionContext = new DefaultExceptionContext();\n     }\n \n     /**\n      * Instantiates ContextedRuntimeException with cause, but without message.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * @param cause Exception creating need for ContextedRuntimeException\n-     * @since 3.0\n+     * <p>\n+     * The context information is stored using a default implementation.\n+     * \n+     * @param cause  the underlying cause of the exception, may be null\n      */\n     public ContextedRuntimeException(Throwable cause) {\n         super(cause);\n+        exceptionContext = new DefaultExceptionContext();\n     }\n \n     /**\n      * Instantiates ContextedRuntimeException with cause and message.\n-     * <p>DefaultExceptionContext used to store and format context information.</p>\n-     * @param message The exception message\n-     * @param cause Exception creating need for ContextedException\n-     * @since 3.0\n+     * <p>\n+     * The context information is stored using a default implementation.\n+     * \n+     * @param message  the exception message, may be null\n+     * @param cause  the underlying cause of the exception, may be null\n      */\n     public ContextedRuntimeException(String message, Throwable cause) {\n-        this(message, cause, cause instanceof ExceptionContext ? (ExceptionContext)cause : null);\n+        super(message, cause);\n+        exceptionContext = new DefaultExceptionContext();\n     }\n-    \n+\n     /**\n      * Instantiates ContextedRuntimeException with cause, message, and ExceptionContext.\n-     * @param message The exception message\n-     * @param cause Exception creating need for ContextedRuntimeException\n-     * @param context Context used to store additional information\n-     * @since 3.0\n+     * \n+     * @param message  the exception message, may be null\n+     * @param cause  the underlying cause of the exception, may be null\n+     * @param context  the context used to store the additional information, null uses default implementation\n      */\n     public ContextedRuntimeException(String message, Throwable cause, ExceptionContext context) {\n         super(message, cause);\n-        if (context != null) {\n-            this.exceptionContext = context;\n+        if (context == null) {\n+            context = new DefaultExceptionContext();\n         }\n+        exceptionContext = context;\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Adds information helpful to a developer in diagnosing and correcting\n-     * the problem.  \n-     * @see ContextedException#addLabeledValue(String, Serializable)\n-     * @param label  a textual label associated with information\n-     * @param value  information needed to understand exception.  May be <code>null</code>.\n-     * @return this\n-     * @since 3.0\n+     * the problem.  For the information to be meaningful, the value passed\n+     * should have a reasonable toString() implementation.\n+     * <p>\n+     * Note:  If the value provided isn't Serializable, one solution would be\n+     * to provide its toString() if it has a meaningful implementation or \n+     * individual properties of the value object instead.\n+     * \n+     * @param label  a textual label associated with information, null not recommended\n+     * @param value  information needed to understand exception, may be null\n+     * @return this, for method chaining\n      */\n     public ContextedRuntimeException addLabeledValue(String label, Serializable value) {        \n-        this.exceptionContext.addLabeledValue(label, value);\n+        exceptionContext.addLabeledValue(label, value);\n         return this;\n     }\n-    \n+\n     /**\n-     * Convenience method to retrieve a value from the underlying ExceptionContext.\n-     * @param label  a textual label associated with information\n-     * @return value  information needed to understand exception.  May be <code>null</code>.\n-     * @since 3.0\n+     * Retrieves a contextual data value associated with the label.\n+     * \n+     * @param label  the label to get the contextual value for, may be null\n+     * @return the contextual value associated with the label, may be null\n      */\n     public Serializable getLabeledValue(String label) {\n-        return  this.exceptionContext.getLabeledValue(label);\n+        return exceptionContext.getLabeledValue(label);\n     }\n-    \n+\n     /**\n-     * Convenience method to retrieve  currently defined labels from the underlying ExceptionContext.\n-     * @return labelSet\n-     * @since 3.0\n+     * Retrieves the labels defined in the contextual data.\n+     * \n+     * @return the set of labels, never null\n      */\n     public Set<String> getLabelSet() {\n-        return this.exceptionContext.getLabelSet();\n+        return exceptionContext.getLabelSet();\n     }\n-    \n+\n     /**\n-     * Provides message pertaining to exception.\n+     * Provides the message explaining the exception, including the contextual data.\n+     * \n      * @see java.lang.Throwable#getMessage()\n-     * @return message\n-     * @since 3.0\n+     * @return the message, never null\n      */\n     @Override\n     public String getMessage(){\n      * {@inheritDoc}\n      */\n     public String getFormattedExceptionMessage(String baseMessage) {\n-        return this.exceptionContext.getFormattedExceptionMessage(baseMessage);\n+        return exceptionContext.getFormattedExceptionMessage(baseMessage);\n     }\n }\n--- a/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n package org.apache.commons.lang.exception;\n \n import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.commons.lang.SystemUtils;\n \n /**\n- * Provides context feature for exceptions.  Used by both checked and unchecked version of the contexted exceptions.\n- * @see ContextedRuntimeException\n+ * Default implementation of the context storing the label-value pairs for contexted exceptions.\n+ * \n  * @author D. Ashmore\n  * @since 3.0\n  */\n-public class DefaultExceptionContext implements ExceptionContext {\n-    \n+class DefaultExceptionContext implements ExceptionContext {\n+\n+    /** The serialization version. */\n     private static final long serialVersionUID = 293747957535772807L;\n-    \n-    /*\n-     * This value list could really be obtained from the Map, however, some\n-     * callers want to control the order of the list as it appears in the \n-     * Message.  The list allows that.  name/value pairs will appear in\n-     * the order that they're provided.   D. Ashmore\n-     */\n-    private List<String> contextKeyList = new ArrayList<String>();\n-    private Map<String, Serializable> contextValueMap = new HashMap<String, Serializable>();\n-    \n+    /** The ordered map storing the label-data pairs. */\n+    private Map<String, Serializable> contextValueMap = new LinkedHashMap<String, Serializable>();\n+\n     /**\n-     * Adds information helpful to a developer in diagnosing and correcting\n-     * the problem.  \n-     * @see ContextedException#addLabeledValue(String, Serializable)\n-     * @param label  a textual label associated with information\n-     * @param value  information needed to understand exception.  May be null.\n-     * @return this\n-     * @since 3.0\n+     * Adds a contextual label-value pair into this context.\n+     * <p>\n+     * This label-value pair provides information useful for debugging.\n+     * \n+     * @param label  the label of the item to add, null not recommended\n+     * @param value  the value of item to add, may be null\n+     * @return this, for method chaining\n      */\n     public ExceptionContext addLabeledValue(String label, Serializable value) {        \n-        this.contextKeyList.add(label);\n-        this.contextValueMap.put(label, value);\n-        \n+        contextValueMap.put(label, value);\n         return this;\n     }\n-    \n+\n     /**\n-     * Retrieves the value for a given label.\n-     * @param label  a textual label associated with information\n-     * @return value  information needed to understand exception.  May be null.\n-     * @since 3.0\n+     * Retrieves a contextual data value associated with the label.\n+     * \n+     * @param label  the label to get the contextual value for, may be null\n+     * @return the contextual value associated with the label, may be null\n      */\n     public Serializable getLabeledValue(String label) {\n-        return this.contextValueMap.get(label);\n+        return contextValueMap.get(label);\n     }\n-    \n+\n     /**\n-     * Retrieves currently defined labels.\n-     * @return labelSet\n-     * @since 3.0\n+     * Retrieves the labels defined in the contextual data.\n+     * \n+     * @return the set of labels, never null\n      */\n     public Set<String> getLabelSet() {\n-        return this.contextValueMap.keySet();\n+        return contextValueMap.keySet();\n     }\n-    \n+\n     /**\n-     * Centralized message logic for both checked and unchecked version of\n-     * context exceptions\n-     * @param baseMessage message retained by super class\n-     * @return message -- exception message\n-     * @since 3.0\n+     * Builds the message containing the contextual information.\n+     * \n+     * @param baseMessage  the base exception message <b>without</b> context information appended\n+     * @return the exception message <b>with</b> context information appended, never null\n      */\n     public String getFormattedExceptionMessage(String baseMessage){\n         StringBuilder buffer = new StringBuilder(256);\n             buffer.append(baseMessage);\n         }\n         \n-        if (contextKeyList.size() > 0) {\n+        if (contextValueMap.size() > 0) {\n             if (buffer.length() > 0l) {\n                 buffer.append(SystemUtils.LINE_SEPARATOR);\n             }\n             \n             Object value;\n             String valueStr;\n-            for (String label: this.contextKeyList) {\n+            for (String label : contextValueMap.keySet()) {\n                 buffer.append(\"[\");\n                 buffer.append(label);\n                 buffer.append(\"=\");\n         }\n         return buffer.toString();\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n  * @since 3.0\n  */\n public interface ExceptionContext extends Serializable {\n-    \n+\n     /**\n-     * Adds a context item along with a label.  \n-     * @param label label of item\n-     * @param value value of item\n+     * Adds a contextual label-value pair into this context.\n+     * <p>\n+     * This label-value pair provides information useful for debugging.\n+     * \n+     * @param label  the label of the item to add, null not recommended\n+     * @param value  the value of item to add, may be null\n      * @return context itself to allow method chaining\n-     * @since 3.0\n      */\n     public ExceptionContext addLabeledValue(String label, Serializable value);\n-    \n+\n     /**\n-     * Provides context information associated with the given label.\n-     * @param label label of item\n-     * @return value value associated with label\n-     * @since 3.0\n+     * Retrieves a contextual data value associated with the label.\n+     * \n+     * @param label  the label to get the contextual value for, may be null\n+     * @return the contextual value associated with the label, may be null\n      */\n     public Serializable getLabeledValue(String label);\n-    \n+\n     /**\n-     * Provides a set of labels that are currently in the context.\n-     * @return labelSet labels currently used by the context\n-     * @since 3.0\n+     * Retrieves the labels defined in the contextual data.\n+     * \n+     * @return the set of labels, never null\n      */\n     public Set<String> getLabelSet();\n-    \n+\n     /**\n      * Implementors provide the given base message with context label/value item \n      * information appended.\n-     * @param baseMessage exception message <b>without</b> context information appended\n-     * @return formattedMessage exception message <b>with</b> context information appended\n-     * @since 3.0\n+     * \n+     * @param baseMessage  the base exception message <b>without</b> context information appended\n+     * @return the exception message <b>with</b> context information appended, never null\n      */\n     public String getFormattedExceptionMessage(String baseMessage);\n \n-}\n+}", "timestamp": 1256401650, "metainfo": ""}