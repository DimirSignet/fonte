{"sha": "fcfe60a747c90b20166955df22b9387c84a4ae88", "log": "LANG-548 - Use Iterable instead of Collection  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n package org.apache.commons.lang;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n     }\n \n     /**\n-     * <p>Joins the elements of the provided <code>Collection</code> into\n+     * <p>Joins the elements of the provided <code>Iterable</code> into\n      * a single String containing the provided elements.</p>\n      *\n      * <p>No delimiter is added before or after the list. Null objects or empty\n      *\n      * <p>See the examples here: {@link #join(Object[],char)}. </p>\n      *\n-     * @param collection  the <code>Collection</code> of values to join together, may be null\n+     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n      * @param separator  the separator character to use\n      * @return the joined String, <code>null</code> if null iterator input\n      * @since 2.3\n      */\n-    public static String join(Collection<?> collection, char separator) {\n-        if (collection == null) {\n+    public static String join(Iterable<?> iterable, char separator) {\n+        if (iterable == null) {\n             return null;\n         }\n-        return join(collection.iterator(), separator);\n-    }\n-\n-    /**\n-     * <p>Joins the elements of the provided <code>Collection</code> into\n+        return join(iterable.iterator(), separator);\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided <code>Iterable</code> into\n      * a single String containing the provided elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n      *\n      * <p>See the examples here: {@link #join(Object[],String)}. </p>\n      *\n-     * @param collection  the <code>Collection</code> of values to join together, may be null\n+     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n      * @param separator  the separator character to use, null treated as \"\"\n      * @return the joined String, <code>null</code> if null iterator input\n      * @since 2.3\n      */\n-    public static String join(Collection<?> collection, String separator) {\n-        if (collection == null) {\n+    public static String join(Iterable<?> iterable, String separator) {\n+        if (iterable == null) {\n             return null;\n         }\n-        return join(collection.iterator(), separator);\n+        return join(iterable.iterator(), separator);\n     }\n \n     // Delete\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n     }\n \n-    public void testJoin_CollectionChar() {\n-        assertEquals(null, StringUtils.join((Collection<?>) null, ','));\n+    public void testJoin_IterableChar() {\n+        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n         assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n     }\n \n-    public void testJoin_CollectionString() {\n-        assertEquals(null, StringUtils.join((Collection<?>) null, null));\n+    public void testJoin_IterableString() {\n+        assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n         assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));", "timestamp": 1256606097, "metainfo": ""}