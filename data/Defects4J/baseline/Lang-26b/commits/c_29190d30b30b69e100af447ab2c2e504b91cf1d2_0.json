{"sha": "29190d30b30b69e100af447ab2c2e504b91cf1d2", "log": "Added a patch with many improvements to the javadoc from Steve Downey.  Submitted by: Steve Downey   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com>Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org>Stephen Colebourne</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n- * @version $Id: StringUtils.java,v 1.13 2002/09/25 03:30:19 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.14 2002/09/27 05:53:37 bayard Exp $\n  */\n public class StringUtils {\n \n     //--------------------------------------------------------------------------\n \n     /**\n-     * Removes white space from both ends of this string, handling null\n-     * by returning an empty string.\n+     * Removes control characters, including whitespace,  from both ends of this \n+     * string, handling null by returning an empty string.\n      *\n      * @see java.lang.String#trim()\n      * @param str  the string to check\n     }\n \n     /**\n-     * Removes white space from both ends of this string, handling null\n-     * by returning null.\n+     * Removes control characters,  including whitespace, from both ends of this\n+     * string, handling null by returning null. \n      *\n      * @see java.lang.String#trim()\n      * @param str  the string to check\n \n     /**\n      * Deletes all whitespace from a String.\n+     * Whitespace is defined as {' ', '\\t', '\\r', '\\n', '\\b'}\n      *\n      * @param str  String target to delete whitespace from\n      * @return the text without whitespace\n+     * @throws NullPointerException\n      */\n     public static String deleteWhitespace(String str) {\n         return CharSetUtils.delete(str, \" \\t\\r\\n\\b\");\n      * Nulls are handled without exceptions. Two <code>null</code>\n      * references are considered equal. Comparison is case sensitive.\n      *\n+     * @see java.lang.String#equals(String)\n      * @param str1  the first string\n      * @param str2  the second string\n      * @return true if the Strings are equal, case sensitive, or both null\n      * Compares two Strings, returning true if they are equal ignoring case.\n      * Nulls are handled without exceptions. Two <code>null</code>\n      * references are considered equal. Comparison is case insensitive.\n-     *\n+     * @see java.lang.String#equalsIgnoreCase(String)\n      * @param str1  the first string\n      * @param str2  the second string\n      * @return true if the Strings are equal, case insensitive, or both null\n      * @param str  the string to check\n      * @param searchStrs  the strings to search for\n      * @return the earliest index of any of the strings\n+     * @throws NullPointerException if any of searchStrs[i] is null\n      */\n     public static int indexOfAny(String str, String[] searchStrs) {\n         if ((str == null) || (searchStrs == null)) {\n      * @param str  the string to check\n      * @param searchStrs  the strings to search for\n      * @return the last index of any of the strings\n+     * @throws NullPointerException if any of searchStrs[i] is null\n      */\n     public static int lastIndexOfAny(String str, String[] searchStrs) {\n         if ((str == null) || (searchStrs == null)) {\n      * @param max  maximum number of values to replace, or\n      * <code>-1</code> if no maximum\n      * @return the text with any replacements processed\n+     * @throws NullPointerException if repl is null\n      */\n     public static String replace(String text, String repl, String with,\n                                  int max) {\n      * @param start int to start overlaying at\n      * @param end   int to stop overlaying before\n      * @return String with overlayed text\n+     * @throws NullPointerException if text or overlay is null\n      */\n     public static String overlayString(String text, String overlay, int start, int end) {\n         return new StringBuffer(start + overlay.length() + text.length() - end + 1)\n     \n     /**\n      * Center a string in a larger string of size n.\n-     * Uses spaces as the value to buffer the string with..\n+     * Uses spaces as the value to buffer the string with.\n+     * Equivalent to <code>center(str, size, \"\")</code>\n      *\n      * @param str  String to center\n      * @param size  int size of new String\n      * @return String containing centered String\n+     * @throws NullPointerException if str is null\n      */\n     public static String center(String str, int size) {\n         return center(str, size, \" \");\n      * @param size  int size of new String\n      * @param delim  String to buffer the new String with\n      * @return String containing centered String\n+     * @throws NullPointerException if str or delim is null\n+     * @throws ArithmeticException if delim is the empty string\n      */\n     public static String center(String str, int size, String delim) {\n         int sz = str.length();\n      *\n      * @param str  String to chomp the newline from\n      * @return String without chomped newline\n+     * @throws NullPointerException if str is null\n      */\n     public static String chomp(String str) {\n         return chomp(str, \"\\n\");\n      * @param str  String to chomp from\n      * @param sep  String to chomp\n      * @return String without chomped ending\n+     * @throws NullPointerException if str or sep is null\n      */\n     public static String chomp(String str, String sep) {\n         int idx = str.lastIndexOf(sep);\n      * \n      * @param str  String to chomp from\n      * @return String without chomped ending\n+     * @throws NullPointerException if str is null\n      */\n     public static String chompLast(String str) {\n         return chompLast(str, \"\\n\");\n      * @param str  String to chomp from\n      * @param sep  String to chomp\n      * @return String without chomped ending\n+     * @throws NullPointerException if str or sep is null\n      */\n     public static String chompLast(String str, String sep) {\n         if (str.length() == 0) {\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String chomped\n+     * @throws NullPointerException if str or sep is null\n      */\n     public static String getChomp(String str, String sep) {\n         int idx = str.lastIndexOf(sep);\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String without chomped beginning\n+     * @throws NullPointerException if str or sep is null\n      */\n     public static String prechomp(String str, String sep) {\n         int idx = str.indexOf(sep);\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String prechomped\n+     * @throws NullPointerException if str or sep is null\n      */\n     public static String getPrechomp(String str, String sep) {\n         int idx = str.indexOf(sep);\n      *\n      * @param str String to chop last character from\n      * @return String without last character\n+     * @throws NullPointerException if str is null\n      */\n     public static String chop(String str) {\n         if (\"\".equals(str)) {\n      *\n      * @param str String to chop a newline from\n      * @return String without newline\n+     * @throws NullPointerException if str is null\n      */\n     public static String chopNewline(String str) {\n         int lastIdx = str.length() - 1;\n      * @param str String to escape values in\n      *\n      * @return String with escaped values\n+     * @throws NullPointerException if str is null\n      */\n     public static String escape(String str) {\n         // improved with code from  cybertiger@cyberiantiger.org\n      * @param str  String to repeat\n      * @param repeat  int number of times to repeat\n      * @return String with repeated string\n+     * @throws NegativeArraySizeException if repeat < 0\n+     * @throws NullPointerException if str is null\n      */\n     public static String repeat(String str, int repeat) {\n         StringBuffer buffer = new StringBuffer(repeat * str.length());\n      * @param str  String to repeat\n      * @param size  int number of times to repeat\n      * @return right padded String\n+     * @throws NullPointerException if str is null\n      */\n     public static String rightPad(String str, int size) {\n         return rightPad(str, size, \" \");\n      * @param size  int size to pad to\n      * @param delim  String to pad with\n      * @return right padded String\n+     * @throws NullPointerException if str or delim is null\n+     * @throws ArithmeticException if delim is the empty string\n      */\n     public static String rightPad(String str, int size, String delim) {\n         size = (size - str.length()) / delim.length();\n      * @param str  String to pad out\n      * @param size  int size to pad to\n      * @return left padded String\n+     * @throws NullPointerException if str or delim is null\n      */\n     public static String leftPad(String str, int size) {\n         return leftPad(str, size, \" \");\n      * @param size  int size to pad to\n      * @param delim  String to pad with\n      * @return left padded String\n+     * @throws NullPointerException if str or delim is null\n+     * @throws ArithmeticException if delim is the empty string\n      */\n     public static String leftPad(String str, int size, String delim) {\n         size = (size - str.length()) / delim.length();\n     \n     /**\n      * Get the String that is nested in between two instances of the \n-     * same String.\n+     * same String. If str is null, will return null\n      *\n      * @param str  the string containing nested-string\n      * @param tag  the string before and after nested-string\n      * @return the string that was nested, or null\n+     * @throws NullPointerException if tag is null\n      */\n     public static String getNestedString(String str, String tag) {\n         return getNestedString(str, tag, tag);\n      * @param open  the string before nested-string\n      * @param close  the string after nested-string\n      * @return the string that was nested, or null\n+     * @throws NullPointerException if open or close  is null\n      */\n     public static String getNestedString(String str, String open, String close) {\n         if (str == null) {\n      * @param str  the string to check\n      * @param sub  the substring to count\n      * @return the number of occurances, 0 if the string is null\n+     * @throws NullPointerException if sub is null\n      */\n     public static int countMatches(String str, String sub) {\n         if (str == null) {\n     \n     /**\n      * Checks if the string contains only unicode letters.\n-     * Null will return null.\n+     * Null will return false. The empty string will return true.\n      * \n      * @param str  the string to check\n      * @return true if only contains letters, and is non-null\n \n     /**\n      * Checks if the string contains only unicode letters and space (' ').\n-     * Null will return null.\n+     * Null will return false.  The empty string will return true.\n      * \n      * @param str  the string to check\n      * @return true if only contains letters and space, and is non-null\n \n     /**\n      * Checks if the string contains only unicode letters or digits.\n-     * Null will return null.\n+     * Null will return false. The empty string will return true.\n      * \n      * @param str  the string to check\n      * @return true if only contains letters or digits, and is non-null\n \n     /**\n      * Checks if the string contains only unicode letters, digits or space (' ').\n-     * Null will return null.\n+     * Null will return false. The empty string will return true.\n      * \n      * @param str  the string to check\n      * @return true if only contains letters, digits or space, and is non-null\n \n     /**\n      * Checks if the string contains only unicode digits.\n-     * Null will return null.\n+     * Null will return false. The empty string will return true.\n      * \n      * @param str  the string to check\n      * @return true if only contains digits, and is non-null\n \n     /**\n      * Checks if the string contains only unicode digits or space (' ').\n-     * Null will return null.\n+     * Null will return false. The empty string will return true.\n      * \n      * @param str  the string to check\n      * @return true if only contains digits or space, and is non-null\n      * @param s  the first String\n      * @param t  the second String\n      * @return int result distance\n+     * @throws NullPointerException if s or t is null\n      */\n     public static int getLevenshteinDistance(String s, String t) {\n         int d[][]; // matrix", "timestamp": 1033106017, "metainfo": ""}