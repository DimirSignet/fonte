{"sha": "823449d5abfa32f05b17756b29e4a53390d84fd7", "log": "rolling the forName method out for the 2.1 release  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.35 2005/01/27 06:45:11 bayard Exp $\n+ * @version $Id$\n  */\n public class ClassUtils {\n \n         return convertedClasses;\n     }\n \n-    /**\n-     * <p>Enhanced version of java.lang.Class.forName(String) that can handle \n-     * primitive types and arrays using the Foo[] notation. \n-     *\n-     * @param name the fully qualified name of the class to create\n-     * @return the desired class\n-     * @since 2.1\n-     */\n-    public static Class forName(String name) throws ClassNotFoundException {\n-        String fixedName = name;\n-        if(name.endsWith(\"[]\")) {\n-            fixedName = \"[L\" + name.substring(0, name.length() - \"[]\".length()) + \";\";\n-        }\n-        try {\n-            return Class.forName(fixedName);\n-        } catch(ClassNotFoundException cnfe) {\n-            // try primitives\n-            if(\"boolean\".equals(name)) {\n-                return boolean.class;\n-            } else\n-            if(\"char\".equals(name)) {\n-                return char.class;\n-            } else\n-            if(\"byte\".equals(name)) {\n-                return byte.class;\n-            } else\n-            if(\"short\".equals(name)) {\n-                return short.class;\n-            } else\n-            if(\"int\".equals(name)) {\n-                return int.class;\n-            } else\n-            if(\"long\".equals(name)) {\n-                return long.class;\n-            } else\n-            if(\"float\".equals(name)) {\n-                return float.class;\n-            } else\n-            if(\"double\".equals(name)) {\n-                return double.class;\n-            }\n-\n-            // try primitive arrays\n-            if(\"boolean[]\".equals(name)) {\n-                return boolean[].class;\n-            } else\n-            if(\"char[]\".equals(name)) {\n-                return char[].class;\n-            } else\n-            if(\"byte[]\".equals(name)) {\n-                return byte[].class;\n-            } else\n-            if(\"short[]\".equals(name)) {\n-                return short[].class;\n-            } else\n-            if(\"int[]\".equals(name)) {\n-                return int[].class;\n-            } else\n-            if(\"long[]\".equals(name)) {\n-                return long[].class;\n-            } else\n-            if(\"float[]\".equals(name)) {\n-                return float[].class;\n-            } else\n-            if(\"double[]\".equals(name)) {\n-                return double[].class;\n-            }\n-\n-            throw cnfe;\n-        }\n-\n-    }\n-    \n     // Inner class\n     // ----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n- * @version $Id: ClassUtilsTest.java,v 1.15 2005/01/27 06:45:11 bayard Exp $\n+ * @version $Id$\n  */\n public class ClassUtilsTest extends TestCase {\n \n         assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n     }\n \n-    public void testForName() {\n-        String[] names = new String[] {\n-            \"boolean\", \"char\", \"byte\", \"short\", \"int\", \"long\", \"float\", \"double\", \n-            \"boolean[]\", \"char[]\", \"byte[]\", \"short[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \n-            \"java.lang.Object[]\", \"java.lang.String\", \"java.lang.String[]\"\n-        };\n-\n-        Class[] classes = new Class[] {\n-            boolean.class, char.class, byte.class, short.class, int.class, long.class, float.class, double.class, \n-            boolean[].class, char[].class, byte[].class, short[].class, int[].class, long[].class, float[].class, double[].class, \n-            Object[].class, String.class, String[].class\n-        };\n-\n-        for(int i=0; i<names.length; i++) {\n-            try {\n-                assertEquals( \"Incorrect class found. \", classes[i], ClassUtils.forName(names[i]) );\n-            } catch(ClassNotFoundException cnfe) {\n-                fail(\"Failed to find class for '\" + names[i] + \"'\");\n-            }\n-        }\n-\n-        try {\n-            ClassUtils.forName(\"SomeSillyMadeUpClassName\");\n-            fail(\"Non-existent classname should have thrown an exception. \");\n-        } catch(ClassNotFoundException cnfe) {\n-            // should fail\n-        }\n-    }\n-\n     public static ClassLoader newSystemClassLoader() throws  SecurityException, IllegalArgumentException {\n     \tClassLoader scl = ClassLoader.getSystemClassLoader();\n     \tif (!(scl instanceof URLClassLoader)) {", "timestamp": 1107480079, "metainfo": ""}