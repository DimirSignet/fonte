{"sha": "ef9524aed96ca4d195fc390ece625a902fb37f4b", "log": "- Fix (LANG-624) SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM - Refactor for unit testing. - Remove odd test code which is copy and pasted from SystemUtils, which therefore does not test anything.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n package org.apache.commons.lang3;\n \n import java.io.File;\n+import java.util.regex.Pattern;\n \n /**\n- * <p>Helpers for <code>java.lang.System</code>.</p>\n+ * <p>\n+ * Helpers for <code>java.lang.System</code>.\n+ * </p>\n  * \n- * <p>If a system property cannot be read due to security restrictions, \n- * the corresponding field in this class will be set to <code>null</code>\n- * and a message will be written to <code>System.err</code>.</p>\n- *\n- * <p>#ThreadSafe#</p>\n+ * <p>\n+ * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to <code>null</code>\n+ * and a message will be written to <code>System.err</code>.\n+ * </p>\n+ * \n+ * <p>\n+ * #ThreadSafe#\n+ * </p>\n+ * \n  * @author Apache Software Foundation\n  * @author Based on code from Avalon Excalibur\n  * @author Based on code from Lucene\n  */\n public class SystemUtils {\n \n+    private static final int JAVA_VERSION_TRIM_SIZE = 3;\n+\n     /**\n      * The prefix String for all Windows OS.\n      */\n     private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";\n-    \n+\n     // System property constants\n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     // These MUST be declared first. Other constants depend on this.\n-    \n+\n     /**\n      * The System property key for the user home directory.\n      */\n      * The System property key for the user directory.\n      */\n     private static final String USER_DIR_KEY = \"user.dir\";\n-    \n+\n     /**\n      * The System property key for the Java IO temporary directory.\n      */\n     private static final String JAVA_IO_TMPDIR_KEY = \"java.io.tmpdir\";\n-    \n+\n     /**\n      * The System property key for the Java home directory.\n      */\n     private static final String JAVA_HOME_KEY = \"java.home\";\n-    \n-    /**\n-     * <p>The <code>awt.toolkit</code> System Property.</p>\n-     * <p>Holds a class name, on Windows XP this is <code>sun.awt.windows.WToolkit</code>.</p>\n-     * <p><b>On platforms without a GUI, this value is <code>null</code>.</b></p>\n-     * \n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+\n+    /**\n+     * <p>\n+     * The <code>awt.toolkit</code> System Property.\n+     * </p>\n+     * <p>\n+     * Holds a class name, on Windows XP this is <code>sun.awt.windows.WToolkit</code>.\n+     * </p>\n+     * <p>\n+     * <b>On platforms without a GUI, this value is <code>null</code>.</b>\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.1\n     public static final String AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\");\n \n     /**\n-     * <p>The <code>file.encoding</code> System Property.</p>\n-     * <p>File encoding, such as <code>Cp1252</code>.</p>\n-     * \n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>file.encoding</code> System Property.\n+     * </p>\n+     * <p>\n+     * File encoding, such as <code>Cp1252</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.0\n     public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\");\n \n     /**\n-     * <p>The <code>file.separator</code> System Property.\n-     * File separator (<code>&quot;/&quot;</code> on UNIX).</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>file.separator</code> System Property. File separator (<code>&quot;/&quot;</code> on UNIX).\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n \n     /**\n-     * <p>The <code>java.awt.fonts</code> System Property.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.awt.fonts</code> System Property.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.1\n     public static final String JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\");\n \n     /**\n-     * <p>The <code>java.awt.graphicsenv</code> System Property.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.awt.graphicsenv</code> System Property.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.1\n \n     /**\n      * <p>\n-     * The <code>java.awt.headless</code> System Property.\n-     * The value of this property is the String <code>\"true\"</code> or <code>\"false\"</code>. \n-     * </p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * The <code>java.awt.headless</code> System Property. The value of this property is the String <code>\"true\"</code> or\n+     * <code>\"false\"</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @see #isJavaAwtHeadless()\n     public static final String JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\");\n \n     /**\n-     * <p>The <code>java.awt.printerjob</code> System Property.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.awt.printerjob</code> System Property.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.1\n     public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(\"java.awt.printerjob\");\n \n     /**\n-     * <p>The <code>java.class.path</code> System Property. Java class path.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.class.path</code> System Property. Java class path.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n \n     /**\n-     * <p>The <code>java.class.version</code> System Property.\n-     * Java class format version number.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.class.version</code> System Property. Java class format version number.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n \n     /**\n-     * <p>The <code>java.compiler</code> System Property. Name of JIT compiler to use.\n-     * First in JDK version 1.2. Not used in Sun JDKs after 1.2.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.compiler</code> System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in Sun JDKs after\n+     * 1.2.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2. Not used in Sun versions after 1.2.\n     public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n \n     /**\n-     * <p>The <code>java.endorsed.dirs</code> System Property. Path of endorsed directory\n-     * or directories.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.endorsed.dirs</code> System Property. Path of endorsed directory or directories.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.4\n     public static final String JAVA_ENDORSED_DIRS = getSystemProperty(\"java.endorsed.dirs\");\n \n     /**\n-     * <p>The <code>java.ext.dirs</code> System Property. Path of extension directory\n-     * or directories.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.ext.dirs</code> System Property. Path of extension directory or directories.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.3\n     public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n \n     /**\n-     * <p>The <code>java.home</code> System Property. Java installation directory.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.home</code> System Property. Java installation directory.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY);\n \n     /**\n-     * <p>The <code>java.io.tmpdir</code> System Property. Default temp file path.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.io.tmpdir</code> System Property. Default temp file path.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY);\n \n     /**\n-     * <p>The <code>java.library.path</code> System Property. List of paths to search\n-     * when loading libraries.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.library.path</code> System Property. List of paths to search when loading libraries.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n \n     /**\n-     * <p>The <code>java.runtime.name</code> System Property. Java Runtime Environment\n-     * name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.runtime.name</code> System Property. Java Runtime Environment name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.0\n     public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\");\n \n     /**\n-     * <p>The <code>java.runtime.version</code> System Property. Java Runtime Environment\n-     * version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.runtime.version</code> System Property. Java Runtime Environment version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.0\n     public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\");\n \n     /**\n-     * <p>The <code>java.specification.name</code> System Property. Java Runtime Environment\n-     * specification name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.specification.name</code> System Property. Java Runtime Environment specification name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n \n     /**\n-     * <p>The <code>java.specification.vendor</code> System Property. Java Runtime Environment\n-     * specification vendor.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.specification.vendor</code> System Property. Java Runtime Environment specification vendor.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n \n     /**\n-     * <p>The <code>java.specification.version</code> System Property. Java Runtime Environment\n-     * specification version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.specification.version</code> System Property. Java Runtime Environment specification version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.3\n     public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n \n     /**\n-     * <p>The <code>java.util.prefs.PreferencesFactory</code> System Property. A class name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.util.prefs.PreferencesFactory</code> System Property. A class name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.1\n      * @since Java 1.4\n      */\n-    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = \n-        getSystemProperty(\"java.util.prefs.PreferencesFactory\");\n-\n-    /**\n-     * <p>The <code>java.vendor</code> System Property. Java vendor-specific string.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty(\"java.util.prefs.PreferencesFactory\");\n+\n+    /**\n+     * <p>\n+     * The <code>java.vendor</code> System Property. Java vendor-specific string.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n \n     /**\n-     * <p>The <code>java.vendor.url</code> System Property. Java vendor URL.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vendor.url</code> System Property. Java vendor URL.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n-    */\n+     */\n     public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n \n     /**\n-     * <p>The <code>java.version</code> System Property. Java version number.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.version</code> System Property. Java version number.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n \n     /**\n-     * <p>The <code>java.vm.info</code> System Property. Java Virtual Machine implementation\n-     * info.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.info</code> System Property. Java Virtual Machine implementation info.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.0\n     public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n \n     /**\n-     * <p>The <code>java.vm.name</code> System Property. Java Virtual Machine implementation\n-     * name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.name</code> System Property. Java Virtual Machine implementation name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n \n     /**\n-     * <p>The <code>java.vm.specification.name</code> System Property. Java Virtual Machine\n-     * specification name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.specification.name</code> System Property. Java Virtual Machine specification name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n \n     /**\n-     * <p>The <code>java.vm.specification.vendor</code> System Property. Java Virtual\n-     * Machine specification vendor.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.specification.vendor</code> System Property. Java Virtual Machine specification vendor.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n \n     /**\n-     * <p>The <code>java.vm.specification.version</code> System Property. Java Virtual Machine\n-     * specification version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.specification.version</code> System Property. Java Virtual Machine specification version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n \n     /**\n-     * <p>The <code>java.vm.vendor</code> System Property. Java Virtual Machine implementation\n-     * vendor.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.vendor</code> System Property. Java Virtual Machine implementation vendor.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n \n     /**\n-     * <p>The <code>java.vm.version</code> System Property. Java Virtual Machine\n-     * implementation version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>java.vm.version</code> System Property. Java Virtual Machine implementation version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n \n     /**\n-     * <p>The <code>line.separator</code> System Property. Line separator\n-     * (<code>&quot;\\n&quot;</code> on UNIX).</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>line.separator</code> System Property. Line separator (<code>&quot;\\n&quot;</code> on UNIX).\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n \n     /**\n-     * <p>The <code>os.arch</code> System Property. Operating system architecture.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>os.arch</code> System Property. Operating system architecture.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n \n     /**\n-     * <p>The <code>os.name</code> System Property. Operating system name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>os.name</code> System Property. Operating system name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String OS_NAME = getSystemProperty(\"os.name\");\n \n     /**\n-     * <p>The <code>os.version</code> System Property. Operating system version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>os.version</code> System Property. Operating system version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String OS_VERSION = getSystemProperty(\"os.version\");\n \n     /**\n-     * <p>The <code>path.separator</code> System Property. Path separator\n-     * (<code>&quot;:&quot;</code> on UNIX).</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>path.separator</code> System Property. Path separator (<code>&quot;:&quot;</code> on UNIX).\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n \n     /**\n-     * <p>The <code>user.country</code> or <code>user.region</code> System Property.\n-     * User's country code, such as <code>GB</code>. First in JDK version 1.2 as\n-     * <code>user.region</code>. Renamed to <code>user.country</code> in 1.4</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>user.country</code> or <code>user.region</code> System Property. User's country code, such as <code>GB</code>. First in\n+     * Java version 1.2 as <code>user.region</code>. Renamed to <code>user.country</code> in 1.4\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.0\n      * @since Java 1.2\n      */\n-    public static final String USER_COUNTRY = \n-        getSystemProperty(\"user.country\") == null ?\n-            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\");\n-\n-    /**\n-     * <p>The <code>user.dir</code> System Property. User's current working\n-     * directory.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+    public static final String USER_COUNTRY = getSystemProperty(\"user.country\") == null ? getSystemProperty(\"user.region\")\n+            : getSystemProperty(\"user.country\");\n+\n+    /**\n+     * <p>\n+     * The <code>user.dir</code> System Property. User's current working directory.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String USER_DIR = getSystemProperty(USER_DIR_KEY);\n \n     /**\n-     * <p>The <code>user.home</code> System Property. User's home directory.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>user.home</code> System Property. User's home directory.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String USER_HOME = getSystemProperty(USER_HOME_KEY);\n \n     /**\n-     * <p>The <code>user.language</code> System Property. User's language code,\n-     * such as <code>\"en\"</code>.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>user.language</code> System Property. User's language code, such as <code>\"en\"</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.0\n     public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n \n     /**\n-     * <p>The <code>user.name</code> System Property. User's account name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>user.name</code> System Property. User's account name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since Java 1.1\n     public static final String USER_NAME = getSystemProperty(\"user.name\");\n \n     /**\n-     * <p>The <code>user.timezone</code> System Property. \n-     * For example: <code>\"America/Los_Angeles\"</code>.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * <p>\n-     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n-     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n-     * will be out of sync with that System property.\n+     * <p>\n+     * The <code>user.timezone</code> System Property. For example: <code>\"America/Los_Angeles\"</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * </p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or\n+     * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out of sync with that\n+     * System property.\n      * </p>\n      * \n      * @since 2.1\n     public static final String USER_TIMEZONE = getSystemProperty(\"user.timezone\");\n \n     // Java version\n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     // This MUST be declared after those above as it depends on the\n     // values being set up\n \n     /**\n-     * <p>Gets the Java version as a <code>String</code> trimming leading letters.</p>\n-     *\n-     * <p>The field will return <code>null</code> if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * <p>\n+     * Gets the Java version as a <code>String</code> trimming leading letters.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>null</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.1\n      */\n     public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n \n     // Java version values\n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     // These MUST be declared after the trim above as they depend on the\n     // value being set up\n \n     /**\n-     * <p>Gets the Java version as a <code>float</code>.</p>\n-     *\n-     * <p>Example return values:</p>\n+     * <p>\n+     * Gets the Java version as a <code>float</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n      * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * <li><code>1.2f</code> for Java 1.2\n+     * <li><code>1.31f</code> for Java 1.3.1\n      * </ul>\n-     *\n-     * <p>The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * \n+     * <p>\n+     * The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();\n \n     /**\n-     * <p>Gets the Java version as an <code>int</code>.</p>\n-     *\n-     * <p>Example return values:</p>\n+     * <p>\n+     * Gets the Java version as an <code>int</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n      * <ul>\n-     *  <li><code>120</code> for JDK 1.2\n-     *  <li><code>131</code> for JDK 1.3.1\n+     * <li><code>120</code> for Java 1.2\n+     * <li><code>131</code> for Java 1.3.1\n      * </ul>\n-     *\n-     * <p>The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * \n+     * <p>\n+     * The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n \n     // Java version checks\n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     // These MUST be declared after those above as they depend on the\n     // values being set up\n-    \n-    /**\n-     * <p>Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      */\n     public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      */\n     public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      */\n     public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      */\n     public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      */\n     public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Java version 1.6 (also 1.6.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.6 (also 1.6.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      */\n     public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(\"1.6\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Java version 1.7 (also 1.7.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Java version 1.7 (also 1.7.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * </p>\n      * \n      * @since 3.0\n      */\n     public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(\"1.7\");\n \n     // Operating system checks\n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     // These MUST be declared after those above as they depend on the\n     // values being set up\n     // OS names from http://www.vamphq.com/os.html\n     // if you want another added or a mistake corrected\n \n     /**\n-     * <p>Is <code>true</code> if this is AIX.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is HP-UX.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Irix.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Linux.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Mac.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Mac.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is OS/2.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Solaris.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is SunOS.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is a POSIX compilant system,\n-     * as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is AIX.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_AIX = getOSMatchesName(\"AIX\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is HP-UX.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_HP_UX = getOSMatchesName(\"HP-UX\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Irix.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_IRIX = getOSMatchesName(\"Irix\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Linux.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_LINUX = getOSMatchesName(\"Linux\") || getOSMatchesName(\"LINUX\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Mac.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_MAC = getOSMatchesName(\"Mac\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Mac.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_MAC_OSX = getOSMatchesName(\"Mac OS X\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is OS/2.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_OS2 = getOSMatchesName(\"OS/2\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Solaris.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_SOLARIS = getOSMatchesName(\"Solaris\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is SunOS.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_SUN_OS = getOSMatchesName(\"SunOS\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is a POSIX compilant system, as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.1\n      */\n-    public static final boolean IS_OS_UNIX =\n-        IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX ||\n-        IS_OS_MAC_OSX || IS_OS_SOLARIS || IS_OS_SUN_OS;\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_WINDOWS = getOSMatches(OS_NAME_WINDOWS_PREFIX);\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows 2000.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n+    public static final boolean IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS\n+            || IS_OS_SUN_OS;\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows 2000.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.0\");\n \n     /**\n-     * <p>Is <code>true</code> if this is Windows 95.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n+     * <p>\n+     * Is <code>true</code> if this is Windows 95.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.0\");\n-    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows 98.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n+    // Java 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows 98.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" 9\", \"4.1\");\n-    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows ME.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n+    // Java 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows ME.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"4.9\");\n-    // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows NT.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     * \n-     * @since 2.0\n-     */\n-    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(OS_NAME_WINDOWS_PREFIX + \" NT\");\n-    // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows XP.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n+    // Java 1.2 running on WindowsME may return 'Windows 95', hence the above\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows NT.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n+     * @since 2.0\n+     */\n+    public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + \" NT\");\n+    // Windows 2000 returns 'Windows 2000' but may suffer from same Java1.2 problem\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows XP.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n      * \n      * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"5.1\");\n \n-    //-----------------------------------------------------------------------    \n-    /**\n-     * <p>Is <code>true</code> if this is Windows Vista.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     *\n+    // -----------------------------------------------------------------------\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows Vista.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n      * @since 2.4\n      */\n-    public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\"); \n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows 7.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     *\n+    public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.0\");\n+\n+    /**\n+     * <p>\n+     * Is <code>true</code> if this is Windows 7.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * </p>\n+     * \n      * @since 3.0\n      */\n-    public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\"); \n-\n-    //-----------------------------------------------------------------------    \n-    /**\n-     * <p>SystemUtils instances should NOT be constructed in standard\n-     * programming. Instead, the class should be used as\n-     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n-     *\n-     * <p>This constructor is public to permit tools that require a JavaBean\n-     * instance to operate.</p>\n-     */\n-    public SystemUtils() {\n-        super();\n-    }\n-    \n-    //-----------------------------------------------------------------------    \n-    /**\n-     * <p>Gets the Java version number as a <code>float</code>.</p>\n-     *\n-     * <p>Example return values:</p>\n+    public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, \"6.1\");\n+\n+    /**\n+     * <p>\n+     * Gets the Java home directory as a <code>File</code>.\n+     * </p>\n+     * \n+     * @return a directory\n+     * @throws SecurityException\n+     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             property.\n+     * @see System#getProperty(String)\n+     * @since 2.1\n+     */\n+    public static File getJavaHome() {\n+        return new File(System.getProperty(JAVA_HOME_KEY));\n+    }\n+\n+    /**\n+     * <p>\n+     * Gets the Java IO temporary directory as a <code>File</code>.\n+     * </p>\n+     * \n+     * @return a directory\n+     * @throws SecurityException\n+     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             property.\n+     * @see System#getProperty(String)\n+     * @since 2.1\n+     */\n+    public static File getJavaIoTmpDir() {\n+        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n+    }\n+\n+    /**\n+     * <p>\n+     * Gets the Java version number as a <code>float</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n      * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * <li><code>1.2f</code> for Java 1.2</li>\n+     * <li><code>1.31f</code> for Java 1.3.1</li>\n+     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n      * </ul>\n      * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 1.31f for JDK 1.3.1\n+     * <p>\n+     * Patch releases are not reported.\n+     * </p>\n+     * \n+     * @return the version, for example 1.31f for Java 1.3.1\n      */\n     private static float getJavaVersionAsFloat() {\n-        if (JAVA_VERSION_TRIMMED == null) {\n-            return 0f;\n-        }\n-        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n-        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n-            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n-        }\n-        try {\n-            return Float.parseFloat(str);\n-        } catch (Exception ex) {\n-            return 0;\n-        }\n-    }\n-    \n-    /**\n-     * <p>Gets the Java version number as an <code>int</code>.</p>\n-     *\n-     * <p>Example return values:</p>\n+        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n+    }\n+\n+    /**\n+     * <p>\n+     * Gets the Java version number as an <code>int</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n      * <ul>\n-     *  <li><code>120</code> for JDK 1.2\n-     *  <li><code>131</code> for JDK 1.3.1\n+     * <li><code>120</code> for Java 1.2</li>\n+     * <li><code>131</code> for Java 1.3.1</li>\n+     * <li><code>160</code> for Java 1.6.0_20</li>\n      * </ul>\n      * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 131 for JDK 1.3.1\n+     * <p>\n+     * Patch releases are not reported.\n+     * </p>\n+     * \n+     * @return the version, for example 131 for Java 1.3.1\n      */\n     private static int getJavaVersionAsInt() {\n-        if (JAVA_VERSION_TRIMMED == null) {\n-            return 0;\n-        }\n-        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n-        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n-        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n-            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n-        } else {\n-            str = str + \"0\";\n-        }\n-        try {\n-            return Integer.parseInt(str);\n-        } catch (Exception ex) {\n-            return 0;\n-        }\n+        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n+    }\n+\n+    /**\n+     * <p>\n+     * Decides if the Java version matches.\n+     * </p>\n+     * \n+     * @param versionPrefix\n+     *            the prefix for the java version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private static boolean getJavaVersionMatches(String versionPrefix) {\n+        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n     }\n \n     /**\n     }\n \n     /**\n-     * <p>Decides if the java version matches.</p>\n-     * \n-     * @param versionPrefix  the prefix for the java version\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix\n+     *            the prefix for the os name\n+     * @param osVersionPrefix\n+     *            the prefix for the version\n      * @return true if matches, or false if not or can't determine\n      */\n-    private static boolean getJavaVersionMatches(String versionPrefix) {\n-        if (JAVA_VERSION_TRIMMED == null) {\n-            return false;\n-        }\n-        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n-    }    \n-    \n-    /**\n-     * <p>Decides if the operating system matches.</p>\n-     * \n-     * @param osNamePrefix  the prefix for the os name\n+    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n+        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n+    }\n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix\n+     *            the prefix for the os name\n      * @return true if matches, or false if not or can't determine\n      */\n-    private static boolean getOSMatches(String osNamePrefix) {\n-        if (OS_NAME == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix);\n-    }    \n-\n-    /**\n-     * <p>Decides if the operating system matches.</p>\n-     * \n-     * @param osNamePrefix  the prefix for the os name\n-     * @param osVersionPrefix  the prefix for the version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n-        if (OS_NAME == null || OS_VERSION == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n-    }    \n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Gets a System property, defaulting to <code>null</code> if the property\n-     * cannot be read.</p>\n-     *\n-     * <p>If a <code>SecurityException</code> is caught, the return\n-     * value is <code>null</code> and a message is written to <code>System.err</code>.</p>\n-     * \n-     * @param property the system property name\n+    private static boolean getOSMatchesName(String osNamePrefix) {\n+        return isOSNameMatch(OS_NAME, osNamePrefix);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    /**\n+     * <p>\n+     * Gets a System property, defaulting to <code>null</code> if the property cannot be read.\n+     * </p>\n+     * \n+     * <p>\n+     * If a <code>SecurityException</code> is caught, the return value is <code>null</code> and a message is written to\n+     * <code>System.err</code>.\n+     * </p>\n+     * \n+     * @param property\n+     *            the system property name\n      * @return the system property value or <code>null</code> if a security problem occurs\n      */\n     private static String getSystemProperty(String property) {\n             return System.getProperty(property);\n         } catch (SecurityException ex) {\n             // we are not allowed to look at this property\n-            System.err.println(\n-                \"Caught a SecurityException reading the system property '\" + property \n-                + \"'; the SystemUtils property value will default to null.\"\n-            );\n+            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n+                    + \"'; the SystemUtils property value will default to null.\");\n             return null;\n         }\n     }\n-    \n-    /**\n-     * <p>Is the Java version at least the requested version.</p>\n-     *\n-     * <p>Example input:</p>\n-     * <ul>\n-     *  <li><code>1.2f</code> to test for JDK 1.2</li>\n-     *  <li><code>1.31f</code> to test for JDK 1.3.1</li>\n-     * </ul>\n-     * \n-     * @param requiredVersion  the required version, for example 1.31f\n-     * @return <code>true</code> if the actual version is equal or greater\n-     *  than the required version\n-     */\n-    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n-        return JAVA_VERSION_FLOAT >= requiredVersion;\n-    }\n-    \n-    /**\n-     * <p>Is the Java version at least the requested version.</p>\n-     *\n-     * <p>Example input:</p>\n-     * <ul>\n-     *  <li><code>120</code> to test for JDK 1.2 or greater</li>\n-     *  <li><code>131</code> to test for JDK 1.3.1 or greater</li>\n-     * </ul>\n-     * \n-     * @param requiredVersion  the required version, for example 131\n-     * @return <code>true</code> if the actual version is equal or greater\n-     *  than the required version\n-     * @since 2.0\n-     */\n-    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n-        return JAVA_VERSION_INT >= requiredVersion;\n+\n+    /**\n+     * <p>\n+     * Gets the user directory as a <code>File</code>.\n+     * </p>\n+     * \n+     * @return a directory\n+     * @throws SecurityException\n+     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             property.\n+     * @see System#getProperty(String)\n+     * @since 2.1\n+     */\n+    public static File getUserDir() {\n+        return new File(System.getProperty(USER_DIR_KEY));\n+    }\n+\n+    /**\n+     * <p>\n+     * Gets the user home directory as a <code>File</code>.\n+     * </p>\n+     * \n+     * @return a directory\n+     * @throws SecurityException\n+     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             property.\n+     * @see System#getProperty(String)\n+     * @since 2.1\n+     */\n+    public static File getUserHome() {\n+        return new File(System.getProperty(USER_HOME_KEY));\n     }\n \n     /**\n      * Returns whether the {@link #JAVA_AWT_HEADLESS} value is <code>true</code>.\n-     *  \n-     * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>\"true\"</code>,\n-     * <code>false</code> otherwise.\n+     * \n+     * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>\"true\"</code>, <code>false</code> otherwise.\n      * \n      * @see #JAVA_AWT_HEADLESS\n      * @since 2.1\n     public static boolean isJavaAwtHeadless() {\n         return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;\n     }\n-    /**\n-     * <p>Gets the Java home directory as a <code>File</code>.</p>\n-     * \n-     * @return a directory\n-     * @throws  SecurityException  if a security manager exists and its  \n-     *             <code>checkPropertyAccess</code> method doesn't allow\n-     *              access to the specified system property.\n-     * @see System#getProperty(String)\n-     * @since 2.1\n-     */\n-    public static File getJavaHome() {\n-        return new File(System.getProperty(JAVA_HOME_KEY));\n-    }\n-\n-    /**\n-     * <p>Gets the Java IO temporary directory as a <code>File</code>.</p>\n-     * \n-     * @return a directory\n-     * @throws  SecurityException  if a security manager exists and its  \n-     *             <code>checkPropertyAccess</code> method doesn't allow\n-     *              access to the specified system property.\n-     * @see System#getProperty(String)\n-     * @since 2.1\n-     */\n-    public static File getJavaIoTmpDir() {\n-        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));\n-    }\n-\n-    /**\n-     * <p>Gets the user directory as a <code>File</code>.</p>\n-     * \n-     * @return a directory\n-     * @throws  SecurityException  if a security manager exists and its  \n-     *             <code>checkPropertyAccess</code> method doesn't allow\n-     *              access to the specified system property.\n-     * @see System#getProperty(String)\n-     * @since 2.1\n-     */\n-    public static File getUserDir() {\n-        return new File(System.getProperty(USER_DIR_KEY));\n-    }\n-\n-    /**\n-     * <p>Gets the user home directory as a <code>File</code>.</p>\n-     * \n-     * @return a directory\n-     * @throws  SecurityException  if a security manager exists and its  \n-     *             <code>checkPropertyAccess</code> method doesn't allow\n-     *              access to the specified system property.\n-     * @see System#getProperty(String)\n-     * @since 2.1\n-     */\n-    public static File getUserHome() {\n-        return new File(System.getProperty(USER_HOME_KEY));\n+\n+    /**\n+     * <p>\n+     * Is the Java version at least the requested version.\n+     * </p>\n+     * \n+     * <p>\n+     * Example input:\n+     * </p>\n+     * <ul>\n+     * <li><code>1.2f</code> to test for Java 1.2</li>\n+     * <li><code>1.31f</code> to test for Java 1.3.1</li>\n+     * </ul>\n+     * \n+     * @param requiredVersion\n+     *            the required version, for example 1.31f\n+     * @return <code>true</code> if the actual version is equal or greater than the required version\n+     */\n+    public static boolean isJavaVersionAtLeast(float requiredVersion) {\n+        return JAVA_VERSION_FLOAT >= requiredVersion;\n+    }\n+\n+    /**\n+     * <p>\n+     * Is the Java version at least the requested version.\n+     * </p>\n+     * \n+     * <p>\n+     * Example input:\n+     * </p>\n+     * <ul>\n+     * <li><code>120</code> to test for Java 1.2 or greater</li>\n+     * <li><code>131</code> to test for Java 1.3.1 or greater</li>\n+     * </ul>\n+     * \n+     * @param requiredVersion\n+     *            the required version, for example 131\n+     * @return <code>true</code> if the actual version is equal or greater than the required version\n+     * @since 2.0\n+     */\n+    public static boolean isJavaVersionAtLeast(int requiredVersion) {\n+        return JAVA_VERSION_INT >= requiredVersion;\n+    }\n+\n+    /**\n+     * <p>\n+     * Decides if the Java version matches.\n+     * </p>\n+     * <p>\n+     * This method is package private instead of private to support unit test invocation.\n+     * </p>\n+     * \n+     * @param version\n+     *            the actual Java version\n+     * @param versionPrefix\n+     *            the prefix for the expected Java version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n+        if (version == null) {\n+            return false;\n+        }\n+        return version.startsWith(versionPrefix);\n+    }\n+\n+    /**\n+     * Decides if the operating system matches.\n+     * <p>\n+     * This method is package private instead of private to support unit test invocation.\n+     * </p>\n+     * \n+     * @param osName\n+     *            the actual OS name\n+     * @param osVersion\n+     *            the actual OS version\n+     * @param osNamePrefix\n+     *            the prefix for the expected OS name\n+     * @param osVersionPrefix\n+     *            the prefix for the expected OS version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n+        if (osName == null || osVersion == null) {\n+            return false;\n+        }\n+        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n+    }\n+\n+    /**\n+     * Decides if the operating system matches.\n+     * <p>\n+     * This method is package private instead of private to support unit test invocation.\n+     * </p>\n+     * \n+     * @param osName\n+     *            the actual OS name\n+     * @param osNamePrefix\n+     *            the prefix for the expected OS name\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n+        if (osName == null) {\n+            return false;\n+        }\n+        return osName.startsWith(osNamePrefix);\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts the given Java version string to a <code>float</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n+     * <ul>\n+     * <li><code>1.2f</code> for Java 1.2</li>\n+     * <li><code>1.31f</code> for Java 1.3.1</li>\n+     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n+     * </ul>\n+     * \n+     * <p>\n+     * Patch releases are not reported.\n+     * </p>\n+     * <p>\n+     * This method is package private instead of private to support unit test invocation.\n+     * </p>\n+     * \n+     * @return the version, for example 1.31f for Java 1.3.1\n+     */\n+    static float toJavaVersionFloat(String version) {\n+        return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts the given Java version string to an <code>int</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n+     * <ul>\n+     * <li><code>120</code> for Java 1.2</li>\n+     * <li><code>131</code> for Java 1.3.1</li>\n+     * <li><code>160</code> for Java 1.6.0_20</li>\n+     * </ul>\n+     * \n+     * <p>\n+     * Patch releases are not reported.\n+     * </p>\n+     * <p>\n+     * This method is package private instead of private to support unit test invocation.\n+     * </p>\n+     * \n+     * @return the version, for example 131 for Java 1.3.1\n+     */\n+    static float toJavaVersionInt(String version) {\n+        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts the given Java version string to an <code>int[]</code> of maximum size <code>3</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n+     * <ul>\n+     * <li><code>[1, 2, 0]</code> for Java 1.2</li>\n+     * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>\n+     * <li><code>[1, 5, 0]</code> for Java 1.5.0_21</li>\n+     * </ul>\n+     * <p>\n+     * This method is package private instead of private to support unit test invocation.\n+     * </p>\n+     * \n+     * @return the version, for example [1, 5, 0] for Java 1.5.0_21\n+     */\n+    static int[] toJavaVersionIntArray(String version) {\n+        return toJavaVersionIntArray(version, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts the given Java version string to an <code>int[]</code> of maximum size <code>limit</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n+     * <ul>\n+     * <li><code>[1, 2, 0]</code> for Java 1.2</li>\n+     * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>\n+     * <li><code>[1, 5, 0, 21]</code> for Java 1.5.0_21</li>\n+     * </ul>\n+     * \n+     * @return the version, for example [1, 5, 0, 21] for Java 1.5.0_21\n+     */\n+    private static int[] toJavaVersionIntArray(String version, int limit) {\n+        if (version == null) {\n+            return ArrayUtils.EMPTY_INT_ARRAY;\n+        }\n+        String[] strings = Pattern.compile(\"[^\\\\d]\").split(version);\n+        int[] ints = new int[Math.min(limit, strings.length)];\n+        int j = 0;\n+        for (int i = 0; i < strings.length && j < limit; i++) {\n+            String s = strings[i];\n+            if (s.length() > 0) {\n+                ints[j++] = Integer.parseInt(s);\n+            }\n+        }\n+        return ints;\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts given the Java version array to a <code>float</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n+     * <ul>\n+     * <li><code>1.2f</code> for Java 1.2</li>\n+     * <li><code>1.31f</code> for Java 1.3.1</li>\n+     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n+     * </ul>\n+     * \n+     * <p>\n+     * Patch releases are not reported.\n+     * </p>\n+     * \n+     * @return the version, for example 1.31f for Java 1.3.1\n+     */\n+    private static float toVersionFloat(int[] javaVersions) {\n+        if (javaVersions == null || javaVersions.length == 0) {\n+            return 0f;\n+        }\n+        if (javaVersions.length == 1) {\n+            return javaVersions[0];\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(javaVersions[0]);\n+        builder.append('.');\n+        for (int i = 1; i < javaVersions.length; i++) {\n+            builder.append(javaVersions[i]);\n+        }\n+        try {\n+            return Float.parseFloat(builder.toString());\n+        } catch (Exception ex) {\n+            return 0f;\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts given the Java version array to an <code>int</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example return values:\n+     * </p>\n+     * <ul>\n+     * <li><code>120</code> for Java 1.2</li>\n+     * <li><code>131</code> for Java 1.3.1</li>\n+     * <li><code>160</code> for Java 1.6.0_20</li>\n+     * </ul>\n+     * \n+     * <p>\n+     * Patch releases are not reported.\n+     * </p>\n+     * \n+     * @return the version, for example 1.31f for Java 1.3.1\n+     */\n+    private static int toVersionInt(int[] javaVersions) {\n+        if (javaVersions == null) {\n+            return 0;\n+        }\n+        int intVersion = 0;\n+        int len = javaVersions.length;\n+        if (len >= 1) {\n+            intVersion = javaVersions[0] * 100;\n+        }\n+        if (len >= 2) {\n+            intVersion += javaVersions[1] * 10;\n+        }\n+        if (len >= 3) {\n+            intVersion += javaVersions[2];\n+        }\n+        return intVersion;\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    /**\n+     * <p>\n+     * SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as\n+     * <code>SystemUtils.FILE_SEPARATOR</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * This constructor is public to permit tools that require a JavaBean instance to operate.\n+     * </p>\n+     */\n+    public SystemUtils() {\n+        super();\n     }\n \n }\n--- a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n  */\n public class SystemUtilsTest extends TestCase {\n \n-    //-----------------------------------------------------------------------\n-    // COPIED FROM SystemUtils\n-    //-----------------------------------------------------------------------\n-    private String JAVA_VERSION;\n-\n-    private String JAVA_VERSION_TRIMMED;\n-\n-    private String OS_NAME;\n-\n-    private String OS_VERSION;\n-\n     public SystemUtilsTest(String name) {\n         super(name);\n     }\n \n-    /**\n-     * <p>Gets the Java version number as a <code>float</code>.</p>\n-     *\n-     * <p>Example return values:</p>\n-     * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 1.31f for JDK 1.3.1\n-     */\n-    private float getJavaVersionAsFloat() {\n-        if (JAVA_VERSION_TRIMMED == null) {\n-            return 0f;\n-        }\n-        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n-        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n-            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n-        }\n-        try {\n-            return Float.parseFloat(str);\n-        } catch (Exception ex) {\n-            return 0;\n-        }\n-    }\n-\n-    /**\n-     * <p>Gets the Java version number as an <code>int</code>.</p>\n-     *\n-     * <p>Example return values:</p>\n-     * <ul>\n-     *  <li><code>120</code> for JDK 1.2\n-     *  <li><code>131</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 131 for JDK 1.3.1\n-     */\n-    private int getJavaVersionAsInt() {\n-        if (JAVA_VERSION == null) {\n-            return 0;\n-        }\n-        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n-        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n-        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n-            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n-        } else {\n-            str = str + \"0\";\n-        }\n-        try {\n-            return Integer.parseInt(str);\n-        } catch (Exception ex) {\n-            return 0;\n-        }\n-    }\n-\n-    /**\n-     * Trims the text of the java version to start with numbers.\n-     * \n-     * @return the trimmed java version\n-     */\n-    private String getJavaVersionTrimmed() {\n-        if (JAVA_VERSION != null) {\n-            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n-                char ch = JAVA_VERSION.charAt(i);\n-                if (ch >= '0' && ch <= '9') {\n-                    return JAVA_VERSION.substring(i);\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Decides if the java version matches.\n-     * \n-     * @param versionPrefix\n-     *                  the prefix for the java version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private boolean getJavaVersionMatches(String versionPrefix) {\n-        if (JAVA_VERSION_TRIMMED == null) {\n-            return false;\n-        }\n-        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n-    }\n-\n-    /**\n-     * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix\n-     *                  the prefix for the os name\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private boolean getOSMatches(String osNamePrefix) {\n-        if (OS_NAME == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix);\n-    }\n-\n-    /**\n-     * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix\n-     *                  the prefix for the os name\n-     * @param osVersionPrefix\n-     *                  the prefix for the version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n-        if (OS_NAME == null || OS_VERSION == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new SystemUtils());\n         Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\n             assertEquals(false, SystemUtils.IS_JAVA_1_4);\n             assertEquals(false, SystemUtils.IS_JAVA_1_5);\n             assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.1\")) {\n             assertEquals(true, SystemUtils.IS_JAVA_1_1);\n             assertEquals(false, SystemUtils.IS_JAVA_1_2);\n             assertEquals(false, SystemUtils.IS_JAVA_1_4);\n             assertEquals(false, SystemUtils.IS_JAVA_1_5);\n             assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.2\")) {\n             assertEquals(false, SystemUtils.IS_JAVA_1_1);\n             assertEquals(true, SystemUtils.IS_JAVA_1_2);\n             assertEquals(false, SystemUtils.IS_JAVA_1_4);\n             assertEquals(false, SystemUtils.IS_JAVA_1_5);\n             assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.3\")) {\n             assertEquals(false, SystemUtils.IS_JAVA_1_1);\n             assertEquals(false, SystemUtils.IS_JAVA_1_2);\n             assertEquals(false, SystemUtils.IS_JAVA_1_4);\n             assertEquals(false, SystemUtils.IS_JAVA_1_5);\n             assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.4\")) {\n             assertEquals(false, SystemUtils.IS_JAVA_1_1);\n             assertEquals(false, SystemUtils.IS_JAVA_1_2);\n             assertEquals(true, SystemUtils.IS_JAVA_1_4);\n             assertEquals(false, SystemUtils.IS_JAVA_1_5);\n             assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.5\")) {\n             assertEquals(false, SystemUtils.IS_JAVA_1_1);\n             assertEquals(false, SystemUtils.IS_JAVA_1_2);\n             assertEquals(false, SystemUtils.IS_JAVA_1_4);\n             assertEquals(true, SystemUtils.IS_JAVA_1_5);\n             assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.6\")) {\n             assertEquals(false, SystemUtils.IS_JAVA_1_1);\n             assertEquals(false, SystemUtils.IS_JAVA_1_2);\n             assertEquals(false, SystemUtils.IS_JAVA_1_4);\n             assertEquals(false, SystemUtils.IS_JAVA_1_5);\n             assertEquals(true, SystemUtils.IS_JAVA_1_6);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n         } else {\n             System.out.println(\"Can't test IS_JAVA value\");\n         }\n         }\n     }\n \n-    //-----------------------------------------------------------------------\n     public void testJavaVersionAsFloat() {\n-        JAVA_VERSION = null;\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.2\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.3.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.3.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.4.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.4.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.5.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"1.6.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n-        JAVA_VERSION = \"XXX-1.3.x\";  //error\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(0.0f, getJavaVersionAsFloat(), 0.000001f);\n+        assertEquals(0f, SystemUtils.toJavaVersionFloat(null), 0.000001f);\n+        assertEquals(0f, SystemUtils.toJavaVersionFloat(\"\"), 0.000001f);\n+        assertEquals(0f, SystemUtils.toJavaVersionFloat(\"0\"), 0.000001f);\n+        assertEquals(1.1f, SystemUtils.toJavaVersionFloat(\"1.1\"), 0.000001f);\n+        assertEquals(1.2f, SystemUtils.toJavaVersionFloat(\"1.2\"), 0.000001f);\n+        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"1.3.0\"), 0.000001f);\n+        assertEquals(1.31f, SystemUtils.toJavaVersionFloat(\"1.3.1\"), 0.000001f);\n+        assertEquals(1.4f, SystemUtils.toJavaVersionFloat(\"1.4.0\"), 0.000001f);\n+        assertEquals(1.41f, SystemUtils.toJavaVersionFloat(\"1.4.1\"), 0.000001f);\n+        assertEquals(1.42f, SystemUtils.toJavaVersionFloat(\"1.4.2\"), 0.000001f);\n+        assertEquals(1.5f, SystemUtils.toJavaVersionFloat(\"1.5.0\"), 0.000001f);\n+        assertEquals(1.6f, SystemUtils.toJavaVersionFloat(\"1.6.0\"), 0.000001f);\n+        assertEquals(1.31f, SystemUtils.toJavaVersionFloat(\"JavaVM-1.3.1\"), 0.000001f);\n+        // This used to return 0f in [lang] version 2.5:\n+        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"XXX-1.3.x\"), 0.000001f);\n     }\n \n     public void testJavaVersionAsInt() {\n-        JAVA_VERSION = null;\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(0, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(110, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.2\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(120, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.3.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(130, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.3.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(131, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.4.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(140, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.4.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(141, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.5.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(150, getJavaVersionAsInt());\n-        JAVA_VERSION = \"1.6.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(160, getJavaVersionAsInt());\n-        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(131, getJavaVersionAsInt());\n-        JAVA_VERSION = \"XXX-1.3.x\";  //error\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(0, getJavaVersionAsInt());\n+        assertEquals(0, SystemUtils.toJavaVersionInt(null), 0.000001f);\n+        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"), 0.000001f);\n+        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"), 0.000001f);\n+        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"), 0.000001f);\n+        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"), 0.000001f);\n+        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"), 0.000001f);\n+        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"), 0.000001f);\n+        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"), 0.000001f);\n+        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"), 0.000001f);\n+        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"), 0.000001f);\n+        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"), 0.000001f);\n+        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"), 0.000001f);\n+        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"), 0.000001f);\n+        // This used to return 0f in [lang] version 2.5:\n+        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"), 0.000001f);\n     }\n \n     public void testJavaVersionAtLeastFloat() {\n         assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n     }\n \n-    //-----------------------------------------------------------------------\n     public void testJavaVersionMatches() {\n-        JAVA_VERSION = null;\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.2\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.3.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.3.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.4.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.4.1\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.5.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.6.0\";\n-        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-    }\n-\n-    public void testOSMatches() {\n-        OS_NAME = null;\n-        assertEquals(false, getOSMatches(\"Windows\"));\n-        OS_NAME = \"Windows 95\";\n-        assertEquals(true, getOSMatches(\"Windows\"));\n-        OS_NAME = \"Windows NT\";\n-        assertEquals(true, getOSMatches(\"Windows\"));\n-        OS_NAME = \"OS/2\";\n-        assertEquals(false, getOSMatches(\"Windows\"));\n-    }\n-\n-    public void testOSMatches2() {\n-        OS_NAME = null;\n-        OS_VERSION = null;\n-        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n-        OS_NAME = \"Windows 95\";\n-        OS_VERSION = \"4.0\";\n-        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n-        OS_NAME = \"Windows 95\";\n-        OS_VERSION = \"4.1\";\n-        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n-        OS_NAME = \"Windows 98\";\n-        OS_VERSION = \"4.1\";\n-        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n-        OS_NAME = \"Windows NT\";\n-        OS_VERSION = \"4.0\";\n-        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n-        OS_NAME = \"OS/2\";\n-        OS_VERSION = \"4.0\";\n-        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        String javaVersion = null;\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.0\";\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.1\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.2\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.3.0\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.3.1\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.4.0\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.4.1\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.4.2\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.5.0\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.6.0\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        javaVersion = \"1.7.0\";\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+    }\n+\n+    public void testOSMatchesName() {\n+        String osName = null;\n+        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        osName = \"\";\n+        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        osName = \"Windows 95\";\n+        assertEquals(true, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        osName = \"Windows NT\";\n+        assertEquals(true, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        osName = \"OS/2\";\n+        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+    }\n+\n+    public void testOSMatchesNameAndVersion() {\n+        String osName = null;\n+        String osVersion = null;\n+        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        osName = \"\";\n+        osVersion = \"\";\n+        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        osName = \"Windows 95\";\n+        osVersion = \"4.0\";\n+        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        osName = \"Windows 95\";\n+        osVersion = \"4.1\";\n+        assertEquals(true, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        osName = \"Windows 98\";\n+        osVersion = \"4.1\";\n+        assertEquals(true, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        osName = \"Windows NT\";\n+        osVersion = \"4.0\";\n+        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        osName = \"OS/2\";\n+        osVersion = \"4.0\";\n+        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n     }\n \n     public void testJavaAwtHeadless() {", "timestamp": 1275041524, "metainfo": ""}