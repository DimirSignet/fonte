{"sha": "42d511bf3eca7e9bbbbb3ba760c2372ac92af529", "log": "LANG-568 - @SuppressWarnings(\"unchecked\") is used too generally Partial fix - some warnings remain to be addressed  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n      *      the start and end indices.\n      * @since 2.1\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n             return null;\n         int newSize = endIndexExclusive - startIndexInclusive;\n         Class<?> type = array.getClass().getComponentType();\n         if (newSize <= 0) {\n-            return (T[]) Array.newInstance(type, 0);\n-        }\n+            @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n+            final T[] emptyArray = (T[]) Array.newInstance(type, 0);\n+            return emptyArray;\n+        }\n+        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n         T[] subarray = (T[]) Array.newInstance(type, newSize);\n         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n         return subarray;\n      *      unless the first array is null, in which case the type is the same as the second array.\n      * @since 2.1\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static <T> T[] addAll(T[] array1, T... array2) {\n         if (array1 == null) {\n             return clone(array2);\n             return clone(array1);\n         }\n         final Class<?> type1 = array1.getClass().getComponentType();\n+        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n         try {\n      * </pre>\n      *\n      * @param array  the array to \"add\" the element to, may be <code>null</code>\n-     * @param element  the object to add\n+     * @param element  the object to add, may be <code>null</code>\n      * @return A new array containing the existing elements plus the new element\n-     * @since 2.1\n-     */\n-    @SuppressWarnings(\"unchecked\")\n+     * The returned array type will be that of the input array (unless null),\n+     * in which case it will have the same type as the element (unless that is also null)\n+     * in which case the returned type will be Object[].\n+     * @since 2.1\n+     */\n     public static <T> T[] add(T[] array, T element) {\n         Class<?> type = array != null ? array.getClass() : (element != null ? element.getClass() : Object.class);\n+        // TODO - this is NOT safe to ignore - see LANG-571\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n         newArray[newArray.length - 1] = element;\n         return newArray;\n      * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static <T> T[] add(T[] array, int index, T element) {\n         Class<?> clss = null;\n         if (array != null) {\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n-            return (T[]) new Object[] { null };\n-        }\n-        return (T[]) add(array, index, element, clss);\n+            // TODO this is not type-safe - see LANG-571\n+            final T[] emptyArray = (T[]) new Object[] { null };\n+            return emptyArray;\n+        }\n+        @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n+        final T[] newArray = (T[]) add(array, index, element, clss);\n+        return newArray;\n     }\n \n     /**\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input\n     public static <T> T[] remove(T[] array, int index) {\n         return (T[]) remove((Object) array, index);\n     }", "timestamp": 1261112622, "metainfo": ""}