{"sha": "acbec152e96b08491313903d00aea079ec7259c1", "log": "Fixed error in javadoc for StringUtils.split and improved tests. Pr: 24911 Submitted by Al Chou.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Gary Gregory\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.117 2003/11/04 21:00:22 fredrik Exp $\n+ * @version $Id: StringUtils.java,v 1.118 2003/11/23 20:44:39 psteitz Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     }\n \n     /**\n-     * <p>Splits the provided text into an array, separators specified.\n-     * This is an alternative to using StringTokenizer.</p>\n+     * <p>Splits the provided text into an array with a maximum length, \n+     * separators specified.</p>\n      *\n      * <p>The separator is not included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> separatorChars splits on whitespace.</p>\n-     * \n+     *\n+     * <p>If more than <code>max</code> delimited substrings are found, the last \n+     * returned string includes all characters after the first <code>max - 1</code>\n+     * returned strings (including separator characters).</p>\n+     *\n      * <pre>\n      * StringUtils.split(null, *, *)            = null\n      * StringUtils.split(\"\", *, *)              = []\n      * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n      * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n      * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n-     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cdef\"]\n+     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n      * </pre>\n      * \n      * @param str  the String to parse, may be null\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: StringUtilsTest.java,v 1.55 2003/11/01 19:20:35 scolebourne Exp $\n+ * @author Al Chou\n+ * @version $Id: StringUtilsTest.java,v 1.56 2003/11/23 20:44:39 psteitz Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n     public void testSplit_String() {\n         assertEquals(null, StringUtils.split(null));\n         assertEquals(0, StringUtils.split(\"\").length);\n-\n+        \n         String str = \"a b  .c\";\n         String[] res = StringUtils.split(str);\n         assertEquals(3, res.length);\n         assertEquals(\"a\", res[0]);\n         assertEquals(\"b\", res[1]);\n         assertEquals(\".c\", res[2]);\n-            \n+        \n         str = \" a \";\n         res = StringUtils.split(str);\n         assertEquals(1, res.length);\n         res = StringUtils.split(str);\n         assertEquals(2, res.length);\n         assertEquals(\"a\", res[0]);\n-        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);\n+        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n     }\n     \n     public void testSplit_StringChar() {\n                 innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                 innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n             }\n+        }\n+        \n+        String[] results = null;\n+        String[] expectedResults = {\"ab\", \"de fg\"};\n+        results = StringUtils.split(\"ab   de fg\", null, 2);\n+        assertEquals(expectedResults.length, results.length);\n+        for (int i = 0; i < expectedResults.length; i++) {\n+            assertEquals(expectedResults[i], results[i]);\n+        }\n+        \n+        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n+        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n+        assertEquals(expectedResults2.length, results.length);\n+        for (int i = 0; i < expectedResults2.length; i++) {\n+            assertEquals(expectedResults2[i], results[i]);\n         }\n     }\n     ", "timestamp": 1069620279, "metainfo": ""}