{"sha": "8b1a8e178abb46cc048a3982636b8ec4e6ffc8dc", "log": "Applying the final part of Benjamin Bentmann's patch to LANG-432, improving our handling of case-insensitive Strings  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n \n     /**\n      * <p>Checks if String contains a search String irrespective of case,\n-     * handling <code>null</code>. This method uses\n-     * {@link #contains(String, String)}.</p>\n+     * handling <code>null</code>. Case-insensitivity is defined as by\n+     * {@link String#equalsIgnoreCase(String)}.\n      *\n      * <p>A <code>null</code> String will return <code>false</code>.</p>\n      *\n         if (str == null || searchStr == null) {\n             return false;\n         }\n-        return contains(str.toUpperCase(), searchStr.toUpperCase());\n+        int len = searchStr.length();\n+        int max = str.length() - len;\n+        for (int i = 0; i <= max; i++) {\n+            if (str.regionMatches(true, i, searchStr, 0, len)) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     // IndexOfAny chars\n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n  * limitations under the License.\n  */\n package org.apache.commons.lang;\n+\n+import java.util.Locale;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n     }\n \n-    //-----------------------------------------------------------------------\n+    public void testContainsIgnoreCase_LocaleIndependence() {\n+        Locale orig = Locale.getDefault();\n+\n+        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n+\n+        String[][] tdata = { \n+            { \"i\", \"I\" },\n+            { \"I\", \"i\" },\n+            { \"\\u03C2\", \"\\u03C3\" },\n+            { \"\\u03A3\", \"\\u03C2\" },\n+            { \"\\u03A3\", \"\\u03C3\" },\n+        };\n+\n+        String[][] fdata = { \n+            { \"\\u00DF\", \"SS\" },\n+        };\n+\n+        try {\n+            for (int i = 0; i < locales.length; i++) {\n+                Locale.setDefault(locales[i]);\n+                for (int j = 0; j < tdata.length; j++) {\n+                    assertTrue(Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1], StringUtils\n+                            .containsIgnoreCase(tdata[j][0], tdata[j][1]));\n+                }\n+                for (int j = 0; j < fdata.length; j++) {\n+                    assertFalse(Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1], StringUtils\n+                            .containsIgnoreCase(fdata[j][0], fdata[j][1]));\n+                }\n+            }\n+        } finally {\n+            Locale.setDefault(orig);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n     public void testIndexOfAny_StringStringarray() {\n         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));", "timestamp": 1256190393, "metainfo": ""}