{"sha": "b94fc5b4350c8f1db7b8a2c8f826f4a05aa4bf9b", "log": "updated javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n import java.util.TimeZone;\n \n /**\n- * <p>Duration formatting utilities and constants.</p>\n+ * <p>Duration formatting utilities and constants. The following table describes the tokens \n+ * used in the pattern language for formatting. </p>\n+ * <table border=\"1\">\n+ *  <tr><th>character</th><th>duration element</th></tr>\n+ *  <tr><td>y</td><td>years</td></tr>\n+ *  <tr><td>M</td><td>months</td></tr>\n+ *  <tr><td>d</td><td>days</td></tr>\n+ *  <tr><td>H</td><td>hours</td></tr>\n+ *  <tr><td>m</td><td>minutes</td></tr>\n+ *  <tr><td>s</td><td>seconds</td></tr>\n+ *  <tr><td>S</td><td>milliseconds</td></tr>\n+ * </table>\n  *\n  * @author Apache Ant - DateUtils\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Henri Yandell\n  * @since 2.1\n- * @version $Id: DurationFormatUtils.java,v 1.15 2004/09/27 03:14:15 bayard Exp $\n+ * @version $Id: DurationFormatUtils.java,v 1.16 2004/09/27 03:30:10 bayard Exp $\n  */\n public class DurationFormatUtils {\n \n     public static String formatISO(long millis) {\n         return format(millis, \"H:mm:ss.SSS\");\n     }\n-    /**\n-     * <p>Get the time gap as a string, using the specified format.</p>\n-     * <table border=\"1\">\n-     *  <tr><th>character</th><th>duration element</th></tr>\n-     *  <tr><td>y</td><td>years (aka 365 days)</td></tr>\n-     *  <tr><td>M</td><td>months (aka year/12)</td></tr>\n-     *  <tr><td>d</td><td>days</td></tr>\n-     *  <tr><td>H</td><td>hours</td></tr>\n-     *  <tr><td>m</td><td>minutes</td></tr>\n-     *  <tr><td>s</td><td>seconds</td></tr>\n-     *  <tr><td>S</td><td>milliseconds</td></tr>\n-     * </table>\n+\n+    /**\n+     * <p>Get the time gap as a string, using the specified format, and padding with zeros and \n+     * using the default timezone.</p>\n      * \n      * @param millis  the duration to format\n-     * @param format  the way iin which to format the duration\n+     * @param format  the way in which to format the duration\n      * @return the time as a String\n      */\n     public static String format(long millis, String format) {\n         return format(millis, format, true);\n     }\n-    public static String format(long millis, String format, boolean padWithZeros) {\n-        return format(millis, format, padWithZeros, TimeZone.getDefault());\n-    }\n+    /**\n+     * <p>Get the time gap as a string, using the specified format.\n+     * Padding the left hand side of numbers with zeroes is optional and \n+     * the timezone may be specified. \n+     * \n+     * @param millis  the duration to format\n+     * @param format  the way in which to format the duration\n+     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n+     * @param timezone the millis are defined in\n+     * @return the time as a String\n+     */\n     public static String format(long millis, String format, boolean padWithZeros, TimeZone timezone) {\n \n         if(millis > 28 * DateUtils.MILLIS_PER_DAY) {\n     }\n \n \n-    private static String formatDuration(Token[] tokens, int years, int months, int days, int hours, \n-                                         int minutes, int seconds, int milliseconds, boolean padWithZeros) \n+    static String formatDuration(Token[] tokens, int years, int months, int days, int hours, \n+                                 int minutes, int seconds, int milliseconds, boolean padWithZeros) \n     { \n         StringBuffer buffer = new StringBuffer();\n         int sz = tokens.length;\n         return buffer.toString();\n     }\n \n-    // slower than the above I presume\n+    /**\n+     * <p>Get the time gap as a string, using the specified format.\n+     * Padding the left hand side of numbers with zeroes is optional.\n+     * \n+     * @param startMillis  the start of the duration\n+     * @param endMillis  the end of the duration\n+     * @param format  the way in which to format the duration\n+     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n+     * @return the time as a String\n+     */\n     public static String format(long startMillis, long endMillis, String format, boolean padWithZeros) {\n         return format(startMillis, endMillis, format, padWithZeros, TimeZone.getDefault());\n     }\n+    /**\n+     * <p>Get the time gap as a string, using the specified format.\n+     * Padding the left hand side of numbers with zeroes is optional and \n+     * the timezone may be specified. \n+     * \n+     * @param startMillis  the start of the duration\n+     * @param endMillis  the end of the duration\n+     * @param format  the way in which to format the duration\n+     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n+     * @param timezone the millis are defined in\n+     * @return the time as a String\n+     */\n     public static String format(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) {\n \n         long millis = endMillis - startMillis;\n \n     // Reduces by difference, then if it overshot, calculates the overshot amount and \n     // fixes and returns the amount to change by\n-    private static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n+    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n         end.add( field, -1 * difference );\n         int endValue = end.get(field);\n         int startValue = start.get(field);", "timestamp": 1096255810, "metainfo": ""}