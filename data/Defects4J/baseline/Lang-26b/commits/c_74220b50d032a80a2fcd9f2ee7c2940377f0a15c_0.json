{"sha": "74220b50d032a80a2fcd9f2ee7c2940377f0a15c", "log": "Removed wordWrap method as it doesn't offer anything that the wrapText method doesn't have.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/WordWrapUtils.java\n+++ b/src/java/org/apache/commons/lang/WordWrapUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: WordWrapUtils.java,v 1.5 2003/07/08 05:59:58 bayard Exp $\n+ * @version $Id: WordWrapUtils.java,v 1.6 2003/07/12 03:06:23 bayard Exp $\n  */\n public class WordWrapUtils {\n \n         return (wrappedLine.toString());\n     }\n \n-    // Word wrapping\n-    //--------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Create a word-wrapped version of a String. Wrap at 80 characters and\n-     * use newlines as the delimiter. If a word is over 80 characters long \n-     * use a - sign to split it.</p>\n-     */\n-    public static String wordWrap(String str) {\n-        return wordWrap(str, 80, \"\\n\", \"-\");\n-    }\n-    /**\n-     * <p>Create a word-wrapped version of a String. Wrap at a specified width and\n-     * use newlines as the delimiter. If a word is over the width in lenght \n-     * use a - sign to split it.</p>\n-     */\n-    public static String wordWrap(String str, int width) {\n-        return wordWrap(str, width, \"\\n\", \"-\");\n-    }\n-    /**\n-     * <p>Word-wrap a string.</p>\n-     *\n-     * @param str   String to word-wrap\n-     * @param width int to wrap at\n-     * @param delim String to use to separate lines\n-     * @param split String to use to split a word greater than width long\n-     *\n-     * @return String that has been word wrapped\n-     */\n-    public static String wordWrap(String str, int width, String delim, String split) {\n-        int sz = str.length();\n-\n-        /// shift width up one. mainly as it makes the logic easier\n-        width++;\n-\n-        // our best guess as to an initial size\n-        StringBuffer buffer = new StringBuffer(sz / width * delim.length() + sz);\n-\n-        // every line will include a delim on the end\n-        width = width - delim.length();\n-\n-        int idx = -1;\n-        String substr = null;\n-\n-        // beware: i is rolled-back inside the loop\n-        for (int i = 0; i < sz; i += width) {\n-\n-            // on the last line\n-            if (i > sz - width) {\n-                buffer.append(str.substring(i));\n-                break;\n-            }\n-\n-            // the current line\n-            substr = str.substring(i, i + width);\n-\n-            // is the delim already on the line\n-            idx = substr.indexOf(delim);\n-            if (idx != -1) {\n-                buffer.append(substr.substring(0, idx));\n-                buffer.append(delim);\n-                i -= width - idx - delim.length();\n-\n-                // Erase a space after a delim. Is this too obscure?\n-                if(substr.length() > idx + 1) {\n-                    if (substr.charAt(idx + 1) != '\\n') {\n-                        if (Character.isWhitespace(substr.charAt(idx + 1))) {\n-                            i++;\n-                        }\n-                    }\n-                }\n-                continue;\n-            }\n-\n-            idx = -1;\n-\n-            // figure out where the last space is\n-            char[] chrs = substr.toCharArray();\n-            for (int j = width; j > 0; j--) {\n-                if (Character.isWhitespace(chrs[j - 1])) {\n-                    idx = j;\n-                    break;\n-                }\n-            }\n-\n-            // idx is the last whitespace on the line.\n-            if (idx == -1) {\n-                for (int j = width; j > 0; j--) {\n-                    if (chrs[j - 1] == '-') {\n-                        idx = j;\n-                        break;\n-                    }\n-                }\n-                if (idx == -1) {\n-                    buffer.append(substr);\n-                    buffer.append(delim);\n-                } else {\n-                    if (idx != width) {\n-                        idx++;\n-                    }\n-                    buffer.append(substr.substring(0, idx));\n-                    buffer.append(delim);\n-                    i -= width - idx;\n-                }\n-            } else {\n-                    buffer.append(substr.substring(0, idx));\n-                    buffer.append(StringUtils.repeat(\" \", width - idx));\n-                    buffer.append(delim);\n-                    i -= width - idx;\n-            }\n-        }\n-        return buffer.toString();\n-    }\n }", "timestamp": 1057979183, "metainfo": ""}