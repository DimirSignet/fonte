{"sha": "461b85c438af8a6ac69e2ed5cfd4662817f07fc4", "log": "refactoring Entities object in preparation for optimization add unit tests for Entities class move escape and unescape methods into Entities class   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n import java.util.HashMap;\n import java.util.Map;\n \n-//todo: unit test and make public\n-\n /**\n  * <p>Provides HTML and XML entity utilities.</p>\n  *\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.4 2003/05/06 22:10:40 ggregory Exp $\n+ * @version $Id: Entities.java,v 1.5 2003/05/24 04:35:06 alex Exp $\n  */\n class Entities {\n \n-    static private Object[][] basic = {\n+    static private String[][] basic = {\n         {\"quot\", \"34\"}, // \" - double-quote\n         {\"amp\", \"38\"}, // & - ampersand\n         {\"lt\", \"60\"}, // < - less-than\n         {\"gt\", \"62\"}, // > - greater-than\n     };\n \n-    static private Object[][] apos = {\n+    static private String[][] apos = {\n         {\"apos\", \"39\"}, // XML apostrophe\n     };\n \n-    static private Object[][] iso8859_1 = {\n+    static private String[][] iso8859_1 = {\n         {\"nbsp\", \"160\"}, // non-breaking space\n         {\"iexcl\", \"161\"}, //inverted exclamation mark\n         {\"cent\", \"162\"}, //cent sign\n     };\n \n     // http://www.w3.org/TR/REC-html40/sgml/entities.html\n-    static Object[][] html40 = {\n+    static String[][] html40 = {\n // <!-- Latin Extended-B -->\n-        {\"fnof\", \"402\"},  //latin small f with hook = function= florin, U+0192 ISOtech -->\n+        {\"fnof\", \"402\"}, //latin small f with hook = function= florin, U+0192 ISOtech -->\n // <!-- Greek -->\n-        {\"Alpha\", \"913\"},  //greek capital letter alpha, U+0391 -->\n-        {\"Beta\", \"914\"},  //greek capital letter beta, U+0392 -->\n-        {\"Gamma\", \"915\"},  //greek capital letter gamma,U+0393 ISOgrk3 -->\n-        {\"Delta\", \"916\"},  //greek capital letter delta,U+0394 ISOgrk3 -->\n-        {\"Epsilon\", \"917\"},  //greek capital letter epsilon, U+0395 -->\n-        {\"Zeta\", \"918\"},  //greek capital letter zeta, U+0396 -->\n-        {\"Eta\", \"919\"},  //greek capital letter eta, U+0397 -->\n-        {\"Theta\", \"920\"},  //greek capital letter theta,U+0398 ISOgrk3 -->\n-        {\"Iota\", \"921\"},  //greek capital letter iota, U+0399 -->\n-        {\"Kappa\", \"922\"},  //greek capital letter kappa, U+039A -->\n-        {\"Lambda\", \"923\"},  //greek capital letter lambda,U+039B ISOgrk3 -->\n-        {\"Mu\", \"924\"},  //greek capital letter mu, U+039C -->\n-        {\"Nu\", \"925\"},  //greek capital letter nu, U+039D -->\n-        {\"Xi\", \"926\"},  //greek capital letter xi, U+039E ISOgrk3 -->\n-        {\"Omicron\", \"927\"},  //greek capital letter omicron, U+039F -->\n-        {\"Pi\", \"928\"},  //greek capital letter pi, U+03A0 ISOgrk3 -->\n-        {\"Rho\", \"929\"},  //greek capital letter rho, U+03A1 -->\n+        {\"Alpha\", \"913\"}, //greek capital letter alpha, U+0391 -->\n+        {\"Beta\", \"914\"}, //greek capital letter beta, U+0392 -->\n+        {\"Gamma\", \"915\"}, //greek capital letter gamma,U+0393 ISOgrk3 -->\n+        {\"Delta\", \"916\"}, //greek capital letter delta,U+0394 ISOgrk3 -->\n+        {\"Epsilon\", \"917\"}, //greek capital letter epsilon, U+0395 -->\n+        {\"Zeta\", \"918\"}, //greek capital letter zeta, U+0396 -->\n+        {\"Eta\", \"919\"}, //greek capital letter eta, U+0397 -->\n+        {\"Theta\", \"920\"}, //greek capital letter theta,U+0398 ISOgrk3 -->\n+        {\"Iota\", \"921\"}, //greek capital letter iota, U+0399 -->\n+        {\"Kappa\", \"922\"}, //greek capital letter kappa, U+039A -->\n+        {\"Lambda\", \"923\"}, //greek capital letter lambda,U+039B ISOgrk3 -->\n+        {\"Mu\", \"924\"}, //greek capital letter mu, U+039C -->\n+        {\"Nu\", \"925\"}, //greek capital letter nu, U+039D -->\n+        {\"Xi\", \"926\"}, //greek capital letter xi, U+039E ISOgrk3 -->\n+        {\"Omicron\", \"927\"}, //greek capital letter omicron, U+039F -->\n+        {\"Pi\", \"928\"}, //greek capital letter pi, U+03A0 ISOgrk3 -->\n+        {\"Rho\", \"929\"}, //greek capital letter rho, U+03A1 -->\n // <!-- there is no Sigmaf, and no U+03A2 character either -->\n-        {\"Sigma\", \"931\"},  //greek capital letter sigma,U+03A3 ISOgrk3 -->\n-        {\"Tau\", \"932\"},  //greek capital letter tau, U+03A4 -->\n-        {\"Upsilon\", \"933\"},  //greek capital letter upsilon,U+03A5 ISOgrk3 -->\n-        {\"Phi\", \"934\"},  //greek capital letter phi,U+03A6 ISOgrk3 -->\n-        {\"Chi\", \"935\"},  //greek capital letter chi, U+03A7 -->\n-        {\"Psi\", \"936\"},  //greek capital letter psi,U+03A8 ISOgrk3 -->\n-        {\"Omega\", \"937\"},  //greek capital letter omega,U+03A9 ISOgrk3 -->\n-        {\"alpha\", \"945\"},  //greek small letter alpha,U+03B1 ISOgrk3 -->\n-        {\"beta\", \"946\"},  //greek small letter beta, U+03B2 ISOgrk3 -->\n-        {\"gamma\", \"947\"},  //greek small letter gamma,U+03B3 ISOgrk3 -->\n-        {\"delta\", \"948\"},  //greek small letter delta,U+03B4 ISOgrk3 -->\n-        {\"epsilon\", \"949\"},  //greek small letter epsilon,U+03B5 ISOgrk3 -->\n-        {\"zeta\", \"950\"},  //greek small letter zeta, U+03B6 ISOgrk3 -->\n-        {\"eta\", \"951\"},  //greek small letter eta, U+03B7 ISOgrk3 -->\n-        {\"theta\", \"952\"},  //greek small letter theta,U+03B8 ISOgrk3 -->\n-        {\"iota\", \"953\"},  //greek small letter iota, U+03B9 ISOgrk3 -->\n-        {\"kappa\", \"954\"},  //greek small letter kappa,U+03BA ISOgrk3 -->\n-        {\"lambda\", \"955\"},  //greek small letter lambda,U+03BB ISOgrk3 -->\n-        {\"mu\", \"956\"},  //greek small letter mu, U+03BC ISOgrk3 -->\n-        {\"nu\", \"957\"},  //greek small letter nu, U+03BD ISOgrk3 -->\n-        {\"xi\", \"958\"},  //greek small letter xi, U+03BE ISOgrk3 -->\n-        {\"omicron\", \"959\"},  //greek small letter omicron, U+03BF NEW -->\n-        {\"pi\", \"960\"},  //greek small letter pi, U+03C0 ISOgrk3 -->\n-        {\"rho\", \"961\"},  //greek small letter rho, U+03C1 ISOgrk3 -->\n-        {\"sigmaf\", \"962\"},  //greek small letter final sigma,U+03C2 ISOgrk3 -->\n-        {\"sigma\", \"963\"},  //greek small letter sigma,U+03C3 ISOgrk3 -->\n-        {\"tau\", \"964\"},  //greek small letter tau, U+03C4 ISOgrk3 -->\n-        {\"upsilon\", \"965\"},  //greek small letter upsilon,U+03C5 ISOgrk3 -->\n-        {\"phi\", \"966\"},  //greek small letter phi, U+03C6 ISOgrk3 -->\n-        {\"chi\", \"967\"},  //greek small letter chi, U+03C7 ISOgrk3 -->\n-        {\"psi\", \"968\"},  //greek small letter psi, U+03C8 ISOgrk3 -->\n-        {\"omega\", \"969\"},  //greek small letter omega,U+03C9 ISOgrk3 -->\n-        {\"thetasym\", \"977\"},  //greek small letter theta symbol,U+03D1 NEW -->\n-        {\"upsih\", \"978\"},  //greek upsilon with hook symbol,U+03D2 NEW -->\n-        {\"piv\", \"982\"},  //greek pi symbol, U+03D6 ISOgrk3 -->\n+        {\"Sigma\", \"931\"}, //greek capital letter sigma,U+03A3 ISOgrk3 -->\n+        {\"Tau\", \"932\"}, //greek capital letter tau, U+03A4 -->\n+        {\"Upsilon\", \"933\"}, //greek capital letter upsilon,U+03A5 ISOgrk3 -->\n+        {\"Phi\", \"934\"}, //greek capital letter phi,U+03A6 ISOgrk3 -->\n+        {\"Chi\", \"935\"}, //greek capital letter chi, U+03A7 -->\n+        {\"Psi\", \"936\"}, //greek capital letter psi,U+03A8 ISOgrk3 -->\n+        {\"Omega\", \"937\"}, //greek capital letter omega,U+03A9 ISOgrk3 -->\n+        {\"alpha\", \"945\"}, //greek small letter alpha,U+03B1 ISOgrk3 -->\n+        {\"beta\", \"946\"}, //greek small letter beta, U+03B2 ISOgrk3 -->\n+        {\"gamma\", \"947\"}, //greek small letter gamma,U+03B3 ISOgrk3 -->\n+        {\"delta\", \"948\"}, //greek small letter delta,U+03B4 ISOgrk3 -->\n+        {\"epsilon\", \"949\"}, //greek small letter epsilon,U+03B5 ISOgrk3 -->\n+        {\"zeta\", \"950\"}, //greek small letter zeta, U+03B6 ISOgrk3 -->\n+        {\"eta\", \"951\"}, //greek small letter eta, U+03B7 ISOgrk3 -->\n+        {\"theta\", \"952\"}, //greek small letter theta,U+03B8 ISOgrk3 -->\n+        {\"iota\", \"953\"}, //greek small letter iota, U+03B9 ISOgrk3 -->\n+        {\"kappa\", \"954\"}, //greek small letter kappa,U+03BA ISOgrk3 -->\n+        {\"lambda\", \"955\"}, //greek small letter lambda,U+03BB ISOgrk3 -->\n+        {\"mu\", \"956\"}, //greek small letter mu, U+03BC ISOgrk3 -->\n+        {\"nu\", \"957\"}, //greek small letter nu, U+03BD ISOgrk3 -->\n+        {\"xi\", \"958\"}, //greek small letter xi, U+03BE ISOgrk3 -->\n+        {\"omicron\", \"959\"}, //greek small letter omicron, U+03BF NEW -->\n+        {\"pi\", \"960\"}, //greek small letter pi, U+03C0 ISOgrk3 -->\n+        {\"rho\", \"961\"}, //greek small letter rho, U+03C1 ISOgrk3 -->\n+        {\"sigmaf\", \"962\"}, //greek small letter final sigma,U+03C2 ISOgrk3 -->\n+        {\"sigma\", \"963\"}, //greek small letter sigma,U+03C3 ISOgrk3 -->\n+        {\"tau\", \"964\"}, //greek small letter tau, U+03C4 ISOgrk3 -->\n+        {\"upsilon\", \"965\"}, //greek small letter upsilon,U+03C5 ISOgrk3 -->\n+        {\"phi\", \"966\"}, //greek small letter phi, U+03C6 ISOgrk3 -->\n+        {\"chi\", \"967\"}, //greek small letter chi, U+03C7 ISOgrk3 -->\n+        {\"psi\", \"968\"}, //greek small letter psi, U+03C8 ISOgrk3 -->\n+        {\"omega\", \"969\"}, //greek small letter omega,U+03C9 ISOgrk3 -->\n+        {\"thetasym\", \"977\"}, //greek small letter theta symbol,U+03D1 NEW -->\n+        {\"upsih\", \"978\"}, //greek upsilon with hook symbol,U+03D2 NEW -->\n+        {\"piv\", \"982\"}, //greek pi symbol, U+03D6 ISOgrk3 -->\n // <!-- General Punctuation -->\n-        {\"bull\", \"8226\"},  //bullet = black small circle,U+2022 ISOpub  -->\n+        {\"bull\", \"8226\"}, //bullet = black small circle,U+2022 ISOpub  -->\n // <!-- bullet is NOT the same as bullet operator, U+2219 -->\n-        {\"hellip\", \"8230\"},  //horizontal ellipsis = three dot leader,U+2026 ISOpub  -->\n-        {\"prime\", \"8242\"},  //prime = minutes = feet, U+2032 ISOtech -->\n-        {\"Prime\", \"8243\"},  //double prime = seconds = inches,U+2033 ISOtech -->\n-        {\"oline\", \"8254\"},  //overline = spacing overscore,U+203E NEW -->\n-        {\"frasl\", \"8260\"},  //fraction slash, U+2044 NEW -->\n+        {\"hellip\", \"8230\"}, //horizontal ellipsis = three dot leader,U+2026 ISOpub  -->\n+        {\"prime\", \"8242\"}, //prime = minutes = feet, U+2032 ISOtech -->\n+        {\"Prime\", \"8243\"}, //double prime = seconds = inches,U+2033 ISOtech -->\n+        {\"oline\", \"8254\"}, //overline = spacing overscore,U+203E NEW -->\n+        {\"frasl\", \"8260\"}, //fraction slash, U+2044 NEW -->\n // <!-- Letterlike Symbols -->\n-        {\"weierp\", \"8472\"},  //script capital P = power set= Weierstrass p, U+2118 ISOamso -->\n-        {\"image\", \"8465\"},  //blackletter capital I = imaginary part,U+2111 ISOamso -->\n-        {\"real\", \"8476\"},  //blackletter capital R = real part symbol,U+211C ISOamso -->\n-        {\"trade\", \"8482\"},  //trade mark sign, U+2122 ISOnum -->\n-        {\"alefsym\", \"8501\"},  //alef symbol = first transfinite cardinal,U+2135 NEW -->\n+        {\"weierp\", \"8472\"}, //script capital P = power set= Weierstrass p, U+2118 ISOamso -->\n+        {\"image\", \"8465\"}, //blackletter capital I = imaginary part,U+2111 ISOamso -->\n+        {\"real\", \"8476\"}, //blackletter capital R = real part symbol,U+211C ISOamso -->\n+        {\"trade\", \"8482\"}, //trade mark sign, U+2122 ISOnum -->\n+        {\"alefsym\", \"8501\"}, //alef symbol = first transfinite cardinal,U+2135 NEW -->\n // <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the same glyph could be used to depict both characters -->\n // <!-- Arrows -->\n-        {\"larr\", \"8592\"},  //leftwards arrow, U+2190 ISOnum -->\n-        {\"uarr\", \"8593\"},  //upwards arrow, U+2191 ISOnum-->\n-        {\"rarr\", \"8594\"},  //rightwards arrow, U+2192 ISOnum -->\n-        {\"darr\", \"8595\"},  //downwards arrow, U+2193 ISOnum -->\n-        {\"harr\", \"8596\"},  //left right arrow, U+2194 ISOamsa -->\n-        {\"crarr\", \"8629\"},  //downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->\n-        {\"lArr\", \"8656\"},  //leftwards double arrow, U+21D0 ISOtech -->\n+        {\"larr\", \"8592\"}, //leftwards arrow, U+2190 ISOnum -->\n+        {\"uarr\", \"8593\"}, //upwards arrow, U+2191 ISOnum-->\n+        {\"rarr\", \"8594\"}, //rightwards arrow, U+2192 ISOnum -->\n+        {\"darr\", \"8595\"}, //downwards arrow, U+2193 ISOnum -->\n+        {\"harr\", \"8596\"}, //left right arrow, U+2194 ISOamsa -->\n+        {\"crarr\", \"8629\"}, //downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->\n+        {\"lArr\", \"8656\"}, //leftwards double arrow, U+21D0 ISOtech -->\n // <!-- ISO 10646 does not say that lArr is the same as the 'is implied by' arrowbut also does not have any other character for that function. So ? lArr canbe used for 'is implied by' as ISOtech suggests -->\n-        {\"uArr\", \"8657\"},  //upwards double arrow, U+21D1 ISOamsa -->\n-        {\"rArr\", \"8658\"},  //rightwards double arrow,U+21D2 ISOtech -->\n+        {\"uArr\", \"8657\"}, //upwards double arrow, U+21D1 ISOamsa -->\n+        {\"rArr\", \"8658\"}, //rightwards double arrow,U+21D2 ISOtech -->\n // <!-- ISO 10646 does not say this is the 'implies' character but does not have another character with this function so ?rArr can be used for 'implies' as ISOtech suggests -->\n-        {\"dArr\", \"8659\"},  //downwards double arrow, U+21D3 ISOamsa -->\n-        {\"hArr\", \"8660\"},  //left right double arrow,U+21D4 ISOamsa -->\n+        {\"dArr\", \"8659\"}, //downwards double arrow, U+21D3 ISOamsa -->\n+        {\"hArr\", \"8660\"}, //left right double arrow,U+21D4 ISOamsa -->\n // <!-- Mathematical Operators -->\n-        {\"forall\", \"8704\"},  //for all, U+2200 ISOtech -->\n-        {\"part\", \"8706\"},  //partial differential, U+2202 ISOtech  -->\n-        {\"exist\", \"8707\"},  //there exists, U+2203 ISOtech -->\n-        {\"empty\", \"8709\"},  //empty set = null set = diameter,U+2205 ISOamso -->\n-        {\"nabla\", \"8711\"},  //nabla = backward difference,U+2207 ISOtech -->\n-        {\"isin\", \"8712\"},  //element of, U+2208 ISOtech -->\n-        {\"notin\", \"8713\"},  //not an element of, U+2209 ISOtech -->\n-        {\"ni\", \"8715\"},  //contains as member, U+220B ISOtech -->\n+        {\"forall\", \"8704\"}, //for all, U+2200 ISOtech -->\n+        {\"part\", \"8706\"}, //partial differential, U+2202 ISOtech  -->\n+        {\"exist\", \"8707\"}, //there exists, U+2203 ISOtech -->\n+        {\"empty\", \"8709\"}, //empty set = null set = diameter,U+2205 ISOamso -->\n+        {\"nabla\", \"8711\"}, //nabla = backward difference,U+2207 ISOtech -->\n+        {\"isin\", \"8712\"}, //element of, U+2208 ISOtech -->\n+        {\"notin\", \"8713\"}, //not an element of, U+2209 ISOtech -->\n+        {\"ni\", \"8715\"}, //contains as member, U+220B ISOtech -->\n // <!-- should there be a more memorable name than 'ni'? -->\n-        {\"prod\", \"8719\"},  //n-ary product = product sign,U+220F ISOamsb -->\n+        {\"prod\", \"8719\"}, //n-ary product = product sign,U+220F ISOamsb -->\n // <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' thoughthe same glyph might be used for both -->\n-        {\"sum\", \"8721\"},  //n-ary sumation, U+2211 ISOamsb -->\n+        {\"sum\", \"8721\"}, //n-ary sumation, U+2211 ISOamsb -->\n // <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'though the same glyph might be used for both -->\n-        {\"minus\", \"8722\"},  //minus sign, U+2212 ISOtech -->\n-        {\"lowast\", \"8727\"},  //asterisk operator, U+2217 ISOtech -->\n-        {\"radic\", \"8730\"},  //square root = radical sign,U+221A ISOtech -->\n-        {\"prop\", \"8733\"},  //proportional to, U+221D ISOtech -->\n-        {\"infin\", \"8734\"},  //infinity, U+221E ISOtech -->\n-        {\"ang\", \"8736\"},  //angle, U+2220 ISOamso -->\n-        {\"and\", \"8743\"},  //logical and = wedge, U+2227 ISOtech -->\n-        {\"or\", \"8744\"},  //logical or = vee, U+2228 ISOtech -->\n-        {\"cap\", \"8745\"},  //intersection = cap, U+2229 ISOtech -->\n-        {\"cup\", \"8746\"},  //union = cup, U+222A ISOtech -->\n-        {\"int\", \"8747\"},  //integral, U+222B ISOtech -->\n-        {\"there4\", \"8756\"},  //therefore, U+2234 ISOtech -->\n-        {\"sim\", \"8764\"},  //tilde operator = varies with = similar to,U+223C ISOtech -->\n+        {\"minus\", \"8722\"}, //minus sign, U+2212 ISOtech -->\n+        {\"lowast\", \"8727\"}, //asterisk operator, U+2217 ISOtech -->\n+        {\"radic\", \"8730\"}, //square root = radical sign,U+221A ISOtech -->\n+        {\"prop\", \"8733\"}, //proportional to, U+221D ISOtech -->\n+        {\"infin\", \"8734\"}, //infinity, U+221E ISOtech -->\n+        {\"ang\", \"8736\"}, //angle, U+2220 ISOamso -->\n+        {\"and\", \"8743\"}, //logical and = wedge, U+2227 ISOtech -->\n+        {\"or\", \"8744\"}, //logical or = vee, U+2228 ISOtech -->\n+        {\"cap\", \"8745\"}, //intersection = cap, U+2229 ISOtech -->\n+        {\"cup\", \"8746\"}, //union = cup, U+222A ISOtech -->\n+        {\"int\", \"8747\"}, //integral, U+222B ISOtech -->\n+        {\"there4\", \"8756\"}, //therefore, U+2234 ISOtech -->\n+        {\"sim\", \"8764\"}, //tilde operator = varies with = similar to,U+223C ISOtech -->\n // <!-- tilde operator is NOT the same character as the tilde, U+007E,although the same glyph might be used to represent both  -->\n-        {\"cong\", \"8773\"},  //approximately equal to, U+2245 ISOtech -->\n-        {\"asymp\", \"8776\"},  //almost equal to = asymptotic to,U+2248 ISOamsr -->\n-        {\"ne\", \"8800\"},  //not equal to, U+2260 ISOtech -->\n-        {\"equiv\", \"8801\"},  //identical to, U+2261 ISOtech -->\n-        {\"le\", \"8804\"},  //less-than or equal to, U+2264 ISOtech -->\n-        {\"ge\", \"8805\"},  //greater-than or equal to,U+2265 ISOtech -->\n-        {\"sub\", \"8834\"},  //subset of, U+2282 ISOtech -->\n-        {\"sup\", \"8835\"},  //superset of, U+2283 ISOtech -->\n+        {\"cong\", \"8773\"}, //approximately equal to, U+2245 ISOtech -->\n+        {\"asymp\", \"8776\"}, //almost equal to = asymptotic to,U+2248 ISOamsr -->\n+        {\"ne\", \"8800\"}, //not equal to, U+2260 ISOtech -->\n+        {\"equiv\", \"8801\"}, //identical to, U+2261 ISOtech -->\n+        {\"le\", \"8804\"}, //less-than or equal to, U+2264 ISOtech -->\n+        {\"ge\", \"8805\"}, //greater-than or equal to,U+2265 ISOtech -->\n+        {\"sub\", \"8834\"}, //subset of, U+2282 ISOtech -->\n+        {\"sup\", \"8835\"}, //superset of, U+2283 ISOtech -->\n // <!-- note that nsup, 'not a superset of, U+2283' is not covered by the Symbol font encoding and is not included. Should it be, for symmetry?It is in ISOamsn  --> <!ENTITY nsub\", \"8836\"},  //not a subset of, U+2284 ISOamsn -->\n-        {\"sube\", \"8838\"},  //subset of or equal to, U+2286 ISOtech -->\n-        {\"supe\", \"8839\"},  //superset of or equal to,U+2287 ISOtech -->\n-        {\"oplus\", \"8853\"},  //circled plus = direct sum,U+2295 ISOamsb -->\n-        {\"otimes\", \"8855\"},  //circled times = vector product,U+2297 ISOamsb -->\n-        {\"perp\", \"8869\"},  //up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->\n-        {\"sdot\", \"8901\"},  //dot operator, U+22C5 ISOamsb -->\n+        {\"sube\", \"8838\"}, //subset of or equal to, U+2286 ISOtech -->\n+        {\"supe\", \"8839\"}, //superset of or equal to,U+2287 ISOtech -->\n+        {\"oplus\", \"8853\"}, //circled plus = direct sum,U+2295 ISOamsb -->\n+        {\"otimes\", \"8855\"}, //circled times = vector product,U+2297 ISOamsb -->\n+        {\"perp\", \"8869\"}, //up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->\n+        {\"sdot\", \"8901\"}, //dot operator, U+22C5 ISOamsb -->\n // <!-- dot operator is NOT the same character as U+00B7 middle dot -->\n // <!-- Miscellaneous Technical -->\n-        {\"lceil\", \"8968\"},  //left ceiling = apl upstile,U+2308 ISOamsc  -->\n-        {\"rceil\", \"8969\"},  //right ceiling, U+2309 ISOamsc  -->\n-        {\"lfloor\", \"8970\"},  //left floor = apl downstile,U+230A ISOamsc  -->\n-        {\"rfloor\", \"8971\"},  //right floor, U+230B ISOamsc  -->\n-        {\"lang\", \"9001\"},  //left-pointing angle bracket = bra,U+2329 ISOtech -->\n+        {\"lceil\", \"8968\"}, //left ceiling = apl upstile,U+2308 ISOamsc  -->\n+        {\"rceil\", \"8969\"}, //right ceiling, U+2309 ISOamsc  -->\n+        {\"lfloor\", \"8970\"}, //left floor = apl downstile,U+230A ISOamsc  -->\n+        {\"rfloor\", \"8971\"}, //right floor, U+230B ISOamsc  -->\n+        {\"lang\", \"9001\"}, //left-pointing angle bracket = bra,U+2329 ISOtech -->\n // <!-- lang is NOT the same character as U+003C 'less than' or U+2039 'single left-pointing angle quotation mark' -->\n-        {\"rang\", \"9002\"},  //right-pointing angle bracket = ket,U+232A ISOtech -->\n+        {\"rang\", \"9002\"}, //right-pointing angle bracket = ket,U+232A ISOtech -->\n // <!-- rang is NOT the same character as U+003E 'greater than' or U+203A 'single right-pointing angle quotation mark' -->\n // <!-- Geometric Shapes -->\n-        {\"loz\", \"9674\"},  //lozenge, U+25CA ISOpub -->\n+        {\"loz\", \"9674\"}, //lozenge, U+25CA ISOpub -->\n // <!-- Miscellaneous Symbols -->\n-        {\"spades\", \"9824\"},  //black spade suit, U+2660 ISOpub -->\n+        {\"spades\", \"9824\"}, //black spade suit, U+2660 ISOpub -->\n // <!-- black here seems to mean filled as opposed to hollow -->\n-        {\"clubs\", \"9827\"},  //black club suit = shamrock,U+2663 ISOpub -->\n-        {\"hearts\", \"9829\"},  //black heart suit = valentine,U+2665 ISOpub -->\n-        {\"diams\", \"9830\"},  //black diamond suit, U+2666 ISOpub -->\n+        {\"clubs\", \"9827\"}, //black club suit = shamrock,U+2663 ISOpub -->\n+        {\"hearts\", \"9829\"}, //black heart suit = valentine,U+2665 ISOpub -->\n+        {\"diams\", \"9830\"}, //black diamond suit, U+2666 ISOpub -->\n \n // <!-- Latin Extended-A -->\n-        {\"OElig\", \"338\"},  //  -- latin capital ligature OE,U+0152 ISOlat2 -->\n-        {\"oelig\", \"339\"},  //  -- latin small ligature oe, U+0153 ISOlat2 -->\n+        {\"OElig\", \"338\"}, //  -- latin capital ligature OE,U+0152 ISOlat2 -->\n+        {\"oelig\", \"339\"}, //  -- latin small ligature oe, U+0153 ISOlat2 -->\n // <!-- ligature is a misnomer, this is a separate character in some languages -->\n-        {\"Scaron\", \"352\"},  //  -- latin capital letter S with caron,U+0160 ISOlat2 -->\n-        {\"scaron\", \"353\"},  //  -- latin small letter s with caron,U+0161 ISOlat2 -->\n-        {\"Yuml\", \"376\"},  //  -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->\n+        {\"Scaron\", \"352\"}, //  -- latin capital letter S with caron,U+0160 ISOlat2 -->\n+        {\"scaron\", \"353\"}, //  -- latin small letter s with caron,U+0161 ISOlat2 -->\n+        {\"Yuml\", \"376\"}, //  -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->\n // <!-- Spacing Modifier Letters -->\n-        {\"circ\", \"710\"},  //  -- modifier letter circumflex accent,U+02C6 ISOpub -->\n-        {\"tilde\", \"732\"},  //small tilde, U+02DC ISOdia -->\n+        {\"circ\", \"710\"}, //  -- modifier letter circumflex accent,U+02C6 ISOpub -->\n+        {\"tilde\", \"732\"}, //small tilde, U+02DC ISOdia -->\n // <!-- General Punctuation -->\n-        {\"ensp\", \"8194\"},  //en space, U+2002 ISOpub -->\n-        {\"emsp\", \"8195\"},  //em space, U+2003 ISOpub -->\n-        {\"thinsp\", \"8201\"},  //thin space, U+2009 ISOpub -->\n-        {\"zwnj\", \"8204\"},  //zero width non-joiner,U+200C NEW RFC 2070 -->\n-        {\"zwj\", \"8205\"},  //zero width joiner, U+200D NEW RFC 2070 -->\n-        {\"lrm\", \"8206\"},  //left-to-right mark, U+200E NEW RFC 2070 -->\n-        {\"rlm\", \"8207\"},  //right-to-left mark, U+200F NEW RFC 2070 -->\n-        {\"ndash\", \"8211\"},  //en dash, U+2013 ISOpub -->\n-        {\"mdash\", \"8212\"},  //em dash, U+2014 ISOpub -->\n-        {\"lsquo\", \"8216\"},  //left single quotation mark,U+2018 ISOnum -->\n-        {\"rsquo\", \"8217\"},  //right single quotation mark,U+2019 ISOnum -->\n-        {\"sbquo\", \"8218\"},  //single low-9 quotation mark, U+201A NEW -->\n-        {\"ldquo\", \"8220\"},  //left double quotation mark,U+201C ISOnum -->\n-        {\"rdquo\", \"8221\"},  //right double quotation mark,U+201D ISOnum -->\n-        {\"bdquo\", \"8222\"},  //double low-9 quotation mark, U+201E NEW -->\n-        {\"dagger\", \"8224\"},  //dagger, U+2020 ISOpub -->\n-        {\"Dagger\", \"8225\"},  //double dagger, U+2021 ISOpub -->\n-        {\"permil\", \"8240\"},  //per mille sign, U+2030 ISOtech -->\n-        {\"lsaquo\", \"8249\"},  //single left-pointing angle quotation mark,U+2039 ISO proposed -->\n+        {\"ensp\", \"8194\"}, //en space, U+2002 ISOpub -->\n+        {\"emsp\", \"8195\"}, //em space, U+2003 ISOpub -->\n+        {\"thinsp\", \"8201\"}, //thin space, U+2009 ISOpub -->\n+        {\"zwnj\", \"8204\"}, //zero width non-joiner,U+200C NEW RFC 2070 -->\n+        {\"zwj\", \"8205\"}, //zero width joiner, U+200D NEW RFC 2070 -->\n+        {\"lrm\", \"8206\"}, //left-to-right mark, U+200E NEW RFC 2070 -->\n+        {\"rlm\", \"8207\"}, //right-to-left mark, U+200F NEW RFC 2070 -->\n+        {\"ndash\", \"8211\"}, //en dash, U+2013 ISOpub -->\n+        {\"mdash\", \"8212\"}, //em dash, U+2014 ISOpub -->\n+        {\"lsquo\", \"8216\"}, //left single quotation mark,U+2018 ISOnum -->\n+        {\"rsquo\", \"8217\"}, //right single quotation mark,U+2019 ISOnum -->\n+        {\"sbquo\", \"8218\"}, //single low-9 quotation mark, U+201A NEW -->\n+        {\"ldquo\", \"8220\"}, //left double quotation mark,U+201C ISOnum -->\n+        {\"rdquo\", \"8221\"}, //right double quotation mark,U+201D ISOnum -->\n+        {\"bdquo\", \"8222\"}, //double low-9 quotation mark, U+201E NEW -->\n+        {\"dagger\", \"8224\"}, //dagger, U+2020 ISOpub -->\n+        {\"Dagger\", \"8225\"}, //double dagger, U+2021 ISOpub -->\n+        {\"permil\", \"8240\"}, //per mille sign, U+2030 ISOtech -->\n+        {\"lsaquo\", \"8249\"}, //single left-pointing angle quotation mark,U+2039 ISO proposed -->\n // <!-- lsaquo is proposed but not yet ISO standardized -->\n-        {\"rsaquo\", \"8250\"},  //single right-pointing angle quotation mark,U+203A ISO proposed -->\n+        {\"rsaquo\", \"8250\"}, //single right-pointing angle quotation mark,U+203A ISO proposed -->\n // <!-- rsaquo is proposed but not yet ISO standardized -->\n-        {\"euro\", \"8364\"},   //  -- euro sign, U+20AC NEW -->\n-     };\n+        {\"euro\", \"8364\"}, //  -- euro sign, U+20AC NEW -->\n+    };\n \n     public static Entities XML;\n     public static Entities HTML32;\n         HTML40.addEntities(html40);\n     }\n \n-    //todo: refactor into a bi-di map object (or look for one and use it)\n-    private Map mapNameToValue;\n-    private Map mapValueToName;\n-\n-    private Entities() {\n-        mapNameToValue = new HashMap();\n-        mapValueToName = new HashMap();\n-    }\n-\n-    private void addEntities(Object[][] entityArray) {\n-        //todo: analyze whether it's more efficient to use strings or integers as the value\n+    static class IntMap {\n+        private Map mapNameToValue = new HashMap();\n+        private Map mapValueToName = new HashMap();\n+\n+        public void add(String name, int value) {\n+            mapNameToValue.put(name, new Integer(value));\n+            mapValueToName.put(new Integer(value), name);\n+        }\n+\n+        private String name(int value) {\n+            return (String) mapValueToName.get(new Integer(value));\n+        }\n+\n+        private int value(String name) {\n+            Object value = mapNameToValue.get(name);\n+            if (value == null)\n+                return -1;\n+            return ((Integer) value).intValue();\n+        }\n+    }\n+\n+    IntMap map = new IntMap();\n+\n+    public void addEntities(String[][] entityArray) {\n         for (int i = 0; i < entityArray.length; ++i) {\n-            mapNameToValue.put(entityArray[i][0], new Integer((String) entityArray[i][1]));\n-            mapValueToName.put(new Integer((String) entityArray[i][1]), entityArray[i][0]);\n+            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n         }\n     }\n \n+    public void addEntity(String name, int value) {\n+        map.add(name, value);\n+    }\n+\n     public String entityName(int value) {\n-        return (String) mapValueToName.get(new Integer(value));\n-    }\n-\n-    public Integer entityValue(String name) {\n-        return (Integer) mapNameToValue.get(name);\n-    }\n+        return map.name(value);\n+    }\n+\n+\n+    public int entityValue(String name) {\n+        return map.value(name);\n+    }\n+\n+    /**\n+     * Escapes the characters in a <code>String</code>.\n+     * For example, if you have called addEntity(\"foo\", 0xA1),\n+     * escape(\"\\u00A1\") will return \"&foo;\"\n+     *\n+     * @param str The <code>String</code> to escape.\n+     * @return A new escaped <code>String</code>.\n+     */\n+    public String escape(String str) {\n+        StringBuffer buf = new StringBuffer(str.length() * 2);\n+        int i;\n+        for (i = 0; i < str.length(); ++i) {\n+            char ch = str.charAt(i);\n+            String entityName = this.entityName(ch);\n+            if (entityName == null) {\n+                if (((int) ch) > 0x7F) {\n+                    int intValue = ((int) ch);\n+                    buf.append(\"&#\");\n+                    buf.append(intValue);\n+                    buf.append(';');\n+                } else {\n+                    buf.append(ch);\n+                }\n+            } else {\n+                buf.append('&');\n+                buf.append(entityName);\n+                buf.append(';');\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Unescapes the entities in a <code>String</code>.\n+     * For example, if you have called addEntity(\"foo\", 0xA1),\n+     * unescape(\"&foo;\") will return \"\\u00A1\"\n+     *\n+     * @param str The <code>String</code> to escape.\n+     * @return A new escaped <code>String</code>.\n+     */\n+    public String unescape(String str) {\n+        StringBuffer buf = new StringBuffer(str.length());\n+        int i;\n+        for (i = 0; i < str.length(); ++i) {\n+            char ch = str.charAt(i);\n+            if (ch == '&') {\n+                int semi = str.indexOf(';', i + 1);\n+                if (semi == -1) {\n+                    buf.append(ch);\n+                    continue;\n+                }\n+                String entityName = str.substring(i + 1, semi);\n+                int entityValue;\n+                if (entityName.charAt(0) == '#') {\n+                    entityValue = Integer.parseInt(entityName.substring(1));\n+                } else {\n+                    entityValue = this.entityValue(entityName);\n+                }\n+                if (entityValue == -1) {\n+                    buf.append('&');\n+                    buf.append(entityName);\n+                    buf.append(';');\n+                } else {\n+                    buf.append((char) (entityValue));\n+                }\n+                i = semi;\n+            } else {\n+                buf.append(ch);\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n }\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.11 2003/05/18 00:10:38 ggregory Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.12 2003/05/24 04:35:06 alex Exp $\n  */\n public class StringEscapeUtils {\n \n         return unescapeEntities(str, Entities.XML);\n     }\n \n-    /**\n-     * Escapes the characters in a <code>String</code> using the the given <code>Entities</code>.\n-     * \n-     * @param str The <code>String</code> to escape.\n-     * @param entities The <code>Entities</code> to escape the <code>String</code> with.\n-     * @return A new escaped <code>String</code>.\n-     */\n     private static String escapeEntities(String str, Entities entities) {\n-        StringBuffer buf = new StringBuffer(str.length() * 2);\n-        int i;\n-        for (i = 0; i < str.length(); ++i) {\n-            char ch = str.charAt(i);\n-            String entity = entities.entityName(ch);\n-            if (entity == null) {\n-                if (((int) ch) > 0x7F) {\n-                    int intValue = ((int) ch);\n-                    buf.append(\"&#\");\n-                    buf.append(intValue);\n-                    buf.append(';');\n-                } else {\n-                    buf.append(ch);\n-                }\n-            } else {\n-                buf.append('&');\n-                buf.append(entity);\n-                buf.append(';');\n-            }\n-        }\n-        return buf.toString();\n+        return entities.escape(str);\n     }\n \n     private static String unescapeEntities(String str, Entities entities) {\n-        StringBuffer buf = new StringBuffer(str.length());\n-        int i;\n-        for (i = 0; i < str.length(); ++i) {\n-            char ch = str.charAt(i);\n-            if (ch == '&') {\n-                int semi = str.indexOf(';', i + 1);\n-                if (semi == -1) {\n-                    buf.append(ch);\n-                    continue;\n-                }\n-                String entity = str.substring(i + 1, semi);\n-                Integer iso;\n-                if (entity.charAt(0) == '#') {\n-                    iso = new Integer(entity.substring(1));\n-                } else {\n-                    iso = entities.entityValue(entity);\n-                }\n-                if (iso == null) {\n-                    buf.append('&');\n-                    buf.append(entity);\n-                    buf.append(';');\n-                } else {\n-                    buf.append((char) (iso.intValue()));\n-                }\n-                i = semi;\n-            } else {\n-                buf.append(ch);\n-            }\n-        }\n-        return buf.toString();\n+        return entities.unescape(str);\n     }\n \n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/EntitiesTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.io.IOException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests for {@link StringEscapeUtils}.\n+ *\n+ * @author of original StringUtilsTest.testEscape = ?\n+ * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n+ * @version $Id: EntitiesTest.java,v 1.1 2003/05/24 04:35:07 alex Exp $\n+ */\n+public class EntitiesTest extends TestCase\n+{\n+\n+    Entities entities;\n+\n+    public void setUp()\n+    {\n+        entities = new Entities();\n+        entities.addEntity(\"foo\", 161);\n+        entities.addEntity(\"bar\", 162);\n+    }\n+\n+    public void testEscapeNamedEntity() throws Exception\n+    {\n+        assertEquals(\"&foo;\", entities.escape(\"\\u00A1\"));\n+        assertEquals(\"x&foo;\", entities.escape(\"x\\u00A1\"));\n+        assertEquals(\"&foo;x\", entities.escape(\"\\u00A1x\"));\n+        assertEquals(\"x&foo;x\", entities.escape(\"x\\u00A1x\"));\n+        assertEquals(\"&foo;&bar;\", entities.escape(\"\\u00A1\\u00A2\"));\n+    }\n+\n+    public void testUnescapeNamedEntity() throws Exception\n+    {\n+        assertEquals(\"\\u00A1\", entities.unescape(\"&foo;\"));\n+        assertEquals(\"x\\u00A1\", entities.unescape(\"x&foo;\"));\n+        assertEquals(\"\\u00A1x\", entities.unescape(\"&foo;x\"));\n+        assertEquals(\"x\\u00A1x\", entities.unescape(\"x&foo;x\"));\n+        assertEquals(\"\\u00A1\\u00A2\", entities.unescape(\"&foo;&bar;\"));\n+    }\n+\n+    public void testUnescapeUnknownEntity() throws Exception\n+    {\n+        assertEquals(\"&zzzz;\", entities.unescape(\"&zzzz;\"));\n+    }\n+\n+    public void testAddEntitiesArray() throws Exception\n+    {\n+        String[][] array = {{\"foo\", \"100\"}, {\"bar\", \"101\"}};\n+        Entities e = new Entities();\n+        e.addEntities(array);\n+        assertEquals(\"foo\", e.entityName(100));\n+        assertEquals(\"bar\", e.entityName(101));\n+        assertEquals(100, e.entityValue(\"foo\"));\n+        assertEquals(101, e.entityValue(\"bar\"));\n+    }\n+\n+    public void testEntitiesXmlObject() throws Exception\n+    {\n+        assertEquals(\"gt\", Entities.XML.entityName('>'));\n+        assertEquals((int) '>', Entities.XML.entityValue(\"gt\"));\n+        assertEquals(-1, Entities.XML.entityValue(\"xyzzy\"));\n+    }\n+}\n+\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.6 2003/05/16 22:08:31 scolebourne Exp $\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.7 2003/05/24 04:35:07 alex Exp $\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n \n     // HTML and XML\n     //--------------------------------------------------------------\n-\n-    public void testEntitiesObject() throws Exception\n-    {\n-        assertEquals(\"gt\", Entities.XML.entityName('>'));\n-        assertEquals(new Integer('>'), Entities.XML.entityValue(\"gt\"));\n-        assertEquals(null, Entities.XML.entityValue(\"xyzzy\"));\n-    }\n \n     String[][] htmlEscapes = {\n         {\"no escaping\", \"plain text\", \"plain text\"},", "timestamp": 1053750907, "metainfo": ""}