{"sha": "f72ef1d9979a08532cf20b06cea338e93802028d", "log": "Javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/VariableFormatter.java\n+++ b/src/java/org/apache/commons/lang/text/VariableFormatter.java\n  * valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);\n  * valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);\n  * String templateString = &quot;The ${animal} jumped over the ${target}.&quot;;\n- * VariableFormat vf = new VariableVormat(valuesMap);\n+ * VariableFormatter vf = new VariableFormatter(valuesMap);\n  * String resolvedString = cf.replace(templateString);\n  * </pre>\n  * \n     }\n \n     /**\n-     * A helper class for detecting variables in the source text. This class provides simple tokenizer functionality. It\n-     * splits input text into tokens for text, variables, and escaped variable start tokens.\n+     * A helper class for detecting variables in the source text.\n+     * This class provides simple tokenizer functionality. It splits input\n+     * text into tokens for text, variables, and escaped variable start tokens.\n      */\n     protected static class VariableParser {\n         /** Constant for the token type ESCAPED_VAR. */\n      * Definition of an interface for obtaining values for variables.\n      * </p>\n      * <p>\n-     * Objects implementing this interface can be passed to <code>VariableFormatter</code> as source for variables'\n-     * values. The interface is quite simple and defines only a single method for retrieving the value of a specified\n-     * value.\n+     * Objects implementing this interface can be passed to <code>VariableFormatter</code>\n+     * as source for the values of the variables. The interface is quite simple and defines\n+     * only a single method for retrieving the value of a specified value.\n      * </p>\n      */\n     public static interface VariableResolver {\n         /**\n-         * Returns the value of the specified variable. The variable's value can be an arbitrary object. If no variable\n-         * with the given name is known, an implementation should return <code>null</code>.\n+         * Returns the value of the specified variable. The variable's value\n+         * can be an arbitrary object. If no variable with the given name is known,\n+         * an implementation should return <code>null</code>.\n          * \n          * @param varName\n          *            the name of the searched variable\n     public static final String DEFAULT_SUFFIX = \"}\";\n \n     /**\n-     * Replaces the occurrences of all variables in the given source data by their current values obtained from the\n-     * passed in map.\n+     * Replaces the occurrences of all variables in the given source data by\n+     * their current values obtained from the passed in map.\n      * \n      * @param valueMap\n      *            the map with the values\n     }\n \n     /**\n-     * Replaces the occurrences of all variables in the given source data by their current values obtained from the\n-     * passed in map. This method allows to specifiy a custom variable prefix and suffix\n+     * Replaces the occurrences of all variables in the given source data by\n+     * their current values obtained from the passed in map. This method allows\n+     * to specifiy a custom variable prefix and suffix\n      * \n      * @param valueMap\n      *            the map with the values\n     }\n \n     /**\n-     * Replaces all variables in the given source data with values obtained from system properties.\n+     * Replaces all variables in the given source data with values obtained\n+     * from system properties.\n      * \n      * @param source\n      *            the source text\n     private String variableSuffix;\n \n     /**\n-     * Creates a new instance with defaults for variable prefix and suffix and the escaping character.\n+     * Creates a new instance with defaults for variable prefix and suffix\n+     * and the escaping character.\n      */\n     public VariableFormatter() {\n         this((VariableResolver) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n     }\n \n     /**\n-     * Creates a new instance and initializes it. Uses defaults for variable prefix and suffix and the escaping\n-     * character.\n+     * Creates a new instance and initializes it. Uses defaults for variable\n+     * prefix and suffix and the escaping character.\n      * \n      * @param valueMap\n      *            the map with the variables' values", "timestamp": 1152228246, "metainfo": ""}