{"sha": "23e1283e1e58399f3e7bee4d45945c5cc654956a", "log": "Add parse method that handles multiple patterns bug 30674   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  */\n package org.apache.commons.lang.time;\n \n+import java.text.ParseException;\n+import java.text.ParsePosition;\n+import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Iterator;\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.34 2004/10/16 17:43:05 scolebourne Exp $\n+ * @version $Id: DateUtils.java,v 1.35 2004/10/16 21:06:18 scolebourne Exp $\n  */\n public class DateUtils {\n     \n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                 cal1.getClass() == cal2.getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Parses a string representing a date by trying a variety of different parsers.</p>\n+     * \n+     * <p>The parse will try each parse pattern in turn.\n+     * A parse is only deemed sucessful if it parses the whole of the input string.\n+     * If no parse patterns match, a ParseException is thrown.</p>\n+     * \n+     * @param str  the date to parse, not null\n+     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null\n+     * @return the parsed date\n+     * @throws IllegalArgumentException if the date string or pattern array is null\n+     * @throws ParseException if none of the date patterns were suitable\n+     */\n+    public static Date parseDate(String str, String[] parsePatterns) throws ParseException {\n+        if (str == null || parsePatterns == null) {\n+            throw new IllegalArgumentException(\"Date and Patterns must not be null\");\n+        }\n+        \n+        SimpleDateFormat parser = null;\n+        ParsePosition pos = new ParsePosition(0);\n+        for (int i = 0; i < parsePatterns.length; i++) {\n+            if (i == 0) {\n+                parser = new SimpleDateFormat(parsePatterns[0]);\n+            } else {\n+                parser.applyPattern(parsePatterns[i]);\n+            }\n+            pos.setIndex(0);\n+            Date date = parser.parse(str, pos);\n+            if (date != null && pos.getIndex() == str.length()) {\n+                return date;\n+            }\n+        }\n+        throw new ParseException(\"Unable to parse the date: \" + str, -1);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.text.DateFormat;\n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n         assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n         try {\n             DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testParseDate() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\n+        String dateStr = \"1972-12-03\";\n+        String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};\n+        Date date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        dateStr = \"1972-338\";\n+        date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        dateStr = \"19721203\";\n+        date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        try {\n+            DateUtils.parseDate(\"PURPLE\", parsers);\n+            fail();\n+        } catch (ParseException ex) {}\n+        try {\n+            DateUtils.parseDate(\"197212AB\", parsers);\n+            fail();\n+        } catch (ParseException ex) {}\n+        try {\n+            DateUtils.parseDate(null, parsers);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.parseDate(dateStr, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }", "timestamp": 1097960778, "metainfo": ""}