{"sha": "ec8a8a5ca3353cd89b759d8ab45f621d0a2a2bb7", "log": "PR: http://issues.apache.org/bugzilla/show_bug.cgi?id=26876 [lang] Enum.equals does not handle different class loaders.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.23 2003/11/29 15:03:54 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.24 2004/02/12 00:45:09 ggregory Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n         } else if (other == null) {\n             return false;\n         } else if (other.getClass() == this.getClass()) {\n-            // shouldn't happen, but...\n+            // Ok to do a class cast to Enum here since the test above\n+            // guarantee both\n+            // classes are in the same class loader.\n             return iName.equals(((Enum) other).iName);\n-        } else if (((Enum) other).getEnumClass().getName().equals(getEnumClass().getName())) {\n-            // different classloaders\n+        } else {\n+            // This and other are in different class loaders, we must use reflection.\n             try {\n-                // try to avoid reflection\n-                return iName.equals(((Enum) other).iName);\n-\n-            } catch (ClassCastException ex) {\n-                // use reflection\n-                try {\n-                    Method mth = other.getClass().getMethod(\"getName\", null);\n-                    String name = (String) mth.invoke(other, null);\n-                    return iName.equals(name);\n-                } catch (NoSuchMethodException ex2) {\n-                    // ignore - should never happen\n-                } catch (IllegalAccessException ex2) {\n-                    // ignore - should never happen\n-                } catch (InvocationTargetException ex2) {\n-                    // ignore - should never happen\n-                }\n-                return false;\n+                Method mth = other.getClass().getMethod(\"getName\", null);\n+                String name = (String) mth.invoke(other, null);\n+                return iName.equals(name);\n+            } catch (NoSuchMethodException ex2) {\n+                // ignore - should never happen\n+            } catch (IllegalAccessException ex2) {\n+                // ignore - should never happen\n+            } catch (InvocationTargetException ex2) {\n+                // ignore - should never happen\n             }\n-        } else {\n             return false;\n         }\n     }\n-\n+    \n     /**\n      * <p>Returns a suitable hashCode for the enumeration.</p>\n      *\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  */\n package org.apache.commons.lang.enum;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n-\n import org.apache.commons.lang.SerializationUtils;\n \n /**\n  * Test cases for the {@link Enum} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: EnumTest.java,v 1.12 2003/11/29 15:03:54 scolebourne Exp $\n+ * @version $Id: EnumTest.java,v 1.13 2004/02/12 00:45:09 ggregory Exp $\n  */\n \n public final class EnumTest extends TestCase {\n         // are just extra references.\n     }\n \n+    public void testEqualsWithDifferentClassLoaders() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n+        // Sanity check:\n+        ColorEnum.RED.equals(ColorEnum.RED);\n+        assertNotNull(ColorEnum.class.getClassLoader());\n+        // set up:\n+        ClassLoader scl = ClassLoader.getSystemClassLoader();\n+        if (!(scl instanceof URLClassLoader)) {\n+            fail(\"Need a better test set up.\");\n+        }\n+        URLClassLoader urlScl = (URLClassLoader)scl;\n+        ClassLoader classLoader = URLClassLoader.newInstance(urlScl.getURLs(), null);\n+        assertNotNull(classLoader);\n+        assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n+        Class otherColorEnumClass = classLoader.loadClass(\"org.apache.commons.lang.enum.ColorEnum\");\n+        assertNotNull(otherColorEnumClass);\n+        assertNotNull(otherColorEnumClass.getClassLoader());\n+        assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));\n+        assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));\n+        Method method = otherColorEnumClass.getMethod(\"getEnum\", new Class[]{String.class});        \n+        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{\"Red\"});\n+        assertNotNull(enumObject);\n+        // the real test, part 1.\n+        try {\n+            ColorEnum testCase = (ColorEnum)enumObject;\n+            fail(\"Should have thrown a ClassCastException\");\n+        } catch (ClassCastException e) {\n+            // normal.\n+        }\n+        // the real test, part 2.\n+        assertEquals(\"The two objects should match even though they are from different class loaders\", ColorEnum.RED, enumObject);\n+    }\n+    \n+    public void testEqualsToWrongInstance() {\n+        ColorEnum.RED.equals(\"test\");\n+        ColorEnum.RED.equals(new Integer(1));\n+        ColorEnum.RED.equals(new Boolean(true));\n+        ColorEnum.RED.equals(new StringBuffer(\"test\"));\n+    }\n }", "timestamp": 1076546709, "metainfo": ""}