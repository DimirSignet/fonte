{"sha": "0511ae6de32c59f857cf12225d661bfc60e71e6b", "log": "Applying Chandrashekar M's patch to LANG-583, adding isNotEmpty(array) methods to ArrayUtils.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n         return false;\n     }\n \n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Checks if an array of Objects is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+     public static <T> boolean isNotEmpty(T[] array) {\n+         return (array != null && array.length != 0);\n+     }\n+\n+    /**\n+     * <p>Checks if an array of primitive longs is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(long[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive ints is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(int[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive shorts is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(short[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive chars is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(char[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive bytes is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(byte[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive doubles is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(double[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive floats is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(float[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive booleans is not empty or <code>not null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is not empty or <code>not null</code>\n+     *\n+     */\n+    public static boolean isNotEmpty(boolean[] array) {\n+        return (array != null && array.length != 0);\n+    }\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n         assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n     }\n     \n+   /**\n+     * Test for {@link ArrayUtils#isNotEmpty(java.lang.Object[])}.\n+     */\n+    public void testIsNotEmptyObject() {\n+        Object[] emptyArray = new Object[] {};\n+        Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n+        assertFalse(ArrayUtils.isNotEmpty((Object[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));\n+    }\n+\n+   /**\n+     * Tests for {@link ArrayUtils#isNotEmpty(long[])},\n+     * {@link ArrayUtils#isNotEmpty(int[])},\n+     * {@link ArrayUtils#isNotEmpty(short[])},\n+     * {@link ArrayUtils#isNotEmpty(char[])},\n+     * {@link ArrayUtils#isNotEmpty(byte[])},\n+     * {@link ArrayUtils#isNotEmpty(double[])},\n+     * {@link ArrayUtils#isNotEmpty(float[])} and\n+     * {@link ArrayUtils#isNotEmpty(boolean[])}.\n+     */\n+    public void testIsNotEmptyPrimitives() {\n+        long[] emptyLongArray = new long[] {};\n+        long[] notEmptyLongArray = new long[] { 1L };\n+        assertFalse(ArrayUtils.isNotEmpty((long[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));\n+\n+        int[] emptyIntArray = new int[] {};\n+        int[] notEmptyIntArray = new int[] { 1 };\n+        assertFalse(ArrayUtils.isNotEmpty((int[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));\n+\n+        short[] emptyShortArray = new short[] {};\n+        short[] notEmptyShortArray = new short[] { 1 };\n+        assertFalse(ArrayUtils.isNotEmpty((short[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));\n+\n+        char[] emptyCharArray = new char[] {};\n+        char[] notEmptyCharArray = new char[] { 1 };\n+        assertFalse(ArrayUtils.isNotEmpty((char[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));\n+\n+        byte[] emptyByteArray = new byte[] {};\n+        byte[] notEmptyByteArray = new byte[] { 1 };\n+        assertFalse(ArrayUtils.isNotEmpty((byte[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));\n+\n+        double[] emptyDoubleArray = new double[] {};\n+        double[] notEmptyDoubleArray = new double[] { 1.0 };\n+        assertFalse(ArrayUtils.isNotEmpty((double[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));\n+\n+        float[] emptyFloatArray = new float[] {};\n+        float[] notEmptyFloatArray = new float[] { 1.0F };\n+        assertFalse(ArrayUtils.isNotEmpty((float[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));\n+\n+        boolean[] emptyBooleanArray = new boolean[] {};\n+        boolean[] notEmptyBooleanArray = new boolean[] { true };\n+        assertFalse(ArrayUtils.isNotEmpty((boolean[])null));\n+        assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));\n+        assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));\n+    }\n     // ------------------------------------------------------------------------\n     public void testGetLength() {\n         assertEquals(0, ArrayUtils.getLength(null));", "timestamp": 1265181640, "metainfo": ""}