{"sha": "d71d913802e437002cce9e038de7645e8fa695cf", "log": "Add tolerance checking to indexOf methods bug 22091, from Tim O'Brien   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n+ * @author Tim O'Brien\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.21 2003/08/01 20:45:17 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.22 2003/08/03 23:29:19 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     }\n \n     /**\n+     * <p>Find the index of the given value within a given tolerance in the array.\n+     * This method will return the index of the first value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param tolerance tolerance of the search\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n+        return indexOf(array, valueToFind, 0, tolerance);\n+    }\n+\n+    /**\n      * <p>Find the index of the given value in the array starting at the given index.</p>\n      *\n      * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n-        if (array == null) {\n+        if (array == null || array.length == 0) {\n             return -1;\n         }\n         if (startIndex < 0) {\n     }\n \n     /**\n+     * <p>Find the index of the given value in the array starting at the given index.\n+     * This method will return the index of the first value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @param tolerance tolerance of the search\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n+        if (array == null || array.length == 0) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        double min = valueToFind - tolerance;\n+        double max = valueToFind + tolerance;\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (array[i] >= min && array[i] <= max) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n      * <p>Find the last index of the given value within the array.</p>\n      *\n      * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n     }\n \n     /**\n+     * <p>Find the last index of the given value within a given tolerance in the array.\n+     * This method will return the index of the last value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param tolerance tolerance of the search\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n+    }\n+\n+    /**\n      * <p>Find the last index of the given value in the array starting at the given index.</p>\n      *\n      * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n-        if (array == null) {\n+        if (array == null || array.length == 0) {\n             return -1;\n         }\n         if (startIndex < 0) {\n     }\n \n     /**\n+     * <p>Find the last index of the given value in the array starting at the given index.\n+     * This method will return the index of the last value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n+        if (array == null || array.length == 0) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        double min = valueToFind - tolerance;\n+        double max = valueToFind + tolerance;\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (array[i] >= min && array[i] <= max) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n+    /**\n+     * <p>Checks if a value falling within the given tolerance is in the\n+     * given array.  If the array contains a value within the inclusive range \n+     * defined by (value - tolerance) to (value + tolerance).</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array\n+     * is passed in.</p>\n+     *\n+     * @param array the array to search\n+     * @param valueToFind the value to find\n+     * @param tolerance the array contains the tolerance of the search.\n+     */\n+    public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n+        return (indexOf(array, valueToFind, 0, tolerance) != -1);\n+    }\n+\n     // float IndexOf\n     //-----------------------------------------------------------------------\n     /**\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n-        if (array == null) {\n+        if (array == null || array.length == 0) {\n             return -1;\n         }\n         if (startIndex < 0) {\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n-        if (array == null) {\n+        if (array == null || array.length == 0) {\n             return -1;\n         }\n         if (startIndex < 0) {\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n-        if (array == null) {\n+        if (array == null || array.length == 0) {\n             return -1;\n         }\n         if (startIndex < 0) {\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n-        if (array == null) {\n+        if (array == null || array.length == 0) {\n             return -1;\n         }\n         if (startIndex < 0) {\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Moritz Petersen\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n- * @version $Id: ArrayUtilsTest.java,v 1.11 2003/07/31 22:31:12 scolebourne Exp $\n+ * @author Tim O'Brien\n+ * @version $Id: ArrayUtilsTest.java,v 1.12 2003/08/03 23:29:19 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n     public void testIndexOfDouble() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n         assertEquals(0, ArrayUtils.indexOf(array, (double) 0));\n         assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n     }\n \n+    public void testIndexOfDoubleTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));\n+    }\n+\n     public void testIndexOfDoubleWithStartIndex() {\n         double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n+        array = new double[0];\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n         array = new double[] { 0, 1, 2, 3, 0 };\n         assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n     }\n+    \n+    public void testIndexOfDoubleWithStartIndexTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));\n+        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));\n+    }\n \n     public void testLastIndexOfDouble() {\n         double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n+        array = new double[0];\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n     }\n \n+    public void testLastIndexOfDoubleTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));\n+    }\n+\n     public void testLastIndexOfDoubleWithStartIndex() {\n         double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n+        array = new double[0];\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n         array = new double[] { 0, 1, 2, 3, 0 };\n         assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n     }\n \n+    public void testLastIndexOfDoubleWithStartIndexTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));\n+    }\n+\n     public void testContainsDouble() {\n         double[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (double) 1));\n         assertEquals(true, ArrayUtils.contains(array, (double) 3));\n         assertEquals(false, ArrayUtils.contains(array, (double) 99));\n     }\n+\n+    public void testContainsDoubleTolerance() {\n+        double[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n+        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n+    }\n     \n     //-----------------------------------------------------------------------\n     public void testIndexOfFloat() {\n         float[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n+        array = new float[0];\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n         array = new float[] { 0, 1, 2, 3, 0 };\n         assertEquals(0, ArrayUtils.indexOf(array, (float) 0));\n \n     public void testIndexOfFloatWithStartIndex() {\n         float[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n+        array = new float[0];\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n         array = new float[] { 0, 1, 2, 3, 0 };\n         assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));\n     public void testLastIndexOfFloat() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n+        array = new float[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n         array = new float[] { 0, 1, 2, 3, 0 };\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));\n         assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));\n \n     public void testLastIndexOfFloatWithStartIndex() {\n         float[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n+        array = new float[0];\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n         array = new float[] { 0, 1, 2, 3, 0 };\n         assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n     public void testIndexOfBoolean() {\n         boolean[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, true));\n+        array = new boolean[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, true));\n         array = new boolean[] { true, false, true };\n         assertEquals(0, ArrayUtils.indexOf(array, true));\n         assertEquals(1, ArrayUtils.indexOf(array, false));\n \n     public void testIndexOfBooleanWithStartIndex() {\n         boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n+        array = new boolean[0];\n         assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n         array = new boolean[] { true, false, true };\n         assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n     public void testLastIndexOfBoolean() {\n         boolean[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n+        array = new boolean[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n         array = new boolean[] { true, false, true };\n         assertEquals(2, ArrayUtils.lastIndexOf(array, true));\n         assertEquals(1, ArrayUtils.lastIndexOf(array, false));\n \n     public void testLastIndexOfBooleanWithStartIndex() {\n         boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n+        array = new boolean[0];\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n         array = new boolean[] { true, false, true };\n         assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));", "timestamp": 1059953359, "metainfo": ""}