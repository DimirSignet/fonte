{"sha": "6f72584cd4d8ab5cc55df62ea4d9b010fe20bbe5", "log": "Improve checkstyle report   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * </p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Enum.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.2 2002/08/31 10:51:02 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n     /**\n      * Enable the iterator to retain the source code order\n      */\n     private static class Entry {\n+        /** Map of Enum name to Enum */\n         final Map map = new HashMap(50);\n+        /** List of Enums in source code order */\n         final List list = new ArrayList(25);\n \n+        /**\n+         * Restrictive constructor\n+         */\n         private Entry() {\n         }\n     }\n     /**\n      * Handle the deserialization of the class to ensure that multiple\n      * copies are not wastefully created, or illegal enum types created.\n+     * @return the resolved object\n      */\n     protected Object readResolve() {\n         return Enum.getEnum(getClass(), getName());\n      * Identity is tested for first, so this method usually runs fast.\n      *\n      * @param other  the other object to compare for equality\n+     * @return true if the Enums are equal\n      */\n     public final boolean equals(Object other) {\n         if (other == this) {", "timestamp": 1030791062, "metainfo": ""}