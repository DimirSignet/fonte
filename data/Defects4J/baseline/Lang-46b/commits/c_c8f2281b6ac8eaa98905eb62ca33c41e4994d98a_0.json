{"sha": "c8f2281b6ac8eaa98905eb62ca33c41e4994d98a", "log": "Extracted Entities class (instead of inner class) Added support for full HTML 4.0 entity set Separated XML, ISO8859-1 (HTML 3.2), and HTML 4.0 entities inside Entities object Added escapeXml and unescapeXml public API methods Escape now uses entities for values 0x80 or greater (previously 0x100)   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/Entities.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n+//todo: unit test and make public\n+\n+/**\n+ * <p>HTML and XML entity utility class</p>\n+ *\n+ * <p>See\n+ * <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">WebMonkey</a>\n+ * <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2</a>\n+ * <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html</a>HTML 4.0</a>\n+ * </p>\n+ *\n+ * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n+ * @since 2.0\n+ * @version $Id: Entities.java,v 1.1 2003/04/09 20:55:32 alex Exp $\n+ */\n+class Entities {\n+\n+    static private Object[][] basic = {\n+        {\"quot\", \"34\"}, // \" - double-quote\n+        {\"amp\", \"38\"}, // & - ampersand\n+        {\"lt\", \"60\"}, // < - less-than\n+        {\"gt\", \"62\"}, // > - greater-than\n+    };\n+\n+    static private Object[][] iso8859_1 = {\n+        {\"nbsp\", \"160\"}, // non-breaking space\n+        {\"iexcl\", \"161\"}, //inverted exclamation mark\n+        {\"cent\", \"162\"}, //cent sign\n+        {\"pound\", \"163\"}, //pound sign\n+        {\"curren\", \"164\"}, //currency sign\n+        {\"yen\", \"165\"}, //yen sign = yuan sign\n+        {\"brvbar\", \"166\"}, //broken bar = broken vertical bar\n+        {\"sect\", \"167\"}, //section sign\n+        {\"uml\", \"168\"}, //diaeresis = spacing diaeresis\n+        {\"copy\", \"169\"}, //  - copyright sign\n+        {\"ordf\", \"170\"}, //feminine ordinal indicator\n+        {\"laquo\", \"171\"}, //left-pointing double angle quotation mark = left pointing guillemet\n+        {\"not\", \"172\"}, //not sign\n+        {\"shy\", \"173\"}, //soft hyphen = discretionary hyphen\n+        {\"reg\", \"174\"}, //  - registered trademark sign\n+        {\"macr\", \"175\"}, //macron = spacing macron = overline = APL overbar\n+        {\"deg\", \"176\"}, //degree sign\n+        {\"plusmn\", \"177\"}, //plus-minus sign = plus-or-minus sign\n+        {\"sup2\", \"178\"}, //superscript two = superscript digit two = squared\n+        {\"sup3\", \"179\"}, //superscript three = superscript digit three = cubed\n+        {\"acute\", \"180\"}, //acute accent = spacing acute\n+        {\"micro\", \"181\"}, //micro sign\n+        {\"para\", \"182\"}, //pilcrow sign = paragraph sign\n+        {\"middot\", \"183\"}, //middle dot = Georgian comma = Greek middle dot\n+        {\"cedil\", \"184\"}, //cedilla = spacing cedilla\n+        {\"sup1\", \"185\"}, //superscript one = superscript digit one\n+        {\"ordm\", \"186\"}, //masculine ordinal indicator\n+        {\"raquo\", \"187\"}, //right-pointing double angle quotation mark = right pointing guillemet\n+        {\"frac14\", \"188\"}, //vulgar fraction one quarter = fraction one quarter\n+        {\"frac12\", \"189\"}, //vulgar fraction one half = fraction one half\n+        {\"frac34\", \"190\"}, //vulgar fraction three quarters = fraction three quarters\n+        {\"iquest\", \"191\"}, //inverted question mark = turned question mark\n+        {\"Agrave\", \"192\"}, //  - uppercase A, grave accent\n+        {\"Aacute\", \"193\"}, //  - uppercase A, acute accent\n+        {\"Acirc\", \"194\"}, //  - uppercase A, circumflex accent\n+        {\"Atilde\", \"195\"}, //  - uppercase A, tilde\n+        {\"Auml\", \"196\"}, //  - uppercase A, umlaut\n+        {\"Aring\", \"197\"}, //  - uppercase A, ring\n+        {\"AElig\", \"198\"}, //  - uppercase AE\n+        {\"Ccedil\", \"199\"}, //  - uppercase C, cedilla\n+        {\"Egrave\", \"200\"}, //  - uppercase E, grave accent\n+        {\"Eacute\", \"201\"}, //  - uppercase E, acute accent\n+        {\"Ecirc\", \"202\"}, //  - uppercase E, circumflex accent\n+        {\"Euml\", \"203\"}, //  - uppercase E, umlaut\n+        {\"Igrave\", \"204\"}, //  - uppercase I, grave accent\n+        {\"Iacute\", \"205\"}, //  - uppercase I, acute accent\n+        {\"Icirc\", \"206\"}, //  - uppercase I, circumflex accent\n+        {\"Iuml\", \"207\"}, //  - uppercase I, umlaut\n+        {\"ETH\", \"208\"}, //  - uppercase Eth, Icelandic\n+        {\"Ntilde\", \"209\"}, //  - uppercase N, tilde\n+        {\"Ograve\", \"210\"}, //  - uppercase O, grave accent\n+        {\"Oacute\", \"211\"}, //  - uppercase O, acute accent\n+        {\"Ocirc\", \"212\"}, //  - uppercase O, circumflex accent\n+        {\"Otilde\", \"213\"}, //  - uppercase O, tilde\n+        {\"Ouml\", \"214\"}, //  - uppercase O, umlaut\n+        {\"times\", \"215\"}, //multiplication sign\n+        {\"Oslash\", \"216\"}, //  - uppercase O, slash\n+        {\"Ugrave\", \"217\"}, //  - uppercase U, grave accent\n+        {\"Uacute\", \"218\"}, //  - uppercase U, acute accent\n+        {\"Ucirc\", \"219\"}, //  - uppercase U, circumflex accent\n+        {\"Uuml\", \"220\"}, //  - uppercase U, umlaut\n+        {\"Yacute\", \"221\"}, //  - uppercase Y, acute accent\n+        {\"THORN\", \"222\"}, //  - uppercase THORN, Icelandic\n+        {\"szlig\", \"223\"}, //  - lowercase sharps, German\n+        {\"agrave\", \"224\"}, //  - lowercase a, grave accent\n+        {\"aacute\", \"225\"}, //  - lowercase a, acute accent\n+        {\"acirc\", \"226\"}, //  - lowercase a, circumflex accent\n+        {\"atilde\", \"227\"}, //  - lowercase a, tilde\n+        {\"auml\", \"228\"}, //  - lowercase a, umlaut\n+        {\"aring\", \"229\"}, //  - lowercase a, ring\n+        {\"aelig\", \"230\"}, //  - lowercase ae\n+        {\"ccedil\", \"231\"}, //  - lowercase c, cedilla\n+        {\"egrave\", \"232\"}, //  - lowercase e, grave accent\n+        {\"eacute\", \"233\"}, //  - lowercase e, acute accent\n+        {\"ecirc\", \"234\"}, //  - lowercase e, circumflex accent\n+        {\"euml\", \"235\"}, //  - lowercase e, umlaut\n+        {\"igrave\", \"236\"}, //  - lowercase i, grave accent\n+        {\"iacute\", \"237\"}, //  - lowercase i, acute accent\n+        {\"icirc\", \"238\"}, //  - lowercase i, circumflex accent\n+        {\"iuml\", \"239\"}, //  - lowercase i, umlaut\n+        {\"eth\", \"240\"}, //  - lowercase eth, Icelandic\n+        {\"ntilde\", \"241\"}, //  - lowercase n, tilde\n+        {\"ograve\", \"242\"}, //  - lowercase o, grave accent\n+        {\"oacute\", \"243\"}, //  - lowercase o, acute accent\n+        {\"ocirc\", \"244\"}, //  - lowercase o, circumflex accent\n+        {\"otilde\", \"245\"}, //  - lowercase o, tilde\n+        {\"ouml\", \"246\"}, //  - lowercase o, umlaut\n+        {\"divide\", \"247\"}, // division sign\n+        {\"oslash\", \"248\"}, //  - lowercase o, slash\n+        {\"ugrave\", \"249\"}, //  - lowercase u, grave accent\n+        {\"uacute\", \"250\"}, //  - lowercase u, acute accent\n+        {\"ucirc\", \"251\"}, //  - lowercase u, circumflex accent\n+        {\"uuml\", \"252\"}, //  - lowercase u, umlaut\n+        {\"yacute\", \"253\"}, //  - lowercase y, acute accent\n+        {\"thorn\", \"254\"}, //  - lowercase thorn, Icelandic\n+        {\"yuml\", \"255\"}, //  - lowercase y, umlaut\n+    };\n+\n+    // http://www.w3.org/TR/REC-html40/sgml/entities.html\n+    static Object[][] html40 = {\n+// <!-- Latin Extended-B -->\n+        {\"fnof\", \"402\"},  //latin small f with hook = function= florin, U+0192 ISOtech -->\n+// <!-- Greek -->\n+        {\"Alpha\", \"913\"},  //greek capital letter alpha, U+0391 -->\n+        {\"Beta\", \"914\"},  //greek capital letter beta, U+0392 -->\n+        {\"Gamma\", \"915\"},  //greek capital letter gamma,U+0393 ISOgrk3 -->\n+        {\"Delta\", \"916\"},  //greek capital letter delta,U+0394 ISOgrk3 -->\n+        {\"Epsilon\", \"917\"},  //greek capital letter epsilon, U+0395 -->\n+        {\"Zeta\", \"918\"},  //greek capital letter zeta, U+0396 -->\n+        {\"Eta\", \"919\"},  //greek capital letter eta, U+0397 -->\n+        {\"Theta\", \"920\"},  //greek capital letter theta,U+0398 ISOgrk3 -->\n+        {\"Iota\", \"921\"},  //greek capital letter iota, U+0399 -->\n+        {\"Kappa\", \"922\"},  //greek capital letter kappa, U+039A -->\n+        {\"Lambda\", \"923\"},  //greek capital letter lambda,U+039B ISOgrk3 -->\n+        {\"Mu\", \"924\"},  //greek capital letter mu, U+039C -->\n+        {\"Nu\", \"925\"},  //greek capital letter nu, U+039D -->\n+        {\"Xi\", \"926\"},  //greek capital letter xi, U+039E ISOgrk3 -->\n+        {\"Omicron\", \"927\"},  //greek capital letter omicron, U+039F -->\n+        {\"Pi\", \"928\"},  //greek capital letter pi, U+03A0 ISOgrk3 -->\n+        {\"Rho\", \"929\"},  //greek capital letter rho, U+03A1 -->\n+// <!-- there is no Sigmaf, and no U+03A2 character either -->\n+        {\"Sigma\", \"931\"},  //greek capital letter sigma,U+03A3 ISOgrk3 -->\n+        {\"Tau\", \"932\"},  //greek capital letter tau, U+03A4 -->\n+        {\"Upsilon\", \"933\"},  //greek capital letter upsilon,U+03A5 ISOgrk3 -->\n+        {\"Phi\", \"934\"},  //greek capital letter phi,U+03A6 ISOgrk3 -->\n+        {\"Chi\", \"935\"},  //greek capital letter chi, U+03A7 -->\n+        {\"Psi\", \"936\"},  //greek capital letter psi,U+03A8 ISOgrk3 -->\n+        {\"Omega\", \"937\"},  //greek capital letter omega,U+03A9 ISOgrk3 -->\n+        {\"alpha\", \"945\"},  //greek small letter alpha,U+03B1 ISOgrk3 -->\n+        {\"beta\", \"946\"},  //greek small letter beta, U+03B2 ISOgrk3 -->\n+        {\"gamma\", \"947\"},  //greek small letter gamma,U+03B3 ISOgrk3 -->\n+        {\"delta\", \"948\"},  //greek small letter delta,U+03B4 ISOgrk3 -->\n+        {\"epsilon\", \"949\"},  //greek small letter epsilon,U+03B5 ISOgrk3 -->\n+        {\"zeta\", \"950\"},  //greek small letter zeta, U+03B6 ISOgrk3 -->\n+        {\"eta\", \"951\"},  //greek small letter eta, U+03B7 ISOgrk3 -->\n+        {\"theta\", \"952\"},  //greek small letter theta,U+03B8 ISOgrk3 -->\n+        {\"iota\", \"953\"},  //greek small letter iota, U+03B9 ISOgrk3 -->\n+        {\"kappa\", \"954\"},  //greek small letter kappa,U+03BA ISOgrk3 -->\n+        {\"lambda\", \"955\"},  //greek small letter lambda,U+03BB ISOgrk3 -->\n+        {\"mu\", \"956\"},  //greek small letter mu, U+03BC ISOgrk3 -->\n+        {\"nu\", \"957\"},  //greek small letter nu, U+03BD ISOgrk3 -->\n+        {\"xi\", \"958\"},  //greek small letter xi, U+03BE ISOgrk3 -->\n+        {\"omicron\", \"959\"},  //greek small letter omicron, U+03BF NEW -->\n+        {\"pi\", \"960\"},  //greek small letter pi, U+03C0 ISOgrk3 -->\n+        {\"rho\", \"961\"},  //greek small letter rho, U+03C1 ISOgrk3 -->\n+        {\"sigmaf\", \"962\"},  //greek small letter final sigma,U+03C2 ISOgrk3 -->\n+        {\"sigma\", \"963\"},  //greek small letter sigma,U+03C3 ISOgrk3 -->\n+        {\"tau\", \"964\"},  //greek small letter tau, U+03C4 ISOgrk3 -->\n+        {\"upsilon\", \"965\"},  //greek small letter upsilon,U+03C5 ISOgrk3 -->\n+        {\"phi\", \"966\"},  //greek small letter phi, U+03C6 ISOgrk3 -->\n+        {\"chi\", \"967\"},  //greek small letter chi, U+03C7 ISOgrk3 -->\n+        {\"psi\", \"968\"},  //greek small letter psi, U+03C8 ISOgrk3 -->\n+        {\"omega\", \"969\"},  //greek small letter omega,U+03C9 ISOgrk3 -->\n+        {\"thetasym\", \"977\"},  //greek small letter theta symbol,U+03D1 NEW -->\n+        {\"upsih\", \"978\"},  //greek upsilon with hook symbol,U+03D2 NEW -->\n+        {\"piv\", \"982\"},  //greek pi symbol, U+03D6 ISOgrk3 -->\n+// <!-- General Punctuation -->\n+        {\"bull\", \"8226\"},  //bullet = black small circle,U+2022 ISOpub  -->\n+// <!-- bullet is NOT the same as bullet operator, U+2219 -->\n+        {\"hellip\", \"8230\"},  //horizontal ellipsis = three dot leader,U+2026 ISOpub  -->\n+        {\"prime\", \"8242\"},  //prime = minutes = feet, U+2032 ISOtech -->\n+        {\"Prime\", \"8243\"},  //double prime = seconds = inches,U+2033 ISOtech -->\n+        {\"oline\", \"8254\"},  //overline = spacing overscore,U+203E NEW -->\n+        {\"frasl\", \"8260\"},  //fraction slash, U+2044 NEW -->\n+// <!-- Letterlike Symbols -->\n+        {\"weierp\", \"8472\"},  //script capital P = power set= Weierstrass p, U+2118 ISOamso -->\n+        {\"image\", \"8465\"},  //blackletter capital I = imaginary part,U+2111 ISOamso -->\n+        {\"real\", \"8476\"},  //blackletter capital R = real part symbol,U+211C ISOamso -->\n+        {\"trade\", \"8482\"},  //trade mark sign, U+2122 ISOnum -->\n+        {\"alefsym\", \"8501\"},  //alef symbol = first transfinite cardinal,U+2135 NEW -->\n+// <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the same glyph could be used to depict both characters -->\n+// <!-- Arrows -->\n+        {\"larr\", \"8592\"},  //leftwards arrow, U+2190 ISOnum -->\n+        {\"uarr\", \"8593\"},  //upwards arrow, U+2191 ISOnum-->\n+        {\"rarr\", \"8594\"},  //rightwards arrow, U+2192 ISOnum -->\n+        {\"darr\", \"8595\"},  //downwards arrow, U+2193 ISOnum -->\n+        {\"harr\", \"8596\"},  //left right arrow, U+2194 ISOamsa -->\n+        {\"crarr\", \"8629\"},  //downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->\n+        {\"lArr\", \"8656\"},  //leftwards double arrow, U+21D0 ISOtech -->\n+// <!-- ISO 10646 does not say that lArr is the same as the 'is implied by' arrowbut also does not have any other character for that function. So ? lArr canbe used for 'is implied by' as ISOtech suggests -->\n+        {\"uArr\", \"8657\"},  //upwards double arrow, U+21D1 ISOamsa -->\n+        {\"rArr\", \"8658\"},  //rightwards double arrow,U+21D2 ISOtech -->\n+// <!-- ISO 10646 does not say this is the 'implies' character but does not have another character with this function so ?rArr can be used for 'implies' as ISOtech suggests -->\n+        {\"dArr\", \"8659\"},  //downwards double arrow, U+21D3 ISOamsa -->\n+        {\"hArr\", \"8660\"},  //left right double arrow,U+21D4 ISOamsa -->\n+// <!-- Mathematical Operators -->\n+        {\"forall\", \"8704\"},  //for all, U+2200 ISOtech -->\n+        {\"part\", \"8706\"},  //partial differential, U+2202 ISOtech  -->\n+        {\"exist\", \"8707\"},  //there exists, U+2203 ISOtech -->\n+        {\"empty\", \"8709\"},  //empty set = null set = diameter,U+2205 ISOamso -->\n+        {\"nabla\", \"8711\"},  //nabla = backward difference,U+2207 ISOtech -->\n+        {\"isin\", \"8712\"},  //element of, U+2208 ISOtech -->\n+        {\"notin\", \"8713\"},  //not an element of, U+2209 ISOtech -->\n+        {\"ni\", \"8715\"},  //contains as member, U+220B ISOtech -->\n+// <!-- should there be a more memorable name than 'ni'? -->\n+        {\"prod\", \"8719\"},  //n-ary product = product sign,U+220F ISOamsb -->\n+// <!-- prod is NOT the same character as U+03A0 'greek capital letter pi' thoughthe same glyph might be used for both -->\n+        {\"sum\", \"8721\"},  //n-ary sumation, U+2211 ISOamsb -->\n+// <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'though the same glyph might be used for both -->\n+        {\"minus\", \"8722\"},  //minus sign, U+2212 ISOtech -->\n+        {\"lowast\", \"8727\"},  //asterisk operator, U+2217 ISOtech -->\n+        {\"radic\", \"8730\"},  //square root = radical sign,U+221A ISOtech -->\n+        {\"prop\", \"8733\"},  //proportional to, U+221D ISOtech -->\n+        {\"infin\", \"8734\"},  //infinity, U+221E ISOtech -->\n+        {\"ang\", \"8736\"},  //angle, U+2220 ISOamso -->\n+        {\"and\", \"8743\"},  //logical and = wedge, U+2227 ISOtech -->\n+        {\"or\", \"8744\"},  //logical or = vee, U+2228 ISOtech -->\n+        {\"cap\", \"8745\"},  //intersection = cap, U+2229 ISOtech -->\n+        {\"cup\", \"8746\"},  //union = cup, U+222A ISOtech -->\n+        {\"int\", \"8747\"},  //integral, U+222B ISOtech -->\n+        {\"there4\", \"8756\"},  //therefore, U+2234 ISOtech -->\n+        {\"sim\", \"8764\"},  //tilde operator = varies with = similar to,U+223C ISOtech -->\n+// <!-- tilde operator is NOT the same character as the tilde, U+007E,although the same glyph might be used to represent both  -->\n+        {\"cong\", \"8773\"},  //approximately equal to, U+2245 ISOtech -->\n+        {\"asymp\", \"8776\"},  //almost equal to = asymptotic to,U+2248 ISOamsr -->\n+        {\"ne\", \"8800\"},  //not equal to, U+2260 ISOtech -->\n+        {\"equiv\", \"8801\"},  //identical to, U+2261 ISOtech -->\n+        {\"le\", \"8804\"},  //less-than or equal to, U+2264 ISOtech -->\n+        {\"ge\", \"8805\"},  //greater-than or equal to,U+2265 ISOtech -->\n+        {\"sub\", \"8834\"},  //subset of, U+2282 ISOtech -->\n+        {\"sup\", \"8835\"},  //superset of, U+2283 ISOtech -->\n+// <!-- note that nsup, 'not a superset of, U+2283' is not covered by the Symbol font encoding and is not included. Should it be, for symmetry?It is in ISOamsn  --> <!ENTITY nsub\", \"8836\"},  //not a subset of, U+2284 ISOamsn -->\n+        {\"sube\", \"8838\"},  //subset of or equal to, U+2286 ISOtech -->\n+        {\"supe\", \"8839\"},  //superset of or equal to,U+2287 ISOtech -->\n+        {\"oplus\", \"8853\"},  //circled plus = direct sum,U+2295 ISOamsb -->\n+        {\"otimes\", \"8855\"},  //circled times = vector product,U+2297 ISOamsb -->\n+        {\"perp\", \"8869\"},  //up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->\n+        {\"sdot\", \"8901\"},  //dot operator, U+22C5 ISOamsb -->\n+// <!-- dot operator is NOT the same character as U+00B7 middle dot -->\n+// <!-- Miscellaneous Technical -->\n+        {\"lceil\", \"8968\"},  //left ceiling = apl upstile,U+2308 ISOamsc  -->\n+        {\"rceil\", \"8969\"},  //right ceiling, U+2309 ISOamsc  -->\n+        {\"lfloor\", \"8970\"},  //left floor = apl downstile,U+230A ISOamsc  -->\n+        {\"rfloor\", \"8971\"},  //right floor, U+230B ISOamsc  -->\n+        {\"lang\", \"9001\"},  //left-pointing angle bracket = bra,U+2329 ISOtech -->\n+// <!-- lang is NOT the same character as U+003C 'less than' or U+2039 'single left-pointing angle quotation mark' -->\n+        {\"rang\", \"9002\"},  //right-pointing angle bracket = ket,U+232A ISOtech -->\n+// <!-- rang is NOT the same character as U+003E 'greater than' or U+203A 'single right-pointing angle quotation mark' -->\n+// <!-- Geometric Shapes -->\n+        {\"loz\", \"9674\"},  //lozenge, U+25CA ISOpub -->\n+// <!-- Miscellaneous Symbols -->\n+        {\"spades\", \"9824\"},  //black spade suit, U+2660 ISOpub -->\n+// <!-- black here seems to mean filled as opposed to hollow -->\n+        {\"clubs\", \"9827\"},  //black club suit = shamrock,U+2663 ISOpub -->\n+        {\"hearts\", \"9829\"},  //black heart suit = valentine,U+2665 ISOpub -->\n+        {\"diams\", \"9830\"},  //black diamond suit, U+2666 ISOpub -->\n+\n+// <!-- Latin Extended-A -->\n+        {\"OElig\", \"338\"},  //  -- latin capital ligature OE,U+0152 ISOlat2 -->\n+        {\"oelig\", \"339\"},  //  -- latin small ligature oe, U+0153 ISOlat2 -->\n+// <!-- ligature is a misnomer, this is a separate character in some languages -->\n+        {\"Scaron\", \"352\"},  //  -- latin capital letter S with caron,U+0160 ISOlat2 -->\n+        {\"scaron\", \"353\"},  //  -- latin small letter s with caron,U+0161 ISOlat2 -->\n+        {\"Yuml\", \"376\"},  //  -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->\n+// <!-- Spacing Modifier Letters -->\n+        {\"circ\", \"710\"},  //  -- modifier letter circumflex accent,U+02C6 ISOpub -->\n+        {\"tilde\", \"732\"},  //small tilde, U+02DC ISOdia -->\n+// <!-- General Punctuation -->\n+        {\"ensp\", \"8194\"},  //en space, U+2002 ISOpub -->\n+        {\"emsp\", \"8195\"},  //em space, U+2003 ISOpub -->\n+        {\"thinsp\", \"8201\"},  //thin space, U+2009 ISOpub -->\n+        {\"zwnj\", \"8204\"},  //zero width non-joiner,U+200C NEW RFC 2070 -->\n+        {\"zwj\", \"8205\"},  //zero width joiner, U+200D NEW RFC 2070 -->\n+        {\"lrm\", \"8206\"},  //left-to-right mark, U+200E NEW RFC 2070 -->\n+        {\"rlm\", \"8207\"},  //right-to-left mark, U+200F NEW RFC 2070 -->\n+        {\"ndash\", \"8211\"},  //en dash, U+2013 ISOpub -->\n+        {\"mdash\", \"8212\"},  //em dash, U+2014 ISOpub -->\n+        {\"lsquo\", \"8216\"},  //left single quotation mark,U+2018 ISOnum -->\n+        {\"rsquo\", \"8217\"},  //right single quotation mark,U+2019 ISOnum -->\n+        {\"sbquo\", \"8218\"},  //single low-9 quotation mark, U+201A NEW -->\n+        {\"ldquo\", \"8220\"},  //left double quotation mark,U+201C ISOnum -->\n+        {\"rdquo\", \"8221\"},  //right double quotation mark,U+201D ISOnum -->\n+        {\"bdquo\", \"8222\"},  //double low-9 quotation mark, U+201E NEW -->\n+        {\"dagger\", \"8224\"},  //dagger, U+2020 ISOpub -->\n+        {\"Dagger\", \"8225\"},  //double dagger, U+2021 ISOpub -->\n+        {\"permil\", \"8240\"},  //per mille sign, U+2030 ISOtech -->\n+        {\"lsaquo\", \"8249\"},  //single left-pointing angle quotation mark,U+2039 ISO proposed -->\n+// <!-- lsaquo is proposed but not yet ISO standardized -->\n+        {\"rsaquo\", \"8250\"},  //single right-pointing angle quotation mark,U+203A ISO proposed -->\n+// <!-- rsaquo is proposed but not yet ISO standardized -->\n+        {\"euro\", \"8364\"},   //  -- euro sign, U+20AC NEW -->\n+     };\n+\n+    public static Entities XML;\n+    public static Entities HTML32;\n+    public static Entities HTML40;\n+\n+    static {\n+        XML = new Entities();\n+        XML.addEntities(basic);\n+    }\n+\n+    static {\n+        HTML32 = new Entities();\n+        HTML32.addEntities(basic);\n+        HTML32.addEntities(iso8859_1);\n+    }\n+\n+    static {\n+        HTML40 = new Entities();\n+        HTML40.addEntities(basic);\n+        HTML40.addEntities(iso8859_1);\n+        HTML40.addEntities(html40);\n+    }\n+\n+    //todo: refactor into a bi-di map object (or look for one and use it)\n+    private Map mapNameToValue;\n+    private Map mapValueToName;\n+\n+    private Entities() {\n+        mapNameToValue = new HashMap();\n+        mapValueToName = new HashMap();\n+    }\n+\n+    private void addEntities(Object[][] entityArray) {\n+        //todo: analyze whether it's more efficient to use strings or integers as the value\n+        for (int i = 0; i < entityArray.length; ++i) {\n+            mapNameToValue.put(entityArray[i][0], new Integer((String) entityArray[i][1]));\n+            mapValueToName.put(new Integer((String) entityArray[i][1]), entityArray[i][0]);\n+        }\n+    }\n+\n+    public String entityName(int value) {\n+        return (String) mapValueToName.get(new Integer(value));\n+    }\n+\n+    public Integer entityValue(String name) {\n+        return (Integer) mapNameToValue.get(name);\n+    }\n+}\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author Helge Tesgaard\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.5 2003/04/09 18:45:28 alex Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.6 2003/04/09 20:55:32 alex Exp $\n  */\n public class StringEscapeUtils {\n+\n+    /**\n+     * The entity set to use when escaping and unescaping HTML\n+     */\n+    protected static Entities DEFAULT_ENTITIES = Entities.HTML40;\n \n     /**\n      * <p><code>StringEscapeUtils</code> instances should NOT be constructed in\n     // HTML and XML\n     //--------------------------------------------------------------------------\n \n-    private static class Entities {\n-        // see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n-        // see http://www.w3.org/TR/REC-html40/sgml/entities.html\n-        static Object[][] entities = {\n-            // {\"#39\", new Integer(39)},       // ' - apostrophe\n-            {\"quot\", new Integer(34)}, // \" - double-quote\n-            {\"amp\", new Integer(38)}, // & - ampersand\n-            {\"lt\", new Integer(60)}, // < - less-than\n-            {\"gt\", new Integer(62)}, // > - greater-than\n-            {\"nbsp\", new Integer(160)}, // non-breaking space\n-            {\"iexcl\", new Integer(161)}, //inverted exclamation mark\n-            {\"cent\", new Integer(162)}, //cent sign\n-            {\"pound\", new Integer(163)}, //pound sign\n-            {\"curren\", new Integer(164)}, //currency sign\n-            {\"yen\", new Integer(165)}, //yen sign = yuan sign\n-            {\"brvbar\", new Integer(166)}, //broken bar = broken vertical bar\n-            {\"sect\", new Integer(167)}, //section sign\n-            {\"uml\", new Integer(168)}, //diaeresis = spacing diaeresis\n-            {\"copy\", new Integer(169)}, //  - copyright sign\n-            {\"ordf\", new Integer(170)}, //feminine ordinal indicator\n-            {\"laquo\", new Integer(171)}, //left-pointing double angle quotation mark = left pointing guillemet\n-            {\"not\", new Integer(172)}, //not sign\n-            {\"shy\", new Integer(173)}, //soft hyphen = discretionary hyphen\n-            {\"reg\", new Integer(174)}, //  - registered trademark sign\n-            {\"macr\", new Integer(175)}, //macron = spacing macron = overline = APL overbar\n-            {\"deg\", new Integer(176)}, //degree sign\n-            {\"plusmn\", new Integer(177)}, //plus-minus sign = plus-or-minus sign\n-            {\"sup2\", new Integer(178)}, //superscript two = superscript digit two = squared\n-            {\"sup3\", new Integer(179)}, //superscript three = superscript digit three = cubed\n-            {\"acute\", new Integer(180)}, //acute accent = spacing acute\n-            {\"micro\", new Integer(181)}, //micro sign\n-            {\"para\", new Integer(182)}, //pilcrow sign = paragraph sign\n-            {\"middot\", new Integer(183)}, //middle dot = Georgian comma = Greek middle dot\n-            {\"cedil\", new Integer(184)}, //cedilla = spacing cedilla\n-            {\"sup1\", new Integer(185)}, //superscript one = superscript digit one\n-            {\"ordm\", new Integer(186)}, //masculine ordinal indicator\n-            {\"raquo\", new Integer(187)}, //right-pointing double angle quotation mark = right pointing guillemet\n-            {\"frac14\", new Integer(188)}, //vulgar fraction one quarter = fraction one quarter\n-            {\"frac12\", new Integer(189)}, //vulgar fraction one half = fraction one half\n-            {\"frac34\", new Integer(190)}, //vulgar fraction three quarters = fraction three quarters\n-            {\"iquest\", new Integer(191)}, //inverted question mark = turned question mark\n-            {\"Agrave\", new Integer(192)}, //  - uppercase A, grave accent\n-            {\"Aacute\", new Integer(193)}, //  - uppercase A, acute accent\n-            {\"Acirc\", new Integer(194)}, //  - uppercase A, circumflex accent\n-            {\"Atilde\", new Integer(195)}, //  - uppercase A, tilde\n-            {\"Auml\", new Integer(196)}, //  - uppercase A, umlaut\n-            {\"Aring\", new Integer(197)}, //  - uppercase A, ring\n-            {\"AElig\", new Integer(198)}, //  - uppercase AE\n-            {\"Ccedil\", new Integer(199)}, //  - uppercase C, cedilla\n-            {\"Egrave\", new Integer(200)}, //  - uppercase E, grave accent\n-            {\"Eacute\", new Integer(201)}, //  - uppercase E, acute accent\n-            {\"Ecirc\", new Integer(202)}, //  - uppercase E, circumflex accent\n-            {\"Euml\", new Integer(203)}, //  - uppercase E, umlaut\n-            {\"Igrave\", new Integer(204)}, //  - uppercase I, grave accent\n-            {\"Iacute\", new Integer(205)}, //  - uppercase I, acute accent\n-            {\"Icirc\", new Integer(206)}, //  - uppercase I, circumflex accent\n-            {\"Iuml\", new Integer(207)}, //  - uppercase I, umlaut\n-            {\"ETH\", new Integer(208)}, //  - uppercase Eth, Icelandic\n-            {\"Ntilde\", new Integer(209)}, //  - uppercase N, tilde\n-            {\"Ograve\", new Integer(210)}, //  - uppercase O, grave accent\n-            {\"Oacute\", new Integer(211)}, //  - uppercase O, acute accent\n-            {\"Ocirc\", new Integer(212)}, //  - uppercase O, circumflex accent\n-            {\"Otilde\", new Integer(213)}, //  - uppercase O, tilde\n-            {\"Ouml\", new Integer(214)}, //  - uppercase O, umlaut\n-            {\"times\", new Integer(215)}, //multiplication sign\n-            {\"Oslash\", new Integer(216)}, //  - uppercase O, slash\n-            {\"Ugrave\", new Integer(217)}, //  - uppercase U, grave accent\n-            {\"Uacute\", new Integer(218)}, //  - uppercase U, acute accent\n-            {\"Ucirc\", new Integer(219)}, //  - uppercase U, circumflex accent\n-            {\"Uuml\", new Integer(220)}, //  - uppercase U, umlaut\n-            {\"Yacute\", new Integer(221)}, //  - uppercase Y, acute accent\n-            {\"THORN\", new Integer(222)}, //  - uppercase THORN, Icelandic\n-            {\"szlig\", new Integer(223)}, //  - lowercase sharps, German\n-            {\"agrave\", new Integer(224)}, //  - lowercase a, grave accent\n-            {\"aacute\", new Integer(225)}, //  - lowercase a, acute accent\n-            {\"acirc\", new Integer(226)}, //  - lowercase a, circumflex accent\n-            {\"atilde\", new Integer(227)}, //  - lowercase a, tilde\n-            {\"auml\", new Integer(228)}, //  - lowercase a, umlaut\n-            {\"aring\", new Integer(229)}, //  - lowercase a, ring\n-            {\"aelig\", new Integer(230)}, //  - lowercase ae\n-            {\"ccedil\", new Integer(231)}, //  - lowercase c, cedilla\n-            {\"egrave\", new Integer(232)}, //  - lowercase e, grave accent\n-            {\"eacute\", new Integer(233)}, //  - lowercase e, acute accent\n-            {\"ecirc\", new Integer(234)}, //  - lowercase e, circumflex accent\n-            {\"euml\", new Integer(235)}, //  - lowercase e, umlaut\n-            {\"igrave\", new Integer(236)}, //  - lowercase i, grave accent\n-            {\"iacute\", new Integer(237)}, //  - lowercase i, acute accent\n-            {\"icirc\", new Integer(238)}, //  - lowercase i, circumflex accent\n-            {\"iuml\", new Integer(239)}, //  - lowercase i, umlaut\n-            {\"eth\", new Integer(240)}, //  - lowercase eth, Icelandic\n-            {\"ntilde\", new Integer(241)}, //  - lowercase n, tilde\n-            {\"ograve\", new Integer(242)}, //  - lowercase o, grave accent\n-            {\"oacute\", new Integer(243)}, //  - lowercase o, acute accent\n-            {\"ocirc\", new Integer(244)}, //  - lowercase o, circumflex accent\n-            {\"otilde\", new Integer(245)}, //  - lowercase o, tilde\n-            {\"ouml\", new Integer(246)}, //  - lowercase o, umlaut\n-            {\"divide\", new Integer(247)}, // division sign\n-            {\"oslash\", new Integer(248)}, //  - lowercase o, slash\n-            {\"ugrave\", new Integer(249)}, //  - lowercase u, grave accent\n-            {\"uacute\", new Integer(250)}, //  - lowercase u, acute accent\n-            {\"ucirc\", new Integer(251)}, //  - lowercase u, circumflex accent\n-            {\"uuml\", new Integer(252)}, //  - lowercase u, umlaut\n-            {\"yacute\", new Integer(253)}, //  - lowercase y, acute accent\n-            {\"thorn\", new Integer(254)}, //  - lowercase thorn, Icelandic\n-            {\"yuml\", new Integer(255)}, //  - lowercase y, umlaut\n-            {\"euro\", new Integer(8364)}, // Euro symbol\n-        };\n-\n-        private Map mapNameToValue;\n-        private Map mapValueToName;\n-\n-        public Entities() {\n-            mapNameToValue = new HashMap();\n-            mapValueToName = new HashMap();\n-            for (int i = 0; i < entities.length; ++i) {\n-                mapNameToValue.put(entities[i][0], entities[i][1]);\n-                mapValueToName.put(entities[i][1], entities[i][0]);\n-            }\n-        }\n-\n-        public String entityName(int value) {\n-            return (String) mapValueToName.get(new Integer(value));\n-        }\n-\n-        public Integer entityValue(String name) {\n-            return (Integer) mapNameToValue.get(name);\n-        }\n-    }\n-\n-    private static Entities entities;\n-\n-    private static void initEntities() {\n-        if (entities == null)\n-            entities = new Entities();\n-    }\n-\n-    private static String entityName(char ch) {\n-        initEntities();\n-        return entities.entityName(ch);\n-    }\n-\n-    private static Integer entityValue(String entity) {\n-        initEntities();\n-        return entities.entityValue(entity);\n-    }\n-\n     /**\n      * <p>Turns funky characters into HTML entity equivalents.</p>\n+     * <p>\n      * For example: <tt>\"bread\" & \"butter\"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n-     * Supports all known HTML entities, including funky accents. See the source code for more detail.\n-     * see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n+     * </p>\n+     * <p>Supports all known HTML 4.0 entities, including funky accents.\n+     * See the source code for more detail.\n+     * </p>\n+     * @see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n+     * @see Entities\n      * @see #unescapeHtml(String)\n      **/\n     public static String escapeHtml(String str) {\n+        return escapeEntities(str, Entities.HTML40);\n+    }\n+\n+    /**\n+     * Given a string containing entity escapes, returns a string\n+     * containing the actual Unicode characters corresponding to the\n+     * escapes.\n+     *\n+     * @see #escapeHtml(String)\n+     **/\n+    public static String unescapeHtml(String str) {\n+        return unescapeEntities(str, Entities.HTML40);\n+    }\n+\n+    /**\n+     * <p>Turns funky characters into XML entity equivalents.</p>\n+     * <p>\n+     * For example: <tt>\"bread\" & \"butter\"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n+     * </p>\n+     * <p>\n+     * Supports only the four basic XML entities (gt, lt, quot, amp).\n+     * Does not support DTDs or external entities.\n+     * </p>\n+     * @see #unescapeXml(java.lang.String)\n+     **/\n+    public static String escapeXml(String str) {\n+        return escapeEntities(str, Entities.XML);\n+    }\n+\n+    /**\n+     * <p>Given a string containing XML entity escapes, returns a string\n+     * containing the actual Unicode characters corresponding to the\n+     * escapes.\n+     * </p>\n+     * <p>\n+     * Supports only the four basic XML entities (gt, lt, quot, amp).\n+     * Does not support DTDs or external entities.\n+     * </p>\n+     *\n+     * @see #escapeXml(String)\n+     **/\n+    public static String unescapeXml(String str) {\n+        return unescapeEntities(str, Entities.XML);\n+    }\n+\n+    private static String escapeEntities(String str, Entities entities) {\n         StringBuffer buf = new StringBuffer(str.length() * 2);\n         int i;\n         for (i = 0; i < str.length(); ++i) {\n             char ch = str.charAt(i);\n-            String entity = entityName(ch);\n+            String entity = entities.entityName(ch);\n             if (entity == null) {\n-                if (((int) ch) > 128) {   // should this be 127 or 128?\n+                if (((int) ch) > 0x7F) {\n                     int intValue = ((int) ch);\n                     buf.append(\"&#\" + intValue + \";\");\n                 } else {\n         return buf.toString();\n     }\n \n-    /**\n-     * Given a string containing entity escapes, returns a string\n-     * containing the actual Unicode characters corresponding to the\n-     * escapes.\n-     *\n-     * @see #escapeHtml(String)\n-     **/\n-    public static String unescapeHtml(String str) {\n+    private static String unescapeEntities(String str, Entities entities) {\n         StringBuffer buf = new StringBuffer(str.length());\n         int i;\n         for (i = 0; i < str.length(); ++i) {\n                 if (entity.charAt(0) == '#') {\n                     iso = new Integer(entity.substring(1));\n                 } else {\n-                    iso = entityValue(entity);\n+                    iso = entities.entityValue(entity);\n                 }\n                 if (iso == null) {\n                     buf.append(\"&\" + entity + \";\");\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.3 2003/04/09 18:45:29 alex Exp $\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.4 2003/04/09 20:55:33 alex Exp $\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n \n         assertEquals(\"unescape(String) failed\" +\n                 (message == null ? \"\" : (\": \" + message)) +\n+                \": expected '\" + StringUtils.escape(expected) +\n                 // we escape this so we can see it in the error message\n-                \": expected '\" + StringUtils.escape(expected) +\n                 \"' actual '\" + StringUtils.escape(actual) + \"'\",\n                 expected, actual);\n \n     }\n \n \n-    // HTML\n+    // HTML and XML\n     //--------------------------------------------------------------\n+\n+    public void testEntitiesObject() throws Exception\n+    {\n+        assertEquals(\"gt\", Entities.XML.entityName('>'));\n+        assertEquals(new Integer('>'), Entities.XML.entityValue(\"gt\"));\n+        assertEquals(null, Entities.XML.entityValue(\"xyzzy\"));\n+    }\n+\n     String[][] htmlEscapes = {\n         {\"no escaping\", \"plain text\", \"plain text\"},\n         {\"no escaping\", \"plain text\", \"plain text\"},\n         {\"first character only\", \"&lt; less than\", \"< less than\"},\n         {\"apostrophe\", \"Huntington's chorea\", \"Huntington's chorea\"},\n         {\"languages\", \"English,Fran&ccedil;ais,&#26085;&#26412;&#35486; (nihongo)\", \"English,Fran\\u00E7ais,\\u65E5\\u672C\\u8A9E (nihongo)\"},\n+        {\"8-bit ascii doesn't number-escape\", \"~\\u007F\", \"\\u007E\\u007F\"},\n+        {\"8-bit ascii does number-escape\", \"&#128;&#159;\", \"\\u0080\\u009F\"},\n     };\n \n     public void testEscapeHtml() {\n         }\n     }\n \n-    public void testHtmlunescape() {\n+    public void testUnescapeHtml() {\n         for (int i = 0; i < htmlEscapes.length; ++i) {\n             assertEquals(htmlEscapes[i][0], htmlEscapes[i][2], StringEscapeUtils.unescapeHtml(htmlEscapes[i][1]));\n             // todo: add test for (and implement) Writer-based version\n         assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n     }\n \n+    public void testEscapeHtmlVersions() throws Exception\n+    {\n+        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml(\"\\u0392\"));\n+        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml(\"&Beta;\"));\n+\n+        //todo: refine API for escaping/unescaping specific HTML versions\n+\n+    }\n+\n+    public void testEscapeXml() throws Exception {\n+        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n+        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n+\n+        assertEquals(\"XML should use numbers, not names for HTML entities\",\n+                \"&#161;\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n+        assertEquals(\"XML should use numbers, not names for HTML entities\",\n+                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n+    }\n+\n     // SQL\n     // see http://www.jguru.com/faq/view.jsp?EID=8881\n     //--------------------", "timestamp": 1049921733, "metainfo": ""}