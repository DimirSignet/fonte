{"sha": "b9a6c331326a501525a4aff41c9213cb34dc2343", "log": "tests the state checking and uses SplitTime   ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/StopWatchTest.java\n+++ b/src/test/org/apache/commons/lang/time/StopWatchTest.java\n  * TestCase for StopWatch.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: StopWatchTest.java,v 1.7 2004/02/18 23:03:03 ggregory Exp $\n+ * @version $Id: StopWatchTest.java,v 1.8 2004/09/05 19:55:29 bayard Exp $\n  */\n public class StopWatchTest extends TestCase {\n \n         watch.start();\n             try {Thread.sleep(550);} catch (InterruptedException ex) {}\n         watch.split();\n-        long splitTime = watch.getTime();\n+        long splitTime = watch.getSplitTime();\n             try {Thread.sleep(550);} catch (InterruptedException ex) {}\n         watch.unsplit();\n             try {Thread.sleep(550);} catch (InterruptedException ex) {}\n         watch.stop();\n         long totalTime = watch.getTime();\n         \n-//        System.err.println(splitTime +\"  \"+totalTime);\n         assertTrue(splitTime >= 500);\n         assertTrue(splitTime < 700);\n         assertTrue(totalTime >= 1500);\n         watch.stop();\n         long totalTime = watch.getTime();\n         \n-//        System.err.println(suspendTime +\"  \"+totalTime);\n         assertTrue(suspendTime >= 500);\n         assertTrue(suspendTime < 700);\n         assertTrue(totalTime >= 1000);\n         assertTrue(totalTime < 1300);\n     }\n \n+    // test bad states\n+    public void testBadStates() {\n+        StopWatch watch = new StopWatch();\n+        try {\n+            watch.stop();\n+            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.stop();\n+            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.suspend();\n+            fail(\"Calling suspend on an unstarted StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.unsplit();\n+            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.resume();\n+            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        watch.start();\n+\n+        try {\n+            watch.start();\n+            fail(\"Calling start on an started StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.unsplit();\n+            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.getSplitTime();\n+            fail(\"Calling getSplitTime on an unsplit StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.resume();\n+            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+    }\n+\n }", "timestamp": 1094414129, "metainfo": ""}