{"sha": "2480889d982e5700da349619d316b1165a24991a", "log": "Update licence Tidy file   ", "commit": "\n--- a/src/test/org/apache/commons/lang/BitFieldTest.java\n+++ b/src/test/org/apache/commons/lang/BitFieldTest.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/BitFieldTest.java,v 1.2 2003/10/05 15:46:55 rdonkin Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/10/05 15:46:55 $\n- *\n- * ====================================================================\n- * \n+/* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * are met:\n  *\n  * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n+ *    notice, this list of conditions and the following disclaimer.\n  *\n  * 2. Redistributions in binary form must reproduce the above copyright\n  *    notice, this list of conditions and the following disclaimer in\n  *    the documentation and/or other materials provided with the\n  *    distribution.\n  *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n+ *    from this software without prior written permission. For written\n  *    permission, please contact apache@apache.org.\n  *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their names without prior \n- *    written permission of the Apache Software Foundation.\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * individuals on behalf of the Apache Software Foundation.  For more\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n- *\n- */ \n-\n+ */\n package org.apache.commons.lang;\n \n import junit.framework.Test;\n /**\n  * Class to test BitField functionality\n  *\n- * @author Scott Sanders (sanders at apache dot org)\n+ * @author Scott Sanders\n  * @author Marc Johnson\n- * @author Glen Stampoultzis (gstamp@iprimus.com.au)\n- * @version $Id: BitFieldTest.java,v 1.2 2003/10/05 15:46:55 rdonkin Exp $\n+ * @author Glen Stampoultzis\n+ * @version $Id: BitFieldTest.java,v 1.3 2003/10/07 20:36:26 scolebourne Exp $\n  */\n-\n-public class BitFieldTest\n-    extends TestCase\n-{\n+public class BitFieldTest extends TestCase {\n \n     public static void main(String[] args) {\n         TestRunner.run(suite());\n      *\n      * @param name\n      */\n-\n-    public BitFieldTest(String name)\n-    {\n+    public BitFieldTest(String name) {\n         super(name);\n     }\n \n     /**\n      * test the getValue() method\n      */\n-\n-    public void testGetValue()\n-    {\n+    public void testGetValue() {\n         assertEquals(bf_multi.getValue(-1), 127);\n         assertEquals(bf_multi.getValue(0), 0);\n         assertEquals(bf_single.getValue(-1), 1);\n     /**\n      * test the getShortValue() method\n      */\n-\n-    public void testGetShortValue()\n-    {\n-        assertEquals(bf_multi.getShortValue(( short ) -1), ( short ) 127);\n-        assertEquals(bf_multi.getShortValue(( short ) 0), ( short ) 0);\n-        assertEquals(bf_single.getShortValue(( short ) -1), ( short ) 1);\n-        assertEquals(bf_single.getShortValue(( short ) 0), ( short ) 0);\n+    public void testGetShortValue() {\n+        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);\n+        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\n+        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);\n+        assertEquals(bf_single.getShortValue((short) 0), (short) 0);\n     }\n \n     /**\n      * test the getRawValue() method\n      */\n-\n-    public void testGetRawValue()\n-    {\n+    public void testGetRawValue() {\n         assertEquals(bf_multi.getRawValue(-1), 0x3F80);\n         assertEquals(bf_multi.getRawValue(0), 0);\n         assertEquals(bf_single.getRawValue(-1), 0x4000);\n     /**\n      * test the getShortRawValue() method\n      */\n-\n-    public void testGetShortRawValue()\n-    {\n-        assertEquals(bf_multi.getShortRawValue(( short ) -1),\n-                     ( short ) 0x3F80);\n-        assertEquals(bf_multi.getShortRawValue(( short ) 0), ( short ) 0);\n-        assertEquals(bf_single.getShortRawValue(( short ) -1),\n-                     ( short ) 0x4000);\n-        assertEquals(bf_single.getShortRawValue(( short ) 0), ( short ) 0);\n+    public void testGetShortRawValue() {\n+        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);\n+        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\n+        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);\n+        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);\n     }\n \n     /**\n      * test the isSet() method\n      */\n-\n-    public void testIsSet()\n-    {\n+    public void testIsSet() {\n         assertTrue(!bf_multi.isSet(0));\n-        for (int j = 0x80; j <= 0x3F80; j += 0x80)\n-        {\n+        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n             assertTrue(bf_multi.isSet(j));\n         }\n         assertTrue(!bf_single.isSet(0));\n     /**\n      * test the isAllSet() method\n      */\n-\n-    public void testIsAllSet()\n-    {\n-        for (int j = 0; j < 0x3F80; j += 0x80)\n-        {\n+    public void testIsAllSet() {\n+        for (int j = 0; j < 0x3F80; j += 0x80) {\n             assertTrue(!bf_multi.isAllSet(j));\n         }\n         assertTrue(bf_multi.isAllSet(0x3F80));\n     /**\n      * test the setValue() method\n      */\n-\n-    public void testSetValue()\n-    {\n-        for (int j = 0; j < 128; j++)\n-        {\n+    public void testSetValue() {\n+        for (int j = 0; j < 128; j++) {\n             assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n             assertEquals(bf_multi.setValue(0, j), j << 7);\n         }\n \n         // verify that excess bits are stripped off\n         assertEquals(bf_multi.setValue(0x3f80, 128), 0);\n-        for (int j = 0; j < 2; j++)\n-        {\n+        for (int j = 0; j < 2; j++) {\n             assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);\n             assertEquals(bf_single.setValue(0, j), j << 14);\n         }\n     /**\n      * test the setShortValue() method\n      */\n-\n-    public void testSetShortValue()\n-    {\n-        for (int j = 0; j < 128; j++)\n-        {\n-            assertEquals(bf_multi\n-                .getShortValue(bf_multi\n-                    .setShortValue(( short ) 0, ( short ) j)), ( short ) j);\n-            assertEquals(bf_multi.setShortValue(( short ) 0, ( short ) j),\n-                         ( short ) (j << 7));\n-        }\n-\n-        // verify that excess bits are stripped off\n-        assertEquals(bf_multi.setShortValue(( short ) 0x3f80, ( short ) 128),\n-                     ( short ) 0);\n-        for (int j = 0; j < 2; j++)\n-        {\n-            assertEquals(bf_single\n-                .getShortValue(bf_single\n-                    .setShortValue(( short ) 0, ( short ) j)), ( short ) j);\n-            assertEquals(bf_single.setShortValue(( short ) 0, ( short ) j),\n-                         ( short ) (j << 14));\n-        }\n-\n-        // verify that excess bits are stripped off\n-        assertEquals(bf_single.setShortValue(( short ) 0x4000, ( short ) 2),\n-                     ( short ) 0);\n-    }\n-\n-    public void testByte()\n-    {\n-        assertEquals(1, new BitField(1).setByteBoolean(( byte ) 0, true));\n-        assertEquals(2, new BitField(2).setByteBoolean(( byte ) 0, true));\n-        assertEquals(4, new BitField(4).setByteBoolean(( byte ) 0, true));\n-        assertEquals(8, new BitField(8).setByteBoolean(( byte ) 0, true));\n-        assertEquals(16, new BitField(16).setByteBoolean(( byte ) 0, true));\n-        assertEquals(32, new BitField(32).setByteBoolean(( byte ) 0, true));\n-        assertEquals(64, new BitField(64).setByteBoolean(( byte ) 0, true));\n-        assertEquals(-128,\n-                     new BitField(128).setByteBoolean(( byte ) 0, true));\n-        assertEquals(0, new BitField(1).setByteBoolean(( byte ) 1, false));\n-        assertEquals(0, new BitField(2).setByteBoolean(( byte ) 2, false));\n-        assertEquals(0, new BitField(4).setByteBoolean(( byte ) 4, false));\n-        assertEquals(0, new BitField(8).setByteBoolean(( byte ) 8, false));\n-        assertEquals(0, new BitField(16).setByteBoolean(( byte ) 16, false));\n-        assertEquals(0, new BitField(32).setByteBoolean(( byte ) 32, false));\n-        assertEquals(0, new BitField(64).setByteBoolean(( byte ) 64, false));\n-        assertEquals(0, new BitField(128).setByteBoolean(( byte ) 128,\n-                                     false));\n-        assertEquals(-2, new BitField(1).setByteBoolean(( byte ) 255, false));\n-        byte clearedBit = new BitField(0x40).setByteBoolean(( byte ) -63,\n-                                       false);\n+    public void testSetShortValue() {\n+        for (int j = 0; j < 128; j++) {\n+            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\n+            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);\n+        for (int j = 0; j < 2; j++) {\n+            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);\n+            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);\n+    }\n+\n+    public void testByte() {\n+        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\n+        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));\n+        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));\n+        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));\n+        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));\n+        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));\n+        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));\n+        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));\n+        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));\n+        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));\n+        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));\n+        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));\n+        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));\n+        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));\n+        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));\n+        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));\n+        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));\n+        byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);\n \n         assertEquals(false, new BitField(0x40).isSet(clearedBit));\n     }\n     /**\n      * test the clear() method\n      */\n-\n-    public void testClear()\n-    {\n+    public void testClear() {\n         assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n         assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n     }\n     /**\n      * test the clearShort() method\n      */\n-\n-    public void testClearShort()\n-    {\n-        assertEquals(bf_multi.clearShort(( short ) -1), ( short ) 0xC07F);\n-        assertEquals(bf_single.clearShort(( short ) -1), ( short ) 0xBFFF);\n+    public void testClearShort() {\n+        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);\n+        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);\n     }\n \n     /**\n      * test the set() method\n      */\n-\n-    public void testSet()\n-    {\n+    public void testSet() {\n         assertEquals(bf_multi.set(0), 0x3F80);\n         assertEquals(bf_single.set(0), 0x4000);\n     }\n     /**\n      * test the setShort() method\n      */\n-\n-    public void testSetShort()\n-    {\n-        assertEquals(bf_multi.setShort(( short ) 0), ( short ) 0x3F80);\n-        assertEquals(bf_single.setShort(( short ) 0), ( short ) 0x4000);\n+    public void testSetShort() {\n+        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\n+        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\n     }\n \n     /**\n      * test the setBoolean() method\n      */\n-\n-    public void testSetBoolean()\n-    {\n+    public void testSetBoolean() {\n         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\n     /**\n      * test the setShortBoolean() method\n      */\n-\n-    public void testSetShortBoolean()\n-    {\n-        assertEquals(bf_multi.setShort(( short ) 0),\n-                     bf_multi.setShortBoolean(( short ) 0, true));\n-        assertEquals(bf_single.setShort(( short ) 0),\n-                     bf_single.setShortBoolean(( short ) 0, true));\n-        assertEquals(bf_multi.clearShort(( short ) -1),\n-                     bf_multi.setShortBoolean(( short ) -1, false));\n-        assertEquals(bf_single.clearShort(( short ) -1),\n-                     bf_single.setShortBoolean(( short ) -1, false));\n+    public void testSetShortBoolean() {\n+        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\n+        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\n+        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));\n+        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));\n     }\n \n }", "timestamp": 1065558986, "metainfo": ""}