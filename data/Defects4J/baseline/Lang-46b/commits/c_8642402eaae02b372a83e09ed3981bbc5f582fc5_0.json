{"sha": "8642402eaae02b372a83e09ed3981bbc5f582fc5", "log": "Address Checkstyle report issues as reported by Henri (http://www.generationjava.com/maven/jakarta-commons/lang/)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n import java.util.Set;\n \n /**\n- * <p><code>toString()</code> generation routines.</p>\n+ * <p>Builds <code>toString()</code> values.</p>\n  *\n  * <p>This class enables a good and consistent <code>toString()</code> to be built for any\n  * class or object. This class aims to simplify the process by:</p>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.19 2003/04/08 22:35:40 ggregory Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.20 2003/04/18 07:01:47 ggregory Exp $\n  */\n public class ToStringBuilder {\n \n      * The default style of output to use\n      */\n     private static ToStringStyle defaultStyle = ToStringStyle.DEFAULT_STYLE;\n+    \n     /**\n      * Current toString buffer\n      */\n     private final StringBuffer buffer;\n+    \n     /**\n      * The style of output to use\n      */\n     private final ToStringStyle style;\n+    \n     /**\n      * The object being output\n      */\n     /**\n      * Returns <code>true</code> if the registry contains the given object.\n      * Used by the reflection methods to avoid infinite loops.\n+     * \n+     * @param value The object to lookup in the registry.\n      * @return boolean <code>true</code> if the registry contains the given object.\n      */\n     static boolean isRegistered(Object value) {\n     /**\n      * Registers the given object.\n      * Used by the reflection methods to avoid infinite loops.\n+     * \n+     * @param value The object to register.\n      */\n     static void register(Object value) {\n         getReflectionRegistry().add(value);\n     /**\n      * Unregisters the given object.\n      * Used by the reflection methods to avoid infinite loops.\n+     * \n+     * @param value The object to unregister.\n      */\n     static void unregister(Object value) {\n         getReflectionRegistry().remove(value);\n      * @return the String result\n      * @throws IllegalArgumentException if the Object is <code>null</code>\n      */\n-    public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {\n+    public static String reflectionToString(\n+        Object object,\n+        ToStringStyle style,\n+        boolean outputTransients,\n+        Class reflectUpToClass) {\n         if (style == null) {\n             style = getDefaultStyle();\n         }\n                             // append a simple Object.toString style string.\n                             builder.getStyle().appendFieldStart(builder.getStringBuffer(), fieldName);\n                             builder.appendAsObjectToString(fieldValue);\n-                            // The recursion out of \"builder.append(fieldName, fieldValue);\" below will append the field \n+                            // The recursion out of \n+                            //    builder.append(fieldName, fieldValue); \n+                            // below will append the field \n                             // end marker.\n                         } else {\n                             try {", "timestamp": 1050649307, "metainfo": ""}