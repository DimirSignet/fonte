{"sha": "22b0c123301f177c04e514524516ee30f3ca5188", "log": "Make sure this exception code does not depend on Java 1.4 nested exceptions. SVN revision 38990 does not compile with Java 1.3.1. Compiled with Sun Java 1.3.1_15 Tested with Sun Java 1.3.1_15 Tested with Sun Java 1.4.2_12 Tested with Sun Java 1.5.0_08 All of the above on Windows XP SP2 + patches.  ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n \n /**\n  * Tests {@link org.apache.commons.lang.exception.ExceptionUtils}.\n- *\n+ * \n+ * <h3>Notes</h3>\n+ * <p>\n+ * Make sure this exception code does not depend on Java 1.4 nested exceptions. SVN revision 38990 does not compile with\n+ * Java 1.3.1.\n+ * </p>\n+ * <ul>\n+ * <li>Compiled with Sun Java 1.3.1_15</li>\n+ * <li>Tested with Sun Java 1.3.1_15</li>\n+ * <li>Tested with Sun Java 1.4.2_12</li>\n+ * <li>Tested with Sun Java 1.5.0_08</li>\n+ * <li>All of the above on Windows XP SP2 + patches.</li>\n+ * </ul>\n+ * <p>\n+ * Gary Gregory; August 16, 2006.\n+ * </p>\n+ * \n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Stephen Colebourne\n     private Throwable withoutCause;\n     private Throwable jdkNoCause;\n     private ExceptionWithCause selfCause;\n-    private ExceptionWithCause recursiveCause;\n+    private ExceptionWithCause cyclicCause;\n \n     public ExceptionUtilsTestCase(String name) {\n         super(name);\n         ExceptionWithCause a = new ExceptionWithCause(null);\n         ExceptionWithCause b = new ExceptionWithCause(a);\n         a.setCause(b);\n-        recursiveCause = new ExceptionWithCause(a);\n+        cyclicCause = new ExceptionWithCause(a);\n     }\n \n     protected void tearDown() throws Exception {\n         withCause = null;\n         jdkNoCause = null;\n         selfCause = null;\n-        recursiveCause = null;\n+        cyclicCause = null;\n     }\n \n     //-----------------------------------------------------------------------\n         assertSame(nested, ExceptionUtils.getCause(withCause));\n         assertSame(null, ExceptionUtils.getCause(jdkNoCause));\n         assertSame(selfCause, ExceptionUtils.getCause(selfCause));\n-        assertSame(recursiveCause.getCause(), ExceptionUtils.getCause(recursiveCause));\n-        assertSame(recursiveCause.getCause().getCause(), ExceptionUtils.getCause(recursiveCause.getCause()));\n-        assertSame(recursiveCause.getCause(), ExceptionUtils.getCause(recursiveCause.getCause().getCause()));\n+        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));\n+        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause()));\n     }\n \n     public void testGetCause_ThrowableArray() {\n         assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n         assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n         assertSame(null, ExceptionUtils.getRootCause(selfCause));\n-        assertSame(recursiveCause.getCause().getCause(), ExceptionUtils.getRootCause(recursiveCause));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause));\n     }\n \n     public void testSetCause() {\n         assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n         assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\n         assertEquals(1, ExceptionUtils.getThrowableCount(selfCause));\n-        assertEquals(3, ExceptionUtils.getThrowableCount(recursiveCause));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     public void testGetThrowables_Throwable_recursiveCause() {\n-        Throwable[] throwables = ExceptionUtils.getThrowables(recursiveCause);\n+        Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\n         assertEquals(3, throwables.length);\n-        assertSame(recursiveCause, throwables[0]);\n-        assertSame(recursiveCause.getCause(), throwables[1]);\n-        assertSame(recursiveCause.getCause().getCause(), throwables[2]);\n+        assertSame(cyclicCause, throwables[0]);\n+        assertSame(cyclicCause.getCause(), throwables[1]);\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]);\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     public void testGetThrowableList_Throwable_recursiveCause() {\n-        List throwables = ExceptionUtils.getThrowableList(recursiveCause);\n+        List throwables = ExceptionUtils.getThrowableList(cyclicCause);\n         assertEquals(3, throwables.size());\n-        assertSame(recursiveCause, throwables.get(0));\n-        assertSame(recursiveCause.getCause(), throwables.get(1));\n-        assertSame(recursiveCause.getCause().getCause(), throwables.get(2));\n+        assertSame(cyclicCause, throwables.get(0));\n+        assertSame(cyclicCause.getCause(), throwables.get(1));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1155760441, "metainfo": ""}