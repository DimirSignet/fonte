{"sha": "ee9c5c4de7806e48adf5e01d922266c0e53b39fe", "log": "Fix class so IS_JAVA_* and IS_OS_* constants work correctly. bug 21767, from Tetsuya Kaneuchi   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Michael Becke\n+ * @author Tetsuya Kaneuchi\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.18 2003/07/18 16:48:25 ggregory Exp $\n+ * @version $Id: SystemUtils.java,v 1.19 2003/07/21 22:57:50 scolebourne Exp $\n  */\n public class SystemUtils {\n \n+    // System property constants\n     //-----------------------------------------------------------------------\n+    // These MUST be declared first. Other constants depend on this.\n+    \n     /**\n      * <p>The <code>file.encoding</code> System Property.</p>\n      * <p>File encoding, such as <code>Cp1252</code>.</p>\n      */\n     public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).</p>\n-     *\n-     * <p>The field will <code>false</code> false if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).</p>\n-     *\n-     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is AIX.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is HP-UX.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Irix.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Linux.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n-    // Windows XP returns 'Windows 2000' just for fun...\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Mac.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Mac.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is OS/2.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Solaris.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is SunOS.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n-\n-    //-----------------------------------------------------------------------\n-    // OS names from http://www.vamphq.com/os.html\n-    // Selected ones included - please advise commons-dev@jakarta.apache.org\n-    // if you want another added or a mistake corrected\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows 2000.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows 95.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n-    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows 98.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n-    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows ME.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n-    // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows NT.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n-    // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n-\n-    /**\n-     * <p>Is <code>true</code> if this is Windows XP.</p>\n-     *\n-     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n-     * <code>null</code>.</p>\n-     */\n-    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n-\n     /**\n      * <p>The <code>java.class.path</code> System Property. Java class path.</p>\n      *\n      */\n     public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n \n+    /**\n+     * <p>The <code>java.vm.info</code> System Property. Java Virtual Machine implementation\n+     * info.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n+\n+    /**\n+     * <p>The <code>java.vm.name</code> System Property. Java Virtual Machine implementation\n+     * name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n+\n+    /**\n+     * <p>The <code>java.vm.specification.name</code> System Property. Java Virtual Machine\n+     * specification name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n+\n+    /**\n+     * <p>The <code>java.vm.specification.vendor</code> System Property. Java Virtual\n+     * Machine specification vendor.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n+\n+    /**\n+     * <p>The <code>java.vm.specification.version</code> System Property. Java Virtual Machine\n+     * specification version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n+\n+    /**\n+     * <p>The <code>java.vm.vendor</code> System Property. Java Virtual Machine implementation\n+     * vendor.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n+\n+    /**\n+     * <p>The <code>java.vm.version</code> System Property. Java Virtual Machine\n+     * implementation version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n+\n+    /**\n+     * <p>The <code>line.separator</code> System Property. Line separator\n+     * (<code>&quot;\\n<&quot;</code> on UNIX).</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n+\n+    /**\n+     * <p>The <code>os.arch</code> System Property. Operating system architecture.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n+\n+    /**\n+     * <p>The <code>os.name</code> System Property. Operating system name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String OS_NAME = getSystemProperty(\"os.name\");\n+\n+    /**\n+     * <p>The <code>os.version</code> System Property. Operating system version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n+\n+    /**\n+     * <p>The <code>path.separator</code> System Property. Path separator\n+     * (<code>&quot;:&quot;</code> on UNIX).</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n+\n+    /**\n+     * <p>The <code>user.country</code> or <code>user.region</code> System Property.\n+     * User's country code, such as <code>GB</code>. First in JDK version 1.2 as\n+     * <code>user.region</code>. Renamed to <code>user.country</code> in 1.4</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String USER_COUNTRY = \n+        (getSystemProperty(\"user.country\") == null ?\n+            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"));\n+\n+    /**\n+     * <p>The <code>user.dir</code> System Property. User's current working\n+     * directory.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String USER_DIR = getSystemProperty(\"user.dir\");\n+\n+    /**\n+     * <p>The <code>user.home</code> System Property. User's home directory.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String USER_HOME = getSystemProperty(\"user.home\");\n+\n+    /**\n+     * <p>The <code>user.language</code> System Property. User's language code,\n+     * such as 'en'.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n+\n+    /**\n+     * <p>The <code>user.name</code> System Property. User's account name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String USER_NAME = getSystemProperty(\"user.name\");\n+\n+    // Java version\n     //-----------------------------------------------------------------------\n+    // These MUST be declared after those above as they depend on the\n+    // values being set up\n+    \n     /**\n      * <p>Gets the Java version as a <code>float</code>.</p>\n      *\n      */\n     public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n \n-    /**\n-     * <p>The <code>java.vm.info</code> System Property. Java Virtual Machine implementation\n-     * info.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n-\n-    /**\n-     * <p>The <code>java.vm.name</code> System Property. Java Virtual Machine implementation\n-     * name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n-\n-    /**\n-     * <p>The <code>java.vm.specification.name</code> System Property. Java Virtual Machine\n-     * specification name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n-\n-    /**\n-     * <p>The <code>java.vm.specification.vendor</code> System Property. Java Virtual\n-     * Machine specification vendor.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n-\n-    /**\n-     * <p>The <code>java.vm.specification.version</code> System Property. Java Virtual Machine\n-     * specification version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n-\n-    /**\n-     * <p>The <code>java.vm.vendor</code> System Property. Java Virtual Machine implementation\n-     * vendor.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n-\n-    /**\n-     * <p>The <code>java.vm.version</code> System Property. Java Virtual Machine\n-     * implementation version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n-\n-    /**\n-     * <p>The <code>line.separator</code> System Property. Line separator\n-     * (<code>&quot;\\n<&quot;</code> on UNIX).</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n-\n-    /**\n-     * <p>The <code>os.arch</code> System Property. Operating system architecture.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n-\n-    /**\n-     * <p>The <code>os.name</code> System Property. Operating system name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String OS_NAME = getSystemProperty(\"os.name\");\n-\n-    /**\n-     * <p>The <code>os.version</code> System Property. Operating system version.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n-\n-    /**\n-     * <p>The <code>path.separator</code> System Property. Path separator\n-     * (<code>&quot;:&quot;</code> on UNIX).</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n-\n-    /**\n-     * <p>The <code>user.country</code> or <code>user.region</code> System Property.\n-     * User's country code, such as <code>GB</code>. First in JDK version 1.2 as\n-     * <code>user.region</code>. Renamed to <code>user.country</code> in 1.4</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String USER_COUNTRY = \n-        (getSystemProperty(\"user.country\") == null ?\n-            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"));\n-\n-    /**\n-     * <p>The <code>user.dir</code> System Property. User's current working\n-     * directory.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String USER_DIR = getSystemProperty(\"user.dir\");\n-\n-    /**\n-     * <p>The <code>user.home</code> System Property. User's home directory.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String USER_HOME = getSystemProperty(\"user.home\");\n-\n-    /**\n-     * <p>The <code>user.language</code> System Property. User's language code,\n-     * such as 'en'.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n-\n-    /**\n-     * <p>The <code>user.name</code> System Property. User's account name.</p>\n-     *\n-     * <p>Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or the property does not exist.</p>\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String USER_NAME = getSystemProperty(\"user.name\");\n-\n+    // Java version checks\n+    //-----------------------------------------------------------------------\n+    // These MUST be declared after those above as they depend on the\n+    // values being set up\n+    \n+    /**\n+     * <p>Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).</p>\n+     *\n+     * <p>The field will <code>false</code> false if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n+\n+    // Operating system checks\n+    //-----------------------------------------------------------------------\n+    // These MUST be declared after those above as they depend on the\n+    // values being set up\n+    // OS names from http://www.vamphq.com/os.html\n+    // Selected ones included - please advise commons-dev@jakarta.apache.org\n+    // if you want another added or a mistake corrected\n+\n+    /**\n+     * <p>Is <code>true</code> if this is AIX.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is HP-UX.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Irix.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Linux.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Mac.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Mac.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is OS/2.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Solaris.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is SunOS.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows 2000.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows 95.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n+    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows 98.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n+    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows ME.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n+    // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows NT.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n+    // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n+\n+    /**\n+     * <p>Is <code>true</code> if this is Windows XP.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n+     */\n+    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n+    // Windows XP returns 'Windows 2000' just for fun...\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * <p>SystemUtils instances should NOT be constructed in standard\n+     * programming. Instead, the class should be used as\n+     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public SystemUtils() {\n+    }\n+    \n     //-----------------------------------------------------------------------    \n     /**\n      * <p>Gets the Java version number as a <code>float</code>.</p>\n      *  <li><code>1.31f</code> for JDK 1.3.1\n      * </ul>\n      * \n+     * @return the version, for example 1.31f for JDK 1.3.1\n      * @deprecated Use {@link #JAVA_VERSION_FLOAT} instead.\n      *             Method will be removed in Commons Lang 3.0.\n-     * @return the version, for example 1.31f for JDK 1.3.1\n      */\n     public static float getJavaVersion() {\n         return JAVA_VERSION_FLOAT;\n         return (JAVA_VERSION_INT >= requiredVersion);\n     }\n     \n-    /**\n-     * <p>SystemUtils instances should NOT be constructed in standard\n-     * programming. Instead, the class should be used as\n-     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n-     *\n-     * <p>This constructor is public to permit tools that require a JavaBean\n-     * instance to operate.</p>\n-     */\n-    public SystemUtils() {\n-    }\n-    \n }\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  * Only limited testing can be performed.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: SystemUtilsTest.java,v 1.2 2003/05/24 14:34:14 scolebourne Exp $\n+ * @author Tetsuya Kaneuchi\n+ * @version $Id: SystemUtilsTest.java,v 1.3 2003/07/21 22:57:51 scolebourne Exp $\n  */\n public class SystemUtilsTest extends TestCase {\n \n \n     public static void main(String[] args) {\n         TestRunner.run(suite());\n-//        SystemUtils s = new SystemUtils();\n-//        System.out.println(s.IS_OS_WINDOWS);\n-//        System.out.println(s.IS_OS_WINDOWS_95);\n-//        System.out.println(s.IS_OS_WINDOWS_98);\n-//        java.util.Properties p = System.getProperties();\n-//        java.util.Enumeration keys = p.keys();\n-//        java.util.List list = new java.util.ArrayList();\n-//        while( keys.hasMoreElements() ) {\n-//            list.add(keys.nextElement());\n-//        }\n-//        java.util.Collections.sort(list);\n-//        for (java.util.Iterator it = list.iterator(); it.hasNext();) {\n-//            String key = (String) it.next();\n-//            System.out.println(key + \" \" + p.getProperty(key));\n-//        }\n-    \n     }\n \n     public static Test suite() {\n         OS_VERSION = \"4.0\";\n         assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n     }\n+\n+    public void testIS_OS() {\n+        String osName = System.getProperty(\"os.name\");\n+        if (osName == null) {\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n+            assertEquals(false, SystemUtils.IS_OS_LINUX);\n+            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n+        } else if (osName.startsWith(\"Windows\")) {\n+            assertTrue(SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"Solaris\")) {\n+            assertTrue(SystemUtils.IS_OS_SOLARIS);\n+        } else if (osName.toLowerCase().startsWith(\"linux\")) {\n+            assertTrue(SystemUtils.IS_OS_LINUX);\n+        } else if (osName.startsWith(\"Mac OS X\")) {\n+            assertTrue(SystemUtils.IS_OS_MAC_OSX);\n+        } else if (osName.startsWith(\"OS/2\")) {\n+            assertTrue(SystemUtils.IS_OS_OS2);\n+        } else if (osName.startsWith(\"SunOS\")) {\n+            assertTrue(SystemUtils.IS_OS_SUN_OS);\n+        } else {\n+            System.out.println(\"Can't test IS_OS value\");\n+        }\n+    }\n+\n+    public void testIS_JAVA() {\n+        String javaVersion = System.getProperty(\"java.version\");\n+        if (javaVersion == null) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+        } else if (javaVersion.startsWith(\"1.1\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_1);\n+        } else if (javaVersion.startsWith(\"1.2\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_2);\n+        } else if (javaVersion.startsWith(\"1.3\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_3);\n+        } else if (javaVersion.startsWith(\"1.4\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_4);\n+        } else if (javaVersion.startsWith(\"1.5\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_5);\n+        } else {\n+            System.out.println(\"Can't test IS_JAVA value\");\n+        }\n+    }\n     \n }", "timestamp": 1058828271, "metainfo": ""}