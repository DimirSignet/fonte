{"sha": "407f16b3123dee89a67497df75f49f101ab3529b", "log": "Rework Functional Enums to work on JDK1.2 bug 19030   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * however that a more robust type-safe class-based solution can be designed. This\n  * class follows the basic Java type-safe enumeration pattern.</p>\n  *\n- * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing Enum objects\n- * should always be done using the equals() method, not ==. The equals() method will\n- * try == first so in most cases the effect is the same.</p>\n+ * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n+ * Enum objects should always be done using <code>equals()</code>, not <code>==</code>.\n+ * The equals() method will try == first so in most cases the effect is the same.</p>\n+ * \n+ * <p>Of course, if you actually want (or don't mind) Enums in different class\n+ * loaders being non-equal, then you can use <code>==</code>.</p>\n  * \n  * <h4>Simple Enums</h4>\n  *\n  * superclass and subclass.</p>\n  *\n  * <pre>\n- * public class ExtraColorEnum extends ColorEnum {\n+ * public final class ExtraColorEnum extends ColorEnum {\n  *   // NOTE: Color enum declared above is final, change that to get this\n  *   // example to compile.\n  *   public static final ColorEnum YELLOW = new ExtraColorEnum(\"Yellow\");\n  * \n  * <h4>Functional Enums</h4>\n  *\n- * <p>The enums can have functionality by using anonymous inner classes\n- * [Effective Java, Bloch01]:</p>\n+ * <p>The enums can have functionality by defining subclasses and\n+ * changing the <code>super()</code> call:</p>\n  * \n  * <pre>\n- * public abstract class OperationEnum extends Enum {\n- *   public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n- *     public double eval(double a, double b) {\n+ *   public static final OperationEnum PLUS = new PlusOperation();\n+ *   private static final class PlusOperation extends OperationEnum {\n+ *     private PlusOperation() {\n+ *       super(\"Plus\");\n+ *     }\n+ *     public int eval(int a, int b) {\n  *       return (a + b);\n  *     }\n- *   };\n- *   public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n- *     public double eval(double a, double b) {\n+ *   }\n+ *   public static final OperationEnum MINUS = new MinusOperation();\n+ *   private static final class MinusOperation extends OperationEnum {\n+ *     private MinusOperation() {\n+ *       super(\"Minus\");\n+ *     }\n+ *     public int eval(int a, int b) {\n  *       return (a - b);\n  *     }\n- *   };\n+ *   }\n  *\n  *   private OperationEnum(String color) {\n- *     super(color);\n+ *     super(color, OperationEnum.class);   // NOTE: super() changed!\n  *   }\n  * \n  *   public abstract double eval(double a, double b);\n  *   }\n  * }\n  * </pre>\n+ * <p>The code above will work on JDK 1.2. If JDK1.3 and later is used,\n+ * the subclasses may be defined as anonymous.</p>\n  *\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.17 2003/07/30 23:17:23 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.18 2003/08/04 23:52:27 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n     /** Lang version 1.0.1 serial compatability */\n-    static final long serialVersionUID = -487045951170455942L;\n+    private static final long serialVersionUID = -487045951170455942L;\n     \n     // After discussion, the default size for HashMaps is used, as the\n     // sizing algorithm changes across the JDK versions\n      * The string representation of the Enum.\n      */\n     private final String iName;\n+    /**\n+     * The Enum class.\n+     */\n+    private final Class iEnumClass;\n     /**\n      * The hashcode representation of the Enum.\n      */\n      */\n     protected Enum(String name) {\n         super();\n-\n+        init(name, getClass());\n+        iName = name;\n+        iEnumClass = getClass();\n+        iHashCode = 7 + iEnumClass.hashCode() + 3 * name.hashCode();\n+        // cannot create toString here as subclasses may want to include other data\n+    }\n+\n+    /**\n+     * <p>Constructor to add a new named item to the enumeration.</p>\n+     * \n+     * <p>This constructor is used when a subclass wants to allow further\n+     * subclasses to add values to the enumeration. The class specifies\n+     * which class they are all to be tied to.</p>\n+     *\n+     * @param name  the name of the enum object,\n+     *  must not be empty or <code>null</code>\n+     * @param enumClass  the enum class,\n+     *  must not be null and must be this class or a superclass\n+     * @throws IllegalArgumentException if the name is <code>null</code>\n+     *  or an empty string\n+     * @throws IllegalArgumentException if the enumClass is <code>null</code>\n+     *  or invalid\n+     */\n+    protected Enum(String name, Class enumClass) {\n+        super();\n+        init(name, enumClass);\n+        iName = name;\n+        iEnumClass = enumClass;\n+        iHashCode = 7 + enumClass.hashCode() + 3 * name.hashCode();\n+        // cannot create toString here as subclasses may want to include other data\n+    }\n+\n+    /**\n+     * Initializes the enumeration.\n+     * \n+     * @param name  the enum name\n+     * @param enumClass  the enum class\n+     * @throws IllegalArgumentException if the name is null or empty\n+     * @throws IllegalArgumentException if the enumClass is null or invalid\n+     */\n+    private void init(String name, Class enumClass) {\n         if (StringUtils.isEmpty(name)) {\n             throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n         }\n-        iName = name;\n-        Class enumClass = Enum.getEnumClass(getClass());\n         Entry entry = (Entry) cEnumClasses.get(enumClass);\n         if (entry == null) {\n-            entry = createEntry(getClass());\n+            entry = createEntry(enumClass);\n             cEnumClasses.put(enumClass, entry);\n         }\n         if (entry.map.containsKey(name)) {\n         }\n         entry.map.put(name, this);\n         entry.list.add(this);\n-        \n-        iHashCode = 7 + enumClass.hashCode() + 3 * name.hashCode();\n-        // cannot create toString here as subclasses may want to include other data\n     }\n \n     /**\n      * @return the resolved object\n      */\n     protected Object readResolve() {\n-        Entry entry = (Entry) cEnumClasses.get(Enum.getEnumClass(getClass()));\n+        Entry entry = (Entry) cEnumClasses.get(iEnumClass);\n         if (entry == null) {\n             return null;\n         }\n         return entry;\n     }\n     \n-    /**\n-     * <p>Convert a class to the actual common enum class.</p>\n-     *\n-     * <p>This accounts for anonymous inner classes.</p>\n-     * \n-     * @param cls  the class to get the name for\n-     * @return the class name\n-     */\n-    protected static Class getEnumClass(Class cls) {\n-        String className = cls.getName();\n-        int index = className.lastIndexOf('$');\n-        if (index > -1) {\n-            // is it an anonymous inner class?\n-            String inner = className.substring(index + 1);\n-            if (inner.length() > 0 &&\n-                inner.charAt(0) >= '0' &&\n-                inner.charAt(0) < '9') {\n-                return cls.getSuperclass();\n-            }\n-        }\n-        return cls;\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Retrieve the name of this Enum item, set in the constructor.</p>\n      */\n     public final String getName() {\n         return iName;\n+    }\n+\n+    /**\n+     * <p>Retrieves the Class of this Enum item, set in the constructor.</p>\n+     * \n+     * <p>This is normally the same as <code>getClass()</code>, but for\n+     * advanced Enums may be different.</p>\n+     * \n+     * @return the <code>String</code> name of this Enum item\n+     */\n+    public final Class getEnumClass() {\n+        return iEnumClass;\n     }\n \n     /**\n         } else if (other.getClass() == this.getClass()) {\n             // shouldn't happen, but...\n             return iName.equals(((Enum) other).iName);\n-        } else if (getEnumClass(other.getClass()).getName().equals(getEnumClass(this.getClass()).getName())) {\n+        } else if (((Enum) other).iEnumClass.getName().equals(iEnumClass.getName())) {\n             // different classloaders\n             try {\n                 // try to avoid reflection\n      */\n     public String toString() {\n         if (iToString == null) {\n-            Class cls = Enum.getEnumClass(getClass());\n-            String shortName = ClassUtils.getShortClassName(cls);\n+            String shortName = ClassUtils.getShortClassName(iEnumClass);\n             iToString = shortName + \"[\" + getName() + \"]\";\n         }\n         return iToString;\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.10 2003/07/30 23:17:23 scolebourne Exp $\n+ * @version $Id: ValuedEnum.java,v 1.11 2003/08/04 23:52:27 scolebourne Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     \n     /** Lang version 1.0.1 serial compatability */\n-    static final long serialVersionUID = -7129650521543789085L;\n+    private static final long serialVersionUID = -7129650521543789085L;\n     \n     /**\n      * The value contained in enum.\n     /**\n      * Constructor for enum item.\n      *\n-     * @param name the name of enum item.\n-     * @param value the value of enum item.\n+     * @param name  the name of enum item\n+     * @param value  the value of enum item\n      */\n     protected ValuedEnum(String name, int value) {\n         super(name);\n+        iValue = value;\n+    }\n+\n+    /**\n+     * Constructor for enum item.\n+     *\n+     * @param name  the name of enum item\n+     * @param enumClass  the enum class\n+     * @param value  the value of enum item\n+     */\n+    protected ValuedEnum(String name, Class enumClass, int value) {\n+        super(name, enumClass);\n         iValue = value;\n     }\n \n      */\n     public String toString() {\n         if (iToString == null) {\n-            Class cls = Enum.getEnumClass(getClass());\n-            String shortName = ClassUtils.getShortClassName(cls);\n+            String shortName = ClassUtils.getShortClassName(getEnumClass());\n             iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n         }\n         return iToString;\n--- a/src/test/org/apache/commons/lang/enum/OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/OperationEnum.java\n  * Operator enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: OperationEnum.java,v 1.3 2003/08/02 18:38:36 scolebourne Exp $\n+ * @version $Id: OperationEnum.java,v 1.4 2003/08/04 23:52:27 scolebourne Exp $\n  */\n public abstract class OperationEnum extends Enum {\n-    public static final OperationEnum PLUS;\n-    public static final OperationEnum MINUS;\n-    static {\n-        // Get around JDK Linux bug\n-        PLUS = new OperationEnum(\"Plus\") {\n-            public int eval(int a, int b) {\n-                return (a + b);\n-            }\n-        };\n-        MINUS = new OperationEnum(\"Minus\") {\n-            public int eval(int a, int b) {\n-                return (a - b);\n-            }\n-        };\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n     }\n \n     private OperationEnum(String name) {\n-        super(name);\n+        super(name, OperationEnum.class);\n     }\n \n     public abstract int eval(int a, int b);", "timestamp": 1060041147, "metainfo": ""}