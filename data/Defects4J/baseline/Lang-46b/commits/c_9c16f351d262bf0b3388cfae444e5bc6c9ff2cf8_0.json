{"sha": "9c16f351d262bf0b3388cfae444e5bc6c9ff2cf8", "log": "Fix http://nagoya.apache.org/bugzilla/show_bug.cgi?id=21904 as suggested (but with the guard clause factored in a method.)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n import java.math.BigInteger;\n \n import org.apache.commons.lang.NullArgumentException;\n+import org.apache.commons.lang.StringUtils;\n \n /**\n  * <p>Provides extra functionality for Java Number classes.</p>\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @author Matthew Hawthorne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.6 2003/07/26 15:39:04 scolebourne Exp $\n+ * @version $Id: NumberUtils.java,v 1.7 2003/07/26 19:12:03 ggregory Exp $\n  */\n public class NumberUtils {\n     \n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n+        if (!validateNumber(str)) {\n             return null;\n-        }\n-        if (str.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n         if (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Float createFloat(String str) {\n-        if (str == null) {\n+        if (!validateNumber(str)) {\n             return null;\n         }\n         return Float.valueOf(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Double createDouble(String str) {\n-        if (str == null) {\n+        if (!validateNumber(str)) {\n             return null;\n         }\n         return Double.valueOf(str);\n      */\n     public static Integer createInteger(String str) {\n         // decode() handles 0xAABD and 0777 (hex and octal) as well.\n-        if (str == null) {\n+        if (!validateNumber(str)) {\n             return null;\n         }\n         return Integer.decode(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Long createLong(String str) {\n-        if (str == null) {\n+        if (!validateNumber(str)) {\n             return null;\n         }\n         return Long.valueOf(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static BigInteger createBigInteger(String str) {\n-        if (str == null) {\n+        if (!validateNumber(str)) {\n             return null;\n         }\n         return new BigInteger(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static BigDecimal createBigDecimal(String str) {\n+        if (!validateNumber(str)) {\n+            return null;\n+        }\n+        return new BigDecimal(str);\n+    }\n+\n+    /**\n+     * Checks the validitiy of a <code>String</code> for conversion it to a number.\n+     * <ol>\n+     * <li>If <code>str</code> is <code>null</code>, return <code>false</code>;</li>\n+     * <li>If <code>str</code> is <i>blank</i>, throw a <code>NumberFormatException</code>;</li>\n+     * <li>Otherewise return <code>true</code>.</li>\n+     * </ol>\n+     *  \n+     * @param str The <code>String</code> to check.\n+     * @return Whether or not the argument is suitable for conversion.\n+     */\n+    protected static boolean validateNumber(String str) {\n         if (str == null) {\n-            return null;\n-        }\n-        return new BigDecimal(str);\n-    }\n-\n+            return false;\n+        }\n+        if (StringUtils.isBlank(str)) {\n+            throw new NumberFormatException(\"A blank string is not a valid number.\");\n+        }  \n+        return true;\n+    }\n+    \n     // Min in array\n     //--------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n  * @author Phil Steitz\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n- * @version $Id: NumberUtilsTest.java,v 1.4 2003/07/21 19:42:12 ggregory Exp $\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: NumberUtilsTest.java,v 1.5 2003/07/26 19:12:30 ggregory Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n     public void testCreateFloat() {\n         assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n         assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n-        try {\n-            Float f = NumberUtils.createFloat(\"\");\n-            fail(\"createFloat(empty) failed\");\n+        this.testCreateFloatFailure(\"\");\n+        this.testCreateFloatFailure(\" \");\n+        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateFloatFailure(String str) {\n+        try {\n+            Float value = NumberUtils.createFloat(str);\n+            fail(\"createFloat(blank) failed: \" + value);\n         } catch (NumberFormatException ex) {\n             // empty\n         }\n     public void testCreateDouble() {\n         assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n         assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n-        try {\n-            Double d = NumberUtils.createDouble(\"\");\n-            fail(\"createDouble(empty) failed\");\n+        this.testCreateDoubleFailure(\"\");\n+        this.testCreateDoubleFailure(\" \");\n+        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateDoubleFailure(String str) {\n+        try {\n+            Double value = NumberUtils.createDouble(str);\n+            fail(\"createDouble(blank) failed: \" + value);\n         } catch (NumberFormatException ex) {\n             // empty\n         }\n     public void testCreateInteger() {\n         assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n         assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n-        try {\n-            Integer i = NumberUtils.createInteger(\"\");\n-            fail(\"createInteger(empty) failed\");\n+        this.testCreateIntegerFailure(\"\");\n+        this.testCreateIntegerFailure(\" \");\n+        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateIntegerFailure(String str) {\n+        try {\n+            Integer value = NumberUtils.createInteger(str);\n+            fail(\"createInteger(blank) failed: \" + value);\n         } catch (NumberFormatException ex) {\n             // empty\n         }\n     public void testCreateLong() {\n         assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n         assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n-        try {\n-            Long l = NumberUtils.createLong(\"\");\n-            fail(\"createLong(empty) failed\");\n+        this.testCreateLongFailure(\"\");\n+        this.testCreateLongFailure(\" \");\n+        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateLongFailure(String str) {\n+        try {\n+            Long value = NumberUtils.createLong(str);\n+            fail(\"createLong(blank) failed: \" + value);\n         } catch (NumberFormatException ex) {\n             // empty\n         }\n     public void testCreateBigInteger() {\n         assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n         assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n-        try {\n-            BigInteger i = NumberUtils.createBigInteger(\"\");\n-            fail(\"createBigInteger(empty) failed\");\n+        this.testCreateBigIntegerFailure(\"\");\n+        this.testCreateBigIntegerFailure(\" \");\n+        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateBigIntegerFailure(String str) {\n+        try {\n+            BigInteger value = NumberUtils.createBigInteger(str);\n+            fail(\"createBigInteger(blank) failed: \" + value);\n         } catch (NumberFormatException ex) {\n             // empty\n         }\n     public void testCreateBigDecimal() {\n         assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n         assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n-        try {\n-            BigDecimal d = NumberUtils.createBigDecimal(\"\");\n-            fail(\"createBigDecimal(empty) failed\");\n+        this.testCreateBigDecimalFailure(\"\");\n+        this.testCreateBigDecimalFailure(\" \");\n+        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateBigDecimalFailure(String str) {\n+        try {\n+            BigDecimal value = NumberUtils.createBigDecimal(str);\n+            fail(\"createBigDecimal(blank) failed: \" + value);\n         } catch (NumberFormatException ex) {\n             // empty\n         }", "timestamp": 1059246750, "metainfo": ""}