{"sha": "0fdd78fc2a51ce8e18a1926416aaa7ed21743511", "log": "Add indexOf for primitive arrays   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.16 2003/06/28 18:01:18 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.17 2003/07/12 10:09:40 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      *     {\"BLUE\", \"#0000FF\"}});\n      * </pre>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      *\n      * @param array  an array whose elements are either a {@link java.util.Map.Entry} or \n      *  an Array containing at least two elements, may be <code>null</code>\n         return map;\n     }\n \n+    // Clone\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Shallow clones an array returning a typecast result and handling\n      * <p>The objecs in the array are not cloned, thus there is no special\n      * handling for multi-dimensional arrays.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to shallow clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n         return (boolean[]) array.clone();\n     }\n \n+    // Is same length\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n         return array1.getClass().getName().equals(array2.getClass().getName());\n     }\n \n+    // Reverse\n     //-----------------------------------------------------------------------\n     /** \n      * <p>Reverses the order of the given array.</p>\n      *\n      * <p>There is no special handling for multi-dimensional arrays.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n         }\n     }\n \n-    // IndexOf\n+    // IndexOf search\n+    // ----------------------------------------------------------------------\n+    \n+    // Object IndexOf\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Find the index of the given object in the array.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n     /**\n      * <p>Find the index of the given object in the array starting at the given index.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return -1.</p>\n     /**\n      * <p>Find the last index of the given object within the array.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the last index of the object to find, or -1 if not found\n      */\n     public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        return lastIndexOf(array, objectToFind, array.length - 1);\n+        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n      * <p>Find the last index of the given object in the array starting at the given index.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n      *\n      * <p>A negative startIndex will return -1. A startIndex larger than the array\n      * length will search from the end of the array.</p>\n         return (indexOf(array, objectToFind) != -1);\n     }\n \n+    // long IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final long[] array, final long valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final long[] array, final long valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final long[] array, final long valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // int IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final int[] array, final int valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final int[] array, final int valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final int[] array, final int valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // short IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final short[] array, final short valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final short[] array, final short valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final short[] array, final short valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // byte IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final byte[] array, final byte valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final byte[] array, final byte valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // double IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final double[] array, final double valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // float IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final float[] array, final float valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final float[] array, final float valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final float[] array, final float valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // boolean IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array, or -1 if not found\n+     */\n+    public static int indexOf(final boolean[] array, final boolean valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final boolean[] array, final boolean valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n     // Primitive/Object array converters\n     // ----------------------------------------------------------------------\n     \n     /**\n      * <p>Converts an array of object Booleans to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @return a <code>boolean</code> array\n     /**\n      * <p>Converts an array of object Booleans to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive booleans to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>boolean</code> array\n      * @return a <code>Boolean</code> array\n     /**\n      * <p>Converts an array of object Bytes to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Byte</code> array, may be <code>null</code>\n      * @return a <code>byte</code> array\n     /**\n      * <p>Converts an array of object Bytes to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Byte</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive bytes to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>byte</code> array\n      * @return a <code>Byte</code> array\n     /**\n      * <p>Converts an array of object Shorts to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Short</code> array, may be <code>null</code>\n      * @return a <code>byte</code> array\n     /**\n      * <p>Converts an array of object Short to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Short</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive shorts to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>short</code> array\n      * @return a <code>Short</code> array\n     /**\n      * <p>Converts an array of object Integers to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Integer</code> array, may be <code>null</code>\n      * @return an <code>int</code> array\n     /**\n      * <p>Converts an array of object Integer to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Integer</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive ints to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  an <code>int</code> array\n      * @return an <code>Integer</code> array\n     /**\n      * <p>Converts an array of object Longs to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Long</code> array, may be <code>null</code>\n      * @return a <code>long</code> array\n     /**\n      * <p>Converts an array of object Long to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Long</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive longs to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array a <code>long</code> array\n      * @return a <code>Long</code> array\n     /**\n      * <p>Converts an array of object Floats to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Float</code> array, may be <code>null</code>\n      * @return a <code>float</code> array\n     /**\n      * <p>Converts an array of object Floats to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Float</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive floats to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array a <code>float</code> array\n      * @return a <code>Float</code> array\n     /**\n      * <p>Converts an array of object Doubles to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Double</code> array, may be <code>null</code>\n      * @return a <code>double</code> array\n     /**\n      * <p>Converts an array of object Doubles to primitives handling null.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array  a <code>Double</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive doubles to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      * \n      * @param array a <code>double</code> array\n      * @return a <code>Double</code> array\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Moritz Petersen\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n- * @version $Id: ArrayUtilsTest.java,v 1.8 2003/06/28 18:01:19 scolebourne Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.9 2003/07/12 10:09:40 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\n         assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\n         assertEquals(4, ArrayUtils.indexOf(array, null, 2));\n-        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\", 2));\n         \n         assertEquals(4, ArrayUtils.indexOf(array, null, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 6));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n-        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\n         \n         assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\n         assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n         assertEquals(true, ArrayUtils.contains(array, \"3\"));\n         assertEquals(true, ArrayUtils.contains(array, null));\n         assertEquals(false, ArrayUtils.contains(array, \"notInArray\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfLong() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n+    }\n+\n+    public void testIndexOfLongWithStartIndex() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n+    }\n+\n+    public void testLastIndexOfLong() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+    }\n+\n+    public void testLastIndexOfLongWithStartIndex() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n+    }\n+\n+    public void testContainsLong() {\n+        long[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, 1));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, 0));\n+        assertEquals(true, ArrayUtils.contains(array, 1));\n+        assertEquals(true, ArrayUtils.contains(array, 2));\n+        assertEquals(true, ArrayUtils.contains(array, 3));\n+        assertEquals(false, ArrayUtils.contains(array, 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfInt() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n+    }\n+\n+    public void testIndexOfIntWithStartIndex() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n+    }\n+\n+    public void testLastIndexOfInt() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+    }\n+\n+    public void testLastIndexOfIntWithStartIndex() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n+    }\n+\n+    public void testContainsInt() {\n+        int[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, 1));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, 0));\n+        assertEquals(true, ArrayUtils.contains(array, 1));\n+        assertEquals(true, ArrayUtils.contains(array, 2));\n+        assertEquals(true, ArrayUtils.contains(array, 3));\n+        assertEquals(false, ArrayUtils.contains(array, 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfShort() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\n+    }\n+\n+    public void testIndexOfShortWithStartIndex() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n+    }\n+\n+    public void testLastIndexOfShort() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n+    }\n+\n+    public void testLastIndexOfShortWithStartIndex() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n+    }\n+\n+    public void testContainsShort() {\n+        short[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (short) 1));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (short) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (short) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (short) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (short) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (short) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfByte() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\n+    }\n+\n+    public void testIndexOfByteWithStartIndex() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n+    }\n+\n+    public void testLastIndexOfByte() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n+    }\n+\n+    public void testLastIndexOfByteWithStartIndex() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n+    }\n+\n+    public void testContainsByte() {\n+        byte[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (byte) 1));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (byte) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfDouble() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n+    }\n+\n+    public void testIndexOfDoubleWithStartIndex() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n+    }\n+\n+    public void testLastIndexOfDouble() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n+    }\n+\n+    public void testLastIndexOfDoubleWithStartIndex() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n+    }\n+\n+    public void testContainsDouble() {\n+        double[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (double) 1));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (double) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (double) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfFloat() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));\n+    }\n+\n+    public void testIndexOfFloatWithStartIndex() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n+    }\n+\n+    public void testLastIndexOfFloat() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n+    }\n+\n+    public void testLastIndexOfFloatWithStartIndex() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n+    }\n+\n+    public void testContainsFloat() {\n+        float[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (float) 1));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (float) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (float) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (float) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (float) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (float) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfBoolean() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, true));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(0, ArrayUtils.indexOf(array, true));\n+        assertEquals(1, ArrayUtils.indexOf(array, false));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.indexOf(array, false));\n+    }\n+\n+    public void testIndexOfBooleanWithStartIndex() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\n+    }\n+\n+    public void testLastIndexOfBoolean() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, true));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, false));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\n+    }\n+\n+    public void testLastIndexOfBooleanWithStartIndex() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\n+    }\n+\n+    public void testContainsBoolean() {\n+        boolean[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, true));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(true, ArrayUtils.contains(array, true));\n+        assertEquals(true, ArrayUtils.contains(array, false));\n+        array = new boolean[] { true, true };\n+        assertEquals(true, ArrayUtils.contains(array, true));\n+        assertEquals(false, ArrayUtils.contains(array, false));\n     }\n     \n     // testToPrimitive/Object for boolean", "timestamp": 1058004580, "metainfo": ""}