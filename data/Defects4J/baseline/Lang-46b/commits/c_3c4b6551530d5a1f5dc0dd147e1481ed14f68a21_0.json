{"sha": "3c4b6551530d5a1f5dc0dd147e1481ed14f68a21", "log": "Update testing for FastDateFormat   ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-\n package org.apache.commons.lang.time;\n \n-import junit.framework.*;\n+import java.text.SimpleDateFormat;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n-import java.util.*;\n-import java.text.*;\n \n /**\n  * Unit tests {@link org.apache.commons.lang.time.FastDateFormat}.\n  *\n  * @author Sean Schofield\n  * @since 2.0\n- * @version $Id: FastDateFormatTest.java,v 1.2 2003/01/07 21:21:43 bayard Exp $\n+ * @version $Id: FastDateFormatTest.java,v 1.3 2003/05/21 23:41:21 scolebourne Exp $\n  */\n public class FastDateFormatTest extends TestCase {\n \n         FastDateFormat format1 = FastDateFormat.getInstance();\n         FastDateFormat format2 = FastDateFormat.getInstance();\n         assertSame(format1, format2);\n+        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n     }\n \n     public void test_getInstance_String() {\n         FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n         assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n         assertSame(format1, FastDateFormat.getInstance(\"MM/DD/yyyy\"));\n+        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n     }\n \n     public void test_getInstance_String_TimeZone() {\n         Locale realDefaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n         TimeZone realDefaultZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n-\n-        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n-                TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n-        FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n-        FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n-        FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n-        FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n-\n-        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n-        assertTrue(format1.getTimeZone().equals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\")));\n-        assertNull(format2.getTimeZone());\n-        assertSame(format3, format4);\n-        assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n-\n-        Locale.setDefault(realDefaultLocale);\n-        TimeZone.setDefault(realDefaultZone);\n+        try {\n+            Locale.setDefault(Locale.US);\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n+    \n+            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n+                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n+            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n+            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n+            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n+            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n+    \n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+            assertTrue(format1.getTimeZone().equals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\")));\n+            assertNull(format2.getTimeZone());\n+            assertSame(format3, format4);\n+            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n+            \n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+            TimeZone.setDefault(realDefaultZone);\n+        }\n     }\n \n     public void test_getInstance_String_Locale() {\n         Locale realDefaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n-        FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n-        FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n+        try {\n+            Locale.setDefault(Locale.US);\n+            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n+            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n+            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n \n-        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n-        assertSame(format1, format3);\n-        assertSame(Locale.GERMANY, format1.getLocale());\n-\n-        Locale.setDefault(realDefaultLocale);\n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+            assertSame(format1, format3);\n+            assertSame(Locale.GERMANY, format1.getLocale());\n+            \n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+        }\n     }\n \n     public void test_getInstance_String_TimeZone_Locale() {\n         Locale realDefaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n         TimeZone realDefaultZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n-\n-        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n-                TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n-        FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n-        FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n-                TimeZone.getDefault(), Locale.GERMANY);\n-\n-        assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n-        assertEquals(format1.getTimeZone(), TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n-        assertNull(format2.getTimeZone());\n-        assertEquals(format3.getTimeZone(), TimeZone.getDefault());\n-        assertEquals(format3.getTimeZone(), TimeZone.getTimeZone(\"America/New_York\"));\n-\n-        Locale.setDefault(realDefaultLocale);\n-        TimeZone.setDefault(realDefaultZone);\n+        try {\n+            Locale.setDefault(Locale.US);\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n+    \n+            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n+                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n+            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n+            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n+                    TimeZone.getDefault(), Locale.GERMANY);\n+    \n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n+            assertEquals(format1.getTimeZone(), TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n+            assertNull(format2.getTimeZone());\n+            assertEquals(format3.getTimeZone(), TimeZone.getDefault());\n+            assertEquals(format3.getTimeZone(), TimeZone.getTimeZone(\"America/New_York\"));\n+            \n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+            TimeZone.setDefault(realDefaultZone);\n+        }\n     }\n+    \n }", "timestamp": 1053560481, "metainfo": ""}