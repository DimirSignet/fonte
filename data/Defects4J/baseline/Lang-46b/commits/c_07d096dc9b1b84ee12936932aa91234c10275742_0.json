{"sha": "07d096dc9b1b84ee12936932aa91234c10275742", "log": "[LANG-351] Extension to ClassUtils: Obtain the primitive class from a wrapper. Using @since 2.4.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n import java.util.List;\n import java.util.Map;\n \n+\n /**\n  * <p>Operates on classes without using reflection.</p>\n  *\n     }\n \n     /**\n+     * Maps wrapper <code>Class</code>es to their corresponding primitive types.\n+     */\n+    private static Map wrapperPrimitiveMap = new HashMap();\n+    static {\n+        for (Iterator it = primitiveWrapperMap.keySet().iterator(); it.hasNext();) {\n+            Class primitiveClass = (Class) it.next();\n+            Class wrapperClass = (Class) primitiveWrapperMap.get(primitiveClass);\n+            if (!primitiveClass.equals(wrapperClass)) {\n+                wrapperPrimitiveMap.put(wrapperClass, primitiveClass);\n+            }\n+        }\n+    }\n+\n+    /**\n      * Maps a primitive class name to its corresponding abbreviation used in array class names.\n      */\n     private static Map abbreviationMap = new HashMap();\n         return convertedClasses;\n     }\n \n+    /**\n+     * <p>Converts the specified wrapper class to its corresponding primitive\n+     * class.</p>\n+     *\n+     * <p>This method is the counter part of <code>primitiveToWrapper()</code>.\n+     * If the passed in class is a wrapper class for a primitive type, this\n+     * primitive type will be returned (e.g. <code>Integer.TYPE</code> for\n+     * <code>Integer.class</code>). For other classes, or if the parameter is\n+     * <b>null</b>, the return value is <b>null</b>.</p>\n+     *\n+     * @param cls the class to convert, may be <b>null</b>\n+     * @return the corresponding primitive type if <code>cls</code> is a\n+     * wrapper class, <b>null</b> otherwise\n+     * @see #primitiveToWrapper(Class)\n+     * @since 2.4\n+     */\n+    public static Class wrapperToPrimitive(Class cls) {\n+        return (Class) wrapperPrimitiveMap.get(cls);\n+    }\n+\n+    /**\n+     * <p>Converts the specified array of wrapper Class objects to an array of\n+     * its corresponding primitive Class objects.</p>\n+     *\n+     * <p>This method invokes <code>wrapperToPrimitive()</code> for each element\n+     * of the passed in array.</p>\n+     *\n+     * @param classes  the class array to convert, may be null or empty\n+     * @return an array which contains for each given class, the primitive class or\n+     * <b>null</b> if the original class is not a wrapper class. <code>null</code> if null input.\n+     * Empty array if an empty array passed in.\n+     * @see #wrapperToPrimitive(Class)\n+     * @since 2.4\n+     */\n+    public static Class[] wrappersToPrimitives(Class[] classes) {        \n+        if (classes == null) {\n+            return null;\n+        }\n+\n+        if (classes.length == 0) {\n+            return classes;\n+        }\n+\n+        Class[] convertedClasses = new Class[classes.length];\n+        for (int i=0; i < classes.length; i++) {\n+            convertedClasses[i] = wrapperToPrimitive( classes[i] );\n+        }\n+        return convertedClasses;\n+    }\n+\n     // Inner class\n     // ----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+\n+\n \n /**\n  * Unit tests {@link org.apache.commons.lang.ClassUtils}.\n         assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n     }\n \n+    public void testWrapperToPrimitive() {\n+        // an array with classes to convert\n+        final Class[] primitives = {\n+                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n+                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE\n+        };\n+        for (int i = 0; i < primitives.length; i++) {\n+            Class wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n+            assertFalse(\"Still primitive\", wrapperCls.isPrimitive());\n+            assertEquals(wrapperCls + \" -> \" + primitives[i], primitives[i],\n+                    ClassUtils.wrapperToPrimitive(wrapperCls));\n+        }\n+    }\n+\n+    public void testWrapperToPrimitiveNoWrapper() {\n+        assertNull(\"Wrong result for non wrapper class\", ClassUtils.wrapperToPrimitive(String.class));\n+    }\n+\n+    public void testWrapperToPrimitiveNull() {\n+        assertNull(\"Wrong result for null class\", ClassUtils.wrapperToPrimitive(null));\n+    }\n+\n+    public void testWrappersToPrimitives() {\n+        // an array with classes to test\n+        final Class[] classes = {\n+                Boolean.class, Byte.class, Character.class, Short.class,\n+                Integer.class, Long.class, Float.class, Double.class,\n+                String.class, ClassUtils.class, null\n+        };\n+\n+        Class[] primitives = ClassUtils.wrappersToPrimitives(classes);\n+        // now test the result\n+        assertEquals(\"Wrong length of result array\", classes.length, primitives.length);\n+        for (int i = 0; i < classes.length; i++) {\n+            Class expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n+            assertEquals(classes[i] + \" -> \" + expectedPrimitive, expectedPrimitive,\n+                    primitives[i]);\n+        }\n+    }\n+\n+    public void testWrappersToPrimitivesNull() {\n+        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n+    }\n+\n+    public void testWrappersToPrimitivesEmpty() {\n+        Class[] empty = new Class[0];\n+        assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n+    }\n+\n     public void testGetClassClassNotFound() throws Exception {\n         assertGetClassThrowsClassNotFound( \"bool\" );\n         assertGetClassThrowsClassNotFound( \"bool[]\" );", "timestamp": 1192067501, "metainfo": ""}