{"sha": "4abacfbf779d2b9ae9dbad8283792ad05f3b84be", "log": "Increase test coverage  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n             return -1;\n         }\n         int strLen = str.length();\n-        if (strLen > 0 && strLen <= size) {\n-            if (strLen == 1) {\n-                return indexOf(str.charAt(0), startIndex);\n-            }\n-            char[] thisBuf = buffer;\n-            outer:\n-            for (int i = startIndex; i < thisBuf.length - strLen; i++) {\n-                for (int j = 0; j < strLen; j++) {\n-                    if (str.charAt(j) != thisBuf[i + j]) {\n-                        continue outer;\n-                    }\n+        if (strLen == 1) {\n+            return indexOf(str.charAt(0), startIndex);\n+        }\n+        if (strLen == 0) {\n+            return startIndex;\n+        }\n+        if (strLen > size) {\n+            return -1;\n+        }\n+        char[] thisBuf = buffer;\n+        outer:\n+        for (int i = startIndex; i < thisBuf.length - strLen; i++) {\n+            for (int j = 0; j < strLen; j++) {\n+                if (str.charAt(j) != thisBuf[i + j]) {\n+                    continue outer;\n                 }\n-                return i;\n-            }\n-            \n-        } else if (strLen == 0) {\n-            return 0;\n+            }\n+            return i;\n         }\n         return -1;\n     }\n             return -1;\n         }\n         int len = size;\n-        if (len > 0) {\n-            char[] buf = buffer;\n-            for (int i = startIndex; i < len; i++) {\n-                if (matcher.isMatch(buf, i, startIndex, len) > 0) {\n-                    return i;\n-                }\n+        char[] buf = buffer;\n+        for (int i = startIndex; i < len; i++) {\n+            if (matcher.isMatch(buf, i, startIndex, len) > 0) {\n+                return i;\n             }\n         }\n         return -1;\n         if (matcher == null || startIndex < 0) {\n             return -1;\n         }\n-        int len = size;\n-        if (len > 0) {\n-            char[] buf = buffer;\n-            int endIndex = startIndex + 1;\n-            for (int i = startIndex; i >= 0; i--) {\n-                if (matcher.isMatch(buf, i, 0, endIndex) > 0) {\n-                    return i;\n-                }\n+        char[] buf = buffer;\n+        int endIndex = startIndex + 1;\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (matcher.isMatch(buf, i, 0, endIndex) > 0) {\n+                return i;\n             }\n         }\n         return -1;\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         assertEquals(\"dececced\", sb.toString());\n         sb.replaceAll('c', 'f');\n         assertEquals(\"defeffed\", sb.toString());\n+        sb.replaceAll('d', 'd');\n+        assertEquals(\"defeffed\", sb.toString());\n     }\n \n     //-----------------------------------------------------------------------\n         sb.replaceFirst('b', 'e');\n         assertEquals(\"decbccba\", sb.toString());\n         sb.replaceFirst('c', 'f');\n+        assertEquals(\"defbccba\", sb.toString());\n+        sb.replaceAll('d', 'd');\n         assertEquals(\"defbccba\", sb.toString());\n     }\n \n         assertEquals(\"hello\", sb.midString(-5, 5));\n         assertEquals(\"\", sb.midString(0, -1));\n         assertEquals(\"\", sb.midString(20, 2));\n+        assertEquals(\"hello\", sb.midString(14, 22));\n     }\n \n     public void testRightString() {\n     // -----------------------------------------------------------------------\n     public void testIndexOf_char() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (0, sb.indexOf('a'));\n-        //should work like String#indexOf\n-        assertEquals (\"abab\".indexOf('a'), sb.indexOf('a'));\n-        \n+        assertEquals(0, sb.indexOf('a'));\n+        \n+        // should work like String#indexOf\n+        assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\n+\n         assertEquals(1, sb.indexOf('b'));\n-        assertEquals (\"abab\".indexOf('b'), sb.indexOf('b'));\n-        \n-        assertEquals (-1, sb.indexOf('z'));\n+        assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\n+\n+        assertEquals(-1, sb.indexOf('z'));\n     }\n \n     public void testIndexOf_char_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (2, sb.indexOf('a', 1));\n-        //should work like String#indexOf\n-        assertEquals (\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n-        \n+        assertEquals(0, sb.indexOf('a', -1));\n+        assertEquals(0, sb.indexOf('a', 0));\n+        assertEquals(2, sb.indexOf('a', 1));\n+        assertEquals(-1, sb.indexOf('a', 4));\n+        assertEquals(-1, sb.indexOf('a', 5));\n+\n+        // should work like String#indexOf\n+        assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n+\n         assertEquals(3, sb.indexOf('b', 2));\n-        assertEquals (\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n-        \n-        assertEquals (-1, sb.indexOf('z', 2));\n-        \n+        assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n+\n+        assertEquals(-1, sb.indexOf('z', 2));\n+\n         sb = new StrBuilder(\"xyzabc\");\n-        assertEquals (2, sb.indexOf('z', 0));\n-        assertEquals (-1, sb.indexOf('z', 3));\n+        assertEquals(2, sb.indexOf('z', 0));\n+        assertEquals(-1, sb.indexOf('z', 3));\n     }\n \n     public void testLastIndexOf_char() {\n \n     public void testLastIndexOf_char_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (0, sb.lastIndexOf('a', 1));\n-        //should work like String#lastIndexOf\n-        assertEquals (\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n-        \n+        assertEquals(-1, sb.lastIndexOf('a', -1));\n+        assertEquals(0, sb.lastIndexOf('a', 0));\n+        assertEquals(0, sb.lastIndexOf('a', 1));\n+\n+        // should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n+\n         assertEquals(1, sb.lastIndexOf('b', 2));\n-        assertEquals (\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n-        \n-        assertEquals (-1, sb.lastIndexOf('z', 2));\n-        \n+        assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n+\n+        assertEquals(-1, sb.lastIndexOf('z', 2));\n+\n         sb = new StrBuilder(\"xyzabc\");\n-        assertEquals (2, sb.lastIndexOf('z', sb.length()));\n-        assertEquals (-1, sb.lastIndexOf('z', 1));\n-    }\n-\n-    //-----------------------------------------------------------------------\n+        assertEquals(2, sb.lastIndexOf('z', sb.length()));\n+        assertEquals(-1, sb.lastIndexOf('z', 1));\n+    }\n+\n+    // -----------------------------------------------------------------------\n     public void testIndexOf_String() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         \n \n     public void testIndexOf_String_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n-        \n+        assertEquals(0, sb.indexOf(\"a\", -1));\n+        assertEquals(0, sb.indexOf(\"a\", 0));\n         assertEquals(2, sb.indexOf(\"a\", 1));\n+        assertEquals(2, sb.indexOf(\"a\", 2));\n+        assertEquals(-1, sb.indexOf(\"a\", 3));\n+        assertEquals(-1, sb.indexOf(\"a\", 4));\n+        assertEquals(-1, sb.indexOf(\"a\", 5));\n+        \n+        assertEquals(-1, sb.indexOf(\"abcdef\", 0));\n+        assertEquals(0, sb.indexOf(\"\", 0));\n+        assertEquals(1, sb.indexOf(\"\", 1));\n+        \n         //should work like String#indexOf\n         assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n         \n \n     public void testLastIndexOf_String_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n-        \n+        assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n+        assertEquals(0, sb.lastIndexOf(\"a\", 0));\n         assertEquals(0, sb.lastIndexOf(\"a\", 1));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 2));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 3));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 4));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 5));\n+        \n+        assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\n+        assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\n+        assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n+        \n         //should work like String#lastIndexOf\n         assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n         \n         StrBuilder sb = new StrBuilder();\n         assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n         \n         sb.append(\"ab bd\");\n         assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\n         StrBuilder sb = new StrBuilder();\n         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\n         \n         sb.append(\"ab bd\");\n         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));", "timestamp": 1124139426, "metainfo": ""}