{"sha": "2a41c12c95bb41f7b07a270927b27f3bc5098621", "log": "Add methods to compare dates and calendars in different ways based on bug 26922   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.32 2004/10/13 21:48:00 scolebourne Exp $\n+ * @version $Id: DateUtils.java,v 1.33 2004/10/16 17:08:42 scolebourne Exp $\n  */\n public class DateUtils {\n     \n      * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.\n      * </p>\n      * \n-     * @param date1  the first date, not null\n-     * @param date2  the second date, not null\n+     * @param date1  the first date, not altered, not null\n+     * @param date2  the second date, not altered, not null\n      * @return true if they represent the same day\n      * @throws IllegalArgumentException if either date is <code>null</code>\n      * @since 2.1\n         return isSameDay(cal1, cal2);\n     }\n \n-    //-----------------------------------------------------------------------\n     /**\n      * <p>Checks if two calendar objects are on the same day ignoring time.</p>\n      *\n      * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.\n      * </p>\n      * \n-     * @param cal1  the first calendar, not null\n-     * @param cal2  the second calendar, not null\n+     * @param cal1  the first calendar, not altered, not null\n+     * @param cal2  the second calendar, not altered, not null\n      * @return true if they represent the same day\n      * @throws IllegalArgumentException if either calendar is <code>null</code>\n      * @since 2.1\n         return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Checks if two date objects represent the same instant in time.</p>\n+     *\n+     * <p>This method compares the long millisecond time of the two objects.</p>\n+     * \n+     * @param date1  the first date, not altered, not null\n+     * @param date2  the second date, not altered, not null\n+     * @return true if they represent the same millisecond instant\n+     * @throws IllegalArgumentException if either date is <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isSameInstant(Date date1, Date date2) {\n+        if (date1 == null || date2 == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        return (date1.getTime() == date2.getTime());\n+    }\n+\n+    /**\n+     * <p>Checks if two calendar objects represent the same instant in time.</p>\n+     *\n+     * <p>This method compares the long millisecond time of the two objects.</p>\n+     * \n+     * @param cal1  the first calendar, not altered, not null\n+     * @param cal2  the second calendar, not altered, not null\n+     * @return true if they represent the same millisecond instant\n+     * @throws IllegalArgumentException if either date is <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isSameInstant(Calendar cal1, Calendar cal2) {\n+        if (cal1 == null || cal2 == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        return (cal1.getTime().getTime() == cal2.getTime().getTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Checks if two calendar objects represent the same local time.</p>\n+     *\n+     * <p>This method compares the values of the fields of the two objects.\n+     * In addition, both calendars must be the same of the same type.</p>\n+     * \n+     * @param cal1  the first calendar, not altered, not null\n+     * @param cal2  the second calendar, not altered, not null\n+     * @return true if they represent the same millisecond instant\n+     * @throws IllegalArgumentException if either date is <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+        if (cal1 == null || cal2 == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n+                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n+                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n+                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n+                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n+                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n+                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n+                cal1.getClass() == cal2.getClass());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n         assertEquals(true, DateUtils.isSameDay(date1, date2));\n         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n         assertEquals(false, DateUtils.isSameDay(date1, date2));\n+        try {\n+            DateUtils.isSameDay((Date) null, (Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n     \n     //-----------------------------------------------------------------------\n         assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n         cal2.add(Calendar.YEAR, 1);\n         assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n+        try {\n+            DateUtils.isSameDay((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameInstant_Date() {\n+        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n+        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n+        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n+        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n+        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n+        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n+        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n+        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n+        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n+        try {\n+            DateUtils.isSameInstant((Date) null, (Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameInstant_Cal() {\n+        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n+        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n+        cal1.set(2004, 6, 9, 13, 45, 0);\n+        cal1.set(Calendar.MILLISECOND, 0);\n+        cal2.set(2004, 6, 9, 13, 45, 0);\n+        cal2.set(Calendar.MILLISECOND, 0);\n+        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));\n+        \n+        cal2.set(2004, 6, 9, 11, 45, 0);\n+        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));\n+        try {\n+            DateUtils.isSameInstant((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameLocalTime_Cal() {\n+        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n+        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n+        cal1.set(2004, 6, 9, 13, 45, 0);\n+        cal1.set(Calendar.MILLISECOND, 0);\n+        cal2.set(2004, 6, 9, 13, 45, 0);\n+        cal2.set(Calendar.MILLISECOND, 0);\n+        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n+        \n+        cal2.set(2004, 6, 9, 11, 45, 0);\n+        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n+        try {\n+            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1097946522, "metainfo": ""}