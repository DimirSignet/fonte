{"sha": "7cafa9219bafb52beba161d1e42a57a766f48d26", "log": "This adds an array-argument based version of primitiveToWrapper. Apart from the argument of not having array based versions for every method, I can't see any reason not to add it, so have patched, modified and committing.  The origonal version optimised by returning the passed in array if there were no primitives. This seems a bit magical.  PR: #27640 Submitted by:\tAlban Peignier   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.28 2004/02/24 06:01:28 ggregory Exp $\n+ * @version $Id: ClassUtils.java,v 1.29 2004/06/27 04:42:54 bayard Exp $\n  */\n public class ClassUtils {\n \n         }   \n         return convertedClass;\n     }\n+\n+    /**\n+     * <p>Converts the specified array of primitive Class objects to an array of \n+     * its corresponding wrapper Class objects.</p>\n+     *\n+     * @param classes  the class array to convert, may be null or empty\n+     * @return an array which contains for each given class, the wrapper class or \n+     * the original class if class is not a primitive. <code>null</code> if null input. \n+     * Empty array if an empty array passed in.\n+     */\n+    public static Class[] primitivesToWrappers(Class[] classes) {\n+        if (classes == null) {\n+            return null;\n+        }\n+        \n+        if (classes.length == 0) {\n+            return ArrayUtils.EMPTY_CLASS_ARRAY;\n+        }\n+        \n+        Class[] convertedClasses = new Class[classes.length];\n+        for (int i=0; i < classes.length; i++) {\n+            convertedClasses[i] = primitiveToWrapper( classes[i] );\n+        }\n+        return convertedClasses;\n+    }\n     \n     // Inner class\n     // ----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n- * @version $Id: ClassUtilsTest.java,v 1.11 2004/02/18 23:22:29 ggregory Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.12 2004/06/27 04:42:54 bayard Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n         assertNull(\"null -> null\",\n             ClassUtils.primitiveToWrapper(null));\n     }\n+\n+    public void testPrimitivesToWrappers() {\n+        // test null\n+        assertNull(\"null -> null\",\n+            ClassUtils.primitivesToWrappers(null));\n+        // test empty array\n+        assertEquals(\"empty -> empty\",\n+                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n+\n+        // test an array of various classes\n+        final Class[] primitives = new Class[] {\n+                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, \n+                Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n+                String.class, ClassUtils.class\n+        };\n+        Class[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n+        \n+        for (int i=0; i < primitives.length; i++) {\n+            // test each returned wrapper\n+            Class primitive = primitives[i];\n+            Class expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n+            \n+            assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n+        }\n+\n+        // test an array of no primitive classes\n+        final Class[] noPrimitives = new Class[] {\n+                String.class, ClassUtils.class\n+        };\n+        // This used to return the exact same array, but no longer does.\n+        assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n+    }\n     \n     public void testClassComparator() {\n     \tComparator comparator = ClassUtils.CLASS_NAME_COMPARATOR;", "timestamp": 1088311374, "metainfo": ""}