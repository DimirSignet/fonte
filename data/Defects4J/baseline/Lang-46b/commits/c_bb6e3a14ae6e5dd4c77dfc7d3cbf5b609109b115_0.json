{"sha": "bb6e3a14ae6e5dd4c77dfc7d3cbf5b609109b115", "log": "Add remove() methods to StringUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Al Chou\n  * @author Michael Davey\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.132 2004/07/30 01:55:42 ggregory Exp $\n+ * @version $Id: StringUtils.java,v 1.133 2004/08/15 23:47:05 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n         return str;\n     }\n \n+    /**\n+     * <p>Removes all occurances of a substring from within the source string.</p>\n+     *\n+     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * An empty (\"\") source string will return the empty string.\n+     * A <code>null</code> remove string will return the source string.\n+     * An empty (\"\") remove string will return the source string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.remove(null, *)        = null\n+     * StringUtils.remove(\"\", *)          = \"\"\n+     * StringUtils.remove(*, null)        = *\n+     * StringUtils.remove(*, \"\")          = *\n+     * StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n+     * StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n+     * </pre>\n+     *\n+     * @param str  the source String to search, may be null\n+     * @param remove  the String to search for and remove, may be null\n+     * @return the substring with the string removed if found,\n+     *  <code>null</code> if null String input\n+     * @since 2.1\n+     */\n+    public static String remove(String str, String remove) {\n+        if (isEmpty(str) || isEmpty(remove)) {\n+            return str;\n+        }\n+        return replace(str, remove, \"\", -1);\n+    }\n+\n+    /**\n+     * <p>Removes all occurances of a character from within the source string.</p>\n+     *\n+     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * An empty (\"\") source string will return the empty string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.remove(null, *)       = null\n+     * StringUtils.remove(\"\", *)         = \"\"\n+     * StringUtils.remove(\"queued\", 'u') = \"qeed\"\n+     * StringUtils.remove(\"queued\", 'z') = \"queued\"\n+     * </pre>\n+     *\n+     * @param str  the source String to search, may be null\n+     * @param remove  the char to search for and remove, may be null\n+     * @return the substring with the char removed if found,\n+     *  <code>null</code> if null String input\n+     * @since 2.1\n+     */\n+    public static String remove(String str, char remove) {\n+        if (isEmpty(str) || str.indexOf(remove) == -1) {\n+            return str;\n+        }\n+        char[] chars = str.toCharArray();\n+        int pos = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            if (chars[i] != remove) {\n+                chars[pos++] = chars[i];\n+            }\n+        }\n+        return new String(chars, 0, pos);\n+    }\n+\n     // Replacing\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Phil Steitz\n  * @author Gary D. Gregory\n  * @author Al Chou\n- * @version $Id: StringUtilsTest.java,v 1.60 2004/07/11 16:49:07 stevencaswell Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.61 2004/08/15 23:47:05 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n         assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n     }\n+\n+    public void testRemove_String() {\n+        // StringUtils.remove(null, *)        = null\n+        assertEquals(null, StringUtils.remove(null, null));\n+        assertEquals(null, StringUtils.remove(null, \"\"));\n+        assertEquals(null, StringUtils.remove(null, \"a\"));\n+        \n+        // StringUtils.remove(\"\", *)          = \"\"\n+        assertEquals(\"\", StringUtils.remove(\"\", null));\n+        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n+        \n+        // StringUtils.remove(*, null)        = *\n+        assertEquals(null, StringUtils.remove(null, null));\n+        assertEquals(\"\", StringUtils.remove(\"\", null));\n+        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n+        \n+        // StringUtils.remove(*, \"\")          = *\n+        assertEquals(null, StringUtils.remove(null, \"\"));\n+        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n+        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n+        \n+        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n+        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n+        \n+        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n+        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n+    }\n+\n+    public void testRemove_char() {\n+        // StringUtils.remove(null, *)       = null\n+        assertEquals(null, StringUtils.remove(null, 'a'));\n+        assertEquals(null, StringUtils.remove(null, 'a'));\n+        assertEquals(null, StringUtils.remove(null, 'a'));\n+        \n+        // StringUtils.remove(\"\", *)          = \"\"\n+        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n+        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n+        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n+        \n+        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n+        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n+        \n+        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n+        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n+    }\n+\n }\n-", "timestamp": 1092613625, "metainfo": ""}