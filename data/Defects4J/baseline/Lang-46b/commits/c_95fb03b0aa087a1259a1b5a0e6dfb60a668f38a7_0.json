{"sha": "95fb03b0aa087a1259a1b5a0e6dfb60a668f38a7", "log": "Add getLength method bug 26594, from Maarten Coene   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n+ * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.40 2004/02/03 22:14:24 ggregory Exp $\n+ * @version $Id: ArrayUtils.java,v 1.41 2004/02/14 01:15:19 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n         return true;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Returns the length of the specified array.\n+     * This method can deal with <code>Object</code> arrays and with primitive arrays.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, <code>0</code> is returned.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.getLength(null)            = 0\n+     * ArrayUtils.getLength([])              = 0\n+     * ArrayUtils.getLength([null])          = 1\n+     * ArrayUtils.getLength([true, false])   = 2\n+     * ArrayUtils.getLength([1, 2, 3])       = 3\n+     * ArrayUtils.getLength([\"a\", \"b\", \"c\"]) = 3\n+     * </pre>\n+     *\n+     * @param array  the array to retrieve the length from, may be null\n+     * @return The length of the array, or <code>0</code> if the array is <code>null</code>\n+     * @throws IllegalArgumentException if the object arguement is not an array.\n+     */\n+    public static int getLength(final Object array) {\n+        if (array == null) {\n+            return 0;\n+        } else {\n+            return Array.getLength(array);\n+        }\n+    }\n+    \n+    /**\n+     * Returns the last index of the given array or -1 if empty or null.\n+     * This method can deal with <code>Object</code> arrays and with primitive arrays.\n+     * This value is one less than the size since arrays indices are 0-based.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.lastIndex(null)            = -1\n+     * ArrayUtils.lastIndex([])              = -1\n+     * ArrayUtils.lastIndex([null])          = 0\n+     * ArrayUtils.lastIndex([true, false])   = 1\n+     * ArrayUtils.lastIndex([1, 2, 3])       = 2\n+     * ArrayUtils.lastIndex([\"a\", \"b\", \"c\"]) = 2\n+     * </pre>\n+     *  \n+     * @param array  the array to return the last index for, may be null\n+     * @return the last index, -1 if empty or null\n+     * @throws IllegalArgumentException if the object arguement is not an array.\n+     */\n+    public static int lastIndex(final Object array) {\n+        return ArrayUtils.getLength(array) - 1;\n+    }\n+    \n     /**\n      * <p>Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.</p>\n     }\n     \n     /**\n-     * Returns the last index of the given array. This value is one less than the size since\n-     * arrays indices are 0-based.\n-     *  \n-     * @param array The array to return the last index for, must not be <code>null</code>.\n-     * @return The last index\n-     */\n-    public static int lastIndex(final Object array) {\n-        return Array.getLength(array) - 1;\n-    }\n-    \n-    /**\n      * <p>Inserts the specified element at the specified position in the array. \n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n         }\n         return (Object[]) result;\n     }\n+    \n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n- * @version $Id: ArrayUtilsTest.java,v 1.24 2004/02/03 22:14:24 ggregory Exp $\n+ * @author Maarten Coene\n+ * @version $Id: ArrayUtilsTest.java,v 1.25 2004/02/14 01:15:20 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));\n         assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n     }\n+    \n+    // ------------------------------------------------------------------------\n+    public void testGetLength() {\n+        assertEquals(0, ArrayUtils.getLength(null));\n+        \n+        Object[] emptyObjectArray = new Object[0];\n+        Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n+        assertEquals(0, ArrayUtils.getLength((Object[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\n+ \n+        int[] emptyIntArray = new int[] {};\n+        int[] notEmptyIntArray = new int[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((int[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyIntArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\n+\n+        short[] emptyShortArray = new short[] {};\n+        short[] notEmptyShortArray = new short[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((short[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyShortArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\n+\n+        char[] emptyCharArray = new char[] {};\n+        char[] notEmptyCharArray = new char[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((char[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyCharArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\n+\n+        byte[] emptyByteArray = new byte[] {};\n+        byte[] notEmptyByteArray = new byte[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((byte[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyByteArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\n+\n+        double[] emptyDoubleArray = new double[] {};\n+        double[] notEmptyDoubleArray = new double[] { 1.0 };\n+        assertEquals(0, ArrayUtils.getLength((double[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\n+\n+        float[] emptyFloatArray = new float[] {};\n+        float[] notEmptyFloatArray = new float[] { 1.0F };\n+        assertEquals(0, ArrayUtils.getLength((float[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\n+\n+        boolean[] emptyBooleanArray = new boolean[] {};\n+        boolean[] notEmptyBooleanArray = new boolean[] { true };\n+        assertEquals(0, ArrayUtils.getLength((boolean[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\n+        \n+        try {\n+            ArrayUtils.getLength(\"notAnArray\");\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    public void testLastIndex() {\n+        assertEquals(-1, ArrayUtils.lastIndex(null));\n+        \n+        Object[] emptyObjectArray = new Object[0];\n+        Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n+        assertEquals(-1, ArrayUtils.lastIndex((Object[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyObjectArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyObjectArray));\n+ \n+        int[] emptyIntArray = new int[] {};\n+        int[] notEmptyIntArray = new int[] { 1 };\n+        assertEquals(-1, ArrayUtils.lastIndex((int[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyIntArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyIntArray));\n+\n+        short[] emptyShortArray = new short[] {};\n+        short[] notEmptyShortArray = new short[] { 1 };\n+        assertEquals(-1, ArrayUtils.lastIndex((short[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyShortArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyShortArray));\n+\n+        char[] emptyCharArray = new char[] {};\n+        char[] notEmptyCharArray = new char[] { 1 };\n+        assertEquals(-1, ArrayUtils.lastIndex((char[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyCharArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyCharArray));\n+\n+        byte[] emptyByteArray = new byte[] {};\n+        byte[] notEmptyByteArray = new byte[] { 1 };\n+        assertEquals(-1, ArrayUtils.lastIndex((byte[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyByteArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyByteArray));\n+\n+        double[] emptyDoubleArray = new double[] {};\n+        double[] notEmptyDoubleArray = new double[] { 1.0 };\n+        assertEquals(-1, ArrayUtils.lastIndex((double[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyDoubleArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyDoubleArray));\n+\n+        float[] emptyFloatArray = new float[] {};\n+        float[] notEmptyFloatArray = new float[] { 1.0F };\n+        assertEquals(-1, ArrayUtils.lastIndex((float[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyFloatArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyFloatArray));\n+\n+        boolean[] emptyBooleanArray = new boolean[] {};\n+        boolean[] notEmptyBooleanArray = new boolean[] { true };\n+        assertEquals(-1, ArrayUtils.lastIndex((boolean[]) null));\n+        assertEquals(-1, ArrayUtils.lastIndex(emptyBooleanArray));\n+        assertEquals(0, ArrayUtils.lastIndex(notEmptyBooleanArray));\n+        \n+        try {\n+            ArrayUtils.lastIndex(\"notAnArray\");\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n }", "timestamp": 1076721320, "metainfo": ""}