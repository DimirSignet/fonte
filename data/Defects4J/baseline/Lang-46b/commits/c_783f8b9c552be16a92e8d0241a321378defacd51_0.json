{"sha": "783f8b9c552be16a92e8d0241a321378defacd51", "log": "remove accidental use of 1.5+ method  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n         private String stripFormats(String pattern) {\n             StringBuffer sb = new StringBuffer(pattern.length());\n             ParsePosition pos = new ParsePosition(0);\n+            char[] c = pattern.toCharArray();\n             while (pos.getIndex() < pattern.length()) {\n-                switch (pattern.charAt(pos.getIndex())) {\n+                switch (c[pos.getIndex()]) {\n                 case QUOTE:\n                     appendQuotedString(pattern, pos, sb, true);\n                     break;\n                 case START_FE:\n                     int start = pos.getIndex();\n                     readArgumentIndex(pattern, next(pos));\n-                    sb.append(pattern, start, pos.getIndex());\n-                    if (pattern.charAt(pos.getIndex()) == START_FMT) {\n+                    sb.append(c, start, pos.getIndex() - start);\n+                    if (c[pos.getIndex()] == START_FMT) {\n                         eatFormat(pattern, next(pos));\n                     }\n-                    if (pattern.charAt(pos.getIndex()) != END_FE) {\n+                    if (c[pos.getIndex()] != END_FE) {\n                         throw new IllegalArgumentException(\n                                 \"Unreadable format element at position \"\n                                         + start);\n                     }\n                     // fall through\n                 default:\n-                    sb.append(pattern.charAt(pos.getIndex()));\n+                    sb.append(c[pos.getIndex()]);\n                     next(pos);\n                 }\n             }\n         private StringBuffer appendQuotedString(String pattern,\n                 ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {\n             int start = pos.getIndex();\n-            if (escapingOn && pattern.charAt(start) == QUOTE) {\n+            char[] c = pattern.toCharArray();\n+            if (escapingOn && c[start] == QUOTE) {\n                 return appendTo == null ? null : appendTo.append(QUOTE);\n             }\n             int lastHold = start;\n             for (int i = pos.getIndex(); i < pattern.length(); i++) {\n                 if (escapingOn\n                         && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                    appendTo.append(pattern, lastHold, pos.getIndex()).append(\n+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                             QUOTE);\n                     pos.setIndex(i + ESCAPED_QUOTE.length());\n                     lastHold = pos.getIndex();\n                     continue;\n                 }\n-                switch (pattern.charAt(pos.getIndex())) {\n-                case QUOTE:\n-                    next(pos);\n-                    return appendTo == null ? null : appendTo.append(pattern,\n-                            lastHold, pos.getIndex());\n+                switch (c[pos.getIndex()]) {\n+                case QUOTE:\n+                    next(pos);\n+                    return appendTo == null ? null : appendTo.append(c,\n+                            lastHold, pos.getIndex() - lastHold);\n                 default:\n                     next(pos);\n                 }", "timestamp": 1194279368, "metainfo": ""}