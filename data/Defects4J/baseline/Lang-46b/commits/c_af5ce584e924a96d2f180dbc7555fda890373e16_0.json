{"sha": "af5ce584e924a96d2f180dbc7555fda890373e16", "log": "Style changes to match rest of class  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n         return getClass(loader, className, initialize );\n     }\n \n-    \n+    // Public method\n+    // ----------------------------------------------------------------------\n     /**\n      * <p>Returns the desired Method much like <code>Class.getMethod</code>, however \n      * it ensures that the returned Method is from a public class or interface and not \n      *  Object result = method.invoke(set, new Object[]);</pre></code>\n      * </p>\n      *\n-     * @param cls the class to check\n-     * @param methodName the name of the method\n-     * @param parameterTypes the list of parameters\n+     * @param cls  the class to check, not null\n+     * @param methodName  the name of the method\n+     * @param parameterTypes  the list of parameters\n      * @return the method\n-     * @throws SecurityException If a a security violation occured\n-     * @throws NoSuchMethodException If the method is not found in the given class\n+     * @throws NullPointerException if the class is null\n+     * @throws SecurityException if a a security violation occured\n+     * @throws NoSuchMethodException if the method is not found in the given class\n      *  or if the metothod doen't conform with the requirements\n      */\n     public static Method getPublicMethod(Class cls, String methodName, Class parameterTypes[]) \n-        throws SecurityException, NoSuchMethodException \n-    {\n+            throws SecurityException, NoSuchMethodException {\n         \n         Method declaredMethod = cls.getMethod(methodName, parameterTypes);\n- \n         if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n             return declaredMethod;\n         }\n-\n+        \n         List candidateClasses = new ArrayList();\n         candidateClasses.addAll(getAllInterfaces(cls));\n         candidateClasses.addAll(getAllSuperclasses(cls));\n-\n-        for (Iterator iter=candidateClasses.iterator(); iter.hasNext(); ) {\n-            Class candidateClass = (Class) iter.next();\n+        \n+        for (Iterator it = candidateClasses.iterator(); it.hasNext(); ) {\n+            Class candidateClass = (Class) it.next();\n             if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                 continue;\n             }\n             Method candidateMethod;\n             try {\n                 candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n-            } catch (NoSuchMethodException e) {\n+            } catch (NoSuchMethodException ex) {\n                 continue;\n             }\n             if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n             }\n         }\n         \n-        String message = \"Can't find an public method for \" + methodName + \" \" + ArrayUtils.toString(parameterTypes); \n-        throw new NoSuchMethodException(message);\n-    }\n-\n+        throw new NoSuchMethodException(\"Can't find a public method for \" +\n+                methodName + \" \" + ArrayUtils.toString(parameterTypes));\n+    }\n+\n+    // ----------------------------------------------------------------------\n     /**\n      * Converts a class name to a JLS style class name.\n      *", "timestamp": 1147522237, "metainfo": ""}