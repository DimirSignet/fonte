{"sha": "d2e0998539f99243bb8d69da6845b2905cd610f0", "log": "Applying the optimisation advised by Paul Benedict in #39368  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n         if (end == -1) {\n             return text;\n         }\n-        int increase = with.length() - repl.length();\n+        int replLength = repl.length();\n+        int increase = with.length() - replLength;\n         increase = (increase < 0 ? 0 : increase);\n         increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));\n         StringBuffer buf = new StringBuffer(text.length() + increase);\n         while (end != -1) {\n             buf.append(text.substring(start, end)).append(with);\n-            start = end + repl.length();\n+            start = end + replLength;\n             if (--max == 0) {\n                 break;\n             }\n             replaceChars = \"\";\n         }\n         boolean modified = false;\n-        StringBuffer buf = new StringBuffer(str.length());\n-        for (int i = 0; i < str.length(); i++) {\n+        int replaceCharsLength = replaceChars.length();\n+        int strLength = str.length();\n+        StringBuffer buf = new StringBuffer(strLength);\n+        for (int i = 0; i < strLength; i++) {\n             char ch = str.charAt(i);\n             int index = searchChars.indexOf(ch);\n             if (index >= 0) {\n                 modified = true;\n-                if (index < replaceChars.length()) {\n+                if (index < replaceCharsLength) {\n                     buf.append(replaceChars.charAt(index));\n                 }\n             } else {", "timestamp": 1146630827, "metainfo": ""}