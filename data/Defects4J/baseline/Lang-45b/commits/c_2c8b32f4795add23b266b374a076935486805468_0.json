{"sha": "2c8b32f4795add23b266b374a076935486805468", "log": "Update slice methods to be more consistent from Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.77 2003/07/22 23:36:40 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.78 2003/07/25 00:50:00 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      * An empty (\"\") string input will return the empty string.\n      * An empty or <code>null</code> separator will return the input string.</p>\n-     *\n-     * <p>This method is the opposite of {@link #sliceRemainder(String, String)}.</p>\n      * \n      * <pre>\n      * StringUtils.slice(null, *)      = null\n         if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n             return str;\n         }\n-        int idx = str.lastIndexOf(separator);\n-        if (idx != -1) {\n-            return str.substring(0, idx);\n-        } else {\n+        int pos = str.lastIndexOf(separator);\n+        if (pos == -1) {\n             return str;\n         }\n+        return str.substring(0, pos);\n     }\n \n     /**\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the empty string.</p>\n-     * \n-     * <p>This method is the opposite of {@link #slice(String, String)}.</p>\n+     * An empty or <code>null</code> separator will return the empty string if\n+     * the input string is not <code>null</code>.</p>\n      *\n      * <pre>\n      * StringUtils.sliceRemainder(null, *)         = null\n         if (separator == null || separator.length() == 0) {\n             return \"\";\n         }\n-        int idx = str.lastIndexOf(separator);\n-        if (idx == str.length() - separator.length()) {\n+        int pos = str.lastIndexOf(separator);\n+        if (pos == -1 || pos == (str.length() - separator.length())) {\n             return \"\";\n-        } else if (idx != -1) {\n-            return str.substring(idx + separator.length());\n-        } else {\n-            return \"\";\n-        }\n+        }\n+        return str.substring(pos + separator.length());\n     }\n \n     /**\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the input string.</p>\n-     * \n-     * <p>This method is the opposite of {@link #sliceFirst(String, String)}.</p>\n+     * A <code>null</code> separator will return the input string.</p>\n      *\n      * <pre>\n      * StringUtils.sliceFirst(null, *)         = null\n      * StringUtils.sliceFirst(\"abc\", \"a\")      = \"\"\n      * StringUtils.sliceFirst(\"abcba\", \"b\")    = \"a\"\n      * StringUtils.sliceFirst(\"abc\", \"c\")      = \"ab\"\n-     * StringUtils.sliceFirst(\"abc\", \"d\")      = \"\"\n-     * StringUtils.sliceFirst(\"abc\", \"\")       = \"abc\"\n+     * StringUtils.sliceFirst(\"abc\", \"d\")      = \"abc\"\n+     * StringUtils.sliceFirst(\"abc\", \"\")       = \"\"\n      * StringUtils.sliceFirst(\"abc\", null)     = \"abc\"\n      * </pre>\n      *\n      * @return sliced String, <code>null</code> if null String input\n      */\n     public static String sliceFirst(String str, String separator) {\n-        if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n+        if (str == null || separator == null || str.length() == 0) {\n             return str;\n         }\n-        int idx = str.indexOf(separator);\n-        if (idx != -1) {\n-            return str.substring(0, idx);\n-        } else {\n+        if (separator.length() == 0) {\n             return \"\";\n         }\n+        int pos = str.indexOf(separator);\n+        if (pos == -1) {\n+            return str;\n+        }\n+        return str.substring(0, pos);\n     }\n \n     /**\n      *\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the empty string.</p>\n-     * \n-     * <p>This method is the opposite of {@link #sliceFirst(String, String)}.</p>\n-     *\n-     * <pre>\n-     * StringUtils.sliceFirstRemainder(null, *)         = null\n-     * StringUtils.sliceFirstRemainder(\"\", *)           = \"\"\n-     * StringUtils.sliceFirstRemainder(*, \"\")           = \"\"\n-     * StringUtils.sliceFirstRemainder(*, null)         = \"\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"a\")      = \"bc\"\n-     * StringUtils.sliceFirstRemainder(\"abcba\", \"b\")    = \"cba\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"c\")      = \"\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"d\")      = \"abc\"\n+     * A <code>null</code> separator will return the empty string if the\n+     * input string is not <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.sliceFirstRemainder(null, *)      = null\n+     * StringUtils.sliceFirstRemainder(\"\", *)        = \"\"\n+     * StringUtils.sliceFirstRemainder(*, null)      = \"\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"a\")   = \"bc\"\n+     * StringUtils.sliceFirstRemainder(\"abcba\", \"b\") = \"cba\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"c\")   = \"\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"d\")   = \"\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"\")    = \"abc\"\n      * </pre>\n      *\n      * <p><em>(This method was formerly named prechomp.  Also, previously\n         if (str == null || str.length() == 0) {\n             return str;\n         }\n-        if (separator == null || separator.length() == 0) {\n+        if (separator == null) {\n             return \"\";\n         }\n-        int idx = str.indexOf(separator);\n-        if (idx != -1) {\n-            return str.substring(idx + separator.length());\n-        } else {\n-            return str;\n-        }\n+        int pos = str.indexOf(separator);\n+        if (pos == -1) {\n+            return \"\";\n+        }\n+        return str.substring(pos + separator.length());\n     }\n \n     // Conversion\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.37 2003/07/22 23:36:39 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.38 2003/07/25 00:50:00 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(\"\", StringUtils.sliceFirst(\"\", \"XX\"));\n         \n         assertEquals(\"foo\", StringUtils.sliceFirst(\"foo\", null));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"foo\", \"b\"));\n+        assertEquals(\"foo\", StringUtils.sliceFirst(\"foo\", \"b\"));\n         assertEquals(\"f\", StringUtils.sliceFirst(\"foot\", \"o\"));\n         assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"a\"));\n         assertEquals(\"a\", StringUtils.sliceFirst(\"abcba\", \"b\"));\n         assertEquals(\"ab\", StringUtils.sliceFirst(\"abc\", \"c\"));\n-        assertEquals(\"abc\", StringUtils.sliceFirst(\"abc\", \"\"));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"d\"));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"\"));\n     }\n     \n     public void testSliceFirstRemainder_StringString() {\n         assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", \"XX\"));\n         \n         assertEquals(\"\", StringUtils.sliceFirstRemainder(\"foo\", null));\n-        assertEquals(\"foo\", StringUtils.sliceFirstRemainder(\"foo\", \"b\"));\n         assertEquals(\"ot\", StringUtils.sliceFirstRemainder(\"foot\", \"o\"));\n         assertEquals(\"bc\", StringUtils.sliceFirstRemainder(\"abc\", \"a\"));\n         assertEquals(\"cba\", StringUtils.sliceFirstRemainder(\"abcba\", \"b\"));\n         assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"c\"));\n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"\"));\n-        assertEquals(\"abc\", StringUtils.sliceFirstRemainder(\"abc\", \"d\"));\n+        assertEquals(\"abc\", StringUtils.sliceFirstRemainder(\"abc\", \"\"));\n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"d\"));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1059094200, "metainfo": ""}