{"sha": "474154014bc9cc9eff614a3378ce074bc120245e", "log": "Better unit test code coverage from Nathan Beyer [nbeyer@kc.rr.com].  ", "commit": "\n--- a/src/test/org/apache/commons/lang/math/MathTestSuite.java\n+++ b/src/test/org/apache/commons/lang/math/MathTestSuite.java\n         suite.addTest(NumberRangeTest.suite());\n         suite.addTest(NumberUtilsTest.suite());\n         suite.addTest(RandomUtilsTest.suite());\n+        suite.addTest(RangeTest.suite());\n         return suite;\n     }\n }\n--- a/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n \n     //--------------------------------------------------------------------------\n \n+    public void testConstructorExceptions() {\n+        try {\n+            new NumberRange (new Double (Double.NaN));\n+            fail(\"no illegal argument exception\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        \n+        try {\n+            new NumberRange (new Double (Double.NaN), new Double (12.2));\n+            fail(\"no illegal argument exception\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        \n+        try {\n+            new NumberRange (new Double (12.2), new Double (Double.NaN));\n+            fail(\"no illegal argument exception\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        \n+        try {\n+            new NumberRange (new Float (Float.NaN));\n+            fail(\"no illegal argument exception\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        \n+        try {\n+            new NumberRange (new Float (Float.NaN), new Float(12.2));\n+            fail(\"no illegal argument exception\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        \n+        try {\n+            new NumberRange (new Float(12.2), new Float (Float.NaN));\n+            fail(\"no illegal argument exception\");\n+        } catch (IllegalArgumentException e) {\n+        }       \n+    }\n+    \n     public void testConstructor1() {\n         NumberRange nr = new NumberRange(five);\n         assertSame(five, nr.getMinimumNumber());\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n         assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n         assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n+        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n+        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n         assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n         assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n+        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n         assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n         assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n         assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n--- a/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n     /** test distribution of nextInt() */\n     public void testNextInt() {\n         tstNextInt(null);\n+        \n+        assertTrue (RandomUtils.nextInt() >= 0);\n     }\n     \n     /** test distribution of nextInt(Random) */\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/RangeTest.java\n+/*\n+ * Copyright 2002-2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * <p>\n+ * Tests the base methods in the {@link org.apache.commons.lang.math.Range} class.\n+ * </p>\n+ * \n+ * @author Nathan Beyer\n+ * @version $Id$\n+ */\n+public class RangeTest extends TestCase {\n+\n+    private static class RangeTestFixture extends Range {\n+        private byte max;\n+\n+        private byte min;\n+\n+        RangeTestFixture(byte min, byte max) {\n+            super();\n+            this.min = min;\n+            this.max = max;\n+        }\n+\n+        public boolean containsNumber(Number number) {\n+            if (number.byteValue() >= min && number.byteValue() <= max) {\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        public Number getMaximumNumber() {\n+            return new Byte(max);\n+        }\n+\n+        public Number getMinimumNumber() {\n+            return new Byte(min);\n+        }\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(RangeTest.class);\n+        suite.setName(\"Range Tests\");\n+        return suite;\n+    }\n+\n+    public RangeTest(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    /**\n+     * Test method for 'org.apache.commons.lang.math.Range.equals(Object)'\n+     */\n+    public void testEqualsObject() {\n+        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);\n+        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);\n+        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);\n+\n+        assertEquals(r1, r2);\n+        assertFalse(r2.equals(r3));\n+    }\n+\n+    /**\n+     * Test method for 'org.apache.commons.lang.math.Range.hashCode()'\n+     */\n+    public void testHashCode() {\n+        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);\n+        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);\n+        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);\n+\n+        assertEquals(r1.hashCode(), r2.hashCode());\n+        assertFalse(r1.hashCode() == r3.hashCode());\n+    }\n+\n+    /**\n+     * Test method for 'org.apache.commons.lang.math.Range.toString()'\n+     */\n+    public void testToString() {\n+        RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);\n+        assertNotNull(r1.toString());\n+        assertNotNull(r1.toString());\n+        RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);\n+        assertNotNull(r2.toString());\n+        assertNotNull(r2.toString());\n+        RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);\n+        assertNotNull(r3.toString());\n+        assertNotNull(r3.toString());\n+    }\n+\n+}", "timestamp": 1122852812, "metainfo": ""}