{"sha": "906d8af525d83996f7bf1c4a9e558e0b01b70f85", "log": "Better unit test code coverage.  ", "commit": "\n--- a/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n         public long longValue() {\n             return 12L;\n         }\n-\n-    }\n-    \n-    protected InnerNumber nonComparable = new InnerNumber();\n+    }\n+    \n+    protected InnerNumber nonComparableNumber = new InnerNumber();\n \n \n     public AbstractRangeTest(String name) {\n     }\n \n     public void setUp() {\n-        five        = new Integer(5);\n-        ten         = new Integer(10);\n-        twelve      = new Integer(12);\n-        fifteen     = new Integer(15);\n-        twenty      = new Integer(20);\n-        twentyFive  = new Integer(25);\n-        long8       = new Long(8);\n-        long10      = new Long(10);\n-        long12      = new Long(12);\n-        long20      = new Long(20);\n-        long21      = new Long(21);\n-        double8     = new Double(8);\n-        double10    = new Double(10);\n-        double12    = new Double(12);\n-        double20    = new Double(20);\n-        double21    = new Double(21);\n-        float8      = new Float(8);\n-        float10     = new Float(10);\n-        float12     = new Float(12);\n-        float20     = new Float(20);\n-        float21     = new Float(21);\n-    }\n-\n-    //--------------------------------------------------------------------------\n+        five = new Integer(5);\n+        ten = new Integer(10);\n+        twelve = new Integer(12);\n+        fifteen = new Integer(15);\n+        twenty = new Integer(20);\n+        twentyFive = new Integer(25);\n+        long8 = new Long(8);\n+        long10 = new Long(10);\n+        long12 = new Long(12);\n+        long20 = new Long(20);\n+        long21 = new Long(21);\n+        double8 = new Double(8);\n+        double10 = new Double(10);\n+        double12 = new Double(12);\n+        double20 = new Double(20);\n+        double21 = new Double(21);\n+        float8 = new Float(8);\n+        float10 = new Float(10);\n+        float12 = new Float(12);\n+        float20 = new Float(20);\n+        float21 = new Float(21);\n+    }\n+\n+    // --------------------------------------------------------------------------\n \n     public void testGetMinimum() {\n         assertEquals(10L, tenToTwenty.getMinimumLong());\n \n     public void testContainsLong() {\n         assertEquals(false, tenToTwenty.containsLong(null));\n-        assertEquals(true, tenToTwenty.containsLong(nonComparable));\n+        assertEquals(true, tenToTwenty.containsLong(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsLong(five));\n         assertEquals(true, tenToTwenty.containsLong(ten));\n         \n     public void testContainsInteger() {\n         assertEquals(false, tenToTwenty.containsInteger(null));\n-        assertEquals(true, tenToTwenty.containsInteger(nonComparable));\n+        assertEquals(true, tenToTwenty.containsInteger(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsInteger(five));\n         assertEquals(true, tenToTwenty.containsInteger(ten));\n \n     public void testContainsDouble() {\n         assertEquals(false, tenToTwenty.containsDouble(null));\n-        assertEquals(true, tenToTwenty.containsDouble(nonComparable));\n+        assertEquals(true, tenToTwenty.containsDouble(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsDouble(five));\n         assertEquals(true, tenToTwenty.containsDouble(ten));\n \n     public void testContainsFloat() {\n         assertEquals(false, tenToTwenty.containsFloat(null));\n-        assertEquals(true, tenToTwenty.containsFloat(nonComparable));\n+        assertEquals(true, tenToTwenty.containsFloat(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsFloat(five));\n         assertEquals(true, tenToTwenty.containsFloat(ten));\n--- a/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n         assertSame(double8, nr.getMinimumNumber());\n         assertSame(double8, nr.getMaximumNumber());\n         \n-        Range r = new DoubleRange(nonComparable);\n+        Range r = new DoubleRange(nonComparableNumber);\n         \n         try {\n             new DoubleRange(null);\n \n     public void testContainsNumber() {\n         assertEquals(false, tenToTwenty.containsNumber(null));\n-        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsNumber(five));\n         assertEquals(true, tenToTwenty.containsNumber(ten));\n--- a/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n         assertSame(float8, nr.getMinimumNumber());\n         assertSame(float8, nr.getMaximumNumber());\n         \n-        Range r = new FloatRange(nonComparable);\n+        Range r = new FloatRange(nonComparableNumber);\n         \n         try {\n             new FloatRange(null);\n \n     public void testContainsNumber() {\n         assertEquals(false, tenToTwenty.containsNumber(null));\n-        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsNumber(five));\n         assertEquals(true, tenToTwenty.containsNumber(ten));\n--- a/src/test/org/apache/commons/lang/math/IntRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/IntRangeTest.java\n         assertSame(five, nr.getMinimumNumber());\n         assertSame(five, nr.getMaximumNumber());\n         \n-        Range r = new IntRange(nonComparable);\n+        Range r = new IntRange(nonComparableNumber);\n         \n         try {\n             new IntRange(null);\n \n     public void testContainsNumber() {\n         assertEquals(false, tenToTwenty.containsNumber(null));\n-        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsNumber(five));\n         assertEquals(true, tenToTwenty.containsNumber(ten));\n--- a/src/test/org/apache/commons/lang/math/LongRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/LongRangeTest.java\n         assertSame(long8, nr.getMinimumNumber());\n         assertSame(long8, nr.getMaximumNumber());\n         \n-        Range r = new LongRange(nonComparable);\n+        Range r = new LongRange(nonComparableNumber);\n         \n         try {\n             new LongRange(null);\n \n     public void testContainsNumber() {\n         assertEquals(false, tenToTwenty.containsNumber(null));\n-        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparableNumber));\n         \n         assertEquals(false, tenToTwenty.containsNumber(five));\n         assertEquals(true, tenToTwenty.containsNumber(ten));\n--- a/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.math;\n \n import junit.framework.Test;\n \n /**\n  * Test cases for the {@link NumberRange} class.\n- *\n+ * \n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n  */\n public final class NumberRangeTest extends AbstractRangeTest {\n \n-    public NumberRangeTest(String name) {\n-        super(name);\n-    }\n-\n     public static Test suite() {\n         TestSuite suite = new TestSuite(NumberRangeTest.class);\n         suite.setName(\"NumberRange Tests\");\n         return suite;\n     }\n-    \n+\n+    public NumberRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    void checkConstructorException(Number num) {\n+        try {\n+            new NumberRange(num);\n+            fail(\"Expected an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected.\n+        }\n+    }\n+\n+    void checkConstructorException(Number num1, Number num2) {\n+        try {\n+            new NumberRange(num1, num2);\n+            fail(\"Expected an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected.\n+        }\n+    }\n+\n+    protected Range createRange(Integer integer) {\n+        return new NumberRange(integer);\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    protected Range createRange(Integer integer1, Integer integer2) {\n+        return new NumberRange(integer1, integer2);\n+    }\n+\n     public void setUp() {\n         super.setUp();\n         tenToTwenty = new NumberRange(ten, twenty);\n         otherRange = new IntRange(ten, twenty);\n     }\n \n-    protected Range createRange(Integer integer1, Integer integer2) {\n-        return new NumberRange(integer1, integer2);\n-    }\n-    protected Range createRange(Integer integer) {\n-        return new NumberRange(integer);\n-    }\n-\n-    //--------------------------------------------------------------------------\n-\n-    public void testConstructorExceptions() {\n-        try {\n-            new NumberRange (new Double (Double.NaN));\n-            fail(\"no illegal argument exception\");\n-        } catch (IllegalArgumentException e) {\n-        }\n-        \n-        try {\n-            new NumberRange (new Double (Double.NaN), new Double (12.2));\n-            fail(\"no illegal argument exception\");\n-        } catch (IllegalArgumentException e) {\n-        }\n-        \n-        try {\n-            new NumberRange (new Double (12.2), new Double (Double.NaN));\n-            fail(\"no illegal argument exception\");\n-        } catch (IllegalArgumentException e) {\n-        }\n-        \n-        try {\n-            new NumberRange (new Float (Float.NaN));\n-            fail(\"no illegal argument exception\");\n-        } catch (IllegalArgumentException e) {\n-        }\n-        \n-        try {\n-            new NumberRange (new Float (Float.NaN), new Float(12.2));\n-            fail(\"no illegal argument exception\");\n-        } catch (IllegalArgumentException e) {\n-        }\n-        \n-        try {\n-            new NumberRange (new Float(12.2), new Float (Float.NaN));\n-            fail(\"no illegal argument exception\");\n-        } catch (IllegalArgumentException e) {\n-        }       \n-    }\n-    \n+    /**\n+     * Tests non-exceptional conditions for the one argument constructor.\n+     */\n     public void testConstructor1() {\n         NumberRange nr = new NumberRange(five);\n         assertSame(five, nr.getMinimumNumber());\n         assertSame(five, nr.getMaximumNumber());\n-        \n-        try {\n-            new NumberRange(null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new NumberRange(nonComparable);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n+    /**\n+     * Tests exceptional conditions for the one argument constructor.\n+     */\n+    public void testConstructor1Exceptions() {\n+        this.checkConstructorException(null);\n+        this.checkConstructorException(nonComparableNumber);\n+        this.checkConstructorException(new Float(Float.NaN));\n+        this.checkConstructorException(new Double(Double.NaN));\n+    }\n+\n+    /**\n+     * Tests non-exceptional conditions for the two argument constructor.\n+     */\n     public void testConstructor2() {\n         NumberRange nr = new NumberRange(five, ten);\n         assertSame(five, nr.getMinimumNumber());\n         assertSame(ten, nr.getMaximumNumber());\n-        \n+\n         nr = new NumberRange(ten, five);\n         assertSame(five, nr.getMinimumNumber());\n         assertSame(ten, nr.getMaximumNumber());\n-        \n-        // not null\n-        try {\n-            new NumberRange(five, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new NumberRange(null, five);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new NumberRange(null, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        // no mixed types\n-        try {\n-            new NumberRange(five, long21);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        // must be comparable\n-        try {\n-            new NumberRange(nonComparable, nonComparable);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        // no double NaN\n-        try {\n-            new NumberRange(new Double(0), new Double(Double.NaN));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        try {\n-            new NumberRange(new Double(Double.NaN), new Double(0));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        // no float NaN\n-        try {\n-            new NumberRange(new Float(0), new Float(Float.NaN));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        try {\n-            new NumberRange(new Float(Float.NaN), new Float(0));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n     }\n \n-    //--------------------------------------------------------------------------\n+    /**\n+     * Tests exceptional conditions for the two argument constructor.\n+     */\n+    public void testConstructor2Exceptions() {\n+        this.checkConstructorException(null, null);\n+\n+        this.checkConstructorException(new Float(12.2f), new Double(12.2));\n+        this.checkConstructorException(new Float(Float.NaN), new Double(12.2));\n+        this.checkConstructorException(new Double(Double.NaN), new Double(12.2));\n+        this.checkConstructorException(new Double(12.2), new Double(Double.NaN));\n+        this.checkConstructorException(new Double(Double.NaN), new Double(Double.NaN));\n+        this.checkConstructorException(null, new Double(12.2));\n+        this.checkConstructorException(new Double(12.2), null);\n+\n+        this.checkConstructorException(new Double(12.2f), new Float(12.2));\n+        this.checkConstructorException(new Double(Double.NaN), new Float(12.2));\n+        this.checkConstructorException(new Float(Float.NaN), new Float(12.2));\n+        this.checkConstructorException(new Float(12.2), new Float(Float.NaN));\n+        this.checkConstructorException(new Float(Float.NaN), new Float(Float.NaN));\n+        this.checkConstructorException(null, new Float(12.2));\n+        this.checkConstructorException(new Float(12.2), null);\n+\n+        this.checkConstructorException(nonComparableNumber, nonComparableNumber);\n+        this.checkConstructorException(null, nonComparableNumber);\n+        this.checkConstructorException(nonComparableNumber, null);\n+        this.checkConstructorException(new Float(12.2), nonComparableNumber);\n+        this.checkConstructorException(nonComparableNumber, new Float(12.2));\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    public void testContainsLongBig() {\n+        // original NumberRange class failed this test\n+        NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE - 2));\n+        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));\n+        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));\n+    }\n \n     public void testContainsNumber() {\n         assertEquals(false, tenToTwenty.containsNumber(null));\n         assertEquals(true, tenToTwenty.containsNumber(fifteen));\n         assertEquals(true, tenToTwenty.containsNumber(twenty));\n         assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n-        \n+\n         try {\n             tenToTwenty.containsNumber(long21);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n     }\n \n-    public void testContainsLongBig() {\n-        // original NumberRange class failed this test\n-        NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE- 2));\n-        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));\n-        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));\n-    }\n-\n-    //--------------------------------------------------------------------------\n+    // --------------------------------------------------------------------------\n \n }", "timestamp": 1122856242, "metainfo": ""}