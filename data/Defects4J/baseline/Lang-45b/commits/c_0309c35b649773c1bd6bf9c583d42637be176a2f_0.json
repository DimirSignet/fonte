{"sha": "0309c35b649773c1bd6bf9c583d42637be176a2f", "log": "Javadoc and tests for ObjectUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.13 2003/07/20 15:41:52 scolebourne Exp $\n+ * @version $Id: ObjectUtils.java,v 1.14 2003/07/25 22:37:58 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n     /**\n      * <p>Returns a default value if the object passed is\n      * <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * ObjectUtils.defaultIfNull(null, null)      = null\n+     * ObjectUtils.defaultIfNull(null, \"\")        = \"\"\n+     * ObjectUtils.defaultIfNull(null, \"zz\")      = \"zz\"\n+     * ObjectUtils.defaultIfNull(\"abc\", *)        = \"abc\"\n+     * ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE\n+     * </pre>\n      *\n      * @param object  the <code>Object</code> to test, may be <code>null</code>\n      * @param defaultValue  the default value to return, may be <code>null</code>\n      * <p>Compares two objects for equality, where either one or both\n      * objects may be <code>null</code>.</p>\n      *\n+     * <pre>\n+     * ObjectUtils.equals(null, null)                  = true\n+     * ObjectUtils.equals(null, \"\")                    = false\n+     * ObjectUtils.equals(\"\", null)                    = false\n+     * ObjectUtils.equals(\"\", \"\")                      = true\n+     * ObjectUtils.equals(Boolean.TRUE, null)          = false\n+     * ObjectUtils.equals(Boolean.TRUE, \"true\")        = false\n+     * ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  = true\n+     * ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false\n+     * </pre>\n+     *\n      * @param object1  the first object, may be <code>null</code>\n      * @param object2  the second object, may be <code>null</code>\n      * @return <code>true</code> if the values of both objects are the same\n      * <p>Gets the toString that would be produced by <code>Object</code>\n      * if a class did not override toString itself. <code>null</code>\n      * will return <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * ObjectUtils.identityToString(null)         = null\n+     * ObjectUtils.identityToString(\"\")           = \"java.lang.String@1e23\"\n+     * ObjectUtils.identityToString(Boolean.TRUE) = \"java.lang.Boolean@7fa\"\n+     * </pre>\n      *\n      * @param object  the object to create a toString for, may be\n      *  <code>null</code>\n         if (object == null) {\n             return null;\n         }\n-        return appendIdentityToString(new StringBuffer(), object).toString();\n+        return appendIdentityToString(null, object).toString();\n     }\n \n     /**\n      * if a class did not override toString itself. <code>null</code>\n      * will return <code>null</code>.</p>\n      *\n-     * @param buffer  the buffer to append to, may not be\n-     *  <code>null</code>\n-     * @param object  the object to create a toString for, may be\n-     *  <code>null</code>\n+     * <pre>\n+     * ObjectUtils.appendIdentityToString(*, null)            = null\n+     * ObjectUtils.appendIdentityToString(null, \"\")           = \"java.lang.String@1e23\"\n+     * ObjectUtils.appendIdentityToString(null, Boolean.TRUE) = \"java.lang.Boolean@7fa\"\n+     * ObjectUtils.appendIdentityToString(buf, Boolean.TRUE)  = buf.append(\"java.lang.Boolean@7fa\")\n+     * </pre>\n+     *\n+     * @param buffer  the buffer to append to, may be <code>null</code>\n+     * @param object  the object to create a toString for, may be <code>null</code>\n      * @return the default toString text, or <code>null</code> if\n      *  <code>null</code> passed in\n      */\n     public static StringBuffer appendIdentityToString(StringBuffer buffer, Object object) {\n         if (object == null) {\n             return null;\n+        }\n+        if (buffer == null) {\n+            buffer = new StringBuffer();\n         }\n         return buffer\n             .append(object.getClass().getName())\n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: ObjectUtilsTest.java,v 1.6 2003/07/20 15:41:52 scolebourne Exp $\n+ * @version $Id: ObjectUtilsTest.java,v 1.7 2003/07/25 22:37:59 scolebourne Exp $\n  */\n public class ObjectUtilsTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     public void testIdentityToString() {\n+        assertEquals(null, ObjectUtils.identityToString(null));\n         assertEquals(\n             \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n             ObjectUtils.identityToString(FOO));\n         assertEquals(\n             \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i)),\n             ObjectUtils.identityToString(i));\n-        assertEquals(null, ObjectUtils.identityToString(null));\n     }\n \n     public void testAppendIdentityToString() {\n+        assertEquals(null, ObjectUtils.appendIdentityToString(null, null));\n+        assertEquals(null, ObjectUtils.appendIdentityToString(new StringBuffer(), null));\n+        assertEquals(\n+            \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n+            ObjectUtils.appendIdentityToString(null, FOO).toString());\n         assertEquals(\n             \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n             ObjectUtils.appendIdentityToString(new StringBuffer(), FOO).toString());\n-        Integer i = new Integer(90);\n+        Integer val = new Integer(90);\n         assertEquals(\n-            \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i)),\n-            ObjectUtils.appendIdentityToString(new StringBuffer(), i).toString());\n-        assertEquals(null, ObjectUtils.appendIdentityToString(new StringBuffer(), null));\n+            \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(val)),\n+            ObjectUtils.appendIdentityToString(null, val).toString());\n+        assertEquals(\n+            \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(val)),\n+            ObjectUtils.appendIdentityToString(new StringBuffer(), val).toString());\n     }\n \n     public void testToString_Object() {", "timestamp": 1059172679, "metainfo": ""}