{"sha": "7d6526029d383846ca6fd88e31b435c048e963a9", "log": "Solely Javadoc fixes.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/ConstructorUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ConstructorUtils.java\n \n import org.apache.commons.lang.ArrayUtils;\n /**\n- * <code>ConstructorUtils</code> contains utility methods for working for\n- * constructors by reflection.\n- * <p>\n- * The ability is provided to break the scoping restrictions coded by the\n+ * <p><code>ConstructorUtils</code> contains utility methods for working for\n+ * constructors by reflection.</p>\n+ *\n+ * <p>The ability is provided to break the scoping restrictions coded by the\n  * programmer. This can allow classes to be created that shouldn't be, for\n  * example new instances of an enumerated type. Thus, this facility should\n- * be used with care.\n+ * be used with care.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ConstructorUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $\n+ * @version $Id: ConstructorUtils.java,v 1.2 2003/07/14 22:29:03 bayard Exp $\n  */\n public class ConstructorUtils {\n \n-    /** An empty constructor array */\n+    /**\n+     * An empty constructor array.\n+     */\n     public static final Constructor[] EMPTY_CONSTRUCTOR_ARRAY = new Constructor[0];\n     \n     /**\n-     * ConstructorUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ConstructorUtils.newInstance(...)</code>.\n+     * <p>ConstructorUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>Instead, the class should be used as <code>ConstructorUtils.newInstance(...)</code>.\n      * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * to operate.</p>\n      */\n     public ConstructorUtils() {\n     }\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a public <code>Constructor</code> object by matching the \n-     * parameter types as per the Java Language Specification.\n-     *\n-     * @param cls  Class object to find constructor for, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n+     * <p>Gets a public <code>Constructor</code> object by matching the\n+     * parameter types as per the Java Language Specification.</p>\n+     *\n+     * @param cls  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter\n+     *  types, may be <code>null</code>\n      * @return Constructor object\n      * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Constructor getConstructor(Class cls, Class[] types) {\n         return getConstructor(cls, types, false);\n     }\n     \n     /**\n-     * Gets a public <code>Constructor</code> object by matching the \n-     * parameter types as per the Java Language Specification.\n-     *\n-     * @param cls  Class object to find constructor for, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n+     * <p>Gets a public <code>Constructor</code> object by matching the\n+     * parameter types as per the Java Language Specification.</p>\n+     *\n+     * @param cls  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter\n+     *  types, may be <code>null</code>\n+     * @param breakScope  whether to break scope restrictions using\n+     *  the <code>setAccessible</code> method. <code>False</code> will\n+     *  only match public methods.\n      * @return Constructor object\n      * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Constructor getConstructor(Class cls, Class[] types, boolean breakScope) {\n         if (cls == null) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a public <code>Constructor</code> object by exactly matching the\n-     * parameter types.\n-     *\n-     * @param cls  Class object to find constructor for, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n+     * <p>Gets a public <code>Constructor</code> object by exactly matching the\n+     * parameter types.</p>\n+     *\n+     * @param cls  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter\n+     *  types, may be <code>null</code>\n      * @return Constructor object\n      * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Constructor getConstructorExact(Class cls, Class[] types) {\n         return getConstructorExact(cls, types, false);\n     }\n     \n     /**\n-     * Gets a <code>Constructor</code> object by exactly matching the\n-     * parameter types.\n-     *\n-     * @param cls  Class object to find constructor for, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n+     * <p>Gets a <code>Constructor</code> object by exactly matching the\n+     * parameter types.</p>\n+     *\n+     * @param cls  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter types, may\n+     *  be <code>null</code>\n      * @param breakScope  whether to break scope restrictions using the\n      *  <code>setAccessible</code> method. False will only match public methods.\n      * @return Constructor object\n      * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Constructor getConstructorExact(Class cls, Class[] types, boolean breakScope) {\n         if (cls == null) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Creates a new instance using a <code>Constructor</code> and parameters.\n-     * \n-     * @param con  Class object to find constructor for, must not be null\n-     * @param param  the single parameter to pass to the constructor, may be null\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the constructor is null\n+     * <p>Creates a new instance using a <code>Constructor</code> and parameters.</p>\n+     * \n+     * @param con  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param param  the single parameter to pass to the constructor, may\n+     *  be <code>null</code>\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the constructor is <code>null</code>\n      */\n     public static Object newInstance(Constructor con, Object param) {\n         return newInstance(con, new Object[] {param}, false);\n     }\n     \n     /**\n-     * Creates a new instance using a <code>Constructor</code> and parameters.\n-     * \n-     * @param con  Class object to find constructor for, must not be null\n-     * @param params  array of objects to pass as parameters, may be null\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the constructor is null\n+     * <p>Creates a new instance using a <code>Constructor</code> and parameters.</p>\n+     * \n+     * @param con  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param params  array of objects to pass as parameters, may\n+     *  be <code>null</code>\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the constructor is <code>null</code>\n      */\n     public static Object newInstance(Constructor con, Object[] params) {\n         return newInstance(con, params, false);\n     }\n     \n     /**\n-     * Creates a new instance using a <code>Constructor</code> and parameters.\n-     * \n-     * @param con  Class object to find constructor for, must not be null\n-     * @param params  array of objects to pass as parameters, may be null\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the constructor is null\n+     * <p>Creates a new instance using a <code>Constructor</code> and parameters.</p>\n+     * \n+     * @param con  Class object to find constructor for, must not\n+     *  be <code>null</code>\n+     * @param params  array of objects to pass as parameters, may\n+     *  be <code>null</code>\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public methods.\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the constructor is <code>null</code>\n      */\n     public static Object newInstance(Constructor con, Object[] params, boolean breakScope) {\n         if (con == null) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code> by name.\n+     * <p>Creates a new instance of the specified <code>Class</code> by name.</p>\n      * \n      * @param className  String class name to instantiate, must not be empty\n      * @return the newly created object\n     }\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code> by name.\n-     * If the constructor is not public, <code>setAccessible(true)</code>\n-     * is used to make it accessible.\n+     * <p>Creates a new instance of the specified <code>Class</code> by name.</p>\n+     *\n+     * <p>If the constructor is not public, <code>setAccessible(true)</code>\n+     * is used to make it accessible.</p>\n      * \n      * @param className  String class name to instantiate, must not be empty\n      * @param breakScope  whether to break scope restrictions using the\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code>.\n-     * \n-     * @param cls  Class object to instantiate, must not be null\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * <p>Creates a new instance of the specified <code>Class</code>.</p>\n+     * \n+     * @param cls  Class object to instantiate, must not be <code>null</code>\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Object newInstance(Class cls) {\n         return newInstance(cls, false);\n     }\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code>.\n-     * If the constructor is not public, <code>setAccessible(true)</code>\n-     * is used to make it accessible.\n-     * \n-     * @param cls  Class object to instantiate, must not be null\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * <p>Creates a new instance of the specified <code>Class</code>.</p>\n+     *\n+     * <p>If the constructor is not public, <code>setAccessible(true)</code>\n+     * is used to make it accessible.</p>\n+     * \n+     * @param cls  Class object to instantiate, must not be <code>null</code>\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public methods.\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Object newInstance(Class cls, boolean breakScope) {\n         if (breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code>.\n-     * The constructor is found by matching the \n-     * parameter types as per the Java Language Specification.\n-     * \n-     * @param cls  Class object to instantiate, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n-     * @param params  array of objects to pass as parameters, may be null\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * <p>Creates a new instance of the specified <code>Class</code>.</p>\n+     *\n+     * <p>The constructor is found by matching the\n+     * parameter types as per the Java Language Specification.</p>\n+     * \n+     * @param cls  Class object to instantiate, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter types,\n+     *  may be <code>null</code>\n+     * @param params  array of objects to pass as parameters, may\n+     *  be <code>null</code>\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Object newInstance(Class cls, Class[] types, Object[] params) {\n         return newInstance(cls, types, params, false);\n     }\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code>.\n-     * The constructor is found by matching the \n-     * parameter types as per the Java Language Specification.\n-     * \n-     * @param cls  Class object to instantiate, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n-     * @param params  array of objects to pass as parameters, may be null\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n+     * <p>Creates a new instance of the specified <code>Class</code>.</p>\n+     *\n+     * <p>The constructor is found by matching the\n+     * parameter types as per the Java Language Specification.</p>\n+     * \n+     * @param cls  Class object to instantiate, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter types,\n+     *  may be <code>null</code>\n+     * @param params  array of objects to pass as parameters, may\n+     *  be <code>null</code>\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public methods.\n      * @return the newly created object\n      * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if the types and params lengths differ\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Object newInstance(Class cls, Class[] types, Object[] params, boolean breakScope) {\n         if (ArrayUtils.isSameLength(types, params) == false) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code>.\n-     * The constructor is found by matching the parameter types exactly.\n-     * \n-     * @param cls  Class object to instantiate, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n-     * @param params  array of objects to pass as parameters, may be null\n-     * @return the newly created object\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the class is null\n+     * <p>Creates a new instance of the specified <code>Class</code>.</p>\n+     *\n+     * <p>The constructor is found by matching the parameter types exactly.</p>\n+     * \n+     * @param cls  Class object to instantiate, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter types,\n+     *  may be <code>null</code>\n+     * @param params  array of objects to pass as parameters, may\n+     *  be <code>null</code>\n+     * @return the newly created object\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Object newInstanceExact(Class cls, Class[] types, Object[] params) {\n         return newInstanceExact(cls, types, params, false);\n     }\n     \n     /**\n-     * Creates a new instance of the specified <code>Class</code>.\n-     * The constructor is found by matching the parameter types exactly.\n-     * \n-     * @param cls  Class object to instantiate, must not be null\n-     * @param types  array of Class objects representing parameter types, may be null\n-     * @param params  array of objects to pass as parameters, may be null\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n+     * <p>Creates a new instance of the specified <code>Class</code>.</p>\n+     *\n+     * <p>The constructor is found by matching the parameter types exactly.</p>\n+     * \n+     * @param cls  Class object to instantiate, must not\n+     *  be <code>null</code>\n+     * @param types  array of Class objects representing parameter types,\n+     *  may be <code>null</code>\n+     * @param params  array of objects to pass as parameters, may\n+     *  be <code>null</code>\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only match\n+     *  public methods.\n      * @return the newly created object\n      * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if the types and params lengths differ\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Object newInstanceExact(Class cls, Class[] types, Object[] params, boolean breakScope) {\n         if (ArrayUtils.isSameLength(types, params) == false) {\n--- a/src/java/org/apache/commons/lang/reflect/FieldUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/FieldUtils.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n /**\n- * <code>FieldUtils</code> contains utility methods for working with\n- * fields by reflection.\n- * <p>\n- * The ability is provided to break the scoping restrictions coded by the\n+ * <p><code>FieldUtils</code> contains utility methods for working with\n+ * fields by reflection.</p>\n+ *\n+ * <p>The ability is provided to break the scoping restrictions coded by the\n  * programmer. This can allow fields to be changed that shouldn't be. This\n- * facility should be used with care.\n+ * facility should be used with care.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: FieldUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $\n+ * @version $Id: FieldUtils.java,v 1.2 2003/07/14 22:29:04 bayard Exp $\n  */\n public class FieldUtils {\n     \n-    /** An empty field array */\n+    /**\n+     * An empty field array.\n+     */\n     public static final Field[] EMPTY_FIELD_ARRAY = new Field[0];\n     \n     /**\n-     * FieldUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>FieldUtils.getField(cls, name)</code>.\n+     * <p>FieldUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>Instead, the class should be used as <code>FieldUtils.getField(cls, name)</code>.\n      * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * to operate.</p>\n      */\n     public FieldUtils() {\n     }\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets an accessible Field by name repecting scope.\n-     * Superclasses/interfaces will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p>Gets an accessible <code>Field</code> by name repecting scope.\n+     * Superclasses/interfaces will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Field getField(Class cls, String fieldName) {\n     }\n     \n     /**\n-     * Gets an accessible Field by name breaking scope if requested.\n-     * Superclasses/interfaces will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public fields.\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p>Gets an accessible <code>Field</code> by name breaking scope\n+     * if requested. Superclasses/interfaces will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public fields.\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Field getField(Class cls, String fieldName, boolean breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets an accessible Field by name respecting scope.\n-     * Only the specified class will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p>Gets an accessible <code>Field</code> by name respecting scope.\n+     * Only the specified class will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Field getFieldExact(Class cls, String fieldName) {\n     }\n     \n     /**\n-     * Gets an accessible Field by name breaking scope if requested.\n-     * Only the specified class will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets an accessible <code>Field</code> by name breaking scope\n+     * if requested. Only the specified class will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param fieldName  the field name to obtain\n      * @param breakScope  whether to break scope restrictions using the\n      *  <code>setAccessible</code> method. False will only match public fields.\n      * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Field getFieldExact(Class cls, String fieldName, boolean breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a static Field value from a Field object.\n+     * <p>Gets a static Field value from a <code>Field</code> object.</p>\n      * \n      * @param field  the field to use\n      * @return the field value\n-     * @throws IllegalArgumentException if the field is null or not static\n+     * @throws IllegalArgumentException if the field is\n+     *  <code>null</code> or not static\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getStaticFieldValue(Field field) {\n     }\n     \n     /**\n-     * Gets a static Field value from a Field object.\n+     * <p>Gets a static Field value from a <code>Field</code> object.</p>\n      * \n      * @param field  the field to use\n      * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public methods.\n      * @return the field value\n-     * @throws IllegalArgumentException if the field is null or not static\n+     * @throws IllegalArgumentException if the field is <code>null</code>\n+     *  or not static\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getStaticFieldValue(Field field, boolean breakScope) {\n     }\n     \n     /**\n-     * Gets a Field value from a Field object.\n+     * <p>Gets a Field value from a <code>Field</code> object.</p>\n      * \n      * @param field  the field to use\n-     * @param object  the object to call on, may be null for static fields\n+     * @param object  the object to call on, may be <code>null</code>\n+     *  for static fields\n      * @return the field value\n-     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the field is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getFieldValue(Field field, Object object) {\n     }\n     \n     /**\n-     * Gets a Field value from a Field object.\n+     * <p>Gets a Field value from a Field object.</p>\n      * \n      * @param field  the field to use\n-     * @param object  the object to call on, may be null for static fields\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public methods.\n+     * @param object  the object to call on, may be <code>null</code>\n+     *  for static fields\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public methods.\n      * @return the field value\n-     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the field is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getFieldValue(Field field, Object object, boolean breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a static Field value by name. The field must be public.\n-     * Superclasses will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets a static Field value by name. The field must be public.\n+     * Superclasses will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param fieldName  the field name to obtain\n      * @return the value of the field\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getStaticFieldValue(Class cls, String fieldName) {\n     }\n     \n     /**\n-     * Gets a static Field value by name.\n-     * Only the specified class will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public fields.\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p>Gets a static Field value by name. Only the specified class\n+     * will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public fields.\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getStaticFieldValue(Class cls, String fieldName, boolean breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a static Field value by name. The field must be public.\n-     * Only the specified class will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets a static Field value by name. The field must be public.\n+     * Only the specified class will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param fieldName  the field name to obtain\n      * @return the value of the field\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getStaticFieldValueExact(Class cls, String fieldName) {\n     }\n     \n     /**\n-     * Gets a static Field value by name.\n-     * Only the specified class will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public fields.\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p>Gets a static Field value by name. Only the specified class will\n+     * be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public fields.\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getStaticFieldValueExact(Class cls, String fieldName, boolean breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a Field value by name. The field must be public.\n-     * Superclasses will be considered.\n-     *\n-     * @param object  the object to reflect, must not be null\n+     * <p>Gets a Field value by name. The field must be public. Superclasses\n+     * will be considered.</p>\n+     *\n+     * @param object  the object to reflect, must not be <code>null</code>\n      * @param fieldName  the field name to obtain\n      * @return the value of the field\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getFieldValue(Object object, String fieldName) {\n     }\n     \n     /**\n-     * Gets a Field value by name.\n-     * Only the specified class will be considered.\n-     *\n-     * @param object  the object to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public fields.\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p>Gets a Field value by name. Only the specified class will be\n+     * considered.</p>\n+     *\n+     * @param object  the object to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public fields.\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getFieldValue(Object object, String fieldName, boolean breakScope) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a Field value by name. The field must be public.\n-     * Only the class of the specified object will be considered.\n-     *\n-     * @param object  the object to reflect, must not be null\n+     * <p>Gets a Field value by name. The field must be public.\n+     * Only the class of the specified object will be considered.</p>\n+     *\n+     * @param object  the object to reflect, must not be <code>null</code>\n      * @param fieldName  the field name to obtain\n      * @return the value of the field\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getFieldValueExact(Object object, String fieldName) {\n     }\n     \n     /**\n-     * Gets a Field value by name.\n-     * Only the class of the specified object will be considered.\n-     *\n-     * @param object  the object to reflect, must not be null\n-     * @param fieldName  the field name to obtain\n-     * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public fields.\n-     * @return the Field object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * <p<>Gets a Field value by name. Only the class of the specified\n+     * object will be considered.</p>\n+     *\n+     * @param object  the object to reflect, must not be <code>null</code>\n+     * @param fieldName  the field name to obtain\n+     * @param breakScope  whether to break scope restrictions using the\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public fields.\n+     * @return the Field object\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object getFieldValueExact(Object object, String fieldName, boolean breakScope) {\n--- a/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n \n import org.apache.commons.lang.ArrayUtils;\n /**\n- * <code>MethodUtils</code> contains utility methods for working for\n- * methods by reflection.\n- * <p>\n- * The ability is provided to break the scoping restrictions coded by the\n+ * <p><code>MethodUtils</code> contains utility methods for working for\n+ * methods by reflection.</p>\n+ *\n+ * <p>The ability is provided to break the scoping restrictions coded by the\n  * programmer. This can break an implementation if used incorrectly. This\n- * facility should be used with care.\n+ * facility should be used with care.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n  * @author Based on code from <code>BeanUtils</code> by: Craig R. McClanahan\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n  * @author Gary Gregory\n- * @version $Id: MethodUtils.java,v 1.11 2003/01/25 13:01:38 scolebourne Exp $\n+ * @version $Id: MethodUtils.java,v 1.12 2003/07/14 22:29:04 bayard Exp $\n  */\n public class MethodUtils {\n     \n     public static final boolean debug = false;\n     \n-    /** An empty method array */\n+    /**\n+     * An empty method array.\n+     */\n     public static final Method[] EMPTY_METHOD_ARRAY = new Method[0];\n     \n     /**\n-     * MethodUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>MethodUtils.getMethod(cls, name)</code>.\n+     * <p>MethodUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>Instead, the class should be used as <code>MethodUtils.getMethod(cls, name)</code>.\n      * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * to operate.</p>\n      */\n     public MethodUtils() {\n     }\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a Method by name. The method must be public and take no parameters.\n-     * Superclasses will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets a <code>Method</code> by name. The method must be public and take\n+     * no parameters. Superclasses will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the field name to obtain\n      * @return the Method object\n-     * @throws IllegalArgumentException if the class or method name is null\n+     * @throws IllegalArgumentException if the class or method name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Method getMethod(Class cls, String methodName) {\n     }\n     \n     /**\n-     * Gets a Method by name. The method must be public.\n-     * Superclasses will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets a <code>Method</code> by name. The method must be public.\n+     * Superclasses will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the field name to obtain\n      * @return the Method object\n-     * @throws IllegalArgumentException if the class or method name is null\n+     * @throws IllegalArgumentException if the class or method name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Method getMethod(Class cls, String methodName, Class paramType) {\n     }\n     \n     /**\n-     * Gets a Method by name. The method must be public.\n-     * Superclasses will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets a <code>Method</code> by name.</p> The method must be public.\n+     * Superclasses will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the field name to obtain\n      * @return the Method object\n-     * @throws IllegalArgumentException if the class or method name is null\n+     * @throws IllegalArgumentException if the class or method name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Method getMethod(Class cls, String methodName, Class[] paramTypes) {\n     }\n     \n     /**\n-     * Gets a Method by name.\n-     * Superclasses will be considered.\n-     *\n-     * @param cls  the class to reflect, must not be null\n+     * <p>Gets a <code>Method</code> by name. Superclasses will be considered.</p>\n+     *\n+     * @param cls  the class to reflect, must not be <code>null</code>\n      * @param methodName  the method name to obtain\n      * @param breakScope  whether to break scope restrictions using the\n-     *  <code>setAccessible</code> method. False will only match public fields.\n+     *  <code>setAccessible</code> method. <code>False</code> will only\n+     *  match public fields.\n      * @return the Method object\n-     * @throws IllegalArgumentException if the class or field name is null\n+     * @throws IllegalArgumentException if the class or field name\n+     *  is <code>null</code>\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Method getMethod(Class cls, String methodName, Class[] paramTypes, boolean breakScope) {\n \n     /**\n      * <p>Return an accessible method (that is, one that can be invoked via\n-     * reflection) that implements the specified Method.  If no such method\n-     * can be found, return <code>null</code>.</p>\n+     * reflection) that implements the specified <code>Method</code>. If\n+     * no such method can be found, return <code>null</code>.</p>\n      *\n      * @param method The method that we wish to call\n      */\n      * {@link #invokeMethod(Object object,String methodName,Object [] args)}.\n      * </p>\n      *\n-     * @param objectToInvoke  invoke method on this object, must not be null\n-     * @param methodName  get method with this name, must not be null\n-     * @param arg  use this argument, must not be null\n-     *\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if any parameter is null\n+     * @param objectToInvoke  invoke method on this object, must\n+     *  not be <code>null</code>\n+     * @param methodName  get method with this name, must not\n+     *  be <code>null</code>\n+     * @param arg  use this argument, must not be <code>null</code>\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if any parameter is\n+     *  <code>null</code>\n      */\n     public static Object invokeMethod(\n             Object objectToInvoke,\n      * would match a <code>boolean</code> primitive.</p>\n      *\n      * <p> This is a convenient wrapper for\n-     * {@link #invokeMethod(Object object,String methodName,Object [] args,Class[] parameterTypes)}.\n+     * {@link #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.\n      * </p>\n      *\n-     * @param objectToInvoke  invoke method on this object, must not be null\n-     * @param methodName  get method with this name, must not be null\n-     * @param args  use these arguments - treat null as empty array\n-     *\n-     * @throws ReflectionException if an error occurs during reflection\n-     * @throws IllegalArgumentException if the objectToInvoke, methodName or any argument is null\n+     * @param objectToInvoke  invoke method on this object, must not\n+     *  be <code>null</code>\n+     * @param methodName  get method with this name, must not\n+     *  be <code>null</code>\n+     * @param args  use these arguments - treat <code>null</code>\n+     *  as empty array\n+     * @throws ReflectionException if an error occurs during reflection\n+     * @throws IllegalArgumentException if the objectToInvoke, methodName\n+     *  or any argument is <code>null</code>\n      */\n     public static Object invokeMethod(\n             Object objectToInvoke,\n      * @param object  invoke method on this object\n      * @param methodName  get method with this name\n      * @param args  use these arguments - treat null as empty array\n-     * @param parameterTypes  match these parameters - treat null as empty array\n-     *\n+     * @param parameterTypes  match these parameters - treat\n+     *  <code>null</code> as empty array\n      * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object invokeMethod(\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionException.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionException.java\n \n import org.apache.commons.lang.exception.NestableRuntimeException;\n /**\n- * Exception thrown when the Reflection process fails. The original\n- * error is wrapped within this one.\n+ * <p>Exception thrown when the Reflection process fails. The original\n+ * error is wrapped within this one.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionException.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $\n+ * @version $Id: ReflectionException.java,v 1.2 2003/07/14 22:29:04 bayard Exp $\n  */\n public class ReflectionException extends NestableRuntimeException {\n \n     /**\n-     * Constructs a new <code>ReflectionException</code> without specified\n-     * detail message.\n+     * <p>Constructs a new <code>ReflectionException</code> without specified\n+     * detail message.</p>\n      */\n     public ReflectionException() {\n         super();\n     }\n \n     /**\n-     * Constructs a new <code>ReflectionException</code> with specified\n-     * detail message.\n+     * <p>Constructs a new <code>ReflectionException</code> with specified\n+     * detail message.</p>\n      *\n      * @param msg  The error message.\n      */\n     }\n \n     /**\n-     * Constructs a new <code>ReflectionException</code> with specified\n-     * nested <code>Throwable</code>.\n+     * <p>Constructs a new <code>ReflectionException</code> with specified\n+     * nested <code>Throwable</code>.</p>\n      *\n      * @param cause  The exception or error that caused this exception\n-     *               to be thrown.\n+     *  to be thrown.\n      */\n     public ReflectionException(Throwable cause) {\n         super(cause);\n     }\n \n     /**\n-     * Constructs a new <code>ReflectionException</code> with specified\n-     * detail message and nested <code>Throwable</code>.\n+     * <p>Constructs a new <code>ReflectionException</code> with specified\n+     * detail message and nested <code>Throwable</code>.</p>\n      *\n-     * @param msg    The error message.\n+     * @param msg  The error message.\n      * @param cause  The exception or error that caused this exception\n-     *               to be thrown.\n+     *  to be thrown.\n      */\n     public ReflectionException(String msg, Throwable cause) {\n         super(msg, cause);", "timestamp": 1058221744, "metainfo": ""}