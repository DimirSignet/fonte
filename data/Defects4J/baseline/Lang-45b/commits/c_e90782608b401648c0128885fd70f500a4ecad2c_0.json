{"sha": "e90782608b401648c0128885fd70f500a4ecad2c", "log": "Update for performance, from Jeff Varszegi   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SerializationUtils.java\n+++ b/src/java/org/apache/commons/lang/SerializationUtils.java\n-package org.apache.commons.lang;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.Serializable;\n \n /**\n- * <p>Methods that assist with the serialization process, or perform\n- * additional functionality based on serialization.</p>\n+ * <p><code>SerializationUtils</code> provides methods that assist with the \n+ * serialization process, or perform additional functionality based on serialization.</p>\n  * <ul>\n  * <li>Deep clone using serialization\n  * <li>Serialize managing finally and IOException\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n  * @author <a href=\"mailto:janekdb@yahoo.co.uk\">Janek Bogucki</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: SerializationUtils.java,v 1.3 2002/11/16 10:41:03 scolebourne Exp $\n+ * @author Stephen Colebourne\n+ * @author Jeff Varszegi\n+ * @since 1.0\n+ * @version $Id: SerializationUtils.java,v 1.4 2002/12/22 19:55:30 scolebourne Exp $\n  */\n public class SerializationUtils {\n     \n     /**\n-     * <p>Constructor for SerializationUtils is private.</p>\n-     */\n-    private SerializationUtils() {\n+     * <p>SerializationUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>SerializationUtils.clone(object)</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public SerializationUtils() {\n         super();\n     }\n \n      * <p>The stream will be closed once the object is written.\n      * This avoids the need for a finally clause, and maybe also exception\n      * handling, in the application code.</p>\n+     * \n+     * <p>The stream passed in is not buffered internally within this method.\n+     * This is the responsibility of your application if desired.</p>\n      *\n      * @param obj  the object to serialize to bytes\n      * @param outputStream  the stream to write to\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n     public static byte[] serialize(Serializable obj) {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n         serialize(obj, baos);\n         return baos.toByteArray();\n     }\n      * <p>The stream will be closed once the object is written. This\n      * avoids the need for a finally clause, and maybe also exception\n      * handling, in the application code.</p>\n+     * \n+     * <p>The stream passed in is not buffered internally within this method.\n+     * This is the responsibility of your application if desired.</p>\n      *\n      * @param inputStream  the serialized object input stream\n      * @return the deserialized object", "timestamp": 1040586930, "metainfo": ""}