{"sha": "326a8f49cf9d50b314d29b715a8b37a17d958573", "log": "Add additional testing for hashcode and equals integration   ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n+++ b/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n  * Test suite for the Lang Builder package.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: BuilderTestSuite.java,v 1.3 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: BuilderTestSuite.java,v 1.4 2003/01/19 17:42:18 scolebourne Exp $\n  */\n public class BuilderTestSuite extends TestCase {\n     \n         suite.addTest(CompareToBuilderTest.suite());\n         suite.addTest(EqualsBuilderTest.suite());\n         suite.addTest(HashCodeBuilderTest.suite());\n+        suite.addTest(HashCodeBuilderAndEqualsBuilderTest.suite());\n         suite.addTest(ToStringBuilderTest.suite());\n         suite.addTest(DefaultToStringStyleTest.suite());\n         suite.addTest(NoFieldNamesToStringStyleTest.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.builder;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests HashCodeBuilder and EqualsBuilderTest to insure that equal \n+ * objects must have equal hash codes.\n+ * \n+ * @author Gary Gregory\n+ * @version $Id: HashCodeBuilderAndEqualsBuilderTest.java,v 1.1 2003/01/19 17:42:18 scolebourne Exp $\n+ */\n+public class HashCodeBuilderAndEqualsBuilderTest extends TestCase {\n+\n+    /**\n+     * Constructor for HashCodeBuilderAndEqualsBuilderTest.\n+     * @param name\n+     */\n+    public HashCodeBuilderAndEqualsBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(HashCodeBuilderAndEqualsBuilderTest.class);\n+        suite.setName(\"HashCodeBuilderAndEqualsBuilder Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testInteger(boolean testTransients) {\n+        Integer i1 = new Integer(12345);\n+        Integer i2 = new Integer(12345);\n+        assertEqualsAndHashCodeContract(i1, i2, testTransients);\n+    }\n+\n+    public void testInteger() {\n+        testInteger(false);\n+    }\n+\n+    public void testIntegerWithTransients() {\n+        testInteger(true);\n+    }\n+\n+    public void testFixture() {\n+        testFixture(false);\n+    }\n+\n+    public void testFixtureWithTransients() {\n+        testFixture(true);\n+    }\n+\n+    public void testFixture(boolean testTransients) {\n+        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', \"Test\", (short) 2), new TestFixture(2, 'c', \"Test\", (short) 2), testTransients);\n+        assertEqualsAndHashCodeContract(\n+            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n+            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n+            testTransients);\n+        assertEqualsAndHashCodeContract(\n+            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            testTransients);\n+        assertEqualsAndHashCodeContract(\n+            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            testTransients);\n+    }\n+\n+    /**\n+     * Asserts that if <code>lhs</code> equals <code>rhs</code> \n+     * then their hash codes MUST be identical.\n+     * \n+     * @param lhs The Left-Hand-Side of the equals test\n+     * @param rhs The Right-Hand-Side of the equals test\n+     * @param testTransients wether to test transient fields\n+     */\n+    public void assertEqualsAndHashCodeContract(Object lhs, Object rhs, boolean testTransients) {\n+        if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {\n+            // test a couple of times for consistency.\n+            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n+            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n+            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n+        }\n+    }\n+\n+    static class TestFixture {\n+        int i;\n+        char c;\n+        String string;\n+        short s;\n+\n+        TestFixture(int i, char c, String string, short s) {\n+            this.i = i;\n+            this.c = c;\n+            this.string = string;\n+            this.s = s;\n+        }\n+    }\n+\n+    static class SubTestFixture extends TestFixture {\n+        transient String tString;\n+\n+        SubTestFixture(int i, char c, String string, short s, String tString) {\n+            super(i, c, string, s);\n+            this.tString = tString;\n+        }\n+    }\n+\n+    static class AllTransientFixture {\n+        transient int i;\n+        transient char c;\n+        transient String string;\n+        transient short s;\n+\n+        AllTransientFixture(int i, char c, String string, short s) {\n+            this.i = i;\n+            this.c = c;\n+            this.string = string;\n+            this.s = s;\n+        }\n+    }\n+\n+    static class SubAllTransientFixture extends AllTransientFixture {\n+        transient String tString;\n+\n+        SubAllTransientFixture(int i, char c, String string, short s, String tString) {\n+            super(i, c, string, s);\n+            this.tString = tString;\n+        }\n+    }\n+\n+\n+}", "timestamp": 1042998138, "metainfo": ""}