{"sha": "cf9a7c86acbf1349982b07a24bae823f36666915", "log": "Add asWriter()  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n \n import java.io.CharArrayReader;\n import java.io.Reader;\n+import java.io.Writer;\n import java.util.Collection;\n import java.util.Iterator;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Gets this builder as a Writer that can be written to.\n+     * <p>\n+     * This method allows you to populate the contents of the builder\n+     * using any standard method that takes a Writer.\n+     * <p>\n+     * To use, simply create a <code>StrBuilder</code>,\n+     * call <code>asWriter</code>, and populate away. The data is available\n+     * at any time using the methods of the <code>StrBuilder</code>.\n+     * Note however, that no synchronization occurs, so you must not read\n+     * the builder from one thread while writing in another thread.\n+     * Note also that close and flush have no effect on the writer.\n+     *\n+     * @return a writer that populates this builder\n+     */\n+    public Writer asWriter() {\n+        return new StrBuilderWriter();\n+    }\n+\n+    //-----------------------------------------------------------------------\n //    /**\n //     * Gets a String version of the string builder by calling the internal\n //     * constructor of String by reflection.\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Inner class to allow StrBuilder to operate as a writer.\n+     */\n+    class StrBuilderWriter extends Writer {\n+        StrBuilderWriter() {\n+            super();\n+        }\n+\n+        /** @inheritdoc */\n+        public void close() {\n+            // do nothing\n+        }\n+\n+        /** @inheritdoc */\n+        public void flush() {\n+            // do nothing\n+        }\n+\n+        /** @inheritdoc */\n+        public void write(int c) {\n+            append((char) c);\n+        }\n+\n+        /** @inheritdoc */\n+        public void write(char[] cbuf) {\n+            append(cbuf);\n+        }\n+\n+        /** @inheritdoc */\n+        public void write(char[] cbuf, int off, int len) {\n+            append(cbuf, off, len);\n+        }\n+\n+        /** @inheritdoc */\n+        public void write(String str) {\n+            append(str);\n+        }\n+\n+        /** @inheritdoc */\n+        public void write(String str, int off, int len) {\n+            append(str, off, len);\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n package org.apache.commons.lang.text;\n \n import java.io.Reader;\n+import java.io.Writer;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n         assertEquals(-1, reader.read(buf));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testAsWriter() throws Exception {\n+        StrBuilder sb = new StrBuilder (\"base\");\n+        Writer writer = sb.asWriter();\n+        \n+        writer.write('l');\n+        assertEquals(\"basel\", sb.toString());\n+        \n+        writer.write(new char[] {'i', 'n'});\n+        assertEquals(\"baselin\", sb.toString());\n+        \n+        writer.write(new char[] {'n', 'e', 'r'}, 1, 2);\n+        assertEquals(\"baseliner\", sb.toString());\n+        \n+        writer.write(\" rout\");\n+        assertEquals(\"baseliner rout\", sb.toString());\n+        \n+        writer.write(\"ping that server\", 1, 3);\n+        assertEquals(\"baseliner routing\", sb.toString());\n+        \n+        writer.flush();  // no effect\n+        assertEquals(\"baseliner routing\", sb.toString());\n+        \n+        writer.close();  // no effect\n+        assertEquals(\"baseliner routing\", sb.toString());\n+        \n+        writer.write(\" hi\");  // works after close\n+        assertEquals(\"baseliner routing hi\", sb.toString());\n+        \n+        sb.setLength(4);  // mix and match\n+        writer.write('d');\n+        assertEquals(\"based\", sb.toString());\n+    }\n+\n }", "timestamp": 1123541099, "metainfo": ""}