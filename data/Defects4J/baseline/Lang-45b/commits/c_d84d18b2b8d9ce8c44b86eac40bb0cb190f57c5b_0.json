{"sha": "d84d18b2b8d9ce8c44b86eac40bb0cb190f57c5b", "log": "Severity\tDescription\tResource\tIn Folder\tLocation\tCreation Time \tThe static method setAccessible(AccessibleObject[], boolean) from the type AccessibleObject should be accessed directly \tHashCodeBuilder.java\tApache Jakarta Commons/lang/src/java/org/apache/commons/lang/builder\tline 341\tJuly 18, 2003 8:21:31 PM   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  */\n package org.apache.commons.lang.builder;\n \n+import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n /**\n  *\n  * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method,\n- * <code>reflectionHashCode</code>, uses <code>Field.setAccessible</code> to\n+ * <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code> to\n  * change the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set up correctly. It is also slower\n  * than testing explicitly.</p>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.13 2003/07/14 22:25:03 bayard Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.14 2003/07/20 01:12:32 ggregory Exp $\n  */\n public class HashCodeBuilder {\n \n      * <p>This constructor uses two hard coded choices for the constants\n      * needed to build a hash code.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      * a security manger, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      * <p>This constructor uses two hard coded choices for the constants needed\n      * to build a hash code.</p>\n      *\n-     * <p> It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      * a security manger, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      * a security manger, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      * a security manger, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n      * a security manger, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n      */\n     private static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean useTransients) {\n         Field[] fields = clazz.getDeclaredFields();\n-        Field.setAccessible(fields, true);\n+        AccessibleObject.setAccessible(fields, true);\n         for (int i = 0; i < fields.length; i++) {\n             Field f = fields[i];\n             if ((f.getName().indexOf('$') == -1)", "timestamp": 1058663552, "metainfo": ""}