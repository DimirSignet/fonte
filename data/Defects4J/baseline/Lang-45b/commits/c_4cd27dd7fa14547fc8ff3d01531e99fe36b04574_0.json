{"sha": "4cd27dd7fa14547fc8ff3d01531e99fe36b04574", "log": "LANG-291 - Move min/max methods above inner class, add javadoc and format  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n         return obj == null ? nullStr : obj.toString();\n     }\n \n+    // Min/Max\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Null safe comparison of Comparables.\n+     * \n+     * @param c1  the first comparable, may be null\n+     * @param c2  the second comparable, may be null\n+     * @return\n+     *  <ul>\n+     *   <li>If both objects are non-null and unequal, the lesser object.\n+     *   <li>If both objects are non-null and equal, c1.\n+     *   <li>If one of the comparables is null, the non-null object.\n+     *   <li>If both the comparables are null, null is returned.\n+     *  </ul>\n+     */\n+    public static Object min(Comparable c1, Comparable c2) {\n+        if (c1 != null && c2 != null) {\n+            return c1.compareTo(c2) < 1 ? c1 : c2;\n+        } else {\n+            return c1 != null ? c1 : c2;\n+        }                              \n+    }\n+\n+    /**\n+     * Null safe comparison of Comparables.\n+     * \n+     * @param c1  the first comparable, may be null\n+     * @param c2  the second comparable, may be null\n+     * @return\n+     *  <ul>\n+     *   <li>If both objects are non-null and unequal, the greater object.\n+     *   <li>If both objects are non-null and equal, c1.\n+     *   <li>If one of the comparables is null, the non-null object.\n+     *   <li>If both the comparables are null, null is returned.\n+     *  </ul>\n+     */\n+    public static Object max(Comparable c1, Comparable c2) {\n+        if (c1 != null && c2 != null) {\n+            return c1.compareTo(c2) >= 0 ? c1 : c2;\n+        } else {\n+            return c1 != null ? c1 : c2;\n+        }\n+    }\n+\n     // Null\n     //-----------------------------------------------------------------------\n     /**\n             return ObjectUtils.NULL;\n         }\n     }\n-    \n-    \n-    /**\n-     * Null safe comparison of Comparables.\n-     * \n-     * @param c1\n-     * @param c2\n-     * @return\n-     *  <ul>\n-     *   <li>If both objects are non-null and unequal, the lesser object.\n-     *   <li>If both objects are non-null and equal, c1.\n-     *   <li>If one of the comparables is null, the non-null object.\n-     *   <li>If both the comparables are null, null is returned.\n-     *  </ul>\n-     */\n-    public static Object min( Comparable c1, Comparable c2 ) {\n-        if ( c1 != null && c2 != null ) {\n-            return c1.compareTo( c2 ) < 1 ? c1 : c2;\n-        }\n-        else {\n-            return c1 != null ? c1 : c2;\n-        }                              \n-    }\n-    \n-    /**\n-     * Null safe comparison of Comparables.\n-     * \n-     * @param c1\n-     * @param c2\n-     * @return\n-     *  <ul>\n-     *   <li>If both objects are non-null and unequal, the greater object.\n-     *   <li>If both objects are non-null and equal, c1.\n-     *   <li>If one of the comparables is null, the non-null object.\n-     *   <li>If both the comparables are null, null is returned.\n-     *  </ul>\n-     */\n-    public static Object max( Comparable c1, Comparable c2 ) {\n-        if ( c1 != null && c2 != null ) {\n-            return c1.compareTo( c2 ) >= 0 ? c1 : c2;\n-        }\n-        else {\n-            return c1 != null ? c1 : c2;\n-        }                              \n-    }\n-    \n-    \n-    \n+\n }", "timestamp": 1167411840, "metainfo": ""}