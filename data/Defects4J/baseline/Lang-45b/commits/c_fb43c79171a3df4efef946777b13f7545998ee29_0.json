{"sha": "fb43c79171a3df4efef946777b13f7545998ee29", "log": "Fixes and better unit test code coverage from Nathan Beyer [nbeyer@kc.rr.com].   ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n      * @return the last index of the character, or -1 if not found\n      */\n     public int lastIndexOf(char ch) {\n-        return lastIndexOf(ch, 0);\n+        return lastIndexOf(ch, size - 1);\n     }\n \n     /**\n         if (startIndex < 0) {\n             return -1;\n         }\n-        char[] thisBuf = buf;\n         for (int i = startIndex; i >= 0; i--) {\n-            if (thisBuf[i] == ch) {\n+            if (buf[i] == ch) {\n                 return i;\n             }\n         }\n      * @return the last index of the string, or -1 if not found\n      */\n     public int lastIndexOf(String str) {\n-        return lastIndexOf(str, size);\n+        return lastIndexOf(str, size - 1);\n     }\n \n     /**\n             if (strLen == 1) {\n                 return lastIndexOf(str.charAt(0), startIndex);\n             }\n-            char[] thisBuf = buf;\n+\n             outer:\n-            for (int i = startIndex - strLen; i >= 0; i--) {\n+            for (int i = startIndex - strLen + 1; i >= 0; i--) {\n                 for (int j = 0; j < strLen; j++) {\n-                    if (str.charAt(j) != thisBuf[i + j]) {\n+                    if (str.charAt(j) != buf[i + j]) {\n                         continue outer;\n                     }\n                 }\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         actual = sb.reverse().toString();\n         assertEquals(\"true\", actual);\n     }\n+    \n+    public void testIndexOfChar() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (0, sb.indexOf('a'));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf('a'), sb.indexOf('a'));\n+        \n+        assertEquals(1, sb.indexOf('b'));\n+        assertEquals (\"abab\".indexOf('b'), sb.indexOf('b'));\n+        \n+        assertEquals (-1, sb.indexOf('z'));\n+    }\n+    \n+    public void testLastIndexOfChar() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.lastIndexOf('a'));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n+        \n+        assertEquals(3, sb.lastIndexOf('b'));\n+        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n+        \n+        assertEquals (-1, sb.lastIndexOf('z'));\n+    }\n+    \n+    public void testIndexOfCharInt() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.indexOf('a', 1));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n+        \n+        assertEquals(3, sb.indexOf('b', 2));\n+        assertEquals (\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n+        \n+        assertEquals (-1, sb.indexOf('z', 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals (2, sb.indexOf('z', 0));\n+        assertEquals (-1, sb.indexOf('z', 3));\n+    }\n+    \n+    public void testLastIndexOfCharInt() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (0, sb.lastIndexOf('a', 1));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n+        \n+        assertEquals(1, sb.lastIndexOf('b', 2));\n+        assertEquals (\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n+        \n+        assertEquals (-1, sb.lastIndexOf('z', 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals (2, sb.lastIndexOf('z', sb.length()));\n+        assertEquals (-1, sb.lastIndexOf('z', 1));\n+    }\n+    \n+    public void testIndexOfString() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (0, sb.indexOf(\"a\"));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n+        \n+        assertEquals (0, sb.indexOf(\"ab\"));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n+        \n+        assertEquals(1, sb.indexOf(\"b\"));\n+        assertEquals (\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n+        \n+        assertEquals(1, sb.indexOf(\"ba\"));\n+        assertEquals (\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n+        \n+        assertEquals (-1, sb.indexOf(\"z\"));\n+    }\n+    \n+    public void testLastIndexOfString() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.lastIndexOf(\"a\"));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n+        \n+        assertEquals (2, sb.lastIndexOf(\"ab\"));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n+        \n+        assertEquals(3, sb.lastIndexOf(\"b\"));\n+        assertEquals (\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"ba\"));\n+        assertEquals (\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n+        \n+        assertEquals (-1, sb.lastIndexOf(\"z\"));\n+    }\n+    \n+    public void testIndexOfStringInt() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.indexOf(\"a\", 1));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n+        \n+        assertEquals (2, sb.indexOf(\"ab\", 1));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n+        \n+        assertEquals(3, sb.indexOf(\"b\", 2));\n+        assertEquals (\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n+        \n+        assertEquals(1, sb.indexOf(\"ba\", 1));\n+        assertEquals (\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n+        \n+        assertEquals (-1, sb.indexOf(\"z\", 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals (2, sb.indexOf(\"za\", 0));\n+        assertEquals (-1, sb.indexOf(\"za\", 3));\n+    }\n+    \n+    public void testLastIndexOfStringInt() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (0, sb.lastIndexOf(\"a\", 1));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n+        \n+        assertEquals (0, sb.lastIndexOf(\"ab\", 1));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n+        assertEquals (\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n+        assertEquals (\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n+        \n+        assertEquals (-1, sb.lastIndexOf(\"z\", 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals (2, sb.lastIndexOf(\"za\", sb.length()));\n+        assertEquals (-1, sb.lastIndexOf(\"za\", 1));\n+    }\n }", "timestamp": 1122954895, "metainfo": ""}