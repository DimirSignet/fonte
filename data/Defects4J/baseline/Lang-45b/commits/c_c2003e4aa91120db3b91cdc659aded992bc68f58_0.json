{"sha": "c2003e4aa91120db3b91cdc659aded992bc68f58", "log": "Add format(long) and format(long, StringBuffer) bug 29794   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n  * @author Stephen Colebourne\n  * @author Nikolay Metchev\n  * @since 2.0\n- * @version $Id: FastDateFormat.java,v 1.19 2004/02/18 22:56:42 ggregory Exp $\n+ * @version $Id: FastDateFormat.java,v 1.20 2004/07/05 22:37:40 scolebourne Exp $\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     // Format methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Format either a <code>Date</code> or a\n-     * <code>Calendar</code> object.</p>\n+     * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n+     * <code>Long</code> (milliseconds) object.</p>\n      * \n      * @param obj  the object to format\n      * @param toAppendTo  the buffer to append to\n             return format((Date) obj, toAppendTo);\n         } else if (obj instanceof Calendar) {\n             return format((Calendar) obj, toAppendTo);\n+        } else if (obj instanceof Long) {\n+            return format(((Long) obj).longValue(), toAppendTo);\n         } else {\n             throw new IllegalArgumentException(\"Unknown class: \" +\n                 (obj == null ? \"<null>\" : obj.getClass().getName()));\n         }\n+    }\n+\n+    /**\n+     * <p>Formats a millisecond <code>long</code> value.</p>\n+     * \n+     * @param millis  the millisecond value to format\n+     * @return the formatted string\n+     */\n+    public String format(long millis) {\n+        return format(new Date(millis));\n     }\n \n     /**\n      */\n     public String format(Calendar calendar) {\n         return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n+    }\n+\n+    /**\n+     * <p>Formats a milliseond <code>long</code> value into the\n+     * supplied <code>StringBuffer</code>.</p>\n+     * \n+     * @param millis  the millisecond value to format\n+     * @param buf  the buffer to format into\n+     * @return the specified string buffer\n+     */\n+    public StringBuffer format(long millis, StringBuffer buf) {\n+        return format(new Date(millis), buf);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Fredrik Westermarck\n  * @since 2.0\n- * @version $Id: FastDateFormatTest.java,v 1.8 2004/02/18 23:03:03 ggregory Exp $\n+ * @version $Id: FastDateFormatTest.java,v 1.9 2004/07/05 22:37:40 scolebourne Exp $\n  */\n public class FastDateFormatTest extends TestCase {\n \n             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n             Date date1 = cal1.getTime();\n             Date date2 = cal2.getTime();\n+            long millis1 = date1.getTime();\n+            long millis2 = date2.getTime();\n \n             fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n             sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n             assertEquals(sdf.format(date1), fdf.format(date1));\n             assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n             assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n+            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n             assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n             assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n+            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n \n             fdf = FastDateFormat.getInstance(\"Z\");\n             assertEquals(\"-0500\", fdf.format(date1));\n             assertEquals(\"-0500\", fdf.format(cal1));\n+            assertEquals(\"-0500\", fdf.format(millis1));\n \n             fdf = FastDateFormat.getInstance(\"Z\");\n             assertEquals(\"-0400\", fdf.format(date2));\n             assertEquals(\"-0400\", fdf.format(cal2));\n+            assertEquals(\"-0400\", fdf.format(millis2));\n \n             fdf = FastDateFormat.getInstance(\"ZZ\");\n             assertEquals(\"-05:00\", fdf.format(date1));\n             assertEquals(\"-05:00\", fdf.format(cal1));\n+            assertEquals(\"-05:00\", fdf.format(millis1));\n \n             fdf = FastDateFormat.getInstance(\"ZZ\");\n             assertEquals(\"-04:00\", fdf.format(date2));\n             assertEquals(\"-04:00\", fdf.format(cal2));\n+            assertEquals(\"-04:00\", fdf.format(millis2));\n \n             String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                 \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";", "timestamp": 1089067060, "metainfo": ""}