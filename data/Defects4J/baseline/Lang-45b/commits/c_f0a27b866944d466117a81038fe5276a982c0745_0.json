{"sha": "f0a27b866944d466117a81038fe5276a982c0745", "log": "A Utils class that wraps java.lang.Math.random() and offers up methods similar to that found on the java.util.Random class. Effectively this class contains the methods that ought to be found on java.lang.Math.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/RandomUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+/**\n+ * <p><code>RandomUtils</code> is a wrapper that supports all possible \n+ * Random methods via the java.lang.Math.random() method and its system-wide \n+ * Random object.\n+ * \n+ * @author Henri Yandell\n+ * @since 2.0\n+ * @version $Id: RandomUtils.java,v 1.1 2003/04/02 16:28:15 bayard Exp $\n+ */\n+public final class RandomUtils {\n+\n+    // Note: This class statically implements the Random class\n+    //       except for public synchronized void setSeed(long);\n+    //       and public synchronized double nextGaussian();\n+\n+// should be possible?\n+//    public static void nextBytes(byte[]) {\n+//    }\n+\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed int value \n+     * from the Math.random() sequence. \n+     *\n+     * @return the random int\n+     */\n+    public static int nextInt() {\n+        return nextInt(Integer.MAX_VALUE);\n+    }\n+    /**\n+     * Returns a pseudorandom, uniformly distributed int value between 0 \n+     * (inclusive) and the specified value (exclusive), from the \n+     * Math.random() sequence. \n+     *\n+     * @param n  the specified exclusive max-value\n+     *\n+     * @return the random int\n+     */\n+    public static int nextInt(int n) {\n+        // check this cannot return 'n'\n+        return (int)Math.random() * n;\n+    }\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed long value \n+     * from the Math.random() sequence.\n+     *\n+     * @return the random long\n+     */\n+    public static long nextLong() {\n+        // possible loss of precision?\n+        return (long)Math.random() * Long.MAX_VALUE;\n+    }\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed boolean value \n+     * from the Math.random() sequence.\n+     *\n+     * @return the random boolean\n+     */\n+    public static boolean nextBoolean() {\n+        return (Math.random() > 0.5);\n+    }\n+    /**\n+     * Returns the next pseudorandom, uniformly distributed float value \n+     * between 0.0 and 1.0 from the Math.random() sequence.\n+     *\n+     * @return the random float\n+     */\n+    public static float nextFloat() {\n+        return (float)Math.random();\n+    }\n+    /**\n+     * Synonymous to the Math.random() call.\n+     *\n+     * @return the random double\n+     */\n+    public static double nextDouble() {\n+        return Math.random();\n+    }\n+    \n+}", "timestamp": 1049300895, "metainfo": ""}