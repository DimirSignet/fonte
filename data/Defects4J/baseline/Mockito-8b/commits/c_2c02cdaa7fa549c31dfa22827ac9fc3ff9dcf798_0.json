{"sha": "2c02cdaa7fa549c31dfa22827ac9fc3ff9dcf798", "log": "-killed/refactored some tests  --HG-- rename : test/org/easymock/InvocationTest.java => test/org/mockito/InvocationTest.java rename : test/org/mockito/vs/easymock/ArticleCalculator.java => test/org/mockito/sample/ArticleCalculator.java rename : test/org/mockito/vs/easymock/ArticleDatabase.java => test/org/mockito/sample/ArticleDatabase.java rename : test/org/mockito/vs/easymock/ArticleManager.java => test/org/mockito/sample/ArticleManager.java rename : test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java => test/org/mockito/sample/MockitoSampleTest.java rename : test/org/easymock/IMethods.java => test/org/mockito/usage/IMethods.java rename : test/org/mockito/ReplacingObjectMethodsTest.java => test/org/mockito/usage/ReplacingObjectMethodsTest.java rename : test/org/easymock/UsingVarargsTest.java => test/org/mockito/usage/UsingVarargsTest.java rename : test/org/easymock/ComparableMatchersTest.java => test/org/mockito/usage/matchers/ComparableMatchersTest.java rename : test/org/mockito/usage/InvalidUseOfMatchersTest.java => test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java rename : test/org/easymock/MatchersTest.java => test/org/mockito/usage/matchers/MatchersTest.java rename : test/org/easymock/MatchersToStringTest.java => test/org/mockito/usage/matchers/MatchersToStringTest.java rename : test/org/mockito/usage/BasicStubbingTest.java => test/org/mockito/usage/stubbing/BasicStubbingTest.java rename : test/org/mockito/usage/ReturningDefaultValuesTest.java => test/org/mockito/usage/stubbing/ReturningDefaultValuesTest.java rename : test/org/mockito/usage/StubbingWithThrowablesTest.java => test/org/mockito/usage/stubbing/StubbingWithThrowablesTest.java rename : test/org/mockito/usage/BasicVerificationTest.java => test/org/mockito/usage/verification/BasicVerificationTest.java rename : test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java => test/org/mockito/usage/verification/ExactNumberOfTimesVerificationTest.java rename : test/org/easymock/NiceMessagesWhenVerificationFailsTest.java => test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java rename : test/org/mockito/usage/NoMoreInteractionsVerificationTest.java => test/org/mockito/usage/verification/NoMoreInteractionsVerificationTest.java rename : test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java => test/org/mockito/usage/verification/VerificationOnMultipleMocksUsingMatchersTest.java rename : test/org/easymock/VerificationUsingMatchersTest.java => test/org/mockito/usage/verification/VerificationUsingMatchersTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4020", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/InvocationTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import static org.junit.Assert.*;\n+\n+import java.lang.reflect.Method;\n+\n+import org.easymock.internal.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class InvocationTest {\n+\n+    private Invocation call;\n+\n+    private Invocation equalCall;\n+\n+    private Invocation nonEqualCall;\n+\n+    private Method dummyMethod;\n+\n+    @Before\n+    public void setup() throws SecurityException, NoSuchMethodException {\n+        Object[] arguments1 = new Object[] { \"\" };\n+        Object[] arguments2 = new Object[] { \"\" };\n+        Object[] arguments3 = new Object[] { \"X\" };\n+        dummyMethod = Object.class.getMethod(\"equals\",\n+                new Class[] { Object.class });\n+        Object mock = new Object();\n+        call = new Invocation(mock, dummyMethod, arguments1);\n+        equalCall = new Invocation(mock, dummyMethod, arguments2);\n+        nonEqualCall = new Invocation(mock, dummyMethod, arguments3);\n+    }\n+\n+    @Test\n+    public void shouldKnowIfIsEqualTo() {\n+        assertFalse(call.equals(null));\n+        assertFalse(call.equals(\"\"));\n+        assertTrue(call.equals(equalCall));\n+        assertFalse(call.equals(nonEqualCall));\n+    }\n+    \n+    @Test\n+    public void shouldNotImplementHashCodeBecauseItsNotUsedWithMaps() {\n+        try {\n+            call.hashCode();\n+            fail();\n+        } catch (UnsupportedOperationException expected) {\n+            assertEquals(\"hashCode() is not implemented\", expected.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldDisplayMocksToStringIfValidJavaIdentifier()\n+            throws SecurityException, NoSuchMethodException {\n+        Method method = ToString.class.getMethod(\"aMethod\", new Class[0]);\n+        Invocation invocation = new Invocation(new ToString(\"validJavaIdentifier\"),\n+                method, null);\n+\n+        assertEquals(invocation.toString(new EqualsMatcher()),\n+                \"validJavaIdentifier.aMethod()\");\n+\n+        invocation = new Invocation(new ToString(\"no-valid-java-identifier\"),\n+                method, null);\n+\n+        assertEquals(invocation.toString(new EqualsMatcher()), \"aMethod()\");\n+\n+    }\n+    \n+    class ToString {\n+        private final String name;\n+\n+        public ToString(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name;\n+        }\n+\n+        public void aMethod() {\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/sample/ArticleCalculator.java\n+package org.mockito.sample;\n+\n+public interface ArticleCalculator {\n+    int countArticles(String newspaper);\n+    int countArticlesInPolish(String newspaper);\n+}\n--- /dev/null\n+++ b/test/org/mockito/sample/ArticleDatabase.java\n+package org.mockito.sample;\n+\n+public class ArticleDatabase {\n+\n+    public void updateNumberOfArticles(String newspaper, int articles) {\n+    }\n+\n+    public void updateNumberOfPolishArticles(String newspaper, int polishArticles) {\n+    }\n+\n+    public void updateNumberOfEnglishArticles(String newspaper, int i) {\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/sample/ArticleManager.java\n+package org.mockito.sample;\n+\n+public class ArticleManager {\n+    \n+    private final ArticleCalculator calculator;\n+    private final ArticleDatabase database;\n+\n+    public ArticleManager(ArticleCalculator calculator, ArticleDatabase database) {\n+        this.calculator = calculator;\n+        this.database = database;\n+    }\n+    \n+    public void updateArticleCounters(String newspaper) {\n+        int articles = calculator.countArticles(newspaper);\n+        int polishArticles = calculator.countArticlesInPolish(newspaper);\n+        \n+        database.updateNumberOfArticles(newspaper, articles);\n+        database.updateNumberOfPolishArticles(newspaper, polishArticles);\n+        database.updateNumberOfEnglishArticles(newspaper, articles - polishArticles);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/sample/MockitoSampleTest.java\n+package org.mockito.sample;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class MockitoSampleTest {\n+    \n+    @Test\n+    public void managerCountsArticlesAndSavesThemInTheDatabase() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        Mockito.stub(mockCalculator.countArticles(\"Guardian\")).andReturn(12);\n+        Mockito.stub(mockCalculator.countArticlesInPolish(\"Guardian\")).andReturn(5);\n+        \n+        articleManager.updateArticleCounters(\"Guardian\");\n+        \n+        Mockito.verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 12);\n+        Mockito.verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 5);\n+        Mockito.verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 7);\n+    }\n+    \n+    @Test\n+    public void managerCountsArticlesUsingCalculator() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        articleManager.updateArticleCounters(\"Guardian\");\n+\n+        Mockito.verify(mockCalculator).countArticles(\"Guardian\");\n+        Mockito.verify(mockCalculator).countArticlesInPolish(\"Guardian\");\n+        \n+        Mockito.verifyNoMoreInteractions(mockCalculator);\n+    }\n+    \n+    @Test\n+    public void managerSavesArticlesInTheDatabase() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        articleManager.updateArticleCounters(\"Guardian\");\n+\n+        Mockito.verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 0);\n+        Mockito.verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 0);\n+        Mockito.verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 0);\n+        \n+        Mockito.verifyNoMoreInteractions(mockDatabase);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/IMethods.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import java.io.IOException;\n+\n+public interface IMethods {\n+\n+    //TODO kill the index, kill not used methods\n+    boolean booleanReturningMethod(int index);\n+\n+    byte byteReturningMethod(int index);\n+\n+    short shortReturningMethod(int index);\n+\n+    char charReturningMethod(int index);\n+\n+    int intReturningMethod(int index);\n+\n+    long longReturningMethod(int index);\n+\n+    float floatReturningMethod(int index);\n+\n+    double doubleReturningMethod(int index);\n+\n+    Object objectReturningMethod(int index);\n+\n+    String oneArg(boolean value);\n+\n+    String oneArg(byte value);\n+\n+    String oneArg(short value);\n+\n+    String oneArg(char value);\n+\n+    String oneArg(int value);\n+\n+    String oneArg(long value);\n+\n+    String oneArg(float value);\n+\n+    String oneArg(double value);\n+\n+    String oneArg(Object value);\n+\n+    String oneArg(String value);\n+\n+    public String throwsNothing(boolean value);\n+\n+    public String throwsIOException(int count) throws IOException;\n+\n+    public String throwsError(int count) throws Error;\n+\n+    void simpleMethod();\n+\n+    void simpleMethodWithArgument(String argument);\n+\n+    Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);\n+\n+    void twoArgumentMethod(int one, int two);\n+\n+    void arrayMethod(String[] strings);\n+\n+    String oneArray(boolean[] array);\n+\n+    String oneArray(byte[] array);\n+\n+    String oneArray(char[] array);\n+\n+    String oneArray(double[] array);\n+\n+    String oneArray(float[] array);\n+\n+    String oneArray(int[] array);\n+\n+    String oneArray(long[] array);\n+\n+    String oneArray(short[] array);\n+\n+    String oneArray(Object[] array);\n+\n+    String oneArray(String[] array);\n+\n+    void varargsString(int i, String... string);\n+\n+    void varargsObject(int i, Object... object);\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/ReplacingObjectMethodsTest.java\n+/*\n+ * Copyright (c) 2007 Szczepan Faber \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class ReplacingObjectMethodsTest {\n+\n+    /**\n+     * Class overwrites object methods but implementation from Mockito will be called anyway.\n+     */\n+    public static class ClassToMockWithOverride {\n+\n+        public boolean equals(Object o) {\n+            return false;\n+        }\n+\n+        public int hashCode() {\n+            return -1;\n+        }\n+\n+        public String toString() {\n+            return \"super\";\n+        }\n+    }\n+    \n+    public static class ClassWithAnotherOverride extends ClassToMockWithOverride {\n+        \n+        public String toString() {\n+            return \"super.super\";\n+        }\n+    }\n+\n+    @Test \n+    public void testShouldReplaceObjectMethods() {\n+        Object mock = Mockito.mock(ClassToMockWithOverride.class);\n+        assertThat(mock, equalTo(mock));\n+        assertThat(mock.hashCode(), not(equalTo(-1)));\n+        assertThat(mock.toString(), not(equalTo(\"super\")));\n+    }\n+    \n+    @Test \n+    public void testShouldReplaceObjectMethodsWhenOverridden() {\n+        Object mock = Mockito.mock(ClassToMockWithOverride.class);\n+        assertThat(mock, equalTo(mock));\n+        assertThat(mock.hashCode(), not(equalTo(-1)));\n+        assertThat(mock.toString(), not(equalTo(\"super\")));\n+        assertThat(mock.toString(), not(equalTo(\"super.super\")));\n+    }\n+    \n+    private interface DummyInterface {}\n+    private class DummyClass {}\n+\n+    @Test\n+    public void shouldProvideMockyImplementationOfToString() {\n+        assertEquals(\"Mock for DummyClass\", Mockito.mock(DummyClass.class).toString());\n+        assertEquals(\"Mock for DummyInterface\", Mockito.mock(DummyInterface.class).toString());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/UsingVarargsTest.java\n+/*\n+ * Copyright (c) 2007 Szczepan Faber \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import static org.mockito.Mockito.*;\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+\n+//TODO add stubbing with varargs\n+public class UsingVarargsTest {\n+\n+    private interface IVarArgs {\n+        public void withStringVarargs(int value, String... s);\n+        public void withObjectVarargs(int value, Object... o);\n+        public void withBooleanVarargs(int value, boolean... b);\n+    }\n+    \n+    IVarArgs mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = Mockito.mock(IVarArgs.class);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyStringVarargs() {\n+        mock.withStringVarargs(1);\n+        mock.withStringVarargs(2, \"1\", \"2\", \"3\");\n+        mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n+\n+        verify(mock).withStringVarargs(1);\n+        verify(mock).withStringVarargs(2, \"1\", \"2\", \"3\");\n+        try {\n+            verify(mock).withStringVarargs(2, \"1\", \"2\", \"79\", \"4\");\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }\n+\n+    @Test\n+    public void shouldVerifyObjectVarargs() {\n+        mock.withObjectVarargs(1);\n+        mock.withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n+        mock.withObjectVarargs(3, new Integer(1));\n+\n+        verify(mock).withObjectVarargs(1);\n+        verify(mock).withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }\n+\n+    @Test\n+    public void shouldVerifyBooleanVarargs() {\n+        mock.withBooleanVarargs(1);\n+        mock.withBooleanVarargs(2, true, false, true);\n+        mock.withBooleanVarargs(3, true, true, true);\n+\n+        verify(mock).withBooleanVarargs(1);\n+        verify(mock).withBooleanVarargs(2, true, false, true);\n+        try {\n+            verify(mock).withBooleanVarargs(3, true, true, true, true);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/matchers/ComparableMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage.matchers;\n+\n+import static org.junit.Assert.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.easymock.internal.matchers.*;\n+import org.junit.Test;\n+\n+//TODO do we need matchers like GreaterThan - does it make any sense?\n+public class ComparableMatchersTest {\n+\n+    @Test\n+    public void testNotComparable() {\n+        CompareTo<Long> cmpTo = new CompareTo<Long>(5L) {\n+\n+            @Override\n+            protected String getName() {\n+                return null;\n+            }\n+\n+            @Override\n+            protected boolean matchResult(int result) {\n+                fail(\"Shouldn't be called since the passed argument is not Comparable\");\n+                return true;\n+            }\n+            \n+        };\n+        \n+        assertFalse(cmpTo.matches(new Object()));\n+    }\n+    @Test\n+    public void testLessThan() {\n+        test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n+    }\n+\n+    @Test\n+    public void testGreateThan() {\n+        test(new GreaterThan<String>(\"b\"), false, true, false, \"gt\");\n+    }\n+\n+    @Test\n+    public void testLessOrEqual() {\n+        test(new LessOrEqual<String>(\"b\"), true, false, true, \"leq\");\n+    }\n+\n+    @Test\n+    public void testGreateOrEqual() {\n+        test(new GreaterOrEqual<String>(\"b\"), false, true, true, \"geq\");\n+    }\n+\n+    @Test\n+    public void testCompareEqual() {\n+        test(new CompareEqual<String>(\"b\"), false, false, true, \"cmpEq\");\n+\n+        // Make sure it works when equals provide a different result than\n+        // compare\n+        CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(\n+                new BigDecimal(\"5.00\"));\n+        assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n+    }\n+\n+    private void test(CompareTo<String> compareTo, boolean lower, boolean higher,\n+            boolean equals, String name) {\n+\n+        assertEquals(lower, compareTo.matches(\"a\"));\n+        assertEquals(equals, compareTo.matches(\"b\"));\n+        assertEquals(higher, compareTo.matches(\"c\"));\n+\n+        StringBuffer sb = new StringBuffer();\n+        compareTo.appendTo(sb);\n+        assertEquals(name + \"(b)\", sb.toString());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage.matchers;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+import org.junit.*;\n+import org.mockito.*;\n+import org.mockito.exceptions.InvalidUseOfMatchersException;\n+import org.mockito.usage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class InvalidUseOfMatchersTest {\n+    \n+    private IMethods mock;\n+    \n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void shouldDetectWrongNumberOfMatchersWhenStubbing() {\n+        Mockito.stub(mock.threeArgumentMethod(1, \"2\", \"3\")).andReturn(null);\n+        try {\n+            Mockito.stub(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).andReturn(null);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldDetectStupidUseOfMatchersWhenVerifying() {\n+        mock.oneArg(true);\n+        eq(\"that's the stupid way\");\n+        eq(\"of using matchers\");\n+        try {\n+            Mockito.verify(mock).oneArg(true);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldScreamWhenMatchersAreInvalid() {\n+        mock.simpleMethodWithArgument(Matchers.not(eq(\"asd\")));\n+        try {\n+            mock.simpleMethodWithArgument(Matchers.not(\"jkl\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"no matchers found.\", e.getMessage());\n+        }\n+        \n+        try {\n+            mock.simpleMethodWithArgument(Matchers.or(eq(\"jkl\"), \"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"2 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+        \n+        try {\n+            mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"3 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/matchers/MatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage.matchers;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.stub;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+\n+import org.junit.*;\n+import org.mockito.*;\n+import org.mockito.usage.IMethods;\n+\n+import static org.mockito.Matchers.*;\n+\n+@SuppressWarnings(\"unchecked\")  \n+public class MatchersTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+    \n+    @Test\n+    public void andOverloaded() {\n+        stub(mock.oneArg(and(eq(false), eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(and(eq('a'), eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(and(contains(\"a\"), contains(\"d\")))).andReturn(\"8\");\n+        stub(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(false));\n+        assertEquals(null, mock.oneArg(true));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg('a'));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        \n+        assertEquals(\"8\", mock.oneArg(\"abcde\"));\n+        assertEquals(null, mock.oneArg(\"aaaaa\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        \n+    }\n+\n+    @Test\n+    public void orOverloaded() {\n+        stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n+        stub(mock.oneArg(Matchers.or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n+        stub(mock.oneArg(Matchers.or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n+        stub(mock.oneArg(Matchers.or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n+        stub(mock.oneArg(Matchers.or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n+        stub(mock.oneArg(Matchers.or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n+        stub(mock.oneArg(Matchers.or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n+        stub(mock.oneArg(Matchers.or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n+        stub(mock.oneArg(Matchers.or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        \n+        assertEquals(\"8\", mock.oneArg(\"jkl\"));\n+        assertEquals(\"8\", mock.oneArg(\"asd\"));\n+        assertEquals(null, mock.oneArg(\"asdjkl\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        assertEquals(null, mock.oneArg(String.class));\n+    }\n+\n+    @Test\n+    public void notOverloaded() {\n+        stub(mock.oneArg(Matchers.not(eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(Matchers.not(eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.not(eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(Matchers.not(eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(Matchers.not(eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(Matchers.not(eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(Matchers.not(eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(Matchers.not(eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(Matchers.not(contains(\"a\")))).andReturn(\"8\");\n+        stub(mock.oneArg(Matchers.not(isA(Class.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(null, mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg('b'));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 2));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"8\", mock.oneArg(\"bcde\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(null, mock.oneArg(Class.class));\n+    }\n+\n+    @Test\n+    public void lessOrEqualOverloaded() {\n+        stub(mock.oneArg(leq((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(leq((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(leq((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(leq((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(leq((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(leq((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(leq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(null, mock.oneArg((byte) 2));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -5));\n+        assertEquals(\"5\", mock.oneArg((int) -2));\n+        assertEquals(\"6\", mock.oneArg((long) -3));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"1.1\")));\n+    }\n+\n+    @Test\n+    public void lessThanOverloaded() {\n+        stub(mock.oneArg(lt((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(lt((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(lt((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(lt((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(lt((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(lt((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(lt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 0));\n+        assertEquals(null, mock.oneArg((byte) 1));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 0));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -4));\n+        assertEquals(\"5\", mock.oneArg((int) -34));\n+        assertEquals(\"6\", mock.oneArg((long) -6));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"23\")));\n+    }\n+\n+    @Test\n+    public void greaterOrEqualMatcherOverloaded() {\n+        stub(mock.oneArg(geq((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(geq((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(geq((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(geq((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(geq((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(geq((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(geq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(null, mock.oneArg((byte) 0));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 4));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.00\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n+    }\n+\n+    @Test\n+    public void greaterThanMatcherOverloaded() {\n+        stub(mock.oneArg(gt((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(gt((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(gt((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(gt((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(gt((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(gt((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(gt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(null, mock.oneArg((byte) 1));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n+    }\n+\n+    @Test\n+    public void compareToMatcher() {\n+        stub(mock.oneArg(Matchers.cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+\n+        assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n+    }\n+\n+    @Test\n+    public void anyMatcher() {\n+        stub(mock.oneArg(anyBoolean())).andReturn(\"0\");\n+        stub(mock.oneArg(anyByte())).andReturn(\"1\");\n+        stub(mock.oneArg(anyChar())).andReturn(\"2\");\n+        stub(mock.oneArg(anyDouble())).andReturn(\"3\");\n+        stub(mock.oneArg(anyFloat())).andReturn(\"4\");\n+        stub(mock.oneArg(anyInt())).andReturn(\"5\");\n+        stub(mock.oneArg(anyLong())).andReturn(\"6\");\n+        stub(mock.oneArg(anyShort())).andReturn(\"7\");\n+        stub(mock.oneArg((String) anyObject())).andReturn(\"8\");\n+        stub(mock.oneArg(anyObject())).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"4\", mock.oneArg((float) 889));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        assertEquals(\"8\", mock.oneArg(\"Test\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(\"9\", mock.oneArg(new HashMap()));\n+    }\n+\n+    @Test\n+    public void arrayEqualsMatcher() {\n+        stub(mock.oneArray(Matchers.aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n+        stub(mock.oneArray(Matchers.aryEq(new byte[] { 1 }))).andReturn(\"1\");\n+        stub(mock.oneArray(Matchers.aryEq(new char[] { 1 }))).andReturn(\"2\");\n+        stub(mock.oneArray(Matchers.aryEq(new double[] { 1 }))).andReturn(\"3\");\n+        stub(mock.oneArray(Matchers.aryEq(new float[] { 1 }))).andReturn(\"4\");\n+        stub(mock.oneArray(Matchers.aryEq(new int[] { 1 }))).andReturn(\"5\");\n+        stub(mock.oneArray(Matchers.aryEq(new long[] { 1 }))).andReturn(\"6\");\n+        stub(mock.oneArray(Matchers.aryEq(new short[] { 1 }))).andReturn(\"7\");\n+        stub(mock.oneArray(Matchers.aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n+        stub(mock.oneArray(Matchers.aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n+        assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n+        assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n+        assertEquals(\"3\", mock.oneArray(new double[] { 1 }));\n+        assertEquals(\"4\", mock.oneArray(new float[] { 1 }));\n+        assertEquals(\"5\", mock.oneArray(new int[] { 1 }));\n+        assertEquals(\"6\", mock.oneArray(new long[] { 1 }));\n+        assertEquals(\"7\", mock.oneArray(new short[] { 1 }));\n+        assertEquals(\"8\", mock.oneArray(new String[] { \"Test\" }));\n+        assertEquals(\"9\", mock.oneArray(new Object[] { \"Test\", new Integer(4) }));\n+        \n+        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(999) }));\n+        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(4), \"x\" }));\n+        \n+        assertEquals(null, mock.oneArray(new boolean[] { true, false }));\n+        assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));\n+    }\n+\n+    @Test\n+    public void greaterOrEqualMatcher() {\n+        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+\n+        assertEquals(\">= 7\", mock.oneArg(7));\n+        assertEquals(\">= 7\", mock.oneArg(8));\n+        assertEquals(\">= 7\", mock.oneArg(9));\n+\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+    }\n+\n+    @Test\n+    public void greaterThanMatcher() {\n+        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+\n+        assertEquals(\"> 7\", mock.oneArg(8));\n+        assertEquals(\"> 7\", mock.oneArg(9));\n+        assertEquals(\"> 7\", mock.oneArg(10));\n+\n+        assertEquals(\"<= 7\", mock.oneArg(7));\n+        assertEquals(\"<= 7\", mock.oneArg(6));\n+    }\n+\n+    @Test\n+    public void lessOrEqualMatcher() {\n+        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+\n+        assertEquals(\"<= 7\", mock.oneArg(7));\n+        assertEquals(\"<= 7\", mock.oneArg(6));\n+        assertEquals(\"<= 7\", mock.oneArg(5));\n+\n+        assertEquals(\"> 7\", mock.oneArg(8));\n+        assertEquals(\"> 7\", mock.oneArg(9));\n+    }\n+\n+    @Test\n+    public void lessThanMatcher() {\n+        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+\n+        assertEquals(\"< 7\", mock.oneArg(5));\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+        assertEquals(\"< 7\", mock.oneArg(4));\n+\n+        assertEquals(\">= 7\", mock.oneArg(7));\n+        assertEquals(\">= 7\", mock.oneArg(8));\n+    }\n+\n+    @Test\n+    public void orMatcher() {\n+        stub(mock.oneArg(anyInt())).andReturn(\"other\");\n+        stub(mock.oneArg(Matchers.or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n+\n+        assertEquals(\"other\", mock.oneArg(10));\n+        assertEquals(\"7 or 9\", mock.oneArg(7));\n+        assertEquals(\"7 or 9\", mock.oneArg(9));\n+    }\n+\n+    @Test\n+    public void nullMatcher() {\n+        stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).andReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), Matchers.not(isNull()), eq(\"\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+    }\n+\n+    @Test\n+    public void notNullMatcher() {\n+        stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), Matchers.not(notNull()), eq(\"\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n+    }\n+\n+    @Test\n+    //TODO how different is this one from matchesMatcher?\n+    public void findMatcher() {\n+        stub(mock.oneArg(Matchers.find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"ab12\"));\n+        assertEquals(null, mock.oneArg(\"12345\"));\n+    }\n+\n+    @Test\n+    public void matchesMatcher() {\n+        stub(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).andReturn(\"1\");\n+        stub(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"a12\"));\n+        assertEquals(\"2\", mock.oneArg(\"131\"));\n+        assertEquals(null, mock.oneArg(\"blah\"));\n+    }\n+\n+    @Test\n+    public void containsMatcher() {\n+        stub(mock.oneArg(contains(\"ell\"))).andReturn(\"1\");\n+        stub(mock.oneArg(contains(\"ld\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"hello\"));\n+        assertEquals(\"2\", mock.oneArg(\"world\"));\n+        assertEquals(null, mock.oneArg(\"xlx\"));\n+    }\n+\n+    @Test\n+    public void startsWithMatcher() {\n+        stub(mock.oneArg(Matchers.startsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.startsWith(\"bc\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n+        assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n+        assertEquals(null, mock.oneArg(\"ba quake\"));\n+    }\n+\n+    @Test\n+    public void endsWithMatcher() {\n+        stub(mock.oneArg(Matchers.endsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.endsWith(\"bc\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"xab\"));\n+        assertEquals(\"2\", mock.oneArg(\"xbc\"));\n+        assertEquals(null, mock.oneArg(\"ac\"));\n+    }\n+\n+    @Test\n+    public void deltaMatcher() {\n+        stub(mock.oneArg(eq(1.0D, 0.1D))).andReturn(\"1\");\n+        stub(mock.oneArg(eq(2.0D, 0.1D))).andReturn(\"2\");\n+        stub(mock.oneArg(eq(1.0F, 0.1F))).andReturn(\"3\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+\n+        assertEquals(\"1\", mock.oneArg(1.0));\n+        assertEquals(\"1\", mock.oneArg(0.91));\n+        assertEquals(\"1\", mock.oneArg(1.09));\n+        assertEquals(\"2\", mock.oneArg(2.0));\n+\n+        assertEquals(\"3\", mock.oneArg(1.0F));\n+        assertEquals(\"3\", mock.oneArg(0.91F));\n+        assertEquals(\"3\", mock.oneArg(1.09F));\n+        assertEquals(\"4\", mock.oneArg(2.1F));\n+        \n+        assertEquals(null, mock.oneArg(2.2F));\n+    }\n+\n+    @Test\n+    public void sameMatcher() {\n+        Object one = new String(\"1243\");\n+        Object two = new String(\"1243\");\n+        Object three = new String(\"1243\");\n+\n+        assertNotSame(one, two);\n+        assertEquals(one, two);\n+        assertEquals(two, three);\n+\n+        stub(mock.oneArg(Matchers.same(one))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.same(two))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(one));\n+        assertEquals(\"2\", mock.oneArg(two));\n+        assertEquals(null, mock.oneArg(three));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/matchers/MatchersToStringTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage.matchers;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.easymock.IArgumentMatcher;\n+import org.easymock.internal.matchers.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MatchersToStringTest {\n+    private StringBuffer buffer;\n+\n+    @Before\n+    public void setup() {\n+        buffer = new StringBuffer();\n+    }\n+\n+    @Test\n+    public void sameToStringWithString() {\n+        new Same(\"X\").appendTo(buffer);\n+        assertEquals(\"same(\\\"X\\\")\", buffer.toString());\n+\n+    }\n+\n+    @Test\n+    public void nullToString() {\n+        Null.NULL.appendTo(buffer);\n+        assertEquals(\"isNull()\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void notNullToString() {\n+        NotNull.NOT_NULL.appendTo(buffer);\n+        assertEquals(\"notNull()\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void anyToString() {\n+        Any.ANY.appendTo(buffer);\n+        assertEquals(\"<any>\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void sameToStringWithChar() {\n+        new Same('x').appendTo(buffer);\n+        assertEquals(\"same('x')\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void sameToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        new Same(o).appendTo(buffer);\n+        assertEquals(\"same(X)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void equalsToStringWithString() {\n+        new Equals(\"X\").appendTo(buffer);\n+        assertEquals(\"\\\"X\\\"\", buffer.toString());\n+\n+    }\n+\n+    @Test\n+    public void equalsToStringWithChar() {\n+        new Equals('x').appendTo(buffer);\n+        assertEquals(\"'x'\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void equalsToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        new Equals(o).appendTo(buffer);\n+        assertEquals(\"X\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void orToString() {\n+        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        new Or(matchers).appendTo(buffer);\n+        assertEquals(\"or(1, 2)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void notToString() {\n+        new Not(new Equals(1)).appendTo(buffer);\n+        assertEquals(\"not(1)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void andToString() {\n+        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        new And(matchers).appendTo(buffer);\n+        assertEquals(\"and(1, 2)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void startsWithToString() {\n+        new StartsWith(\"AB\").appendTo(buffer);\n+        assertEquals(\"startsWith(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void endsWithToString() {\n+        new EndsWith(\"AB\").appendTo(buffer);\n+        assertEquals(\"endsWith(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void containsToString() {\n+        new Contains(\"AB\").appendTo(buffer);\n+        assertEquals(\"contains(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void findToString() {\n+        new Find(\"\\\\s+\").appendTo(buffer);\n+        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void matchesToString() {\n+        new Matches(\"\\\\s+\").appendTo(buffer);\n+        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/stubbing/BasicStubbingTest.java\n+package org.mockito.usage.stubbing;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.*;\n+import static org.mockito.util.JUnitMatchers.contains;\n+\n+import java.util.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class BasicStubbingTest {\n+\n+    private interface DummyInterface {\n+        int getInt(String value);\n+        String getString(int argumentOne, String argumentTwo);\n+        List<String> getList();\n+    }\n+    \n+    @Test\n+    public void shouldStubAllMethodsByDefault() throws Exception {\n+        DummyInterface mock = Mockito.mock(DummyInterface.class);\n+\n+        assertEquals(0, mock.getInt(\"test\"));\n+        assertEquals(0, mock.getInt(\"testTwo\"));\n+        \n+        assertNull(mock.getString(0, null));\n+        assertNull(mock.getString(100, null));\n+        \n+        assertEquals(0, mock.getList().size());\n+        assertEquals(0, mock.getList().size());\n+    }\n+    \n+    @Test\n+    public void shouldStubAndLetBeCalledAnyTimes() throws Exception {\n+        DummyInterface mock = Mockito.mock(DummyInterface.class);\n+        \n+        Mockito.stub(mock.getInt(\"14\")).andReturn(14);\n+        \n+        assertThat(mock.getInt(\"14\"), equalTo(14));\n+        assertThat(mock.getInt(\"14\"), equalTo(14));\n+        \n+        Mockito.stub(mock.getList()).andReturn(Arrays.asList(\"elementOne\", \"elementTwo\"));\n+        \n+        assertThat(mock.getList(), contains(\"elementOne\", \"elementTwo\"));\n+        assertThat(mock.getList(), contains(\"elementOne\", \"elementTwo\"));\n+        \n+        Mockito.stub(mock.getString(10, \"test\")).andReturn(\"test\");\n+        \n+        assertThat(mock.getString(10, \"test\"), equalTo(\"test\"));\n+        assertThat(mock.getString(10, \"test\"), equalTo(\"test\"));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/stubbing/ReturningDefaultValuesTest.java\n+/*\n+ * Copyright (c) 2007 Szczepan Faber \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage.stubbing;\n+\n+import static org.junit.Assert.*;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.usage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ReturningDefaultValuesTest {\n+\n+    @Test\n+    public void shouldReturnAllKindsOfPrimitives() throws Exception {\n+        IMethods mock = Mockito.mock(IMethods.class);\n+\n+        //this is mainly to prove that cglib-enchanted-thing works properly \n+        //and returns primitive value rather than throw NullPointerException\n+        //If we used java.lang.reflect.Proxy NullPointerException will bang\n+        assertEquals((byte)0, mock.byteReturningMethod(12));\n+        assertEquals((short)0, mock.shortReturningMethod(12));\n+        assertEquals(0, mock.intReturningMethod(12));\n+        assertEquals(0L, mock.intReturningMethod(12));\n+        assertEquals(0.0F, mock.floatReturningMethod(12), 0.0F);\n+        assertEquals(0.0D, mock.doubleReturningMethod(12), 0.0D);\n+        assertEquals('\\u0000', mock.charReturningMethod(12));\n+        assertEquals(false, mock.booleanReturningMethod(12));\n+        assertEquals(null, mock.objectReturningMethod(12));\n+    }\n+    \n+    @Test \n+    public void shouldReturnEmptyCollections() {\n+        CollectionsServer mock = Mockito.mock(CollectionsServer.class);\n+        \n+        assertTrue(mock.list().isEmpty());\n+        assertTrue(mock.linkedList().isEmpty());\n+        assertTrue(mock.map().isEmpty());\n+        assertTrue(mock.hashSet().isEmpty());\n+    }\n+\n+    private class CollectionsServer {\n+        List list() {\n+            return null;\n+        }\n+\n+        LinkedList linkedList() {\n+            return null;\n+        }\n+\n+        Map map() {\n+            return null;\n+        }\n+\n+        java.util.HashSet hashSet() {\n+            return null;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/stubbing/StubbingWithThrowablesTest.java\n+package org.mockito.usage.stubbing;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.*;\n+import java.util.LinkedList;\n+\n+import org.junit.Test;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class StubbingWithThrowablesTest {\n+\n+    @Test\n+    public void shouldStubWithThrowable() throws Exception {\n+        LinkedList mock = mock(LinkedList.class);\n+\n+        IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n+        stub(mock.add(\"throw\")).andThrows(expected);\n+        \n+        try {\n+            mock.add(\"throw\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(expected, e);\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldSetThrowableToVoidMethod() throws Exception {\n+        LinkedList mock = mock(LinkedList.class);\n+\n+        IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n+        \n+        stubVoid(mock).toThrow(expected).on().clear();\n+        \n+        try {\n+            mock.clear();\n+            fail();\n+        } catch (Exception e) {\n+            assertEquals(expected, e);\n+        }\n+    }   \n+    \n+    @Test\n+    public void shouldAllowSettingCheckedException() throws Exception {\n+        Reader reader = mock(Reader.class);\n+        IOException ioException = new IOException();\n+        \n+        stub(reader.read()).andThrows(ioException);\n+        \n+        try {\n+            reader.read();\n+        } catch (Exception e) {\n+            assertEquals(ioException, e);\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldAllowSettingError() throws Exception {\n+        LinkedList mock = mock(LinkedList.class);\n+        Error error = new Error();\n+        \n+        stub(mock.add(\"quake\")).andThrows(error);\n+        \n+        try {\n+            mock.add(\"quake\");\n+        } catch (Error e) {\n+            assertEquals(error, e);\n+        }\n+    }    \n+    \n+    @Test\n+    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n+        LinkedList list = mock(LinkedList.class);\n+        Exception checkedException = new Exception();\n+        \n+        try {\n+            stub(list.add(\"monkey island\")).andThrows(checkedException);\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"Given checked exception is invalid for this method\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotAllowSettingNullThrowable() throws Exception {\n+        LinkedList list = mock(LinkedList.class);\n+        \n+        try {\n+            stub(list.add(\"monkey island\")).andThrows(null);\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"Cannot set null throwable\", e.getMessage());\n+        }\n+    }    \n+    \n+    @Test\n+    public void shouldMixThrowablesAndReturnValuesOnDifferentMocks() throws Exception {\n+        \n+    }\n+    \n+    @Test\n+    public void shouldVerifyWhenStubbedWithThrowable() throws Exception {\n+        \n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/verification/BasicVerificationTest.java\n+package org.mockito.usage.verification;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.*;\n+\n+import java.util.*;\n+\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class BasicVerificationTest {\n+\n+    @Test\n+    public void shouldVerify() throws Exception {\n+        List mock = Mockito.mock(List.class);\n+\n+        mock.clear();\n+        Mockito.verify(mock).clear();\n+\n+        mock.add(\"test\");\n+        Mockito.verify(mock).add(\"test\");\n+\n+        Mockito.verifyNoMoreInteractions(mock);\n+    }\n+\n+    @Test\n+    public void shouldFailVerification() throws Exception {\n+        List mock = Mockito.mock(List.class);\n+\n+        try {\n+            Mockito.verify(mock).clear();\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Mock verification failed\"));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailVerificationOnMethodArgument() throws Exception {\n+        List mock = Mockito.mock(List.class);\n+        mock.clear();\n+        mock.add(\"foo\");\n+\n+        Mockito.verify(mock).clear();\n+        try {\n+            Mockito.verify(mock).add(\"bar\");\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Mock verification failed\"));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldLetYouVerifyTheSameMethodAnyTimes() throws Exception {\n+        List mock = Mockito.mock(List.class);\n+        mock.clear();\n+\n+        Mockito.verify(mock).clear();\n+        Mockito.verify(mock).clear();\n+        Mockito.verify(mock).clear();\n+    }\n+\n+    @Test\n+    public void shouldDetectRedundantInvocation() throws Exception {\n+        List mock = Mockito.mock(List.class);\n+        mock.clear();\n+        mock.add(\"foo\");\n+        mock.add(\"bar\");\n+\n+        Mockito.verify(mock).clear();\n+        Mockito.verify(mock).add(\"foo\");\n+\n+        try {\n+            Mockito.verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Mock verification failed\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldVerifyStubbedMethods() throws Exception {\n+        LinkedList mock = Mockito.mock(LinkedList.class);\n+        \n+        Mockito.stub(mock.add(\"test\")).andReturn(Boolean.FALSE);\n+        \n+        mock.add(\"test\");\n+        \n+        Mockito.verify(mock).add(\"test\");\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/verification/ExactNumberOfTimesVerificationTest.java\n+package org.mockito.usage.verification;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.*;\n+\n+import java.util.LinkedList;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ExactNumberOfTimesVerificationTest {\n+\n+    @Test\n+    public void shouldVerifyActualNumberOfInvocationsSmallerThanExpected() throws Exception {\n+        LinkedList mock = Mockito.mock(LinkedList.class);\n+        mock.clear();\n+        mock.clear();\n+        mock.clear();\n+\n+        Mockito.verify(mock, 3).clear();\n+        try {\n+            Mockito.verify(mock, 100).clear();\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Expected to be invoked 100 times but was 3\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldVerifyActualNumberOfInvocationsLargerThanExpected() throws Exception {\n+        LinkedList mock = Mockito.mock(LinkedList.class);\n+        mock.clear();\n+        mock.clear();\n+        mock.clear();\n+\n+        Mockito.verify(mock, 3).clear();\n+        try {\n+            Mockito.verify(mock, 1).clear();\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Expected to be invoked 1 times but was 3\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldVerifyProperlyIfMethodWasNotInvoked() throws Exception {\n+        LinkedList mock = Mockito.mock(LinkedList.class);\n+\n+        Mockito.verify(mock, 0).clear();\n+        try {\n+            Mockito.verify(mock, 15).clear();\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Expected to be invoked 15 times but was 0\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldVerifyProperlyIfMethodWasInvokedOnce() throws Exception {\n+        LinkedList mock = Mockito.mock(LinkedList.class);\n+\n+        mock.clear();\n+        \n+        Mockito.verify(mock, 1).clear();\n+        try {\n+            Mockito.verify(mock, 15).clear();\n+            fail();\n+        } catch (AssertionError error) {\n+            assertThat(error.getMessage(), equalTo(\"Expected to be invoked 15 times but was 1\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotCountInStubbedInvocations() throws Exception {\n+        LinkedList mock = Mockito.mock(LinkedList.class);\n+        \n+        Mockito.stub(mock.add(\"test\")).andReturn(false);\n+        Mockito.stub(mock.add(\"test\")).andReturn(true);\n+        \n+        mock.add(\"test\");\n+        mock.add(\"test\");\n+        \n+        Mockito.verify(mock, 2).add(\"test\");\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java\n+package org.mockito.usage.verification;\n+\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+import org.mockito.usage.IMethods;\n+\n+import static org.mockito.Mockito.*;\n+import static org.junit.Assert.*;\n+\n+public class NiceMessagesWhenVerificationFailsTest {\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldPrintMethodName() {\n+        try {\n+            verify(mock).simpleMethod();\n+        } catch (MockVerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Method not invoked: IMethods.simpleMethod()\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldPrintMethodNameAndArguments() {\n+        try {\n+            verify(mock).threeArgumentMethod(12, new Object(), \"some string\");\n+        } catch (MockVerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Method not invoked: IMethods.threeArgumentMethod(12, id1234123, \\\"some string\\\")\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldPrintFirstUnexpectedInvocation() {\n+        mock.oneArg(true);\n+        mock.threeArgumentMethod(1, \"2\", \"3\");\n+        try {\n+            verifyNoMoreInteractions(mock);\n+        } catch (MockVerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  No interactions expected but found: IMethods.oneArg(true)\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/verification/NoMoreInteractionsVerificationTest.java\n+package org.mockito.usage.verification;\n+\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.*;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class NoMoreInteractionsVerificationTest {\n+\n+    @Test\n+    public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {\n+        List mock = mock(List.class);\n+        stub(mock.add(\"one\")).andReturn(true);\n+        stub(mock.add(\"two\")).andReturn(true);\n+\n+        mock.add(\"one\");\n+        \n+        verify(mock).add(\"one\");\n+        verifyNoMoreInteractions(mock);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyWhenExactNumberOfInvocationsUsed() throws Exception {\n+        List mock = mock(List.class);\n+\n+        mock.add(\"one\");\n+        mock.add(\"one\");\n+        mock.add(\"one\");\n+        \n+        verify(mock, 3).add(\"one\");\n+        \n+        verifyNoMoreInteractions(mock);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyNoInteractions() throws Exception {\n+        List mock = mock(List.class);\n+\n+        verifyNoMoreInteractions(mock);\n+        verifyZeroInteractions(mock);\n+    }\n+    \n+    @Test\n+    public void shouldFailNoInteractionsVerification() throws Exception {\n+        List mock = mock(List.class);\n+\n+        mock.clear();\n+        \n+        try {\n+            verifyZeroInteractions(mock);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {\n+            //cool\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldFailNoMoreInteractionsVerification() throws Exception {\n+        List mock = mock(List.class);\n+\n+        mock.clear();\n+        \n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {\n+            //cool\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldVerifyOneMockButFailOnOther() throws Exception {\n+        List list = mock(List.class);\n+        Map map = mock(Map.class);\n+\n+        list.add(\"one\");\n+        list.add(\"one\");\n+        \n+        map.put(\"one\", 1);\n+        \n+        verify(list, 2).add(\"one\");\n+        \n+        verifyNoMoreInteractions(list);\n+        try {\n+            verifyZeroInteractions(map);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {\n+            //cool\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n+package org.mockito.usage.verification;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.*;\n+\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class VerificationOnMultipleMocksUsingMatchersTest {\n+\n+    @Test\n+    public void shouldVerifyUsingMatchers() throws Exception {\n+        List list = Mockito.mock(List.class);\n+        HashMap map = Mockito.mock(HashMap.class);\n+        \n+        list.add(\"test\");\n+        list.add(1, \"test two\");\n+        \n+        map.put(\"test\", 100);\n+        map.put(\"test two\", 200);\n+        \n+        verify(list).add(EasyMock.anyObject());\n+        verify(list).add(EasyMock.anyInt(), EasyMock.eq(\"test two\"));\n+        \n+        verify(map).put(EasyMock.anyObject(), EasyMock.anyObject());\n+        verify(map).put(EasyMock.eq(\"test two\"), EasyMock.eq(200));\n+        \n+        verifyNoMoreInteractions(list, map);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyMultipleMocks() throws Exception {\n+        List list = mock(List.class);\n+        Map map = mock(Map.class);\n+        Set set = mock(Set.class);\n+\n+        list.add(\"one\");\n+        list.add(\"one\");\n+        list.add(\"two\");\n+        \n+        map.put(\"one\", 1);\n+        map.put(\"one\", 1);\n+        \n+        verify(list, 2).add(\"one\");\n+        verify(list, 1).add(\"two\");\n+        verify(list, 0).add(\"three\");\n+        \n+        verify(map, 2).put(EasyMock.anyObject(), EasyMock.anyInt());\n+        \n+        verifyNoMoreInteractions(list, map);\n+        verifyZeroInteractions(set);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/verification/VerificationUsingMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage.verification;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.mockito.Matchers.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.verify;\n+\n+import org.junit.*;\n+import org.mockito.*;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+import org.mockito.usage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")  \n+public class VerificationUsingMatchersTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void shouldVerifyUsingSameMatcher() {\n+        Object one = new String(\"1243\");\n+        Object two = new String(\"1243\");\n+        Object three = new String(\"1243\");\n+\n+        assertNotSame(one, two);\n+        assertEquals(one, two);\n+        assertEquals(two, three);\n+\n+        mock.oneArg(one);\n+        mock.oneArg(two);\n+        \n+        verify(mock).oneArg(Matchers.same(one));\n+        verify(mock).oneArg(two);\n+        \n+        try {\n+            verify(mock).oneArg(Matchers.same(three));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }  \n+    \n+    @Test\n+    public void shouldVerifyUsingMixedMatchers() {\n+        mock.threeArgumentMethod(11, \"\", \"01234\");\n+\n+        try {\n+            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+\n+        mock.threeArgumentMethod(8, new Object(), \"01234\");\n+        \n+        try {\n+            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+        \n+        mock.threeArgumentMethod(8, \"\", \"no match\");\n+\n+        try {\n+            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+        \n+        mock.threeArgumentMethod(8, \"\", \"123\");\n+        \n+        verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+    }\n+}", "timestamp": 1195255201, "metainfo": ""}