{"sha": "88b209a293acd397f13b313eaa1c5b91b6337608", "log": "working towards implementing issue 162  --HG-- rename : test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java => test/org/mockitousage/verification/NoMoreInteractionsExcludingStubsTest.java", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsExcludingStubsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.verification;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.verification.NoInteractionsWanted;\n+import org.mockito.internal.invocation.CapturesArgumensFromInvocation;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMarker;\n+import org.mockito.internal.stubbing.InvocationContainer;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.List;\n+\n+import static org.mockito.Mockito.*;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class NoMoreInteractionsExcludingStubsTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+\n+    @Test\n+    public void shouldAllowToExcludeStubsForVerification() throws Exception {\n+        //given\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+\n+        //when\n+        String stubbed = mock.simpleMethod(); //irrelevant call because it is stubbing\n+        mock.objectArgMethod(stubbed);\n+\n+        //then\n+        verify(mock).objectArgMethod(\"foo\");\n+\n+        //verifyNoMoreInteractions fails:\n+        try { verifyNoMoreInteractions(mock); fail(); } catch (NoInteractionsWanted e) {};\n+        \n+        //but it works when stubs are ignored:\n+        ignoreStubs(mock);\n+        verifyNoMoreInteractions(mock);\n+    }\n+\n+//    @Test\n+//    public void shouldIgnoringStubsDetectNulls() throws Exception {\n+//        //given\n+//\n+//        //when\n+//        ignoreStubs(mock, null);\n+//\n+//        //then\n+//    }\n+//\n+//    @Test\n+//    public void shouldIgnoringStubsDetectNonMocks() throws Exception {\n+//        //given\n+//\n+//        //when\n+//        ignoreStubs(mock, new Object());\n+//\n+//        //then\n+//    }\n+\n+    /**\n+     * Ignores stubbed methods of given mocks for the sake of verification.\n+     * <p>\n+     * Other words: all *stubbed* methods of given mocks are made *verfied* so that they don't get in a way during verifyNoMoreInteractions().\n+     * <p>\n+     * This method changes the input mocks! This method returns input mocks for convenience. \n+     * <p>\n+     * Example:\n+     * <pre>\n+     *  //mocking lists for the sake of the example (if you mock List in real you will burn in hell)\n+     *  List mock1 = mock(List.class), mock2 = mock(List.class);\n+     * \n+     *  //stubbing mocks:\n+     *  when(mock1.get(0)).thenReturn(10);\n+     *  when(mock2.get(0)).thenReturn(20);\n+     *\n+     *  //using mocks by calling stubbed get(0) methods:\n+     *  System.out.println(mock1.get(0)); //prints 10\n+     *  System.out.println(mock2.get(0)); //prints 20\n+     *\n+     *  //using mocks by calling clear() methods:\n+     *  mock1.clear();\n+     *  mock2.clear();\n+     *\n+     *  //verification:\n+     *  verify(mock1).clear();\n+     *  verify(mock2).clear();\n+     *\n+     *  //verifyNoMoreInteractions() fails because get() methods were not accounted for.\n+     *  try { verifyNoMoreInteractions(mock1, mock2); } catch (NoInteractionsWanted e);\n+     *\n+     *  //However, if ignore stubbed methods then we can verifyNoMoreInteractions() \n+     *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));\n+     *\n+     *  //Remember that ignoreStubs() *changes* the input mocks and returns them for convenience.\n+     * <pre>\n+     *\n+     * @param mocks input mocks that will be changed\n+     * @return the same mocks that were passed in as parameters\n+     */\n+    public static Object[] ignoreStubs(Object... mocks) {\n+        for (Object m : mocks) {\n+            InvocationContainer invocationContainer = new MockUtil().getMockHandler(m).getInvocationContainer();\n+            List<Invocation> ins = invocationContainer.getInvocations();\n+            for (Invocation in : ins) {\n+                InvocationMarker invocationMarker = new InvocationMarker();\n+                if (in.stubInfo() != null) {\n+                    invocationMarker.markVerified(in, new CapturesArgumensFromInvocation() {\n+                        public void captureArgumentsFrom(Invocation i) {\n+                            //don't capture\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+        return mocks;\n+    }\n+\n+}", "timestamp": 1289244140, "metainfo": ""}