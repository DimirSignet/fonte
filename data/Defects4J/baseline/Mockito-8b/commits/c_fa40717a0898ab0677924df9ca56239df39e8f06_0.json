{"sha": "fa40717a0898ab0677924df9ca56239df39e8f06", "log": "fixed Igor's puzzle :D  --HG-- rename : test/org/mockito/usage/binding/IncorectBindingTest.java => test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4047", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n+package org.mockito.usage.binding;\n+\n+import org.junit.*;\n+import org.mockito.Mockito;\n+\n+public class IncorectBindingPuzzleFixedTest {\n+\n+    private DerivedInterface mock;\n+    \n+    @Before public void setup() {\n+        mock = Mockito.mock(DerivedInterface.class);\n+    }\n+\n+    private class BaseMessage {}\n+    private class Message extends BaseMessage {}\n+    \n+    private interface BaseInteface {\n+        public void print(BaseMessage message);\n+    }\n+\n+    private interface DerivedInterface extends BaseInteface {\n+        public void print(Message message);\n+    }\n+    \n+    private void print(BaseMessage message) {\n+        mock.print(message);\n+    }\n+    \n+    @Test\n+    public void overriddenInterfaceMethodNotWorking() throws Exception {\n+        Message message = new Message();\n+        print(message);\n+        Mockito.verify(mock).print(message);\n+    }\n+    \n+    @Test\n+    public void overriddenInterfaceMethodWorking() throws Exception {\n+        Message message = new Message();\n+        print(message);\n+        Mockito.verify(mock).print((BaseMessage)message);\n+    }\n+}", "timestamp": 1195688594, "metainfo": ""}