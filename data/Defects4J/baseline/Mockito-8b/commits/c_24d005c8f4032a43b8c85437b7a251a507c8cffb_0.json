{"sha": "24d005c8f4032a43b8c85437b7a251a507c8cffb", "log": "Tests for issue 453", "commit": "\n--- a/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n+++ b/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n import static org.hamcrest.CoreMatchers.*;\n import static org.mockito.Mockito.*;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n             assertContains(\"You mocked following type: IMethods\", e.getMessage());\n         }\n     }\n+    \n+\t@Test\n+\tpublic void shouldMockClassWithInterfacesOfDifferentClassloader()\n+\t\t\tthrows ClassNotFoundException {\n+\t\t// from test-resources/multiple-interfaces/\n+\t\tClass<?> interface1 = new ClassLoader1().loadClass(\"test.TestedClass1\");\n+\t\tClass<?> interface2 = new Classloader2().loadClass(\"test.TestedClass2\");\n+\n+\t\ttry {\n+\t\t\tObject mocked = Mockito.mock(interface1, Mockito.withSettings()\n+\t\t\t\t\t.extraInterfaces(interface2));\n+\t\t\tassertTrue(interface2.isInstance(mocked));\n+\t\t} catch (MockitoException e) {\n+\t\t\tfail(\"Cannot mock interfaces with different classloaders\");\n+\t\t}\n+\n+\t}\n+\n+\tfinal class ClassLoader1 extends ClassLoader {\n+\t\t@Override\n+\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n+\t\t\tif (name.equals(\"test.TestedClass1\")) {\n+\t\t\t\ttry {\n+\t\t\t\t\tFile file = new File(\n+\t\t\t\t\t\t\t\"test-resources/multiple-interfaces/TestedClass1.class\");\n+\t\t\t\t\tbyte[] bytes = new byte[(int) file.length()];\n+\t\t\t\t\tFileInputStream fileInputStream = new FileInputStream(file);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tfileInputStream.read(bytes);\n+\t\t\t\t\t\treturn defineClass(\"test.TestedClass1\", bytes, 0,\n+\t\t\t\t\t\t\t\tbytes.length);\n+\t\t\t\t\t} finally {\n+\t\t\t\t\t\tfileInputStream.close();\n+\t\t\t\t\t}\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new ClassNotFoundException(\"Cannot create class: TestedClass1.class\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn super.loadClass(name);\n+\t\t}\n+\t}\n+\n+\tfinal class Classloader2 extends ClassLoader {\n+\t\t@Override\n+\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n+\t\t\tif (name.equals(\"test.TestedClass2\")) {\n+\t\t\t\ttry {\n+\t\t\t\t\tFile file = new File(\n+\t\t\t\t\t\t\t\"test-resources/multiple-interfaces/TestedClass2.class\");\n+\t\t\t\t\tbyte[] bytes = new byte[(int) file.length()];\n+\t\t\t\t\tFileInputStream fileInputStream = new FileInputStream(file);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tfileInputStream.read(bytes);\n+\t\t\t\t\t\treturn defineClass(\"test.TestedClass2\", bytes, 0,\n+\t\t\t\t\t\t\t\tbytes.length);\n+\t\t\t\t\t} finally {\n+\t\t\t\t\t\tfileInputStream.close();\n+\t\t\t\t\t}\n+\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new ClassNotFoundException(\"Cannot create class: TestedClass1.class\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn super.loadClass(name);\n+\t\t}\n+\t}\n }", "timestamp": 1385973919, "metainfo": ""}