{"sha": "583088f72358408ac8c16c4d7e7cd86b89867a12", "log": "yet again changed exception messages when verification fails  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4053", "commit": "\n--- a/src/org/mockito/internal/InvocationWithMatchers.java\n+++ b/src/org/mockito/internal/InvocationWithMatchers.java\n         return this.invocation;\n     }\n \n-    public String toStringWithTypes() {\n+    public String toStringWithArgumentTypes() {\n         StringBuilder result = new StringBuilder();\n         result.append(invocation.getMockAndMethodName());\n         result.append(\"(\");\n--- a/src/org/mockito/internal/MockitoBehavior.java\n+++ b/src/org/mockito/internal/MockitoBehavior.java\n                 InvocationWithMatchers similarInvocation = findSimilarInvocation(invocation);\n                 String message = \n                     \"\\n\" +\n-                    \"Failure on verify:\" +\n+                    \"Invocation differs from actual:\" +\n                     \"\\n\";\n                 \n                 String expected = invocation.toString();\n                 if (similarInvocation != null) {\n                     String actual = similarInvocation.toString();\n                     if (expected.equals(actual)) {\n-                        expected = invocation.toStringWithTypes();\n-                        actual = similarInvocation.toStringWithTypes();\n+                        expected = invocation.toStringWithArgumentTypes();\n+                        actual = similarInvocation.toStringWithArgumentTypes();\n                     }\n                     \n                     message += \n                             \"Expected: \" + expected +\n                             \"\\n\" +\n-                    \t\t\"Actual: \" + actual;\n+                    \t\t\"Actual:   \" + actual;\n                 } else {\n-                    message += \n-                            \"Expected: \" + expected +\n+                    message = \n                             \"\\n\" +\n-                            \"Actual: none\";\n+                            \"Expected but not invoked:\" +\n+                            \"\\n\" +    \n+                            expected;\n                 }\n                 \n                 throw new VerificationAssertionError(message);\n         for (InvocationWithMatchers registeredInvocation : registeredInvocations) {\n             String expectedMethodName = expectedInvocation.getMethod().getName();\n             String registeredInvocationName = registeredInvocation.getMethod().getName();\n-            if (expectedMethodName.equals(registeredInvocationName)) {\n+            if (expectedMethodName.equals(registeredInvocationName) && !registeredInvocation.getInvocation().isVerified()) {\n                 return registeredInvocation;\n             }\n         }\n \n-        return registeredInvocations.size() > 0 ? registeredInvocations.get(0) : null;\n+        return null;\n     }\n \n     private int numberOfActualInvocations(InvocationWithMatchers expectedInvocation) {\n                 String mockName = Namer.nameForMock(mock);\n                 throw new VerificationAssertionError(\n                         \"\\n\" +\n-                        verificationErrorMessage + \" on \" + mockName + \" but found: \" + registeredInvocation.toString());\n+                        verificationErrorMessage + \" on \" + mockName +\n+                        \"\\n\" +\n+                        \"Unexpected: \" + registeredInvocation.toString());\n             }\n         }\n     }\n--- a/test/org/mockito/usage/IMethods.java\n+++ b/test/org/mockito/usage/IMethods.java\n \n     void simpleMethod();\n \n-    void simpleMethodWithArgument(String argument);\n+    void simpleMethod(String argument);\n \n     Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);\n \n--- a/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n         } catch (VerificationAssertionError error) {\n             String expected = \n                 \"\\n\" +\n-        \t\t\"Failure on verify:\" +\n+        \t\t\"Invocation differs from actual:\" +\n         \t\t\"\\n\" +\n         \t\t\"Expected: DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$Message)\" +\n         \t\t\"\\n\" +\n-        \t\t\"Actual: DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$BaseMessage)\";\n+        \t\t\"Actual:   DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$BaseMessage)\";\n             \n             assertEquals(expected, error.getMessage());\n         }\n         print(message);\n         try {\n             Mockito.verifyNoMoreInteractions(derivedMock);\n+            fail();\n         } catch (VerificationAssertionError error) {\n             String expected = \"\\n\" +\n-            \t\t\"No more interactions expected on DerivedInterface but found: DerivedInterface.print(BaseMessage)\";\n+            \t\t\"No more interactions expected on DerivedInterface.\" +\n+            \t\t\"\\n\" +\n+            \t\t\"Unexpected: DerivedInterface.print(BaseMessage)\";\n             assertEquals(expected, error.getMessage());\n         }\n     }\n--- a/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n     \n     @Test\n     public void shouldScreamWhenMatchersAreInvalid() {\n-        mock.simpleMethodWithArgument(CrazyMatchers.not(eq(\"asd\")));\n+        mock.simpleMethod(CrazyMatchers.not(eq(\"asd\")));\n         try {\n-            mock.simpleMethodWithArgument(CrazyMatchers.not(\"jkl\"));\n+            mock.simpleMethod(CrazyMatchers.not(\"jkl\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n             assertEquals(\n         }\n         \n         try {\n-            mock.simpleMethodWithArgument(CrazyMatchers.or(eq(\"jkl\"), \"asd\"));\n+            mock.simpleMethod(CrazyMatchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n             assertEquals(\n--- a/test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java\n package org.mockito.usage.verification;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n     public void shouldPrintMethodName() {\n         try {\n             verify(mock).simpleMethod();\n+            fail();\n         } catch (VerificationAssertionError expected) {\n             String actualMessage = expected.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-            \t\t\"Failure on verify:\" +\n+            \t\t\"Expected but not invoked:\" +\n             \t\t\"\\n\" +\n-            \t\t\"Expected: IMethods.simpleMethod()\" +\n-                    \"\\n\" +\n-                    \"Actual: none\";\n+            \t\t\"IMethods.simpleMethod()\";\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }\n     public void shouldPrintMethodNameAndArguments() {\n         try {\n             verify(mock).threeArgumentMethod(12, new SomeClass(), \"some string\");\n+            fail();\n         } catch (VerificationAssertionError expected) {\n             String actualMessage = expected.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Failure on verify:\" +\n+                    \"Expected but not invoked:\" +\n                     \"\\n\" +\n-            \t\t\"Expected: IMethods.threeArgumentMethod(12, SomeClass instance, \\\"some string\\\")\" +\n-            \t\t\"\\n\" +\n-            \t\t\"Actual: none\";\n+            \t\t\"IMethods.threeArgumentMethod(12, SomeClass instance, \\\"some string\\\")\";\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }\n+    \n+    @Test\n+    public void shouldPrintLastUnverifiedAsActualInvocation() {\n+        mock.oneArg(true);\n+        mock.simpleMethod();\n+        \n+        verify(mock).oneArg(true);\n+        try {\n+            verify(mock).twoArgumentMethod(1,2);\n+            fail();\n+        } catch (VerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \n+                    \"\\n\" +\n+                    \"Expected but not invoked:\" +\n+                    \"\\n\" +\n+                    \"IMethods.twoArgumentMethod(1, 2)\";\n+            \n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Test\n+    public void shouldPrintActualAndExpectedWhenTheDifferenceIsAboutArguments() {\n+        mock.oneArg(true);\n+        mock.twoArgumentMethod(1, 2);\n+        \n+        verify(mock).oneArg(true);\n+        try {\n+            verify(mock).twoArgumentMethod(1, 1000);\n+            fail();\n+        } catch (VerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \n+                    \"\\n\" +\n+                    \"Invocation differs from actual:\" +\n+                    \"\\n\" +\n+                    \"Expected: IMethods.twoArgumentMethod(1, 1000)\" +\n+                    \"\\n\" +\n+                    \"Actual:   IMethods.twoArgumentMethod(1, 2)\";\n+            \n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Test\n+    public void shouldPrintActualAndExpectedWhenActualMethodNameAndExpectedMethodNameAreTheSame() {\n+        mock.simpleMethod();\n+        \n+        try {\n+            verify(mock).simpleMethod(\"test\");\n+            fail();\n+        } catch (VerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \n+                    \"\\n\" +\n+                    \"Invocation differs from actual:\" +\n+                    \"\\n\" +\n+                    \"Expected: IMethods.simpleMethod(\\\"test\\\")\" +\n+                    \"\\n\" +\n+                    \"Actual:   IMethods.simpleMethod()\";\n+            \n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }    \n+    \n+    @Test\n+    public void shouldPrintActualAndUnverifiedExpectedWhenTheDifferenceIsAboutArguments() {\n+        mock.twoArgumentMethod(1, 1);\n+        mock.twoArgumentMethod(2, 2);\n+        mock.twoArgumentMethod(3, 3);\n+        \n+        verify(mock).twoArgumentMethod(1, 1);\n+        verify(mock).twoArgumentMethod(2, 2);\n+        try {\n+            verify(mock).twoArgumentMethod(3, 1000);\n+            fail();\n+        } catch (VerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \n+                    \"\\n\" +\n+                    \"Invocation differs from actual:\" +\n+                    \"\\n\" +\n+                    \"Expected: IMethods.twoArgumentMethod(3, 1000)\" +\n+                    \"\\n\" +\n+                    \"Actual:   IMethods.twoArgumentMethod(3, 3)\";\n+            \n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }  \n     \n     @Test\n     public void shouldPrintFirstUnexpectedInvocation() {\n         verify(mock).oneArg(true);\n         try {\n             verifyNoMoreInteractions(mock);\n+            fail();\n         } catch (VerificationAssertionError expected) {\n             String actualMessage = expected.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-            \t\t\"No more interactions expected on IMethods but found: IMethods.oneArg(false)\";\n+            \t\t\"No more interactions expected on IMethods\" +\n+            \t\t\"\\n\" +\n+            \t\t\"Unexpected: IMethods.oneArg(false)\";\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }\n         \n         try {\n             verifyZeroInteractions(mock);\n+            fail();\n         } catch (VerificationAssertionError expected) {\n             String actualMessage = expected.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Zero interactions expected on IMethods but found: IMethods.twoArgumentMethod(1, 2)\";\n+                    \"Zero interactions expected on IMethods\" +\n+                    \"\\n\" +\n+                    \"Unexpected: IMethods.twoArgumentMethod(1, 2)\";\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }", "timestamp": 1195833817, "metainfo": ""}