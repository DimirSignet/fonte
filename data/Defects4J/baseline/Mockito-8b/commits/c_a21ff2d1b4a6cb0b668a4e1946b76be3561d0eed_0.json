{"sha": "a21ff2d1b4a6cb0b668a4e1946b76be3561d0eed", "log": "Release notes automation tidy-up and fixes.  Fixes #119", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n package org.mockito.release.notes.improvements;\n \n-import org.mockito.release.notes.vcs.Commit;\n import org.mockito.release.notes.vcs.ContributionSet;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n-import java.util.*;\n-import java.util.regex.Pattern;\n \n class GitHubImprovementsProvider implements ImprovementsProvider {\n \n     }\n \n     public ImprovementSet getImprovements(ContributionSet contributions) {\n-        LOGGER.info(\"Parsing {} commits\", contributions.getAllCommits());\n-        Set<String> ticketIds = findTickets(contributions);\n+        LOGGER.info(\"Parsing {} commits with {} tickets\", contributions.getAllCommits().size(), contributions.getAllTickets().size());\n         DefaultImprovements out = new DefaultImprovements();\n-        new GitHubTicketFetcher().fetchTickets(authToken.getToken(), ticketIds, out);\n+        new GitHubTicketFetcher().fetchTickets(authToken.getToken(), contributions.getAllTickets(), out);\n         return out;\n     }\n-\n-    private Set<String> findTickets(ContributionSet contributions) {\n-        Set<String> tickets = new LinkedHashSet<String>();\n-        for (Commit commit : contributions.getAllCommits()) {\n-            Scanner scanner = new Scanner(commit.getMessage());\n-            Pattern ticket = Pattern.compile(\"#\\\\d+\");\n-            while(scanner.hasNext(ticket)) {\n-                String ticketId = scanner.next(ticket).substring(1); //remove leading '#'\n-                tickets.add(ticketId);\n-            }\n-\n-        }\n-        return tickets;\n-    }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Commit.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Commit.java\n package org.mockito.release.notes.vcs;\n+\n+import java.util.Collection;\n \n public interface Commit {\n \n      * Commit message\n      */\n     String getMessage();\n+\n+    /**\n+     * Tickets referenced by the commit. For example, jira issue ids or GitHub issue ids.\n+     */\n+    Collection<String> getTickets();\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionSet.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionSet.java\n     Collection<Commit> getAllCommits();\n \n     /**\n+     * all tickets referenced in commit messages\n+     */\n+    Collection<String> getAllTickets();\n+\n+    /**\n      * human readable text representation\n      */\n     String toText();\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n     private final Map<String, Contribution> contributions = new HashMap<String, Contribution>();\n     private final Collection<Commit> commits = new LinkedList<Commit>();\n     private final Predicate<Commit> ignoreCommit;\n+    private final Collection<String> tickets = new LinkedList<String>();\n \n     public DefaultContributionSet(Predicate<Commit> ignoredCommit) {\n         this.ignoreCommit = ignoredCommit;\n             return;\n         }\n         commits.add(commit);\n+        tickets.addAll(commit.getTickets());\n         Contribution c = contributions.get(commit.getAuthorId());\n         if (c == null) {\n             contributions.put(commit.getAuthorId(), new Contribution(commit));\n \n     public Collection<Commit> getAllCommits() {\n         return commits;\n+    }\n+\n+    public Collection<String> getAllTickets() {\n+        return tickets;\n     }\n \n     public String toText() {\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java\n package org.mockito.release.notes.vcs;\n+\n+import java.util.Collection;\n+import java.util.Set;\n \n class GitCommit implements Commit {\n \n     private final String email;\n     private final String author;\n     private final String message;\n+    private Set<String> tickets;\n \n     public GitCommit(String email, String author, String message) {\n         this.email = email;\n         this.author = author;\n         this.message = message;\n+        this.tickets = TicketParser.parseTickets(message);\n     }\n \n     public String getAuthorId() {\n     public String getMessage() {\n         return message;\n     }\n+\n+    public Collection<String> getTickets() {\n+        return tickets;\n+    }\n }\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/TicketParser.java\n+package org.mockito.release.notes.vcs;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+class TicketParser {\n+\n+    /**\n+     * Collects all ticked ids found in message, ticket format is #123\n+     */\n+    static Set<String> parseTickets(String message) {\n+        Set<String> tickets = new LinkedHashSet<String>();\n+        Pattern ticket = Pattern.compile(\"#\\\\d+\");\n+        Matcher m = ticket.matcher(message);\n+        while(m.find()) {\n+            String ticketId = m.group().substring(1); //remove leading '#'\n+            tickets.add(ticketId);\n+        }\n+        return tickets;\n+    }\n+}", "timestamp": 1416520938, "metainfo": ""}