{"sha": "ba1c5b64386002f648365247906118ade15f64d8", "log": "Trying a Top-Down approach instead of the Bottom-Up approach to better solve this generic mess (tests are broken here)  --HG-- branch : issue230", "commit": "\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation;\n \n import org.mockito.MockSettings;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockNameImpl;\n import org.mockito.internal.util.MockitoSpy;\n+import org.mockito.internal.util.reflection.MockitoGenericMetadata;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n         }\n         return interfaces;\n     }\n+\n+    public MockSettings withParameterizedInfo(MockitoGenericMetadata mockitoGenericMetadata) {\n+        this.mockitoGenericMetadata = mockitoGenericMetadata;\n+        return this;\n+    }\n }\n \n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.mockito.Mockito;\n import org.mockito.internal.InternalMockHandler;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.internal.util.ConsoleMockitoLogger;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.internal.util.MockitoLogger;\n+import org.mockito.internal.util.reflection.MockitoGenericMetadata;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n+import java.lang.reflect.Type;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.withSettings;\n \n /**\n  * Returning deep stub implementation.\n     private static final long serialVersionUID = -6926328908792880098L;\n     \n     private Answer<Object> delegate = new ReturnsEmptyValues();\n+\n+    private MockitoLogger logger = new ConsoleMockitoLogger();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         Class<?> clz = invocation.getMethod().getReturnType();\n     }\n \n     private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\n-        Class<?> clz = invocation.getMethod().getReturnType();\n-        final Object mock = Mockito.mock(clz, this);\n+        final Object mock = createGenericsAwareMock(invocation);\n \n         container.addAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n \n         return mock;\n     }\n+\n+    private Object createGenericsAwareMock(InvocationOnMock invocation) {\n+        Type genericReturnType = invocation.getMethod().getGenericReturnType();\n+\n+        if (genericReturnType instanceof Class) {\n+            return mock((Class<?>) genericReturnType, this);\n+        }\n+\n+        MockitoGenericMetadata mockitoGenericMetadata =\n+                actualParameterizedType(invocation.getMock()).resolveParameterizedType(genericReturnType);\n+\n+        return mock(\n+                mockitoGenericMetadata.rawType(),\n+                ((MockSettingsImpl) withSettings().defaultAnswer(this))\n+                        .withParameterizedInfo(mockitoGenericMetadata)\n+        );\n+        // throw new MockitoException(\"[Work In Progress] Can't mock the return type : \" + genericReturnType);\n+    }\n+\n+    private MockitoGenericMetadata actualParameterizedType(Object mock) {\n+        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n+        return mockSettings.getMockitoGenericMetadata();\n+    }\n }", "timestamp": 1343125559, "metainfo": ""}