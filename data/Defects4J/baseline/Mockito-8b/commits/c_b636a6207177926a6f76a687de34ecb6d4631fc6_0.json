{"sha": "b636a6207177926a6f76a687de34ecb6d4631fc6", "log": "Attempt to fix issue 58 Invocation no longer creates an exception that wastes time on filling in the stack trace. The stack trace is still maintained but I use a different way of getting it.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401264", "commit": "\n--- a/src/org/mockito/internal/debugging/Localized.java\n+++ b/src/org/mockito/internal/debugging/Localized.java\n package org.mockito.internal.debugging;\n \n-import org.mockito.exceptions.base.StackTraceFilter;\n \n public class Localized<T> {\n \n     private final T object;\n-    private StackTraceElement[] stackTrace;\n+    private final Location location;\n \n     public Localized(T object) {\n         this.object = object;\n-        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-        StackTraceFilter filter = new StackTraceFilter();\n-        this.stackTrace = filter.filterStackTrace(stackTrace);\n+        location = new Location();\n     }\n \n     public T getObject() {\n         return object;\n     }\n \n-    public StackTraceElement[] getStackTrace() {\n-        return stackTrace;\n-    }\n-\n     public Location getLocation() {\n-        return new Location(stackTrace);\n+        return location;\n     }\n }\n--- a/src/org/mockito/internal/debugging/Location.java\n+++ b/src/org/mockito/internal/debugging/Location.java\n package org.mockito.internal.debugging;\n+\n+import org.mockito.exceptions.base.StackTraceFilter;\n \n public class Location {\n \n     private final StackTraceElement[] stackTrace;\n \n-    public Location(StackTraceElement[] stackTrace) {\n-        assert stackTrace != null;\n-        assert stackTrace.length > 0;\n-        this.stackTrace = stackTrace;\n+    public Location() {\n+        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n+        StackTraceFilter filter = new StackTraceFilter();\n+        this.stackTrace = filter.filterStackTrace(stackTrace);\n     }\n \n     @Override\n     public String toString() {\n         return this.stackTrace[0].toString();\n     }\n+\n+    public StackTraceElement[] getStackTrace() {\n+        return stackTrace;\n+    }\n }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.hamcrest.StringDescription;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.debugging.Location;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.util.MockUtil;\n         this.method = method;\n         this.arguments = expandVarArgs(method.isVarArgs(), args);\n         this.sequenceNumber = sequenceNumber;\n-        this.stackTrace = new MockitoException(\"\");\n+        this.stackTrace = new HasStackTrace() {\n+            \n+            private Location location = new Location();\n+            \n+            public StackTraceElement[] getStackTrace() {\n+                return location.getStackTrace();\n+            }\n+\n+            public void setStackTrace(StackTraceElement[] stackTrace) {\n+                throw new RuntimeException(\"Setting stack trace is not supported\");\n+            }\n+        };\n     }\n \n     //expands array varArgs that are given by runtime (1, [a, b]) into true varArgs (1, a, b);", "timestamp": 1234889448, "metainfo": ""}