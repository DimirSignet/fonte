{"sha": "49656212b77c78d64cd6b1680cb91da5ae42456c", "log": "added javadoc documenting new feature (stubbing consecutive calls)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40622", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *   <br/> 7. Making sure interaction(s) never happened on mock\n  *   <br/> 8. Finding redundant invocations\n  *   <br/> 9. Shorthand for mocks creation - &#064;Mock annotation\n+ *   <br/> 10. (New!) Stubbing consecutive calls (iterator-style stubbing)\n  * </b>\n  * \n  * <p>\n  * Examples how to write a junit test runner are in Mockito test code (mockito/test/org/mockitousage/examples/junitrunner package);\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n+ * \n+ * <h3> 10. (New!) Stubbing consecutive calls (iterator-style stubbing)</h3>\n+ * \n+ * Sometimes we need to stub with different return value/exception for the same method call. \n+ * Typical use case could be mocking iterators. However, this feature was not included in original version of Mockito to promote simple mocking.\n+ * Instead of iterators we strongly recommend using Iterable or simply collections. Those offer natural ways of stubbing (e.g. using real collections).\n+ * In rare scenarios stubbing consecutive calls could useful, though.\n+ *   \n+ * Example: \n+ * <pre>\n+ *   //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.\n+ *   stub(mock.someMethod(\"some arg\"))\n+ *    .toThrow(new RuntimeException())\n+ *    .toReturn(\"foo\") \n+ * </pre>\n+ * \n  */\n public class Mockito extends Matchers {\n \n \n     /**\n      * Stubs with return value or exception. E.g:\n+     * \n      * <pre>\n      *   stub(mock.someMethod()).toReturn(10);\n      *   \n      *   stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);\n      *   \n      *   //setting exception to be thrown:\n-     *   stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n-     * </pre>\n-     *\n+     *   stub(mock.someMethod(&quot;some arg&quot;)).toThrow(new RuntimeException());\n+     *   \n+     *   //you can stub with different behavior for consecutive method calls.\n+     *   //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.   \n+     *   stub(mock.someMethod(\"some arg\"))\n+     *    .toThrow(new RuntimeException())\n+     *    .toReturn(\"foo\");\n+     *   \n+     * </pre>\n+     * \n      * For stubbing void methods with throwables see: {@link Mockito#stubVoid}\n      * <p>\n-     * Stubbing can be overridden: for example common stubbing can go to fixture setup\n-     * but test methods can override it.\n-     * <p>\n-     * Once stubbed, mocked method will always return stubbed value regardless of how many times it is called.\n-     * <p>\n-     * Last stubbing is more important - when you stubbed the same method with the same arguments many times.\n-     * <p>\n-     * Although it's possible to verify stubbed methods, bear in mind that <b>are verified for free</b>.\n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param methodCall method call\n+     * Stubbing can be overridden: for example common stubbing can go to fixture\n+     * setup but test methods can override it.\n+     * <p>\n+     * Once stubbed, mocked method will always return stubbed value regardless\n+     * of how many times it is called.\n+     * <p>\n+     * Last stubbing is more important - when you stubbed the same method with\n+     * the same arguments many times.\n+     * <p>\n+     * Although it's possible to verify stubbed methods, bear in mind that\n+     * <b>are verified for free</b>.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param methodCall\n+     *            method call\n      * @return OngoingStubbing object to set stubbed value/exception\n      */\n     @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Stubs void method with an exception. E.g:\n-     * <pre>\n-     *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param mock to stub\n+     * \n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+     * \n+     * //you can stub with different behavior for consecutive method calls.\n+     * //Last stubbing determines the behavior for further consecutive calls.   \n+     * stub(mock)\n+     *   .toThrow(new RuntimeException())\n+     *   .toReturn()\n+     *   .on().someMethod();\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param mock\n+     *            to stub\n      * @return stubbable object that allows stubbing with throwable\n      */\n     public static <T> VoidMethodStubbable<T> stubVoid(T mock) {\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n  * \n  * //setting exception to be thrown:\n  * stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n+ * \n+ * //you can stub with different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.   \n+ * stub(mock.someMethod(\"some arg\"))\n+ *  .toThrow(new RuntimeException())\n+ *  .toReturn(\"foo\");\n+ * \n  * </pre>\n  * \n  * See examples in javadoc for {@link Mockito#stub}\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n  * \n  * <pre>\n  * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+ * \n+ * //you can stub with different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.   \n+ * stub(mock)\n+ *  .toThrow(new RuntimeException())\n+ *  .toReturn()\n+ *  .on().someMethod();\n  * </pre>\n  * \n  * See examples in javadoc for {@link Mockito#stubVoid}\n     VoidMethodStubbable<T> toThrow(Throwable throwable);\n     \n     /**\n-     * Stubs void method to 'just return' (e.g. to <b>not</b> throw any exception)\n+     * Stubs void method to 'just return' (e.g. to <b>not</b> to throw any exception)\n      * <p>\n-     * <b>Only</b> use this method if you're chaining multiple return values.\n+     * <b>Only</b> use this method if you're stubbing for consecutive calls.\n      * <p>\n      * For example:\n      * <pre>", "timestamp": 1213184668, "metainfo": ""}