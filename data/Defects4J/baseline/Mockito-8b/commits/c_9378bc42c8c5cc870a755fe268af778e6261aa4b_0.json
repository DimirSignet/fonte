{"sha": "9378bc42c8c5cc870a755fe268af778e6261aa4b", "log": "Fixed the test and added a TODO.", "commit": "\n--- a/src/org/mockito/internal/creation/cglib/MockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/cglib/MockitoMethodProxy.java\n  */\n package org.mockito.internal.creation.cglib;\n \n+//TODO SF Replace with RealMethod and get rid of (possibly).\n public interface MockitoMethodProxy {\n     Object invokeSuper(Object target, Object[] arguments) throws Throwable;\n }\n--- a/src/org/mockito/internal/invocation/realmethod/RealMethod.java\n+++ b/src/org/mockito/internal/invocation/realmethod/RealMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation.realmethod;\n-\n \n public interface RealMethod {\n \n--- a/test/org/mockito/internal/creation/cglib/CGLIBHackerTest.java\n+++ b/test/org/mockito/internal/creation/cglib/CGLIBHackerTest.java\n     @Test\n     public void shouldSetMockitoNamingPolicy() throws Exception {\n         //given\n-        MethodProxy methodProxy = MethodProxy.create(null, null, null, null, null);\n+        MethodProxy methodProxy = MethodProxy.create(String.class, Integer.class, \"\", \"\", \"\");\n         \n         //when\n         new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n         \n         //then\n-        Object realMethodProxy = Whitebox.invokeMethod(methodProxy, \"getMethodProxy\", new Object[0]);\n-        Object createInfo = Whitebox.getInternalState(realMethodProxy, \"createInfo\");\n+        Object createInfo = Whitebox.getInternalState(methodProxy, \"createInfo\");\n         NamingPolicy namingPolicy = (NamingPolicy) Whitebox.getInternalState(createInfo, \"namingPolicy\");\n         assertEquals(MockitoNamingPolicy.INSTANCE, namingPolicy);\n     }\n     @Test\n     public void shouldSetMockitoNamingPolicyEvenIfMethodProxyIsProxied() throws Exception {\n         //given\n-        MethodProxy proxiedMethodProxy = spy(MethodProxy.create(null, null, null, null, null));\n+        MethodProxy proxiedMethodProxy = spy(MethodProxy.create(String.class, Integer.class, \"\", \"\", \"\"));\n         \n         //when\n         new CGLIBHacker().setMockitoNamingPolicy(proxiedMethodProxy);\n         \n         //then\n-        Object realMethodProxy = Whitebox.invokeMethod(proxiedMethodProxy, \"getMethodProxy\", new Object[0]);\n-        Object createInfo = Whitebox.getInternalState(realMethodProxy, \"createInfo\");\n+        Object createInfo = Whitebox.getInternalState(proxiedMethodProxy, \"createInfo\");\n         NamingPolicy namingPolicy = (NamingPolicy) Whitebox.getInternalState(createInfo, \"namingPolicy\");\n         assertEquals(MockitoNamingPolicy.INSTANCE, namingPolicy);\n     }", "timestamp": 1413588227, "metainfo": ""}