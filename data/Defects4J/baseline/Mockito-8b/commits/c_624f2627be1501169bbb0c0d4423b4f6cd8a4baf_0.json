{"sha": "624f2627be1501169bbb0c0d4423b4f6cd8a4baf", "log": "Refactoring. Introduced Wes' changes back. There has to be a distinction between SerializableMethod and DelegatingMethod  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401669", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/DelegatingMethod.java\n+package org.mockito.internal.creation;\n+\n+import java.lang.reflect.Method;\n+\n+import org.mockito.internal.invocation.MockitoMethod;\n+\n+public class DelegatingMethod implements MockitoMethod {\n+\n+    private final Method method;\n+\n+    public DelegatingMethod(Method method) {\n+        assert method != null : \"Method cannot be null\";\n+        this.method = method;\n+    }\n+\n+    public Class<?>[] getExceptionTypes() {\n+        return method.getExceptionTypes();\n+    }\n+\n+    public Method getJavaMethod() {\n+        return method;\n+    }\n+\n+    public String getName() {\n+        return method.getName();\n+    }\n+\n+    public Class<?>[] getParameterTypes() {\n+        return method.getParameterTypes();\n+    }\n+\n+    public Class<?> getReturnType() {\n+        return method.getReturnType();\n+    }\n+\n+    public boolean isVarArgs() {\n+        return method.isVarArgs();\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        throw new RuntimeException(\"hashCode() not implemented\");\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        return method.equals(obj);\n+    }\n+}\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n         }\n         \n         MockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\n-        \n         cglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\n         \n+        MockitoMethod mockitoMethod = createMockitoMethod(method);\n+        \n         FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\n-        SerializableMethod serializableMethod = new SerializableMethod(method);\n-        Invocation invocation = new Invocation(proxy, serializableMethod, args, SequenceNumber.next(), realMethod);\n+        Invocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\n         return mockHandler.handle(invocation);\n     }\n-    \n+   \n     public IMockHandler getMockHandler() {\n         return mockHandler;\n     }\n             return new SerializableMockitoMethodProxy(methodProxy);\n         return new DelegatingMockitoMethodProxy(methodProxy);\n     }\n+    \n+    public MockitoMethod createMockitoMethod(Method method) {\n+        if (mockSettings.isSerializable()) {\n+            return new SerializableMethod(method);\n+        } else {\n+            return new DelegatingMethod(method); \n+        }\n+    }\n }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n     private static final int MAX_LINE_LENGTH = 45;\n     private final int sequenceNumber;\n     private final Object mock;\n-    private final SerializableMethod method;\n+    private final MockitoMethod method;\n     private final Object[] arguments;\n     private final Object[] rawArguments;\n \n \n     final RealMethod realMethod;\n \n-    public Invocation(Object mock, SerializableMethod serializableMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\n-        this.method = serializableMethod;\n+    public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\n+        this.method = mockitoMethod;\n         this.mock = mock;\n         this.realMethod = realMethod;\n-        this.arguments = expandVarArgs(serializableMethod.isVarArgs(), args);\n+        this.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\n         this.rawArguments = args;\n         this.sequenceNumber = sequenceNumber;\n         this.location = new Location();\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/MockitoMethod.java\n+package org.mockito.internal.invocation;\n+\n+import java.lang.reflect.Method;\n+\n+public interface MockitoMethod {\n+\n+    public String getName();\n+\n+    public Class<?> getReturnType();\n+\n+    public Class<?>[] getParameterTypes();\n+\n+    public Class<?>[] getExceptionTypes();\n+\n+    public boolean isVarArgs();\n+\n+    public Method getJavaMethod();\n+}\n--- a/src/org/mockito/internal/invocation/SerializableMethod.java\n+++ b/src/org/mockito/internal/invocation/SerializableMethod.java\n \n import org.mockito.exceptions.base.MockitoException;\n \n-public class SerializableMethod implements Serializable {\n+public class SerializableMethod implements Serializable, MockitoMethod {\n \n     private static final long serialVersionUID = 6005610965006048445L;\n+    \n     private Class<?> declaringClass;\n     private String methodName;\n     private Class<?>[] parameterTypes;\n--- a/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n import java.io.Serializable;\n import java.lang.reflect.Method;\n \n+import org.mockito.internal.invocation.MockitoMethod;\n import org.mockito.internal.invocation.SerializableMethod;\n \n public class ObjectMethodsGuru implements Serializable {\n         return isToString(new SerializableMethod(method));\n     }\n \n-    public boolean isToString(SerializableMethod method) {\n+    public boolean isToString(MockitoMethod method) {\n         return method.getReturnType() == String.class && method.getParameterTypes().length == 0\n                 && method.getName().equals(\"toString\");\n     }\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n         Mockito.verify(mockHanlder, never()).handle(any(Invocation.class));\n     }\n     \n+    //TODO: move to separate factory\n     @Test\n     public void shouldCreateSerializableMethodProxyIfIsSerializableMock() throws Exception {\n         MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings().serializable());\n--- a/test/org/mockito/internal/invocation/SerializableMethodTest.java\n+++ b/test/org/mockito/internal/invocation/SerializableMethodTest.java\n \n public class SerializableMethodTest extends TestBase {\n \n-    private SerializableMethod method;\n+    private MockitoMethod method;\n     private Method toStringMethod;\n     private Class<?>[] args;\n ", "timestamp": 1257714309, "metainfo": ""}