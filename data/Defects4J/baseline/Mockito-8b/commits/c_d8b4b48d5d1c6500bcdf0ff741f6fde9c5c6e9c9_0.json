{"sha": "d8b4b48d5d1c6500bcdf0ff741f6fde9c5c6e9c9", "log": "stopped using verifyngRecorder  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40959", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.stubbing.ThrowsException;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n-import org.mockito.internal.verification.VerifyingRecorder;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.Answer;\n \n  */\n public class MockHandler<T> implements MockAwareInterceptor<T> {\n \n-    private final VerifyingRecorder verifyingRecorder;\n+    private final RegisteredInvocations registeredInvocations;\n     private final MockitoStubber mockitoStubber;\n     private final MatchersBinder matchersBinder;\n     private final MockingProgress mockingProgress;\n         this.mockingProgress = mockingProgress;\n         this.matchersBinder = matchersBinder;\n         this.mockitoStubber = new MockitoStubber(mockingProgress);\n-\n-        verifyingRecorder = new VerifyingRecorder();\n+        this.registeredInvocations = new RegisteredInvocations();\n     }\n     \n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n \n         if (verificationMode != null) {\n-            VerificationDataImpl data = new VerificationDataImpl(verifyingRecorder.getRegisteredInvocations(), invocationMatcher);\n+            VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getVerifiableInvocations(), invocationMatcher);\n             verificationMode.verify(data);\n             return null;\n         }\n \n         mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\n-        verifyingRecorder.recordInvocation(invocationMatcher.getInvocation());\n+        registeredInvocations.add(invocationMatcher.getInvocation());\n \n         mockingProgress.reportOngoingStubbing(new OngoingStubbingImpl());\n \n     }\n \n     public void verifyNoMoreInteractions() {\n-        VerificationDataImpl data = new VerificationDataImpl(verifyingRecorder.getRegisteredInvocations(), null);\n+        VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getVerifiableInvocations(), null);\n         VerificationModeFactory.noMoreInteractions().verify(data);\n     }\n \n     }\n \n     public List<Invocation> getRegisteredInvocations() {\n-        return verifyingRecorder.getRegisteredInvocations();\n+        return registeredInvocations.getVerifiableInvocations();\n     }\n \n     public String getMockName() {\n         }\n \n         public NewOngoingStubbing<T> thenAnswer(Answer<?> answer) {\n-            verifyingRecorder.eraseLastInvocation();\n+            registeredInvocations.removeLast();\n             mockitoStubber.addAnswer(answer);\n             return new ConsecutiveStubbing();\n         }\n         }\n \n         public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n-            verifyingRecorder.eraseLastInvocation();\n+            registeredInvocations.removeLast();\n             mockitoStubber.addAnswer(answer);\n             return new ConsecutiveStubbing();\n         }", "timestamp": 1223977968, "metainfo": ""}