{"sha": "fae96f44a19a036e8b99fe776de5da669464184d", "log": "Tidy-up in buildSrc - major rewrite of the GitHub issues fetcher, part IV.", "commit": "\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n+package org.mockito.release.notes;\n+\n+import org.gradle.api.Project;\n+import org.mockito.release.notes.exec.Exec;\n+import org.mockito.release.notes.improvements.ImprovementSet;\n+import org.mockito.release.notes.improvements.ImprovementsProvider;\n+import org.mockito.release.notes.improvements.Improvements;\n+import org.mockito.release.notes.vcs.ContributionSet;\n+import org.mockito.release.notes.vcs.ContributionsProvider;\n+import org.mockito.release.notes.vcs.Vcs;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Date;\n+\n+class GitNotesBuilder implements NotesBuilder {\n+\n+    private static Logger LOG = LoggerFactory.getLogger(GitNotesBuilder.class);\n+\n+    private final Project project;\n+    private final String authTokenEnvVar;\n+\n+    GitNotesBuilder(Project project, String authTokenEnvVar) {\n+        this.authTokenEnvVar = authTokenEnvVar;\n+        this.project = project;\n+    }\n+\n+    public String getNotes(String fromRevision, String toRevision) {\n+        LOG.info(\"Getting release notes between {} and {}\", fromRevision, toRevision);\n+\n+        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.getGradleProcessRunner(project));\n+        ContributionSet contributions = contributionsProvider.getContributionsBetween(fromRevision, toRevision);\n+\n+        ImprovementsProvider improvementsProvider = Improvements.getGitHubProvider(authTokenEnvVar);\n+        ImprovementSet improvements = improvementsProvider.getImprovements(contributions);\n+\n+        return new NotesPrinter().printNotes(project.getVersion().toString(), new Date(), contributions, improvements);\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/NotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/NotesBuilder.java\n package org.mockito.release.notes;\n-\n-import java.io.File;\n \n public interface NotesBuilder {\n \n+//    /**\n+//     * Updates release notes in specified file. The 'from' revision is extracted from the release notes file.\n+//     * The 'to' revision needs to be supplied.\n+//     *\n+//     * @param notesFile the file to update. Must contain the current version.\n+//     * @param toRevision valid git revision (can be tag name or HEAD)\n+//     */\n+//    void updateNotes(File notesFile, String toRevision);\n+\n     /**\n-     * Updates release notes in specified file. The 'from' revision is extracted from the file. The 'to' revision needs to be supplied\n+     * Release notes text for contributions between given versions.\n      *\n-     * @param notesFile the file to update\n-     * @param toRevision git revision (can be tag name or HEAD)\n+     * @param fromRevision valid git revision (can be tag name or HEAD)\n+     * @param toRevision valid git revision (can be tag name or HEAD)\n      */\n-    void updateNotes(File notesFile, String toRevision);\n+    String getNotes(String fromRevision, String toRevision);\n }\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/NotesPrinter.java\n+package org.mockito.release.notes;\n+\n+import org.mockito.release.notes.util.HumanReadable;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+class NotesPrinter {\n+\n+    public String printNotes(String version, Date date, HumanReadable contributions, HumanReadable improvements) {\n+        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm z\");\n+        format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        String now = format.format(date);\n+\n+        return \"### \" + version + \" (\" + now + \")\" + \"\\n\\n\"\n+                + contributions.toText() + \"\\n\"\n+                + improvements.toText() + \"\\n\\n\";\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n import java.util.*;\n import java.util.regex.Pattern;\n \n-class GitHubImprovementsProvider implements ImprovementSetProvider {\n+class GitHubImprovementsProvider implements ImprovementsProvider {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GitHubImprovementsProvider.class);\n     private final GitHubAuthToken authToken;\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementSet.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementSet.java\n package org.mockito.release.notes.improvements;\n \n-public interface ImprovementSet {\n+import org.mockito.release.notes.util.HumanReadable;\n+\n+/**\n+ * the improvements\n+ */\n+public interface ImprovementSet extends HumanReadable {\n \n     /**\n      * human readable representation of the improvements\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n      *\n      * @param authTokenEnvVarName name of the env var that holds the token\n      */\n-    public static ImprovementSetProvider getGitHubProvider(final String authTokenEnvVarName) {\n+    public static ImprovementsProvider getGitHubProvider(final String authTokenEnvVarName) {\n         return new GitHubImprovementsProvider(new GitHubAuthToken(authTokenEnvVarName));\n     }\n }\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementsProvider.java\n+package org.mockito.release.notes.improvements;\n+\n+import org.mockito.release.notes.vcs.ContributionSet;\n+\n+public interface ImprovementsProvider {\n+\n+    ImprovementSet getImprovements(ContributionSet contributions);\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/util/HumanReadable.java\n+package org.mockito.release.notes.util;\n+\n+/**\n+ * Human readable text representation\n+ */\n+public interface HumanReadable {\n+\n+    /**\n+     * the text representation\n+     */\n+    String toText();\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionSet.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionSet.java\n package org.mockito.release.notes.vcs;\n+\n+import org.mockito.release.notes.util.HumanReadable;\n \n import java.util.Collection;\n \n /**\n  * A set of contributions\n  */\n-public interface ContributionSet {\n+public interface ContributionSet extends HumanReadable {\n \n     /**\n      * all commits in given contribution set, spanning all authors", "timestamp": 1416516894, "metainfo": ""}