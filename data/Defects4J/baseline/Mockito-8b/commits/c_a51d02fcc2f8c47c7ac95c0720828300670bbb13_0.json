{"sha": "a51d02fcc2f8c47c7ac95c0720828300670bbb13", "log": "Split a class into 2 (SRP)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401374", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n  */\n package org.mockito;\n \n-import java.util.LinkedList;\n import java.util.List;\n \n-import org.hamcrest.Description;\n-import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.matchers.CapturingMatcher;\n \n /**\n  * Use it to capture argument values for further assertions.\n  * <p>\n  * See the full documentation on Mockito in javadoc for {@link Mockito} class.    \n  */\n-@SuppressWarnings(\"unchecked\")\n-public class ArgumentCaptor<T> extends ArgumentMatcher<T> {\n+public class ArgumentCaptor<T> {\n     \n-    private LinkedList<Object> arguments = new LinkedList<Object>();\n-\n-    /**\n-     * <b>Don't call this method directly.</b> It is used internally by the framework to store argument value. \n-     */\n-    public boolean matches(Object argument) {\n-        this.arguments.add(argument);\n-        return true;\n-    }\n+    private CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();\n \n     /**\n      * Use it to capture the argument. This method <b>must be used inside of verification</b>.\n      * @return null\n      */\n     public T capture() {\n-        Mockito.argThat(this);\n+        Mockito.argThat(capturingMatcher);\n         return null;\n     }\n \n      * @return captured argument value\n      */\n     public T getValue() {\n-        if (arguments.isEmpty()) {\n-            new Reporter().noArgumentValueWasCaptured();\n-        } else {\n-            return (T) arguments.getLast();\n-        }\n-        return (T) arguments;\n+        return this.capturingMatcher.getLastValue();\n     }\n \n     /**\n      * @return captured argument value\n      */\n     public List<T> getAllValues() {\n-        return (List) arguments;\n-    }\n-\n-    /**\n-     * <b>Don't call this method directly.</b> It is used internally by the framework to print friendly matcher description.\n-     */\n-    public void describeTo(Description description) {\n-        description.appendText(\"<Capturing argument>\");\n+        return this.capturingMatcher.getAllValues();\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/matchers/CapturingMatcher.java\n+package org.mockito.internal.matchers;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.exceptions.Reporter;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class CapturingMatcher<T> extends ArgumentMatcher<T> {\n+    \n+    private LinkedList<Object> arguments = new LinkedList<Object>();\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.ArgumentMatcher#matches(java.lang.Object)\n+     */\n+    public boolean matches(Object argument) {\n+        this.arguments.add(argument);\n+        return true;\n+    }    \n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.ArgumentMatcher#describeTo(org.hamcrest.Description)\n+     */\n+    public void describeTo(Description description) {\n+        description.appendText(\"<Capturing argument>\");\n+    }\n+\n+    public T getLastValue() {\n+        if (arguments.isEmpty()) {\n+            new Reporter().noArgumentValueWasCaptured();\n+        } else {\n+            return (T) arguments.getLast();\n+        }\n+        return (T) arguments;\n+    }\n+\n+    public List<T> getAllValues() {\n+        return (List) arguments;\n+    }\n+}", "timestamp": 1241176111, "metainfo": ""}