{"sha": "ca43e1b1f0bccdd3ed62e710f5775141f9f785a3", "log": "shamelessly fixed the build and added some javadocs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401370", "commit": "\n--- a/src/org/mockito/Argument.java\n+++ b/src/org/mockito/Argument.java\n import org.mockito.Mockito;\n import org.mockito.exceptions.Reporter;\n \n+/**\n+ * Use it to assert on \n+ * <pre>\n+ *   Argument&lt;Person&gt; argument = new Argument&ltPerson&gt();\n+ *   verify(mock).sendTo(argument.capture());\n+ *   assertEquals(\"John\", argument.value().getName());\n+ * </pre>\n+ */\n public class Argument<T> extends ArgumentMatcher<T> {\n     private LinkedList<Object> arguments = new LinkedList<Object>();\n \n         this.arguments.add(argument);\n         return true;\n     }\n-    \n+\n     public T capture() {\n         Mockito.argThat(this);\n         return null;\n         if (arguments.isEmpty()) {\n             new Reporter().argumentValueNotYetCaptured();\n         } else {\n-            //TODO: after 1.7 nice instanceof check here?\n+            // TODO: after 1.7 nice instanceof check here?\n             return (T) arguments.getLast();\n         }\n         return (T) arguments;\n     }\n-    \n+\n     public List<T> allValues() {\n         return (List) arguments;\n     }\n--- a/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n+++ b/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n             argument.value();\n             fail();\n         } catch (MockitoException e) {\n-            assertContains(\"Argument value has not yet been captured\", e.getMessage());\n+            assertContains(\"Argument value not yet captured\", e.getMessage());\n         }\n     }\n }", "timestamp": 1241125189, "metainfo": ""}