{"sha": "61a791ef55f18f94748c191c10c53ac911a81f80", "log": "added documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40224", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *   verifyNoMoreInteractions(mockedList);\n  * </pre>\n  * \n- * See more {@link Mockito.verifyNoMoreInteractions}\n+ * See more {@link Mockito#verifyNoMoreInteractions}\n  * \n  * <h3>Strict order verification</h3>\n  * \n  * <pre>\n- *   List mockOne = mock(List.class);\n- *   List mockTwo = mock(List.class);\n+ *   List firstMock = mock(List.class);\n+ *   List secondMock = mock(List.class);\n  *   \n  *   //using mocks\n- *   mockOne.add(\"one\");\n- *   mockTwo.add(\"two\");\n+ *   firstMock.add(\"one\");\n+ *   secondMock.add(\"two\");\n  *   \n  *   //create strict verifier \n- *   Strictly strictly = createStrictOrderVerifier(mockOne, mockTwo);\n- *   \n- *   //following will make sure that mockOne was called before mockTwo\n- *   strictly.verify(mockOne).add(\"one\");\n- *   strictly.verify(mockTwo).add(\"two\");\n+ *   Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+ *   \n+ *   //following will make sure that firstMock was called before secondMock\n+ *   strictly.verify(firstMock).add(\"should be called first\");\n+ *   strictly.verify(secondMock).add(\"should be called second\");\n  * </pre>\n  * \n  * <p>\n     }\n \n     /**\n-     * Stubs with return value or exception, e.g:\n+     * Stubs with return value or exception. E.g:\n      * <pre>\n      *   stub(mock.countElements()).andReturn(10);\n      *   \n      * See examples {@link Mockito}\n      * \n      * @param methodCallToStub\n-     * @return\n+     * @return OngoingStubbing object to set stubbed value/exception\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> OngoingStubbing<T> stub(T methodCallToStub) {\n     }\n \n     /**\n-     * Verifies certain behavior, e.g:\n+     * Verifies certain behavior. E.g:\n      * <pre>\n      *   verify(mock).someMethod(\"some arg\");\n      * </pre>\n      * \n      * See examples {@link Mockito}\n      * \n-     * @param mock\n-     * @return\n+     * @param mock to be verified\n+     * @return mock object itself\n      */\n     public static <T> T verify(T mock) {\n         return verify(mock, times(1));\n     }\n \n     /**\n-     * Verifies certain behavior happened exact number of times, e.g:\n-     * <pre>\n-     *   verify(mock, times(5)).someMethod(\"one\");\n+     * Verifies certain behavior happened at least once or exact number of times. E.g:\n+     * <pre>\n+     *   verify(mock, times(5)).someMethod(\"should be called five times\");\n      *   \n-     *   verify(mock, atLeastOnce()).someMethod(\"two\");\n-     * </pre>\n-     * \n-     * See examples {@link Mockito}\n-     * \n-     * @param mock\n-     * @param mode\n-     * @return\n+     *   verify(mock, atLeastOnce()).someMethod(\"should be called at least once\");\n+     * </pre>\n+     * \n+     * See examples {@link Mockito}\n+     * \n+     * @param mock to be verified\n+     * @param mode - times(x) or atLeastOnce()\n+     * \n+     * @return mock object itself\n      */\n     public static <T> T verify(T mock, VerificationMode mode) {\n         MockUtil.validateMock(mock);\n     }\n \n     /**\n-     * Stubs void method with exception, e.g:\n-     * <pre>\n-     *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n+     * Stubs void method with exception. E.g:\n+     * <pre>\n+     *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n      * </pre>\n      * \n      * See examples {@link Mockito}\n \n     /**\n      * Creates strict verifier that allows verifying mocks in order.\n-     * <p>\n-     * See examples {@link Mockito}\n-     * \n-     * @param mocks to verified in strict order\n-     * @return\n+     * \n+     * <pre>\n+     *   Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+     *   \n+     *   strictly.verify(firstMock).add(\"should be called first\");\n+     *   strictly.verify(secondMock).add(\"should be called second\");\n+     * </pre>\n+     *\n+     * See examples {@link Mockito}\n+     * \n+     * @param mocks to be verified in strict order\n+     * \n+     * @return verifier object to be used to verify strictly\n      */\n     public static Strictly createStrictOrderVerifier(Object... mocks) {\n         if (mocks.length == 0) {\n     }\n \n     /**\n-     * Allows at-least-once verification, e.g:\n+     * Allows at-least-once verification. E.g:\n      * <pre>\n      *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\n      * </pre>\n      * \n      * See examples {@link Mockito}\n      * \n-     * @return\n+     * @return verification mode\n      */\n     public static VerificationMode atLeastOnce() {\n         return VerificationMode.atLeastOnce();\n     }\n \n     /**\n-     * Allows exact number of invocations verification, e.g:\n+     * Allows exact number of invocations verification. E.g:\n      * <pre>\n      *   verify(mock, times(2)).someMethod(\"some arg\");\n      * </pre>\n      * See examples {@link Mockito}\n      * \n      * @param wantedNumberOfInvocations wanted number of invocations \n-     * @return\n+     * \n+     * @return verification mode\n      */\n     public static VerificationMode times(int wantedNumberOfInvocations) {\n         return VerificationMode.times(wantedNumberOfInvocations);\n--- a/src/org/mockito/Strictly.java\n+++ b/src/org/mockito/Strictly.java\n \n import org.mockito.internal.progress.VerificationMode;\n \n+/**\n+ * Allows strict order verification. E.g:\n+ * \n+ * <pre>\n+ * Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+ * \n+ * strictly.verify(firstMock).add(\"should be called first\");\n+ * strictly.verify(secondMock).add(\"should be called second\");\n+ * </pre>\n+ * \n+ * See examples {@link Mockito#createStrictOrderVerifier(Object...)}\n+ */\n public interface Strictly {\n \n+    /**\n+     * Verifies mock object strictly in order. E.g:\n+     * \n+     * <pre>\n+     * Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+     * \n+     * strictly.verify(firstMock).add(\"should be called first\");\n+     * strictly.verify(secondMock).add(\"should be called second\");\n+     * </pre>\n+     * <p>\n+     * \n+     * See examples {@link Mockito}\n+     * \n+     * @param mock to be verified\n+     * \n+     * @return mock object itself\n+     */\n     <T> T verify(T mock);\n \n+    /**\n+     * Verifies mock object strictly in order. E.g:\n+     * \n+     * <pre>\n+     * Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+     * \n+     * strictly.verify(firstMock, times(2)).add(\"should be called first two times\");\n+     * strictly.verify(secondMock, atLeastOnce()).add(\"should be called second\");\n+     * </pre>\n+     * <p>\n+     * \n+     * See examples {@link Mockito}\n+     * \n+     * @param mock to be verified\n+     * @param mode - times(x) or atLeastOnce()\n+     * \n+     * @return mock object itself\n+     */\n     <T> T verify(T mock, VerificationMode verificationMode);\n-    \n }\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n  */\n package org.mockito.internal.progress;\n \n-//TODO document exposed interfaces\n+import org.mockito.Mockito;\n+\n+/**\n+ * Stubs with return value or exception. E.g:\n+ * \n+ * <pre>\n+ * stub(mock.countElements()).andReturn(10);\n+ * \n+ * stub(mock.countElements()).andThrow(new RuntimeException());\n+ * </pre>\n+ * \n+ * See examples {@link Mockito#stub}\n+ */\n public interface OngoingStubbing<T> {\n \n+    /**\n+     * Stub mock object with given return value. E.g:\n+     * <pre>\n+     * stub(mock.countElements()).andReturn(10);\n+     * </pre>\n+     * \n+     * See examples {@link Mockito#stub}\n+     * \n+     * @param stubbed return value\n+     */\n     void andReturn(T value);\n \n+    /**\n+     * Stub mock object with throwable that will be thrown on method invocation. E.g:\n+     * <pre>\n+     * stub(mock.countElements()).andThrow(new RuntimeException());\n+     * </pre>\n+     *\n+     * If throwable is a checked exception then it has to \n+     * match one of the checked exceptions of method signature.\n+     * \n+     * See examples {@link Mockito#stub}\n+     * \n+     * @param throwable to be thrown on method invocation\n+     */\n     void andThrow(Throwable throwable);\n }\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n import java.util.Collections;\n import java.util.List;\n \n+import org.mockito.Mockito;\n import org.mockito.exceptions.base.MockitoException;\n \n+/**\n+ * Allows verifying that certain behavior happened at least once or exact number of times. E.g:\n+ * <pre>\n+ *   verify(mock, times(5)).someMethod(\"should be called five times\");\n+ *   \n+ *   verify(mock, atLeastOnce()).someMethod(\"should be called at least once\");\n+ * </pre>\n+ * \n+ * See examples {@link Mockito}\n+ */\n public class VerificationMode {\n     \n     enum Verification { EXPLICIT, NO_MORE_WANTED };\n     }\n     \n     /**\n+     * TODO think about interfacing this class so it's not exposed\n      * Don't use VerificationMode class directly. \n      * <p>\n      * Use Mockito.atLeastOnce() and Mockito.times()\n--- a/src/org/mockito/internal/stubbing/StubbedMethodSelector.java\n+++ b/src/org/mockito/internal/stubbing/StubbedMethodSelector.java\n  */\n package org.mockito.internal.stubbing;\n \n+import org.mockito.Mockito;\n+\n+/**\n+ * Chooses void method for stubbing with throwable. E.g:\n+ * \n+ * <pre>\n+ * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+ * </pre>\n+ * \n+ * See examples {@link Mockito#stubVoid}\n+ */\n public interface StubbedMethodSelector<T> {\n-    \n+\n+    /**\n+     * Choose void method for stubbing with throwable. E.g:\n+     * \n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+     * </pre>\n+     * \n+     * If throwable is a checked exception then it has to match one of the\n+     * checked exceptions of method signature.\n+     * <p>\n+     * See examples {@link Mockito#stubVoid}\n+     * \n+     * @return mock object itself\n+     */\n     T on();\n-    \n }\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n  */\n package org.mockito.internal.stubbing;\n \n+import org.mockito.Mockito;\n+\n+/**\n+ * Stubs void method with exception. E.g:\n+ * \n+ * <pre>\n+ * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+ * </pre>\n+ * \n+ * See examples {@link Mockito#stubVoid}\n+ */\n public interface VoidMethodStubbable<T> {\n \n+    /**\n+     * Stubs void method with exception. E.g:\n+     * \n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+     * </pre>\n+     * \n+     * If throwable is a checked exception then it has to \n+     * match one of the checked exceptions of method signature.\n+     * \n+     * See examples {@link Mockito#stubVoid}\n+     * \n+     * @param throwable\n+     *            to be thrown on method invocation\n+     * \n+     * @return method selector - to choose void method and finish stubbing \n+     */\n     StubbedMethodSelector<T> toThrow(Throwable throwable);\n \n }", "timestamp": 1197928191, "metainfo": ""}