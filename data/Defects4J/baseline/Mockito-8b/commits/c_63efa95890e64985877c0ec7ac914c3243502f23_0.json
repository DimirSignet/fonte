{"sha": "63efa95890e64985877c0ec7ac914c3243502f23", "log": "Refactorings in tests  --HG-- rename : test/org/mockito/internal/debugging/WarningsPrinterImplTest.java => test/org/mockito/internal/debugging/WarningsFinderTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401840", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/internal/debugging/WarningsFinderTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.debugging;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.util.MockitoLoggerStub;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.Arrays;\n+\n+import static java.util.Arrays.asList;\n+import static org.mockito.Mockito.only;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+public class WarningsFinderTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+    @Mock private FindingsListener listener;\n+    private MockitoLoggerStub logger = new MockitoLoggerStub();\n+\n+    @Test\n+    public void shouldPrintUnusedStub() {\n+        // given\n+        Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n+\n+        // when\n+        WarningsFinder finder = new WarningsFinder(asList(unusedStub), Arrays.<InvocationMatcher>asList());\n+        finder.find(listener);\n+\n+        // then\n+        verify(listener, only()).foundUnusedStub(unusedStub);\n+    }\n+\n+    @Test\n+    public void shouldPrintUnstubbedInvocation() {\n+        // given\n+        InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n+\n+        // when\n+        WarningsFinder finder = new WarningsFinder(Arrays.<Invocation>asList(), Arrays.<InvocationMatcher>asList(unstubbedInvocation));\n+        finder.find(listener);\n+\n+        // then\n+        verify(listener, only()).foundUstubbed(unstubbedInvocation);\n+    }\n+\n+    @Test\n+    public void shouldPrintStubWasUsedWithDifferentArgs() {\n+        // given\n+        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n+        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n+\n+        // when\n+        WarningsFinder finder = new WarningsFinder(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n+        finder.find(listener);\n+\n+        // then\n+        verify(listener, only()).foundStubCalledWithDifferentArgs(stub, wrongArg);\n+    }\n+}\n--- a/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n     @Mock\n     private IMethods mock;\n     private MockitoLoggerStub logger = new MockitoLoggerStub();\n+\n+    //TODO those tests should only deal with mocks\n \n     @Test\n     public void shouldPrintUnusedStub() {", "timestamp": 1266178921, "metainfo": ""}