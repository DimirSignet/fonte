{"sha": "2bcd8bf526b14f7a55f75985c66dc6edeb11f09a", "log": "almost removed VerifyingRecorder  --HG-- rename : test/org/mockito/internal/verification/VerifyingRecorderTest.java => test/org/mockito/internal/verification/RegisteredInvocationsTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40960", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n \n         if (verificationMode != null) {\n-            VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getVerifiableInvocations(), invocationMatcher);\n+            VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getAll(), invocationMatcher);\n             verificationMode.verify(data);\n             return null;\n         }\n     }\n \n     public void verifyNoMoreInteractions() {\n-        VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getVerifiableInvocations(), null);\n+        VerificationDataImpl data = new VerificationDataImpl(registeredInvocations.getAll(), null);\n         VerificationModeFactory.noMoreInteractions().verify(data);\n     }\n \n     }\n \n     public List<Invocation> getRegisteredInvocations() {\n-        return registeredInvocations.getVerifiableInvocations();\n+        return registeredInvocations.getAll();\n     }\n \n     public String getMockName() {\n--- a/src/org/mockito/internal/verification/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n         invocations.remove(invocations.size()-1);\n     }\n \n-    public List<Invocation> getVerifiableInvocations() {\n+    public List<Invocation> getAll() {\n         return ListUtil.filter(invocations, new RemoveToString());\n     }\n     \n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n     }\n \n     public List<Invocation> getRegisteredInvocations() {\n-        return registeredInvocations.getVerifiableInvocations();\n+        return registeredInvocations.getAll();\n     }\n }\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockito.internal.verification.NoMoreInvocationsVerifierTest;\n import org.mockito.internal.verification.NumberOfInvocationsCheckerTest;\n import org.mockito.internal.verification.NumberOfInvocationsInOrderCheckerTest;\n-import org.mockito.internal.verification.VerifyingRecorderTest;\n+import org.mockito.internal.verification.RegisteredInvocationsTest;\n import org.mockitousage.ReplacingObjectMethodsTest;\n import org.mockitousage.UsingVarargsTest;\n import org.mockitousage.examples.configure.withbaseclass.ConfiguringDefaultReturnValuesUsingBaseClassTest;\n                     AllInvocationsFinderTest.class,\n                     DefaultReturnValuesTest.class,\n                     NumberOfInvocationsCheckerTest.class,\n-                    VerifyingRecorderTest.class,\n+                    RegisteredInvocationsTest.class,\n                     MissingInvocationCheckerTest.class,\n                     NoMoreInvocationsVerifierTest.class,\n                     NumberOfInvocationsInOrderCheckerTest.class,\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/RegisteredInvocationsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockitoutil.TestBase;\n+\n+public class RegisteredInvocationsTest extends TestBase {\n+    \n+    private RegisteredInvocations invocations;\n+    \n+    @Before\n+    public void setup() {\n+        invocations = new RegisteredInvocations();\n+    }\n+    \n+    @Test\n+    public void shouldNotReturnToStringMethod() throws Exception {\n+        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n+        Invocation simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n+        \n+        invocations.add(toString);\n+        invocations.add(simpleMethod);\n+        \n+        assertTrue(invocations.getAll().contains(simpleMethod));\n+        assertFalse(invocations.getAll().contains(toString));\n+    }\n+}", "timestamp": 1223978186, "metainfo": ""}