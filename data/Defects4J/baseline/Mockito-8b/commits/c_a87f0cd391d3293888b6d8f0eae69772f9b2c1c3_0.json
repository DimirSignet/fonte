{"sha": "a87f0cd391d3293888b6d8f0eae69772f9b2c1c3", "log": "strictly uses new interface when exact number of invocations used  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40192", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n public class Mockito extends Matchers {\n     \n     private static final Reporter reporter = new Reporter();\n-    \n-    static MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n-    \n-    public static VerificationMode atLeastOnce() {\n-        return VerificationMode.atLeastOnce();\n-    }\n+    static final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n     public static <T> T mock(Class<T> classToMock) {\n         MockFactory<T> proxyFactory = new MockFactory<T>();\n         }\n \t}\n \n-    private static void assertMocksNotEmpty(Object[] mocks) {\n-        if (mocks.length == 0) {\n-            reporter.mocksHaveToBePassedAsArguments();\n-        }\n-    }\n-\n     public static void verifyZeroInteractions(Object ... mocks) {\n         assertMocksNotEmpty(mocks);\n         mockingProgress.validateState();\n         for (Object mock : mocks) {\n             MockUtil.getControl(mock).verifyZeroInteractions();\n+        }\n+    }\n+    \n+    private static void assertMocksNotEmpty(Object[] mocks) {\n+        if (mocks.length == 0) {\n+            reporter.mocksHaveToBePassedAsArguments();\n         }\n     }\n     \n         }\n         return strictOrderVerifier;\n     }\n+    \n+    public static VerificationMode atLeastOnce() {\n+        return VerificationMode.atLeastOnce();\n+    }\n+    \n+    public static VerificationMode times(int wantedNumberOfInvocations) {\n+        return VerificationMode.times(wantedNumberOfInvocations);\n+    }\n }\n--- a/src/org/mockito/StrictOrderVerifier.java\n+++ b/src/org/mockito/StrictOrderVerifier.java\n     }\n     \n     public <T> T verify(T mock) {\n-        return this.verify(mock, 1);\n-    }\n-    \n-    //TODO get rid of interface with int\n-    public <T> T verify(T mock, int wantedNumberOfInvocations) {\n-        return this.verify(mock, VerificationMode.strict(wantedNumberOfInvocations, mocksToBeVerifiedSrictly));\n+        return this.verify(mock, VerificationMode.times(1));\n     }\n     \n     public <T> T verify(T mock, VerificationMode verificationMode) {\n--- a/src/org/mockito/Strictly.java\n+++ b/src/org/mockito/Strictly.java\n \n     <T> T verify(T mock);\n \n-    //TODO get rid of interface with int\n-    <T> T verify(T mock, int wantedNumberOfInvocations);\n-    \n     <T> T verify(T mock, VerificationMode verificationMode);\n     \n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n     public void shouldPrintWantedMethodWhenEverythingElseIsVerified() {\n         strictly.verify(one).simpleMethod(1);\n         strictly.verify(one).simpleMethod(11);\n-        strictly.verify(two, 2).simpleMethod(2);\n+        strictly.verify(two, times(2)).simpleMethod(2);\n         strictly.verify(three).simpleMethod();\n         try {\n             strictly.verify(three).simpleMethod(999);\n         strictly.verify(one).simpleMethod(1);\n         strictly.verify(one).simpleMethod(11);\n         try {\n-            strictly.verify(two, 1).simpleMethod(2);\n+            strictly.verify(two, times(1)).simpleMethod(2);\n             fail();\n         } catch (TooManyActualInvocationsError e) {\n             String actualMessage = e.getMessage();\n--- a/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n         verify(mockOne, 2).simpleMethod(textOne);\n         \n         strictly = createStrictOrderVerifier(mockOne);\n-        strictly.verify(mockOne, 2).simpleMethod(textOne);\n+        strictly.verify(mockOne, times(2)).simpleMethod(textOne);\n     } \n     \n     @Test\n         verify(mockOne, 2).varargsObject(1, textOne, textOne);\n         \n         strictly = createStrictOrderVerifier(mockOne);\n-        strictly.verify(mockOne, 2).varargsObject(1, textOne, textOne);\n+        strictly.verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n     } \n }\n--- a/test/org/mockitousage/verification/StrictVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationTest.java\n import static org.mockito.Mockito.atLeastOnce;\n import static org.mockito.Mockito.createStrictOrderVerifier;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.verifyZeroInteractions;\n     @Test\n     public void shouldVerifyStrictly() {\n         strictly.verify(mockOne).simpleMethod(1);\n-        strictly.verify(mockTwo, 2).simpleMethod(2);\n+        strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         strictly.verify(mockThree).simpleMethod(3);\n         strictly.verify(mockTwo).simpleMethod(2);\n         strictly.verify(mockOne).simpleMethod(4);\n     \n     @Test\n     public void shouldVerifyStrictlyWhenExpectingSomeInvocationsToBeCalledZeroTimes() {\n-        strictly.verify(mockOne, 0).oneArg(false);\n-        strictly.verify(mockOne).simpleMethod(1);\n-        strictly.verify(mockTwo, 2).simpleMethod(2);\n-        strictly.verify(mockTwo, 0).simpleMethod(22);\n-        strictly.verify(mockThree).simpleMethod(3);\n-        strictly.verify(mockTwo).simpleMethod(2);\n-        strictly.verify(mockOne).simpleMethod(4);\n-        strictly.verify(mockThree, 0).oneArg(false);\n+        strictly.verify(mockOne, times(0)).oneArg(false);\n+        strictly.verify(mockOne).simpleMethod(1);\n+        strictly.verify(mockTwo, times(2)).simpleMethod(2);\n+        strictly.verify(mockTwo, times(0)).simpleMethod(22);\n+        strictly.verify(mockThree).simpleMethod(3);\n+        strictly.verify(mockTwo).simpleMethod(2);\n+        strictly.verify(mockOne).simpleMethod(4);\n+        strictly.verify(mockThree, times(0)).oneArg(false);\n         verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n     } \n     \n     @Test\n     public void shouldFailWhenLastMockCalledTwice() {\n         strictly.verify(mockOne).simpleMethod(1);\n-        strictly.verify(mockTwo, 2).simpleMethod(2);\n+        strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         strictly.verify(mockThree).simpleMethod(3);\n         strictly.verify(mockTwo).simpleMethod(2);\n         strictly.verify(mockOne).simpleMethod(4);\n     \n     @Test(expected=TooManyActualInvocationsError.class)\n     public void shouldFailOnFirstMethodBecauseOneInvocationWanted() {\n-        strictly.verify(mockOne, 0).simpleMethod(1);\n+        strictly.verify(mockOne, times(0)).simpleMethod(1);\n     }\n     \n     @Test(expected=TooLittleActualInvocationsError.class)\n     public void shouldFailOnFirstMethodBecauseOneInvocationWantedAgain() {\n-        strictly.verify(mockOne, 2).simpleMethod(1);\n+        strictly.verify(mockOne, times(2)).simpleMethod(1);\n     }\n     \n     @Test\n     public void shouldFailOnSecondMethodBecauseTwoInvocationsWanted() {\n-        strictly.verify(mockOne, 1).simpleMethod(1);\n-        try {\n-            strictly.verify(mockTwo, 3).simpleMethod(2);\n+        strictly.verify(mockOne, times(1)).simpleMethod(1);\n+        try {\n+            strictly.verify(mockTwo, times(3)).simpleMethod(2);\n             fail();\n         } catch (TooLittleActualInvocationsError e) {}\n     }\n     \n     @Test\n     public void shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain() {\n-        strictly.verify(mockOne, 1).simpleMethod(1);\n-        try {\n-            strictly.verify(mockTwo, 0).simpleMethod(2);\n+        strictly.verify(mockOne, times(1)).simpleMethod(1);\n+        try {\n+            strictly.verify(mockTwo, times(0)).simpleMethod(2);\n             fail();\n         } catch (TooManyActualInvocationsError e) {}\n     }    \n         strictly.verify(mockThree, atLeastOnce()).simpleMethod(3);\n         strictly.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n         try {\n-            strictly.verify(mockOne, 0).simpleMethod(4);\n+            strictly.verify(mockOne, times(0)).simpleMethod(4);\n             fail();\n         } catch (TooManyActualInvocationsError e) {}\n     }\n         strictly.verify(mockThree, atLeastOnce()).simpleMethod(3);\n         strictly.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n         try {\n-            strictly.verify(mockOne, 2).simpleMethod(4);\n+            strictly.verify(mockOne, times(2)).simpleMethod(4);\n             fail();\n         } catch (TooLittleActualInvocationsError e) {}\n     }    \n     public void shouldFailOnSecondMethodBecauseDifferentArgsWanted() {\n         strictly.verify(mockOne).simpleMethod(1);\n         try {\n-            strictly.verify(mockTwo, 2).simpleMethod(-999);\n+            strictly.verify(mockTwo, times(2)).simpleMethod(-999);\n             fail();\n         } catch (TooLittleActualInvocationsError e) {}\n     }\n     \n     @Test\n     public void shouldFailOnSecondMethodBecauseDifferentMethodWanted() {\n-        strictly.verify(mockOne, 1).simpleMethod(1);\n-        try {\n-            strictly.verify(mockTwo, 2).oneArg(true);\n+        strictly.verify(mockOne, times(1)).simpleMethod(1);\n+        try {\n+            strictly.verify(mockTwo, times(2)).oneArg(true);\n             fail();\n         } catch (TooLittleActualInvocationsError e) {}\n     }    \n     \n     @Test(expected = TooLittleActualInvocationsError.class)\n     public void shouldFailWhenSecondMethodCalledFirst() {\n-        strictly.verify(mockTwo, 2).simpleMethod(2);\n+        strictly.verify(mockTwo, times(2)).simpleMethod(2);\n     }\n     \n     @Test\n     public void shouldFailWhenLastMethodCalledToEarly() {\n         strictly.verify(mockOne).simpleMethod(1);\n-        strictly.verify(mockTwo, 2).simpleMethod(2);\n+        strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         try {\n             strictly.verify(mockOne).simpleMethod(4);\n             fail();\n     @Test\n     public void shouldFailWhenMockTwoIsToEarly() {\n         strictly.verify(mockOne).simpleMethod(1);\n-        strictly.verify(mockTwo, 2).simpleMethod(2);\n-        try {\n-            strictly.verify(mockTwo, 1).simpleMethod(2);\n+        strictly.verify(mockTwo, times(2)).simpleMethod(2);\n+        try {\n+            strictly.verify(mockTwo, times(1)).simpleMethod(2);\n             fail();\n         } catch (VerificationError e) {}\n     }", "timestamp": 1197654713, "metainfo": ""}