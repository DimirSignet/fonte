{"sha": "5d31fb155a1aa2e76bdcf9fd46dbcdffb60a8428", "log": "Rename job for consistency.  Issue #92", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n+package org.mockitousage.constructor;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.withSettings;\n+\n+public class CreatingMocksWithConstructorTest extends TestBase {\n+\n+    static abstract class AbstractMessage {\n+        private final String message;\n+        AbstractMessage() {\n+            this.message = \"hey!\";\n+        }\n+        String getMessage() {\n+            return message;\n+        }\n+    }\n+\n+    static class Message extends AbstractMessage {}\n+    class InnerClass extends AbstractMessage {}\n+\n+    @Test\n+    public void can_create_mock_with_constructor() {\n+        Message mock = mock(Message.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+        //the message is a part of state of the mocked type that gets initialized in constructor\n+        assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    public void can_mock_abstract_classes() {\n+        AbstractMessage mock = mock(AbstractMessage.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+        //the message is a part of state of the mocked type that gets initialized in constructor\n+        assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    public void can_mock_inner_classes() {\n+        InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(this).defaultAnswer(CALLS_REAL_METHODS));\n+\n+        //the message is a part of state of the mocked type that gets initialized in constructor\n+        assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    @Ignore //TODO SF\n+    public void mocking_inner_classes_with_wrong_outer_instance() {\n+        fail();\n+    }\n+\n+    @Test\n+    @Ignore //TODO SF\n+    public void prevents_mocking_interfaces_with_constructor() {\n+        try {\n+            //when\n+            mock(IMethods.class, withSettings().useConstructor());\n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+\n+    @Test\n+    @Ignore //TODO SF\n+    public void prevents_across_jvm_serialization_with_constructor() {\n+        fail();\n+    }\n+}", "timestamp": 1416164919, "metainfo": ""}