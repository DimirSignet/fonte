{"sha": "b54feb3d81d04a4c2f4255ab9c81678d7f14520f", "log": "Created MockitoTroubleshooter for helping out with invalid usages of Mockito. Currently, this class allows executing framework validation implicitly.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401360", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      11. Stubbing with callbacks <br/>\n  *      12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>\n  *      13. Spying on real objects <br/>\n- *      14. (**New**) Changing default return values of unstubbed invocations <br/>\n+ *      14. Changing default return values of unstubbed invocations <br/>\n+ *      15. (**New**) Troubleshooting <br/>\n  * </b>\n  * \n  * <p>\n  * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n  * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n  * \n- * <h3>14. (**New**) Changing default return values of unstubbed invocations</h3>\n+ * <h3>14. Changing default return values of unstubbed invocations</h3>\n  * \n  * You can create a mock with specified strategy of for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n  * <p>\n  * Read more about this interesting implementation of <i>ReturnValues</i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n+ * <h3>15. (**New**) Troubleshooting</h3>\n+ * \n+ * First, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n+ * <p>\n+ * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a>\n+ * <p>\n+ * If you are experiencing problems with the framework check out new {@link MockitoTroubleshooter}.\n+ * Although Mockito performs framework validation every time you use it, {@link MockitoTroubleshooter} allows executing the validation explicitly.\n+ * Read more in javadoc for {@link MockitoTroubleshooter} class to find out where it could be useful.\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n         MOCKITO_CORE.verifyNoMoreInteractions(mocks);\n     }\n \n-    public static void assertMocksNotEmpty(Object[] mocks) {\n-        MOCKITO_CORE.assertMocksNotEmpty(mocks);\n-    }\n-\n     /**\n      * <pre>\n      *   //Instead of:\n--- /dev/null\n+++ b/src/org/mockito/MockitoTroubleshooter.java\n+package org.mockito;\n+\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+\n+/**\n+ * First of all, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n+ * <p>\n+ * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a> \n+ * <p>  \n+ * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. However, there's a gotcha so read on.\n+ * <p>\n+ * Examples of incorrect use:\n+ * <pre>\n+ * //Oups, someone forgot thenReturn() part:\n+ * when(mock.get());\n+ * \n+ * //Oups, someone put the verified method call inside verify() where it should be outside:\n+ * verify(mock.execute());\n+ * \n+ * //Oups, someone has used EasyMock for too long and forgot to specify the method to verify:\n+ * verify(mock);\n+ * </pre>\n+ * \n+ * Mockito throws exceptions if you misuse it so that you will know if your tests are written correctly. \n+ * The thing is that Mockito does the validation <b>next time</b> you use the framework (e.g. next time you verify, stub, call mock etc.). \n+ * But even though the exception might b thrown in the next test, the exception message contains a navigable stack trace element with location of the defect. \n+ * Hence you can click and find the place where Mockito was misused.\n+ * <p>\n+ * Sometimes though, you might want to validate the framework state explicitly. \n+ * For example, one of the users wanted to put {@link MockitoTroubleshooter#validateFrameworkState()} in his &#064;After method\n+ * so that he knows immediately when he misused Mockito. Without it, he would have known about it not sooner than <b>next time</b> he used the framework.  \n+ * <p>\n+ * Bear in mind that <b>usually you shouldn't need MockitoTroubleshooter</b> \n+ * and framework validation triggered on next-time basis is just enough.  \n+ */\n+public class MockitoTroubleshooter {\n+\n+    /**\n+     * Explicitly validates the framework state to detect invalid use of Mockito.\n+     * <p>\n+     * See examples in javadoc for {@link MockitoTroubleshooter} class\n+     */\n+    public static void validateFrameworkState() {\n+        MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n+        mockingProgress.validateState();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.misuse;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoTroubleshooter;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n+import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class ExplicitFrameworkValidationTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+    \n+    @Test\n+    public void shouldValidateExplicitly() {\n+        verify(mock);\n+        try {\n+            MockitoTroubleshooter.validateFrameworkState();\n+            fail();\n+        } catch (UnfinishedVerificationException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedStubbing() {\n+        when(mock.simpleMethod());\n+        try {\n+            MockitoTroubleshooter.validateFrameworkState();\n+            fail();\n+        } catch (UnfinishedStubbingException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldDetectMisplacedArgumentMatcher() {\n+        anyObject();\n+        try {\n+            MockitoTroubleshooter.validateFrameworkState();\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {}\n+    }\n+}", "timestamp": 1240351571, "metainfo": ""}