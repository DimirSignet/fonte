{"sha": "7fcee8a63173b199b27b31af52a2bbdee544dc6b", "log": "standarized the way we verify things (verifyNoMoreInteractions now uses a verifier)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40195", "commit": "\n--- a/src/org/mockito/internal/MockControl.java\n+++ b/src/org/mockito/internal/MockControl.java\n import org.mockito.internal.stubbing.Stubber;\n import org.mockito.internal.stubbing.VoidMethodStubable;\n import org.mockito.internal.verification.MissingInvocationVerifier;\n+import org.mockito.internal.verification.NoMoreInvocationsVerifier;\n import org.mockito.internal.verification.NumberOfInvocationsVerifier;\n import org.mockito.internal.verification.Verifier;\n import org.mockito.internal.verification.VerifyingRecorder;\n     private VerifyingRecorder createRecorder() {\n         InvocationsChunker chunker = new InvocationsChunker(new AllInvocationsFinder());\n         InvocationsMarker marker = new InvocationsMarker();\n-        List<Verifier> verifiers = Arrays.asList(new MissingInvocationVerifier(), new NumberOfInvocationsVerifier(new Reporter()));\n+        List<Verifier> verifiers = Arrays.asList(\n+                new MissingInvocationVerifier(), \n+                new NumberOfInvocationsVerifier(new Reporter()),\n+                new NoMoreInvocationsVerifier());\n         return new VerifyingRecorder(chunker, marker, verifiers);\n     }\n \n     }\n \n     public void verifyNoMoreInteractions() {\n-        verifyingRecorder.verifyNoMoreInteractions();\n+        verifyingRecorder.verify(VerificationMode.noMoreInteractions());\n     }\n     \n     public void andReturn(T value) {\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n     }\n     \n     public static VerificationMode noMoreInteractions() {\n-        return new VerificationMode(null, null, Verification.NO_MORE_WANTED);\n+        return new VerificationMode(null, Collections.emptyList(), Verification.NO_MORE_WANTED);\n     }\n \n     /**\n     public String toString() {\n         return \"Wanted invocations count: \" + wantedInvocationCount + \", Mocks to verify in order: \" + mocksToBeVerifiedInSequence;\n     }\n+\n+    public boolean isExplicit() {\n+        return verification == Verification.EXPLICIT;\n+    }\n }\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n     private final Reporter reporter = new Reporter();\n \n     public void verify(InvocationsCalculator calculator, InvocationMatcher wanted, VerificationMode mode) {\n+        if (!mode.isExplicit()) {\n+            return;\n+        }\n+        \n         int actualCount = calculator.countActual(wanted);\n         Integer wantedCount = mode.wantedCount();\n         boolean atLeastOnce = mode.atLeastOnceMode();\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsCalculator;\n+import org.mockito.internal.progress.VerificationMode;\n+\n+public class NoMoreInvocationsVerifier implements Verifier {\n+\n+    private final Reporter reporter = new Reporter();\n+\n+    public void verify(InvocationsCalculator calculator, InvocationMatcher wanted, VerificationMode mode) {\n+        if (mode.isExplicit()) {\n+            return;\n+        }\n+\n+        Invocation unverified = calculator.getFirstUnverified();\n+        if (unverified != null) {\n+            reporter.noMoreInteractionsWanted(unverified.toString(), unverified.getStackTrace());\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n     }\n \n     public void verify(InvocationsCalculator calculator, InvocationMatcher wanted, VerificationMode mode) {\n-        if (mode.atLeastOnceMode()) {\n+        if (mode.atLeastOnceMode() || !mode.isExplicit()) {\n             return;\n         }\n         \n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsCalculator;\n public class VerifyingRecorder {\n \n     private final LinkedList<Invocation> registeredInvocations = new LinkedList<Invocation>();\n-    private final Reporter reporter = new Reporter();\n     \n     private final InvocationsMarker marker;\n     private final List<Verifier> verifiers;\n         return registeredInvocations;\n     }\n     \n+    public void verify(VerificationMode mode) {\n+        verify(null, mode);\n+    }\n+    \n     public void verify(InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> invocations = getInvocationsForEvaluation(mode);\n         //TODO should not construct calculator\n             verifier.verify(calculator, wanted, mode);\n         }\n         \n-        marker.markInvocationsAsVerified(invocations, wanted, mode);\n+        if (mode.isExplicit()) {\n+            marker.markInvocationsAsVerified(invocations, wanted, mode);\n+        }\n     }\n     \n     private List<Invocation> getInvocationsForEvaluation(VerificationMode mode) {\n             return registeredInvocations;\n         }\n     }\n-    \n-    public void verifyNoMoreInteractions() {\n-        InvocationsCalculator calculator = new InvocationsCalculator(registeredInvocations);\n-        Invocation unverified = calculator.getFirstUnverified();\n-        if (unverified != null) {\n-            reporter.noMoreInteractionsWanted(unverified.toString(), unverified.getStackTrace());\n-        }\n-    }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+package org.mockito.internal.verification;\n+\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+import org.mockito.internal.progress.VerificationMode;\n+\n+\n+public class MissingInvocationVerifierTest extends RequiresValidState {\n+\n+    @Test\n+    public void shouldVerifyOnlyWhenModeIsExplicit() {\n+        MissingInvocationVerifier verifier = new MissingInvocationVerifier();\n+        verifier.verify(null, null, VerificationMode.noMoreInteractions());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+package org.mockito.internal.verification;\n+\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+import org.mockito.internal.progress.VerificationMode;\n+\n+\n+public class NoMoreInvocationsVerifierTest extends RequiresValidState {\n+\n+    @Test\n+    public void shouldNeverVerifyWhenVerificationIsExplicit() throws Exception {\n+        NoMoreInvocationsVerifier verifier = new NoMoreInvocationsVerifier();\n+        verifier.verify(null, null, VerificationMode.atLeastOnce());\n+    }\n+}\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n     }\n \n     @Test\n-    public void shouldNotCheckForWrongNumberOfModificationsWhenAtLeastOnceVerification() throws Exception {\n+    public void shouldNeverVerifyWhenAtLeastOnceVerification() throws Exception {\n         verifier.verify(null, null, atLeastOnce());\n+    }\n+    \n+    @Test\n+    public void shouldVerifyOnlyWhenModeIsExplicit() {\n+        verifier.verify(null, null, VerificationMode.noMoreInteractions());\n     }\n \n     @Test\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertThat;\n import static org.mockito.util.ExtraMatchers.collectionHasExactlyInOrder;\n public class VerifyingRecorderTest extends RequiresValidState {\n     \n     private VerifyingRecorder recorder;\n-    private VerifierStub verifier;\n-    private InvocationsMarkerStub marker;\n-    private InvocationsChunkerStub chunker;\n+    private VerifierStub verifierStub;\n+    private InvocationsMarkerStub markerStub;\n+    private InvocationsChunkerStub chunkerStub;\n     \n     private Invocation simpleMethod;\n     private InvocationMatcher differentMethod;\n     \n     @Before\n     public void setup() {\n-        verifier = new VerifierStub();\n-        marker = new InvocationsMarkerStub();\n-        chunker = new InvocationsChunkerStub();\n-        recorder = new VerifyingRecorder(chunker, marker, Arrays.<Verifier>asList(verifier));\n+        verifierStub = new VerifierStub();\n+        markerStub = new InvocationsMarkerStub();\n+        chunkerStub = new InvocationsChunkerStub();\n+        recorder = new VerifyingRecorder(chunkerStub, markerStub, Arrays.<Verifier>asList(verifierStub));\n \n         simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n         differentMethod = new InvocationBuilder().differentMethod().toInvocationMatcher();\n         VerificationMode mode = VerificationMode.atLeastOnce();\n         recorder.verify(differentMethod, mode);\n         \n-        assertThat(marker.invocations, collectionHasExactlyInOrder(simpleMethod));\n-        assertEquals(marker.mode, mode);\n-        assertEquals(marker.wanted, differentMethod);\n+        assertThat(markerStub.invocations, collectionHasExactlyInOrder(simpleMethod));\n+        assertEquals(markerStub.mode, mode);\n+        assertEquals(markerStub.wanted, differentMethod);\n     }\n     \n     @Test\n         VerificationMode mode = VerificationMode.atLeastOnce();\n         recorder.verify(differentMethod, mode);\n         \n-        assertEquals(verifier.mode, mode);\n-        assertSame(verifier.wanted, differentMethod);\n-        assertThat(verifier.calculator.getInvocations(), collectionHasExactlyInOrder(simpleMethod));\n+        assertEquals(verifierStub.mode, mode);\n+        assertSame(verifierStub.wanted, differentMethod);\n+        assertThat(verifierStub.calculator.getInvocations(), collectionHasExactlyInOrder(simpleMethod));\n     }\n     \n     @Test\n         VerificationMode mode = new VerificationModeBuilder().strict();\n         recorder.verify(differentMethod, mode);\n         \n-        assertEquals(verifier.mode, mode);\n-        assertEquals(verifier.wanted, differentMethod);\n-        assertThat(verifier.calculator.getInvocations(), collectionHasExactlyInOrder(differentMethod.getInvocation()));\n+        assertEquals(verifierStub.mode, mode);\n+        assertEquals(verifierStub.wanted, differentMethod);\n+        assertThat(verifierStub.calculator.getInvocations(), collectionHasExactlyInOrder(differentMethod.getInvocation()));\n+    }\n+    \n+    @Test\n+    public void shouldNotMarkInvocationsAsVerifiedWhenModeIsNotExplicit() {\n+        VerificationMode mode = VerificationMode.noMoreInteractions();\n+        recorder.verify(mode);\n+        assertNull(markerStub.mode);\n     }\n     \n     class InvocationsMarkerStub extends InvocationsMarker {\n             this.wanted = wanted;\n             this.mode = mode;\n             \n-            assertNotNull(\"marking should happen after verification\", verifier.calculator);\n+            assertNotNull(\"marking should happen after verification\", verifierStub.calculator);\n         }\n     }\n     ", "timestamp": 1197663299, "metainfo": ""}