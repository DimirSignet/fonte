{"sha": "e5e226299afdf6eab8d272f393e092350c99df4c", "log": "tidy-up, removed code not covered by tests, added TODOs", "commit": "\n--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n                                 + \"\\nIf you are mocking an inner class please ensure the instance of the outer class is supplied via withSettings().outerInstance()\"\n                                 + \"\\nThe outer class is: '\" + enclosing.getSimpleName() + \"'\");\n \t        \t\t}\n-\t        \t\tif (Modifier.isPrivate(type.getDeclaredConstructor(enclosing).getModifiers())) {\n-\t        \t\t\tthrow new MockitoException(\"Cannot spy inner \" + type + \" with private constructor\");\n-\t        \t\t}\n+                    //TODO SF find out if it is useful\n+//\t        \t\tif (Modifier.isPrivate(type.getDeclaredConstructor(enclosing).getModifiers())) {\n+//                        throw new AssertionError();\n+//\t        \t\t\tthrow new MockitoException(\"Unable to initialize @Spy annotated field '\" + field.getName() + \"'. \"\n+//                                + \"Cannot spy inner type '\" + type.getSimpleName() + \"' because it has private constructor.\");\n+//\t        \t\t}\n \t        \t\treturn Mockito.mock(type, settings\n \t        \t\t\t\t.useConstructor()\n \t        \t\t\t\t.outerInstance(testInstance));\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.util;\n-\n-import java.lang.reflect.Modifier;\n \n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n import org.mockito.plugins.MockMaker;\n+\n+import java.lang.reflect.Modifier;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n     }\n \n     public boolean isSpy(Object mock) {\n+        //TODO SF, spy is determined by default answer\n         return isMockitoMock(mock) &&\n         \t\t(getMockSettings(mock).getSpiedInstance() != null\n         \t\t    || getMockSettings(mock).isUsingConstructor());\n--- a/test/org/mockitousage/annotation/SpyAnnotationTest.java\n+++ b/test/org/mockitousage/annotation/SpyAnnotationTest.java\n \t\tWithSpy withSpy = new WithSpy();\n         MockitoAnnotations.initMocks(withSpy);\n         assertEquals(0, withSpy.list.size());\n+        //TODO SF prevent\n     }\n \n     @Test", "timestamp": 1417513678, "metainfo": ""}