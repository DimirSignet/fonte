{"sha": "9d1a555c0d8094a4e4b60ddb3626a1526ab48382", "log": "minor javadoc fixes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40871", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n /**\n  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n  * <p>\n- * {@link Mockito} extends Matchers so to get access to matchers just import Mockito class statically.\n+ * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n  * <pre>\n  *  //stubbing using anyInt() argument matcher\n  *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n     /**\n      * Allows creating custom argument matchers.\n      * <p>\n-     * See examples in javadoc for {@link Matchers} class\n+     * See examples in javadoc for {@link ArgumentMatcher} class\n      * \n      * @param matcher decides whether argument matches\n      * @return <code>null</code>.\n--- a/src/org/mockito/Mock.java\n+++ b/src/org/mockito/Mock.java\n import java.lang.annotation.Target;\n \n import org.mockito.runners.MockitoJUnit44Runner;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n  * <ul>\n  * <li>Allows shorthand mock creation.</li> \n  * <li>Minimizes repetitive mock creation code.</li> \n  * <li>Makes the test class more readable.</li>\n- * <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>\n+ * <li>Makes the verification error easier to read because the <b>field name</b> is used to identify the mock.</li>\n  * </ul>\n  * \n  * <pre>\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n- * You can also put it in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}\n+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}\n  */\n @Target( { FIELD })\n @Retention(RetentionPolicy.RUNTIME)\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      7. Making sure interaction(s) never happened on mock <br/> \n  *      8. Finding redundant invocations <br/> \n  *      9. Shorthand for mocks creation - &#064;Mock annotation <br/> \n- *      10. (**New**) Stubbing consecutive calls (iterator-style stubbing) <br/> \n- *      11. (**Totally New**) Stubbing with callbacks <br/>\n- *      12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>\n- *      13. (**Totally New**) Spying on real objects <br/>\n+ *      10. Stubbing consecutive calls (iterator-style stubbing) <br/> \n+ *      11. Stubbing with callbacks <br/>\n+ *      12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>\n+ *      13. Spying on real objects <br/>\n  * </b>\n  * \n  * <p>\n- * Following examples mock List, because everyone knows its interface (methods\n+ * Following examples mock a List, because everyone knows its interface (methods\n  * like add(), get(), clear() will be used). <br>\n  * You probably wouldn't mock List class 'in real'.\n  * \n  * </pre>\n  * \n  * <p>\n- * Once created, mock will remember all invocations. Then you can selectively\n+ * Once created, mock will remember all interactions. Then you can selectively\n  * verify whatever interaction you are interested in.\n  * \n  * <h3>2. How about some stubbing?</h3>\n  * //following prints \"element\"\n  * System.out.println(mockedList.get(999));\n  * \n- * //<b>you can also verify using argument matcher</b>\n+ * //<b>you can also verify using an argument matcher</b>\n  * verify(mockedList).get(anyInt());\n  * </pre>\n  * \n  * <p>\n- * Argument matchers allow flexible verification or stubbing. See the <b>whole\n- * library of</b> {@link Matchers} including examples of <b>custom argument\n- * matchers / hamcrest matchers</b>.\n+ * Argument matchers allow flexible verification or stubbing. \n+ * {@link Matchers Click here to see} more built-in matchers \n+ * and examples of <b>custom argument matchers / hamcrest matchers</b>.\n  * <p>\n  * <b>Warning:</b>\n  * <p>\n  *   //above is correct - eq() is also an argument matcher\n  *   \n  *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n- *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n- * </pre>\n- * \n- * <h3>4. Verifying exact number of invocations / at least once / never</h3>\n+ *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.\n+ * </pre>\n+ * \n+ * <h3>4. Verifying exact number of invocations / at least x / never</h3>\n  * \n  * <pre>\n  * //using mock \n  * \n  * <h3>5. Stubbing void methods with exceptions</h3>\n  * \n- * {@link Mockito#doThrow(Throwable)} replaces {@link Mockito#stubVoid(Object)} because of improved readability and consistency with the family of doAnswer() methods. \n- * <p>\n- * See paragraph 12.\n+ * <pre>\n+ *   doThrow(new RuntimeException()).when(mockedList).clear();\n+ *   \n+ *   //following throws RuntimeException:\n+ *   mockedList.clear();\n+ * </pre>\n+ * \n+ * Read more about doThrow|doAnswer family of methods in paragraph 12.\n+ * <p>\n+ * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n+ * Currently stubVoid() is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n+ * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods. \n  * \n  * <h3>6. Verification in order</h3>\n  * \n  * verifyZeroInteractions(mockTwo, mockThree);\n  * \n  * </pre>\n- * \n- * <p>\n- * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions()\n- * but the first one is more explicit and can read better.\n  * \n  * <h3>8. Finding redundant invocations</h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.</li>\n  * <li>Makes the test class more readable.</li>\n- * <li>Makes the verification error easier to read because <b>field name</b>\n+ * <li>Makes the verification error easier to read because the <b>field name</b>\n  * is used to identify the mock.</li>\n  * </ul>\n  * \n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  * \n- * <h3> 10. (**New**) Stubbing consecutive calls (iterator-style stubbing)</h3>\n+ * <h3> 10. Stubbing consecutive calls (iterator-style stubbing)</h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same\n  * method call. Typical use case could be mocking iterators. \n  * System.out.println(mock.someMethod(\"some arg\"));\n  * </pre>\n  * \n- * <h3> 11. (**Totally New**) Stubbing with callbacks</h3>\n+ * <h3> 11. Stubbing with callbacks</h3>\n  * \n  * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n  * Yet another controversial feature which was not included in Mockito\n  * originally. We recommend using simple stubbing with toReturn() or\n  * toThrow() only. Those two should be <b>just enough</b> to test/test-drive\n- * any decent (clean & simple) code.\n+ * any clean & simple code.\n  * \n  * <pre>\n  * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </pre>\n  * \n- * <h3> 12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>\n+ * <h3> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>\n  * \n  * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n  * <p>\n  * <p>\n  * {@link Mockito#doReturn(Object)}\n  * \n- * <h3> 13. (**Totally New**) Spying on real objects</h3>\n+ * <h3> 13. Spying on real objects</h3>\n  * \n  * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called (unless a method was stubbed).\n  * <p>\n  * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n  * <p>\n- * Spying on real objects is associated with \"partial mocking\" concept. \n+ * Spying on real objects is often associated with \"partial mocking\" concept. \n  * \n  * <pre>\n  *   List list = new LinkedList();\n     /**\n      * Creates mock with a name. Naming mocks can be helpful for debugging. \n      * <p>\n-     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. In that case we recommend merciless refactoring.\n-     * <p>\n-     * If you use &#064;Mock annotation then you've got naming mocks for free. &#064;Mock uses field name as mock name.\n+     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \n+     * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.\n+     * <p>\n+     * <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\n      * <p>\n      * \n      * See examples in javadoc for {@link Mockito} class\n      * <p>\n      * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n      * <p>\n-     * Spying on real objects is associated with \"partial mocking\" concept.\n+     * Spying on real objects is often associated with \"partial mocking\" concept.\n      * <p>\n      * Example:\n      * \n     }\n \n     /**\n-     * <b>Deprecated</b>\n-     * \n      * <pre>\n      *   //Instead of:\n      *   stub(mock.count()).toReturn(10);\n      *   when(mock.count()).thenReturn(10);\n      * </pre> \n      * \n-     * stub() is replaced by {@link Mockito#when()} because many users found stub() confusing. \n+     * Many unexperienced users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} \n      * <p>\n      * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:\n      * <pre>\n-     *   stub( -> when(\n-     *   .toReturn( -> .thenReturn(\n-     *   .toThrow( -> .thenThrow(\n-     *   .toAnswer( -> .thenAnswer(\n+     *   stub(       <i>replace with:</i>  when(\n+     *   .toReturn(  <i>replace with:</i>  .thenReturn(\n+     *   .toThrow(   <i>replace with:</i>  .thenThrow(\n+     *   .toAnswer(  <i>replace with:</i>  .thenAnswer(\n      * </pre>\n      * If you're an existing user then sorry for making your code littered with deprecation warnings. \n      * This change was required to make Mockito better.\n      * Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called. \n      * <p>\n      * Simply put: \"<b>When</b> the x method is called <b>then</b> return y\". E.g:\n-     * <p>\n-     * when() is a successor of {@link Mockito#stub()}\n-     * \n-     * <pre>\n-     * when(mock.someMethod()).thenReturn(10);\n+     * \n+     * <pre>\n+     * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);\n      *\n      * //you can use flexible argument matchers, e.g:\n      * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);\n      * \n      * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable)}\n      * <p>\n+     * when() is a successor of {@link Mockito#stub(Object)}\n+     * <p>\n      * Stubbing can be overridden: for example common stubbing can go to fixture\n      * setup but the test methods can override it.\n      * <p>\n      * \n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n-     * @param <T>\n-     * @param methodCall\n-     * @return\n+     * @param methodCall method to be stubbed\n      */\n     public static <T> NewOngoingStubbing<T> when(T methodCall) {\n         MOCKING_PROGRESS.stubbingStarted();\n     }\n \n     /**\n-     * Throws an AssertionError if any of given mocks has any unverified\n-     * interaction.\n+     * Checks if any of given mocks has any unverified interaction.\n      * <p>\n      * You can use this method after you verified your mocks - to make sure that nothing\n      * else was invoked on your mocks.\n      *   verifyZeroInteractions(mockOne, mockTwo);\n      * </pre>\n      * \n-     * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n-     * the first one is more explicit and can read better.\n-     * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param mocks to be verified\n     }\n \n     /**\n-     * <b>Deprecated</b>\n-     * \n      * <pre>\n      *   //Instead of:\n      *   stubVoid(mock).toThrow(e).on().someVoidMethod();\n     }  \n     \n     /**\n-     * Use doNothing() for setting void methods to do nothing. <b>Beware</b> that void methods do nothing by default! \n+     * Use doNothing() for setting void methods to do nothing. <b>Beware that void methods on mocks do nothing by default!</b> \n      * However, there are rare situations when doNothing() comes handy:  \n      * <p>\n      * 1. Stubbing consecutive calls on a void method:\n     /**\n      * Use doReturn() in those rare occasions when you cannot use {@link Mockito#when(Object)}.\n      * <p>\n-     * Beware that {@link Mockito#when(Object)} is <b>always recommended</b> for stubbing because it is argument type-safe \n-     * and more readable (especially when stubbing consecutive calls). \n-     * <p>\n-     * However, there are occasions when doReturn() comes handy:\n+     * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe \n+     * and more readable</b> (especially when stubbing consecutive calls). \n+     * <p>\n+     * Here are those rare occasions when doReturn() comes handy:\n      * <p>\n      * \n      * 1. When spying real objects and calling real methods on a spy brings side effects  \n      * <pre>\n      *   when(mock.foo()).thenThrow(new RuntimeException());\n      *   \n-     *   //Impossible: the exception-stubbed foo() method is really called so RuntimeException is thrown. \n+     *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown. \n      *   when(mock.foo()).thenReturn(\"bar\");\n      *   \n      *   //You have to use doReturn() for stubbing:\n      *   doReturn(\"bar\").when(mock).foo();\n      * </pre>\n      * \n-     * Above scenario shows a tradeoff of Mockito's ellegant syntax. The scenario is very rare, though.\n+     * Above scenarios shows a tradeoff of Mockito's ellegant syntax. Note that the scenarios are very rare, though. \n+     * Spying should be sporadic and overriding exception-stubbing is very rare.  \n      * \n      * @param toBeReturned to be returned when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n         InOrder inOrderVerifier = new InOrderVerifier(Arrays.asList(mocks));\n         return inOrderVerifier;\n     }\n-\n+  \n+    /**\n+     * Allows verifying exact number of invocations. E.g:\n+     * <pre>\n+     *   verify(mock, times(2)).someMethod(\"some arg\");\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param wantedNumberOfInvocations wanted number of invocations \n+     * \n+     * @return verification mode\n+     */\n+    public static VerificationMode times(int wantedNumberOfInvocations) {\n+        return VerificationModeImpl.times(wantedNumberOfInvocations);\n+    }\n+    \n+    /**\n+     * Alias to times(0), see {@link Mockito#times(int)}\n+     * <p>\n+     * Verifies that interaction did not happen. E.g:\n+     * <pre>\n+     *   verify(mock, never()).someMethod();\n+     * </pre>\n+     * \n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @return verification mode\n+     */\n+    public static VerificationMode never() {\n+        return times(0);\n+    }\n+    \n     /**\n      * Allows at-least-once verification. E.g:\n      * <pre>\n     public static VerificationMode atLeast(int minNumberOfInvocations) {\n         return VerificationModeImpl.atLeast(minNumberOfInvocations);\n     }\n-    \n-    /**\n-     * Allows verifying exact number of invocations. E.g:\n-     * <pre>\n-     *   verify(mock, times(2)).someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param wantedNumberOfInvocations wanted number of invocations \n-     * \n-     * @return verification mode\n-     */\n-    public static VerificationMode times(int wantedNumberOfInvocations) {\n-        return VerificationModeImpl.times(wantedNumberOfInvocations);\n-    }\n-    \n-    /**\n-     * Alias to times(0), see {@link Mockito#times(int)}\n-     * <p>\n-     * Verifies that interaction did not happen\n-     * <pre>\n-     *   verify(mock, never()).someMethod();\n-     * </pre>\n-     * \n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @return verification mode\n-     */\n-    public static VerificationMode never() {\n-        return times(0);\n-    }\n }\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.runners.MockitoJUnit44Runner;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n  * <ul>\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n- * You can also put it in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}\n+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}\n  */\n public class MockitoAnnotations {\n \n     /**\n-     * <b>Deprecated</b> \n      * Use top-level {@link org.mockito.Mock} annotation instead\n      * <p>\n      * When &#064;Mock annotation was implemented as an inner class then users experienced problems with autocomplete features in IDEs. \n     \n     /**\n      * Initializes objects annotated with &#064;Mock for given testClass.\n+     * <p>\n      * See examples in javadoc for {@link MockitoAnnotations} class.\n      */\n     public static void initMocks(Object testClass) {\n--- a/src/org/mockito/internal/progress/NewOngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/NewOngoingStubbing.java\n  * Simply put: \"<b>When</b> the x method is called <b>then</b> return y\". E.g:\n  *\n  * <pre>\n- * when(mock.someMethod()).thenReturn(10);\n+ * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);\n  *\n  * //you can use flexible argument matchers, e.g:\n  * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n  * <pre>\n  *   verify(mock, times(5)).someMethod(\"was called five times\");\n  *   \n+ *   verify(mock, never()).someMethod(\"was never called\");\n+\n  *   verify(mock, atLeastOnce()).someMethod(\"was called at least once\");\n  *   \n- *   verify(mock, never()).someMethod(\"was never called\");\n+ *   verify(mock, atLeast(2)).someMethod(\"was called at least twice\");\n+ *   \n  * </pre>\n  * \n  * <b>times(1) is the default</b> and can be omitted\n--- a/src/org/mockito/runners/MockitoJUnit44Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit44Runner.java\n import org.mockito.MockitoAnnotations;\n \n /**\n- * JUnit 4.0-4.4 runner initializes mocks annotated with {@link Mock},\n+ * <b>JUnit 4.0-4.4</b> runner initializes mocks annotated with {@link Mock},\n  * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n  * Mocks are initialized before each test method. \n  * <p>\n  * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n  * <p>\n- * Read more in javadoc for {@link MockitoAnnotations#initMocks(Object)}\n+ * Read more in javadoc for {@link MockitoAnnotations}\n  * <p>\n  * Example:\n  * <pre>\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n import org.mockito.MockitoAnnotations;\n \n /**\n- * Uses new default JUnit's runner {@link BlockJUnit4ClassRunner}.\n+ * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n  * <p>\n  * JUnit 4.5 runner initializes mocks annotated with {@link Mock},\n  * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n  * <p>\n  * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n  * <p>\n- * Read more in javadoc for {@link MockitoAnnotations#initMocks(Object)}\n+ * Read more in javadoc for {@link MockitoAnnotations}\n  * <p>\n  * Example:\n  * <pre>\n- * &#064;RunWith(MockitoJUnit44Runner.class)\n+ * <b>&#064;RunWith(MockitoJUnit44Runner.class)</b>\n  * public class ExampleTest {\n  * \n  *     &#064;Mock", "timestamp": 1221390860, "metainfo": ""}