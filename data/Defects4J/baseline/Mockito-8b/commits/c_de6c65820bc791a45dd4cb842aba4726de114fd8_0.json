{"sha": "de6c65820bc791a45dd4cb842aba4726de114fd8", "log": "Avoided a singleton.  Reworked the code so that we can avoid more singletons. It also fixes a failing test.", "commit": "\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n \n import org.mockito.Incubating;\n import org.mockito.exceptions.base.MockitoSerializationIssue;\n+import org.mockito.internal.creation.instance.CachingObjenesisInstanceFactory;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.FieldSetter;\n             // ClassImposterizer.INSTANCE.canImposterise(typeToMock);\n \n             // create the Mockito mock class before it can even be deserialized\n-            ClassImposterizer.INSTANCE.setConstructorsAccessible(typeToMock, true);\n-            Class<?> proxyClass = ClassImposterizer.INSTANCE.createProxyClass(\n+            //TODO SF unify creation of imposterizer, constructor code duplicated\n+            ClassImposterizer imposterizer = new ClassImposterizer(new CachingObjenesisInstanceFactory());\n+            imposterizer.setConstructorsAccessible(typeToMock, true);\n+            Class<?> proxyClass = imposterizer.createProxyClass(\n                     typeToMock,\n                     extraInterfaces.toArray(new Class[extraInterfaces.size()])\n             );\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.InternalMockHandler;\n-import org.mockito.internal.creation.instance.InstanceFactory;\n-import org.mockito.internal.creation.instance.ObjenesisInstanceFactory;\n+import org.mockito.internal.creation.instance.CachingObjenesisInstanceFactory;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n  */\n public final class CglibMockMaker implements MockMaker {\n \n-    private final static InstanceFactory INSTANCE_FACTORY = new ObjenesisInstanceFactory();\n \n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\n-        return ClassImposterizer.INSTANCE.imposterise(INSTANCE_FACTORY,\n+        return new ClassImposterizer(new CachingObjenesisInstanceFactory()).imposterise(\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/CachingObjenesisInstanceFactory.java\n+package org.mockito.internal.creation.instance;\n+\n+public class CachingObjenesisInstanceFactory implements InstanceFactory {\n+\n+    private static ObjenesisInstanceFactory INSTANCE = new ObjenesisInstanceFactory();\n+\n+    public <T> T newInstance(Class<T> cls) {\n+        return INSTANCE.newInstance(cls);\n+    }\n+}\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n  */\n public class ClassImposterizer  {\n \n-    //TODO SF no singleton!!!\n-    public static final ClassImposterizer INSTANCE = new ClassImposterizer();\n-    \n-    private ClassImposterizer() {}\n+    private final InstanceFactory instanceFactory;\n+\n+    public ClassImposterizer(InstanceFactory instanceFactory) {\n+        this.instanceFactory = instanceFactory;\n+    }\n     \n     private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {\n         @Override\n         }\n     };\n     \n-    public <T> T imposterise(InstanceFactory factory, final MethodInterceptor interceptor, Class<T> mockedType, Collection<Class> ancillaryTypes) {\n-        return imposterise(factory, interceptor, mockedType, ancillaryTypes.toArray(new Class[ancillaryTypes.size()]));\n+    public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Collection<Class> ancillaryTypes) {\n+        return imposterise(interceptor, mockedType, ancillaryTypes.toArray(new Class[ancillaryTypes.size()]));\n     }\n     \n-    public <T> T imposterise(InstanceFactory factory, final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\n+    public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\n         Class<Factory> proxyClass = null;\n         Object proxyInstance = null;\n         try {\n             setConstructorsAccessible(mockedType, true);\n             proxyClass = createProxyClass(mockedType, ancillaryTypes);\n-            proxyInstance = createProxy(factory, proxyClass, interceptor);\n+            proxyInstance = createProxy(proxyClass, interceptor);\n             return mockedType.cast(proxyInstance);\n         } catch (ClassCastException cce) {\n             throw new MockitoException(join(\n                 \"ClassCastException occurred while creating the mockito proxy :\",\n-                \"  class to mock : '\" + describeClass(mockedType),\n-                \"  created class : '\" + describeClass(proxyClass),\n-                \"  proxy instance class : '\" + describeClass(proxyInstance),\n-                \"  instance creation by : '\" + factory.getClass().getSimpleName(),\n+                \"  class to mock : \" + describeClass(mockedType),\n+                \"  created class : \" + describeClass(proxyClass),\n+                \"  proxy instance class : \" + describeClass(proxyInstance),\n+                \"  instance creation by : \" + instanceFactory.getClass().getSimpleName(),\n                 \"\",\n                 \"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)\"\n             ), cce);\n     }\n \n     private static String describeClass(Class type) {\n-        return type == null? \"null\" : type.getCanonicalName() + \"', loaded by classloader : '\" + type.getClassLoader() + \"'\";\n+        return type == null? \"null\" : \"'\" + type.getCanonicalName() + \"', loaded by classloader : '\" + type.getClassLoader() + \"'\";\n     }\n \n     private static String describeClass(Object instance) {\n         }\n     }\n     \n-    private Object createProxy(InstanceFactory factory, Class<Factory> proxyClass, final MethodInterceptor interceptor) {\n-        Factory proxy = factory.newInstance(proxyClass);\n+    private Object createProxy(Class<Factory> proxyClass, final MethodInterceptor interceptor) {\n+        Factory proxy = instanceFactory.newInstance(proxyClass);\n         proxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\n         return proxy;\n     }\n--- a/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n @SuppressWarnings(\"unchecked\")\n public class ClassImposterizerTest extends TestBase {\n \n+    ClassImposterizer imposterizer = new ClassImposterizer(new ObjenesisInstanceFactory());\n+\n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {\n-        SomeInterface proxy = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeInterface.class);\n+        SomeInterface proxy = imposterizer.imposterise(new MethodInterceptorStub(), SomeInterface.class);\n         \n         Class superClass = proxy.getClass().getSuperclass();\n         assertEquals(Object.class, superClass);\n     \n     @Test\n     public void shouldCreateMockFromClass() throws Exception {\n-        ClassWithoutConstructor proxy = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), ClassWithoutConstructor.class);\n+        ClassWithoutConstructor proxy = imposterizer.imposterise(new MethodInterceptorStub(), ClassWithoutConstructor.class);\n         \n         Class superClass = proxy.getClass().getSuperclass();\n         assertEquals(ClassWithoutConstructor.class, superClass);\n             fail();\n         } catch (Exception e) {}\n         \n-        ClassWithDodgyConstructor mock = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), ClassWithDodgyConstructor.class);\n+        ClassWithDodgyConstructor mock = imposterizer.imposterise(new MethodInterceptorStub(), ClassWithDodgyConstructor.class);\n         assertNotNull(mock);\n     }\n     \n     @Test \n     public void shouldMocksHaveDifferentInterceptors() throws Exception {\n-        SomeClass mockOne = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeClass.class);\n-        SomeClass mockTwo = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeClass.class);\n+        SomeClass mockOne = imposterizer.imposterise(new MethodInterceptorStub(), SomeClass.class);\n+        SomeClass mockTwo = imposterizer.imposterise(new MethodInterceptorStub(), SomeClass.class);\n         \n         Factory cglibFactoryOne = (Factory) mockOne;\n         Factory cglibFactoryTwo = (Factory) mockTwo;\n     \n     @Test\n     public void shouldUseAnicilliaryTypes() {\n-        SomeClass mock = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeClass.class, SomeInterface.class);\n+        SomeClass mock = imposterizer.imposterise(new MethodInterceptorStub(), SomeClass.class, SomeInterface.class);\n         \n         assertThat(mock, is(instanceOf(SomeInterface.class)));\n     }\n \n     @Test\n     public void shouldCreateClassByConstructor() {\n-        OtherClass mock = ClassImposterizer.INSTANCE.imposterise(new ConstructorInstanceFactory(), new MethodInterceptorStub(), OtherClass.class);\n+        imposterizer = new ClassImposterizer(new ConstructorInstanceFactory());\n+        OtherClass mock = imposterizer.imposterise(new MethodInterceptorStub(), OtherClass.class);\n         assertNotNull(mock);\n     }\n ", "timestamp": 1413584484, "metainfo": ""}