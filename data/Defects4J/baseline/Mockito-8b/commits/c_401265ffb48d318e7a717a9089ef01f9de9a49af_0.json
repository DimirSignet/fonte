{"sha": "401265ffb48d318e7a717a9089ef01f9de9a49af", "log": "removed some duplication from Reporter  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40245", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 ));\n \n     }\n-\n-    public void wantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n-        WantedDiffersFromActual cause = new WantedDiffersFromActual(join(\n-                \"Actual invocation:\",\n-                actual\n-            ));\n-\n-        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n-\n-        throw new InvocationDiffersFromActual(join(\n-                \"Invocation differs from actual\",\n-                \"Wanted invocation:\",\n-                wanted\n-            ), cause);\n-    }\n-    \n-    public void strictlyWantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n-        WantedDiffersFromActual cause = new WantedDiffersFromActual(join(\n-                \"Actual invocation:\",\n-                actual\n-            ));\n-\n-        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n-\n-        throw new StrictVerificationFailure(join(\n-                \"Strict verification failure\",\n-                \"Wanted invocation:\",\n-                wanted\n-            ), cause);\n-    }\n-    \n-    private void wantedDiffersFromActual(String message, String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n-        \n-    }\n-\n-    public void wantedButNotInvoked(String wanted) {\n-        throw new WantedButNotInvoked(join(\n-                    \"Wanted but not invoked:\",\n-                    wanted\n-        ));\n-    }\n-    \n-    public void strictlyWantedButNotInvoked(String wanted) {\n-        throw new StrictVerificationFailure(join(\n-                    \"Strict verification failure\",\n-                    \"Wanted but not invoked:\",\n-                    wanted\n-        ));\n-    }\n-\n-    public void tooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n-        UndesiredInvocation cause = new UndesiredInvocation(join(\"Undesired invocation:\"));\n-        cause.setStackTrace(firstUndesired.getStackTrace());\n-\n-        throw new TooManyActualInvocations(join(\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }\n-    \n-    //TODO duplicated\n-    public void strictlyTooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n-        UndesiredInvocation cause = new UndesiredInvocation(join(\"Undesired invocation:\"));\n-        cause.setStackTrace(firstUndesired.getStackTrace());\n-\n-        throw new StrictVerificationFailure(join(\n-                \"Strict verification failure\",\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }    \n-\n-    public void tooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualInvocationStackTrace) {\n-        TooLittleInvocations cause = null;\n-        if (lastActualInvocationStackTrace != null) {\n-            cause = new TooLittleInvocations(join(\"Too little invocations:\"));\n-            cause.setStackTrace(lastActualInvocationStackTrace.getStackTrace());\n-        }\n-\n-        throw new TooLittleActualInvocations(join(\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }\n-    \n-    public void strictlyTooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualStackTrace) {\n-        TooLittleInvocations cause = null;\n-        if (lastActualStackTrace != null) {\n-            cause = new TooLittleInvocations(join(\"Too little invocations:\"));\n-            cause.setStackTrace(lastActualStackTrace.getStackTrace());\n-        }\n-\n-        throw new StrictVerificationFailure(join(\n-                \"Strict verification failure\",\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }\n-\n-    public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n-        UndesiredInvocation cause = new UndesiredInvocation(join(\n-                \"Undesired invocation:\", \n-                undesired\n-        ));\n-        \n-        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n-        throw new NoInteractionsWanted(join(\"No interactions wanted\"), cause);\n-    }\n-\n+    \n     public void unfinishedStubbing() {\n         throw new UnfinishedStubbingException(join(\n                 \"Unifinished stubbing detected, e.g. toReturn() is missing\",\n                 \"Should be something like that: verify(mock).doSomething()\"\n         ));\n     }\n+\n+    public void wantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n+        WantedDiffersFromActual cause = createDiscrepancyCause(actual, actualInvocationStackTrace);\n+\n+        throw new InvocationDiffersFromActual(join(\n+                \"Invocation differs from actual\",\n+                \"Wanted invocation:\",\n+                wanted\n+            ), cause);\n+    }\n+    \n+    public void strictlyWantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n+        WantedDiffersFromActual cause = createDiscrepancyCause(actual, actualInvocationStackTrace);\n+\n+        throw new StrictVerificationFailure(join(\n+                \"Strict verification failure\",\n+                \"Wanted invocation:\",\n+                wanted\n+            ), cause);\n+    }\n+\n+    private WantedDiffersFromActual createDiscrepancyCause(String actual, HasStackTrace actualInvocationStackTrace) {\n+        WantedDiffersFromActual cause = new WantedDiffersFromActual(join(\n+                \"Actual invocation:\",\n+                actual\n+            ));\n+\n+        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n+        return cause;\n+    }\n+    \n+    public void wantedButNotInvoked(String wanted) {\n+        throw new WantedButNotInvoked(join(\n+                    \"Wanted but not invoked:\",\n+                    wanted\n+        ));\n+    }\n+    \n+    public void strictlyWantedButNotInvoked(String wanted) {\n+        throw new StrictVerificationFailure(join(\n+                    \"Strict verification failure\",\n+                    \"Wanted but not invoked:\",\n+                    wanted\n+        ));\n+    }\n+\n+    public void tooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n+        UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n+\n+        throw new TooManyActualInvocations(join(\n+                wanted,\n+                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+    \n+    public void strictlyTooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n+        UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n+\n+        throw new StrictVerificationFailure(join(\n+                \"Strict verification failure\",\n+                wanted,\n+                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+\n+    private UndesiredInvocation createUndesiredInvocationCause(HasStackTrace firstUndesired) {\n+        UndesiredInvocation cause = new UndesiredInvocation(join(\"Undesired invocation:\"));\n+        cause.setStackTrace(firstUndesired.getStackTrace());\n+        return cause;\n+    }    \n+\n+    public void tooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualInvocationStackTrace) {\n+        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualInvocationStackTrace);\n+\n+        throw new TooLittleActualInvocations(join(\n+                wanted,\n+                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+\n+    \n+    public void strictlyTooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualStackTrace) {\n+        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n+\n+        throw new StrictVerificationFailure(join(\n+                \"Strict verification failure\",\n+                wanted,\n+                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+    \n+    private TooLittleInvocations createTooLittleInvocationsCause(HasStackTrace lastActualInvocationStackTrace) {\n+        TooLittleInvocations cause = null;\n+        if (lastActualInvocationStackTrace != null) {\n+            cause = new TooLittleInvocations(join(\"Too little invocations:\"));\n+            cause.setStackTrace(lastActualInvocationStackTrace.getStackTrace());\n+        }\n+        return cause;\n+    }\n+\n+    public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n+        UndesiredInvocation cause = new UndesiredInvocation(join(\n+                \"Undesired invocation:\", \n+                undesired\n+        ));\n+        \n+        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n+        throw new NoInteractionsWanted(join(\"No interactions wanted\"), cause);\n+    }\n }", "timestamp": 1198950960, "metainfo": ""}