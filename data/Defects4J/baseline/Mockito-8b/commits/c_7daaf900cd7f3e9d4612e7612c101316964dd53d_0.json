{"sha": "7daaf900cd7f3e9d4612e7612c101316964dd53d", "log": "In order to have consistent formatting made tabs = 4 spaces  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401645", "commit": "\n--- a/src/org/mockito/internal/invocation/MockitoMethod.java\n+++ b/src/org/mockito/internal/invocation/MockitoMethod.java\n \n public class MockitoMethod implements Serializable {\n \n-  private static final long serialVersionUID = 6005610965006048445L;\n-  private Class<?> declaringClass;\n-  private String methodName;\n-  private Class<?>[] parameterTypes;\n-  private Class<?> returnType;\n+    private static final long serialVersionUID = 6005610965006048445L;\n+    private Class<?> declaringClass;\n+    private String methodName;\n+    private Class<?>[] parameterTypes;\n+    private Class<?> returnType;\n \n-  public MockitoMethod(Method method) {\n-    declaringClass = method.getDeclaringClass();\n-    methodName = method.getName();\n-    parameterTypes = method.getParameterTypes();\n-    returnType = method.getReturnType();\n-  }\n+    public MockitoMethod(Method method) {\n+        declaringClass = method.getDeclaringClass();\n+        methodName = method.getName();\n+        parameterTypes = method.getParameterTypes();\n+        returnType = method.getReturnType();\n+    }\n \n-  @Override\n-  public int hashCode() {\n-    final int prime = 31;\n-    int result = 1;\n-    result = prime * result + ((declaringClass == null) ? 0 : declaringClass.hashCode());\n-    result = prime * result + ((methodName == null) ? 0 : methodName.hashCode());\n-    result = prime * result + Arrays.hashCode(parameterTypes);\n-    result = prime * result + ((returnType == null) ? 0 : returnType.hashCode());\n-    return result;\n-  }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((declaringClass == null) ? 0 : declaringClass.hashCode());\n+        result = prime * result + ((methodName == null) ? 0 : methodName.hashCode());\n+        result = prime * result + Arrays.hashCode(parameterTypes);\n+        result = prime * result + ((returnType == null) ? 0 : returnType.hashCode());\n+        return result;\n+    }\n \n-  @Override\n-  public boolean equals(Object obj) {\n-    if (this == obj)\n-      return true;\n-    if (obj == null)\n-      return false;\n-    if (getClass() != obj.getClass())\n-      return false;\n-    MockitoMethod other = (MockitoMethod) obj;\n-    if (declaringClass == null) {\n-      if (other.declaringClass != null)\n-        return false;\n-    } else if (!declaringClass.equals(other.declaringClass))\n-      return false;\n-    if (methodName == null) {\n-      if (other.methodName != null)\n-        return false;\n-    } else if (!methodName.equals(other.methodName))\n-      return false;\n-    if (!Arrays.equals(parameterTypes, other.parameterTypes))\n-      return false;\n-    if (returnType == null) {\n-      if (other.returnType != null)\n-        return false;\n-    } else if (!returnType.equals(other.returnType))\n-      return false;\n-    return true;\n-  }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        MockitoMethod other = (MockitoMethod) obj;\n+        if (declaringClass == null) {\n+            if (other.declaringClass != null)\n+                return false;\n+        } else if (!declaringClass.equals(other.declaringClass))\n+            return false;\n+        if (methodName == null) {\n+            if (other.methodName != null)\n+                return false;\n+        } else if (!methodName.equals(other.methodName))\n+            return false;\n+        if (!Arrays.equals(parameterTypes, other.parameterTypes))\n+            return false;\n+        if (returnType == null) {\n+            if (other.returnType != null)\n+                return false;\n+        } else if (!returnType.equals(other.returnType))\n+            return false;\n+        return true;\n+    }\n \n-  public Method getMethod() {\n-    try {\n-      return declaringClass.getDeclaredMethod(methodName, parameterTypes);\n-    } catch (SecurityException e) {\n-      String message = String.format(\n-          \"The method %1$s.%2$s is probably private or protected and cannot be mocked.\", declaringClass, methodName);\n-      throw new MockitoException(message, e);\n-    } catch (NoSuchMethodException e) {\n-      String message = String.format( \n-        \"The method %1$s.%2$s does not exists and you should not get to this point.\\n\" +\n-        \"Please report this as a defect with an example of how to reproduce it.\", declaringClass, methodName);\n-      throw new MockitoException(message, e);\n+    public Method getMethod() {\n+        try {\n+            return declaringClass.getDeclaredMethod(methodName, parameterTypes);\n+        } catch (SecurityException e) {\n+            String message = String.format(\n+                    \"The method %1$s.%2$s is probably private or protected and cannot be mocked.\", declaringClass, methodName);\n+            throw new MockitoException(message, e);\n+        } catch (NoSuchMethodException e) {\n+            String message = String.format(\n+                    \"The method %1$s.%2$s does not exists and you should not get to this point.\\n\" +\n+                            \"Please report this as a defect with an example of how to reproduce it.\", declaringClass, methodName);\n+            throw new MockitoException(message, e);\n+        }\n     }\n-  }\n \n-  public String getName() {\n-    return methodName;\n-  }\n+    public String getName() {\n+        return methodName;\n+    }\n \n-  public Class<?> getReturnType() {\n-    return returnType;\n-  }\n+    public Class<?> getReturnType() {\n+        return returnType;\n+    }\n \n }\n--- a/test/org/mockito/internal/invocation/MockitoMethodTest.java\n+++ b/test/org/mockito/internal/invocation/MockitoMethodTest.java\n \n public class MockitoMethodTest extends TestBase {\n \n-  @Test\n-  public void shouldBeSerializable() throws Exception {\n-    Class<?>[] args = new Class<?>[0];\n-    MockitoMethod method = new MockitoMethod(this.getClass().getMethod(\"toString\", args));\n-    ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n-    new ObjectOutputStream(serialized).writeObject(method);\n-  }\n-  \n-  @Test\n-  public void shouldBeAbleToRetrieveTheMethodInitializedWith() throws Exception {\n-    Class<?>[] args = new Class<?>[0];\n-    Method method = this.getClass().getMethod(\"toString\", args);\n-    MockitoMethod mockMethod = new MockitoMethod(method);\n-    assertEquals(method, mockMethod.getMethod());\n-  }\n-}\n+    @Test\n+    public void shouldBeSerializable() throws Exception {\n+        Class<?>[] args = new Class<?>[0];\n+        MockitoMethod method = new MockitoMethod(this.getClass().getMethod(\"toString\", args));\n+        ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n+        new ObjectOutputStream(serialized).writeObject(method);\n+    }\n+\n+    @Test\n+    public void shouldBeAbleToRetrieveTheMethodInitializedWith() throws Exception {\n+        Class<?>[] args = new Class<?>[0];\n+        Method method = this.getClass().getMethod(\"toString\", args);\n+        MockitoMethod mockMethod = new MockitoMethod(method);\n+        assertEquals(method, mockMethod.getMethod());\n+    }\n+}", "timestamp": 1257159847, "metainfo": ""}