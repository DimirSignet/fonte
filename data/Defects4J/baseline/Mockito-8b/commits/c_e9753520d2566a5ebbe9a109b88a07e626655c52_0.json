{"sha": "e9753520d2566a5ebbe9a109b88a07e626655c52", "log": "Made the across-classloader serialization optional.", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n package org.mockito;\n \n import org.mockito.listeners.InvocationListener;\n-import org.mockito.mock.MockCreationSettings;\n+import org.mockito.mock.SerializableMode;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n     MockSettings serializable();\n \n     /**\n+     * Configures the mock to be serializable with a specific serializable mode.\n+     * With this feature you can use a mock in a place that requires dependencies to be serializable.\n+     * <p>\n+     * WARNING: This should be rarely used in unit testing.\n+     * <p>\n+     * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n+     * was in a web environment and the objects from the external dependency were being serialized to pass between layers.\n+     *\n+     * <pre class=\"code\"><code class=\"java\">\n+     *   List serializableMock = mock(List.class, withSettings().serializable(SerializableMode.ACROSS_CLASSLOADERS));\n+     * </code></pre>\n+     *\n+     * @param mode serialization mode\n+     * @return settings instance so that you can fluently specify other settings\n+     * @since 1.9.8\n+     */\n+    MockSettings serializable(SerializableMode mode);\n+\n+    /**\n      * Enables real-time logging of method invocations on this mock. Can be used\n      * during test debugging in order to find wrong interactions with this mock.\n      * <p>\n      *\n      * @return settings instance so that you can fluently specify other settings\n      */\n-    MockSettings stubOnly();}\n+    MockSettings stubOnly();\n+}\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n import org.mockito.internal.util.reflection.FieldSetter;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n+import org.mockito.mock.SerializableMode;\n \n import java.io.*;\n import java.lang.reflect.Field;\n      * @param <T> Type param to not be bothered by the generics\n      */\n     public <T> void enableSerializationAcrossJVM(MockCreationSettings<T> settings) {\n-        if (settings.isSerializable()) {\n+        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n             // havin faith that this set is modifiable\n             // TODO use a proper way to add the interface\n             settings.getExtraInterfaces().add(AcrossJVMMockitoMockSerializable.class);\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.listeners.InvocationListener;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n+import org.mockito.mock.SerializableMode;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n     private static final long serialVersionUID = 4475297236197939569L;\n \n     public MockSettings serializable() {\n-        this.serializable = true;\n+        return serializable(SerializableMode.BASIC);\n+    }\n+\n+    public MockSettings serializable(SerializableMode mode) {\n+        this.serializableMode = mode;\n         return this;\n     }\n \n \n     public Answer<Object> getDefaultAnswer() {\n         return defaultAnswer;\n-    }\n-\n-    public boolean isSerializable() {\n-        return serializable;\n     }\n \n     public MockSettingsImpl stubOnly() {\n--- a/src/org/mockito/internal/creation/settings/CreationSettings.java\n+++ b/src/org/mockito/internal/creation/settings/CreationSettings.java\n import org.mockito.listeners.InvocationListener;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n+import org.mockito.mock.SerializableMode;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n     protected Object spiedInstance;\n     protected Answer<Object> defaultAnswer;\n     protected MockName mockName;\n-    protected boolean serializable;\n+    protected SerializableMode serializableMode = SerializableMode.NONE;\n     protected List<InvocationListener> invocationListeners = new ArrayList<InvocationListener>();\n     protected boolean stubOnly;\n \n         this.spiedInstance = copy.spiedInstance;\n         this.defaultAnswer = copy.defaultAnswer;\n         this.mockName = copy.mockName;\n-        this.serializable = copy.serializable;\n+        this.serializableMode = copy.serializableMode;\n         this.invocationListeners = copy.invocationListeners;\n         this.stubOnly = copy.stubOnly;\n     }\n     }\n \n     public boolean isSerializable() {\n-        return serializable;\n+        return serializableMode != SerializableMode.NONE;\n+    }\n+\n+    public SerializableMode getSerializableMode() {\n+        return serializableMode;\n     }\n \n     public List<InvocationListener> getInvocationListeners() {\n--- a/src/org/mockito/mock/MockCreationSettings.java\n+++ b/src/org/mockito/mock/MockCreationSettings.java\n     boolean isSerializable();\n \n     /**\n+     * @return the serializable mode of this mock\n+     */\n+    SerializableMode getSerializableMode();\n+\n+    /**\n      * Whether the mock is only for stubbing, i.e. does not remember\n      * parameters on its invocation and therefore cannot\n      * be used for verification\n--- /dev/null\n+++ b/src/org/mockito/mock/SerializableMode.java\n+package org.mockito.mock;\n+\n+import org.mockito.Incubating;\n+\n+/**\n+ * Mock serializable style.\n+ */\n+@Incubating\n+public enum SerializableMode {\n+\n+    /**\n+     * No serialization.\n+     */\n+    NONE,\n+\n+    /**\n+     * Basic serializable mode for mock objects. Introduced in Mockito 1.8.1.\n+     */\n+    BASIC,\n+\n+    /**\n+     * Useful if the mock is deserialized in a different classloader / vm.\n+     */\n+    @Incubating\n+    ACROSS_CLASSLOADERS\n+}\n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation;\n \n import org.fest.assertions.Assertions;\n--- a/test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java\n+++ b/test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n+import org.mockito.mock.SerializableMode;\n import org.mockitousage.IMethods;\n import org.mockitoutil.SimplePerRealmReloadingClassLoader;\n import org.mockitoutil.SimpleSerializationUtil;\n         public byte[] call() throws Exception {\n             AClassToBeMockedInThisTestOnlyAndInCallablesOnly mock = Mockito.mock(\n                     AClassToBeMockedInThisTestOnlyAndInCallablesOnly.class,\n-                    Mockito.withSettings().serializable()\n+                    Mockito.withSettings().serializable(SerializableMode.ACROSS_CLASSLOADERS)\n             );\n             // use MethodProxy before\n             mock.returningSomething();", "timestamp": 1365343713, "metainfo": ""}