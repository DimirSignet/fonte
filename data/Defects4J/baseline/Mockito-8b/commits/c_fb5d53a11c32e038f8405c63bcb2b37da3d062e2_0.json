{"sha": "fb5d53a11c32e038f8405c63bcb2b37da3d062e2", "log": "In order to provide only meaningful information supressed showing unstubbed invocations. I also did a rename job but I have no idea what was the reason... (yes, check-in early, check-in often)  --HG-- rename : src/org/mockito/internal/debugging/WarningsPrinter.java => src/org/mockito/internal/debugging/WarningsPrinterImpl.java rename : test/org/mockito/internal/debugging/WarningsPrinterTest.java => test/org/mockito/internal/debugging/WarningsPrinterImplTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401556", "commit": "\n--- a/src/org/mockito/internal/debugging/DebuggingInfo.java\n+++ b/src/org/mockito/internal/debugging/DebuggingInfo.java\n \n     public void printWarnings(MockitoLogger logger) {\n         if (hasData()) {\n-            WarningsPrinter warningsPrinter = new WarningsPrinter(unusedStubs, unstubbedInvocations);\n-            warningsPrinter.print(logger);\n+            new WarningsPrinterImpl(unusedStubs, unstubbedInvocations).print(logger);\n         }\n     }\n \n     public boolean hasData() {\n         return !unusedStubs.isEmpty() || !unstubbedInvocations.isEmpty();\n     }\n+\n+    public String getWarnings() {\n+        final StringBuilder sb = new StringBuilder();\n+        if (hasData()) {\n+            new WarningsPrinterImpl(unusedStubs, unstubbedInvocations).print(new MockitoLogger() {\n+                public void log(Object what) {\n+                    sb.append(what);\n+                }});\n+        }\n+        return sb.toString();\n+    }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/debugging/WarningsPrinterImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.debugging;\n+\n+import static org.mockito.internal.util.StringJoiner.*;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.util.MockitoLogger;\n+\n+public class WarningsPrinterImpl {\n+\n+    private final List<Invocation> unusedStubs;\n+    private final List<InvocationMatcher> unstubbedInvocations;\n+\n+    public WarningsPrinterImpl(List<Invocation> unusedStubs, List<InvocationMatcher> unstubbedInvocations) {\n+        this.unusedStubs = new LinkedList<Invocation>(unusedStubs);\n+        this.unstubbedInvocations = new LinkedList<InvocationMatcher>(unstubbedInvocations);\n+    }\n+\n+    public void print(MockitoLogger logger) {\n+        Iterator<Invocation> unusedIterator = unusedStubs.iterator();\n+        while(unusedIterator.hasNext()) {\n+            Invocation unused = unusedIterator.next();\n+            Iterator<InvocationMatcher> unstubbedIterator = unstubbedInvocations.iterator();\n+            while(unstubbedIterator.hasNext()) {\n+                InvocationMatcher unstubbed = unstubbedIterator.next();\n+                if(unstubbed.hasSimilarMethod(unused)) { \n+                    logger.log(stubbedMethodCalledWithDifferentArguments(unused, unstubbed));\n+                    unusedIterator.remove();\n+                    unstubbedIterator.remove();\n+                } \n+            }\n+        }\n+        \n+        for (Invocation i : unusedStubs) {\n+            logger.log(thisStubWasNotUsed(i));\n+        }\n+\n+        for (InvocationMatcher i1 : unstubbedInvocations) {\n+            logger.log(thisMethodWasNotStubbed(i1));\n+        }\n+    }\n+\n+    private String thisStubWasNotUsed(Invocation i) {\n+        return join(\n+            \"[Mockito hint] This stub was not used:\",\n+            i,\n+            i.getLocation(),\n+            \"\");\n+    }\n+\n+    private String thisMethodWasNotStubbed(InvocationMatcher i) {\n+        return join(\n+            \"[Mockito hint] This method was not stubbed:\",\n+            i,\n+            i.getInvocation().getLocation(),\n+            \"\");\n+    }\n+\n+    private String stubbedMethodCalledWithDifferentArguments(Invocation unused, InvocationMatcher unstubbed) {\n+        return join(\n+                \" *** Verbose stubbing warnings from Mockito *** \",\n+                \"stubbed here \" + unused.getLocation(),\n+                \"BUT called with different arguments here \" + unstubbed.getInvocation().getLocation(),\n+                \"\");\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.debugging;\n+\n+import static java.util.Arrays.*;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.util.MockitoLoggerStub;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class WarningsPrinterImplTest extends TestBase {\n+\n+    @Mock\n+    private IMethods mock;\n+    private MockitoLoggerStub logger = new MockitoLoggerStub();\n+\n+    @Test\n+    public void shouldPrintUnusedStub() {\n+        // given\n+        Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n+        WarningsPrinterImpl p = new WarningsPrinterImpl(asList(unusedStub), Arrays.<InvocationMatcher> asList());\n+\n+        // when\n+        p.print(logger);\n+\n+        // then\n+        assertContains(\"stub was not used\", logger.getLoggedInfo());\n+        assertContains(\"simpleMethod()\", logger.getLoggedInfo());\n+    }\n+\n+    @Test\n+    public void shouldPrintUnstubbedInvocation() {\n+        // given\n+        InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n+        WarningsPrinterImpl p = new WarningsPrinterImpl(Arrays.<Invocation> asList(), Arrays.<InvocationMatcher> asList(unstubbedInvocation));\n+\n+        // when\n+        p.print(logger);\n+\n+        // then\n+        assertContains(\"was not stubbed\", logger.getLoggedInfo());\n+        assertContains(\"differentMethod()\", logger.getLoggedInfo());\n+    }\n+\n+    @Test\n+    public void shouldPrintStubWasUsedWithDifferentArgs() {\n+        // given\n+        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n+        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n+\n+        WarningsPrinterImpl p = new WarningsPrinterImpl(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n+\n+        // when\n+        p.print(logger);\n+\n+        // then\n+        assertContains(\"different arguments\", logger.getLoggedInfo());\n+    }\n+\n+    @Test\n+    public void shouldNotPrintRedundantInformation() {\n+        // given\n+        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n+        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n+\n+        WarningsPrinterImpl p = new WarningsPrinterImpl(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n+\n+        // when\n+        p.print(logger);\n+\n+        // then\n+        assertNotContains(\"stub was not used\", logger.getLoggedInfo());\n+        assertNotContains(\"was not stubbed\", logger.getLoggedInfo());\n+    }\n+}", "timestamp": 1247139819, "metainfo": ""}