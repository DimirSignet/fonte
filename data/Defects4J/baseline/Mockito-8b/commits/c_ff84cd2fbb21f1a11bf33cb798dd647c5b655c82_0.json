{"sha": "ff84cd2fbb21f1a11bf33cb798dd647c5b655c82", "log": "Introduced new interface to hide the details of MockSettingsImpl in the plugins API. It's still an incubating api, might change.", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n package org.mockito;\n \n import org.mockito.listeners.InvocationListener;\n+import org.mockito.plugins.MockSettingsInfo;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n  * Firstly, to make it easy to add another mock setting when the demand comes.\n  * Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.\n  */\n-public interface MockSettings extends Serializable {\n+public interface MockSettings extends Serializable, MockSettingsInfo {\n     \n     /**\n      * Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.\n--- a/src/org/mockito/internal/IMockMaker.java\n+++ b/src/org/mockito/internal/IMockMaker.java\n  */\n package org.mockito.internal;\n \n-import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.plugins.MockSettingsInfo;\n \n public interface IMockMaker {\n \n      * returned instance will be delegated to {@code handler}.\n      */\n     <T> T createMock(Class<T> typeToMock, Class<?>[] extraInterfaces,\n-            MockitoInvocationHandler handler, MockSettingsImpl settings);\n+            MockitoInvocationHandler handler, MockSettingsInfo settings);\n \n     /**\n      * Returns the handler for the {@code mock}, or null if {@code mock} was not\n      * Replaces the existing handler on {@code mock} with {@code newHandler}.\n      */\n     public void resetMock(Object mock, MockitoInvocationHandler newHandler,\n-            MockSettingsImpl settings);\n+                          MockSettingsInfo settings);\n }\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.internal.IMockMaker;\n import org.mockito.internal.MockitoInvocationHandler;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n+import org.mockito.plugins.MockSettingsInfo;\n \n /**\n  * A MockMaker that uses cglib to generate mocks on a JVM.\n public final class CglibMockMaker implements IMockMaker {\n \n     public <T> T createMock(Class<T> typeToMock, Class<?>[] extraInterfaces,\n-            MockitoInvocationHandler handler, MockSettingsImpl settings) {\n-        settings.initiateMockName(typeToMock);\n+            MockitoInvocationHandler handler, MockSettingsInfo settings) {\n         return ClassImposterizer.INSTANCE.imposterise(\n                 new MethodInterceptorFilter(handler, settings), typeToMock, extraInterfaces);\n     }\n     \n-    public void resetMock(Object mock, MockitoInvocationHandler newHandler, MockSettingsImpl settings) {\n+    public void resetMock(Object mock, MockitoInvocationHandler newHandler, MockSettingsInfo settings) {\n         ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newHandler, settings));\n     }\n \n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n import org.mockito.internal.progress.SequenceNumber;\n import org.mockito.internal.util.ObjectMethodsGuru;\n+import org.mockito.plugins.MockSettingsInfo;\n \n public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n \n     private final MockitoInvocationHandler handler;\n     CGLIBHacker cglibHacker = new CGLIBHacker();\n     ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();\n-    private final MockSettingsImpl mockSettings;\n+    private final MockSettingsInfo mockSettings;\n \n-    public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsImpl mockSettings) {\n+    public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsInfo mockSettings) {\n         this.handler = handler;\n         this.mockSettings = mockSettings;\n     }\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         creationValidator.validateType(classToMock);\n         creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\n         creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\n+\n+        settings.initiateMockName(classToMock);\n \n         InvocationNotifierHandler<T> mockHandler = new InvocationNotifierHandler<T>(\n                 new MockHandler<T>(settings), settings);\n--- /dev/null\n+++ b/src/org/mockito/plugins/MockSettingsInfo.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.plugins;\n+\n+/**\n+ * This API is incubating. It may change.\n+ * <p>\n+ * Informs about the mock settings\n+ */\n+public interface MockSettingsInfo {\n+\n+    /**\n+     * if the mock is serializable\n+     */\n+    boolean isSerializable();\n+}", "timestamp": 1327847874, "metainfo": ""}