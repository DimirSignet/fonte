{"sha": "df23bd3e693d212fc1a71efb512e78847bd81510", "log": "added integration with Hamcrest  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40351", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  */\n package org.mockito;\n \n+import org.hamcrest.Matcher;\n import org.mockito.internal.matchers.Any;\n import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Contains;\n      * See examples in javadoc for {@link Matchers}\n      * \n      * @param matcher decides whether argument matches\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T argThat(final Matcher<T> matcher) {\n+        return reportMatcher(\n+            new CustomMatcher<T>() {\n+                public boolean matches(T argument) {\n+                    return matcher.matches(argument);\n+                }\n+                public void appendTo(StringBuilder builder) {\n+                    builder.append(matcher.toString());\n+                }\n+            }\n+        ).<T>returnNull();\n+    }    \n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n     public static char charThat(CustomMatcher<Character> matcher) {\n--- a/src/org/mockito/internal/matchers/Or.java\n+++ b/src/org/mockito/internal/matchers/Or.java\n \n import java.util.Iterator;\n import java.util.List;\n-\n \n @SuppressWarnings(\"unchecked\")\n public class Or implements ArgumentMatcher {\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n \n import java.io.IOException;\n import java.nio.charset.CharacterCodingException;\n+import java.util.Collection;\n import java.util.List;\n \n import javax.swing.text.ChangedCharSetException;\n \n     String simpleMethod(String argument);\n     \n+    String simpleMethod(Collection<?> collection);\n+    \n     String simpleMethod(Object argument);\n     \n     String simpleMethod(int argument);\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n+import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n+import org.mockitousage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class HamcrestMatchersTest extends TestBase {\n+    \n+    private final class ContainsX extends BaseMatcher<String> {\n+        public boolean matches(Object o) {\n+            return ((String) o).contains(\"X\");\n+        }\n+\n+        public void describeTo(Description d) {\n+            d.appendText(\"<contains 'X'>\");\n+        }\n+    }\n+\n+    @Mock private IMethods mock;\n+\n+    @Test\n+    public void shouldAcceptHamcrestMatcher() {\n+        stub(mock.simpleMethod(argThat(new ContainsX()))).toReturn(\"X\");\n+        assertNull(mock.simpleMethod(\"blah\"));\n+        assertEquals(\"X\", mock.simpleMethod(\"blah X blah\"));\n+    }\n+    \n+    @Test\n+    public void shouldAcceptCollectionContainingMatcher() {\n+        stub(mock.simpleMethod(argThat(collectionHas(\"1\", \"2\")))).toReturn(\"1 and 2\");\n+        assertNull(mock.simpleMethod(Arrays.asList(\"3\", \"1\")));\n+        assertEquals(\"1 and 2\", mock.simpleMethod(Arrays.asList(\"1\", \"2\")));\n+    }\n+    \n+    @Test\n+    public void shouldVerifyUsingHamcrestMatcher() {\n+        mock.simpleMethod(\"blah\");\n+        \n+        try {\n+            verify(mock).simpleMethod(argThat(new ContainsX()));\n+            fail();\n+        } catch (InvocationDiffersFromActual e) {\n+            assertThat(e, messageContains(\"IMethods.simpleMethod(<contains 'X'>)\"));\n+        }\n+    }\n+}", "timestamp": 1202569761, "metainfo": ""}