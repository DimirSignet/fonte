{"sha": "232b3a6be1b15f5be3460f8a1c47421f713bd3b9", "log": "fixed issue 29 (StringIndexOutBounds when doing spy()) Mockito cannot mock/spy anonymous classes because they are implicitly final  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40989", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     \n     public void cannotMockFinalClass(Class<?> clazz) {\n         throw new MockitoException(join(\n-                \"Mockito cannot mock primitives or final classes like: \",\n-                clazz.toString()\n+                \"Cannot mock/spy \" + clazz.toString(),\n+                \"Mockito cannot mock/spy following:\",\n+                \"  - final classes\",\n+                \"  - anonymous classes\",\n+                \"  - primitive types\"\n         ));\n     }\n \n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n     };\n     \n     public boolean canImposterise(Class<?> type) {\n-        return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n+        return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers()) && !type.isAnonymousClass();\n     }\n     \n     public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancilliaryTypes) {\n--- a/test/org/mockitousage/SpyingOnRealObjectsTest.java\n+++ b/test/org/mockitousage/SpyingOnRealObjectsTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n         spy.add(\"foo\");\n         assertEquals(\"[foo]\" , spy.toString());\n     }\n+    \n+    interface Foo {}\n+    \n+    @Test\n+    public void shouldDealWithAnonymousClasses() {\n+        try {\n+            spy(new Foo() {});\n+            fail();\n+        } catch (MockitoException e) {\n+            assertThat(e.getMessage(), contains(\"cannot mock\"));\n+        }\n+    }\n }", "timestamp": 1223991338, "metainfo": ""}