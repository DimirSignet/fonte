{"sha": "dee0b320686765f97829e8097e891d6c50179a01", "log": "changed the interface of verification, times(x) instead of raw integer  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40193", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     }\n     \n     public static <T> T verify(T mock) {\n-        return verify(mock, 1);\n-    }\n-    \n-    public static <T> T verify(T mock, int wantedNumberOfInvocations) {\n-        return verify(mock, VerificationMode.times(wantedNumberOfInvocations));\n+        return verify(mock, times(1));\n     }\n     \n     public static <T> T verify(T mock, VerificationMode mode) {\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n package org.mockito;\n \n import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.times;\n \n import java.util.List;\n \n     \n     @Test(expected=NotAMockException.class)\n     public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {\n-        Mockito.verify(\"notMock\", 19);\n+        Mockito.verify(\"notMock\", times(19));\n     }\n     \n     @Test(expected=NotAMockException.class)\n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n  */\n package org.mockitousage.verification;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.times;\n import static org.mockito.util.ExtraMatchers.messageContains;\n \n import java.util.LinkedList;\n \n-import org.junit.*;\n-import org.mockito.*;\n-import org.mockito.exceptions.cause.*;\n-import org.mockito.exceptions.verification.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.cause.FirstUndesiredInvocation;\n+import org.mockito.exceptions.cause.TooLittleInvocations;\n+import org.mockito.exceptions.verification.TooLittleActualInvocationsError;\n+import org.mockito.exceptions.verification.TooManyActualInvocationsError;\n \n @SuppressWarnings(\"unchecked\")\n public class ExactNumberOfTimesVerificationTest extends RequiresValidState {\n         mock.clear();\n         mock.clear();\n \n-        Mockito.verify(mock, 3).clear();\n+        Mockito.verify(mock, times(3)).clear();\n         try {\n-            Mockito.verify(mock, 100).clear();\n+            Mockito.verify(mock, times(100)).clear();\n             fail();\n         } catch (TooLittleActualInvocationsError e) {\n             String expected = \n         mock.clear();\n         mock.clear();\n \n-        Mockito.verify(mock, 4).clear();\n+        Mockito.verify(mock, times(4)).clear();\n         try {\n-            Mockito.verify(mock, 1).clear();\n+            Mockito.verify(mock, times(1)).clear();\n             fail();\n         } catch (TooManyActualInvocationsError e) {\n             String expected = \n     \n     @Test\n     public void shouldVerifyProperlyIfMethodWasNotInvoked() throws Exception {\n-        Mockito.verify(mock, 0).clear();\n+        Mockito.verify(mock, times(0)).clear();\n         try {\n-            Mockito.verify(mock, 15).clear();\n+            Mockito.verify(mock, times(15)).clear();\n             fail();\n         } catch (TooLittleActualInvocationsError e) {\n             assertThat(e, messageContains(\"Wanted 15 times but was 0\"));\n     public void shouldVerifyProperlyIfMethodWasInvokedOnce() throws Exception {\n         mock.clear();\n         \n-        Mockito.verify(mock, 1).clear();\n+        Mockito.verify(mock, times(1)).clear();\n         try {\n-            Mockito.verify(mock, 15).clear();\n+            Mockito.verify(mock, times(15)).clear();\n             fail();\n         } catch (TooLittleActualInvocationsError e) {\n             assertThat(e, messageContains(\"Wanted 15 times but was 1\"));\n         mock.clear();\n         \n         try {\n-            Mockito.verify(mock, 0).clear();\n+            Mockito.verify(mock, times(0)).clear();\n             fail();\n         } catch (TooManyActualInvocationsError e) {\n             assertThat(e, messageContains(\"Wanted 0 times but was 1\"));\n     \n     @Test\n     public void shouldVerifyWhenWantedNumberOfInvocationIsZero() throws Exception {\n-        Mockito.verify(mock, 0).clear();\n+        Mockito.verify(mock, times(0)).clear();\n     }\n     \n     @Test\n         mock.add(\"test\");\n         mock.add(\"test\");\n         \n-        Mockito.verify(mock, 2).add(\"test\");\n+        Mockito.verify(mock, times(2)).add(\"test\");\n     }\n }\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n         mock.add(\"one\");\n         mock.add(\"one\");\n         \n-        verify(mock, 3).add(\"one\");\n+        verify(mock, times(3)).add(\"one\");\n         \n         verifyNoMoreInteractions(mock);\n     }\n         \n         map.put(\"one\", 1);\n         \n-        verify(list, 2).add(\"one\");\n+        verify(list, times(2)).add(\"one\");\n         \n         verifyNoMoreInteractions(list);\n         try {\n--- a/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n         mockOne.simpleMethod(textOne);\n         mockOne.simpleMethod(textTwo);\n         \n-        verify(mockOne, 2).simpleMethod(textOne);\n+        verify(mockOne, times(2)).simpleMethod(textOne);\n         \n         strictly = createStrictOrderVerifier(mockOne);\n         strictly.verify(mockOne, times(2)).simpleMethod(textOne);\n         mockOne.varargsObject(1, textOne, textOne);\n         mockOne.varargsObject(1, textTwo, textTwo);\n         \n-        verify(mockOne, 2).varargsObject(1, textOne, textOne);\n+        verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n         \n         strictly = createStrictOrderVerifier(mockOne);\n         strictly.verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n--- a/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n         verify(list).add(anyObject());\n         verify(list).add(anyInt(), eq(\"test two\"));\n         \n-        verify(map, 2).put(anyObject(), anyObject());\n+        verify(map, times(2)).put(anyObject(), anyObject());\n         verify(map).put(eq(\"test two\"), eq(200));\n         \n         verifyNoMoreInteractions(list, map);\n         map.put(\"one\", 1);\n         map.put(\"one\", 1);\n         \n-        verify(list, 2).add(\"one\");\n-        verify(list, 1).add(\"two\");\n-        verify(list, 0).add(\"three\");\n+        verify(list, times(2)).add(\"one\");\n+        verify(list, times(1)).add(\"two\");\n+        verify(list, times(0)).add(\"three\");\n         \n-        verify(map, 2).put(anyObject(), anyInt());\n+        verify(map, times(2)).put(anyObject(), anyInt());\n         \n         verifyNoMoreInteractions(list, map);\n         verifyZeroInteractions(set);\n--- a/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n  */\n package org.mockitousage.verification;\n \n-import static org.junit.Assert.*;\n-import static org.mockito.CrazyMatchers.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+import static org.mockito.CrazyMatchers.and;\n+import static org.mockito.CrazyMatchers.contains;\n+import static org.mockito.CrazyMatchers.geq;\n+import static org.mockito.CrazyMatchers.leq;\n import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n \n-import org.junit.*;\n-import org.mockito.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.CrazyMatchers;\n+import org.mockito.Mockito;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.VerificationError;\n import org.mockitousage.IMethods;\n \n         mock.oneArg(two);\n         \n         verify(mock).oneArg(CrazyMatchers.same(one));\n-        verify(mock, 2).oneArg(two);\n+        verify(mock, times(2)).oneArg(two);\n         \n         try {\n             verify(mock).oneArg(CrazyMatchers.same(three));", "timestamp": 1197655148, "metainfo": ""}