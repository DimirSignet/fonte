{"sha": "267bb79239b061f99085c96479ab1f2df6ee7ad3", "log": "handy method to join strings and add line breaks  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4090", "commit": "\n--- a/src/org/mockito/exceptions/Exceptions.java\n+++ b/src/org/mockito/exceptions/Exceptions.java\n  */\n package org.mockito.exceptions;\n \n+\n+/**\n+ * All messages in one place makes it easier to tune \n+ * and amend the text.\n+ */\n public class Exceptions {\n \n     public static void mocksHaveToBePassedAsArguments() {\n-        throw new MockitoException(\n-                \"\\n\" +\n-                \"Method requires arguments.\" +\n-                \"\\n\" +\n-                \"Pass mocks that should be verified, e.g:\" +\n-                \"\\n\" +\n-                \"verifyNoMoreInteractions(mockOne, mockTwo)\");\n+        throw new MockitoException(join(\n+                \"Method requires arguments.\",\n+                \"Pass mocks that should be verified, e.g:\",\n+                \"verifyNoMoreInteractions(mockOne, mockTwo)\"\n+                ));\n     }\n \n     public static void strictlyRequiresFamiliarMock() {\n-        throw new MockitoException(\n-                \"\\n\" +\n-                \"Strictly can only verify mocks that were passed in during creation of Strictly. E.g:\" +\n-                \"\\n\" +\n-                \"strictly = createStrictOrderVerifier(mockOne)\" +\n-                \"\\n\" +\n-                \"strictly.verify(mockOne).doStuff()\");\n+        throw new MockitoException(join(\n+                \"Strictly can only verify mocks that were passed in during creation of Strictly. E.g:\",\n+                \"strictly = createStrictOrderVerifier(mockOne)\",\n+                \"strictly.verify(mockOne).doStuff()\"\n+                ));\n     }\n \n     public static void mocksHaveToBePassedWhenCreatingStrictly() {\n-        throw new MockitoException(\n-                \"\\n\" +\n-                \"Method requires arguments.\" +\n-                \"\\n\" +\n-                \"Pass mocks that require strict order verification, e.g:\" +\n-                \"\\n\" +\n-                \"createStrictOrderVerifier(mockOne, mockTwo)\");\n+        throw new MockitoException(join(\n+                \"Method requires arguments.\",\n+                \"Pass mocks that require strict order verification, e.g:\",\n+                \"createStrictOrderVerifier(mockOne, mockTwo)\"\n+                ));\n     }\n \n     public static void checkedExceptionInvalid(Throwable t) {\n-        throw new MockitoException(\n-                \"\\n\" +\n-        \t\t\"Checked exception is invalid for this method\" +\n-        \t\t\"\\n\" +\n-        \t\t\"Invalid: \" + t);\n+        throw new MockitoException(join(\n+        \t\t\"Checked exception is invalid for this method\",\n+        \t\t\"Invalid: \" + t\n+        \t\t));\n     }\n \n     public static void cannotStubWithNullThrowable() {\n-        throw new MockitoException(\n-                \"\\n\" +\n-                \"Cannot stub with null throwable\"                \n-                );\n+        throw new MockitoException(join(\n+                \"Cannot stub with null throwable\"\n+                ));\n         \n     }\n+    \n+    private static String join(String ... linesToBreak) {\n+        StringBuilder out = new StringBuilder(\"\\n\");\n+        for (String line : linesToBreak) {\n+            out.append(line).append(\"\\n\");\n+        }\n+        int lastBreak = out.lastIndexOf(\"\\n\");\n+        return out.replace(lastBreak, lastBreak+1, \"\").toString();\n+    }\n }\n--- a/test/org/mockito/usage/InvalidUsageExceptionsTest.java\n+++ b/test/org/mockito/usage/InvalidUsageExceptionsTest.java\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageExceptionsTest {\n+    \n+    //TODO merge with InvalidUsageTest\n     \n     private LinkedList mock;\n     private LinkedList mockTwo;", "timestamp": 1196288013, "metainfo": ""}