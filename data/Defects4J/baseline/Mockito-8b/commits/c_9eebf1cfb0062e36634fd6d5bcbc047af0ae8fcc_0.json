{"sha": "9eebf1cfb0062e36634fd6d5bcbc047af0ae8fcc", "log": "Made the PrintableInvocation deprecated and created DescribedInvocation instead. I didn't like the PrintableInvocation that much, DescribedInvocation better describes the purpose and lives in a better package, too.", "commit": "\n--- a/src/org/mockito/exceptions/PrintableInvocation.java\n+++ b/src/org/mockito/exceptions/PrintableInvocation.java\n \n package org.mockito.exceptions;\n \n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Location;\n \n-public interface PrintableInvocation {\n-    \n-    String toString();\n-    \n-    Location getLocation();\n-    \n-}\n+@Deprecated\n+/**\n+ * @Deprecated. We needed to move this class to a better place to keep consistency of the API.\n+ * Please use {@link DescribedInvocation} instead.\n+ */\n+public interface PrintableInvocation extends DescribedInvocation {}\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.StringJoiner;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n import org.mockito.invocation.Location;\n import org.mockito.listeners.InvocationListener;\n         }\n     }\n \n-    public void wantedButNotInvoked(PrintableInvocation wanted) {\n+    public void wantedButNotInvoked(DescribedInvocation wanted) {\n         throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));\n     }\n \n-    public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n+    public void wantedButNotInvoked(DescribedInvocation wanted, List<? extends DescribedInvocation> invocations) {\n         String allInvocations;\n         if (invocations.isEmpty()) {\n             allInvocations = \"Actually, there were zero interactions with this mock.\\n\";\n         } else {\n             StringBuilder sb = new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");\n-            for (PrintableInvocation i : invocations) {\n+            for (DescribedInvocation i : invocations) {\n                  sb.append(i.getLocation());\n                  sb.append(\"\\n\");\n             }\n         throw new WantedButNotInvoked(message + allInvocations);\n     }\n \n-    private String createWantedButNotInvokedMessage(PrintableInvocation wanted) {\n+    private String createWantedButNotInvokedMessage(DescribedInvocation wanted) {\n         return join(\n                 \"Wanted but not invoked:\",\n                 wanted.toString(),\n         );\n     }\n \n-    public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n+    public void wantedButNotInvokedInOrder(DescribedInvocation wanted, DescribedInvocation previous) {\n         throw new VerificationInOrderFailure(join(\n                     \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n         ));\n     }\n \n-    public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n+    public void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n         String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n         throw new TooManyActualInvocations(message);\n     }\n \n-    private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n+    private String createTooManyInvocationsMessage(int wantedCount, int actualCount, DescribedInvocation wanted,\n             Location firstUndesired) {\n         return join(\n                 wanted.toString(),\n         );\n     }\n \n-    public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n+    public void neverWantedButInvoked(DescribedInvocation wanted, Location firstUndesired) {\n         throw new NeverWantedButInvoked(join(\n                 wanted.toString(),\n                 \"Never wanted here:\",\n         ));\n     }\n \n-    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n+    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n         String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n         throw new VerificationInOrderFailure(join(\n                 \"Verification in order failure:\" + message\n                 ));\n     }\n \n-    private String createTooLittleInvocationsMessage(org.mockito.internal.reporting.Discrepancy discrepancy, PrintableInvocation wanted,\n+    private String createTooLittleInvocationsMessage(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted,\n             Location lastActualInvocation) {\n         String ending =\n             (lastActualInvocation != null)? lastActualInvocation + \"\\n\" : \"\\n\";\n             return message;\n     }\n \n-    public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n+    public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n         String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n \n         throw new TooLittleActualInvocations(message);\n     }\n \n-    public void tooLittleActualInvocationsInOrder(org.mockito.internal.reporting.Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n+    public void tooLittleActualInvocationsInOrder(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n         String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n \n         throw new VerificationInOrderFailure(join(\n--- a/src/org/mockito/internal/debugging/VerboseMockInvocationLogger.java\n+++ b/src/org/mockito/internal/debugging/VerboseMockInvocationLogger.java\n \n package org.mockito.internal.debugging;\n \n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n \n \t\tprintStream.println(\"############ Logging method invocation #\" + mockInvocationsCounter + \" on mock/spy ########\");\n \t}\n \n-    private void printInvocation(PrintableInvocation invocation) {\n+    private void printInvocation(DescribedInvocation invocation) {\n \t\tprintStream.println(invocation.toString());\n //\t\tprintStream.println(\"Handling method call on a mock/spy.\");\n \t\tprintlnIndented(\"invoked: \" + invocation.getLocation().toString());\n--- a/src/org/mockito/internal/exceptions/VerificationAwareInvocation.java\n+++ b/src/org/mockito/internal/exceptions/VerificationAwareInvocation.java\n \n package org.mockito.internal.exceptions;\n \n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n \n-\n-public interface VerificationAwareInvocation extends PrintableInvocation {\n+public interface VerificationAwareInvocation extends DescribedInvocation {\n     \n     boolean isVerified();\n     \n--- a/src/org/mockito/internal/invocation/InvocationImpl.java\n+++ b/src/org/mockito/internal/invocation/InvocationImpl.java\n \n package org.mockito.internal.invocation;\n \n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.LocationImpl;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.reporting.PrintSettings;\n-import org.mockito.invocation.Invocation;\n-import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.invocation.Location;\n-import org.mockito.invocation.StubInfo;\n+import org.mockito.invocation.*;\n \n import java.lang.reflect.Method;\n import java.util.Arrays;\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class InvocationImpl implements Invocation, PrintableInvocation, InvocationOnMock, VerificationAwareInvocation {\n+public class InvocationImpl implements Invocation, DescribedInvocation, InvocationOnMock, VerificationAwareInvocation {\n \n     private static final long serialVersionUID = 8240069639250980199L;\n     private final int sequenceNumber;\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n import java.util.List;\n \n import org.hamcrest.Matcher;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.matchers.CapturesArguments;\n import org.mockito.internal.reporting.PrintSettings;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n import org.mockito.invocation.Location;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvocationMatcher implements PrintableInvocation, CapturesArgumensFromInvocation, Serializable {\n+public class InvocationMatcher implements DescribedInvocation, CapturesArgumensFromInvocation, Serializable {\n \n     private static final long serialVersionUID = -3047126096857467610L;\n     private final Invocation invocation;\n--- a/src/org/mockito/internal/invocation/StubInfoImpl.java\n+++ b/src/org/mockito/internal/invocation/StubInfoImpl.java\n  */\n package org.mockito.internal.invocation;\n \n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Location;\n import org.mockito.invocation.StubInfo;\n \n \n public class StubInfoImpl implements StubInfo, Serializable {\n     private static final long serialVersionUID = 2125827349332068867L;\n-    private PrintableInvocation stubbedAt;\n+    private DescribedInvocation stubbedAt;\n \n-    public StubInfoImpl(PrintableInvocation stubbedAt) {\n+    public StubInfoImpl(DescribedInvocation stubbedAt) {\n         this.stubbedAt = stubbedAt;\n     }\n \n--- a/src/org/mockito/internal/listeners/NotifiedMethodInvocationReport.java\n+++ b/src/org/mockito/internal/listeners/NotifiedMethodInvocationReport.java\n  */\n package org.mockito.internal.listeners;\n \n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n import org.mockito.listeners.MethodInvocationReport;\n \n             this.throwable = throwable;\n         }\n \n-        public PrintableInvocation getInvocation() {\n+        public DescribedInvocation getInvocation() {\n             return invocation;\n         }\n \n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n import java.io.Serializable;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n \n     private static final long serialVersionUID = 4919105134123672727L;\n     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();\n-    private PrintableInvocation usedAt;\n+    private DescribedInvocation usedAt;\n \n     public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\n         super(invocation.getInvocation(), invocation.getMatchers());\n         answers.add(answer);\n     }\n \n-    public void markStubUsed(PrintableInvocation usedAt) {\n+    public void markStubUsed(DescribedInvocation usedAt) {\n         this.usedAt = usedAt;\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/invocation/DescribedInvocation.java\n+package org.mockito.invocation;\n+\n+/**\n+ * by Szczepan Faber, created at: 4/1/12\n+ */\n+public interface DescribedInvocation {\n+\n+    String toString();\n+\n+    Location getLocation();\n+}\n--- a/src/org/mockito/invocation/Invocation.java\n+++ b/src/org/mockito/invocation/Invocation.java\n package org.mockito.invocation;\n-\n-import org.mockito.exceptions.PrintableInvocation;\n \n /**\n  * by Szczepan Faber, created at: 3/31/12\n  */\n-public interface Invocation extends InvocationOnMock, PrintableInvocation {\n+public interface Invocation extends InvocationOnMock, DescribedInvocation {\n \n     boolean isVerified();\n \n--- a/src/org/mockito/listeners/MethodInvocationReport.java\n+++ b/src/org/mockito/listeners/MethodInvocationReport.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.listeners;\n \n import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n \n /**\n  * Represent a method call on a mock.\n  */\n public interface MethodInvocationReport {\n     /**\n+     * The return type is deprecated, please assign the return value from this method\n+     * to the {@link DescribedInvocation} type. Sorry for inconvenience but we had to move\n+     * {@link PrintableInvocation} to better place to keep the API consistency.\n+     *\n      * @return Information on the method call, never {@code null}\n      */\n     PrintableInvocation getInvocation();\n--- a/test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java\n+++ b/test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.StubInfoImpl;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n \n import java.io.ByteArrayOutputStream;\n \n     private ByteArrayOutputStream output;\n     private Invocation invocation = new InvocationBuilder().toInvocation();\n-    private PrintableInvocation stubbedInvocation = new InvocationBuilder().toInvocation();\n+    private DescribedInvocation stubbedInvocation = new InvocationBuilder().toInvocation();\n \n     @Before\n     public void init_Listener() throws Exception {\n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n import org.mockito.invocation.Location;\n import org.mockitoutil.TestBase;\n         private Location actualLocation;\n         \n         @Override\n-        public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n+        public void wantedButNotInvoked(DescribedInvocation wanted, List<? extends DescribedInvocation> invocations) {\n             this.wanted = wanted;\n         }\n         \n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockito.internal.verification.InOrderContextImpl;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n import org.mockito.invocation.Location;\n import org.mockitoutil.TestBase;\n     }\n     \n     class ReporterStub extends Reporter {\n-        private PrintableInvocation wanted;\n-        private PrintableInvocation previous;\n+        private DescribedInvocation wanted;\n+        private DescribedInvocation previous;\n         private String wantedString;\n         private String actual;\n         private Location actualLocation;\n         \n-        @Override public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n+        @Override public void wantedButNotInvokedInOrder(DescribedInvocation wanted, DescribedInvocation previous) {\n             this.wanted = wanted;\n             this.previous = previous;\n         }\n         \n-        @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n+        @Override public void wantedButNotInvoked(DescribedInvocation wanted) {\n             this.wanted = wanted;\n         }\n \n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n import org.mockito.invocation.Location;\n import org.mockitoutil.TestBase;\n     class ReporterStub extends Reporter {\n         private int wantedCount;\n         private int actualCount;\n-        private PrintableInvocation wanted;\n+        private DescribedInvocation wanted;\n         private Location location;\n-        @Override public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n+        @Override public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n                     this.wantedCount = discrepancy.getWantedCount();\n                     this.actualCount = discrepancy.getActualCount();\n                     this.wanted = wanted;\n                     this.location = lastActualLocation;\n         }\n         \n-        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n+        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n                     this.wantedCount = wantedCount;\n                     this.actualCount = actualCount;\n                     this.wanted = wanted;\n         }\n         \n         @Override\n-        public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n+        public void neverWantedButInvoked(DescribedInvocation wanted, Location firstUndesired) {\n             this.wanted = wanted;\n             this.location = firstUndesired;\n         }\n--- a/test/org/mockitousage/debugging/InvocationListenerCallbackTest.java\n+++ b/test/org/mockitousage/debugging/InvocationListenerCallbackTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.debugging;\n \n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n \n     }\n \n     private static class RememberingListener implements InvocationListener {\n-        PrintableInvocation invocation;\n+        DescribedInvocation invocation;\n         Object returnValue;\n         String locationOfStubbing;\n ", "timestamp": 1333290124, "metainfo": ""}