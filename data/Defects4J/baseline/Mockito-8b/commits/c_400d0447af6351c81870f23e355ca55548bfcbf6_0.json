{"sha": "400d0447af6351c81870f23e355ca55548bfcbf6", "log": "Fixed javadoc warnings  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401998", "commit": "\n--- a/src/org/mockito/configuration/AnnotationEngine.java\n+++ b/src/org/mockito/configuration/AnnotationEngine.java\n public interface AnnotationEngine {\n \n     /**\n-     * @Deprecated\n+     * @deprecated\n      * Please use AnnotationProcessor 'execute' method instead that is more robust\n      * <p>\n      * Creates mock, ArgumentCaptor or wraps field instance in spy object.\n      *\n      * @param annotation\n      * @param field\n-     * @return\n      */\n     @Deprecated\n     Object createMockFor(Annotation annotation, Field field);\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n      * \n      * if wanted is 1 and mode is times(x), where x != 2 then returns\n      * 1,1,1\n-     * @param data \n      */\n     public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n         List<Invocation> unverified = removeVerifiedInOrder(invocations, context);\n      * \n      * @param context\n      * @param orderedInvocations\n-     * @return\n      */\n     public Invocation findFirstUnverifiedInOrder(InOrderContext context, List<Invocation> orderedInvocations) {        \n         Invocation candidate = null;\n--- a/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n+++ b/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n      * Finds all unused stubs for given mocks\n      * \n      * @param mocks\n-     * @return\n      */\n     public List<Invocation> find(List<?> mocks) {\n         List<Invocation> unused = new LinkedList<Invocation>();\n--- a/src/org/mockito/internal/stubbing/defaultanswers/Answers.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/Answers.java\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n+import org.mockito.Mockito;\n import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.stubbing.Answer;\n \n  * <p>\n  * <b>WARNING</b> Those answers no longer are used by the framework!!! Please use {@link org.mockito.Answers}\n  * <p>\n- * See {@link Mock} for more information.\n+ * See {@link Mockito} for more information.\n  */\n @Deprecated\n public enum Answers {\n--- a/src/org/mockito/internal/util/RemoveFirstLine.java\n+++ b/src/org/mockito/internal/util/RemoveFirstLine.java\n public class RemoveFirstLine {\n \n     /**\n-     * @param string to have the first line removed\n-     * @return\n+     * @param text to have the first line removed\n+     * @return less first line\n      */\n     public String of(String text) {\n         return text.replaceFirst(\".*?\\n\", \"\");\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n      * \n      * @param field\n-     * @return\n      */\n     public Class getGenericType(Field field) {        \n         Type generic = field.getGenericType();\n--- a/src/org/mockito/verification/VerificationWithTimeout.java\n+++ b/src/org/mockito/verification/VerificationWithTimeout.java\n     public VerificationMode times(int wantedNumberOfInvocations);\n     \n     /**\n-     * Alias to times(0), see {@link times(int)}\n+     * Alias to times(0), see {@link #times(int)}\n      * <p>\n      * Verifies that interaction did not happen within given timeout. E.g:\n      * <pre>\n      * \n      * <p>\n      * If you want to verify there were NO interactions with the mock \n-     * check out {@link verifyNoMoreInteractions(Object...)}\n+     * check out {@link Mockito#verifyNoMoreInteractions(Object...)}\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * ", "timestamp": 1274733126, "metainfo": ""}