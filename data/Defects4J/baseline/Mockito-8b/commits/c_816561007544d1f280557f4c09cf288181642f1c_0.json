{"sha": "816561007544d1f280557f4c09cf288181642f1c", "log": "Further refactoring of exception messages - following the new patterns of storing and presenting locations of errors / verification failures  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401292", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     }\n \n     public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n-        throw new TooManyActualInvocations(join(\n+        String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n+        throw new TooManyActualInvocations(message);\n+    }\n+\n+    private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n+            HasStackTrace firstUndesired) {\n+        return join(\n                 wanted.toString(),\n                 \"Wanted \" + pluralize(wantedCount) + \":\",\n                 \"-> at \" + new Location(),\n-                \"but was \" + pluralize(actualCount) + \". Undesired invocation:\",\n+                \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                 \"-> at \" + firstUndesired.getStackTrace()[0],\n                 \"\"\n-        ));\n+        );\n     }\n     \n     public void neverWantedButInvoked(PrintableInvocation wanted, HasStackTrace firstUndesired) {\n     }    \n     \n     public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n-        UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n-\n+        String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n         throw new VerifcationInOrderFailure(join(\n-                \"Verification in order failure\",\n-                wanted.toString(),\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n+                \"Verification in order failure:\" + message\n+                ));\n     }\n \n     private UndesiredInvocation createUndesiredInvocationCause(HasStackTrace firstUndesired) {\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n             checker.check(invocations, wanted, 1);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e, messageContains(\"Wanted 1 time but was 2\"));\n+            assertThat(e, messageContains(\"Wanted 1 time\"));\n+            assertThat(e, messageContains(\"But was 2 times\"));\n         }\n     }\n     \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n \n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n-import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"fourthChunk\"));\n+            assertContains(\"fourthChunk(\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n \n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n-import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n             inOrder.verify(mock, times(0)).simpleMethod(anyInt());\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"first\"));\n+            assertContains(\"first(\", e.getMessage());\n         }\n     }    \n     \n             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"second\"));\n+            assertContains(\"second(\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Verification in order failure\" +\n+                    \"Verification in order failure:\" +\n                     \"\\n\" +\n                     \"iMethods.simpleMethod(2);\" +\n                     \"\\n\" +\n-                    \"Wanted 1 time but was 2\"; \n-            assertEquals(expectedMessage, actualMessage);      \n-            \n-            assertEquals(UndesiredInvocation.class, e.getCause().getClass());\n+                    \"Wanted 1 time:\" +\n+                    \"\\n\" +\n+                    \"-> at\"; \n+            assertContains(expectedMessage, actualMessage);      \n \n             String expectedCause =\n                 \"\\n\" +\n-                \"Undesired invocation:\";\n-            assertEquals(expectedCause, e.getCause().getMessage());\n+                \"But was 2 times. Undesired invocation:\" +\n+                \"\\n\" +\n+                \"-> at\";\n+            assertContains(expectedCause, e.getMessage());\n         }\n     }  \n     ", "timestamp": 1238765012, "metainfo": ""}