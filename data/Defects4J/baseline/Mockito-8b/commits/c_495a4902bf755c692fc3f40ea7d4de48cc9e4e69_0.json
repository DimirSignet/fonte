{"sha": "495a4902bf755c692fc3f40ea7d4de48cc9e4e69", "log": "Added generic friendly aliases to anyList(), anyCollection(), anySet()  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401364", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n     }    \n     \n     /**\n+     * generic friendly alias to {@link Matchers#anyList()}.\n+     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n+     * <p>\n+     * any List or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return empty List.\n+     */\n+    public static <T> List<T> anyListOf(Class<T> clazz) {\n+        return (List) reportMatcher(Any.ANY).returnList();\n+    }    \n+    \n+    /**\n      * any Set or null\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      */\n     public static Set anySet() {\n         return reportMatcher(Any.ANY).returnSet();\n+    }\n+    \n+    /**\n+     * generic friendly alias to {@link Matchers#anySet()}.\n+     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n+     * <p>\n+     * any Set or null\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     *\n+     * @return empty Set\n+     */\n+    public static <T> Set<T> anySetOf(Class<T> clazz) {\n+        return (Set) reportMatcher(Any.ANY).returnSet();\n     }\n \n     /**\n      */\n     public static Collection anyCollection() {\n         return reportMatcher(Any.ANY).returnList();\n+    }    \n+    \n+    /**\n+     * generic friendly alias to {@link Matchers#anyCollection()}. \n+     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.     \n+     * <p>\n+     * any Collection or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return empty Collection.\n+     */\n+    public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n+        return (Collection) reportMatcher(Any.ANY).returnList();\n     }    \n \n     /**\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n     Object objectArgMethod(Object str);\n \n     Object listArgMethod(List<String> list);\n-\n+    \n     Object collectionArgMethod(Collection<String> collection);\n+\n+    Object setArgMethod(Set<String> set);\n }\n--- a/test/org/mockitousage/matchers/MoreMatchersTest.java\n+++ b/test/org/mockitousage/matchers/MoreMatchersTest.java\n \n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n \n import org.junit.Test;\n import org.mockito.Mock;\n     }\n     \n     @Test\n+    public void shouldHelpOutWithUnnecessaryCastingOfLists() {\n+        //Below yields compiler warning:\n+        //when(mock.listArgMethod(anyList())).thenReturn(\"list\");\n+        when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n+        \n+        assertEquals(\"list\", mock.listArgMethod(new LinkedList<String>()));\n+        assertEquals(\"list\", mock.listArgMethod(Collections.<String>emptyList()));\n+    }\n+    \n+    @Test\n+    public void shouldHelpOutWithUnnecessaryCastingOfSets() {\n+        //Below yields compiler warning:\n+        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n+        when(mock.setArgMethod(anySetOf(String.class))).thenReturn(\"set\");\n+        \n+        assertEquals(\"set\", mock.setArgMethod(new HashSet<String>()));\n+        assertEquals(\"set\", mock.setArgMethod(Collections.<String>emptySet()));\n+    }\n+    \n+    @Test\n     public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n-//        TODO: implement after 1.7\n-//        when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n-//        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"collection\");\n-//        \n-//        assertEquals(\"list\", mock.listArgMethod(new LinkedList()));\n-//        assertEquals(null, mock.listArgMethod(new LinkedList()));\n+        //Below yields compiler warning:\n+        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n+        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"col\");\n+        \n+        assertEquals(\"col\", mock.collectionArgMethod(new ArrayList<String>()));\n+        assertEquals(\"col\", mock.collectionArgMethod(Collections.<String>emptyList()));\n     }\n }", "timestamp": 1240482335, "metainfo": ""}