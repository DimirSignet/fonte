{"sha": "4816bf05f20b696b869633978a75dd970d032ac1", "log": "Refactored loads of stuff. Introduced new interface for external stuff from MockHandler  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401727", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n  */\n package org.mockito.internal;\n \n-import java.util.List;\n-\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.*;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n-import org.mockito.internal.stubbing.*;\n-import org.mockito.internal.util.MockName;\n-import org.mockito.internal.verification.*;\n+import org.mockito.internal.stubbing.MockitoStubber;\n+import org.mockito.internal.stubbing.OngoingStubbingImpl;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n+import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n+\n+import java.util.List;\n \n /**\n  * Invocation handler set on mock objects.\n  * @param <T>\n  *            type of mock object to handle\n  */\n-public class MockHandler<T> implements MockitoInvocationHandler {\n+public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> {\n \n     private static final long serialVersionUID = -2917871070982574165L;\n \n     MockitoStubber mockitoStubber;\n-    MatchersBinder matchersBinder;\n-    MockingProgress mockingProgress;\n+    MatchersBinder matchersBinder = new MatchersBinder();\n+    MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n \n     private final MockSettingsImpl mockSettings;\n \n-    public MockHandler(MockingProgress mockingProgress, MatchersBinder matchersBinder,\n-                    MockSettingsImpl mockSettings) {\n-        this.mockingProgress = mockingProgress;\n-        this.matchersBinder = matchersBinder;\n+    public MockHandler(MockSettingsImpl mockSettings) {\n         this.mockSettings = mockSettings;\n-        this.mockitoStubber = new MockitoStubber(mockingProgress);        \n-    }\n-\n-    public MockHandler(MockHandler<T> oldMockHandler) {\n-        this(oldMockHandler.mockingProgress, oldMockHandler.matchersBinder,\n-                        oldMockHandler.mockSettings);\n+        this.mockingProgress = new ThreadSafeMockingProgress();\n+        this.matchersBinder = new MatchersBinder();\n+        this.mockitoStubber = new MockitoStubber(mockingProgress);\n     }\n \n     // for tests\n     MockHandler() {\n-        this(new ThreadSafeMockingProgress(),\n-                        new MatchersBinder(), new MockSettingsImpl());\n+        this(new MockSettingsImpl());\n+    }\n+\n+    public MockHandler(MockHandlerInterface<T> oldMockHandler) {\n+        this(oldMockHandler.getMockSettings());\n     }\n \n     public Object handle(Invocation invocation) throws Throwable {\n         return mockitoStubber.getStubbedInvocations();\n     }\n \n-    public MockName getMockName() {\n-        return mockSettings.getMockName();\n+    public MockSettingsImpl getMockSettings() {\n+        return mockSettings;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n--- /dev/null\n+++ b/src/org/mockito/internal/MockHandlerInterface.java\n+package org.mockito.internal;\n+\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.VoidMethodStubbable;\n+\n+import java.util.List;\n+\n+public interface MockHandlerInterface<T> {\n+\n+    MockSettingsImpl getMockSettings();\n+\n+    void verifyNoMoreInteractions();\n+\n+    VoidMethodStubbable<T> voidMethodStubbable(T mock);\n+\n+    void setAnswersForStubbing(List<Answer> answers);\n+\n+    List<Invocation> getRegisteredInvocations();\n+\n+    List<StubbedInvocationMatcher> getStubbedInvocations();\n+}\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n     public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n         mockingProgress.validateState();\n         mockingProgress.resetOngoingStubbing();\n-        return mockUtil.createMock(classToMock, mockingProgress, (MockSettingsImpl) mockSettings);\n+        return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n     public IOngoingStubbing stub() {\n     }\n     \n     public <T> VoidMethodStubbable<T> stubVoid(T mock) {\n-        MockHandler<T> handler = mockUtil.getMockHandler(mock);\n+        MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock);\n         mockingProgress.stubbingStarted();\n         return handler.voidMethodStubbable(mock);\n     }\n--- a/src/org/mockito/internal/MockitoInvocationHandler.java\n+++ b/src/org/mockito/internal/MockitoInvocationHandler.java\n import java.io.Serializable;\n \n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.stubbing.VoidMethodStubbable;\n \n public interface MockitoInvocationHandler extends Serializable {\n \n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n+import org.mockito.internal.MockHandlerInterface;\n import org.mockito.internal.creation.MethodInterceptorFilter;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n         this(new CreationValidator());\n     }\n \n-    public <T> T createMock(Class<T> classToMock, MockingProgress progress, MockSettingsImpl settings) {\n+    public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) {\n         creationValidator.validateType(classToMock);\n         creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\n         creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\n \n         settings.initiateMockName(classToMock);\n \n-        MockHandler<T> mockHandler = new MockHandler<T>(progress, new MatchersBinder(), settings);\n+        MockHandler<T> mockHandler = new MockHandler<T>(settings);\n         MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n         Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n     }\n \n     public <T> void resetMock(T mock) {\n-        MockHandler<T> oldMockHandler = getMockHandler(mock);\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n         MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \n                         (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n-    public <T> MockHandler<T> getMockHandler(T mock) {\n+    public <T> MockHandlerInterface<T> getMockHandler(T mock) {\n         if (mock == null) {\n             throw new NotAMockException(\"Argument should be a mock, but is null!\");\n         }\n \n         if (isMockitoMock(mock)) {\n-            return (MockHandler) getInterceptor(mock).getHandler();\n+            return (MockHandlerInterface) getInterceptor(mock).getHandler();\n         } else {\n             throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n     }\n \n     public MockName getMockName(Object mock) {\n-        return getMockHandler(mock).getMockName();\n+        return getMockHandler(mock).getMockSettings().getMockName();\n     }\n }\n--- a/test/org/mockito/internal/util/MockUtilTest.java\n+++ b/test/org/mockito/internal/util/MockUtilTest.java\n         assertFalse(creationValidator.typeValidated);\n \n         //when\n-        mockUtil.createMock(IMethods.class, new ThreadSafeMockingProgress(), new MockSettingsImpl());\n+        mockUtil.createMock(IMethods.class, new MockSettingsImpl());\n         \n         //then\n         assertTrue(creationValidator.extraInterfacesValidated);", "timestamp": 1258316363, "metainfo": ""}