{"sha": "bd87a9717de30b4033229cd3be9a0659b4fcc378", "log": "tuned javadoc  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40594", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n /**\n  * Enables mocks creation, verification and stubbing.\n+ * \n+ * <h1>Contents</h1>\n+ * \n+ * <b>\n+ *         1. Let's verify some behaviour!\n+ *   <br/> 2. How about some stubbing?\n+ *   <br/> 3. Argument matchers\n+ *   <br/> 4. Verifying exact number of invocations / at least once / never\n+ *   <br/> 5. Stubbing void methods with exceptions\n+ *   <br/> 6. Verification in order\n+ *   <br/> 7. Making sure interaction(s) never happened on mock\n+ *   <br/> 8. Finding redundant invocations\n+ *   <br/> 9. Shorthand for mocks creation - &#064;Mock annotation\n+ * </b>\n+ * \n  * <p>\n  * Following examples mock List, because everyone knows its interface (methods like add(), get(), clear() will be used). \n  * <br>You probably wouldn't mock List class 'in real'.  \n  * \n- * <h3>Let's verify some behaviour!</h3>\n+ * <h3>1. Let's verify some behaviour!</h3>\n  * \n  * <pre>\n  * //Let's import Mockito statically so that code looks clearer\n  * Once created, mock will remember all invocations. Then you can\n  * selectively verify whatever interaction you are interested in.\n  * \n- * <h3>How about some stubbing?</h3>\n+ * <h3>2. How about some stubbing?</h3>\n  * \n  * <pre>\n  * //You can mock concrete classes, not only interfaces\n  * //following prints \"null\" because get(999) was not stubbed\n  * System.out.println(mockedList.get(999));\n  * \n- * //if you really want you can still verify stubbed invocation. In most cases it's not necessary, though. \n+ * //Stubbed invocations <b>are verified implicitly</b>. The execution flow of your own code does it completely <b>for free</b>. \n+ * //Although it is possible to verify a stubbed invocation, in majority of cases <b>it's not necessary</b>:\n  * verify(mockedList).get(0);\n  * </pre>\n  * \n  * Last stubbing is more important - when you stubbed the same method with the same arguments many times.\n  * </li>\n  * <li>\n- * Although it's possible to verify stubbed methods it's a good pattern to focus on testing that stubbed value is used correctly.\n+ * Although it is possible to verify a stubbed invocation, in majority of cases <b>it's not necessary</b>.\n+ * Stubbed invocations <b>are verified implicitly</b>. The execution flow of your own code does it completely <b>for free</b>.\n  * </li> \n  * </ul>\n  * \n- * <h3>Argument matchers</h3>\n+ * <h3>3. Argument matchers</h3>\n  * \n  * <pre>\n  *  //stubbing using built-in anyInt() argument matcher\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n  * </pre>\n  * \n- * <h3>Verifying exact number of invocations / at least once / never</h3>\n+ * <h3>4. Verifying exact number of invocations / at least once / never</h3>\n  *\n  *<pre>\n  *  //using mock \n  * <p>\n  * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be omitted.\n  * \n- * <h3>Stubbing void methods with an exceptions</h3>\n+ * <h3>5. Stubbing void methods with exceptions</h3>\n  * \n  * <pre>\n  *   stubVoid(mockedList).toThrow(new RuntimeException()).on().clear();\n  *   mockedList.clear();\n  * </pre>\n  *\n- * <h3>Verification in order</h3>\n+ * <h3>6. Verification in order</h3>\n  * \n  * <pre>\n  *   List firstMock = mock(List.class);\n  * <p>\n  * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  \n  *\n- * <h3>Making sure interaction(s) never happened on mock</h3>\n+ * <h3>7. Making sure interaction(s) never happened on mock</h3>\n  * \n  * <pre>\n  *   //using mocks - only mockOne is interacted\n  * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n  * the first one is more explicit and can read better.\n  *\n- * <h3>Finding redundant invocations</h3>\n+ * <h3>8. Finding redundant invocations</h3>\n  * \n  * <pre>\n  *   //using mocks\n  * See also {@link Mockito#never()} - it is more explicit and communicates an intent well. \n  * <p>\n  * \n- * <h3>Shorthand for mocks creation - &#064;Mock annotation</h3>\n+ * <h3>9. Shorthand for mocks creation - &#064;Mock annotation</h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.</li> \n      * <p>\n      * Last stubbing is more important - when you stubbed the same method with the same arguments many times.\n      * <p>\n-     * Although it's possible to verify stubbed methods it's a good pattern to focus on testing that stubbed value is used correctly.\n+     * Although it's possible to verify stubbed methods, bear in mind that <b>are verified for free</b>.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * ", "timestamp": 1208873794, "metainfo": ""}