{"sha": "066d665c371e1d2f6a44f0557e96e5105f18230b", "log": "introducing Printable object :)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40324", "commit": "\n--- a/src/org/mockito/exceptions/Printable.java\n+++ b/src/org/mockito/exceptions/Printable.java\n package org.mockito.exceptions;\n \n+//TODO exceptions.Printable ?\n public interface Printable {\n \n     String toString();\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         ));\n     }\n \n+    //TODO Printable for those strings?\n     public void wantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n         WantedDiffersFromActual cause1 = new WantedDiffersFromActual(join(\n                 \"Actual invocation:\",\n             ), cause);\n     }\n     \n-    public void wantedDiffersFromActualInOrder(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n-        WantedDiffersFromActual cause1 = new WantedDiffersFromActual(join(\n-                \"Actual invocation in order:\",\n-                actual\n-            ));\n-        \n-        cause1.setStackTrace(actualInvocationStackTrace.getStackTrace());\n-        WantedDiffersFromActual cause = cause1;\n-\n-        throw new VerifcationInOrderFailed(join(\n-                \"Verification in order failed\",\n-                \"Wanted invocation:\",\n-                wanted\n-            ), cause);\n-    }\n-\n     public void wantedButNotInvoked(Printable wanted) {\n         throw new WantedButNotInvoked(join(\n                     \"Wanted but not invoked:\",\n         ));\n     }\n     \n-    //TODO do something about those objects (Printable object)\n     //TODO previous and previousStackTrace should be the same object\n-    public void wantedButNotInvokedInOrder(Printable wanted, Object previous, HasStackTrace previousStackTrace) {\n+    public void wantedButNotInvokedInOrder(Printable wanted, Printable previous, HasStackTrace previousStackTrace) {\n         WantedAnywhereAfterFollowingInteraction cause = new WantedAnywhereAfterFollowingInteraction(join(\n                         \"Wanted anywhere AFTER following interaction:\",\n                         previous.toString()));\n         ), cause);\n     }\n \n-    public void tooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n+    public void tooManyActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n         UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n \n         throw new TooManyActualInvocations(join(\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }\n-    \n-    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n+                wanted.toString(),\n+                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+    \n+    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n         UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n \n         throw new VerifcationInOrderFailed(join(\n                 \"Verification in order failed\",\n-                wanted,\n+                wanted.toString(),\n                 \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n         ), cause);\n     }\n         return cause;\n     }    \n \n-    public void tooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualInvocationStackTrace) {\n+    public void tooLittleActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualInvocationStackTrace) {\n         TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualInvocationStackTrace);\n \n         throw new TooLittleActualInvocations(join(\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }\n-\n-    \n-    public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualStackTrace) {\n+                wanted.toString(),\n+                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+\n+    \n+    public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualStackTrace) {\n         TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n \n         throw new VerifcationInOrderFailed(join(\n                 \"Verification in order failed\",\n-                wanted,\n+                wanted.toString(),\n                 \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n         ), cause);\n     }\n         return cause;\n     }\n \n-    public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n+    public void noMoreInteractionsWanted(Printable undesired, HasStackTrace actualInvocationStackTrace) {\n         UndesiredInvocation cause = new UndesiredInvocation(join(\n                 \"Undesired invocation:\", \n-                undesired\n+                undesired.toString()\n         ));\n         \n         cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockNamer;\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class Invocation {\n+public class Invocation implements Printable {\n \n     private final int sequenceNumber;\n     private final Object mock;\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n \n         Invocation unverified = finder.findFirstUnverified(invocations);\n         if (unverified != null) {\n-            reporter.noMoreInteractionsWanted(unverified.toString(), unverified.getStackTrace());\n+            reporter.noMoreInteractionsWanted(unverified, unverified.getStackTrace());\n         }\n     }\n }\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n         \n         if (mode.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n-            reporter.tooLittleActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted.toString(), lastInvocation);\n+            reporter.tooLittleActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, lastInvocation);\n         }\n         \n         if (mode.tooManyActualInvocations(actualCount)) {\n             HasStackTrace firstUndesired = chunk.get(mode.wantedCount()).getStackTrace();\n-            reporter.tooManyActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted.toString(), firstUndesired);\n+            reporter.tooManyActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, firstUndesired);\n         }\n         \n         for (Invocation i : chunk) {\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n         int actualCount = actualInvocations.size();\n         if (mode.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n-            reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted.toString(), lastInvocation);\n+            reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);\n         } else if (mode.tooManyActualInvocations(actualCount)) {\n             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n-            reporter.tooManyActualInvocations(mode.wantedCount(), actualCount, wanted.toString(), firstUndesired);\n+            reporter.tooManyActualInvocations(mode.wantedCount(), actualCount, wanted, firstUndesired);\n         }\n         \n         for (Invocation i : actualInvocations) {\n--- a/test/org/mockito/exceptions/ReporterTest.java\n+++ b/test/org/mockito/exceptions/ReporterTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n+import org.mockito.internal.invocation.InvocationBuilder;\n \n public class ReporterTest extends RequiresValidState {\n \n     @Test(expected=TooLittleActualInvocations.class)\n     public void shouldLetPassingNullLastActualStackTrace() throws Exception {\n-        new Reporter().tooLittleActualInvocations(1, 2, \"wanted\", null);\n+        new Reporter().tooLittleActualInvocations(1, 2, new InvocationBuilder().toInvocation(), null);\n     }\n }\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n     \n     class ReporterStub extends Reporter {\n         private Printable wanted;\n-        private Object previous;\n+        private Printable previous;\n         private HasStackTrace previousStackTrace;\n         \n-        @Override public void wantedButNotInvokedInOrder(Printable wanted, Object previous, HasStackTrace previousStackTrace) {\n+        @Override public void wantedButNotInvokedInOrder(Printable wanted, Printable previous, HasStackTrace previousStackTrace) {\n             this.wanted = wanted;\n             this.previous = previous;\n             this.previousStackTrace = previousStackTrace;\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n         \n         assertSame(invocations, finder.invocations);\n         \n-        assertEquals(firstUnverified.toString(), reporterStub.undesired);\n+        assertEquals(firstUnverified, reporterStub.undesired);\n         assertSame(firstUnverified.getStackTrace(), reporterStub.actualInvocationStackTrace);\n     }\n     \n     class ReporterStub extends Reporter {\n-        private String undesired;\n+        private Printable undesired;\n         private HasStackTrace actualInvocationStackTrace;\n-        @Override public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n+        @Override public void noMoreInteractionsWanted(Printable undesired, HasStackTrace actualInvocationStackTrace) {\n             this.undesired = undesired;\n             this.actualInvocationStackTrace = actualInvocationStackTrace;\n         }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n         \n         assertEquals(1, reporterStub.actualCount);\n         assertEquals(100, reporterStub.wantedCount);\n-        assertEquals(wanted.toString(), reporterStub.wanted);\n+        assertEquals(wanted, reporterStub.wanted);\n     }\n \n     @Test\n         \n         assertEquals(1, reporterStub.actualCount);\n         assertEquals(0, reporterStub.wantedCount);\n-        assertEquals(wanted.toString(), reporterStub.wanted);\n+        assertEquals(wanted, reporterStub.wanted);\n     }\n     \n     @Test\n     class ReporterStub extends Reporter {\n         private int wantedCount;\n         private int actualCount;\n-        private String wanted;\n+        private Printable wanted;\n         private HasStackTrace stackTrace;\n-        @Override public void tooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualInvocationStackTrace) {\n+        @Override public void tooLittleActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualInvocationStackTrace) {\n                     this.wantedCount = wantedCount;\n                     this.actualCount = actualCount;\n                     this.wanted = wanted;\n                     this.stackTrace = lastActualInvocationStackTrace;\n         }\n         \n-        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n+        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n                     this.wantedCount = wantedCount;\n                     this.actualCount = actualCount;\n                     this.wanted = wanted;", "timestamp": 1201027802, "metainfo": ""}