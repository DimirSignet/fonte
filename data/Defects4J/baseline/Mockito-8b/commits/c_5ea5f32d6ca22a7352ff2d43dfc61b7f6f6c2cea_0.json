{"sha": "5ea5f32d6ca22a7352ff2d43dfc61b7f6f6c2cea", "log": "extract simple field processing as small functions  --HG-- branch : issue 304 : TestNG integration", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/CaptorAnnotationProcessor.java\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.util.reflection.GenericMaster;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Instantiate {@link \u2021ArgumentCaptor} a field annotated by &#64;Captor.\n+ */\n+public class CaptorAnnotationProcessor implements FieldAnnotationProcessor<Captor> {\n+    public Object process(Captor annotation, Field field) {\n+        Class<?> type = field.getType();\n+        if (!ArgumentCaptor.class.isAssignableFrom(type)) {\n+            throw new MockitoException(\"@Captor field must be of the type ArgumentCaptor.\\n\" + \"Field: '\"\n+               + field.getName() + \"' has wrong type\\n\"\n+               + \"For info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.\");\n+        }\n+        Class cls = new GenericMaster().getGenericType(field);\n+        return ArgumentCaptor.forClass(cls);\n+    }\n+}\n--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.configuration;\n \n-import org.mockito.*;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n import org.mockito.configuration.AnnotationEngine;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.FieldSetter;\n-import org.mockito.internal.util.reflection.GenericMaster;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * Initializes fields annotated with &#64;{@link org.mockito.Mock} or &#64;{@link org.mockito.Captor}.\n  */\n @SuppressWarnings(\"unchecked\")\n public class DefaultAnnotationEngine implements AnnotationEngine {\n+    private final Map<Class<? extends Annotation>, FieldAnnotationProcessor<?>> annotationProcessorMap = new HashMap<Class<? extends Annotation>, FieldAnnotationProcessor<?>>();\n+\n+    public DefaultAnnotationEngine() {\n+        registerAnnotationProcessor(Mock.class, new MockAnnotationProcessor());\n+        registerAnnotationProcessor(MockitoAnnotations.Mock.class, new MockitoAnnotationsMockAnnotationProcessor());\n+        registerAnnotationProcessor(Captor.class, new CaptorAnnotationProcessor());\n+    }\n \n     /* (non-Javadoc)\n     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)\n     */\n     @SuppressWarnings(\"deprecation\")\n     public Object createMockFor(Annotation annotation, Field field) {\n-        if (annotation instanceof Mock) {\n-            return processAnnotationOn((Mock) annotation, field);\n-        }\n-        if (annotation instanceof MockitoAnnotations.Mock) {\n-            return processAnnotationOn((MockitoAnnotations.Mock) annotation, field);\n-        }\n-        if (annotation instanceof Captor) {\n-            return processAnnotationOn((Captor) annotation, field);\n-        }        \n-\n-        return null;\n-    }\n-    \n-    private Object processAnnotationOn(Mock annotation, Field field) {\n-        MockSettings mockSettings = Mockito.withSettings();\n-        if (annotation.extraInterfaces().length > 0) { // never null\n-            mockSettings.extraInterfaces(annotation.extraInterfaces());\n-        }\n-        if (\"\".equals(annotation.name())) {\n-            mockSettings.name(field.getName());\n-        } else {\n-            mockSettings.name(annotation.name());\n-        }\n-\n-        // see @Mock answer default value\n-        mockSettings.defaultAnswer(annotation.answer().get());\n-        return Mockito.mock(field.getType(), mockSettings);\n+        return forAnnotation(annotation).process(annotation, field);\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n-    private Object processAnnotationOn(org.mockito.MockitoAnnotations.Mock annotation, Field field) {\n-        return Mockito.mock(field.getType(), field.getName());\n+    private <A extends Annotation> FieldAnnotationProcessor<A> forAnnotation(A annotation) {\n+        if (annotationProcessorMap.containsKey(annotation.annotationType())) {\n+            return (FieldAnnotationProcessor<A>) annotationProcessorMap.get(annotation.annotationType());\n+        }\n+        return new FieldAnnotationProcessor<A>() {\n+            public Object process(A annotation, Field field) {\n+                return null;\n+            }\n+        };\n     }\n-    \n-    private Object processAnnotationOn(Captor annotation, Field field) {\n-        Class<?> type = field.getType();\n-        if (!ArgumentCaptor.class.isAssignableFrom(type)) {\n-            throw new MockitoException(\"@Captor field must be of the type ArgumentCaptor.\\n\" + \"Field: '\"\n-                    + field.getName() + \"' has wrong type\\n\"\n-                    + \"For info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.\");\n-        }\n-        Class cls = new GenericMaster().getGenericType(field);        \n-        return ArgumentCaptor.forClass(cls);    \n-    }           \n+\n+    private <A extends Annotation> void registerAnnotationProcessor(Class<A> annotationClass, FieldAnnotationProcessor<A> fieldAnnotationProcessor) {\n+        annotationProcessorMap.put(annotationClass, fieldAnnotationProcessor);\n+    }\n \n     public void process(Class<?> clazz, Object testInstance) {\n         Field[] fields = clazz.getDeclaredFields();\n             new Reporter().moreThanOneAnnotationNotAllowed(field.getName());\n         }\n     }\n+\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/FieldAnnotationProcessor.java\n+package org.mockito.internal.configuration;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Simple annotation processor interface.\n+ */\n+public interface FieldAnnotationProcessor<A extends Annotation> {\n+    Object process(A annotation, Field field);\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/MockAnnotationProcessor.java\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.Mock;\n+import org.mockito.MockSettings;\n+import org.mockito.Mockito;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Instantiates a mock on a field annotated by {@link Mock}\n+ */\n+public class MockAnnotationProcessor implements FieldAnnotationProcessor<Mock> {\n+    public Object process(Mock annotation, Field field) {\n+        MockSettings mockSettings = Mockito.withSettings();\n+        if (annotation.extraInterfaces().length > 0) { // never null\n+            mockSettings.extraInterfaces(annotation.extraInterfaces());\n+        }\n+        if (\"\".equals(annotation.name())) {\n+            mockSettings.name(field.getName());\n+        } else {\n+            mockSettings.name(annotation.name());\n+        }\n+\n+        // see @Mock answer default value\n+        mockSettings.defaultAnswer(annotation.answer().get());\n+        return Mockito.mock(field.getType(), mockSettings);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/MockitoAnnotationsMockAnnotationProcessor.java\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.MockitoAnnotations.Mock;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Instantiates a mock on a field annotated by {@link MockitoAnnotations.Mock}\n+ */\n+@SuppressWarnings(\"deprecation\")\n+public class MockitoAnnotationsMockAnnotationProcessor implements FieldAnnotationProcessor<Mock> {\n+\n+    public Object process(MockitoAnnotations.Mock annotation, Field field) {\n+        return Mockito.mock(field.getType(), field.getName());\n+    }\n+}", "timestamp": 1331516383, "metainfo": ""}