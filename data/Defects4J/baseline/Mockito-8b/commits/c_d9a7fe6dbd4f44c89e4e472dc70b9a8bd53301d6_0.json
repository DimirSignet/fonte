{"sha": "d9a7fe6dbd4f44c89e4e472dc70b9a8bd53301d6", "log": "final javadoc fixes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401192", "commit": "\n--- a/src/org/junit/mockito/VerboseMockitoJUnitRunner.java\n+++ b/src/org/junit/mockito/VerboseMockitoJUnitRunner.java\n /**\n  * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n  * <p>\n- * Experimental implementation that suppose to enhance tdd/testing experience. \n+ * Experimental implementation that suppose to improve tdd/testing experience. \n  * Don't hesitate to send feedback to mockito@googlegroups.com\n  * <p>\n  * This runner does exactly what {@link MockitoJUnitRunner} does but also  \n- * prints useful warnings that can enhance testing experience. \n+ * prints warnings that might be useful. \n  * The point is that Mockito should help the tdd developer to quickly figure out if the test fails for the right reason. \n  * Then the developer can implement the functionality. \n  * Also when the test fails it should be easy to figure out why the test fails. \n  * <p>\n  * One way of approaching this problem is full-blown 'expect' API. \n  * However it means the 'expectations upfront' business which is not in line with core Mockito concepts.\n- * After all, one of the key points of Mockito are <b>explicit assertions</b> that are always placed at the <b>bottom of the test</b> method.\n+ * After all, the essence of testing are <b>explicit assertions</b> that are described consistently at the <b>bottom of the test</b> method.\n  * <p>\n- * Let's look at different ways of addressing the issue.\n  * Here's the experiment: a warning is printed to the standard output if the test fails.\n  * Also, you get a clickabe link to the line of code. You can immediately jump to the place in code where the potential problem is.\n  * <p> \n  * Let's say the underlying reason is a stubbed method that was called with different arguments:\n  * <pre>\n  * //test:\n+ * Dictionary dictionary = new Dictionary(translator);\n  * when(translator.translate(\"Mockito\")).thenReturn(\"cool framework\");\n  * String translated = dictionary.search(\"Mockito\");\n  * assertEquals(\"cool framework\", translated);\n  * </pre>\n  * <p>\n  * Note that it is just a warning, not an assertion. \n- * The test fails on assertion because it's the assertion's task to document what the test stands for and what behavior it proves. \n- * Warnings just helps debugging tests.\n+ * The test fails on assertion because it's the assertion's duty to document what the test stands for and what behavior it proves. \n+ * Warnings just makes it quicker to figure out if the test fails for the right reason.\n  * <p>\n  * Note that code links printed to the console are clickable in any decent IDE (e.g. Eclipse).\n  * <p>\n--- a/src/org/mockito/AnnotationEngine.java\n+++ b/src/org/mockito/AnnotationEngine.java\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n \n-import org.mockito.internal.configuration.DefaultAnnotationEngine;\n-\n /**\n  * Configures mock creation logic behind &#064;Mock annotations\n  * <p>\n- * See how it is implemented in {@link DefaultAnnotationEngine} and {@link MockitoAnnotations#initMocks(Object)}\n+ * If you are interested then see implementations or source code of {@link MockitoAnnotations#initMocks(Object)}\n  */\n public interface AnnotationEngine {\n \n     /**\n-     * @param annotation\n-     * @param field\n-     * @return\n+     * Usually the implementation checks the annotation  \n+     * and then creates a mock object for specified field.\n+     * <p>\n+     * You don't need to set the mock on the field. Mockito does it for you. \n+     * If in doubts look for implementations of this interface.\n+     * \n+     * @param annotation annotation on the field, for example &#064;Mock\n+     * @param field field to create mock object for\n+     * @return mock created for specified field. Can be null - then Mockito will not initialize the field\n      */\n     Object createMockFor(Annotation annotation, Field field);\n \n--- a/src/org/mockito/IMockitoConfiguration.java\n+++ b/src/org/mockito/IMockitoConfiguration.java\n package org.mockito;\n+\n+import org.mockito.internal.returnvalues.EmptyReturnValues;\n \n /**\n  * Use it to configure Mockito. For now there are not many configuration options but it may change in future.\n  * <p>\n  * In most cases you don't really need to configure Mockito. For example in case of working with legacy code, \n  * when you might want to have different 'mocking style' this interface might be helpful. \n- * A reason of configuring Mockito might be if you disagree with the default return values Mockito mocks return.\n- * <p>\n- * Currently, configuring Mockito can help you changing {@link ReturnValues} for all mocks. \n- * {@link ReturnValues} determines the return values for unstubbed invocations.\n+ * A reason of configuring Mockito might be if you disagree with the {@link EmptyReturnValues} unstubbed mocks return.\n  * <p>\n  * To configure Mockito create exactly <b>org.mockito.MockitoConfiguration</b> class that implements this interface.\n  * <p>\n  * <b>org.mockito.MockitoConfiguration</b> must implement IMockitoConfiguration or extend {@link DefaultMockitoConfiguration}\n  * <p>\n  * Mockito will store single instance of org.mockito.MockitoConfiguration per thread (using ThreadLocal). \n- * For sanity of your tests, don't make the implementation stateful.   \n+ * For sanity of your tests, don't make the implementation stateful.\n  * <p>\n  * If you have comments on Mockito configuration feature don't hesitate to write to mockito@googlegroups.com\n  */\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.internal.progress.OngoingStubbing;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.returnvalues.EmptyReturnValues;\n import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n import org.mockito.internal.returnvalues.MoreEmptyReturnValues;\n import org.mockito.internal.returnvalues.SmartNullReturnValues;\n  * \n  * You can create a mock with specified strategy of for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n- * However it can be helpful for working with legacy systems.\n- * <p>\n- * Obviously return values are used only when you don't stub the method call.\n+ * However, it can be helpful for working with legacy systems.\n+ * <p>\n+ * Obviously those return values are used only when you don't stub the method call.\n  * \n  * <pre>\n  *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n  * </pre>\n  * \n  * <p>\n- * Read more about {@link Mockito#RETURNS_SMART_NULLS}\n- * <p>\n- * Optionally, you can configure default return values using {@link IMockitoConfiguration}.\n- * \n- * <h3>15. (**New**) VerboseMockitoJUnitRunner to enhance testing experience</h3>\n+ * Read more about this interesting implementation of <i>ReturnValues</i>: {@link Mockito#RETURNS_SMART_NULLS}\n+ * <p>\n+ * Optionally, you can configure default return values for all mocks using {@link IMockitoConfiguration}.\n+ * \n+ * <h3>15. (**New**) experimental VerboseMockitoJUnitRunner to improve testing/tdd experience</h3>\n  *      \n- * Experimental VerboseMockitoJUnitRunner initializes &#064;Mock annotated mocks and prints useful warnings that can enhance testing experience.\n+ * Experimental VerboseMockitoJUnitRunner initializes &#064;Mock annotated mocks \n+ * and also prints warnings that might be useful.\n  * <p>\n  * Read more in javadoc for {@link VerboseMockitoJUnitRunner} class.\n  */\n      * {@link ReturnValues} defines the return values of unstubbed invocations. \n      * <p>\n      * This implementation first tries the global configuration (see {@link IMockitoConfiguration}). \n-     * If there is no global configuration then it uses {@link DefaultReturnValues} (returns zeros, empty collections, nulls, etc.)\n+     * If there is no global configuration then it uses {@link EmptyReturnValues} (returns zeros, empty collections, nulls, etc.)\n      */\n     public static final ReturnValues RETURNS_DEFAULTS = new GloballyConfiguredReturnValues();\n     \n      * SmartNullReturnValues first tries to return ordinary return values (see {@link MoreEmptyReturnValues})\n      * then it tries to return SmartNull. If the return type is final then plain null is returned.\n      * <p>\n-     * SmartNullReturnValues will be probably the default return values strategy in Mockito 2.0 \n+     * SmartNullReturnValues will be probably the default return values strategy in Mockito 2.0\n+     * <p>\n+     * Example:\n+     * <pre>\n+     *   Foo mock = (Foo.class, RETURNS_SMART_NULLS);\n+     *   \n+     *   //calling unstubbed method here:\n+     *   Stuff stuff = mock.getStuff();\n+     *   \n+     *   //using object returned by unstubbed call:\n+     *   stuff.doSomething();\n+     *   \n+     *   //Above doesn't yield NullPointerException this time!\n+     *   //Instead, SmartNullPointerException is thrown. \n+     *   //Exception's cause links to unstubbed <i>mock.getStuff()</i> - just click on the stack trace.  \n+     * </pre>\n      */\n     public static final ReturnValues RETURNS_SMART_NULLS = new SmartNullReturnValues();\n     \n--- a/src/org/mockito/internal/configuration/ClassPathLoader.java\n+++ b/src/org/mockito/internal/configuration/ClassPathLoader.java\n public class ClassPathLoader {\n     \n     /**\n-     * @param defaultConfiguration - to be used if no config found on classpath\n-     * @return\n+     * @return configuration loaded from classpath or null\n      */\n     @SuppressWarnings({\"unchecked\"})\n     public IMockitoConfiguration loadConfiguration() {\n--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n import org.mockito.AnnotationEngine;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n \n+/**\n+ * Initializes fields annotated with &#064;Mock\n+ * <p>\n+ * See {@link MockitoAnnotations}\n+ */\n public class DefaultAnnotationEngine implements AnnotationEngine {\n     \n     /* (non-Javadoc)\n--- a/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n import org.mockito.IMockitoConfiguration;\n import org.mockito.ReturnValues;\n \n+/**\n+ * Thread-safe wrapper on user-defined org.mockito.MockitoConfiguration implementation\n+ */\n public class GlobalConfiguration implements IMockitoConfiguration {\n     \n     private static ThreadLocal<IMockitoConfiguration> globalConfiguration = new ThreadLocal<IMockitoConfiguration>();\n--- a/src/org/mockito/internal/configuration/MockitoConfiguration.java\n+++ b/src/org/mockito/internal/configuration/MockitoConfiguration.java\n     void setReturnValues(ReturnValues returnValues);\n \n     /**\n-     * Resets {@link ReturnValues} implementation to the default one: {@link MockitoProperties#DEFAULT_RETURN_VALUES}\n+     * Resets {@link ReturnValues} implementation to the default one\n      */\n     void resetReturnValues();\n }\n--- a/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n \n import java.lang.reflect.Array;\n \n+import org.mockito.Mockito;\n import org.mockito.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * It's likely this implmentation will be used by default by every Mockito 2.0 mock.\n+ * It's likely this implementation will be used by default by every Mockito 2.0 mock.\n+ * <p>\n+ * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}\n+ * <p>\n+ * Current version of Mockito mocks by deafult use {@link EmptyReturnValues}  \n  * <ul>\n  * <li>\n  *  Returns appropriate primitive for primitive-returning methods", "timestamp": 1231971973, "metainfo": ""}