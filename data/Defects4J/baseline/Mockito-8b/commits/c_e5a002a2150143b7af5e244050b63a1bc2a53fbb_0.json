{"sha": "e5a002a2150143b7af5e244050b63a1bc2a53fbb", "log": "Added testing WarningsPrinter  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401131", "commit": "\n--- a/src/org/mockito/internal/debugging/WarningsPrinter.java\n+++ b/src/org/mockito/internal/debugging/WarningsPrinter.java\n import static org.mockito.internal.util.StringJoiner.*;\n \n import java.util.Iterator;\n+import java.util.LinkedList;\n import java.util.List;\n \n import org.mockito.internal.invocation.Invocation;\n     private final List<InvocationMatcher> unstubbedInvocations;\n \n     public WarningsPrinter(List<Invocation> unusedStubs, List<InvocationMatcher> unstubbedInvocations) {\n-        this.unusedStubs = unusedStubs;\n-        this.unstubbedInvocations = unstubbedInvocations;\n+        this.unusedStubs = new LinkedList<Invocation>(unusedStubs);\n+        this.unstubbedInvocations = new LinkedList<InvocationMatcher>(unstubbedInvocations);\n     }\n \n     public void print(MockitoLogger logger) {\n                             unused.getStackTrace().getStackTrace()[0],\n                             \"\",\n                             \"But called with different arguments:\",\n-                            unstubbed.getInvocation(),\n+                            unstubbed,\n                             \"Click here:\",\n                             unstubbed.getInvocation().getStackTrace().getStackTrace()[0],\n                             \"\"));\n--- /dev/null\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n+package org.mockito.internal.debugging;\n+\n+import static java.util.Arrays.*;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.util.MockitoLoggerStub;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+import static org.mockito.Mockito.*;\n+\n+public class WarningsPrinterTest extends TestBase {\n+\n+    private MockitoLoggerStub logger = new MockitoLoggerStub();\n+\n+    @Test\n+    public void testPrintUnusedStub() {\n+        Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n+        WarningsPrinter p = new WarningsPrinter(asList(unusedStub), Arrays.<InvocationMatcher>asList());\n+        \n+        p.print(logger);\n+        \n+        assertThat(logger.getLoggedInfo(), contains(\"stub was not used\"));\n+        assertThat(logger.getLoggedInfo(), contains(\"simpleMethod()\"));\n+    }\n+    \n+    @Test\n+    public void testPrintUnstubbedInvocation() {\n+        InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n+        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation>asList(), Arrays.<InvocationMatcher>asList(unstubbedInvocation));\n+        \n+        p.print(logger);\n+        \n+        assertThat(logger.getLoggedInfo(), contains(\"was not stubbed\"));\n+        assertThat(logger.getLoggedInfo(), contains(\"differentMethod()\"));\n+    }\n+    \n+    @Test\n+    public void testPrintStubWasUsedWithDifferentArgs() {\n+        IMethods mock = mock(IMethods.class);\n+        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n+        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n+ \n+        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation>asList(stub), Arrays.<InvocationMatcher>asList(wrongArg));\n+        \n+        p.print(logger);\n+        \n+        assertThat(logger.getLoggedInfo(), contains(\"Stubbed this way\"));\n+        assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"foo\\\")\"));\n+        assertThat(logger.getLoggedInfo(), contains(\"called with different arguments\"));\n+        assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"bar\\\")\"));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/util/MockitoLoggerStub.java\n+/**\n+ * \n+ */\n+package org.mockito.util;\n+\n+import org.mockito.internal.util.MockitoLoggerImpl;\n+\n+public class MockitoLoggerStub extends MockitoLoggerImpl {\n+        \n+        StringBuilder loggedInfo = new StringBuilder();\n+        \n+        public void log(Object what) {\n+//            can be uncommented when debugging this test\n+//            super.log(what);\n+            loggedInfo.append(what);\n+        }\n+\n+        public String getLoggedInfo() {\n+            return loggedInfo.toString();\n+        }\n+    }", "timestamp": 1231148058, "metainfo": ""}