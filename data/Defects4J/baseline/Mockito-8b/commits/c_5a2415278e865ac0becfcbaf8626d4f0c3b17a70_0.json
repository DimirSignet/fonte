{"sha": "5a2415278e865ac0becfcbaf8626d4f0c3b17a70", "log": "Make additional answers internal, and expose them via AdditionalAnswers. Renaming returnsArgAtPosition to returnsArgAt  --HG-- rename : src/org/mockito/stubbing/answers/ReturnsArgumentAt.java => src/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java rename : src/org/mockito/stubbing/answers/ReturnsElementsOf.java => src/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java rename : test/org/mockito/stubbing/answers/ReturnsArgumentAtTest.java => test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java", "commit": "\n--- a/src/org/mockito/AdditionalAnswers.java\n+++ b/src/org/mockito/AdditionalAnswers.java\n package org.mockito;\n \n+import org.mockito.internal.stubbing.answers.ReturnsElementsOf;\n import org.mockito.internal.stubbing.defaultanswers.ForwardsInvocations;\n import org.mockito.stubbing.Answer;\n-import org.mockito.stubbing.answers.ReturnsArgumentAt;\n+import org.mockito.internal.stubbing.answers.ReturnsArgumentAt;\n+\n+import java.util.Collection;\n \n /**\n  * Additional answers provides factory methods for less common answers.\n  * <p>Currently offer answers that can return the parameter of an invocation at a certain position.\n  *\n  * <p>See factory methods for more information : {@link #returnsFirstArg}, {@link #returnsSecondArg},\n- * {@link #returnsLastArg} and {@link #returnsArgAtPosition(int)}\n+ * {@link #returnsLastArg} and {@link #returnsArgAt}\n  *\n  * @since 1.9.5\n  */\n      * <code>then|do|will{@link org.mockito.stubbing.Answer}</code> methods. For example :\n      * </p>\n      *\n-     * <pre class=\"code\"><code class=\"java\">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAtPosition(3));\n-     * daAnswer(returnsArgAtPosition(3)).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>\n+     * <pre class=\"code\"><code class=\"java\">given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));\n+     * daAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>\n      *\n      * @param <T> Return type of the invocation.\n      * @return Answer that will return the second argument of the invocation.\n      *\n      * @since 1.9.5\n      */\n-    public static <T> Answer<T> returnsArgAtPosition(int position) {\n+    public static <T> Answer<T> returnsArgAt(int position) {\n         return (Answer<T>) new ReturnsArgumentAt(position);\n     }\n \n     public static <T> Answer<T> delegatesTo(Object delegate) {\n         return (Answer<T>) new ForwardsInvocations(delegate);\n     }\n+\n+    /**\n+     * Returns elements of the collection. Keeps returning the last element forever.\n+     * Might be useful on occasion when you have a collection of elements to return.\n+     * <p>\n+     * <pre class=\"code\"><code class=\"java\">\n+     *   //this:\n+     *   when(mock.foo()).thenReturn(1, 2, 3);\n+     *\n+     *   //is equivalent to:\n+     *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));\n+     * </code></pre>\n+     *\n+     * @param elements The collection of elements to return.\n+     * @return the answer\n+     *\n+     * @since 1.9.5\n+     */\n+    public static <T> Answer<T> returnsElementsOf(Collection<?> elements) {\n+        return (Answer<T>) new ReturnsElementsOf(elements);\n+    }\n }\n--- a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.invocation.Invocation;\n import org.mockito.stubbing.Answer;\n-import org.mockito.stubbing.answers.ReturnsArgumentAt;\n \n public class AnswersValidator {\n \n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Returns the passed parameter identity at specified index.\n+ *\n+ * <p>The <code>argumentIndex</code> represents the index in the argument array of the invocation.</p>\n+ * <p>If this number equals -1 then the last argument is returned.</p>\n+ *\n+ * @see org.mockito.AdditionalAnswers\n+ * @since 1.9.5\n+ */\n+public class ReturnsArgumentAt implements Answer<Object>, Serializable {\n+\n+    private static final long serialVersionUID = -589315085166295101L;\n+\n+    public static final int LAST_ARGUMENT = -1;\n+\n+    private final int wantedArgumentPosition;\n+\n+    /**\n+     * Build the identity answer to return the argument at the given position in the argument array.\n+     *\n+     * @param wantedArgumentPosition The position of the argument identity to return in the invocation.\n+     *                      Using <code>-1</code> indicates the last argument.\n+     */\n+    public ReturnsArgumentAt(int wantedArgumentPosition) {\n+        this.wantedArgumentPosition = checkWithinAllowedRange(wantedArgumentPosition);\n+    }\n+\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        validateIndexWithinInvocationRange(invocation);\n+        return invocation.getArguments()[actualArgumentPosition(invocation)];\n+    }\n+\n+\n+    private int actualArgumentPosition(InvocationOnMock invocation) {\n+        return returningLastArg() ?\n+                lastArgumentIndexOf(invocation) :\n+                argumentIndexOf(invocation);\n+    }\n+\n+    private boolean returningLastArg() {\n+        return wantedArgumentPosition == LAST_ARGUMENT;\n+    }\n+\n+    private int argumentIndexOf(InvocationOnMock invocation) {\n+        return wantedArgumentPosition;\n+    }\n+\n+    private int lastArgumentIndexOf(InvocationOnMock invocation) {\n+        return invocation.getArguments().length - 1;\n+    }\n+\n+    private int checkWithinAllowedRange(int argumentPosition) {\n+        if (argumentPosition != LAST_ARGUMENT && argumentPosition < 0) {\n+            new Reporter().invalidArgumentRangeAtIdentityAnswerCreationTime();\n+        }\n+        return argumentPosition;\n+    }\n+\n+    public int wantedArgumentPosition() {\n+        return wantedArgumentPosition;\n+    }\n+\n+    public void validateIndexWithinInvocationRange(InvocationOnMock invocation) {\n+        if (!argumentPositionInRange(invocation)) {\n+            new Reporter().invalidArgumentPositionRangeAtInvocationTime(invocation,\n+                                                                        returningLastArg(),\n+                                                                        wantedArgumentPosition);\n+        }\n+    }\n+\n+    private boolean argumentPositionInRange(InvocationOnMock invocation) {\n+        int actualArgumentPosition = actualArgumentPosition(invocation);\n+        if (actualArgumentPosition < 0) {\n+            return false;\n+        }\n+        if (!invocation.getMethod().isVarArgs()) {\n+            return invocation.getArguments().length > actualArgumentPosition;\n+        }\n+        // for all varargs accepts positive ranges\n+        return true;\n+    }\n+\n+    public Class returnedTypeOnSignature(InvocationOnMock invocation) {\n+        int actualArgumentPosition = actualArgumentPosition(invocation);\n+\n+        if(!invocation.getMethod().isVarArgs()) {\n+            return invocation.getMethod().getParameterTypes()[actualArgumentPosition];\n+        }\n+\n+        Class<?>[] parameterTypes = invocation.getMethod().getParameterTypes();\n+        int varargPosition = parameterTypes.length - 1;\n+\n+        if(actualArgumentPosition < varargPosition) {\n+            return parameterTypes[actualArgumentPosition];\n+        } else {\n+            return parameterTypes[varargPosition].getComponentType();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+/**\n+ * Returns elements of the collection. Keeps returning the last element forever.\n+ * Might be useful on occasion when you have a collection of elements to return.\n+ * <p>\n+ * <pre class=\"code\"><code class=\"java\">\n+ *   //this:\n+ *   when(mock.foo()).thenReturn(1, 2, 3);\n+ *   //is equivalent to:\n+ *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));\n+ * </code></pre>\n+ */\n+public class ReturnsElementsOf implements Answer<Object> {\n+\n+    private final LinkedList<Object> elements;\n+\n+    public ReturnsElementsOf(Collection<?> elements) {\n+        if (elements == null) {\n+            throw new MockitoException(\"ReturnsElementsOf does not accept null as constructor argument.\\n\" +\n+            \t\t\"Please pass a collection instance\");\n+        }\n+        this.elements = new LinkedList<Object>(elements);\n+    }\n+\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        if (elements.size() == 1)\n+            return elements.get(0);\n+        else \n+            return elements.poll();\n+    }\n+}\n--- a/src/org/mockito/stubbing/answers/ReturnsElementsOf.java\n+++ b/src/org/mockito/stubbing/answers/ReturnsElementsOf.java\n package org.mockito.stubbing.answers;\n \n import java.util.Collection;\n-import java.util.LinkedList;\n-\n-import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.stubbing.Answer;\n \n /**\n  * Returns elements of the collection. Keeps returning the last element forever.\n  *   //is equivalent to:\n  *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));\n  * </code></pre>\n+ *\n+ * @deprecated Use {@link org.mockito.AdditionalAnswers#returnsElementsOf}\n  */\n-public class ReturnsElementsOf implements Answer<Object> {\n+@Deprecated\n+public class ReturnsElementsOf extends org.mockito.internal.stubbing.answers.ReturnsElementsOf {\n \n-    private final LinkedList<Object> elements;\n-\n+    @Deprecated\n     public ReturnsElementsOf(Collection<?> elements) {\n-        if (elements == null) {\n-            throw new MockitoException(\"ReturnsElementsOf does not accept null as constructor argument.\\n\" +\n-            \t\t\"Please pass a collection instance\");\n-        }\n-        this.elements = new LinkedList<Object>(elements);\n-    }\n-\n-    public Object answer(InvocationOnMock invocation) throws Throwable {\n-        if (elements.size() == 1)\n-            return elements.get(0);\n-        else \n-            return elements.poll();\n+        super(elements);\n     }\n }\n--- a/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.invocation.Invocation;\n-import org.mockito.stubbing.answers.ReturnsArgumentAt;\n \n import java.io.IOException;\n import java.nio.charset.CharacterCodingException;\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.junit.Test;\n+import org.mockito.internal.stubbing.answers.ReturnsArgumentAt;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockitousage.IMethods;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+\n+public class ReturnsArgumentAtTest {\n+\t@Test\n+\tpublic void should_be_able_to_return_the_first_parameter() throws Throwable {\n+\t\tassertThat(new ReturnsArgumentAt(0).answer(invocationWith(\"A\", \"B\"))).isEqualTo(\"A\");\n+\t}\n+\n+\t@Test\n+\tpublic void should_be_able_to_return_the_second_parameter()\n+\t\t\tthrows Throwable {\n+\t\tassertThat(new ReturnsArgumentAt(1).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"B\");\n+\t}\n+\n+\t@Test\n+\tpublic void should_be_able_to_return_the_last_parameter() throws Throwable {\n+\t\tassertThat(new ReturnsArgumentAt(-1).answer(invocationWith(\"A\"))).isEqualTo(\"A\");\n+\t\tassertThat(new ReturnsArgumentAt(-1).answer(invocationWith(\"A\", \"B\"))).isEqualTo(\"B\");\n+\t}\n+\n+\t@Test\n+\tpublic void should_be_able_to_return_the_specified_parameter() throws Throwable {\n+\t\tassertThat(new ReturnsArgumentAt(0).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"A\");\n+\t\tassertThat(new ReturnsArgumentAt(1).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"B\");\n+\t\tassertThat(new ReturnsArgumentAt(2).answer(invocationWith(\"A\", \"B\", \"C\"))).isEqualTo(\"C\");\n+\t}\n+\n+\t@Test\n+\tpublic void should_raise_an_exception_if_index_is_not_in_allowed_range_at_creation_time() throws Throwable {\n+        try {\n+            new ReturnsArgumentAt(-30);\n+            fail();\n+        } catch (Exception e) {\n+            assertThat(e.getMessage())\n+                    .containsIgnoringCase(\"argument index\")\n+                    .containsIgnoringCase(\"positive number\")\n+                    .contains(\"1\")\n+                    .containsIgnoringCase(\"last argument\");\n+        }\n+    }\n+\n+\tprivate static InvocationOnMock invocationWith(final String... parameters) {\n+        return new InvocationOnMock() {\n+\n+            public Object getMock() {\n+                return null;\n+            }\n+\n+            public Method getMethod() {\n+                try {\n+                    return IMethods.class.getDeclaredMethod(\"varargsReturningString\", Object[].class);\n+                } catch (NoSuchMethodException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+\n+            public Object[] getArguments() {\n+                return parameters;\n+            }\n+\n+            public Object callRealMethod() throws Throwable {\n+                return null;\n+            }\n+        };\n+    }\n+\n+}\n--- a/test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java\n import org.mockitousage.IMethods;\n \n import static org.fest.assertions.Assertions.assertThat;\n-import static org.mockito.AdditionalAnswers.returnsArgAtPosition;\n+import static org.mockito.AdditionalAnswers.returnsArgAt;\n import static org.mockito.AdditionalAnswers.returnsFirstArg;\n import static org.mockito.AdditionalAnswers.returnsLastArg;\n import static org.mockito.AdditionalAnswers.returnsSecondArg;\n \n     @Test\n     public void can_return_expanded_arguments_of_invocation() throws Exception {\n-        given(iMethods.varargsObject(eq(1), anyVararg())).will(returnsArgAtPosition(3));\n+        given(iMethods.varargsObject(eq(1), anyVararg())).will(returnsArgAt(3));\n \n         assertThat(iMethods.varargsObject(1, \"bob\", \"alexander\", \"alice\", \"carl\")).isEqualTo(\"alice\");\n     }", "timestamp": 1335882635, "metainfo": ""}