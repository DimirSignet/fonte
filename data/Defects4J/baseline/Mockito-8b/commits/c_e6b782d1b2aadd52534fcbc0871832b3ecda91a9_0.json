{"sha": "e6b782d1b2aadd52534fcbc0871832b3ecda91a9", "log": "Merge pull request #65 from guw/guw/cleanups  Cleanup ignores and fix 1.5 compatibility", "commit": "\n--- a/src/org/mockito/internal/creation/DelegatingMethod.java\n+++ b/src/org/mockito/internal/creation/DelegatingMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito.internal.creation;\n-\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-\n-import org.mockito.internal.invocation.MockitoMethod;\n-\n-public class DelegatingMethod implements MockitoMethod {\n-\n-    private final Method method;\n-\n-    public DelegatingMethod(Method method) {\n-        assert method != null : \"Method cannot be null\";\n-        this.method = method;\n-    }\n-\n-    public Class<?>[] getExceptionTypes() {\n-        return method.getExceptionTypes();\n-    }\n-\n-    public Method getJavaMethod() {\n-        return method;\n-    }\n-\n-    public String getName() {\n-        return method.getName();\n-    }\n-\n-    public Class<?>[] getParameterTypes() {\n-        return method.getParameterTypes();\n-    }\n-\n-    public Class<?> getReturnType() {\n-        return method.getReturnType();\n-    }\n-\n-    public boolean isVarArgs() {\n-        return method.isVarArgs();\n-    }\n-\n-    @Override\n-    public boolean isAbstract() {\n-        return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n-    }\n-    \n-    @Override\n-    public int hashCode() {\n-        return 1;\n-    }\n-    \n-    @Override\n-    public boolean equals(Object obj) {\n-        return method.equals(obj);\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.creation;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+import org.mockito.internal.invocation.MockitoMethod;\n+\n+public class DelegatingMethod implements MockitoMethod {\n+\n+    private final Method method;\n+\n+    public DelegatingMethod(Method method) {\n+        assert method != null : \"Method cannot be null\";\n+        this.method = method;\n+    }\n+\n+    public Class<?>[] getExceptionTypes() {\n+        return method.getExceptionTypes();\n+    }\n+\n+    public Method getJavaMethod() {\n+        return method;\n+    }\n+\n+    public String getName() {\n+        return method.getName();\n+    }\n+\n+    public Class<?>[] getParameterTypes() {\n+        return method.getParameterTypes();\n+    }\n+\n+    public Class<?> getReturnType() {\n+        return method.getReturnType();\n+    }\n+\n+    public boolean isVarArgs() {\n+        return method.isVarArgs();\n+    }\n+\n+    public boolean isAbstract() {\n+        return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return 1;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        return method.equals(obj);\n+    }\n }\n--- a/src/org/mockito/internal/invocation/InvocationImpl.java\n+++ b/src/org/mockito/internal/invocation/InvocationImpl.java\n     public Object[] getArguments() {\n         return arguments;\n     }\n-    \n-    @Override\n+\n     public <T> T getArgumentAt(int index, Class<T> clazz) {\n         return (T) arguments[index];\n     }\n--- a/test/org/mockitousage/serialization/DeepStubsSerializableTest.java\n+++ b/test/org/mockitousage/serialization/DeepStubsSerializableTest.java\n         public Container(E e) { this.e = e; }\n         public E get() { return e; }\n \n-        @Override\n         public Iterator<E> iterator() {\n             return new Iterator<E>() {\n-                @Override public boolean hasNext() { return true; }\n-                @Override public E next() { return e; }\n-                @Override public void remove() { }\n+                public boolean hasNext() { return true; }\n+                public E next() { return e; }\n+                public void remove() { }\n             };\n         }\n     }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n-                \"But found this interaction:\",\n+                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation(),\n                 scenario\n         ));\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n-                \"But found this interaction:\",\n-                undesired.getLocation(),\n-                \"\"\n+                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n+                undesired.getLocation()\n         ));\n     }\n \n--- a/test/org/mockito/internal/verification/NoMoreInteractionsTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInteractionsTest.java\n package org.mockito.internal.verification;\n \n import static java.util.Arrays.*;\n-\n+\n+import org.fest.assertions.Assertions;\n import org.junit.Test;\n+import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n+import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n         //when\n         context.markVerified(i2);\n-        \n+\n         //then no exception is thrown\n         n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i, i2), null));\n     }\n-    \n+\n     @Test\n     public void shouldVerifyInOrderMultipleInvoctionsAndThrow() {\n         //given\n         NoMoreInteractions n = new NoMoreInteractions();\n         Invocation i = new InvocationBuilder().seq(1).toInvocation();\n         Invocation i2 = new InvocationBuilder().seq(2).toInvocation();\n-        \n+\n         try {\n-            //when     \n+            //when\n             n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i, i2), null));\n             fail();\n         } catch (VerificationInOrderFailure e) {}\n+    }\n+\n+    @Test\n+    public void noMoreInteractionsExceptionMessageShouldDescribeMock() {\n+        //given\n+        NoMoreInteractions n = new NoMoreInteractions();\n+        String mock = \"a mock\";\n+        InvocationMatcher i = new InvocationBuilder().mock(mock).toInvocationMatcher();\n+\n+        InvocationContainerImpl invocations =\n+            new InvocationContainerImpl(new ThreadSafeMockingProgress(), new MockSettingsImpl());\n+        invocations.setInvocationForPotentialStubbing(i);\n+\n+        try {\n+            //when\n+            n.verify(new VerificationDataImpl(invocations, null));\n+            //then\n+            fail();\n+        } catch (NoInteractionsWanted e) {\n+            Assertions.assertThat(e.toString()).contains(mock.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void noMoreInteractionsInOrderExceptionMessageShouldDescribeMock() {\n+        //given\n+        NoMoreInteractions n = new NoMoreInteractions();\n+        String mock = \"a mock\";\n+        Invocation i = new InvocationBuilder().mock(mock).toInvocation();\n+\n+        try {\n+            //when\n+            n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i), null));\n+            //then\n+            fail();\n+        } catch (VerificationInOrderFailure e) {\n+            Assertions.assertThat(e.toString()).contains(mock.toString());\n+        }\n     }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n \n             String expectedCause =\n                     \"\\n\" +\n-                    \"But found this interaction:\" +\n+                    \"But found this interaction on mock '\" + mock + \"':\" +\n                     \"\\n\" +\n                     \"-> at\";\n             assertContains(expectedCause, e.getMessage());\n \n             String expectedCause =\n                 \"\\n\" +\n-                \"But found this interaction:\" +\n+                \"But found this interaction on mock '\" + mock + \"':\" +\n                 \"\\n\" +\n                 \"-> at\";\n ", "timestamp": 1407847719, "metainfo": ""}