{"sha": "c50a3d9aa864ebdabc0e368a5ebaa32f6c19c6f1", "log": "added specific exception when mocking final class  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40264", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n         throw new NoInteractionsWanted(join(\"No interactions wanted\"), cause);\n     }\n+    \n+    public void cannotMockFinalClass(Class<?> clazz) {\n+        throw new MockitoException(join(\n+                \"Mockito cannot mock final classes like: \",\n+                clazz.toString()\n+        ));\n+    }\n }\n--- a/src/org/mockito/internal/creation/MockFactory.java\n+++ b/src/org/mockito/internal/creation/MockFactory.java\n  */\n package org.mockito.internal.creation;\n \n+import java.lang.reflect.Modifier;\n import java.util.List;\n \n import net.sf.cglib.core.CollectionUtils;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.Factory;\n \n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.base.MockitoException;\n+\n /**\n  * Factory generating a mock for a class.\n  */\n \n     @SuppressWarnings(\"unchecked\")\n     public T createMock(Class<T> toMock, final MethodInterceptorFilter filter) {\n+        validateClass(toMock);\n         Enhancer enhancer = createEnhancer(toMock);\n         enhancer.setCallbackType(filter.getClass());\n \n \n         filter.setMock(mock);\n         return (T) mock;\n+    }\n+\n+    private void validateClass(Class<T> toMock) {\n+        if (Modifier.isFinal(toMock.getModifiers())) {\n+            new Reporter().cannotMockFinalClass(toMock);\n+        }\n     }\n \n     private Enhancer createEnhancer(Class<T> toMock) {\n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n         stub(mock.simpleMethod()).toThrow(null);\n     }    \n+    \n+    final class FinalClass {}\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowMockingFinalClasses() throws Exception {\n+        mock(FinalClass.class); \n+    }\n+    \n+    //TODO what if interface has equals() method to stub? \n }", "timestamp": 1199584856, "metainfo": ""}