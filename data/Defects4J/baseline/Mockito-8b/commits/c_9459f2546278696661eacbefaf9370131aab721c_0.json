{"sha": "9459f2546278696661eacbefaf9370131aab721c", "log": "more refactorings around verifiers  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40933", "commit": "\n--- a/src/org/mockito/internal/verification/BasicVerificationMode.java\n+++ b/src/org/mockito/internal/verification/BasicVerificationMode.java\n \n import java.util.Arrays;\n import java.util.List;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n \n /**\n  */\n         super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n     }\n \n-    @Override\n-    public List<Verifier> getVerifiers() {\n-        return Arrays.asList(\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n+        List<Verifier> verifiers = Arrays.asList(\n                 new MissingInvocationVerifier(),\n                 new NumberOfInvocationsVerifier());\n+        \n+        for (Verifier verifier : verifiers) {\n+            if (verifier.appliesTo(this)) {\n+                verifier.verify(invocations, wanted, this);\n+            }\n+        }\n     }\n }\n--- a/src/org/mockito/internal/verification/InOrderVerificationMode.java\n+++ b/src/org/mockito/internal/verification/InOrderVerificationMode.java\n import java.util.Arrays;\n import java.util.List;\n \n-/**\n- */\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+\n public class InOrderVerificationMode extends VerificationModeImpl implements VerificationMode {\n \n     protected InOrderVerificationMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,\n             Verification verification) {\n         super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n     }\n+    \n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n+        invocations = new AllInvocationsFinder().getAllInvocations(this.getMocksToBeVerifiedInOrder());\n \n-    @Override\n-    public List<Verifier> getVerifiers() {\n-        return Arrays.asList(\n+        List<Verifier> verifiers = Arrays.asList(\n                 new MissingInvocationInOrderVerifier(),\n                 new NumberOfInvocationsInOrderVerifier());\n+        \n+        for (Verifier verifier : verifiers) {\n+            if (verifier.appliesTo(this)) {\n+                verifier.verify(invocations, wanted, this);\n+            }\n+        }\n     }\n }\n--- a/src/org/mockito/internal/verification/NoMoreInteractionsMode.java\n+++ b/src/org/mockito/internal/verification/NoMoreInteractionsMode.java\n  */\n package org.mockito.internal.verification;\n \n-import java.util.Arrays;\n import java.util.List;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n \n /**\n  */\n             Verification verification) {\n         super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n     }\n-\n+    \n     @Override\n-    public List<Verifier> getVerifiers() {\n-        return Arrays.asList((Verifier) new NoMoreInvocationsVerifier());\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n+        new NoMoreInvocationsVerifier().verify(invocations, wanted, null);\n     }\n }\n--- a/src/org/mockito/internal/verification/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationModeImpl.java\n import java.util.List;\n \n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n-import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.invocation.InvocationMatcher;\n \n /**\n  * Holds additional information regarding verification.\n     public String toString() {\n         return \"Wanted invocations count: \" + wantedInvocationCount + \", Mocks to verify in order: \" + mocksToBeVerifiedInOrder;\n     }\n-\n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n-        if (new VerificationModeDecoder(this).inOrderMode()) {\n-            invocations = new AllInvocationsFinder().getAllInvocations(this.getMocksToBeVerifiedInOrder());\n-        }\n-\n-        List<Verifier> verifiers = getVerifiers();\n-        \n-        for (Verifier verifier : verifiers) {\n-            if (verifier.appliesTo(this)) {\n-                verifier.verify(invocations, wanted, this);\n-            }\n-        }\n-    }\n-    \n-    public abstract List<Verifier> getVerifiers();\n }", "timestamp": 1223564933, "metainfo": ""}