{"sha": "881c1d9cace557e64641d9b104c59b2b0c86ee4c", "log": "removed TODOs, fixed the minor problem of breaking the invocation string when no args given  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401161", "commit": "\n--- a/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n \n     public static IMockitoConfiguration getConfig() {\n         if (!initialized) {\n-            //TODO check email of mockito group\n             throw new IllegalStateException(\"Something went wrong. GlobalConfiguration should be initialised by now.\\n\" +\n                 \"Please report issue at http://mockito.org or write an email to mockito@googlegroups.com\");\n         }\n--- a/src/org/mockito/internal/debugging/WarningsPrinter.java\n+++ b/src/org/mockito/internal/debugging/WarningsPrinter.java\n     }\n \n     public void print(MockitoLogger logger) {\n-        //TODO it should be visible that this method changes the state\n+        //TODO refactor, it should be visible that this method changes the state\n         warnAboutStubsUsedWithDifferentArgs(logger);\n+        \n         warnAboutUnusedStubs(logger);\n         warnAboutUnstubbedInvocations(logger);\n     }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n         String method = qualifiedMethodName();\n         String invocation = method + getArgumentsLine(matchers);\n         //TODO make sure you don't break line when no args are given!\n-        if (forceMultiline || invocation.length() > MAX_LINE_LENGTH) {\n+        if (forceMultiline || (!matchers.isEmpty() && invocation.length() > MAX_LINE_LENGTH)) {\n             return method + getArgumentsBlock(matchers);\n         } else {\n             return invocation;\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n         }\n     }\n \n-    @Mock private IMethods iHavefunkyName; \n+    @Mock private IMethods iHavefunkyName;\n     \n     @Test\n     public void shouldPrintFieldNameWhenAnnotationsUsed() throws Exception {\n             assertThat(e, causeMessageContains(\"iHavefunkyName.simpleMethod(10)\"));\n         }\n     }\n+\n+    @Mock private IMethods veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock; \n+    \n+    @Test\n+    public void shouldNeverBreakMethodStringWhenNoArgsInMethod() throws Exception {\n+        try {\n+            verify(veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock).simpleMethod();\n+            fail();\n+        } catch(WantedButNotInvoked e) {\n+            assertThat(e, messageContains(\"veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock.simpleMethod()\"));\n+        }\n+    }\n }", "timestamp": 1231610881, "metainfo": ""}