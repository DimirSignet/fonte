{"sha": "243301a679920360e404d5d37115b9151a38590f", "log": "issue 280 : renaming the answer + overzealous test to show that primitive/wrapper stuff wasn't needed in the answer.  --HG-- rename : src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java => src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n      * <ul>\n      *     <li>Final classes but with an interface</li>\n      *     <li>Already custom proxied object</li>\n-     *     <li>Special objects with a finalize method, that should be executed 2 times</li>\n+     *     <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>\n      *     <li>...</li>\n      * </ul>\n      * Sets the real implementation to be called when the method is called on a mock object.\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.VerboseMockInvocationLogger;\n-import org.mockito.internal.stubbing.defaultanswers.ReturnsDelegate;\n+import org.mockito.internal.stubbing.defaultanswers.ForwardsInvocations;\n import org.mockito.internal.util.MockName;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.stubbing.Answer;\n \n \tpublic MockSettings forwardTo(Object delegatedInstance) {\n \t\tthis.delegatedInstance = delegatedInstance ;\n-\t\treturn defaultAnswer(new ReturnsDelegate(this.delegatedInstance)) ;\n+\t\treturn defaultAnswer(new ForwardsInvocations(this.delegatedInstance)) ;\n \t}\n }\n \n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+\n+public class ForwardsInvocations implements Answer<Object>, Serializable {\n+\n+\tprivate static final long serialVersionUID = -8343690268123254910L;\n+\n+\tprivate Object delegatedObject = null ;\n+\n+\tpublic ForwardsInvocations(Object delegatedObject) {\n+\t\tthis.delegatedObject = delegatedObject ;\n+\t}\n+\n+\tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n+\t\tMethod method = invocation.getMethod() ;\n+\n+        return method.invoke(delegatedObject, invocation.getArguments());\n+\t}\n+}\n--- a/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+import org.mockitousage.MethodsImpl;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static junit.framework.Assert.assertEquals;\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n \t\tassertEquals(1, mockedList.size()) ;\n \t\tassertEquals(1, delegatedList.size()) ;\n \t}\n+\n+    @Test\n+    public void null_wrapper_dont_throw_exception_from_org_mockito_package() throws Exception {\n+        IMethods methods = mock(IMethods.class, withSettings().forwardTo(new MethodsImpl()));\n+\n+        try {\n+            byte b = methods.byteObjectReturningMethod(); // real method returns null\n+            fail();\n+        } catch (Exception e) {\n+            assertThat(e.toString()).doesNotContain(\"org.mockito\");\n+        }\n+    }\n }", "timestamp": 1331504151, "metainfo": ""}