{"sha": "d2e9741164bcb7a0113ffdd6ed5b9c26b14c8923", "log": "Added some more cool stuff to report nice warnings  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401116", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n         Answer<?> answer = mockitoStubber.findAnswerFor(invocation);\n         if (!invocation.isVoid() && answer == null) {\n             //it is a return-value interaction but not stubbed. This *might* be a problem\n-            mockingProgress.getDebuggingHelper().addUnstubbedInvocation(invocation);\n+            mockingProgress.getDebuggingHelper().addPotentiallyUnstubbed(invocationMatcher);\n         }\n             \n         if (answer != null) {\n--- a/src/org/mockito/internal/debugging/DebuggingInfo.java\n+++ b/src/org/mockito/internal/debugging/DebuggingInfo.java\n package org.mockito.internal.debugging;\n \n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n \n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.util.MockitoLogger;\n \n public class DebuggingInfo {\n \n     private final List<Invocation> unusedStubs = new LinkedList<Invocation>();\n-    private List<Invocation> unstubbedInvocations = new LinkedList<Invocation>();\n+    private List<InvocationMatcher> unstubbedInvocations = new LinkedList<InvocationMatcher>();\n     private final String testName;\n \n     public DebuggingInfo(String testName) {\n //        print(\"Test:\");\n //        print(test);\n         \n-        for (Invocation i : unusedStubs) {\n-            logger.print(\"Warning - unused stub detected here:\");\n-            logger.print(i.getStackTrace().getStackTrace()[0]);\n+        Iterator<Invocation> unusedIterator = unusedStubs.iterator();\n+        while(unusedIterator.hasNext()) {\n+            Invocation unused = unusedIterator.next();\n+            Iterator<InvocationMatcher> unstubbedIterator = unstubbedInvocations.iterator();\n+            while(unstubbedIterator.hasNext()) {\n+                InvocationMatcher unstubbed = unstubbedIterator.next();\n+                if(unstubbed.hasSimilarMethod(unused)) { \n+                    logger.print(\"Warning - stubbed method called with different arguments.\");\n+                    logger.print(\"Stubbed like that:\");\n+                    logger.print(unused);\n+                    logger.print(\"Click here to see it in your code:\");\n+                    logger.print(unused.getStackTrace().getStackTrace()[0]);\n+                    logger.print(\"But called with different arguments:\");\n+                    logger.print(unstubbed.getInvocation());\n+                    logger.print(\"Click here to see it in your code:\");\n+                    logger.print(unstubbed.getInvocation().getStackTrace().getStackTrace()[0]);\n+                    logger.print();\n+                    \n+                    unusedIterator.remove();\n+                    unstubbedIterator.remove();\n+                }\n+            }\n         }\n         \n-        for (Invocation i : unstubbedInvocations) {\n-            logger.print(\"Warning - unstubbed method invoked here:\");\n+        for (Invocation i : unusedStubs) {\n+            logger.print(\"Warning - this stub was not used:\");\n+            logger.print(i);\n+            logger.print(\"Click here to see it in your code:\");\n             logger.print(i.getStackTrace().getStackTrace()[0]);\n+            logger.print();\n+        }\n+        \n+        for (InvocationMatcher i : unstubbedInvocations) {\n+            logger.print(\"Warning - this method was not stubbed:\");\n+            logger.print(i.getInvocation());\n+            logger.print(\"Click here to see it in your code:\");\n+            logger.print(i.getInvocation().getStackTrace().getStackTrace()[0]);\n+            logger.print();\n         }\n     }\n \n         return !unusedStubs.isEmpty() || !unstubbedInvocations.isEmpty();\n     }\n \n-    public void addUnstubbedInvocation(Invocation invocation) {\n+    public void addUnstubbedInvocation(InvocationMatcher invocation) {\n         unstubbedInvocations.add(invocation);\n     }\n-}\n+}\n--- a/src/org/mockito/internal/progress/DebuggingHelper.java\n+++ b/src/org/mockito/internal/progress/DebuggingHelper.java\n package org.mockito.internal.progress;\n \n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n \n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n \n //hate the name but I couldn't figure out the better way of doing it\n public class DebuggingHelper {\n \n     private final List<Invocation> stubbedInvocations = new LinkedList<Invocation>();\n-    private final List<Invocation> unstubbedInvocations = new LinkedList<Invocation>();\n+    private final List<InvocationMatcher> unstubbedInvocations = new LinkedList<InvocationMatcher>();\n \n     public void addStubbedInvocation(Invocation invocation) {\n+        //TODO test \n+        //this is required because we don't know if unstubbedInvocation was really stubbed later...\n+        Iterator<InvocationMatcher> unstubbedIterator = unstubbedInvocations.iterator();\n+        while(unstubbedIterator.hasNext()) {\n+            InvocationMatcher unstubbed = unstubbedIterator.next();\n+            if (unstubbed.getInvocation().equals(invocation)) {\n+                unstubbedIterator.remove();\n+            }\n+        }\n         unstubbedInvocations.remove(invocation);\n         stubbedInvocations.add(invocation);\n     }\n \n-    public void addUnstubbedInvocation(Invocation invocation) {\n-        unstubbedInvocations.add(invocation);\n+    public void addPotentiallyUnstubbed(InvocationMatcher invocationMatcher) {\n+        unstubbedInvocations.add(invocationMatcher);\n     }\n \n     public List<Invocation> pullStubbedInvocations() {\n         return ret;\n     }\n \n-    public List<Invocation> pullUnstubbedInvocations() {\n-        List<Invocation> ret = new LinkedList<Invocation>(unstubbedInvocations);\n+    public List<InvocationMatcher> pullUnstubbedInvocations() {\n+        List<InvocationMatcher> ret = new LinkedList<InvocationMatcher>(unstubbedInvocations);\n         unstubbedInvocations.clear();\n         return ret;\n     }\n--- a/src/org/mockito/internal/util/MockitoLogger.java\n+++ b/src/org/mockito/internal/util/MockitoLogger.java\n \n     void print(Object what);\n \n+    void print();\n+\n }\n--- a/src/org/mockito/internal/util/MockitoLoggerImpl.java\n+++ b/src/org/mockito/internal/util/MockitoLoggerImpl.java\n     public void print(Object what) {\n         System.out.println(\"[Mockito] \" + what.toString());\n     }\n+\n+    public void print() {\n+        System.out.println();\n+    }\n }\n--- a/src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java\n import org.mockito.MockitoAnnotations;\n import org.mockito.internal.debugging.DebuggingInfo;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.DebuggingHelper;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n                 }\n             }\n             \n-            List<Invocation> unstubbedInvocations = debuggingHelper.pullUnstubbedInvocations();\n-            for (Invocation invocation : unstubbedInvocations) {\n+            List<InvocationMatcher> unstubbedInvocations = debuggingHelper.pullUnstubbedInvocations();\n+            for (InvocationMatcher invocation : unstubbedInvocations) {\n                 debuggingInfo.addUnstubbedInvocation(invocation);\n             }\n             \n--- /dev/null\n+++ b/test/org/mockitousage/warnings/WarningAboutStubCalledWithDifferentArgsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.warnings;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.ExperimentalMockitoJUnitRunner;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+@RunWith(ExperimentalMockitoJUnitRunner.class)\n+public class WarningAboutStubCalledWithDifferentArgsTest extends TestBase {\n+\n+    public class SomeController {\n+\n+        private final ReadFromSomeFileSystem reader;\n+\n+        public SomeController(ReadFromSomeFileSystem reader, Object object) {\n+            this.reader = reader;\n+        }\n+\n+        public byte[] naughtyMethodUnderTestWhichDoesNotFailBecauseItReturnsAValue(String filename) {\n+            return this.reader.readFromFile(\"filename\");\n+        }\n+    }\n+\n+    public interface ReadFromSomeFileSystem {\n+\n+        byte[] readFromFile(String filename);\n+\n+    }\n+\n+    @Mock\n+    IMethods mock;\n+\n+    @Ignore\n+    @Test\n+    public void shouldFailButOnlyWhenIAssertReturnValueAndIWantToKnowWhy() throws Throwable {\n+        ReadFromSomeFileSystem reader = mock(ReadFromSomeFileSystem.class);\n+\n+        SomeController controller = new SomeController(reader, null);\n+\n+        final String filename = \"/some/non/random/path\";\n+        final String message = \"this is my message to you\";\n+        when(reader.readFromFile(filename)).thenReturn(message.getBytes(\"UTF8\"));\n+\n+        byte[] bytes = controller.naughtyMethodUnderTestWhichDoesNotFailBecauseItReturnsAValue(filename);\n+\n+//        try {\n+        assertNotNull(\"Should have returned some bytes, i am HUNGRY!\", bytes);\n+//        } catch (Error ex) {\n+//            verify(reader).readFromFile(filename);\n+//            // i want to replace this bit with something like \"verifyAllTheThingsIStubbed(mock)\"\n+//            throw ex;\n+//        }\n+    }\n+}\n--- a/test/org/mockitousage/warnings/WarningAboutStubsNotUsedTest.java\n+++ b/test/org/mockitousage/warnings/WarningAboutStubsNotUsedTest.java\n \n     public class SomeController {\n \n+        @SuppressWarnings(\"unused\")\n         private final ReadFromSomeFileSystem reader;\n \n         public SomeController(ReadFromSomeFileSystem reader, Object object) {\n         }\n \n         public byte[] naughtyMethodUnderTestWhichDoesNotFailBecauseItReturnsAValue(String filename) {\n-            return this.reader.readFromFile(\"filename\");\n+            //oups... I forgot to call the stub...\n+            return null;\n         }\n     }\n ", "timestamp": 1230508514, "metainfo": ""}