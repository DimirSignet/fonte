{"sha": "5a1fdc0e917fd1404f5fea83bcae59c3a630d4a5", "log": "added a test for early point of failure when stub not called. I don't think it can be done nicely so it's all ignored for now...  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401101", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/EarlyPointOfFailureWhenStubNotCalledTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stubbing;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EarlyPointOfFailureWhenStubNotCalledTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+\n+    @Ignore\n+    @Test\n+    public void shouldProvideExtraPointOfFailure() throws Exception {\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+        \n+        String result = getFromSimpleMethod();\n+        \n+        assertEquals(\"foo\", result);\n+    }\n+\n+    private String getFromSimpleMethod() {\n+        //Let's say you've called wrong method on the mock\n+        return mock.differentMethod();\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldProvideExtraPointOfFailureWhenVerificationFails() throws Exception {\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+        \n+        verify(mock).differentMethod();\n+    }\n+}", "timestamp": 1229864843, "metainfo": ""}