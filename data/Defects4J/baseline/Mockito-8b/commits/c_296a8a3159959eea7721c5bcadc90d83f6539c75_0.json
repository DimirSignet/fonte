{"sha": "296a8a3159959eea7721c5bcadc90d83f6539c75", "log": "Shorter syntax for consecutive method calls using thenReturn.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401054", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * when(mock.someMethod(\"some arg\"))\n      *  .thenThrow(new RuntimeException())\n      *  .thenReturn(\"foo\");\n+     *  \n+     * //shorter version for consecutive method calls returning some values:\n+     * when(mock.someMethod(\"some arg\"))\n+     *  .thenReturn(\"foo\", \"bar\");\n+     * //is the same as:\n+     * when(mock.someMethod(\"some arg\"))\n+     *  .thenReturn(\"foo\")\n+     *  .thenReturn(\"bar\");\n      *   \n      * </pre>\n      * \n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.NewOngoingStubbing;\n+import org.mockito.internal.progress.NullObject;\n import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.MockitoStubber;\n import org.mockito.internal.stubbing.Returns;\n             return thenAnswer(new Returns(value));\n         }\n \n+        public NewOngoingStubbing<T> thenReturn(Object value, Object... values) {\n+            NewOngoingStubbing<T> stubbing = thenAnswer(new Returns(value));\n+            for (Object v: values) {\n+                stubbing = stubbing.thenAnswer(new Returns(v));\n+            }\n+            return stubbing;\n+        }\n+\n         public NewOngoingStubbing<T> thenThrow(Throwable throwable) {\n             return thenAnswer(new ThrowsException(throwable));\n         }\n     private class ConsecutiveStubbing implements NewOngoingStubbing<T>, DeprecatedOngoingStubbing<T> {\n         public NewOngoingStubbing<T> thenReturn(Object value) {\n             return thenAnswer(new Returns(value));\n+        }\n+\n+        public NewOngoingStubbing<T> thenReturn(Object value, Object... values) {\n+            NewOngoingStubbing<T> stubbing = thenAnswer(new Returns(value));            \n+            for (Object v: values) {\n+                stubbing = stubbing.thenAnswer(new Returns(v));\n+            }\n+            return stubbing;\n         }\n \n         public NewOngoingStubbing<T> thenThrow(Throwable throwable) {\n--- a/src/org/mockito/internal/progress/NewOngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/NewOngoingStubbing.java\n  * when(mock.someMethod(\"some arg\"))\n  *  .thenThrow(new RuntimeException())\n  *  .thenReturn(\"foo\");\n- *\n  * </pre>\n  *\n  * See examples in javadoc for {@link Mockito#when}\n      *\n      * @return ongoingStubbing object that allows stubbing consecutive calls\n      */\n-    NewOngoingStubbing<T> thenReturn(T value);\n+    NewOngoingStubbing<T> thenReturn(Object value);\n+\n+    /**\n+     * Sets consecutive return values to be returned when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenReturn(1, 2, 3);\n+     * </pre>\n+     *\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param value first return value\n+     * @param values next return values\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenReturn(Object value, Object... values);\n \n     /**\n      * Sets a Throwable to be thrown when the method is called. E.g:\n--- a/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n         assertEquals(\"three\", mock.simpleMethod());\n         assertEquals(\"three\", mock.simpleMethod());\n         assertEquals(\"three\", mock.simpleMethod());\n+    }\n+\n+    @Test\n+    public void shouldReturnConsecutiveValuesSetByShortenThenReturnMethod() throws Exception {        \n+        when(mock.simpleMethod())\n+            .thenReturn(\"one\", \"two\", \"three\");\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+    }\n+\n+    @Test\n+    public void shouldReturnConsecutiveValuesSetByShortenThenReturnMethodAndThrowException()\n+            throws Exception {\n+        when(mock.simpleMethod())\n+            .thenReturn(\"zero\")\n+            .thenReturn(\"one\", \"two\")\n+            .thenReturn(\"three\")\n+            .thenThrow(new NullPointerException());\n+\n+        assertEquals(\"zero\", mock.simpleMethod());\n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n     }\n     \n     @Test", "timestamp": 1225296229, "metainfo": ""}