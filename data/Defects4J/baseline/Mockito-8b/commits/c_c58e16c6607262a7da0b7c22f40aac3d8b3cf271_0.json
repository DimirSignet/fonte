{"sha": "c58e16c6607262a7da0b7c22f40aac3d8b3cf271", "log": "Added some exceptions thrown in cases when user misuses the api  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401877", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         throw new MockitoException(\"This combination of annotations is not permitted on a single field:\\n\" +\n                 \"@\" + undesiredAnnotationOne + \" and @\" + undesiredAnnotationTwo);   \n     }\n+\n+    public void injectMockAnnotationFieldIsNull(String field) {\n+        throw new MockitoException(\"Field '\" + field + \"' annotated with @InjectMock is null.\\n\" +\n+                \"Please make sure the instance is created *before* MockitoAnnotations.initMocks();\\n\" +\n+                \"Example of correct usage:\\n\" +\n+                \"   class SomeTest {\\n\" +\n+                \"      @InjectMock private Foo foo = new Foo();\\n\" +\n+                \"      \\n\" +\n+                \"      @Before public void setUp() {\\n\" +\n+                \"         MockitoAnnotations.initMock(this);\\n\"\n+                );   \n+    }\n }\n--- a/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n import org.mockito.configuration.AnnotationEngine;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.util.reflection.FieldReader;\n \n /**\n  * See {@link MockitoAnnotations}\n         Field[] fields = clazz.getDeclaredFields();\n         for (Field field : fields) {\n             if (null != field.getAnnotation(InjectMock.class)) {\n+                if(new FieldReader(testClass, field).isNull()) {\n+                    new Reporter().injectMockAnnotationFieldIsNull(field.getName());\n+                }\n                 testedFields.add(field);\n             }\n         }\n--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n                 try {\n                     Object instance = field.get(testClass);\n                     if (instance == null) {\n-                        throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the instance is missing\\n\" +\n+                        throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the *instance* is missing\\n\" +\n+                        \t\t  \"The instance must be created *before* initMocks();\\n\" +\n                                   \"Example of correct usage of @Spy:\\n\" +\n                             \t  \"   @Spy List mock = new LinkedList();\\n\" +\n                             \t  \"   //also, don't forget about MockitoAnnotations.initMocks();\");\n--- /dev/null\n+++ b/src/org/mockito/internal/util/reflection/FieldReader.java\n+package org.mockito.internal.util.reflection;\n+\n+import java.lang.reflect.Field;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class FieldReader {\n+\n+    final Object target;\n+    final Field field;\n+    final AccessibilityChanger changer = new AccessibilityChanger();\n+\n+    public FieldReader(Object target, Field field) {\n+        this.target = target;\n+        this.field = field;\n+        changer.enableAccess(field);\n+    }\n+\n+    public boolean isNull() {\n+        try {\n+            return field.get(target) == null;\n+        } catch (Exception e) {\n+            throw new MockitoException(\"Cannot read state from field: \" + field + \", on instance: \" + target);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/reflection/FieldReaderTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.util.reflection;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unused\")\n+public class FieldReaderTest extends TestBase {\n+\n+    class Foo {        \n+        private final String isNull = null;        \n+        private final String notNull = \"\";        \n+    }\n+    \n+    @Test\n+    public void shouldKnowWhenNull() throws Exception {\n+        //when\n+        FieldReader reader = new FieldReader(new Foo(), Foo.class.getDeclaredField(\"isNull\"));\n+        //then\n+        assertTrue(reader.isNull());\n+    }\n+    \n+    @Test\n+    public void shouldKnowWhenNotNull() throws Exception {\n+        //when\n+        FieldReader reader = new FieldReader(new Foo(), Foo.class.getDeclaredField(\"notNull\"));\n+        //then\n+        assertFalse(reader.isNull());\n+    }\n+}\n--- a/test/org/mockitousage/annotation/MockInjectionTest.java\n+++ b/test/org/mockitousage/annotation/MockInjectionTest.java\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockitoutil.TestBase;\n \n import java.util.*;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\", \"unused\"})\n public class MockInjectionTest extends TestBase {\n \n \tprivate SuperUnderTesting superUnderTestWithoutInjection = new SuperUnderTesting();\n \t\tMockitoAnnotations.initMocks(this);\n \t\tassertSame(searchTree, otherBaseUnderTest.getSearchTree());\n \t}\n+\t\n+    @Test(expected=MockitoException.class)\n+    public void shouldProvideDecentExceptionWhenInjectMockInstanceIsNull() throws Exception {\n+        MockitoAnnotations.initMocks(new Object() {\n+           @InjectMock Object iAmNull = null; \n+        });\n+    }\n \n \tclass SuperUnderTesting {\n \n--- a/test/org/mockitousage/annotation/SpyAnnotationTest.java\n+++ b/test/org/mockitousage/annotation/SpyAnnotationTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\", \"unused\"})\n public class SpyAnnotationTest extends TestBase {\n \t\n     @Spy\n \t\tclass FailingSpy {\n \t\t\t@Spy private List mySpy;\n \n-\t\t\t@SuppressWarnings(\"unused\")\n             public List getMySpy() {\n \t\t\t\treturn mySpy;\n \t\t\t}\n         spiedList.get(10); // see shouldInitSpy\n     }\n \t\n-\t//TODO unsupported combinations of annotations (spy - captor, spy - mock)\n-\t//TODO unsupported combinations of annotations (captor - mock)\n+\t@Test(expected=MockitoException.class)\n+    public void shouldProvideDecentExceptionWhenSpyInstanceIsNull() throws Exception {\n+        MockitoAnnotations.initMocks(new Object() {\n+            @Spy String spy = null;\n+        });\n+    }\n }", "timestamp": 1267561372, "metainfo": ""}