{"sha": "4885d504c6244544da53e05bd6637e5faaa87504", "log": "added one prototype of a feature  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40523", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/MatchersMixedWithRawArgumentsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n+\n+public class MatchersMixedWithRawArgumentsTest extends TestBase {\n+    \n+    @Mock private IMethods mock;\n+  \n+    //description of an idea:\n+    //types of arguments and descriptor value that identifies matcher:\n+    //Object: objenesis instance to check for identity\n+    //boolean: false\n+    //byte: max-1\n+    //short: max-1\n+    //int: max-1\n+    //long: max-1\n+    //char: 'x'\n+    //double: max-1\n+    //float: max-1\n+    \n+    //1. how objenesis deal with primitive arrays (like byte[])?\n+    //2. Analisys of all matchers used by R2 project finished before anyObject() and so far proves it's a good idea.\n+\n+    @Ignore(\"prototyping\")\n+    @Test\n+    public void shouldAllowMixingRawArgumentsWithMatchers() {\n+        mock.varargs(\"1\", \"2\", \"3\");\n+        verify(mock).varargs(\"1\", anyString(), \"3\");\n+        \n+        verify(mock).varargs(anyBoolean(), false);\n+    }\n+}", "timestamp": 1207077741, "metainfo": ""}