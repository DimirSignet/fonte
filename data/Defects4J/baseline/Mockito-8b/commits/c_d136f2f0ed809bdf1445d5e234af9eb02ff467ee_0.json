{"sha": "d136f2f0ed809bdf1445d5e234af9eb02ff467ee", "log": "In ordert  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401587", "commit": "\n--- a/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n \n public class AtLeastXNumberOfInvocationsChecker {\n     \n-    private final Reporter reporter = new Reporter();\n-    private final InvocationsFinder finder = new InvocationsFinder();\n-    private final InvocationMarker invocationMarker = new InvocationMarker();\n+    Reporter reporter = new Reporter();\n+    InvocationsFinder finder = new InvocationsFinder();\n+    InvocationMarker invocationMarker = new InvocationMarker();\n \n     public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n             reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        \n         }\n         \n-        invocationMarker.markVerified(invocations, wanted);\n+        invocationMarker.markVerified(actualInvocations, wanted);\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java\n+package org.mockito.internal.verification.checkers;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.*;\n+import org.mockito.Mockito;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.any;\n+\n+import java.util.List;\n+import java.util.LinkedList;\n+import static java.util.Arrays.asList;\n+\n+public class AtLeastXNumberOfInvocationsCheckerTest {\n+\n+    @Test\n+    public void shouldMarkActualInvocationsAsVerified() {\n+        //given\n+        AtLeastXNumberOfInvocationsChecker c = new AtLeastXNumberOfInvocationsChecker();\n+        c.invocationMarker = Mockito.mock(InvocationMarker.class);\n+        Invocation invocation = new InvocationBuilder().simpleMethod().toInvocation();\n+        Invocation invocationTwo = new InvocationBuilder().differentMethod().toInvocation();\n+\n+        //when\n+        c.check(asList(invocation, invocationTwo), new InvocationMatcher(invocation), 1);\n+\n+        //then\n+        Mockito.verify(c.invocationMarker).markVerified(eq(asList(invocation)), any(CapturesArgumensFromInvocation.class));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitoutil.TestBase;\n+\n+//see bug 116\n+public class AIOOBExceptionWithAtLeastTest extends TestBase {\n+\n+    interface IProgressMonitor {\n+        void beginTask(String s, int i);\n+        void worked(int i);\n+        void done();\n+    }\n+\n+    @Test\n+    public void testCompleteProgress() throws Exception {\n+        IProgressMonitor progressMonitor = mock(IProgressMonitor.class);\n+\n+        progressMonitor.beginTask(\"foo\", 12);\n+        progressMonitor.worked(10);\n+        progressMonitor.done();\n+\n+        verify(progressMonitor).beginTask(anyString(), anyInt());\n+        verify(progressMonitor, atLeastOnce()).worked(anyInt());\n+    }\n+}", "timestamp": 1250974251, "metainfo": ""}