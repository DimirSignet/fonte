{"sha": "bda14b043fa8c5209b5abc88d778101e8fb89341", "log": "fixed some documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40358", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n \n import org.hamcrest.BaseMatcher;\n import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n \n /**\n- * Allows creating customized argument matchers.\n+ * Allows creating customized argument matchers. \n+ * <p>\n+ * ArgumentMatcher is an hamcrest {@link Matcher} with predefined describeTo() method for convenience.\n  * <p>\n  * See {@link Matchers}\n  * \n- * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc.\n- * methods and implement your own {@link ArgumentMatcher}, e.g:\n+ * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods \n+ * and pass an instance of hamcrest {@link Matcher}, e.g:\n  * \n  * <pre>\n  * class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n  * verify(mock).addAll(argThat(new IsListOfTwoElements()));\n  * </pre>\n  * \n- * Custom matchers are generally used very rarely.\n+ * Custom matchers are generally used rarely.\n  * <p>\n  * To keep it readable you may want to extract method, e.g:\n  * \n  * <pre>\n- *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n  *   //becomes\n- *   stub(mock.addAll(listOfTwoElements()).toReturn(true);\n+ *   verify(mock).addAll(listOfTwoElements());\n  * </pre>\n  * \n- * @param <T>\n+ * @param <T> type of argument\n  */\n public abstract class ArgumentMatcher<T> extends BaseMatcher<T> {\n \n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n import org.mockito.internal.progress.ReturnValues;\n \n /**\n- * Allow less constrained verification or stubbing. See also {@link AdditionalMatchers}.\n+ * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n  * <p>\n  * {@link Mockito} extends Matchers so to get access to matchers just import Mockito class statically.\n  * <pre>\n  * <h3>Custom Matchers</h3>\n  * \n  * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods \n- * and implement your own {@link ArgumentMatcher}, e.g:\n+ * and pass an instance of hamcrest {@link Matcher}.\n+ * <p>\n+ * You can use {@link ArgumentMatcher} (it's a hamcrest matcher with predefined describeTo() method for convenience)  \n+ * for creating your own matchers, e.g:\n  * \n  * <pre>\n  *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n- *      public boolean matches(List list) {\n- *          return list.size() == 2;\n+ *      public boolean matches(Object list) {\n+ *          return ((List) list).size() == 2;\n  *      }\n  *   }\n  *   \n  *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n  * </pre>\n  * \n- * Custom matchers are generally used very rarely. \n+ * Custom matchers are generally used rarely. \n  * <p>\n  * To keep it readable you may want to extract method, e.g:\n  * <pre>\n- *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n  *   //becomes\n- *   stub(mock.addAll(listOfTwoElements()).toReturn(true);\n+ *   verify(mock).addAll(listOfTwoElements());\n  * </pre>\n  * \n  */\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * </pre>\n  * \n  * <p>\n- * Argument matchers allow less constrained verification or stubbing. \n+ * Argument matchers allow flexible verification or stubbing. \n  * See all {@link Matchers} including examples of custom matchers. \n  * <p>\n  * <b>Warning:</b>", "timestamp": 1202672734, "metainfo": ""}