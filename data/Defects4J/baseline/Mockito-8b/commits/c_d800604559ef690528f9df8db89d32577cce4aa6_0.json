{"sha": "d800604559ef690528f9df8db89d32577cce4aa6", "log": "In order to make mocks serializable started work on this feature. Refactoring.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401603", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.invocation;\n-\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.reporting.PrintSettings;\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.util.Primitives;\n-import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * Method call on a mock object.\n     }\n \n     public static boolean isToString(InvocationOnMock invocation) {\n-        return ObjectMethodsGuru.isToString(invocation.getMethod());\n+        return new ObjectMethodsGuru().isToString(invocation.getMethod());\n     }\n \n     public boolean isValidException(Throwable throwable) {\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n-\n-import java.lang.reflect.Method;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n+\n+import java.lang.reflect.Method;\n \n /**\n  * Optional Answer that can be used with\n         }\n \n         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n-            if (ObjectMethodsGuru.isToString(method)) {\n+            if (new ObjectMethodsGuru().isToString(method)) {\n                 return \"SmartNull returned by unstubbed \" + invocation.getMethod().getName() + \"() method on mock\";\n             }\n             \n--- a/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n \n public class ObjectMethodsGuru implements Serializable {\n \n-    public static boolean isToString(Method method) {\n+    public boolean isToString(Method method) {\n         return method.getReturnType() == String.class && method.getParameterTypes().length == 0\n                 && method.getName().equals(\"toString\");\n     }\n--- a/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n+++ b/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n package org.mockito.internal.util;\n \n+import org.junit.Test;\n+import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n-import static org.mockito.internal.util.ObjectMethodsGuru.*;\n-import org.mockitousage.IMethods;\n-import org.junit.Test;\n \n public class ObjectMethodsGuruTest extends TestBase {\n \n     \n     @Test\n     public void shouldKnowToStringMethod() throws Exception {\n-        assertFalse(isToString(Object.class.getMethod(\"equals\", Object.class)));\n-        assertFalse(isToString(IMethods.class.getMethod(\"toString\", String.class)));\n-        assertTrue(isToString(IMethods.class.getMethod(\"toString\")));\n+        assertFalse(guru.isToString(Object.class.getMethod(\"equals\", Object.class)));\n+        assertFalse(guru.isToString(IMethods.class.getMethod(\"toString\", String.class)));\n+        assertTrue(guru.isToString(IMethods.class.getMethod(\"toString\")));\n     }\n \n     @Test", "timestamp": 1251142577, "metainfo": ""}