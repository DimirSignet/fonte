{"sha": "3a58f0efdc9bdcfbe1e75de4e9da956e066579d4", "log": "Fixed issue 235. timeout(x).atMost(y) should be gracefully disabled because using it does not make much sense  --HG-- rename : src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java => src/org/mockito/exceptions/misusing/FriendlyReminderException.java rename : test/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java => test/org/mockitousage/bugs/TimeoutWithAtMostShouldBeDisabledTest.java", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n-import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n-import org.mockito.exceptions.misusing.NotAMockException;\n-import org.mockito.exceptions.misusing.NullInsteadOfMockException;\n-import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n-import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n-import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;\n+import org.mockito.exceptions.misusing.*;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n             \"   //and... don't forget about some @Mocks for injection :)\",\n                 \"\"), details);\n     }\n+\n+    public void atMostShouldNotBeUsedWithTimeout() {\n+        throw new FriendlyReminderException(join(\"\",\n+                \"Don't panic! I'm just a friendly reminder!\",\n+                \"timeout() should not be used with atMost() because it simply does not make sense...\",\n+                \"We kept this method only to avoid compilation errors when upgrading Mockito.\",\n+                \"In future release we will remove timeout(x).atMost(y) from the API.\",\n+                \"If you want to find out more please refer to issue 235\",\n+                \"\"));\n+    }\n }\n--- /dev/null\n+++ b/src/org/mockito/exceptions/misusing/FriendlyReminderException.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.misusing;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class FriendlyReminderException extends MockitoException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public FriendlyReminderException(String message) {\n+        super(message);\n+    }\n+}\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n  */\n package org.mockito.verification;\n \n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.misusing.FriendlyReminderException;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.VerificationWithTimeoutImpl;\n import org.mockito.internal.verification.api.VerificationData;\n     }\n \n     public VerificationMode atMost(int maxNumberOfInvocations) {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atMost(maxNumberOfInvocations));\n+        new Reporter().atMostShouldNotBeUsedWithTimeout();\n+        return null;\n     }\n \n     public VerificationMode never() {\n--- a/src/org/mockito/verification/VerificationWithTimeout.java\n+++ b/src/org/mockito/verification/VerificationWithTimeout.java\n     public VerificationMode atLeast(int minNumberOfInvocations);\n \n     /**\n-     * Allows at-most-x verification within given timeout. E.g:\n-     * <pre>\n-     *   verify(mock, timeout(100).atMost(3)).someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param maxNumberOfInvocations max number of invocations \n-     * \n+     * @deprecated\n+     *\n+     * <b>Deprecated</b>\n+     *\n+     * validation with timeout combined with atMost simply does not make sense...\n+     * <p>\n+     * To avoid compilation erros upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n+     * <p>\n+     * In future release we will remove timeout(x).atMost(y) from the API.\n+     * <p>\n+     * Do you want to find out more? See <a href=\"http://code.google.com/p/mockito/issues/detail?id=235\">issue 235</a>\n+     *\n      * @return verification mode\n      */\n+    @Deprecated\n     public VerificationMode atMost(int maxNumberOfInvocations);\n \n     /**\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n         assertCorrectMode(t.times(5), Timeout.class, 50, 25, Times.class);\n         assertCorrectMode(t.never(), Timeout.class, 50, 25, Times.class);\n         assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);\n-        assertCorrectMode(t.atMost(10), Timeout.class, 50, 25, AtMost.class);\n     }\n     \n     private void assertCorrectMode(VerificationMode t, Class expectedType, int expectedTimeout, int expectedTreshold, Class expectedDelegateType) {\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/TimeoutWithAtMostShouldBeDisabledTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.misusing.FriendlyReminderException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.List;\n+\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.*;\n+\n+//see issue 235\n+public class TimeoutWithAtMostShouldBeDisabledTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+\n+\t@Test\n+\tpublic void shouldDisableTimeout() {\n+        try {\n+\t\t    verify(mock, timeout(30000).atMost(1)).simpleMethod();\n+            fail();\n+        } catch (FriendlyReminderException e) {}\n+\t}\n+}", "timestamp": 1292971432, "metainfo": ""}