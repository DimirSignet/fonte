{"sha": "62b6bdf44baeee172b2b1684835fb995bad2a47d", "log": "printing args on smart nulls toString (Issue #225)", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n-\n-import java.io.Serializable;\n-import java.lang.reflect.Method;\n \n /**\n  * Optional Answer that can be used with\n \n         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n             if (new ObjectMethodsGuru().isToString(method)) {\n-                return \"SmartNull returned by unstubbed \" + invocation.getMethod().getName() + \"() method on mock\";\n+                return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n-            \n+\n             new Reporter().smartNullPointerException(location);\n             return null;\n         }\n+\n+\t\tprivate String formatMethodCall() {\n+\t\t\tString args = Arrays.toString(invocation.getArguments());\n+\t\t\treturn invocation.getMethod().getName() + \"(\" + args.substring(1, args.length() - 1) +\t\")\";\n+\t\t}\n     }\n \n     private final Answer<Object> delegate = new ReturnsMoreEmptyValues();\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n import org.mockitoutil.TestBase;\n \n public class ReturnsSmartNullsTest extends TestBase {\n-    \n+\n     @Test\n     public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Throwable {\n         Answer<Object> answer = new ReturnsSmartNulls();\n         assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n         assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n     }\n-    \n+\n     interface Foo {\n         Foo get();\n+        Foo withArgs(String oneArg, String otherArg);\n     }\n-    \n+\n     @Test\n     public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Throwable {\n         Answer<Object> answer = new ReturnsSmartNulls();\n-        \n+\n         Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n-        \n+\n         try {\n             smartNull.get();\n             fail();\n         } catch (SmartNullPointerException expected) {}\n     }\n-    \n+\n     @Test\n     public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {\n         Answer<Object> answer = new ReturnsSmartNulls();\n-        \n+\n         Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n-        \n-        //TODO: after 1.8 add functionality of printing params\n+\n         assertEquals(\"SmartNull returned by unstubbed get() method on mock\", smartNull + \"\");\n     }\n+\n+    @Test\n+    public void shouldPrintTheParametersWhenCallingAMethodWithArgs() throws Throwable {\n+    \tAnswer<Object> answer = new ReturnsSmartNulls();\n+\n+    \tFoo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"withArgs\", \"oompa\", \"lumpa\"));\n+\n+    \tassertEquals(\"SmartNull returned by unstubbed withArgs(oompa, lumpa) method on mock\", smartNull + \"\");\n+    }\n }", "timestamp": 1288989226, "metainfo": ""}