{"sha": "eaa3fe7fcb0d2bf7b5b7d3e34a304f6e45863543", "log": "Moved out more implementation details out of the Invocation class.", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/ArgumentsProcessor.java\n+package org.mockito.internal.invocation;\n+\n+import org.hamcrest.Matcher;\n+import org.mockito.internal.matchers.ArrayEquals;\n+import org.mockito.internal.matchers.Equals;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * by Szczepan Faber, created at: 3/31/12\n+ */\n+public class ArgumentsProcessor {\n+    // expands array varArgs that are given by runtime (1, [a, b]) into true\n+    // varArgs (1, a, b);\n+    static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n+        if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n+            return args == null ? new Object[0] : args;\n+        }\n+\n+        final int nonVarArgsCount = args.length - 1;\n+        Object[] varArgs;\n+        if (args[nonVarArgsCount] == null) {\n+            // in case someone deliberately passed null varArg array\n+            varArgs = new Object[] { null };\n+        } else {\n+            varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n+        }\n+        final int varArgsCount = varArgs.length;\n+        Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];\n+        System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\n+        System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\n+        return newArgs;\n+    }\n+\n+    public static List<Matcher> argumentsToMatchers(Object[] arguments) {\n+        List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n+        for (Object arg : arguments) {\n+            if (arg != null && arg.getClass().isArray()) {\n+                matchers.add(new ArrayEquals(arg));\n+            } else {\n+                matchers.add(new Equals(arg));\n+            }\n+        }\n+        return matchers;\n+    }\n+}\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n \n package org.mockito.internal.invocation;\n \n-import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n-import org.mockito.internal.matchers.ArrayEquals;\n-import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.reporting.PrintSettings;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.invocation.PublicInvocation;\n \n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.List;\n \n /**\n  * Method call on a mock object.\n         this.method = mockitoMethod;\n         this.mock = mock;\n         this.realMethod = realMethod;\n-        this.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);\n+        this.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), args);\n         this.rawArguments = args;\n         this.sequenceNumber = sequenceNumber;\n         this.location = new Location();\n-    }\n-\n-    // expands array varArgs that are given by runtime (1, [a, b]) into true\n-    // varArgs (1, a, b);\n-    private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n-        if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n-            return args == null ? new Object[0] : args;\n-        }\n-\n-        final int nonVarArgsCount = args.length - 1;\n-        Object[] varArgs;\n-        if (args[nonVarArgsCount] == null) {\n-            // in case someone deliberately passed null varArg array\n-            varArgs = new Object[] { null };\n-        } else {\n-            varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n-        }\n-        final int varArgsCount = varArgs.length;\n-        Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];\n-        System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\n-        System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\n-        return newArgs;\n     }\n \n     public Object getMock() {\n     }\n \n     public String toString() {\n-        return new PrintSettings().print(argumentsToMatchers(getArguments()), this);\n-    }\n-\n-    public static List<Matcher> argumentsToMatchers(Object[] arguments) {\n-        List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n-        for (Object arg : arguments) {\n-            if (arg != null && arg.getClass().isArray()) {\n-                matchers.add(new ArrayEquals(arg));\n-            } else {\n-                matchers.add(new Equals(arg));\n-            }\n-        }\n-        return matchers;\n+        return new PrintSettings().print(ArgumentsProcessor.argumentsToMatchers(getArguments()), this);\n     }\n \n     public Location getLocation() {\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n     public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\n         this.invocation = invocation;\n         if (matchers.isEmpty()) {\n-            this.matchers = Invocation.argumentsToMatchers(invocation.getArguments());\n+            this.matchers = ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());\n         } else {\n             this.matchers = matchers;\n         }\n--- a/src/org/mockito/internal/reporting/PrintSettings.java\n+++ b/src/org/mockito/internal/reporting/PrintSettings.java\n package org.mockito.internal.reporting;\n \n import org.hamcrest.Matcher;\n+import org.mockito.internal.invocation.ArgumentsProcessor;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.matchers.MatchersPrinter;\n     }\n \n     public String print(Invocation invocation) {\n-        return print(Invocation.argumentsToMatchers(invocation.getArguments()), invocation);\n+        return print(ArgumentsProcessor.argumentsToMatchers(invocation.getArguments()), invocation);\n     }\n \n     public String print(InvocationMatcher invocationMatcher) {\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n package org.mockito.internal.invocation;\n \n import java.lang.reflect.Method;\n-import java.nio.charset.CharacterCodingException;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n     @Test\n     public void shouldPrintArgumentsInMultilinesWhenGetsTooBig() {\n         invocation = new InvocationBuilder().args(\"veeeeery long string that makes it ugly in one line\", 1).toInvocation();\n-        assertThat(invocation.toString(), endsWith( \n+        assertThat(invocation.toString(), endsWith(\n                 \"simpleMethod(\" +\n-                \"\\n\" +\n-                \"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n-                \"\\n\" +\n-                \"    1\" +\n-                \"\\n\" +\n-                \");\"));\n+                        \"\\n\" +\n+                        \"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n+                        \"\\n\" +\n+                        \"    1\" +\n+                        \"\\n\" +\n+                        \");\"));\n     }\n     \n     @Test\n     public void shouldTransformArgumentsToMatchers() throws Exception {\n-        Invocation i = new InvocationBuilder().args(\"foo\", new String[] {\"bar\"}).toInvocation();\n-        List matchers = Invocation.argumentsToMatchers(i.getArguments());\n+        Invocation i = new InvocationBuilder().args(\"foo\", new String[]{\"bar\"}).toInvocation();\n+        List matchers = ArgumentsProcessor.argumentsToMatchers(i.getArguments());\n \n         assertEquals(2, matchers.size());\n         assertEquals(Equals.class, matchers.get(0).getClass());", "timestamp": 1333231039, "metainfo": ""}