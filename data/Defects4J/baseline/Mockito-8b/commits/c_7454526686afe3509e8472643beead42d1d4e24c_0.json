{"sha": "7454526686afe3509e8472643beead42d1d4e24c", "log": "further javadoc fixes deprecated stubVoid made Mockito non-final again  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40716", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      8. Finding redundant invocations <br/> \n  *      9. Shorthand for mocks creation - &#064;Mock annotation <br/> \n  *      10. (**New**) Stubbing consecutive calls (iterator-style stubbing) <br/> \n- *      11. (**New**) Stubbing with callbacks\n- *      12. (**Totally New**) doThrow()|doAnswer() family of methods mostly for stubbing voids\n- *      13. (**Totally New**) Spying on real objects\n+ *      11. (**New**) Stubbing with callbacks <br/>\n+ *      12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>\n+ *      13. (**Totally New**) Spying on real objects <br/>\n  * </b>\n  * \n  * <p>\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </pre>\n  * \n- * <h3> 12. (**Totally New**) doThrow|doAnswer() family of methods mostly for stubbing voids</h3>\n+ * <h3> 12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids</h3>\n  * \n  * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because void is not a decent type.\n  * <p>\n  *   mockedList.clear();\n  * </pre>\n  * \n- * Read more about other similar methods:\n+ * Read more about other those methods:\n  * <p>\n  * {@link Mockito#doThrow(Throwable)}\n  * <p>\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     \n-    private Mockito() {}\n-\n     private static final Reporter REPORTER = new Reporter();\n     static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();\n \n      * </pre>\n      * \n      * @param toBeThrown\n-     * @return stubber - to select a method \n+     * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doThrow(Throwable toBeThrown) {\n         return doAnswer(new ThrowsException(toBeThrown));\n      * </pre>\n      * \n      * @param answer\n-     * @return stubber - to select a method\n+     * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doAnswer(Answer answer) {\n         MOCKING_PROGRESS.stubbingStarted();\n         return new StubberImpl().doAnswer(answer);\n-    }    \n+    }  \n     \n     /**\n-     * {@link Mockito#stub(Object)} is always recommended for stubbing because it is argument type-safe \n-     * and more readable (especially when stubbing consecutive calls).\n-     * <p> \n-     * In extremaly rare cases you cannot use {@link Mockito#stub(Object)} for stubbing. Here are those situations: \n-     * <p>\n-     * 1. Overriding a previous exception-stubbing:\n-     * \n-     * <pre>\n-     *   stub(mock.foo()).toThrow(new RuntimeException());\n-     *   \n-     *   //Impossible: real method is called so mock.foo() throws RuntimeException\n-     *   stub(mock.foo()).toReturn(\"bar\");\n-     *   \n-     *   //You have to use doReturn() for stubbing\n-     *   doReturn(\"bar\").when(mock).foo();\n-     * </pre>\n-     * \n-     * 2. When spying real objects and calling real methods on a spy brings side effects  \n-     * \n-     * <pre>\n-     *   List list = new LinkedList();\n-     *   List spy = Mockito.spy(list);\n-     *   \n-     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n-     *   stub(spy.get(0)).toReturn(\"foo\");\n-     *   \n-     *   //You have to use doReturn() for stubbing\n-     *   doReturn(\"foo\").when(spy).get(0);\n-     * </pre>\n-     * \n-     * @param toBeReturned\n-     * @return stubber - to select a method\n-     */\n-    public static Stubber doReturn(Object toBeReturned) {\n-        return doAnswer(new Returns(toBeReturned));\n-    }\n- \n-    /**\n-     * Mock's void methods do nothing by default. However, there are situations when doNothing() comes handy:  \n+     * Use doNothing() for setting void methods to do nothing. <b>Beware</b> that void methods do nothing by default! \n+     * However, there are rare situations when doNothing() comes handy:  \n      * <p>\n      * 1. Stubbing consecutive calls on a void method:\n      * <pre>\n      *   spy.clear();\n      * </pre>\n      *   \n-     * @return stubber - to select a method\n+     * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doNothing() {\n         return doAnswer(new DoesNothing());\n-    }\n+    }    \n     \n+    /**\n+     * Use doReturn() in those rare occasions when you cannot use {@link Mockito#stub(Object)}.\n+     * <p>\n+     * Beware that {@link Mockito#stub(Object)} is always recommended for stubbing because it is argument type-safe \n+     * and more readable (especially when stubbing consecutive calls). \n+     * <p>\n+     * However, there are occasions when doReturn() comes handy:\n+     * <p>\n+     * \n+     * 1. When spying real objects and calling real methods on a spy brings side effects  \n+     * \n+     * <pre>\n+     *   List list = new LinkedList();\n+     *   List spy = Mockito.spy(list);\n+     *   \n+     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n+     *   stub(spy.get(0)).toReturn(\"foo\");\n+     *   \n+     *   //You have to use doReturn() for stubbing\n+     *   doReturn(\"foo\").when(spy).get(0);\n+     * </pre>\n+     * \n+     * 2. Overriding a previous exception-stubbing:\n+     * \n+     * <pre>\n+     *   stub(mock.foo()).toThrow(new RuntimeException());\n+     *   \n+     *   //Impossible: real method is called so mock.foo() throws RuntimeException\n+     *   stub(mock.foo()).toReturn(\"bar\");\n+     *   \n+     *   //You have to use doReturn() for stubbing\n+     *   doReturn(\"bar\").when(mock).foo();\n+     * </pre>\n+     * \n+     * @param toBeReturned\n+     * @return stubber - to select a method for stubbing\n+     */\n+    public static Stubber doReturn(Object toBeReturned) {\n+        return doAnswer(new Returns(toBeReturned));\n+    }\n+ \n     /**\n      * Creates InOrder object that allows verifying mocks in order.\n      * \n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"Examples of correct stubbing:\",\n                 \"    stub(mock.isOk()).toReturn(true);\",\n                 \"    stub(mock.isOk()).toThrow(exception);\",\n-                \"    stubVoid(mock).toThrow(exception).on().someMethod();\"\n+                \"    doThrow(exception).when(mock).someVoidMethod();\"\n         ));\n     }\n \n         throw new MockitoException(join(\n                 \"Cannot stub a void method with a return value!\",\n                 \"Voids are usually stubbed with Throwables:\",\n-                \"    doThrow(new RuntimeException()).when(mock).someVoidMethod();\"\n+                \"    doThrow(exception).when(mock).someVoidMethod();\"\n              ));\n     }\n \n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n  */\n package org.mockito.internal.stubbing;\n \n+import org.mockito.Mockito;\n import org.mockito.stubbing.Answer;\n \n+/**\n+ * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style\n+ * <p> \n+ * Example:\n+ * <pre>\n+ *   doThrow(new RuntimeException()).\n+ *   when(mockedList).clear();\n+ *   \n+ *   //following throws RuntimeException:\n+ *   mockedList.clear();\n+ * </pre>\n+ * \n+ * Read more about those methods:\n+ * <p>\n+ * {@link Mockito#doThrow(Throwable)}\n+ * <p>\n+ * {@link Mockito#doAnswer(Answer)}\n+ * <p>\n+ * {@link Mockito#doNothing()}\n+ * <p>\n+ * {@link Mockito#doReturn(Object)}\n+ * <p>\n+ * \n+ * See examples in javadoc for {@link Mockito}\n+ */\n @SuppressWarnings(\"unchecked\")\n-public interface Stubber extends StubbedMethodSelector {\n+public interface Stubber {\n \n+    /**\n+     * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style\n+     * <p> \n+     * Example:\n+     * <pre>\n+     *   doThrow(new RuntimeException()).\n+     *   when(mockedList).clear();\n+     *   \n+     *   //following throws RuntimeException:\n+     *   mockedList.clear();\n+     * </pre>\n+     * \n+     * Read more about those methods:\n+     * <p>\n+     * {@link Mockito#doThrow(Throwable)}\n+     * <p>\n+     * {@link Mockito#doAnswer(Answer)}\n+     * <p>\n+     * {@link Mockito#doNothing()}\n+     * <p>\n+     * {@link Mockito#doReturn(Object)}\n+     * <p>\n+     * \n+     *  See examples in javadoc for {@link Mockito}\n+     * \n+     * @param mock\n+     * @return select method for stubbing\n+     */\n+    <T> T when(T mock);\n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.\n+     * <p>\n+     * See javadoc for {@link Mockito#doReturn(Object)}\n+     * \n+     * @param toBeReturned\n+     * @return stubber - to select a method for stubbing\n+     */\n     Stubber doReturn(Object toBeReturned);\n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style.\n+     * <p>\n+     * See javadoc for {@link Mockito#doNothing()}\n+     * \n+     * @return stubber - to select a method for stubbing\n+     */\n     Stubber doNothing();\n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable)} style.\n+     * <p>\n+     * See javadoc for {@link Mockito#doThrow(Throwable)}\n+     * \n+     * @param toBeThrown\n+     * @return stubber - to select a method for stubbing\n+     */\n     Stubber doThrow(Throwable toBeThrown);\n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style.\n+     * <p>\n+     * See javadoc for {@link Mockito#doAnswer(Answer)}\n+     * \n+     * @param answer\n+     * @return stubber - to select a method for stubbing\n+     */\n     Stubber doAnswer(Answer answer);\n }\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n  */\n package org.mockito.internal.util;\n \n+import net.sf.cglib.proxy.Callback;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.Factory;\n \n-import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n import org.mockito.internal.creation.MethodInterceptorFilter;\n             throw new NotAMockException(\"Argument should be a mock, but is null!\");\n         }\n         \n-        try {\n-            if (Enhancer.isEnhanced(mock.getClass())) {\n-                return ((MethodInterceptorFilter<MockHandler<T>>) getInterceptor(mock)).getDelegate();\n-            } else {\n-                throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n-            }\n-        } catch (ClassCastException e) {\n+        if (isMockitoMock(mock)) {\n+            return getInterceptor(mock).getDelegate();\n+        } else {\n             throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n+    }\n+\n+    private static <T> boolean isMockitoMock(T mock) {\n+        return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;\n+    }\n+    \n+    public static boolean isMock(Object mock) {\n+        return mock != null && isMockitoMock(mock);\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n     private static <T> MethodInterceptorFilter<MockHandler<T>> getInterceptor(T mock) {\n         Factory factory = (Factory) mock;\n-        return (MethodInterceptorFilter) factory.getCallback(0);\n-    }\n-    \n-    public static boolean isMock(Object mock) {\n-        try {\n-            //TODO hacky\n-            getMockHandler(mock);\n-            return true;\n-        } catch (MockitoException e) {\n-            return false;\n+        Callback callback = factory.getCallback(0);\n+        if(callback instanceof MethodInterceptorFilter) {\n+            return (MethodInterceptorFilter) callback;\n         }\n+        return null;\n     }\n \n     public static String getMockName(Object mock) {\n--- a/test/org/concurrentmockito/ThreadsStubSharedMockTest.java\n+++ b/test/org/concurrentmockito/ThreadsStubSharedMockTest.java\n         final Thread[] listeners = new Thread[3];\n         for (int i = 0; i < listeners.length; i++) {\n             listeners[i] = new Thread() {\n+                @SuppressWarnings(\"deprecation\")\n                 @Override\n                 public void run() {\n                     stub(mock.simpleMethod(getId()))\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n         Mockito.verifyZeroInteractions(\"notMock\");\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Test(expected=NotAMockException.class)\n     public void shouldValidateMockWhenStubbingVoid() {\n         Mockito.stubVoid(\"notMock\");\n--- a/test/org/mockitousage/MockingRealObjectsTest.java\n+++ b/test/org/mockitousage/MockingRealObjectsTest.java\n         assertEquals(1, spy.size());\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldStubVoid() {\n         stubVoid(spy)\n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n         mock = Mockito.mock(IVarArgs.class);\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldStubStringVarargs() {\n         stub(mock.withStringVarargsReturningString(1)).toReturn(\"1\");\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n         } catch (RuntimeException e) {}\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldVerifyUsingMatchers() {\n         stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\n--- a/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n+++ b/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n     @Ignore(\"just for tuning up the error messages\")\n     @Test\n     public void tryDescriptiveMessagesOnMisuse() {\n+        doReturn(\"foo\");\n+        doReturn(\"bar\");\n+        \n //        verifyNoMoreInteractions();\n //        verifyNoMoreInteractions(null);\n //        verifyNoMoreInteractions(\"\");\n--- a/test/org/mockitousage/misuse/InvalidStateDetectionTest.java\n+++ b/test/org/mockitousage/misuse/InvalidStateDetectionTest.java\n  *    -on stub\n  *    -on stubVoid\n  */\n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\", \"deprecation\"})\n public class InvalidStateDetectionTest extends TestBase {\n \n     private IMethods mock;\n         \n         stub(mock.simpleMethod());\n         detects(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n-        \n-        stub(mock.simpleMethod());\n-        detects(new OnDoReturn(), UnfinishedStubbingException.class);\n+\n+        stub(mock.simpleMethod());\n+        detects(new OnDoAnswer(), UnfinishedStubbingException.class);\n     }\n     \n     @Test\n         detects(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n         \n         stubVoid(mock);\n-        detects(new OnDoReturn(), UnfinishedStubbingException.class);\n+        detects(new OnDoAnswer(), UnfinishedStubbingException.class);\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedDoAnswerStubbing() {\n+        doAnswer(null);\n+        detects(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnStub(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnStubVoid(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnVerify(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detects(new OnDoAnswer(), UnfinishedStubbingException.class);\n     }\n     \n     @Test\n         detects(new OnVerifyNoMoreInteractions(), UnfinishedVerificationException.class);\n         \n         verify(mock);\n-        detects(new OnDoReturn(), UnfinishedVerificationException.class);\n+        detects(new OnDoAnswer(), UnfinishedVerificationException.class);\n     }\n     \n     @Test\n         }\n     }   \n     \n-    //TODO add other doX() methods as well\n-    private static class OnDoReturn implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            doReturn(null);\n+    private static class OnDoAnswer implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            doAnswer(null);\n         }\n     }  \n     \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n         assertEquals(\"test\", mockTwo.toString());\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldStubbingWithThrowableFailVerification() {\n         stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n--- a/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"deprecation\")\n public class StubbingConsecutiveReturnValuesTest extends TestBase {\n \n     @Mock private IMethods mock;\n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n         }\n     }\n     \n-    //TODO state validation\n-    \n-    //TODO exception messages with UnfinishedStubbingException\n-    \n     @Test\n     public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n         doReturn(\"foo\").when(mock).simpleMethod();\n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\", \"deprecation\"})\n public class StubbingWithCustomAnswerTest extends TestBase {\n     @Mock\n     private IMethods mock;\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings({\"serial\", \"unchecked\"})\n+@SuppressWarnings({\"serial\", \"unchecked\", \"all\"})\n public class StubbingWithThrowablesTest extends TestBase {\n \n     private LinkedList mock;", "timestamp": 1216712991, "metainfo": ""}