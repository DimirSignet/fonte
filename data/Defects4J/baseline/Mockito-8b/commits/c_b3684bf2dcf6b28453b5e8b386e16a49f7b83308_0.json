{"sha": "b3684bf2dcf6b28453b5e8b386e16a49f7b83308", "log": "on the way to implement new AtLeastX verification mode  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40954", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/AtLeastXVerificationMode.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.internal.verification.api.VerificationInOrderMode;\n+import org.mockito.internal.verification.api.VerificationMode;\n+\n+public class AtLeastXVerificationMode implements VerificationInOrderMode, VerificationMode {\n+    \n+    final int wantedInvocationCount;\n+    \n+    public AtLeastXVerificationMode(int wantedNumberOfInvocations) {\n+        if (wantedNumberOfInvocations < 1) {\n+            throw new MockitoException(\"Negative value or zero are not allowed here\");\n+        }\n+        this.wantedInvocationCount = wantedNumberOfInvocations;\n+    }\n+    \n+    public void verify(VerificationData data) {\n+        MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n+        NumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\n+        \n+        if (wantedInvocationCount == 1) {\n+            missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n+        }\n+//        numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), this);\n+    }\n+    \n+    public void verifyInOrder(VerificationData data) {\n+        List<Invocation> allInvocations = data.getAllInvocations();\n+        InvocationMatcher wanted = data.getWanted();\n+        \n+        MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n+        NumberOfInvocationsInOrderChecker numberOfCalls = new NumberOfInvocationsInOrderChecker();\n+        \n+        if (wantedInvocationCount == 1) {\n+            missingInvocation.verify(allInvocations, wanted, this);\n+        }\n+        \n+//        numberOfCalls.verify(allInvocations, wanted, this);\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return \"Wanted invocations count: at least \" + wantedCount();\n+    }    \n+\n+    public int wantedCount() {\n+        return wantedInvocationCount;\n+    }\n+}\n--- a/src/org/mockito/internal/verification/MockitoVerificationMode.java\n+++ b/src/org/mockito/internal/verification/MockitoVerificationMode.java\n  */\n public class MockitoVerificationMode implements VerificationInOrderMode, VerificationMode {\n     \n+    //TODO remove NO_MORE_WANTED\n     public enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n     \n     private List<Object> mocksToBeVerifiedInOrder;\n--- a/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.verification.api.VerificationMode;\n import org.mockitoutil.TestBase;\n \n public class MissingInvocationCheckerTest extends TestBase {", "timestamp": 1223843702, "metainfo": ""}