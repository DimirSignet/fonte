{"sha": "c9727eb1045469c9cb06bb7483c6c5f0d6eb5f45", "log": "moved tests around unfiltered stack trace to more appropriate place  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4092", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/exceptions/MockitoAssertionErrorTest.java\n+package org.mockito.exceptions;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+public class MockitoAssertionErrorTest {\n+\n+    private void throwIt() {\n+        throw new MockitoAssertionError(\"boom\");\n+    }\n+    \n+    @Test\n+    public void shouldKeepUnfilteredStackTrace() {\n+        try {\n+            throwIt();\n+            fail();\n+        } catch (MockitoAssertionError e) {\n+            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/exceptions/MockitoErrorTest.java\n+package org.mockito.exceptions;\n+\n+import org.junit.*;\n+import static org.mockito.util.ExtraMatchers.*;\n+\n+import static org.junit.Assert.*;\n+\n+public class MockitoErrorTest {\n+\n+    private void throwIt() {\n+        throw new MockitoException(\"boom\");\n+    }\n+    \n+    @Test\n+    public void shouldKeepUnfilteredStackTrace() {\n+        try {\n+            throwIt();\n+            fail();\n+        } catch (MockitoException e) {\n+            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n+        }\n+    }\n+}\n--- a/test/org/mockito/usage/StackTrackeFilteringTest.java\n+++ b/test/org/mockito/usage/StackTrackeFilteringTest.java\n             fail();\n         } catch (VerificationAssertionError expected) {\n             assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStackTraceOnVerify\"));\n-            \n-            //TODO get rid of following test: and move that testing to MockitoStackTraceFilterTest\n-            StackTraceElement[] unfilteredStackTrace = expected.getUnfilteredStackTrace();\n-            assertEquals(\"reportMissingInvocationError\", unfilteredStackTrace[0].getMethodName());\n         }\n     }\n     \n             fail();\n         } catch (VerificationAssertionError expected) {\n             assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStackTraceOnVerifyNoMoreInteractions\"));\n-            \n-            StackTraceElement[] unfilteredStackTrace = expected.getUnfilteredStackTrace();\n-            assertEquals(\"verifyNoMoreInteractions\", unfilteredStackTrace[0].getMethodName());\n         }\n     }\n     \n             fail();\n         } catch (VerificationAssertionError expected) {\n             assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStackTraceOnVerifyZeroInteractions\"));\n-            \n-            StackTraceElement[] unfilteredStackTrace = expected.getUnfilteredStackTrace();\n-            assertEquals(\"verifyNoMoreInteractions\", unfilteredStackTrace[0].getMethodName());\n         }\n     }\n     \n             fail();\n         } catch (MockitoException expected) {\n             assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStacktraceOnMockitoException\"));\n-            \n-            StackTraceElement[] unfilteredStackTrace = expected.getUnfilteredStackTrace();\n-            assertEquals(\"checkForUnfinishedVerification\", unfilteredStackTrace[0].getMethodName());\n         }\n     }\n     \n             fail();\n         } catch (StrictVerificationError expected) {\n             assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStacktraceWhenStrictlyVerifying\"));\n-            \n-            StackTraceElement[] unfilteredStackTrace = expected.getUnfilteredStackTrace();\n-            assertEquals(\"checkOrderOfInvocations\", unfilteredStackTrace[0].getMethodName());\n         }\n     }\n     ", "timestamp": 1196354087, "metainfo": ""}