{"sha": "b0dcda67246bd661334cca72595dbd064c9feaf2", "log": "issue 399 Cleans up a bit the deep stub answer", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n             return delegate().returnValueFor(rawType);\n         }\n \n-        return makeDeepMock(invocation, returnTypeGenericMetadata);\n+        return deepStub(invocation, returnTypeGenericMetadata);\n     }\n \n-\tprivate void instantiateFieldsIfNeeded() {\n-\t\tif (mockitoCore == null) {\n-\t\t\tmockitoCore = new MockitoCore();\n-\t\t}\n-\t\tif (delegate == null) {\n-\t\t\tdelegate = new ReturnsEmptyValues();\n-\t\t}\n-\t}\n-\n-\tprivate Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n+    private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n     \t\t}\n \t\t}\n \n-        // deep stub\n-        return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);\n+        // record deep stub answer\n+        return recordDeepStubAnswer(newDeepStubMock(returnTypeGenericMetadata), container);\n     }\n \n     /**\n      * @param returnTypeGenericMetadata The metadata to use to create the new mock.\n      * @return The mock\n      */\n-    private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n+    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n         return mockitoCore().mock(\n                 returnTypeGenericMetadata.rawType(),\n                 withSettingsUsing(returnTypeGenericMetadata)\n     }\n \n     private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n-        MockSettings mockSettings =\n-                returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?\n+        MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                 : withSettings();\n \n     }\n \n     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n-        return new NotSerializableGenericsAwareReturnsDeepStubs(returnTypeGenericMetadata);\n+        return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n     }\n \n-    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n-        container.addAnswer(new SerializableAnswer() {\n-            public Object answer(InvocationOnMock invocation) throws Throwable {\n-                return mock;\n-            }\n-        }, false);\n+    private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {\n+        container.addAnswer(new DeeplyStubbedAnswer(mock), false);\n         return mock;\n     }\n \n-    private static class NotSerializableGenericsAwareReturnsDeepStubs extends ReturnsDeepStubs implements Serializable {\n+    protected GenericMetadataSupport actualParameterizedType(Object mock) {\n+        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n+        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());\n+    }\n+\n+\n+    private static class ReturnsDeepStubsSerializationFallback extends ReturnsDeepStubs implements Serializable {\n+        @SuppressWarnings(\"serial\") // not gonna be serialized\n         private final GenericMetadataSupport returnTypeGenericMetadata;\n \n-        public NotSerializableGenericsAwareReturnsDeepStubs(GenericMetadataSupport returnTypeGenericMetadata) {\n+        public ReturnsDeepStubsSerializationFallback(GenericMetadataSupport returnTypeGenericMetadata) {\n             this.returnTypeGenericMetadata = returnTypeGenericMetadata;\n         }\n \n         protected GenericMetadataSupport actualParameterizedType(Object mock) {\n             return returnTypeGenericMetadata;\n         }\n-\n         private Object writeReplace() throws IOException {\n             return Mockito.RETURNS_DEEP_STUBS;\n         }\n     }\n \n-    abstract class SerializableAnswer implements Answer<Object>, Serializable {\n-\t}\n-\t\n \n-    protected GenericMetadataSupport actualParameterizedType(Object mock) {\n-        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n-        return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());\n+    private static class DeeplyStubbedAnswer implements Answer<Object>, Serializable {\n+        @SuppressWarnings(\"serial\") // serialization will fail with a nice message if mock not serializable\n+        private Object mock;\n+\n+        DeeplyStubbedAnswer(Object mock) {\n+            this.mock = mock;\n+        }\n+        @Override\n+        public Object answer(InvocationOnMock invocation) throws Throwable {\n+            return mock;\n+        }\n     }\n \n \n     private static MockitoCore mockitoCore() {\n         return LazyHolder.MOCKITO_CORE;\n     }\n+\n     private static ReturnsEmptyValues delegate() {\n         return LazyHolder.DELEGATE;\n     }\n+\n     private static class LazyHolder {\n         private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n         private static final ReturnsEmptyValues DELEGATE = new ReturnsEmptyValues();", "timestamp": 1394497239, "metainfo": ""}