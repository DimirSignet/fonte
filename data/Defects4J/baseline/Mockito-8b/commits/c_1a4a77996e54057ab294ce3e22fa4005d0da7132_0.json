{"sha": "1a4a77996e54057ab294ce3e22fa4005d0da7132", "log": "On the way to simplify the code behind pointing actual invocations in the exception. I decided not to use exception's cause any more and rely on IDE features of showing clickable stack traces even if there are positioned straight in exception message  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401267", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.exceptions.cause.ActualArgumentsAreDifferent;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n     }    \n \n     public void argumentsAreDifferent(PrintableInvocation wanted, PrintableInvocation actual, HasStackTrace actualStackTrace) {\n-        ActualArgumentsAreDifferent cause = new ActualArgumentsAreDifferent(join(\n+        String message = join(\"Argument(s) are different! Wanted:\", \n+                wanted.toString(),\n+                \"-> at \" + new Location(),\n                 \"Actual invocation has different arguments:\",\n-                actual.toString()\n-            ));\n-        \n-        cause.setStackTrace(actualStackTrace.getStackTrace());\n+                actual.toString(),\n+                \"-> at \" + actualStackTrace.getStackTrace()[0],\n+                \"\"\n+                );\n         \n         if (JUnitTool.hasJUnit()) {\n-            throw JUnitTool.createArgumentsAreDifferentException(\n-                    join(\"Argument(s) are different! Wanted:\", wanted.toString()),\n-                    cause,\n-                    wanted.toString(),\n-                    actual.toString());\n+            throw JUnitTool.createArgumentsAreDifferentException(message, wanted.toString(), actual.toString());\n         } else {\n-            throw new ArgumentsAreDifferent(join(\n-                    \"Argument(s) are different! Wanted:\",\n-                    wanted.toString()\n-                ), cause);\n+            throw new ArgumentsAreDifferent(message);\n         }\n     }\n     \n--- a/src/org/mockito/exceptions/verification/ArgumentsAreDifferent.java\n+++ b/src/org/mockito/exceptions/verification/ArgumentsAreDifferent.java\n     public ArgumentsAreDifferent(String message, Throwable cause) {\n         super(message, cause);\n     }\n+    \n+    public ArgumentsAreDifferent(String message) {\n+        super(message);\n+    }\n }\n--- a/src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java\n+++ b/src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java\n  */\n package org.mockito.exceptions.verification.junit;\n \n-import java.util.Arrays;\n-\n import junit.framework.ComparisonFailure;\n \n-import org.mockito.exceptions.base.CommonStackTraceRemover;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.StackTraceFilter;\n \n     private final String message;\n     private StackTraceElement[] unfilteredStackTrace;\n \n-    public ArgumentsAreDifferent(String message, Throwable cause, String wanted, String actual) {\n+    public ArgumentsAreDifferent(String message, String wanted, String actual) {\n         super(message, wanted, actual);\n         this.message = message;\n         \n         unfilteredStackTrace = getStackTrace();\n         StackTraceFilter filter = new StackTraceFilter();\n         filter.filterStackTrace(this);\n-        \n-        this.initCause(cause);\n-        CommonStackTraceRemover remover = new CommonStackTraceRemover();\n-        remover.remove(this, Arrays.asList(cause.getStackTrace()));\n     }\n     \n     @Override\n--- a/src/org/mockito/exceptions/verification/junit/JUnitTool.java\n+++ b/src/org/mockito/exceptions/verification/junit/JUnitTool.java\n         return hasJUnit;\n     }\n \n-    public static AssertionError createArgumentsAreDifferentException(String message, Throwable cause, String wanted, String actual)  {\n+    public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n         try {\n             Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n-            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, cause, wanted, actual);\n+            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n             return throwable;\n         } catch (Throwable t) {\n //            throw the default exception in case of problems\n-            return new ArgumentsAreDifferent(message, cause);\n+            return new ArgumentsAreDifferent(message);\n         }\n     }\n }\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n             fail();\n         } catch (AssertionError e) {\n             assertThat(e, messageContains(\"<custom argument matcher>\"));\n-            assertThat(e, causeMessageContains(\"foo\"));\n+            assertThat(e, messageContains(\"foo\"));\n         }\n     }\n }\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java\n     }\n     \n     @Test\n-    public void shouldPointToActualInvocationOnVerificationError() {\n-        try {\n-            verify(mock).simpleMethod(999);\n-            fail();\n-        } catch (AssertionError e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"firstChunk\"));\n-        }\n-    }\n-    \n-    @Test\n-    public void shouldPointToUnverifiedActualInvocationOnVerificationError() {\n-        verify(mock, atLeastOnce()).simpleMethod(1);\n-        try {\n-            verify(mock, atLeastOnce()).simpleMethod(999);\n-            fail();\n-        } catch (AssertionError e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n-        }\n-    }   \n-    \n-    @Test\n     public void shouldPointToTooLittleInvocationsChunkOnError() {\n         verify(mock, atLeastOnce()).simpleMethod(1);\n         try {\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n     }\n     \n     @Test\n-    public void shouldPointToActualInvocationOnVerificationError() {\n-        try {\n-            verify(mock).simpleMethod(999);\n-            fail();\n-        } catch (AssertionError e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"first\"));\n-        }\n-    }\n-    \n-    @Test\n-    public void shouldPointToUnverifiedActualInvocationOnVerificationError() {\n-        verify(mock, atLeastOnce()).simpleMethod(1);\n-        try {\n-            verify(mock, atLeastOnce()).simpleMethod(999);\n-            fail();\n-        } catch (AssertionError e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"third\"));\n-        }\n-    }   \n-    \n-    @Test\n     public void shouldPointToTooLittleInvocationsChunkOnError() {\n         verify(mock, atLeastOnce()).simpleMethod(1);\n         try {\n--- a/test/org/mockitousage/stacktrace/StackTrackeChangingTest.java\n+++ b/test/org/mockitousage/stacktrace/StackTrackeChangingTest.java\n package org.mockitousage.stacktrace;\n \n import static org.mockito.Mockito.*;\n-import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n         mock.simpleMethod(\"blah\");\n     }\n     \n+    private void verifySimpleMethodOnAMock() {\n+        verify(mock).simpleMethod();        \n+    }\n+    \n     @Test\n     public void shouldShowActualInvocationAsExceptionCause() {\n         simpleMethodOnAMock();\n             verifySimpleMethodOnAMock();\n             fail();\n         } catch (AssertionError e) {\n-            assertThat(e, hasMethodInStackTraceAt(0, \"verifySimpleMethodOnAMock\"));\n-            assertThat(e, hasMethodInStackTraceAt(1, \"shouldShowActualInvocationAsExceptionCause\"));\n-            assertThat(e.getCause(), hasMethodInStackTraceAt(0, \"simpleMethodOnAMock\"));\n+            String expected = \n+                \"\\nArgument(s) are different! Wanted:\"+\n+                \"\\niMethods.simpleMethod();\"+\n+                \"\\n-> at org.mockitousage.stacktrace.StackTrackeChangingTest.verifySimpleMethodOnAMock(StackTrackeChangingTest.java:29)\"+\n+                \"\\nActual invocation has different arguments:\"+\n+                \"\\niMethods.simpleMethod(\\\"blah\\\");\"+\n+                \"\\n-> at org.mockitousage.stacktrace.StackTrackeChangingTest.simpleMethodOnAMock(StackTrackeChangingTest.java:25)\" +\n+                \"\\n\";\n+             \n+            assertEquals(expected, e.getMessage());\n         }\n     }\n-\n-    private void verifySimpleMethodOnAMock() {\n-        verify(mock).simpleMethod();        \n-    }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.cause.ActualArgumentsAreDifferent;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n             verify(mock).varargs(1, 1000);\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            String expected =\n+            String wanted =\n                     \"\\n\" +\n                     \"Argument(s) are different! Wanted:\" +\n                     \"\\n\" +\n                     \"iMethods.varargs(1, 1000);\";\n \n-            assertEquals(expected, e.getMessage());\n-\n-            assertEquals(e.getCause().getClass(), ActualArgumentsAreDifferent.class);\n-\n-            String expectedCause =\n+            assertContains(wanted, e.getMessage());\n+            \n+            String actual = \n                     \"\\n\" +\n                     \"Actual invocation has different arguments:\" +\n                     \"\\n\" +\n                     \"iMethods.varargs(1, 2);\";\n \n-            assertEquals(expectedCause, e.getCause().getMessage());\n+            assertContains(actual, e.getMessage());\n         }\n     }\n     \n             verify(mock).varargs(\"x\", \"y\", \"z\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            String expected =\n+            String wanted =\n                     \"\\n\" +\n                     \"Argument(s) are different! Wanted:\" +\n                     \"\\n\" +\n                     \"\\n\" +\n                     \");\";\n \n-            assertEquals(expected, e.getMessage());\n-\n-            assertEquals(e.getCause().getClass(), ActualArgumentsAreDifferent.class);\n-\n-            String expectedCause =\n+            assertContains(wanted, e.getMessage());\n+\n+            String actual =\n                     \"\\n\" +\n                     \"Actual invocation has different arguments:\" +\n                     \"\\n\" +\n                     \"\\n\" +\n                     \");\";\n \n-            assertEquals(expectedCause, e.getCause().getMessage());\n+            assertContains(actual, e.getMessage());\n         }\n     }\n \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"simpleMethod(10)\"));\n-            assertThat(e, causeMessageContains(\"simpleMethod()\"));\n+            assertThat(e, messageContains(\"simpleMethod()\"));\n         }\n     }\n \n             verify(mock).twoArgumentMethod(2, 1000);\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n+            //TODO decide on messageContains matcher or assertContains\n             assertThat(e, messageContains(\"(2, 1000)\"));\n-            assertThat(e, causeMessageContains(\"(2, 2)\"));\n+            assertThat(e, messageContains(\"(2, 2)\"));\n         }\n     }\n \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"[false, false, false]\"));\n-            assertThat(e, causeMessageContains(\"[true, false, false]\"));\n+            assertThat(e, messageContains(\"[true, false, false]\"));\n         }\n     }\n \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"111\"));\n-            assertThat(e, causeMessageContains(\"\\\"xxx\\\"\"));\n+            assertThat(e, messageContains(\"\\\"xxx\\\"\"));\n         }\n     }\n \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"matches(\\\"burrito from Exmouth\\\")\"));\n-            assertThat(e, causeMessageContains(\"\\\"foo\\\"\"));\n+            assertThat(e, messageContains(\"\\\"foo\\\"\"));\n         }\n     }\n \n             verify(mock).simpleMethod(\"test\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, causeMessageContains(\"simpleMethod(null, null);\"));\n+            assertThat(e, messageContains(\"simpleMethod(null, null);\"));\n         }\n     }\n     \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"bar\"));\n-            assertThat(e, causeMessageContains(\"foo\"));\n+            assertThat(e, messageContains(\"foo\"));\n         }\n     }\n \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"iHavefunkyName.simpleMethod(20)\"));\n-            assertThat(e, causeMessageContains(\"iHavefunkyName.simpleMethod(10)\"));\n+            assertThat(e, messageContains(\"iHavefunkyName.simpleMethod(10)\"));\n         }\n     }\n ", "timestamp": 1235223651, "metainfo": ""}