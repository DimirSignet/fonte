{"sha": "982e4e95e984634d3e984dc4dc9b8c83b2e346de", "log": "fixed stack trace filtering for expected Throwables  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40116", "commit": "\n--- a/src/org/mockito/exceptions/HasFilterableStackTrace.java\n+++ b/src/org/mockito/exceptions/HasFilterableStackTrace.java\n     void setStackTrace(StackTraceElement[] stackTrace);\n     \n     StackTraceElement[] getStackTrace();\n-    \n-    StackTraceElement[] getUnfilteredStackTrace();\n \n-}\n+}\n--- a/src/org/mockito/exceptions/MockitoStackTraceFilter.java\n+++ b/src/org/mockito/exceptions/MockitoStackTraceFilter.java\n public class MockitoStackTraceFilter {\n     \n     public boolean isLastStackElementToRemove(StackTraceElement e) {\n-        //TODO change this logic so it filters everything from org.mockito and move org.mockito.usage to org.usingmockito\n-        boolean firstOnStackIsMockitoClass = e.getClassName().equals(\"org.mockito.Mockito\");\n-        boolean firstOnStackIsMockObject = e.getClassName().contains(\"$$EnhancerByCGLIB$$\");\n-        return firstOnStackIsMockitoClass || firstOnStackIsMockObject;\n+        boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByCGLIB$$\");\n+        boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n+        return fromMockObject || fromOrgMockito;\n     }\n \n     public void filterStackTrace(HasFilterableStackTrace hasFilterableStackTrace) {\n--- a/src/org/mockito/internal/Result.java\n+++ b/src/org/mockito/internal/Result.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal;\n+\n+import org.mockito.exceptions.*;\n \n @SuppressWarnings(\"unchecked\")\n public class Result implements IAnswer {\n     public static Result createThrowResult(final Throwable throwable) {\n         return new Result(new IAnswer<Object>() {\n             public Object answer() throws Throwable {\n-                throw throwable.fillInStackTrace();\n+                MockitoStackTraceFilter filter = new MockitoStackTraceFilter();\n+                final Throwable filtered = throwable.fillInStackTrace();\n+                \n+                filter.filterStackTrace(new HasFilterableStackTrace() {\n+                    public StackTraceElement[] getStackTrace() {\n+                        return filtered.getStackTrace();\n+                    }\n+                    public void setStackTrace(StackTraceElement[] stackTrace) {\n+                        filtered.setStackTrace(stackTrace);\n+                    }\n+                });\n+                \n+                throw filtered;\n             }\n         });\n     }\n--- a/test/org/mockitousage/StackTrackeFilteringTest.java\n+++ b/test/org/mockitousage/StackTrackeFilteringTest.java\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n+import static org.mockito.util.ExtraMatchers.firstMethodOnStackEqualsTo;\n \n import org.junit.*;\n import org.mockito.*;\n import org.mockito.exceptions.*;\n import org.mockito.internal.StateResetter;\n-\n-import static org.mockito.util.ExtraMatchers.*;\n \n public class StackTrackeFilteringTest {\n     \n         }\n     }\n     \n-    @Ignore\n     @Test\n     public void shouldFilterStacktraceWhenStrictlyVerifies() {\n         try {\n         }\n     }\n     \n-    @Ignore\n     @Test\n     public void shouldFilterStackTraceWhenThrowingExceptionFromControl() {\n         try {\n             stub(mock.oneArg(true)).andThrows(new Exception());\n             fail();\n         } catch (MockitoException expected) {\n-            assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStackTraceOnThrowingExceptionFromControl\"));\n+            assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStackTraceWhenThrowingExceptionFromControl\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldShowProperExceptionStackTrace() throws Exception {\n+        stub(mock.simpleMethod()).andThrows(new RuntimeException());\n+\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (RuntimeException e) {\n+            assertThat(e, firstMethodOnStackEqualsTo(\"shouldShowProperExceptionStackTrace\"));\n         }\n     }\n }\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n \n import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.firstMethodOnStackEqualsTo;\n \n import java.io.*;\n import java.util.*;\n     \n     @Ignore\n     @Test\n-    public void shouldDoTheStackTraceProperly() throws Exception {\n-        stub(mock.add(\"ExceptionOne\")).andThrows(new ExceptionOne());\n-\n-        try {\n-            addObjectToMockedList(\"ExceptionOne\");\n-            fail();\n-        } catch (ExceptionOne e) {\n-            assertThat(e, firstMethodOnStackEqualsTo(\"addObjectToMockedList\"));\n-        }\n-    }\n-    \n-    private void addObjectToMockedList(String string) {\n-        mock.add(\"ExceptionOne\");\n-    }\n-\n-    @Ignore\n-    @Test\n     public void shouldVerifyWhenStubbedWithThrowable() throws Exception {\n         \n     }", "timestamp": 1196533046, "metainfo": ""}