{"sha": "e4ba2db49598801bc13cd5e047238f22d5f05de5", "log": "issue 380 : underscored test methods before adding test", "commit": "\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n     }\n \n     @Test\n-    public void shouldPrintMethodName() {\n+    public void should_print_method_name() {\n         try {\n             verify(mock).simpleMethod();\n             fail();\n     }\n \n     @Test\n-    public void shouldPrintMethodNameAndArguments() {\n+    public void should_print_method_name_and_arguments() {\n         try {\n             verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n             fail();\n     }\n \n     @Test\n-    public void shouldPrintActualAndWantedInLine() {\n+    public void should_print_actual_and_wanted_in_line() {\n         mock.varargs(1, 2);\n \n         try {\n     }\n     \n     @Test\n-    public void shouldPrintActualAndWantedInMultipleLines() {\n+    public void should_print_actual_and_wanted_in_multiple_lines() {\n         mock.varargs(\"this is very long string\", \"this is another very long string\");\n \n         try {\n     }\n \n     @Test\n-    public void shouldPrintActualAndWantedWhenActualMethodNameAndWantedMethodNameAreTheSame() {\n+    public void should_print_actual_and_wanted_when_actual_method_name_and_wanted_method_name_are_the_same() {\n         mock.simpleMethod();\n \n         try {\n     }\n \n     @Test\n-    public void shouldPrintActualAndUnverifiedWantedWhenTheDifferenceIsAboutArguments() {\n+    public void should_print_actual_and_unverified_wanted_when_the_difference_is_about_arguments() {\n         mock.twoArgumentMethod(1, 1);\n         mock.twoArgumentMethod(2, 2);\n \n     }\n \n     @Test\n-    public void shouldPrintFirstUnexpectedInvocation() {\n+    public void should_print_first_unexpected_invocation() {\n         mock.oneArg(true);\n         mock.oneArg(false);\n         mock.threeArgumentMethod(1, \"2\", \"3\");\n     }\n \n     @Test\n-    public void shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions() {\n+    public void should_print_first_unexpected_invocation_when_verifying_zero_interactions() {\n         mock.twoArgumentMethod(1, 2);\n         mock.threeArgumentMethod(1, \"2\", \"3\");\n \n     }\n \n     @Test\n-    public void shouldPrintMethodNameWhenVerifyingAtLeastOnce() throws Exception {\n+    public void should_print_method_name_when_verifying_at_least_once() throws Exception {\n         try {\n             verify(mock, atLeastOnce()).twoArgumentMethod(1, 2);\n             fail();\n     }\n \n     @Test\n-    public void shouldPrintMethodWhenMatcherUsed() throws Exception {\n+    public void should_print_method_when_matcher_used() throws Exception {\n         try {\n             verify(mock, atLeastOnce()).twoArgumentMethod(anyInt(), eq(100));\n             fail();\n     }\n \n     @Test\n-    public void shouldPrintMethodWhenMissingInvocationWithArrayMatcher() {\n+    public void should_print_method_when_missing_invocation_with_array_matcher() {\n         mock.oneArray(new boolean[] { true, false, false });\n \n         try {\n     }\n \n     @Test\n-    public void shouldPrintMethodWhenMissingInvocationWithVarargMatcher() {\n+    public void should_print_method_when_missing_invocation_with_vararg_matcher() {\n         mock.varargsString(10, \"xxx\", \"yyy\", \"zzz\");\n \n         try {\n     }\n \n     @Test\n-    public void shouldPrintMethodWhenMissingInvocationWithMatcher() {\n+    public void should_print_method_when_missing_invocation_with_matcher() {\n         mock.simpleMethod(\"foo\");\n \n         try {\n     }\n \n     @Test\n-    public void shouldPrintNullArguments() throws Exception {\n+    public void should_print_null_arguments() throws Exception {\n         mock.simpleMethod(null, (Integer) null);\n         try {\n             verify(mock).simpleMethod(\"test\");\n     }\n     \n     @Test\n-    public void shouldSayNeverWantedButInvoked() throws Exception {\n+    public void should_say_never_wanted_but_invoked() throws Exception {\n         mock.simpleMethod(1);\n     \n         verify(mock, never()).simpleMethod(2);\n     }\n     \n     @Test\n-    public void shouldShowRightActualMethod() throws Exception {\n+    public void should_show_right_actual_method() throws Exception {\n         mock.simpleMethod(9191);\n         mock.simpleMethod(\"foo\");\n     \n     @Mock private IMethods iHavefunkyName;\n     \n     @Test\n-    public void shouldPrintFieldNameWhenAnnotationsUsed() throws Exception {\n+    public void should_print_field_name_when_annotations_used() throws Exception {\n         iHavefunkyName.simpleMethod(10);\n     \n         try {\n     }\n     \n     @Test\n-    public void shouldPrintInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {\n+    public void should_print_interactions_on_mock_when_ordinary_verification_fail() throws Exception {\n         mock.otherMethod();\n         mock.booleanReturningMethod();\n         \n     @Mock private IMethods veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock; \n     \n     @Test\n-    public void shouldNeverBreakMethodStringWhenNoArgsInMethod() throws Exception {\n+    public void should_never_break_method_string_when_no_args_in_method() throws Exception {\n         try {\n             verify(veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock).simpleMethod();\n             fail();", "timestamp": 1348754879, "metainfo": ""}