{"sha": "634d34822abe02168f897f5722ce1ab014e1de05", "log": "Implemented feature 72 Partial mocking support finally made it to the trunk! This feature lets you stub the mock to call real method instead of unreal method...  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401356", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n import org.mockito.internal.returnvalues.MockReturnValues;\n import org.mockito.internal.returnvalues.MoreEmptyReturnValues;\n+import org.mockito.internal.returnvalues.RealReturnValues;\n import org.mockito.internal.returnvalues.SmartNullReturnValues;\n+import org.mockito.internal.stubbing.CallsRealMethod;\n import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.Returns;\n import org.mockito.internal.stubbing.Stubber;\n      * <p>\n      */\n     public static final ReturnValues RETURNS_MOCKS = new MockReturnValues();\n+\n+    /**\n+     * TODO THIS INTERFACE MIGHT CHANGE IN 1.8\n+     * TODO mention partial mocks warning\n+     * \n+     * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n+     * <p>\n+     * {@link ReturnValues} defines the return values of unstubbed invocations.\n+     * <p>\n+     * This implementation can be helpful when working with legacy code.\n+     * When this implementation is used, unstubbed methods will delegate to the real implementation.\n+     * This is a way to create a partial mock object that calls real methods by default.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * Foo mock = mock(Foo.class, CALLS_REAL_METHODS);\n+     *\n+     * // this calls the real implementation of Foo.getSomething()\n+     * value = mock.getSomething();\n+     *\n+     * when(mock.getSomething()).thenReturn(fakeValue);\n+     *\n+     * // now fakeValue is returned\n+     * value = mock.getSomething();\n+     * </pre>\n+     */\n+    public static final ReturnValues CALLS_REAL_METHODS = new RealReturnValues();\n     \n     /**\n      * Creates mock object of given class or interface.\n     public static Stubber doThrow(Throwable toBeThrown) {\n         return MOCKITO_CORE.doAnswer(new ThrowsException(toBeThrown));\n     }\n+\n+    /**\n+     * Use doCallRealMethod() when you want to call the real implementation of a method.\n+     * <p>\n+     * TODO mention partial mocks warning\n+     * <p>\n+     * Example:\n+     * <pre>\n+     *   Foo mock = mock(Foo.class);\n+     *   doCallRealMethod().when(mock).someVoidMethod();\n+     *\n+     *   // this will call the real implementation of Foo.someVoidMethod()\n+     *   mock.someVoidMethod();\n+     * </pre>\n+     *\n+     * @return stubber - to select a method for stubbing\n+     */\n+    public static Stubber doCallRealMethod() {\n+        return MOCKITO_CORE.doAnswer(new CallsRealMethod());\n+    }\n     \n     /**\n      * Use doAnswer() when you want to stub a void method with generic {@link Answer}.\n     public static VerificationMode atMost(int maxNumberOfInvocations) {\n         return VerificationModeFactory.atMost(maxNumberOfInvocations);\n     }\n-}\n+}\n--- a/src/org/mockito/ReturnValues.java\n+++ b/src/org/mockito/ReturnValues.java\n      * @param invocation placeholder for mock and a method\n      * @return the return value\n      */\n-    Object valueFor(InvocationOnMock invocation);\n-}\n+    Object valueFor(InvocationOnMock invocation) throws Throwable;\n+}\n--- a/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n+++ b/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n      */\n     @Deprecated\n     public static Object defaultValueFor(InvocationOnMock invocation) {\n-        return DEFAULT_RETURN_VALUES.valueFor(invocation);\n+        Object retValue = null;\n+        try {\n+            retValue = DEFAULT_RETURN_VALUES.valueFor(invocation);\n+        } catch (Throwable t) {\n+            // impossible from EmptyReturnValues but to be safe:\n+            throw new RuntimeException(t);\n+        }\n+\n+        return retValue;\n     }\n \n     /**\n     public static MockitoConfiguration getConfiguration() {\n         return Configuration.instance();\n     }\n-}\n+}\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.internal.progress.SequenceNumber;\n+import org.mockito.internal.stubbing.CallsRealMethod;\n import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.MockitoStubber;\n import org.mockito.internal.stubbing.Returns;\n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n         if (mockitoStubber.hasAnswersForStubbing()) {\n             //stubbing voids with stubVoid() or doAnswer() style\n-            Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());\n+            Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), methodProxy);\n             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n             mockitoStubber.setMethodForStubbing(invocationMatcher);\n             return null;\n         }\n         VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n \n-        Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());\n+        Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), methodProxy);\n         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n         \n         mockingProgress.validateState();\n             return stubbing;\n         }        \n \n+        public NewOngoingStubbing<T> thenCallRealMethod() {\n+            return thenAnswer(new CallsRealMethod());\n+        }\n+\n         public DeprecatedOngoingStubbing<T> toReturn(T value) {\n             return toAnswer(new Returns(value));\n         }\n     public ReturnValues getReturnValues() {\n         return returnValues;\n     }\n-}\n+}\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+\n+import net.sf.cglib.proxy.MethodProxy;\n \n import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n     private final Method method;\n     private final Object[] arguments;\n     private final Location location;\n+    private final MethodProxy methodProxy;\n \n     private boolean verified;\n     private boolean verifiedInOrder;\n     private Object[] rawArguments;\n \n-    public Invocation(Object mock, Method method, Object[] args, int sequenceNumber) {\n+    public Invocation(Object mock, Method method, Object[] args, int sequenceNumber, MethodProxy methodProxy) {\n         this.mock = mock;\n         this.method = method;\n         this.arguments = expandVarArgs(method.isVarArgs(), args);\n         this.rawArguments = args;\n         this.sequenceNumber = sequenceNumber;\n         this.location = new Location();\n+        this.methodProxy = methodProxy;\n     }\n \n     //expands array varArgs that are given by runtime (1, [a, b]) into true varArgs (1, a, b);\n     public Object[] getRawArguments() {\n         return this.rawArguments;\n     }\n-}\n+\n+\t//TODO call it invokeReal or something along\n+    public Object invokeSuper() throws Throwable {\n+        return methodProxy.invokeSuper(mock, arguments);\n+    }\n+}\n--- a/src/org/mockito/internal/progress/NewOngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/NewOngoingStubbing.java\n     NewOngoingStubbing<T> thenThrow(Throwable... throwables);\n \n     /**\n+     * TODO partial mocks warning\n+     * Sets the real implementation to be called when the method is called on a mock object.  E.g.:\n+     * <pre>\n+     * when(mock.someMethod()).thenCallRealMethod();\n+     * </pre>\n+     *\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenCallRealMethod();\n+\n+    /**\n      * Sets a generic Answer for the method. E.g:\n      * <pre>\n      * when(mock.someMethod(10)).thenAnswer(new Answer&lt;Integer&gt;() {\n      * @return ongoingStubbing object that allows stubbing consecutive calls\n      */\n     NewOngoingStubbing<T> thenAnswer(Answer<?> answer);\n-}\n+}\n--- a/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n  */\n public class GloballyConfiguredReturnValues implements ReturnValues {\n     \n-    public Object valueFor(InvocationOnMock invocation) {\n+    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n         return new GlobalConfiguration().getReturnValues().valueFor(invocation);\n     }\n-}\n+}\n--- a/src/org/mockito/internal/returnvalues/MockReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MockReturnValues.java\n     private MockitoCore mockitoCore = new MockitoCore();\n     private ReturnValues delegate = new MoreEmptyReturnValues();\n     \n-    public Object valueFor(InvocationOnMock invocation){\n+    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n         Object ret = delegate.valueFor(invocation);\n         if (ret != null) {\n             return ret;\n--- a/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n     /* (non-Javadoc)\n      * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)\n      */\n-    public Object valueFor(InvocationOnMock invocation) {\n+    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n         Object ret = delegate.valueFor(invocation);\n         if (ret != null) {\n             return ret;\n--- /dev/null\n+++ b/src/org/mockito/internal/returnvalues/RealReturnValues.java\n+package org.mockito.internal.returnvalues;\n+\n+import org.mockito.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Description: TODO: Enter a paragraph that summarizes what the class does and\n+ * why someone might want to utilize it\n+ * \n+ * <p>\n+ * Copyright  2000-2007, NetSuite, Inc.\n+ * </p>\n+ * \n+ * @author amurkes\n+ * @version 2007.0\n+ * @since Apr 15, 2009\n+ */\n+public class RealReturnValues implements ReturnValues {\n+    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n+        return invocation.invokeSuper();\n+    }\n+}\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n \n     private final ReturnValues delegate = new MoreEmptyReturnValues();\n \n-    public Object valueFor(final InvocationOnMock invocation) {\n+    public Object valueFor(final InvocationOnMock invocation) throws Throwable {\n         Object defaultReturnValue = delegate.valueFor(invocation);\n         if (defaultReturnValue != null) {\n             return defaultReturnValue;\n         }\n         return null;\n     }\n-}\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/CallsRealMethod.java\n+package org.mockito.internal.stubbing;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Description: TODO: Enter a paragraph that summarizes what the class does and\n+ * why someone might want to utilize it\n+ * \n+ * <p>\n+ * Copyright  2000-2007, NetSuite, Inc.\n+ * </p>\n+ * \n+ * @author amurkes\n+ * @version 2007.0\n+ * @since Apr 10, 2009\n+ */\n+public class CallsRealMethod implements Answer<Object> {\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        return invocation.invokeSuper();\n+    }\n+}\n--- a/src/org/mockito/invocation/InvocationOnMock.java\n+++ b/src/org/mockito/invocation/InvocationOnMock.java\n      * @return arguments\n      */\n     Object[] getArguments();\n-}\n+\n+    /**\n+     * invoke original method\n+     */\n+    Object invokeSuper() throws Throwable;\n+}\n--- a/test/org/mockito/internal/invocation/InvocationBuilder.java\n+++ b/test/org/mockito/internal/invocation/InvocationBuilder.java\n             }\n         }\n         \n-        Invocation i = new Invocation(mock, method, args, sequenceNumber);\n+        Invocation i = new Invocation(mock, method, args, sequenceNumber, null);\n         if (verified) {\n             i.markVerified();\n         }\n     public InvocationBuilder differentMethod() {\n         return this.method(\"differentMethod\");\n     }\n-}\n+}\n--- a/test/org/mockito/internal/returnvalues/MockReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/MockReturnValuesTest.java\n     private Invocation invocationOf(Class<?> type, String methodName)\n             throws NoSuchMethodException {\n         return new Invocation(new Object(), type.getMethod(methodName,\n-                new Class[0]), new Object[0], 1);\n+                new Class[0]), new Object[0], 1, null);\n     }\n \n     @Test\n     public void shouldReturnTheUsualDefaultValuesForPrimitives()\n-            throws Exception {\n+            throws Throwable {\n         MockReturnValues returnValues = new MockReturnValues();\n         assertEquals(false, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n         assertEquals((char) 0, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n     }\n     \n     @Test\n-    public void shouldReturnEmptyArray() throws Exception{\n+    public void shouldReturnEmptyArray() throws Throwable {\n         String[] ret = (String[]) values.valueFor(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n         \n         assertTrue(ret.getClass().isArray());\n     }\n     \n     @Test\n-    public void shouldReturnEmptyString() throws Exception{\n+    public void shouldReturnEmptyString() throws Throwable {\n         assertEquals(\"\", values.valueFor(invocationOf(StringMethods.class, \"stringMethod\")));\n     }\n }\n--- a/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n public class SmartNullReturnValuesTest extends TestBase {\n     \n     private Invocation invocationOf(Class<?> type, String methodName) throws NoSuchMethodException {\n-        return new Invocation(new Object(), type.getMethod(methodName, new Class[0]), new Object[0], 1);\n+        return new Invocation(new Object(), type.getMethod(methodName, new Class[0]), new Object[0], 1, null);\n     }\n     \n     @Test\n-    public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Exception {\n+    public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Throwable {\n         SmartNullReturnValues returnValues = new SmartNullReturnValues();\n         assertEquals(false  ,   returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n         assertEquals((char) 0,  returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n     }\n     \n     @Test\n-    public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Exception {\n+    public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Throwable {\n         ReturnValues returnValues = new SmartNullReturnValues();\n         \n         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n     }\n     \n     @Test\n-    public void shouldReturnAnObjectThatAllowsObjectMethods() throws Exception {\n+    public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {\n         ReturnValues returnValues = new SmartNullReturnValues();\n         \n         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n         //TODO after 1.7 add functionality of printing params\n         assertEquals(\"SmartNull returned by unstubbed get() method on mock\", smartNull + \"\");\n     }\n-}\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/CallingRealMethodTest.java\n+package org.mockitousage.stubbing;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitoutil.TestBase;\n+\n+/**\n+ * Description: TODO: Enter a paragraph that summarizes what the class does and\n+ * why someone might want to utilize it\n+ * \n+ * <p>\n+ * Copyright  2000-2007, NetSuite, Inc.\n+ * </p>\n+ * \n+ * @author amurkes\n+ * @version 2007.0\n+ * @since Apr 16, 2009\n+ */\n+public class CallingRealMethodTest extends TestBase {\n+    \n+    @Mock UnderTest mock;\n+\n+    static class UnderTest {\n+        String value;\n+\n+        void setValue(String value) {\n+            this.value = value;\n+        }\n+\n+        String getValue() {\n+            return \"HARD_CODED_RETURN_VALUE\";\n+        }\n+        \n+        String callInternalMethod() {\n+            return getValue();\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldAllowCallingInternalMethod() {\n+        when(mock.getValue()).thenReturn(\"foo\");\n+        when(mock.callInternalMethod()).thenCallRealMethod();\n+        \n+        assertEquals(\"foo\", mock.callInternalMethod());\n+    }\n+\n+    @Test\n+    public void shouldReturnRealValue() {\n+        when(mock.getValue()).thenCallRealMethod();\n+\n+        Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\n+    }\n+\n+    @Test\n+    public void shouldExecuteRealMethod() {\n+        doCallRealMethod().when(mock).setValue(anyString());\n+\n+        mock.setValue(\"REAL_VALUE\");\n+\n+        Assert.assertEquals(\"REAL_VALUE\", mock.value);\n+    }\n+\n+    @Test\n+    public void shouldCallRealMethodByDefault() {\n+        UnderTest mock = mock(UnderTest.class, CALLS_REAL_METHODS);\n+\n+        Assert.assertEquals(\"HARD_CODED_RETURN_VALUE\", mock.getValue());\n+    }\n+\n+    @Test\n+    public void shouldNotCallRealMethodWhenStubbedLater() {\n+        UnderTest mock = mock(UnderTest.class);\n+\n+        when(mock.getValue()).thenCallRealMethod();\n+        when(mock.getValue()).thenReturn(\"FAKE_VALUE\");\n+\n+        Assert.assertEquals(\"FAKE_VALUE\", mock.getValue());\n+    }\n+}", "timestamp": 1240341156, "metainfo": ""}