{"sha": "8958712e22b7bc3e3dcbb766821c65691a1f6e1f", "log": "made things a bit simpler  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40953", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n import org.mockito.internal.util.ListUtil.Filter;\n import org.mockito.internal.verification.MockitoVerificationMode;\n import org.mockito.internal.verification.VerificationModeDecoder;\n-import org.mockito.internal.verification.api.VerificationMode;\n \n public class InvocationsFinder {\n \n         return firstChunk;\n     }\n     \n-    public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+    public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n         Invocation firstSimilar = null;\n         for (Invocation invocation : invocations) {\n             if (!wanted.hasSimilarMethod(invocation)) {\n--- a/src/org/mockito/internal/verification/MissingInvocationChecker.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationChecker.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.verification.api.VerificationMode;\n \n public class MissingInvocationChecker {\n     \n         this.reporter = reporter;\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n         \n         if (actualInvocations.isEmpty()) {\n-            Invocation similar = finder.findSimilarInvocation(invocations, wanted, mode);\n+            Invocation similar = finder.findSimilarInvocation(invocations, wanted);\n             reportMissingInvocationError(wanted, similar);\n         }\n     }\n--- a/src/org/mockito/internal/verification/MockitoVerificationMode.java\n+++ b/src/org/mockito/internal/verification/MockitoVerificationMode.java\n         \n         //TODO duplicated\n         if (wantedInvocationCount > 0 || (verification == Verification.AT_LEAST && wantedInvocationCount == 1)) {\n-            missingInvocation.verify(data.getAllInvocations(), data.getWanted(), this);\n+            missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n         }\n         numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), this);\n     }\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.verification.MockitoVerificationMode;\n-import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     public void shouldFindFirstSimilarInvocationByName() throws Exception {\n         Invocation overloadedSimpleMethod = new InvocationBuilder().mock(mock).simpleMethod().arg(\"test\").toInvocation();\n         \n-        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedSimpleMethod), VerificationModeFactory.atLeastOnce());\n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedSimpleMethod));\n         assertSame(found, simpleMethodInvocation);\n     }\n     \n         \n         invocations.add(overloadedDifferentMethod);\n         \n-        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedDifferentMethod), VerificationModeFactory.atLeastOnce());\n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(overloadedDifferentMethod));\n         assertSame(found, overloadedDifferentMethod);\n     }\n     \n--- a/test/org/mockito/internal/verification/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/InvocationsFinderStub.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.verification.api.VerificationMode;\n \n class InvocationsFinderStub extends InvocationsFinder {\n     \n         return actualToReturn;\n     }\n     \n-    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n         this.invocations = invocations;\n         return similarToReturn;\n     }\n--- a/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n     @Test\n     public void shouldAskFinderForActualInvocations() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        VerificationMode mode = VerificationModeFactory.atLeastOnce();\n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted);\n         \n         assertSame(invocations, finderStub.invocations);\n     }\n     @Test\n     public void shouldPassBecauseActualInvocationFound() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        verifier.verify(invocations, wanted, VerificationModeFactory.atLeastOnce());\n+        verifier.verify(invocations, wanted);\n     }\n     \n     @Test\n     public void shouldAskAnalyzerForSimilarInvocation() {\n-        verifier.verify(invocations, wanted, VerificationModeFactory.atLeastOnce());\n+        verifier.verify(invocations, wanted);\n         \n         assertSame(invocations, finderStub.invocations);\n     }\n         assertTrue(finderStub.actualToReturn.isEmpty());\n         finderStub.similarToReturn = null;\n         \n-        verifier.verify(invocations, wanted, VerificationModeFactory.atLeastOnce());\n+        verifier.verify(invocations, wanted);\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertNull(reporterStub.actualInvocationStackTrace);\n         Invocation actualInvocation = new InvocationBuilder().toInvocation();\n         finderStub.similarToReturn = actualInvocation;\n         \n-        verifier.verify(invocations, wanted, VerificationModeFactory.atLeastOnce());\n+        verifier.verify(invocations, wanted);\n         \n         assertNotNull(reporterStub.wanted);\n         assertNotNull(reporterStub.actual);", "timestamp": 1223843320, "metainfo": ""}