{"sha": "dd91f7779b73eca16d34b520d002b35d27fac044", "log": "Using Invocation instead of InvocationImpl where possible, even more.", "commit": "\n--- a/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n             invocationsInOrder.addAll(fromSingleMock);\n         }\n         \n-        return new LinkedList<InvocationImpl>(invocationsInOrder);\n+        return new LinkedList<Invocation>(invocationsInOrder);\n     }\n \n     private final class SequenceNumberComparator implements Comparator<Invocation> {\n--- a/src/org/mockito/internal/verification/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n     public List<Invocation> getAll() {\n     \tList<Invocation> copiedList;\n     \tsynchronized (invocations) {\n-\t\t\tcopiedList = new LinkedList<InvocationImpl>(invocations) ;\n+\t\t\tcopiedList = new LinkedList<Invocation>(invocations) ;\n \t\t}\n \n         return ListUtil.filter(copiedList, new RemoveToString());\n--- a/test/org/mockito/internal/debugging/WarningsFinderTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsFinderTest.java\n         InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n \n         // when\n-        WarningsFinder finder = new WarningsFinder(Arrays.<InvocationImpl>asList(), Arrays.<InvocationMatcher>asList(unstubbedInvocation));\n+        WarningsFinder finder = new WarningsFinder(Arrays.<Invocation>asList(), Arrays.<InvocationMatcher>asList(unstubbedInvocation));\n         finder.find(listener);\n \n         // then\n         InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n \n         // when\n-        WarningsFinder finder = new WarningsFinder(Arrays.<InvocationImpl> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n+        WarningsFinder finder = new WarningsFinder(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n         finder.find(listener);\n \n         // then\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n         Location last = finder.getLastLocation(invocations);\n         assertSame(differentMethodInvocation.getLocation(), last);\n         \n-        assertNull(finder.getLastLocation(Collections.<InvocationImpl>emptyList()));\n+        assertNull(finder.getLastLocation(Collections.<Invocation>emptyList()));\n     } \n     \n     @Test\n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n         checker = new MissingInvocationInOrderChecker(finderStub, reporterStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n-        invocations = new LinkedList<InvocationImpl>(asList(new InvocationBuilder().toInvocation()));\n+        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     }                                                                    \n \n     @Test\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n         checker = new NumberOfInvocationsChecker(reporterStub, finderStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n-        invocations = new LinkedList<InvocationImpl>(asList(new InvocationBuilder().toInvocation()));\n+        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     }\n \n     @Test\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n         checker = new NumberOfInvocationsInOrderChecker(finderStub, reporter);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n-        invocations = new LinkedList<InvocationImpl>(asList(new InvocationBuilder().toInvocation()));\n+        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     }\n     \n     @Test", "timestamp": 1333233252, "metainfo": ""}