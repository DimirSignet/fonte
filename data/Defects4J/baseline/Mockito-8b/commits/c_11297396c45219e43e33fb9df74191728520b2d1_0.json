{"sha": "11297396c45219e43e33fb9df74191728520b2d1", "log": "More coverage for the plugin switcher", "commit": "\n--- a/src/org/mockito/internal/creation/cglib/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/cglib/CglibMockMaker.java\n /**\n  * A MockMaker that uses cglib to generate mocks on a JVM.\n  */\n-public final class CglibMockMaker implements MockMaker {\n+public class CglibMockMaker implements MockMaker {\n \n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n--- /dev/null\n+++ b/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyMockMaker.java\n+package org.mockitousage.plugins.switcher;\n+\n+import org.mockito.internal.creation.cglib.CglibMockMaker;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class MyMockMaker extends CglibMockMaker {\n+\n+    static ThreadLocal<Object> explosive = new ThreadLocal<Object>();\n+\n+    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+        if (explosive.get() != null) {\n+            throw new RuntimeException(\"Ka-boom!\");\n+        }\n+        return super.createMock(settings, handler);\n+    }\n+\n+    public MockHandler getHandler(Object mock) {\n+        return super.getHandler(mock);\n+    }\n+\n+    public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {\n+        super.resetMock(mock, newHandler, settings);\n+    }\n+}\n--- a/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitcherTest.java\n+++ b/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitcherTest.java\n \n package org.mockitousage.plugins.switcher;\n \n+import org.junit.After;\n import org.junit.Test;\n import org.mockitousage.plugins.stacktrace.MyStackTraceCleanerProvider;\n \n \n import static java.util.Arrays.asList;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n import static org.mockito.Mockito.mock;\n \n-//TODO consider adding a separate source set or project\n-//that validates that switcher can disable a plugin\n public class PluginSwitcherTest {\n     \n     @Test\n     public void plugin_switcher_is_used() {\n         mock(List.class);\n-        assertEquals(MyPluginSwitcher.invokedFor, asList(MyStackTraceCleanerProvider.class.getName()));\n+        assertEquals(MyPluginSwitcher.invokedFor, asList(MyMockMaker.class.getName(), MyStackTraceCleanerProvider.class.getName()));\n+    }\n+\n+    @Test\n+    public void uses_custom_mock_maker() {\n+        //when\n+        MyMockMaker.explosive.set(new Object());\n+\n+        //when\n+        try {\n+            mock(List.class);\n+            fail();\n+        } catch (Exception e) {}\n+    }\n+\n+    @After\n+    public void after() {\n+        MyMockMaker.explosive.remove();\n     }\n }", "timestamp": 1418426971, "metainfo": ""}