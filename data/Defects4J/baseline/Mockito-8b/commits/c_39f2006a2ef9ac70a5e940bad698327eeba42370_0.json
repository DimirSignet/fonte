{"sha": "39f2006a2ef9ac70a5e940bad698327eeba42370", "log": "another step to refactor verifiers, adding new verification modes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40931", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/BasicVerificationMode.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ */\n+public class BasicVerificationMode extends VerificationModeImpl implements VerificationMode {\n+\n+    protected BasicVerificationMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,\n+            Verification verification) {\n+        super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n+    }\n+\n+    @Override\n+    public List<Verifier> getVerifiers() {\n+        return Arrays.asList(\n+                new MissingInvocationVerifier(),\n+                new NumberOfInvocationsVerifier());\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/InOrderVerificationMode.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ */\n+public class InOrderVerificationMode extends VerificationModeImpl implements VerificationMode {\n+\n+    protected InOrderVerificationMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,\n+            Verification verification) {\n+        super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n+    }\n+\n+    @Override\n+    public List<Verifier> getVerifiers() {\n+        return Arrays.asList(\n+                new MissingInvocationInOrderVerifier(),\n+                new NumberOfInvocationsInOrderVerifier());\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/NoMoreInteractionsMode.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ */\n+public class NoMoreInteractionsMode extends VerificationModeImpl implements VerificationMode {\n+\n+    protected NoMoreInteractionsMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,\n+            Verification verification) {\n+        super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n+    }\n+\n+    @Override\n+    public List<Verifier> getVerifiers() {\n+        return Arrays.asList((Verifier) new NoMoreInvocationsVerifier());\n+    }\n+}\n--- a/src/org/mockito/internal/verification/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationModeImpl.java\n  * <p> \n  * Implements marking interface which hides details from Mockito users. \n  */\n-public class VerificationModeImpl implements VerificationMode {\n+public abstract class VerificationModeImpl implements VerificationMode {\n     \n     public enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n     \n     final List<? extends Object> mocksToBeVerifiedInOrder;\n     final Verification verification;\n     \n-    private VerificationModeImpl(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n+    protected VerificationModeImpl(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n         if (verification != Verification.AT_LEAST && wantedNumberOfInvocations < 0) {\n             throw new MockitoException(\"Negative value is not allowed here\");\n         }\n     }\n \n     public static VerificationMode atLeast(int minNumberOfInvocations) {\n-        return new VerificationModeImpl(minNumberOfInvocations, Collections.emptyList(), Verification.AT_LEAST);\n+        return new BasicVerificationMode(minNumberOfInvocations, Collections.emptyList(), Verification.AT_LEAST);\n     }\n \n     public static VerificationMode times(int wantedNumberOfInvocations) {\n-        return new VerificationModeImpl(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n+        return new BasicVerificationMode(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n     public static VerificationMode inOrder(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n         assert !mocksToBeVerifiedInOrder.isEmpty();\n-        return new VerificationModeImpl(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.EXPLICIT);\n+        return new InOrderVerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.EXPLICIT);\n     }\n \n     public static VerificationMode inOrderAtLeast(int minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n         assert !mocksToBeVerifiedInOrder.isEmpty();\n-        return new VerificationModeImpl(minNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.AT_LEAST);\n+        return new InOrderVerificationMode(minNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.AT_LEAST);\n     }\n     \n     public static VerificationMode noMoreInteractions() {\n-        return new VerificationModeImpl(0, Collections.emptyList(), Verification.NO_MORE_WANTED);\n+        return new NoMoreInteractionsMode(0, Collections.emptyList(), Verification.NO_MORE_WANTED);\n     }\n \n     public Integer wantedCount() {\n             invocations = new AllInvocationsFinder().getAllInvocations(this.getMocksToBeVerifiedInOrder());\n         }\n \n-        List<Verifier> verifiers = Arrays.asList(\n-                new MissingInvocationInOrderVerifier(),\n-                new NumberOfInvocationsInOrderVerifier(),\n-                new MissingInvocationVerifier(),\n-                new NumberOfInvocationsVerifier(),\n-                new NoMoreInvocationsVerifier());\n+        List<Verifier> verifiers = getVerifiers();\n         \n         for (Verifier verifier : verifiers) {\n             if (verifier.appliesTo(this)) {\n             }\n         }\n     }\n+    \n+    public abstract List<Verifier> getVerifiers();\n }", "timestamp": 1223560288, "metainfo": ""}