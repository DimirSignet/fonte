{"sha": "ae7a892f4d8c23b68cf0b4a7efd348e2861a5106", "log": "Fix for issue 215 : Adding doThrow(Class<? extends Throwable>) and other variation of this method", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n         BDDMyOngoingStubbing<T> willReturn(T value);\n         \n         /**\n-         * See original {@link OngoingStubbing#thenReturn(Object, Object...)}\n+         * See original {@link OngoingStubbing#thenReturn(Object, Object[])}\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value, T... values);\n         \n          * See original {@link OngoingStubbing#thenThrow(Throwable...)}\n          */\n         BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);\n+\n+        /**\n+         * See original {@link OngoingStubbing#thenThrow(Class[])}\n+         */\n+        BDDMyOngoingStubbing<T> willThrow(Class<? extends Throwable>... throwableClasses);\n \n         /**\n          * See original {@link OngoingStubbing#thenCallRealMethod()}\n         public BDDMyOngoingStubbing<T> willThrow(Throwable... throwables) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwables));\n         }\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Class[])\n+         */\n+        public BDDMyOngoingStubbing<T> willThrow(Class<? extends Throwable>... throwableClasses) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwableClasses));\n+        }\n \n         public BDDMyOngoingStubbing<T> willCallRealMethod() {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenCallRealMethod());\n          * See original {@link Stubber#doThrow(Throwable)}\n          */\n         BDDStubber willThrow(Throwable toBeThrown);\n-        \n+\n+        /**\n+         * See original {@link Stubber#doThrow(Class)}\n+         */\n+        BDDStubber willThrow(Class<? extends Throwable> toBeThrown);\n+\n         /**\n          * See original {@link Stubber#when(Object)}\n          */\n         public BDDStubber willThrow(Throwable toBeThrown) {\n             return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n         }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willThrow(Class)\n+         */\n+        public BDDStubber willThrow(Class<? extends Throwable> toBeThrown) {\n+            return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n+        }\n     }\n     \n     /**\n      * see original {@link Mockito#doThrow(Throwable)}\n      */\n     public static BDDStubber willThrow(Throwable toBeThrown) {\n+        return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n+    }\n+\n+    /**\n+     * see original {@link Mockito#doThrow(Throwable)}\n+     */\n+    public static BDDStubber willThrow(Class<? extends Throwable> toBeThrown) {\n         return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n     }\n     \n     public static BDDStubber willCallRealMethod() {\n         return new BDDStubberImpl(Mockito.doCallRealMethod());\n     }\n-}\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.MockitoDebuggerImpl;\n-import org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter;\n-import org.mockito.internal.stubbing.answers.CallsRealMethods;\n-import org.mockito.internal.stubbing.answers.DoesNothing;\n-import org.mockito.internal.stubbing.answers.Returns;\n-import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.runners.MockitoJUnitRunner;\n-import org.mockito.stubbing.Answer;\n-import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.OngoingStubbing;\n-import org.mockito.stubbing.Stubber;\n-import org.mockito.stubbing.VoidMethodStubbable;\n-import org.mockito.verification.VerificationWithTimeout;\n+import org.mockito.stubbing.*;\n import org.mockito.verification.Timeout;\n import org.mockito.verification.VerificationMode;\n+import org.mockito.verification.VerificationWithTimeout;\n \n /**\n  * <p align=\"left\"><img src=\"logo.jpg\"/></p>\n     }\n \n     /**\n+     * Use doThrow() when you want to stub the void method with an exception class.\n+     * <p>\n+     * A new exception instance will be created for each method invocation.\n+     * <p>\n+     * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n+     * <p>\n+     * Example:\n+     *\n+     * <pre>\n+     *   doThrow(RuntimeException.class).when(mock).someVoidMethod();\n+     * </pre>\n+     *\n+     * @param toBeThrown to be thrown when the stubbed method is called\n+     * @return stubber - to select a method for stubbing\n+     */\n+    public static Stubber doThrow(Class<? extends Throwable> toBeThrown) {\n+        return MOCKITO_CORE.doAnswer(new ThrowsExceptionClass(toBeThrown));\n+    }\n+\n+\n+    /**\n      * Use doCallRealMethod() when you want to call the real implementation of a method.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning</b>:\n     static MockitoDebugger debug() {\n         return new MockitoDebuggerImpl();\n     }\n+\n }\n--- a/src/org/mockito/internal/stubbing/BaseStubbing.java\n+++ b/src/org/mockito/internal/stubbing/BaseStubbing.java\n import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.internal.stubbing.answers.ThrowsExceptionClass;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n import org.mockito.stubbing.OngoingStubbing;\n \n         return stubbing;\n     }        \n \n+    private OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableClass) {\n+        return thenAnswer(new ThrowsExceptionClass(throwableClass));\n+    }\n+\n+    public OngoingStubbing<T> thenThrow(Class<? extends Throwable>... throwableClasses) {\n+        if (throwableClasses == null) {\n+            thenThrow((Throwable) null);\n+        }\n+        OngoingStubbing<T> stubbing = null;\n+        for (Class<? extends Throwable> t: throwableClasses) {\n+            if (stubbing == null) {\n+                stubbing = thenThrow(t);\n+            } else {\n+                stubbing = stubbing.thenThrow(t);\n+            }\n+        }\n+        return stubbing;\n+    }\n+\n     public OngoingStubbing<T> thenCallRealMethod() {\n         return thenAnswer(new CallsRealMethods());\n     }\n     public DeprecatedOngoingStubbing<T> toThrow(Throwable throwable) {\n         return toAnswer(new ThrowsException(throwable));\n     }\n-}\n+}\n--- a/src/org/mockito/internal/stubbing/StubberImpl.java\n+++ b/src/org/mockito/internal/stubbing/StubberImpl.java\n  */\n package org.mockito.internal.stubbing;\n \n-import java.util.LinkedList;\n-import java.util.List;\n-\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.stubbing.answers.DoesNothing;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.internal.stubbing.answers.ThrowsExceptionClass;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.Stubber;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class StubberImpl implements Stubber {\n         return this;\n     }\n \n+    public Stubber doThrow(Class<? extends Throwable> toBeThrown) {\n+        answers.add(new ThrowsExceptionClass(toBeThrown));\n+        return this;\n+    }\n+\n     public Stubber doNothing() {\n         answers.add(new DoesNothing());\n         return this;\n         answers.add(answer);\n         return this;\n     }\n-}\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.objenesis.ObjenesisHelper;\n+\n+import java.io.Serializable;\n+\n+public class ThrowsExceptionClass implements Answer<Object>, Serializable {\n+\n+    private Class<? extends Throwable> throwableClass;\n+    private final ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n+\n+    public ThrowsExceptionClass(Class<? extends Throwable> throwableClass) {\n+\n+        this.throwableClass = throwableClass;\n+    }\n+\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+\n+        Throwable throwable = (Throwable) ObjenesisHelper.newInstance(throwableClass);\n+        throwable.fillInStackTrace();\n+        filter.filter(throwable);\n+        throw throwable;\n+    }\n+\n+    public Class<? extends Throwable> getThrowableClass() {\n+        return throwableClass;\n+    }\n+}\n--- a/src/org/mockito/stubbing/OngoingStubbing.java\n+++ b/src/org/mockito/stubbing/OngoingStubbing.java\n      */\n     OngoingStubbing<T> thenThrow(Throwable... throwables);\n \n+    /**\n+     * Sets Throwable classes to be thrown when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenThrow(RuntimeException.class);\n+     * </pre>\n+     *\n+     * <p>\n+     * Each throwable class will be instantiated for each method invocation.\n+     * <p>\n+     * If throwableClasses contain a checked exception then it has to\n+     * match one of the checked exceptions of method signature.\n+     * <p>\n+     * You can specify throwableClasses to be thrown for consecutive calls.\n+     * In that case the last throwable determines the behavior of further consecutive calls.\n+     * <p>\n+     * if throwable is null then exception will be thrown.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param throwableClasses to be thrown on method invocation\n+     *\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     */\n+    OngoingStubbing<T> thenThrow(Class<? extends Throwable>... throwableClasses);\n+\n     /**     \n      * Sets the real implementation to be called when the method is called on a mock object.\n      * <p>\n      * @return iOngoingStubbing object that allows stubbing consecutive calls\n      */\n     OngoingStubbing<T> thenAnswer(Answer<?> answer);\n+\n }\n--- a/src/org/mockito/stubbing/Stubber.java\n+++ b/src/org/mockito/stubbing/Stubber.java\n      * @return stubber - to select a method for stubbing\n      */\n     Stubber doThrow(Throwable toBeThrown);\n-    \n+\n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Class<? extends Throwable>)} style:\n+     * <pre>\n+     *   doThrow(RuntimeException.class).\n+     *   doThrow(IllegalArgumentException.class)\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n+     * See javadoc for {@link Mockito#doThrow(Class)}\n+     *\n+     * @param toBeThrown exception class to be thrown when the stubbed method is called\n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doThrow(Class<? extends Throwable> toBeThrown);\n+\n     /**\n      * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:\n      * <pre>\n      * @return stubber - to select a method for stubbing\n      */\n     Stubber doReturn(Object toBeReturned);\n-}\n+}\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockitousage.customization;\n-\n-import static org.mockito.BDDMockito.*;\n \n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n+\n+import static org.mockito.BDDMockito.*;\n \n public class BDDMockitoTest extends TestBase {\n     \n     @Test\n     public void shouldStubWithThrowable() throws Exception {\n         given(mock.simpleMethod(\"foo\")).willThrow(new RuntimeException());\n+\n+        try {\n+            assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n+            fail();\n+        } catch(RuntimeException e) {}\n+    }\n+\n+    @Test\n+    public void shouldStubWithThrowableClass() throws Exception {\n+        given(mock.simpleMethod(\"foo\")).willThrow(RuntimeException.class);\n \n         try {\n             assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n             fail();\n         } catch(RuntimeException e) {}\n     }\n-    \n+\n+    @Test\n+    public void shouldStubVoidWithExceptionClass() throws Exception {\n+        willThrow(RuntimeException.class).given(mock).voidMethod();\n+\n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch(RuntimeException e) {}\n+    }\n+\n     @Test\n     public void shouldStubVoidConsecutively() throws Exception {\n         willDoNothing()\n             mock.voidMethod();\n             fail();\n         } catch(RuntimeException e) {}\n+    }\n+\n+    @Test\n+    public void shouldStubVoidConsecutivelyWithExceptionClass() throws Exception {\n+        willDoNothing()\n+        .willThrow(IllegalArgumentException.class)\n+        .given(mock).voidMethod();\n+\n+        mock.voidMethod();\n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch(IllegalArgumentException e) {}\n     }\n     \n     @Test\n         //then\n         assertEquals(\"woof\", dog.bark());\n     }\n-}\n+}\n--- a/test/org/mockitousage/misuse/InvalidUsageTest.java\n+++ b/test/org/mockitousage/misuse/InvalidUsageTest.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockitousage.misuse;\n-\n-import static org.mockito.Mockito.*;\n \n import org.junit.After;\n import org.junit.Test;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Mockito.*;\n \n public class InvalidUsageTest extends TestBase {\n \n     @SuppressWarnings(\"all\")\n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullThrowableVararg() throws Exception {\n-        when(mock.simpleMethod()).thenThrow(null);\n+        when(mock.simpleMethod()).thenThrow((Throwable) null);\n     }    \n \n     @Test(expected=MockitoException.class)\n         \n         verifyZeroInteractions(clazz);\n     }\n-}\n+}\n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockitousage.stubbing;\n-\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.*;\n \n public class BasicStubbingTest extends TestBase {\n \n         \n         verifyZeroInteractions(mock);\n     }\n-    \n+\n     @Test\n     public void unfinishedStubbingCleansUpTheState() {\n         reset(mock);\n     public void shouldAllowMockingWhenToStringIsFinal() throws Exception {\n         mock(Foo.class);\n     }\n-}\n+}\n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockitousage.stubbing;\n-\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n-\n-import java.io.IOException;\n \n import org.junit.After;\n import org.junit.Test;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+import java.io.IOException;\n+\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.*;\n+\n @SuppressWarnings(\"serial\")\n public class StubbingUsingDoReturnTest extends TestBase {\n \n         assertEquals(\"bar\", mock.simpleMethod());\n         assertEquals(\"bar\", mock.simpleMethod());\n     }\n-    \n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void shouldAllowChainedStubbingWithExceptionClass() throws Exception {\n+        doReturn(\"whatever\").doThrow(IllegalArgumentException.class).when(mock).simpleMethod();\n+\n+        assertEquals(\"whatever\", mock.simpleMethod());\n+        mock.simpleMethod();\n+    }\n+\n     @Test\n     public void shouldAllowChainedStubbingOnVoidMethods() {\n         doNothing().\n         doReturn(1).when(mock).intReturningMethod();\n         doReturn(new Integer(2)).when(mock).intReturningMethod();\n     }\n-}\n+}\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n  */\n package org.mockitousage.stubbing;\n \n-import static org.mockito.Mockito.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.verification.NoInteractionsWanted;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitoutil.TestBase;\n \n import java.io.IOException;\n import java.io.Reader;\n import java.util.LinkedList;\n import java.util.Map;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.WantedButNotInvoked;\n-import org.mockitoutil.TestBase;\n+import static org.mockito.Mockito.*;\n \n @SuppressWarnings({\"serial\", \"unchecked\", \"all\"})\n public class StubbingWithThrowablesTest extends TestBase {\n         } catch (Error e) {\n             assertEquals(error, e);\n         }\n-    }    \n+    }\n+\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void shouldInstantiateExceptionClassOnInteraction() {\n+        when(mock.add(null)).thenThrow(IllegalArgumentException.class);\n+\n+        mock.add(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void shouldInstantiateExceptionClassWithOngoingStubbingOnInteraction() {\n+        Mockito.doThrow(IllegalArgumentException.class).when(mock).add(null);\n+\n+        mock.add(null);\n+    }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n-        when(mock.add(\"monkey island\")).thenThrow(null);\n+        when(mock.add(\"monkey island\")).thenThrow((Throwable) null);\n     }    \n     \n     @Test", "timestamp": 1293300550, "metainfo": ""}