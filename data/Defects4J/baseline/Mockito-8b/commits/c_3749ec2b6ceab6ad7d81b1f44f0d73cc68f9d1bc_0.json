{"sha": "3749ec2b6ceab6ad7d81b1f44f0d73cc68f9d1bc", "log": "Removes additional source root by using a parentless in-memory class loader", "commit": "\n--- a/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n+++ b/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n import static org.hamcrest.CoreMatchers.is;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n-import static org.mockitoutil.ClassLoaders.isolatedClassLoader;\n+import static org.mockitoutil.ClassLoaders.inMemoryClassLoader;\n+import static org.mockitoutil.SimpleClassGenerator.makeMarkerInterface;\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockitousage.IMethods;\n     @Test\n     public void should_mock_class_with_interfaces_of_different_class_loader_AND_different_classpaths() throws ClassNotFoundException {\n         // Note : if classes are in the same classpath, SearchingClassLoader can find the class/classes and load them in the first matching classloader\n-        Class<?> interface1 = isolatedClassLoader()\n-                .withCodeSourceUrls(\"test-resources/multiple-classpaths/cp1\")\n-                .withPrivateCopyOf(\"test.TestedClass1\")\n+        Class<?> interface1 = inMemoryClassLoader()\n+                .withClassDefinition(\"test.Interface1\", makeMarkerInterface(\"test.Interface1\"))\n                 .build()\n-                .loadClass(\"test.TestedClass1\");\n-        Class<?> interface2 = isolatedClassLoader()\n-                .withCodeSourceUrls(\"test-resources/multiple-classpaths/cp2\")\n-                .withPrivateCopyOf(\"test.TestedClass2\")\n+                .loadClass(\"test.Interface1\");\n+        Class<?> interface2 = inMemoryClassLoader()\n+                .withClassDefinition(\"test.Interface2\", makeMarkerInterface(\"test.Interface2\"))\n                 .build()\n-                .loadClass(\"test.TestedClass2\");\n+                .loadClass(\"test.Interface2\");\n \n         try {\n             Object mocked = mock(interface1, withSettings().extraInterfaces(interface2));", "timestamp": 1386154924, "metainfo": ""}