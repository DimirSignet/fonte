{"sha": "de56721919fbab44e7494b3b9158036f6aadd2f3", "log": "Added the notion of rollback to the release notes operations", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseStep.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseStep.java\n package org.mockito.release.steps;\n \n+import groovy.lang.Closure;\n import org.mockito.release.util.operations.Operation;\n+import org.mockito.release.util.operations.Operations;\n \n class DefaultReleaseStep implements ReleaseStep {\n \n     private final String description;\n     private final Operation operation;\n+    private Operation rollback;\n \n     public DefaultReleaseStep(String description, Operation operation) {\n         this.description = description;\n         return description;\n     }\n \n+    public void rollback(Closure closure) {\n+        rollback = Operations.toOperation(closure);\n+    }\n+\n+    public Operation getRollback() {\n+        return rollback;\n+    }\n+\n     public void perform() {\n         operation.perform();\n     }\n--- a/buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java\n import org.mockito.release.util.operations.Operation;\n \n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n \n class DefaultReleaseSteps implements ReleaseSteps {\n \n     public void perform() {\n         System.out.println(\"Performing \" + steps.size() + \" release steps\");\n-        int i = 1;\n+        List<ReleaseStep> attempted = new LinkedList<ReleaseStep>();\n         for (ReleaseStep step : steps) {\n-            System.out.println(\"Step \" + (i++) + \": \" + step.getDescription());\n-            step.perform();\n+            attempted.add(step);\n+            System.out.println(\"Step \" + attempted.size() + \": \" + step.getDescription());\n+            try {\n+                step.perform();\n+            } catch (Throwable t) {\n+                rollback(attempted); //TODO SF what if rollback fails?\n+                throw new RuntimeException(\"Release failed. Rollback was performed.\", t);\n+            }\n+        }\n+    }\n+\n+    private static void rollback(List<ReleaseStep> attempted) {\n+        System.out.println(\"Release failed. Rolling back \" + attempted.size() + \" release steps.\");\n+        LinkedList<ReleaseStep> targets = new LinkedList<ReleaseStep>();\n+        while(!targets.isEmpty()) {\n+            ReleaseStep s = targets.removeLast();\n+            Operation r = s.getRollback();\n+            if (r != null) {\n+                System.out.println(\"Rolling back step \" + (targets.size() + 1) + \" (\" + s.getDescription() + \")\");\n+                r.perform();\n+            } else {\n+                System.out.println(\"No rollback for step \" + (targets.size() + 1) + \" (\" + s.getDescription() + \")\");\n+            }\n         }\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/steps/ReleaseStep.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/steps/ReleaseStep.java\n package org.mockito.release.steps;\n \n+import groovy.lang.Closure;\n import org.mockito.release.util.operations.Operation;\n \n public interface ReleaseStep extends Operation {\n \n     String getDescription();\n+\n+    void rollback(Closure closure); //TODO SF avoid leaking closure here as the release steps should be a java tool\n+\n+    Operation getRollback();\n }", "timestamp": 1418595337, "metainfo": ""}