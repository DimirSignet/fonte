{"sha": "41c41d6340198adbc7f5a7aa06bc70ee31ad99c8", "log": "made ExpectedInvocation thinner  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4086", "commit": "\n--- a/src/org/mockito/internal/ExpectedInvocation.java\n+++ b/src/org/mockito/internal/ExpectedInvocation.java\n     private final List<IArgumentMatcher> matchers;\n \n     public ExpectedInvocation(Invocation invocation, List<IArgumentMatcher> matchers) {\n-        //TODO let's not allow ExpectedInvocation to accept null matchers\n+        if (matchers == null) {\n+            throw new IllegalArgumentException(\"matchers cannot be null\");\n+        }\n         this.invocation = invocation;\n         this.matchers = matchers;\n     }\n             return false;\n \n         ExpectedInvocation other = (ExpectedInvocation) o;\n-        return this.invocation.equals(other.invocation)\n-                && ((this.matchers == null && other.matchers == null) || (this.matchers != null && this.matchers\n-                        .equals(other.matchers)));\n+        return invocation.equals(other.invocation) && matchers.equals(other.matchers);\n     }\n \n     public int hashCode() {\n--- a/test/org/mockito/internal/ExpectedInvocationTest.java\n+++ b/test/org/mockito/internal/ExpectedInvocationTest.java\n @SuppressWarnings(\"unchecked\")\n public class ExpectedInvocationTest {\n \n+    @Test(expected=IllegalArgumentException.class)\n+    public void shouldScreamWhenMatchersNull() throws Exception {\n+        new ExpectedInvocation(new InvocationBuilder().toInvocation(), null);\n+    }\n+    \n     @Test\n     public void shouldBeACitizenOfHashes() throws Exception {\n         Invocation invocation = new InvocationBuilder().toInvocation();\n     \n     @Test\n     public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {\n-        ExpectedInvocation withOneArg = new ExpectedInvocation(new InvocationBuilder().args(\"test\").toInvocation(), null);\n-        ExpectedInvocation withTwoArgs = new ExpectedInvocation(new InvocationBuilder().args(\"test\", 100).toInvocation(), null);\n+        ExpectedInvocation withOneArg = new ExpectedInvocation(new InvocationBuilder().args(\"test\").toInvocation(), Collections.EMPTY_LIST);\n+        ExpectedInvocation withTwoArgs = new ExpectedInvocation(new InvocationBuilder().args(\"test\", 100).toInvocation(), Collections.EMPTY_LIST);\n \n         assertFalse(withOneArg.equals(null));\n         assertFalse(withOneArg.equals(withTwoArgs));", "timestamp": 1196279842, "metainfo": ""}