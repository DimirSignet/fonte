{"sha": "f8fe13fda5a1efe47a02994909f107f92fd3dbe9", "log": "Pushed out complexity to separate class  Moved the file reading handling to a separate class", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/plugins/PluginFileReader.java\n+package org.mockito.internal.configuration.plugins;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class PluginFileReader {\n+\n+    List<String> readerToLines(Reader reader) throws IOException {\n+        List<String> result = new ArrayList<String>();\n+        BufferedReader lineReader = new BufferedReader(reader);\n+        String line;\n+        while ((line = lineReader.readLine()) != null) {\n+            result.add(line);\n+        }\n+        return result;\n+    }\n+\n+    String stripCommentAndWhitespace(String line) {\n+        int hash = line.indexOf('#');\n+        if (hash != -1) {\n+            line = line.substring(0, hash);\n+        }\n+        return line.trim();\n+    }\n+\n+    void closeQuietly(InputStream in) {\n+        if (in != null) {\n+            try {\n+                in.close();\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n import java.util.Enumeration;\n import java.util.List;\n \n-public class PluginLoader {\n+class PluginLoader {\n+\n+    private final PluginFileReader reader = new PluginFileReader();\n \n     /**\n      * Scans the classpath for given pluginType. If not found, default class is used.\n      */\n-    static <T> T plugin(Class<T> pluginType, String defaultPluginClassName) {\n+    <T> T loadPlugin(Class<T> pluginType, String defaultPluginClassName) {\n         for (T plugin : loadImplementations(pluginType)) {\n             return plugin; // return the first one service loader finds (if any)\n         }\n      * Equivalent to {@link java.util.ServiceLoader#load} but without requiring\n      * Java 6 / Android 2.3 (Gingerbread).\n      */\n-    static <T> List<T> loadImplementations(Class<T> service) {\n+    <T> List<T> loadImplementations(Class<T> service) {\n         ClassLoader loader = Thread.currentThread().getContextClassLoader();\n         if (loader == null) {\n             loader = ClassLoader.getSystemClassLoader();\n             InputStream in = null;\n             try {\n                 in = resource.openStream();\n-                for (String line : readerToLines(new InputStreamReader(in, \"UTF-8\"))) {\n-                    String name = stripCommentAndWhitespace(line);\n+                for (String line : reader.readerToLines(new InputStreamReader(in, \"UTF-8\"))) {\n+                    String name = reader.stripCommentAndWhitespace(line);\n                     if (name.length() != 0) {\n                         result.add(service.cast(loader.loadClass(name).newInstance()));\n                     }\n                 throw new MockitoConfigurationException(\n                         \"Failed to load \" + service + \" using \" + resource, e);\n             } finally {\n-                closeQuietly(in);\n+                reader.closeQuietly(in);\n             }\n         }\n         return result;\n     }\n-\n-    static List<String> readerToLines(Reader reader) throws IOException {\n-        List<String> result = new ArrayList<String>();\n-        BufferedReader lineReader = new BufferedReader(reader);\n-        String line;\n-        while ((line = lineReader.readLine()) != null) {\n-            result.add(line);\n-        }\n-        return result;\n-    }\n-\n-    static String stripCommentAndWhitespace(String line) {\n-        int hash = line.indexOf('#');\n-        if (hash != -1) {\n-            line = line.substring(0, hash);\n-        }\n-        return line.trim();\n-    }\n-\n-    private static void closeQuietly(InputStream in) {\n-        if (in != null) {\n-            try {\n-                in.close();\n-            } catch (IOException ignored) {\n-            }\n-        }\n-    }\n }\n--- a/src/org/mockito/internal/configuration/plugins/PluginRegistry.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginRegistry.java\n public class PluginRegistry {\n \n     private static final MockMaker mockMaker\n-            = PluginLoader.plugin(MockMaker.class, \"org.mockito.internal.creation.cglib.CglibMockMaker\");\n+            = new PluginLoader().loadPlugin(MockMaker.class, \"org.mockito.internal.creation.cglib.CglibMockMaker\");\n \n     private static final StackTraceCleanerProvider stackTraceCleanerProvider\n-            = PluginLoader.plugin(StackTraceCleanerProvider.class, \"org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider\");\n+            = new PluginLoader().loadPlugin(StackTraceCleanerProvider.class, \"org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider\");\n \n     /**\n      * The implementation of the stack trace cleaner\n--- /dev/null\n+++ b/test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.configuration.plugins;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import static org.mockito.Mockito.*;\n+\n+import junit.framework.Assert;\n+import org.junit.Test;\n+import org.mockito.internal.configuration.ClassPathLoader;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class PluginFileReaderTest extends TestBase {\n+\n+    PluginFileReader reader = new PluginFileReader();\n+\n+    @Test\n+    public void readerToLinesEmptyString() throws IOException {\n+        assertEquals(Collections.emptyList(), reader.readerToLines(new StringReader(\"\")));\n+    }\n+\n+    @Test\n+    public void readerToLinesNoLineBreaks() throws IOException {\n+        assertEquals(Arrays.asList(\"a\"), reader.readerToLines(new StringReader(\"a\")));\n+    }\n+\n+    @Test\n+    public void readerToLinesWithLineBreaks() throws IOException {\n+        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"),\n+                reader.readerToLines(new StringReader(\"a\\nb\\nc\")));\n+    }\n+\n+    @Test\n+    public void readerToLinesWithEmptyLines() throws IOException {\n+        assertEquals(Arrays.asList(\"a\", \"\", \"c\"),\n+                reader.readerToLines(new StringReader(\"a\\n\\nc\")));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceEmptyInput() throws IOException {\n+        assertEquals(\"\", reader.stripCommentAndWhitespace(\"\"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceWhitespaceInput() throws IOException {\n+        assertEquals(\"\", reader.stripCommentAndWhitespace(\" \"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceCommentInInput() throws IOException {\n+        assertEquals(\"a\", reader.stripCommentAndWhitespace(\"a#b\"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceMultipleHashes() throws IOException {\n+        assertEquals(\"a\", reader.stripCommentAndWhitespace(\"a#b#c\"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceWithWhitespaceAndComments() throws IOException {\n+        assertEquals(\"a\", reader.stripCommentAndWhitespace(\" a #b\"));\n+    }\n+}", "timestamp": 1418426971, "metainfo": ""}