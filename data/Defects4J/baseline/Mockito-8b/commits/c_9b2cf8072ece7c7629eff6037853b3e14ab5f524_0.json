{"sha": "9b2cf8072ece7c7629eff6037853b3e14ab5f524", "log": "Fixed issue 138 When verify contains extra calls to other mocks (highly unlikely) then Mockito was verifying wrong invocation. Now it is all good.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401932", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n+import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n         mockingProgress.validateState();\n \n+        //if verificationMode is not null then someone is doing verify()        \n         if (verificationMode != null) {\n-            VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n-            verificationMode.verify(data);\n-            return null;\n+            //We need to check if verification was started on the correct mock \n+            // - see VerifyingWithAnExtraCallToADifferentMockTest\n+            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n+                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n+                verificationMode.verify(data);\n+                return null;\n+            }\n         }\n         \n         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n         } else if (!mockUtil.isMock(mock)) {\n             reporter.notAMockPassedToVerify();\n         }\n-        mockingProgress.verificationStarted(mode);\n+        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));\n         return mock;\n     }\n     \n--- /dev/null\n+++ b/src/org/mockito/internal/verification/MockAwareVerificationMode.java\n+package org.mockito.internal.verification;\n+\n+import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.verification.VerificationMode;\n+\n+public class MockAwareVerificationMode implements VerificationMode {\n+\n+    private final Object mock;\n+    private final VerificationMode mode;\n+\n+    public MockAwareVerificationMode(Object mock, VerificationMode mode) {\n+        this.mock = mock;\n+        this.mode = mode;\n+    }\n+\n+    @Override\n+    public void verify(VerificationData data) {\n+        mode.verify(data);\n+    }\n+\n+    public Object getMock() {\n+        return mock;\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+//see bug 138\n+public class VerifyingWithAnExtraCallToADifferentMockTest extends TestBase {\n+   \n+    @Mock IMethods mock;\n+    @Mock IMethods mockTwo;\n+    \n+    @Test \n+    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {\n+        //given\n+        when(mock.otherMethod()).thenReturn(\"foo\");\n+        \n+        //when\n+        mockTwo.simpleMethod(\"foo\");\n+        \n+        //then\n+        verify(mockTwo).simpleMethod(mock.otherMethod());\n+    }\n+}", "timestamp": 1268857101, "metainfo": ""}