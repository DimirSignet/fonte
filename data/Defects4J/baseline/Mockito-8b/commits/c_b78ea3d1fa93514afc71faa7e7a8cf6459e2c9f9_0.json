{"sha": "b78ea3d1fa93514afc71faa7e7a8cf6459e2c9f9", "log": "In order to have tests that reflect bugs that need to be fixed I added those tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401555", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/CovariantOverrideTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class CovariantOverrideTest extends TestBase {\n+   \n+    public static interface ReturnsObject {\n+        Object callMe();\n+    }\n+\n+    public static interface ReturnsString extends ReturnsObject {\n+        // Java 5 covariant override of method from parent interface\n+        String callMe();\n+    }\n+\n+    @Test \n+    public void returnFoo1() {\n+        ReturnsObject mock = mock(ReturnsObject.class);\n+        when(mock.callMe()).thenReturn(\"foo\");\n+        assertEquals(\"foo\", mock.callMe()); // Passes\n+    }\n+\n+    @Test \n+    public void returnFoo2() {\n+        ReturnsString mock = mock(ReturnsString.class);\n+        when(mock.callMe()).thenReturn(\"foo\");\n+        assertEquals(\"foo\", mock.callMe()); // Passes\n+    }\n+\n+    @Test \n+    public void returnFoo3() {\n+        ReturnsObject mock = mock(ReturnsString.class);\n+        when(mock.callMe()).thenReturn(\"foo\");\n+        assertEquals(\"foo\", mock.callMe()); // Passes\n+    }\n+    \n+    @Ignore//TODO: not yet implemented\n+    @Test \n+    public void returnFoo4() {\n+        ReturnsString mock = mock(ReturnsString.class);\n+        mock.callMe(); // covariant override not generated\n+        ReturnsObject mock2 = mock; // Switch to base type to call covariant override\n+        verify(mock2).callMe(); // Fails: java.lang.AssertionError: expected:<foo> but was:<null>\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.junit.Ignore;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockitoutil.TestBase;\n+\n+//TODO before final 1.8\n+@Ignore\n+@RunWith(MockitoJUnitRunner.class)\n+public class MockitoRunnerBreaksWhenNoTestMethodsTest extends TestBase {}\n--- a/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n+++ b/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n \n import java.util.List;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class CapturingArgumentsTest extends TestBase {\n             fail();\n         } catch (MockitoException e) {}\n     }\n+    \n+    //TODO: not yet implemented\n+    @Ignore\n+    @Test\n+    public void shouldCaptureInt() {\n+        //given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<Integer> argument = new ArgumentCaptor<Integer>();\n+\n+        //when\n+        mock.intArgumentMethod(10);\n+        \n+        //then\n+        verify(mock).intArgumentMethod(argument.capture());\n+        assertEquals(10, (int) argument.getValue());\n+    }\n }", "timestamp": 1247139618, "metainfo": ""}