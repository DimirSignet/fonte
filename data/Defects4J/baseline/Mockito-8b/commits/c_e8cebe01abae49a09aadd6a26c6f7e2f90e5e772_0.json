{"sha": "e8cebe01abae49a09aadd6a26c6f7e2f90e5e772", "log": "Fixed issue 157 In order to avoid ArrayIndexOutOfBoundsException when anyvarag() matcher in use  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401790", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments) {\n+            if (m instanceof CapturesArguments && i.getArguments().length > k) {\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.matchers.AnyVararg;\n-import org.mockito.internal.matchers.CapturingMatcher;\n-import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.NotNull;\n+import org.mockito.internal.matchers.*;\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockitousage.IMethods;\n+\n+import static org.mockito.Matchers.anyVararg;\n import static org.mockitoutil.ExtraMatchers.hasExactlyInOrder;\n import org.mockitoutil.TestBase;\n \n         simpleMethod = new InvocationBuilder().mock(mock).simpleMethod().toInvocationMatcher();\n     }\n \n-    public void shouldBuildEqualsMatchersWhenNullPassed() throws Exception {\n-        InvocationMatcher m = new InvocationMatcher(new InvocationBuilder().args(\"foo\").toInvocation(), null);\n-        assertThat(m.getMatchers(), hasExactlyInOrder(new Equals(\"foo\")));\n-    }\n-    \n     @Test\n     public void shouldBeACitizenOfHashes() throws Exception {\n         Invocation invocation = new InvocationBuilder().toInvocation();\n         //then\n         assertTrue(match);\n     }\n+\n+    @Test\n+    public void shouldMatchCaptureArgumentsWhenArgsCountDoesNOTMatch() throws Exception {\n+        //given\n+        mock.varargs();\n+        Invocation invocation = getLastInvocation();\n+\n+        //when\n+        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));\n+\n+        //then\n+        invocationMatcher.captureArgumentsFrom(invocation);\n+    }\n }\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n \n     Object varargsObject(int i, Object... object);\n     \n-    void varargs(Object ... object);\n-    \n-    void varargs(String ... string);\n+    int varargs(Object ... object);\n+    \n+    int varargs(String ... string);\n \n     void mixedVarargs(Object i, String ... string);\n \n--- a/test/org/mockitousage/MethodsImpl.java\n+++ b/test/org/mockitousage/MethodsImpl.java\n         return null;\n     }\n \n-    public void varargs(Object... object) {\n-      \n-    }\n-\n-    public void varargs(String... string) {\n-      \n+    public int varargs(Object... object) {\n+        return -1;\n+    }\n+\n+    public int varargs(String... string) {\n+        return -1;\n     }\n \n     public void mixedVarargs(Object i, String... string) {\n--- a/test/org/mockitousage/basicapi/UsingVarargsTest.java\n+++ b/test/org/mockitousage/basicapi/UsingVarargsTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Matchers;\n+import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class UsingVarargsTest extends TestBase {\n         String withStringVarargsReturningString(int value, String... s);\n         void withObjectVarargs(int value, Object... o);\n         boolean withBooleanVarargs(int value, boolean... b);\n+        int foo(Object ... objects);\n     }\n     \n-    IVarArgs mock;\n+    @Mock IVarArgs mock;\n \n-    @Before\n-    public void setup() {\n-        mock = Mockito.mock(IVarArgs.class);\n-    }\n-    \n     @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldStubStringVarargs() {\n         String result = mixedVarargs.doSomething(\"one\", \"two\", null);\n         assertEquals(\"hello\", result);\n     }\n+    \n+    @Test\n+    //See bug #157\n+    public void shouldMatchEasilyEmptyVararg() throws Exception {\n+        //when\n+        when(mock.foo(anyVararg())).thenReturn(-1);\n+\n+        //then\n+        assertEquals(-1, mock.foo());\n+    } \n }", "timestamp": 1260563444, "metainfo": ""}