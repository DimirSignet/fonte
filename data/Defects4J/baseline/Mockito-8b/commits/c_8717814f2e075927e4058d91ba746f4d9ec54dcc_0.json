{"sha": "8717814f2e075927e4058d91ba746f4d9ec54dcc", "log": "Fixed issue 141 In order to do smarter matching when parameters are arrays.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401679", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/matchers/Equality.java\n+package org.mockito.internal.matchers;\n+\n+import java.lang.reflect.Array;\n+\n+//stolen from hamcrest because I didn't want to have more dependency than Matcher class \n+public class Equality {\n+\n+    public static boolean areEqual(Object o1, Object o2) {\n+        if (o1 == null || o2 == null) {\n+            return o1 == null && o2 == null;\n+        } else if (isArray(o1)) {\n+            return isArray(o2) && areArraysEqual(o1, o2);\n+        } else {\n+            return o1.equals(o2);\n+        }\n+    }\n+\n+    static boolean areArraysEqual(Object o1, Object o2) {\n+        return areArrayLengthsEqual(o1, o2)\n+                && areArrayElementsEqual(o1, o2);\n+    }\n+\n+    static boolean areArrayLengthsEqual(Object o1, Object o2) {\n+        return Array.getLength(o1) == Array.getLength(o2);\n+    }\n+\n+    static boolean areArrayElementsEqual(Object o1, Object o2) {\n+        for (int i = 0; i < Array.getLength(o1); i++) {\n+            if (!areEqual(Array.get(o1, i), Array.get(o2, i))) return false;\n+        }\n+        return true;\n+    }\n+\n+    static boolean isArray(Object o) {\n+        return o.getClass().isArray();\n+    }\n+}\n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n     }\n \n     public boolean matches(Object actual) {\n-        if (this.wanted == null) {\n-            return actual == null;\n-        }\n-        return wanted.equals(actual);\n+        return Equality.areEqual(this.wanted, actual);\n     }\n \n     public void describeTo(Description description) {\n--- /dev/null\n+++ b/test/org/mockito/internal/matchers/EqualityTest.java\n+package org.mockito.internal.matchers;\n+\n+import org.mockitoutil.TestBase;\n+import org.junit.Test;\n+import static org.mockito.internal.matchers.Equality.areEqual;\n+\n+public class EqualityTest extends TestBase {\n+    \n+    @Test\n+    public void shouldKnowIfObjectsAreEqual() throws Exception {\n+        int[] arr = new int[] {1, 2};\n+        assertTrue(areEqual(arr, arr));\n+        assertTrue(areEqual(new int[] {1, 2}, new int[] {1, 2}));\n+        assertTrue(areEqual(new Double[] {1.0}, new Double[] {1.0}));\n+        assertTrue(areEqual(new String[0], new String[0]));\n+        assertTrue(areEqual(new Object[10], new Object[10]));\n+        assertTrue(areEqual(new int[] {1}, new Integer[] {1}));\n+        assertTrue(areEqual(new Object[] {\"1\"}, new String[] {\"1\"}));\n+\n+        assertFalse(areEqual(new Object[9], new Object[10]));\n+        assertFalse(areEqual(new int[] {1, 2}, new int[] {1}));\n+        assertFalse(areEqual(new int[] {1}, new double[] {1.0}));\n+    }\n+}\n--- a/test/org/mockito/internal/matchers/EqualsTest.java\n+++ b/test/org/mockito/internal/matchers/EqualsTest.java\n \n \n public class EqualsTest extends TestBase {\n-    \n+\n+    @Test\n     public void shouldBeEqual() {\n         assertEquals(new Equals(null), new Equals(null));\n         assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));\n             fail();\n         } catch (UnsupportedOperationException expected) {\n         }\n+    }\n+\n+    @Test\n+    public void shouldArraysBeEqual() {\n+        assertTrue(new Equals(new int[] {1, 2}).matches(new int[] {1, 2}));\n+        assertFalse(new Equals(new Object[] {\"1\"}).matches(new Object[] {\"1.0\"}));\n     }\n     \n     @Test\n         //then\n         assertFalse(equals.typeMatches(null));\n     }\n-}\n+}\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n             assertContains(\"oneArray(null)\", e.getMessage());\n         }\n     }\n+\n+    @Test\n+    public void shouldUseSmartEqualsForArrays() throws Exception {\n+        //issue 143\n+        mock.arrayMethod(new String[] {\"one\"});\n+        verify(mock).arrayMethod(eq(new String[] {\"one\"}));\n+        verify(mock).arrayMethod(new String[] {\"one\"});\n+    }\n+\n+    @Test\n+    public void shouldUseSmartEqualsForPrimitiveArrays() throws Exception {\n+        //issue 143\n+        mock.objectArgMethod(new int[] {1, 2});\n+        verify(mock).objectArgMethod(eq(new int[] {1, 2}));\n+        verify(mock).objectArgMethod(new int[] {1, 2});\n+    }\n     \n     @Test(expected=ArgumentsAreDifferent.class)\n     public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments() {        ", "timestamp": 1257891048, "metainfo": ""}