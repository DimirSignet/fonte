{"sha": "5fce176e6ffff16abe3eefad2eb71833c6b0401d", "log": "Refactored to make things simpler  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401421", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n \n import net.sf.cglib.proxy.MethodProxy;\n \n-import org.mockito.ReturnValues;\n import org.mockito.internal.creation.MockAwareInterceptor;\n+import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.util.MockName;\n-import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n     private final MatchersBinder matchersBinder;\n     private final MockingProgress mockingProgress;\n     private final MockName mockName;\n-    private final ReturnValues returnValues;\n+    private final MockSettingsImpl mockSettings;\n \n-    private T instance;\n-\n-    public MockHandler(MockName mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder, ReturnValues returnValues) {\n+    public MockHandler(MockName mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder, MockSettingsImpl mockSettings) {\n         this.mockName = mockName;\n         this.mockingProgress = mockingProgress;\n         this.matchersBinder = matchersBinder;\n-        this.returnValues = returnValues;\n+        this.mockSettings = mockSettings;\n         this.mockitoStubber = new MockitoStubber(mockingProgress);\n         this.registeredInvocations = new RegisteredInvocations();\n     }\n     \n+    public MockHandler(MockHandler<T> oldMockHandler) {\n+        this(oldMockHandler.mockName, oldMockHandler.mockingProgress, oldMockHandler.matchersBinder, oldMockHandler.mockSettings);\n+    }\n+\n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n         if (mockitoStubber.hasAnswersForStubbing()) {\n             //stubbing voids with stubVoid() or doAnswer() style\n         if (answer != null) {\n             mockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);\n             return answer.answer(invocation);\n-        } else if (new MockUtil().isMock(instance)) {\n-            return returnValues.valueFor(invocation);\n+        } else if (mockSettings.isSpy() == false) {\n+            return mockSettings.getReturnValues().valueFor(invocation);\n         } else {\n             Object ret = methodProxy.invokeSuper(proxy, args);\n             //redo setting invocation for potential stubbing in case of partial mocks / spies.\n         return new VoidMethodStubbableImpl<T>(mock, mockitoStubber);\n     }\n \n-    public void setInstance(T instance) {\n-        this.instance = instance;\n-    }\n-\n     public List<Invocation> getRegisteredInvocations() {\n         return registeredInvocations.getAll();\n     }\n         mockitoStubber.setAnswersForStubbing(answers);\n     }\n \n-    public ReturnValues getReturnValues() {\n-        return returnValues;\n+    public MockSettingsImpl getMockSettings() {\n+        return mockSettings;\n     }\n }\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n     public T getDelegate() {\n         return delegate;\n     }\n-\n-    public void setInstance(Object instance) {\n-        delegate.setInstance(instance);\n-    }\n }\n--- a/src/org/mockito/internal/creation/MockAwareInterceptor.java\n+++ b/src/org/mockito/internal/creation/MockAwareInterceptor.java\n public interface MockAwareInterceptor<T> extends MethodInterceptor {\n \n     Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable;\n-    \n-    void setInstance(T mock);\n+\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n         this.spiedInstance = spiedInstance;\n         return this;\n     }\n+\n+    public boolean isSpy() {\n+        return spiedInstance != null;\n+    }\n }\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\n         \n         MockName mockName = new MockName(settings.getMockName(), classToMock);\n-        MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings.getReturnValues());\n+        MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);\n         MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);\n         Class<?>[] ancillaryTypes = settings.getExtraInterfaces();\n         Class<?>[] interfaces = ancillaryTypes == null ? new Class<?>[0] : ancillaryTypes;\n             new LenientCopyTool().copyToMock(optionalInstance, mock);\n         }\n         \n-        //TODO: does it make sense to set instance?\n-        filter.setInstance(optionalInstance != null ? optionalInstance : mock);\n         return mock;\n     }\n \n     public <T> void resetMock(T mock, MockingProgress progress) {\n         MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockName(), progress, new MatchersBinder(), oldMockHandler.getReturnValues());\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n         MethodInterceptorFilter<MockHandler<T>> newFilter = new MethodInterceptorFilter<MockHandler<T>>(Object.class, newMockHandler);\n-        newFilter.setInstance(mock);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n         assertEquals(List.class, mockSettingsImpl.getExtraInterfaces()[0]);\n         assertEquals(Set.class, mockSettingsImpl.getExtraInterfaces()[1]);\n     }\n+    \n+    @Test\n+    public void shouldKnowIfIsASpy() throws Exception {\n+        //when\n+        mockSettingsImpl.spiedInstance(new Object());\n+        \n+        //then\n+        assertTrue(mockSettingsImpl.isSpy());\n+    }\n+    \n+    @Test\n+    public void shouldKnowNotBeASpyIfNoSpiedInstance() throws Exception {\n+        //when\n+        mockSettingsImpl.spiedInstance(null);\n+        \n+        //then\n+        assertFalse(mockSettingsImpl.isSpy());\n+    }\n }", "timestamp": 1242141802, "metainfo": ""}