{"sha": "7c59a00a5ca3908cb177cf79c20e5eb4c4008174", "log": "Refactored to make it easy for incoming feature (smarter printing verbose types for arguments)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401466", "commit": "\n--- a/src/org/mockito/internal/invocation/PrintSettings.java\n+++ b/src/org/mockito/internal/invocation/PrintSettings.java\n package org.mockito.internal.invocation;\n \n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.hamcrest.Matcher;\n+\n+@SuppressWarnings(\"unchecked\")\n public class PrintSettings {\n \n     private boolean multiline;\n     private boolean verboseArguments;\n+    private List<Matcher> verboseMatchers = new LinkedList<Matcher>();\n \n     public void setMultiline(boolean multiline) {\n         this.multiline = multiline;\n         return verboseArguments;\n     }\n \n-    public static PrintSettings verboseArgs() {\n+    public static PrintSettings verboseMatchers() {\n         PrintSettings settings = new PrintSettings();\n         settings.verboseArguments = true;\n         return settings;\n     }\n-}\n+\n+    public static PrintSettings verboseMatchers(Matcher verboselyPrinted) {\n+        PrintSettings settings = new PrintSettings();\n+        settings.verboseMatchers.add(verboselyPrinted);\n+        return settings;\n+    }\n+\n+    public boolean printsVerbosely(Matcher matcher) {\n+        if (isVerboseArguments()) {\n+            return true;\n+        }\n+        for (Matcher m : verboseMatchers) {\n+            if (m == matcher) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n--- a/src/org/mockito/internal/matchers/MatchersPrinter.java\n+++ b/src/org/mockito/internal/matchers/MatchersPrinter.java\n     }\n \n     private List<SelfDescribing> applyPrintSettings(List<Matcher> matchers, PrintSettings printSettings) {\n-        if (printSettings.isVerboseArguments()) {\n-            List<SelfDescribing> withPrintSettings = new LinkedList<SelfDescribing>();\n-            for (final Matcher matcher : matchers) {\n-                if (matcher instanceof HasVerboseVariant) {\n-                    withPrintSettings.add(((HasVerboseVariant) matcher).getVerboseVariant());\n-                } else {\n-                    withPrintSettings.add(matcher);\n-                }\n+        List<SelfDescribing> withPrintSettings = new LinkedList<SelfDescribing>();\n+        for (final Matcher matcher : matchers) {\n+            if (matcher instanceof HasVerboseVariant && printSettings.printsVerbosely(matcher)) {\n+                withPrintSettings.add(((HasVerboseVariant) matcher).getVerboseVariant());\n+            } else {\n+                withPrintSettings.add(matcher);\n             }\n-            return withPrintSettings;\n-        } else {\n-            return (List) matchers;\n         }\n+        return withPrintSettings;\n     }\n-\n-}\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/invocation/PrintSettingsTest.java\n+package org.mockito.internal.invocation;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.mockito.internal.matchers.Equals;\n+\n+public class PrintSettingsTest {\n+    \n+    @Test\n+    public void shouldConfigureToPrintVerboselyASpecificMatcher() {\n+        //given\n+        Equals toPrintVerbosely = new Equals(1);\n+        PrintSettings settings = PrintSettings.verboseMatchers(toPrintVerbosely);\n+        //when\n+        boolean printsVerbosely = settings.printsVerbosely(toPrintVerbosely);\n+        //then\n+        assertTrue(printsVerbosely);\n+    }\n+\n+    @Test\n+    public void shouldNotConfigureToPrintVerboselyMatcherThatIsNotTheSame() {\n+        //given\n+        PrintSettings settings = PrintSettings.verboseMatchers(new Equals(1));\n+        //when\n+        boolean printsVerbosely = settings.printsVerbosely(new Equals(1));\n+        //then\n+        assertFalse(printsVerbosely);\n+    }\n+}\n--- a/test/org/mockito/internal/matchers/EqualsTest.java\n+++ b/test/org/mockito/internal/matchers/EqualsTest.java\n \n public class EqualsTest extends TestBase {\n     \n-    @Test\n     public void shouldBeEqual() {\n         assertEquals(new Equals(null), new Equals(null));\n         assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));\n--- a/test/org/mockito/internal/matchers/MatchersPrinterTest.java\n+++ b/test/org/mockito/internal/matchers/MatchersPrinterTest.java\n     }\n \n     @Test\n-    public void shouldGetVerboseArguments() {\n-        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseArgs());\n-        assertEquals(\"((Long) 1, (Integer) 2);\", line);\n+    public void shouldPrintVerboselyOnlyMarkedMatchers() {\n+        //given\n+        Equals verboselyPrinted = new Equals(2);\n+        //when\n+        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), verboselyPrinted), PrintSettings.verboseMatchers(verboselyPrinted));\n+        //then\n+        assertEquals(\"(1, (Integer) 2);\", line);\n     }\n \n     @Test\n     public void shouldGetVerboseArgumentsInBlock() {\n-        String line = printer.getArgumentsBlock((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseArgs());\n+        String line = printer.getArgumentsBlock((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseMatchers());\n         assertEquals(\"(\\n    (Long) 1,\\n    (Integer) 2\\n);\", line);\n     }\n \n     @Test\n     public void shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose() {\n-        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), NotNull.NOT_NULL), PrintSettings.verboseArgs());\n+        String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), NotNull.NOT_NULL), PrintSettings.verboseMatchers());\n         assertEquals(\"((Long) 1, notNull());\", line);\n     }\n }", "timestamp": 1244233468, "metainfo": ""}