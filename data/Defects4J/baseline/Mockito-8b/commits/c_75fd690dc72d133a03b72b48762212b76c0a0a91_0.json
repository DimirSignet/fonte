{"sha": "75fd690dc72d133a03b72b48762212b76c0a0a91", "log": "Added a bit controversial feature (to be validated by users) Ordinary verification ('wanted but not invoked') now prints all invocations with this mock.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401344", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n import static org.mockito.exceptions.Pluralizer.*;\n import static org.mockito.internal.util.StringJoiner.*;\n+\n+import java.util.List;\n \n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n     }\n     \n     public void wantedButNotInvoked(PrintableInvocation wanted) {\n-        throw new WantedButNotInvoked(join(\n-                    \"Wanted but not invoked:\",\n-                    wanted.toString(),\n-                    new Location(),\n-                    \"\"\n-        ));\n+        throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));\n+    }\n+\n+    public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n+        String allInvocations;\n+        if (invocations.isEmpty()) {\n+            allInvocations = \"Actually, there were zero interactions with this mock.\\n\";\n+        } else {\n+            StringBuilder sb = new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");\n+            for (PrintableInvocation i : invocations) {\n+                 sb.append(i.getLocation());\n+                 sb.append(\"\\n\");\n+            }\n+            allInvocations = sb.toString();\n+        }\n+        \n+        String message = createWantedButNotInvokedMessage(wanted);\n+        throw new WantedButNotInvoked(message + allInvocations);\n+    }\n+\n+    private String createWantedButNotInvokedMessage(PrintableInvocation wanted) {\n+        return join(\n+                \"Wanted but not invoked:\",\n+                wanted.toString(),\n+                new Location(),\n+                \"\"\n+        );\n     }\n     \n     public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n         \n         if (actualInvocations.isEmpty()) {\n             Invocation similar = finder.findSimilarInvocation(invocations, wanted);\n-            reportMissingInvocationError(wanted, similar);\n-        }\n-    }\n-\n-    private void reportMissingInvocationError(InvocationMatcher wanted, Invocation similar) {\n-        if (similar != null) {\n-            SyncingPrinter syncingPrinter = new SyncingPrinter(wanted, similar);\n-            reporter.argumentsAreDifferent(syncingPrinter.getWanted(), syncingPrinter.getActual(), similar.getLocation());\n-        } else {\n-            reporter.wantedButNotInvoked(wanted);\n+            if (similar != null) {\n+                SyncingPrinter syncingPrinter = new SyncingPrinter(wanted, similar);\n+                reporter.argumentsAreDifferent(syncingPrinter.getWanted(), syncingPrinter.getActual(), similar.getLocation());\n+            } else {\n+                reporter.wantedButNotInvoked(wanted, invocations);\n+            }\n         }\n     }\n }\n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java\n     \n     @Test\n     public void shouldReportWantedButNotInvoked() {\n+        //given          \n         assertTrue(finderStub.actualToReturn.isEmpty());\n         finderStub.similarToReturn = null;\n         \n+        //when\n         checker.check(invocations, wanted);\n         \n+        //then\n         assertEquals(wanted, reporterStub.wanted);\n         assertNull(reporterStub.actualLocation);\n     }\n         private Object wanted;\n         private String actual;\n         private Location actualLocation;\n-        @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n+        \n+        @Override\n+        public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n             this.wanted = wanted;\n         }\n         \n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n \n     @Test\n     public void shouldSayWantedButNotInvoked() {\n-        mock.simpleMethod();\n         verify(mock).otherMethod();\n     }\n+    \n+    @Test\n+    public void shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails() {\n+        mock.otherMethod();\n+        mock.booleanObjectReturningMethod();\n+        \n+        verify(mock).simpleMethod();\n+    }    \n     \n     @Test\n     public void shouldShowActualAndExpected() {\n         doReturn(\"asdf\");\n         \n         verify(mock).simpleMethod();\n-    }    \n+    }   \n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n             assertThat(e, messageContains(\"iHavefunkyName.simpleMethod(10)\"));\n         }\n     }\n+    \n+    @Test\n+    public void shouldPrintInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {\n+        mock.otherMethod();\n+        mock.booleanReturningMethod();\n+        \n+        try {\n+            verify(mock).simpleMethod();\n+            fail();\n+        } catch (WantedButNotInvoked e) {\n+//            assertContains(\"\")\n+        }\n+    }\n \n     @Mock private IMethods veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock; \n     \n--- /dev/null\n+++ b/test/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.verification;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class OrdinaryVerificationPrintsAllInteractionsTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+    @Mock private IMethods mockTwo;\n+\n+    @Test\n+    public void shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {\n+        firstInteraction();\n+        secondInteraction();\n+        \n+        try {\n+            verify(mock).simpleMethod();\n+            fail();\n+        } catch (WantedButNotInvoked e) {\n+            assertContains(\"However, there were other interactions with this mock\", e.getMessage());\n+            assertContains(\"firstInteraction(\", e.getMessage());\n+            assertContains(\"secondInteraction(\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotShowAllInteractionsOnDifferentMock() throws Exception {\n+        differentMockInteraction();\n+        firstInteraction();\n+        \n+        try {\n+            verify(mock).simpleMethod();\n+            fail();\n+        } catch (WantedButNotInvoked e) {\n+            assertContains(\"firstInteraction(\", e.getMessage());\n+            assertNotContains(\"differentMockInteraction(\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions() throws Exception {\n+        try {\n+            verify(mock).simpleMethod();\n+            fail();\n+        } catch (WantedButNotInvoked e) {\n+            assertContains(\"there were zero interactions with this mock.\", e.getMessage());\n+        }\n+    }\n+\n+    private void differentMockInteraction() {\n+        mockTwo.simpleMethod();\n+    }\n+\n+    private void secondInteraction() {\n+        mock.booleanReturningMethod();\n+    }\n+\n+    private void firstInteraction() {\n+        mock.otherMethod();\n+    }\n+}\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n                 \"\\n\"\n                 , string.contains(sub));\n     }\n+    \n+    public static void assertNotContains(String sub, String string) {\n+        assertFalse(\"\\n\" +\n+                \"This substing:\" +\n+                sub +\n+                \"\\n\" +\n+                \"should NOT be inside of:\" +\n+                string +\n+                \"\\n\"\n+                , string.contains(sub));\n+    }\n }", "timestamp": 1240167126, "metainfo": ""}