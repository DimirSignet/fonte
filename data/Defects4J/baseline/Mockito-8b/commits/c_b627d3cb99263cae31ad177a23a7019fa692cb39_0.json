{"sha": "b627d3cb99263cae31ad177a23a7019fa692cb39", "log": "-killed/refactored some tests  --HG-- rename : doc/mockito => doc/mockito.txt rename : test/org/mockito/MockitoProvidesObjectMethodsTest.java => test/org/mockito/ReplacingObjectMethodsTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4010", "commit": "\n--- a/src/org/easymock/internal/ObjectMethodsFilter.java\n+++ b/src/org/easymock/internal/ObjectMethodsFilter.java\n     }\n \n     private String mockToString(Object proxy) {\n-        return (name != null) ? name : \"EasyMock for \" + mockType(proxy);\n+        return (name != null) ? name : \"Mock for \" + mockType(proxy);\n     }\n \n     //TODO unit test it or check if tested properly\n     private String mockType(Object proxy) {\n \t\tif (proxy.getClass().getInterfaces().length == 2) {\n-\t\t\treturn proxy.getClass().getInterfaces()[0].toString();\n+\t\t\treturn proxy.getClass().getInterfaces()[0].getSimpleName();\n \t\t} else {\n-\t\t\treturn proxy.getClass().getSuperclass().toString();\n+\t\t\treturn proxy.getClass().getSuperclass().getSimpleName();\n \t\t}\n \t}\n \n--- /dev/null\n+++ b/test/org/mockito/ReplacingObjectMethodsTest.java\n+/*\n+ * Copyright (c) 2007 Szczepan Faber \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+public class ReplacingObjectMethodsTest {\n+\n+    /**\n+     * Class overwrites object methods but implementation from Mockito will be called anyway.\n+     */\n+    public static class ClassToMockWithOverride {\n+\n+        public boolean equals(Object o) {\n+            return false;\n+        }\n+\n+        public int hashCode() {\n+            return -1;\n+        }\n+\n+        public String toString() {\n+            return \"super\";\n+        }\n+    }\n+    \n+    public static class ClassWithAnotherOverride extends ClassToMockWithOverride {\n+        \n+        public String toString() {\n+            return \"super.super\";\n+        }\n+    }\n+\n+    @Test \n+    public void testShouldReplaceObjectMethods() {\n+        Object mock = Mockito.mock(ClassToMockWithOverride.class);\n+        assertThat(mock, equalTo(mock));\n+        assertThat(mock.hashCode(), not(equalTo(-1)));\n+        assertThat(mock.toString(), not(equalTo(\"super\")));\n+    }\n+    \n+    @Test \n+    public void testShouldReplaceObjectMethodsWhenOverridden() {\n+        Object mock = Mockito.mock(ClassToMockWithOverride.class);\n+        assertThat(mock, equalTo(mock));\n+        assertThat(mock.hashCode(), not(equalTo(-1)));\n+        assertThat(mock.toString(), not(equalTo(\"super\")));\n+        assertThat(mock.toString(), not(equalTo(\"super.super\")));\n+    }\n+    \n+    private interface DummyInterface {}\n+    private class DummyClass {}\n+\n+    @Test\n+    public void shouldProvideMockyImplementationOfToString() {\n+        assertEquals(\"Mock for DummyClass\", Mockito.mock(DummyClass.class).toString());\n+        assertEquals(\"Mock for DummyInterface\", Mockito.mock(DummyInterface.class).toString());\n+    }\n+}", "timestamp": 1195159611, "metainfo": ""}