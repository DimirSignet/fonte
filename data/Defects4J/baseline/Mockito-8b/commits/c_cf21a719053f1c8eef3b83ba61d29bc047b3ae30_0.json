{"sha": "cf21a719053f1c8eef3b83ba61d29bc047b3ae30", "log": "Final touches to feature 171. Fixed issue 171. verifyNoMoreInteractions() prints entire scenario to the user nowdays if aplickable.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401996", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 new Location(),\n                 \"But found this interaction:\",\n                 undesired.getLocation(),\n-                \"***\",\n-                \"For your reference, here is the list of all invocations ([?] - means unverified).\",\n                 scenario,\n                 \"\"\n         ));\n--- a/src/org/mockito/internal/exceptions/util/ScenarioPrinter.java\n+++ b/src/org/mockito/internal/exceptions/util/ScenarioPrinter.java\n public class ScenarioPrinter {\n \n     public String print(List<VerificationAwareInvocation> invocations) {\n-        StringBuilder sb = new StringBuilder();\n+        if (invocations.size() == 1) {\n+            return \"Actually, above is the only interaction with this mock.\";\n+        }\n+        StringBuilder sb = new StringBuilder(\n+                \"***\\n\" +\n+                \"For your reference, here is the list of all invocations ([?] - means unverified).\\n\");\n+        \n         int counter = 0;\n         for (VerificationAwareInvocation i : invocations) {\n             sb.append(++counter + \". \");\n--- a/test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java\n+++ b/test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java\n         //then\n         assertContains(\"1. -> at\", out);\n         assertContains(\"2. [?]-> at\", out);\n-        //TODO add more tests and scenarios that print decent stuff when nothing is verified or there are no verifications at all\n+    }\n+    \n+    @Test\n+    public void shouldNotPrintInvocationsWhenSingleUnwanted() {\n+        //given\n+        Invocation unverified = new InvocationBuilder().differentMethod().toInvocation();\n+        \n+        //when\n+        String out = sp.print((List) asList(unverified));\n+        \n+        //then\n+        assertContains(\"Actually, above is the only interaction with this mock.\", out);\n     }\n }\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n     }\n     \n     @Test\n+    public void shouldNotContainAllInvocationsWhenSingleUnwantedFound() throws Exception {\n+        mock.add(1);\n+        \n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (NoInteractionsWanted e) {\n+            assertNotContains(\"list of all invocations\", e.getMessage());\n+        }\n+    }    \n+    \n+    @Test\n     public void shouldVerifyOneMockButFailOnOther() throws Exception {\n         List list = mock(List.class);\n         Map map = mock(Map.class);", "timestamp": 1274733103, "metainfo": ""}