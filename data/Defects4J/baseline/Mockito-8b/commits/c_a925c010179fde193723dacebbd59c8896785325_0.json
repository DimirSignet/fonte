{"sha": "a925c010179fde193723dacebbd59c8896785325", "log": "got rid of MockitoState singleton  --HG-- rename : src/org/mockito/internal/MockitoState.java => src/org/mockito/internal/MockitoStateImpl.java rename : test/org/mockito/util/RequiresValidState.java => test/org/mockito/RequiresValidState.java rename : test/org/mockito/internal/StateResetter.java => test/org/mockito/StateResetter.java rename : test/org/mockito/internal/MockitoStateTest.java => test/org/mockito/internal/MockitoStateImplTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40157", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n-\n+    \n+    static MockitoState mockitoState = new ThreadSafeMockitoState();\n+    \n     public static VerifyingMode atLeastOnce() {\n         return VerifyingMode.atLeastOnce();\n     }\n     \n     public static <T> T mock(Class<T> classToMock) {\n         MockFactory<T> proxyFactory = new MockFactory<T>();\n-        MockControl<T> mockControl = new MockControl<T>();\n+        MockControl<T> mockControl = new MockControl<T>(mockitoState);\n         return proxyFactory.createMock(classToMock, new ObjectMethodsFilter<MockControl>(\n                 classToMock, mockControl));\n     }\n \n     public static <T> MockitoExpectation<T> stub(T methodCallToStub) {\n-        MockitoState.instance().stubbingStarted();\n+        mockitoState.stubbingStarted();\n         \n-        MockitoExpectation controlToStub = MockitoState.instance().pullControlToBeStubbed();\n+        MockitoExpectation controlToStub = mockitoState.pullControlToBeStubbed();\n         if (controlToStub == null) {\n             Exceptions.missingMethodInvocation();\n         }\n     \n     public static <T> T verify(T mock, VerifyingMode mode) {\n         MockUtil.validateMock(mock);\n-        MockitoState.instance().verifyingStarted(mode);\n+        mockitoState.verifyingStarted(mode);\n         return mock;\n     }\n \n \t */\n \tpublic static void verifyNoMoreInteractions(Object ... mocks) {\n \t    assertMocksNotEmpty(mocks);\n-\t    MockitoState.instance().validateState();\n+\t    mockitoState.validateState();\n \t    for (Object mock : mocks) {\n             MockUtil.getControl(mock).verifyNoMoreInteractions();\n         }\n \n     public static void verifyZeroInteractions(Object ... mocks) {\n         assertMocksNotEmpty(mocks);\n-        MockitoState.instance().validateState();\n+        mockitoState.validateState();\n         for (Object mock : mocks) {\n             MockUtil.getControl(mock).verifyZeroInteractions();\n         }\n     }\n     \n     public static <T> VoidMethodExpectation<T> stubVoid(T mock) {\n-        MockitoState.instance().stubbingStarted();\n-        return MockUtil.getControl(mock);\n+        MockControl<T> control = MockUtil.getControl(mock);\n+        //TODO add test\n+        mockitoState.stubbingStarted();\n+        return control;\n     }\n \n     public static Strictly createStrictOrderVerifier(Object ... mocks) {\n--- a/src/org/mockito/internal/InvocationMatcherFactory.java\n+++ b/src/org/mockito/internal/InvocationMatcherFactory.java\n \n public class InvocationMatcherFactory {\n \n+    private final MockitoState mockitoState;\n+\n+    public InvocationMatcherFactory(MockitoState mockitoState) {\n+        this.mockitoState = mockitoState;\n+    }\n+\n     public InvocationMatcher create(Object proxy, Method method, Object[] args) {\n-        Invocation invocation = new Invocation(proxy, method, args, MockitoState.instance().nextSequenceNumber());\n+        Invocation invocation = new Invocation(proxy, method, args, mockitoState.nextSequenceNumber());\n         \n         List<IArgumentMatcher> lastMatchers = LastArguments.instance().pullMatchers();\n         validateMatchers(invocation, lastMatchers);\n--- a/src/org/mockito/internal/MockControl.java\n+++ b/src/org/mockito/internal/MockControl.java\n public class MockControl<T> implements MockAwareInvocationHandler<T>, MockitoExpectation<T>, VoidMethodExpectation<T>, MethodSelector<T> {\n \n     private final MockitoBehavior<T> behavior = new MockitoBehavior<T>();\n-    private final Stubber stubber = new Stubber();\n-    private final InvocationMatcherFactory invocationMatcherFactory = new InvocationMatcherFactory();\n+    private final Stubber stubber;\n+    private final InvocationMatcherFactory invocationMatcherFactory;\n+    private final MockitoState mockitoState;\n     \n+    public MockControl(MockitoState mockitoState) {\n+        this.mockitoState = mockitoState;\n+        invocationMatcherFactory = new InvocationMatcherFactory(mockitoState);\n+        stubber = new Stubber(mockitoState);\n+    }\n+\n     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n         if (stubber.hasThrowableForVoidMethod()) {\n             InvocationMatcher invocationMatcher = invocationMatcherFactory.create(proxy, method, args);\n             return null;\n         }\n         \n-        VerifyingMode verifyingMode = MockitoState.instance().pullVerifyingMode();\n-        MockitoState.instance().validateState();\n+        VerifyingMode verifyingMode = mockitoState.pullVerifyingMode();\n+        mockitoState.validateState();\n         \n         InvocationMatcher invocationWithMatchers = invocationMatcherFactory.create(proxy, method, args);\n         \n         stubber.setInvocationForPotentialStubbing(invocationWithMatchers);\n         behavior.addInvocation(invocationWithMatchers);\n \n-        MockitoState.instance().reportControlForStubbing(this);\n+        mockitoState.reportControlForStubbing(this);\n         \n         return stubber.resultFor(invocationWithMatchers.getInvocation());\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/MockitoStateImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal;\n+\n+import org.mockito.exceptions.Exceptions;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class MockitoStateImpl implements MockitoState {\n+    \n+    private MockControl lastControl;\n+    private VerifyingMode verifyingMode;\n+    private int invocationSequenceNumber = 1;\n+    private boolean stubbingInProgress = false;\n+\n+    public void reportControlForStubbing(MockControl mockControl) {\n+        lastControl = mockControl;\n+    }\n+\n+    public MockitoExpectation pullControlToBeStubbed() {\n+        MockControl temp = lastControl;\n+        lastControl = null;\n+        return temp;\n+    }\n+    \n+    public void verifyingStarted(VerifyingMode verify) {\n+        validateState();\n+        verifyingMode = verify;\n+    }\n+\n+    public VerifyingMode pullVerifyingMode() {\n+        VerifyingMode temp = verifyingMode;\n+        verifyingMode = null;\n+        return temp;\n+    }\n+\n+    public int nextSequenceNumber() {\n+        return invocationSequenceNumber++;\n+    }\n+\n+    public void stubbingStarted() {\n+        validateState();\n+        stubbingInProgress = true;\n+    }\n+\n+    public void validateState() {\n+        if (verifyingMode != null) {\n+            verifyingMode = null;\n+            Exceptions.unfinishedVerificationException();\n+        }\n+        \n+        if (stubbingInProgress) {\n+            stubbingInProgress = false;\n+            Exceptions.unfinishedStubbing();\n+        }\n+    }\n+\n+    public void stubbingCompleted() {\n+        stubbingInProgress = false;\n+    }\n+    \n+    public String toString() {\n+        return  \"lastControl: \" + lastControl + \n+        \", verifyingMode: \" + verifyingMode +\n+        \", invocationSequenceNumber: \" + invocationSequenceNumber +\n+        \", stubbingInProgress: \" + stubbingInProgress;\n+    }\n+\n+    public void reset() {\n+        stubbingInProgress = false;\n+        verifyingMode = null;\n+        invocationSequenceNumber = 1;\n+    }\n+}\n--- a/src/org/mockito/internal/Stubber.java\n+++ b/src/org/mockito/internal/Stubber.java\n     private InvocationMatcher invocationForStubbing;\n     private LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();\n     private Throwable throwableForVoidMethod;\n+    private final MockitoState mockitoState;\n     \n+    public Stubber(MockitoState mockitoState) {\n+        this.mockitoState = mockitoState;\n+    }\n+\n     public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\n         this.invocationForStubbing = invocation;\n     }\n     \n     public void addReturnValue(Object value) {\n-        MockitoState.instance().stubbingCompleted();\n+        mockitoState.stubbingCompleted();\n         addResult(Result.createReturnResult(value));\n     }\n     \n     public void addThrowable(Throwable throwable) {\n-        MockitoState.instance().stubbingCompleted();\n+        mockitoState.stubbingCompleted();\n         validateThrowable(throwable);\n         addResult(Result.createThrowResult(throwable));\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/ThreadSafeMockitoState.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal;\n+\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ThreadSafeMockitoState implements MockitoState {\n+    \n+    private static ThreadLocal<MockitoState> mockitoState = new ThreadLocal<MockitoState>();\n+\n+    static MockitoState get() {\n+        if (mockitoState.get() == null) {\n+            mockitoState.set(new MockitoStateImpl());\n+        }\n+        return mockitoState.get();\n+    }\n+    \n+    public void reportControlForStubbing(MockControl mockControl) {\n+        get().reportControlForStubbing(mockControl);\n+    }\n+\n+    public MockitoExpectation pullControlToBeStubbed() {\n+        return get().pullControlToBeStubbed();\n+    }\n+    \n+    public void verifyingStarted(VerifyingMode verify) {\n+        get().verifyingStarted(verify);\n+    }\n+\n+    public VerifyingMode pullVerifyingMode() {\n+        return get().pullVerifyingMode();\n+    }\n+\n+    public int nextSequenceNumber() {\n+        return get().nextSequenceNumber();\n+    }\n+\n+    public void stubbingStarted() {\n+        get().stubbingStarted();\n+    }\n+\n+    public void validateState() {\n+        get().validateState();\n+    }\n+\n+    public void stubbingCompleted() {\n+        get().stubbingCompleted();\n+    }\n+    \n+    public String toString() {\n+        return get().toString();\n+    }\n+\n+    public void reset() {\n+        get().reset();\n+    }\n+}\n--- a/test/org/mockito/InvocationTest.java\n+++ b/test/org/mockito/InvocationTest.java\n \n import org.junit.*;\n import org.mockito.internal.*;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n--- a/test/org/mockito/MockUtilTest.java\n+++ b/test/org/mockito/MockUtilTest.java\n import org.junit.Test;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.parents.MockitoException;\n-import org.mockito.util.RequiresValidState;\n \n public class MockUtilTest extends RequiresValidState {\n \n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n \n import java.util.List;\n \n-import org.junit.*;\n+import org.junit.Test;\n import org.mockito.exceptions.misusing.NotAMockException;\n-import org.mockito.internal.*;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoTest extends RequiresValidState {\n \n-    @Before @After\n-    public void setup() {\n-        StateResetter.reset();\n-    }\n-    \n     @Test\n     public void shouldRemoveStubbedControlFromStateWhenStubbing() {\n         List mock = Mockito.mock(List.class);\n-//        System.out.println(\"[\" + Thread.currentThread().getId() + \"] - stubbing...\");\n         Mockito.stub(mock.add(\"test\")).andReturn(true);\n         \n-        assertNull(MockitoState.instance().pullControlToBeStubbed());\n+        assertNull(Mockito.mockitoState.pullControlToBeStubbed());\n     }\n     \n     @Test(expected=NotAMockException.class)\n--- /dev/null\n+++ b/test/org/mockito/RequiresValidState.java\n+package org.mockito;\n+\n+import org.junit.Before;\n+\n+/**\n+ * the easiest way to make sure that tests clean up invalid state is to require\n+ * valid state for all tests\n+ */\n+public class RequiresValidState {\n+\n+    @Before\n+    public void requiresValidState() {\n+        Mockito.mockitoState.validateState();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/StateResetter.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+public class StateResetter {\n+    \n+    public static void reset() {\n+        Mockito.mockitoState.reset();\n+    }\n+}\n--- a/test/org/mockito/exceptions/ExceptionsTest.java\n+++ b/test/org/mockito/exceptions/ExceptionsTest.java\n package org.mockito.exceptions;\n \n import org.junit.Test;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.TooLittleActualInvocationsError;\n-import org.mockito.util.RequiresValidState;\n \n \n public class ExceptionsTest extends RequiresValidState {\n--- a/test/org/mockito/exceptions/parents/MockitoAssertionErrorTest.java\n+++ b/test/org/mockito/exceptions/parents/MockitoAssertionErrorTest.java\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n public class MockitoAssertionErrorTest extends RequiresValidState {\n \n--- a/test/org/mockito/exceptions/parents/MockitoExceptionTest.java\n+++ b/test/org/mockito/exceptions/parents/MockitoExceptionTest.java\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n public class MockitoExceptionTest extends RequiresValidState {\n \n--- a/test/org/mockito/exceptions/parents/StackTraceRemoverTest.java\n+++ b/test/org/mockito/exceptions/parents/StackTraceRemoverTest.java\n import java.util.*;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n public class StackTraceRemoverTest extends RequiresValidState {\n \n--- a/test/org/mockito/internal/CglibTest.java\n+++ b/test/org/mockito/internal/CglibTest.java\n import net.sf.cglib.proxy.*;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n /**\n  * This test case is used to make sure that the way cglib is used is providing the expected behavior\n--- a/test/org/mockito/internal/EmptyReturnValuesTest.java\n+++ b/test/org/mockito/internal/EmptyReturnValuesTest.java\n import java.util.*;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n public class EmptyReturnValuesTest extends RequiresValidState {\n     \n--- a/test/org/mockito/internal/InvocationChunkTest.java\n+++ b/test/org/mockito/internal/InvocationChunkTest.java\n import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n public class InvocationChunkTest extends RequiresValidState {\n \n--- a/test/org/mockito/internal/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/InvocationMatcherTest.java\n import java.util.*;\n \n import org.junit.Test;\n+import org.mockito.RequiresValidState;\n import org.mockito.internal.matchers.*;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationMatcherTest extends RequiresValidState {\n--- a/test/org/mockito/internal/MockControlTest.java\n+++ b/test/org/mockito/internal/MockControlTest.java\n import static org.junit.Assert.*;\n \n import org.junit.*;\n+import org.mockito.*;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class MockControlTest extends RequiresValidState {\n     \n-    @Before\n-    @After\n-    public void resetState() {\n-        StateResetter.reset();\n-    }\n-    \n     @Test\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n         LastArguments.instance().reportMatcher(new Equals(\"test\"));\n-        MockitoState.instance().verifyingStarted(VerifyingMode.atLeastOnce());\n         \n-        MockControl control = new MockControl();\n+        MockitoStateImpl state = new MockitoStateImpl();\n+        state.verifyingStarted(VerifyingMode.atLeastOnce());\n+        MockControl control = new MockControl(state);\n+        \n+        //TODO fix this test make it stub invocation factory with thrown exception\n \n         try {\n             control.invoke(null, String.class.getDeclaredMethod(\"toString\"), new Object[]{});\n             fail();\n         } catch (InvalidUseOfMatchersException e) {}\n         \n-        assertNull(MockitoState.instance().pullVerifyingMode());\n+        assertNull(state.pullVerifyingMode());\n     }\n-}\n+}\n--- a/test/org/mockito/internal/MockFactoryTest.java\n+++ b/test/org/mockito/internal/MockFactoryTest.java\n import net.sf.cglib.proxy.Factory;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class MockFactoryTest extends RequiresValidState {\n--- a/test/org/mockito/internal/MockitoBehaviorTest.java\n+++ b/test/org/mockito/internal/MockitoBehaviorTest.java\n import java.util.Arrays;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoBehaviorTest extends RequiresValidState {\n--- /dev/null\n+++ b/test/org/mockito/internal/MockitoStateImplTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.*;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.parents.MockitoException;\n+\n+public class MockitoStateImplTest extends RequiresValidState {\n+\n+    private MockitoState mockitoState;\n+\n+    @Before\n+    public void setup() {\n+        mockitoState = new MockitoStateImpl();\n+    }\n+    \n+    @Test\n+    public void shouldSwitchVerifyingMode() throws Exception {\n+        assertNull(mockitoState.pullVerifyingMode());\n+        \n+        VerifyingMode mode = VerifyingMode.times(19);\n+        \n+        mockitoState.verifyingStarted(mode);\n+        \n+        assertSame(mode, mockitoState.pullVerifyingMode());\n+    }\n+    \n+    @Test\n+    public void shouldCheckIfVerificationWasFinished() throws Exception {\n+        mockitoState.verifyingStarted(VerifyingMode.atLeastOnce());\n+        try {\n+            mockitoState.verifyingStarted(VerifyingMode.atLeastOnce());\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+}\n--- a/test/org/mockito/internal/RegisteredInvocationsTest.java\n+++ b/test/org/mockito/internal/RegisteredInvocationsTest.java\n import java.util.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.parents.HasStackTrace;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class RegisteredInvocationsTest extends RequiresValidState {\n--- a/test/org/mockito/internal/StubberTest.java\n+++ b/test/org/mockito/internal/StubberTest.java\n import static org.junit.Assert.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.parents.MockitoException;\n-import org.mockito.util.RequiresValidState;\n \n public class StubberTest extends RequiresValidState{\n \n-    private Stubber s;\n+    private Stubber stubber;\n+    private MockitoStateImpl state;\n     \n     @Before\n     public void setup() {\n-        s = new Stubber();\n-        s.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n-        MockitoState.instance().stubbingStarted();\n+        state = new MockitoStateImpl();\n+        state.stubbingStarted();\n+        \n+        stubber = new Stubber(state);\n+        stubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n     }\n \n     @Test\n     public void shouldFinishStubbingBeforeValidatingThrowable() throws Exception {\n         try {\n-            s.addThrowable(new Exception());\n+            stubber.addThrowable(new Exception());\n             fail();\n         } catch (MockitoException e) {\n-            MockitoState.instance().validateState();\n+            state.validateState();\n         }\n     }\n     \n     @Test\n     public void shouldFinishStubbingOnAddingReturnValue() throws Exception {\n-        s.addReturnValue(\"test\");\n-        MockitoState.instance().validateState();\n+        stubber.addReturnValue(\"test\");\n+        state.validateState();\n     }\n     \n     @Test\n     public void shouldGetResultsForMethods() throws Throwable {\n         Invocation simpleMethod = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n-        s.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n-        s.addReturnValue(\"simpleMethod\");\n+        stubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n+        stubber.addReturnValue(\"simpleMethod\");\n         \n         Invocation differentMethod = new InvocationBuilder().method(\"differentMethod\").toInvocation();\n-        s.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n-        s.addThrowable(new IllegalStateException());\n+        stubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n+        stubber.addThrowable(new IllegalStateException());\n         \n-        assertEquals(\"simpleMethod\", s.resultFor(simpleMethod));\n+        assertEquals(\"simpleMethod\", stubber.resultFor(simpleMethod));\n         \n         try {\n-            s.resultFor(differentMethod);\n+            stubber.resultFor(differentMethod);\n             fail();\n         } catch (IllegalStateException e) {}\n     }\n     @Test\n     public void shouldGetEmptyResultIfMethodsDontMatch() throws Throwable {\n         Invocation simpleMethod = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n-        s.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n-        s.addReturnValue(\"simpleMethod\");\n+        stubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n+        stubber.addReturnValue(\"simpleMethod\");\n         \n         Invocation differentMethod = new InvocationBuilder().method(\"differentMethod\").toInvocation();\n         \n-        assertEquals(null, s.resultFor(differentMethod));\n+        assertEquals(null, stubber.resultFor(differentMethod));\n     }\n }\n--- a/test/org/mockito/internal/VerifyingModeTest.java\n+++ b/test/org/mockito/internal/VerifyingModeTest.java\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.parents.MockitoException;\n-import org.mockito.util.RequiresValidState;\n \n public class VerifyingModeTest extends RequiresValidState {\n \n--- a/test/org/mockito/internal/matchers/EqualsTest.java\n+++ b/test/org/mockito/internal/matchers/EqualsTest.java\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n \n public class EqualsTest extends RequiresValidState {\n--- a/test/org/mockitousage/InvalidStateDetectionTest.java\n+++ b/test/org/mockitousage/InvalidStateDetectionTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n+import org.mockito.*;\n import org.mockito.exceptions.misusing.*;\n-import org.mockito.internal.StateResetter;\n-import org.mockito.util.RequiresValidState;\n \n /**\n  * invalid state happens if:\n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n-import org.mockito.Strictly;\n+import org.mockito.*;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.parents.MockitoException;\n-import org.mockito.internal.StateResetter;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageTest extends RequiresValidState {\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.exceptions.parents.*;\n import org.mockito.internal.*;\n import org.mockito.internal.matchers.EqualsTest;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.binding.*;\n import org.mockitousage.matchers.*;\n import org.mockitousage.sample.MockitoSampleTest;\n                     InvocationChunkTest.class, \n                     MockFactoryTest.class, \n                     MockitoBehaviorTest.class, \n-                    MockitoStateTest.class, \n+                    MockitoStateImplTest.class, \n                     RegisteredInvocationsTest.class, \n                     EmptyReturnValuesTest.class, \n                     VerifyingModeTest.class, \n--- a/test/org/mockitousage/ReplacingObjectMethodsTest.java\n+++ b/test/org/mockitousage/ReplacingObjectMethodsTest.java\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.*;\n \n public class ReplacingObjectMethodsTest extends RequiresValidState {\n \n--- a/test/org/mockitousage/StackTrackeChangingTest.java\n+++ b/test/org/mockitousage/StackTrackeChangingTest.java\n import static org.mockito.util.ExtraMatchers.hasMethodInStackTraceAt;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n \n public class StackTrackeChangingTest extends RequiresValidState {\n     \n--- a/test/org/mockitousage/StackTrackeFilteringTest.java\n+++ b/test/org/mockitousage/StackTrackeFilteringTest.java\n import org.mockito.*;\n import org.mockito.exceptions.parents.MockitoException;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.internal.StateResetter;\n-import org.mockito.util.RequiresValidState;\n \n public class StackTrackeFilteringTest extends RequiresValidState {\n     \n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n import java.util.ArrayList;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n \n public class UsingVarargsTest extends RequiresValidState {\n \n--- a/test/org/mockitousage/binding/BridgeMethodPuzzleTest.java\n+++ b/test/org/mockitousage/binding/BridgeMethodPuzzleTest.java\n import static org.mockito.util.ExtraMatchers.hasBridgeMethod;\n \n import org.junit.Test;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.RequiresValidState;\n \n /**\n  * Bridge method is generated by compiler when erasure in parent class is\n--- a/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n-import org.mockito.Strictly;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n \n public class IncorectBindingPuzzleFixedTest extends RequiresValidState {\n \n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n import java.math.BigDecimal;\n \n import org.junit.Test;\n+import org.mockito.RequiresValidState;\n import org.mockito.internal.matchers.*;\n-import org.mockito.util.RequiresValidState;\n \n public class ComparableMatchersTest extends RequiresValidState {\n \n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n import org.junit.*;\n import org.mockito.*;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n-import org.mockito.internal.StateResetter;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import java.util.HashMap;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n import java.util.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.internal.matchers.*;\n-import org.mockito.util.RequiresValidState;\n \n public class MatchersToStringTest extends RequiresValidState {\n     private StringBuilder buffer;\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n--- a/test/org/mockitousage/sample/MockitoSampleTest.java\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n import java.util.Arrays;\n \n import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.*;\n \n public class MockitoSampleTest extends RequiresValidState {\n     \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n--- a/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n+++ b/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n import java.util.*;\n \n import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.*;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n import java.util.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.parents.MockitoException;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})\n public class StubbingWithThrowablesTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/AtLeastOnceVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtLeastOnceVerificationTest.java\n import java.util.List;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class AtLeastOnceVerificationTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/BasicVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationTest.java\n import java.util.List;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.*;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class BasicVerificationTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n import org.mockito.*;\n import org.mockito.exceptions.cause.WantedDiffersFromActual;\n import org.mockito.exceptions.verification.*;\n-import org.mockito.internal.StateResetter;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n public class DescriptiveMessagesOnStrictOrderErrorsTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import static org.mockito.util.ExtraMatchers.*;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.cause.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n public class DescriptiveMessagesWhenVerificationFailsTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n import java.util.LinkedList;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.cause.*;\n import org.mockito.exceptions.verification.*;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class ExactNumberOfTimesVerificationTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n import java.util.*;\n \n import org.junit.*;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n \n @SuppressWarnings(\"unchecked\")\n public class NoMoreInteractionsVerificationTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n-import org.mockito.Strictly;\n+import org.mockito.*;\n import org.mockito.exceptions.parents.MockitoException;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n-import org.mockito.Strictly;\n+import org.mockito.*;\n import org.mockito.exceptions.verification.*;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n--- a/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n import java.util.*;\n \n import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.mockito.util.RequiresValidState;\n+import org.mockito.*;\n \n @SuppressWarnings(\"unchecked\")\n public class VerificationOnMultipleMocksUsingMatchersTest extends RequiresValidState {\n--- a/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n import org.junit.*;\n import org.mockito.*;\n import org.mockito.exceptions.verification.VerificationError;\n-import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  ", "timestamp": 1197329873, "metainfo": ""}