{"sha": "af1f73b2941a227fc6fd10f53f0e588f3f7c3357", "log": "Some polishing + adding javadocs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401445", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n-        return MOCKITO_CORE.mock(classToMock, withSettings().defaultBehavior(RETURNS_DEFAULTS));\n+        return mock(classToMock, withSettings().defaultBehavior(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, String name) {\n-        return MOCKITO_CORE.mock(classToMock, withSettings()\n+        return mock(classToMock, withSettings()\n                 .name(name)\n                 .defaultBehavior(RETURNS_DEFAULTS));\n     }\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n-        return MOCKITO_CORE.mock(classToMock, withSettings().defaultBehavior(returnValues));\n-    }\n-    \n-    //TODO: javadoc\n+        return mock(classToMock, withSettings().defaultBehavior(returnValues));\n+    }\n+    \n+    \n+    /**\n+     * Creates a mock with some non-standard settings.\n+     * <p>\n+     * The number of configuration points for a mock grows \n+     * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods. \n+     * Hence {@link MockSettings}.\n+     * <pre>\n+     *   Listener mock = mock(Listener.class, withSettings()\n+     *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS);\n+     *   );  \n+     * </pre>\n+     * <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks? \n+     * Is the code under test so complicated that it requires non-standard mocks? \n+     * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?\n+     * <p>\n+     * See also {@link Mockito#withSettings()}\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param classToMock class or interface to mock\n+     * @param mockSettings additional mock settings\n+     * @return mock object\n+     */\n     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n         return MOCKITO_CORE.mock(classToMock, mockSettings);\n     }", "timestamp": 1242725853, "metainfo": ""}