{"sha": "d598002d7d0c8787f1fe86af68c147548bce775f", "log": "Further refactoring of exception messages - following the new patterns of storing and presenting locations of errors / verification failures  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401295", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.NotAMockException;\n     }\n     \n     public void noMoreInteractionsWanted(PrintableInvocation undesired, HasStackTrace actualInvocationStackTrace) {\n-        UndesiredInvocation cause = new UndesiredInvocation(join(\n-                \"Undesired invocation:\", \n-                undesired.toString()\n-        ));\n-        \n-        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n-        throw new NoInteractionsWanted(join(\"No interactions wanted\"), cause);\n+        throw new NoInteractionsWanted(join(\n+                \"No interactions wanted here:\",\n+                \"-> at \" + new Location(),\n+                \"But found this interaction:\",\n+                \"-> at \" + actualInvocationStackTrace.getStackTrace()[0],\n+                \"\"\n+                ));\n     }\n     \n     public void cannotMockFinalClass(Class<?> clazz) {\n--- a/src/org/mockito/exceptions/verification/NoInteractionsWanted.java\n+++ b/src/org/mockito/exceptions/verification/NoInteractionsWanted.java\n \n     private static final long serialVersionUID = 1L;\n \n-    public NoInteractionsWanted(String message, Throwable cause) {\n-        super(message, cause);\n+    public NoInteractionsWanted(String message) {\n+        super(message);\n     }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n         } catch (NoInteractionsWanted e) {\n             String expectedMessage =\n                     \"\\n\" +\n-                    \"No interactions wanted\";\n-            assertEquals(expectedMessage, e.getMessage());\n-\n-            assertEquals(e.getCause().getClass(), UndesiredInvocation.class);\n+                    \"No interactions wanted here:\" +\n+                    \"\\n\" +\n+                    \"-> at\";\n+            assertContains(expectedMessage, e.getMessage());\n \n             String expectedCause =\n                     \"\\n\" +\n-                    \"Undesired invocation:\" +\n-                    \"\\n\" +\n-                    \"iMethods.oneArg(false);\";\n-            assertEquals(expectedCause, e.getCause().getMessage());\n+                    \"But found this interaction:\" +\n+                    \"\\n\" +\n+                    \"-> at\";\n+            assertContains(expectedCause, e.getMessage());\n         }\n     }\n \n         } catch (NoInteractionsWanted e) {\n             String expected =\n                     \"\\n\" +\n-                    \"No interactions wanted\";\n-\n-            assertEquals(e.getMessage(), expected);\n+                    \"No interactions wanted here:\" +\n+                    \"\\n\" +\n+                    \"-> at\";\n+\n+            assertContains(expected, e.getMessage());\n \n             String expectedCause =\n                 \"\\n\" +\n-                \"Undesired invocation:\" +\n+                \"But found this interaction:\" +\n                 \"\\n\" +\n-                \"iMethods.twoArgumentMethod(1, 2);\";\n-\n-            assertEquals(e.getCause().getMessage(), expectedCause);\n+                \"-> at\";\n+\n+            assertContains(expectedCause, e.getMessage());\n         }\n     }\n ", "timestamp": 1238769868, "metainfo": ""}