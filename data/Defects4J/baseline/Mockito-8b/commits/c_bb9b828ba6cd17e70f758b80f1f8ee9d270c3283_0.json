{"sha": "bb9b828ba6cd17e70f758b80f1f8ee9d270c3283", "log": "removed some dead code, added missing tests, all according to the coverage report  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401426", "commit": "\n--- a/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n+++ b/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n     public InvalidUseOfMatchersException(String message) {\n         super(message);\n     }\n-\n-    public InvalidUseOfMatchersException(String message, MockitoException lastMatcherLocation) {\n-        super(message, lastMatcherLocation);\n-    }\n }\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n \n import java.util.Arrays;\n \n-import org.mockito.AncillaryTypes;\n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n         mockingProgress.validateState();\n         mockingProgress.resetOngoingStubbing();\n         return mockUtil.createMock(classToMock, mockingProgress, (MockSettingsImpl) mockSettings);\n-    }\n-    \n-    public AncillaryTypes implementing(Class<?>...ancillaryTypes) {\n-        return new AncillaryTypesImpl(ancillaryTypes);\n     }\n     \n     public OngoingStubbing stub() {\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n         return location;\n     }\n \n-    public boolean isVarArgs() {\n-        return method.isVarArgs();\n-    }\n-\n     public int getArgumentsCount() {\n         return arguments.length;\n     }\n--- /dev/null\n+++ b/test/org/mockito/exceptions/PluralizerTest.java\n+package org.mockito.exceptions;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class PluralizerTest extends TestBase {\n+\n+    @Test\n+    public void shouldGetPluralizedNumber() {\n+        new Pluralizer();\n+        assertEquals(\"0 times\", Pluralizer.pluralize(0));\n+        assertEquals(\"1 time\", Pluralizer.pluralize(1));\n+        assertEquals(\"2 times\", Pluralizer.pluralize(2));\n+        assertEquals(\"20 times\", Pluralizer.pluralize(20));\n+    }\n+}\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n     public void partialMockInAction() {\n //        mock = mock(Foo.class, withSettings() \n //            .defaultBehavior(CALLS_REAL_METHODS)\n-//            .constructor(constructor, 1, \"foo\");\n+//            .createUsing(constructor, 1, \"foo\");\n+//\n+//        mock = mock(Foo.class, withSettings() \n+//            .defaultBehavior(CALLS_REAL_METHODS)\n+//            .createUsingDefaultConstructor();\n //        \n //        mock = mock(Foo.class, withSettings() \n //            .defaultBehavior(CALLS_REAL_METHODS)\n-//            .constructorArgs(\"some arg\", 1);\n+//            .createPassingArguments(\"some arg\", 1);\n //\n //        spy = spy(Foo.class, \"some arg\", 1);\n //        \n--- a/test/org/mockitousage/basicapi/AnnotationsTest.java\n+++ b/test/org/mockitousage/basicapi/AnnotationsTest.java\n \n import static org.mockito.Mockito.*;\n \n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.junit.Before;\n import org.junit.Test;\n @SuppressWarnings(\"unchecked\")\n public class AnnotationsTest extends TestBase {\n \n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface NotAMock {}\n+\n     @Mock List list;\n     @Mock final Map map = new HashMap();\n+    @NotAMock Set notAMock;\n     \n     @SuppressWarnings(\"deprecation\")\n     @MockitoAnnotations.Mock List listTwo;\n         }\n     }\n     \n-    class Base2 extends SuperBase {\n-        @Mock private IMethods mock;\n-        \n-        public IMethods getBaseMock() {\n-            return mock;\n-        }\n-    }\n-    \n     class Sub extends Base {\n         @Mock private IMethods mock;\n         \n--- a/test/org/mockitousage/stubbing/DeprecatedStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/DeprecatedStubbingTest.java\n         \n         verifyZeroInteractions(mock);\n     }\n+    \n+    @Test\n+    public void shouldAllowConsecutiveStubbing() throws Exception {\n+        //when\n+        stub(mock.simpleMethod())\n+            .toReturn(\"100\")\n+            .toReturn(\"200\");\n+        \n+        //then\n+        assertEquals(\"100\", mock.simpleMethod());\n+        assertEquals(\"200\", mock.simpleMethod());\n+    }\n }", "timestamp": 1242249898, "metainfo": ""}