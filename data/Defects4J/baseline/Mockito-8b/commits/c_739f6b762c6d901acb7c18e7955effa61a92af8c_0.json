{"sha": "739f6b762c6d901acb7c18e7955effa61a92af8c", "log": "deprecated Then constructor since it is not part of the public API", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n  * Start learning about BDD here: <a href=\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\">http://en.wikipedia.org/wiki/Behavior_Driven_Development</a>\n  * <p>\n  * The problem is that current stubbing api with canonical role of <b>when</b> word does not integrate nicely with <b>//given //when //then</b> comments.\n- * It's because stubbing belongs to <b>given</b> component of the test and not to the <b>when</b> component of the test. \n- * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method. \n- * Now it really nicely integrates with the <b>given</b> component of a BDD style test!    \n+ * It's because stubbing belongs to <b>given</b> component of the test and not to the <b>when</b> component of the test.\n+ * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method.\n+ * Now it really nicely integrates with the <b>given</b> component of a BDD style test!\n  * <p>\n- * Here is how the test might look like: \n+ * Here is how the test might look like:\n  * <pre class=\"code\"><code class=\"java\">\n  * import static org.mockito.BDDMockito.*;\n- * \n+ *\n  * Seller seller = mock(Seller.class);\n  * Shop shop = new Shop(seller);\n- * \n+ *\n  * public void shouldBuyBread() throws Exception {\n- *   //given  \n+ *   //given\n  *   given(seller.askForBread()).willReturn(new Bread());\n- *   \n+ *\n  *   //when\n  *   Goods goods = shop.buyBread();\n- *   \n+ *\n  *   //then\n  *   assertThat(goods, containBread());\n- * }  \n+ * }\n  * </code></pre>\n- * \n+ *\n  * Stubbing voids with throwables:\n  * <pre class=\"code\"><code class=\"java\">\n  *   //given\n  *   willThrow(new RuntimeException(\"boo\")).given(mock).foo();\n- *   \n+ *\n  *   //when\n  *   Result result = systemUnderTest.perform();\n- *   \n+ *\n  *   //then\n  *   assertEquals(failure, result);\n  * </code></pre>\n  */\n @SuppressWarnings(\"unchecked\")\n public class BDDMockito extends Mockito {\n-    \n+\n     /**\n      * See original {@link OngoingStubbing}\n      * @since 1.8.0\n      */\n     public interface BDDMyOngoingStubbing<T> {\n-        \n+\n         /**\n          * See original {@link OngoingStubbing#thenAnswer(Answer)}\n          * @since 1.8.0\n          */\n         <M> M getMock();\n     }\n-    \n+\n     public static class BDDOngoingStubbingImpl<T> implements BDDMyOngoingStubbing<T> {\n \n         private final OngoingStubbing<T> mockitoOngoingStubbing;\n             return (M) mockitoOngoingStubbing.getMock();\n         }\n     }\n-    \n+\n     /**\n      * see original {@link Mockito#when(Object)}\n      * @since 1.8.0\n     /**\n      * Provides fluent way of mock verification.\n      *\n+     * @param <T> type of the mock\n+     *\n      * @author Lovro Pandzic\n-     * @param <T> type of the mock\n+     * @since 1.10.5\n      */\n     public final static class Then<T> {\n \n         private final T mock;\n \n+        /**\n+         * @deprecated not part of the public API, use {@link BDDMockito#then(Object)} instead.\n+         */\n+        @Deprecated\n         public Then(T mock) {\n \n             this.mock = mock;\n             return verify(mock, mode);\n         }\n     }\n-    \n+\n     /**\n      * See original {@link Stubber}\n      * @since 1.8.0\n          * @since 1.8.0\n          */\n         BDDStubber willAnswer(Answer answer);\n-        \n+\n         /**\n          * See original {@link Stubber#doNothing()}\n          * @since 1.8.0\n          */\n         BDDStubber willNothing();\n-        \n+\n         /**\n          * See original {@link Stubber#doReturn(Object)}\n          * @since 1.8.0\n          */\n         BDDStubber willReturn(Object toBeReturned);\n-        \n+\n         /**\n          * See original {@link Stubber#doThrow(Throwable)}\n          * @since 1.8.0\n          */\n         <T> T given(T mock);\n     }\n-    \n+\n     public static class BDDStubberImpl implements BDDStubber {\n \n         private final Stubber mockitoStubber;\n             return new BDDStubberImpl(mockitoStubber.doCallRealMethod());\n         }\n     }\n-    \n+\n     /**\n      * see original {@link Mockito#doThrow(Throwable)}\n      * @since 1.8.0\n     public static BDDStubber willThrow(Class<? extends Throwable> toBeThrown) {\n         return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n     }\n-    \n+\n     /**\n      * see original {@link Mockito#doAnswer(Answer)}\n      * @since 1.8.0\n      */\n     public static BDDStubber willAnswer(Answer answer) {\n         return new BDDStubberImpl(Mockito.doAnswer(answer));\n-    }  \n-    \n+    }\n+\n     /**\n      * see original {@link Mockito#doNothing()}\n      * @since 1.8.0\n      */\n     public static BDDStubber willDoNothing() {\n         return new BDDStubberImpl(Mockito.doNothing());\n-    }    \n-    \n+    }\n+\n     /**\n      * see original {@link Mockito#doReturn(Object)}\n      * @since 1.8.0", "timestamp": 1418426970, "metainfo": ""}