{"sha": "3c851e75a58dfdf911b4802e4d69b32c9491bf82", "log": "Improved javadocs", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#22\">22. (New) Verification with timeout (Since 1.8.5) </a><br/>\n  *      <a href=\"#23\">23. (**New**) Automatic instantiation of &#064;Spies, &#064;InjectMocks and constructor injection goodness (Since 1.9)</a><br/>\n  *      <a href=\"#24\">24. (**New**) One-liner stubs (Since 1.9)</a><br/>\n+ *      <a href=\"#25\">25. (**New**) Verification ignoring stubs (Since 1.9)</a><br/>\n  * </b>\n  * \n  * <p>\n  * <p>\n  * Mockito will now allow you to create mocks when stubbing.\n  * Basically, it allows to create a stub in one line of code.\n- * Example :\n- * <pre>\n- * Car car = when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();\n- * </pre>\n+ * This can be helpful to keep test code clean.\n+ * For example, some boring stub can be created & stubbed at field initialization in a test:\n+ * <pre>\n+ * public class CarTest {\n+ *   Car boringStubbedCar = when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();\n  *\n+ *   &#064;Test public void should... {}\n+ * </pre>\n  *\n+ * <h3 id=\"25\">25. Verification ignoring stubs (Since 1.9)\n+ * <p>\n+ * Mockito will now allow to ignore stubbing for the sake of verification. Sometimes useful when coupled with verifyNoMoreInteractions() or verification inOrder()\n+ * <pre>\n+ * verify(mock).foo();\n+ * verify(mockTwo).bar();\n+ *\n+ * //ignores all stubbed methods:\n+ * verifyNoMoreInvocations(ignoreStubs(mock, mockTwo));\n+ *\n+ * //creates InOrder that will ignore stubbed\n+ * InOrder inOrder = inOrder(ignoreStubs(mock, mockTwo));\n+ * inOrder.verify(mock).foo();\n+ * inOrder.verify(mockTwo).bar();\n+ * inOrder.verifyNoMoreInteractions();\n+ * </pre>\n+ * <b>Warning</b>, ignoreStubs() might lead to overuse verifyNoMoreInteractions(ignoreStubs(...));\n+ * Bear in mind that Mockito does not recommend bombarding every test with verifyNoMoreInteractions() for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}\n+ * <p>\n+ * Advanced examples and more details can be found in javadoc for {@link Mockito#ignoreStubs(Object...)}\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     }\n \n     /**\n-     * Ignores stubbed methods of given mocks for the sake of verification.\n+     * Ignores stubbed methods of given mocks for the sake of verification. Sometimes useful when coupled with verifyNoMoreInteractions() or verification inOrder()\n+     * <p>\n+     * <b>Warning</b>, ignoreStubs() might lead to overuse verifyNoMoreInteractions(ignoreStubs(...));\n+     * Bear in mind that Mockito does not recommend bombarding every test with verifyNoMoreInteractions() for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}\n      * <p>\n      * Other words: all *stubbed* methods of given mocks are marked *verfied* so that they don't get in a way during verifyNoMoreInteractions().\n      * <p>\n      * This method <b>changes the input mocks</b>! This method returns input mocks just for convenience.\n+     * <p>\n+     * Ignored stubs will also be ignored for verification inOrder, including {@link org.mockito.InOrder#verifyNoMoreInteractions()}.\n+     * See the second example.\n      * <p>\n      * Example:\n      * <pre>\n      *\n      *  //Remember that ignoreStubs() *changes* the input mocks and returns them for convenience.\n      * <pre>\n-     *\n+     * Ignoring stubs can be used with <b>verification in order</b>:\n+     * <pre>\n+     *  List list = mock(List.class);\n+     *  when(mock.get(0)).thenReturn(\"foo\");\n+     *\n+     *  list.add(0);\n+     *  System.out.println(list.get(0)); //we don't want to verify this\n+     *  list.clear();\n+     *\n+     *  InOrder inOrder = inOrder(ignoreStubs(list));\n+     *  inOrder.verify(list).add(0);\n+     *  inOrder.verify(list).clear();\n+     *  inOrder.verifyNoMoreInteractions();\n+     * </pre>\n+     *\n+     * @since 1.9\n      * @param mocks input mocks that will be changed\n      * @return the same mocks that were passed in as parameters\n      */\n--- a/src/org/mockito/stubbing/OngoingStubbing.java\n+++ b/src/org/mockito/stubbing/OngoingStubbing.java\n \n     /**\n      * Returns the mock that was used for this stub.\n-     *\n-     * This code allows fast mock creation and stubbing. E.g:\n-     * <pre>\n-     * Set mockedSet = when(mock(Set.class).isEmpty()).thenReturn(false).getMock();\n+     * <p>\n+     * It allows to create a stub in one line of code.\n+     * This can be helpful to keep test code clean.\n+     * For example, some boring stub can be created & stubbed at field initialization in a test:\n+     * <pre>\n+     * public class CarTest {\n+     *   Car boringStubbedCar = when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();\n+     *\n+     *   &#064;Test public void should... {}\n      * </pre>\n      *\n      * @param <M> The mock type given by the variable type.", "timestamp": 1301826305, "metainfo": ""}