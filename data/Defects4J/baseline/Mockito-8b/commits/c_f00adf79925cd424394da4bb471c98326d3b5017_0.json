{"sha": "f00adf79925cd424394da4bb471c98326d3b5017", "log": "In order to keep exported, client-facing interfaces fluent, renamed NewOngoingStubbing into OngoingStubbing. Had to change one interface name as well in the process.  --HG-- rename : src/org/mockito/internal/progress/OngoingStubbing.java => src/org/mockito/internal/progress/IOngoingStubbing.java rename : src/org/mockito/stubbing/NewOngoingStubbing.java => src/org/mockito/stubbing/OngoingStubbing.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401516", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n package org.mockito;\n \n import org.mockito.stubbing.Answer;\n-import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n import org.mockito.stubbing.Stubber;\n \n /**\n public class BDDMockito extends Mockito {\n     \n     /**\n-     * See original {@link NewOngoingStubbing}\n+     * See original {@link OngoingStubbing}\n      */\n     public static interface BDDMyOngoingStubbing<T> {\n         \n         /**\n-         * See original {@link NewOngoingStubbing#thenAnswer(Answer)}\n+         * See original {@link OngoingStubbing#thenAnswer(Answer)}\n          */\n         BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer);\n         \n         /**\n-         * See original {@link NewOngoingStubbing#thenReturn(Object)}\n+         * See original {@link OngoingStubbing#thenReturn(Object)}\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value);\n         \n         /**\n-         * See original {@link NewOngoingStubbing#thenReturn(Object, Object...)}\n+         * See original {@link OngoingStubbing#thenReturn(Object, Object...)}\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value, T... values);\n         \n         /**\n-         * See original {@link NewOngoingStubbing#thenThrow(Throwable...)}\n+         * See original {@link OngoingStubbing#thenThrow(Throwable...)}\n          */\n         BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);\n \n         /**\n-         * See original {@link NewOngoingStubbing#thenCallRealMethod()}\n+         * See original {@link OngoingStubbing#thenCallRealMethod()}\n          */\n         BDDMyOngoingStubbing<T> willCallRealMethod();\n     }\n     \n     public static class BDDOngoingStubbingImpl<T> implements BDDMyOngoingStubbing<T> {\n \n-        //TODO: rename to OngoingStubbing and move to exported packages.\n-        private final NewOngoingStubbing<T> mockitoOngoingStubbing;\n-\n-        public BDDOngoingStubbingImpl(NewOngoingStubbing<T> ongoingStubbing) {\n+        //TODO: rename to IOngoingStubbing and move to exported packages.\n+        private final OngoingStubbing<T> mockitoOngoingStubbing;\n+\n+        public BDDOngoingStubbingImpl(OngoingStubbing<T> ongoingStubbing) {\n             this.mockitoOngoingStubbing = ongoingStubbing;\n         }\n \n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n import org.mockito.stubbing.Stubber;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n      * See examples in javadoc for {@link Mockito} class\n      * @param methodCall method to be stubbed\n      */\n-    public static <T> NewOngoingStubbing<T> when(T methodCall) {\n+    public static <T> OngoingStubbing<T> when(T methodCall) {\n         return MOCKITO_CORE.when(methodCall);\n     }\n \n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.progress.MockingProgress;\n-import org.mockito.internal.progress.OngoingStubbing;\n+import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n import org.mockito.stubbing.Stubber;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n         return mockUtil.createMock(classToMock, mockingProgress, (MockSettingsImpl) mockSettings);\n     }\n     \n-    public OngoingStubbing stub() {\n-        OngoingStubbing stubbing = mockingProgress.pullOngoingStubbing();\n+    public IOngoingStubbing stub() {\n+        IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing();\n         if (stubbing == null) {\n             mockingProgress.reset();\n             reporter.missingMethodInvocation();\n         return (DeprecatedOngoingStubbing) stub();\n     }\n \n-    public <T> NewOngoingStubbing<T> when(T methodCall) {\n+    public <T> OngoingStubbing<T> when(T methodCall) {\n         mockingProgress.stubbingStarted();\n-        return (NewOngoingStubbing) stub();\n+        return (OngoingStubbing) stub();\n     }\n     \n     \n--- /dev/null\n+++ b/src/org/mockito/internal/progress/IOngoingStubbing.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.progress;\n+\n+\n+/**\n+ * Marking interface to be removed when DeprecatedOngoingStubbing gets deleted\n+ */\n+public interface IOngoingStubbing {}\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n \n public interface MockingProgress {\n     \n-    void reportOngoingStubbing(OngoingStubbing ongoingStubbing);\n+    void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing);\n \n-    OngoingStubbing pullOngoingStubbing();\n+    IOngoingStubbing pullOngoingStubbing();\n \n     void verificationStarted(VerificationMode verificationMode);\n \n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n     \n     private final DebuggingInfo debuggingInfo = new DebuggingInfo();\n \n-    OngoingStubbing ongoingStubbing;\n+    IOngoingStubbing iOngoingStubbing;\n     private Localized<VerificationMode> verificationMode;\n     private Location stubbingInProgress = null;\n \n-    public void reportOngoingStubbing(OngoingStubbing ongoingStubbing) {\n-        this.ongoingStubbing = ongoingStubbing;\n+    public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\n+        this.iOngoingStubbing = iOngoingStubbing;\n     }\n \n-    public OngoingStubbing pullOngoingStubbing() {\n-        OngoingStubbing temp = ongoingStubbing;\n-        ongoingStubbing = null;\n+    public IOngoingStubbing pullOngoingStubbing() {\n+        IOngoingStubbing temp = iOngoingStubbing;\n+        iOngoingStubbing = null;\n         return temp;\n     }\n     \n      * @see org.mockito.internal.progress.MockingProgress#resetOngoingStubbing()\n      */\n     public void resetOngoingStubbing() {\n-        ongoingStubbing = null;\n+        iOngoingStubbing = null;\n     }\n \n     public VerificationMode pullVerificationMode() {\n     }\n     \n     public String toString() {\n-        return  \"ongoingStubbing: \" + ongoingStubbing + \n+        return  \"iOngoingStubbing: \" + iOngoingStubbing + \n         \", verificationMode: \" + verificationMode +\n         \", stubbingInProgress: \" + stubbingInProgress;\n     }\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n         return mockingProgress.get();\n     }\n     \n-    public void reportOngoingStubbing(OngoingStubbing ongoingStubbing) {\n-        threadSafely().reportOngoingStubbing(ongoingStubbing);\n+    public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\n+        threadSafely().reportOngoingStubbing(iOngoingStubbing);\n     }\n \n-    public OngoingStubbing pullOngoingStubbing() {\n+    public IOngoingStubbing pullOngoingStubbing() {\n         return threadSafely().pullOngoingStubbing();\n     }\n     \n--- a/src/org/mockito/internal/stubbing/BaseStubbing.java\n+++ b/src/org/mockito/internal/stubbing/BaseStubbing.java\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n \n-public abstract class BaseStubbing<T> implements NewOngoingStubbing<T>, DeprecatedOngoingStubbing<T> {\n-    public NewOngoingStubbing<T> thenReturn(T value) {\n+public abstract class BaseStubbing<T> implements OngoingStubbing<T>, DeprecatedOngoingStubbing<T> {\n+    public OngoingStubbing<T> thenReturn(T value) {\n         return thenAnswer(new Returns(value));\n     }\n \n-    public NewOngoingStubbing<T> thenReturn(T value, T... values) {\n-        NewOngoingStubbing<T> stubbing = thenReturn(value);            \n+    public OngoingStubbing<T> thenReturn(T value, T... values) {\n+        OngoingStubbing<T> stubbing = thenReturn(value);            \n         if (values == null) {\n             return stubbing.thenReturn(null);\n         }\n         return stubbing;\n     }\n \n-    private NewOngoingStubbing<T> thenThrow(Throwable throwable) {\n+    private OngoingStubbing<T> thenThrow(Throwable throwable) {\n         return thenAnswer(new ThrowsException(throwable));\n     }\n \n-    public NewOngoingStubbing<T> thenThrow(Throwable... throwables) {\n+    public OngoingStubbing<T> thenThrow(Throwable... throwables) {\n         if (throwables == null) {\n             thenThrow((Throwable) null);\n         }\n-        NewOngoingStubbing<T> stubbing = null;\n+        OngoingStubbing<T> stubbing = null;\n         for (Throwable t: throwables) {\n             if (stubbing == null) {\n                 stubbing = thenThrow(t);                    \n     }        \n \n     //TODO: after 1.8 fail when someone tries to do it with a mock of an Interface\n-    public NewOngoingStubbing<T> thenCallRealMethod() {\n+    public OngoingStubbing<T> thenCallRealMethod() {\n         return thenAnswer(new CallsRealMethods());\n     }\n \n--- a/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n+++ b/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n \n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n \n public class ConsecutiveStubbing<T> extends BaseStubbing<T> {\n     private final MockitoStubber mockitoStubber;\n         this.mockitoStubber = mockitoStubber;\n     }\n \n-    public NewOngoingStubbing<T> thenAnswer(Answer<?> answer) {\n+    public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n         mockitoStubber.addConsecutiveAnswer(answer);\n         return this;\n     }\n--- a/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n+++ b/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n \n public class OngoingStubbingImpl<T> extends BaseStubbing<T> {\n     \n         this.registeredInvocations = registeredInvocations;\n     }\n \n-    public NewOngoingStubbing<T> thenAnswer(Answer<?> answer) {\n+    public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n         registeredInvocations.removeLast();\n         mockitoStubber.addAnswer(answer);\n         return new ConsecutiveStubbing<T>(mockitoStubber);\n--- a/src/org/mockito/stubbing/DeprecatedOngoingStubbing.java\n+++ b/src/org/mockito/stubbing/DeprecatedOngoingStubbing.java\n package org.mockito.stubbing;\n \n import org.mockito.Mockito;\n-import org.mockito.internal.progress.OngoingStubbing;\n+import org.mockito.internal.progress.IOngoingStubbing;\n \n /**\n  * Stubs a method call with return value or an exception. E.g:\n  *\n  * See examples in javadoc for {@link Mockito#stub}\n  */\n-public interface DeprecatedOngoingStubbing<T> extends OngoingStubbing {\n+public interface DeprecatedOngoingStubbing<T> extends IOngoingStubbing {\n \n     /**\n      * Set a return value for the stubbed method. E.g:\n      *\n      * @param value return value\n      *\n-     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n      */\n     DeprecatedOngoingStubbing<T> toReturn(T value);\n \n      *\n      * @param throwable to be thrown on method invocation\n      *\n-     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n      */\n     DeprecatedOngoingStubbing<T> toThrow(Throwable throwable);\n \n      *\n      * @param answer the custom answer to execute.\n      *\n-     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n      */\n     DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer);\n }\n--- /dev/null\n+++ b/src/org/mockito/stubbing/OngoingStubbing.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.progress.IOngoingStubbing;\n+\n+//TODO: rename\n+//TODO: make osgi bundles core & all\n+/**\n+ * Simply put: \"<b>When</b> the x method is called <b>then</b> return y\". E.g:\n+ *\n+ * <pre>\n+ * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);\n+ *\n+ * //you can use flexible argument matchers, e.g:\n+ * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);\n+ *\n+ * //setting exception to be thrown:\n+ * when(mock.someMethod(\"some arg\")).thenThrow(new RuntimeException());\n+ *\n+ * //you can set different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: thenReturn(\"foo\")) determines the behavior of further consecutive calls.\n+ * when(mock.someMethod(\"some arg\"))\n+ *  .thenThrow(new RuntimeException())\n+ *  .thenReturn(\"foo\");\n+ * \n+ * //There is a shorter way of consecutive stubbing:\n+ * when(mock.someMethod()).thenReturn(1,2,3);\n+ * when(mock.otherMethod()).thenThrow(exc1, exc2);\n+ * </pre>\n+ *\n+ * See examples in javadoc for {@link Mockito#when}\n+ */\n+public interface OngoingStubbing<T> extends IOngoingStubbing {\n+\n+    /**\n+     * Sets a return value to be returned when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenReturn(10);\n+     * </pre>\n+     *\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param value return value\n+     *\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     */\n+    OngoingStubbing<T> thenReturn(T value);\n+\n+    /**\n+     * Sets consecutive return values to be returned when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenReturn(1, 2, 3);\n+     * </pre>\n+     *\n+     * Last return value in the sequence (in example: 3) determines the behavior of further consecutive calls.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param value first return value\n+     * @param values next return values\n+     *\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     */\n+    OngoingStubbing<T> thenReturn(T value, T... values);\n+\n+    /**\n+     * Sets Throwable objects to be thrown when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenThrow(new RuntimeException());\n+     * </pre>\n+     *\n+     * If throwables contain a checked exception then it has to\n+     * match one of the checked exceptions of method signature.\n+     * <p>\n+     * You can specify throwables to be thrown for consecutive calls. \n+     * In that case the last throwable determines the behavior of further consecutive calls.\n+     * <p>\n+     * if throwable is null then exception will be thrown.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param throwables to be thrown on method invocation\n+     *\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     */\n+    OngoingStubbing<T> thenThrow(Throwable... throwables);\n+\n+    /**     \n+     * Sets the real implementation to be called when the method is called on a mock object.\n+     * <p>\n+     * As usual you are going to read <b>the partial mock warning</b>:\n+     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n+     * How does partial mock fit into this paradigm? Well, it just doesn't... \n+     * Partial mock usually means that the complexity has been moved to a different method on the same object.\n+     * In most cases, this is not the way you want to design your application.\n+     * <p>\n+     * However, there are rare cases when partial mocks come handy: \n+     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n+     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n+     * <pre>\n+     *   // someMethod() must be safe (e.g. doesn't throw, doesn't have dependencies to the object state, etc.)\n+     *   // if it isn't safe then you will have trouble stubbing it using this api. Use Mockito.doCallRealMethod() instead. \n+     *   when(mock.someMethod()).thenCallRealMethod();\n+     *   \n+     *   // calls real method:\n+     *   mock.someMethod();\n+     *   \n+     * </pre>\n+     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks. \n+     * <b>Mockito.spy() is a recommended way of creating partial mocks.</b> \n+     * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     */\n+    OngoingStubbing<T> thenCallRealMethod();\n+\n+    /**\n+     * Sets a generic Answer for the method. E.g:\n+     * <pre>\n+     * when(mock.someMethod(10)).thenAnswer(new Answer&lt;Integer&gt;() {\n+     *     public Integer answer(InvocationOnMock invocation) throws Throwable {\n+     *         return (Integer) invocation.getArguments()[0];\n+     *     }\n+     * }\n+     * </pre>\n+     *\n+     * @param answer the custom answer to execute.\n+     *\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     */\n+    OngoingStubbing<T> thenAnswer(Answer<?> answer);\n+}", "timestamp": 1245235793, "metainfo": ""}