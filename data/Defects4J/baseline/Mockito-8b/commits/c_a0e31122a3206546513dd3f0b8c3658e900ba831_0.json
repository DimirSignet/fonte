{"sha": "a0e31122a3206546513dd3f0b8c3658e900ba831", "log": "added some configurable API for changing the default values  --HG-- rename : src/org/mockito/internal/progress/ReturnValues.java => src/org/mockito/internal/progress/EmptyReturnValues.java rename : test/org/mockitousage/examples/use/MockitoSampleTest.java => test/org/mockitousage/examples/use/ExampleTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40495", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n import org.mockito.internal.matchers.LessOrEqual;\n import org.mockito.internal.matchers.LessThan;\n import org.mockito.internal.progress.LastArguments;\n-import org.mockito.internal.progress.ReturnValues;\n+import org.mockito.internal.progress.EmptyReturnValues;\n \n /**\n  * See {@link Matchers} for general info about matchers.\n         return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();\n     }\n     \n-    private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n+    private static EmptyReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n         return LastArguments.instance().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n import org.mockito.internal.matchers.StartsWith;\n import org.mockito.internal.matchers.apachecommons.ReflectionEquals;\n import org.mockito.internal.progress.LastArguments;\n-import org.mockito.internal.progress.ReturnValues;\n+import org.mockito.internal.progress.EmptyReturnValues;\n \n /**\n  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n         return reportMatcher(matcher).returnZero();\n     }\n \n-    private static ReturnValues reportMatcher(Matcher<?> matcher) {\n+    private static EmptyReturnValues reportMatcher(Matcher<?> matcher) {\n         return LastArguments.instance().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/MockitoConfiguration.java\n+++ b/src/org/mockito/MockitoConfiguration.java\n \n public class MockitoConfiguration {\n     \n-    private static ReturnValues returnValues = new DefaultReturnValues();\n+    private static ReturnValues emptyReturnValues = new DefaultReturnValues();\n     \n     public static ReturnValues defaultReturnValues() {\n-        return returnValues;\n+        return emptyReturnValues;\n+    }\n+\n+    public static void setDefaultReturnValues(ReturnValues emptyReturnValues) {\n+        MockitoConfiguration.emptyReturnValues = emptyReturnValues;\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/progress/EmptyReturnValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.progress;\n+\n+public class EmptyReturnValues {\n+\n+    public byte returnZero() {\n+        return 0;\n+    }\n+\n+    public char returnChar() {\n+        return 0;\n+    }\n+\n+    public <T> T returnNull() {\n+        return null;\n+    }\n+\n+    public boolean returnFalse() {\n+        return false;\n+    }\n+}\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n         return INSTANCE.get();\n     }\n     \n-    public ReturnValues reportMatcher(Matcher matcher) {\n+    public EmptyReturnValues reportMatcher(Matcher matcher) {\n         matcherStack.push(matcher);\n-        return new ReturnValues();\n+        return new EmptyReturnValues();\n     }\n \n     public List<Matcher> pullMatchers() {\n         return matchers;\n     }\n \n-    public ReturnValues reportAnd() {\n+    public EmptyReturnValues reportAnd() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n         matcherStack.push(new And(popLastArgumentMatchers(2)));\n-        return new ReturnValues();\n+        return new EmptyReturnValues();\n     }\n \n-    public ReturnValues reportNot() {\n+    public EmptyReturnValues reportNot() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n         matcherStack.push(new Not(popLastArgumentMatchers(1).get(0)));\n-        return new ReturnValues();\n+        return new EmptyReturnValues();\n     }\n \n     private List<Matcher> popLastArgumentMatchers(int count) {\n         }\n     }\n \n-    public ReturnValues reportOr() {\n+    public EmptyReturnValues reportOr() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n         matcherStack.push(new Or(popLastArgumentMatchers(2)));\n-        return new ReturnValues();\n+        return new EmptyReturnValues();\n     }\n }\n--- a/test/org/mockito/TestBase.java\n+++ b/test/org/mockito/TestBase.java\n  */\n package org.mockito;\n \n-import static org.junit.Assert.*;\n+import junit.framework.Assert;\n \n import org.hamcrest.Matcher;\n import org.junit.Before;\n  * the easiest way to make sure that tests clean up invalid state is to require\n  * valid state for all tests.\n  */\n-public class TestBase {\n+public class TestBase extends Assert {\n \n     @Before\n     public void init() {\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.internal.verification.VerifyingRecorderTest;\n import org.mockitousage.binding.BridgeMethodPuzzleTest;\n import org.mockitousage.binding.OverloadingPuzzleTest;\n-import org.mockitousage.examples.use.MockitoSampleTest;\n+import org.mockitousage.examples.use.ExampleTest;\n import org.mockitousage.matchers.ComparableMatchersTest;\n import org.mockitousage.matchers.CustomMatchersTest;\n import org.mockitousage.matchers.InvalidUseOfMatchersTest;\n                     InvalidStateDetectionTest.class,\n                     ReplacingObjectMethodsTest.class,\n                     StackTrackeChangingTest.class,\n-                    MockitoSampleTest.class,\n+                    ExampleTest.class,\n                     PointingStackTraceToActualInvocationTest.class,\n                     PointingStackTraceToActualInvocationChunkTest.class\n                 );\n--- /dev/null\n+++ b/test/org/mockitousage/examples/use/ExampleTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.use;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n+\n+public class ExampleTest extends TestBase {\n+    \n+    @Mock private ArticleCalculator mockCalculator;\n+    @Mock private ArticleDatabase mockDatabase;\n+    \n+    private ArticleManager articleManager;\n+    \n+    @Before\n+    public void setup() {\n+        articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+    }\n+\n+    @Test\n+    public void managerCountsArticlesAndSavesThemInTheDatabase() {\n+        stub(mockCalculator.countArticles(\"Guardian\")).toReturn(12);\n+        stub(mockCalculator.countArticlesInPolish(anyString())).toReturn(5);\n+\n+//        stub(mockCalculator.countAllArticles(anyString(), \"asdf\")).toReturn(5);\n+        \n+        articleManager.updateArticleCounters(\"Guardian\");\n+        \n+        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 12);\n+        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 5);\n+        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 7);\n+        \n+        verifyNoMoreInteractions(mockDatabase);\n+    }\n+    \n+    @Test\n+    public void managerCountsArticlesUsingCalculator() {\n+        articleManager.updateArticleCounters(\"Guardian\");\n+\n+        verify(mockCalculator).countArticles(\"Guardian\");\n+        verify(mockCalculator).countArticlesInPolish(\"Guardian\");\n+        \n+        verifyNoMoreInteractions(mockCalculator);\n+    }\n+    \n+    @Test\n+    public void managerSavesArticlesInTheDatabase() {\n+        articleManager.updateArticleCounters(\"Guardian\");\n+\n+        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 0);\n+        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 0);\n+        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 0);\n+        \n+        verifyNoMoreInteractions(mockDatabase);\n+    }\n+    \n+    @Test\n+    public void managerUpdatesNumberOfRelatedArticles() {\n+        Article articleOne = new Article();\n+        Article articleTwo = new Article();\n+        Article articleThree = new Article();\n+        \n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(1);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleTwo)).toReturn(12);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleThree)).toReturn(0);\n+        \n+        stub(mockDatabase.getArticlesFor(\"Guardian\")).toReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n+        \n+        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n+\n+        verify(mockDatabase).save(articleOne);\n+        verify(mockDatabase).save(articleTwo);\n+        verify(mockDatabase).save(articleThree);\n+    }\n+    \n+    @Test\n+    public void shouldPersistRecalculatedArticle() {\n+        Article articleOne = new Article();\n+        Article articleTwo = new Article();\n+        \n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(1);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleTwo)).toReturn(12);\n+        \n+        stub(mockDatabase.getArticlesFor(\"Guardian\")).toReturn(Arrays.asList(articleOne, articleTwo)); \n+        \n+        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n+\n+        InOrder inOrder = inOrder(mockDatabase, mockCalculator);\n+        \n+        inOrder.verify(mockCalculator).countNumberOfRelatedArticles((Article) anyObject());\n+        inOrder.verify(mockDatabase, atLeastOnce()).save((Article) anyObject());\n+    }\n+}", "timestamp": 1206319509, "metainfo": ""}