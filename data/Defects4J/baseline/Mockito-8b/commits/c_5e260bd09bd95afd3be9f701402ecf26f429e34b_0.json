{"sha": "5e260bd09bd95afd3be9f701402ecf26f429e34b", "log": "for the wanted vs actual calculation, first unverified is treated as actual (if similar method by name is not found)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40141", "commit": "\n--- a/src/org/mockito/internal/MockitoBehavior.java\n+++ b/src/org/mockito/internal/MockitoBehavior.java\n     }\n \n     private void reportMissingInvocationError(ExpectedInvocation wanted) {\n-        Invocation actual = registeredInvocations.findSimilarInvocation(wanted);\n+        Invocation actual = registeredInvocations.findActualInvocation(wanted);\n         \n         if (actual != null) {\n             reportDiscrepancy(wanted, actual);\n--- a/src/org/mockito/internal/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/RegisteredInvocations.java\n         return chunks;\n     }\n     \n-    public Invocation findSimilarInvocation(ExpectedInvocation wanted) {\n+    public Invocation findActualInvocation(ExpectedInvocation wanted) {\n+        Invocation actualbyName = null;\n         for (Invocation registered : registeredInvocations) {\n             String wantedMethodName = wanted.getMethod().getName();\n             String registeredInvocationName = registered.getMethod().getName();\n             if (wantedMethodName.equals(registeredInvocationName) && !registered.isVerified()) {\n-                return registered;\n+                actualbyName = registered;\n             }\n         }\n+        \n+        return actualbyName != null ? actualbyName : getFirstUnverified();\n+    }\n \n-        return null;\n-    }\n-    \n     public int countActual(ExpectedInvocation wanted) {\n         int actual = 0;\n         for (Invocation registeredInvocation : registeredInvocations) {\n--- a/test/org/mockito/util/ExtraMatchers.java\n+++ b/test/org/mockito/util/ExtraMatchers.java\n         };\n     }\n     \n-    public static <T> Matcher<String> matches(final String regexp) {\n+    public static <T> Matcher<String> containsString(final String text) {\n         return new BaseMatcher<String>() {\n-\n             public boolean matches(Object string) {\n-                return ((String)string).matches(regexp); \n+                return ((String)string).contains(text); \n             }\n-\n             public void describeTo(Description desc) {\n-                desc.appendText(\"string doesn't match \" + regexp);\n+                desc.appendText(\"string doesn't contain \" + text);\n             }\n         };\n     }\n     \n-    public static <T> Matcher<String> contains(final String text) {\n-        return new BaseMatcher<String>() {\n-\n-            public boolean matches(Object string) {\n-                return ((String)string).contains(text); \n+    public static <T> Matcher<Throwable> messageContains(final String text) {\n+        return new BaseMatcher<Throwable>() {\n+            public boolean matches(Object throwable) {\n+                return ((Throwable)throwable).getMessage().contains(text); \n             }\n-\n             public void describeTo(Description desc) {\n-                desc.appendText(\"string doesn't contain \" + text);\n+                desc.appendText(\"exception's message doesn't contain \" + text);\n+            }\n+        };\n+    }\n+    \n+    public static <T> Matcher<Throwable> causeMessageContains(final String text) {\n+        return new BaseMatcher<Throwable>() {\n+            public boolean matches(Object throwable) {\n+                Throwable cause = ((Throwable)throwable).getCause();\n+                return cause == null? false : cause.getMessage().contains(text); \n+            }\n+            public void describeTo(Description desc) {\n+                desc.appendText(\"exception cause's message doesn't contain \" + text);\n             }\n         };\n     }\n--- a/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n package org.mockitousage.verification;\n \n import static org.junit.Assert.*;\n-import static org.mockito.util.ExtraMatchers.contains;\n+import static org.mockito.util.ExtraMatchers.*;\n import static org.mockito.CrazyMatchers.*;\n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n     }\n     \n     @Test\n-    public void shouldPrintLastUnverifiedAsActualInvocation() {\n-        mock.oneArg(true);\n-        mock.simpleMethod();\n-        \n-        verify(mock).oneArg(true);\n-        try {\n-            verify(mock).twoArgumentMethod(1,2);\n-            fail();\n-        } catch (VerificationError expected) {\n-            String actualMessage = expected.getMessage();\n-            String expectedMessage = \n-                    \"\\n\" +\n-                    \"Wanted but not invoked:\" +\n-                    \"\\n\" +\n-                    \"IMethods.twoArgumentMethod(1, 2)\";\n-            \n-            assertEquals(expectedMessage, actualMessage);         \n-        }\n-    }\n-    \n-    @Test\n     public void shouldPrintActualAndWantedWhenTheDifferenceIsAboutArguments() {\n         mock.oneArg(true);\n         mock.twoArgumentMethod(1, 2);\n             verify(mock).simpleMethod(\"test\");\n             fail();\n         } catch (VerificationError e) {\n-            assertThat(e.getMessage(), contains(\"IMethods.simpleMethod(\\\"test\\\")\"));\n-            assertThat(e.getCause().getMessage(), contains(\"IMethods.simpleMethod()\"));\n+            assertThat(e, messageContains(\"IMethods.simpleMethod(\\\"test\\\")\"));\n+            assertThat(e, causeMessageContains(\"IMethods.simpleMethod()\"));\n         }\n     }    \n+    \n+    @Test\n+    public void shouldTreatFirstUnverifiedInvocationAsActualInvocation() {\n+        mock.oneArg(true);\n+        mock.simpleMethod();\n+        mock.differentMethod();\n+        mock.twoArgumentMethod(1, 2);\n+        \n+        try {\n+            verify(mock).oneArg(true);\n+            verify(mock).differentMethod();\n+            verify(mock).threeArgumentMethod(1, \"2\", \"3\");\n+            fail();\n+        } catch (VerificationError e) {\n+            assertThat(e, messageContains(\"IMethods.threeArgumentMethod(1, \\\"2\\\", \\\"3\\\")\"));\n+            assertThat(e, causeMessageContains(\"IMethods.simpleMethod()\"));\n+        }\n+    }  \n     \n     @Test\n     public void shouldPrintActualAndUnverifiedWantedWhenTheDifferenceIsAboutArguments() {\n             verify(mock).twoArgumentMethod(3, 1000);\n             fail();\n         } catch (VerificationError e) {\n-            assertThat(e.getMessage(), contains(\"IMethods.twoArgumentMethod(3, 1000)\"));\n-            assertThat(e.getCause().getMessage(), contains(\"IMethods.twoArgumentMethod(3, 3)\"));\n+            assertThat(e, messageContains(\"IMethods.twoArgumentMethod(3, 1000)\"));\n+            assertThat(e, causeMessageContains(\"IMethods.twoArgumentMethod(3, 3)\"));\n         }\n     }  \n     \n     }\n     \n     @Test\n-    public void shouldPrintMethodNicelyWhenMatcherUsed() throws Exception {\n+    public void shouldPrintMethodWhenMatcherUsed() throws Exception {\n         try {\n             verify(mock, atLeastOnce()).twoArgumentMethod(anyInt(), eq(100));\n             fail();\n     }\n     \n     @Test\n-    public void shouldPrintMethodNicelyWhenMissingInvocationWithArrayMatcher() {\n+    public void shouldPrintMethodWhenMissingInvocationWithArrayMatcher() {\n         mock.oneArray(new boolean[] { true, false, false });\n         \n         try {\n             verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n             fail();\n         } catch (VerificationError e) {\n-            assertThat(e.getMessage(), contains(\"IMethods.oneArray([false, false, false])\"));\n-            assertThat(e.getCause().getMessage(), contains(\"IMethods.oneArray([true, false, false])\"));\n-        }\n-    }\n-    \n-    @Test\n-    public void shouldPrintMethodNicelyWhenMissingInvocationWithVarargMatcher() {\n+            assertThat(e, messageContains(\"IMethods.oneArray([false, false, false])\"));\n+            assertThat(e, causeMessageContains(\"IMethods.oneArray([true, false, false])\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldPrintMethodWhenMissingInvocationWithVarargMatcher() {\n         mock.varargsString(10, \"one\", \"two\");\n         \n         try {\n             verify(mock).varargsString(10, \"two\", \"one\");\n             fail();\n         } catch (VerificationError e) {\n-            assertThat(e.getMessage(), contains(\"IMethods.varargsString(10, \\\"two\\\", \\\"one\\\")\"));\n-            assertThat(e.getCause().getMessage(), contains(\"IMethods.varargsString(10, \\\"one\\\", \\\"two\\\")\"));\n-        }\n-    }\n-    \n-    @Test\n-    public void shouldPrintMethodNicelyWhenMissingInvocationWithMatcher() {\n+            assertThat(e, messageContains(\"IMethods.varargsString(10, \\\"two\\\", \\\"one\\\")\"));\n+            assertThat(e, causeMessageContains(\"IMethods.varargsString(10, \\\"one\\\", \\\"two\\\")\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldPrintMethodWhenMissingInvocationWithMatcher() {\n         mock.simpleMethod(\"foo\");\n         \n         try {\n             verify(mock).simpleMethod(matches(\"burrito\"));\n             fail();\n         } catch (VerificationError e) {\n-            assertThat(e.getMessage(), contains(\"IMethods.simpleMethod(matches(\\\"burrito\\\"))\"));\n-            assertThat(e.getCause().getMessage(), contains(\"IMethods.simpleMethod(\\\"foo\\\")\"));\n+            assertThat(e, messageContains(\"IMethods.simpleMethod(matches(\\\"burrito\\\"))\"));\n+            assertThat(e, causeMessageContains(\"IMethods.simpleMethod(\\\"foo\\\")\"));\n         }\n     }\n     \n             verify(mock).simpleMethod(\"test\");\n             fail();\n         } catch (VerificationError e) {\n-            assertThat(e.getCause().getMessage(), contains(\"simpleMethod(null, null)\"));\n+            assertThat(e, causeMessageContains(\"simpleMethod(null, null)\"));\n         }\n     }\n }", "timestamp": 1197155925, "metainfo": ""}