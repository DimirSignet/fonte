{"sha": "96eb120024a113e4f3a974f4ab98ce8f200232ef", "log": "Refactored to make it easy for incoming feature (smarter printing verbose types for arguments)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401472", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.LinkedList;\n import java.util.List;\n \n-import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n-import org.hamcrest.SelfDescribing;\n-import org.hamcrest.StringDescription;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.MatchersPrinter;\n-import org.mockito.internal.matchers.CanPrintArgumentVerbosely;\n import org.mockito.internal.reporting.PrintSettings;\n import org.mockito.internal.reporting.PrintingFriendlyInocation;\n import org.mockito.internal.util.MockUtil;\n--- a/src/org/mockito/internal/reporting/PrintSettings.java\n+++ b/src/org/mockito/internal/reporting/PrintSettings.java\n         this.multiline = multiline;\n     }\n \n-    public void setVerboseArguments(boolean verboseArguments) {\n-    }\n-\n     public boolean isMultiline() {\n         return multiline;\n     }\n \n     public static PrintSettings verboseMatchers(Matcher ... verboselyPrinted) {\n         PrintSettings settings = new PrintSettings();\n-        settings.verboseMatchers.addAll((List) Arrays.asList(verboselyPrinted));\n+        settings.setMatchersToBePrintedVerbosely(verboselyPrinted);\n         return settings;\n     }\n \n         }\n         return false;\n     }\n+\n+    public void setMatchersToBePrintedVerbosely(Matcher[] toBePrintedVerbosely) {\n+        this.verboseMatchers = Arrays.asList(toBePrintedVerbosely);\n+    }\n }\n--- a/src/org/mockito/internal/reporting/SmartPrinter.java\n+++ b/src/org/mockito/internal/reporting/SmartPrinter.java\n  */\n package org.mockito.internal.reporting;\n \n+import org.hamcrest.Matcher;\n \n /**\n  * Makes sure both wanted and actual are printed consistently (single line or multiline)\n  * <p>\n  * Makes arguments printed with types if necessary\n  */\n+@SuppressWarnings(\"unchecked\")\n public class SmartPrinter {\n \n     private final String wanted;\n     private final String actual;\n \n-    public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual) {\n+    public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual, Matcher ... toBePrintedVerbosely) {\n         PrintSettings printSettings = new PrintSettings();\n         printSettings.setMultiline(wanted.toString().contains(\"\\n\") || actual.toString().contains(\"\\n\"));\n+        printSettings.setMatchersToBePrintedVerbosely(toBePrintedVerbosely);\n         \n         this.wanted = wanted.toString(printSettings);\n         this.actual = actual.toString(printSettings);\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+package org.mockito.internal.verification.argumentmatching;\n+\n+import java.util.List;\n+\n+import org.hamcrest.Matcher;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentMatchingTool {\n+\n+    public Matcher[] getSuspiciouslyNotMatchingArgs(List<Matcher> matchers, Object[] arguments) {\n+        return new Matcher[0];\n+    }\n+}\n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n \n import java.util.List;\n \n+import org.hamcrest.Matcher;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.reporting.SmartPrinter;\n+import org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool;\n \n+@SuppressWarnings(\"unchecked\")\n public class MissingInvocationChecker {\n     \n     private final Reporter reporter;\n         if (actualInvocations.isEmpty()) {\n             Invocation similar = finder.findSimilarInvocation(invocations, wanted);\n             if (similar != null) {\n-                SmartPrinter smartPrinter = new SmartPrinter(wanted, similar);\n+                ArgumentMatchingTool argumentMatchingTool = new ArgumentMatchingTool();\n+                Matcher[] toBePrintedVerbosely = argumentMatchingTool.getSuspiciouslyNotMatchingArgs(wanted.getMatchers(), similar.getArguments());\n+                SmartPrinter smartPrinter = new SmartPrinter(wanted, similar, toBePrintedVerbosely);\n                 reporter.argumentsAreDifferent(smartPrinter.getWanted(), smartPrinter.getActual(), similar.getLocation());\n             } else {\n                 reporter.wantedButNotInvoked(wanted, invocations);\n--- a/test/org/mockito/internal/verification/SmartPrinterTest.java\n+++ b/test/org/mockito/internal/verification/SmartPrinterTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.reporting.PrintingFriendlyInocation;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"unchecked\")\n public class SmartPrinterTest extends TestBase {\n \n     private PrintingFriendlyInocation multi;", "timestamp": 1244235761, "metainfo": ""}