{"sha": "4768a8c9d889060b64606f8c9b7b56ed090791e2", "log": "Made assertions consistent  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401347", "commit": "\n--- a/test/org/mockito/configuration/experimental/ConfigurationTest.java\n+++ b/test/org/mockito/configuration/experimental/ConfigurationTest.java\n             ConfigurationSupport.getConfiguration().setReturnValues(null);\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e, messageContains(\"Cannot set null ReturnValues!\"));\n+            assertContains(\"Cannot set null ReturnValues!\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n             checker.check(invocations, wanted, 4);\n             fail();\n         } catch (VerificationInOrderFailure e) {\n-            assertThat(e, messageContains(\"Wanted 4 times\"));\n-            assertThat(e, messageContains(\"But was 2 times\"));\n+            assertContains(\"Wanted 4 times\", e.getMessage());\n+            assertContains(\"But was 2 times\", e.getMessage());\n         }\n     }\n     \n             checker.check(invocations, wanted, 1);\n             fail();\n         } catch (VerificationInOrderFailure e) {\n-            assertThat(e, messageContains(\"Wanted 1 time\"));\n-            assertThat(e, messageContains(\"But was 2 times\"));\n+            assertContains(\"Wanted 1 time\", e.getMessage());\n+            assertContains(\"But was 2 times\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/SpyingOnRealObjectsTest.java\n+++ b/test/org/mockitousage/SpyingOnRealObjectsTest.java\n             spy(real);\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e, messageContains(\"Most likely it is a private class that is not visible by Mockito\"));\n+            assertContains(\"Most likely it is a private class that is not visible by Mockito\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n             verify(mock).simpleMethod(containsTest());\n             fail();\n         } catch (AssertionError e) {\n-            assertThat(e, messageContains(\"<String that contains xxx>\"));\n+            assertContains(\"<String that contains xxx>\", e.getMessage());\n         }\n     }\n \n                 }}));\n             fail();\n         } catch (AssertionError e) {\n-            assertThat(e, messageContains(\"<custom argument matcher>\"));\n-            assertThat(e, messageContains(\"foo\"));\n+            assertContains(\"<custom argument matcher>\", e.getMessage());\n+            assertContains(\"foo\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n+++ b/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n             verify(mock).simpleMethod(argThat(new ContainsX()));\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"contains 'X'\"));\n+            assertContains(\"contains 'X'\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n             mock.simpleMethod(AdditionalMatchers.not(\"jkl\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertThat(e, messageContains(\"No matchers found for Not(?).\"));\n+            assertContains(\"No matchers found for Not(?).\", e.getMessage());\n         }\n \n         try {\n             mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertThat(e, messageContains(\"2 matchers expected, 1 recorded.\"));\n+            assertContains(\"2 matchers expected, 1 recorded.\", e.getMessage());\n         }\n \n         try {\n             mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertThat(e, messageContains(\"3 matchers expected, 1 recorded.\"));\n+            assertContains(\"3 matchers expected, 1 recorded.\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n             verify(mock).oneArray(aryEq(nullArray));\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"oneArray(null)\"));\n+            assertContains(\"oneArray(null)\", e.getMessage());\n         }\n     }\n     \n             verify(mock).oneArg(eq(1.0D, 0.1D));\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"eq(1.0, 0.1)\"));\n+            assertContains(\"eq(1.0, 0.1)\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java\n+++ b/test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java\n             mock(IMethods.class);\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertThat(e, messageContains(\"Misplaced argument matcher\"));\n+            assertContains(\"Misplaced argument matcher\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/stacktrace/ClickableStackTracesTest.java\n+++ b/test/org/mockitousage/stacktrace/ClickableStackTracesTest.java\n             verifyTheMock(1, \"not foo\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"callMethodOnMock(\"));\n-            assertThat(e, messageContains(\"verifyTheMock(\"));\n+            assertContains(\"callMethodOnMock(\", e.getMessage());\n+            assertContains(\"verifyTheMock(\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java\n+++ b/test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java\n             verify(mock).simpleMethod();\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertThat(e, messageContains(\"-> at \"));\n-            assertThat(e, messageContains(\"misplacedArgumentMatcherHere(\"));\n+            assertContains(\"-> at \", e.getMessage());\n+            assertContains(\"misplacedArgumentMatcherHere(\", e.getMessage());\n         }\n     }\n \n             verify(mock).simpleMethod();\n             fail();\n         } catch (UnfinishedStubbingException e) {\n-            assertThat(e, messageContains(\"-> at \"));\n-            assertThat(e, messageContains(\"unfinishedStubbingHere(\"));\n+            assertContains(\"-> at \", e.getMessage());\n+            assertContains(\"unfinishedStubbingHere(\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n             doReturn(\"foo\").when(mock).booleanObjectReturningMethod();\n             fail();\n         } catch (Exception e) {\n-            assertThat(e, messageContains(\n-                    \"String cannot be returned by booleanObjectReturningMethod\" +\n+            assertContains(\"String cannot be returned by booleanObjectReturningMethod\" +\n                     \"\\n\" +\n-                    \"booleanObjectReturningMethod should return Boolean\"));\n+                    \"booleanObjectReturningMethod should return Boolean\",\n+                    e.getMessage());\n         }\n     }\n     \n             doReturn(null).when(mock).intReturningMethod();\n             fail();\n         } catch (Exception e) {\n-            assertThat(e, messageContains(\"null cannot be returned by intReturningMethod\"));\n+            assertContains(\"null cannot be returned by intReturningMethod\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n             Mockito.verify(mock, times(100)).clear();\n             fail();\n         } catch (TooLittleActualInvocations e) {\n-            assertThat(e, messageContains(\"mock.clear();\"));\n-            assertThat(e, messageContains(\"Wanted 100 times\"));\n-            assertThat(e, messageContains(\"was 3\"));\n+            assertContains(\"mock.clear();\", e.getMessage());\n+            assertContains(\"Wanted 100 times\", e.getMessage());\n+            assertContains(\"was 3\", e.getMessage());\n         }\n     }\n \n             Mockito.verify(mock, times(1)).clear();\n             fail();\n         } catch (TooManyActualInvocations e) {\n-            assertThat(e, messageContains(\"mock.clear();\"));\n-            assertThat(e, messageContains(\"Wanted 1 time\"));\n-            assertThat(e, messageContains(\"was 4\"));\n+            assertContains(\"mock.clear();\", e.getMessage());\n+            assertContains(\"Wanted 1 time\", e.getMessage());\n+            assertContains(\"was 4\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n             verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"iMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\"));\n+            assertContains(\"iMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\", e.getMessage());\n         }\n     }\n \n             verify(mock).simpleMethod(10);\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"simpleMethod(10)\"));\n-            assertThat(e, messageContains(\"simpleMethod()\"));\n+            assertContains(\"simpleMethod(10)\", e.getMessage());\n+            assertContains(\"simpleMethod()\", e.getMessage());\n         }\n     }\n \n             fail();\n         } catch (ArgumentsAreDifferent e) {\n             //TODO decide on messageContains matcher or assertContains\n-            assertThat(e, messageContains(\"(2, 1000)\"));\n-            assertThat(e, messageContains(\"(2, 2)\"));\n+            assertContains(\"(2, 1000)\", e.getMessage());\n+            assertContains(\"(2, 2)\", e.getMessage());\n         }\n     }\n \n             verify(mock, atLeastOnce()).twoArgumentMethod(1, 2);\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"twoArgumentMethod(1, 2)\"));\n+            assertContains(\"twoArgumentMethod(1, 2)\", e.getMessage());\n         }\n     }\n \n             verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"[false, false, false]\"));\n-            assertThat(e, messageContains(\"[true, false, false]\"));\n+            assertContains(\"[false, false, false]\", e.getMessage());\n+            assertContains(\"[true, false, false]\", e.getMessage());\n         }\n     }\n \n             verify(mock).varargsString(10, \"111\", \"222\", \"333\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"111\"));\n-            assertThat(e, messageContains(\"\\\"xxx\\\"\"));\n+            assertContains(\"111\", e.getMessage());\n+            assertContains(\"\\\"xxx\\\"\", e.getMessage());\n         }\n     }\n \n             verify(mock).simpleMethod(matches(\"burrito from Exmouth\"));\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"matches(\\\"burrito from Exmouth\\\")\"));\n-            assertThat(e, messageContains(\"\\\"foo\\\"\"));\n+            assertContains(\"matches(\\\"burrito from Exmouth\\\")\", e.getMessage());\n+            assertContains(\"\\\"foo\\\"\", e.getMessage());\n         }\n     }\n \n             verify(mock).simpleMethod(\"test\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"simpleMethod(null, null);\"));\n+            assertContains(\"simpleMethod(null, null);\", e.getMessage());\n         }\n     }\n     \n             verify(mock, never()).simpleMethod(1);\n             fail();\n         } catch (NeverWantedButInvoked e) {\n-            assertThat(e, messageContains(\"Never wanted here:\"));\n-            assertThat(e, messageContains(\"But invoked here:\"));\n+            assertContains(\"Never wanted here:\", e.getMessage());\n+            assertContains(\"But invoked here:\", e.getMessage());\n         }\n     }\n     \n             verify(mock).simpleMethod(\"bar\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"bar\"));\n-            assertThat(e, messageContains(\"foo\"));\n+            assertContains(\"bar\", e.getMessage());\n+            assertContains(\"foo\", e.getMessage());\n         }\n     }\n \n             verify(iHavefunkyName).simpleMethod(20);\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"iHavefunkyName.simpleMethod(20)\"));\n-            assertThat(e, messageContains(\"iHavefunkyName.simpleMethod(10)\"));\n+            assertContains(\"iHavefunkyName.simpleMethod(20)\", e.getMessage());\n+            assertContains(\"iHavefunkyName.simpleMethod(10)\", e.getMessage());\n         }\n     }\n     \n             verify(veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock).simpleMethod();\n             fail();\n         } catch(WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock.simpleMethod()\"));\n+            assertContains(\"veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock.simpleMethod()\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n             verify(mock, times(100)).clear();\n             fail();\n         } catch (TooLittleActualInvocations e) {\n-            assertThat(e, messageContains(\"Wanted 100 times\"));\n-            assertThat(e, messageContains(\"was 2\"));\n+            assertContains(\"Wanted 100 times\", e.getMessage());\n+            assertContains(\"was 2\", e.getMessage());\n         }\n     }\n \n             verify(mock, times(1)).clear();\n             fail();\n         } catch (TooManyActualInvocations e) {\n-            assertThat(e, messageContains(\"Wanted 1 time\"));\n-            assertThat(e, messageContains(\"was 2 times\"));\n+            assertContains(\"Wanted 1 time\", e.getMessage());\n+            assertContains(\"was 2 times\", e.getMessage());\n         }\n     }\n \n             verify(mock, times(0)).clear();\n             fail();\n         } catch (NeverWantedButInvoked e) {\n-            assertThat(e, messageContains(\"Never wanted here\"));\n+            assertContains(\"Never wanted here\", e.getMessage());\n         }\n     }\n \n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n             inOrder.verify(mockOne, atLeastOnce()).differentMethod();\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"differentMethod()\"));\n+            assertContains(\"differentMethod()\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n         };\n     }\n \n-    public static <T> Assertor<Throwable> messageContains(final String text) {\n-        return new Assertor<Throwable>() {\n-            public void assertValue(Throwable value) {\n-                assertTrue(\"This substring: \\n\" + text + \n-                        \"\\nshould occur in this exception message:\" + value.getMessage()\n-                        , ((Throwable) value).getMessage().contains(text));\n-            }\n-        };\n-    }\n-\n     public static void assertContains(String sub, String string) {\n         assertTrue(\"\\n\" +\n                 \"This substing:\" +", "timestamp": 1240168449, "metainfo": ""}