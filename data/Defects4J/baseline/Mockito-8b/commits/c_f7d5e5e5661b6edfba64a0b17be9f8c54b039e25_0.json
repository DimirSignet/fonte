{"sha": "f7d5e5e5661b6edfba64a0b17be9f8c54b039e25", "log": "rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40983", "commit": "\n--- a/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n \n public class MissingInvocationCheckerTest extends TestBase {\n \n-    private MissingInvocationChecker verifier;\n+    private MissingInvocationChecker checker;\n     \n     private InvocationsFinderStub finderStub;\n     private ReporterStub reporterStub;\n     public void setup() {\n         reporterStub = new ReporterStub();\n         finderStub = new InvocationsFinderStub();\n-        verifier = new MissingInvocationChecker(finderStub, reporterStub);\n+        checker = new MissingInvocationChecker(finderStub, reporterStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n         invocations = asList(new InvocationBuilder().toInvocation());\n     @Test\n     public void shouldAskFinderForActualInvocations() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        verifier.check(invocations, wanted);\n+        checker.check(invocations, wanted);\n         \n         assertSame(invocations, finderStub.invocations);\n     }\n     @Test\n     public void shouldPassBecauseActualInvocationFound() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        verifier.check(invocations, wanted);\n+        checker.check(invocations, wanted);\n     }\n     \n     @Test\n     public void shouldAskAnalyzerForSimilarInvocation() {\n-        verifier.check(invocations, wanted);\n+        checker.check(invocations, wanted);\n         \n         assertSame(invocations, finderStub.invocations);\n     }\n         assertTrue(finderStub.actualToReturn.isEmpty());\n         finderStub.similarToReturn = null;\n         \n-        verifier.check(invocations, wanted);\n+        checker.check(invocations, wanted);\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertNull(reporterStub.actualInvocationStackTrace);\n         Invocation actualInvocation = new InvocationBuilder().toInvocation();\n         finderStub.similarToReturn = actualInvocation;\n         \n-        verifier.check(invocations, wanted);\n+        checker.check(invocations, wanted);\n         \n         assertNotNull(reporterStub.wanted);\n         assertNotNull(reporterStub.actual);\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderCheckerTest.java\n \n public class MissingInvocationInOrderCheckerTest extends TestBase {\n \n-    private MissingInvocationInOrderChecker verifier;\n+    private MissingInvocationInOrderChecker checker;\n     private ReporterStub reporterStub;\n     private InvocationMatcher wanted;\n     private LinkedList<Invocation> invocations;\n     public void setup() {\n         reporterStub = new ReporterStub();\n         finderStub = new InvocationsFinderStub();\n-        verifier = new MissingInvocationInOrderChecker(finderStub, reporterStub);\n+        checker = new MissingInvocationInOrderChecker(finderStub, reporterStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n         invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n         Invocation actual = new InvocationBuilder().toInvocation();\n         finderStub.allMatchingUnverifiedChunksToReturn.add(actual);\n         \n-        verifier.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n     }\n     \n     @Test\n     public void shouldReportWantedButNotInvoked() throws Exception {\n         assertTrue(finderStub.allMatchingUnverifiedChunksToReturn.isEmpty());\n-        verifier.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n         \n         assertEquals(wanted, reporterStub.wanted);\n     }\n         Invocation previous = new InvocationBuilder().toInvocation();\n         finderStub.previousInOrderToReturn = previous;\n         \n-        verifier.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertEquals(previous, reporterStub.previous);\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n \n public class NumberOfInvocationsCheckerTest extends TestBase {\n \n-    private NumberOfInvocationsChecker verifier;\n+    private NumberOfInvocationsChecker checker;\n     //TODO checkers should not be verifiers\n     private ReporterStub reporterStub;\n     private InvocationMatcher wanted;\n     public void setup() {\n         reporterStub = new ReporterStub();\n         finderStub = new InvocationsFinderStub();\n-        verifier = new NumberOfInvocationsChecker(reporterStub, finderStub);\n+        checker = new NumberOfInvocationsChecker(reporterStub, finderStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n         invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     public void shouldReportTooLittleActual() throws Exception {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n-        verifier.check(invocations, wanted, 100);\n+        checker.check(invocations, wanted, 100);\n         \n         assertEquals(1, reporterStub.actualCount);\n         assertEquals(100, reporterStub.wantedCount);\n         \n         finderStub.actualToReturn.addAll(asList(first, second));\n         \n-        verifier.check(invocations, wanted, 100);\n+        checker.check(invocations, wanted, 100);\n         \n         assertSame(second.getStackTrace(), reporterStub.stackTrace);\n     }\n     public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound() throws Exception {\n         assertTrue(finderStub.actualToReturn.isEmpty());\n         \n-        verifier.check(invocations, wanted, 100);\n+        checker.check(invocations, wanted, 100);\n         \n         assertNull(reporterStub.stackTrace);\n     }\n         \n         finderStub.actualToReturn.addAll(asList(first, second, third));\n         \n-        verifier.check(invocations, wanted, 2);\n+        checker.check(invocations, wanted, 2);\n         \n         assertSame(third.getStackTrace(), reporterStub.stackTrace);\n     }\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n-        verifier.check(invocations, wanted, 1);\n+        checker.check(invocations, wanted, 1);\n         \n         assertEquals(2, reporterStub.actualCount);\n         assertEquals(1, reporterStub.wantedCount);\n         Invocation invocation = new InvocationBuilder().toInvocation();\n         finderStub.actualToReturn.add(invocation);\n         \n-        verifier.check(invocations, wanted, 0);\n+        checker.check(invocations, wanted, 0);\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertEquals(invocation.getStackTrace(), reporterStub.stackTrace);\n //        finderStub.actualToReturn.add(invocation);\n //        assertFalse(invocation.isVerified());\n //        \n-//        verifier.verify(invocations, wanted, VerificationModeFactory.atLeastOnce());\n+//        checker.verify(invocations, wanted, VerificationModeFactory.atLeastOnce());\n //        \n //        assertTrue(invocation.isVerified());\n //    }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderCheckerTest.java\n \n public class NumberOfInvocationsInOrderCheckerTest extends TestBase {\n \n-    private NumberOfInvocationsInOrderChecker verifier;\n+    private NumberOfInvocationsInOrderChecker checker;\n     private Reporter reporter;\n     private InvocationMatcher wanted;\n     private LinkedList<Invocation> invocations;\n     public void setup() {\n         reporter = new Reporter();\n         finderStub = new InvocationsFinderStub();\n-        verifier = new NumberOfInvocationsInOrderChecker(finderStub, reporter);\n+        checker = new NumberOfInvocationsInOrderChecker(finderStub, reporter);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n         invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     @Test\n     public void shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty() throws Exception {\n         assertTrue(finderStub.validMatchingChunkToReturn.isEmpty());\n-        verifier.check(invocations, wanted, 0);\n+        checker.check(invocations, wanted, 0);\n     }\n     \n     @Test\n     public void shouldPassIfChunkMatches() throws Exception {\n         finderStub.validMatchingChunkToReturn.add(wanted.getInvocation());\n         \n-        verifier.check(invocations, wanted, 1);\n+        checker.check(invocations, wanted, 1);\n     }\n     \n     @Test\n         finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n         \n         try {\n-            verifier.check(invocations, wanted, 4);\n+            checker.check(invocations, wanted, 4);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 4 times but was 2\"));\n         finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n         \n         try {\n-            verifier.check(invocations, wanted, 1);\n+            checker.check(invocations, wanted, 1);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 1 time but was 2\"));\n         assertFalse(invocation.isVerifiedInOrder());\n         finderStub.validMatchingChunkToReturn.addAll(asList(invocation)); \n         \n-        verifier.check(invocations, wanted, 1);\n+        checker.check(invocations, wanted, 1);\n         \n         assertTrue(invocation.isVerifiedInOrder());\n     }", "timestamp": 1223983367, "metainfo": ""}