{"sha": "82b8bbe92092d350dfd7708f283db4014f736cb6", "log": "removed some TODOs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40231", "commit": "\n--- a/src/org/mockito/internal/invocation/ActualInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/ActualInvocationsFinder.java\n \n     public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n         if (mode.strictMode()) {\n-            return strictlyMatching(invocations, wanted, mode); \n+            List<Invocation> unverified = new InvocationsAnalyzer().removeUntilLastStrictlyVerified(invocations);\n+            return strictlyMatching(unverified, wanted, mode); \n         } else {\n             return nonStrictlyMatching(invocations, wanted);\n         }\n         List<ObjectsChunk<Invocation>> chunks = chunker.chunk(invocations, new MatchesWantedSeer(wanted));\n         List<Invocation> firstMatching = new LinkedList<Invocation>(); \n         for(ObjectsChunk<Invocation> chunk : chunks) {\n-            if (!wanted.matches(chunk.getObject())) {\n+            boolean wantedMatchesActual = wanted.matches(chunk.getObject());\n+            if (!wantedMatchesActual) {\n                 continue;\n             }\n             \n         return actual;\n     }\n     \n-    public List<Invocation> findStrictlyUnverifiedInvocations(List<Invocation> invocations, InvocationMatcher wanted,\n-            VerificationModeImpl mode) {\n-        //TODO test or merge with strictlyMatching\n-        List<Invocation> unverified = new InvocationsAnalyzer().removeUntilLastStrictlyVerified(invocations);\n-        \n-        return this.findInvocations(unverified, wanted, mode);\n-    }\n-    \n     private final class MatchesWantedSeer implements Chunker.ChunkSeer<Invocation> {\n         private final InvocationMatcher wanted;\n \n--- a/src/org/mockito/internal/invocation/ObjectsChunk.java\n+++ b/src/org/mockito/internal/invocation/ObjectsChunk.java\n     public void addObject(T object) {\n         objects.add(object);\n     }\n+    \n+    @Override\n+    public String toString() {\n+        return \"Chunk size: \" + getSize() + \", objects: \" + objects;\n+    }\n }\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n             return;\n         }\n         \n-        List<Invocation> actualInvocations;\n-        if (mode.strictMode()) {\n-            //TODO test it\n-            //TODO push it to findInvocations\n-            actualInvocations = finder.findStrictlyUnverifiedInvocations(invocations, wanted, mode);\n-        } else {\n-            actualInvocations = finder.findInvocations(invocations, wanted, mode);\n-        }\n+        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n         if (actualInvocations.size() == 0) {\n             //TODO add test to check that invocations are passed here, not actual...\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n         }\n         \n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n-        if (mode.strictMode()) {\n-            //TODO test it\n-            actualInvocations = finder.findStrictlyUnverifiedInvocations(invocations, wanted, mode);\n-        }\n         \n         int actualCount = actualInvocations.size();\n         int wantedCount = mode.wantedCount();\n--- a/test/org/mockito/internal/invocation/ActualInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/ActualInvocationsFinderTest.java\n         \n         actual = finder.findInvocations(invocations, new InvocationMatcher(differentMethodInvocation), atLeastOnce());\n         assertThat(actual, collectionHasExactlyInOrder(differentMethodInvocation));\n+    }\n+    \n+    @Test\n+    public void shouldSearchOnlyAfterLastStrictlyVerified() throws Exception {\n+        simpleMethodInvocation.markVerifiedStrictly();\n+        simpleMethodInvocationTwo.markVerifiedStrictly();\n+        \n+        List<Invocation> actual = finder.findInvocations(invocations, new InvocationMatcher(simpleMethodInvocation), new VerificationModeBuilder().strict());\n+        assertTrue(actual.isEmpty());\n+    }\n+    \n+    @Test\n+    public void shouldSearchAndFindOnlyAfterLastStrictlyVerified() throws Exception {\n+        differentMethodInvocation.markVerifiedStrictly();\n+        \n+        Invocation lastInvocation = new InvocationBuilder().simpleMethod().toInvocation();\n+        invocations.add(lastInvocation);\n+        \n+        List<Invocation> actual = finder.findInvocations(invocations, new InvocationMatcher(simpleMethodInvocation), new VerificationModeBuilder().strict());\n+        assertThat(actual, collectionHasExactlyInOrder(lastInvocation));\n     }\n \n     @Test", "timestamp": 1198500427, "metainfo": ""}