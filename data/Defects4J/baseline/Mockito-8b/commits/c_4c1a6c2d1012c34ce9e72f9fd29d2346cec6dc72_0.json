{"sha": "4c1a6c2d1012c34ce9e72f9fd29d2346cec6dc72", "log": "Renaming the isEmpty call on the String as it's part of the JDK 6. Added better Javadoc on ClassPathLoader", "commit": "\n--- a/src/org/mockito/internal/configuration/ClassPathLoader.java\n+++ b/src/org/mockito/internal/configuration/ClassPathLoader.java\n import java.util.Enumeration;\n import java.util.List;\n \n+/**\n+ * Loads configuration or extension points available in the classpath.\n+ *\n+ * <p>\n+ * <ul>\n+ *     <li>\n+ *         Can load the mockito configuration. The user who want to provide his own mockito configuration\n+ *         should write the class <code>org.mockito.configuration.MockitoConfiguration</code> that implements\n+ *         {@link IMockitoConfiguration}. For example :\n+ *         <pre class=\"code\"><code class=\"java\">\n+ * package org.mockito.configuration;\n+ *\n+ * //...\n+ *\n+ * public class MockitoConfiguration implements IMockitoConfiguration {\n+ *     boolean enableClassCache() { return false; }\n+ *\n+ *     // ...\n+ * }\n+ *     </code></pre>\n+ *     </li>\n+ *     <li>\n+ *         Can load available mockito extensions. Currently Mockito only have one extension point the\n+ *         {@link MockMaker}. This extension point allows a user to provide his own bytecode engine to build mocks.\n+ *         <br>Suppose you wrote an extension to create mocks with some <em>Awesome</em> library, in order to tell\n+ *         Mockito to use it you need to put in your classpath\n+ *         <ol style=\"list-style-type: lower-alpha\">\n+ *             <li>The implementation itself, for example <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n+ *             <li>A file named <code>org.mockito.plugins.MockMaker</code> in a folder named\n+ *             <code>mockito-extensions</code>, the content of this file need to have <strong>one</strong> line with\n+ *             the qualified name <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n+ *         </ol>\n+ *     </li>\n+ * </ul>\n+ * </p>\n+ */\n public class ClassPathLoader {\n     private static final MockMaker mockMaker = findPlatformMockMaker();\n+    public static final String MOCKITO_CONFIGURATION_CLASS_NAME = \"org.mockito.configuration.MockitoConfiguration\";\n \n     /**\n      * @return configuration loaded from classpath or null\n         //Trying to get config from classpath\n         Class configClass;\n         try {\n-            configClass = (Class) Class.forName(\"org.mockito.configuration.MockitoConfiguration\");\n+            configClass = (Class) Class.forName(MOCKITO_CONFIGURATION_CLASS_NAME);\n         } catch (ClassNotFoundException e) {\n             //that's ok, it means there is no global config, using default one.\n             return null;\n         try {\n             return (IMockitoConfiguration) configClass.newInstance();\n         } catch (ClassCastException e) {\n-            throw new MockitoConfigurationException(\"\\n\" +\n-                    \"MockitoConfiguration class must implement org.mockito.configuration.IMockitoConfiguration interface.\", e);\n+            throw new MockitoConfigurationException(\"MockitoConfiguration class must implement \" + IMockitoConfiguration.class.getName() + \" interface.\", e);\n         } catch (Exception e) {\n-            throw new MockitoConfigurationException(\"\\n\" +\n-                    \"Unable to instantiate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?\", e);\n+            throw new MockitoConfigurationException(\"Unable to instantiate \" + MOCKITO_CONFIGURATION_CLASS_NAME +\" class. Does it have a safe, no-arg constructor?\", e);\n         }\n     }\n \n     /**\n-     * Returns the best mock maker available for the current runtime.\n+     * Returns the implementation of the mock maker available for the current runtime.\n+     *\n+     * <p>Returns {@link CglibMockMaker} if no {@link MockMaker} extension exists\n+     * or is visible in the current classpath.</p>\n      */\n     public static MockMaker getMockMaker() {\n         return mockMaker;\n      * Scans the classpath to find a mock maker plugin if one is available,\n      * allowing mockito to run on alternative platforms like Android.\n      */\n-    private static MockMaker findPlatformMockMaker() {\n+    static MockMaker findPlatformMockMaker() {\n         for (MockMaker mockMaker : loadImplementations(MockMaker.class)) {\n             return mockMaker; // return the first one service loader finds (if any)\n         }\n                 in = resource.openStream();\n                 for (String line : readerToLines(new InputStreamReader(in, \"UTF-8\"))) {\n                     String name = stripCommentAndWhitespace(line);\n-                    if (!name.isEmpty()) {\n+                    if (name.length() != 0) {\n                         result.add(service.cast(loader.loadClass(name).newInstance()));\n                     }\n                 }\n             } catch (Exception e) {\n-                throw new MockitoException(\n+                throw new MockitoConfigurationException(\n                         \"Failed to load \" + service + \" using \" + resource, e);\n             } finally {\n                 closeQuietly(in);\n         return result;\n     }\n \n-    static List<String> readerToLines(Reader reader) throws IOException {\n+    private static List<String> readerToLines(Reader reader) throws IOException {\n         List<String> result = new ArrayList<String>();\n         BufferedReader lineReader = new BufferedReader(reader);\n         String line;\n         return result;\n     }\n \n-    static String stripCommentAndWhitespace(String line) {\n+    private static String stripCommentAndWhitespace(String line) {\n         int hash = line.indexOf('#');\n         if (hash != -1) {\n             line = line.substring(0, hash);\n         return line.trim();\n     }\n \n-    static void closeQuietly(InputStream in) {\n+    private static void closeQuietly(InputStream in) {\n         if (in != null) {\n             try {\n                 in.close();", "timestamp": 1333125916, "metainfo": ""}