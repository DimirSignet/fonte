{"sha": "70eb8ea26abda6e6e4fd042857d948e9c1241f28", "log": "added new feature - annotations for shorthand mock creation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40303", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * <p>\n  * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n  * the first one is more explicit and can read better.\n+ * \n+ * <h3>Shorthand for mocks creation - &#064;Mock annotation</h3>\n+ * \n+ * <pre>\n+ *   public class ArticleManagerTest { \n+ *     \n+ *       &#064;Mock private ArticleCalculator calculator;\n+ *       &#064;Mock private ArticleDatabase database;\n+ *       &#064;Mock private UserProvider userProvider;\n+ *     \n+ *       private ArticleManager manager;\n+ *       \n+ * </pre>\n+ * \n+ * <ul>\n+ * <li>Minimizes repetitive mock creation code.</li> \n+ * <li>Makes the test class more readable.</li>\n+ * </ul>\n+ *\n+ * See examples in javadoc for {@link MockitoAnnotations}\n  */\n public class Mockito extends Matchers {\n \n--- /dev/null\n+++ b/src/org/mockito/MockitoAnnotations.java\n+package org.mockito;\n+\n+import static java.lang.annotation.ElementType.*;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Field;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+/**\n+ * <ul>\n+ * <li>Allows shorthand mock creation.</li> \n+ * <li>Minimizes repetitive mock creation code.</li> \n+ * <li>Makes the test class more readable.</li>\n+ * </ul>\n+ * \n+ * <pre>\n+ *   public class ArticleManagerTest extends SampleBaseTestCase { \n+ *     \n+ *       &#064;Mock private ArticleCalculator calculator;\n+ *       &#064;Mock private ArticleDatabase database;\n+ *       &#064;Mock private UserProvider userProvider;\n+ *     \n+ *       private ArticleManager manager;\n+ *     \n+ *       &#064;Before public void setup() {\n+ *           manager = new ArticleManager(userProvider, database, calculator);\n+ *       }\n+ *   }\n+ *   \n+ *   public class SampleBaseTestCase {\n+ *   \n+ *       &#064;Before public void initMocks() {\n+ *           MockitoAnnotations.initMocks(this);\n+ *       }\n+ *   }\n+ * </pre>\n+ * \n+ * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated mocks.\n+ * <p>\n+ * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n+ * You can also put it in your JUnit4 runner (&#064;RunWith).\n+ * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n+ */\n+public class MockitoAnnotations {\n+\n+    /**\n+     * Allows shorthand mock creation, see examples in javadoc for {@link MockitoAnnotations}.\n+     */\n+    @Target( { FIELD })\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface Mock {}\n+\n+    /**\n+     * Initializes objects annotated with &#064;Mock for given testClass.\n+     * See examples in javadoc for {@link MockitoAnnotations}.\n+     */\n+    public static void initMocks(Object testClass) {\n+        if (testClass == null) {\n+            throw new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations\");\n+        }\n+        \n+        Field[] fields = testClass.getClass().getDeclaredFields();\n+        for (Field f : fields) {\n+            if (f.isAnnotationPresent(Mock.class)) {\n+                f.setAccessible(true);\n+                try {\n+                    f.set(testClass, Mockito.mock(f.getType()));\n+                } catch (IllegalAccessException e) {\n+                    throw new MockitoException(\"Problems initiating mocks annotated with @Mock\", e);\n+                }\n+            }\n+        }\n+    }\n+}\n--- a/src/org/mockito/exceptions/base/MockitoException.java\n+++ b/src/org/mockito/exceptions/base/MockitoException.java\n     private static final long serialVersionUID = 1L;\n \n     private StackTraceElement[] unfilteredStackTrace;\n+    \n+    public MockitoException(String message, Throwable t) {\n+        super(message, t);\n+        filterStackTrace();\n+    }\n \n     public MockitoException(String message) {\n         super(message);\n+        filterStackTrace();\n+    }\n \n+    private void filterStackTrace() {\n         unfilteredStackTrace = getStackTrace();\n         \n         StackTraceFilter filter = new StackTraceFilter();\n         filter.filterStackTrace(this);\n     }\n-    \n+\n     public StackTraceElement[] getUnfilteredStackTrace() {\n         return unfilteredStackTrace;\n     }\n--- /dev/null\n+++ b/test/org/mockitousage/AnnotationsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.RequiresValidState;\n+import org.mockito.MockitoAnnotations.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class AnnotationsTest extends RequiresValidState {\n+\n+    @Mock List list;\n+    @Mock final Map map = new HashMap();\n+    \n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+    \n+    @Test\n+    public void shouldInitMocks() throws Exception {\n+        list.clear();\n+        map.clear();\n+        \n+        verify(list).clear();\n+        verify(map).clear();\n+    }\n+    \n+    @Test\n+    public void shouldScreamWhenInitializingMocksForNullClass() throws Exception {\n+        try {\n+            MockitoAnnotations.initMocks(null);\n+            fail();\n+        } catch (MockitoException e) {\n+            assertEquals(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations\",\n+                    e.getMessage());\n+        }\n+    }\n+}\n--- a/test/org/mockitousage/sample/MockitoSampleTest.java\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n \n import java.util.Arrays;\n \n+import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Mockito;\n+import org.mockito.InOrder;\n import org.mockito.RequiresValidState;\n-import org.mockito.InOrder;\n \n public class MockitoSampleTest extends RequiresValidState {\n     \n+    private ArticleCalculator mockCalculator;\n+    private ArticleDatabase mockDatabase;\n+    \n+    private ArticleManager articleManager;\n+    \n+    @Before\n+    public void setup() {\n+        mockCalculator = mock(ArticleCalculator.class);\n+        mockDatabase = mock(ArticleDatabase.class);\n+        \n+        articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+    }\n+\n     @Test\n     public void managerCountsArticlesAndSavesThemInTheDatabase() {\n-        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n-        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n-        \n-        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n-\n         stub(mockCalculator.countArticles(\"Guardian\")).toReturn(12);\n         stub(mockCalculator.countArticlesInPolish(\"Guardian\")).toReturn(5);\n         \n     \n     @Test\n     public void managerCountsArticlesUsingCalculator() {\n-        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n-        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n-        \n-        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n-\n         articleManager.updateArticleCounters(\"Guardian\");\n \n         verify(mockCalculator).countArticles(\"Guardian\");\n     \n     @Test\n     public void managerSavesArticlesInTheDatabase() {\n-        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n-        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n-        \n-        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n-\n         articleManager.updateArticleCounters(\"Guardian\");\n \n         verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 0);\n     \n     @Test\n     public void managerUpdatesNumberOfRelatedArticles() {\n-        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n-        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n-        \n-        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n-\n         Article articleOne = new Article();\n         Article articleTwo = new Article();\n         Article articleThree = new Article();\n         \n         stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(1);\n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(12);\n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(0);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleTwo)).toReturn(12);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleThree)).toReturn(0);\n         \n         stub(mockDatabase.getArticlesFor(\"Guardian\")).toReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n         \n     \n     @Test\n     public void verificationInOrderAndArgumentMatchers() {\n-        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n-        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n-        \n-        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n-\n         Article articleOne = new Article();\n         Article articleTwo = new Article();\n         \n         stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(1);\n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(12);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleTwo)).toReturn(12);\n         \n         stub(mockDatabase.getArticlesFor(\"Guardian\")).toReturn(Arrays.asList(articleOne, articleTwo)); \n         ", "timestamp": 1200701637, "metainfo": ""}