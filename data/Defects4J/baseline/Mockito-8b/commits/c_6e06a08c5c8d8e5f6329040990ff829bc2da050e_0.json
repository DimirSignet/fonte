{"sha": "6e06a08c5c8d8e5f6329040990ff829bc2da050e", "log": "Refactoring of exception messages - following the new patterns of storing and presenting locations of errors / verification failures  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401289", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n-import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.NotAMockException;\n     }\n     \n     public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous, HasStackTrace previousStackTrace) {\n-        WantedAnywhereAfterFollowingInteraction cause = new WantedAnywhereAfterFollowingInteraction(join(\n-                        \"Wanted anywhere AFTER following interaction:\",\n-                        previous.toString()));\n-        cause.setStackTrace(previousStackTrace.getStackTrace());\n+//        WantedAnywhereAfterFollowingInteraction cause = new WantedAnywhereAfterFollowingInteraction(join(\n+//                        \"Wanted anywhere AFTER following interaction:\",\n+//                        previous.toString()));\n+//        cause.setStackTrace(previousStackTrace.getStackTrace());\n         \n         throw new VerifcationInOrderFailure(join(\n                     \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n-                    wanted.toString()\n-        ), cause);\n+                    wanted.toString(),\n+                    \"-> at \" + new Location(),\n+                    \"Wanted anywhere AFTER following interaction:\",\n+                    previous.toString(),\n+                    \"-> at \" + previousStackTrace.getStackTrace()[0],\n+                    \"\"\n+        ));\n     }\n \n     public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n--- a/src/org/mockito/exceptions/base/HasStackTrace.java\n+++ b/src/org/mockito/exceptions/base/HasStackTrace.java\n  */\n package org.mockito.exceptions.base;\n \n+// TODO this needs to go away - what if stack trace is empty due to\n+// multithreaded tests or something - I'm always accessing the first element on\n+// the ST!\n public interface HasStackTrace {\n-    \n+\n     void setStackTrace(StackTraceElement[] stackTrace);\n-    \n+\n     StackTraceElement[] getStackTrace();\n \n }\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n             inOrder.verify(mock).simpleMethod(999);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"secondChunk\"));\n+            assertContains(\"secondChunk(\", e.getMessage());\n         }\n     }\n     \n             inOrder.verify(mockTwo).simpleMethod(999);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n+            assertContains(\"thirdChunk(\", e.getMessage());\n         }\n     }\n     \n             inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n+            assertContains(\"thirdChunk(\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n             inOrder.verify(mock).simpleMethod(999);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"fourth\"));\n+            assertContains(\"fourth(\", e.getMessage());\n         }\n     }\n     \n             inOrder.verify(mockTwo).simpleMethod(999);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"third\"));\n+            assertContains(\"third(\", e.getMessage());\n         }\n     }\n     \n             inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"second\"));\n+            assertContains(\"second(\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.mockito.Mockito;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n-import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n-                    \"iMethods.simpleMethod(11);\"; \n+                    \"iMethods.simpleMethod(11);\" +\n+                    \"\\n\" +\n+                    \"-> at \"; \n             \n-            assertEquals(expected, e.getMessage());\n-            \n-            assertEquals(e.getCause().getClass(), WantedAnywhereAfterFollowingInteraction.class);\n+            assertContains(expected, e.getMessage());\n             \n             String expectedCause = \n                 \"\\n\" +\n                 \"Wanted anywhere AFTER following interaction:\" +\n                 \"\\n\" +\n-                \"iMethods.simpleMethod(2);\";\n+                \"iMethods.simpleMethod(2);\" +\n+                \"\\n\" +\n+                \"-> at \";\n             \n-            assertEquals(expectedCause, e.getCause().getMessage());\n+            assertContains(expectedCause, e.getMessage());\n         }\n     }  \n     \n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n                     \"iMethods.simpleMethod(999);\"; \n-            assertEquals(expectedMessage, actualMessage);     \n+            assertContains(expectedMessage, actualMessage);     \n         }\n     }   \n     ", "timestamp": 1238762541, "metainfo": ""}