{"sha": "a099ad89a06d9788ce9f34817ba227e18e8b37f5", "log": "used StringBuilder instead of StringBuffer ArrayEquals deals with null  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40127", "commit": "\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n \n     //TODO don't use matchers to do printing args. there should be separate thing to print that stuff\n     private String getArgumentsString(List<IArgumentMatcher> matchers) {\n-        //TODO all StringBuffers need to be StringBuilders...\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n         result.append(\"(\");\n         for (IArgumentMatcher matcher : matchers) {\n             matcher.appendTo(result);\n--- a/src/org/mockito/internal/matchers/And.java\n+++ b/src/org/mockito/internal/matchers/And.java\n         return true;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"and(\");\n         for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n             it.next().appendTo(buffer);\n--- a/src/org/mockito/internal/matchers/Any.java\n+++ b/src/org/mockito/internal/matchers/Any.java\n         return true;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"<any>\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/ArrayEquals.java\n+++ b/src/org/mockito/internal/matchers/ArrayEquals.java\n \n     public boolean matches(Object actual) {\n         Object wanted = getWanted();\n-        if (wanted instanceof boolean[]\n+        if (wanted == null) {\n+            return super.matches(actual);\n+        } else if (wanted instanceof boolean[]\n                 && (actual == null || actual instanceof boolean[])) {\n             return Arrays.equals((boolean[]) wanted, (boolean[]) actual);\n         } else if (wanted instanceof byte[]\n                 && (actual == null || actual instanceof Object[])) {\n             return Arrays.equals((Object[]) wanted, (Object[]) actual);\n         } else {\n-            //TODO not tested\n-            return super.matches(actual);\n+            throw new IllegalStateException(\"Something went really wrong. Arguments passed to ArrayEquals have to be an array!\");\n         }\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         if (getWanted() != null && getWanted().getClass().isArray()) {\n             appendArray(createObjectArray(getWanted()), buffer);\n         } else {\n-            //TODO not tested\n             super.appendTo(buffer);\n         }\n     }\n \n-    private void appendArray(Object[] array, StringBuffer buffer) {\n+    private void appendArray(Object[] array, StringBuilder buffer) {\n         buffer.append(\"[\");\n         for (int i = 0; i < array.length; i++) {\n             new Equals(array[i]).appendTo(buffer);\n--- a/src/org/mockito/internal/matchers/Compare.java\n+++ b/src/org/mockito/internal/matchers/Compare.java\n         this.operator = result;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(comparator + \"(\" + wanted + \") \" + operator.getSymbol()\n                 + \" 0\");\n     }\n--- a/src/org/mockito/internal/matchers/CompareTo.java\n+++ b/src/org/mockito/internal/matchers/CompareTo.java\n         return matchResult(((Comparable) actual).compareTo(wanted));\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(getName() + \"(\" + wanted + \")\");\n     }\n     \n--- a/src/org/mockito/internal/matchers/Contains.java\n+++ b/src/org/mockito/internal/matchers/Contains.java\n                 && ((String) actual).indexOf(substring) >= 0;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"contains(\\\"\" + substring + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/EndsWith.java\n+++ b/src/org/mockito/internal/matchers/EndsWith.java\n         return (actual instanceof String) && ((String) actual).endsWith(suffix);\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"endsWith(\\\"\" + suffix + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n         return wanted.equals(actual);\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         appendQuoting(buffer);\n         buffer.append(wanted);\n         appendQuoting(buffer);\n     }\n \n-    private void appendQuoting(StringBuffer buffer) {\n+    private void appendQuoting(StringBuilder buffer) {\n         if (wanted instanceof String) {\n             buffer.append(\"\\\"\");\n         } else if (wanted instanceof Character) {\n--- a/src/org/mockito/internal/matchers/EqualsWithDelta.java\n+++ b/src/org/mockito/internal/matchers/EqualsWithDelta.java\n                         + delta.doubleValue();\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"eq(\" + wanted + \", \" + delta + \")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Find.java\n+++ b/src/org/mockito/internal/matchers/Find.java\n                 && Pattern.compile(regex).matcher((String) actual).find();\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"find(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/IArgumentMatcher.java\n+++ b/src/org/mockito/internal/matchers/IArgumentMatcher.java\n      * \n      * @param buffer the buffer to which the string representation is appended.\n      */\n-    void appendTo(StringBuffer buffer);\n+    void appendTo(StringBuilder buffer);\n }\n--- a/src/org/mockito/internal/matchers/InstanceOf.java\n+++ b/src/org/mockito/internal/matchers/InstanceOf.java\n         return (actual != null) && clazz.isAssignableFrom(actual.getClass());\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"isA(\" + clazz.getName() + \")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Matches.java\n+++ b/src/org/mockito/internal/matchers/Matches.java\n         return (actual instanceof String) && ((String) actual).matches(regex);\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"matches(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")\n                 + \"\\\")\");\n     }\n--- a/src/org/mockito/internal/matchers/Not.java\n+++ b/src/org/mockito/internal/matchers/Not.java\n         return !first.matches(actual);\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"not(\");\n         first.appendTo(buffer);\n         buffer.append(\")\");\n--- a/src/org/mockito/internal/matchers/NotNull.java\n+++ b/src/org/mockito/internal/matchers/NotNull.java\n         return actual != null;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"notNull()\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Null.java\n+++ b/src/org/mockito/internal/matchers/Null.java\n         return actual == null;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"isNull()\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Or.java\n+++ b/src/org/mockito/internal/matchers/Or.java\n         return false;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"or(\");\n         for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n             it.next().appendTo(buffer);\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n         return wanted == actual;\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"same(\");\n         appendQuoting(buffer);\n         buffer.append(wanted);\n         buffer.append(\")\");\n     }\n \n-    private void appendQuoting(StringBuffer buffer) {\n+    private void appendQuoting(StringBuilder buffer) {\n         if (wanted instanceof String) {\n             buffer.append(\"\\\"\");\n         } else if (wanted instanceof Character) {\n--- a/src/org/mockito/internal/matchers/StartsWith.java\n+++ b/src/org/mockito/internal/matchers/StartsWith.java\n                 && ((String) actual).startsWith(prefix);\n     }\n \n-    public void appendTo(StringBuffer buffer) {\n+    public void appendTo(StringBuilder buffer) {\n         buffer.append(\"startsWith(\\\"\" + prefix + \"\\\")\");\n     }\n }\n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n         assertEquals(equals, compareTo.matches(\"b\"));\n         assertEquals(higher, compareTo.matches(\"c\"));\n \n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n         compareTo.appendTo(sb);\n         assertEquals(name + \"(b)\", sb.toString());\n     }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import static org.junit.Assert.*;\n import static org.mockito.CrazyMatchers.*;\n import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.stub;\n+import static org.mockito.Mockito.*;\n \n import java.math.BigDecimal;\n import java.util.HashMap;\n \n import org.junit.*;\n import org.mockito.Mockito;\n+import org.mockito.exceptions.VerificationError;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n     }\n \n     @Test\n+    public void shouldArrayEqualsDealWithNullArray() throws Exception {\n+        Object[] nullArray = null;\n+        stub(mock.oneArray(aryEq(nullArray))).andReturn(\"null\");\n+        \n+        assertEquals(\"null\", mock.oneArray(nullArray));\n+        \n+        mock = mock(IMethods.class);\n+        \n+        try {\n+            verify(mock).oneArray(nullArray);\n+        } catch (VerificationError e) {\n+            String expected = \"\\n\" +\n+            \t\t\"Wanted but not invoked:\" +\n+            \t\t\"\\n\" +\n+            \t\t\"IMethods.oneArray(null)\";\n+            assertEquals(expected, e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n     public void arrayEqualsMatcher() {\n         stub(mock.oneArray(aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n         stub(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(\"1\");\n         stub(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(\"7\");\n         stub(mock.oneArray(aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n         stub(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n-\n+        \n         assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n         assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n         assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n import org.mockito.internal.matchers.*;\n \n public class MatchersToStringTest {\n-    private StringBuffer buffer;\n+    private StringBuilder buffer;\n \n     @Before\n     public void setup() {\n-        buffer = new StringBuffer();\n+        buffer = new StringBuilder();\n     }\n \n     @Test", "timestamp": 1196711481, "metainfo": ""}