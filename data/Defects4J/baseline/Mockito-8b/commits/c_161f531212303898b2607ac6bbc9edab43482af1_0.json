{"sha": "161f531212303898b2607ac6bbc9edab43482af1", "log": "Merge pull request #41 from vershinin/feature/answer_argument_casting  Add casted generic methods for getting arguments from InvocationOnMock", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationImpl.java\n+++ b/src/org/mockito/internal/invocation/InvocationImpl.java\n \n     public Object[] getArguments() {\n         return arguments;\n+    }\n+    \n+    @Override\n+    public <T> T getArgumentAt(int index, Class<T> clazz) {\n+        return (T) arguments[index];\n     }\n \n     public boolean isVerified() {\n--- a/src/org/mockito/invocation/InvocationOnMock.java\n+++ b/src/org/mockito/invocation/InvocationOnMock.java\n      * @return arguments\n      */\n     Object[] getArguments();\n+    \n+    /**\n+    * Returns casted argument using position\n+    * @param index argument position\n+    * @param clazz argument type\n+    * @return casted argument on position\n+    */\n+    <T extends Object> T getArgumentAt(int index, Class<T> clazz);\n+\n \n     /**\n      * calls real method\n--- a/test/org/mockito/internal/invocation/InvocationImplTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationImplTest.java\n             fail();\n         } catch(MockitoException e) {}\n     }\n+    \n+    @Test\n+    public void shouldReturnCastedArgumentAt(){\n+        //given\n+        int argument = 42;\n+        Invocation invocationOnInterface = new InvocationBuilder().method(\"twoArgumentMethod\").\n+            argTypes(int.class, int.class).args(1, argument).toInvocation();\n+\n+        //when\n+        int secondArgument = invocationOnInterface.getArgumentAt(1, int.class);\n+\n+        //then\n+        assertTrue(secondArgument == argument);\n+    }\n }\n--- a/test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java\n+++ b/test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java\n package org.mockito.internal.stubbing.answers;\n \n import org.junit.Test;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.stubbing.answers.ReturnsArgumentAt;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockitousage.IMethods;\n         }\n     }\n \n-\tprivate static InvocationOnMock invocationWith(final String... parameters) {\n-        return new InvocationOnMock() {\n-\n-            public Object getMock() {\n-                return null;\n-            }\n-\n-            public Method getMethod() {\n-                try {\n-                    return IMethods.class.getDeclaredMethod(\"varargsReturningString\", Object[].class);\n-                } catch (NoSuchMethodException e) {\n-                    throw new RuntimeException(e);\n-                }\n-            }\n-\n-            public Object[] getArguments() {\n-                return parameters;\n-            }\n-\n-            public Object callRealMethod() throws Throwable {\n-                return null;\n-            }\n-        };\n-    }\n+\tprivate static InvocationOnMock invocationWith(Object... parameters) {\n+\t\treturn new InvocationBuilder().method(\"varargsReturningString\").argTypes(Object[].class)\n+ \t\t\t.args(parameters).toInvocation();\n+\t}\n \n }", "timestamp": 1395050356, "metainfo": ""}