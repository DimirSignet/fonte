{"sha": "f76811e7e735962627317dd09a1f8258573bb14f", "log": "Added specific exception type.  Related to #90. It feels this scenario deserves a custom exception type.", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     }\n \n     public void cannotStubVoidMethodWithAReturnValue(String methodName) {\n-        throw new MockitoException(join(\n+        throw new CannotStubVoidMethodWithReturnValue(join(\n                 \"'\" + methodName + \"' is a *void method* and it *cannot* be stubbed with a *return value*!\",\n                 \"Voids are usually stubbed with Throwables:\",\n                 \"    doThrow(exception).when(mock).someVoidMethod();\",\n--- /dev/null\n+++ b/src/org/mockito/exceptions/misusing/CannotStubVoidMethodWithReturnValue.java\n+package org.mockito.exceptions.misusing;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class CannotStubVoidMethodWithReturnValue extends MockitoException {\n+    public CannotStubVoidMethodWithReturnValue(String message) {\n+        super(message);\n+    }\n+}\n--- a/test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java\n+++ b/test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java\n import org.fest.assertions.Assertions;\n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n             //Mockito thinks that we're stubbing void 'clear' method here and reports that boolean value cannot stub void method\n             when(clazzMock.isValid()).thenReturn(true);\n             fail();\n-        } catch (MockitoException e) {   //TODO SF custom exception\n+        } catch (CannotStubVoidMethodWithReturnValue e) {\n             Assertions.assertThat(e.getMessage())\n                     .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n         }", "timestamp": 1411927910, "metainfo": ""}