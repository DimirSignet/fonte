{"sha": "ba4db5fa5914475a620004a28f770429c0cdc18d", "log": "some rename job fixed one problem and added some more tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401424", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n-        return MOCKITO_CORE.mock(classToMock, configureWith().defaultBehavior(RETURNS_DEFAULTS));\n+        return MOCKITO_CORE.mock(classToMock, withSettings().defaultBehavior(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, String name) {\n-        return MOCKITO_CORE.mock(classToMock, configureWith().name(name).defaultBehavior(RETURNS_DEFAULTS));\n+        return MOCKITO_CORE.mock(classToMock, withSettings()\n+                .name(name)\n+                .defaultBehavior(RETURNS_DEFAULTS));\n     }\n     \n     /**\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n-        return MOCKITO_CORE.mock(classToMock, configureWith().defaultBehavior(returnValues));\n+        return MOCKITO_CORE.mock(classToMock, withSettings().defaultBehavior(returnValues));\n     }\n     \n     //TODO: javadoc\n      * @return a spy of the real object\n      */\n     public static <T> T spy(T object) {\n-        return MOCKITO_CORE.mock((Class<T>) object.getClass(), configureWith().spiedInstance(object).defaultBehavior(RETURNS_DEFAULTS));\n+        return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n+                .spiedInstance(object)\n+                .defaultBehavior(RETURNS_DEFAULTS));\n     }\n \n     /**\n         MOCKITO_CORE.validateMockitoUsage();\n     }\n \n-    public static MockSettings configureWith() {\n-        return new MockSettingsImpl();\n-    }\n-}\n+    public static MockSettings withSettings() {\n+        return new MockSettingsImpl().defaultBehavior(RETURNS_DEFAULTS);\n+    }\n+}\n--- a/src/org/mockito/ReturnValues.java\n+++ b/src/org/mockito/ReturnValues.java\n      * @return the return value\n      */\n     Object valueFor(InvocationOnMock invocation) throws Throwable;\n-}\n+}\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n         Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n-        Object optionalInstance = settings.getSpiedInstance();\n+        Object spiedInstance = settings.getSpiedInstance();\n         \n         T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n         \n-        if (optionalInstance != null) {\n-            new LenientCopyTool().copyToMock(optionalInstance, mock);\n+        if (spiedInstance != null) {\n+            new LenientCopyTool().copyToMock(spiedInstance, mock);\n         }\n         \n         return mock;\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n  */\n package org.mockito;\n \n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.*;\n \n import java.util.List;\n \n import org.junit.Test;\n import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockitoutil.TestBase;\n \n         Mockito.inOrder(\"notMock\");\n     }\n     \n+    @Test\n+    public void shouldStartingMockSettingsContainDefaultBehavior() {\n+        //when\n+        MockSettingsImpl settings = (MockSettingsImpl) Mockito.withSettings();\n+        \n+        //then\n+        assertEquals(Mockito.RETURNS_DEFAULTS, settings.getReturnValues());\n+    }\n+    \n     //TODO: after 1.8 stack filter does not work very well when it comes to threads?\n }\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n //\n //        spy = spy(Foo.class, \"some arg\", 1);\n //        \n-//            .\n //            .withName(\"foo\")\n //            .withDefaultBehavior(RETURNS_SMART_NULLS)\n //            .withInterfaces(Bar.class);\n--- a/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n+++ b/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n     @Test\n     public void shouldAllowMultipleInterfaces() {\n         //when\n-        Foo mock = mock(Foo.class, configureWith().extraInterfaces(IFoo.class, IBar.class));\n+        Foo mock = mock(Foo.class, withSettings().extraInterfaces(IFoo.class, IBar.class));\n         \n         //then\n         assertThat(mock, is(IFoo.class));\n     public void shouldScreamWhenNullPassedInsteadOfAnInterface() {\n         try {\n             //when\n-            mock(Foo.class, configureWith().extraInterfaces(IFoo.class, null));\n+            mock(Foo.class, withSettings().extraInterfaces(IFoo.class, null));\n             fail();\n         } catch (MockitoException e) {\n             //then\n     public void shouldScreamWhenNoArgsPassed() {\n         try {\n             //when\n-            mock(Foo.class, configureWith().extraInterfaces());\n+            mock(Foo.class, withSettings().extraInterfaces());\n             fail();\n         } catch (MockitoException e) {\n             //then\n     public void shouldScreamWhenNullPassedInsteadOfAnArray() {\n         try {\n             //when\n-            mock(Foo.class, configureWith().extraInterfaces((Class[]) null));\n+            mock(Foo.class, withSettings().extraInterfaces((Class[]) null));\n             fail();\n         } catch (MockitoException e) {\n             //then\n     public void shouldScreamWhenNonInterfacePassed() {\n         try {\n             //when\n-            mock(Foo.class, configureWith().extraInterfaces(Foo.class));\n+            mock(Foo.class, withSettings().extraInterfaces(Foo.class));\n             fail();\n         } catch (MockitoException e) {\n             //then\n     public void shouldScreamWhenTheSameInterfacesPassed() {\n         try {\n             //when\n-            mock(IMethods.class, configureWith().extraInterfaces(IMethods.class));\n+            mock(IMethods.class, withSettings().extraInterfaces(IMethods.class));\n             fail();\n         } catch (MockitoException e) {\n             //then\n--- a/test/org/mockitousage/basicapi/MocksCreationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksCreationTest.java\n  */\n package org.mockitousage.basicapi;\n \n+import static org.hamcrest.CoreMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+\n import org.junit.Test;\n import org.mockito.Mockito;\n+import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class MocksCreationTest extends TestBase {\n     public void shouldCreateMockWhenConstructorIsPrivate() {\n         assertNotNull(Mockito.mock(HasPrivateConstructor.class));\n     }\n+    \n+    @Test\n+    public void shouldCombineMockNameAndSmartNulls() {\n+        //given\n+        IMethods mock = mock(IMethods.class, withSettings()\n+            .defaultBehavior(RETURNS_SMART_NULLS)\n+            .name(\"great mockie\"));    \n+        \n+        //when\n+        IMethods smartNull = mock.iMethodsReturningMethod();\n+        String name = mock.toString();\n+        \n+        //then\n+        assertContains(\"great mockie\", name);\n+        //and\n+        try {\n+            smartNull.simpleMethod();\n+            fail();\n+        } catch(SmartNullPointerException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldCombineMockNameAndExtraInterfaces() {\n+        //given\n+        IMethods mock = mock(IMethods.class, withSettings()\n+                .extraInterfaces(List.class)\n+                .name(\"great mockie\"));\n+        \n+        //when\n+        String name = mock.toString();\n+        \n+        //then\n+        assertContains(\"great mockie\", name);\n+        //and\n+        assertThat(mock, is(List.class));\n+    }\n+    \n+    @Test\n+    public void shouldSpecifyMockNameViaSettings() {\n+        //given\n+        IMethods mock = mock(IMethods.class, withSettings().name(\"great mockie\"));\n+        \n+        //when\n+        String name = mock.toString();\n+        \n+        //then\n+        assertContains(\"great mockie\", name);\n+    }\n }\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n     \n     @Test\n     public void shouldScreamWhenNullPassedInsteadOfAnInterface() {\n-        mock(IMethods.class, configureWith().extraInterfaces(List.class, null));\n+        mock(IMethods.class, withSettings().extraInterfaces(List.class, null));\n     }\n     \n     @Test\n     public void shouldScreamWhenNonInterfacePassed() {\n-        mock(IMethods.class, configureWith().extraInterfaces(LinkedList.class));\n+        mock(IMethods.class, withSettings().extraInterfaces(LinkedList.class));\n     }\n     \n     @Test\n     public void shouldScreamWhenExtraIsTheSame() {\n-        mock(IMethods.class, configureWith().extraInterfaces(IMethods.class));\n+        mock(IMethods.class, withSettings().extraInterfaces(IMethods.class));\n     }\n     \n     @Test\n     public void shouldScreamWhenExtraInterfacesEmpty() {\n-        mock(IMethods.class, configureWith().extraInterfaces());\n+        mock(IMethods.class, withSettings().extraInterfaces());\n     }\n     \n     @Test\n     public void shouldScreamWhenExtraInterfacesIsANullArray() {\n-        mock(IMethods.class, configureWith().extraInterfaces((Class[]) null));\n+        mock(IMethods.class, withSettings().extraInterfaces((Class[]) null));\n     }\n }", "timestamp": 1242162259, "metainfo": ""}