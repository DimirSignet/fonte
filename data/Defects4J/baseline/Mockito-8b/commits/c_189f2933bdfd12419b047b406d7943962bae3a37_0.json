{"sha": "189f2933bdfd12419b047b406d7943962bae3a37", "log": "documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40226", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n     /**\n      * Verifies that no interactions happened on given mocks.\n+     * <pre>\n+     *   verifyZeroInteractions(mockOne, mockTwo);\n+     * </pre>\n+     * \n      * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n      * the first one is more explicit and can read better.\n      * <p>\n-     * \n      * See examples {@link Mockito}\n      * \n      * @param mocks to be verified\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n package org.mockito.internal.progress;\n \n-import java.util.Collections;\n-import java.util.List;\n-\n import org.mockito.Mockito;\n-import org.mockito.exceptions.base.MockitoException;\n \n /**\n  * Allows verifying that certain behavior happened at least once or exact number of times. E.g:\n  *   verify(mock, atLeastOnce()).someMethod(\"should be called at least once\");\n  * </pre>\n  * \n- * See examples {@link Mockito}\n+ * See examples {@link Mockito#verify(Object, VerificationMode)}\n  */\n-public class VerificationMode {\n-    \n-    enum Verification { EXPLICIT, NO_MORE_WANTED };\n-    \n-    private final Integer wantedInvocationCount;\n-    private final List<Object> mocksToBeVerifiedInSequence;\n-    private final Verification verification;\n-    \n-    private VerificationMode(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedInSequence, Verification verification) {\n-        if (wantedNumberOfInvocations != null && wantedNumberOfInvocations.intValue() < 0) {\n-            throw new MockitoException(\"Negative value is not allowed here\");\n-        }\n-        assert mocksToBeVerifiedInSequence != null;\n-        this.wantedInvocationCount = wantedNumberOfInvocations;\n-        this.mocksToBeVerifiedInSequence = mocksToBeVerifiedInSequence;\n-        this.verification = verification;\n-    }\n-    \n-    /**\n-     * TODO think about interfacing this class so it's not exposed\n-     * Don't use VerificationMode class directly. \n-     * <p>\n-     * Use Mockito.atLeastOnce() and Mockito.times()\n-     */\n-    public static void dont_use_this_class_directly_instead_use_static_methods_on_Mockito() {}\n-    \n-    public static VerificationMode atLeastOnce() {\n-        return new VerificationMode(null, Collections.emptyList(), Verification.EXPLICIT);\n-    }\n-\n-    public static VerificationMode times(int wantedNumberOfInvocations) {\n-        return new VerificationMode(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n-    }\n-\n-    public static VerificationMode strict(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedStrictly) {\n-        assert !mocksToBeVerifiedStrictly.isEmpty();\n-        return new VerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedStrictly, Verification.EXPLICIT);\n-    }\n-    \n-    public static VerificationMode noMoreInteractions() {\n-        return new VerificationMode(null, Collections.emptyList(), Verification.NO_MORE_WANTED);\n-    }\n-\n-    public Integer wantedCount() {\n-        return wantedInvocationCount;\n-    }\n-\n-    public List<Object> getAllMocksToBeVerifiedInSequence() {\n-        return mocksToBeVerifiedInSequence;\n-    }\n-\n-    public boolean wantedCountIsZero() {\n-        return wantedInvocationCount != null && wantedInvocationCount == 0;\n-    }\n-\n-    public boolean atLeastOnceMode() {\n-        return wantedInvocationCount == null && verification == Verification.EXPLICIT;\n-    }\n-\n-    public boolean strictMode() {\n-        return !mocksToBeVerifiedInSequence.isEmpty();\n-    }\n-\n-    public boolean explicitMode() {\n-        return verification == Verification.EXPLICIT;\n-    }\n-    \n-    public boolean missingMethodMode() {\n-        return explicitMode() && (atLeastOnceMode() || wantedInvocationCount == 1);\n-    }\n-\n-    public boolean exactNumberOfInvocationsMode() {\n-        return !atLeastOnceMode() && explicitMode();\n-    }\n-    \n-    @Override\n-    public String toString() {\n-        return \"Wanted invocations count: \" + wantedInvocationCount + \", Mocks to verify in order: \" + mocksToBeVerifiedInSequence;\n-    }\n-}\n+public interface VerificationMode {}", "timestamp": 1197930647, "metainfo": ""}