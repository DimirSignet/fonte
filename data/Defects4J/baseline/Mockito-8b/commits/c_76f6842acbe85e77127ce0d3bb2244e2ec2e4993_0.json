{"sha": "76f6842acbe85e77127ce0d3bb2244e2ec2e4993", "log": "Added method Matchers.refEq(T value, String... excludeFields) - per issue 60.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401361", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n     public static <T> T refEq(T value) {\n         return reportMatcher(new ReflectionEquals(value)).<T>returnNull();\n     }\n+\n+    /**\n+     * Object argument that is reflection-equal to the given value with support for excluding\n+     * selected fields from a class.\n+     * <p>\n+     * This matcher can be used when equals() is not implemented on compared objects.\n+     * Matcher uses java reflection API to compare fields of wanted and actual object.\n+     * <p>\n+     * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from\n+     * apache commons library.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param excludeFields\n+     *            fields to exclude.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T refEq(T value, String... excludeFields) {\n+        return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull();\n+    }\n     \n     /**\n      * Object argument that is the same as the given value.\n--- a/src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java\n+++ b/src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java\n import org.hamcrest.Description;\n import org.mockito.ArgumentMatcher;\n \n-\n public class ReflectionEquals extends ArgumentMatcher<Object>{\n     private final Object wanted;\n-\n+\tprivate final String[] excludeFields;\n+    \n     public ReflectionEquals(Object wanted) {\n         this.wanted = wanted;\n+\t\tthis.excludeFields = null;\t\t\n     }\n \n-    public boolean matches(Object actual) {\n-        return EqualsBuilder.reflectionEquals(wanted, actual);\n+    public ReflectionEquals(Object wanted, String... excludeFields) {\n+        this.wanted = wanted;\n+\t\tthis.excludeFields = excludeFields;\n+\t}\n+\n+\tpublic boolean matches(Object actual) {\n+\t\treturn  EqualsBuilder.reflectionEquals(wanted, actual, excludeFields);\n     }\n \n     public void describeTo(Description description) {\n--- a/test/org/mockitousage/matchers/ReflectionMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ReflectionMatchersTest.java\n         Child wanted = new Child(234234, \"foo\", 2, \"bar\");\n         verify(mock).run(refEq(wanted));\n     }\n+\n+    @Test\n+    public void shouldMatchWhenFieldValuesEqualWithOneFieldExcluded() throws Exception {\n+        Child wanted = new Child(1, \"foo\", 2, \"excluded\");\n+        verify(mock).run(refEq(wanted, \"childFieldTwo\"));\n+    }\n+\n+    @Test\n+    public void shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded() throws Exception {\n+        Child wanted = new Child(234234, \"foo\", 2, \"excluded\");\n+        verify(mock).run(refEq(wanted, \"childFieldTwo\", \"parentField\"));\n+        verify(mock).run(refEq(wanted, \"parentField\", \"childFieldTwo\"));\n+    }\n+    \n+    @Test(expected=ArgumentsAreDifferent.class)\n+    public void shouldNotMatchWithFieldsExclusion() throws Exception {\n+        Child wanted = new Child(234234, \"foo\", 2, \"excluded\");\n+        verify(mock).run(refEq(wanted, \"childFieldTwo\"));\n+    }    \n }", "timestamp": 1240391730, "metainfo": ""}