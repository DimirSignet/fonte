{"sha": "762b2db3f76742a78d8c1647f4c61e0a4bf84a21", "log": "In order to make mocks serializable started work on this feature. Refactoring. Removed some dead code & made some tiny comsmetics thanks to warnings from IDEA  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401597", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/IMockHandler.java\n+package org.mockito.internal;\n+\n+import org.mockito.internal.invocation.Invocation;\n+\n+public interface IMockHandler {\n+\n+    Object handle(Invocation invocation) throws Throwable;\n+}\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal;\n-\n-import java.util.List;\n \n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n+import java.util.List;\n+\n /**\n  * Invocation handler set on mock objects.\n  *\n  * @param <T> type of mock object to handle\n  */\n-public class MockHandler<T> {\n+public class MockHandler<T> implements IMockHandler {\n \n     MockitoStubber mockitoStubber;\n     MatchersBinder matchersBinder;\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal;\n-\n-import java.util.Arrays;\n-import java.util.List;\n \n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n-import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.api.VerificationMode;\n-import org.mockito.stubbing.Answer;\n-import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.OngoingStubbing;\n-import org.mockito.stubbing.Stubber;\n-import org.mockito.stubbing.VoidMethodStubbable;\n+import org.mockito.stubbing.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n         mockingProgress.resetOngoingStubbing();\n         \n         for (T m : mocks) {\n-            mockUtil.resetMock(m, mockingProgress);\n+            mockUtil.resetMock(m);\n         }\n     }\n     \n                 reporter.notAMockPassedWhenCreatingInOrder();\n             }\n         }\n-        InOrder inOrder = new InOrderImpl(Arrays.asList(mocks));\n-        return inOrder;\n+        return new InOrderImpl(Arrays.asList(mocks));\n     }\n     \n     public Stubber doAnswer(Answer answer) {\n \n     /**\n      * For testing purposes only. Is not the part of main API.\n+     * @return last invocation\n      */\n     public Invocation getLastInvocation() {\n         OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing());\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n  */\n package org.mockito.internal.creation;\n \n-import java.lang.reflect.Method;\n-\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.MockHandler;\n+import org.mockito.internal.IMockHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n import org.mockito.internal.progress.SequenceNumber;\n \n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+\n @SuppressWarnings(\"unchecked\")\n-public class MethodInterceptorFilter implements MethodInterceptor {\n-    \n+public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n+\n     private final Method equalsMethod;\n     private final Method hashCodeMethod;\n \n-    private final MockHandler mockHandler;\n+    private final IMockHandler mockHandler;\n+    CGLIBHacker cglibHacker;\n \n-    public MethodInterceptorFilter(Class toMock, MockHandler mockHandler) {\n+    public MethodInterceptorFilter(Class toMock, IMockHandler mockHandler) {\n         try {\n             if (toMock.isInterface()) {\n                 toMock = Object.class;\n             }\n-            equalsMethod = toMock.getMethod(\"equals\", new Class[] { Object.class });\n+            equalsMethod = toMock.getMethod(\"equals\", Object.class);\n             hashCodeMethod = toMock.getMethod(\"hashCode\", (Class[]) null);\n         } catch (NoSuchMethodException e) {\n             throw new RuntimeException(\"\\nSomething went really wrong. Object method could not be found!\" +\n                 \"\\n please report it to the mocking mailing list at http://mockito.org\");\n         }\n         this.mockHandler = mockHandler;\n+        this.cglibHacker = new CGLIBHacker();\n     }\n \n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\n             throws Throwable {\n         if (equalsMethod.equals(method)) {\n-            return Boolean.valueOf(proxy == args[0]);\n+            return proxy == args[0];\n         } else if (hashCodeMethod.equals(method)) {\n             return hashCodeForMock(proxy);\n         }\n-        \n-        new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n+\n+        cglibHacker.setMockitoNamingPolicy(methodProxy);\n         \n         Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), new FilteredCGLIBProxyRealMethod(methodProxy));\n         return mockHandler.handle(invocation);\n     }\n     \n-    public MockHandler getMockHandler() {\n+    public IMockHandler getMockHandler() {\n         return mockHandler;\n     }\n \n     private int hashCodeForMock(Object mock) {\n-        return new Integer(System.identityHashCode(mock));\n+        return System.identityHashCode(mock);\n     }\n }\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock, MockingProgress progress) {\n-        MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    public <T> void resetMock(T mock) {\n+        MockHandler<T> oldMockHandler = getMockHandler(mock);\n         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n         MethodInterceptorFilter newFilter = new MethodInterceptorFilter(Object.class, newMockHandler);\n         ((Factory) mock).setCallback(0, newFilter);\n         }\n \n         if (isMockitoMock(mock)) {\n-            return getInterceptor(mock).getMockHandler();\n+            return (MockHandler) getInterceptor(mock).getMockHandler();\n         } else {\n             throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n--- /dev/null\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+package org.mockito.internal.creation;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static org.mockito.Matchers.any;\n+import org.mockito.Mockito;\n+import static org.mockito.Mockito.never;\n+import org.mockito.internal.IMockHandler;\n+import org.mockito.internal.creation.cglib.CGLIBHacker;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockitousage.IMethods;\n+import org.mockitousage.MethodsImpl;\n+import org.mockitoutil.TestBase;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectOutputStream;\n+\n+public class MethodInterceptorFilterTest extends TestBase {\n+\n+    IMockHandler mockHanlder = Mockito.mock(IMockHandler.class);\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(IMethods.class, mockHanlder);\n+\n+    @Before\n+    public void setUp() {\n+        filter.cglibHacker = Mockito.mock(CGLIBHacker.class);        \n+    }\n+\n+    @Ignore\n+    @Test\n+    public void shouldBeSerializable() throws Exception {\n+        new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(filter);\n+    }\n+\n+    @Test\n+    public void shouldProvideOwnImplementationOfhashCode() throws Throwable {\n+        //given\n+        Object ret = filter.intercept(new MethodsImpl(), MethodsImpl.class.getMethod(\"hashCode\"), new Object[0], null);\n+\n+        //then\n+        assertTrue((Integer) ret != 0);\n+        Mockito.verify(mockHanlder, never()).handle(any(Invocation.class));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/MethodsImpl.java\n+package org.mockitousage;\n+\n+import javax.swing.text.ChangedCharSetException;\n+import java.io.IOException;\n+import java.util.*;\n+import java.nio.charset.CharacterCodingException;\n+\n+public class MethodsImpl implements IMethods {\n+    public boolean booleanReturningMethod() {\n+        return false;\n+    }\n+\n+    public Boolean booleanObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public byte byteReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Byte byteObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public short shortReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Short shortObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public char charReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Character charObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public int intReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Integer integerReturningMethod() {\n+        return null;\n+    }\n+\n+    public long longReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Long longObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public float floatReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Float floatObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public double doubleReturningMethod() {\n+        return 0;\n+    }\n+\n+    public Double doubleObjectReturningMethod() {\n+        return null;\n+    }\n+\n+    public Object objectReturningMethod(Object... objects) {\n+        return null;\n+    }\n+\n+    public Object objectReturningMethodNoArgs() {\n+        return null;\n+    }\n+\n+    public String oneArg(boolean value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Boolean value) {\n+        return null;\n+    }\n+\n+    public String forBoolean(Boolean value) {\n+        return null;\n+    }\n+\n+    public String oneArg(byte value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Byte value) {\n+        return null;\n+    }\n+\n+    public String forByte(Byte value) {\n+        return null;\n+    }\n+\n+    public String oneArg(short value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Short value) {\n+        return null;\n+    }\n+\n+    public String forShort(Short value) {\n+        return null;\n+    }\n+\n+    public String oneArg(char value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Character value) {\n+        return null;\n+    }\n+\n+    public String forCharacter(Character value) {\n+        return null;\n+    }\n+\n+    public String oneArg(int value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Integer value) {\n+        return null;\n+    }\n+\n+    public String forInteger(Integer value) {\n+        return null;\n+    }\n+\n+    public String oneArg(long value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Long value) {\n+        return null;\n+    }\n+\n+    public String forLong(Long value) {\n+        return null;\n+    }\n+\n+    public String oneArg(float value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Float value) {\n+        return null;\n+    }\n+\n+    public String forFloat(Float value) {\n+        return null;\n+    }\n+\n+    public String oneArg(double value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Double value) {\n+        return null;\n+    }\n+\n+    public String forDouble(Double value) {\n+        return null;\n+    }\n+\n+    public String oneArg(Object value) {\n+        return null;\n+    }\n+\n+    public String oneArg(String value) {\n+        return null;\n+    }\n+\n+    public String throwsNothing(boolean value) {\n+        return null;\n+    }\n+\n+    public String throwsIOException(int count) throws IOException {\n+        return null;\n+    }\n+\n+    public String throwsError(int count) {\n+        return null;\n+    }\n+\n+    public String simpleMethod() {\n+        return null;\n+    }\n+\n+    public String differentMethod() {\n+        return null;\n+    }\n+\n+    public String differentMethod(String argument) {\n+        return null;\n+    }\n+\n+    public String otherMethod() {\n+        return null;\n+    }\n+\n+    public String simpleMethod(String argument) {\n+        return null;\n+    }\n+\n+    public String simpleMethod(Collection<?> collection) {\n+        return null;\n+    }\n+\n+    public String simpleMethod(Object argument) {\n+        return null;\n+    }\n+\n+    public String simpleMethod(int argument) {\n+        return null;\n+    }\n+\n+    public String simpleMethod(String argOne, Integer argTwo) {\n+        return null;\n+    }\n+\n+    public String simpleMethod(String one, Integer two, Integer three, Integer four, Integer five) {\n+        return null;\n+    }\n+\n+    public String simpleMethod(String one, String[] two) {\n+        return null;\n+    }\n+\n+    public Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree) {\n+        return null;\n+    }\n+\n+    public void twoArgumentMethod(int one, int two) {\n+      \n+    }\n+\n+    public void arrayMethod(String[] strings) {\n+      \n+    }\n+\n+    public String oneArray(boolean[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(byte[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(char[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(double[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(float[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(int[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(long[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(short[] array) {\n+        return null;\n+    }\n+\n+    public String oneArray(Object[] array) {\n+        return null;\n+    }\n+\n+    public String canThrowException() throws ChangedCharSetException, CharacterCodingException {\n+        return null;\n+    }\n+\n+    public String oneArray(String[] array) {\n+        return null;\n+    }\n+\n+    public void varargsString(int i, String... string) {\n+      \n+    }\n+\n+    public Object varargsObject(int i, Object... object) {\n+        return null;\n+    }\n+\n+    public void varargs(Object... object) {\n+      \n+    }\n+\n+    public void varargs(String... string) {\n+      \n+    }\n+\n+    public List<String> listReturningMethod(Object... objects) {\n+        return null;\n+    }\n+\n+    public LinkedList<String> linkedListReturningMethod() {\n+        return null;\n+    }\n+\n+    public String toString(String foo) {\n+        return null;\n+    }\n+\n+    public void voidMethod() {\n+      \n+    }\n+\n+    public String forList(List<String> list) {\n+        return null;\n+    }\n+\n+    public String forSet(Set<String> anySet) {\n+        return null;\n+    }\n+\n+    public String forMap(Map<String, String> map) {\n+        return null;\n+    }\n+\n+    public String forCollection(Collection<String> collection) {\n+        return null;\n+    }\n+\n+    public Object[] arrayReturningMethod() {\n+        return new Object[0];\n+    }\n+\n+    public IMethods iMethodsReturningMethod() {\n+        return null;\n+    }\n+\n+    public String stringReturningMethod() {\n+        return null;\n+    }\n+\n+    public Object objectArgMethod(Object str) {\n+        return null;\n+    }\n+\n+    public Object listArgMethod(List<String> list) {\n+        return null;\n+    }\n+\n+    public Object collectionArgMethod(Collection<String> collection) {\n+        return null;\n+    }\n+\n+    public Object setArgMethod(Set<String> set) {\n+        return null;\n+    }\n+\n+    public void longArg(long longArg) {\n+      \n+    }\n+\n+    public void intArgumentMethod(int i) {\n+      \n+    }\n+}", "timestamp": 1251021182, "metainfo": ""}