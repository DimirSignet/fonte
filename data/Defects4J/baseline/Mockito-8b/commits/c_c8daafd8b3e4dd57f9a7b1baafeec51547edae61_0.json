{"sha": "c8daafd8b3e4dd57f9a7b1baafeec51547edae61", "log": "simple refactoring, added test that prototypes new API  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40613", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/examples/use/PrototypingTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.use;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.TestBase;\n+import org.mockitousage.examples.junitrunner.MockitoRunner;\n+\n+@RunWith(MockitoRunner.class)\n+public class PrototypingTest extends TestBase {\n+    \n+    @Ignore\n+    @Test\n+    public void prototypingNewAPI() throws Exception {\n+//        List mock = mock(List.class);\n+//        stubVoid(mock).toThrow(new RuntimeException()).on().clear();\n+//        \n+//        when(mock.get(0)).thenReturn(\"afsdf\");\n+//        \n+//        \n+//        when(mock.get(0))\n+//            .thenReturn(\"foo\")\n+//            .thenReturn(\"bar\")\n+//            .thenRaise(new RuntimeException());\n+//        \n+//        raise(new RuntimeException())\n+//            .thenRaise(new RuntimeException())\n+//            .thenReturn()\n+//            .when(mock).get(0);\n+//        \n+//        \n+//        \n+//        when(mock.get(0))\n+//            .thenReturn(\"foo\")\n+//            .thenReturn(\"bar\")\n+//            .thenThrow(new RuntimeException());\n+//    \n+//        doThrow(new RuntimeException())\n+//            .thenThrow(new RuntimeException())\n+//            .thenReturn()\n+//            .when(mock).get(0);\n+//\n+//        \n+//        raise(new RuntimeException()).when(mock).clear();\n+//        \n+//        raise(new RuntimeException())\n+//        .thenRaise(new RuntimeException())\n+//        .when(mock).clear();\n+//        \n+//        doReturn(\"two\")\n+//        .thenReturn(\"one\")\n+//        .when(mock).get(0);\n+    }\n+}\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n         mock.simpleMethod(\"foo\");\n \n         try {\n-            verify(mock).simpleMethod(argThat(new ArgumentMatcher<Object>() {\n+            verify(mock).simpleMethod((String) argThat(new ArgumentMatcher<Object>() {\n                 @Override public boolean matches(Object argument) {\n                     return false;\n                 }}));", "timestamp": 1211286940, "metainfo": ""}