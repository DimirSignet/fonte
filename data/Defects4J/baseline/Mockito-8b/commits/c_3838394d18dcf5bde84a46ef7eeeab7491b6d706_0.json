{"sha": "3838394d18dcf5bde84a46ef7eeeab7491b6d706", "log": "Made misplaced argument matchers point out in the exception message a stack trace location where was it misplaced. This dramatically speeds up debugging problems but may slightly decrease performance.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401288", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n package org.mockito;\n \n import org.hamcrest.BaseMatcher;\n+\n import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n import org.mockito.internal.util.Decamelizer;\n+\n+//TODO misplaced argument matcher when calling final method is weird and confusing\n \n /**\n  * Allows creating customized argument matchers. \n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     public void unfinishedVerificationException(Location location) {\n         UnfinishedVerificationException exception = new UnfinishedVerificationException(join(\n                 \"Missing method call for verify(mock) here:\",\n-                \"-> Located at \" + location,\n+                \"-> at \" + location,\n                 \"\",\n                 \"Example of correct verification:\",\n                 \"    verify(mock).doSomething()\",\n         throw new MockitoAssertionError(join(\"Wanted at most \" + pluralize(maxNumberOfInvocations) + \" but was \" + foundSize));\n     }\n \n-    public void misplacedArgumentMatcher() {\n+    public void misplacedArgumentMatcher(Location location) {\n         throw new InvalidUseOfMatchersException(join(\n-                \"Misplaced argument matcher detected!\",\n-                \"Somewhere before this line you probably misused Mockito argument matchers.\",\n-                \"For example you might have used anyObject() argument matcher outside of verification or stubbing.\",\n-                \"Here are examples of correct usage of argument matchers:\",\n+                \"Misplaced argument matcher detected here:\",\n+                \"-> at \" + location,\n+                \"\",\n+                \"You cannot use argument matchers outside of verification or stubbing.\",\n+                \"Also make sure you're *not* stubbing/verifying a final method with an argument matcher.\",\n+                \"Examples of correct usage of argument matchers:\",\n                 \"    when(mock.get(anyInt())).thenReturn(null);\",\n                 \"    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\",\n                 \"    verify(mock).someMethod(contains(\\\"foo\\\"))\",\n-                \"Also make sure you're *not* stubbing/verifying a final method with an argument matcher.\"\n+                \"\"\n                 ));\n     }\n }\n--- a/src/org/mockito/internal/debugging/Location.java\n+++ b/src/org/mockito/internal/debugging/Location.java\n \n import org.mockito.exceptions.base.StackTraceFilter;\n \n-public class Location {\n+public class Location  {\n \n     private final StackTraceElement firstTraceElement;\n \n         return this.firstTraceElement.toString();\n     }\n \n+    //TODO this needs to refactored - I don't want to talk to StackTraceElements any more\n     public StackTraceElement[] getStackTrace() {\n         return new StackTraceElement[] {firstTraceElement};\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/matchers/LocalizedMatcher.java\n+package org.mockito.internal.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.mockito.internal.debugging.Location;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class LocalizedMatcher implements Matcher {\n+\n+    private final Matcher actualMatcher;\n+    private Location location;\n+\n+    public LocalizedMatcher(Matcher actualMatcher) {\n+        this.actualMatcher = actualMatcher;\n+        this.location = new Location();\n+    }\n+\n+    public void _dont_implement_Matcher___instead_extend_BaseMatcher_() {\n+        // yeah right...\n+    }\n+\n+    public boolean matches(Object item) {\n+        return actualMatcher.matches(item);\n+    }\n+\n+    public void describeTo(Description description) {\n+        actualMatcher.describeTo(description);\n+    }\n+\n+    public Location getLocation() {\n+        return location;\n+    }\n+}\n--- a/src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java\n+++ b/src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.matchers.And;\n+import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.matchers.Not;\n import org.mockito.internal.matchers.Or;\n \n @SuppressWarnings(\"unchecked\")\n public class ArgumentMatcherStorageImpl implements ArgumentMatcherStorage {\n     \n-    private Stack<Matcher> matcherStack = new Stack<Matcher>();\n+    private Stack<LocalizedMatcher> matcherStack = new Stack<LocalizedMatcher>();\n     \n     /* (non-Javadoc)\n      * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportMatcher(org.hamcrest.Matcher)\n      */\n     public HandyReturnValues reportMatcher(Matcher matcher) {\n-        matcherStack.push(matcher);\n+        matcherStack.push(new LocalizedMatcher(matcher));\n         return new HandyReturnValues();\n     }\n \n     /* (non-Javadoc)\n      * @see org.mockito.internal.progress.ArgumentMatcherStorage#pullMatchers()\n      */\n+    //TODO does it have to return null?\n     public List<Matcher> pullMatchers() {\n         if (matcherStack.isEmpty()) {\n             return null;\n         }\n         \n-        ArrayList<Matcher> matchers = new ArrayList<Matcher>(matcherStack);\n+        List<LocalizedMatcher> matchers = new ArrayList<LocalizedMatcher>(matcherStack);\n         matcherStack.clear();\n-        return matchers;\n+        return (List) matchers;\n     }\n \n     /* (non-Javadoc)\n      */\n     public HandyReturnValues reportAnd() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n-        matcherStack.push(new And(popLastArgumentMatchers(2)));\n+        And and = new And(popLastArgumentMatchers(2));\n+        matcherStack.push(new LocalizedMatcher(and));\n         return new HandyReturnValues();\n     }\n \n      */\n     public HandyReturnValues reportNot() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n-        matcherStack.push(new Not(popLastArgumentMatchers(1).get(0)));\n+        Not not = new Not(popLastArgumentMatchers(1).get(0));\n+        matcherStack.push(new LocalizedMatcher(not));\n         return new HandyReturnValues();\n     }\n \n      */\n     public HandyReturnValues reportOr() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n-        matcherStack.push(new Or(popLastArgumentMatchers(2)));\n+        Or or = new Or(popLastArgumentMatchers(2));\n+        matcherStack.push(new LocalizedMatcher(or));\n         return new HandyReturnValues();\n     }\n \n      */\n     public void validateState() {\n         if (!matcherStack.isEmpty()) {\n+            LocalizedMatcher lastMatcher = matcherStack.lastElement();\n             matcherStack.clear();\n-            new Reporter().misplacedArgumentMatcher();\n+            new Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n         }\n     }\n \n--- /dev/null\n+++ b/test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stacktrace;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.StateMaster;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class ClickableStackTracesWhenFrameworkMisusedTest extends TestBase {\n+    \n+    @Mock private IMethods mock;\n+\n+    @After\n+    public void resetState() {\n+        StateMaster.reset();\n+    }\n+    \n+    private void misplacedArgumentMatcher() {\n+        anyString();\n+    }\n+\n+    @Test\n+    public void shouldPointOutMisplacedMatcher() {\n+        misplacedArgumentMatcher();\n+        try {\n+            verify(mock).simpleMethod();\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+            assertThat(e, messageContains(\"-> at \"));\n+            assertThat(e, messageContains(\"misplacedArgumentMatcher(\"));\n+        }\n+    }\n+}", "timestamp": 1238757933, "metainfo": ""}