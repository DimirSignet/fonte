{"sha": "2dc43ad2082ec3f543131d2bb5250ac30229ba36", "log": "actually reactivate the recording of interactions as it matters for testing the parallel serialization of mock", "commit": "\n--- a/test/org/mockitousage/serialization/ParallelSerializationTest.java\n+++ b/test/org/mockitousage/serialization/ParallelSerializationTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.SimpleSerializationUtil;\n \n+import java.nio.charset.CharacterCodingException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Random;\n import java.util.concurrent.*;\n \n import static org.mockito.Mockito.mock;\n public class ParallelSerializationTest {\n \n     @Test\n-    public void single_mock_being_serialized_and_deserialized_in_different_classloaders_by_multiple_threads() throws ExecutionException, InterruptedException {\n+    public void single_mock_being_serialized_in_different_classloaders_by_multiple_threads() throws ExecutionException, InterruptedException {\n         // given\n         int iterations = 2;\n         int threadingFactor = 200;\n         final ExecutorService executorService = Executors.newFixedThreadPool(threadingFactor);\n-        final IMethods iMethods = mock(IMethods.class, withSettings().serializable());\n+        final IMethods iMethods_that_store_invocations = mock(IMethods.class, withSettings().serializable());\n \n         // when\n         for (int i = 0; i <= iterations; i++) {\n                 futures.add(executorService.submit(new Callable<Object>() {\n                     public Object call() throws Exception {\n                         barrier_that_will_wait_until_threads_are_ready.await();\n-                        iMethods.arrayReturningMethod();\n \n-                        return SimpleSerializationUtil.serializeMock(iMethods).toByteArray();\n+                        randomCallOn(iMethods_that_store_invocations);\n+\n+                        return SimpleSerializationUtil.serializeMock(iMethods_that_store_invocations).toByteArray();\n                     }\n                 }));\n \n                 executorService.submit(new Callable<Object>() {\n                     public Object call() throws Exception {\n                         barrier_that_will_wait_until_threads_are_ready.await();\n-                        return iMethods.longObjectReturningMethod();\n+                        return iMethods_that_store_invocations.longObjectReturningMethod();\n                     }\n                 });\n             }\n             }\n         }\n     }\n+\n+    private void randomCallOn(IMethods iMethods) throws CharacterCodingException {\n+        int random = new Random().nextInt(10);\n+        switch (random) {\n+            case 0 : iMethods.arrayReturningMethod(); break;\n+            case 1 : iMethods.longObjectReturningMethod(); break;\n+            case 2 : iMethods.linkedListReturningMethod(); break;\n+            case 3 : iMethods.iMethodsReturningMethod(); break;\n+            case 4 : iMethods.canThrowException(); break;\n+            case 5 : iMethods.differentMethod(); break;\n+            case 6 : iMethods.voidMethod(); break;\n+            case 7 : iMethods.varargsString(1, \"\"); break;\n+            case 8 : iMethods.forMap(null); break;\n+            case 9 : iMethods.throwsNothing(false); break;\n+            default:\n+        }\n+    }\n }", "timestamp": 1357654792, "metainfo": ""}