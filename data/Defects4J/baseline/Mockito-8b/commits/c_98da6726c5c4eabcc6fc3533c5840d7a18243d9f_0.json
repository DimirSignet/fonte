{"sha": "98da6726c5c4eabcc6fc3533c5840d7a18243d9f", "log": "added test for performance tweaking made the invocation store only single stack trace element  --HG-- rename : test/org/mockitousage/PlaygroundTest.java => test/org/mockitousage/performance/LoadsOfMocksTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401265", "commit": "\n--- a/src/org/mockito/internal/debugging/Location.java\n+++ b/src/org/mockito/internal/debugging/Location.java\n \n public class Location {\n \n-    private final StackTraceElement[] stackTrace;\n+    private final StackTraceElement firstTraceElement;\n \n     public Location() {\n         StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n         StackTraceFilter filter = new StackTraceFilter();\n-        this.stackTrace = filter.filterStackTrace(stackTrace);\n+        this.firstTraceElement = filter.filterStackTrace(stackTrace)[0];\n     }\n \n     @Override\n     public String toString() {\n-        return this.stackTrace[0].toString();\n+        return this.firstTraceElement.toString();\n     }\n \n     public StackTraceElement[] getStackTrace() {\n-        return stackTrace;\n+        return new StackTraceElement[] {firstTraceElement};\n     }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/performance/LoadsOfMocksTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.performance;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class LoadsOfMocksTest extends TestBase {\n+\n+    @Ignore(\"Use it for performance checks\")\n+    @Test\n+    public void testSomething() {\n+        List mocks = new LinkedList();\n+        for (int i = 0; i < 50000; i++) {\n+            System.out.println(\"Mock no: \" + i);\n+            IMethods mock = mock(IMethods.class);\n+            mocks.add(mock);\n+            \n+            when(mock.simpleMethod(1)).thenReturn(\"one\");\n+            when(mock.simpleMethod(2)).thenReturn(\"two\");\n+            \n+            assertEquals(\"one\", mock.simpleMethod(1));\n+            assertEquals(\"two\", mock.simpleMethod(2));\n+            \n+            verify(mock).simpleMethod(1);\n+            verify(mock).simpleMethod(2);\n+        }\n+    }\n+}\n--- a/test/org/mockitousage/stacktrace/StackTrackeChangingTest.java\n+++ b/test/org/mockitousage/stacktrace/StackTrackeChangingTest.java\n             assertThat(e, hasMethodInStackTraceAt(0, \"verifySimpleMethodOnAMock\"));\n             assertThat(e, hasMethodInStackTraceAt(1, \"shouldShowActualInvocationAsExceptionCause\"));\n             assertThat(e.getCause(), hasMethodInStackTraceAt(0, \"simpleMethodOnAMock\"));\n-            assertThat(e.getCause(), hasMethodInStackTraceAt(1, \"shouldShowActualInvocationAsExceptionCause\"));\n         }\n     }\n \n     private void verifySimpleMethodOnAMock() {\n         verify(mock).simpleMethod();        \n     }\n-}\n+}", "timestamp": 1235070495, "metainfo": ""}