{"sha": "3930b7dc3a4ae211425a1a708cf979b204df0eaa", "log": "- in order to move Serializable out of interfaces and back to concrete classes -- made all implementations of Answer implements Serializable -- removed Serializable extension from Answer -- fixed test to show that any implementation of Answer must implement Serializable for mocks to be Serializable  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401743", "commit": "\n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n  */\n package org.mockito.internal.stubbing;\n \n+import java.io.Serializable;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n import org.mockito.stubbing.Answer;\n \n @SuppressWarnings(\"unchecked\")\n-public class StubbedInvocationMatcher extends InvocationMatcher implements Answer {\n+public class StubbedInvocationMatcher extends InvocationMatcher implements Answer, Serializable {\n \n     private static final long serialVersionUID = 4919105134123672727L;\n     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();\n--- a/src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.answers;\n+\n+import java.io.Serializable;\n \n import org.mockito.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n \n //It's ok to suppress deprecation because this class goes away as soon as ReturnValues disappears in future release\n @SuppressWarnings(\"deprecation\")\n-public class AnswerReturnValuesAdapter implements Answer<Object> {\n+public class AnswerReturnValuesAdapter implements Answer<Object>, Serializable {\n \n     private static final long serialVersionUID = 1418158596876713469L;\n     private final ReturnValues returnValues;\n--- a/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java\n+++ b/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.answers;\n+\n+import java.io.Serializable;\n \n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n  * <p>\n  */\n-public class CallsRealMethods implements Answer<Object> {\n+public class CallsRealMethods implements Answer<Object>, Serializable {\n     private static final long serialVersionUID = 9057165148930624087L;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n--- a/src/org/mockito/internal/stubbing/answers/DoesNothing.java\n+++ b/src/org/mockito/internal/stubbing/answers/DoesNothing.java\n  */\n package org.mockito.internal.stubbing.answers;\n \n+import java.io.Serializable;\n+\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n-public class DoesNothing implements Answer<Object> {\n+public class DoesNothing implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = 4840880517740698416L;\n \n--- a/src/org/mockito/internal/stubbing/answers/Returns.java\n+++ b/src/org/mockito/internal/stubbing/answers/Returns.java\n  */\n package org.mockito.internal.stubbing.answers;\n \n+import java.io.Serializable;\n+\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n-public class Returns implements Answer<Object> {\n+public class Returns implements Answer<Object>, Serializable {\n \n     private static final long serialVersionUID = -6245608253574215396L;\n     private final Object value;\n--- a/src/org/mockito/internal/stubbing/answers/ThrowsException.java\n+++ b/src/org/mockito/internal/stubbing/answers/ThrowsException.java\n  */\n package org.mockito.internal.stubbing.answers;\n \n+import java.io.Serializable;\n+\n import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n-public class ThrowsException implements Answer<Object> {\n+public class ThrowsException implements Answer<Object>, Serializable {\n \n     private static final long serialVersionUID = 1128820328555183980L;\n     private final Throwable throwable;\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n  * </li>\n  * </ul>\n  */\n-public class ReturnsEmptyValues implements Answer<Object> {\n+public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = 1998191268711234347L;\n \n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n+\n+import java.io.Serializable;\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n-public class ReturnsMocks implements Answer<Object> {\n+public class ReturnsMocks implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -6755257986994634579L;\n     private MockitoCore mockitoCore = new MockitoCore();\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n \n import org.mockito.Mockito;\n  * </li>\n  * </ul>\n  */\n-public class ReturnsMoreEmptyValues implements Answer<Object> {\n+public class ReturnsMoreEmptyValues implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -2816745041482698471L;\n     private Answer<Object> delegate = new ReturnsEmptyValues();\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n+import java.io.Serializable;\n import java.lang.reflect.Method;\n \n /**\n  * ReturnsSmartNulls will be probably the default return values strategy in\n  * Mockito 2.0\n  */\n-public class ReturnsSmartNulls implements Answer<Object> {\n+public class ReturnsSmartNulls implements Answer<Object>, Serializable {\n \n     private static final long serialVersionUID = 7618312406617949441L;\n \n--- a/src/org/mockito/stubbing/Answer.java\n+++ b/src/org/mockito/stubbing/Answer.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.stubbing;\n-\n-import java.io.Serializable;\n \n import org.mockito.invocation.InvocationOnMock;\n \n  * \n  * @param <T> the type to return.\n  */\n-public interface Answer<T> extends Serializable {\n+public interface Answer<T> {\n     /**\n      * @param invocation the invocation on the mock.\n      *\n--- a/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n+++ b/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"serial\")\n public class ReadingConfigurationFromClasspathTest extends TestBase {\n     \n     @Test\n--- a/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n+++ b/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n \n-@SuppressWarnings(\"serial\")\n public class MethodProxyBuilder {\n \n     public MockitoMethodProxy build() {\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n \n         // given\n         IMethods mock = mock(IMethods.class, withSettings().serializable());\n-        final String string = \"return value\";\n-        when(mock.objectArgMethod(anyString())).thenAnswer(new Answer<Object>() {\n-            public Object answer(InvocationOnMock invocation) {\n-                invocation.getArguments();\n-                invocation.getMock();\n-                return string;\n-            }\n-        });\n-\n-        // when\n-        ByteArrayOutputStream serialized = serializeMock(mock);\n-\n-        // then\n-        IMethods readObject = deserializeMock(serialized, IMethods.class);\n-        assertEquals(string, readObject.objectArgMethod(\"\"));\n-    }\n-\n+        CustomAnswersMustImplementSerializableForSerializationToWork answer = \n+            new CustomAnswersMustImplementSerializableForSerializationToWork();\n+        answer.string = \"return value\";\n+        when(mock.objectArgMethod(anyString())).thenAnswer(answer);\n+\n+        // when\n+        ByteArrayOutputStream serialized = serializeMock(mock);\n+\n+        // then\n+        IMethods readObject = deserializeMock(serialized, IMethods.class);\n+        assertEquals(answer.string, readObject.objectArgMethod(\"\"));\n+    }\n+\n+    class CustomAnswersMustImplementSerializableForSerializationToWork \n+        implements Answer<Object>, Serializable {\n+        private String string;\n+        public Object answer(InvocationOnMock invocation) throws Throwable {\n+            invocation.getArguments();\n+            invocation.getMock();\n+            return string;\n+        }\n+    }\n+  \n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public void shouldSerializeWithRealObjectSpy() throws Exception {\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"serial\")\n public class BDDMockitoTest extends TestBase {\n     \n     @Mock IMethods mock;\n--- a/test/org/mockitousage/spies/SpyingOnInterfacesTest.java\n+++ b/test/org/mockitousage/spies/SpyingOnInterfacesTest.java\n import org.mockito.stubbing.Answer;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings({\"unchecked\", \"serial\"})\n+@SuppressWarnings({\"unchecked\"})\n public class SpyingOnInterfacesTest extends TestBase {\n \n     @Test\n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings({\"unchecked\", \"deprecation\", \"serial\"})\n+@SuppressWarnings({\"unchecked\", \"deprecation\"})\n public class StubbingWithCustomAnswerTest extends TestBase {\n     @Mock\n     private IMethods mock;", "timestamp": 1258527251, "metainfo": ""}