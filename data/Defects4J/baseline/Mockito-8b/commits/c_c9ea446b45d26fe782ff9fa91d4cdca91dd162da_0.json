{"sha": "c9ea446b45d26fe782ff9fa91d4cdca91dd162da", "log": "Issue 399 generics : Added test (ignored for the time being) that replicates the issue", "commit": "\n--- a/test/org/mockitousage/stubbing/DeepStubsSerializableTest.java\n+++ b/test/org/mockitousage/stubbing/DeepStubsSerializableTest.java\n import static org.mockito.Mockito.*;\n \n import java.io.Serializable;\n+import java.util.Map;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.mockito.Matchers;\n import org.mockito.Mockito;\n import org.mockitoutil.SimpleSerializationUtil;\n \n         assertThat(deserializedSample.getSample().getNumber()).isEqualTo(STUBBED_INTEGER_VALUE);\n     }\n \n+\t@Test\n+\t@Ignore\n+\tpublic void should_serialize_and_deserialize_map_mocked_by_deep_stubs() throws Exception {\n+\t\t// given\n+\t\tMap map = Mockito.mock(Map.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());\n+\t\tMockito.when(map.entrySet().contains(Matchers.anyString())).thenReturn(STUBBED_BOOLEAN_VALUE);\n+\n+\t\t// when\n+\t\tObject o = SimpleSerializationUtil.serializeAndBack(map);\n+\t\t\n+\t\t// then\n+\t\tassertThat(o).isInstanceOf(Map.class);\n+\t\tMap deserializedMap = (Map) o;\n+\t\tassertThat(deserializedMap.entrySet().contains(\"Something\")).isEqualTo(STUBBED_BOOLEAN_VALUE);\n+\t}\n+\n \n     class SampleClass implements Serializable {\n         SampleClass2 getSample() {", "timestamp": 1394496004, "metainfo": ""}