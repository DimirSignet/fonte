{"sha": "418371858e875e9b9174d346cb0247f7bfe2df2b", "log": "Refactored runners code  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401392", "commit": "\n--- a/src/org/mockito/internal/runners/MockitoJUnit44RunnerImpl.java\n+++ b/src/org/mockito/internal/runners/MockitoJUnit44RunnerImpl.java\n import org.mockito.internal.runners.util.FrameworkUsageValidator;\n \n @SuppressWarnings(\"deprecation\")\n+//TODO: make it non visible for clients\n public class MockitoJUnit44RunnerImpl extends JUnit4ClassRunner {\n \n     public MockitoJUnit44RunnerImpl(Class<?> klass) throws InitializationError {\n--- a/src/org/mockito/internal/runners/RunnerFactory.java\n+++ b/src/org/mockito/internal/runners/RunnerFactory.java\n package org.mockito.internal.runners;\n-\n-import java.lang.reflect.Constructor;\n \n import org.junit.runner.Runner;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.runners.util.ClassProvider;\n \n public class RunnerFactory {\n \n+    private final ClassProvider classProvider;\n+\n+    RunnerFactory(ClassProvider classProvider) {\n+        this.classProvider = classProvider;\n+    }\n+\n+    public RunnerFactory() {\n+        this(new ClassProvider());\n+    }\n+\n     public Runner create(Class<?> klass) {\n-        Class<?> runnerClass;\n         try {\n-            runnerClass = Class.forName(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\");\n+            if (classProvider.hasJUnit45OrHigher()) {\n+                return classProvider.newInstance(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\", klass);\n+            } else {\n+                return classProvider.newInstance(\"org.mockito.internal.runners.MockitoJUnit44RunnerImpl\", klass);\n+            }\n         } catch (Throwable t) {\n-            try {\n-                runnerClass = Class.forName(\"org.mockito.internal.runners.MockitoJUnit44RunnerImpl\");\n-            } catch (Throwable t2) {\n-                throw new MockitoException(\n-                        \"\\n\" +\n-                        \"MockitoRunner can only be used with JUnit 4.4 or higher.\\n\" +\n-                        \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\" +\n-                        \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\" +\n-                        \"If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\\n\"\n-                        , t);\n-            }\n-        }\n-        \n-        try {\n-            Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n-            return (Runner) constructor.newInstance(klass);\n-        } catch (Exception e) {\n-            //TODO: same exception as above\n-            throw new MockitoException(\"foo\", e);\n+            throw new MockitoException(\n+                    \"\\n\" +\n+                    \"MockitoRunner can only be used with JUnit 4.4 or higher.\\n\" +\n+                    \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\" +\n+                    \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\" +\n+                    \"If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\\n\"\n+                    , t);\n         }\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/util/ClassProvider.java\n+package org.mockito.internal.runners.util;\n+\n+import java.lang.reflect.Constructor;\n+\n+import org.junit.runner.Runner;\n+\n+public class ClassProvider {\n+\n+    private static boolean hasJUnit45OrHigher; \n+\n+    static {\n+        try {\n+            Class.forName(\"org.junit.runners.BlockJUnit4ClassRunner\");\n+            hasJUnit45OrHigher = true;\n+        } catch (Throwable t) {\n+            hasJUnit45OrHigher = false;\n+        }\n+    }\n+    \n+    public boolean hasJUnit45OrHigher() {\n+        return hasJUnit45OrHigher;\n+    }\n+\n+    public Runner newInstance(String runnerClassName, Class<?> constructorParam) throws Throwable {\n+        Class<?> runnerClass = Class.forName(runnerClassName);\n+        Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n+        return (Runner) constructor.newInstance(constructorParam);   \n+    }\n+}\n--- a/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n  * <p>\n  * Do you think it is useful or not? Drop us an email at mockito@googlegroups.com\n  */\n+//TODO this runner fails badly when wrong JUnit is on the path\n public class VerboseMockitoJUnitRunner extends MockitoJUnitRunner {\n \n     private final MockitoLogger logger;\n--- /dev/null\n+++ b/test/org/mockito/internal/runners/RunnerFactoryTest.java\n+package org.mockito.internal.runners;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+\n+import org.junit.Test;\n+import org.junit.runner.Runner;\n+import org.junit.runners.model.InitializationError;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.runners.util.ClassProvider;\n+import org.mockitoutil.TestBase;\n+\n+public class RunnerFactoryTest extends TestBase {\n+\n+    static class ClassProviderStub extends ClassProvider {\n+        @Override\n+        public boolean hasJUnit45OrHigher() {\n+            return super.hasJUnit45OrHigher();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldCreateRunnerForJUnit44() {\n+        //given\n+        ClassProvider provider = new ClassProvider() {\n+            public boolean hasJUnit45OrHigher() {\n+                return false;\n+            }\n+        };\n+        RunnerFactory factory = new RunnerFactory(provider);\n+        \n+        //when\n+        Runner runner = factory.create(RunnerFactoryTest.class);\n+        \n+        //then\n+        assertThat(runner, is(MockitoJUnit44RunnerImpl.class));\n+    }\n+    \n+    @Test\n+    public void shouldCreateRunnerForJUnit45() {\n+        //given\n+        ClassProvider provider = new ClassProvider() {\n+            public boolean hasJUnit45OrHigher() {\n+                return true;\n+            }\n+        };\n+        RunnerFactory factory = new RunnerFactory(provider);\n+        \n+        //when\n+        Runner runner = factory.create(RunnerFactoryTest.class);\n+        \n+        //then\n+        assertThat(runner, is(MockitoJUnit45AndUpRunner.class));\n+    }\n+    \n+    @Test\n+    public void shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound() {\n+        //given\n+        ClassProvider provider = new ClassProvider() {\n+            public boolean hasJUnit45OrHigher() {\n+                return false;\n+            }\n+            public Runner newInstance(String runnerClassName, Class<?> constructorParam) throws Throwable {\n+                throw new InitializationError(\"Where is JUnit, dude?\");\n+            }\n+        };\n+        RunnerFactory factory = new RunnerFactory(provider);\n+        \n+        try {\n+            //when\n+            factory.create(RunnerFactoryTest.class);\n+            fail();\n+        } catch (MockitoException e) {\n+            //then\n+            assertContains(\"upgrade your JUnit version\", e.getMessage());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/runners/util/ClassProviderTest.java\n+package org.mockito.internal.runners.util;\n+\n+import org.junit.Test;\n+import org.junit.runner.Runner;\n+import org.mockitoutil.TestBase;\n+\n+\n+public class ClassProviderTest extends TestBase {\n+    \n+    @Test\n+    public void shouldKnowAboutJUnit45() throws Exception {\n+        //given\n+        ClassProvider provider = new ClassProvider();\n+        //then\n+        assertTrue(provider.hasJUnit45OrHigher());\n+        //I cannot test the opposite condition :(\n+    }\n+    \n+    @Test\n+    public void shouldCreateRunnerInstance() throws Throwable {\n+        //given\n+        ClassProvider provider = new ClassProvider();\n+        //when\n+        Runner runner = provider.newInstance(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\", ClassProviderTest.class);\n+        //then\n+        assertNotNull(runner);\n+    }\n+}", "timestamp": 1241289537, "metainfo": ""}