{"sha": "6e813ca4f9ef9f8944a91122c17bddc03ff265f1", "log": "Fixed issue 27 Appended user's patch that reports different arguments used when verifying in order  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401862", "commit": "\n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.reporting.SmartPrinter;\n+import org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool;\n import org.mockito.verification.VerificationMode;\n \n public class MissingInvocationInOrderChecker {\n         \n         Invocation previousInOrder = finder.findPreviousVerifiedInOrder(invocations);\n         if (previousInOrder == null) {\n-            reporter.wantedButNotInvoked(wanted);\n+            /**\n+             * It is ofcourse possible to have an issue where the arguments are different\n+             * rather that not invoked in order. Issue related to\n+             * http://code.google.com/p/mockito/issues/detail?id=27. If the previous order\n+             * is missing, then this method checks if the arguments are different or if the order\n+             * is not invoked.\n+             */\n+             List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n+             if (actualInvocations == null || actualInvocations.isEmpty())  {\n+                 Invocation similar = finder.findSimilarInvocation(invocations, wanted);\n+                 if (similar != null) {\n+                     Integer[] indicesOfSimilarMatchingArguments =\n+                             new ArgumentMatchingTool().getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),\n+                                     similar.getArguments());\n+                     SmartPrinter smartPrinter = new SmartPrinter(wanted, similar, indicesOfSimilarMatchingArguments);\n+                     reporter.argumentsAreDifferent(smartPrinter.getWanted(), smartPrinter.getActual(), similar.getLocation());\n+                 } else {\n+                     reporter.wantedButNotInvoked(wanted);\n+                 }\n+             }\n         } else {\n             reporter.wantedButNotInvokedInOrder(wanted, previousInOrder);\n         }\n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n import org.junit.Test;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n+import org.mockito.internal.reporting.SmartPrinter;\n import org.mockitoutil.TestBase;\n \n public class MissingInvocationInOrderCheckerTest extends TestBase {\n         \n         assertEquals(wanted, reporterStub.wanted);\n     }\n+\n+    @Test\n+    public void shouldReportArgumentsAreDifferent() throws Exception {\n+        assertTrue(finderStub.findInvocations(invocations, wanted).isEmpty());\n+        finderStub.similarToReturn = new InvocationBuilder().toInvocation();\n+        checker.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        SmartPrinter printer = new SmartPrinter(wanted, finderStub.similarToReturn, 0);\n+        assertEquals(printer.getWanted(), reporterStub.wantedString);\n+        assertEquals(printer.getActual(), reporterStub.actual);\n+        assertEquals(finderStub.similarToReturn.getLocation(), reporterStub.actualLocation);\n+     }\n     \n     @Test\n     public void shouldReportWantedDiffersFromActual() throws Exception {\n     class ReporterStub extends Reporter {\n         private PrintableInvocation wanted;\n         private PrintableInvocation previous;\n+        private String wantedString;\n+        private String actual;\n+        private Location actualLocation;\n         \n         @Override public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n             this.wanted = wanted;\n         @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n             this.wanted = wanted;\n         }\n+\n+        @Override public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n+            this.wantedString = wanted;\n+            this.actual = actual;\n+            this.actualLocation = actualLocation;\n+        }\n     }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n         }\n     } \n     \n-    @Ignore(\"i don't know how to implement it nicely... yet. See the enhancement 27\")\n     @Test\n     public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {\n         try {\n             inOrder.verify(one).simpleMethod(999);\n             fail();\n-        } catch (ArgumentsAreDifferent e) {\n-            String expected = \n-                    \"\\n\" +\n-                    \"Arguments are different!\" +\n-                    \"\\n\" +\n-                    \"IMethods.simpleMethod(999);\"; \n-            \n-            assertEquals(expected, e.getMessage());\n-            \n-            assertEquals(null, e.getCause());\n+        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {           \n+            assertContains(\"has different arguments\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotSayArgumentsAreDifferent() {\n+        //this is the last invocation so any next verification in order should simply say wanted but not invoked\n+        inOrder.verify(three).simpleMethod(3);\n+        try {\n+            inOrder.verify(one).simpleMethod(999);\n+            fail();\n+        } catch (VerificationInOrderFailure e) {\n+            assertContains(\"Wanted but not invoked\", e.getMessage());\n         }\n     } \n     ", "timestamp": 1267051026, "metainfo": ""}