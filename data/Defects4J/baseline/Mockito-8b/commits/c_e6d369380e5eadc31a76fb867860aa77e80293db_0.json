{"sha": "e6d369380e5eadc31a76fb867860aa77e80293db", "log": "merged verification modes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40937", "commit": "\n--- a/src/org/mockito/InOrderVerifier.java\n+++ b/src/org/mockito/InOrderVerifier.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.verification.VerificationMode;\n-import org.mockito.internal.verification.VerificationModeDecoder;\n import org.mockito.internal.verification.VerificationModeImpl;\n \n /**\n         if (!mocksToBeVerifiedInOrder.contains(mock)) {\n             reporter.inOrderRequiresFamiliarMock();\n         }\n-        Integer wantedCount = mode.wantedCount();\n-        if (new VerificationModeDecoder(mode).atLeastMode()) {\n-            return Mockito.verify(mock, VerificationModeImpl.inOrderAtLeast(wantedCount, mocksToBeVerifiedInOrder));\n-        } else {\n-            return Mockito.verify(mock, VerificationModeImpl.inOrder(wantedCount, mocksToBeVerifiedInOrder));            \n-        }\n+        mode.setMocksToBeVerifiedInOrder(mocksToBeVerifiedInOrder);\n+        return Mockito.verify(mock, mode);\n     }\n-}\n+}\n--- a/src/org/mockito/internal/verification/BasicVerificationMode.java\n+++ b/src/org/mockito/internal/verification/BasicVerificationMode.java\n \n import java.util.List;\n \n+import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n \n-/**\n- */\n public class BasicVerificationMode extends VerificationModeImpl implements VerificationMode {\n \n-    protected BasicVerificationMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,\n+    public BasicVerificationMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,\n             Verification verification) {\n         super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n+        if (mocksToBeVerifiedInOrder.isEmpty()) {\n+            doBasicVerification(invocations, wanted);\n+        } else {            \n+            doInOrderVerification(wanted);\n+        }\n+    }\n+\n+    private void doInOrderVerification(InvocationMatcher wanted) {\n+        List<Invocation> invocations;\n+        invocations = new AllInvocationsFinder().getAllInvocations(mocksToBeVerifiedInOrder);\n+\n+        MissingInvocationInOrderVerifier missingInvocation = new MissingInvocationInOrderVerifier();\n+        NumberOfInvocationsInOrderVerifier numberOfCalls = new NumberOfInvocationsInOrderVerifier();\n+        \n+        if (wantedCount() > 0 || (verification == Verification.AT_LEAST && wantedCount() == 1)) {\n+            missingInvocation.verify(invocations, wanted, this);\n+        }\n+\n+        numberOfCalls.verify(invocations, wanted, this);\n+    }\n+\n+    private void doBasicVerification(List<Invocation> invocations, InvocationMatcher wanted) {\n         MissingInvocationVerifier missingInvocation = new MissingInvocationVerifier();\n         NumberOfInvocationsVerifier numberOfInvocations = new NumberOfInvocationsVerifier();\n         \n         }\n         numberOfInvocations.verify(invocations, wanted, this);\n     }\n+\n+    public void setMocksToBeVerifiedInOrder(List<Object> mocks) {\n+        this.mocksToBeVerifiedInOrder = mocks;\n+    }\n+    \n+    @Override\n+    public List<? extends Object> getMocksToBeVerifiedInOrder() {\n+        return mocksToBeVerifiedInOrder;\n+    }\n }\n--- a/src/org/mockito/internal/verification/VerificationMode.java\n+++ b/src/org/mockito/internal/verification/VerificationMode.java\n     Verification getVerification();\n     \n     void verify(List<Invocation> invocations, InvocationMatcher wanted);\n+\n+    void setMocksToBeVerifiedInOrder(List<Object> mocks);\n }\n--- a/src/org/mockito/internal/verification/VerificationModeDecoder.java\n+++ b/src/org/mockito/internal/verification/VerificationModeDecoder.java\n         this.mode = mode;\n     }\n \n-    public boolean missingMethodInOrderMode() {\n-        return inOrderMode() && missingMethodMode();\n-    }\n-    \n     public boolean missingMethodMode() {\n         return (explicitMode() && mode.wantedCount() > 0) || (atLeastMode() && mode.wantedCount() == 1);\n     }\n         return mode.getVerification() == Verification.EXPLICIT;\n     }\n     \n-    public boolean inOrderMode() {\n-        return !mode.getMocksToBeVerifiedInOrder().isEmpty() && (explicitMode() || atLeastMode());\n-    }\n-    \n-    public boolean exactNumberOfInvocationsMode() {\n-        return !inOrderMode() && (explicitMode() || atLeastMode());\n-    }\n-\n     public boolean matchesActualCount(int actualCount) {\n         boolean atLeast = atLeastMode() && actualCount >= mode.wantedCount();\n         boolean actualMatchesWanted = !atLeastMode() && mode.wantedCount() == actualCount;\n--- a/src/org/mockito/internal/verification/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationModeImpl.java\n     public enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n     \n     final int wantedInvocationCount;\n-    final List<? extends Object> mocksToBeVerifiedInOrder;\n+    List<? extends Object> mocksToBeVerifiedInOrder;\n     final Verification verification;\n     \n     protected VerificationModeImpl(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n         return new BasicVerificationMode(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n-    public static VerificationMode inOrder(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n-        assert !mocksToBeVerifiedInOrder.isEmpty();\n-        return new InOrderVerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.EXPLICIT);\n-    }\n-\n-    public static VerificationMode inOrderAtLeast(int minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n-        assert !mocksToBeVerifiedInOrder.isEmpty();\n-        return new InOrderVerificationMode(minNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.AT_LEAST);\n-    }\n-    \n     public static VerificationMode noMoreInteractions() {\n         return new NoMoreInteractionsMode(0, Collections.emptyList(), Verification.NO_MORE_WANTED);\n     }\n     public Verification getVerification() {\n         return verification;\n     }\n+    \n+    public void setMocksToBeVerifiedInOrder(List<Object> mocks) {\n+        //do nothing\n+    }\n \n     @Override\n     public String toString() {\n--- a/test/org/mockito/internal/progress/VerificationModeBuilder.java\n+++ b/test/org/mockito/internal/progress/VerificationModeBuilder.java\n \n import java.util.Arrays;\n \n+import org.mockito.internal.verification.BasicVerificationMode;\n import org.mockito.internal.verification.VerificationMode;\n-import org.mockito.internal.verification.VerificationModeImpl;\n+import org.mockito.internal.verification.VerificationModeImpl.Verification;\n \n public class VerificationModeBuilder {\n \n     private Integer times = 1;\n \n     public VerificationMode inOrder() {\n-        return VerificationModeImpl.inOrder(times, Arrays.asList(new Object()));\n+        //TODO move to factory\n+        return new BasicVerificationMode(times, Arrays.asList(new Object()), Verification.EXPLICIT);\n     }\n \n     public VerificationModeBuilder times(int times) {\n--- a/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n+++ b/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n package org.mockito.internal.verification;\n \n-import static java.util.Arrays.*;\n import static org.mockito.internal.verification.VerificationModeImpl.*;\n \n import org.junit.Test;\n     \n     private VerificationModeDecoder decode(VerificationMode mode) {\n         return new VerificationModeDecoder(mode);\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfIsMissingMethodInOrderMode() throws Exception {\n-        assertTrue(decode(inOrder(1, asList(\"mock\"))).missingMethodInOrderMode());\n-        assertTrue(decode(inOrder(10, asList(\"mock\"))).missingMethodInOrderMode());\n-        \n-        assertFalse(decode(times(10)).missingMethodInOrderMode());\n-        assertFalse(decode(noMoreInteractions()).missingMethodInOrderMode());\n-        assertFalse(decode(times(0)).missingMethodInOrderMode());\n     }\n     \n     @Test\n         \n         mode = times(50);\n         assertFalse(decode(mode).atLeastMode());\n-    }\n-    \n-    \n-    @Test\n-    public void inOrderAtLeastShouldBeInAtLeastMode() throws Exception {\n-        assertTrue(decode(inOrderAtLeast(5, asList(\"mock\"))).atLeastMode());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfIsInOrderMode() throws Exception {\n-        assertTrue(decode(inOrder(1, asList(new Object()))).inOrderMode());\n-        \n-        assertFalse(decode(times(0)).inOrderMode());\n-        assertFalse(decode(times(2)).inOrderMode());\n-        assertFalse(decode(atLeastOnce()).inOrderMode());\n-        assertFalse(decode(noMoreInteractions()).inOrderMode());\n     }\n     \n     @Test\n     }\n     \n     @Test\n-    public void shouldKnowIfExactNumberOfInvocationsMode() throws Exception {\n-        assertTrue(decode(times(0)).exactNumberOfInvocationsMode());\n-        assertTrue(decode(times(1)).exactNumberOfInvocationsMode());\n-        assertTrue(decode(atLeastOnce()).exactNumberOfInvocationsMode());\n-        \n-        assertFalse(decode(noMoreInteractions()).exactNumberOfInvocationsMode());\n-        assertFalse(decode(inOrder(1, asList(new Object()))).exactNumberOfInvocationsMode());\n-    }\n-    \n-    @Test\n     public void shouldKnowIfNeverWantedButInvoked() throws Exception {\n         assertFalse(decode(times(1)).neverWantedButInvoked(0));\n         assertFalse(decode(times(10)).neverWantedButInvoked(20));", "timestamp": 1223645532, "metainfo": ""}