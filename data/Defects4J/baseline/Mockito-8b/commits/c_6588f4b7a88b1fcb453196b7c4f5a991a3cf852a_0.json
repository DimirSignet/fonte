{"sha": "6588f4b7a88b1fcb453196b7c4f5a991a3cf852a", "log": "Tidy-up in buildSrc - major rewrite of the GitHub issues fetcher, part II.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/DefaultImprovements.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/DefaultImprovements.java\n package org.mockito.release.notes.improvements;\n \n-import java.util.Set;\n+import java.util.LinkedList;\n+import java.util.List;\n \n class DefaultImprovements implements ImprovementSet {\n \n-    private Set<Improvement> improvements;\n+    private final List<Improvement> improvements = new LinkedList<Improvement>();\n \n     public String toText() {\n-        return null;\n+        if (improvements.isEmpty()) {\n+            //TODO SF we should break the build if there are no notable improvements yet the binaries have changed\n+            return \"* No notable improvements. See the commits for detailed changes.\";\n+        }\n+        StringBuilder sb = new StringBuilder(\"* Improvements: \").append(improvements.size());\n+        for (Improvement i : improvements) {\n+            sb.append(\"\\n  * \").append(i.toText());\n+        }\n+        return sb.toString();\n     }\n \n     public void add(Improvement improvement) {\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubAuthToken.java\n+package org.mockito.release.notes.improvements;\n+\n+class GitHubAuthToken {\n+\n+    private final String envVariableName;\n+\n+    public GitHubAuthToken(String envVariableName) {\n+        this.envVariableName = envVariableName;\n+    }\n+\n+    public String getToken() {\n+        return null;\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n class GitHubImprovementsProvider implements ImprovementSetProvider {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GitHubImprovementsProvider.class);\n+    private final GitHubAuthToken authToken;\n+\n+    public GitHubImprovementsProvider(GitHubAuthToken authToken) {\n+        this.authToken = authToken;\n+    }\n \n     public ImprovementSet getImprovements(ContributionSet contributions) {\n         LOGGER.info(\"Parsing {} commits\", contributions.getAllCommits());\n         Set<String> ticketIds = findTickets(contributions);\n-        return new GitHubTicketFetcher().fetchTickets(ticketIds);\n+        DefaultImprovements out = new DefaultImprovements();\n+        new GitHubTicketFetcher().fetchTickets(authToken.getToken(), ticketIds, out);\n+        return out;\n     }\n \n     private Set<String> findTickets(ContributionSet contributions) {\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n \n \n     private static final Logger LOG = LoggerFactory.getLogger(GitHubTicketFetcher.class);\n \n-    ImprovementSet fetchTickets(String gitHubToken, Set<String> ticketIds) {\n+    void fetchTickets(String gitHubAuthToken, Collection<String> ticketIds, DefaultImprovements improvements) {\n         if (ticketIds.isEmpty()) {\n-            return new DefaultImprovements();\n+            return;\n         }\n         try {\n             //TODO if possible we should query for all tickets via one REST call and perhaps stop using jcapi\n             LOG.info(\"Querying GitHub API for {} tickets\", ticketIds.size());\n-            RtGithub github = new RtGithub(gitHubToken);\n+            RtGithub github = new RtGithub(gitHubAuthToken);\n             Repo repo = github.repos().get(new Coordinates.Simple(\"mockito/mockito\"));\n             Issues issues = repo.issues();\n-            DefaultImprovements out = new DefaultImprovements();\n-\n             for (String ticketId : ticketIds) {\n                 LOG.info(\" #{}\", ticketId);\n                 //TODO make ticked id an int\n                 Issue i = issues.get(Integer.parseInt(ticketId));\n                 Issue.Smart issue = new Issue.Smart(i);\n                 if (issue.exists() && !issue.isOpen()) {\n-                    out.add(new Improvement(issue.number(), issue.title(), issue.htmlUrl(),\n+                    improvements.add(new Improvement(issue.number(), issue.title(), issue.htmlUrl().toString(),\n                             labels(issue.labels())));\n                 }\n             }\n-            return out;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Problems fetching \" + ticketIds.size() + \" from GitHub\", e);\n         }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java\n package org.mockito.release.notes.improvements;\n \n import java.net.URL;\n+import java.util.Collection;\n import java.util.Set;\n \n class Improvement {\n \n     private final int id;\n     private final String title;\n-    private final URL url;\n-    private final Set<String> labels;\n+    private final String url;\n+    private final Collection<String> labels;\n \n-    public Improvement(int id, String title, URL url, Set<String> labels) {\n+    public Improvement(int id, String title, String url, Collection<String> labels) {\n         this.id = id;\n         this.title = title;\n         this.url = url;\n     }\n \n     public String toText() {\n-        return title + \"[(#\" + id + \")](\" + url + \")\";\n+        return title + \" [(#\" + id + \")](\" + url + \")\";\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n package org.mockito.release.notes.improvements;\n \n+/**\n+ * Improvements based on some issue tracking system outside of the vcs.\n+ */\n public class Improvements {\n \n-    public static ImprovementSetProvider getImprovementSetProvider() {\n-        return null;\n+    /**\n+     * Fetches tickets from GitHub. Needs GitHub auth token.\n+     *\n+     * @param authTokenEnvVarName name of the env var that holds the token\n+     */\n+    public static ImprovementSetProvider getGitHubProvider(final String authTokenEnvVarName) {\n+        return new GitHubImprovementsProvider(new GitHubAuthToken(authTokenEnvVarName));\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n     /**\n      * Provides means to get contributions.\n      */\n-    public static ContributionsProvider getContributionsProvider(ProcessRunner runner) {\n+    public static ContributionsProvider getGitProvider(ProcessRunner runner) {\n         return new GitContributionsProvider(new GitLogProvider(runner), new IgnoreCiSkip());\n     }\n }", "timestamp": 1416516894, "metainfo": ""}