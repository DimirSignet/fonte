{"sha": "f2e86e716739ce2cd78899cba06f1eaec3ee7302", "log": "got rid of TODO (refactored to be get stuff cleaner)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401398", "commit": "\n--- a/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n         this.logger = logger;\n     }\n     \n-    //this is what is really executed when the test runs\n-    static interface JunitTestBody {\n-        void run(RunNotifier notifier);\n+    public void runTest(RunNotifier notifier) {\n+        super.run(notifier);\n     }\n     \n     @Override\n     public void run(RunNotifier notifier) {\n-        this.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n-                VerboseMockitoJUnitRunner.super.run(notifier);\n-            }\n-        });\n-    }\n-    \n-    public void run(RunNotifier notifier, JunitTestBody junitTestBody) {\n         MockingProgress progress = new ThreadSafeMockingProgress();\n         DebuggingInfo debuggingInfo = progress.getDebuggingInfo();\n         \n         beforeRun(notifier, debuggingInfo);\n         \n-        junitTestBody.run(notifier);\n+        this.runTest(notifier);\n         \n         afterRun(debuggingInfo);\n     }\n--- a/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n import org.mockito.internal.debugging.DebuggingInfo;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.util.MockitoLoggerImpl;\n-import org.mockito.runners.VerboseMockitoJUnitRunner.JunitTestBody;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n         runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub);\n     }\n     \n-    //TODO: after 1.7 refactor it to override-and-subclass\n-    @Test(expected=RunWasCalled.class)\n-    public void shouldRunTests() throws Exception {\n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n-                throw new RunWasCalled();\n-            }\n-        });\n-    }\n-    \n     @Test\n     public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {\n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n-                //this is what happens when the test runs:\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n+            @Override\n+            public void runTest(RunNotifier notifier) {\n+              //this is what happens when the test runs:\n                 //first, unused stubbing:\n                 unusedStubbingThatQualifiesForWarning();\n                 //then, let's make the test fail so that warnings are printed\n                 assertContains(\"mock.simpleMethod(123);\", loggedInfo);\n                 assertContains(\".unusedStubbingThatQualifiesForWarning(\", loggedInfo);\n             }\n-        });\n+        };\n+        \n+        runner.run(notifier);\n     }\n \n     @Test\n     public void shouldLogUnstubbedMethodWarningWhenTestFails() throws Exception {\n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n+            @Override\n+            public void runTest(RunNotifier notifier) {\n                 callUnstubbedMethodThatQualifiesForWarning();\n                 notifier.fireTestFailure(null);\n \n                 assertContains(\"mock.simpleMethod(456);\", loggedInfo);\n                 assertContains(\".callUnstubbedMethodThatQualifiesForWarning(\", loggedInfo);\n             }\n-        });\n+        };\n+        \n+        runner.run(notifier);\n     }\n     \n     @Test\n     public void shouldLogStubCalledWithDifferentArgumentsWhenTestFails() throws Exception {\n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n+            @Override\n+            public void runTest(RunNotifier notifier) {\n                 someStubbing();\n                 callStubbedMethodWithDifferentArgs();\n                 notifier.fireTestFailure(null);\n                 assertContains(\"mock.simpleMethod(10);\", loggedInfo);\n                 assertContains(\".callStubbedMethodWithDifferentArgs(\", loggedInfo);\n             }\n-        });\n+        };\n+        \n+        runner.run(notifier);\n     }\n     \n     @Test\n     public void shouldNotLogAnythingWhenStubCalledCorrectly() throws Exception {\n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n+            @Override\n+            public void runTest(RunNotifier notifier) {\n                 when(mock.simpleMethod(1)).thenReturn(\"foo\");\n                 mock.simpleMethod(1);\n \n                 \n                 assertEquals(\"\", loggerStub.getLoggedInfo());\n             }\n-        });\n+        };\n+        \n+        runner.run(notifier);\n     }\n     \n     @Test\n     public void shouldNotLogWhenTestPasses() throws Exception {\n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n+            @Override\n+            public void runTest(RunNotifier notifier) {\n                 when(mock.simpleMethod()).thenReturn(\"foo\");\n                 \n                 notifier.fireTestFinished(null);\n                 \n                 assertEquals(\"\", loggerStub.getLoggedInfo());\n             }\n-        });\n+        };\n+        \n+        runner.run(notifier);\n     }\n     \n     \n     public void shouldClearDebuggingDataAfterwards() throws Exception {\n+        //given\n         final DebuggingInfo debuggingInfo = new ThreadSafeMockingProgress().getDebuggingInfo();\n-        \n-        runner.run(notifier, new JunitTestBody() {\n-            public void run(RunNotifier notifier) {\n+\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n+            @Override\n+            public void runTest(RunNotifier notifier) {\n                 unusedStubbingThatQualifiesForWarning();\n                 notifier.fireTestFailure(null);\n                 assertTrue(debuggingInfo.hasData());\n             }\n-        });\n+        };\n         \n+        //when\n+        runner.run(notifier);\n+        \n+        //then\n         assertFalse(debuggingInfo.hasData());\n     }    \n \n             return loggedInfo.toString();\n         }\n     }\n-    \n-    @SuppressWarnings(\"serial\")\n-    private static class RunWasCalled extends RuntimeException {}; \n }", "timestamp": 1241293860, "metainfo": ""}