{"sha": "c8e8151c24e69b5aa346bf976e2f8c4b5caa8441", "log": "Refactoring, enhanced some javadocs", "commit": "\n--- a/src/org/mockito/InjectMocks.java\n+++ b/src/org/mockito/InjectMocks.java\n  * <li>Minimizes repetitive mock and spy injection.</li>\n  * </ul>\n  * <p>\n- * Currently it only supports field injection. If you prefer constructor injection - please contribute a patch.\n+ * Currently it injects fields via reflection. If you prefer constructor/setter injection - please contribute a patch.\n  * </p>\n  *\n  * <p>\n  *   }\n  * </pre>\n  *\n- * <b>The field annotated with &#064;InjectMocks can be initialized by Mockito if a zero argument constructor\n- * can be found in the type (even private). <u>But Mockito cannot instantiate inner classes, local classes, \n- * abstract classes and interfaces.</u></b>\n+ * <b>The field annotated with &#064;InjectMocks can be initiatialized explicitly (just like in the example).\n+ * Alternatively, if you don't provide the instance Mockito will try to find zero argument constructor (even private) and create an instance for you.\n+ * <u>But Mockito cannot instantiate inner classes, local classes, abstract classes and interfaces.</u></b>\n  *\n  * For example this class can be instantiated by Mockito :\n  * <pre>public class Bar {\n  * </p>\n  *\n  * <p>\n- * Note that &#064;InjectMocks is compatible with spies created using the &#64;Spy annotation.\n+ * Note that &#064;InjectMocks will only inject mocks/spies created using the &#64;Spy or &#64;Mock annotation.\n  * </p>\n  *\n  * <p>\n--- a/src/org/mockito/Spy.java\n+++ b/src/org/mockito/Spy.java\n  * \n  * <pre>\n  * public class Test{\n+ *    //Instance for spying is created by calling constructor explicitly:\n  *    &#64;Spy Foo spyOnFoo = new Foo(\"argument\");\n+ *    //Instance for spying is created by mockito via reflection (only default constructors supported): \n  *    &#64;Spy Bar spyOnBar;\n  *    &#64;Before\n  *    public void init(){\n  * can be found in the type (even private). <u>But Mockito cannot instantiate inner classes, local classes,\n  * abstract classes and interfaces.</u></b>\n  *\n+ * <b>The field annotated with &#064;Spy can be initiatialized explicitly at declaration point.\n+ * Alternatively, if you don't provide the instance Mockito will try to find zero argument constructor (even private) and create an instance for you.\n+ * <u>But Mockito cannot instantiate inner classes, local classes, abstract classes and interfaces.</u></b>\n+ *\n  * For example this class can be instantiated by Mockito :\n  * <pre>public class Bar {\n  *    private Bar() {}\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"      \\n\" +\n                 \"      @Before public void setUp() {\\n\" +\n                 \"         MockitoAnnotations.initMock(this);\\n\"\n-                );   \n+                );\n     }\n }\n--- a/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n         Field[] fields = clazz.getDeclaredFields();\n         for (Field field : fields) {\n             if (null != field.getAnnotation(InjectMocks.class)) {\n-                /*if(new FieldReader(testClass, field).isNull()) {\n-                    new Reporter().injectMockAnnotationFieldIsNull(field.getName());\n-                }*/\n                 testedFields.add(field);\n             }\n         }\n--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n                 field.setAccessible(true);\n                 try {\n                     Object instance = new FieldInitializer(testClass, field).initialize();\n+                    //TODO: delete below:\n                     if (instance == null) {\n                         throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the *instance* is missing\\n\" +\n                         \t\t  \"The instance must be created *before* initMocks();\\n\" +", "timestamp": 1288373101, "metainfo": ""}