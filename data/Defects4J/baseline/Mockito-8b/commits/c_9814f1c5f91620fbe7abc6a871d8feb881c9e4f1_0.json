{"sha": "9814f1c5f91620fbe7abc6a871d8feb881c9e4f1", "log": "added more testing to Matchers  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40121", "commit": "\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n     \n     void differentMethod();\n \n-    boolean simpleMethod(String argument);\n+    String simpleMethod(String argument);\n     \n-    void simpleMethod(int argument);\n+    String simpleMethod(int argument);\n     \n-    void simpleMethod(String argOne, Integer argTwo);\n+    String simpleMethod(String argOne, Integer argTwo);\n \n     Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);\n \n \n     void varargsString(int i, String... string);\n \n-    void varargsObject(int i, Object... object);\n+    Object varargsObject(int i, Object... object);\n \n     List<String> listReturningMethod(Object ... objects);\n }\n--- a/test/org/mockitousage/MockitoSyntaxExperiments.java\n+++ b/test/org/mockitousage/MockitoSyntaxExperiments.java\n         assertThat(noMoreInteractions(mock));\n         assertThat(zeroInteractions(mock));\n     }\n-    \n-    public void verifiesMocksInOrder() {\n-//        verifyInOrder(new Ordering() { void sequence() {\n-//            verify(mock).clear();\n-//            verify(mock2).clear();\n-//        }};);\n-    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.CrazyMatchers.startsWith;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.*;\n+import org.mockito.exceptions.VerificationError;\n+import org.mockitousage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")  \n+public class VerificationAndStubbingUsingMatchersTest {\n+    private IMethods one;\n+    private IMethods two;\n+    private IMethods three;\n+\n+    @Before\n+    public void setUp() {\n+        one = mock(IMethods.class);\n+        two = mock(IMethods.class);\n+        three = mock(IMethods.class);\n+    }\n+    \n+    @Test\n+    public void shouldStubUsingMatchers() {\n+        stub(one.simpleMethod(2)).andReturn(\"2\");\n+        stub(two.simpleMethod(anyString())).andReturn(\"any\");\n+        stub(three.simpleMethod(startsWith(\"test\"))).andThrows(new RuntimeException());\n+\n+        assertEquals(null, one.simpleMethod(1));\n+        assertEquals(\"2\", one.simpleMethod(2));\n+        \n+        assertEquals(\"any\", two.simpleMethod(\"two\"));\n+        assertEquals(\"any\", two.simpleMethod(\"two again\"));\n+        \n+        assertEquals(null, three.simpleMethod(\"three\"));\n+        assertEquals(null, three.simpleMethod(\"three again\"));\n+       \n+        try {\n+            three.simpleMethod(\"test three again\");\n+        } catch (RuntimeException e) {};\n+    }\n+    \n+    @Test\n+    public void shouldVerifyUsingMatchers() {\n+        stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\n+        stub(three.varargsObject(5, \"first arg\", \"second arg\")).andReturn(\"stubbed\");\n+\n+        try {\n+            one.oneArg(true);\n+        } catch (RuntimeException e) {}\n+\n+        one.simpleMethod(100);\n+        two.simpleMethod(\"test Mockito\");\n+        three.varargsObject(10, \"first arg\", \"second arg\");\n+        \n+        assertEquals(\"stubbed\", three.varargsObject(5, \"first arg\", \"second arg\"));\n+\n+        verify(one).oneArg(eq(true));\n+        verify(one).simpleMethod(anyInt());\n+        verify(two).simpleMethod(startsWith(\"test\"));\n+        verify(three).varargsObject(5, \"first arg\", \"second arg\");\n+        verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"second\"));\n+        \n+        verifyNoMoreInteractions(one, two, three);\n+        \n+        try {\n+            verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\n+        } catch (VerificationError e) {}\n+    }\n+}", "timestamp": 1196631687, "metainfo": ""}