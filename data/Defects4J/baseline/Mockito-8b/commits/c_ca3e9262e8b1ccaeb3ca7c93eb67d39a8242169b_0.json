{"sha": "ca3e9262e8b1ccaeb3ca7c93eb67d39a8242169b", "log": "Some clean up  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401124", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.MockitoStubber;\n import org.mockito.internal.stubbing.Returns;\n-import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.ThrowsException;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n--- a/src/org/mockito/internal/debugging/DebuggingInfo.java\n+++ b/src/org/mockito/internal/debugging/DebuggingInfo.java\n \n     public void printWarnings(MockitoLogger logger) {\n         if (hasData()) {\n-            //TODO should only pass those that really wasn't called...\n             WarningsPrinter warningsPrinter = new WarningsPrinter(unusedStubs, unstubbedInvocations);\n             warningsPrinter.print(logger);\n         }\n--- a/src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java\n  */\n public class ExperimentalMockitoJUnitRunner extends BlockJUnit4ClassRunner {\n \n-    static MockitoLogger logger = new MockitoLoggerImpl();\n+    private final MockitoLogger logger;\n     \n     public ExperimentalMockitoJUnitRunner(Class<?> klass) throws InitializationError {\n+        this(klass, new MockitoLoggerImpl());\n+    }\n+    \n+    public ExperimentalMockitoJUnitRunner(Class<?> klass, MockitoLogger logger) throws InitializationError {\n         super(klass);\n+        this.logger = logger;\n     }\n \n     @Override\n--- a/src/org/mockito/runners/ExperimentalMockitoJUnitRunnerPM.java\n+++ b/src/org/mockito/runners/ExperimentalMockitoJUnitRunnerPM.java\n  */\n public class ExperimentalMockitoJUnitRunnerPM extends BlockJUnit4ClassRunner {\n \n-    static MockitoLogger logger = new MockitoLoggerImpl();\n+    private final MockitoLogger logger;\n     \n+    public ExperimentalMockitoJUnitRunnerPM(Class<?> klass, MockitoLogger logger) throws InitializationError {\n+        super(klass);\n+        this.logger = logger; \n+    }\n+\n     public ExperimentalMockitoJUnitRunnerPM(Class<?> klass) throws InitializationError {\n-        super(klass);\n+        this(klass, new MockitoLoggerImpl());\n     }\n \n     @Override\n--- a/test/org/mockito/runners/ExperimentalMockitoJUnitRunnerPMTest.java\n+++ b/test/org/mockito/runners/ExperimentalMockitoJUnitRunnerPMTest.java\n \n import static org.mockito.Mockito.*;\n \n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n @SuppressWarnings(\"serial\")\n public class ExperimentalMockitoJUnitRunnerPMTest extends TestBase {\n     \n-    //just to get rid of noisy constructor\n-    class ExperimentalMockitoJUnitRunnerPMStub extends ExperimentalMockitoJUnitRunnerPM {\n-        public ExperimentalMockitoJUnitRunnerPMStub() throws InitializationError {\n-            super(ExperimentalMockitoJUnitRunnerPMTest.class);\n-        }\n-    }\n-    \n     @Mock private IMethods mock;\n     private ExperimentalMockitoJUnitRunnerPMStub runner;\n     private MockitoLoggerStub loggerStub;\n \n     @Before\n     public void setup() throws InitializationError {\n+        loggerStub = new MockitoLoggerStub();\n         runner = new ExperimentalMockitoJUnitRunnerPMStub();\n-        loggerStub = new MockitoLoggerStub();\n-        ExperimentalMockitoJUnitRunnerPM.logger = loggerStub;\n         notifier = new RunNotifier();\n     }\n     \n-    @After\n-    public void restoreLogger() {\n-        ExperimentalMockitoJUnitRunnerPM.logger = new MockitoLoggerImpl();\n-    }\n-\n+    //just to get rid of noisy constructor\n+    class ExperimentalMockitoJUnitRunnerPMStub extends ExperimentalMockitoJUnitRunnerPM {\n+        public ExperimentalMockitoJUnitRunnerPMStub() throws InitializationError {\n+            super(ExperimentalMockitoJUnitRunnerPMTest.class, loggerStub);\n+        }\n+    }\n+    \n     @Test\n     public void shouldRunTests() throws Exception {\n         final StringBuilder sb = new StringBuilder();\n--- a/test/org/mockito/runners/ExperimentalMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/ExperimentalMockitoJUnitRunnerTest.java\n \n import static org.mockito.Mockito.*;\n \n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.notification.RunNotifier;\n     \n     @Mock private IMethods mock;\n     private ExperimentalMockitoJUnitRunner runner;\n-    private MockitoLoggerStub logger;\n+    private MockitoLoggerStub loggerStub;\n     private RunNotifier notifier;\n \n     @Before\n     public void setup() throws InitializationError {\n-        runner = new ExperimentalMockitoJUnitRunner(this.getClass());\n-        logger = new MockitoLoggerStub();\n-        ExperimentalMockitoJUnitRunner.logger = logger;\n+        loggerStub = new MockitoLoggerStub();\n         notifier = new RunNotifier();\n+        runner = new ExperimentalMockitoJUnitRunner(this.getClass(), loggerStub);\n     }\n     \n-    @After\n-    public void restoreLogger() {\n-        //TODO logger should instance field! \n-        ExperimentalMockitoJUnitRunner.logger = new MockitoLoggerImpl();\n-    }\n-\n     @Test(expected=RunWasCalled.class)\n     public void shouldRunTests() throws Exception {\n         runner.run(notifier, new JunitTestBody() {\n                 //then, let's make the test fail so that warnings are printed\n                 notifier.fireTestFailure(null);\n                 //assert\n-                String loggedInfo = logger.getLoggedInfo();\n+                String loggedInfo = loggerStub.getLoggedInfo();\n                 assertThat(loggedInfo, contains(\"[Mockito] Warning - this stub was not used\"));\n                 assertThat(loggedInfo, contains(\"mock.simpleMethod(123);\"));\n                 assertThat(loggedInfo, contains(\".unusedStubbingThatQualifiesForWarning(\"));\n                 callUnstubbedMethodThatQualifiesForWarning();\n                 notifier.fireTestFailure(null);\n \n-                String loggedInfo = logger.getLoggedInfo();\n+                String loggedInfo = loggerStub.getLoggedInfo();\n                 assertThat(loggedInfo, contains(\"[Mockito] Warning - this method was not stubbed\"));\n                 assertThat(loggedInfo, contains(\"mock.simpleMethod(456);\"));\n                 assertThat(loggedInfo, contains(\".callUnstubbedMethodThatQualifiesForWarning(\"));\n                 callStubbedMethodWithDifferentArgs();\n                 notifier.fireTestFailure(null);\n                 \n-                String loggedInfo = logger.getLoggedInfo();\n+                String loggedInfo = loggerStub.getLoggedInfo();\n                 assertThat(loggedInfo, contains(\"[Mockito] Warning - stubbed method called with different arguments\"));\n                 assertThat(loggedInfo, contains(\"Stubbed this way:\"));\n                 assertThat(loggedInfo, contains(\"mock.simpleMethod(789);\"));\n                 \n                 notifier.fireTestFailure(null);\n                 \n-                String loggedInfo = logger.getLoggedInfo();\n+                String loggedInfo = loggerStub.getLoggedInfo();\n                 assertEquals(\"\", loggedInfo);\n             }\n         });", "timestamp": 1230912888, "metainfo": ""}