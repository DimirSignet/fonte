{"sha": "84efa099ab968775ce25ff3e55af81802a964010", "log": "Tidy-up in buildSrc - pushed out logic that ignores commits  In order to improve clarity of the impl. Reinvented the wheel with Predicate interface (I don't want external dependencies for now).", "commit": "\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/util/Predicate.java\n+package org.mockito.release.notes.util;\n+\n+/**\n+ * Generic predicate\n+ */\n+public interface Predicate<T> {\n+\n+    /**\n+     * returns true if the predicate is satisfied for given object\n+     */\n+    boolean isTrue(T object);\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n package org.mockito.release.notes.vcs;\n+\n+import org.mockito.release.notes.util.Predicate;\n \n import java.util.*;\n \n class DefaultContributionSet implements ContributionSet {\n     private final Map<String, DefaultContribution> contributions = new HashMap<String, DefaultContribution>();\n     private final Collection<Commit> commits = new LinkedList<Commit>();\n+    private final Predicate<Commit> ignoreCommit;\n+\n+    public DefaultContributionSet(Predicate<Commit> ignoredCommit) {\n+        this.ignoreCommit = ignoredCommit;\n+    }\n \n     void add(Commit commit) {\n-        if (commit.getMessage().contains(\"[ci skip]\")) {\n-            //we used #id for Travis CI build number in commits performed by Travis. Let's avoid pulling those ids here.\n-            //also, if ci was skipped we probably are not interested in such change, no?\n-            //Currently, all our [ci skip] are infrastructure commits\n+        if (ignoreCommit.isTrue(commit)) {\n             return;\n         }\n         commits.add(commit);\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java\n package org.mockito.release.notes.vcs;\n \n+import org.mockito.release.notes.util.Predicate;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n     private static Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);\n     private final GitLogProvider logProvider;\n+    private final Predicate<Commit> ignoredCommit;\n \n-    GitContributionsProvider(GitLogProvider logProvider) {\n+    GitContributionsProvider(GitLogProvider logProvider, Predicate<Commit> ignoredCommit) {\n         this.logProvider = logProvider;\n+        this.ignoredCommit = ignoredCommit;\n     }\n \n     public ContributionSet getContributionsBetween(String fromRev, String toRev) {\n         String infoToken = \"@@info@@\";\n         String log = logProvider.getLog(fromRev, toRev, \"--pretty=format:%ae\" + infoToken + \"%an\" + infoToken + \"%B%N\" + commitToken);\n \n-        DefaultContributionSet contributions = new DefaultContributionSet();\n+        DefaultContributionSet contributions = new DefaultContributionSet(ignoredCommit);\n \n         for (String entry : log.split(commitToken)) {\n             String[] entryParts = entry.split(infoToken);\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/IgnoreCiSkip.java\n+package org.mockito.release.notes.vcs;\n+\n+import org.mockito.release.notes.util.Predicate;\n+\n+/**\n+ * Ignores commits with [ci skip]\n+ */\n+class IgnoreCiSkip implements Predicate<Commit> {\n+\n+    public boolean isTrue(Commit commit) {\n+        //we used #id for Travis CI build number in commits performed by Travis. Let's avoid pulling those ids here.\n+        //also, if ci was skipped we probably are not interested in such change, no?\n+        //Currently, all our [ci skip] are infrastructure commits plus documentation changes made by humans via github web interface\n+        return commit.getMessage().contains(\"[ci skip]\");\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n      * Provides the ContributionsProvider\n      */\n     public static ContributionsProvider getContributionsProvider(ProcessRunner runner) {\n-        return new GitContributionsProvider(new GitLogProvider(runner));\n+        return new GitContributionsProvider(new GitLogProvider(runner), new IgnoreCiSkip());\n     }\n }", "timestamp": 1416516893, "metainfo": ""}