{"sha": "dc446b4cce579724e2bebee9866a98d19ba52962", "log": "fixed issue #11 - problems mocking eclipse internal classes when testing eclipse plugins.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40660", "commit": "\n--- a/src/org/mockito/internal/creation/MockFactory.java\n+++ b/src/org/mockito/internal/creation/MockFactory.java\n         Enhancer enhancer = createEnhancer(toMock);\n         enhancer.setCallbackType(filter.getClass());\n \n-        //This is required but I could not figure out the way to test it\n-        //See issue #11\n-        if (toMock.getSigners() != null) {\n-            enhancer.setNamingPolicy(ALLOWS_MOCKING_CLASSES_IN_SIGNED_PACKAGES);\n-        }\n-\n         Class mockClass = enhancer.createClass();\n         \n         Enhancer.registerCallbacks(mockClass, new Callback[] { filter });\n     private Enhancer createEnhancer(Class<T> toMock) {\n         Enhancer enhancer = new Enhancer() {\n             @SuppressWarnings(\"unchecked\")\n-            //Filter all private constructors but do not check that there are some left\n+            //Override default behavior which throws exception when no non-private constructors are left\n             protected void filterConstructors(Class sc, List constructors) {\n                 CollectionUtils.filter(constructors, new VisibilityPredicate(\n                         sc, true));\n         } else {\n             enhancer.setSuperclass(toMock);\n         }\n+        \n+        //This is required but I could not figure out the way to test it\n+        //See issue #11\n+        if (toMock.getSigners() != null) {\n+            enhancer.setNamingPolicy(ALLOWS_MOCKING_CLASSES_IN_SIGNED_PACKAGES);\n+        }\n+\n+        //This is required to make (cglib + eclipse plugins testing) happy\n+        //See issue #11\n+        enhancer.setClassLoader(MockFactory.class.getClassLoader());\n+        \n         return enhancer;\n     }\n \n--- a/test/org/mockito/internal/creation/MockFactoryTest.java\n+++ b/test/org/mockito/internal/creation/MockFactoryTest.java\n \n @SuppressWarnings(\"unchecked\")\n public class MockFactoryTest extends TestBase {\n-\n+    \n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {\n         MockFactory<SomeInterface> factory = new MockFactory<SomeInterface>();", "timestamp": 1214780344, "metainfo": ""}