{"sha": "1193677c86b012554f45ada671af2dbcfe0ad60f", "log": "issue248 doCallRealMethods on Stubber interface", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n         BDDStubber willThrow(Class<? extends Throwable> toBeThrown);\n \n         /**\n+         * See original {@link Stubber#doCallRealMethod()}\n+         */\n+        BDDStubber willCallRealMethod();\n+\n+        /**\n          * See original {@link Stubber#when(Object)}\n          */\n         <T> T given(T mock);\n          */\n         public BDDStubber willThrow(Class<? extends Throwable> toBeThrown) {\n             return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see BDDMockito.BDDStubber#willCallRealMethod()\n+         */\n+        public BDDStubber willCallRealMethod() {\n+            return new BDDStubberImpl(mockitoStubber.doCallRealMethod());\n         }\n     }\n     \n--- a/src/org/mockito/internal/stubbing/StubberImpl.java\n+++ b/src/org/mockito/internal/stubbing/StubberImpl.java\n package org.mockito.internal.stubbing;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.stubbing.answers.DoesNothing;\n-import org.mockito.internal.stubbing.answers.Returns;\n-import org.mockito.internal.stubbing.answers.ThrowsException;\n-import org.mockito.internal.stubbing.answers.ThrowsExceptionClass;\n+import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.Stubber;\n         answers.add(answer);\n         return this;\n     }\n+\n+    public Stubber doCallRealMethod() {\n+        answers.add(new CallsRealMethods());\n+        return this;\n+    }\n }\n--- a/src/org/mockito/stubbing/Stubber.java\n+++ b/src/org/mockito/stubbing/Stubber.java\n      * \n      *  See examples in javadoc for {@link Mockito}\n      * \n-     * @param mock\n+     * @param mock The mock\n      * @return select method for stubbing\n      */\n     <T> T when(T mock);\n      * @return stubber - to select a method for stubbing\n      */\n     Stubber doReturn(Object toBeReturned);\n+\n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doCallRealMethod()} style.\n+     * <p>\n+     * See javadoc for {@link Mockito#doCallRealMethod()}\n+     *\n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doCallRealMethod();\n }\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n+import org.mockitousage.MethodsImpl;\n import org.mockitoutil.TestBase;\n \n import java.util.Set;\n        \n        assertEquals(\"foo\", mock.simpleMethod(\"whatever\"));\n        assertEquals(\"bar\", mock.simpleMethod(\"whatever\"));\n+    }\n+\n+    @Test\n+    public void shouldStubConsecutivelyWithCallRealMethod() throws Exception {\n+        MethodsImpl mock = mock(MethodsImpl.class);\n+        willReturn(\"foo\").willCallRealMethod()\n+                .given(mock).simpleMethod();\n+\n+       assertEquals(\"foo\", mock.simpleMethod());\n+       assertEquals(null, mock.simpleMethod());\n     }\n     \n     @Test\n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n+import org.mockitousage.MethodsImpl;\n import org.mockitoutil.TestBase;\n \n import java.io.IOException;\n         \n         assertEquals(\"bar\", mock.simpleMethod());\n         assertEquals(\"bar\", mock.simpleMethod());\n+    }\n+\n+    @Test\n+    public void shouldAllowDoCallRealMethodInChainedStubbing() throws Exception {\n+        MethodsImpl methods = mock(MethodsImpl.class);\n+        doReturn(\"A\").doCallRealMethod()\n+                .when(methods).simpleMethod();\n+\n+        assertEquals(\"A\", methods.simpleMethod());\n+        assertEquals(null, methods.simpleMethod());\n     }\n \n     @Test(expected = IllegalArgumentException.class)", "timestamp": 1318277393, "metainfo": ""}