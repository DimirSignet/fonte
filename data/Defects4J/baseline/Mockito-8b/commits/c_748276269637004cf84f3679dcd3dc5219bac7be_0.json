{"sha": "748276269637004cf84f3679dcd3dc5219bac7be", "log": "Renamed @InjectMock into @InjectMocks  --HG-- rename : src/org/mockito/InjectMock.java => src/org/mockito/InjectMocks.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401881", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/InjectMocks.java\n+package org.mockito;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+\n+/**\n+ * <ul>\n+ * <li>Allows shorthand mock and spy injection.</li>\n+ * <li>Minimizes repetitive mock and spy injection.</li>\n+ * </ul>\n+ * <p>\n+ * Currently it only supports setter injection. If you prefer constructor injection - please contribute a patch.\n+ * <p>\n+ * Mockito tries to inject by type (using name in case types are the same). \n+ * Mockito does not throw anything when injection fails - you will have to satisfy the dependencies manually.  \n+ * <p>\n+ * Example:\n+ * <pre>\n+ *   public class ArticleManagerTest extends SampleBaseTestCase {\n+ *\n+ *       &#064;Mock private ArticleCalculator calculator;\n+ *       &#064;Mock private ArticleDatabase database;\n+ *       &#064;Spy private UserProvider userProvider = new ConsumerUserProvider();\n+ *\n+ *       &#064;InjectMocks private ArticleManager manager = new ArticleManager();\n+ *\n+ *       &#064;Test public void shouldDoSomething() {\n+ *           manager.initiateArticle();\n+ *           verify(database).addListener(any(ArticleListener.class));\n+ *       }\n+ *   }\n+ *\n+ *   public class SampleBaseTestCase {\n+ *\n+ *       &#064;Before public void initMocks() {\n+ *           MockitoAnnotations.initMocks(this);\n+ *       }\n+ *   }\n+ * </pre>\n+ *\n+ * <b>The field annotated with &#064;InjectMocks must be initialized.</b>\n+ * <p>\n+ * <b><code>MockitoAnnotations.injectMocks(this)</code></b> method has to called to initialize annotated objects.\n+ * <p>\n+ * In above example, <code>injectMocks()</code> is called in &#064;Before (JUnit4) method of test's base class.\n+ * For JUnit3 <code>injectMocks()</code> can go to <code>setup()</code> method of a base class.\n+ * You can also put injectMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link org.mockito.runners.MockitoJUnitRunner}\n+ */\n+@Documented\n+@Target( { FIELD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface InjectMocks {}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n- *      <a href=\"#21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMock (Since 1.8.3) </a><br/>\n+ *      <a href=\"#21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </a><br/>\n  * </b>\n  * \n  * <p>\n  *                 .serializable());\n  * </pre>\n  * \n- * <h3 id=\"21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMock (Since 1.8.3) </h3>\n+ * <h3 id=\"21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </h3>\n  * <p>\n  * Release 1.8.3 brings new annotations that may be helpful on occasion:\n  * \n  * <li>&#064;{@link Captor} simplifies creation of {@link ArgumentCaptor} \n  * - useful when the argument to capture is a nasty generic class and you want to avoid compiler warnings\n  * <li>&#064;{@link Spy} - you can use it instead {@link Mockito#spy(Object)}. \n- * <li>&#064;{@link InjectMock} - injects mocks into tested object automatically.\n+ * <li>&#064;{@link InjectMocks} - injects mocks into tested object automatically.\n  * </ul>\n  * <p>\n  * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}  \n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n  *   }\n  * </pre>\n  * <p>\n- * Read also about other annotations &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMock}\n+ * Read also about other annotations &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMocks}\n  * <p>\n  * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated fields.\n  * <p>\n     \n     /**\n      * Initializes objects annotated with Mockito annotations for given testClass:\n-     *  &#064;{@link org.mockito.Mock}, &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMock} \n+     *  &#064;{@link org.mockito.Mock}, &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMocks} \n      * <p>\n      * See examples in javadoc for {@link MockitoAnnotations} class.\n      */\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     }\n \n     public void injectMockAnnotationFieldIsNull(String field) {\n-        throw new MockitoException(\"Field '\" + field + \"' annotated with @InjectMock is null.\\n\" +\n+        throw new MockitoException(\"Field '\" + field + \"' annotated with @InjectMocks is null.\\n\" +\n                 \"Please make sure the instance is created *before* MockitoAnnotations.initMocks();\\n\" +\n                 \"Example of correct usage:\\n\" +\n                 \"   class SomeTest {\\n\" +\n-                \"      @InjectMock private Foo foo = new Foo();\\n\" +\n+                \"      @InjectMocks private Foo foo = new Foo();\\n\" +\n                 \"      \\n\" +\n                 \"      @Before public void setUp() {\\n\" +\n                 \"         MockitoAnnotations.initMock(this);\\n\"\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n import org.mockito.internal.util.reflection.FieldSetter;\n \n /**\n- * Initializes mock/spies dependencies for fields annotated with &#064;InjectMock\n+ * Initializes mock/spies dependencies for fields annotated with &#064;InjectMocks\n  * <p/>\n  * See {@link org.mockito.MockitoAnnotations}\n  */\n--- a/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n import java.util.Set;\n \n import org.mockito.Captor;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n         //this injects mocks\n         Field[] fields = context.getDeclaredFields();\n         for (Field field : fields) {\n-            if (field.isAnnotationPresent(InjectMock.class)) {\n+            if (field.isAnnotationPresent(InjectMocks.class)) {\n                 assertNoAnnotations(field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\n                 injectMocks(testClass);\n             }\n     void assertNoAnnotations(Field field, Class ... annotations) {\n         for (Class annotation : annotations) {\n             if (field.isAnnotationPresent(annotation)) {\n-                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), InjectMock.class.getSimpleName());\n+                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), InjectMocks.class.getSimpleName());\n             }\n         }        \n     }\n \n     /**\n      * Initializes mock/spies dependencies for objects annotated with\n-     * &#064;InjectMock for given testClass.\n+     * &#064;InjectMocks for given testClass.\n      * <p>\n      * See examples in javadoc for {@link MockitoAnnotations} class.\n      * \n         Set<Field> testedFields = new HashSet<Field>();\n         Field[] fields = clazz.getDeclaredFields();\n         for (Field field : fields) {\n-            if (null != field.getAnnotation(InjectMock.class)) {\n+            if (null != field.getAnnotation(InjectMocks.class)) {\n                 if(new FieldReader(testClass, field).isNull()) {\n                     new Reporter().injectMockAnnotationFieldIsNull(field.getName());\n                 }\n--- a/test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java\n+++ b/test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java\n \n import org.junit.After;\n import org.junit.Test;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.configuration.AnnotationEngine;\n     }\n     \n     class SimpleTestCase {\n-        @InjectMock Tested tested = new Tested();\n+        @InjectMocks Tested tested = new Tested();\n         @Mock Dependency mock;\n     }\n     \n--- a/test/org/mockitousage/annotation/MockInjectionTest.java\n+++ b/test/org/mockitousage/annotation/MockInjectionTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n public class MockInjectionTest extends TestBase {\n \n \tprivate SuperUnderTesting superUnderTestWithoutInjection = new SuperUnderTesting();\n-\t@InjectMock private SuperUnderTesting superUnderTest = new SuperUnderTesting();\n-\t@InjectMock private BaseUnderTesting baseUnderTest = new BaseUnderTesting();\n-\t@InjectMock private SubUnderTesting subUnderTest = new SubUnderTesting();\n-\t@InjectMock private OtherBaseUnderTesting otherBaseUnderTest = new OtherBaseUnderTesting();\n+\t@InjectMocks private SuperUnderTesting superUnderTest = new SuperUnderTesting();\n+\t@InjectMocks private BaseUnderTesting baseUnderTest = new BaseUnderTesting();\n+\t@InjectMocks private SubUnderTesting subUnderTest = new SubUnderTesting();\n+\t@InjectMocks private OtherBaseUnderTesting otherBaseUnderTest = new OtherBaseUnderTesting();\n \t@Mock private Map map;\t\n     @Mock private List list;\n \t@Mock private Set histogram1;\n     @Test(expected=MockitoException.class)\n     public void shouldProvideDecentExceptionWhenInjectMockInstanceIsNull() throws Exception {\n         MockitoAnnotations.initMocks(new Object() {\n-           @InjectMock Object iAmNull = null; \n+           @InjectMocks Object iAmNull = null; \n         });\n     }\n \n--- a/test/org/mockitousage/annotation/SpyInjectionTest.java\n+++ b/test/org/mockitousage/annotation/SpyInjectionTest.java\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Spy;\n import org.mockitoutil.TestBase;\n \n public class SpyInjectionTest extends TestBase {\n \n     @Spy List spy = new LinkedList();\n-    @InjectMock HasSpy hasSpy = new HasSpy();\n+    @InjectMocks HasSpy hasSpy = new HasSpy();\n     \n     static class HasSpy {\n         private List spy;\n--- a/test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java\n+++ b/test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSpyAndInjectMock() throws Exception {\n         MockitoAnnotations.initMocks(new Object() {\n-            @InjectMock @Spy List mock;\n+            @InjectMocks @Spy List mock;\n         });\n     }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowMockAndInjectMock() throws Exception {\n         MockitoAnnotations.initMocks(new Object() {\n-            @InjectMock @Mock List mock;\n+            @InjectMocks @Mock List mock;\n         });\n     }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowCaptorAndInjectMock() throws Exception {\n         MockitoAnnotations.initMocks(new Object() {\n-            @InjectMock @Captor ArgumentCaptor captor;\n+            @InjectMocks @Captor ArgumentCaptor captor;\n         });\n     }\n     \n--- a/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n+++ b/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnit44Runner;\n \n @SuppressWarnings( { \"unchecked\", \"deprecation\" })\n public class JUnit44RunnerTest {\n \n-\t@InjectMock\n+\t@InjectMocks\n \tprivate ListDependent listDependent = new ListDependent();\n \n \t@Mock\n--- a/test/org/mockitousage/junitrunner/JUnit45RunnerTest.java\n+++ b/test/org/mockitousage/junitrunner/JUnit45RunnerTest.java\n \n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.InjectMock;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n \n @SuppressWarnings(\"unchecked\")\n public class JUnit45RunnerTest {\n \n-\t@InjectMock private ListDependent listDependent = new ListDependent();\n+\t@InjectMocks private ListDependent listDependent = new ListDependent();\n     @Mock private List list;\n \n     @Test", "timestamp": 1267995674, "metainfo": ""}