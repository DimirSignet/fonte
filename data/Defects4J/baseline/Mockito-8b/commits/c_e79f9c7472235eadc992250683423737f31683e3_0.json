{"sha": "e79f9c7472235eadc992250683423737f31683e3", "log": "changed some documentation made ArgumentMatcher generic  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40255", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n  * <p>\n  * Contains stack trace of invocation\n  */\n+@SuppressWarnings(\"unchecked\")\n public class Invocation {\n \n     private final int sequenceNumber;\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n \n import org.mockito.internal.matchers.IArgumentMatcher;\n \n+@SuppressWarnings(\"unchecked\")\n public class InvocationMatcher {\n \n     private final Invocation invocation;\n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n import org.mockito.internal.matchers.IArgumentMatcher;\n import org.mockito.internal.progress.LastArguments;\n \n+@SuppressWarnings(\"unchecked\")\n public class MatchersBinder {\n \n     public InvocationMatcher bindMatchers(Invocation invocation) {\n--- a/src/org/mockito/internal/matchers/And.java\n+++ b/src/org/mockito/internal/matchers/And.java\n import java.util.Iterator;\n import java.util.List;\n \n-\n+@SuppressWarnings(\"unchecked\")\n public class And implements IArgumentMatcher {\n \n     private final List<IArgumentMatcher> matchers;\n--- a/src/org/mockito/internal/matchers/Any.java\n+++ b/src/org/mockito/internal/matchers/Any.java\n  */\n package org.mockito.internal.matchers;\n \n-\n+@SuppressWarnings(\"unchecked\")\n public class Any implements IArgumentMatcher {\n \n     public static final Any ANY = new Any();    \n--- a/src/org/mockito/internal/matchers/Compare.java\n+++ b/src/org/mockito/internal/matchers/Compare.java\n \n import java.util.Comparator;\n \n-\n+@SuppressWarnings(\"unchecked\")\n public class Compare<T> implements IArgumentMatcher {\n \n     private T wanted;\n--- a/src/org/mockito/internal/matchers/CompareTo.java\n+++ b/src/org/mockito/internal/matchers/CompareTo.java\n package org.mockito.internal.matchers;\n \n \n-public abstract class CompareTo<T extends Comparable<T>> implements IArgumentMatcher {\n+public abstract class CompareTo<T extends Comparable<T>> implements IArgumentMatcher<T> {\n     private final Comparable<T> wanted;\n \n     public CompareTo(Comparable<T> value) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public boolean matches(Object actual) {\n+    public boolean matches(T actual) {\n         \n         if(!(actual instanceof Comparable)) {\n             return false;\n--- a/src/org/mockito/internal/matchers/Contains.java\n+++ b/src/org/mockito/internal/matchers/Contains.java\n package org.mockito.internal.matchers;\n \n \n-public class Contains implements IArgumentMatcher {\n+public class Contains implements IArgumentMatcher<String> {\n \n     private final String substring;\n \n         this.substring = substring;\n     }\n \n-    public boolean matches(Object actual) {\n-        return (actual instanceof String)\n-                && ((String) actual).indexOf(substring) >= 0;\n+    public boolean matches(String actual) {\n+        return actual != null && actual.contains(substring);\n     }\n \n     public void appendTo(StringBuilder buffer) {\n--- a/src/org/mockito/internal/matchers/EndsWith.java\n+++ b/src/org/mockito/internal/matchers/EndsWith.java\n package org.mockito.internal.matchers;\n \n \n-public class EndsWith implements IArgumentMatcher {\n+public class EndsWith implements IArgumentMatcher<String> {\n \n     private final String suffix;\n \n         this.suffix = suffix;\n     }\n \n-    public boolean matches(Object actual) {\n-        return (actual instanceof String) && ((String) actual).endsWith(suffix);\n+    public boolean matches(String actual) {\n+        return actual != null && actual.endsWith(suffix);\n     }\n \n     public void appendTo(StringBuilder buffer) {\n         buffer.append(\"endsWith(\\\"\" + suffix + \"\\\")\");\n     }\n-}\n+}\n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n package org.mockito.internal.matchers;\n \n \n-public class Equals implements IArgumentMatcher {\n+public class Equals implements IArgumentMatcher<Object> {\n \n     private final Object wanted;\n \n--- a/src/org/mockito/internal/matchers/EqualsWithDelta.java\n+++ b/src/org/mockito/internal/matchers/EqualsWithDelta.java\n package org.mockito.internal.matchers;\n \n \n-public class EqualsWithDelta implements IArgumentMatcher {\n+public class EqualsWithDelta implements IArgumentMatcher<Number>{\n     private final Number wanted;\n \n     private final Number delta;\n         this.delta = delta;\n     }\n \n-    public boolean matches(Object actual) {\n-        Number actualNumber = (Number) actual;\n-        return wanted.doubleValue() - delta.doubleValue() <= actualNumber\n-                .doubleValue()\n-                && actualNumber.doubleValue() <= wanted.doubleValue()\n+    public boolean matches(Number actual) {\n+        return wanted.doubleValue() - delta.doubleValue() <= actual.doubleValue()\n+                && actual.doubleValue() <= wanted.doubleValue()\n                         + delta.doubleValue();\n     }\n \n--- a/src/org/mockito/internal/matchers/Find.java\n+++ b/src/org/mockito/internal/matchers/Find.java\n \n import java.util.regex.Pattern;\n \n-\n-public class Find implements IArgumentMatcher {\n+public class Find implements IArgumentMatcher<String> {\n \n     private final String regex;\n \n         this.regex = regex;\n     }\n \n-    public boolean matches(Object actual) {\n-        return (actual instanceof String)\n-                && Pattern.compile(regex).matcher((String) actual).find();\n+    public boolean matches(String actual) {\n+        return actual != null && Pattern.compile(regex).matcher(actual).find();\n     }\n \n     public void appendTo(StringBuilder buffer) {\n         buffer.append(\"find(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") + \"\\\")\");\n     }\n-}\n+}\n--- a/src/org/mockito/internal/matchers/IArgumentMatcher.java\n+++ b/src/org/mockito/internal/matchers/IArgumentMatcher.java\n /**\n  * Decides whether an actual argument is accepted.\n  */\n-public interface IArgumentMatcher {\n+public interface IArgumentMatcher<T> {\n     \n     /**\n      * Returns whether this matcher accepts the given argument. \n      * @param argument the argument\n      * @return whether this matcher accepts the given argument.\n      */\n-    boolean matches(Object argument);\n+    boolean matches(T argument);\n \n     /**\n      * Appends a string representation of this matcher to the given buffer. In case\n--- a/src/org/mockito/internal/matchers/InstanceOf.java\n+++ b/src/org/mockito/internal/matchers/InstanceOf.java\n package org.mockito.internal.matchers;\n \n \n-public class InstanceOf implements IArgumentMatcher {\n+public class InstanceOf implements IArgumentMatcher<Object> {\n \n     private final Class<?> clazz;\n \n--- a/src/org/mockito/internal/matchers/Matches.java\n+++ b/src/org/mockito/internal/matchers/Matches.java\n package org.mockito.internal.matchers;\n \n \n-public class Matches implements IArgumentMatcher {\n+public class Matches implements IArgumentMatcher<Object> {\n \n     private final String regex;\n \n--- a/src/org/mockito/internal/matchers/Not.java\n+++ b/src/org/mockito/internal/matchers/Not.java\n  */\n package org.mockito.internal.matchers;\n \n-\n+@SuppressWarnings(\"unchecked\")\n public class Not implements IArgumentMatcher {\n \n     private final IArgumentMatcher first;\n--- a/src/org/mockito/internal/matchers/NotNull.java\n+++ b/src/org/mockito/internal/matchers/NotNull.java\n package org.mockito.internal.matchers;\n \n \n-public class NotNull implements IArgumentMatcher {\n+public class NotNull implements IArgumentMatcher<Object> {\n \n     public static final NotNull NOT_NULL = new NotNull();\n     \n--- a/src/org/mockito/internal/matchers/Null.java\n+++ b/src/org/mockito/internal/matchers/Null.java\n package org.mockito.internal.matchers;\n \n \n-public class Null implements IArgumentMatcher {\n+public class Null implements IArgumentMatcher<Object> {\n \n     public static final Null NULL = new Null();\n \n--- a/src/org/mockito/internal/matchers/Or.java\n+++ b/src/org/mockito/internal/matchers/Or.java\n import java.util.List;\n \n \n+@SuppressWarnings(\"unchecked\")\n public class Or implements IArgumentMatcher {\n \n     private final List<IArgumentMatcher> matchers;\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n package org.mockito.internal.matchers;\n \n \n-public class Same implements IArgumentMatcher {\n+public class Same implements IArgumentMatcher<Object> {\n \n     private final Object wanted;\n \n--- a/src/org/mockito/internal/matchers/StartsWith.java\n+++ b/src/org/mockito/internal/matchers/StartsWith.java\n package org.mockito.internal.matchers;\n \n \n-public class StartsWith implements IArgumentMatcher {\n+public class StartsWith implements IArgumentMatcher<String> {\n \n     private final String prefix;\n \n         this.prefix = prefix;\n     }\n \n-    public boolean matches(Object actual) {\n-        return (actual instanceof String)\n-                && ((String) actual).startsWith(prefix);\n+    public boolean matches(String actual) {\n+        return actual != null && actual.startsWith(prefix);\n     }\n \n     public void appendTo(StringBuilder buffer) {\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n import org.mockito.internal.matchers.Or;\n \n //TODO should be similar pattern to MP\n+@SuppressWarnings(\"unchecked\")\n public class LastArguments {\n     \n     private static final ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();\n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.math.BigDecimal;\n \n \n public class ComparableMatchersTest extends RequiresValidState {\n \n-    @Test\n-    public void testNotComparable() {\n-        CompareTo<Long> cmpTo = new CompareTo<Long>(5L) {\n-\n-            @Override\n-            protected String getName() {\n-                return null;\n-            }\n-\n-            @Override\n-            protected boolean matchResult(int result) {\n-                fail(\"Shouldn't be called since the passed argument is not Comparable\");\n-                return true;\n-            }\n-            \n-        };\n-        \n-        assertFalse(cmpTo.matches(new Object()));\n-    }\n     @Test\n     public void testLessThan() {\n         test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n \n @SuppressWarnings(\"unchecked\")\n public class CustomMatchersTest extends RequiresValidState {\n-    private final class ZeroOrOne extends CustomMatcher {\n-        public boolean matches(Object argument) {\n-            if (((Integer) argument) == 0 || ((Integer) argument) == 1) {  \n+    private final class ZeroOrOne extends CustomMatcher<Integer> {\n+        public boolean matches(Integer argument) {\n+            if (argument == 0 || argument == 1) {\n                 return true;\n             }\n             \n     }\n \n     //TODO make CustomMatcher part of framework\n-    abstract class CustomMatcher implements IArgumentMatcher {\n+    abstract class CustomMatcher<T> implements IArgumentMatcher<T> {\n         public void appendTo(StringBuilder builder) {\n             builder.append(\"<custom argument matcher>\");\n         }\n \n-        public abstract boolean matches(Object argument);\n+        public abstract boolean matches(T argument);\n     }\n     \n     private IMethods mock;\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n \n         assertEquals(\"1\", mock.oneArg(\"ab12\"));\n         assertEquals(null, mock.oneArg(\"12345\"));\n+        assertEquals(null, mock.oneArg(null));\n     }\n \n     @Test\n             assertThat(e, messageContains(\"eq(1.0, 0.1)\"));\n         }\n     }\n-\n+    \n     @Test\n     public void sameMatcher() {\n         Object one = new String(\"1243\");\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n import org.mockito.internal.matchers.Same;\n import org.mockito.internal.matchers.StartsWith;\n \n+@SuppressWarnings(\"unchecked\")\n public class MatchersToStringTest extends RequiresValidState {\n     private StringBuilder buffer;\n ", "timestamp": 1199565394, "metainfo": ""}