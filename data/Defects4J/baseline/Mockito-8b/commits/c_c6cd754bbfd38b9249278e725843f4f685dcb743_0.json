{"sha": "c6cd754bbfd38b9249278e725843f4f685dcb743", "log": "Made assertions consistent  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401348", "commit": "\n--- a/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n         p.print(logger);\n \n         // then\n-        assertThat(logger.getLoggedInfo(), contains(\"stub was not used\"));\n-        assertThat(logger.getLoggedInfo(), contains(\"simpleMethod()\"));\n+        assertContains(\"stub was not used\", logger.getLoggedInfo());\n+        assertContains(\"simpleMethod()\", logger.getLoggedInfo());\n     }\n \n     @Test\n         p.print(logger);\n \n         // then\n-        assertThat(logger.getLoggedInfo(), contains(\"was not stubbed\"));\n-        assertThat(logger.getLoggedInfo(), contains(\"differentMethod()\"));\n+        assertContains(\"was not stubbed\", logger.getLoggedInfo());\n+        assertContains(\"differentMethod()\", logger.getLoggedInfo());\n     }\n \n     @Test\n         p.print(logger);\n \n         // then\n-        assertThat(logger.getLoggedInfo(), contains(\"Stubbed this way\"));\n-        assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"foo\\\")\"));\n-        assertThat(logger.getLoggedInfo(), contains(\"called with different arguments\"));\n-        assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"bar\\\")\"));\n+        assertContains(\"Stubbed this way\", logger.getLoggedInfo());\n+        assertContains(\"simpleMethod(\\\"foo\\\")\", logger.getLoggedInfo());\n+        assertContains(\"called with different arguments\", logger.getLoggedInfo());\n+        assertContains(\"simpleMethod(\\\"bar\\\")\", logger.getLoggedInfo());\n     }\n \n     @Test\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n         Matcher mTwo = new Equals('x');\n         InvocationMatcher equals = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(mTwo));\n \n-        assertThat(notNull.toString(), contains(\"simpleMethod(notNull())\"));\n-        assertThat(equals.toString(), contains(\"simpleMethod('x')\"));\n+        assertContains(\"simpleMethod(notNull())\", notNull.toString());\n+        assertContains(\"simpleMethod('x')\", equals.toString());\n     }\n     \n     @Test\n--- a/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n                 notifier.fireTestFailure(null);\n                 \n                 String loggedInfo = loggerStub.getLoggedInfo();\n-                assertThat(loggedInfo, contains(\"[Mockito] Warning - stubbed method called with different arguments\"));\n-                assertThat(loggedInfo, contains(\"Stubbed this way:\"));\n-                assertThat(loggedInfo, contains(\"mock.simpleMethod(789);\"));\n-                assertThat(loggedInfo, contains(\".someStubbing(\"));\n+                assertContains(\"[Mockito] Warning - stubbed method called with different arguments\", loggedInfo);\n+                assertContains(\"Stubbed this way:\", loggedInfo);\n+                assertContains(\"mock.simpleMethod(789);\", loggedInfo);\n+                assertContains(\".someStubbing(\", loggedInfo);\n                 \n-                assertThat(loggedInfo, contains(\"But called with different arguments:\"));\n-                assertThat(loggedInfo, contains(\"mock.simpleMethod(10);\"));\n-                assertThat(loggedInfo, contains(\".callStubbedMethodWithDifferentArgs(\"));\n+                assertContains(\"But called with different arguments:\", loggedInfo);\n+                assertContains(\"mock.simpleMethod(10);\", loggedInfo);\n+                assertContains(\".callStubbedMethodWithDifferentArgs(\", loggedInfo);\n             }\n         });\n     }\n--- a/test/org/mockitousage/ReplacingObjectMethodsTest.java\n+++ b/test/org/mockitousage/ReplacingObjectMethodsTest.java\n         \n         assertThat(mock.hashCode(), not(equalTo(otherMock.hashCode())));\n         \n-        assertThat(mock.toString(), contains(\"Mock for ObjectMethodsOverridden\"));\n+        assertContains(\"Mock for ObjectMethodsOverridden\", mock.toString());\n     }\n     \n     @Test \n         \n         assertThat(mock.hashCode(), not(equalTo(otherMock.hashCode())));\n         \n-        assertThat(mock.toString(), contains(\"Mock for ObjectMethodsOverriddenSubclass\"));\n+        assertContains(\"Mock for ObjectMethodsOverriddenSubclass\", mock.toString());\n     }\n     \n     public static class ObjectMethodsOverridden {\n--- a/test/org/mockitousage/SpyingOnRealObjectsTest.java\n+++ b/test/org/mockitousage/SpyingOnRealObjectsTest.java\n             spy(new Foo() {});\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.getMessage(), contains(\"cannot mock\"));\n+            assertContains(\"cannot mock\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitousage/reset/ResetTest.java\n+++ b/test/org/mockitousage/reset/ResetTest.java\n         IMethods mockTwo = mock(IMethods.class);\n         when(mockTwo.toString()).thenReturn(\"test\");\n         reset(mockTwo);\n-        assertThat(mockTwo.toString(), contains(\"Mock for IMethods\"));\n+        assertContains(\"Mock for IMethods\", mockTwo.toString());\n     }\n \n     @Test\n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n         IMethods mockTwo = mock(IMethods.class);\n         when(mockTwo.toString()).thenReturn(\"test\");\n         \n-        assertThat(mock.toString(), contains(\"Mock for IMethods\"));\n+        assertContains(\"Mock for IMethods\", mock.toString());\n         assertEquals(\"test\", mockTwo.toString());\n     }\n     \n--- a/test/org/mockitousage/stubbing/DeprecatedStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/DeprecatedStubbingTest.java\n         IMethods mockTwo = mock(IMethods.class);\n         stub(mockTwo.toString()).toReturn(\"test\");\n         \n-        assertThat(mock.toString(), contains(\"Mock for IMethods\"));\n+        assertContains(\"Mock for IMethods\", mock.toString());\n         assertEquals(\"test\", mockTwo.toString());\n     }\n     \n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n             doThrow(new FooCheckedException()).when(mock).throwsIOException(0);\n             fail();\n         } catch (Exception e) {\n-            assertThat(e.getMessage(), contains(\"Checked exception is invalid\"));\n+            assertContains(\"Checked exception is invalid\", e.getMessage());\n         }\n     }\n     \n             doReturn(\"foo\").when(mock).voidMethod();\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.getMessage(), contains(\"Cannot stub a void method with a return value\"));\n+            assertContains(\"Cannot stub a void method with a return value\", e.getMessage());\n         }\n     }\n     \n             doReturn(\"foo\").when(\"foo\").toString();\n             fail();\n         } catch (Exception e) {\n-            assertThat(e.getMessage(), contains(\"Argument passed to when() is not a mock\"));\n+            assertContains(\"Argument passed to when() is not a mock\", e.getMessage());\n         }\n     }\n     \n             doReturn(\"foo\").when((Object) null).toString();\n             fail();\n         } catch (Exception e) {\n-            assertThat(e.getMessage(), contains(\"Argument passed to when() is null\"));\n+            assertContains(\"Argument passed to when() is null\", e.getMessage());\n         }\n     }    \n     \n             doNothing().when(mock).simpleMethod();\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.getMessage(), contains(\"Only void methods can doNothing()\"));\n+            assertContains(\"Only void methods can doNothing()\", e.getMessage());\n         }\n     }\n     \n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n         org.junit.Assert.assertThat(message, actual, m);\n     }\n     \n-    public static <T> Assertor<String> contains(final String substring) {\n-        return new Assertor<String>() {\n-            public void assertValue(String value) {\n-                assertTrue(\"This substring: \\n\" + substring + \n-                        \"\\nshould be inside of:\\n\" + value\n-                        , value.contains(substring));\n-            }\n-        };\n-    }\n-    \n     public static <T> Assertor<String> endsWith(final String substring) {\n         return new Assertor<String>() {\n             public void assertValue(String value) {", "timestamp": 1240168581, "metainfo": ""}