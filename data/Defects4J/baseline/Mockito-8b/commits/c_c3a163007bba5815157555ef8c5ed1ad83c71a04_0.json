{"sha": "c3a163007bba5815157555ef8c5ed1ad83c71a04", "log": "argument matcher stuff  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40254", "commit": "\n--- a/src/org/mockito/internal/matchers/IArgumentMatcher.java\n+++ b/src/org/mockito/internal/matchers/IArgumentMatcher.java\n      * of failure, the printed message will show this string to allow to know which\n      * matcher was used for the failing call.\n      * \n-     * @param buffer the buffer to which the string representation is appended.\n+     * @param builder the builder to which the string representation is appended.\n      */\n-    void appendTo(StringBuilder buffer);\n+    void appendTo(StringBuilder builder);\n }\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.verification.TooManyActualInvocations;\n+import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.progress.LastArguments;\n+import org.mockitousage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class CustomMatchersTest extends RequiresValidState {\n+    private final class ZeroOrOne extends CustomMatcher {\n+        public boolean matches(Object argument) {\n+            if (((Integer) argument) == 0 || ((Integer) argument) == 1) {  \n+                return true;\n+            }\n+            \n+            return false;\n+        }\n+    }\n+\n+    //TODO make CustomMatcher part of framework\n+    abstract class CustomMatcher implements IArgumentMatcher {\n+        public void appendTo(StringBuilder builder) {\n+            builder.append(\"<custom argument matcher>\");\n+        }\n+\n+        public abstract boolean matches(Object argument);\n+    }\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void shouldAllowUsingCustomMatcher() {\n+        stub(mock.simpleMethod(intThatIs(new ZeroOrOne()))).toReturn(\"zero or one\");\n+        \n+        assertEquals(\"zero or one\", mock.simpleMethod(0));\n+        assertEquals(\"zero or one\", mock.simpleMethod(1));\n+        assertEquals(null, mock.simpleMethod(2));\n+        \n+        try {\n+            verify(mock).simpleMethod(intThatIs(new ZeroOrOne()));\n+            fail();\n+        } catch (TooManyActualInvocations e) {}\n+    }\n+\n+    private int intThatIs(CustomMatcher matcher) {\n+        LastArguments.instance().reportMatcher(matcher);\n+        return 0;\n+    }\n+}", "timestamp": 1199057208, "metainfo": ""}