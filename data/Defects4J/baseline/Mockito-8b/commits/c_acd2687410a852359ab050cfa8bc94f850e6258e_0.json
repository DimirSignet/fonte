{"sha": "acd2687410a852359ab050cfa8bc94f850e6258e", "log": "Various bits of refactoring and tidy up on current timeout implementation, to make it easy to add after() shortly", "commit": "\n--- a/src/org/mockito/internal/verification/VerificationWithTimeoutImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationWithTimeoutImpl.java\n  * Verifies that another verification mode (the delegate) becomes true within a certain timeframe\n  * (before timeoutMillis has passed, measured from the call to verify()).\n  */\n-public class VerificationWithTimeoutImpl {\n+public class VerificationWithTimeoutImpl implements VerificationMode {\n     \n     VerificationMode delegate;\n     int timeoutMillis;\n         }\n     }\n \n-    void sleep(int sleep) {\n+    private void sleep(int sleep) {\n         try {\n             Thread.sleep(sleep);\n         } catch (InterruptedException ie) {\n         return timeoutMillis;\n     }\n \n-    public int getTreshhold() {\n+    public int getPollingPeriod() {\n         return pollingPeriod;\n     }    \n }\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.VerificationWithTimeoutImpl;\n-import org.mockito.internal.verification.api.VerificationData;\n \n /**\n  * See the javadoc for {@link VerificationWithTimeout}\n  * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.\n  * See javadoc for {@link VerificationWithTimeout}\n  */\n-public class Timeout implements VerificationWithTimeout {\n-\n-    VerificationWithTimeoutImpl impl;\n-\n+public class Timeout extends VerificationWrapper<VerificationWithTimeoutImpl> implements VerificationWithTimeout {\n+    \n     /**\n      * See the javadoc for {@link VerificationWithTimeout}\n      * <p>\n     /**\n      * See the javadoc for {@link VerificationWithTimeout}\n      */\n-    Timeout(int treshhold, int millis, VerificationMode delegate) {\n-        this.impl = new VerificationWithTimeoutImpl(treshhold, millis, delegate);\n+    Timeout(int pollingPeriod, int millis, VerificationMode delegate) {\n+        super(new VerificationWithTimeoutImpl(pollingPeriod, millis, delegate));\n     }\n-\n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n-    public void verify(VerificationData data) {\n-        impl.verify(data);\n+    \n+    @Override\n+    protected VerificationMode copySelfWithNewVerificationMode(VerificationMode newVerificationMode) {\n+        return new Timeout(wrappedVerification.getPollingPeriod(), wrappedVerification.getTimeout(), newVerificationMode);\n     }\n-\n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n-    public VerificationMode atLeast(int minNumberOfInvocations) {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeast(minNumberOfInvocations));\n-    }\n-\n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n-    public VerificationMode atLeastOnce() {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeastOnce());\n-    }\n-\n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n+    \n     public VerificationMode atMost(int maxNumberOfInvocations) {\n         new Reporter().atMostAndNeverShouldNotBeUsedWithTimeout();\n         return null;\n     }\n \n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n     public VerificationMode never() {\n         new Reporter().atMostAndNeverShouldNotBeUsedWithTimeout();\n         return null;\n     }\n \n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n-    public VerificationMode only() {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.only());\n-    }\n-\n-    /**\n-     * See the javadoc for {@link VerificationWithTimeout}\n-     */\n-    public VerificationMode times(int wantedNumberOfInvocations) {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(wantedNumberOfInvocations));\n-    }\n }\n--- /dev/null\n+++ b/src/org/mockito/verification/VerificationWrapper.java\n+package org.mockito.verification;\n+\n+import org.mockito.internal.verification.VerificationModeFactory;\n+import org.mockito.internal.verification.api.VerificationData;\n+\n+public abstract class VerificationWrapper<WrapperType extends VerificationMode> implements VerificationMode {\n+\n+    protected final WrapperType wrappedVerification;\n+\n+    public VerificationWrapper(WrapperType wrappedVerification) {\n+        this.wrappedVerification = wrappedVerification;\n+    }\n+\n+    public void verify(VerificationData data) {\n+        wrappedVerification.verify(data);\n+    } \n+    \n+    protected abstract VerificationMode copySelfWithNewVerificationMode(VerificationMode verificationMode);\n+\n+    public VerificationMode times(int wantedNumberOfInvocations) {\n+        return copySelfWithNewVerificationMode(VerificationModeFactory.times(wantedNumberOfInvocations));\n+    }\n+    \n+    public VerificationMode never() {\n+        return copySelfWithNewVerificationMode(VerificationModeFactory.atMost(0));\n+    }\n+\n+    public VerificationMode atLeastOnce() {\n+        return copySelfWithNewVerificationMode(VerificationModeFactory.atLeastOnce());\n+    }\n+\n+    public VerificationMode atLeast(int minNumberOfInvocations) {\n+        return copySelfWithNewVerificationMode(VerificationModeFactory.atLeast(minNumberOfInvocations));\n+    }\n+\n+    public VerificationMode atMost(int maxNumberOfInvocations) {\n+        return copySelfWithNewVerificationMode(VerificationModeFactory.atMost(maxNumberOfInvocations));\n+    }\n+\n+    public VerificationMode only() {\n+        return copySelfWithNewVerificationMode(VerificationModeFactory.only());\n+    }\n+    \n+}\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n  */\n package org.mockito.verification;\n \n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.internal.verification.AtLeast;\n+import org.mockito.internal.verification.Only;\n+import org.mockito.internal.verification.Times;\n+import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockitoutil.TestBase;\n \n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockito.exceptions.base.MockitoAssertionError;\n-import org.mockito.internal.verification.AtLeast;\n-import org.mockito.internal.verification.AtMost;\n-import org.mockito.internal.verification.Only;\n-import org.mockito.internal.verification.Times;\n-import org.mockito.internal.verification.VerificationDataImpl;\n-import org.mockitoutil.TestBase;\n-\n-@SuppressWarnings(\"unchecked\")\n public class TimeoutTest extends TestBase {\n     \n     @Mock VerificationMode mode;\n         \n         doThrow(error).\n         doThrow(error).\n-        doThrow(error).        \n+        doThrow(error).\n         when(mode).verify(data);\n         \n         try {\n         \n         doThrow(error).\n         doThrow(error).\n-        doNothing().    \n+        doNothing().\n         when(mode).verify(data);\n         \n         t.verify(data);\n         assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);\n     }\n     \n-    private void assertCorrectMode(VerificationMode t, Class expectedType, int expectedTimeout, int expectedTreshold, Class expectedDelegateType) {\n+    private void assertCorrectMode(VerificationMode t, Class<?> expectedType, int expectedTimeout, int expectedPollingPeriod, Class<?> expectedDelegateType) {\n         assertEquals(expectedType, t.getClass());\n-        assertEquals(expectedTimeout, ((Timeout) t).impl.getTimeout());\n-        assertEquals(expectedTreshold, ((Timeout) t).impl.getTreshhold());\n-        assertEquals(expectedDelegateType, ((Timeout) t).impl.getDelegate().getClass());\n+        assertEquals(expectedTimeout, ((Timeout) t).wrappedVerification.getTimeout());\n+        assertEquals(expectedPollingPeriod, ((Timeout) t).wrappedVerification.getPollingPeriod());\n+        assertEquals(expectedDelegateType, ((Timeout) t).wrappedVerification.getDelegate().getClass());\n     }\n }\n--- a/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n+++ b/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.*;\n \n-@SuppressWarnings(\"unchecked\")\n public class VerificationWithTimeoutTest extends TestBase {\n \n-    List exceptions = new LinkedList();\n+    List<Exception> exceptions = new LinkedList<Exception>();\n     \n     @After\n     public void after() {\n     }\n     \n     @Mock\n-    private List mock;\n+    private List<String> mock;\n \n     @Test\n     public void shouldVerifyWithTimeout() throws Exception {", "timestamp": 1381493193, "metainfo": ""}