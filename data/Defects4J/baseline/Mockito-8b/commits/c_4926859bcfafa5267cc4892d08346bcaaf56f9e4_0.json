{"sha": "4926859bcfafa5267cc4892d08346bcaaf56f9e4", "log": "Changed should_try_to_verify_correct_number_of_times test to be independent on time problems  Fixed issue #66 (flaky test)", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/DurationChecker.java\n+package org.mockito.internal.verification;\n+\n+public interface DurationChecker {\n+    boolean isVerificationStillInProgress(long startTime);\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/DurationCheckerImpl.java\n+package org.mockito.internal.verification;\n+\n+public class DurationCheckerImpl implements DurationChecker {\n+\n+    private final long durationMillis;\n+\n+    public DurationCheckerImpl(long durationMillis) {\n+        this.durationMillis = durationMillis;\n+    }\n+\n+    public boolean isVerificationStillInProgress(long startTime) {\n+        return System.currentTimeMillis() - startTime <= durationMillis;\n+    }\n+}\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n     private final long durationMillis;\n     private final VerificationMode delegate;\n     private final boolean returnOnSuccess;\n+    private final DurationChecker durationChecker;\n     \n     /**\n      * Create this verification mode, to be used to verify invocation ongoing data later.\n         this.durationMillis = durationMillis;\n         this.delegate = delegate;\n         this.returnOnSuccess = returnOnSuccess;\n+        this.durationChecker = new DurationCheckerImpl(durationMillis);\n+    }\n+\n+    /**\n+     * Create this verification mode, to be used to verify invocation ongoing data later.\n+     *\n+     * @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n+     * @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied\n+     * @param delegate The verification mode to delegate overall success or failure to\n+     * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in\n+     *                        {@link org.mockito.verification.VerificationWithTimeout}, or to only return once\n+     *                        the delegate is satisfied and the full duration has passed (as in\n+     *                        {@link org.mockito.verification.VerificationAfterDelay}).\n+     * @param durationChecker Checker of whether the duration of the verification is still acceptable\n+     */\n+    public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess, DurationChecker durationChecker) {\n+        this.pollingPeriodMillis = pollingPeriodMillis;\n+        this.durationMillis = durationMillis;\n+        this.delegate = delegate;\n+        this.returnOnSuccess = returnOnSuccess;\n+        this.durationChecker = durationChecker;\n     }\n \n     /**\n         AssertionError error = null;\n         \n         long startTime = System.currentTimeMillis();\n-        while (System.currentTimeMillis() - startTime <= durationMillis) {\n+        while (durationChecker.isVerificationStillInProgress(startTime)) {\n             try {\n                 delegate.verify(data);\n                 \n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n package org.mockito.verification;\n \n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.verification.DurationChecker;\n+import org.mockito.internal.verification.DurationCheckerImpl;\n import org.mockito.internal.verification.VerificationOverTimeImpl;\n /**\n  * See the javadoc for {@link VerificationWithTimeout}\n     Timeout(long pollingPeriodMillis, long millis, VerificationMode delegate) {\n         super(new VerificationOverTimeImpl(pollingPeriodMillis, millis, delegate, true));\n     }\n+\n+    /**\n+     * See the javadoc for {@link VerificationWithTimeout}\n+     */\n+    Timeout(long pollingPeriodMillis, long millis, VerificationMode delegate, DurationChecker durationChecker) {\n+        super(new VerificationOverTimeImpl(pollingPeriodMillis, millis, delegate, true, durationChecker));\n+    }\n     \n     @Override\n     protected VerificationMode copySelfWithNewVerificationMode(VerificationMode newVerificationMode) {\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.exceptions.base.MockitoAssertionError;\n-import org.mockito.internal.verification.AtLeast;\n-import org.mockito.internal.verification.Only;\n-import org.mockito.internal.verification.Times;\n-import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockito.internal.verification.*;\n import org.mockitoutil.TestBase;\n \n public class TimeoutTest extends TestBase {\n     \n     @Mock VerificationMode mode;\n     @Mock VerificationDataImpl data;\n+    @Mock DurationChecker durationChecker;\n     MockitoAssertionError error = new MockitoAssertionError(\"\"); \n \n     @Test\n \n     @Test\n     public void should_try_to_verify_correct_number_of_times() {\n-        Timeout t = new Timeout(10, 50, mode);\n+        Timeout t = new Timeout(10, 50, mode, durationChecker);\n         \n         doThrow(error).when(mode).verify(data);\n-        \n+        when(durationChecker.isVerificationStillInProgress(anyLong())).thenReturn(true, true, true, true, true, false);\n+\n         try {\n             t.verify(data);\n             fail();\n         } catch (MockitoAssertionError e) {}\n-        \n+\n         verify(mode, times(5)).verify(data);\n     }\n     ", "timestamp": 1411850417, "metainfo": ""}