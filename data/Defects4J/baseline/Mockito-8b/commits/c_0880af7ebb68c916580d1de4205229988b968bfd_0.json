{"sha": "0880af7ebb68c916580d1de4205229988b968bfd", "log": "fixes test when compiled and run with JDK 1.7, method order is different, and we only want non generated methods (bridge method)", "commit": "\n--- a/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n+++ b/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java\n  */\n package org.mockito.internal.util.reflection;\n \n-import org.junit.Test;\n-\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom;\n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n-import static org.fest.assertions.Assertions.assertThat;\n-import static org.junit.Assert.fail;\n-import static org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom;\n+import org.junit.Test;\n \n @SuppressWarnings(\"unused\")\n public class GenericMetadataSupportTest {\n \n     private Method firstNamedMethod(String methodName, Class<?> clazz) {\n         for (Method method : clazz.getMethods()) {\n-            if (method.getName().contains(methodName)) {\n+            boolean protect_against_different_jdk_ordering_avoiding_bridge_methods = !method.isBridge();\n+            if (method.getName().contains(methodName) && protect_against_different_jdk_ordering_avoiding_bridge_methods) {\n                 return method;\n             }\n         }\n         throw new IllegalStateException(\"The method : '\" + methodName + \"' do not exist in '\" + clazz.getSimpleName() + \"'\");\n     }\n-\n-\n }", "timestamp": 1381857523, "metainfo": ""}