{"sha": "9325641b6b2862b65e65c8b59f70f5f1a49f7b4b", "log": "backward compatible", "commit": "\n--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n import static org.mockito.Mockito.withSettings;\n \n import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Modifier;\n \n import org.mockito.Captor;\n                                 .defaultAnswer(Mockito.CALLS_REAL_METHODS)\n                                 .name(field.getName())));\n                     } else {\n-                    \tMockSettings settings = withSettings()\n-                    \t\t\t.useConstructor()\n-                    \t\t\t.defaultAnswer(Mockito.CALLS_REAL_METHODS)\n-                    \t\t\t.name(field.getName());\n-                    \tif (field.getType().getEnclosingClass() != null\n-                    \t\t\t&& !Modifier.isStatic(field.getType().getModifiers())\n-                    \t\t\t&& field.getType().getEnclosingClass().isInstance(testInstance)) {\n-                    \t\tsettings.outerInstance(testInstance);\n-                    \t}\n-\t\t\t\t\t\tfield.set(testInstance, Mockito.mock(field.getType(), settings));\n+                    \tfield.set(testInstance, newSpyInstance(testInstance, field));\n                     }\n                 } catch (IllegalAccessException e) {\n                     throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n+                } catch (InstantiationException e) {\n+                    throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n+                } catch (InvocationTargetException e) {\n+                    throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\n                 }\n             }\n         }\n+    }\n+  \n+    private static Object newSpyInstance(Object testInstance, Field field)\n+    \t\tthrows InstantiationException, IllegalAccessException, InvocationTargetException {\n+    \tMockSettings settings = withSettings()\n+    \t\t\t.defaultAnswer(Mockito.CALLS_REAL_METHODS)\n+    \t\t\t.name(field.getName());\n+    \tClass<?> type = field.getType();\n+    \tif (type.isInterface()) {\n+    \t\treturn Mockito.mock(type,settings.useConstructor());\n+    \t}\n+    \ttry {\n+\t    \tif (!Modifier.isStatic(type.getModifiers())) {\n+\t        \tClass<?> enclosing = type.getEnclosingClass();\n+\t        \tif (enclosing != null) {\n+\t        \t\tif (!enclosing.isInstance(testInstance)) {\n+\t        \t\t\tthrow new MockitoException(\"Cannot spy inner \" + type);\n+\t        \t\t}\n+\t        \t\tif (Modifier.isPrivate(type.getDeclaredConstructor(enclosing).getModifiers())) {\n+\t        \t\t\tthrow new MockitoException(\"Cannot spy inner \" + type + \" with private constructor\");\n+\t        \t\t}\n+\t        \t\treturn Mockito.mock(type, settings\n+\t        \t\t\t\t.useConstructor()\n+\t        \t\t\t\t.outerInstance(testInstance));\n+\t        \t}\n+\t    \t}\n+\t    \tConstructor<?> constructor = type.getDeclaredConstructor();\n+\t    \tif (Modifier.isPrivate(constructor.getModifiers())) {\n+\t    \t\tconstructor.setAccessible(true);\n+\t    \t\treturn Mockito.mock(type, settings\n+\t    \t\t\t\t.spiedInstance(constructor.newInstance()));\n+\t    \t} else {\n+\t    \t\treturn Mockito.mock(type, settings.useConstructor());\n+\t    \t}\n+    \t} catch (NoSuchMethodException noDefaultConstructor) {\n+    \t\tthrow new MockitoException(\"0-arg constructor is required to spy \" + type);\n+    \t}\n     }\n     \n     //TODO duplicated elsewhere\n--- a/test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java\n+++ b/test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java\n         verify(mockHandler).setAnswersForStubbing(anyList());\n     }\n \n-    private static class CustomListener implements InvocationListener {\n-    \tCustomListener() {}\n+    private static class CustomListener implements InvocationListener {\n         public void reportInvocation(MethodInvocationReport methodInvocationReport) {\n             // nop\n         }\n--- a/test/org/mockitousage/annotation/SpyAnnotationTest.java\n+++ b/test/org/mockitousage/annotation/SpyAnnotationTest.java\n package org.mockitousage.annotation;\n \n import org.fest.assertions.Assertions;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n     @Spy NestedClassWithNoArgConstructor staticTypeWithNoArgConstructor;\n \n     @Spy\n-    NestedClassWithoutDefinedConstructor staticTypeWithoutDefinedConstructor;\n+    NestedClassWithoutDefinedConstructor staticTypeWithoutDefinedConstructor;\n+  \n+    @Rule public final ExpectedException shouldThrow = ExpectedException.none();\n \n \t@Test\n     public void shouldInitSpies() throws Exception {\n             MockitoAnnotations.initMocks(new FailingSpy());\n             fail();\n         } catch (MockitoException e) {\n-            Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");\n+            Assertions.assertThat(e.getMessage()).contains(\"0-arg constructor is required\");\n         }\n     }\n     \n \t@Test(expected = IndexOutOfBoundsException.class)\n     public void shouldResetSpies() throws Exception {\n         spiedList.get(10); // see shouldInitSpy\n-    }\n+    }\n+\n+\t@Test\n+\tpublic void shouldReportWhenInnerClassNotEnclosedByTestInstance() throws Exception {\n+\t\tclass Outer {\n+\t\t\tclass Inner {}\n+\t\t}\n+\t\tclass WithSpy {\n+\t\t\t@Spy private Outer.Inner inner;\n+\t\t}\n+\t\tshouldThrow.expect(MockitoException.class);\n+\t\tshouldThrow.expectMessage(\"Cannot spy inner class \");\n+\t\tMockitoAnnotations.initMocks(new WithSpy());\n+\t}\n \n     static class NestedClassWithoutDefinedConstructor { }\n \n--- a/test/org/mockitousage/basicapi/MockingDetailsTest.java\n+++ b/test/org/mockitousage/basicapi/MockingDetailsTest.java\n \n public class MockingDetailsTest {\n     \n-    private static class TestClass{\n-    \tTestClass() {}\n+    private static class TestClass{\n     }\n \n     @Mock", "timestamp": 1417513677, "metainfo": ""}