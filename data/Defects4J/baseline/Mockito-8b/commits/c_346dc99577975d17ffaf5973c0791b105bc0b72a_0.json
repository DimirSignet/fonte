{"sha": "346dc99577975d17ffaf5973c0791b105bc0b72a", "log": "Added handy answser. Fixed issue 155  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401928", "commit": "\n--- a/src/org/mockito/Answers.java\n+++ b/src/org/mockito/Answers.java\n  * <pre>\n  *   &#064;Mock(answer = RETURNS_DEEP_STUBS) UserProvider userProvider;\n  * </pre>\n+ * <b>This is not the full list</b> of Answers available in Mockito. Some interesting answers can be found in org.mockito.stubbing.answers package.\n  */\n public enum Answers {\n \n--- /dev/null\n+++ b/src/org/mockito/stubbing/answers/ReturnsElementsOf.java\n+package org.mockito.stubbing.answers;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Returns elements of the collection. Keeps returning the last element forever.\n+ * Might be useful on occasion when you have a collection of elements to return.\n+ * <p>\n+ * <pre>\n+ *   //this:\n+ *   when(mock.foo()).thenReturn(1, 2, 3);\n+ *   //is equivalent to:\n+ *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));\n+ * <pre>\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class ReturnsElementsOf implements Answer {\n+\n+    final LinkedList elements;\n+\n+    public ReturnsElementsOf(Collection elements) {\n+        if (elements == null) {\n+            throw new MockitoException(\"ReturnsElementsOf does not accept null as constructor argument.\\n\" +\n+            \t\t\"Please pass a collection instance\");\n+        }\n+        this.elements = new LinkedList(elements);\n+    }\n+\n+    @Override\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        if (elements.size() == 1)\n+            return elements.get(0);\n+        else \n+            return elements.poll();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stubbing;\n+\n+import static java.util.Arrays.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.stubbing.answers.ReturnsElementsOf;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class StubbingWithExtraAnswersTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+    \n+    @Test\n+    public void shouldWorkAsStandardMockito() throws Exception {\n+        //when\n+        List<Integer> list = asList(1, 2, 3);\n+        when(mock.objectReturningMethodNoArgs()).thenAnswer(new ReturnsElementsOf(list));\n+        \n+        //then\n+        assertEquals(1, mock.objectReturningMethodNoArgs());\n+        assertEquals(2, mock.objectReturningMethodNoArgs());\n+        assertEquals(3, mock.objectReturningMethodNoArgs());\n+        //last element is returned continuously\n+        assertEquals(3, mock.objectReturningMethodNoArgs());\n+        assertEquals(3, mock.objectReturningMethodNoArgs());\n+    }\n+    \n+    @Test\n+    public void shouldReturnNullIfNecessary() throws Exception {\n+        //when\n+        List<Integer> list = asList(1, null);\n+        when(mock.objectReturningMethodNoArgs()).thenAnswer(new ReturnsElementsOf(list));\n+        \n+        //then\n+        assertEquals(1, mock.objectReturningMethodNoArgs());\n+        assertEquals(null, mock.objectReturningMethodNoArgs());\n+        assertEquals(null, mock.objectReturningMethodNoArgs());\n+    }\n+    \n+    @Test\n+    public void shouldScreamWhenNullPassed() throws Exception {\n+        try {\n+            //when\n+            new ReturnsElementsOf(null);\n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+}", "timestamp": 1268688670, "metainfo": ""}