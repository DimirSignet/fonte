{"sha": "544ce1eebf6edaefb69f95a417e05ab7fb201afc", "log": "moved serialization utility method in a separate class in tests", "commit": "\n--- a/test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.withSettings;\n+import static org.mockitoutil.SimpleSerializationUtil.deserializeMock;\n+import static org.mockitoutil.SimpleSerializationUtil.serializeAndBack;\n+import static org.mockitoutil.SimpleSerializationUtil.serializeMock;\n \n @SuppressWarnings({\"unchecked\", \"serial\"})\n public class MocksSerializationForAnnotationTest extends TestBase implements Serializable {\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n \n import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n import static org.mockito.Mockito.anyObject;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.withSettings;\n+import static org.mockitoutil.SimpleSerializationUtil.deserializeMock;\n+import static org.mockitoutil.SimpleSerializationUtil.serializeAndBack;\n+import static org.mockitoutil.SimpleSerializationUtil.serializeMock;\n \n @SuppressWarnings({\"unchecked\", \"serial\"})\n public class MocksSerializationTest extends TestBase implements Serializable {\n             Assertions.assertThat(e.getMessage()).contains(Observable.class.getSimpleName()).contains(\"serializable()\").contains(\"implement Serializable\");\n         }\n     }\n+\n+    @Test\n+    public void try_some_mocks_with_current_answers() throws Exception {\n+        IMethods iMethods = mock(IMethods.class, RETURNS_DEEP_STUBS);\n+\n+        serializeAndBack(iMethods);\n+\n+\n+    }\n }\n--- a/test/org/mockitousage/basicapi/ObjectsSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/ObjectsSerializationTest.java\n \n package org.mockitousage.basicapi;\n \n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n import java.io.Serializable;\n \n-import org.junit.Test;\n-import org.mockitoutil.TestBase;\n+import static org.mockitoutil.SimpleSerializationUtil.serializeAndBack;\n \n @SuppressWarnings(\"serial\")\n public class ObjectsSerializationTest extends TestBase implements Serializable {\n--- /dev/null\n+++ b/test/org/mockitoutil/SimpleSerializationUtil.java\n+package org.mockitoutil;\n+\n+import junit.framework.Assert;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+public abstract class SimpleSerializationUtil {\n+\n+    //TODO use widely\n+    public static <T> T serializeAndBack(T obj) throws Exception {\n+        ByteArrayOutputStream os = serializeMock(obj);\n+        return (T) deserializeMock(os, Object.class);\n+    }\n+\n+    public static <T> T deserializeMock(ByteArrayOutputStream serialized, Class<T> type) throws IOException,\n+            ClassNotFoundException {\n+        InputStream unserialize = new ByteArrayInputStream(serialized.toByteArray());\n+        Object readObject = new ObjectInputStream(unserialize).readObject();\n+        Assert.assertNotNull(readObject);\n+        return type.cast(readObject);\n+    }\n+\n+    public static ByteArrayOutputStream serializeMock(Object mock) throws IOException {\n+        ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n+        new ObjectOutputStream(serialized).writeObject(mock);\n+        return serialized;\n+    }\n+}\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n         return StringDescription.toString(m);\n     }\n \n-    //TODO use widely\n-    protected <T> T serializeAndBack(T obj) throws Exception {\n-        ByteArrayOutputStream os = this.serializeMock(obj);\n-        return (T) this.deserializeMock(os, Object.class);\n-    }\n-\n-    protected <T> T deserializeMock(ByteArrayOutputStream serialized, Class<T> type) throws IOException,\n-            ClassNotFoundException {\n-        InputStream unserialize = new ByteArrayInputStream(serialized.toByteArray());\n-        Object readObject = new ObjectInputStream(unserialize).readObject();\n-        assertNotNull(readObject);\n-        return type.cast(readObject);\n-    }\n-\n-    protected ByteArrayOutputStream serializeMock(Object mock) throws IOException {\n-        ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n-        new ObjectOutputStream(serialized).writeObject(mock);\n-        return serialized;\n-    }\n-\n     protected boolean isMock(Object o) {\n         return new MockUtil().isMock(o);\n     }", "timestamp": 1353244041, "metainfo": ""}