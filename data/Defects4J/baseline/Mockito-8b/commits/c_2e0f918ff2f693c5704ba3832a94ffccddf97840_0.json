{"sha": "2e0f918ff2f693c5704ba3832a94ffccddf97840", "log": "Added more tests around new matchers  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401285", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/NewMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class NewMatchersTest extends TestBase {\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void shouldAllowAnyList() {\n+        when(mock.forList(anyList())).thenReturn(\"x\");\n+        \n+        assertEquals(\"x\", mock.forList(null));\n+        assertEquals(\"x\", mock.forList(Arrays.asList(\"x\", \"y\")));\n+        \n+        verify(mock, times(2)).forList(anyList());\n+    }\n+    \n+    @Test\n+    public void shouldAllowAnyCollection() {\n+        when(mock.forCollection(anyCollection())).thenReturn(\"x\");\n+        \n+        assertEquals(\"x\", mock.forCollection(null));\n+        assertEquals(\"x\", mock.forCollection(Arrays.asList(\"x\", \"y\")));\n+        \n+        verify(mock, times(2)).forCollection(anyCollection());\n+    }\n+    \n+    @Test\n+    public void shouldAllowAnyMap() {\n+        when(mock.forMap(anyMap())).thenReturn(\"x\");\n+        \n+        assertEquals(\"x\", mock.forMap(null));\n+        assertEquals(\"x\", mock.forMap(new HashMap<String, String>()));\n+        \n+        verify(mock, times(2)).forMap(anyMap());\n+    }\n+    \n+    @Test\n+    public void shouldAllowAnySet() {\n+        when(mock.forSet(anySet())).thenReturn(\"x\");\n+        \n+        assertEquals(\"x\", mock.forSet(null));\n+        assertEquals(\"x\", mock.forSet(new HashSet<String>()));\n+        \n+        verify(mock, times(2)).forSet(anySet());\n+    }\n+}", "timestamp": 1238754604, "metainfo": ""}