{"sha": "dd168ccf8306aee43f9b0e0ccbdb4155d9047081", "log": "-moved TODOs to java class -further refactoring/delete of tests  --HG-- rename : test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java => test/org/mockito/usage/ReturningDefaultValuesTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%407", "commit": "\n--- /dev/null\n+++ b/test/ToDo.java\n+\n+public class ToDo {\n+/*    \n+ Szczepan's\n+ \n+ TODO review ALL tests from EasyMock and leave only what's needed\n+ TODO review ALL CODE from EasyMock and leave only what's needed\n+ TODO the headers in files to show MIT license and copyrights\n+  \n+*/\n+}\n--- a/test/org/easymock/internal/ExpectedInvocationTest.java\n+++ b/test/org/easymock/internal/ExpectedInvocationTest.java\n package org.easymock.internal;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.*;\n \n import java.lang.reflect.Method;\n \n         Invocation invocation = new Invocation(null, m, args);\n         assertThat(new ExpectedInvocation(invocation, null).hashCode(), equalTo(1));\n     }\n+    \n+    @Test\n+    public void shouldNotEqualIfNumberOfArgumentsDiffer() throws SecurityException, NoSuchMethodException {\n+        Object mock = new Object();\n+\n+        Method dummyMethod = Object.class.getMethod(\"equals\",\n+                new Class[] { Object.class });\n+\n+        ExpectedInvocation invocationWithOneArg = new ExpectedInvocation(\n+                new Invocation(mock, dummyMethod, new Object[] { \"\" }),\n+                null);\n+        ExpectedInvocation invocationWithTwoArgs = new ExpectedInvocation(\n+                new Invocation(mock, dummyMethod, new Object[] { \"\", \"\" }),\n+                null);\n+\n+        assertFalse(invocationWithOneArg.equals(null));\n+        assertFalse(invocationWithOneArg.equals(invocationWithTwoArgs));\n+    }\n }\n--- a/test/org/easymock/tests/IMethods.java\n+++ b/test/org/easymock/tests/IMethods.java\n \n public interface IMethods {\n \n+    //TODO kill the index\n     boolean booleanReturningMethod(int index);\n \n     byte byteReturningMethod(int index);\n--- a/test/org/easymock/tests/InvocationTest.java\n+++ b/test/org/easymock/tests/InvocationTest.java\n     }\n     \n     @Test\n-    public void shouldNotEqualIfNumberOfArgsDiffer() throws SecurityException, NoSuchMethodException {\n-        Object mock = new Object();\n-\n-        ExpectedInvocation invocationWithOneArg = new ExpectedInvocation(\n-                new Invocation(mock, dummyMethod, new Object[] { \"\" }),\n-                null);\n-        ExpectedInvocation invocationWithTwoArgs = new ExpectedInvocation(\n-                new Invocation(mock, dummyMethod, new Object[] { \"\", \"\" }),\n-                null);\n-\n-        assertFalse(invocationWithOneArg.equals(null));\n-        assertFalse(invocationWithOneArg.equals(invocationWithTwoArgs));\n-    }\n-\n-    @Test\n     public void shouldNotImplementHashCodeBecauseItsNotUsedWithMaps() {\n         try {\n             call.hashCode();\n--- /dev/null\n+++ b/test/org/mockito/usage/ReturningDefaultValuesTest.java\n+/*\n+ * Copyright (c) 2007 Szczepan Faber \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.*;\n+\n+import org.easymock.tests.IMethods;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ReturningDefaultValuesTest {\n+\n+    @Test\n+    public void shouldReturnAllKindsOfPrimitives() {\n+        IMethods mock = Mockito.mock(IMethods.class);\n+\n+        //this is mainly to prove that cglib enchanted thing works properly \n+        assertEquals((byte)0, mock.byteReturningMethod(12));\n+        assertEquals((short)0, mock.shortReturningMethod(12));\n+        assertEquals(0, mock.intReturningMethod(12));\n+        assertEquals(0L, mock.intReturningMethod(12));\n+        assertEquals(0.0F, mock.floatReturningMethod(12), 0.0F);\n+        assertEquals(0.0D, mock.doubleReturningMethod(12), 0.0D);\n+        assertEquals('\\u0000', mock.charReturningMethod(12));\n+        assertEquals(false, mock.booleanReturningMethod(12));\n+        assertEquals(null, mock.objectReturningMethod(12));\n+    }\n+    \n+    @Test \n+    public void shouldReturnEmptyCollections() {\n+        CollectionsServer mock = Mockito.mock(CollectionsServer.class);\n+        \n+        assertTrue(mock.list().isEmpty());\n+        assertTrue(mock.linkedList().isEmpty());\n+        assertTrue(mock.map().isEmpty());\n+        assertTrue(mock.hashSet().isEmpty());\n+    }\n+\n+    private class CollectionsServer {\n+        List list() {\n+            return null;\n+        }\n+\n+        LinkedList linkedList() {\n+            return null;\n+        }\n+\n+        Map map() {\n+            return null;\n+        }\n+\n+        java.util.HashSet hashSet() {\n+            return null;\n+        }\n+    }\n+}", "timestamp": 1195157591, "metainfo": ""}