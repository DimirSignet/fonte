{"sha": "a20af30f57be01aa7f54276406433f1cb683cdbe", "log": "Added new custom assertion Added yet another test  --HG-- rename : test/org/mockitoutil/TestBase.java => test/org/mockitoutil/CustomAssertionsTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401736", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/debugging/PrintingInvocationsDetectsUnusedStubTest.java\n+package org.mockitousage.debugging;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.BDDMockito.*;\n+\n+public class PrintingInvocationsDetectsUnusedStubTest extends TestBase {\n+\n+    @Mock Foo mock;\n+    @Mock Foo mockTwo;\n+\n+    @Test\n+    public void shouldDetectUnusedStubbingWhenPrinting() throws Exception {\n+        //given\n+        given(mock.giveMeSomeString(\"different arg\")).willReturn(\"foo\");\n+        mock.giveMeSomeString(\"arg\");\n+\n+        //when\n+        String log = Mockito.debug().printInvocations(mock, mockTwo);\n+\n+        //then\n+        assertContainsIgnoringCase(\"unused\", log);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitoutil/CustomAssertionsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitoutil;\n+\n+import org.junit.Test;\n+\n+public class CustomAssertionsTest extends TestBase {\n+\n+    @Test\n+    public void shouldKnowWhenStringContainsIgnoringCase() throws Exception {\n+        assertContainsIgnoringCase(\"foo\", \"foo\");\n+        assertContainsIgnoringCase(\"fOo\", \"foo\");\n+        assertContainsIgnoringCase(\"FoO\", \"foo\");\n+        assertContainsIgnoringCase(\"foo\", \"a foo :)\");\n+        assertContainsIgnoringCase(\"fOo\", \"a foo :)\");\n+        assertContainsIgnoringCase(\"FoO\", \"a foo :)\");\n+        assertContainsIgnoringCase(\"\", \"a foo :)\");\n+        assertContainsIgnoringCase(\"\", \"\");\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void shouldKnowWhenStringDoesNotContainIgnoringCase() throws Exception {\n+        assertContainsIgnoringCase(\"fooo\", \"foo\");\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void shouldKnowWhenStringDoesNotContainIgnoringCase2() throws Exception {\n+        assertContainsIgnoringCase(\"fOo\", \"f oo\");\n+    }\n+}\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n package org.mockitoutil;\n \n import junit.framework.Assert;\n-\n import org.hamcrest.Matcher;\n import org.hamcrest.SelfDescribing;\n import org.hamcrest.StringDescription;\n import org.mockito.StateMaster;\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.configuration.ConfigurationAccess;\n-import org.mockito.internal.invocation.*;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.SerializableMethod;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n \n import java.io.*;\n                 \"\\n\"\n                 , string.contains(sub));\n     }\n-    \n+\n+    public static void assertContainsIgnoringCase(String sub, String string) {\n+        assertTrue(\"\\n\" +\n+                \"This substing:\" +\n+                sub +\n+                \"\\n\" +\n+                \"should be inside of:\" +\n+                string +\n+                \"\\n\"\n+                , containsIgnoringCase(string, sub));\n+    }\n+\n+    private static boolean containsIgnoringCase(String string, String sub) {\n+        int subLength = sub.length();\n+        if (string.length() < subLength) {\n+            return false;\n+        }\n+        int i = 0;\n+        while(i+subLength <= string.length()) {\n+            boolean temp = string.substring(i, i+subLength).equalsIgnoreCase(sub);\n+            if (temp) {\n+                return true;\n+            }\n+            i++;\n+        }\n+        return false;\n+    }\n+\n     public static void assertNotContains(String sub, String string) {\n         assertFalse(\"\\n\" +\n                 \"This substing:\" +", "timestamp": 1258316499, "metainfo": ""}