{"sha": "b7417a3e60005a8941871345e6c1046d3fa58ab1", "log": "added feature of chaining consecutive exceptions for the same stubbed method call  --HG-- rename : test/org/mockitousage/stubbing/StubbingMultipleReturnValuesTest.java => test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40597", "commit": "\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n     }\n \n     public void addConsecutiveThrowable(Throwable throwable) {\n-        // TODO Auto-generated method stub\n+        validateThrowable(throwable);\n+        stubbed.getFirst().addResult(Result.createThrowResult(throwable, new StackTraceFilter()));\n     }    \n \n     public Object resultFor(Invocation invocation) throws Throwable {\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stubbing;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitousage.IMethods;\n+\n+public class StubbingConsecutiveReturnValuesTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+   \n+    @Test\n+    public void shouldReturnConsecutiveValues() throws Exception {\n+        stub(mock.simpleMethod())\n+            .toReturn(\"one\")\n+            .toReturn(\"two\")\n+            .toReturn(\"three\");\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+    }\n+    \n+    @Test\n+    public void shouldThrowConsecutively() throws Exception {\n+        stub(mock.simpleMethod())\n+            .toThrow(new RuntimeException())\n+            .toThrow(new IllegalArgumentException())\n+            .toThrow(new NullPointerException());\n+\n+        try {\n+            mock.simpleMethod();\n+        } catch (RuntimeException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+        } catch (IllegalArgumentException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+        } catch (NullPointerException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+        } catch (NullPointerException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldMixConsecutiveReturnsWithExcepions() throws Exception {\n+        stub(mock.simpleMethod())\n+            .toThrow(new IllegalArgumentException())\n+            .toReturn(\"one\")\n+            .toThrow(new NullPointerException())\n+            .toReturn(null);\n+        \n+        try {\n+            mock.simpleMethod();\n+        } catch (IllegalArgumentException e) {}\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        \n+        try {\n+            mock.simpleMethod();\n+        } catch (NullPointerException e) {}\n+        \n+        assertEquals(null, mock.simpleMethod());\n+        assertEquals(null, mock.simpleMethod());\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldValidateConsecutiveException() throws Exception {\n+        stub(mock.simpleMethod())\n+            .toReturn(\"one\")\n+            .toThrow(new Exception());\n+    }\n+}", "timestamp": 1209064642, "metainfo": ""}