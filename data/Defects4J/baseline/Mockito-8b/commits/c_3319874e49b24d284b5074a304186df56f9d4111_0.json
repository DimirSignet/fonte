{"sha": "3319874e49b24d284b5074a304186df56f9d4111", "log": "refactoring verifiers - making VerificationModeImpl thinner, another step  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40926", "commit": "\n--- a/src/org/mockito/InOrderVerifier.java\n+++ b/src/org/mockito/InOrderVerifier.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.verification.VerificationModeDecoder;\n \n /**\n  * Allows verifying in order. This class should not be exposed, hence default access.\n             reporter.inOrderRequiresFamiliarMock();\n         }\n         Integer wantedCount = mode.wantedCount();\n-        if (mode.atLeastMode()) {\n+        if (new VerificationModeDecoder(mode).atLeastMode()) {\n             return Mockito.verify(mock, VerificationModeImpl.inOrderAtLeast(wantedCount, mocksToBeVerifiedInOrder));\n         } else {\n             return Mockito.verify(mock, VerificationModeImpl.inOrder(wantedCount, mocksToBeVerifiedInOrder));            \n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockito.internal.util.ListUtil;\n import org.mockito.internal.util.ListUtil.Filter;\n+import org.mockito.internal.verification.VerificationModeDecoder;\n \n public class InvocationsFinder {\n \n         List<Invocation> unverified = removeVerifiedInOrder(invocations);\n         List<Invocation> firstChunk = getFirstMatchingChunk(wanted, unverified);\n         \n-        if (mode.atLeastMode() || !mode.matchesActualCount(firstChunk.size())) {\n+        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n+        if (decoder.atLeastMode() || !decoder.matchesActualCount(firstChunk.size())) {\n             return this.findAllMatchingUnverifiedChunks(invocations, wanted);\n         } else {\n             return firstChunk;\n--- a/src/org/mockito/internal/progress/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/progress/VerificationModeImpl.java\n  */\n public class VerificationModeImpl implements VerificationMode {\n     \n-    enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n+    public enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n     \n     private final int wantedInvocationCount;\n     private final List<? extends Object> mocksToBeVerifiedInOrder;\n     public List<? extends Object> getMocksToBeVerifiedInOrder() {\n         return mocksToBeVerifiedInOrder;\n     }\n-\n-    public boolean atLeastMode() {\n-        return verification == Verification.AT_LEAST;\n+    \n+    public Verification getVerification() {\n+        return verification;\n     }\n \n-    public boolean explicitMode() {\n-        return verification == Verification.EXPLICIT;\n-    }\n-    \n-    public boolean inOrderMode() {\n-        return !mocksToBeVerifiedInOrder.isEmpty() && (explicitMode() || atLeastMode());\n-    }\n-    \n-    public boolean missingMethodMode() {\n-        return (explicitMode() && wantedInvocationCount > 0) || (atLeastMode() && wantedInvocationCount == 1);\n-    }\n-    \n-    public boolean exactNumberOfInvocationsMode() {\n-        return !inOrderMode() && (explicitMode() || atLeastMode());\n-    }\n-\n-    public boolean matchesActualCount(int actualCount) {\n-        boolean atLeast = atLeastMode() && actualCount >= wantedInvocationCount;\n-        boolean actualMatchesWanted = !atLeastMode() && wantedInvocationCount == actualCount;\n-        \n-        return atLeast || actualMatchesWanted;\n-    }\n-    \n-    public boolean tooLittleActualInvocations(int actualCount) {\n-        return !atLeastMode() && wantedInvocationCount > actualCount; \n-    }\n-\n-    public boolean tooLittleActualInvocationsInAtLeastMode(int actualCount) {\n-        return atLeastMode() && wantedInvocationCount > actualCount;\n-    }\n-    \n-    public boolean tooManyActualInvocations(int actualCount) {\n-        return !atLeastMode() && wantedInvocationCount < actualCount;\n-    }\n-    \n-    public boolean neverWanted() {\n-        return !atLeastMode() && wantedInvocationCount == 0;\n-    }\n-    \n-    public boolean neverWantedButInvoked(int actualCount) {\n-        return neverWanted() && actualCount > 0;\n-    }\n-    \n     @Override\n     public String toString() {\n         return \"Wanted invocations count: \" + wantedInvocationCount + \", Mocks to verify in order: \" + mocksToBeVerifiedInOrder;\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n     }\n     \n     public boolean appliesTo(VerificationModeImpl mode) {\n-        return mode.missingMethodMode();\n+        return new VerificationModeDecoder(mode).missingMethodMode();\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n     }\n     \n     public boolean appliesTo(VerificationModeImpl mode) {\n-        return !mode.explicitMode() && !mode.atLeastMode();\n+        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n+        return !decoder.explicitMode() && !decoder.atLeastMode();\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n     }\n     \n     public boolean appliesTo(VerificationModeImpl mode) {\n-        return mode.inOrderMode();\n+        return new VerificationModeDecoder(mode).inOrderMode();\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode);\n         \n         boolean noMatchFound = chunk.size() == 0;\n-        if (mode.neverWanted() && noMatchFound) {\n+        if (decoder.neverWanted() && noMatchFound) {\n             return;\n         }\n         \n         int actualCount = chunk.size();\n         \n-        if (mode.tooLittleActualInvocations(actualCount)) {\n+        if (decoder.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n             reporter.tooLittleActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        } else if (mode.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n+        } else if (decoder.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n             reporter.tooLittleActualInvocationsInOrderInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        } else if (mode.tooManyActualInvocations(actualCount)) {\n+        } else if (decoder.tooManyActualInvocations(actualCount)) {\n             HasStackTrace firstUndesired = chunk.get(mode.wantedCount()).getStackTrace();\n             reporter.tooManyActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, firstUndesired);\n         }\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n     }\n     \n     public boolean appliesTo(VerificationModeImpl mode) {\n-        return mode.exactNumberOfInvocationsMode();\n+        return new VerificationModeDecoder(mode).exactNumberOfInvocationsMode();\n     }\n     \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n         int actualCount = actualInvocations.size();\n-        if (mode.tooLittleActualInvocations(actualCount)) {\n+        if (decoder.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n             reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        } else if (mode.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n+        } else if (decoder.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n             reporter.tooLittleActualInvocationsInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);        \n-        } else if (mode.neverWantedButInvoked(actualCount)) {\n+        } else if (decoder.neverWantedButInvoked(actualCount)) {\n             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n             reporter.neverWantedButInvoked(wanted, firstUndesired); \n-        } else if (mode.tooManyActualInvocations(actualCount)) {\n+        } else if (decoder.tooManyActualInvocations(actualCount)) {\n             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n             reporter.tooManyActualInvocations(mode.wantedCount(), actualCount, wanted, firstUndesired);\n         }\n--- a/src/org/mockito/internal/verification/VerificationModeDecoder.java\n+++ b/src/org/mockito/internal/verification/VerificationModeDecoder.java\n package org.mockito.internal.verification;\n \n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationModeImpl.Verification;\n \n public class VerificationModeDecoder {\n \n     }\n \n     public boolean missingMethodInOrderMode() {\n-        return mode.inOrderMode() && mode.missingMethodMode();\n+        return inOrderMode() && missingMethodMode();\n+    }\n+    \n+    public boolean missingMethodMode() {\n+        return (explicitMode() && mode.wantedCount() > 0) || (atLeastMode() && mode.wantedCount() == 1);\n+    }\n+    \n+    public boolean atLeastMode() {\n+        return mode.getVerification() == Verification.AT_LEAST;\n+    }\n+\n+    public boolean explicitMode() {\n+        return mode.getVerification() == Verification.EXPLICIT;\n+    }\n+    \n+    public boolean inOrderMode() {\n+        return !mode.getMocksToBeVerifiedInOrder().isEmpty() && (explicitMode() || atLeastMode());\n+    }\n+    \n+    public boolean exactNumberOfInvocationsMode() {\n+        return !inOrderMode() && (explicitMode() || atLeastMode());\n+    }\n+\n+    public boolean matchesActualCount(int actualCount) {\n+        boolean atLeast = atLeastMode() && actualCount >= mode.wantedCount();\n+        boolean actualMatchesWanted = !atLeastMode() && mode.wantedCount() == actualCount;\n+        \n+        return atLeast || actualMatchesWanted;\n+    }\n+    \n+    public boolean tooLittleActualInvocations(int actualCount) {\n+        return !atLeastMode() && mode.wantedCount() > actualCount; \n+    }\n+\n+    public boolean tooLittleActualInvocationsInAtLeastMode(int actualCount) {\n+        return atLeastMode() && mode.wantedCount() > actualCount;\n+    }\n+    \n+    public boolean tooManyActualInvocations(int actualCount) {\n+        return !atLeastMode() && mode.wantedCount() < actualCount;\n+    }\n+    \n+    public boolean neverWanted() {\n+        return !atLeastMode() && mode.wantedCount() == 0;\n+    }\n+    \n+    public boolean neverWantedButInvoked(int actualCount) {\n+        return neverWanted() && actualCount > 0;\n     }\n }\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n \n     public void verify(InvocationMatcher wanted, VerificationModeImpl mode) {\n         List<Invocation> invocations;\n-        if (mode.inOrderMode()) {\n+        if (new VerificationModeDecoder(mode).inOrderMode()) {\n             invocations = invocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedInOrder());\n         } else {\n             invocations = getRegisteredInvocations();\n--- a/test/org/mockito/internal/progress/VerificationModeImplTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeImplTest.java\n  */\n package org.mockito.internal.progress;\n \n-import static java.util.Arrays.*;\n import static org.mockito.internal.progress.VerificationModeImpl.*;\n \n import org.junit.Test;\n \n public class VerificationModeImplTest extends TestBase {\n \n-    @Test\n-    public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {\n-        VerificationModeImpl mode = atLeastOnce();\n-        assertTrue(mode.atLeastMode());\n-        \n-        mode = times(50);\n-        assertFalse(mode.atLeastMode());\n-    }\n-    \n     @Test\n     public void shouldNotAllowNegativeNumberOfInvocations() throws Exception {\n         try {\n             assertEquals(\"Negative value or zero are not allowed here\", e.getMessage());\n         }\n     }\n-    \n-    @Test\n-    public void shouldKnowIfIsMissingMethodMode() throws Exception {\n-        assertTrue(atLeastOnce().missingMethodMode());\n-        assertTrue(times(1).missingMethodMode());\n-        assertTrue(times(10).missingMethodMode());\n-        \n-        assertFalse(atLeast(2).missingMethodMode());\n-        assertFalse(noMoreInteractions().missingMethodMode());\n-        assertFalse(times(0).missingMethodMode());\n-    }\n-    \n-    @Test\n-    public void inOrderAtLeastShouldBeInAtLeastMode() throws Exception {\n-        assertTrue(inOrderAtLeast(5, asList(\"mock\")).atLeastMode());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfIsInOrderMode() throws Exception {\n-        assertTrue(inOrder(1, asList(new Object())).inOrderMode());\n-        \n-        assertFalse(times(0).inOrderMode());\n-        assertFalse(times(2).inOrderMode());\n-        assertFalse(atLeastOnce().inOrderMode());\n-        assertFalse(noMoreInteractions().inOrderMode());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfIsAtLeastMode() throws Exception {\n-        assertTrue(atLeastOnce().atLeastMode());\n-        assertTrue(atLeast(10).atLeastMode());\n-        \n-        assertFalse(times(0).atLeastMode());\n-        assertFalse(times(2).atLeastMode());\n-        assertFalse(noMoreInteractions().atLeastMode());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfMatchesActualInvocationCount() throws Exception {\n-        assertFalse(times(1).matchesActualCount(0));\n-        assertFalse(times(1).matchesActualCount(2));\n-        assertFalse(times(100).matchesActualCount(200));\n-        \n-        assertTrue(times(1).matchesActualCount(1));\n-        assertTrue(times(100).matchesActualCount(100));\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfMatchesActualInvocationCountWhenAtLeastOnceMode() throws Exception {\n-        assertFalse(atLeastOnce().matchesActualCount(0));\n-        \n-        assertTrue(atLeastOnce().matchesActualCount(1));\n-        assertTrue(atLeastOnce().matchesActualCount(100));\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfMatchesActualInvocationCountWhenAtLeastMode() throws Exception {\n-        assertFalse(atLeast(10).matchesActualCount(5));\n-        assertFalse(atLeast(2).matchesActualCount(1));\n-        \n-        assertTrue(atLeast(10).matchesActualCount(10));\n-        assertTrue(atLeast(10).matchesActualCount(15));\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfTooLittleActualInvocations() throws Exception {\n-        assertTrue(times(1).tooLittleActualInvocations(0));\n-        assertTrue(times(100).tooLittleActualInvocations(99));\n-        \n-        assertFalse(times(0).tooLittleActualInvocations(0));\n-        assertFalse(times(1).tooLittleActualInvocations(1));\n-        assertFalse(times(1).tooLittleActualInvocations(2));\n-    }\n-    \n-    @Test\n-    public void shouldAtLeastModeIgnoreTooLittleActualInvocations() throws Exception {\n-        assertFalse(atLeast(10).tooLittleActualInvocations(5));        \n-        assertFalse(atLeast(10).tooLittleActualInvocations(15));        \n-        assertFalse(atLeastOnce().tooLittleActualInvocations(10));        \n-    }\n-\n-    @Test\n-    public void shouldKnowIfTooLittleActualInvocationsInAtLeastMode() throws Exception {\n-        assertTrue(atLeast(3).tooLittleActualInvocationsInAtLeastMode(2));\n-        assertTrue(atLeast(3).tooLittleActualInvocationsInAtLeastMode(1));\n-        assertTrue(atLeast(3).tooLittleActualInvocationsInAtLeastMode(0));\n-        \n-        assertFalse(atLeast(1).tooLittleActualInvocationsInAtLeastMode(1));\n-        assertFalse(atLeast(1).tooLittleActualInvocationsInAtLeastMode(2));\n-    }\n-\n-    @Test\n-    public void shouldTooLittleActualInvocationsInAtLeastModeIgnoreOtherModes() throws Exception {\n-        assertFalse(times(10).tooLittleActualInvocationsInAtLeastMode(5));        \n-        assertFalse(times(10).tooLittleActualInvocationsInAtLeastMode(15));        \n-    }\n-    \n-    @Test\n-    public void shouldKnowIfTooManyActualInvocations() throws Exception {\n-        assertTrue(times(0).tooManyActualInvocations(1));\n-        assertTrue(times(99).tooManyActualInvocations(100));\n-        \n-        assertFalse(times(0).tooManyActualInvocations(0));\n-        assertFalse(times(1).tooManyActualInvocations(1));\n-        assertFalse(times(2).tooManyActualInvocations(1));\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfWantedCountIsZero() throws Exception {\n-        assertTrue(times(0).neverWanted());\n-        \n-        assertFalse(times(1).neverWanted());\n-        assertFalse(times(20).neverWanted());\n-        assertFalse(atLeastOnce().neverWanted());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfExactNumberOfInvocationsMode() throws Exception {\n-        assertTrue(times(0).exactNumberOfInvocationsMode());\n-        assertTrue(times(1).exactNumberOfInvocationsMode());\n-        assertTrue(atLeastOnce().exactNumberOfInvocationsMode());\n-        \n-        assertFalse(noMoreInteractions().exactNumberOfInvocationsMode());\n-        assertFalse(inOrder(1, asList(new Object())).exactNumberOfInvocationsMode());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfNeverWantedButInvoked() throws Exception {\n-        assertFalse(times(1).neverWantedButInvoked(0));\n-        assertFalse(times(10).neverWantedButInvoked(20));\n-        assertFalse(times(0).neverWantedButInvoked(0));\n-        \n-        assertFalse(atLeastOnce().neverWantedButInvoked(0));\n-        assertFalse(atLeastOnce().neverWantedButInvoked(1));\n-        \n-        assertTrue(times(0).neverWantedButInvoked(1));\n-        assertTrue(times(0).neverWantedButInvoked(10));\n-    }\n }\n--- a/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n+++ b/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n \n public class VerificationModeDecoderTest extends TestBase {\n     \n+    private VerificationModeDecoder decode(VerificationModeImpl mode) {\n+        return new VerificationModeDecoder(mode);\n+    }\n+    \n     @Test\n     public void shouldKnowIfIsMissingMethodInOrderMode() throws Exception {\n         assertTrue(decode(inOrder(1, asList(\"mock\"))).missingMethodInOrderMode());\n         assertFalse(decode(noMoreInteractions()).missingMethodInOrderMode());\n         assertFalse(decode(times(0)).missingMethodInOrderMode());\n     }\n+    \n+    @Test\n+    public void shouldKnowIfIsMissingMethodMode() throws Exception {\n+        assertTrue(decode(atLeastOnce()).missingMethodMode());\n+        assertTrue(decode(times(1)).missingMethodMode());\n+        assertTrue(decode(times(10)).missingMethodMode());\n+        \n+        assertFalse(decode(atLeast(2)).missingMethodMode());\n+        assertFalse(decode(noMoreInteractions()).missingMethodMode());\n+        assertFalse(decode(times(0)).missingMethodMode());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {\n+        VerificationModeImpl mode = atLeastOnce();\n+        assertTrue(decode(mode).atLeastMode());\n+        \n+        mode = times(50);\n+        assertFalse(decode(mode).atLeastMode());\n+    }\n+    \n+    \n+    @Test\n+    public void inOrderAtLeastShouldBeInAtLeastMode() throws Exception {\n+        assertTrue(decode(inOrderAtLeast(5, asList(\"mock\"))).atLeastMode());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfIsInOrderMode() throws Exception {\n+        assertTrue(decode(inOrder(1, asList(new Object()))).inOrderMode());\n+        \n+        assertFalse(decode(times(0)).inOrderMode());\n+        assertFalse(decode(times(2)).inOrderMode());\n+        assertFalse(decode(atLeastOnce()).inOrderMode());\n+        assertFalse(decode(noMoreInteractions()).inOrderMode());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfIsAtLeastMode() throws Exception {\n+        assertTrue(decode(atLeastOnce()).atLeastMode());\n+        assertTrue(decode(atLeast(10)).atLeastMode());\n+        \n+        assertFalse(decode(times(0)).atLeastMode());\n+        assertFalse(decode(times(10)).atLeastMode());\n+        assertFalse(decode(noMoreInteractions()).atLeastMode());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfMatchesActualInvocationCount() throws Exception {\n+        assertFalse(decode(times(1)).matchesActualCount(0));\n+        assertFalse(decode(times(1)).matchesActualCount(2));\n+        assertFalse(decode(times(10)).matchesActualCount(20));\n+        \n+        assertTrue(decode(times(1)).matchesActualCount(1));\n+        assertTrue(decode(times(10)).matchesActualCount(10));\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfMatchesActualInvocationCountWhenAtLeastOnceMode() throws Exception {\n+        assertFalse(decode(atLeastOnce()).matchesActualCount(0));\n+        \n+        assertTrue(decode(atLeastOnce()).matchesActualCount(1));\n+        assertTrue(decode(atLeastOnce()).matchesActualCount(100));\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfMatchesActualInvocationCountWhenAtLeastMode() throws Exception {\n+        assertFalse(decode(atLeast(10)).matchesActualCount(5));\n+        assertFalse(decode(atLeast(2)).matchesActualCount(1));\n+        \n+        assertTrue(decode(atLeast(10)).matchesActualCount(10));\n+        assertTrue(decode(atLeast(10)).matchesActualCount(15));\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfTooLittleActualInvocations() throws Exception {\n+        assertTrue(decode(times(1)).tooLittleActualInvocations(0));\n+        assertTrue(decode(times(10)).tooLittleActualInvocations(9));\n+        \n+        assertFalse(decode(times(0)).tooLittleActualInvocations(0));\n+        assertFalse(decode(times(1)).tooLittleActualInvocations(1));\n+        assertFalse(decode(times(1)).tooLittleActualInvocations(2));\n+    }\n+    \n+    @Test\n+    public void shouldAtLeastModeIgnoreTooLittleActualInvocations() throws Exception {\n+        assertFalse(decode(atLeast(10)).tooLittleActualInvocations(5));        \n+        assertFalse(decode(atLeast(10)).tooLittleActualInvocations(15));        \n+        assertFalse(decode(atLeastOnce()).tooLittleActualInvocations(10));        \n+    }\n \n-    private VerificationModeDecoder decode(VerificationModeImpl mode) {\n-        return new VerificationModeDecoder(mode);\n+    @Test\n+    public void shouldKnowIfTooLittleActualInvocationsInAtLeastMode() throws Exception {\n+        assertTrue(decode(atLeast(3)).tooLittleActualInvocationsInAtLeastMode(2));\n+        assertTrue(decode(atLeast(3)).tooLittleActualInvocationsInAtLeastMode(1));\n+        assertTrue(decode(atLeast(3)).tooLittleActualInvocationsInAtLeastMode(0));\n+        \n+        assertFalse(decode(atLeast(1)).tooLittleActualInvocationsInAtLeastMode(1));\n+        assertFalse(decode(atLeast(1)).tooLittleActualInvocationsInAtLeastMode(2));\n+    }\n+\n+    @Test\n+    public void shouldTooLittleActualInvocationsInAtLeastModeIgnoreOtherModes() throws Exception {\n+        assertFalse(decode(times(10)).tooLittleActualInvocationsInAtLeastMode(5));        \n+        assertFalse(decode(times(10)).tooLittleActualInvocationsInAtLeastMode(15));        \n+    }\n+    \n+    @Test\n+    public void shouldKnowIfTooManyActualInvocations() throws Exception {\n+        assertTrue(decode(times(0)).tooManyActualInvocations(1));\n+        assertTrue(decode(times(10)).tooManyActualInvocations(11));\n+        \n+        assertFalse(decode(times(0)).tooManyActualInvocations(0));\n+        assertFalse(decode(times(1)).tooManyActualInvocations(1));\n+        assertFalse(decode(times(2)).tooManyActualInvocations(1));\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfWantedCountIsZero() throws Exception {\n+        assertTrue(decode(times(0)).neverWanted());\n+        \n+        assertFalse(decode(times(1)).neverWanted());\n+        assertFalse(decode(times(10)).neverWanted());\n+        assertFalse(decode(atLeastOnce()).neverWanted());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfExactNumberOfInvocationsMode() throws Exception {\n+        assertTrue(decode(times(0)).exactNumberOfInvocationsMode());\n+        assertTrue(decode(times(1)).exactNumberOfInvocationsMode());\n+        assertTrue(decode(atLeastOnce()).exactNumberOfInvocationsMode());\n+        \n+        assertFalse(decode(noMoreInteractions()).exactNumberOfInvocationsMode());\n+        assertFalse(decode(inOrder(1, asList(new Object()))).exactNumberOfInvocationsMode());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfNeverWantedButInvoked() throws Exception {\n+        assertFalse(decode(times(1)).neverWantedButInvoked(0));\n+        assertFalse(decode(times(10)).neverWantedButInvoked(20));\n+        assertFalse(decode(times(0)).neverWantedButInvoked(0));\n+        \n+        assertFalse(decode(atLeastOnce()).neverWantedButInvoked(0));\n+        assertFalse(decode(atLeastOnce()).neverWantedButInvoked(1));\n+        \n+        assertTrue(decode(times(0)).neverWantedButInvoked(1));\n+        assertTrue(decode(times(0)).neverWantedButInvoked(10));\n     }\n }", "timestamp": 1223479800, "metainfo": ""}