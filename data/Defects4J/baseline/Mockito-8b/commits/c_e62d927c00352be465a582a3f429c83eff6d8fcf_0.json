{"sha": "e62d927c00352be465a582a3f429c83eff6d8fcf", "log": "simplified reportAnd / reportOr  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40275", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n      * @return <code>false</code>.\n      */\n     public static boolean and(boolean first, boolean second) {\n-        return LastArguments.instance().reportAnd(2).returnFalse();\n+        return LastArguments.instance().reportAnd().returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte and(byte first, byte second) {\n-        return LastArguments.instance().reportAnd(2).returnZero();\n+        return LastArguments.instance().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char and(char first, char second) {\n-        return LastArguments.instance().reportAnd(2).returnChar();\n+        return LastArguments.instance().reportAnd().returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double and(double first, double second) {\n-        return LastArguments.instance().reportAnd(2).returnZero();\n+        return LastArguments.instance().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float and(float first, float second) {\n-        return LastArguments.instance().reportAnd(2).returnZero();\n+        return LastArguments.instance().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int and(int first, int second) {\n-        return LastArguments.instance().reportAnd(2).returnZero();\n+        return LastArguments.instance().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long and(long first, long second) {\n-        return LastArguments.instance().reportAnd(2).returnZero();\n+        return LastArguments.instance().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short and(short first, short second) {\n-        return LastArguments.instance().reportAnd(2).returnZero();\n+        return LastArguments.instance().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T and(T first, T second) {\n-        return LastArguments.instance().reportAnd(2).returnNull();\n+        return LastArguments.instance().reportAnd().returnNull();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean or(boolean first, boolean second) {\n-        return LastArguments.instance().reportOr(2).returnFalse();\n+        return LastArguments.instance().reportOr().returnFalse();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T or(T first, T second) {\n-        return LastArguments.instance().reportOr(2).returnNull();\n+        return LastArguments.instance().reportOr().returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short or(short first, short second) {\n-        return LastArguments.instance().reportOr(2).returnZero();\n+        return LastArguments.instance().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long or(long first, long second) {\n-        return LastArguments.instance().reportOr(2).returnZero();\n+        return LastArguments.instance().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int or(int first, int second) {\n-        return LastArguments.instance().reportOr(2).returnZero();\n+        return LastArguments.instance().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float or(float first, float second) {\n-        return LastArguments.instance().reportOr(2).returnZero();\n+        return LastArguments.instance().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double or(double first, double second) {\n-        return LastArguments.instance().reportOr(2).returnZero();\n+        return LastArguments.instance().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char or(char first, char second) {\n-        return LastArguments.instance().reportOr(2).returnChar();\n+        return LastArguments.instance().reportOr().returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte or(byte first, byte second) {\n-        return LastArguments.instance().reportOr(2).returnZero();\n+        return LastArguments.instance().reportOr().returnZero();\n     }\n \n     /**\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n         return matchers;\n     }\n \n-    //TODO count here is dodgy \n-    public ReturnValues reportAnd(int count) {\n+    public ReturnValues reportAnd() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n-        matcherStack.push(new And(popLastArgumentMatchers(count)));\n+        matcherStack.push(new And(popLastArgumentMatchers(2)));\n         return new ReturnValues();\n     }\n \n         }\n     }\n \n-    public ReturnValues reportOr(int count) {\n+    public ReturnValues reportOr() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n-        matcherStack.push(new Or(popLastArgumentMatchers(count)));\n+        matcherStack.push(new Or(popLastArgumentMatchers(2)));\n         return new ReturnValues();\n     }\n }", "timestamp": 1199889450, "metainfo": ""}