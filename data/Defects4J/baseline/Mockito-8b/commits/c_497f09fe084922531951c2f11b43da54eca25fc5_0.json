{"sha": "497f09fe084922531951c2f11b43da54eca25fc5", "log": "Added given, when, then comments to tests  --HG-- branch : issue296", "commit": "\n--- a/test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderWithCallsTest.java\n \n     @Test\n     public void shouldFailWhenMethodNotCalled(){\n-        mockOne.oneArg( 1 );\n-\n+        // Given\n+        mockOne.oneArg( 1 );\n         InOrder verifier = inOrder( mockOne );\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n \n         exceptionRule.expectMessage( \"Verification in order failure\" );\n         exceptionRule.expectMessage( \"Wanted but not invoked\" );\n         exceptionRule.expectMessage( \"mockOne.oneArg(2)\" );\n-        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n+\n+        // When\n+        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldFailWhenMethodCalledTooFewTimes(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.oneArg( 2 );\n \n         exceptionRule.expectMessage( \"mockOne.oneArg(2)\" );\n         exceptionRule.expectMessage( \"Wanted 2 times\" );\n         exceptionRule.expectMessage( \"But was 1 time\" );\n+\n+        // When\n         verifier.verify( mockOne, calls(2)).oneArg( 2 );\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldFailWhenSingleMethodCallsAreOutOfSequence(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.oneArg( 2 );\n \n         exceptionRule.expectMessage( \"Verification in order failure\" );\n         exceptionRule.expectMessage( \"Wanted but not invoked\" );\n         exceptionRule.expectMessage( \"mockOne.oneArg(1)\" );\n-        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+\n+        // When\n+        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldFailWhenDifferentMethodCallsAreOutOfSequence(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.voidMethod();\n \n         exceptionRule.expectMessage( \"Verification in order failure\" );\n         exceptionRule.expectMessage( \"Wanted but not invoked\" );\n         exceptionRule.expectMessage( \"mockOne.oneArg(1)\" );\n-        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+\n+        // When\n+        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldFailWhenMethodCallsOnDifferentMocksAreOutOfSequence(){\n+        // Given\n         mockOne.voidMethod();\n         mockTwo.voidMethod();\n \n         exceptionRule.expectMessage( \"Verification in order failure\" );\n         exceptionRule.expectMessage( \"Wanted but not invoked\" );\n         exceptionRule.expectMessage( \"mockOne.voidMethod()\" );\n-        verifier.verify( mockOne, calls(1)).voidMethod();\n+\n+        // When\n+        verifier.verify( mockOne, calls(1)).voidMethod();\n+\n+        // Then - expected exception thrown\n     }\n     \n \n     @Test\n     public void shouldAllowSequentialCallsToCallsForSingleMethod(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 1 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 1 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         verifier.verify( mockOne, calls(2)).oneArg( 2 );\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         verifyNoMoreInteractions(mockOne);\n         verifier.verifyNoMoreInteractions();\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldAllowSequentialCallsToCallsForDifferentMethods(){\n-        mockOne.oneArg( 1 );\n-        mockOne.voidMethod();\n-        mockOne.voidMethod();\n-        mockOne.oneArg( 1 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.voidMethod();\n+        mockOne.voidMethod();\n+        mockOne.oneArg( 1 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         verifier.verify( mockOne, calls(2)).voidMethod();\n         verifier.verify( mockOne, calls(1)).oneArg(1);\n         verifyNoMoreInteractions(mockOne);\n         verifier.verifyNoMoreInteractions();\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldAllowSequentialCallsToCallsForMethodsOnDifferentMocks(){\n+        // Given\n         mockOne.voidMethod();\n         mockTwo.voidMethod();\n         mockTwo.voidMethod();\n         mockOne.voidMethod();\n \n         InOrder verifier = inOrder( mockOne, mockTwo );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).voidMethod();\n         verifier.verify( mockTwo, calls(2)).voidMethod();\n         verifier.verify( mockOne, calls(1)).voidMethod();\n         verifyNoMoreInteractions(mockOne);\n         verifyNoMoreInteractions(mockTwo);\n         verifier.verifyNoMoreInteractions();\n+\n+        // Then - no exception thrown\n     }\n     \n     \n     @Test\n     public void shouldAllowFewerCallsForSingleMethod(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-\n-        InOrder verifier = inOrder( mockOne );\n-        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n-        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n-        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n-        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n+        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n+        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+        verifier.verify( mockOne, calls(1)).oneArg( 2 );\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldNotVerifySkippedCallsWhenFewerCallsForSingleMethod(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.oneArg( 2 );\n         mockOne.oneArg( 2 );\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         \n         exceptionRule.expect( NoInteractionsWanted.class );\n+\n+        // When\n         verifyNoMoreInteractions( mockOne );\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForSingleMethod(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.oneArg( 2 );\n         mockOne.oneArg( 2 );\n \n         exceptionRule.expect( VerificationInOrderFailure.class );\n         exceptionRule.expectMessage( \"No interactions wanted here\" );\n-        verifier.verifyNoMoreInteractions();\n+\n+        // When\n+        verifier.verifyNoMoreInteractions();\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldAllowFewerCallsForDifferentMethods(){\n-        mockOne.oneArg( 1 );\n-        mockOne.voidMethod();\n-        mockOne.voidMethod();\n-        mockOne.oneArg( 1 );\n-        mockOne.voidMethod();\n-\n-        InOrder verifier = inOrder( mockOne );\n-        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n-        verifier.verify( mockOne, calls(1)).voidMethod();\n-        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n-        verifier.verify( mockOne, calls(1)).voidMethod();\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.voidMethod();\n+        mockOne.voidMethod();\n+        mockOne.oneArg( 1 );\n+        mockOne.voidMethod();\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n+        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+        verifier.verify( mockOne, calls(1)).voidMethod();\n+        verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+        verifier.verify( mockOne, calls(1)).voidMethod();\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldNotVerifySkippedCallsWhenFewerCallsForDifferentMethods(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.voidMethod();\n         mockOne.voidMethod();\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n \n         exceptionRule.expect( NoInteractionsWanted.class );\n+\n+        // When\n         verifyNoMoreInteractions( mockOne );\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForDifferentMethods(){\n+        // Given\n         mockOne.oneArg( 1 );\n         mockOne.voidMethod();\n         mockOne.voidMethod();\n \n         exceptionRule.expect( VerificationInOrderFailure.class );\n         exceptionRule.expectMessage( \"No interactions wanted here\" );\n-        verifier.verifyNoMoreInteractions();\n+\n+        // When\n+        verifier.verifyNoMoreInteractions();\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldAllowFewerCallsForMethodsOnDifferentMocks(){\n+        // Given\n         mockOne.voidMethod();\n         mockTwo.voidMethod();\n         mockTwo.voidMethod();\n         mockTwo.voidMethod();\n \n         InOrder verifier = inOrder( mockOne, mockTwo );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).voidMethod();\n         verifier.verify( mockTwo, calls(1)).voidMethod();\n         verifier.verify( mockOne, calls(1)).voidMethod();\n         verifier.verify( mockTwo, calls(1)).voidMethod();\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldNotVerifySkippedCallsWhenFewerCallsForMethodsOnDifferentMocks(){\n+        // Given\n         mockOne.voidMethod();\n         mockTwo.voidMethod();\n         mockTwo.voidMethod();\n         verifier.verify( mockOne, calls(1)).voidMethod();\n \n         exceptionRule.expect(NoInteractionsWanted.class);\n+\n+        // When\n         verifyNoMoreInteractions( mockTwo );\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldNotVerifySkippedCallsInInOrderWhenFewerCallsForMethodsOnDifferentMocks(){\n+        // Given\n         mockOne.voidMethod();\n         mockTwo.voidMethod();\n         mockTwo.voidMethod();\n \n         exceptionRule.expect( VerificationInOrderFailure.class );\n         exceptionRule.expectMessage( \"No interactions wanted here\" );\n-        verifier.verifyNoMoreInteractions();\n+\n+        // When\n+        verifier.verifyNoMoreInteractions();\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldVerifyWithCallsAfterUseOfTimes(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 1 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 1 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, times(1)).oneArg( 1 );\n         verifier.verify( mockOne, calls(2)).oneArg( 2 );\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldVerifyWithCallsAfterUseOfAtLeast(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 2 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 2 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, atLeast(1)).oneArg( 1 );\n         verifier.verify( mockOne, calls(2)).oneArg( 2 );\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldVerifyWithTimesAfterUseOfCalls(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 1 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 1 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         verifier.verify( mockOne, times(2)).oneArg( 2 );\n         verifier.verify( mockOne, times(1)).oneArg( 1 );\n \n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldVerifyWithAtLeastAfterUseOfCalls(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 2 );\n-        mockOne.oneArg( 1 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 2 );\n+        mockOne.oneArg( 1 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         verifier.verify( mockOne, atLeast(1)).oneArg( 2 );\n         verifier.verify( mockOne, atLeast(1)).oneArg( 1 );\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldVerifyWithTimesAfterCallsInSameChunk(){\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 1 );\n-        mockOne.oneArg( 1 );\n-\n-        InOrder verifier = inOrder( mockOne );\n+        // Given\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 1 );\n+        mockOne.oneArg( 1 );\n+\n+        InOrder verifier = inOrder( mockOne );\n+\n+        // When\n         verifier.verify( mockOne, calls(1)).oneArg( 1 );\n         verifier.verify( mockOne, times(2)).oneArg( 1 );\n         verifier.verifyNoMoreInteractions();\n+\n+        // Then - no exception thrown\n     }\n \n     @Test\n     public void shouldFailToCreateCallsWithZeroArgument(){\n+        // Given\n         InOrder verifier = inOrder( mockOne );\n         exceptionRule.expect( MockitoException.class );\n         exceptionRule.expectMessage( \"Negative and zero values are not allowed here\" );\n+\n+        // When\n         verifier.verify( mockOne, calls(0)).voidMethod();\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldFailToCreateCallsWithNegativeArgument(){\n+        // Given\n         InOrder verifier = inOrder( mockOne );\n         exceptionRule.expect( MockitoException.class );\n         exceptionRule.expectMessage( \"Negative and zero values are not allowed here\" );\n+\n+        // When\n         verifier.verify( mockOne, calls(-1)).voidMethod();\n+\n+        // Then - expected exception thrown\n     }\n \n     @Test\n     public void shouldFailToCreateCallsForNonInOrderVerification(){\n+        // Given\n         mockOne.voidMethod();\n         exceptionRule.expect( MockitoException.class );\n         exceptionRule.expectMessage( \"calls is only intended to work with InOrder\" );\n+\n+        // When\n         verify( mockOne, calls(1)).voidMethod();\n+\n+        // Then - expected exception thrown\n     }\n }", "timestamp": 1327869948, "metainfo": ""}