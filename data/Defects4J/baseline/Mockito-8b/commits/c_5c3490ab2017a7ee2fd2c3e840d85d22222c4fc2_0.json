{"sha": "5c3490ab2017a7ee2fd2c3e840d85d22222c4fc2", "log": "In order to make mocks serializable started work on this feature. Refactoring.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401599", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.Primitives;\n+import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n     // expands array varArgs that are given by runtime (1, [a, b]) into true\n     // varArgs (1, a, b);\n     private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n-        if (!isVarArgs || isVarArgs && args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n+        if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n             return args == null ? new Object[0] : args;\n         }\n \n     }\n \n     public static boolean isToString(InvocationOnMock invocation) {\n-        return isToString(invocation.getMethod());\n-    }\n-\n-    public static boolean isToString(Method method) {\n-        return method.getReturnType() == String.class && method.getParameterTypes().length == 0\n-                && method.getName().equals(\"toString\");\n+        return ObjectMethodsGuru.isToString(invocation.getMethod());\n     }\n \n     public boolean isValidException(Throwable throwable) {\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n         }\n \n         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n-            if (Invocation.isToString(method)) {\n+            if (ObjectMethodsGuru.isToString(method)) {\n                 return \"SmartNull returned by unstubbed \" + invocation.getMethod().getName() + \"() method on mock\";\n             }\n             \n--- /dev/null\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+package org.mockito.internal.util;\n+\n+import java.lang.reflect.Method;\n+\n+public class ObjectMethodsGuru {\n+\n+    public static boolean isToString(Method method) {\n+        return method.getReturnType() == String.class && method.getParameterTypes().length == 0\n+                && method.getName().equals(\"toString\");\n+    }\n+\n+    \n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n+package org.mockito.internal.util;\n+\n+import org.mockitoutil.TestBase;\n+import static org.mockito.internal.util.ObjectMethodsGuru.*;\n+import org.mockitousage.IMethods;\n+import org.junit.Test;\n+\n+public class ObjectMethodsGuruTest extends TestBase {\n+    \n+    @Test\n+    public void shouldKnowToStringMethod() throws Exception {\n+        assertFalse(isToString(String.class.getMethod(\"equals\", Object.class)));\n+        assertFalse(isToString(IMethods.class.getMethod(\"toString\", String.class)));\n+        assertTrue(isToString(Object.class.getMethod(\"toString\")));\n+    }\n+}", "timestamp": 1251140917, "metainfo": ""}