{"sha": "b211f3290f55b02c2182d4f17c79f16c14346ddb", "log": "Refactoring to allow creating mocks by constructor.  Pushed out the creation of instances from imposterizer to a separate object. Should be easier to add new features around mocking/partial mocking abstract classes.", "commit": "\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.InternalMockHandler;\n+import org.mockito.internal.creation.instance.InstanceFactory;\n+import org.mockito.internal.creation.instance.ObjenesisInstanceFactory;\n+import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.plugins.MockMaker;\n-import org.mockito.internal.creation.jmock.ClassImposterizer;\n \n /**\n  * A MockMaker that uses cglib to generate mocks on a JVM.\n  */\n public final class CglibMockMaker implements MockMaker {\n \n+    private final static InstanceFactory INSTANCE_FACTORY = new ObjenesisInstanceFactory();\n+\n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\n-        return ClassImposterizer.INSTANCE.imposterise(\n+        return ClassImposterizer.INSTANCE.imposterise(INSTANCE_FACTORY,\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/ConstructorInstanceFactory.java\n+package org.mockito.internal.creation.instance;\n+\n+public class ConstructorInstanceFactory implements InstanceFactory {\n+\n+    public <T> T newInstance(Class<T> cls) {\n+        try {\n+            return cls.newInstance();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Problems instantiating class: \" + cls, e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/InstanceFactory.java\n+package org.mockito.internal.creation.instance;\n+\n+/**\n+ * Provides instances of classes.\n+ */\n+public interface InstanceFactory {\n+\n+    /**\n+     * Creates instance of given class\n+     */\n+    <T> T newInstance(Class<T> cls);\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/ObjenesisInstanceFactory.java\n+package org.mockito.internal.creation.instance;\n+\n+import org.mockito.internal.configuration.GlobalConfiguration;\n+import org.objenesis.ObjenesisStd;\n+\n+public class ObjenesisInstanceFactory implements InstanceFactory {\n+\n+    //TODO: in order to provide decent exception message when objenesis is not found,\n+    //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing\n+    //TODO: for the same reason catch and give better feedback when hamcrest core is not found.\n+    private final ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());\n+\n+    public <T> T newInstance(Class<T> cls) {\n+        return objenesis.newInstance(cls);\n+    }\n+}\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n import org.mockito.cglib.core.Predicate;\n import org.mockito.cglib.proxy.*;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.internal.creation.cglib.MockitoNamingPolicy;\n-import org.objenesis.ObjenesisStd;\n+import org.mockito.internal.creation.instance.InstanceFactory;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n  */\n public class ClassImposterizer  {\n \n+    //TODO SF no singleton!!!\n     public static final ClassImposterizer INSTANCE = new ClassImposterizer();\n     \n     private ClassImposterizer() {}\n-    \n-    //TODO: in order to provide decent exception message when objenesis is not found,\n-    //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing\n-    //TODO: for the same reason catch and give better feedback when hamcrest core is not found.\n-    private final ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());\n     \n     private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {\n         @Override\n         }\n     };\n     \n-    public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Collection<Class> ancillaryTypes) {\n-        return imposterise(interceptor, mockedType, ancillaryTypes.toArray(new Class[ancillaryTypes.size()]));\n+    public <T> T imposterise(InstanceFactory factory, final MethodInterceptor interceptor, Class<T> mockedType, Collection<Class> ancillaryTypes) {\n+        return imposterise(factory, interceptor, mockedType, ancillaryTypes.toArray(new Class[ancillaryTypes.size()]));\n     }\n     \n-    public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\n-        Class<?> proxyClass = null;\n+    public <T> T imposterise(InstanceFactory factory, final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\n+        Class<Factory> proxyClass = null;\n         Object proxyInstance = null;\n         try {\n             setConstructorsAccessible(mockedType, true);\n             proxyClass = createProxyClass(mockedType, ancillaryTypes);\n-            proxyInstance = createProxy(proxyClass, interceptor);\n+            proxyInstance = createProxy(factory, proxyClass, interceptor);\n             return mockedType.cast(proxyInstance);\n         } catch (ClassCastException cce) {\n             throw new MockitoException(join(\n                 \"ClassCastException occurred while creating the mockito proxy :\",\n-                \"  class to imposterize : '\" + describeClass(mockedType),\n-                \"  imposterizing class : '\" + describeClass(proxyClass),\n+                \"  class to mock : '\" + describeClass(mockedType),\n+                \"  created class : '\" + describeClass(proxyClass),\n                 \"  proxy instance class : '\" + describeClass(proxyInstance),\n+                \"  instance creation by : '\" + factory.getClass().getSimpleName(),\n                 \"\",\n                 \"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)\"\n             ), cce);\n         return instance == null? \"null\" : describeClass(instance.getClass());\n     }\n \n+    //TODO this method does not belong here\n     public void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\n         for (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\n             constructor.setAccessible(accessible);\n         }\n     }\n     \n-    public Class<?> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\n+    public Class<Factory> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\n         if (mockedType == Object.class) {\n             mockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n         }\n         }\n     }\n     \n-    private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\n-        Factory proxy = (Factory) objenesis.newInstance(proxyClass);\n+    private Object createProxy(InstanceFactory factory, Class<Factory> proxyClass, final MethodInterceptor interceptor) {\n+        Factory proxy = factory.newInstance(proxyClass);\n         proxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\n         return proxy;\n     }\n--- a/src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java\n+++ b/src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java\n     private final ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n \n     public ThrowsExceptionClass(Class<? extends Throwable> throwableClass) {\n-\n         this.throwableClass = throwableClass;\n     }\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n-\n+        //TODO centralize the use of Objenesis. Why do we use ObjenesisHelper?\n         Throwable throwable = (Throwable) ObjenesisHelper.newInstance(throwableClass);\n         throwable.fillInStackTrace();\n         filter.filter(throwable);\n--- a/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation.jmock;\n-\n-import static org.hamcrest.CoreMatchers.*;\n-\n-import java.lang.reflect.Method;\n \n import org.junit.Test;\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.instance.ConstructorInstanceFactory;\n+import org.mockito.internal.creation.instance.ObjenesisInstanceFactory;\n import org.mockitoutil.TestBase;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n \n @SuppressWarnings(\"unchecked\")\n public class ClassImposterizerTest extends TestBase {\n \n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {\n-        SomeInterface proxy = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeInterface.class);\n+        SomeInterface proxy = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeInterface.class);\n         \n         Class superClass = proxy.getClass().getSuperclass();\n         assertEquals(Object.class, superClass);\n     \n     @Test\n     public void shouldCreateMockFromClass() throws Exception {\n-        ClassWithoutConstructor proxy = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), ClassWithoutConstructor.class);\n+        ClassWithoutConstructor proxy = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), ClassWithoutConstructor.class);\n         \n         Class superClass = proxy.getClass().getSuperclass();\n         assertEquals(ClassWithoutConstructor.class, superClass);\n             fail();\n         } catch (Exception e) {}\n         \n-        ClassWithDodgyConstructor mock = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), ClassWithDodgyConstructor.class);\n+        ClassWithDodgyConstructor mock = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), ClassWithDodgyConstructor.class);\n         assertNotNull(mock);\n     }\n     \n     @Test \n     public void shouldMocksHaveDifferentInterceptors() throws Exception {\n-        SomeClass mockOne = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class);\n-        SomeClass mockTwo = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class);\n+        SomeClass mockOne = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeClass.class);\n+        SomeClass mockTwo = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeClass.class);\n         \n         Factory cglibFactoryOne = (Factory) mockOne;\n         Factory cglibFactoryTwo = (Factory) mockTwo;\n     \n     @Test\n     public void shouldUseAnicilliaryTypes() {\n-        SomeClass mock = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class, SomeInterface.class);\n+        SomeClass mock = ClassImposterizer.INSTANCE.imposterise(new ObjenesisInstanceFactory(), new MethodInterceptorStub(), SomeClass.class, SomeInterface.class);\n         \n         assertThat(mock, is(instanceOf(SomeInterface.class)));\n     }\n \n+    @Test\n+    public void shouldCreateClassByConstructor() {\n+        OtherClass mock = ClassImposterizer.INSTANCE.imposterise(new ConstructorInstanceFactory(), new MethodInterceptorStub(), OtherClass.class);\n+        assertNotNull(mock);\n+    }\n+\n     class SomeClass {}\n     interface SomeInterface {}\n+    static class OtherClass {}\n     \n     private class ClassWithoutConstructor {}\n ", "timestamp": 1413581295, "metainfo": ""}