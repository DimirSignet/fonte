{"sha": "693717dac2867dd66392c40f08750f748fc2edb7", "log": "Fixed issue 77 When mockito searches for similar invocation it safely matches custom argument matchers.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401354", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n         }\n         return true;\n     }\n+    \n+    private boolean safelyArgumentsMatch(Object[] actualArgs) {\n+        try {\n+            return argumentsMatch(actualArgs);\n+        } catch (Throwable t) {\n+            return false;\n+        }\n+    }\n \n     /**\n      * similar means the same method name, same mock, unverified \n         final boolean isUnverified = !candidate.isVerified();\n         final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();\n         final boolean methodEquals = hasSameMethod(candidate);\n-        final boolean overloadedButSameArgs = !methodEquals && argumentsMatch(candidate.getArguments());        \n+        final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());        \n         \n         if (methodNameEquals && isUnverified && mockIsTheSame && !overloadedButSameArgs) {\n             return true;\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class CustomMatcherDoesYieldCCETest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+\n+    @Test\n+    public void shouldNotThrowCCE() {\n+        mock.simpleMethod(new Object());\n+\n+        try {\n+            // calling overloaded method so that matcher will be called with\n+            // different type\n+            verify(mock).simpleMethod(argThat(isStringWithTextFoo()));\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {}\n+    }\n+\n+    private ArgumentMatcher<String> isStringWithTextFoo() {\n+        return new ArgumentMatcher<String>() {\n+            @Override\n+            public boolean matches(Object argument) {\n+                // casting that should not be thrown:\n+                String str = (String) argument;\n+                return str.equals(\"foo\");\n+            }\n+        };\n+    }\n+}", "timestamp": 1240259087, "metainfo": ""}