{"sha": "77fea3dec7da07cbd9f03f4927561cf4568f929b", "log": "Fixed issue 179 Moved Answers that provide configuration for mocks to external package  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401927", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/Answers.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.mockito.internal.stubbing.answers.CallsRealMethods;\n+import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Enumeration of pre-configured mock answers\n+ * <p>\n+ * You can use it to pass extra parameters to &#064;Mock annotation, see more info here: {@link Mock}\n+ * <p>\n+ * Example:\n+ * <pre>\n+ *   &#064;Mock(answer = RETURNS_DEEP_STUBS) UserProvider userProvider;\n+ * </pre>\n+ */\n+public enum Answers {\n+\n+    RETURNS_DEFAULTS(new GloballyConfiguredAnswer()),\n+    RETURNS_SMART_NULLS(new ReturnsSmartNulls()),\n+    RETURNS_MOCKS(new ReturnsMocks()),\n+    RETURNS_DEEP_STUBS(new ReturnsDeepStubs()),\n+    CALLS_REAL_METHODS(new CallsRealMethods())\n+    ;\n+\n+    private Answer<Object> implementation;\n+\n+    private Answers(Answer<Object> implementation) {\n+        this.implementation = implementation;\n+    }\n+\n+    public Answer<Object> get() {\n+        return implementation;\n+    }\n+}\n--- a/src/org/mockito/Mock.java\n+++ b/src/org/mockito/Mock.java\n package org.mockito;\n \n import static java.lang.annotation.ElementType.*;\n-import static org.mockito.internal.stubbing.defaultanswers.Answers.*;\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import org.mockito.internal.stubbing.defaultanswers.Answers;\n import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n @Documented\n public @interface Mock {\n \n-    Answers answer() default RETURNS_DEFAULTS;\n+    Answers answer() default Answers.RETURNS_DEFAULTS;\n \n     String name() default \"\";\n \n--- a/src/org/mockito/internal/stubbing/defaultanswers/Answers.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/Answers.java\n \n /**\n  * Enumeration of pre-configured mock answers\n+ * <p>\n+ * @deprecated - please use Answers from top Mockito package: {@link org.mockito.Answers}\n+ * <p>\n+ * <b>WARNING</b> Those answers no longer are used by the framework!!! Please use {@link org.mockito.Answers}\n+ * <p>\n+ * See {@link Mock} for more information.\n  */\n+@Deprecated\n public enum Answers {\n \n     RETURNS_DEFAULTS(new GloballyConfiguredAnswer()),\n--- a/test/org/mockitousage/annotation/AnnotationsTest.java\n+++ b/test/org/mockitousage/annotation/AnnotationsTest.java\n package org.mockitousage.annotation;\n \n import static org.mockito.Mockito.*;\n-import static org.mockito.internal.stubbing.defaultanswers.Answers.RETURNS_MOCKS;\n-import static org.mockito.internal.stubbing.defaultanswers.Answers.RETURNS_DEFAULTS;\n \n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.*;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         assertNotNull(sub.getSuperBaseMock());\n     }\n     \n-    @Mock(answer = RETURNS_MOCKS, name = \"i have a name\") IMethods namedAndReturningMocks;\n-    @Mock(answer = RETURNS_DEFAULTS) IMethods returningDefaults;\n+    @Mock(answer = Answers.RETURNS_MOCKS, name = \"i have a name\") IMethods namedAndReturningMocks;\n+    @Mock(answer = Answers.RETURNS_DEFAULTS) IMethods returningDefaults;\n     @Mock(extraInterfaces = {List.class}) IMethods hasExtraInterfaces;\n     @Mock() IMethods noExtraConfig;\n ", "timestamp": 1268688657, "metainfo": ""}