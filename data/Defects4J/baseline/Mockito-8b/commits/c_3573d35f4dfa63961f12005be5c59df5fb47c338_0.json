{"sha": "3573d35f4dfa63961f12005be5c59df5fb47c338", "log": "Fixed an issue with verifying in concurrent environment  --HG-- rename : test/org/mockitousage/MultiThreadedTest.java => test/org/concurrentmockito/MultiThreadedTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40658", "commit": "\n--- a/src/org/mockito/internal/util/ListUtil.java\n+++ b/src/org/mockito/internal/util/ListUtil.java\n  */\n package org.mockito.internal.util;\n \n+import java.util.Collection;\n import java.util.LinkedList;\n-import java.util.List;\n \n public class ListUtil {\n \n-    public static <T> LinkedList<T> filter(List<T> list, Filter<T> filter) {\n+    public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {\n         LinkedList<T> filtered = new LinkedList<T>();\n-        for (T t : list) {\n+        for (T t : collection) {\n             if (!filter.isOut(t)) {\n                 filtered.add(t);\n             }\n--- a/src/org/mockito/internal/verification/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n  */\n package org.mockito.internal.verification;\n \n+import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n \n \n public class RegisteredInvocations {\n \n-    private final LinkedList<Invocation> invocations = new LinkedList<Invocation>();\n+    private final List<Invocation> invocations = Collections.synchronizedList(new LinkedList<Invocation>());\n     \n     public void add(Invocation invocation) {\n         invocations.add(invocation);\n     }\n \n     public void removeLast() {\n-        invocations.removeLast();\n+        invocations.remove(invocations.size()-1);\n     }\n \n     public List<Invocation> getVerifiableInvocations() {\n--- /dev/null\n+++ b/test/org/concurrentmockito/MultiThreadedTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.concurrentmockito;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.junit.runner.Result;\n+import org.junit.runner.notification.Failure;\n+import org.mockito.MockitoTest;\n+import org.mockito.TestBase;\n+import org.mockito.exceptions.ReporterTest;\n+import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n+import org.mockito.exceptions.base.MockitoExceptionTest;\n+import org.mockito.exceptions.base.StackTraceRemoverTest;\n+import org.mockito.internal.AllInvocationsFinderTest;\n+import org.mockito.internal.MockHandlerTest;\n+import org.mockito.internal.configuration.DefaultReturnValuesTest;\n+import org.mockito.internal.creation.CglibTest;\n+import org.mockito.internal.creation.MockFactoryTest;\n+import org.mockito.internal.invocation.InvocationMatcherTest;\n+import org.mockito.internal.invocation.InvocationTest;\n+import org.mockito.internal.invocation.InvocationsFinderTest;\n+import org.mockito.internal.matchers.EqualsTest;\n+import org.mockito.internal.progress.MockingProgressImplTest;\n+import org.mockito.internal.progress.VerificationModeImplTest;\n+import org.mockito.internal.stubbing.AnswerFactoryTest;\n+import org.mockito.internal.stubbing.StubberTest;\n+import org.mockito.internal.util.ListUtilTest;\n+import org.mockito.internal.util.MockUtilTest;\n+import org.mockito.internal.verification.MissingInvocationInOrderVerifierTest;\n+import org.mockito.internal.verification.MissingInvocationVerifierTest;\n+import org.mockito.internal.verification.NoMoreInvocationsVerifierTest;\n+import org.mockito.internal.verification.NumberOfInvocationsInOrderVerifierTest;\n+import org.mockito.internal.verification.NumberOfInvocationsVerifierTest;\n+import org.mockito.internal.verification.VerifyingRecorderTest;\n+import org.mockitousage.ReplacingObjectMethodsTest;\n+import org.mockitousage.UsingVarargsTest;\n+import org.mockitousage.binding.BridgeMethodPuzzleTest;\n+import org.mockitousage.binding.OverloadingPuzzleTest;\n+import org.mockitousage.examples.configure.withbaseclass.ConfiguringDefaultReturnValuesUsingBaseClassTest;\n+import org.mockitousage.examples.configure.withrunner.ConfiguringDefaultReturnValuesUsingRunnerTest;\n+import org.mockitousage.examples.configure.withstaticutility.ConfiguringSelectedMocksToReturnFakesTest;\n+import org.mockitousage.examples.use.ExampleTest;\n+import org.mockitousage.matchers.ComparableMatchersTest;\n+import org.mockitousage.matchers.CustomMatchersTest;\n+import org.mockitousage.matchers.InvalidUseOfMatchersTest;\n+import org.mockitousage.matchers.MatchersTest;\n+import org.mockitousage.matchers.MatchersToStringTest;\n+import org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest;\n+import org.mockitousage.misuse.InvalidStateDetectionTest;\n+import org.mockitousage.misuse.InvalidUsageTest;\n+import org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkTest;\n+import org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest;\n+import org.mockitousage.stacktrace.StackTraceFilteringTest;\n+import org.mockitousage.stacktrace.StackTrackeChangingTest;\n+import org.mockitousage.stubbing.BasicStubbingTest;\n+import org.mockitousage.stubbing.ReturningDefaultValuesTest;\n+import org.mockitousage.stubbing.StubbingWithThrowablesTest;\n+import org.mockitousage.verification.AtLeastOnceVerificationTest;\n+import org.mockitousage.verification.BasicVerificationInOrderTest;\n+import org.mockitousage.verification.BasicVerificationTest;\n+import org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest;\n+import org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest;\n+import org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest;\n+import org.mockitousage.verification.ExactNumberOfTimesVerificationTest;\n+import org.mockitousage.verification.NoMoreInteractionsVerificationTest;\n+import org.mockitousage.verification.RelaxedVerificationInOrderTest;\n+import org.mockitousage.verification.SelectedMocksInOrderVerificationTest;\n+import org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest;\n+import org.mockitousage.verification.VerificationInOrderTest;\n+import org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest;\n+import org.mockitousage.verification.VerificationUsingMatchersTest;\n+\n+public class MultiThreadedTest extends TestBase {\n+    \n+    private static class AllTestsRunner extends Thread {\n+        \n+        private boolean failed;\n+\n+        public void run() {\n+            Result result = JUnitCore.runClasses(\n+                    ConfiguringDefaultReturnValuesUsingBaseClassTest.class,\n+                    ConfiguringDefaultReturnValuesUsingRunnerTest.class,\n+                    ConfiguringSelectedMocksToReturnFakesTest.class,\n+                    EqualsTest.class,\n+                    ListUtilTest.class,\n+                    MockingProgressImplTest.class,\n+                    VerificationModeImplTest.class,\n+                    MockHandlerTest.class,\n+                    AllInvocationsFinderTest.class,\n+                    DefaultReturnValuesTest.class,\n+                    StubberTest.class,\n+                    AnswerFactoryTest.class,\n+                    NumberOfInvocationsVerifierTest.class,\n+                    VerifyingRecorderTest.class,\n+                    MissingInvocationVerifierTest.class,\n+                    NoMoreInvocationsVerifierTest.class,\n+                    NumberOfInvocationsInOrderVerifierTest.class,\n+                    MissingInvocationInOrderVerifierTest.class,\n+                    MockFactoryTest.class,\n+                    CglibTest.class,\n+                    InvocationMatcherTest.class,\n+                    InvocationsFinderTest.class,\n+                    InvocationTest.class,\n+                    MockitoTest.class,\n+                    MockUtilTest.class,\n+                    ReporterTest.class,\n+                    MockitoAssertionErrorTest.class,\n+                    StackTraceRemoverTest.class,\n+                    MockitoExceptionTest.class,\n+                    StackTraceFilteringTest.class,\n+                    BridgeMethodPuzzleTest.class,\n+                    OverloadingPuzzleTest.class,\n+                    InvalidUsageTest.class,\n+                    UsingVarargsTest.class,\n+                    CustomMatchersTest.class,\n+                    ComparableMatchersTest.class,\n+                    InvalidUseOfMatchersTest.class,\n+                    MatchersTest.class,\n+                    MatchersToStringTest.class,\n+                    VerificationAndStubbingUsingMatchersTest.class,\n+                    BasicStubbingTest.class,\n+                    ReturningDefaultValuesTest.class,\n+                    StubbingWithThrowablesTest.class,\n+                    AtLeastOnceVerificationTest.class,\n+                    BasicVerificationTest.class,\n+                    ExactNumberOfTimesVerificationTest.class,\n+                    VerificationInOrderTest.class,\n+                    NoMoreInteractionsVerificationTest.class,\n+                    SelectedMocksInOrderVerificationTest.class,\n+                    VerificationOnMultipleMocksUsingMatchersTest.class,\n+                    VerificationUsingMatchersTest.class,\n+                    RelaxedVerificationInOrderTest.class,\n+                    DescriptiveMessagesWhenVerificationFailsTest.class,\n+                    DescriptiveMessagesWhenTimesXVerificationFailsTest.class,\n+                    BasicVerificationInOrderTest.class,\n+                    VerificationInOrderMixedWithOrdiraryVerificationTest.class,\n+                    DescriptiveMessagesOnVerificationInOrderErrorsTest.class,\n+                    InvalidStateDetectionTest.class,\n+                    ReplacingObjectMethodsTest.class,\n+                    StackTrackeChangingTest.class,\n+                    ExampleTest.class,\n+                    PointingStackTraceToActualInvocationTest.class,\n+                    PointingStackTraceToActualInvocationChunkTest.class\n+                );\n+                \n+                if (!result.wasSuccessful()) {\n+                    System.err.println(\"Thread[\" + Thread.currentThread().getId() + \"]: error!\");\n+                    List<Failure> failures = result.getFailures();\n+                    System.err.println(failures.size());\n+                    for (Failure failure : failures) {\n+                        System.err.println(failure.getTrace());\n+                        failed = true;\n+                    }\n+                }\n+        }\n+\n+        public boolean isFailed() {\n+            return failed;\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldRunInMultipleThreads() throws Exception {\n+        //this test ALWAYS fails if there is a single failing unit\n+        assertFalse(\"Run in multiple thread failed\", runInMultipleThreads(4));\n+    }\n+    \n+    public static boolean runInMultipleThreads(int numberOfThreads) throws Exception {\n+        List<AllTestsRunner> threads = new LinkedList<AllTestsRunner>();\n+        for (int i = 1; i <= numberOfThreads; i++) {\n+            threads.add(new AllTestsRunner());\n+        }\n+\n+        for (Thread t : threads) {\n+            t.start();\n+        }\n+\n+        boolean failed = false;\n+        for (AllTestsRunner t : threads) {\n+            t.join();\n+            failed = failed ? true : t.isFailed();\n+        }\n+        \n+        return failed;\n+    }\n+    \n+    public static void main(String[] args) throws Exception {\n+        int numberOfThreads = 20; \n+        long before = System.currentTimeMillis();\n+        runInMultipleThreads(numberOfThreads);\n+        long after = System.currentTimeMillis();\n+        long executionTime = (after-before)/1000;\n+        System.out.println(\"Finished tests in \" + numberOfThreads + \" threads in \" + executionTime + \" seconds.\");\n+    }\n+}\n--- /dev/null\n+++ b/test/org/concurrentmockito/ThreadsShareAMockTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.concurrentmockito;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockitousage.IMethods;\n+\n+public class ThreadsShareAMockTest extends TestBase {\n+\n+    private IMethods mock;\n+\n+    @Test\n+    public void testShouldAllowVerifyingInThreads() throws Exception {\n+        for(int i = 0; i < 100; i++) {\n+            performTest();\n+        }\n+    }\n+\n+    private void performTest() throws InterruptedException {\n+        mock = mock(IMethods.class);\n+        final Thread[] listeners = new Thread[3];\n+        for (int i = 0; i < listeners.length; i++) {\n+            listeners[i] = new Thread() {\n+                @Override\n+                public void run() {\n+                    mock.simpleMethod(\"foo\");\n+                }\n+            };\n+            listeners[i].start();\n+        }\n+        for (int i = 0; i < listeners.length; i++) {\n+            listeners[i].join();\n+        }\n+        verify(mock, times(listeners.length)).simpleMethod(\"foo\");\n+    }\n+}", "timestamp": 1214412920, "metainfo": ""}