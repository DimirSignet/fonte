{"sha": "1b913b5fbc54432ab7bb7230761bc066ca44376e", "log": "refactored name  --HG-- rename : test/org/mockitousage/examples/configure/MoreConfiguringDefaultReturnValuesTest.java => test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40500", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.MockitoConfiguration;\n+import org.mockito.ReturnValues;\n+import org.mockito.TestBase;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.stubbing.DefaultReturnValues;\n+\n+public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {\n+    \n+    private MyDefaultReturnValues myDefaultReturnValues;\n+\n+    @Test\n+    public void shouldAllowConfiguringReturnValuesForSelectedMocks() throws Exception {\n+        MyObject smartStub = mock(MyObject.class);\n+        beSmartStub(smartStub);\n+        MyObject mock = mock(MyObject.class);\n+        \n+        assertNotNull(smartStub.returnMyObject());\n+        assertEquals(\"\", smartStub.returnString());\n+        assertTrue(smartStub.returnBoolean());\n+        \n+        assertNull(mock.returnMyObject());\n+        assertNull(mock.returnString());\n+        assertFalse(mock.returnBoolean());\n+    }\n+\n+    interface MyObject {\n+        MyObject returnMyObject();\n+        String returnString();\n+        boolean returnBoolean();\n+    }\n+    \n+    private void beSmartStub(Object mock) {\n+        myDefaultReturnValues.addSmartStub(mock);\n+    }\n+    \n+    @Before\n+    public void configureDefaultReturnValues() {\n+        myDefaultReturnValues = new MyDefaultReturnValues();\n+        MockitoConfiguration.setCustomReturnValues(myDefaultReturnValues);\n+    }\n+    \n+    @After\n+    public void resetDefaultReturnValues() {\n+        MockitoConfiguration.resetCustomReturnValues();\n+        myDefaultReturnValues.clearSmartStubs();\n+    }\n+    \n+    private final class MyDefaultReturnValues implements ReturnValues {\n+        private List<Object> smartStubs = new LinkedList<Object>();\n+\n+        public Object valueFor(Invocation invocation) {\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n+            if (value != null || returnType == Void.TYPE) {\n+                return value;\n+            } else if (smartStubs.contains(invocation.getMock())) {\n+                return returnValueForSmartStub(returnType);\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        private Object returnValueForSmartStub(Class<?> returnType) {\n+            if (returnType == String.class) {\n+                return \"\";\n+            } else if (returnType == Boolean.TYPE) {\n+                return true;\n+            } else {\n+                return mock(returnType);\n+            }\n+        }\n+\n+        public void clearSmartStubs() {\n+            smartStubs.clear();\n+        }\n+\n+        public void addSmartStub(Object mock) {\n+            smartStubs.add(mock);\n+        }\n+    }\n+}", "timestamp": 1206322018, "metainfo": ""}