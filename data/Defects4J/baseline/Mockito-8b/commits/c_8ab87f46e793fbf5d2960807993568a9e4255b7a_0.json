{"sha": "8ab87f46e793fbf5d2960807993568a9e4255b7a", "log": "Tidy-up in buildSrc - coverage and some documentation  Busted complexity into separate classes.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java\n package org.mockito.release.notes.vcs;\n \n-import org.mockito.release.notes.exec.ProcessRunner;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n class GitContributionsProvider implements ContributionsProvider {\n \n     private static Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);\n-    private final ProcessRunner runner;\n+    private final GitLogProvider logProvider;\n \n-    GitContributionsProvider(ProcessRunner runner) {\n-        this.runner = runner;\n+    GitContributionsProvider(GitLogProvider logProvider) {\n+        this.logProvider = logProvider;\n     }\n \n     public ContributionSet getContributionsBetween(String fromRev, String toRev) {\n         LOG.info(\"Fetching {} from the repo\", fromRev);\n \n-        runner.run(\"git\", \"fetch\", \"origin\", \"+refs/tags/$previousVersion:refs/tags/$previousVersion\");\n-\n         LOG.info(\"Loading all commits between {} and {}\", fromRev, toRev);\n \n-        String entryToken = \"@@commit@@\";\n+        String commitToken = \"@@commit@@\";\n         String infoToken = \"@@info@@\";\n-        String output = runner.run(\"git\", \"log\", \"--pretty=format:%ae\" + infoToken + \"%an\" + infoToken + \"%B%N\" + entryToken, fromRev + \"..\" + toRev);\n+        String log = logProvider.getLog(fromRev, toRev, \"--pretty=format:%ae\" + infoToken + \"%an\" + infoToken + \"%B%N\" + commitToken);\n \n         DefaultContributionSet contributions = new DefaultContributionSet();\n \n-        for (String entry : output.split(entryToken)) {\n+        for (String entry : log.split(commitToken)) {\n             String[] entryParts = entry.split(infoToken);\n-            String email = entryParts[0].trim();\n-            String author = entryParts[1].trim();\n-            String message = entryParts[2].trim();\n-            contributions.add(new GitCommit(email, author, message));\n+            if (entryParts.length == 3) {\n+                String email = entryParts[0].trim();\n+                String author = entryParts[1].trim();\n+                String message = entryParts[2].trim();\n+                contributions.add(new GitCommit(email, author, message));\n+            }\n         }\n \n         return contributions;\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitLogProvider.java\n+package org.mockito.release.notes.vcs;\n+\n+import org.mockito.release.notes.exec.ProcessRunner;\n+\n+class GitLogProvider {\n+\n+    private final ProcessRunner runner;\n+\n+    GitLogProvider(ProcessRunner runner) {\n+        this.runner = runner;\n+    }\n+\n+    public String getLog(String fromRev, String toRev, String format) {\n+        runner.run(\"git\", \"fetch\", \"origin\", \"+refs/tags/\" + fromRev + \":refs/tags/\" + fromRev);\n+        return runner.run(\"git\", \"log\", format, fromRev + \"..\" + toRev);\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n \n import org.mockito.release.notes.exec.ProcessRunner;\n \n+/**\n+ * Vcs services\n+ */\n public class Vcs {\n \n     /**\n      * Provides the ContributionsProvider\n      */\n     public static ContributionsProvider getContributionsProvider(ProcessRunner runner) {\n-        return new GitContributionsProvider(runner);\n+        return new GitContributionsProvider(new GitLogProvider(runner));\n     }\n }", "timestamp": 1416516893, "metainfo": ""}