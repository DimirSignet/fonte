{"sha": "407c84963477d441cc6e4b44421b440db0ed5d46", "log": "Fixed #98 possible NPE  NPE was possible when constructing user-friendly exception message for a different problem. This change does not fix any underlying, environmental/classloading issues the user has. At least Mockito shows the right message.", "commit": "\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n             proxyInstance = createProxy(proxyClass, interceptor);\n             return mockedType.cast(proxyInstance);\n         } catch (ClassCastException cce) {\n-            // NPE unlikely to happen because CCE will only happen on the cast statement\n             throw new MockitoException(join(\n                 \"ClassCastException occurred while creating the mockito proxy :\",\n-                \"  class to imposterize : '\" + mockedType.getCanonicalName() + \"', loaded by classloader : '\" + mockedType.getClassLoader() + \"'\",\n-                \"  imposterizing class : '\" + proxyClass.getCanonicalName() + \"', loaded by classloader : '\" + proxyClass.getClassLoader() + \"'\",\n-                \"  proxy instance class : '\" + proxyInstance.getClass().getCanonicalName() + \"', loaded by classloader : '\" + proxyInstance.getClass().getClassLoader() + \"'\",\n+                \"  class to imposterize : '\" + describeClass(mockedType),\n+                \"  imposterizing class : '\" + describeClass(proxyClass),\n+                \"  proxy instance class : '\" + describeClass(proxyInstance),\n                 \"\",\n                 \"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)\"\n             ), cce);\n             setConstructorsAccessible(mockedType, false);\n         }\n     }\n-    \n+\n+    private static String describeClass(Class type) {\n+        return type == null? \"null\" : type.getCanonicalName() + \"', loaded by classloader : '\" + type.getClassLoader() + \"'\";\n+    }\n+\n+    private static String describeClass(Object instance) {\n+        return instance == null? \"null\" : describeClass(instance.getClass());\n+    }\n+\n     public void setConstructorsAccessible(Class<?> mockedType, boolean accessible) {\n         for (Constructor<?> constructor : mockedType.getDeclaredConstructors()) {\n             constructor.setAccessible(accessible);", "timestamp": 1412791715, "metainfo": ""}