{"sha": "bfc2c4802218f7c05a690921c438a51df321c17a", "log": "Preparation before making Invocation an interface. Making the API more lightweight - removing some public methods. This will make code slightly less LoD but that's a reasonable trade off.", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.internal.reporting.PrintSettings;\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockito.internal.util.MockUtil;\n-import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.InvocationOnMock;\n \n         return matchers;\n     }\n \n-    public boolean isToString() {\n-        return new ObjectMethodsGuru().isToString(getMethod());\n-    }\n-\n     public boolean isValidException(Throwable throwable) {\n         Class<?>[] exceptions = this.getMethod().getExceptionTypes();\n         Class<?> throwableClass = throwable.getClass();\n--- a/src/org/mockito/internal/verification/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n package org.mockito.internal.verification;\n \n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.util.collections.ListUtil;\n import org.mockito.internal.util.collections.ListUtil.Filter;\n \n \n     private static class RemoveToString implements Filter<Invocation> {\n         public boolean isOut(Invocation invocation) {\n-            return invocation.isToString();\n+            return new ObjectMethodsGuru().isToString(invocation.getMethod());\n         }\n     }\n }\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n     }\n     \n     @Test\n-    public void shouldKnowIfIsToString() throws Exception {\n-        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n-        assertTrue(toString.isToString());\n-        \n-        Invocation notToString = new InvocationBuilder().method(\"toString\").arg(\"foo\").toInvocation();\n-        assertFalse(notToString.isToString());\n-    }\n-    \n-    @Test\n     public void shouldKnowValidThrowables() throws Exception {\n         Invocation invocation = new InvocationBuilder().method(\"canThrowException\").toInvocation();\n         assertFalse(invocation.isValidException(new Exception()));", "timestamp": 1333226704, "metainfo": ""}