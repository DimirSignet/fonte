{"sha": "ce623bdadaa7f12e4d29b19d0fee876e42279e00", "log": "-killed/refactored some tests -started purging EasyMock  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4019", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/Matchers.java\n+package org.mockito;\n+\n+import org.easymock.internal.LastArguments;\n+import org.easymock.internal.matchers.*;\n+\n+public class Matchers {\n+    \n+    /**\n+     * Expects a comparable argument greater than or equal the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a byte argument greater than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte geq(byte value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument greater than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double geq(double value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument greater than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float geq(float value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument greater than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int geq(int value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument greater than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long geq(long value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument greater than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short geq(short value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a comparable argument less than or equal the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n+        LastArguments.reportMatcher(new LessOrEqual<T>(value));\n+        return null;\n+    }\n+     \n+    /**\n+     * Expects a byte argument less than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte leq(byte value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument less than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double leq(double value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument less than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float leq(float value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument less than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int leq(int value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument less than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long leq(long value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument less than or equal to the given value. For\n+     * details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short leq(short value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a comparable argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n+        LastArguments.reportMatcher(new GreaterThan<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a byte argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte gt(byte value) {\n+        LastArguments.reportMatcher(new GreaterThan<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double gt(double value) {\n+        LastArguments.reportMatcher(new GreaterThan<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float gt(float value) {\n+        LastArguments.reportMatcher(new GreaterThan<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int gt(int value) {\n+        LastArguments.reportMatcher(new GreaterThan<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long gt(long value) {\n+        LastArguments.reportMatcher(new GreaterThan<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument greater than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short gt(short value) {\n+        LastArguments.reportMatcher(new GreaterThan<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a comparable argument less than the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n+        LastArguments.reportMatcher(new LessThan<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a byte argument less than the given value. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte lt(byte value) {\n+        LastArguments.reportMatcher(new LessThan<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument less than the given value. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double lt(double value) {\n+        LastArguments.reportMatcher(new LessThan<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument less than the given value. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float lt(float value) {\n+        LastArguments.reportMatcher(new LessThan<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument less than the given value. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int lt(int value) {\n+        LastArguments.reportMatcher(new LessThan<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument less than the given value. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long lt(long value) {\n+        LastArguments.reportMatcher(new LessThan<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument less than the given value. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short lt(short value) {\n+        LastArguments.reportMatcher(new LessThan<Short>(value));\n+        return 0;\n+    }\n+    \n+    /**\n+     * Expects a string that contains the given substring. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param substring\n+     *            the substring.\n+     * @return <code>null</code>.\n+     */\n+    public static String contains(String substring) {\n+        LastArguments.reportMatcher(new Contains(substring));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean and(boolean first, boolean second) {\n+        LastArguments.reportAnd(2);\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a byte that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte and(byte first, byte second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char and(char first, char second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double and(double first, double second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float and(float first, float second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int and(int first, int second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long and(long first, long second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short and(short first, short second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an Object that matches both given expectations.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T and(T first, T second) {\n+        LastArguments.reportAnd(2);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean or(boolean first, boolean second) {\n+        LastArguments.reportOr(2);\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a comparable argument equals to the given value according to their\n+     * compareTo method. For details, see the EasyMock documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n+        LastArguments.reportMatcher(new CompareEqual<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object that is the same as the given value. For details, see\n+     * the EasyMock documentation.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T same(T value) {\n+        LastArguments.reportMatcher(new Same(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that ends with the given suffix. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param suffix\n+     *            the suffix.\n+     * @return <code>null</code>.\n+     */\n+    public static String endsWith(String suffix) {\n+        LastArguments.reportMatcher(new EndsWith(suffix));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that starts with the given prefix. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param prefix\n+     *            the prefix.\n+     * @return <code>null</code>.\n+     */\n+    public static String startsWith(String prefix) {\n+        LastArguments.reportMatcher(new StartsWith(prefix));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that contains a substring that matches the given regular\n+     * expression. For details, see the EasyMock documentation.\n+     * \n+     * @param regex\n+     *            the regular expression.\n+     * @return <code>null</code>.\n+     */\n+    public static String find(String regex) {\n+        LastArguments.reportMatcher(new Find(regex));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object array that is equal to the given array, i.e. it has to\n+     * have the same type, length, and each element has to be equal.\n+     * \n+     * @param <T>\n+     *            the type of the array, it is passed through to prevent casts.\n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T[] aryEq(T[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static short[] aryEq(short[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a long array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static long[] aryEq(long[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an int array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static int[] aryEq(int[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a float array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static float[] aryEq(float[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a double array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static double[] aryEq(double[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a char array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static char[] aryEq(char[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a byte array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static byte[] aryEq(byte[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static boolean[] aryEq(boolean[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object that does not match the given expectation.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T not(T first) {\n+        LastArguments.reportNot();\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short not(short first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int not(int first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long not(long first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float not(float first) {\n+        LastArguments.reportNot();\n+        return first;\n+    }\n+\n+    /**\n+     * Expects a double that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double not(double first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char not(char first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a boolean that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean not(boolean first) {\n+        LastArguments.reportNot();\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a byte that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte not(byte first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an Object that matches one of the given expectations.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T or(T first, T second) {\n+        LastArguments.reportOr(2);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short or(short first, short second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long or(long first, long second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int or(int first, int second) {\n+        LastArguments.reportOr(2);\n+        return first;\n+    }\n+\n+    /**\n+     * Expects a float that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float or(float first, float second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double or(double first, double second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char or(char first, char second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a byte that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte or(byte first, byte second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+}", "timestamp": 1195253868, "metainfo": ""}