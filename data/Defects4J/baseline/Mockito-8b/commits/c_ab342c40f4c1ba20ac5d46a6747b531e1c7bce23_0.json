{"sha": "ab342c40f4c1ba20ac5d46a6747b531e1c7bce23", "log": "In order to keep in 'mockitousage' package only tests that are real usages of mockito I moved some tests around  --HG-- rename : test/org/mockitousage/internal/debugging/LocationTest.java => test/org/mockito/internal/debugging/LocationTest.java rename : test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java => test/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java rename : test/org/mockitousage/matchers/ComparableMatchersTest.java => test/org/mockito/internal/matchers/ComparableMatchersTest.java rename : test/org/mockitousage/warnings/CollectingDebugDataTest.java => test/org/mockito/internal/runners/CollectingDebugDataTest.java rename : test/org/mockitousage/configuration/MockitoConfigurationTest.java => test/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401512", "commit": "\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockito.internal.invocation.InvocationMatcherTest;\n import org.mockito.internal.invocation.InvocationTest;\n import org.mockito.internal.invocation.InvocationsFinderTest;\n+import org.mockito.internal.matchers.ComparableMatchersTest;\n import org.mockito.internal.matchers.EqualsTest;\n+import org.mockito.internal.matchers.MatchersToStringTest;\n import org.mockito.internal.progress.MockingProgressImplTest;\n import org.mockito.internal.progress.TimesTest;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;\n import org.mockitousage.basicapi.ResetTest;\n import org.mockitousage.basicapi.UsingVarargsTest;\n import org.mockitousage.examples.use.ExampleTest;\n-import org.mockitousage.matchers.ComparableMatchersTest;\n import org.mockitousage.matchers.CustomMatchersTest;\n import org.mockitousage.matchers.InvalidUseOfMatchersTest;\n import org.mockitousage.matchers.MatchersTest;\n-import org.mockitousage.matchers.MatchersToStringTest;\n import org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest;\n import org.mockitousage.misuse.InvalidStateDetectionTest;\n import org.mockitousage.misuse.InvalidUsageTest;\n--- /dev/null\n+++ b/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.configuration;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class ReadingConfigurationFromClasspathTest extends TestBase {\n+    \n+    @Test\n+    public void shouldReadConfigurationClassFromClassPath() {\n+        ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n+            public Object answer(InvocationOnMock invocation) {\n+                return \"foo\";\n+            }});\n+\n+        IMethods mock = mock(IMethods.class); \n+        assertEquals(\"foo\", mock.simpleMethod());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/debugging/LocationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.debugging;\n+\n+import org.junit.Test;\n+import org.mockito.internal.debugging.Location;\n+import org.mockitoutil.TestBase;\n+\n+public class LocationTest extends TestBase {\n+\n+    @Test\n+    public void shouldLocationNotContainGetStackTraceMethod() {\n+        assertContains(\"shouldLocationNotContainGetStackTraceMethod\", new Location().toString());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.invocation.realmethod;\n+\n+import static org.mockitoutil.ExtraMatchers.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n+import org.mockito.internal.invocation.realmethod.RealMethod;\n+import org.mockitoutil.TestBase;\n+\n+public class FilteredCGLIBProxyRealMethodTest extends TestBase {\n+\n+    @Before\n+    public void keepStackTracesClean() {\n+        makeStackTracesClean();\n+    }\n+    \n+    class Foo {\n+        public String throwSomething() {\n+            throw new RuntimeException();\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {\n+        //given\n+        FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(new RealMethod() {\n+            public Object invoke(Object target, Object[] arguments) throws Throwable {\n+                return new Foo().throwSomething();\n+            }});\n+        \n+        //when\n+        try {\n+            realMethod.invoke(null, null);\n+            fail();\n+        //then\n+        } catch (Exception e) {\n+            assertThat(e, hasMethodInStackTraceAt(0, \"throwSomething\"));\n+            assertThat(e, hasMethodInStackTraceAt(1, \"invoke\"));\n+            assertThat(e, hasMethodInStackTraceAt(2, \"shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows\"));\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/matchers/ComparableMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.matchers;\n+\n+import java.math.BigDecimal;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class ComparableMatchersTest extends TestBase {\n+\n+    @Test\n+    public void testLessThan() {\n+        test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n+    }\n+\n+    @Test\n+    public void testGreateThan() {\n+        test(new GreaterThan<String>(\"b\"), false, true, false, \"gt\");\n+    }\n+\n+    @Test\n+    public void testLessOrEqual() {\n+        test(new LessOrEqual<String>(\"b\"), true, false, true, \"leq\");\n+    }\n+\n+    @Test\n+    public void testGreateOrEqual() {\n+        test(new GreaterOrEqual<String>(\"b\"), false, true, true, \"geq\");\n+    }\n+\n+    @Test\n+    public void testCompareEqual() {\n+        test(new CompareEqual<String>(\"b\"), false, false, true, \"cmpEq\");\n+\n+        // Make sure it works when equals provide a different result than\n+        // compare\n+        CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(\n+                new BigDecimal(\"5.00\"));\n+        assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n+    }\n+\n+    private void test(CompareTo<String> compareTo, boolean lower, boolean higher,\n+            boolean equals, String name) {\n+\n+        assertEquals(lower, compareTo.matches(\"a\"));\n+        assertEquals(equals, compareTo.matches(\"b\"));\n+        assertEquals(higher, compareTo.matches(\"c\"));\n+\n+        assertEquals(name + \"(b)\", describe(compareTo));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/matchers/MatchersToStringTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.matchers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hamcrest.Matcher;\n+import org.junit.Test;\n+import org.mockito.internal.matchers.And;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.internal.matchers.Contains;\n+import org.mockito.internal.matchers.EndsWith;\n+import org.mockito.internal.matchers.Equals;\n+import org.mockito.internal.matchers.Find;\n+import org.mockito.internal.matchers.Matches;\n+import org.mockito.internal.matchers.Not;\n+import org.mockito.internal.matchers.NotNull;\n+import org.mockito.internal.matchers.Null;\n+import org.mockito.internal.matchers.Or;\n+import org.mockito.internal.matchers.Same;\n+import org.mockito.internal.matchers.StartsWith;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class MatchersToStringTest extends TestBase {\n+\n+    @Test\n+    public void sameToStringWithString() {\n+        assertEquals(\"same(\\\"X\\\")\", describe(new Same(\"X\")));\n+\n+    }\n+\n+    @Test\n+    public void nullToString() {\n+        assertEquals(\"isNull()\", describe(Null.NULL));\n+    }\n+\n+    @Test\n+    public void notNullToString() {\n+        assertEquals(\"notNull()\", describe(NotNull.NOT_NULL));\n+    }\n+\n+    @Test\n+    public void anyToString() {\n+        assertEquals(\"<any>\", describe(Any.ANY));\n+    }\n+\n+    @Test\n+    public void sameToStringWithChar() {\n+        assertEquals(\"same('x')\", describe(new Same('x')));\n+    }\n+\n+    @Test\n+    public void sameToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        assertEquals(\"same(X)\", describe(new Same(o)));\n+    }\n+\n+    @Test\n+    public void equalsToStringWithString() {\n+        assertEquals(\"\\\"X\\\"\", describe(new Equals(\"X\")));\n+\n+    }\n+\n+    @Test\n+    public void equalsToStringWithChar() {\n+        assertEquals(\"'x'\", describe(new Equals('x')));\n+    }\n+\n+    @Test\n+    public void equalsToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        assertEquals(\"X\", describe(new Equals(o)));\n+    }\n+\n+    @Test\n+    public void orToString() {\n+        List<Matcher> matchers = new ArrayList<Matcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        assertEquals(\"or(1, 2)\", describe(new Or(matchers)));\n+    }\n+\n+    @Test\n+    public void notToString() {\n+        assertEquals(\"not(1)\", describe(new Not(new Equals(1))));\n+    }\n+\n+    @Test\n+    public void andToString() {\n+        List<Matcher> matchers = new ArrayList<Matcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        assertEquals(\"and(1, 2)\", describe(new And(matchers)));\n+    }\n+\n+    @Test\n+    public void startsWithToString() {\n+        assertEquals(\"startsWith(\\\"AB\\\")\", describe(new StartsWith(\"AB\")));\n+    }\n+\n+    @Test\n+    public void endsWithToString() {\n+        assertEquals(\"endsWith(\\\"AB\\\")\", describe(new EndsWith(\"AB\")));\n+    }\n+\n+    @Test\n+    public void containsToString() {\n+        assertEquals(\"contains(\\\"AB\\\")\", describe(new Contains(\"AB\")));\n+    }\n+\n+    @Test\n+    public void findToString() {\n+        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", describe(new Find(\"\\\\s+\")));\n+    }\n+\n+    @Test\n+    public void matchesToString() {\n+        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", describe(new Matches(\"\\\\s+\")));\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/runners/CollectingDebugDataTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.runners;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class CollectingDebugDataTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+    \n+    @Test\n+    public void shouldNotCollectWhenNoJUnitRunner() throws Throwable {\n+        //stubbing\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+        \n+        //calling unstubbed method\n+        mock.differentMethod();\n+        \n+        MockingProgress progress = new ThreadSafeMockingProgress();\n+        \n+        assertFalse(progress.getDebuggingInfo().hasData());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitoutil.TestBase;\n+\n+public class VarargsAndAnyObjectPicksUpExtraInvocationsTest extends TestBase {\n+    public interface TableBuilder {\n+        void newRow(String trAttributes, String... cells);\n+    }\n+\n+    @Mock\n+    TableBuilder table;\n+\n+    //TODO: not yet implemented\n+    @Ignore\n+    @Test\n+    public void shouldVerifyCorrectlyWithVarargs() {\n+        //when\n+        table.newRow(\"qux\", \"foo\", \"bar\", \"baz\");\n+        table.newRow(\"abc\", \"def\");\n+        \n+        //then\n+        verify(table).newRow(anyString(), eq(\"foo\"), anyString(), anyString());\n+        verify(table).newRow(anyString(), anyString());\n+        verify(table, times(2)).newRow(anyString(), (String[]) anyObject());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.configuration;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class CustomizedAnnotationForSmartMockTest extends TestBase {\n+    \n+    @SmartMock IMethods smartMock;\n+\n+    @Test\n+    public void shouldUseCustomAnnotation() {\n+        assertEquals(\"SmartMock should return empty String by default\", \"\", smartMock.simpleMethod(1));\n+        verify(smartMock).simpleMethod(1);\n+    }\n+}\n--- a/test/org/mockitousage/misuse/DetectingFinalMethodsTest.java\n+++ b/test/org/mockitousage/misuse/DetectingFinalMethodsTest.java\n import org.mockito.Mock;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n-import org.mockito.internal.util.MockUtil;\n import org.mockitoutil.TestBase;\n \n public class DetectingFinalMethodsTest extends TestBase {\n     @Test\n     public void shouldFailWithUnfinishedStubbing() {\n         withFinal = mock(WithFinal.class);\n-        new MockUtil().getMockHandler(withFinal);\n         try {\n             when(withFinal.foo()).thenReturn(null);\n             fail();", "timestamp": 1245184774, "metainfo": ""}