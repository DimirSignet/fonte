{"sha": "c11da9ac11a373eb6f643363452d2ba9220b1cf2", "log": "refactored some TODOs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40327", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         ));\n     }\n \n-    //TODO Printable for those strings?\n-    public void wantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n+    public void wantedDiffersFromActual(Printable wanted, Printable actual, HasStackTrace actualInvocationStackTrace) {\n         WantedDiffersFromActual cause1 = new WantedDiffersFromActual(join(\n                 \"Actual invocation:\",\n                 actual.toString()\n         ));\n     }\n     \n-    //TODO previous and previousStackTrace should be the same object\n     public void wantedButNotInvokedInOrder(Printable wanted, Printable previous, HasStackTrace previousStackTrace) {\n         WantedAnywhereAfterFollowingInteraction cause = new WantedAnywhereAfterFollowingInteraction(join(\n                         \"Wanted anywhere AFTER following interaction:\",\n--- a/src/org/mockito/internal/invocation/InvocationsPrinter.java\n+++ b/src/org/mockito/internal/invocation/InvocationsPrinter.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.invocation;\n+\n+import org.mockito.exceptions.Printable;\n \n public class InvocationsPrinter {\n \n         }\n     }\n \n-    public String printWanted() {\n-        return wanted;\n+    public Printable getWanted() {\n+        return new Printable() {\n+            public String toString() {\n+                return wanted;\n+        }};\n     }\n \n-    public String printActual() {\n-        return actual;\n+    public Printable getActual() {\n+        return new Printable() {\n+            public String toString() {\n+                return actual;\n+        }};\n     }\n }\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n     private void reportMissingInvocationError(InvocationMatcher wanted, Invocation similar) {\n         if (similar != null) {\n             InvocationsPrinter printer = new InvocationsPrinter(wanted, similar);\n-            reporter.wantedDiffersFromActual(printer.printWanted(), printer.printActual(), similar.getStackTrace());\n+            reporter.wantedDiffersFromActual(printer.getWanted(), printer.getActual(), similar.getStackTrace());\n         } else {\n             reporter.wantedButNotInvoked(wanted);\n         }\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n \n public class VerifyingRecorder {\n \n-    //TODO don't like LL coz it's too slow :)\n     private LinkedList<Invocation> registeredInvocations = new LinkedList<Invocation>();\n \n     private final List<? extends Verifier> verifiers;\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n \n     //TODO I want to have ruby script that will collect all java code from examples in javadoc/documentation\n     // and create a test case that I can manually fix and run and make sure examples are valid\n+    \n+    //TODO check if performace can be tweaked (e.g: LL -> AL)\n     \n     @Test\n     public void shouldRemoveStubbableFromProgressAfterStubbing() {\n--- a/test/org/mockito/internal/invocation/InvocationsPrinterTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsPrinterTest.java\n         Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n         InvocationsPrinter printer = new InvocationsPrinter(simpleMethod, differentMethod);\n         \n-        assertEquals(\"Object.simpleMethod()\", printer.printWanted());\n-        assertEquals(\"Object.differentMethod()\", printer.printActual());\n+        assertEquals(\"Object.simpleMethod()\", printer.getWanted().toString());\n+        assertEquals(\"Object.differentMethod()\", printer.getActual().toString());\n     }\n     \n     class Super {\n         \n         assertEquals(invocationOne.toString(), invocationTwo.toString());\n         \n-        assertEquals(\"Object.test(class java.lang.Object)\", printer.printWanted());\n-        assertEquals(\"Object.test(class java.lang.String)\", printer.printActual());\n+        assertEquals(\"Object.test(class java.lang.Object)\", printer.getWanted().toString());\n+        assertEquals(\"Object.test(class java.lang.String)\", printer.getActual().toString());\n     }\n     \n     class Dummy {\n         \n         assertEquals(invocationOne.toString(), invocationTwo.toString());\n         \n-        assertEquals(\"Object.test(class [Ljava.lang.Object;)\", printer.printWanted());\n-        assertEquals(\"Object.test(class [Ljava.lang.String;)\", printer.printActual());\n+        assertEquals(\"Object.test(class [Ljava.lang.Object;)\", printer.getWanted().toString());\n+        assertEquals(\"Object.test(class [Ljava.lang.String;)\", printer.getActual().toString());\n     }\n }\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n         \n         verifier.verify(invocations, wanted, VerificationModeImpl.atLeastOnce());\n         \n-        assertEquals(wanted.toString(), reporterStub.wanted);\n-        assertEquals(actualInvocation.toString(), reporterStub.actual);\n+        assertEquals(wanted.toString(), reporterStub.wanted.toString());\n+        assertEquals(actualInvocation.toString(), reporterStub.actual.toString());\n         assertSame(actualInvocation.getStackTrace(), reporterStub.actualInvocationStackTrace);\n     }\n     \n     class ReporterStub extends Reporter {\n         private Object wanted;\n-        private String actual;\n+        private Object actual;\n         private HasStackTrace actualInvocationStackTrace;\n         @Override public void wantedButNotInvoked(Printable wanted) {\n             this.wanted = wanted;\n         }\n-        @Override public void wantedDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n+        @Override public void wantedDiffersFromActual(Printable wanted, Printable actual, HasStackTrace actualInvocationStackTrace) {\n                     this.wanted = wanted;\n                     this.actual = actual;\n                     this.actualInvocationStackTrace = actualInvocationStackTrace;", "timestamp": 1201039155, "metainfo": ""}