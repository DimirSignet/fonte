{"sha": "6d948013ac95bea6d5f9dfd0582f4bd01e4d58a5", "log": "changed the way invocations are rendered: now classnames have lowercased first letter. This is done to make it consistent with rendering invocations for @Mock annotated mocks  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40536", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     \n     //lower case first letter\n     private String toInstanceName(String className) {\n-        return className;\n-        //TODO enable and fix tests\n-//        return className.substring(0, 1).toLowerCase() + className.substring(1);\n+        return className.substring(0, 1).toLowerCase() + className.substring(1);\n     }\n \n     private VerifyingRecorder createRecorder() {\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n     @Test\n     public void shouldPrintMethodName() {\n         invocation = new InvocationBuilder().toInvocation();\n-        assertEquals(\"IMethods.simpleMethod();\", invocation.toString());\n+        assertEquals(\"iMethods.simpleMethod();\", invocation.toString());\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n-                    \"IMethods.simpleMethod(11);\"; \n+                    \"iMethods.simpleMethod(11);\"; \n             \n             assertEquals(expected, e.getMessage());\n             \n                 \"\\n\" +\n                 \"Wanted anywhere AFTER following interaction:\" +\n                 \"\\n\" +\n-                \"IMethods.simpleMethod(2);\";\n+                \"iMethods.simpleMethod(2);\";\n             \n             assertEquals(expectedCause, e.getCause().getMessage());\n         }\n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n-                    \"IMethods.differentMethod();\"; \n+                    \"iMethods.differentMethod();\"; \n             \n             assertEquals(expected, e.getMessage());\n             \n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n-                    \"IMethods.simpleMethod(999);\"; \n+                    \"iMethods.simpleMethod(999);\"; \n             assertEquals(expectedMessage, actualMessage);     \n         }\n     }   \n                     \"\\n\" +\n                     \"Verification in order failure\" +\n                     \"\\n\" +\n-                    \"IMethods.simpleMethod(2);\" +\n+                    \"iMethods.simpleMethod(2);\" +\n                     \"\\n\" +\n                     \"Wanted 1 time but was 2\"; \n             assertEquals(expectedMessage, actualMessage);      \n                     \"\\n\" +\n                     \"Verification in order failure\" +\n                     \"\\n\" +\n-                    \"IMethods.simpleMethod(2);\" +\n+                    \"iMethods.simpleMethod(2);\" +\n                     \"\\n\" +\n                     \"Wanted 2 times but was 1\";\n             assertEquals(expectedMessage, actualMessage);\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n         } catch (TooLittleActualInvocations e) {\n             String expected =\n                 \"\\n\" +\n-                \"LinkedList.clear();\" +\n+                \"linkedList.clear();\" +\n                 \"\\n\" +\n                 \"Wanted 100 times but was 3\";\n             assertEquals(expected, e.getMessage());\n         } catch (TooManyActualInvocations e) {\n             String expected =\n                 \"\\n\" +\n-                \"LinkedList.clear();\" +\n+                \"linkedList.clear();\" +\n                 \"\\n\" +\n                 \"Wanted 1 time but was 4\";\n             assertEquals(expected, e.getMessage());\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n-                    \"IMethods.simpleMethod();\";\n+                    \"iMethods.simpleMethod();\";\n             assertEquals(expectedMessage, actualMessage);\n         }\n     }\n             verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"IMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\"));\n+            assertThat(e, messageContains(\"iMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\"));\n         }\n     }\n \n                     \"\\n\" +\n                     \"Argument(s) are different! Wanted:\" +\n                     \"\\n\" +\n-                    \"IMethods.varargs(1, 1000);\";\n+                    \"iMethods.varargs(1, 1000);\";\n \n             assertEquals(expected, e.getMessage());\n \n                     \"\\n\" +\n                     \"Actual invocation has different arguments:\" +\n                     \"\\n\" +\n-                    \"IMethods.varargs(1, 2);\";\n+                    \"iMethods.varargs(1, 2);\";\n \n             assertEquals(expectedCause, e.getCause().getMessage());\n         }\n                     \"\\n\" +\n                     \"Argument(s) are different! Wanted:\" +\n                     \"\\n\" +\n-                    \"IMethods.varargs(\" +\n+                    \"iMethods.varargs(\" +\n                     \"\\n\" +\n                     \"    \\\"this is very long string\\\",\" +\n                     \"\\n\" +\n                     \"\\n\" +\n                     \"Actual invocation has different arguments:\" +\n                     \"\\n\" +\n-                    \"IMethods.varargs(\" +\n+                    \"iMethods.varargs(\" +\n                     \"\\n\" +\n                     \"    \\\"this is very long string\\\",\" +\n                     \"\\n\" +\n                     \"\\n\" +\n                     \"Undesired invocation:\" +\n                     \"\\n\" +\n-                    \"IMethods.oneArg(false);\";\n+                    \"iMethods.oneArg(false);\";\n             assertEquals(expectedCause, e.getCause().getMessage());\n         }\n     }\n                 \"\\n\" +\n                 \"Undesired invocation:\" +\n                 \"\\n\" +\n-                \"IMethods.twoArgumentMethod(1, 2);\";\n+                \"iMethods.twoArgumentMethod(1, 2);\";\n \n             assertEquals(e.getCause().getMessage(), expectedCause);\n         }\n             verify(mock, atLeastOnce()).twoArgumentMethod(1, 2);\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"IMethods.twoArgumentMethod(1, 2)\"));\n+            assertThat(e, messageContains(\"twoArgumentMethod(1, 2)\"));\n         }\n     }\n \n                 \"\\n\" +\n                 \"Wanted but not invoked:\" +\n                 \"\\n\" +\n-                \"IMethods.twoArgumentMethod(<any>, 100);\";\n+                \"iMethods.twoArgumentMethod(<any>, 100);\";\n             assertEquals(expectedMessage, actualMessage);\n         }\n     }\n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n             inOrder.verify(mockOne, atLeastOnce()).differentMethod();\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"IMethods.differentMethod()\"));\n+            assertThat(e, messageContains(\"differentMethod()\"));\n         }\n     }\n     ", "timestamp": 1207603883, "metainfo": ""}