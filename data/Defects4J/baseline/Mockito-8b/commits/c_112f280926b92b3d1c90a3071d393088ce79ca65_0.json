{"sha": "112f280926b92b3d1c90a3071d393088ce79ca65", "log": "Fixed issue 154 NPE when doing eq(null)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401786", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n      * @return <code>null</code>.\n      */\n     public static <T> T eq(T value) {\n-        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());\n-    }  \n+        return (T) reportMatcher(new Equals(value)).<T>returnFor(value);\n+    }\n \n     /**\n      * Object argument that is reflection-equal to the given value with support for excluding\n      * @return <code>null</code>.\n      */\n     public static <T> T same(T value) {\n-        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());\n+        return (T) reportMatcher(new Same(value)).<T>returnFor(value);\n     }\n \n     /**\n--- a/src/org/mockito/internal/progress/HandyReturnValues.java\n+++ b/src/org/mockito/internal/progress/HandyReturnValues.java\n     public Set returnSet() {\n         return new HashSet();\n     }\n+\n+    public <T> T returnFor(T instance) {\n+        return instance == null ? null : (T) returnFor(instance.getClass());\n+    }\n }\n--- a/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n+++ b/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n     public void shouldReturnNullForEverythingElse() throws Exception {\n         assertNull(h.returnFor(Object.class));\n         assertNull(h.returnFor(String.class));\n+        assertNull(h.returnFor(null));\n+    }\n+\n+    @Test\n+    public void shouldReturnHandyValueForInstances() throws Exception {\n+        assertNull(h.returnFor(new Object()));\n+        assertNull(h.returnFor((Object) null));\n+        \n+        assertNotNull(h.returnFor(10.0));\n+        assertNotNull(h.returnFor(Boolean.FALSE));\n     }\n }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n     \n     @Test\n     public void sameMatcher() {\n-        Object one = new String(\"1243\");\n-        Object two = new String(\"1243\");\n-        Object three = new String(\"1243\");\n+        Object one = \"1243\";\n+        Object two = \"1243\";\n+        Object three = \"1243\";\n \n         assertNotSame(one, two);\n         assertEquals(one, two);\n         assertEquals(\"2\", mock.oneArg(two));\n         assertEquals(null, mock.oneArg(three));\n     }\n+\n+    @Test\n+    public void eqMatcherAndNulls() {\n+        mock.simpleMethod((Object) null);\n+\n+        verify(mock).simpleMethod((Object) eq(null));\n+    }\n+\n+    @Test\n+    public void sameMatcherAndNulls() {\n+        mock.simpleMethod((Object) null);\n+\n+        verify(mock).simpleMethod(same(null));\n+    }\n }", "timestamp": 1259874946, "metainfo": ""}