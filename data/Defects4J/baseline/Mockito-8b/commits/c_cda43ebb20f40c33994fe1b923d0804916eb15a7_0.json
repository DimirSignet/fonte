{"sha": "cda43ebb20f40c33994fe1b923d0804916eb15a7", "log": "In order to make javadocs better  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401610", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n     //TODO: after 1.8 check out Jay Fields' idea on any() matcher\n     \n     /**\n-     * any object of specified class. \n+     * any kind object, not necessary of the given class.\n+     * The class argument is provided only to avoid casting.\n      * <p>\n      * Sometimes looks better than anyObject() - especially when explicit casting is required\n      * <p>\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * <pre>\n      *   verify(mock, times(1)).someMethod(\"some arg\");\n      * </pre>\n-     * \n+     * <p>\n+     * Arguments passed are compared using equals() method.\n+     * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.\n      * <p>\n      * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.\n      * Let's say you've stubbed foo.bar(). \n     public static <T> T verify(T mock) {\n         return MOCKITO_CORE.verify(mock, times(1));\n     }\n-    \n+\n+    /**\n+     * Verifies certain behavior happened at least once / exact number of times / never. E.g:\n+     * <pre>\n+     *   verify(mock, times(5)).someMethod(\"was called five times\");\n+     *\n+     *   verify(mock, atLeast(2)).someMethod(\"was called at least two times\");\n+     *\n+     *   //you can use flexible argument matchers, e.g:\n+     *   verify(mock, atLeastOnce()).someMethod(<b>anyString()</b>);\n+     * </pre>\n+     *\n+     * <b>times(1) is the default</b> and can be omitted\n+     * <p>\n+     * Arguments passed are compared using equals() method.\n+     * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.\n+     * <p>\n+     *\n+     * @param mock to be verified\n+     * @param mode times(x), atLeastOnce() or never()\n+     *\n+     * @return mock object itself\n+     */\n+    public static <T> T verify(T mock, VerificationMode mode) {\n+        return MOCKITO_CORE.verify(mock, mode);\n+    }\n+\n     /**\n      * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n-     * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n+     * Normally, you don't need to reset your mocks, just create new mocks for each test method.\n      * <p>\n      * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n      * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n-     * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \n+     * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\".\n      * There are several threads about it on mockito mailing list.\n      * <p>\n      * The only reason we added reset() method is to\n      * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n      * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n      * <p>\n-     * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much). \n+     * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much).\n      * <pre>\n      *   List mock = mock(List.class);\n      *   when(mock.size()).thenReturn(10);\n      *   mock.add(1);\n-     *   \n+     *\n      *   reset(mock);\n      *   //at this point the mock forgot any interactions & stubbing\n      * </pre>\n-     * \n+     *\n      * @param <T>\n      * @param mocks\n      */\n     public static <T> void reset(T ... mocks) {\n         MOCKITO_CORE.reset(mocks);\n-    }\n- \n-    /**\n-     * Verifies certain behavior happened at least once / exact number of times / never. E.g:\n-     * <pre>\n-     *   verify(mock, times(5)).someMethod(\"was called five times\");\n-     *   \n-     *   verify(mock, atLeast(2)).someMethod(\"was called at least two times\");\n-     *   \n-     *   //you can use flexible argument matchers, e.g:\n-     *   verify(mock, atLeastOnce()).someMethod(<b>anyString()</b>);\n-     * </pre>\n-     * \n-     * <b>times(1) is the default</b> and can be omitted\n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param mock to be verified\n-     * @param mode times(x), atLeastOnce() or never()\n-     * \n-     * @return mock object itself\n-     */\n-    public static <T> T verify(T mock, VerificationMode mode) {\n-        return MOCKITO_CORE.verify(mock, mode);\n     }\n \n     /**", "timestamp": 1252784529, "metainfo": ""}