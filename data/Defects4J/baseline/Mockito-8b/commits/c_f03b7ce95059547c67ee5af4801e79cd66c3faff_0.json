{"sha": "f03b7ce95059547c67ee5af4801e79cd66c3faff", "log": "In order to make mocks serializable started work on this feature. Refactoring.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401602", "commit": "\n--- a/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n+++ b/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n package org.mockito.internal.creation.cglib;\n \n import java.lang.reflect.Field;\n+import java.io.Serializable;\n \n import org.mockito.cglib.proxy.MethodProxy;\n \n-public class CGLIBHacker {\n+public class CGLIBHacker implements Serializable {\n \n     public void setMockitoNamingPolicy(MethodProxy methodProxy) {\n         try {\n--- a/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n package org.mockito.internal.util;\n \n import java.lang.reflect.Method;\n+import java.io.Serializable;\n \n-public class ObjectMethodsGuru {\n+public class ObjectMethodsGuru implements Serializable {\n \n     public static boolean isToString(Method method) {\n         return method.getReturnType() == String.class && method.getParameterTypes().length == 0\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n package org.mockito.internal.creation;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import static org.mockito.Matchers.any;\n import org.mockito.Mockito;\n         filter.cglibHacker = Mockito.mock(CGLIBHacker.class);        \n     }\n \n-    @Ignore\n     @Test\n     public void shouldBeSerializable() throws Exception {\n-        new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(filter);\n+        new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(new MethodInterceptorFilter(null));\n     }\n \n     @Test\n-    public void shouldProvideOwnImplementationOfhashCode() throws Throwable {\n+    public void shouldProvideOwnImplementationOfHashCode() throws Throwable {\n         //when\n         Object ret = filter.intercept(new MethodsImpl(), MethodsImpl.class.getMethod(\"hashCode\"), new Object[0], null);\n \n     }\n \n     @Test\n-    public void shouldKnowWhenMockIsEqualAndNotDelegateToHandler() throws Throwable {\n+    public void shouldProvideOwnImplementationOfEquals() throws Throwable {\n         //when\n         MethodsImpl proxy = new MethodsImpl();\n         Object ret = filter.intercept(proxy, MethodsImpl.class.getMethod(\"equals\", Object.class), new Object[] {proxy}, null);\n         assertTrue((Boolean) ret);\n         Mockito.verify(mockHanlder, never()).handle(any(Invocation.class));\n     }\n-\n-    @Test\n-    public void shouldKnowWhenMockIsNotEqualAndNotDelegateToHandler() throws Throwable {\n-        //when\n-        MethodsImpl proxy = new MethodsImpl();\n-        Object ret = filter.intercept(proxy, MethodsImpl.class.getMethod(\"equals\", Object.class), new Object[] {\"some other object\"}, null);\n-\n-        //then\n-        assertFalse((Boolean) ret);\n-        Mockito.verify(mockHanlder, never()).handle(any(Invocation.class));\n-    }\n }", "timestamp": 1251142520, "metainfo": ""}