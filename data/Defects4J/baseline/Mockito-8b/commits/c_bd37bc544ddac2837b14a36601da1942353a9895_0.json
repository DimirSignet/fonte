{"sha": "bd37bc544ddac2837b14a36601da1942353a9895", "log": "Issue 306: Report improper usage of ArgumentMatcher", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n package org.mockito.exceptions;\n \n+import org.hamcrest.Matcher;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.*;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.exceptions.util.ScenarioPrinter;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.StringJoiner;\n import org.mockito.listeners.InvocationListener;\n \n import java.lang.reflect.Field;\n+import java.util.ArrayList;\n import java.util.List;\n \n import static org.mockito.exceptions.Pluralizer.pluralize;\n                 ));\n     }\n \n-    public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount) {\n+    public void invalidUseOfMatchers(int expectedMatchersCount, List<LocalizedMatcher> recordedMatchers) {\n         throw new InvalidUseOfMatchersException(join(\n                 \"Invalid use of argument matchers!\",\n-                expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n+                expectedMatchersCount + \" matchers expected, \" + recordedMatchers.size()+ \" recorded:\" +\n+                createLocalizedMatchersDescription(recordedMatchers),\n                 \"This exception may occur if matchers are combined with raw values:\",\n                 \"    //incorrect:\",\n                 \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                 \"\",\n                 \"For more info see javadoc for Matchers class.\"\n         ));\n+    }\n+\n+    private String createLocalizedMatchersDescription(List<LocalizedMatcher> matchers) {\n+        List<String> description = new ArrayList<String>();\n+        for (LocalizedMatcher matcher : matchers)\n+\t\t\tdescription.add(matcher.getLocation().toString());\n+        return join(description.toArray());\n     }\n \n     public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.progress.ArgumentMatcherStorage;\n \n @SuppressWarnings(\"unchecked\")\n         return invocationWithMatchers;\n     }\n \n-    private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\n+    private void validateMatchers(Invocation invocation, List<? extends Matcher> matchers) {\n         if (!matchers.isEmpty()) {\n             int recordedMatchersSize = matchers.size();\n             int expectedMatchersSize = invocation.getArgumentsCount();\n             if (expectedMatchersSize != recordedMatchersSize) {\n-                new Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);\n+                new Reporter().invalidUseOfMatchers(expectedMatchersSize, (List<LocalizedMatcher>)matchers);\n             }\n         }\n     }\n--- a/test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java\n+++ b/test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.misuse;\n \n import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.validateMockitoUsage;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.Observer;\n \n import org.junit.After;\n import org.junit.Test;\n     private void misplacedArgumentMatcher() {\n         anyObject();\n     }\n+    \n+    private void misplacedIntArgumentMatcher() {\n+        anyInt();\n+    }\n+    \n+    private void misplacedBooleanArgumentMatcher() {\n+        anyBoolean();\n+    }\n \n     @Test\n     public void shouldFailFastWhenArgumentMatchersAbused() {\n     }\n     \n     @Test\n+    public void shouldReportArgumentLocationsWhenArgumentMatchersMisused() {\n+        try {\n+        \tObserver observer = mock(Observer.class);\n+        \t\n+        \tmisplacedIntArgumentMatcher();\n+        \tmisplacedArgumentMatcher();\n+        \tmisplacedBooleanArgumentMatcher();\n+        \t\n+        \tobserver.update(null, null);\n+        \t\n+        \tvalidateMockitoUsage();\n+        \tfail();\n+        } catch (InvalidUseOfMatchersException e) {\n+            assertContains(\"DetectingMisusedMatchersTest.misplacedIntArgumentMatcher\", e.getMessage());\n+            assertContains(\"DetectingMisusedMatchersTest.misplacedArgumentMatcher\", e.getMessage());\n+            assertContains(\"DetectingMisusedMatchersTest.misplacedBooleanArgumentMatcher\", e.getMessage());\n+            e.printStackTrace();\n+        }\n+    }\n+   \n+    \n+    @Test\n     public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {\n         verify(withFinal).finalMethod(anyObject());\n         try {", "timestamp": 1331209954, "metainfo": ""}