{"sha": "af6eb807889f85b80776320c7cafb3eda81b9158", "log": "Pushed complexity to separate classes", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/junit/FriendlyExceptionMaker.java\n+package org.mockito.internal.junit;\n+\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n+\n+/**\n+ * If JUnit is used, we can use an exception that extends from ComparisonFailure\n+ * and hence provide a better IDE support as the comparison result is comparable\n+ */\n+class FriendlyExceptionMaker {\n+\n+    private final JUnitDetecter detecter;\n+\n+    FriendlyExceptionMaker(JUnitDetecter detecter) {\n+        this.detecter = detecter;\n+    }\n+\n+    public AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n+        if (!detecter.hasJUnit()) {\n+            return new ArgumentsAreDifferent(message);\n+        }\n+\n+        try {\n+            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n+            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n+            return throwable;\n+        } catch (Throwable t) {\n+//            throw the default exception in case of problems\n+            return new ArgumentsAreDifferent(message);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/junit/JUnitDetecter.java\n+package org.mockito.internal.junit;\n+\n+class JUnitDetecter {\n+\n+    private boolean hasJUnit;\n+\n+    JUnitDetecter() {\n+        try {\n+            Class.forName(\"junit.framework.ComparisonFailure\");\n+            hasJUnit = true;\n+        } catch (Throwable t) {\n+            hasJUnit = false;\n+        }\n+    }\n+\n+    public boolean hasJUnit() {\n+        return hasJUnit;\n+    }\n+}\n--- a/src/org/mockito/internal/junit/JUnitTool.java\n+++ b/src/org/mockito/internal/junit/JUnitTool.java\n  */\n package org.mockito.internal.junit;\n \n-import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n-\n public class JUnitTool {\n \n-    private static boolean hasJUnit;\n+    private static JUnitDetecter detecter = new JUnitDetecter();\n \n-    static {\n-        try {\n-            Class.forName(\"junit.framework.ComparisonFailure\");\n-            hasJUnit = true;\n-        } catch (Throwable t) {\n-            hasJUnit = false;\n-        }\n-    }\n-    \n     public static boolean hasJUnit() {\n-        return hasJUnit;\n+        return detecter.hasJUnit();\n     }\n \n     public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n-        if (!hasJUnit) {\n-            return new ArgumentsAreDifferent(message);\n-        }\n-\n-        try {\n-            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n-            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n-            return throwable;\n-        } catch (Throwable t) {\n-//            throw the default exception in case of problems\n-            return new ArgumentsAreDifferent(message);\n-        }\n+        return new FriendlyExceptionMaker(detecter).createArgumentsAreDifferentException(message, wanted, actual);\n     }\n }", "timestamp": 1418685931, "metainfo": ""}