{"sha": "ab03b6366fc68287f6756c4e6d0bb140ba5450d6", "log": "Added @since tags and @Incubating  Issue #92", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n      * </code></pre>\n      *\n      * @return settings instance so that you can fluently specify other settings\n-     */\n+     * @since 1.10.12\n+     */\n+    @Incubating\n     MockSettings useConstructor();\n \n     /**\n      * </code></pre>\n      *\n      * @return settings instance so that you can fluently specify other settings\n-     */\n+     * @since 1.10.12\n+     */\n+    @Incubating\n     MockSettings outerInstance(Object outerClassInstance);\n }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @param classToSpy the class to spy\n      * @param <T> type of the spy\n      * @return a spy of the provided class\n-     */\n+     * @since 1.10.12\n+     */\n+    @Incubating\n     public static <T> T spy(Class<T> classToSpy) {\n         return MOCKITO_CORE.mock(classToSpy, withSettings()\n                 .useConstructor()\n--- a/src/org/mockito/mock/MockCreationSettings.java\n+++ b/src/org/mockito/mock/MockCreationSettings.java\n \n     /**\n      * Informs whether the mock instance should be created via constructor\n+     *\n+     * @since 1.10.12\n      */\n+    @Incubating\n     boolean isUsingConstructor();\n \n     /**\n      * Used when mocking non-static inner classes in conjunction with {@link #isUsingConstructor()}\n      *\n      * @return the outer class instance used for creation of the mock object via the constructor.\n+     * @since 1.10.12\n      */\n     @Incubating\n     Object getOuterClassInstance();", "timestamp": 1416181621, "metainfo": ""}