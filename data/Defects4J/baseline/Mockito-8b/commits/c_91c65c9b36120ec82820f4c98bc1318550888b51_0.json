{"sha": "91c65c9b36120ec82820f4c98bc1318550888b51", "log": "Added some synchronization code to make Mockito  behave slightly better when stubbing occurs in multiple threads on shared mock. This is still not supported! I only made the exceptions slightly less confusing (at the cost of speed :( )  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%402056", "commit": "\n--- a/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n+++ b/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n \n         AnswersValidator answersValidator = new AnswersValidator();\n         answersValidator.validate(answer, invocation);\n \n-        if (isConsecutive) {\n-            stubbed.getFirst().addAnswer(answer);\n-        } else {\n-            stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n+        synchronized (stubbed) {\n+            if (isConsecutive) {\n+                stubbed.getFirst().addAnswer(answer);\n+            } else {\n+                stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n+            }\n         }\n     }\n \n     }\n \n     public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\n-        for (StubbedInvocationMatcher s : stubbed) {\n-            if (s.matches(invocation)) {\n-                s.markStubUsed(invocation);\n-                invocation.markStubbed(new StubInfo(s));\n-                return s;\n+        synchronized (stubbed) {\n+            for (StubbedInvocationMatcher s : stubbed) {\n+                if (s.matches(invocation)) {\n+                    s.markStubUsed(invocation);\n+                    invocation.markStubbed(new StubInfo(s));\n+                    return s;\n+                }\n             }\n         }\n \n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/InvocationContainerImplTest.java\n+package org.mockito.internal.stubbing;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.stubbing.answers.Returns;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Author: Szczepan Faber\n+ */\n+public class InvocationContainerImplTest {\n+\n+    InvocationContainerImpl container = new InvocationContainerImpl(new ThreadSafeMockingProgress());\n+    Invocation invocation = new InvocationBuilder().toInvocation();\n+    LinkedList<Throwable> exceptions = new LinkedList<Throwable>();\n+\n+    @Test\n+    //works 50% of the time\n+    public void shouldBeThreadSafe() throws Throwable {\n+        //given\n+        Thread[] t = new Thread[200];\n+        for (int i = 0; i < t.length; i++ ) {\n+            t[i] = new Thread() {\n+                public void run() {\n+                    try {\n+                        Thread.sleep(10);\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                    container.setInvocationForPotentialStubbing(new InvocationMatcher(invocation));\n+                    container.addAnswer(new Returns(\"foo\"));\n+                    container.findAnswerFor(invocation);\n+                }\n+            };\n+            t[i].setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n+                public void uncaughtException(Thread t, Throwable e) {\n+                    exceptions.add(e);\n+                }\n+            });\n+            t[i].start();\n+        }\n+\n+        //when\n+        for (int i = 0; i < t.length; i++ ) {\n+            t[i].join();\n+        }\n+\n+        //then\n+        if (exceptions.size() != 0) {\n+            throw exceptions.getFirst();\n+        }\n+    }\n+}", "timestamp": 1282078267, "metainfo": ""}