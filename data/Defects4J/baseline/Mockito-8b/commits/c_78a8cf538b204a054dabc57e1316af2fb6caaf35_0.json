{"sha": "78a8cf538b204a054dabc57e1316af2fb6caaf35", "log": "use a constant for the mockito marker in serialization stream", "commit": "\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n  *\n  * <p><strong>Only one instance per mock! See {@link MethodInterceptorFilter}</strong></p>\n  *\n- * TODO Use a constant for the class annotation marker\n  * TODO Use proper MockitoException\n  * TODO offer a way to disable completely this behavior, or maybe enable this behavior only with a specific setting\n  * TODO check the class is mockable in the deserialization side\n @Incubating\n public class AcrossJVMSerializationFeature implements Serializable {\n     private static final long serialVersionUID = 7411152578314420778L;\n+    private static final String MOCKITO_PROXY_MARKER = \"MockitoProxyMarker\";\n     private boolean instanceLocalCurrentlySerializingFlag = false;\n     private Lock mutex = new ReentrantLock();\n \n          * @throws ClassNotFoundException\n          */\n         private boolean notMarkedAsAMockitoMock(Object marker) throws IOException, ClassNotFoundException {\n-            return !\"MockitoProxyMarker\".equals(marker);\n+            return !MOCKITO_PROXY_MARKER.equals(marker);\n         }\n     }\n \n      *\n      */\n     private static class MockitoMockObjectOutputStream extends ObjectOutputStream {\n-\n+        private static final String NOTHING = \"\";\n         private MockUtil mockUtil = new MockUtil();\n \n         public MockitoMockObjectOutputStream(ByteArrayOutputStream out) throws IOException {\n          */\n         private String mockitoProxyClassMarker(Class<?> cl) {\n             if (mockUtil.isMock(cl)) {\n-                return \"MockitoProxyMarker\";\n+                return MOCKITO_PROXY_MARKER;\n             } else {\n-                return \"\";\n+                return NOTHING;\n             }\n         }\n     }", "timestamp": 1355623929, "metainfo": ""}