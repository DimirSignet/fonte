{"sha": "b990cce90a3c4eefa306ff83d0b9a955dac681b4", "log": "minor refactorings to increase readability  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40189", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsChunker.java\n+++ b/src/org/mockito/internal/invocation/InvocationsChunker.java\n         this.finder = invocationsFinder;\n     }\n \n-    //TODO too big\n     public List<Invocation> getFirstUnverifiedInvocationChunk(List<Object> mocks) {\n-        Set<Invocation> allInvocationsInOrder = new TreeSet<Invocation>(\n-                new Comparator<Invocation>() {\n-                    public int compare(Invocation o1, Invocation o2) {\n-                        int comparison = o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n-                        assert comparison != 0;\n-                        return comparison;\n-                    }});\n+        Set<Invocation> allInvocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n         \n         List<Invocation> allInvocations = finder.allInvocationsInOrder(mocks);\n         allInvocationsInOrder.addAll(allInvocations);\n         \n+        return firstUnverifiedChunk(allInvocationsInOrder);\n+    }\n+\n+    private List<Invocation> firstUnverifiedChunk(Set<Invocation> allInvocationsInOrder) {\n         LinkedList<Invocation> chunk = new LinkedList<Invocation>();\n         for (Invocation i : allInvocationsInOrder) {\n             if (i.isVerifiedStrictly()) {\n \n         return chunk;\n     }\n+    \n+    private final class SequenceNumberComparator implements Comparator<Invocation> {\n+        public int compare(Invocation o1, Invocation o2) {\n+            int comparison = o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n+            assert comparison != 0;\n+            return comparison;\n+        }\n+    }\n }\n--- a/test/org/mockito/internal/invocation/InvocationsChunkerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsChunkerTest.java\n public class InvocationsChunkerTest extends RequiresValidState {\n \n     private InvocationsChunker chunker;\n-    private Invocation simpleMethodInvocation;\n-    private Invocation simpleMethodInvocationTwo;\n-    private Invocation differentMethodInvocation;\n-    private Invocation simpleMethodInvocationThree;\n+    private Invocation invocationOneChunkOne;\n+    private Invocation invocationTwoChunkOne;\n+    private Invocation differentInvocationChunkTwo;\n+    private Invocation invocationThreeChunkThree;\n \n     @Before\n     public void setup() throws Exception {\n-        simpleMethodInvocation = new InvocationBuilder().simpleMethod().seq(1).toInvocation();\n-        simpleMethodInvocationTwo = new InvocationBuilder().simpleMethod().seq(2).toInvocation();\n-        differentMethodInvocation = new InvocationBuilder().differentMethod().seq(3).toInvocation();\n-        simpleMethodInvocationThree = new InvocationBuilder().simpleMethod().seq(4).toInvocation();\n+        invocationOneChunkOne = new InvocationBuilder().simpleMethod().seq(1).toInvocation();\n+        invocationTwoChunkOne = new InvocationBuilder().simpleMethod().seq(2).toInvocation();\n+        differentInvocationChunkTwo = new InvocationBuilder().differentMethod().seq(3).toInvocation();\n+        invocationThreeChunkThree = new InvocationBuilder().simpleMethod().seq(4).toInvocation();\n         \n         chunker = new InvocationsChunker(new InvocationsFinder() {\n             public List<Invocation> allInvocationsInOrder(List<Object> mocks) {\n-                return Arrays.asList(simpleMethodInvocation, simpleMethodInvocationTwo, differentMethodInvocation, simpleMethodInvocationThree);\n+                return Arrays.asList(invocationOneChunkOne, invocationTwoChunkOne, differentInvocationChunkTwo, invocationThreeChunkThree);\n             }});\n     }\n \n     @Test\n     public void shouldGetFirstUnverifiedInvocationChunk() throws Exception {\n         List<Invocation> chunk = chunker.getFirstUnverifiedInvocationChunk(null);\n-        assertThat(chunk, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n+        assertThat(chunk, collectionHasExactlyInOrder(invocationOneChunkOne, invocationTwoChunkOne));\n     }\n     \n     @Test\n     public void shouldGetSecondUnverifiedInvocationChunk() throws Exception {\n-        simpleMethodInvocation.markVerifiedStrictly();\n-        simpleMethodInvocationTwo.markVerifiedStrictly();\n+        invocationOneChunkOne.markVerifiedStrictly();\n+        invocationTwoChunkOne.markVerifiedStrictly();\n         \n         List<Invocation> chunk = chunker.getFirstUnverifiedInvocationChunk(null);\n         \n-        assertThat(chunk, collectionHasExactlyInOrder(differentMethodInvocation));\n+        assertThat(chunk, collectionHasExactlyInOrder(differentInvocationChunkTwo));\n     }\n     \n     @Test\n     public void shouldGetThirdUnverifiedInvocationChunk() throws Exception {\n-        simpleMethodInvocation.markVerifiedStrictly();\n-        simpleMethodInvocationTwo.markVerifiedStrictly();\n-        differentMethodInvocation.markVerifiedStrictly();\n+        invocationOneChunkOne.markVerifiedStrictly();\n+        invocationTwoChunkOne.markVerifiedStrictly();\n+        differentInvocationChunkTwo.markVerifiedStrictly();\n         \n         List<Invocation> chunk = chunker.getFirstUnverifiedInvocationChunk(null);\n         \n-        assertThat(chunk, collectionHasExactlyInOrder(simpleMethodInvocationThree));\n+        assertThat(chunk, collectionHasExactlyInOrder(invocationThreeChunkThree));\n     }\n     \n     @Test\n     public void shouldNotGetInvocationsChunk() throws Exception {\n-        simpleMethodInvocation.markVerifiedStrictly();\n-        simpleMethodInvocationTwo.markVerifiedStrictly();\n-        differentMethodInvocation.markVerifiedStrictly();\n-        simpleMethodInvocationThree.markVerifiedStrictly();\n+        invocationOneChunkOne.markVerifiedStrictly();\n+        invocationTwoChunkOne.markVerifiedStrictly();\n+        differentInvocationChunkTwo.markVerifiedStrictly();\n+        invocationThreeChunkThree.markVerifiedStrictly();\n         \n         List<Invocation> chunk = chunker.getFirstUnverifiedInvocationChunk(null);\n         ", "timestamp": 1197651580, "metainfo": ""}