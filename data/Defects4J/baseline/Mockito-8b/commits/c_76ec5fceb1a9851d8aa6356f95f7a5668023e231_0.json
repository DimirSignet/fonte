{"sha": "76ec5fceb1a9851d8aa6356f95f7a5668023e231", "log": "Break ReturnsSmartNulls' dependency on cglib.  --HG-- extra : transplant_source : %88O%A75%E6V%A8%17%B6%A2yo%EE%88%19Z%BB_%CD%11", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.defaultanswers;\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.IMockMaker;\n+import org.mockito.internal.MockHandler;\n+import org.mockito.internal.configuration.ClassPathLoader;\n+import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n public class ReturnsSmartNulls implements Answer<Object>, Serializable {\n \n     private static final long serialVersionUID = 7618312406617949441L;\n+    private static IMockMaker mockMaker = ClassPathLoader.getMockMaker();\n \n-    private final class ThrowingInterceptor implements MethodInterceptor {\n+    private final class ThrowingInterceptor extends MockHandler<Object> {\n         private final InvocationOnMock invocation;\n         private final Location location = new Location();\n \n         private ThrowingInterceptor(InvocationOnMock invocation) {\n+            super(new MockSettingsImpl());\n             this.invocation = invocation;\n         }\n \n-        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n-            if (new ObjectMethodsGuru().isToString(method)) {\n+        public Object handle(Invocation nullDereference) throws Throwable {\n+            if (new ObjectMethodsGuru().isToString(nullDereference.getMethod())) {\n                 return \"SmartNull returned by this unstubbed method call on a mock:\\n\" +\n                         invocation.toString();\n             }\n             return defaultReturnValue;\n         }\n         Class<?> type = invocation.getMethod().getReturnType();\n-        if (ClassImposterizer.INSTANCE.canImposterise(type)) {\n-            return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type);\n+        if (!type.isPrimitive() && !Modifier.isFinal(type.getModifiers())) {\n+            ThrowingInterceptor handler = new ThrowingInterceptor(invocation);\n+            return mockMaker.createMock(type, new Class[0], handler, handler.getMockSettings());\n         }\n         return null;\n     }", "timestamp": 1326748015, "metainfo": ""}