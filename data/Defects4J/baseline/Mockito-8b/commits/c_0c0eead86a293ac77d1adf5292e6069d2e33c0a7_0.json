{"sha": "0c0eead86a293ac77d1adf5292e6069d2e33c0a7", "log": "simplified the test  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40107", "commit": "\n--- a/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n     }\n \n     private interface Super {\n-        public void print(Object message);\n+        public void say(Object message);\n     }\n \n     private interface Sub extends Super {\n-        public void print(String message);\n+        public void say(String message);\n     }\n \n-    private void print(Object message) {\n-        mock.print(message);\n+    private void say(Object message) {\n+        mock.say(message);\n     }\n \n     @Test\n     public void shouldUseArgumentTypeWhenOverloadingPuzzleDetected() throws Exception {\n         Sub sub = mock(Sub.class);\n         setMockWithDowncast(sub);\n-        print(\"Hello\");\n+        say(\"Hello\");\n         try {\n-            verify(sub).print(\"Hello\");\n+            verify(sub).say(\"Hello\");\n             fail();\n         } catch (VerificationError error) {\n             String expected = \n     public void shouldUseArgumentTypeWhenOverloadingPuzzleDetectedByStrictly() throws Exception {\n         Sub sub = mock(Sub.class);\n         setMockWithDowncast(sub);\n-        print(\"Hello\");\n+        say(\"Hello\");\n         Strictly strictly = createStrictOrderVerifier(mock);\n         try {\n-            strictly.verify(sub).print(\"Hello\");\n+            strictly.verify(sub).say(\"Hello\");\n             fail();\n         } catch (VerificationError error) {\n             String expected = ", "timestamp": 1196442227, "metainfo": ""}