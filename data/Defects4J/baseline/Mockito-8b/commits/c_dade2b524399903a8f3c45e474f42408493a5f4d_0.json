{"sha": "dade2b524399903a8f3c45e474f42408493a5f4d", "log": "error messages now mention problems with mocking final methods  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401036", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"Examples of correct stubbing:\",\n                 \"    when(mock.isOk()).thenReturn(true);\",\n                 \"    when(mock.isOk()).thenThrow(exception);\",\n-                \"    doThrow(exception).when(mock).someVoidMethod();\"\n+                \"    doThrow(exception).when(mock).someVoidMethod();\",\n+                \"Also make sure the method is not final - you cannot stub final methods.\"\n         ));\n     }\n \n         throw new MissingMethodInvocationException(join(\n                 \"when() requires an argument which has to be a method call on a mock.\",\n                 \"For example:\",\n-                \"    when(mock.getArticles()).thenReturn(articles);\"\n+                \"    when(mock.getArticles()).thenReturn(articles);\",\n+                \"Also make sure the method is not final - you cannot stub final methods.\"\n         ));\n     }\n \n         throw new UnfinishedVerificationException(join(\n                 \"Previous verify(mock) doesn't have a method call!\",\n                 \"Example of correct verification:\",\n-                \"    verify(mock).doSomething()\"\n+                \"    verify(mock).doSomething()\",\n+                \"Also make sure the method is not final - you cannot verify final methods.\"\n         ));\n     }\n     \n--- a/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n+++ b/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n \n import static org.mockito.Mockito.*;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.exceptions.base.MockitoException;\n public class DescriptiveMessagesOnMisuseTest extends TestBase {\n     \n     @Mock private IMethods mock;\n+    \n+    class Foo {\n+        public final String finalMethod() {\n+            return null;\n+        }\n+    }\n \n     @SuppressWarnings(\"all\")\n-    @Ignore(\"just for tuning up the error messages\")\n     @Test\n     public void tryDescriptiveMessagesOnMisuse() {\n-        doReturn(\"foo\");\n-        doReturn(\"bar\");\n+        Foo foo = mock(Foo.class);\n+        \n+//        when(foo.finalMethod()).thenReturn(\"foo\");\n+//        doReturn(\"foo\").when(foo).finalMethod();\n+//        verify(foo).finalMethod();\n+        \n+//        doReturn(\"foo\");\n+//        doReturn(\"bar\");\n         \n //        verifyNoMoreInteractions();\n //        verifyNoMoreInteractions(null);", "timestamp": 1225057048, "metainfo": ""}