{"sha": "11dff2268547f21539604f59c4ca05b56b7311e8", "log": "-killed/refactored some tests -started purging EasyMock  --HG-- rename : src/org/easymock/internal/ObjectMethodsFilter.java => src/org/easymock/internal/MockitoObjectMethodsFilter.java rename : test/org/easymock/CompareToTest.java => test/org/easymock/ComparableMatchersTest.java rename : test/org/easymock/UsingMatchersTest.java => test/org/easymock/MatchersTest.java rename : test/org/easymock/ConstraintsToStringTest.java => test/org/easymock/MatchersToStringTest.java rename : test/org/easymock/NameTest.java => test/org/easymock/NiceMessagesWhenVerificationFailsTest.java rename : test/org/mockito/util/Matchers.java => test/org/mockito/util/JUnitMatchers.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4018", "commit": "\n--- a/src/org/easymock/EasyMock.java\n+++ b/src/org/easymock/EasyMock.java\n import org.easymock.internal.LastControl;\n import org.easymock.internal.MockInvocationHandler;\n import org.easymock.internal.MocksControl;\n-import org.easymock.internal.ObjectMethodsFilter;\n+import org.easymock.internal.MockitoObjectMethodsFilter;\n import org.easymock.internal.matchers.Any;\n-import org.easymock.internal.matchers.ArrayEquals;\n import org.easymock.internal.matchers.Compare;\n-import org.easymock.internal.matchers.CompareEqual;\n import org.easymock.internal.matchers.Contains;\n-import org.easymock.internal.matchers.EndsWith;\n import org.easymock.internal.matchers.Equals;\n import org.easymock.internal.matchers.EqualsWithDelta;\n-import org.easymock.internal.matchers.Find;\n import org.easymock.internal.matchers.GreaterOrEqual;\n import org.easymock.internal.matchers.GreaterThan;\n import org.easymock.internal.matchers.InstanceOf;\n import org.easymock.internal.matchers.Matches;\n import org.easymock.internal.matchers.NotNull;\n import org.easymock.internal.matchers.Null;\n-import org.easymock.internal.matchers.Same;\n-import org.easymock.internal.matchers.StartsWith;\n \n public class EasyMock {\n \n      * @return <code>false</code>.\n      */\n     public static boolean anyBoolean() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return false;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static byte anyByte() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static char anyChar() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static int anyInt() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static long anyLong() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static float anyFloat() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static double anyDouble() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static short anyShort() {\n-        reportMatcher(Any.ANY);\n+        LastArguments.reportMatcher(Any.ANY);\n         return 0;\n     }\n \n      * @return <code>null</code>.\n      */\n     public static Object anyObject() {\n-        reportMatcher(Any.ANY);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a comparable argument greater than or equal the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n-        reportMatcher(new GreaterOrEqual<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects a byte argument greater than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte geq(byte value) {\n-        reportMatcher(new GreaterOrEqual<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument greater than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double geq(double value) {\n-        reportMatcher(new GreaterOrEqual<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument greater than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float geq(float value) {\n-        reportMatcher(new GreaterOrEqual<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument greater than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int geq(int value) {\n-        reportMatcher(new GreaterOrEqual<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument greater than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long geq(long value) {\n-        reportMatcher(new GreaterOrEqual<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument greater than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short geq(short value) {\n-        reportMatcher(new GreaterOrEqual<Short>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a comparable argument less than or equal the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n-        reportMatcher(new LessOrEqual<T>(value));\n-        return null;\n-    }\n-     \n-    /**\n-     * Expects a byte argument less than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte leq(byte value) {\n-        reportMatcher(new LessOrEqual<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument less than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double leq(double value) {\n-        reportMatcher(new LessOrEqual<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument less than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float leq(float value) {\n-        reportMatcher(new LessOrEqual<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument less than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int leq(int value) {\n-        reportMatcher(new LessOrEqual<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument less than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long leq(long value) {\n-        reportMatcher(new LessOrEqual<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument less than or equal to the given value. For\n-     * details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short leq(short value) {\n-        reportMatcher(new LessOrEqual<Short>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a comparable argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n-        reportMatcher(new GreaterThan<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects a byte argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte gt(byte value) {\n-        reportMatcher(new GreaterThan<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double gt(double value) {\n-        reportMatcher(new GreaterThan<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float gt(float value) {\n-        reportMatcher(new GreaterThan<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int gt(int value) {\n-        reportMatcher(new GreaterThan<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long gt(long value) {\n-        reportMatcher(new GreaterThan<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument greater than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short gt(short value) {\n-        reportMatcher(new GreaterThan<Short>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a comparable argument less than the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n-        reportMatcher(new LessThan<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects a byte argument less than the given value. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte lt(byte value) {\n-        reportMatcher(new LessThan<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument less than the given value. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double lt(double value) {\n-        reportMatcher(new LessThan<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument less than the given value. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float lt(float value) {\n-        reportMatcher(new LessThan<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument less than the given value. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int lt(int value) {\n-        reportMatcher(new LessThan<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument less than the given value. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long lt(long value) {\n-        reportMatcher(new LessThan<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument less than the given value. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short lt(short value) {\n-        reportMatcher(new LessThan<Short>(value));\n-        return 0;\n+        LastArguments.reportMatcher(Any.ANY);\n+        return null;\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T isA(Class<T> clazz) {\n-        reportMatcher(new InstanceOf(clazz));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that contains the given substring. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param substring\n-     *            the substring.\n-     * @return <code>null</code>.\n-     */\n-    public static String contains(String substring) {\n-        reportMatcher(new Contains(substring));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>false</code>.\n-     */\n-    public static boolean and(boolean first, boolean second) {\n-        LastArguments.reportAnd(2);\n+        LastArguments.reportMatcher(new InstanceOf(clazz));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static boolean eq(boolean value) {\n+        LastArguments.reportMatcher(new Equals(value));\n         return false;\n     }\n \n     /**\n-     * Expects a byte that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte and(byte first, byte second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char and(char first, char second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double and(double first, double second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float and(float first, float second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int and(int first, int second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long and(long first, long second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short and(short first, short second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an Object that matches both given expectations.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T and(T first, T second) {\n-        LastArguments.reportAnd(2);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>false</code>.\n-     */\n-    public static boolean or(boolean first, boolean second) {\n-        LastArguments.reportOr(2);\n-        return false;\n-    }\n-\n-    /**\n-     * Expects a byte that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte or(byte first, byte second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char or(char first, char second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double or(double first, double second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float or(float first, float second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int or(int first, int second) {\n-        LastArguments.reportOr(2);\n-        return first;\n-    }\n-\n-    /**\n-     * Expects a long that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long or(long first, long second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short or(short first, short second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an Object that matches one of the given expectations.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T or(T first, T second) {\n-        LastArguments.reportOr(2);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>false</code>.\n-     */\n-    public static boolean not(boolean first) {\n-        LastArguments.reportNot();\n-        return false;\n-    }\n-\n-    /**\n-     * Expects a byte that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte not(byte first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char not(char first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double not(double first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float not(float first) {\n-        LastArguments.reportNot();\n-        return first;\n-    }\n-\n-    /**\n-     * Expects an int that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int not(int first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long not(long first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short not(short first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an Object that does not match the given expectation.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T not(T first) {\n-        LastArguments.reportNot();\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean that is equal to the given value.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static boolean eq(boolean value) {\n-        reportMatcher(new Equals(value));\n-        return false;\n-    }\n-\n-    /**\n      * Expects a byte that is equal to the given value.\n      * \n      * @param value\n      * @return <code>0</code>.\n      */\n     public static byte eq(byte value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static char eq(char value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static double eq(double value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static float eq(float value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static int eq(int value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static long eq(long value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static short eq(short value) {\n-        reportMatcher(new Equals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return 0;\n     }\n \n      * @return <code>null</code>.\n      */\n     public static <T> T eq(T value) {\n-        reportMatcher(new Equals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static boolean[] aryEq(boolean[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a byte array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static byte[] aryEq(byte[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a char array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static char[] aryEq(char[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a double array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static double[] aryEq(double[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a float array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static float[] aryEq(float[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an int array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static int[] aryEq(int[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a long array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static long[] aryEq(long[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a short array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static short[] aryEq(short[] value) {\n-        reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an Object array that is equal to the given array, i.e. it has to\n-     * have the same type, length, and each element has to be equal.\n-     * \n-     * @param <T>\n-     *            the type of the array, it is passed through to prevent casts.\n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T[] aryEq(T[] value) {\n-        reportMatcher(new ArrayEquals(value));\n+        LastArguments.reportMatcher(new Equals(value));\n         return null;\n     }\n \n      * @return <code>null</code>.\n      */\n     public static Object isNull() {\n-        reportMatcher(Null.NULL);\n+        LastArguments.reportMatcher(Null.NULL);\n         return null;\n     }\n \n      * @return <code>null</code>.\n      */\n     public static Object notNull() {\n-        reportMatcher(NotNull.NOT_NULL);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that contains a substring that matches the given regular\n-     * expression. For details, see the EasyMock documentation.\n+        LastArguments.reportMatcher(NotNull.NOT_NULL);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that matches the given regular expression. For details,\n+     * see the EasyMock documentation.\n      * \n      * @param regex\n      *            the regular expression.\n      * @return <code>null</code>.\n      */\n-    public static String find(String regex) {\n-        reportMatcher(new Find(regex));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that matches the given regular expression. For details,\n-     * see the EasyMock documentation.\n-     * \n-     * @param regex\n-     *            the regular expression.\n-     * @return <code>null</code>.\n-     */\n     public static String matches(String regex) {\n-        reportMatcher(new Matches(regex));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that starts with the given prefix. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param prefix\n-     *            the prefix.\n-     * @return <code>null</code>.\n-     */\n-    public static String startsWith(String prefix) {\n-        reportMatcher(new StartsWith(prefix));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that ends with the given suffix. For details, see the\n-     * EasyMock documentation.\n-     * \n-     * @param suffix\n-     *            the suffix.\n-     * @return <code>null</code>.\n-     */\n-    public static String endsWith(String suffix) {\n-        reportMatcher(new EndsWith(suffix));\n+        LastArguments.reportMatcher(new Matches(regex));\n         return null;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static double eq(double value, double delta) {\n-        reportMatcher(new EqualsWithDelta(value, delta));\n+        LastArguments.reportMatcher(new EqualsWithDelta(value, delta));\n         return 0;\n     }\n \n      * @return <code>0</code>.\n      */\n     public static float eq(float value, float delta) {\n-        reportMatcher(new EqualsWithDelta(value, delta));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an Object that is the same as the given value. For details, see\n-     * the EasyMock documentation.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T same(T value) {\n-        reportMatcher(new Same(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Switches the given mock objects (more exactly: the controls of the mock\n-     * objects) to replay mode. For details, see the EasyMock documentation.\n-     * \n-     * @param mocks\n-     *            the mock objects.\n-     */\n-    public static void replay(Object... mocks) {\n-        for (Object mock : mocks) {\n-        \tClassExtensionHelper.getControl(mock).replay();\n-        }\n-    }\n-\n-    /**\n-     * Resets the given mock objects (more exactly: the controls of the mock\n-     * objects). For details, see the EasyMock documentation.\n-     * \n-     * @param mocks\n-     *            the mock objects.\n-     */\n-    public static void reset(Object... mocks) {\n-        for (Object mock : mocks) {\n-        \tClassExtensionHelper.getControl(mock).reset();\n-        }\n-    }\n-\n-    /**\n-     * Verifies the given mock objects (more exactly: the controls of the mock\n-     * objects).\n-     * \n-     * @param mocks\n-     *            the mock objects.\n-     */\n-    public static void verify(Object... mocks) {\n-        for (Object mock : mocks) {\n-        \tClassExtensionHelper.getControl(mock).verify();\n-        }\n-    }\n-\n-    /**\n-     * Switches order checking of the given mock object (more exactly: the\n-     * control of the mock object) the on and off. For details, see the EasyMock\n-     * documentation.\n-     * \n-     * @param mock\n-     *            the mock object.\n-     * @param state\n-     *            <code>true</code> switches order checking on,\n-     *            <code>false</code> switches it off.\n-     */\n-    public static void checkOrder(Object mock, boolean state) {\n-    \tClassExtensionHelper.getControl(mock).checkOrder(state);\n-    }\n-\n-    /**\n-     * Reports an argument matcher. This method is needed to define own argument\n-     * matchers. For details, see the EasyMock documentation.\n-     * \n-     * @param matcher\n-     */\n-    public static void reportMatcher(IArgumentMatcher matcher) {\n-        LastArguments.reportMatcher(matcher);\n-    }\n-\n-    private static MocksControl getControl(Object mock) {\n-        return ((ObjectMethodsFilter<MockInvocationHandler>) Proxy\n-        .getInvocationHandler(mock)).getDelegate().getControl();\n+        LastArguments.reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n     }\n \n     /**\n         }\n         return result;\n     }\n-    \n-    /**\n-     * Expects a comparable argument equals to the given value according to their\n-     * compareTo method. For details, see the EasyMock documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n-        reportMatcher(new CompareEqual<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects an argument that will be compared using the provided comparator.\n-     * The following comparison will take place:\n-     * <p>\n-     * <code>comparator.compare(actual, expected) operator 0</code>\n-     * </p>\n-     * For details, see the EasyMock documentation.\n-     * \n-     * @param value the given value.\n-     * @param comparator Comparator used to compare the actual with expected value.\n-     * @param operator The comparison operator.\n-     * @return <code>null</code>\n-     */\n-    public static <T> T cmp(T value, Comparator<T> comparator, LogicalOperator operator) {\n-        reportMatcher(new Compare<T>(value, comparator, operator));\n-        return null;\n-    }\n }\n--- a/src/org/easymock/internal/ClassExtensionHelper.java\n+++ b/src/org/easymock/internal/ClassExtensionHelper.java\n     }\n \n     public static MocksControl getControl(Object mock) {\n-        ObjectMethodsFilter<MockInvocationHandler> handler;\n+        MockitoObjectMethodsFilter<MockInvocationHandler> handler;\n \n         try {\n             if (Enhancer.isEnhanced(mock.getClass())) {\n-                handler = (ObjectMethodsFilter) getInterceptor(mock)\n+                handler = (MockitoObjectMethodsFilter) getInterceptor(mock)\n                         .getHandler();\n             } else if (Proxy.isProxyClass(mock.getClass())) {\n-                handler = (ObjectMethodsFilter) Proxy\n+                handler = (MockitoObjectMethodsFilter) Proxy\n                         .getInvocationHandler(mock);\n             } else {\n                 throw new RuntimeExceptionWrapper(new IllegalArgumentException(\n--- a/src/org/easymock/internal/ClassProxyFactory.java\n+++ b/src/org/easymock/internal/ClassProxyFactory.java\n     @SuppressWarnings(\"unchecked\")\n     public T createProxy(Class<T> toMock, final MockAwareInvocationHandler handler) {\n \n-        // Dirty trick to fix ObjectMethodsFilter\n+        // Dirty trick to fix MockitoObjectMethodsFilter\n         // It will replace the equals, hashCode, toString methods it kept that\n         // are the ones\n         // from Object.class by the correct ones since they might have been\n \n     private void updateMethod(InvocationHandler objectMethodsFilter,\n             Method correctMethod) {\n-        Field methodField = retrieveField(ObjectMethodsFilter.class,\n+        Field methodField = retrieveField(MockitoObjectMethodsFilter.class,\n                 correctMethod.getName() + \"Method\");\n         updateField(objectMethodsFilter, correctMethod, methodField);\n     }\n--- /dev/null\n+++ b/src/org/easymock/internal/MockitoObjectMethodsFilter.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.internal;\n+\n+import java.lang.reflect.Method;\n+\n+import org.mockito.MockAwareInvocationHandler;\n+\n+//TODO rename\n+public class MockitoObjectMethodsFilter<T extends MockAwareInvocationHandler> implements MockAwareInvocationHandler {\n+    private final Method equalsMethod;\n+\n+    private final Method hashCodeMethod;\n+\n+    private final Method toStringMethod;\n+\n+    private final T delegate;\n+\n+    private final String name;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public MockitoObjectMethodsFilter(Class toMock, T delegate,\n+            String name) {\n+        if (name != null && !Invocation.isJavaIdentifier(name)) {\n+            throw new IllegalArgumentException(String.format(\"'%s' is not a valid Java identifier.\", name));\n+            \n+        }\n+        try {\n+            if (toMock.isInterface()) {\n+                toMock = Object.class;\n+            }\n+            equalsMethod = toMock.getMethod(\"equals\",\n+                    new Class[] { Object.class });\n+            hashCodeMethod = toMock.getMethod(\"hashCode\", (Class[]) null);\n+            toStringMethod = toMock.getMethod(\"toString\", (Class[]) null);\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(\"An Object method could not be found!\");\n+        }\n+        this.delegate = delegate;\n+        this.name = name;\n+    }\n+\n+    public final Object invoke(Object proxy, Method method, Object[] args)\n+            throws Throwable {\n+        if (equalsMethod.equals(method)) {\n+            return Boolean.valueOf(proxy == args[0]);\n+        }\n+        if (hashCodeMethod.equals(method)) {\n+            return new Integer(System.identityHashCode(proxy));\n+        }\n+        if (toStringMethod.equals(method)) {\n+            return mockToString(proxy);\n+        }\n+        return delegate.invoke(proxy, method, args);\n+    }\n+\n+    private String mockToString(Object proxy) {\n+        return (name != null) ? name : \"Mock for \" + mockType(proxy);\n+    }\n+\n+    private String mockType(Object proxy) {\n+\t\tif (proxy.getClass().getInterfaces().length == 2) {\n+\t\t\treturn proxy.getClass().getInterfaces()[0].getSimpleName();\n+\t\t} else {\n+\t\t\treturn proxy.getClass().getSuperclass().getSimpleName();\n+\t\t}\n+\t}\n+\n+    public T getDelegate() {\n+        return delegate;\n+    }\n+\n+    public void setMock(Object mock) {\n+        delegate.setMock(mock);\n+    }\n+}\n--- a/src/org/easymock/internal/MocksControl.java\n+++ b/src/org/easymock/internal/MocksControl.java\n         try {\n             state.assertRecordState();\n             ClassProxyFactory<T> proxyFactory = new ClassProxyFactory<T>();\n-            return proxyFactory.createProxy(toMock, new ObjectMethodsFilter(\n+            return proxyFactory.createProxy(toMock, new MockitoObjectMethodsFilter(\n                     toMock, new MockInvocationHandler(this), null));\n         } catch (RuntimeExceptionWrapper e) {\n             throw (RuntimeException) e.getRuntimeException().fillInStackTrace();\n         try {\n             state.assertRecordState();\n             ClassProxyFactory<T> proxyFactory = new ClassProxyFactory<T>();\n-            return proxyFactory.createProxy(toMock, new ObjectMethodsFilter(\n+            return proxyFactory.createProxy(toMock, new MockitoObjectMethodsFilter(\n                     toMock, new MockInvocationHandler(this), name));\n         } catch (RuntimeExceptionWrapper e) {\n             throw (RuntimeException) e.getRuntimeException().fillInStackTrace();\n--- a/src/org/mockito/MockUtil.java\n+++ b/src/org/mockito/MockUtil.java\n \n import net.sf.cglib.proxy.*;\n \n-import org.easymock.internal.ObjectMethodsFilter;\n+import org.easymock.internal.MockitoObjectMethodsFilter;\n import org.easymock.internal.ClassProxyFactory.MockMethodInterceptor;\n import org.mockito.exceptions.NotAMockException;\n \n     \n     @SuppressWarnings(\"unchecked\")\n     public static <T> MockitoControl<T> getControl(T mock) {\n-        ObjectMethodsFilter<MockitoControl<T>> handler;\n+        MockitoObjectMethodsFilter<MockitoControl<T>> handler;\n \n         try {\n             if (Enhancer.isEnhanced(mock.getClass())) {\n-                handler = (ObjectMethodsFilter) getInterceptor(mock)\n+                handler = (MockitoObjectMethodsFilter) getInterceptor(mock)\n                         .getHandler();\n             } else {\n                 throw new NotAMockException(mock);\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     public static <T> T mock(Class<T> classToMock) {\n         try {\n             ClassProxyFactory<T> proxyFactory = new ClassProxyFactory<T>();\n-            return proxyFactory.createProxy(classToMock, new ObjectMethodsFilter<MockitoControl>(\n+            return proxyFactory.createProxy(classToMock, new MockitoObjectMethodsFilter<MockitoControl>(\n                     classToMock, new MockitoControl<T>(), null));\n         } catch (RuntimeExceptionWrapper e) {\n             throw (RuntimeException) e.getRuntimeException().fillInStackTrace();\n--- /dev/null\n+++ b/test/org/easymock/ComparableMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock;\n+\n+import static org.junit.Assert.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.easymock.internal.matchers.*;\n+import org.junit.Test;\n+\n+//TODO do we need matchers like GreaterThan - does it make any sense?\n+public class ComparableMatchersTest {\n+\n+    @Test\n+    public void testNotComparable() {\n+        CompareTo<Long> cmpTo = new CompareTo<Long>(5L) {\n+\n+            @Override\n+            protected String getName() {\n+                return null;\n+            }\n+\n+            @Override\n+            protected boolean matchResult(int result) {\n+                fail(\"Shouldn't be called since the passed argument is not Comparable\");\n+                return true;\n+            }\n+            \n+        };\n+        \n+        assertFalse(cmpTo.matches(new Object()));\n+    }\n+    @Test\n+    public void testLessThan() {\n+        test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n+    }\n+\n+    @Test\n+    public void testGreateThan() {\n+        test(new GreaterThan<String>(\"b\"), false, true, false, \"gt\");\n+    }\n+\n+    @Test\n+    public void testLessOrEqual() {\n+        test(new LessOrEqual<String>(\"b\"), true, false, true, \"leq\");\n+    }\n+\n+    @Test\n+    public void testGreateOrEqual() {\n+        test(new GreaterOrEqual<String>(\"b\"), false, true, true, \"geq\");\n+    }\n+\n+    @Test\n+    public void testCompareEqual() {\n+        test(new CompareEqual<String>(\"b\"), false, false, true, \"cmpEq\");\n+\n+        // Make sure it works when equals provide a different result than\n+        // compare\n+        CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(\n+                new BigDecimal(\"5.00\"));\n+        assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n+    }\n+\n+    private void test(CompareTo<String> compareTo, boolean lower, boolean higher,\n+            boolean equals, String name) {\n+\n+        assertEquals(lower, compareTo.matches(\"a\"));\n+        assertEquals(equals, compareTo.matches(\"b\"));\n+        assertEquals(higher, compareTo.matches(\"c\"));\n+\n+        StringBuffer sb = new StringBuffer();\n+        compareTo.appendTo(sb);\n+        assertEquals(name + \"(b)\", sb.toString());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/MatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.stub;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+\n+import org.junit.*;\n+import org.mockito.*;\n+import static org.mockito.Matchers.*;\n+\n+@SuppressWarnings(\"unchecked\")  \n+public class MatchersTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+    \n+    @Test\n+    public void andOverloaded() {\n+        stub(mock.oneArg(and(eq(false), eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(and(eq('a'), eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(and(contains(\"a\"), contains(\"d\")))).andReturn(\"8\");\n+        stub(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(false));\n+        assertEquals(null, mock.oneArg(true));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg('a'));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        \n+        assertEquals(\"8\", mock.oneArg(\"abcde\"));\n+        assertEquals(null, mock.oneArg(\"aaaaa\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        \n+    }\n+\n+    @Test\n+    public void orOverloaded() {\n+        stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n+        stub(mock.oneArg(Matchers.or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n+        stub(mock.oneArg(Matchers.or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n+        stub(mock.oneArg(Matchers.or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n+        stub(mock.oneArg(Matchers.or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n+        stub(mock.oneArg(Matchers.or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n+        stub(mock.oneArg(Matchers.or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n+        stub(mock.oneArg(Matchers.or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n+        stub(mock.oneArg(Matchers.or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        \n+        assertEquals(\"8\", mock.oneArg(\"jkl\"));\n+        assertEquals(\"8\", mock.oneArg(\"asd\"));\n+        assertEquals(null, mock.oneArg(\"asdjkl\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        assertEquals(null, mock.oneArg(String.class));\n+    }\n+\n+    @Test\n+    public void notOverloaded() {\n+        stub(mock.oneArg(Matchers.not(eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(Matchers.not(eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.not(eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(Matchers.not(eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(Matchers.not(eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(Matchers.not(eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(Matchers.not(eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(Matchers.not(eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(Matchers.not(contains(\"a\")))).andReturn(\"8\");\n+        stub(mock.oneArg(Matchers.not(isA(Class.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(null, mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg('b'));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 2));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"8\", mock.oneArg(\"bcde\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(null, mock.oneArg(Class.class));\n+    }\n+\n+    @Test\n+    public void lessOrEqualOverloaded() {\n+        stub(mock.oneArg(leq((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(leq((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(leq((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(leq((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(leq((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(leq((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(leq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(null, mock.oneArg((byte) 2));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -5));\n+        assertEquals(\"5\", mock.oneArg((int) -2));\n+        assertEquals(\"6\", mock.oneArg((long) -3));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"1.1\")));\n+    }\n+\n+    @Test\n+    public void lessThanOverloaded() {\n+        stub(mock.oneArg(lt((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(lt((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(lt((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(lt((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(lt((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(lt((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(lt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 0));\n+        assertEquals(null, mock.oneArg((byte) 1));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 0));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -4));\n+        assertEquals(\"5\", mock.oneArg((int) -34));\n+        assertEquals(\"6\", mock.oneArg((long) -6));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"23\")));\n+    }\n+\n+    @Test\n+    public void greaterOrEqualMatcherOverloaded() {\n+        stub(mock.oneArg(geq((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(geq((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(geq((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(geq((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(geq((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(geq((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(geq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(null, mock.oneArg((byte) 0));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 4));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.00\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n+    }\n+\n+    @Test\n+    public void greaterThanMatcherOverloaded() {\n+        stub(mock.oneArg(gt((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(gt((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(gt((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(gt((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(gt((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(gt((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(gt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(null, mock.oneArg((byte) 1));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n+    }\n+\n+    @Test\n+    public void compareToMatcher() {\n+        stub(mock.oneArg(Matchers.cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+\n+        assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n+    }\n+\n+    @Test\n+    public void anyMatcher() {\n+        stub(mock.oneArg(anyBoolean())).andReturn(\"0\");\n+        stub(mock.oneArg(anyByte())).andReturn(\"1\");\n+        stub(mock.oneArg(anyChar())).andReturn(\"2\");\n+        stub(mock.oneArg(anyDouble())).andReturn(\"3\");\n+        stub(mock.oneArg(anyFloat())).andReturn(\"4\");\n+        stub(mock.oneArg(anyInt())).andReturn(\"5\");\n+        stub(mock.oneArg(anyLong())).andReturn(\"6\");\n+        stub(mock.oneArg(anyShort())).andReturn(\"7\");\n+        stub(mock.oneArg((String) anyObject())).andReturn(\"8\");\n+        stub(mock.oneArg(anyObject())).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"4\", mock.oneArg((float) 889));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        assertEquals(\"8\", mock.oneArg(\"Test\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(\"9\", mock.oneArg(new HashMap()));\n+    }\n+\n+    @Test\n+    public void arrayEqualsMatcher() {\n+        stub(mock.oneArray(Matchers.aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n+        stub(mock.oneArray(Matchers.aryEq(new byte[] { 1 }))).andReturn(\"1\");\n+        stub(mock.oneArray(Matchers.aryEq(new char[] { 1 }))).andReturn(\"2\");\n+        stub(mock.oneArray(Matchers.aryEq(new double[] { 1 }))).andReturn(\"3\");\n+        stub(mock.oneArray(Matchers.aryEq(new float[] { 1 }))).andReturn(\"4\");\n+        stub(mock.oneArray(Matchers.aryEq(new int[] { 1 }))).andReturn(\"5\");\n+        stub(mock.oneArray(Matchers.aryEq(new long[] { 1 }))).andReturn(\"6\");\n+        stub(mock.oneArray(Matchers.aryEq(new short[] { 1 }))).andReturn(\"7\");\n+        stub(mock.oneArray(Matchers.aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n+        stub(mock.oneArray(Matchers.aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n+        assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n+        assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n+        assertEquals(\"3\", mock.oneArray(new double[] { 1 }));\n+        assertEquals(\"4\", mock.oneArray(new float[] { 1 }));\n+        assertEquals(\"5\", mock.oneArray(new int[] { 1 }));\n+        assertEquals(\"6\", mock.oneArray(new long[] { 1 }));\n+        assertEquals(\"7\", mock.oneArray(new short[] { 1 }));\n+        assertEquals(\"8\", mock.oneArray(new String[] { \"Test\" }));\n+        assertEquals(\"9\", mock.oneArray(new Object[] { \"Test\", new Integer(4) }));\n+        \n+        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(999) }));\n+        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(4), \"x\" }));\n+        \n+        assertEquals(null, mock.oneArray(new boolean[] { true, false }));\n+        assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));\n+    }\n+\n+    @Test\n+    public void greaterOrEqualMatcher() {\n+        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+\n+        assertEquals(\">= 7\", mock.oneArg(7));\n+        assertEquals(\">= 7\", mock.oneArg(8));\n+        assertEquals(\">= 7\", mock.oneArg(9));\n+\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+    }\n+\n+    @Test\n+    public void greaterThanMatcher() {\n+        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+\n+        assertEquals(\"> 7\", mock.oneArg(8));\n+        assertEquals(\"> 7\", mock.oneArg(9));\n+        assertEquals(\"> 7\", mock.oneArg(10));\n+\n+        assertEquals(\"<= 7\", mock.oneArg(7));\n+        assertEquals(\"<= 7\", mock.oneArg(6));\n+    }\n+\n+    @Test\n+    public void lessOrEqualMatcher() {\n+        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+\n+        assertEquals(\"<= 7\", mock.oneArg(7));\n+        assertEquals(\"<= 7\", mock.oneArg(6));\n+        assertEquals(\"<= 7\", mock.oneArg(5));\n+\n+        assertEquals(\"> 7\", mock.oneArg(8));\n+        assertEquals(\"> 7\", mock.oneArg(9));\n+    }\n+\n+    @Test\n+    public void lessThanMatcher() {\n+        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+\n+        assertEquals(\"< 7\", mock.oneArg(5));\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+        assertEquals(\"< 7\", mock.oneArg(4));\n+\n+        assertEquals(\">= 7\", mock.oneArg(7));\n+        assertEquals(\">= 7\", mock.oneArg(8));\n+    }\n+\n+    @Test\n+    public void orMatcher() {\n+        stub(mock.oneArg(anyInt())).andReturn(\"other\");\n+        stub(mock.oneArg(Matchers.or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n+\n+        assertEquals(\"other\", mock.oneArg(10));\n+        assertEquals(\"7 or 9\", mock.oneArg(7));\n+        assertEquals(\"7 or 9\", mock.oneArg(9));\n+    }\n+\n+    @Test\n+    public void nullMatcher() {\n+        stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).andReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), Matchers.not(isNull()), eq(\"\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+    }\n+\n+    @Test\n+    public void notNullMatcher() {\n+        stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), Matchers.not(notNull()), eq(\"\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n+    }\n+\n+    @Test\n+    //TODO how different is this one from matchesMatcher?\n+    public void findMatcher() {\n+        stub(mock.oneArg(Matchers.find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"ab12\"));\n+        assertEquals(null, mock.oneArg(\"12345\"));\n+    }\n+\n+    @Test\n+    public void matchesMatcher() {\n+        stub(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).andReturn(\"1\");\n+        stub(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"a12\"));\n+        assertEquals(\"2\", mock.oneArg(\"131\"));\n+        assertEquals(null, mock.oneArg(\"blah\"));\n+    }\n+\n+    @Test\n+    public void containsMatcher() {\n+        stub(mock.oneArg(contains(\"ell\"))).andReturn(\"1\");\n+        stub(mock.oneArg(contains(\"ld\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"hello\"));\n+        assertEquals(\"2\", mock.oneArg(\"world\"));\n+        assertEquals(null, mock.oneArg(\"xlx\"));\n+    }\n+\n+    @Test\n+    public void startsWithMatcher() {\n+        stub(mock.oneArg(Matchers.startsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.startsWith(\"bc\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n+        assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n+        assertEquals(null, mock.oneArg(\"ba quake\"));\n+    }\n+\n+    @Test\n+    public void endsWithMatcher() {\n+        stub(mock.oneArg(Matchers.endsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.endsWith(\"bc\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"xab\"));\n+        assertEquals(\"2\", mock.oneArg(\"xbc\"));\n+        assertEquals(null, mock.oneArg(\"ac\"));\n+    }\n+\n+    @Test\n+    public void deltaMatcher() {\n+        stub(mock.oneArg(eq(1.0D, 0.1D))).andReturn(\"1\");\n+        stub(mock.oneArg(eq(2.0D, 0.1D))).andReturn(\"2\");\n+        stub(mock.oneArg(eq(1.0F, 0.1F))).andReturn(\"3\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+\n+        assertEquals(\"1\", mock.oneArg(1.0));\n+        assertEquals(\"1\", mock.oneArg(0.91));\n+        assertEquals(\"1\", mock.oneArg(1.09));\n+        assertEquals(\"2\", mock.oneArg(2.0));\n+\n+        assertEquals(\"3\", mock.oneArg(1.0F));\n+        assertEquals(\"3\", mock.oneArg(0.91F));\n+        assertEquals(\"3\", mock.oneArg(1.09F));\n+        assertEquals(\"4\", mock.oneArg(2.1F));\n+        \n+        assertEquals(null, mock.oneArg(2.2F));\n+    }\n+\n+    @Test\n+    public void sameMatcher() {\n+        Object one = new String(\"1243\");\n+        Object two = new String(\"1243\");\n+        Object three = new String(\"1243\");\n+\n+        assertNotSame(one, two);\n+        assertEquals(one, two);\n+        assertEquals(two, three);\n+\n+        stub(mock.oneArg(Matchers.same(one))).andReturn(\"1\");\n+        stub(mock.oneArg(Matchers.same(two))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(one));\n+        assertEquals(\"2\", mock.oneArg(two));\n+        assertEquals(null, mock.oneArg(three));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/MatchersToStringTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.easymock.IArgumentMatcher;\n+import org.easymock.internal.matchers.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MatchersToStringTest {\n+    private StringBuffer buffer;\n+\n+    @Before\n+    public void setup() {\n+        buffer = new StringBuffer();\n+    }\n+\n+    @Test\n+    public void sameToStringWithString() {\n+        new Same(\"X\").appendTo(buffer);\n+        assertEquals(\"same(\\\"X\\\")\", buffer.toString());\n+\n+    }\n+\n+    @Test\n+    public void nullToString() {\n+        Null.NULL.appendTo(buffer);\n+        assertEquals(\"isNull()\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void notNullToString() {\n+        NotNull.NOT_NULL.appendTo(buffer);\n+        assertEquals(\"notNull()\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void anyToString() {\n+        Any.ANY.appendTo(buffer);\n+        assertEquals(\"<any>\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void sameToStringWithChar() {\n+        new Same('x').appendTo(buffer);\n+        assertEquals(\"same('x')\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void sameToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        new Same(o).appendTo(buffer);\n+        assertEquals(\"same(X)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void equalsToStringWithString() {\n+        new Equals(\"X\").appendTo(buffer);\n+        assertEquals(\"\\\"X\\\"\", buffer.toString());\n+\n+    }\n+\n+    @Test\n+    public void equalsToStringWithChar() {\n+        new Equals('x').appendTo(buffer);\n+        assertEquals(\"'x'\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void equalsToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        new Equals(o).appendTo(buffer);\n+        assertEquals(\"X\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void orToString() {\n+        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        new Or(matchers).appendTo(buffer);\n+        assertEquals(\"or(1, 2)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void notToString() {\n+        new Not(new Equals(1)).appendTo(buffer);\n+        assertEquals(\"not(1)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void andToString() {\n+        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        new And(matchers).appendTo(buffer);\n+        assertEquals(\"and(1, 2)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void startsWithToString() {\n+        new StartsWith(\"AB\").appendTo(buffer);\n+        assertEquals(\"startsWith(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void endsWithToString() {\n+        new EndsWith(\"AB\").appendTo(buffer);\n+        assertEquals(\"endsWith(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void containsToString() {\n+        new Contains(\"AB\").appendTo(buffer);\n+        assertEquals(\"contains(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void findToString() {\n+        new Find(\"\\\\s+\").appendTo(buffer);\n+        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void matchesToString() {\n+        new Matches(\"\\\\s+\").appendTo(buffer);\n+        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/easymock/NiceMessagesWhenVerificationFailsTest.java\n+package org.easymock;\n+\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+\n+import static org.mockito.Mockito.*;\n+import static org.junit.Assert.*;\n+\n+public class NiceMessagesWhenVerificationFailsTest {\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldPrintMethodName() {\n+        try {\n+            verify(mock).simpleMethod();\n+        } catch (MockVerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Method not invoked: IMethods.simpleMethod()\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldPrintMethodNameAndArguments() {\n+        try {\n+            verify(mock).threeArgumentMethod(12, new Object(), \"some string\");\n+        } catch (MockVerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Method not invoked: IMethods.threeArgumentMethod(12, id1234123, \\\"some string\\\")\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldPrintFirstUnexpectedInvocation() {\n+        mock.oneArg(true);\n+        mock.threeArgumentMethod(1, \"2\", \"3\");\n+        try {\n+            verifyNoMoreInteractions(mock);\n+        } catch (MockVerificationAssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  No interactions expected but found: IMethods.oneArg(true)\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+}\n--- a/test/org/easymock/VerificationUsingMatchersTest.java\n+++ b/test/org/easymock/VerificationUsingMatchersTest.java\n package org.easymock;\n \n import static org.easymock.EasyMock.*;\n+import static org.mockito.Matchers.*;\n import static org.junit.Assert.*;\n import static org.mockito.Mockito.verify;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.MockVerificationAssertionError;\n \n @SuppressWarnings(\"unchecked\")  \n         mock.oneArg(one);\n         mock.oneArg(two);\n         \n-        verify(mock).oneArg(same(one));\n+        verify(mock).oneArg(Matchers.same(one));\n         verify(mock).oneArg(two);\n         \n         try {\n-            verify(mock).oneArg(same(three));\n+            verify(mock).oneArg(Matchers.same(three));\n             fail();\n         } catch (MockVerificationAssertionError e) {}\n     }  \n--- a/test/org/mockito/usage/BasicStubbingTest.java\n+++ b/test/org/mockito/usage/BasicStubbingTest.java\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.junit.Assert.*;\n-import static org.mockito.util.Matchers.contains;\n+import static org.mockito.util.JUnitMatchers.contains;\n \n import java.util.*;\n \n--- a/test/org/mockito/usage/BasicVerificationTest.java\n+++ b/test/org/mockito/usage/BasicVerificationTest.java\n         \n         Mockito.verify(mock).add(\"test\");\n     }\n-\n-    @Test\n-    public void easyMockNotVerify() throws Exception {\n-        List mock = EasyMock.createMock(List.class);\n-//        mock.clear();\n-        EasyMock.replay(mock);\n-        \n-        EasyMock.verify(mock);\n-    }\n }\n--- a/test/org/mockito/usage/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockito/usage/InvalidUseOfMatchersTest.java\n \n import org.easymock.IMethods;\n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.*;\n import org.mockito.exceptions.InvalidUseOfMatchersException;\n \n @SuppressWarnings(\"unchecked\")\n         } catch (InvalidUseOfMatchersException e) {\n         }\n     }\n-\n+    \n     @Test\n     public void shouldScreamWhenMatchersAreInvalid() {\n-        mock.simpleMethodWithArgument(not(eq(\"asd\")));\n+        mock.simpleMethodWithArgument(Matchers.not(eq(\"asd\")));\n         try {\n-            mock.simpleMethodWithArgument(not(\"jkl\"));\n+            mock.simpleMethodWithArgument(Matchers.not(\"jkl\"));\n             fail();\n         } catch (IllegalStateException e) {\n             assertEquals(\"no matchers found.\", e.getMessage());\n         }\n         \n         try {\n-            mock.simpleMethodWithArgument(or(eq(\"jkl\"), \"asd\"));\n+            mock.simpleMethodWithArgument(Matchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (IllegalStateException e) {\n             assertEquals(\"2 matchers expected, 1 recorded.\", e.getMessage());\n--- /dev/null\n+++ b/test/org/mockito/util/JUnitMatchers.java\n+package org.mockito.util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+\n+public class JUnitMatchers {\n+\n+    public static <T> Matcher<Collection<T>> contains(final T ... elements) {\n+        return new BaseMatcher<Collection<T>>() {\n+\n+            public boolean matches(Object collection) {\n+                for (T element : elements) {\n+                    if (((Collection)collection).contains(element) == false) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+\n+            public void describeTo(Description desc) {\n+                desc.appendText(\"collection doesn't containg one of: \" + Arrays.toString(elements));\n+            }\n+        };\n+    }\n+}\n--- a/test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java\n+++ b/test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java\n \n public class MockitoVsEasyMockTest {\n     \n-    @Test\n-    public void easyMockRocks() {\n-        ArticleCalculator mockCalculator = EasyMock.createMock(ArticleCalculator.class);\n-        ArticleDatabase mockDatabase = EasyMock.createMock(ArticleDatabase.class);\n-        \n-        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n-              \n-        EasyMock.expect(mockCalculator.countArticles(\"Guardian\")).andReturn(12);\n-        EasyMock.expect(mockCalculator.countArticlesInPolish(\"Guardian\")).andReturn(5);\n-        \n-        mockDatabase.updateNumberOfArticles(\"Guardian\", 12);\n-        mockDatabase.updateNumberOfPolishArticles(\"Guardian\", 5);\n-        mockDatabase.updateNumberOfEnglishArticles(\"Guardian\", 7);\n-        \n-        EasyMock.replay(mockCalculator, mockDatabase);\n-        \n-        articleManager.updateArticleCounters(\"Guardian\");\n-        \n-        EasyMock.verify(mockCalculator, mockDatabase);\n-    }\n-\n     @Test\n     public void managerCountsArticlesAndSavesThemInTheDatabase() {\n         ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);", "timestamp": 1195253790, "metainfo": ""}