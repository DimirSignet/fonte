{"sha": "3133e1a7ab662c52c4350bdecb512874b7afe9b1", "log": "some refactorings and minor api changes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40247", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * LinkedList mockedList = mock(LinkedList.class);\n  * \n  * //stubbing\n- * stub(mockedList.get(0)).andReturn(\"first\");\n- * stub(mockedList.get(1)).andReturn(\"second\");\n- * stub(mockedList.get(2)).andThrow(new RuntimeException());\n+ * stub(mockedList.get(0)).toReturn(\"first\");\n+ * stub(mockedList.get(1)).toReturn(\"second\");\n+ * stub(mockedList.get(2)).toThrow(new RuntimeException());\n  * \n  * //following prints \"first\"\n  * System.out.println(mockedList.get(0));\n  * \n  * <pre>\n  *  //stubbing using anyInt() argument matcher\n- *  stub(mockedList.get(anyInt())).andReturn(\"element\");\n+ *  stub(mockedList.get(anyInt())).toReturn(\"element\");\n  *  \n  *  //following prints \"element\"\n  *  System.out.println(mockedList.get(999));\n     /**\n      * Stubs with return value or exception. E.g:\n      * <pre>\n-     *   stub(mock.countElements()).andReturn(10);\n+     *   stub(mock.countElements()).toReturn(10);\n      *   \n-     *   stub(mock.countElements()).andThrow(new RuntimeException());\n+     *   stub(mock.countElements()).toThrow(new RuntimeException());\n      * </pre>\n      * <p>\n      * Trying to stub void method? Look here: {@link Mockito#stubVoid}\n     public static <T> OngoingStubbing<T> stub(T methodCallToStub) {\n         MOCKING_PROGRESS.stubbingStarted();\n \n-        OngoingStubbing stubbable = MOCKING_PROGRESS.pullStubbable();\n+        OngoingStubbing stubbable = MOCKING_PROGRESS.pullOngoingStubbing();\n         if (stubbable == null) {\n             REPORTER.missingMethodInvocation();\n         }\n     public static <T> VoidMethodStubbable<T> stubVoid(T mock) {\n         MockHandler<T> handler = MockUtil.getMockHandler(mock);\n         MOCKING_PROGRESS.stubbingStarted();\n-        return handler;\n+        return handler.voidMethodStubbable();\n     }\n \n     /**\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         throw new UnfinishedStubbingException(join(\n                 \"Unifinished stubbing detected, e.g. toReturn() is missing\",\n                 \"Examples of proper stubbing:\",\n-                \"stub(mock.isOk()).andReturn(true);\",\n-                \"stub(mock.isOk()).andThrows(exception);\",\n+                \"stub(mock.isOk()).toReturn(true);\",\n+                \"stub(mock.isOk()).toThrows(exception);\",\n                 \"stubVoid(mock).toThrow(exception).on().someMethod();\"\n         ));\n     }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n  *\n  * @param <T> type of mock object to handle\n  */\n-public class MockHandler<T> implements MockAwareInterceptor<T>, OngoingStubbing<T>, VoidMethodStubbable<T>, StubbedMethodSelector<T> {\n+public class MockHandler<T> implements MockAwareInterceptor<T> {\n \n     private final VerifyingRecorder verifyingRecorder;\n     private final Stubber stubber;\n         stubber.setInvocationForPotentialStubbing(invocationMatcher);\n         verifyingRecorder.recordInvocation(invocationMatcher.getInvocation());\n \n-        mockingProgress.reportStubbable(this);\n+        mockingProgress.reportOngoingStubbing(new OngoingStubbingImpl());\n         \n         return stubber.resultFor(invocationMatcher.getInvocation());\n     }\n         verifyingRecorder.verify(VerificationModeImpl.noMoreInteractions());\n     }\n     \n-    public void andReturn(T value) {\n-        verifyingRecorder.eraseLastInvocation();\n-        stubber.addReturnValue(value);\n-    }\n-\n-    public void andThrow(Throwable throwable) {\n-        verifyingRecorder.eraseLastInvocation();\n-        stubber.addThrowable(throwable);\n+    public VoidMethodStubbable<T> voidMethodStubbable() {\n+        return new VoidMethodStubbableImpl();\n     }\n     \n-    public StubbedMethodSelector<T> toThrow(Throwable throwable) {\n-        stubber.addThrowableForVoidMethod(throwable);\n-        return this;\n-    }\n-\n-    public T on() {\n-        return mock;\n-    }\n-\n     public void setMock(T mock) {\n         this.mock = mock;\n     }\n                 new NoMoreInvocationsVerifier());\n         return new VerifyingRecorder(new AllInvocationsFinder(), verifiers);\n     }\n+    \n+    private final class VoidMethodStubbableImpl implements VoidMethodStubbable<T> {\n+        public StubbedMethodSelector<T> toThrow(Throwable throwable) {\n+            stubber.addThrowableForVoidMethod(throwable);\n+            return new StubbedMethodSelector<T>() {\n+                public T on() {\n+                    return mock;\n+                }\n+            };\n+        }\n+    }\n+\n+    private class OngoingStubbingImpl implements OngoingStubbing<T> {\n+        public void toReturn(Object value) {\n+            verifyingRecorder.eraseLastInvocation();\n+            stubber.addReturnValue(value);\n+        }\n+\n+        public void toThrow(Throwable throwable) {\n+            verifyingRecorder.eraseLastInvocation();\n+            stubber.addThrowable(throwable);\n+        }\n+    }\n }\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n @SuppressWarnings(\"unchecked\")\n public interface MockingProgress {\n \n-    void reportStubbable(OngoingStubbing ongoingStubbing);\n+    void reportOngoingStubbing(OngoingStubbing ongoingStubbing);\n \n-    OngoingStubbing pullStubbable();\n+    OngoingStubbing pullOngoingStubbing();\n \n     void verificationStarted(VerificationMode verificationMode);\n \n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n     private int invocationSequenceNumber = 1;\n     private boolean stubbingInProgress = false;\n \n-    public void reportStubbable(OngoingStubbing ongoingStubbing) {\n+    public void reportOngoingStubbing(OngoingStubbing ongoingStubbing) {\n         this.ongoingStubbing = ongoingStubbing;\n     }\n \n-    public OngoingStubbing pullStubbable() {\n+    public OngoingStubbing pullOngoingStubbing() {\n         OngoingStubbing temp = ongoingStubbing;\n         ongoingStubbing = null;\n         return temp;\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n  * Stubs with return value or exception. E.g:\n  * \n  * <pre>\n- * stub(mock.countElements()).andReturn(10);\n+ * stub(mock.countElements()).toReturn(10);\n  * \n- * stub(mock.countElements()).andThrow(new RuntimeException());\n+ * stub(mock.countElements()).toThrow(new RuntimeException());\n  * </pre>\n  * \n  * See examples in javadoc for {@link Mockito#stub}\n     /**\n      * Stub mock object with given return value. E.g:\n      * <pre>\n-     * stub(mock.countElements()).andReturn(10);\n+     * stub(mock.countElements()).toReturn(10);\n      * </pre>\n      * \n      * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param stubbed return value\n      */\n-    void andReturn(T value);\n+    void toReturn(T value);\n \n     /**\n      * Stub mock object with throwable that will be thrown on method invocation. E.g:\n      * <pre>\n-     * stub(mock.countElements()).andThrow(new RuntimeException());\n+     * stub(mock.countElements()).toThrow(new RuntimeException());\n      * </pre>\n      *\n      * If throwable is a checked exception then it has to \n      * \n      * @param throwable to be thrown on method invocation\n      */\n-    void andThrow(Throwable throwable);\n+    void toThrow(Throwable throwable);\n }\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n         return mockingProgress.get();\n     }\n     \n-    public void reportStubbable(OngoingStubbing ongoingStubbing) {\n-        threadSafely().reportStubbable(ongoingStubbing);\n+    public void reportOngoingStubbing(OngoingStubbing ongoingStubbing) {\n+        threadSafely().reportOngoingStubbing(ongoingStubbing);\n     }\n \n-    public OngoingStubbing pullStubbable() {\n-        return threadSafely().pullStubbable();\n+    public OngoingStubbing pullOngoingStubbing() {\n+        return threadSafely().pullOngoingStubbing();\n     }\n     \n     public void verificationStarted(VerificationMode verify) {\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n     @Test\n     public void shouldRemoveStubbableFromProgressAfterStubbing() {\n         List mock = Mockito.mock(List.class);\n-        Mockito.stub(mock.add(\"test\")).andReturn(true);\n+        Mockito.stub(mock.add(\"test\")).toReturn(true);\n         \n-        assertNull(Mockito.MOCKING_PROGRESS.pullStubbable());\n+        assertNull(Mockito.MOCKING_PROGRESS.pullOngoingStubbing());\n     }\n     \n     @Test(expected=NotAMockException.class)\n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n     \n     @Test(expected=MissingMethodInvocationException.class)\n     public void shouldReportMissingMethodInvocationWhenStubbing() {\n-        stub(mock.simpleMethod()).andReturn(\"this stubbing is required to make sure Stubbable is pulled\");\n-        stub(\"\".toString()).andReturn(\"x\");\n+        stub(mock.simpleMethod()).toReturn(\"this stubbing is required to make sure Stubbable is pulled\");\n+        stub(\"\".toString()).toReturn(\"x\");\n     }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n-        stub(mock.simpleMethod()).andThrow(new Exception());\n+        stub(mock.simpleMethod()).toThrow(new Exception());\n     }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n-        stub(mock.simpleMethod()).andThrow(null);\n+        stub(mock.simpleMethod()).toThrow(null);\n     }    \n }\n--- a/test/org/mockitousage/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/StackTraceFilteringTest.java\n     @Test\n     public void shouldFilterStackTraceWhenThrowingExceptionFromMockHandler() {\n         try {\n-            stub(mock.oneArg(true)).andThrow(new Exception());\n+            stub(mock.oneArg(true)).toThrow(new Exception());\n             fail();\n         } catch (MockitoException expected) {\n             assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStackTraceWhenThrowingExceptionFromMockHandler\"));\n     \n     @Test\n     public void shouldShowProperExceptionStackTrace() throws Exception {\n-        stub(mock.simpleMethod()).andThrow(new RuntimeException());\n+        stub(mock.simpleMethod()).toThrow(new RuntimeException());\n \n         try {\n             mock.simpleMethod();\n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n     \n     @Test\n     public void shouldStubStringVarargs() {\n-        stub(mock.withStringVarargsReturningString(1)).andReturn(\"1\");\n-        stub(mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\")).andReturn(\"2\");\n+        stub(mock.withStringVarargsReturningString(1)).toReturn(\"1\");\n+        stub(mock.withStringVarargsReturningString(2, \"1\", \"2\", \"3\")).toReturn(\"2\");\n         \n         RuntimeException expected = new RuntimeException();\n         stubVoid(mock).toThrow(expected).on().withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n     \n     @Test\n     public void shouldStubBooleanVarargs() {\n-        stub(mock.withBooleanVarargs(1)).andReturn(true);\n-        stub(mock.withBooleanVarargs(1, true, false)).andReturn(true);\n+        stub(mock.withBooleanVarargs(1)).toReturn(true);\n+        stub(mock.withBooleanVarargs(1, true, false)).toReturn(true);\n         \n         assertEquals(true, mock.withBooleanVarargs(1));\n         assertEquals(false, mock.withBooleanVarargs(9999));\n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n \n     @Test\n     public void shouldDetectWrongNumberOfMatchersWhenStubbing() {\n-        Mockito.stub(mock.threeArgumentMethod(1, \"2\", \"3\")).andReturn(null);\n+        Mockito.stub(mock.threeArgumentMethod(1, \"2\", \"3\")).toReturn(null);\n         try {\n-            Mockito.stub(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).andReturn(null);\n+            Mockito.stub(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).toReturn(null);\n             fail();\n         } catch (InvalidUseOfMatchersException e) {}\n     }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n \n     @Test\n     public void andOverloaded() {\n-        stub(mock.oneArg(and(eq(false), eq(false)))).andReturn(\"0\");\n-        stub(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(\"1\");\n-        stub(mock.oneArg(and(eq('a'), eq('a')))).andReturn(\"2\");\n-        stub(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(\"3\");\n-        stub(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(\"4\");\n-        stub(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(\"5\");\n-        stub(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(\"6\");\n-        stub(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(\"7\");\n-        stub(mock.oneArg(and(contains(\"a\"), contains(\"d\")))).andReturn(\"8\");\n-        stub(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(and(eq(false), eq(false)))).toReturn(\"0\");\n+        stub(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).toReturn(\"1\");\n+        stub(mock.oneArg(and(eq('a'), eq('a')))).toReturn(\"2\");\n+        stub(mock.oneArg(and(eq((double) 1), eq((double) 1)))).toReturn(\"3\");\n+        stub(mock.oneArg(and(eq((float) 1), eq((float) 1)))).toReturn(\"4\");\n+        stub(mock.oneArg(and(eq((int) 1), eq((int) 1)))).toReturn(\"5\");\n+        stub(mock.oneArg(and(eq((long) 1), eq((long) 1)))).toReturn(\"6\");\n+        stub(mock.oneArg(and(eq((short) 1), eq((short) 1)))).toReturn(\"7\");\n+        stub(mock.oneArg(and(contains(\"a\"), contains(\"d\")))).toReturn(\"8\");\n+        stub(mock.oneArg(and(isA(Class.class), eq(Object.class)))).toReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(false));\n         assertEquals(null, mock.oneArg(true));\n     \n     @Test\n     public void orOverloaded() {\n-        stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n-        stub(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n-        stub(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n-        stub(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n-        stub(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n-        stub(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n-        stub(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n-        stub(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n-        stub(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n-        stub(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(or(eq(false), eq(true)))).toReturn(\"0\");\n+        stub(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).toReturn(\"1\");\n+        stub(mock.oneArg(or(eq((char) 1), eq((char) 2)))).toReturn(\"2\");\n+        stub(mock.oneArg(or(eq((double) 1), eq((double) 2)))).toReturn(\"3\");\n+        stub(mock.oneArg(or(eq((float) 1), eq((float) 2)))).toReturn(\"4\");\n+        stub(mock.oneArg(or(eq((int) 1), eq((int) 2)))).toReturn(\"5\");\n+        stub(mock.oneArg(or(eq((long) 1), eq((long) 2)))).toReturn(\"6\");\n+        stub(mock.oneArg(or(eq((short) 1), eq((short) 2)))).toReturn(\"7\");\n+        stub(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).toReturn(\"8\");\n+        stub(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).toReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(\"0\", mock.oneArg(false));\n \n     @Test\n     public void notOverloaded() {\n-        stub(mock.oneArg(not(eq(false)))).andReturn(\"0\");\n-        stub(mock.oneArg(not(eq((byte) 1)))).andReturn(\"1\");\n-        stub(mock.oneArg(not(eq('a')))).andReturn(\"2\");\n-        stub(mock.oneArg(not(eq((double) 1)))).andReturn(\"3\");\n-        stub(mock.oneArg(not(eq((float) 1)))).andReturn(\"4\");\n-        stub(mock.oneArg(not(eq((int) 1)))).andReturn(\"5\");\n-        stub(mock.oneArg(not(eq((long) 1)))).andReturn(\"6\");\n-        stub(mock.oneArg(not(eq((short) 1)))).andReturn(\"7\");\n-        stub(mock.oneArg(not(contains(\"a\")))).andReturn(\"8\");\n-        stub(mock.oneArg(not(isA(Class.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(not(eq(false)))).toReturn(\"0\");\n+        stub(mock.oneArg(not(eq((byte) 1)))).toReturn(\"1\");\n+        stub(mock.oneArg(not(eq('a')))).toReturn(\"2\");\n+        stub(mock.oneArg(not(eq((double) 1)))).toReturn(\"3\");\n+        stub(mock.oneArg(not(eq((float) 1)))).toReturn(\"4\");\n+        stub(mock.oneArg(not(eq((int) 1)))).toReturn(\"5\");\n+        stub(mock.oneArg(not(eq((long) 1)))).toReturn(\"6\");\n+        stub(mock.oneArg(not(eq((short) 1)))).toReturn(\"7\");\n+        stub(mock.oneArg(not(contains(\"a\")))).toReturn(\"8\");\n+        stub(mock.oneArg(not(isA(Class.class)))).toReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(null, mock.oneArg(false));\n \n     @Test\n     public void lessOrEqualOverloaded() {\n-        stub(mock.oneArg(leq((byte) 1))).andReturn(\"1\");\n-        stub(mock.oneArg(leq((double) 1))).andReturn(\"3\");\n-        stub(mock.oneArg(leq((float) 1))).andReturn(\"4\");\n-        stub(mock.oneArg(leq((int) 1))).andReturn(\"5\");\n-        stub(mock.oneArg(leq((long) 1))).andReturn(\"6\");\n-        stub(mock.oneArg(leq((short) 1))).andReturn(\"7\");\n-        stub(mock.oneArg(leq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        stub(mock.oneArg(leq((byte) 1))).toReturn(\"1\");\n+        stub(mock.oneArg(leq((double) 1))).toReturn(\"3\");\n+        stub(mock.oneArg(leq((float) 1))).toReturn(\"4\");\n+        stub(mock.oneArg(leq((int) 1))).toReturn(\"5\");\n+        stub(mock.oneArg(leq((long) 1))).toReturn(\"6\");\n+        stub(mock.oneArg(leq((short) 1))).toReturn(\"7\");\n+        stub(mock.oneArg(leq(new BigDecimal(\"1\")))).toReturn(\"8\");\n \n         assertEquals(\"1\", mock.oneArg((byte) 1));\n         assertEquals(null, mock.oneArg((byte) 2));\n \n     @Test\n     public void lessThanOverloaded() {\n-        stub(mock.oneArg(lt((byte) 1))).andReturn(\"1\");\n-        stub(mock.oneArg(lt((double) 1))).andReturn(\"3\");\n-        stub(mock.oneArg(lt((float) 1))).andReturn(\"4\");\n-        stub(mock.oneArg(lt((int) 1))).andReturn(\"5\");\n-        stub(mock.oneArg(lt((long) 1))).andReturn(\"6\");\n-        stub(mock.oneArg(lt((short) 1))).andReturn(\"7\");\n-        stub(mock.oneArg(lt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        stub(mock.oneArg(lt((byte) 1))).toReturn(\"1\");\n+        stub(mock.oneArg(lt((double) 1))).toReturn(\"3\");\n+        stub(mock.oneArg(lt((float) 1))).toReturn(\"4\");\n+        stub(mock.oneArg(lt((int) 1))).toReturn(\"5\");\n+        stub(mock.oneArg(lt((long) 1))).toReturn(\"6\");\n+        stub(mock.oneArg(lt((short) 1))).toReturn(\"7\");\n+        stub(mock.oneArg(lt(new BigDecimal(\"1\")))).toReturn(\"8\");\n \n         assertEquals(\"1\", mock.oneArg((byte) 0));\n         assertEquals(null, mock.oneArg((byte) 1));\n \n     @Test\n     public void greaterOrEqualMatcherOverloaded() {\n-        stub(mock.oneArg(geq((byte) 1))).andReturn(\"1\");\n-        stub(mock.oneArg(geq((double) 1))).andReturn(\"3\");\n-        stub(mock.oneArg(geq((float) 1))).andReturn(\"4\");\n-        stub(mock.oneArg(geq((int) 1))).andReturn(\"5\");\n-        stub(mock.oneArg(geq((long) 1))).andReturn(\"6\");\n-        stub(mock.oneArg(geq((short) 1))).andReturn(\"7\");\n-        stub(mock.oneArg(geq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        stub(mock.oneArg(geq((byte) 1))).toReturn(\"1\");\n+        stub(mock.oneArg(geq((double) 1))).toReturn(\"3\");\n+        stub(mock.oneArg(geq((float) 1))).toReturn(\"4\");\n+        stub(mock.oneArg(geq((int) 1))).toReturn(\"5\");\n+        stub(mock.oneArg(geq((long) 1))).toReturn(\"6\");\n+        stub(mock.oneArg(geq((short) 1))).toReturn(\"7\");\n+        stub(mock.oneArg(geq(new BigDecimal(\"1\")))).toReturn(\"8\");\n \n         assertEquals(\"1\", mock.oneArg((byte) 2));\n         assertEquals(null, mock.oneArg((byte) 0));\n \n     @Test\n     public void greaterThanMatcherOverloaded() {\n-        stub(mock.oneArg(gt((byte) 1))).andReturn(\"1\");\n-        stub(mock.oneArg(gt((double) 1))).andReturn(\"3\");\n-        stub(mock.oneArg(gt((float) 1))).andReturn(\"4\");\n-        stub(mock.oneArg(gt((int) 1))).andReturn(\"5\");\n-        stub(mock.oneArg(gt((long) 1))).andReturn(\"6\");\n-        stub(mock.oneArg(gt((short) 1))).andReturn(\"7\");\n-        stub(mock.oneArg(gt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        stub(mock.oneArg(gt((byte) 1))).toReturn(\"1\");\n+        stub(mock.oneArg(gt((double) 1))).toReturn(\"3\");\n+        stub(mock.oneArg(gt((float) 1))).toReturn(\"4\");\n+        stub(mock.oneArg(gt((int) 1))).toReturn(\"5\");\n+        stub(mock.oneArg(gt((long) 1))).toReturn(\"6\");\n+        stub(mock.oneArg(gt((short) 1))).toReturn(\"7\");\n+        stub(mock.oneArg(gt(new BigDecimal(\"1\")))).toReturn(\"8\");\n \n         assertEquals(\"1\", mock.oneArg((byte) 2));\n         assertEquals(null, mock.oneArg((byte) 1));\n \n     @Test\n     public void compareToMatcher() {\n-        stub(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+        stub(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).toReturn(\"0\");\n \n         assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n         assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n     \n     @Test\n     public void anyStringMatcher() {\n-        stub(mock.oneArg(anyString())).andReturn(\"1\");\n+        stub(mock.oneArg(anyString())).toReturn(\"1\");\n         \n         assertEquals(\"1\", mock.oneArg(\"\"));\n         assertEquals(\"1\", mock.oneArg(\"any string\"));\n \n     @Test\n     public void anyMatcher() {\n-        stub(mock.oneArg(anyBoolean())).andReturn(\"0\");\n-        stub(mock.oneArg(anyByte())).andReturn(\"1\");\n-        stub(mock.oneArg(anyChar())).andReturn(\"2\");\n-        stub(mock.oneArg(anyDouble())).andReturn(\"3\");\n-        stub(mock.oneArg(anyFloat())).andReturn(\"4\");\n-        stub(mock.oneArg(anyInt())).andReturn(\"5\");\n-        stub(mock.oneArg(anyLong())).andReturn(\"6\");\n-        stub(mock.oneArg(anyShort())).andReturn(\"7\");\n-        stub(mock.oneArg((String) anyObject())).andReturn(\"8\");\n-        stub(mock.oneArg(anyObject())).andReturn(\"9\");\n+        stub(mock.oneArg(anyBoolean())).toReturn(\"0\");\n+        stub(mock.oneArg(anyByte())).toReturn(\"1\");\n+        stub(mock.oneArg(anyChar())).toReturn(\"2\");\n+        stub(mock.oneArg(anyDouble())).toReturn(\"3\");\n+        stub(mock.oneArg(anyFloat())).toReturn(\"4\");\n+        stub(mock.oneArg(anyInt())).toReturn(\"5\");\n+        stub(mock.oneArg(anyLong())).toReturn(\"6\");\n+        stub(mock.oneArg(anyShort())).toReturn(\"7\");\n+        stub(mock.oneArg((String) anyObject())).toReturn(\"8\");\n+        stub(mock.oneArg(anyObject())).toReturn(\"9\");\n         \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(\"0\", mock.oneArg(false));\n     @Test\n     public void shouldArrayEqualsDealWithNullArray() throws Exception {\n         Object[] nullArray = null;\n-        stub(mock.oneArray(aryEq(nullArray))).andReturn(\"null\");\n+        stub(mock.oneArray(aryEq(nullArray))).toReturn(\"null\");\n \n         assertEquals(\"null\", mock.oneArray(nullArray));\n \n \n     @Test\n     public void arrayEqualsMatcher() {\n-        stub(mock.oneArray(aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n-        stub(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(\"1\");\n-        stub(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(\"2\");\n-        stub(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(\"3\");\n-        stub(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(\"4\");\n-        stub(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(\"5\");\n-        stub(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(\"6\");\n-        stub(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(\"7\");\n-        stub(mock.oneArray(aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n-        stub(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n+        stub(mock.oneArray(aryEq(new boolean[] { true, false, false }))).toReturn(\"0\");\n+        stub(mock.oneArray(aryEq(new byte[] { 1 }))).toReturn(\"1\");\n+        stub(mock.oneArray(aryEq(new char[] { 1 }))).toReturn(\"2\");\n+        stub(mock.oneArray(aryEq(new double[] { 1 }))).toReturn(\"3\");\n+        stub(mock.oneArray(aryEq(new float[] { 1 }))).toReturn(\"4\");\n+        stub(mock.oneArray(aryEq(new int[] { 1 }))).toReturn(\"5\");\n+        stub(mock.oneArray(aryEq(new long[] { 1 }))).toReturn(\"6\");\n+        stub(mock.oneArray(aryEq(new short[] { 1 }))).toReturn(\"7\");\n+        stub(mock.oneArray(aryEq(new String[] { \"Test\" }))).toReturn(\"8\");\n+        stub(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).toReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n         assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n \n     @Test\n     public void greaterOrEqualMatcher() {\n-        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n-        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+        stub(mock.oneArg(geq(7))).toReturn(\">= 7\");\n+        stub(mock.oneArg(lt(7))).toReturn(\"< 7\");\n \n         assertEquals(\">= 7\", mock.oneArg(7));\n         assertEquals(\">= 7\", mock.oneArg(8));\n \n     @Test\n     public void greaterThanMatcher() {\n-        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n-        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+        stub(mock.oneArg(gt(7))).toReturn(\"> 7\");\n+        stub(mock.oneArg(leq(7))).toReturn(\"<= 7\");\n \n         assertEquals(\"> 7\", mock.oneArg(8));\n         assertEquals(\"> 7\", mock.oneArg(9));\n \n     @Test\n     public void lessOrEqualMatcher() {\n-        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n-        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+        stub(mock.oneArg(leq(7))).toReturn(\"<= 7\");\n+        stub(mock.oneArg(gt(7))).toReturn(\"> 7\");\n \n         assertEquals(\"<= 7\", mock.oneArg(7));\n         assertEquals(\"<= 7\", mock.oneArg(6));\n \n     @Test\n     public void lessThanMatcher() {\n-        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n-        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+        stub(mock.oneArg(lt(7))).toReturn(\"< 7\");\n+        stub(mock.oneArg(geq(7))).toReturn(\">= 7\");\n \n         assertEquals(\"< 7\", mock.oneArg(5));\n         assertEquals(\"< 7\", mock.oneArg(6));\n \n     @Test\n     public void orMatcher() {\n-        stub(mock.oneArg(anyInt())).andReturn(\"other\");\n-        stub(mock.oneArg(or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n+        stub(mock.oneArg(anyInt())).toReturn(\"other\");\n+        stub(mock.oneArg(or(eq(7), eq(9)))).toReturn(\"7 or 9\");\n \n         assertEquals(\"other\", mock.oneArg(10));\n         assertEquals(\"7 or 9\", mock.oneArg(7));\n \n     @Test\n     public void nullMatcher() {\n-        stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).andReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\"))).andReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).toReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n \n     @Test\n     public void notNullMatcher() {\n-        stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), not(notNull()), eq(\"\"))).andReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).toReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), not(notNull()), eq(\"\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n \n     @Test\n     public void findMatcher() {\n-        stub(mock.oneArg(find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n+        stub(mock.oneArg(find(\"([a-z]+)\\\\d\"))).toReturn(\"1\");\n \n         assertEquals(\"1\", mock.oneArg(\"ab12\"));\n         assertEquals(null, mock.oneArg(\"12345\"));\n \n     @Test\n     public void matchesMatcher() {\n-        stub(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).andReturn(\"1\");\n-        stub(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).andReturn(\"2\");\n+        stub(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).toReturn(\"1\");\n+        stub(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"a12\"));\n         assertEquals(\"2\", mock.oneArg(\"131\"));\n \n     @Test\n     public void containsMatcher() {\n-        stub(mock.oneArg(contains(\"ell\"))).andReturn(\"1\");\n-        stub(mock.oneArg(contains(\"ld\"))).andReturn(\"2\");\n+        stub(mock.oneArg(contains(\"ell\"))).toReturn(\"1\");\n+        stub(mock.oneArg(contains(\"ld\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"hello\"));\n         assertEquals(\"2\", mock.oneArg(\"world\"));\n \n     @Test\n     public void startsWithMatcher() {\n-        stub(mock.oneArg(startsWith(\"ab\"))).andReturn(\"1\");\n-        stub(mock.oneArg(startsWith(\"bc\"))).andReturn(\"2\");\n+        stub(mock.oneArg(startsWith(\"ab\"))).toReturn(\"1\");\n+        stub(mock.oneArg(startsWith(\"bc\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n         assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n \n     @Test\n     public void endsWithMatcher() {\n-        stub(mock.oneArg(endsWith(\"ab\"))).andReturn(\"1\");\n-        stub(mock.oneArg(endsWith(\"bc\"))).andReturn(\"2\");\n+        stub(mock.oneArg(endsWith(\"ab\"))).toReturn(\"1\");\n+        stub(mock.oneArg(endsWith(\"bc\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"xab\"));\n         assertEquals(\"2\", mock.oneArg(\"xbc\"));\n \n     @Test\n     public void deltaMatcher() {\n-        stub(mock.oneArg(eq(1.0D, 0.1D))).andReturn(\"1\");\n-        stub(mock.oneArg(eq(2.0D, 0.1D))).andReturn(\"2\");\n-        stub(mock.oneArg(eq(1.0F, 0.1F))).andReturn(\"3\");\n-        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n-        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+        stub(mock.oneArg(eq(1.0D, 0.1D))).toReturn(\"1\");\n+        stub(mock.oneArg(eq(2.0D, 0.1D))).toReturn(\"2\");\n+        stub(mock.oneArg(eq(1.0F, 0.1F))).toReturn(\"3\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).toReturn(\"4\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).toReturn(\"4\");\n \n         assertEquals(\"1\", mock.oneArg(1.0));\n         assertEquals(\"1\", mock.oneArg(0.91));\n         assertEquals(one, two);\n         assertEquals(two, three);\n \n-        stub(mock.oneArg(same(one))).andReturn(\"1\");\n-        stub(mock.oneArg(same(two))).andReturn(\"2\");\n+        stub(mock.oneArg(same(one))).toReturn(\"1\");\n+        stub(mock.oneArg(same(two))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(one));\n         assertEquals(\"2\", mock.oneArg(two));\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n     \n     @Test\n     public void shouldStubUsingMatchers() {\n-        stub(one.simpleMethod(2)).andReturn(\"2\");\n-        stub(two.simpleMethod(anyString())).andReturn(\"any\");\n-        stub(three.simpleMethod(startsWith(\"test\"))).andThrow(new RuntimeException());\n+        stub(one.simpleMethod(2)).toReturn(\"2\");\n+        stub(two.simpleMethod(anyString())).toReturn(\"any\");\n+        stub(three.simpleMethod(startsWith(\"test\"))).toThrow(new RuntimeException());\n \n         assertEquals(null, one.simpleMethod(1));\n         assertEquals(\"2\", one.simpleMethod(2));\n     @Test\n     public void shouldVerifyUsingMatchers() {\n         stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);\n-        stub(three.varargsObject(5, \"first arg\", \"second arg\")).andReturn(\"stubbed\");\n+        stub(three.varargsObject(5, \"first arg\", \"second arg\")).toReturn(\"stubbed\");\n \n         try {\n             one.oneArg(true);\n--- a/test/org/mockitousage/sample/MockitoSampleTest.java\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n         \n         ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n \n-        stub(mockCalculator.countArticles(\"Guardian\")).andReturn(12);\n-        stub(mockCalculator.countArticlesInPolish(\"Guardian\")).andReturn(5);\n+        stub(mockCalculator.countArticles(\"Guardian\")).toReturn(12);\n+        stub(mockCalculator.countArticlesInPolish(\"Guardian\")).toReturn(5);\n         \n         articleManager.updateArticleCounters(\"Guardian\");\n         \n         Article articleTwo = new Article();\n         Article articleThree = new Article();\n         \n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(1);\n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(12);\n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(0);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(1);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(12);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(0);\n         \n-        stub(mockDatabase.getArticlesFor(\"Guardian\")).andReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n+        stub(mockDatabase.getArticlesFor(\"Guardian\")).toReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n         \n         articleManager.updateRelatedArticlesCounters(\"Guardian\");\n \n         Article articleOne = new Article();\n         Article articleTwo = new Article();\n         \n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(1);\n-        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(12);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(1);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).toReturn(12);\n         \n-        stub(mockDatabase.getArticlesFor(\"Guardian\")).andReturn(Arrays.asList(articleOne, articleTwo)); \n+        stub(mockDatabase.getArticlesFor(\"Guardian\")).toReturn(Arrays.asList(articleOne, articleTwo)); \n         \n         articleManager.updateRelatedArticlesCounters(\"Guardian\");\n \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n     \n     @Test\n     public void shouldEvaluateLatestStubbingFirst() throws Exception {\n-        stub(mock.objectReturningMethod(isA(Integer.class))).andReturn(100);\n-        stub(mock.objectReturningMethod(200)).andReturn(200);\n+        stub(mock.objectReturningMethod(isA(Integer.class))).toReturn(100);\n+        stub(mock.objectReturningMethod(200)).toReturn(200);\n         \n         assertEquals(200, mock.objectReturningMethod(200));\n         assertEquals(100, mock.objectReturningMethod(666));\n     \n     @Test\n     public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n-        stub(mock.booleanReturningMethod(1)).andReturn(true);\n+        stub(mock.booleanReturningMethod(1)).toReturn(true);\n         \n         mock.booleanReturningMethod(1);\n         \n     \n     @Test\n     public void shouldStubbingWithThrowableFailVerification() {\n-        stub(mock.simpleMethod(\"one\")).andThrow(new RuntimeException());\n+        stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n         stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(\"two\");\n         \n         verifyZeroInteractions(mock);\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n     @Test\n     public void shouldStubWithThrowable() throws Exception {\n         IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n-        stub(mock.add(\"throw\")).andThrow(expected);\n+        stub(mock.add(\"throw\")).toThrow(expected);\n         \n         try {\n             mock.add(\"throw\");\n     \n     @Test\n     public void shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation() throws Exception {\n-        stub(mock.get(1)).andThrow(new ExceptionOne());\n-        \n-        try {\n-            stub(mock.get(1)).andThrow(new ExceptionTwo());\n+        stub(mock.get(1)).toThrow(new ExceptionOne());\n+        \n+        try {\n+            stub(mock.get(1)).toThrow(new ExceptionTwo());\n             fail();\n         } catch (ExceptionOne e) {}\n     }   \n         Reader reader = mock(Reader.class);\n         IOException ioException = new IOException();\n         \n-        stub(reader.read()).andThrow(ioException);\n+        stub(reader.read()).toThrow(ioException);\n         \n         try {\n             reader.read();\n     public void shouldAllowSettingError() throws Exception {\n         Error error = new Error();\n         \n-        stub(mock.add(\"quake\")).andThrow(error);\n+        stub(mock.add(\"quake\")).toThrow(error);\n         \n         try {\n             mock.add(\"quake\");\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n-        stub(mock.add(\"monkey island\")).andThrow(new Exception());\n+        stub(mock.add(\"monkey island\")).toThrow(new Exception());\n     }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n-        stub(mock.add(\"monkey island\")).andThrow(null);\n+        stub(mock.add(\"monkey island\")).toThrow(null);\n     }    \n     \n     @Test\n     public void shouldMixThrowablesAndReturnValuesOnDifferentMocks() throws Exception {\n-        stub(mock.add(\"ExceptionOne\")).andThrow(new ExceptionOne());\n-        stub(mock.getLast()).andReturn(\"last\");\n+        stub(mock.add(\"ExceptionOne\")).toThrow(new ExceptionOne());\n+        stub(mock.getLast()).toReturn(\"last\");\n         stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();\n         \n         stubVoid(mockTwo).toThrow(new ExceptionThree()).on().clear();\n-        stub(mockTwo.containsValue(\"ExceptionFour\")).andThrow(new ExceptionFour());\n-        stub(mockTwo.get(\"Are you there?\")).andReturn(\"Yes!\");\n+        stub(mockTwo.containsValue(\"ExceptionFour\")).toThrow(new ExceptionFour());\n+        stub(mockTwo.get(\"Are you there?\")).toReturn(\"Yes!\");\n \n         assertNull(mockTwo.get(\"foo\"));\n         assertTrue(mockTwo.keySet().isEmpty());\n     \n     @Test\n     public void shouldStubbingWithThrowableBeVerifiable() {\n-        stub(mock.size()).andThrow(new RuntimeException());\n+        stub(mock.size()).toThrow(new RuntimeException());\n         stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n         \n         try {\n     \n     @Test\n     public void shouldStubbingWithThrowableFailVerification() {\n-        stub(mock.size()).andThrow(new RuntimeException());\n+        stub(mock.size()).toThrow(new RuntimeException());\n         stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n         \n         verifyZeroInteractions(mock);\n--- a/test/org/mockitousage/verification/BasicVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationTest.java\n \n     @Test\n     public void shouldVerifyStubbedMethods() throws Exception {\n-        stub(mock.add(\"test\")).andReturn(Boolean.FALSE);\n+        stub(mock.add(\"test\")).toReturn(Boolean.FALSE);\n         \n         mock.add(\"test\");\n         \n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n \n     @Test\n     public void shouldNotCountInStubbedInvocations() throws Exception {\n-        stub(mock.add(\"test\")).andReturn(false);\n-        stub(mock.add(\"test\")).andReturn(true);\n+        stub(mock.add(\"test\")).toReturn(false);\n+        stub(mock.add(\"test\")).toReturn(true);\n \n         mock.add(\"test\");\n         mock.add(\"test\");\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n \n     @Test\n     public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {\n-        stub(mock.add(\"one\")).andReturn(true);\n-        stub(mock.add(\"two\")).andReturn(true);\n+        stub(mock.add(\"one\")).toReturn(true);\n+        stub(mock.add(\"two\")).toReturn(true);\n \n         mock.add(\"one\");\n         ", "timestamp": 1198953987, "metainfo": ""}