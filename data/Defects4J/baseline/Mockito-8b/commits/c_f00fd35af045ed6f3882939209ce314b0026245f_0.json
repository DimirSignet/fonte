{"sha": "f00fd35af045ed6f3882939209ce314b0026245f", "log": "further refactoring around verification  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40935", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n package org.mockito.internal;\n \n import java.lang.reflect.Method;\n-import java.util.Arrays;\n import java.util.List;\n \n import net.sf.cglib.proxy.MethodProxy;\n \n import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.creation.MockAwareInterceptor;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.stubbing.ThrowsException;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n-import org.mockito.internal.verification.MissingInvocationInOrderVerifier;\n-import org.mockito.internal.verification.MissingInvocationVerifier;\n-import org.mockito.internal.verification.NoMoreInvocationsVerifier;\n-import org.mockito.internal.verification.NumberOfInvocationsInOrderVerifier;\n-import org.mockito.internal.verification.NumberOfInvocationsVerifier;\n import org.mockito.internal.verification.VerificationMode;\n import org.mockito.internal.verification.VerificationModeImpl;\n-import org.mockito.internal.verification.Verifier;\n import org.mockito.internal.verification.VerifyingRecorder;\n import org.mockito.stubbing.Answer;\n \n         this.matchersBinder = matchersBinder;\n         this.mockitoStubber = new MockitoStubber(mockingProgress);\n \n-        verifyingRecorder = createRecorder();\n+        verifyingRecorder = new VerifyingRecorder();\n     }\n     \n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n         return mockName;\n     }\n \n-    private VerifyingRecorder createRecorder() {\n-        List<Verifier> verifiers = Arrays.asList(\n-                new MissingInvocationInOrderVerifier(),\n-                new NumberOfInvocationsInOrderVerifier(),\n-                new MissingInvocationVerifier(),\n-                new NumberOfInvocationsVerifier(),\n-                new NoMoreInvocationsVerifier());\n-        return new VerifyingRecorder(new AllInvocationsFinder(), verifiers);\n-    }\n-\n     private final class VoidMethodStubbableImpl implements VoidMethodStubbable<T> {\n         private final T mock;\n \n--- a/src/org/mockito/internal/verification/BasicVerificationMode.java\n+++ b/src/org/mockito/internal/verification/BasicVerificationMode.java\n  */\n package org.mockito.internal.verification;\n \n-import java.util.Arrays;\n import java.util.List;\n \n import org.mockito.internal.invocation.Invocation;\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n-        List<Verifier> verifiers = Arrays.asList(\n-                new MissingInvocationVerifier(),\n-                new NumberOfInvocationsVerifier());\n+        MissingInvocationVerifier missingInvocation = new MissingInvocationVerifier();\n+        NumberOfInvocationsVerifier numberOfInvocations = new NumberOfInvocationsVerifier();\n         \n-        for (Verifier verifier : verifiers) {\n-            if (verifier.appliesTo(this)) {\n-                verifier.verify(invocations, wanted, this);\n-            }\n+        //TODO duplicated\n+        if (wantedCount() > 0 || (verification == Verification.AT_LEAST && wantedCount() == 1)) {\n+            missingInvocation.verify(invocations, wanted, this);\n         }\n+        numberOfInvocations.verify(invocations, wanted, this);\n     }\n }\n--- a/src/org/mockito/internal/verification/InOrderVerificationMode.java\n+++ b/src/org/mockito/internal/verification/InOrderVerificationMode.java\n  */\n package org.mockito.internal.verification;\n \n-import java.util.Arrays;\n import java.util.List;\n \n import org.mockito.internal.invocation.AllInvocationsFinder;\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n         invocations = new AllInvocationsFinder().getAllInvocations(this.getMocksToBeVerifiedInOrder());\n \n-        List<Verifier> verifiers = Arrays.asList(\n-                new MissingInvocationInOrderVerifier(),\n-                new NumberOfInvocationsInOrderVerifier());\n+        MissingInvocationInOrderVerifier missingInvocation = new MissingInvocationInOrderVerifier();\n+        NumberOfInvocationsInOrderVerifier numberOfCalls = new NumberOfInvocationsInOrderVerifier();\n         \n-        for (Verifier verifier : verifiers) {\n-            if (verifier.appliesTo(this)) {\n-                verifier.verify(invocations, wanted, this);\n-            }\n+        if (wantedCount() > 0 || (verification == Verification.AT_LEAST && wantedCount() == 1)) {\n+            missingInvocation.verify(invocations, wanted, this);\n         }\n+\n+        numberOfCalls.verify(invocations, wanted, this);\n     }\n }\n--- a/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n \n-public class MissingInvocationInOrderVerifier implements Verifier {\n+public class MissingInvocationInOrderVerifier {\n     \n     private final Reporter reporter;\n     private final InvocationsFinder finder;\n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationMode mode) {\n-        return new VerificationModeDecoder(mode).missingMethodInOrderMode();\n-    }\n-\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n         \n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n \n-public class MissingInvocationVerifier implements Verifier {\n+public class MissingInvocationVerifier {\n     \n     private final Reporter reporter;\n     private final InvocationsFinder finder;\n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationMode mode) {\n-        return new VerificationModeDecoder(mode).missingMethodMode();\n-    }\n-\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n \n-public class NoMoreInvocationsVerifier implements Verifier {\n+public class NoMoreInvocationsVerifier {\n \n     private final Reporter reporter;\n     private final InvocationsFinder finder;\n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationMode mode) {\n-        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n-        return !decoder.explicitMode() && !decoder.atLeastMode();\n-    }\n-\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         Invocation unverified = finder.findFirstUnverified(invocations);\n         if (unverified != null) {\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n \n-public class NumberOfInvocationsInOrderVerifier implements Verifier {\n+public class NumberOfInvocationsInOrderVerifier {\n     \n     private final Reporter reporter;\n     private final InvocationsFinder finder;\n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationMode mode) {\n-        return new VerificationModeDecoder(mode).inOrderMode();\n-    }\n-\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode);\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n \n-public class NumberOfInvocationsVerifier implements Verifier {\n+public class NumberOfInvocationsVerifier {\n     \n     private final Reporter reporter;\n     private final InvocationsFinder finder;\n     NumberOfInvocationsVerifier(Reporter reporter, InvocationsFinder finder) {\n         this.reporter = reporter;\n         this.finder = finder;\n-    }\n-    \n-    public boolean appliesTo(VerificationMode mode) {\n-        return new VerificationModeDecoder(mode).exactNumberOfInvocationsMode();\n     }\n     \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n \n import java.util.List;\n \n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n \n+//TODO is this class necessary?\n public class VerifyingRecorder {\n \n     private RegisteredInvocations registeredInvocations = new RegisteredInvocations();\n-\n-    private final List<? extends Verifier> verifiers;\n-    private final AllInvocationsFinder invocationsFinder;\n-\n-    public VerifyingRecorder(AllInvocationsFinder globalInvocationsFinder, List<? extends Verifier> verifiers) {\n-        this.invocationsFinder = globalInvocationsFinder;\n-        this.verifiers = verifiers;\n-    }\n \n     public void recordInvocation(Invocation invocation) {\n         registeredInvocations.add(invocation);\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n package org.mockito.internal.verification;\n \n import static java.util.Arrays.*;\n-import static org.mockito.internal.verification.VerificationModeImpl.*;\n \n import java.util.LinkedList;\n \n         invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     }                                                                    \n \n-    @Test\n-    public void shouldNeverVerifyIfModeIsNotMissingInvocationInOrderMode() throws Exception {\n-        assertFalse(verifier.appliesTo(atLeastOnce()));\n-    }\n-    \n     @Test\n     public void shouldPassWhenMatchingInteractionFound() throws Exception {\n         Invocation actual = new InvocationBuilder().toInvocation();\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n         invocations = asList(new InvocationBuilder().toInvocation());\n-    }\n-    \n-    @Test\n-    public void shouldNeverVerifyWhenModeIsNotMissingMethodMode() {\n-        assertFalse(verifier.appliesTo(noMoreInteractions()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n     }\n     \n     @Test\n-    public void shouldNeverVerifyWhenVerificationIsExplicit() throws Exception {\n-        assertFalse(verifier.appliesTo(VerificationModeImpl.times(1)));\n-    }\n-\n-    @Test\n-    public void shouldNeverVerifyWhenVerificationIsInAtLeastMode() throws Exception {\n-        assertFalse(verifier.appliesTo(VerificationModeImpl.atLeastOnce()));\n-    }\n-    \n-    @Test\n     public void shouldPassVerification() throws Exception {\n         finder.firstUnverifiedToReturn = null;\n         verifier.verify(null, null, VerificationModeImpl.noMoreInteractions());\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n package org.mockito.internal.verification;\n \n import static java.util.Arrays.*;\n-import static org.mockito.internal.verification.VerificationModeImpl.*;\n \n import java.util.LinkedList;\n \n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n         invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n-    }\n-    \n-    @Test\n-    public void shouldNeverVerifyIfModeIsNotInOrder() throws Exception {\n-        assertFalse(verifier.appliesTo(atLeastOnce()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsVerifierTest extends TestBase {\n         invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n     }\n \n-    @Test\n-    public void shouldNeverVerifyWhenNotModeIsInOrder() throws Exception {\n-        assertFalse(verifier.appliesTo(new VerificationModeBuilder().inOrder()));\n-    }\n-    \n     @Test\n     public void shouldReportTooLittleActual() throws Exception {\n         VerificationMode mode = times(100);\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n  */\n package org.mockito.internal.verification;\n \n-import static java.util.Arrays.*;\n-import static org.mockitoutil.ExtraMatchers.*;\n-\n-import java.util.List;\n-\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n-import org.mockito.internal.invocation.CanPrintInMultilines;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n-import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockitoutil.TestBase;\n \n @Ignore\n public class VerifyingRecorderTest extends TestBase {\n     \n     private VerifyingRecorder recorder;\n-    private VerifierStub verifierStub;\n-    \n-    private Invocation simpleMethod;\n-    private InvocationMatcher differentMethod;\n     \n     @Before\n     public void setup() {\n-        verifierStub = new VerifierStub();\n-        recorder = new VerifyingRecorder(new AllInvocationsFinder() {\n-            public List<Invocation> getAllInvocations(List<? extends Object> mocks) {\n-                return asList(simpleMethod, differentMethod.getInvocation());\n-            }}, asList(verifierStub));\n-\n-        simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n-        differentMethod = new InvocationBuilder().differentMethod().toInvocationMatcher();\n-    }\n-    \n-    @Test\n-    public void shouldVerify() {\n-        recorder.recordInvocation(simpleMethod);\n-        \n-        VerificationMode mode = VerificationModeImpl.atLeastOnce();\n-        recorder.verify(differentMethod, mode);\n-        \n-        assertSame(verifierStub.mode, mode);\n-        assertSame(verifierStub.wanted, differentMethod);\n-        assertThat(verifierStub.invocations, hasExactlyInOrder(simpleMethod));\n-    }\n-    \n-    @Test\n-    public void shouldVerifyInOrder() {\n-        VerificationMode inOrderMode = new VerificationModeBuilder().inOrder();\n-        recorder.verify(differentMethod, inOrderMode);\n-        \n-        assertThat(verifierStub.invocations, hasExactlyInOrder(simpleMethod, differentMethod.getInvocation()));\n+        recorder = new VerifyingRecorder();\n     }\n     \n     @Test\n         assertTrue(recorder.getRegisteredInvocations().contains(simpleMethod));\n         assertFalse(recorder.getRegisteredInvocations().contains(toString));\n     }\n-    \n-    class VerifierStub implements Verifier {\n-        private List<Invocation> invocations;\n-        private CanPrintInMultilines wanted;\n-        private VerificationMode mode;\n-        public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n-            this.invocations = invocations;\n-            this.wanted = wanted;\n-            this.mode = mode;\n-        }\n-        public boolean appliesTo(VerificationMode mode) {\n-            return true;\n-        }\n-    }\n }", "timestamp": 1223635815, "metainfo": ""}