{"sha": "3658876bfe641290844c7378da991952bbfcaa05", "log": "Made certain things simpler + further refactoring to get rid of cause-based stack traces  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401294", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/exceptions/Discrepancy.java\n+package org.mockito.exceptions;\n+\n+public class Discrepancy {\n+\n+    private final int wantedCount;\n+    private final int actualCount;\n+\n+    public Discrepancy(int wantedCount, int actualCount) {\n+        this.wantedCount = wantedCount;\n+        this.actualCount = actualCount;\n+    }\n+\n+    public int getWantedCount() {\n+        return wantedCount;\n+    }\n+    \n+    public String getPluralizedWantedCount() {\n+        return Pluralizer.pluralize(wantedCount);\n+    }\n+\n+    public int getActualCount() {\n+        return actualCount;\n+    }\n+\n+    public String getPluralizedActualCount() {\n+        return Pluralizer.pluralize(actualCount);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/exceptions/Pluralizer.java\n+package org.mockito.exceptions;\n+\n+public class Pluralizer {\n+\n+    public static String pluralize(int number) {\n+        return number == 1 ? \"1 time\" : number + \" times\";\n+    }\n+}\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n  */\n package org.mockito.exceptions;\n \n+import static org.mockito.exceptions.Pluralizer.*;\n import static org.mockito.internal.util.StringJoiner.*;\n \n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n  */\n public class Reporter {\n \n-    private String pluralize(int number) {\n-        return number == 1 ? \"1 time\" : number + \" times\";\n-    }\n-\n     public void checkedExceptionInvalid(Throwable t) {\n         throw new MockitoException(join(\n                 \"Checked exception is invalid for this method!\",\n             HasStackTrace firstUndesired) {\n         return join(\n                 wanted.toString(),\n-                \"Wanted \" + pluralize(wantedCount) + \":\",\n+                \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n                 \"-> at \" + new Location(),\n                 \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                 \"-> at \" + firstUndesired.getStackTrace()[0],\n                 ));\n     }\n \n-    private String createTooLittleInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n+    private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n             HasStackTrace lastActualStackTrace) {\n         String ending = \n             (lastActualStackTrace != null)? \"-> at \" + lastActualStackTrace.getStackTrace()[0] + \"\\n\" : \"\\n\";\n             \n             String message = join(\n                     wanted.toString(),\n-                    \"Wanted \" + pluralize(wantedCount) + \":\",\n+                    \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n                     \"-> at \" + new Location(),\n-                    \"But was \" + pluralize(actualCount) + \":\", \n+                    \"But was \" + discrepancy.getPluralizedActualCount() + \":\", \n                     ending\n             );\n             return message;\n     }\n    \n-    public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n-        String message = createTooLittleInvocationsMessage(wantedCount, actualCount, wanted, lastActualStackTrace);\n+    public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n+        String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualStackTrace);\n         \n         throw new TooLittleActualInvocations(message);\n     }\n     \n-    public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n-        String message = createTooLittleInvocationsMessage(wantedCount, actualCount, wanted, lastActualStackTrace);\n+    public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n+        String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualStackTrace);\n         \n         throw new VerifcationInOrderFailure(join(\n                 \"Verification in order failure:\" + message\n                 ));\n     }\n     \n-    private TooLittleInvocations createTooLittleInvocationsCause(HasStackTrace lastActualInvocationStackTrace) {\n-        TooLittleInvocations cause = null;\n-        if (lastActualInvocationStackTrace != null) {\n-            cause = new TooLittleInvocations(join(\"Too little invocations:\"));\n-            cause.setStackTrace(lastActualInvocationStackTrace.getStackTrace());\n-        }\n-        return cause;\n-    }\n-\n     public void noMoreInteractionsWanted(PrintableInvocation undesired, HasStackTrace actualInvocationStackTrace) {\n         UndesiredInvocation cause = new UndesiredInvocation(join(\n                 \"Undesired invocation:\", \n                 \"Above means:\",\n                 \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n              ));\n-    }\n-\n-    public void tooLittleActualInvocationsInAtLeastMode(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {        \n-        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualInvocationStackTrace);\n-\n-        throw new TooLittleActualInvocations(join(\n-            wanted.toString(),\n-            \"Wanted at least \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n-    }\n-    \n-    public void tooLittleActualInvocationsInOrderInAtLeastMode(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n-        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n-\n-        throw new VerifcationInOrderFailure(join(\n-                \"Verification in order failure\",\n-                wanted.toString(),\n-                \"Wanted at least \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n     }\n \n     public void wrongTypeOfReturnValue(String expectedType, String actualType, String method) {\n--- a/src/org/mockito/exceptions/verification/VerifcationInOrderFailure.java\n+++ b/src/org/mockito/exceptions/verification/VerifcationInOrderFailure.java\n \n import org.mockito.exceptions.base.MockitoAssertionError;\n \n+//TODO fix the typo: Verifcation\n public class VerifcationInOrderFailure extends MockitoAssertionError {\n \n     private static final long serialVersionUID = 1L;\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java\n+package org.mockito.internal.verification.checkers;\n+\n+import org.mockito.exceptions.Discrepancy;\n+\n+public class AtLeastDiscrepancy extends Discrepancy {\n+\n+    public AtLeastDiscrepancy(int wantedCount, int actualCount) {\n+        super(wantedCount, actualCount);\n+    }\n+    \n+    @Override\n+    public String getPluralizedWantedCount() {\n+        return \"*at least* \" + super.getPluralizedWantedCount();\n+    }\n+}\n--- a/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n         int actualCount = actualInvocations.size();\n         if (wantedCount > actualCount) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n-            reporter.tooLittleActualInvocationsInAtLeastMode(wantedCount, actualCount, wanted, lastInvocation);        \n+            reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastInvocation);        \n         }\n         \n         for (Invocation i : actualInvocations) {\n--- a/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java\n         \n         if (wantedCount > actualCount) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n-            reporter.tooLittleActualInvocationsInOrderInAtLeastMode(wantedCount, actualCount, wanted, lastInvocation);\n+            reporter.tooLittleActualInvocationsInOrder(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastInvocation);\n         }\n         \n         for (Invocation i : chunk) {\n--- a/src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java\n \n import java.util.List;\n \n+import org.mockito.exceptions.Discrepancy;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n         int actualCount = actualInvocations.size();\n         if (wantedCount > actualCount) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n-            reporter.tooLittleActualInvocations(wantedCount, actualCount, wanted, lastInvocation);\n+            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n         } else if (wantedCount == 0 && actualCount > 0) {\n             HasStackTrace firstUndesired = actualInvocations.get(wantedCount).getStackTrace();\n             reporter.neverWantedButInvoked(wanted, firstUndesired); \n--- a/src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java\n \n import java.util.List;\n \n+import org.mockito.exceptions.Discrepancy;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n         \n         if (wantedCount > actualCount) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n-            reporter.tooLittleActualInvocationsInOrder(wantedCount, actualCount, wanted, lastInvocation);\n+            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n         } else if (wantedCount < actualCount) {\n             HasStackTrace firstUndesired = chunk.get(wantedCount).getStackTrace();\n             reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n--- a/test/org/mockito/exceptions/ReporterTest.java\n+++ b/test/org/mockito/exceptions/ReporterTest.java\n \n     @Test(expected=TooLittleActualInvocations.class)\n     public void shouldLetPassingNullLastActualStackTrace() throws Exception {\n-        new Reporter().tooLittleActualInvocations(1, 2, new InvocationBuilder().toInvocation(), null);\n+        new Reporter().tooLittleActualInvocations(new Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);\n     }\n }\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.exceptions.Discrepancy;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n         private int actualCount;\n         private PrintableInvocation wanted;\n         private HasStackTrace stackTrace;\n-        @Override public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {\n-                    this.wantedCount = wantedCount;\n-                    this.actualCount = actualCount;\n+        @Override public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {\n+                    this.wantedCount = discrepancy.getWantedCount();\n+                    this.actualCount = discrepancy.getActualCount();\n                     this.wanted = wanted;\n                     this.stackTrace = lastActualInvocationStackTrace;\n         }", "timestamp": 1238768976, "metainfo": ""}