{"sha": "c4a6f9cb64d4af2e7bb9736e0a2903368fcf2135", "log": "deep stubs can now handle argument matchers in nested calls when verifying  --HG-- extra : transplant_source : %ED4%9Fs%1AC%11PZP%95_%F4U%C1%96%90%FB%0D%E0", "commit": "\n--- a/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n+++ b/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n     public Object invokedMock() {\n         return invocationForStubbing.getInvocation().getMock();\n     }\n+    \n+    public InvocationMatcher getInvocationForStubbing() {\n+    \treturn invocationForStubbing;\n+    }\n }\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n \n package org.mockito.internal.stubbing.defaultanswers;\n \n+import java.io.Serializable;\n+import java.util.List;\n+\n import org.mockito.Mockito;\n import org.mockito.internal.MockHandlerInterface;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n-\n-import java.io.Serializable;\n \n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n         return getMock(invocation);\n     }\n \n-    private Object getMock(InvocationOnMock invocation) {\n+    private Object getMock(InvocationOnMock invocation) throws Throwable {\n+    \tMockHandlerInterface<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n+    \tInvocationContainerImpl container = (InvocationContainerImpl)handler.getInvocationContainer();\n+    \tList<StubbedInvocationMatcher> stubbedInvocations = container.getStubbedInvocations();\n+    \tfor (StubbedInvocationMatcher stubbedInvocationMatcher : stubbedInvocations) {\n+    \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n+    \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n+    \t\t}\n+\t\t}\n+    \t\n         Class<?> clz = invocation.getMethod().getReturnType();\n         final Object mock = Mockito.mock(clz, this);\n \n-        MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n-        InvocationContainerImpl container = (InvocationContainerImpl)handler.getInvocationContainer();\n         container.addAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n                 return mock;\n--- a/test/org/mockitousage/stubbing/DeepStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/DeepStubbingTest.java\n \n package org.mockitousage.stubbing;\n \n-import static org.mockito.BDDMockito.*;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n import java.io.ByteArrayOutputStream;\n import java.io.OutputStream;\n \n         public Address getAddress() {\n             return address;\n+        }\n+        \n+        public Address getAddress(String addressName) {\n+        \treturn address;\n         }\n         \n         public FinalClass getFinalClass() {\n         \n         //then\n         verify(person.getAddress().getStreet()).getName();\n-    }   \n+    }\n+    \n+    @Test\n+\tpublic void shouldVerificationWorkWithArgumentMatchersInNestedCalls() throws Exception {\n+\t\t//given\n+    \tperson.getAddress(\"111 Mock Lane\").getStreet();\n+\t\t\n+\t\t//then\n+    \tverify(person.getAddress(anyString())).getStreet();\n+\t}\n     \n     @Test\n     public void shouldFailGracefullyWhenClassIsFinal() throws Exception {", "timestamp": 1312393372, "metainfo": ""}