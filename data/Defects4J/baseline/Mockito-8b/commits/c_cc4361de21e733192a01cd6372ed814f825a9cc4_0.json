{"sha": "cc4361de21e733192a01cd6372ed814f825a9cc4", "log": "issue 233: better reporting of why the ClassCastException might happen", "commit": "\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n \n package org.mockito.internal.creation.jmock;\n \n-import java.lang.reflect.*;\n-import java.util.List;\n-\n-import org.mockito.cglib.core.*;\n+import org.mockito.cglib.core.CodeGenerationException;\n+import org.mockito.cglib.core.NamingPolicy;\n+import org.mockito.cglib.core.Predicate;\n import org.mockito.cglib.proxy.*;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.internal.creation.cglib.MockitoNamingPolicy;\n import org.objenesis.ObjenesisStd;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.List;\n+\n+import static org.mockito.internal.util.StringJoiner.join;\n \n /**\n  * Thanks to jMock guys for this handy class that wraps all the cglib magic. \n             setConstructorsAccessible(mockedType, true);\n             Class<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\n             return mockedType.cast(createProxy(proxyClass, interceptor));\n+        } catch (ClassCastException cce) {\n+            throw new MockitoException(join(\n+                \"ClassCastException occurred when creating the proxy.\",\n+                \"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)\"\n+            ), cce);\n         } finally {\n             setConstructorsAccessible(mockedType, false);\n         }\n--- a/test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java\n+++ b/test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java\n \n import org.fest.assertions.Condition;\n import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.configuration.ConfigurationAccess;\n \n import java.net.MalformedURLException;\n \n         try {\n             doInNewChildRealm(testMethodClassLoaderRealm, \"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking\");\n-            fail(\"should have raised a ClasCastException when Objenis Cache is enabled\");\n-        } catch (ClassCastException e) {\n-            assertThat(e).satisfies(thatCceIsThrownFrom(\"org.mockito.internal.creation.jmock.ClassImposterizer.imposterise\"));\n+            fail(\"should have raised a ClassCastException when Objenis Cache is enabled\");\n+        } catch (MockitoException e) {\n+            assertThat(e.getMessage())\n+                    .containsIgnoringCase(\"classloading\")\n+                    .containsIgnoringCase(\"objenesis\")\n+                    .containsIgnoringCase(\"MockitoConfiguration\");\n+            assertThat(e.getCause())\n+                    .satisfies(thatCceIsThrownFrom(\"java.lang.Class.cast\"))\n+                    .satisfies(thatCceIsThrownFrom(\"org.mockito.internal.creation.jmock.ClassImposterizer.imposterise\"));\n         }\n     }\n \n         return new Condition<Throwable>() {\n             @Override\n             public boolean matches(Throwable throwable) {\n-                return throwable.getStackTrace()[1].toString().contains(stacktraceElementDescription);\n+                StackTraceElement[] stackTrace = throwable.getStackTrace();\n+                for (StackTraceElement stackTraceElement : stackTrace) {\n+                    if (stackTraceElement.toString().contains(stacktraceElementDescription)) {\n+                        return true;\n+                    }\n+                }\n+\n+                return false;\n             }\n         };\n     }\n \n     public static class DoTheMocking implements Callable {\n         public Object call() throws Exception {\n-            Class clazz = this.getClass().getClassLoader().loadClass(\"org.mockitousage.MethodsImpl\");\n+            Class clazz = this.getClass().getClassLoader().loadClass(\"org.mockitousage.configuration.ClassToBeMocked\");\n             return mock(clazz);\n         }\n     }\n         return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n             public boolean needReload(String qualifiedName) {\n                 return \"org.mockitousage.configuration.ClassCacheVersusClassReloadingTest$DoTheMocking\".equals(qualifiedName)\n-                    || \"org.mockitousage.MethodsImpl\".equals(qualifiedName);\n+                    || \"org.mockitousage.configuration.ClassToBeMocked\".equals(qualifiedName);\n             }\n         };\n     }\n     private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadMockito() {\n         return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n             public boolean needReload(String qualifiedName) {\n-                return qualifiedName.contains(\"org.mockito\")\n-                        && !qualifiedName.contains(\"org.mockito.cglib\");\n+                return (!qualifiedName.contains(\"org.mockito.cglib\") && qualifiedName.contains(\"org.mockito\"));\n             }\n         };\n     }\n         public SimplePerRealmReloadingClassLoader(ClassLoader parentClassLoader, ReloadClassPredicate reloadClassPredicate) {\n             super(new URL[]{\n                     obtainClassPath(),\n-                    obtainClassPath(\"org.mockito.Mockito\")\n+                    obtainClassPath(\"org.mockito.Mockito\"),\n             }, parentClassLoader);\n             this.reloadClassPredicate = reloadClassPredicate;\n         }\n         public Class<?> loadClass(String qualifiedName) throws ClassNotFoundException {\n             if(reloadClassPredicate.needReload(qualifiedName)) {\n                 // return customLoadClass(qualifiedName);\n-                return findClass(qualifiedName);\n+                Class<?> foundClass = findClass(qualifiedName);\n+                return foundClass;\n             }\n             return super.loadClass(qualifiedName);\n         }\n--- /dev/null\n+++ b/test/org/mockitousage/configuration/ClassToBeMocked.java\n+package org.mockitousage.configuration;\n+\n+/**\n+ * Some class to mock\n+ */\n+public class ClassToBeMocked { }", "timestamp": 1319555053, "metainfo": ""}