{"sha": "beb51da641e71bac0f55896928f3d1cc81d5ec13", "log": "big check-in 'coz worked offline: changed base class for test to add initializing annotated mocks fixed some exception messages to be more descriptive don't remember more sins...  --HG-- rename : test/org/mockito/RequiresValidState.java => test/org/mockito/TestBase.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40346", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import java.util.Arrays;\n \n import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n import org.mockito.internal.MockUtil;\n import org.mockito.internal.progress.MockingProgress;\n      * @return mock object itself\n      */\n     public static <T> T verify(T mock, VerificationMode mode) {\n-        MockUtil.validateMock(mock);\n+        if (!MockUtil.isMock(mock)) {\n+            REPORTER.notAMockPassedToVerify();\n+        }\n         MOCKING_PROGRESS.verificationStarted(mode);\n         return mock;\n     }\n         assertMocksNotEmpty(mocks);\n         MOCKING_PROGRESS.validateState();\n         for (Object mock : mocks) {\n-            MockUtil.getMockHandler(mock).verifyNoMoreInteractions();\n+            try {\n+                MockUtil.getMockHandler(mock).verifyNoMoreInteractions();\n+            } catch (NotAMockException e) {\n+                REPORTER.notAMockPassedToVerifyNoMoreInteractions();\n+            }\n         }\n     }\n \n     }\n \n     private static void assertMocksNotEmpty(Object[] mocks) {\n-        if (mocks.length == 0) {\n+        if (mocks == null || mocks.length == 0) {\n             REPORTER.mocksHaveToBePassedAsArguments();\n         }\n     }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n import org.mockito.exceptions.cause.WantedDiffersFromActual;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n+import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n \n     public void mocksHaveToBePassedAsArguments() {\n         throw new MockitoException(join(\n-                \"Method requires arguments.\",\n+                \"Method requires argument(s).\",\n                 \"Pass mocks that should be verified, e.g:\",\n-                \"verifyNoMoreInteractions(mockOne, mockTwo);\"\n+                \"  verifyNoMoreInteractions(mockOne, mockTwo);\",\n+                \"  verifyZeroInteractions(mockOne, mockTwo);\"\n                 ));\n     }\n \n     public void inOrderRequiresFamiliarMock() {\n         throw new MockitoException(join(\n                 \"InOrder can only verify mocks that were passed in during creation of InOrder. E.g:\",\n-                \"InOrder inOrder = inOrder(mockOne);\",\n-                \"inOrder.verify(mockOne).doStuff();\"\n+                \"  InOrder inOrder = inOrder(mockOne);\",\n+                \"  inOrder.verify(mockOne).doStuff();\"\n                 ));\n     }\n \n     public void mocksHaveToBePassedWhenCreatingInOrder() {\n         throw new MockitoException(join(\n-                \"Method requires arguments.\",\n+                \"Method requires argument(s).\",\n                 \"Pass mocks that require verification in order, e.g:\",\n-                \"InOrder inOrder = inOrder(mockOne, mockTwo);\"\n+                \"  InOrder inOrder = inOrder(mockOne, mockTwo);\"\n                 ));\n     }\n \n     \n     public void unfinishedStubbing() {\n         throw new UnfinishedStubbingException(join(\n-                \"Unifinished stubbing detected, e.g. toReturn() is missing\",\n-                \"Examples of proper stubbing:\",\n-                \"stub(mock.isOk()).toReturn(true);\",\n-                \"stub(mock.isOk()).toThrows(exception);\",\n-                \"stubVoid(mock).toThrow(exception).on().someMethod();\"\n+                \"Unifinished stubbing detected, e.g. toReturn() may be missing\",\n+                \"Examples of correct stubbing:\",\n+                \"  stub(mock.isOk()).toReturn(true);\",\n+                \"  stub(mock.isOk()).toThrow(exception);\",\n+                \"  stubVoid(mock).toThrow(exception).on().someMethod();\"\n         ));\n     }\n \n     public void missingMethodInvocation() {\n         throw new MissingMethodInvocationException(join(\n-                \"stub() requires an argument which has to be a proper method call on a mock object\"\n+                \"stub() requires an argument which has to be a method call on a mock\",\n+                \"For example:\",\n+                \"  stub(mock.getArticles()).toReturn(articles);\"\n         ));\n     }\n \n     public void unfinishedVerificationException() {\n         throw new UnfinishedVerificationException(join(\n                 \"Previous verify(mock) doesn't have a method call.\",\n-                \"Should be something like that: verify(mock).doSomething()\"\n+                \"Example of correct verification:\",\n+                \"  verify(mock).doSomething()\"\n         ));\n     }\n \n                 clazz.toString()\n         ));\n     }\n+\n+    public void notAMockPassedToVerify() {\n+        throw new NotAMockException(join(\n+                \"Not a mock passed to verify() method\",\n+                \"Examples of correct verifications:\",\n+                \"  verify(mock).someMethod();\",\n+                \"  verify(mock, times(10)).someMethod();\",\n+                \"  verify(mock, atLeastOnce()).someMethod();\"\n+                \n+        ));\n+    }\n+\n+    public void notAMockPassedToVerifyNoMoreInteractions() {\n+        throw new NotAMockException(join(\n+            \"Not a mock passed to method\",\n+            \"Examples of correct verifications:\",\n+            \"  verifyNoMoreInteractions(mockOne, mockTwo);\",\n+            \"  verifyZeroInteractions(mockOne, mockTwo);\"\n+        ));\n+    }\n }\n--- a/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n+++ b/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n         super(  \"\\n\" +\n                 message +\n                 \"\\n\" +\n-                \"See javadoc for Matchers class\");\n+                \"Invalid use of matchers - see javadoc for Matchers class.\" +\n+                \"\\n\" +\n+                \"Typically this exception occurs when matchers are combined with raw values:\" +\n+                \"\\n\" +\n+                \"    verify(mock).someMethod(anyObject(), \\\"raw value\\\");\" +\n+                \"\\n\" +\n+                \"When using matchers, all arguments have to be provided by matchers, eg:\" +\n+                \"\\n\" +\n+                \"    verify(mock).someMethod(anyObject(), eq(\\\"raw value\\\"));\");\n     }\n }\n--- a/src/org/mockito/exceptions/misusing/NotAMockException.java\n+++ b/src/org/mockito/exceptions/misusing/NotAMockException.java\n \n     private static final long serialVersionUID = 1L;\n \n-    public NotAMockException(Object object) {\n-        super(\"Not a mock: \" + object.getClass().getName());\n+    public NotAMockException(String message) {\n+        super(message);\n     }\n }\n--- a/src/org/mockito/internal/MockUtil.java\n+++ b/src/org/mockito/internal/MockUtil.java\n     \n     public static <T> MockHandler<T> getMockHandler(T mock) {\n         if (mock == null) {\n-            throw new MockitoException(\"Mock cannot be null\");\n+            throw new NotAMockException(\"Argument should be a mock, but is null!\");\n         }\n         \n         try {\n             if (Enhancer.isEnhanced(mock.getClass())) {\n                 return ((MethodInterceptorFilter<MockHandler<T>>) getInterceptor(mock)).getDelegate();\n             } else {\n-                throw new NotAMockException(mock);\n+                throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n             }\n         } catch (ClassCastException e) {\n-            throw new NotAMockException(mock);\n+            throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n     }\n     \n     public static void validateMock(Object mock) {\n         getMockHandler(mock);\n     }\n+    \n+    public static boolean isMock(Object mock) {\n+        try {\n+            getMockHandler(mock);\n+            return true;\n+        } catch (MockitoException e) {\n+            return false;\n+        }\n+    }\n }\n--- a/test/org/mockito/MockUtilTest.java\n+++ b/test/org/mockito/MockUtilTest.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n \n-public class MockUtilTest extends RequiresValidState {\n+public class MockUtilTest extends TestBase {\n \n     @SuppressWarnings(\"unchecked\")\n     @Test \n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n import org.mockito.exceptions.misusing.NotAMockException;\n \n @SuppressWarnings(\"unchecked\")\n-public class MockitoTest extends RequiresValidState {\n+public class MockitoTest extends TestBase {\n \n     //TODO I want to have ruby script that will collect all java code from examples in javadoc/documentation\n     // and create a test case that I can manually fix and run and make sure examples are valid.\n--- /dev/null\n+++ b/test/org/mockito/TestBase.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.junit.Before;\n+\n+/**\n+ * the easiest way to make sure that tests clean up invalid state is to require\n+ * valid state for all tests.\n+ */\n+public class TestBase {\n+\n+    @Before\n+    public void init() {\n+        Mockito.MOCKING_PROGRESS.validateState();\n+        MockitoAnnotations.initMocks(this);\n+    }\n+}\n--- a/test/org/mockito/exceptions/ReporterTest.java\n+++ b/test/org/mockito/exceptions/ReporterTest.java\n package org.mockito.exceptions;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.internal.invocation.InvocationBuilder;\n \n-public class ReporterTest extends RequiresValidState {\n+public class ReporterTest extends TestBase {\n \n     @Test(expected=TooLittleActualInvocations.class)\n     public void shouldLetPassingNullLastActualStackTrace() throws Exception {\n--- a/test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java\n+++ b/test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n-public class MockitoAssertionErrorTest extends RequiresValidState {\n+public class MockitoAssertionErrorTest extends TestBase {\n \n     private void throwIt() {\n         throw new MockitoAssertionError(\"boom\");\n--- a/test/org/mockito/exceptions/base/MockitoExceptionTest.java\n+++ b/test/org/mockito/exceptions/base/MockitoExceptionTest.java\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n-public class MockitoExceptionTest extends RequiresValidState {\n+public class MockitoExceptionTest extends TestBase {\n \n     private void throwIt() {\n         throw new MockitoException(\"boom\");\n--- a/test/org/mockito/exceptions/base/StackTraceRemoverTest.java\n+++ b/test/org/mockito/exceptions/base/StackTraceRemoverTest.java\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n-public class StackTraceRemoverTest extends RequiresValidState {\n+public class StackTraceRemoverTest extends TestBase {\n \n     private StackTraceElement[] stackTrace;\n     private List<StackTraceElement> causeStackTrace;\n--- a/test/org/mockito/internal/AllInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/AllInvocationsFinderTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.internal.invocation.Invocation;\n import org.mockitousage.IMethods;\n \n-public class AllInvocationsFinderTest extends RequiresValidState {\n+public class AllInvocationsFinderTest extends TestBase {\n     \n     private AllInvocationsFinder finder;\n     private IMethods mockTwo;\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n @SuppressWarnings(\"unchecked\")\n-public class MockHandlerTest extends RequiresValidState {\n+public class MockHandlerTest extends TestBase {\n     \n     @Test\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n--- a/test/org/mockito/internal/creation/CglibTest.java\n+++ b/test/org/mockito/internal/creation/CglibTest.java\n import net.sf.cglib.proxy.MethodProxy;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n /**\n  * This test case is used to make sure that the way cglib is used is providing the expected behavior.\n  */\n-public class CglibTest extends RequiresValidState {\n+public class CglibTest extends TestBase {\n \n     /**\n      * Check that an interceptor is used by only one instance of a class\n--- a/test/org/mockito/internal/creation/MockFactoryTest.java\n+++ b/test/org/mockito/internal/creation/MockFactoryTest.java\n import net.sf.cglib.proxy.Factory;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n-public class MockFactoryTest extends RequiresValidState {\n+public class MockFactoryTest extends TestBase {\n \n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n import java.util.Map;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.NotNull;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvocationMatcherTest extends RequiresValidState {\n+public class InvocationMatcherTest extends TestBase {\n \n     @Test(expected=IllegalArgumentException.class)\n     public void shouldScreamWhenMatchersNull() throws Exception {\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvocationTest extends RequiresValidState {\n+public class InvocationTest extends TestBase {\n \n     private Invocation invocation;\n \n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n \n-public class InvocationsFinderTest extends RequiresValidState {\n+public class InvocationsFinderTest extends TestBase {\n     \n     private LinkedList<Invocation> invocations = new LinkedList<Invocation>();\n     private Invocation simpleMethodInvocation;\n--- a/test/org/mockito/internal/invocation/InvocationsPrinterTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsPrinterTest.java\n import java.lang.reflect.Method;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n-public class InvocationsPrinterTest extends RequiresValidState{\n+public class InvocationsPrinterTest extends TestBase{\n \n     @Test\n     public void shouldPrintWantedAndActualInvocation() throws Exception {\n--- a/test/org/mockito/internal/matchers/EqualsTest.java\n+++ b/test/org/mockito/internal/matchers/EqualsTest.java\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n \n-public class EqualsTest extends RequiresValidState {\n+public class EqualsTest extends TestBase {\n     \n     @Test\n     public void shouldBeEqual() {\n--- a/test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java\n+++ b/test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java\n import java.util.Arrays;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n /**\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n  * @author Maarten Coene\n  * @version $Id: EqualsBuilderTest.java 611543 2008-01-13 07:00:22Z bayard $\n  */\n-public class EqualsBuilderTest extends RequiresValidState {\n+public class EqualsBuilderTest extends TestBase {\n     \n     @Test\n     public void testname() throws Exception {\n--- a/test/org/mockito/internal/progress/MockingProgressImplTest.java\n+++ b/test/org/mockito/internal/progress/MockingProgressImplTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n \n-public class MockingProgressImplTest extends RequiresValidState {\n+public class MockingProgressImplTest extends TestBase {\n \n     private MockingProgress mockingProgress;\n \n--- a/test/org/mockito/internal/progress/VerificationModeImplTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeImplTest.java\n import static org.mockito.internal.progress.VerificationModeImpl.times;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n \n-public class VerificationModeImplTest extends RequiresValidState {\n+public class VerificationModeImplTest extends TestBase {\n \n     @Test\n     public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {\n--- a/test/org/mockito/internal/stubbing/EmptyReturnValuesTest.java\n+++ b/test/org/mockito/internal/stubbing/EmptyReturnValuesTest.java\n import java.util.TreeSet;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n-public class EmptyReturnValuesTest extends RequiresValidState {\n+public class EmptyReturnValuesTest extends TestBase {\n     \n     @SuppressWarnings(\"unchecked\")\n     @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n--- a/test/org/mockito/internal/stubbing/ResultTest.java\n+++ b/test/org/mockito/internal/stubbing/ResultTest.java\n import java.util.Arrays;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.StackTraceFilter;\n \n-public class ResultTest extends RequiresValidState {\n+public class ResultTest extends TestBase {\n \n     @Test\n     public void shouldCreateReturnResult() throws Throwable {\n--- a/test/org/mockito/internal/stubbing/StubberTest.java\n+++ b/test/org/mockito/internal/stubbing/StubberTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgressImpl;\n \n-public class StubberTest extends RequiresValidState{\n+public class StubberTest extends TestBase{\n \n     private Stubber stubber;\n     private MockingProgressImpl state;\n--- a/test/org/mockito/internal/util/ListUtilTest.java\n+++ b/test/org/mockito/internal/util/ListUtilTest.java\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.internal.util.ListUtil.Filter;\n \n @SuppressWarnings(\"unchecked\")\n-public class ListUtilTest extends RequiresValidState {\n+public class ListUtilTest extends TestBase {\n \n     @Test\n     public void shouldFilterList() throws Exception {\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n \n-public class MissingInvocationInOrderVerifierTest extends RequiresValidState {\n+public class MissingInvocationInOrderVerifierTest extends TestBase {\n \n     private MissingInvocationInOrderVerifier verifier;\n     private ReporterStub reporterStub;\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n-public class MissingInvocationVerifierTest extends RequiresValidState {\n+public class MissingInvocationVerifierTest extends TestBase {\n \n     private MissingInvocationVerifier verifier;\n     \n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n-public class NoMoreInvocationsVerifierTest extends RequiresValidState {\n+public class NoMoreInvocationsVerifierTest extends TestBase {\n \n     private NoMoreInvocationsVerifier verifier;\n     private InvocationsFinderStub finder;\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n \n-public class NumberOfInvocationsInOrderVerifierTest extends RequiresValidState {\n+public class NumberOfInvocationsInOrderVerifierTest extends TestBase {\n \n     private NumberOfInvocationsInOrderVerifier verifier;\n     private Reporter reporter;\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n-public class NumberOfInvocationsVerifierTest extends RequiresValidState {\n+public class NumberOfInvocationsVerifierTest extends TestBase {\n \n     private NumberOfInvocationsVerifier verifier;\n     private ReporterStub reporterStub;\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n-public class VerifyingRecorderTest extends RequiresValidState {\n+public class VerifyingRecorderTest extends TestBase {\n     \n     private VerifyingRecorder recorder;\n     private VerifierStub verifierStub;\n--- a/test/org/mockitousage/AnnotationsTest.java\n+++ b/test/org/mockitousage/AnnotationsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.MockitoAnnotations;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.base.MockitoException;\n \n @SuppressWarnings(\"unchecked\")\n-public class AnnotationsTest extends RequiresValidState {\n+public class AnnotationsTest extends TestBase {\n \n     @Mock List list;\n     @Mock final Map map = new HashMap();\n--- /dev/null\n+++ b/test/org/mockitousage/DescriptiveMessagesOnMisuseTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.misusing.NotAMockException;\n+\n+public class DescriptiveMessagesOnMisuseTest extends TestBase {\n+    \n+    @Mock private IMethods mock;\n+\n+    @Test(expected=NotAMockException.class)\n+    public void shouldScreamWhenWholeMethodPassedToVerify() {\n+        verify(mock.booleanReturningMethod(2));\n+    }   \n+    \n+    @Test(expected=NotAMockException.class)\n+    public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions() {\n+        verifyNoMoreInteractions(mock.byteReturningMethod(1));\n+    }  \n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldScreamNullPassedToVerify() {\n+        verify(null);\n+    }  \n+    \n+    @Test(expected=NotAMockException.class)\n+    public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions() {\n+        verifyNoMoreInteractions(null, \"blah\");\n+    } \n+    \n+    @SuppressWarnings(\"all\")\n+    @Test(expected=MockitoException.class)\n+    public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions() {\n+        verifyNoMoreInteractions(null);\n+    }\n+    \n+    @SuppressWarnings(\"all\")\n+    @Ignore\n+    @Test\n+    public void shouldExceptionMessageProvideUsefulInfo() {\n+        verifyNoMoreInteractions(null);\n+        verifyNoMoreInteractions(\"\");\n+        verifyZeroInteractions(null);\n+        verifyZeroInteractions(\"\");\n+        \n+        inOrder(null);\n+        inOrder(\"test\");\n+        InOrder inOrder = inOrder(mock(List.class));\n+        inOrder.verify(mock).simpleMethod();\n+        \n+        verify(mock.differentMethod());\n+        verify(null);\n+        \n+        verify(mock).varargs(\"test\", anyString());\n+        //TODO replace 'Not a mock' with arg that ... or something ???\n+    } \n+}\n--- a/test/org/mockitousage/InvalidStateDetectionTest.java\n+++ b/test/org/mockitousage/InvalidStateDetectionTest.java\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.StateResetter;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n  *    -on stubVoid\n  */\n @SuppressWarnings(\"unchecked\")\n-public class InvalidStateDetectionTest extends RequiresValidState {\n+public class InvalidStateDetectionTest extends TestBase {\n \n     private IMethods mock;\n \n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.StateResetter;\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvalidUsageTest extends RequiresValidState {\n+public class InvalidUsageTest extends TestBase {\n \n     private IMethods mock;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.junit.runner.notification.Failure;\n import org.mockito.MockUtilTest;\n import org.mockito.MockitoTest;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.ReporterTest;\n import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n import org.mockito.exceptions.base.MockitoExceptionTest;\n import org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest;\n import org.mockitousage.verification.VerificationUsingMatchersTest;\n \n-public class MultiThreadedTest extends RequiresValidState {\n+public class MultiThreadedTest extends TestBase {\n     \n     private static class AllTestsRunner extends Thread {\n         \n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationChunkInOrderTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n \n //TODO pmd rule so that all that starts with should have @Test annotation (or all XTest have some annotations on public methods)\n-public class PointingStackTraceToActualInvocationChunkInOrderTest extends RequiresValidState {\n+public class PointingStackTraceToActualInvocationChunkInOrderTest extends TestBase {\n     \n     private IMethods mock;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n \n-public class PointingStackTraceToActualInvocationChunkTest extends RequiresValidState {\n+public class PointingStackTraceToActualInvocationChunkTest extends TestBase {\n     \n     private IMethods mock;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationInOrderTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n \n-public class PointingStackTraceToActualInvocationInOrderTest extends RequiresValidState {\n+public class PointingStackTraceToActualInvocationInOrderTest extends TestBase {\n     \n     private IMethods mock;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n \n-public class PointingStackTraceToActualInvocationTest extends RequiresValidState {\n+public class PointingStackTraceToActualInvocationTest extends TestBase {\n     \n     private IMethods mock;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/ReflectionMatchersTest.java\n+++ b/test/org/mockitousage/ReflectionMatchersTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n \n @SuppressWarnings(\"all\")\n-public class ReflectionMatchersTest extends RequiresValidState {\n+public class ReflectionMatchersTest extends TestBase {\n \n     class Parent {\n         private int parentField;\n--- a/test/org/mockitousage/ReplacingObjectMethodsTest.java\n+++ b/test/org/mockitousage/ReplacingObjectMethodsTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n-public class ReplacingObjectMethodsTest extends RequiresValidState {\n+public class ReplacingObjectMethodsTest extends TestBase {\n \n     private interface DummyInterface {}\n     private class DummyClass {}\n--- a/test/org/mockitousage/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/StackTraceFilteringTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.StateResetter;\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n-public class StackTraceFilteringTest extends RequiresValidState {\n+public class StackTraceFilteringTest extends TestBase {\n     \n     private IMethods mock;\n \n--- a/test/org/mockitousage/StackTrackeChangingTest.java\n+++ b/test/org/mockitousage/StackTrackeChangingTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n \n-public class StackTrackeChangingTest extends RequiresValidState {\n+public class StackTrackeChangingTest extends TestBase {\n     \n     private IMethods mock;\n \n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n \n-public class UsingVarargsTest extends RequiresValidState {\n+public class UsingVarargsTest extends TestBase {\n \n     private interface IVarArgs {\n         void withStringVarargs(int value, String... s);\n--- a/test/org/mockitousage/binding/BridgeMethodPuzzleTest.java\n+++ b/test/org/mockitousage/binding/BridgeMethodPuzzleTest.java\n import static org.mockito.util.ExtraMatchers.hasBridgeMethod;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n /**\n  * Bridge method is generated by compiler when erasure in parent class is\n  * and overridding is ON.\n  */\n @SuppressWarnings(\"unchecked\")\n-public class BridgeMethodPuzzleTest extends RequiresValidState {\n+public class BridgeMethodPuzzleTest extends TestBase {\n     \n     private class Super<T> {\n         public String say(T t) {\n--- a/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n \n-public class IncorectBindingPuzzleFixedTest extends RequiresValidState {\n+public class IncorectBindingPuzzleFixedTest extends TestBase {\n \n     private Super mock;\n \n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n import java.math.BigDecimal;\n \n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.internal.matchers.CompareEqual;\n import org.mockito.internal.matchers.CompareTo;\n import org.mockito.internal.matchers.GreaterOrEqual;\n import org.mockito.internal.matchers.LessOrEqual;\n import org.mockito.internal.matchers.LessThan;\n \n-public class ComparableMatchersTest extends RequiresValidState {\n+public class ComparableMatchersTest extends TestBase {\n \n     @Test\n     public void testLessThan() {\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import org.junit.Test;\n import org.mockito.CustomMatcher;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n \n-public class CustomMatchersTest extends RequiresValidState {\n+public class CustomMatchersTest extends TestBase {\n     \n     private final class ContainsFoo extends CustomMatcher<String> {\n         public boolean matches(String arg) {\n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.eq;\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.util.ExtraMatchers.*;\n \n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.AdditionalMatchers;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n import org.mockito.StateResetter;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvalidUseOfMatchersTest extends RequiresValidState {\n+public class InvalidUseOfMatchersTest extends TestBase {\n \n     private IMethods mock;\n \n             mock.simpleMethod(AdditionalMatchers.not(\"jkl\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertEquals(\n-                    \"\\n\" +\n-                    \"No matchers found for Not(?).\" +\n-                    \"\\n\" +\n-                    \"See javadoc for Matchers class\"\n-                    , e.getMessage());\n+            assertThat(e, messageContains(\"No matchers found for Not(?).\"));\n         }\n \n         try {\n             mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertEquals(\n-                    \"\\n\" +\n-                    \"2 matchers expected, 1 recorded.\" +\n-                    \"\\n\" +\n-                    \"See javadoc for Matchers class\"\n-                    , e.getMessage());\n+            assertThat(e, messageContains(\"2 matchers expected, 1 recorded.\"));\n         }\n \n         try {\n             mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertEquals(\n-                    \"\\n\" +\n-                    \"3 matchers expected, 1 recorded.\" +\n-                    \"\\n\" +\n-                    \"See javadoc for Matchers class\"\n-                    , e.getMessage());\n+            assertThat(e, messageContains(\"3 matchers expected, 1 recorded.\"));\n         }\n     }\n }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n \n @SuppressWarnings(\"unchecked\")\n-public class MatchersTest extends RequiresValidState {\n+public class MatchersTest extends TestBase {\n     private IMethods mock;\n \n     @Before\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.internal.matchers.And;\n import org.mockito.internal.matchers.Any;\n import org.mockito.internal.matchers.Contains;\n import org.mockito.internal.matchers.StartsWith;\n \n @SuppressWarnings(\"unchecked\")\n-public class MatchersToStringTest extends RequiresValidState {\n+public class MatchersToStringTest extends TestBase {\n     private StringBuilder buffer;\n \n     @Before\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n-public class VerificationAndStubbingUsingMatchersTest extends RequiresValidState {\n+public class VerificationAndStubbingUsingMatchersTest extends TestBase {\n     private IMethods one;\n     private IMethods two;\n     private IMethods three;\n--- a/test/org/mockitousage/sample/ArticleCalculator.java\n+++ b/test/org/mockitousage/sample/ArticleCalculator.java\n     int countArticles(String newspaper);\n     int countArticlesInPolish(String newspaper);\n     int countNumberOfRelatedArticles(Article article);\n+    int countAllArticles(String ... publications);\n }\n--- a/test/org/mockitousage/sample/MockitoSampleTest.java\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n \n-public class MockitoSampleTest extends RequiresValidState {\n+public class MockitoSampleTest extends TestBase {\n     \n-    private ArticleCalculator mockCalculator;\n-    private ArticleDatabase mockDatabase;\n+    @Mock private ArticleCalculator mockCalculator;\n+    @Mock private ArticleDatabase mockDatabase;\n     \n     private ArticleManager articleManager;\n     \n     @Before\n     public void setup() {\n-        mockCalculator = mock(ArticleCalculator.class);\n-        mockDatabase = mock(ArticleDatabase.class);\n-        \n         articleManager = new ArticleManager(mockCalculator, mockDatabase);\n     }\n \n     @Test\n     public void managerCountsArticlesAndSavesThemInTheDatabase() {\n         stub(mockCalculator.countArticles(\"Guardian\")).toReturn(12);\n-        stub(mockCalculator.countArticlesInPolish(\"Guardian\")).toReturn(5);\n+        stub(mockCalculator.countArticlesInPolish(anyString())).toReturn(5);\n+\n+//        stub(mockCalculator.countAllArticles(anyString(), \"asdf\")).toReturn(5);\n         \n         articleManager.updateArticleCounters(\"Guardian\");\n         \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n-public class BasicStubbingTest extends RequiresValidState {\n+public class BasicStubbingTest extends TestBase {\n \n     private IMethods mock;\n \n--- a/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n+++ b/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n-public class ReturningDefaultValuesTest extends RequiresValidState {\n+public class ReturningDefaultValuesTest extends TestBase {\n \n     @Test\n     public void shouldReturnAllKindsOfPrimitives() throws Exception {\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})\n-public class StubbingWithThrowablesTest extends RequiresValidState {\n+public class StubbingWithThrowablesTest extends TestBase {\n \n     private LinkedList mock;\n     private Map mockTwo;\n--- a/test/org/mockitousage/verification/AtLeastOnceVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtLeastOnceVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n @SuppressWarnings(\"unchecked\")\n-public class AtLeastOnceVerificationTest extends RequiresValidState {\n+public class AtLeastOnceVerificationTest extends TestBase {\n \n     private List mock;\n     private List mockTwo;\n--- a/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.InOrder;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n-public class BasicVerificationInOrderTest extends RequiresValidState {\n+public class BasicVerificationInOrderTest extends TestBase {\n     \n     private IMethods mockOne;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/verification/BasicVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n @SuppressWarnings(\"unchecked\")\n-public class BasicVerificationTest extends RequiresValidState {\n+public class BasicVerificationTest extends TestBase {\n \n     private List mock;\n     private List mockTwo;\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n-public class DescriptiveMessagesOnVerificationInOrderErrorsTest extends RequiresValidState {\n+public class DescriptiveMessagesOnVerificationInOrderErrorsTest extends TestBase {\n     \n     private IMethods one;\n     private IMethods two;\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n \n @SuppressWarnings(\"unchecked\")\n-public class DescriptiveMessagesWhenTimesXVerificationFailsTest extends RequiresValidState {\n+public class DescriptiveMessagesWhenTimesXVerificationFailsTest extends TestBase {\n \n     private LinkedList mock;\n \n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedDiffersFromActual;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n-public class DescriptiveMessagesWhenVerificationFailsTest extends RequiresValidState {\n+public class DescriptiveMessagesWhenVerificationFailsTest extends TestBase {\n \n     private IMethods mock;\n \n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n @SuppressWarnings(\"unchecked\")\n-public class ExactNumberOfTimesVerificationTest extends RequiresValidState {\n+public class ExactNumberOfTimesVerificationTest extends TestBase {\n \n     private LinkedList mock;\n \n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n  */\n package org.mockitousage.verification;\n \n-import static org.junit.Assert.fail;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.stub;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n \n import java.util.LinkedList;\n import java.util.List;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n \n @SuppressWarnings(\"unchecked\")\n-public class NoMoreInteractionsVerificationTest extends RequiresValidState {\n+public class NoMoreInteractionsVerificationTest extends TestBase {\n \n     private LinkedList mock;\n     \n             fail();\n         } catch (NoInteractionsWanted e) {}\n     }\n+    \n+    @SuppressWarnings(\"all\")\n+    @Test(expected=MockitoException.class)\n+    public void verifyNoMoreInteractionsShouldScreamWhenNullPassed() throws Exception {\n+        verifyNoMoreInteractions(null);\n+    }\n }\n--- a/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n  * ignored since 'relaxed' in order verification is not implemented (too complex to bother, maybe later).\n  */\n @SuppressWarnings(\"unchecked\")  \n-public class RelaxedVerificationInOrderTest extends RequiresValidState {\n+public class RelaxedVerificationInOrderTest extends TestBase {\n     \n     private IMethods mockOne;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n+++ b/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.InOrder;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n-public class SelectedMocksInOrderVerificationTest extends RequiresValidState {\n+public class SelectedMocksInOrderVerificationTest extends TestBase {\n     \n     private IMethods mockOne;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n-public class VerificationInOrderMixedWithOrdiraryVerificationTest extends RequiresValidState {\n+public class VerificationInOrderMixedWithOrdiraryVerificationTest extends TestBase {\n     \n     private IMethods mockOne;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n-public class VerificationInOrderTest extends RequiresValidState {\n+public class VerificationInOrderTest extends TestBase {\n     \n     private IMethods mockOne;\n     private IMethods mockTwo;\n--- a/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n-public class VerificationOnMultipleMocksUsingMatchersTest extends RequiresValidState {\n+public class VerificationOnMultipleMocksUsingMatchersTest extends TestBase {\n \n     @Test\n     public void shouldVerifyUsingMatchers() throws Exception {\n--- a/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.RequiresValidState;\n+import org.mockito.TestBase;\n import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n-public class VerificationUsingMatchersTest extends RequiresValidState {\n+public class VerificationUsingMatchersTest extends TestBase {\n     private IMethods mock;\n \n     @Before", "timestamp": 1202421179, "metainfo": ""}