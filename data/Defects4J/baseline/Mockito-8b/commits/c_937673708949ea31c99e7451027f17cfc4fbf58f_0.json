{"sha": "937673708949ea31c99e7451027f17cfc4fbf58f", "log": "got rid of inheritance added some more comments  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40566", "commit": "\n--- a/src/org/mockito/configuration/ConfigurationSupport.java\n+++ b/src/org/mockito/configuration/ConfigurationSupport.java\n      * @return returns true if Mockito CAN create mocks of the clazz\n      */\n     public static boolean isMockable(Class<?> clazz) {\n-        return Modifier.isFinal(clazz.getModifiers());\n+        return !Modifier.isFinal(clazz.getModifiers());\n     }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n+/*\n+ * Copyright (c) 2007, Szczepan Faber. \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure;\n+\n+import org.mockito.Mockito;\n+import org.mockito.configuration.ConfigurationSupport;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * tries to return mocks instead of nulls\n+ */\n+public final class FriendlyReturnValues implements ReturnValues {\n+\n+    public Object valueFor(InvocationOnMock invocation) {\n+        \n+        Class<?> returnType = invocation.getMethod().getReturnType();\n+        \n+        Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n+        \n+        if (defaultReturnValue != null) {\n+            return defaultReturnValue;\n+        } else if (ConfigurationSupport.isMockable(returnType)) { \n+            return Mockito.mock(returnType);\n+        } else {\n+            return defaultReturnValue;\n+        }\n+    }\n+}\n--- a/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n  */\n package org.mockitousage.examples.configure.withbaseclass;\n \n-import org.junit.After;\n-import org.junit.Before;\n-import org.mockito.Mockito;\n-import org.mockito.MockitoAnnotations;\n-import org.mockito.configuration.ConfigurationSupport;\n-import org.mockito.configuration.MockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n-import org.mockito.invocation.InvocationOnMock;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockitousage.examples.configure.FriendlyReturnValues;\n \n public class MakesMocksNotToReturnNulls {\n     \n     @Before\n     public void configureMockito() {\n         //setting custom return values\n-        MockitoConfiguration.instance().setReturnValues(new MyDefaultReturnValues());\n-        //initializing annotated mocks\n-        MockitoAnnotations.initMocks(this);\n+        MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());\n     }\n     \n     @After\n         //I don't want mocks from other tests to be reconfigured\n         MockitoConfiguration.instance().resetReturnValues();\n     }\n-    \n-    private final class MyDefaultReturnValues extends ConfigurationSupport implements ReturnValues {\n-        public Object valueFor(InvocationOnMock invocation) {\n-            Class<?> returnType = invocation.getMethod().getReturnType();\n-            Object defaultReturnValue = defaultValueFor(invocation);\n-            if (defaultReturnValue != null) {\n-                return defaultReturnValue;\n-            } else if (!isMockable(returnType)) { \n-                return Mockito.mock(returnType);\n-            } else {\n-                return defaultReturnValue;\n-            }\n-        }\n-    }\n }\n--- a/test/org/mockitousage/examples/configure/withrunner/ConfiguringDefaultReturnValuesUsingRunnerTest.java\n+++ b/test/org/mockitousage/examples/configure/withrunner/ConfiguringDefaultReturnValuesUsingRunnerTest.java\n     public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {\n         MyObject m = mock(MyObject.class);\n         //mocks don't return nulls any more...\n+        //the configuration is in the junit runner\n         MyObject returned = m.foo();\n         assertNotNull(returned);\n         assertNotNull(returned.foo());\n--- a/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n  */\n package org.mockitousage.examples.configure.withrunner;\n \n-import org.junit.internal.runners.InitializationError;\n-import org.junit.internal.runners.JUnit4ClassRunner;\n-import org.junit.runner.notification.RunNotifier;\n-import org.mockito.Mockito;\n-import org.mockito.MockitoAnnotations;\n-import org.mockito.configuration.DefaultReturnValues;\n-import org.mockito.configuration.MockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n-import org.mockito.invocation.InvocationOnMock;\n+import org.junit.internal.runners.InitializationError;\n+import org.junit.internal.runners.JUnit4ClassRunner;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockitousage.examples.configure.FriendlyReturnValues;\n \n public class MakesMocksNotToReturnNulls extends JUnit4ClassRunner {\n     \n-    public MakesMocksNotToReturnNulls(Class<?> klass) throws InitializationError {\n-        super(klass);\n+    public MakesMocksNotToReturnNulls(Class<?> clazz) throws InitializationError {\n+        super(clazz);\n     }\n     \n     @Override\n     protected Object createTest() throws Exception {\n         Object test = super.createTest();\n         //setting up custom return values\n-        MockitoConfiguration.instance().setReturnValues(new MyDefaultReturnValues());\n-        //initializing annotated mocks\n-        MockitoAnnotations.initMocks(test);\n+        MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());\n         return test;\n     }\n \n     @Override\n     public void run(RunNotifier notifier) {\n-        super.run(notifier);\n+        super.run(notifier);\n+        //I don't want mocks from other tests to be reconfigured\n         MockitoConfiguration.instance().resetReturnValues();\n     }\n-    \n-    private final class MyDefaultReturnValues implements ReturnValues {\n-        public Object valueFor(InvocationOnMock invocation) {\n-            //get the default return value\n-            Object value = new DefaultReturnValues().valueFor(invocation);\n-            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n-                return value;\n-            } else {\n-                //in case the default return value is null and method is not void, return new mock\n-                return Mockito.mock(invocation.getMethod().getReturnType());\n-            }\n-        }\n-    }\n }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n         return (FakeReturnValues) config.getReturnValues();\n     }\n \n-    private static final class FakeReturnValues extends ConfigurationSupport implements ReturnValues {\n+    private static final class FakeReturnValues implements ReturnValues {\n         \n         private Set<Object> mocksReturningFakes = new HashSet<Object>();\n \n         public Object valueFor(InvocationOnMock invocation) {\n-            if (mocksReturningFakes.contains(invocation.getMock())) {\n+            if (mocksReturningFakes.contains(invocation.getMock())) {\n+                //return non-standard value only for 'special' mocks\n                 return returnFake(invocation);\n-            } else {\n-                return defaultValueFor(invocation);\n+            } else {\n+                //return default value for any other mock\n+                return ConfigurationSupport.defaultValueFor(invocation);\n             }\n         }\n \n         }\n \n         private Object returnFake(InvocationOnMock invocation) {\n+           \n             Class<?> returnType = invocation.getMethod().getReturnType();\n+\n             if (returnType == String.class) {\n                 return \"\";\n             } else if (returnType == Boolean.TYPE) {\n                 return true;\n-            } else if (!isMockable(returnType)) {\n+            } else if (ConfigurationSupport.isMockable(returnType)) {\n                 return mock(returnType);\n             } else {\n-                return defaultValueFor(invocation);\n+                return ConfigurationSupport.defaultValueFor(invocation);\n             }\n         }\n     }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/ConfiguringSelectedMocksToReturnFakesTest.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/ConfiguringSelectedMocksToReturnFakesTest.java\n         assertEquals(\"\", fakeReturningMock.returnString());\n         //returns null because we cannot mock final classes :(\n         assertNull(fakeReturningMock.returnFinalClass());\n-        //returns true not false\n+        //returns true instead of false\n         assertTrue(fakeReturningMock.returnBoolean());\n         \n-        //returns defaults\n+        //ordinary mock returns defaults\n         assertNull(ordinaryMock.returnMyObject());\n         assertNull(ordinaryMock.returnString());\n     }", "timestamp": 1207770463, "metainfo": ""}