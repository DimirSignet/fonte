{"sha": "868fcb0ee8ce06bb7ebdc5957e33aac466c32200", "log": "added assertor to make testing easier and spike this idea.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40471", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n     }\n \n     /**\n+     * TODO this should be generic\n      * any Object argument.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n--- a/test/org/mockito/TestBase.java\n+++ b/test/org/mockito/TestBase.java\n  */\n package org.mockito;\n \n+import static org.junit.Assert.*;\n+import junit.framework.Assert;\n+\n+import org.hamcrest.Matcher;\n import org.junit.Before;\n+import org.mockito.util.Assertor;\n \n /**\n  * the easiest way to make sure that tests clean up invalid state is to require\n         Mockito.MOCKING_PROGRESS.validateState();\n         MockitoAnnotations.initMocks(this);\n     }\n+    \n+\t//I'm really tired of matchers, enter the assertor!\n+\tprotected <T> void assertThat(T o, Assertor<T> a) {\n+\t\ta.assertValue(o);\n+\t}\n+\t\n+\tprotected <T> void assertThat(T actual, Matcher<T> m) {\n+\t\torg.junit.Assert.assertThat(actual, m);\n+\t}\n+\t\n+\tprotected <T> void assertThat(String message, T actual, Matcher<T> m) {\n+\t\torg.junit.Assert.assertThat(message, actual, m);\n+\t}\n+\t\n+    public static <T> Assertor<Throwable> messageContains(final String text) {\n+        return new Assertor<Throwable>() {\n+        \tpublic void assertValue(Throwable value) {\n+        \t\tassertTrue(\"String: \" + value.getMessage() + \" should contain: \" + text\n+        \t\t\t\t, ((Throwable) value).getMessage().contains(text));\n+        \t}\n+        };\n+    }\n+    \n+    public static <T> Assertor<Throwable> causeMessageContains(final String text) {\n+        return new Assertor<Throwable>() {\n+        \tpublic void assertValue(Throwable value) {\n+        \t\tThrowable cause = ((Throwable) value).getCause();\n+        \t\tassertNotNull(\"Exception cause should not be null\", cause);\n+        \t\tassertTrue(\"\\nException message >>>\" + value.getMessage() + \"\\n>>> should contain: \" + text,\n+        \t\t\t\tcause.getMessage().contains(text));\n+        \t}\n+        };\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockito/util/Assertor.java\n+package org.mockito.util;\n+\n+public interface Assertor<T> {\n+\t\n+\tvoid assertValue(T value);\n+}\n--- a/test/org/mockito/util/ExtraMatchers.java\n+++ b/test/org/mockito/util/ExtraMatchers.java\n         };\n     }\n     \n-    public static <T> Matcher<Throwable> messageContains(final String text) {\n-        return new BaseMatcher<Throwable>() {\n-            public boolean matches(Object throwable) {\n-                return ((Throwable) throwable).getMessage().contains(text);\n-            }\n-            public void describeTo(Description desc) {\n-                desc.appendText(\"exception's message doesn't contain \" + text);\n-            }\n-        };\n-    }\n-    \n-    public static <T> Matcher<Throwable> causeMessageContains(final String text) {\n-        return new BaseMatcher<Throwable>() {\n-            public boolean matches(Object throwable) {\n-                Throwable cause = ((Throwable) throwable).getCause();\n-                return cause == null ? false : cause.getMessage().contains(text);\n-            }\n-            public void describeTo(Description desc) {\n-                desc.appendText(\"exception cause's message is not \" + text);\n-            }\n-        };\n-    }\n-    \n     public static <T> Matcher<Object> hasBridgeMethod(final String methodName) {\n         return new BaseMatcher<Object>() {\n \n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.mockito.util.ExtraMatchers.messageContains;\n import static org.junit.Assert.*;\n import static org.mockito.AdditionalMatchers.*;\n import static org.mockito.Matchers.*;\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n         }\n     }\n     \n-    @Ignore(\"fix it!\")\n+    @Ignore\n     @Test\n     public void shouldShowRightActualMethod() throws Exception {\n         mock.simpleMethod(9191);\n             verify(mock).simpleMethod(\"bar\");\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-        \te.printStackTrace();\n             assertThat(e, messageContains(\"bar\"));\n             assertThat(e, causeMessageContains(\"foo\"));\n         }", "timestamp": 1205931364, "metainfo": ""}