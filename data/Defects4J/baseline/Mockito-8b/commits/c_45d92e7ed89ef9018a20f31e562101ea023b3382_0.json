{"sha": "45d92e7ed89ef9018a20f31e562101ea023b3382", "log": "small fixes to the way errors are printed  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40479", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n @SuppressWarnings(\"unchecked\")\n public class Invocation implements PrintableInvocation {\n \n-    private static final int MAX_LINE_LENGTH = 35;\n+    private static final int MAX_LINE_LENGTH = 45;\n     private final int sequenceNumber;\n     private final Object mock;\n     private final Method method;\n     }\n \n     protected String toString(List<Matcher> matchers) {\n-        return qualifiedMethodName() + getArgumentsString(matchers);\n+    \tString method = qualifiedMethodName();\n+    \tString invocation = method + getArgumentsLine(matchers);\n+    \tif (invocation.length() <= MAX_LINE_LENGTH) {\n+    \t\treturn invocation;\n+    \t} else {\n+    \t\treturn method + getArgumentsBlock(matchers);\n+    \t}\n     }\n \n     private String qualifiedMethodName() {\n         return MockNamer.nameForMock(mock) + \".\" + method.getName();\n     }\n \n-    private String getArgumentsString(List<Matcher> matchers) {\n+    private String getArgumentsLine(List<Matcher> matchers) {\n         Description result = new StringDescription();\n         result.appendList(\"(\", \", \", \");\", matchers);\n-        String args = result.toString();\n-        //TODO max line lenght should consider lengthy classes/methods names\n-        if (args.length() < MAX_LINE_LENGTH) {\n-        \treturn args;\n-        }\n-        \n-        result = new StringDescription();\n-        result.appendList(\"(\\n    \", \",\\n    \", \"\\n  );\", matchers);\n-\t\treturn result.toString();\n+        return result.toString();\n+    }\n+    \n+    private String getArgumentsBlock(List<Matcher> matchers) {\n+    \tDescription result = new StringDescription();\n+    \tresult.appendList(\"(\\n    \", \",\\n    \", \"\\n);\", matchers);\n+    \treturn result.toString();\n     }\n     \n     protected List<Matcher> argumentsToMatchers() {\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n     }\n     \n     @Test\n+    public void shouldPrintArgumentsInMultilinesWhenGetsTooBig() {\n+        invocation = new InvocationBuilder().args(\"veeeeery long string that makes it ugly in one line\", 1).toInvocation();\n+        assertEquals(\"Object.simpleMethod(\" +\n+        \t\t\"\\n\" +\n+        \t\t\"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n+        \t\t\"\\n\" +\n+        \t\t\"    1\" +\n+        \t\t\"\\n\" +\n+        \t\t\");\", invocation.toString());\n+    }\n+    \n+    @Test\n     public void shouldMarkVerifiedWhenMarkingVerifiedInOrder() throws Exception {\n         assertFalse(invocation.isVerified());\n         assertFalse(invocation.isVerifiedInOrder());\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n             verify(mock).simpleMethod(containsTest());\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"simpleMethod(<String that contains xxx>);\"));\n+            assertThat(e, messageContains(\"simpleMethod(\\n    <String that contains xxx>\\n);\"));\n         }\n     }\n \n                 }}));\n             fail();\n         } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"simpleMethod(<custom argument matcher>);\"));\n+            assertThat(e, messageContains(\"simpleMethod(\\n    <custom argument matcher>\\n);\"));\n             assertThat(e, causeMessageContains(\"foo\"));\n         }\n     }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n         }\n     }\n \n-    private class SomeClass {\n+    private class Foo {\n         public String toString() {\n-            return \"SomeClass instance\";\n+            return \"foo\";\n         }\n     }\n \n     @Test\n     public void shouldPrintMethodNameAndArguments() {\n         try {\n-            verify(mock).threeArgumentMethod(12, new SomeClass(), \"xx\");\n+            verify(mock).threeArgumentMethod(12, new Foo(), \"xx\");\n             fail();\n         } catch (WantedButNotInvoked e) {\n-            assertThat(e, messageContains(\"IMethods.threeArgumentMethod(12, SomeClass instance, \\\"xx\\\")\"));\n+            assertThat(e, messageContains(\"IMethods.threeArgumentMethod(12, foo, \\\"xx\\\")\"));\n         }\n     }\n \n                     \"\\n\" +\n                     \"    \\\"this is yet another very long string\\\"\" +\n                     \"\\n\" +\n-                    \"  );\";\n+                    \");\";\n \n             assertEquals(expected, e.getMessage());\n \n                     \"\\n\" +\n                     \"    \\\"this is another very long string\\\"\" +\n                     \"\\n\" +\n-                    \"  );\";\n+                    \");\";\n \n             assertEquals(expectedCause, e.getCause().getMessage());\n         }\n \n     @Test\n     public void shouldPrintMethodWhenMissingInvocationWithVarargMatcher() {\n-        mock.varargsString(10, \"one\", \"two\", \"three\");\n-\n-        try {\n-            verify(mock).varargsString(10, \"two\", \"one\", \"three\");\n-            fail();\n-        } catch (ArgumentsAreDifferent e) {\n-            assertThat(e, messageContains(\"(10, \\\"two\\\"\"));\n-            assertThat(e, causeMessageContains(\"(10, \\\"one\\\"\"));\n+        mock.varargsString(10, \"xxx\", \"yyy\", \"zzz\");\n+\n+        try {\n+            verify(mock).varargsString(10, \"111\", \"222\", \"333\");\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            assertThat(e, messageContains(\"111\"));\n+            assertThat(e, causeMessageContains(\"\\\"xxx\\\"\"));\n         }\n     }\n ", "timestamp": 1206052145, "metainfo": ""}