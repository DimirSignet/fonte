{"sha": "f79e36a635cd08eca34cefb16cf51fb9ca7ee923", "log": "added SmartNulls feature (just like in the branch)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401065", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n import java.util.Arrays;\n \n+import org.mockito.configuration.ReturnValues;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.internal.progress.OngoingStubbing;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.returnvalues.SmartNullReturnValues;\n+import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.Returns;\n import org.mockito.internal.stubbing.Stubber;\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     \n+    //TODO rename\n+    public static final ReturnValues USING_GLOBAL_CONFIG = new GloballyConfiguredReturnValues();\n+    public static final ReturnValues SMART_NULLS = new SmartNullReturnValues();\n+    \n     static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();\n     private static final Reporter REPORTER = new Reporter();\n \n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n-        return mock(classToMock, null);\n+        return mock(classToMock, null, null, USING_GLOBAL_CONFIG);\n     }\n     \n     /**\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, String name) {\n-        return MockUtil.createMock(classToMock, MOCKING_PROGRESS, name, null);\n-    }\n+        return mock(classToMock, name, null, USING_GLOBAL_CONFIG);\n+    }\n+    \n+    /**\n+     * Creates mock with a specified strategy for its return values.\n+     *\n+     * <p>This can be helpful for working with legacy systems.</p>\n+     * \n+     * <p>See examples in javadoc for {@link Mockito} class</p>\n+     * \n+     * @param classToMock class or interface to mock\n+     * @return mock object\n+     */\n+    public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n+        return mock(classToMock, null, (T) null, returnValues);\n+    }\n+    \n+    private static <T> T mock(Class<T> classToMock, String name, T optionalInstance, ReturnValues returnValues) {\n+        return MockUtil.createMock(classToMock, MOCKING_PROGRESS, name, optionalInstance, returnValues);\n+    }    \n \n     /**\n      * Creates a spy of the real object. The spy calls <b>real</b> methods unless they are stubbed.\n      * @return a spy of the real object\n      */\n     public static <T> T spy(T object) {\n-        return MockUtil.createMock((Class<T>) object.getClass(), MOCKING_PROGRESS, null, object);\n+        return MockUtil.createMock((Class<T>) object.getClass(), MOCKING_PROGRESS, null, object, USING_GLOBAL_CONFIG);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/org/mockito/exceptions/verification/SmartNullPointerException.java\n+package org.mockito.exceptions.verification;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class SmartNullPointerException extends MockitoException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public SmartNullPointerException(String message, Throwable t) {\n+        super(message, t);\n+    }\n+\n+    public SmartNullPointerException(String message) {\n+        super(message);\n+    }\n+}\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n \n import net.sf.cglib.proxy.MethodProxy;\n \n-import org.mockito.internal.configuration.Configuration;\n+import org.mockito.configuration.ReturnValues;\n import org.mockito.internal.creation.MockAwareInterceptor;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n     private final MatchersBinder matchersBinder;\n     private final MockingProgress mockingProgress;\n     private final String mockName;\n+    private final ReturnValues returnValues;\n \n     private T instance;\n \n-    public MockHandler(String mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder) {\n+    public MockHandler(String mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder, ReturnValues returnValues) {\n         this.mockName = mockName;\n         this.mockingProgress = mockingProgress;\n         this.matchersBinder = matchersBinder;\n+        this.returnValues = returnValues;\n         this.mockitoStubber = new MockitoStubber(mockingProgress);\n         this.registeredInvocations = new RegisteredInvocations();\n     }\n         if (answer != null) {\n             return answer.answer(invocation);\n         } else if (MockUtil.isMock(instance)) {\n-            return Configuration.instance().getReturnValues().valueFor(invocation);\n+            return returnValues.valueFor(invocation);\n         } else {\n             return methodProxy.invoke(instance, args);\n         }\n--- /dev/null\n+++ b/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n+/**\n+ * \n+ */\n+package org.mockito.internal.returnvalues;\n+\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.internal.configuration.Configuration;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public final class GloballyConfiguredReturnValues implements ReturnValues {\n+    public Object valueFor(InvocationOnMock invocation) {\n+        return Configuration.instance().getReturnValues().valueFor(invocation);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+package org.mockito.internal.returnvalues;\n+\n+import java.lang.reflect.Method;\n+\n+import net.sf.cglib.proxy.InvocationHandler;\n+import net.sf.cglib.proxy.Proxy;\n+\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.exceptions.cause.UndesiredInvocation;\n+import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockito.internal.configuration.DefaultReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class SmartNullReturnValues implements ReturnValues {\n+\n+    private final ReturnValues delegate = new DefaultReturnValues();\n+\n+    public Object valueFor(InvocationOnMock invocation) {\n+        final Class<?> type = invocation.getMethod().getReturnType();\n+        if (type.isPrimitive()) {\n+            return delegate.valueFor(invocation);\n+        }\n+        //TODO change from UndesiredInvocation\n+        return Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[] {type}, new InvocationHandler() {\n+            Exception whenCreated = new UndesiredInvocation(\"Unstubbed method was invoked here\");\n+            //TODO create mock here\n+            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                throw new SmartNullPointerException(\"oops\", whenCreated);\n+            }});\n+    }\n+}\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.Factory;\n \n+import org.mockito.configuration.ReturnValues;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n \n public class MockUtil {\n     \n-    public static <T> T createMock(Class<T> classToMock, MockingProgress progress, String mockName, T optionalInstance) {\n+    public static <T> T createMock(Class<T> classToMock, MockingProgress progress, String mockName, T optionalInstance, ReturnValues returnValues) {\n         validateType(classToMock);\n         if (mockName == null) {\n             mockName = toInstanceName(classToMock);\n         }\n-        MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder());\n+        MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), returnValues);\n         MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);\n         \n         T mock = (T) ClassImposterizer.INSTANCE.imposterise(filter, classToMock);\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n         MockingProgressImpl state = new MockingProgressImpl();\n         state.verificationStarted(VerificationModeFactory.atLeastOnce());\n-        MockHandler handler = new MockHandler(null, state, new ExceptionThrowingBinder());\n+        MockHandler handler = new MockHandler(null, state, new ExceptionThrowingBinder(), null);\n         \n         try {\n             handler.intercept(null, String.class.getDeclaredMethod(\"toString\"), new Object[]{}, null);\n--- /dev/null\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+package org.mockito.internal.returnvalues;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockitoutil.TestBase;\n+\n+public class SmartNullReturnValuesTest extends TestBase {\n+    \n+    interface HasPrimitiveMethods {\n+        boolean booleanMethod();\n+        char charMethod();\n+        int intMethod();\n+        long longMethod();\n+        float floatMethod();\n+        double doubleMethod();\n+    }\n+\n+    private Invocation invocationOf(Class<?> type, String methodName) throws NoSuchMethodException {\n+        return new Invocation(new Object(), type.getMethod(methodName, new Class[0]), new Object[0], 1);\n+    }\n+    \n+    //TODO review other default return values\n+    @Test\n+    public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Exception {\n+        SmartNullReturnValues returnValues = new SmartNullReturnValues();\n+        assertEquals(false  ,   returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n+        assertEquals((char) 0,  returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n+        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+    }\n+    \n+    interface HasInterfaceMethod {\n+        List<String> doListStuff();\n+    }\n+    \n+    @Test\n+    public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Exception {\n+        ReturnValues returnValues = new SmartNullReturnValues();\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        List<String> smartNull = (List<String>) returnValues.valueFor(invocationOf(HasInterfaceMethod.class, \"doListStuff\"));\n+        \n+        try {\n+            smartNull.iterator();\n+            fail();\n+        } catch (SmartNullPointerException expected) {}\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n+package org.mockitousage.stubbing;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.configuration.experimental.ConfigurationSupport;\n+import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+\n+public class GloballyConfiguredReturnValuesTest extends TestBase {\n+    \n+    public class HardCodedReturnValues implements ReturnValues {\n+        private final String returnValue;\n+\n+        public HardCodedReturnValues(String returnValue) {\n+            this.returnValue = returnValue;\n+        }\n+\n+        @Override\n+        public Object valueFor(InvocationOnMock invocation) {\n+            return returnValue;\n+        }\n+    }\n+\n+    @Test\n+    public void shouldUseCurrentlyConfiguredReturnValuesEvenIfTheyChangeAtRuntime() throws Exception {\n+        ReturnValues returnsEdam = new HardCodedReturnValues(\"edam\");\n+        ReturnValues returnsCheddar = new HardCodedReturnValues(\"cheddar\");\n+        IMethods mock = Mockito.mock(IMethods.class, new GloballyConfiguredReturnValues());\n+        \n+        ConfigurationSupport.getConfiguration().setReturnValues(returnsEdam);\n+        \n+        assertEquals(\"edam\", mock.simpleMethod());\n+        \n+        ConfigurationSupport.getConfiguration().setReturnValues(returnsCheddar);\n+        \n+        assertEquals(\"cheddar\", mock.simpleMethod());\n+    }\n+    \n+    @After\n+    public void resetReturnValues() {\n+        ConfigurationSupport.getConfiguration().resetReturnValues();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stubbing;\n+\n+import static org.mockito.Mockito.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n+\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class SmartNullsStubbingTest extends TestBase {\n+\n+    private IMethods mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = mock(IMethods.class, Mockito.SMART_NULLS);\n+    }\n+    \n+    public List unstubbedMethodInvokedHere(IMethods mock) {\n+        return mock.listReturningMethod();\n+    }\n+\n+    @Test\n+    public void shouldThrowSmartNPE() throws Exception {\n+        List list = unstubbedMethodInvokedHere(mock); \n+        try {\n+            list.clear();\n+            fail();\n+        } catch (SmartNullPointerException e) {\n+            assertThat(e.getCause(),  hasMethodInStackTraceAt(0, \"unstubbedMethodInvokedHere\"));\n+        }\n+    }\n+}", "timestamp": 1225408138, "metainfo": ""}