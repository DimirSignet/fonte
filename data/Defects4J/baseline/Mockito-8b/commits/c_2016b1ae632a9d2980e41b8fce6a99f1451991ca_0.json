{"sha": "2016b1ae632a9d2980e41b8fce6a99f1451991ca", "log": "javadocs + BDDMockitoTest improvement  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401462", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n          * See original {@link NewOngoingStubbing#thenThrow(Throwable...)}\n          */\n         BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);\n+\n+        /**\n+         * See original {@link NewOngoingStubbing#thenCallRealMethod()}\n+         */\n+        BDDMyOngoingStubbing<T> willCallRealMethod();\n     }\n     \n     public static class BDDOngoingStubbingImpl<T> implements BDDMyOngoingStubbing<T> {\n          */\n         public BDDMyOngoingStubbing<T> willThrow(Throwable... throwables) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwables));\n+        }\n+\n+        public BDDMyOngoingStubbing<T> willCallRealMethod() {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenCallRealMethod());\n         }\n     }\n     \n     public static BDDStubber willReturn(Object toBeReturned) {\n         return new BDDStubberImpl(Mockito.doReturn(toBeReturned));\n     }\n+\n+    /**\n+     * see original {@link Mockito#doCallRealMethod()}\n+     */\n+    public static BDDStubber willCallRealMethod() {\n+        return new BDDStubberImpl(Mockito.doCallRealMethod());\n+    }\n }\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n      * Specifies the instance to spy on. Makes sense only for spies/partial mocks.\n      * <p>\n      * As usual you are going to read the partial mock warning:\n-     * Object oriented programming is more less tackling complexity by dividing the complexity and moving it to specific objects.\n+     * Object oriented programming is more less tackling complexity by dividing the complexity and placing it in separate, specific objects.\n      * Partial mock is a sign that the code is not well designed. \n      * It usually means that the complexity has been moved to a different method on the same object.\n      * Partial mocks are useful when dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     /**\n      * Use doCallRealMethod() when you want to call the real implementation of a method.\n      * <p>\n-     * TODO: mention partial mocks warning\n+     *      * As usual you are going to read the partial mock warning:\n+     * Object oriented programming is more less tackling complexity by dividing the complexity and placing it in separate, specific objects.\n+     * Partial mock is a sign that the code is not well designed. \n+     * It usually means that the complexity has been moved to a different method on the same object.\n+     * Partial mocks are useful when dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n+     * I wouldn't use them for new code.\n+\n      * <p>\n      * Example:\n      * <pre>\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n         \n         assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n     }\n+    \n+    class Dog {\n+        public String bark() {\n+            return \"woof\";\n+        }\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void shouldStubByDelegatingToRealMethod() throws Exception {\n+        //given\n+        Dog dog = mock(Dog.class);\n+        //when\n+        willCallRealMethod().given(dog).bark();\n+        //then\n+        assertEquals(\"woof\", dog.bark());\n+    }\n+    \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax() throws Exception {\n+        //given\n+        Dog dog = mock(Dog.class);\n+        //when\n+        given(dog.bark()).willCallRealMethod();\n+        //then\n+        assertEquals(\"woof\", dog.bark());\n+    }\n }", "timestamp": 1244065780, "metainfo": ""}