{"sha": "5407b559c57d256cd6f88ef950d612828d839234", "log": "got rid of one of the TODOs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401130", "commit": "\n--- a/src/org/mockito/internal/debugging/WarningsPrinter.java\n+++ b/src/org/mockito/internal/debugging/WarningsPrinter.java\n             logger.log(join(\n                 \"[Mockito] Warning - this method was not stubbed:\",\n                 i,\n-                \"Here:\",\n+                \"Click here:\",\n                 i.getInvocation().getStackTrace().getStackTrace()[0],\n                 \"\"));\n         }\n             logger.log(join(\n                 \"[Mockito] Warning - this stub was not used:\",\n                 i,\n-                \"Here:\",\n+                \"Click here:\",\n                 i.getStackTrace().getStackTrace()[0],\n                 \"\"));\n         }\n                             \"[Mockito] Warning - stubbed method called with different arguments.\",\n                             \"Stubbed this way:\",\n                             unused,\n-                            \"Here:\",\n+                            \"Click here:\",\n                             unused.getStackTrace().getStackTrace()[0],\n                             \"\",\n                             \"But called with different arguments:\",\n                             unstubbed.getInvocation(),\n-                            \"Here:\",\n+                            \"Click here:\",\n                             unstubbed.getInvocation().getStackTrace().getStackTrace()[0],\n                             \"\"));\n                     \n--- a/test/org/mockito/runners/ExperimentalMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/ExperimentalMockitoJUnitRunnerTest.java\n         runner.run(notifier, new JunitTestBody() {\n             public void run(RunNotifier notifier) {\n                 someStubbing();\n-                //TODO below should be different test method\n-//                callStubbedMethodCorrectly();\n                 callStubbedMethodWithDifferentArgs();\n                 notifier.fireTestFailure(null);\n                 \n                 assertThat(loggedInfo, contains(\"But called with different arguments:\"));\n                 assertThat(loggedInfo, contains(\"mock.simpleMethod(10);\"));\n                 assertThat(loggedInfo, contains(\".callStubbedMethodWithDifferentArgs(\"));\n-                \n-                assertThat(loggedInfo, notContains(\".callStubbedMethodCorrectly(\"));\n             }\n         });\n     }\n     \n     @Test\n-    public void shouldNotLogUsedStubbingWarningWhenTestFails() throws Exception {\n+    public void shouldNotLogAnythingWhenStubCalledCorrectly() throws Exception {\n+        runner.run(notifier, new JunitTestBody() {\n+            public void run(RunNotifier notifier) {\n+                when(mock.simpleMethod(1)).thenReturn(\"foo\");\n+                mock.simpleMethod(1);\n+\n+                notifier.fireTestFailure(null);\n+                \n+                assertEquals(\"\", loggerStub.getLoggedInfo());\n+            }\n+        });\n+    }\n+    \n+    @Test\n+    public void shouldNotLogWhenTestPasses() throws Exception {\n         runner.run(notifier, new JunitTestBody() {\n             public void run(RunNotifier notifier) {\n                 when(mock.simpleMethod()).thenReturn(\"foo\");\n-                mock.simpleMethod();\n                 \n-                notifier.fireTestFailure(null);\n+                notifier.fireTestFinished(null);\n                 \n-                String loggedInfo = loggerStub.getLoggedInfo();\n-                assertEquals(\"\", loggedInfo);\n+                assertEquals(\"\", loggerStub.getLoggedInfo());\n             }\n         });\n     }\n         when(mock.simpleMethod(789)).thenReturn(\"foo\");\n     }\n     \n-    private void callStubbedMethodCorrectly() {\n-        mock.simpleMethod(789);\n-    }\n-\n     private void callStubbedMethodWithDifferentArgs() {\n         mock.simpleMethod(10);\n     }\n         StringBuilder loggedInfo = new StringBuilder();\n         \n         public void log(Object what) {\n-//            can be uncommented when debugging this test\n-//            super.log(what);\n+            super.log(what);\n             loggedInfo.append(what);\n         }\n ", "timestamp": 1231102440, "metainfo": ""}