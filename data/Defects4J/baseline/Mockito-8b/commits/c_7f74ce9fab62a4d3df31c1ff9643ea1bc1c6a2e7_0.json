{"sha": "7f74ce9fab62a4d3df31c1ff9643ea1bc1c6a2e7", "log": "changed names  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40250", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n+\n+import java.util.Arrays;\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.MockHandler;\n  *   secondMock.add(\"two\");\n  *   \n  *   //create strict verifier \n- *   Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+ *   Strictly strictly = strictly(firstMock, secondMock);\n  *   \n  *   //following will make sure that firstMock was called before secondMock\n  *   strictly.verify(firstMock).add(\"should be called first\");\n      * Creates strict verifier that allows verifying mocks in order.\n      * \n      * <pre>\n-     *   Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+     *   Strictly strictly = strictly(firstMock, secondMock);\n      *   \n      *   strictly.verify(firstMock).add(\"should be called first\");\n      *   strictly.verify(secondMock).add(\"should be called second\");\n      * \n      * @return verifier object to be used to verify strictly\n      */\n-    public static Strictly createStrictOrderVerifier(Object... mocks) {\n+    public static Strictly strictly(Object... mocks) {\n         if (mocks.length == 0) {\n             REPORTER.mocksHaveToBePassedWhenCreatingStrictly();\n         }\n-        StrictOrderVerifier strictOrderVerifier = new StrictOrderVerifier();\n         for (Object mock : mocks) {\n             MockUtil.validateMock(mock);\n-            strictOrderVerifier.addMockToBeVerifiedStrictly(mock);\n         }\n+        Strictly strictOrderVerifier = new StrictOrderVerifier(Arrays.asList(mocks));\n         return strictOrderVerifier;\n     }\n \n--- a/src/org/mockito/StrictOrderVerifier.java\n+++ b/src/org/mockito/StrictOrderVerifier.java\n     private final Reporter reporter = new Reporter();\n     private final List<Object> mocksToBeVerifiedSrictly = new LinkedList<Object>();\n     \n-    public void addMockToBeVerifiedStrictly(Object mock) {\n-        mocksToBeVerifiedSrictly.add(mock);\n+    public StrictOrderVerifier(List<Object> mocksToBeVerifiedStrictly) {\n+        mocksToBeVerifiedSrictly.addAll(mocksToBeVerifiedStrictly);\n     }\n-    \n+\n     public <T> T verify(T mock) {\n         return this.verify(mock, VerificationModeImpl.times(1));\n     }\n--- a/src/org/mockito/Strictly.java\n+++ b/src/org/mockito/Strictly.java\n  * Allows strict order verification. E.g:\n  * \n  * <pre>\n- * Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+ * Strictly strictly = strictly(firstMock, secondMock);\n  * \n  * strictly.verify(firstMock).add(\"should be called first\");\n  * strictly.verify(secondMock).add(\"should be called second\");\n  * </pre>\n  * \n- * See examples {@link Mockito#createStrictOrderVerifier(Object...)}\n+ * See examples {@link Mockito#strictly(Object...)}\n  */\n public interface Strictly {\n     /**\n      * Verifies mock object strictly in order. E.g:\n      * \n      * <pre>\n-     * Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+     * Strictly strictly = strictly(firstMock, secondMock);\n      * \n      * strictly.verify(firstMock).add(\"should be called first\");\n      * strictly.verify(secondMock).add(\"should be called second\");\n      * Verifies mock object strictly in order. E.g:\n      * \n      * <pre>\n-     * Strictly strictly = createStrictOrderVerifier(firstMock, secondMock);\n+     * Strictly strictly = strictly(firstMock, secondMock);\n      * \n      * strictly.verify(firstMock, times(2)).add(\"should be called first two times\");\n      * strictly.verify(secondMock, atLeastOnce()).add(\"should be called second\");\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     public void strictlyRequiresFamiliarMock() {\n         throw new MockitoException(join(\n                 \"Strictly can only verify mocks that were passed in during creation of Strictly. E.g:\",\n-                \"strictly = createStrictOrderVerifier(mockOne)\",\n+                \"Strictly strictly = strictly(mockOne)\",\n                 \"strictly.verify(mockOne).doStuff()\"\n                 ));\n     }\n         throw new MockitoException(join(\n                 \"Method requires arguments.\",\n                 \"Pass mocks that require strict order verification, e.g:\",\n-                \"createStrictOrderVerifier(mockOne, mockTwo)\"\n+                \"strictly(mockOne, mockTwo)\"\n                 ));\n     }\n \n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n     \n     @Test(expected=NotAMockException.class)\n     public void shouldValidateMockWhenGettingStrictVerifier() {\n-        Mockito.createStrictOrderVerifier(\"notMock\");\n+        Mockito.strictly(\"notMock\");\n     }\n }\n--- a/test/org/mockitousage/InvalidStateDetectionTest.java\n+++ b/test/org/mockitousage/InvalidStateDetectionTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n-import static org.mockito.Mockito.createStrictOrderVerifier;\n+import static org.mockito.Mockito.strictly;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.stub;\n import static org.mockito.Mockito.stubVoid;\n     \n     private static class OnStrictVerify implements DetectsInvalidState {\n         public void detect(IMethods mock) {\n-            createStrictOrderVerifier(mock).verify(mock);\n+            strictly(mock).verify(mock);\n         }\n     }\n     \n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n  */\n package org.mockitousage;\n \n-import static org.mockito.Mockito.createStrictOrderVerifier;\n+import static org.mockito.Mockito.strictly;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.stub;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotCreateStrictlyWithoutMocks() {\n-        createStrictOrderVerifier();\n+        strictly();\n     }\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotStrictlyVerifyUnfamilarMocks() {\n-        Strictly strictly = createStrictOrderVerifier(mock);\n+        Strictly strictly = strictly(mock);\n         strictly.verify(mockTwo).simpleMethod();\n     }\n     \n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java\n     public void setup() {\n         mock = Mockito.mock(IMethods.class);\n         mockTwo = Mockito.mock(IMethods.class);\n-        strictly = createStrictOrderVerifier(mock, mockTwo);\n+        strictly = strictly(mock, mockTwo);\n         \n         firstChunk();\n         secondChunk();\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationTest.java\n     public void setup() {\n         mock = Mockito.mock(IMethods.class);\n         mockTwo = Mockito.mock(IMethods.class);\n-        strictly = createStrictOrderVerifier(mock, mockTwo);\n+        strictly = strictly(mock, mockTwo);\n         \n         first();\n         second();\n--- a/test/org/mockitousage/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/StackTraceFilteringTest.java\n     \n     @Test\n     public void shouldFilterStacktraceWhenStrictlyVerifying() {\n-        Strictly strictly = createStrictOrderVerifier(mock);\n+        Strictly strictly = strictly(mock);\n         mock.oneArg(true);\n         mock.oneArg(false);\n         \n     @Test\n     public void shouldFilterStacktraceWhenStrictlyThrowsMockitoException() {\n         try {\n-            createStrictOrderVerifier();\n+            strictly();\n             fail();\n         } catch (MockitoException expected) {\n             assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenStrictlyThrowsMockitoException\"));\n     @Test\n     public void shouldFilterStacktraceWhenStrictlyVerifies() {\n         try {\n-            Strictly strictly = createStrictOrderVerifier(mock);\n+            Strictly strictly = strictly(mock);\n             strictly.verify(null);\n             fail();\n         } catch (MockitoException expected) {\n--- a/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n         Sub sub = mock(Sub.class);\n         setMockWithDowncast(sub);\n         say(\"Hello\");\n-        Strictly strictly = createStrictOrderVerifier(mock);\n+        Strictly strictly = strictly(mock);\n         try {\n             strictly.verify(sub).say(\"Hello\");\n             fail();\n--- a/test/org/mockitousage/sample/MockitoSampleTest.java\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n         \n         articleManager.updateRelatedArticlesCounters(\"Guardian\");\n \n-        Strictly strictly = createStrictOrderVerifier(mockDatabase);\n+        Strictly strictly = strictly(mockDatabase);\n         \n         strictly.verify(mockDatabase, atLeastOnce()).getArticlesFor(anyString());\n         strictly.verify(mockDatabase, atLeastOnce()).save((Article) anyObject());\n--- a/test/org/mockitousage/verification/BasicStrictVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicStrictVerificationTest.java\n         mockTwo = mock(IMethods.class);\n         mockThree = mock(IMethods.class);\n         \n-        strictly = createStrictOrderVerifier(mockOne, mockTwo, mockThree);\n+        strictly = strictly(mockOne, mockTwo, mockThree);\n \n         mockOne.simpleMethod(1);\n         mockTwo.simpleMethod(2);\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n         two.simpleMethod(2);\n         three.simpleMethod(3);\n         \n-        strictly = createStrictOrderVerifier(one, two, three);\n+        strictly = strictly(one, two, three);\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/RelaxedStrictVerificationTest.java\n+++ b/test/org/mockitousage/verification/RelaxedStrictVerificationTest.java\n         mockTwo = mock(IMethods.class);\n         mockThree = mock(IMethods.class);\n         \n-        strictly = createStrictOrderVerifier(mockOne, mockTwo, mockThree);\n+        strictly = strictly(mockOne, mockTwo, mockThree);\n \n         mockOne.simpleMethod(1);\n         mockTwo.simpleMethod(2);\n--- a/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n+++ b/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n     \n     @Test\n     public void shouldVerifyStrictlyAllInvocations() {\n-        Strictly strictly = createStrictOrderVerifier(mockOne, mockTwo, mockThree);\n+        Strictly strictly = strictly(mockOne, mockTwo, mockThree);\n         strictly.verify(mockOne).simpleMethod(1);\n         strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         strictly.verify(mockThree).simpleMethod(3);\n     \n     @Test\n     public void shouldVerifyStrictlyMockTwoAndThree() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo, mockThree);\n+        Strictly strictly = strictly(mockTwo, mockThree);\n         \n         strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         strictly.verify(mockThree).simpleMethod(3);\n     \n     @Test\n     public void shouldVerifyStrictlyMockOneAndThree() {\n-        Strictly strictly = createStrictOrderVerifier(mockOne, mockThree);\n+        Strictly strictly = strictly(mockOne, mockThree);\n         \n         strictly.verify(mockOne).simpleMethod(1);\n         strictly.verify(mockThree).simpleMethod(3);\n     \n     @Test\n     public void shouldVerifyStrictlyMockOne() {\n-        Strictly strictly = createStrictOrderVerifier(mockOne);\n+        Strictly strictly = strictly(mockOne);\n         \n         strictly.verify(mockOne).simpleMethod(1);\n         strictly.verify(mockOne).simpleMethod(4);\n     \n     @Test\n     public void shouldFailVerificationForMockOne() {\n-        Strictly strictly = createStrictOrderVerifier(mockOne);\n+        Strictly strictly = strictly(mockOne);\n         \n         strictly.verify(mockOne).simpleMethod(1);\n         try {\n     \n     @Test\n     public void shouldFailVerificationForMockOneBecauseOfWrongOrder() {\n-        Strictly strictly = createStrictOrderVerifier(mockOne);\n+        Strictly strictly = strictly(mockOne);\n         \n         try {\n             strictly.verify(mockOne).simpleMethod(4);\n \n     @Test\n     public void shouldVerifyStrictlyMockTwoWhenThreeTimesUsed() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n         \n         strictly.verify(mockTwo, times(3)).simpleMethod(2);\n         \n     \n     @Test\n     public void shouldVerifyStrictlyMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n         \n         strictly.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n         \n     \n     @Test\n     public void shouldFailVerificationForMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n \n         try {\n             strictly.verify(mockTwo).simpleMethod(2);\n     \n     @Test\n     public void shouldThrowNoMoreInvocationsForMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n \n         try {\n             strictly.verify(mockTwo, times(2)).simpleMethod(2);\n     \n     @Test\n     public void shouldThrowTooLittleInvocationsForMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n \n         try {\n             strictly.verify(mockTwo, times(4)).simpleMethod(2);\n     \n     @Test\n     public void shouldThrowTooManyInvocationsForMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n \n         try {\n             strictly.verify(mockTwo, times(2)).simpleMethod(2);\n     \n     @Test\n     public void shouldAllowThreeTimesOnMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo);\n+        Strictly strictly = strictly(mockTwo);\n \n         strictly.verify(mockTwo, times(3)).simpleMethod(2);\n         verifyNoMoreInteractions(mockTwo);\n     \n     @Test\n     public void shouldVerifyMockTwoCompletely() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo, mockThree);\n+        Strictly strictly = strictly(mockTwo, mockThree);\n \n         strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         strictly.verify(mockThree).simpleMethod(3);\n     \n     @Test\n     public void shouldAllowTwoTimesOnMockTwo() {\n-        Strictly strictly = createStrictOrderVerifier(mockTwo, mockThree);\n+        Strictly strictly = strictly(mockTwo, mockThree);\n \n         strictly.verify(mockTwo, times(2)).simpleMethod(2);\n         try {\n--- a/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n         mockThree.simpleMethod(3);\n         mockThree.simpleMethod(4);\n \n-        strictly = createStrictOrderVerifier(mockOne, mockThree);\n+        strictly = strictly(mockOne, mockThree);\n     }\n     \n     @Test\n         \n         verify(mockOne, times(2)).simpleMethod(textOne);\n         \n-        strictly = createStrictOrderVerifier(mockOne);\n+        strictly = strictly(mockOne);\n         strictly.verify(mockOne, times(2)).simpleMethod(textOne);\n     } \n     \n         \n         verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n         \n-        strictly = createStrictOrderVerifier(mockOne);\n+        strictly = strictly(mockOne);\n         strictly.verify(mockOne, times(2)).varargsObject(1, textOne, textOne);\n     } \n }\n--- a/test/org/mockitousage/verification/StrictVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationTest.java\n         mockTwo = mock(IMethods.class);\n         mockThree = mock(IMethods.class);\n         \n-        strictly = createStrictOrderVerifier(mockOne, mockTwo, mockThree);\n+        strictly = strictly(mockOne, mockTwo, mockThree);\n     }\n     \n     @Test\n     public void shouldVerifySingleMockStrictlyAndNotStrictly() {\n         mockOne = mock(IMethods.class);\n-        strictly = createStrictOrderVerifier(mockOne);\n+        strictly = strictly(mockOne);\n         \n         mockOne.simpleMethod(1);\n         mockOne.simpleMethod(2);", "timestamp": 1198968694, "metainfo": ""}