{"sha": "d3dd50fedb29865aac03394a10b8350dfac67ae0", "log": "fusioning issue 146 branch", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n          * See original {@link OngoingStubbing#thenAnswer(Answer)}\n          */\n         BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer);\n-        \n+\n+        /**\n+         * See original {@link OngoingStubbing#then(Answer)}\n+         */\n+        BDDMyOngoingStubbing<T> will(Answer<?> answer);\n+\n         /**\n          * See original {@link OngoingStubbing#thenReturn(Object)}\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value);\n-        \n+\n         /**\n          * See original {@link OngoingStubbing#thenReturn(Object, Object[])}\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value, T... values);\n-        \n+\n         /**\n          * See original {@link OngoingStubbing#thenThrow(Throwable...)}\n          */\n          */\n         BDDMyOngoingStubbing<T> willCallRealMethod();\n \n+        /**\n+         * See original {@link OngoingStubbing#getMock()}\n+         */\n         <M> M getMock();\n     }\n     \n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willAnswer(org.mockito.stubbing.Answer)\n+         * @see BDDMockito.BDDMyOngoingStubbing#willAnswer(Answer)\n          */\n         public BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenAnswer(answer));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object)\n+         * @see BDDMockito.BDDMyOngoingStubbing#will(Answer)\n+         */\n+        public BDDMyOngoingStubbing<T> will(Answer<?> answer) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.then(answer));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object)\n          */\n         public BDDMyOngoingStubbing<T> willReturn(T value) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object, T[])\n+         * @see BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object, T[])\n          */\n         public BDDMyOngoingStubbing<T> willReturn(T value, T... values) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value, values));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Throwable[])\n+         * @see BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Throwable[])\n          */\n         public BDDMyOngoingStubbing<T> willThrow(Throwable... throwables) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwables));\n         }\n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Class[])\n+         * @see BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Class[])\n          */\n         public BDDMyOngoingStubbing<T> willThrow(Class<? extends Throwable>... throwableClasses) {\n             return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwableClasses));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDStubber#given(java.lang.Object)\n+         * @see BDDMockito.BDDStubber#given(java.lang.Object)\n          */\n         public <T> T given(T mock) {\n             return mockitoStubber.when(mock);\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willAnswer(org.mockito.stubbing.Answer)\n+         * @see BDDMockito.BDDStubber#willAnswer(Answer)\n          */\n         public BDDStubber willAnswer(Answer answer) {\n             return new BDDStubberImpl(mockitoStubber.doAnswer(answer));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willNothing()\n+         * @see BDDMockito.BDDStubber#willNothing()\n          */\n         public BDDStubber willNothing() {\n             return new BDDStubberImpl(mockitoStubber.doNothing());\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willReturn(java.lang.Object)\n+         * @see BDDMockito.BDDStubber#willReturn(java.lang.Object)\n          */\n         public BDDStubber willReturn(Object toBeReturned) {\n             return new BDDStubberImpl(mockitoStubber.doReturn(toBeReturned));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willThrow(java.lang.Throwable)\n+         * @see BDDMockito.BDDStubber#willThrow(java.lang.Throwable)\n          */\n         public BDDStubber willThrow(Throwable toBeThrown) {\n             return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n         }\n \n         /* (non-Javadoc)\n-         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willThrow(Class)\n+         * @see BDDMockito.BDDStubber#willThrow(Class)\n          */\n         public BDDStubber willThrow(Class<? extends Throwable> toBeThrown) {\n             return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n--- a/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n+++ b/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n         invocationContainerImpl.addConsecutiveAnswer(answer);\n         return this;\n     }\n+\n+    public OngoingStubbing<T> then(Answer<?> answer) {\n+        return thenAnswer(answer);\n+    }\n     \n     public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n         invocationContainerImpl.addConsecutiveAnswer(answer);\n--- a/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n+++ b/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n         return new ConsecutiveStubbing<T>(invocationContainerImpl);\n     }\n \n+    public OngoingStubbing<T> then(Answer<?> answer) {\n+        return thenAnswer(answer);\n+    }\n+\n     public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n         invocationContainerImpl.addAnswer(answer);\n         return new ConsecutiveStubbing<T>(invocationContainerImpl);\n--- a/src/org/mockito/stubbing/OngoingStubbing.java\n+++ b/src/org/mockito/stubbing/OngoingStubbing.java\n     OngoingStubbing<T> thenAnswer(Answer<?> answer);\n \n     /**\n+     * Sets a generic Answer for the method.\n+     *\n+     * This method is an alias of {@link #thenAnswer(Answer)}.\n+     *\n+     * @param answer the custom answer to execute.\n+     * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     *\n+     * @see #thenAnswer(Answer)\n+     */\n+    OngoingStubbing<T> then(Answer<?> answer);\n+\n+    /**\n      * Returns the mock that was used for this stub.\n+     *\n+     * This code allows fast mock creation and stubbing. E.g:\n+     * <pre>\n+     * Set mockedSet = when(mock(Set.class).isEmpty()).thenReturn(false).getMock();\n+     * </pre>\n      *\n      * @param <M> The mock type given by the variable type.\n      * @return Mock used in this ongoing stubbing.\n      */\n     <M> M getMock();\n+\n }\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n                 return (String) invocation.getArguments()[0];\n             }});\n         \n+        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n+    }\n+\n+    @Test\n+    public void shouldStubWithWillAnswerAlias() throws Exception {\n+        given(mock.simpleMethod(anyString())).will(new Answer<String>() {\n+            public String answer(InvocationOnMock invocation) throws Throwable {\n+                return (String) invocation.getArguments()[0];\n+            }});\n+\n         assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n     }\n \n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockitousage.stubbing;\n-\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n-\n-import java.lang.reflect.Method;\n \n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n+\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.stubVoid;\n+import static org.mockito.Mockito.when;\n \n @SuppressWarnings({\"unchecked\", \"deprecation\"})\n public class StubbingWithCustomAnswerTest extends TestBase {\n         });\n \n         assertEquals(\"simpleMethod-test\", mock.simpleMethod(\"test\"));\n+    }\n+\n+    @Test\n+    public void shouldAnswerWithThenAnswerAlias() throws Exception {\n+        RecordCall recordCall = new RecordCall();\n+        Set mockedSet = when(mock(Set.class).isEmpty()).then(recordCall).getMock();\n+\n+        mockedSet.isEmpty();\n+\n+        assertTrue(recordCall.isCalled());\n     }\n \n     @Test\n         mock.voidMethod();\n         assertTrue(call2.isCalled());\n     }\n-    \n+\n     @Test\n     public void shouldMakeSureTheInterfaceDoesNotChange() throws Exception {\n         when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {\n             public String answer(InvocationOnMock invocation) throws Throwable {\n                 assertTrue(invocation.getArguments().getClass().isArray());\n                 assertEquals(Method.class, invocation.getMethod().getClass());\n-                \n+\n                 return \"assertions passed\";\n             }\n         });\n \n         assertEquals(\"assertions passed\", mock.simpleMethod(\"test\"));\n-    }    \n+    }\n \n     private static class RecordCall implements Answer {\n         private boolean called = false;", "timestamp": 1297884450, "metainfo": ""}