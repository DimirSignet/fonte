{"sha": "501e8f84361af21ce23d506e3c5b284375908bdd", "log": "refactoring, rename job  --HG-- rename : src/org/mockito/internal/stubbing/MockitoStubber.java => src/org/mockito/internal/stubbing/InvocationContainerImpl.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401729", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.StubInfo;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.stubbing.answers.AnswersValidator;\n+import org.mockito.internal.verification.RegisteredInvocations;\n+import org.mockito.stubbing.Answer;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class InvocationContainerImpl implements InvocationContainer, Serializable {\n+\n+    private static final long serialVersionUID = -5334301962749537176L;\n+    private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();\n+    private final MockingProgress mockingProgress;\n+    private final List<Answer> answersForStubbing = new ArrayList<Answer>();\n+    private final RegisteredInvocations registeredInvocations = new RegisteredInvocations();\n+\n+    private InvocationMatcher invocationForStubbing;\n+\n+    public InvocationContainerImpl(MockingProgress mockingProgress) {\n+        this.mockingProgress = mockingProgress;\n+    }\n+\n+    public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\n+        registeredInvocations.add(invocation.getInvocation());\n+        this.invocationForStubbing = invocation;\n+    }\n+\n+    public void resetInvocationForPotentialStubbing(InvocationMatcher invocationMatcher) {\n+        this.invocationForStubbing = invocationMatcher;\n+    }\n+\n+    public void addAnswer(Answer answer) {\n+        registeredInvocations.removeLast();\n+        addAnswer(answer, false);\n+    }\n+\n+    public void addConsecutiveAnswer(Answer answer) {\n+        addAnswer(answer, true);\n+    }\n+\n+    private void addAnswer(Answer answer, boolean isConsecutive) {\n+        Invocation invocation = invocationForStubbing.getInvocation();\n+        mockingProgress.stubbingCompleted(invocation);\n+        AnswersValidator answersValidator = new AnswersValidator();\n+        answersValidator.validate(answer, invocation);\n+\n+        if (isConsecutive) {\n+            stubbed.getFirst().addAnswer(answer);\n+        } else {\n+            stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n+        }\n+    }\n+\n+    Object answerTo(Invocation invocation) throws Throwable {\n+        return findAnswerFor(invocation).answer(invocation);\n+    }\n+\n+    public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\n+        for (StubbedInvocationMatcher s : stubbed) {\n+            if (s.matches(invocation)) {\n+                invocation.markStubbed(new StubInfo(s.getInvocation()));\n+                s.markStubUsed(invocation);\n+                return s;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public void addAnswerForVoidMethod(Answer answer) {\n+        answersForStubbing.add(answer);\n+    }\n+\n+    public void setAnswersForStubbing(List<Answer> answers) {\n+        answersForStubbing.addAll(answers);\n+    }\n+\n+    public boolean hasAnswersForStubbing() {\n+        return !answersForStubbing.isEmpty();\n+    }\n+\n+    public void setMethodForStubbing(InvocationMatcher invocation) {\n+        invocationForStubbing = invocation;\n+        assert hasAnswersForStubbing();\n+        for (int i = 0; i < answersForStubbing.size(); i++) {\n+            addAnswer(answersForStubbing.get(i), i != 0);\n+        }\n+        answersForStubbing.clear();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"invocationForStubbing: \" + invocationForStubbing;\n+    }\n+\n+    public List<Invocation> getInvocations() {\n+        return registeredInvocations.getAll();\n+    }\n+\n+    public List<StubbedInvocationMatcher> getStubbedInvocations() {\n+        return stubbed;\n+    }\n+}", "timestamp": 1258316396, "metainfo": ""}