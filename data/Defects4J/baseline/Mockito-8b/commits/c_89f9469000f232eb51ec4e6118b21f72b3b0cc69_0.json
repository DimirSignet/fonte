{"sha": "89f9469000f232eb51ec4e6118b21f72b3b0cc69", "log": "Javadoc fixes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401770", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n  * was in a web environment and the objects from the external dependency were being serialized to pass between layers. \n  * <p>\n- * To create serializable mock use {@link #withSettings().serializable()}:\n+ * To create serializable mock use {@link MockSettings#serializable()}:\n  * <pre>\n  *   List serializableMock = mock(List.class, withSettings().serializable());\n  * </pre>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param classToMock class or interface to mock\n+     * @param name of the mock \n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, String name) {\n      * </pre>\n      *\n      * @param <T>\n-     * @param mocks\n+     * @param mocks to be reset\n      */\n     public static <T> void reset(T ... mocks) {\n         MOCKITO_CORE.reset(mocks);\n      * \n      * <p>\n      * If you want to verify there were NO interactions with the mock \n-     * check out {@link Mockito#verifyZeroInteractions(Object[])}\n-     * or {@link Mockito#verifyNoMoreInteractions(Object[])}\n+     * check out {@link Mockito#verifyZeroInteractions(Object...)}\n+     * or {@link Mockito#verifyNoMoreInteractions(Object...)}\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * </pre>\n      * \n      * <p>\n-     * See also {@link Mockito#verifyNoMoreInteractions(Object[])}\n+     * See also {@link Mockito#verifyNoMoreInteractions(Object...)}\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * <p>\n      * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a> \n      * <p>\n-     * {@link Mockito#validateMockitoUsage()} <b>explicitly validates</b> the framework state to detect invalid use of Mockito.\n+     * validateMockitoUsage() <b>explicitly validates</b> the framework state to detect invalid use of Mockito.\n      * However, this feature is optional <b>because Mockito validates the usage all the time...</b> but there is a gotcha so read on.\n      * <p>\n      * Examples of incorrect use:\n      * Hence you can click and find the place where Mockito was misused.\n      * <p>\n      * Sometimes though, you might want to validate the framework usage explicitly. \n-     * For example, one of the users wanted to put {@link Mockito#validateMockitoUsage()} in his &#064;After method\n+     * For example, one of the users wanted to put validateMockitoUsage() in his &#064;After method\n      * so that he knows immediately when he misused Mockito. \n      * Without it, he would have known about it not sooner than <b>next time</b> he used the framework.\n      * One more benefit of having validateMockitoUsage() in &#064;After is that jUnit runner will always fail in the test method with defect", "timestamp": 1258845460, "metainfo": ""}