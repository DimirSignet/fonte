{"sha": "26e8efca4533ea4be11a103787d83bb775ae0589", "log": "added missing tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401671", "commit": "\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n package org.mockito.internal.creation;\n \n-import static org.hamcrest.core.IsInstanceOf.instanceOf;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.withSettings;\n+import static org.hamcrest.core.IsInstanceOf.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n \n import java.io.ByteArrayOutputStream;\n import java.io.ObjectOutputStream;\n+import java.lang.reflect.Method;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.internal.IMockHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.MockitoMethod;\n+import org.mockito.internal.invocation.SerializableMethod;\n import org.mockitousage.MethodsImpl;\n import org.mockitoutil.TestBase;\n \n         // then\n         assertThat(mockitoMethodProxy, instanceOf(DelegatingMockitoMethodProxy.class));\n     }\n+    \n+    @Test\n+    public void shouldCreateSerializableMethodIfIsSerializableMock() throws Exception {\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings().serializable());\n+        Method method = new InvocationBuilder().toInvocation().getMethod();\n+        \n+        // when\n+        MockitoMethod mockitoMethod = filter.createMockitoMethod(method);\n+        \n+        // then\n+        assertThat(mockitoMethod, instanceOf(SerializableMethod.class));\n+    }\n+    \n+    @Test\n+    public void shouldCreateJustDelegatingMethodIfIsNotSerializableMock() throws Exception {\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings());\n+        Method method = new InvocationBuilder().toInvocation().getMethod();\n+        \n+        // when\n+        MockitoMethod mockitoMethod = filter.createMockitoMethod(method);\n+        \n+        // then\n+        assertThat(mockitoMethod, instanceOf(DelegatingMethod.class));\n+    }\n }", "timestamp": 1257714946, "metainfo": ""}