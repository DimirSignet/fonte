{"sha": "17f010cdf38ef4e1b3a0b27299c243851f3d281e", "log": "changed SmartReturnValues -> now they return: -primitives -empty collections -0, false for primitive wrapper classes -SmartNulls -nulls when SmartNull cannot be created  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401073", "commit": "\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n \n import java.lang.reflect.Method;\n \n-import net.sf.cglib.proxy.InvocationHandler;\n-import net.sf.cglib.proxy.Proxy;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+import net.sf.cglib.proxy.MethodProxy;\n \n import org.mockito.configuration.ReturnValues;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n import org.mockito.internal.configuration.DefaultReturnValues;\n+import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.invocation.InvocationOnMock;\n \n public class SmartNullReturnValues implements ReturnValues {\n     private final ReturnValues delegate = new DefaultReturnValues();\n \n     public Object valueFor(InvocationOnMock invocation) {\n-        final Class<?> type = invocation.getMethod().getReturnType();\n-        if (type.isPrimitive()) {\n-            return delegate.valueFor(invocation);\n+        Object defaultReturnValue = delegate.valueFor(invocation);\n+        if (defaultReturnValue != null) {\n+            return defaultReturnValue;\n         }\n-        //TODO change from UndesiredInvocation\n-        return Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[] {type}, new InvocationHandler() {\n-            Exception whenCreated = new UndesiredInvocation(\"Unstubbed method was invoked here\");\n-            //TODO create mock here\n-            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                throw new SmartNullPointerException(\"oops\", whenCreated);\n-            }});\n+        Class<?> type = invocation.getMethod().getReturnType();\n+        if (ClassImposterizer.INSTANCE.canImposterise(type)) {\n+            return ClassImposterizer.INSTANCE.imposterise(new MethodInterceptor() {\n+\n+                //TODO change from UndesiredInvocation\n+                Exception whenCreated = new UndesiredInvocation(\"Unstubbed method was invoked here\");\n+                public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+                    throw new SmartNullPointerException(\"oops\", whenCreated);\n+                }}, type);\n+        }\n+        return null;\n     }\n }\n--- a/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n package org.mockito.internal.returnvalues;\n-\n-import java.util.List;\n \n import org.junit.Test;\n import org.mockito.configuration.ReturnValues;\n         assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n     }\n     \n-    interface HasInterfaceMethod {\n-        List<String> doListStuff();\n+    interface Foo {\n+        Foo get();\n     }\n     \n     @Test\n     public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Exception {\n         ReturnValues returnValues = new SmartNullReturnValues();\n         \n-        @SuppressWarnings(\"unchecked\")\n-        List<String> smartNull = (List<String>) returnValues.valueFor(invocationOf(HasInterfaceMethod.class, \"doListStuff\"));\n+        Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n         \n         try {\n-            smartNull.iterator();\n+            smartNull.get();\n             fail();\n         } catch (SmartNullPointerException expected) {}\n     }\n-}\n+}\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n import java.io.IOException;\n import java.nio.charset.CharacterCodingException;\n import java.util.Collection;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n \n     List<String> listReturningMethod(Object ... objects);\n     \n+    LinkedList<String> linkedListReturningMethod();\n+    \n     String toString();\n     \n     String toString(String foo);\n     String forCollection(Collection<String> collection);\n \n     Object[] arrayReturningMethod();\n+\n+    IMethods iMethodsReturningMethod();\n }\n--- a/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n             this.returnValue = returnValue;\n         }\n \n+        @Override\n         public Object valueFor(InvocationOnMock invocation) {\n             return returnValue;\n         }\n--- a/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n \n import static org.mockito.Mockito.*;\n import static org.mockitoutil.ExtraMatchers.*;\n-\n-import java.util.List;\n \n import org.junit.Before;\n import org.junit.Test;\n         mock = mock(IMethods.class, Mockito.SMART_NULLS);\n     }\n     \n-    public List unstubbedMethodInvokedHere(IMethods mock) {\n-        return mock.listReturningMethod();\n+    public IMethods unstubbedMethodInvokedHere(IMethods mock) {\n+        return mock.iMethodsReturningMethod();\n     }\n \n     @Test\n-    public void shouldThrowSmartNPE() throws Exception {\n-        List list = unstubbedMethodInvokedHere(mock); \n+    public void shouldSmartNPEPointToUnstubbedCall() throws Exception {\n+        IMethods methods = unstubbedMethodInvokedHere(mock); \n         try {\n-            list.clear();\n+            methods.simpleMethod();\n             fail();\n         } catch (SmartNullPointerException e) {\n             assertThat(e.getCause(),  hasMethodInStackTraceAt(0, \"unstubbedMethodInvokedHere\"));\n         }\n     }\n+\n+    interface Bar {\n+        void boo();\n+    }\n+    \n+    class Foo {\n+        Foo getSomeClass() {\n+            return null;\n+        }\n+        \n+        Bar getSomeInterface() {\n+            return null;\n+        }\n+        \n+        void boo() {}\n+    }\n+    \n+    @Test\n+    public void shouldThrowSmartNPEWhenMethodReturnsClass() throws Exception {\n+        Foo mock = mock(Foo.class, SMART_NULLS);\n+        Foo foo = mock.getSomeClass(); \n+        try {\n+            foo.boo();\n+            fail();\n+        } catch (SmartNullPointerException e) {}\n+    }\n+    \n+    \n+    @Test\n+    public void shouldThrowSmartNPEWhenMethodReturnsInterface() throws Exception {\n+        Foo mock = mock(Foo.class, SMART_NULLS);\n+        Bar bar = mock.getSomeInterface(); \n+        try {\n+            bar.boo();\n+            fail();\n+        } catch (SmartNullPointerException e) {}\n+    }\n }", "timestamp": 1225716746, "metainfo": ""}