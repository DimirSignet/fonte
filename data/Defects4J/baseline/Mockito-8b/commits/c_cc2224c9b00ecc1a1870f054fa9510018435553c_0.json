{"sha": "cc2224c9b00ecc1a1870f054fa9510018435553c", "log": "added better examples how to configure default values added MockitoRunner example to show how to use runner  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40521", "commit": "\n--- a/test/org/mockitousage/AnnotationsTest.java\n+++ b/test/org/mockitousage/AnnotationsTest.java\n \n     @Mock List list;\n     @Mock final Map map = new HashMap();\n+    //TODO add initMocks that allows to send own annotation/own implementation of creation logic\n     \n     @Before\n     public void setup() {\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockitousage.binding.BridgeMethodPuzzleTest;\n import org.mockitousage.binding.OverloadingPuzzleTest;\n import org.mockitousage.examples.configure.ConfiguringDefaultReturnValuesForSelectedMocksTest;\n+import org.mockitousage.examples.configure.ConfiguringMocksToReturnFakesTest;\n import org.mockitousage.examples.configure.ConfiguringDefaultReturnValuesTest;\n import org.mockitousage.examples.use.ExampleTest;\n import org.mockitousage.matchers.ComparableMatchersTest;\n             Result result = JUnitCore.runClasses(\n                     ConfiguringDefaultReturnValuesForSelectedMocksTest.class,\n                     ConfiguringDefaultReturnValuesTest.class,\n+                    ConfiguringMocksToReturnFakesTest.class,\n                     EqualsTest.class,\n                     ListUtilTest.class,\n                     MockingProgressImplTest.class,\n     }\n     \n     public static void main(String[] args) throws Exception {\n-        int numberOfThreads = 100; \n+        int numberOfThreads = 10; \n         long before = System.currentTimeMillis();\n         runInMultipleThreads(numberOfThreads);\n         long after = System.currentTimeMillis();\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/AllowsFakingReturnValues.java\n+package org.mockitousage.examples.configure;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.mockito.TestBase;\n+import org.mockito.configuration.DefaultReturnValues;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class AllowsFakingReturnValues extends TestBase {\n+    \n+    protected void fakeReturnValues(Object ... mocks) {\n+        FakeReturnValues fakeReturnValues = getFakeReturnValues();\n+        fakeReturnValues.configure(mocks);\n+    }\n+    \n+    private FakeReturnValues getFakeReturnValues() {\n+        MockitoConfiguration config = MockitoConfiguration.instance();\n+        ReturnValues current = config.getReturnValues();\n+        if (!(current instanceof FakeReturnValues)) {\n+            config.setReturnValues(new FakeReturnValues());\n+        }\n+        return (FakeReturnValues) config.getReturnValues();\n+    }\n+\n+    private final class FakeReturnValues implements ReturnValues {\n+        private Set<Object> mocksReturningFakes = new HashSet<Object>();\n+\n+        public Object valueFor(InvocationOnMock invocation) {\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n+            if (value != null || returnType == Void.TYPE) {\n+                return value;\n+            } else if (mocksReturningFakes.contains(invocation.getMock())) {\n+                return returnFake(returnType);\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        public void configure(Object ... mocks) {\n+            mocksReturningFakes.addAll(Arrays.asList(mocks));\n+        }\n+\n+        private Object returnFake(Class<?> returnType) {\n+            if (returnType == String.class) {\n+                return \"\";\n+            } else if (returnType == Boolean.TYPE) {\n+                return true;\n+            } else {\n+                return mock(returnType);\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/CanMakeMocksSmart.java\n+package org.mockitousage.examples.configure;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.TestBase;\n+import org.mockito.configuration.DefaultReturnValues;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class CanMakeMocksSmart extends TestBase {\n+\n+    private MyDefaultReturnValues myDefaultReturnValues;\n+\n+    protected void beSmart(Object mock) {\n+        myDefaultReturnValues.addSmartMock(mock);\n+    }\n+    \n+    @Before\n+    public void configureDefaultReturnValues() {\n+        myDefaultReturnValues = new MyDefaultReturnValues();\n+        MockitoConfiguration.instance().setReturnValues(myDefaultReturnValues);\n+    }\n+    \n+    @After\n+    public void resetReturnValuesToDefaults() {\n+        MockitoConfiguration.instance().resetReturnValues();\n+    }\n+    \n+    //My own sophisticated version of ReturnValues - it treats 'smart mocks' differently\n+    private final class MyDefaultReturnValues implements ReturnValues {\n+        private List<Object> smartMocks = new LinkedList<Object>();\n+\n+        public Object valueFor(InvocationOnMock invocation) {\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n+            if (value != null || returnType == Void.TYPE) {\n+                return value;\n+            } else if (smartMocks.contains(invocation.getMock())) {\n+                //if is a smart mock then return different value\n+                return returnValueForSmartMock(returnType);\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        private Object returnValueForSmartMock(Class<?> returnType) {\n+            if (returnType == String.class) {\n+                return \"\";\n+            } else if (returnType == Boolean.TYPE) {\n+                return true;\n+            } else {\n+                return mock(returnType);\n+            }\n+        }\n+\n+        public void addSmartMock(Object mock) {\n+            smartMocks.add(mock);\n+        }\n+    }\n+}\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n package org.mockitousage.examples.configure;\n import static org.mockito.Mockito.*;\n \n-import java.util.LinkedList;\n-import java.util.List;\n+import org.junit.Test;\n \n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.TestBase;\n-import org.mockito.configuration.DefaultReturnValues;\n-import org.mockito.configuration.MockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n-import org.mockito.invocation.InvocationOnMock;\n-\n-public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {\n+public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends CanMakeMocksSmart {\n     \n     @Test\n     public void shouldAllowConfiguringReturnValuesForSelectedMocks() throws Exception {\n         assertFalse(ordinaryMock.returnBoolean());\n     }\n     \n-    //Configuration code below is typically hidden in a base class / your test runner / some kind of static utility\n-    \n-    private MyDefaultReturnValues myDefaultReturnValues;\n-\n     interface MyObject {\n         MyObject returnMyObject();\n         String returnString();\n         boolean returnBoolean();\n     }\n-    \n-    private void beSmart(Object mock) {\n-        myDefaultReturnValues.addSmartMock(mock);\n-    }\n-    \n-    @Before\n-    public void configureDefaultReturnValues() {\n-        myDefaultReturnValues = new MyDefaultReturnValues();\n-        MockitoConfiguration.instance().setReturnValues(myDefaultReturnValues);\n-    }\n-    \n-    @After\n-    public void resetReturnValuesToDefaults() {\n-        MockitoConfiguration.instance().resetReturnValues();\n-    }\n-    \n-    //My own sophisticated version of ReturnValues - it treats 'smart mocks' differently\n-    private final class MyDefaultReturnValues implements ReturnValues {\n-        private List<Object> smartMocks = new LinkedList<Object>();\n-\n-        public Object valueFor(InvocationOnMock invocation) {\n-            Object value = new DefaultReturnValues().valueFor(invocation);\n-            Class<?> returnType = invocation.getMethod().getReturnType();\n-            if (value != null || returnType == Void.TYPE) {\n-                return value;\n-            } else if (smartMocks.contains(invocation.getMock())) {\n-                //if is a smart mock then return different value\n-                return returnValueForSmartMock(returnType);\n-            } else {\n-                return null;\n-            }\n-        }\n-\n-        private Object returnValueForSmartMock(Class<?> returnType) {\n-            if (returnType == String.class) {\n-                return \"\";\n-            } else if (returnType == Boolean.TYPE) {\n-                return true;\n-            } else {\n-                return mock(returnType);\n-            }\n-        }\n-\n-        public void addSmartMock(Object mock) {\n-            smartMocks.add(mock);\n-        }\n-    }\n }\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n package org.mockitousage.examples.configure;\n import static org.mockito.Mockito.*;\n \n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.mockito.TestBase;\n-import org.mockito.configuration.DefaultReturnValues;\n-import org.mockito.configuration.MockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n-import org.mockito.invocation.InvocationOnMock;\n \n-public class ConfiguringDefaultReturnValuesTest extends TestBase {\n+public class ConfiguringDefaultReturnValuesTest extends MakesMocksNotToReturnNulls {\n     \n     @Test\n     public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {\n     interface MyObject {\n         MyObject foo();\n     }\n-    \n-    //Configuration code below is typically hidden in a base class / your test runner / some kind of static utility\n-    \n-    @Before\n-    public void configureDefaultReturnValues() {\n-        MockitoConfiguration.instance().setReturnValues(new MyDefaultReturnValues());\n-    }\n-    \n-    @After\n-    public void resetReturnValuesToDefaults() {\n-        MockitoConfiguration.instance().resetReturnValues();\n-    }\n-    \n-    private final class MyDefaultReturnValues implements ReturnValues {\n-        public Object valueFor(InvocationOnMock invocation) {\n-            //get the default return value\n-            Object value = new DefaultReturnValues().valueFor(invocation);\n-            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n-                return value;\n-            } else {\n-                //in case the default return value is null and method is not void, return new mock:\n-                return Mockito.mock(invocation.getMethod().getReturnType());\n-            }\n-        }\n-    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/ConfiguringMocksToReturnFakesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+\n+public class ConfiguringMocksToReturnFakesTest extends AllowsFakingReturnValues {\n+    \n+    @Test\n+    public void shouldAllowConfiguringMocksToReturnFakes() throws Exception {\n+        MyObject fakeReturningMock = mock(MyObject.class);\n+        //configure mock to return fakes\n+        fakeReturnValues(fakeReturningMock);\n+        \n+        //create ordinary mock\n+        MyObject ordinaryMock = mock(MyObject.class);\n+        \n+        //returns mock instead of null\n+        assertNotNull(fakeReturningMock.returnMyObject());\n+        //returns empty string instead of null\n+        assertEquals(\"\", fakeReturningMock.returnString());\n+        \n+        //returns defaults\n+        assertNull(ordinaryMock.returnMyObject());\n+        assertNull(ordinaryMock.returnString());\n+    }\n+    \n+    interface MyObject {\n+        MyObject returnMyObject();\n+        String returnString();\n+        boolean returnBoolean();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/MakesMocksNotToReturnNulls.java\n+package org.mockitousage.examples.configure;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+import org.mockito.TestBase;\n+import org.mockito.configuration.DefaultReturnValues;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class MakesMocksNotToReturnNulls extends TestBase {\n+    \n+    @Before\n+    public void configureDefaultReturnValues() {\n+        MockitoConfiguration.instance().setReturnValues(new MyDefaultReturnValues());\n+    }\n+    \n+    @After\n+    public void resetReturnValuesToDefaults() {\n+        MockitoConfiguration.instance().resetReturnValues();\n+    }\n+    \n+    private final class MyDefaultReturnValues implements ReturnValues {\n+        public Object valueFor(InvocationOnMock invocation) {\n+            //get the default return value\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n+                return value;\n+            } else {\n+                //in case the default return value is null and method is not void, return new mock:\n+                return Mockito.mock(invocation.getMethod().getReturnType());\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/junitrunner/ExampleTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.junitrunner;\n+import java.util.List;\n+import static org.mockito.Mockito.*;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockitoAnnotations.Mock;\n+\n+@RunWith(MockitoRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public class ExampleTest {\n+    \n+    @Mock private List list;\n+    @Mock private Map map;\n+    \n+    @Test\n+    public void shouldInitMocksUsingRunner() {\n+        list.add(\"test\");\n+        map.clear();\n+        \n+        verify(list).add(\"test\");\n+        verify(map).clear();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/junitrunner/MockitoRunner.java\n+package org.mockitousage.examples.junitrunner;\n+\n+import org.junit.internal.runners.InitializationError;\n+import org.junit.internal.runners.JUnit4ClassRunner;\n+import org.mockito.MockitoAnnotations;\n+\n+public class MockitoRunner extends JUnit4ClassRunner {\n+\n+    public MockitoRunner(Class<?> klass) throws InitializationError {\n+        super(klass);\n+    }\n+    \n+    @Override\n+    protected Object createTest() throws Exception {\n+        Object test = super.createTest();\n+        MockitoAnnotations.initMocks(test);\n+        return test;\n+    }\n+}\n--- a/test/org/mockitousage/examples/use/ArticleManager.java\n+++ b/test/org/mockitousage/examples/use/ArticleManager.java\n         this.calculator = calculator;\n         this.database = database;\n     }\n-    \n+   \n     public void updateArticleCounters(String newspaper) {\n         int articles = calculator.countArticles(newspaper);\n         int polishArticles = calculator.countArticlesInPolish(newspaper);\n--- a/test/org/mockitousage/examples/use/ExampleTest.java\n+++ b/test/org/mockitousage/examples/use/ExampleTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.mockito.InOrder;\n import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n+import org.mockitousage.examples.junitrunner.MockitoRunner;\n \n+@RunWith(MockitoRunner.class)\n public class ExampleTest extends TestBase {\n     \n     @Mock private ArticleCalculator mockCalculator;", "timestamp": 1206712287, "metainfo": ""}