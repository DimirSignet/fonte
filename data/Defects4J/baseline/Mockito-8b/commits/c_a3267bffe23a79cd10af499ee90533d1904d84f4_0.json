{"sha": "a3267bffe23a79cd10af499ee90533d1904d84f4", "log": "Started working on a new feature  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401922", "commit": "\n--- a/src/org/mockito/InOrder.java\n+++ b/src/org/mockito/InOrder.java\n      * @return mock object itself\n      */\n     <T> T verify(T mock, VerificationMode mode);\n+\n+    \n+    /**\n+     * Verifies that no more interactions happened <b>in order</b>. \n+     * Different from {@link Mockito#verifyNoMoreInteractions(Object...)} because the order of verification matters.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     * mock.foo(); //1st\n+     * mock.bar(); //2nd\n+     * mock.baz(); //3rd\n+     * \n+     * InOrder inOrder = inOrder(mock);\n+     * \n+     * inOrder.verify(mock).bar(); //2n\n+     * inOrder.verify(mock).baz(); //3rd (last method)\n+     * \n+     * //passes because there are no more interactions after last method:\n+     * inOrder.verifyNoMoreInteractions();\n+     * \n+     * //however this fails because 1st method was not verified:\n+     * Mockito.verifyNoMoreInteractions(mock);\n+     * </pre>\n+     */\n+    void verifyNoMoreInteractions();\n }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * if you want to find out more search for 'greedy' on the Mockito \n      * <a href=\"http://code.google.com/p/mockito/w/list\">wiki pages</a>.  \n      * <p>\n+     * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}\n+     * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param mocks to be verified in order\n--- a/src/org/mockito/internal/InOrderImpl.java\n+++ b/src/org/mockito/internal/InOrderImpl.java\n     public void markVerified(Invocation i) {        \n         inOrderContext.markVerified(i);\n     }\n+\n+    @Override\n+    public void verifyNoMoreInteractions() {\n+                \n+    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.verification;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@Ignore\n+public class FindingRedundantInvocationsInOrderTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+    \n+    @Test\n+    public void shouldVerifyNoMoreInteractionsInOrder() throws Exception {\n+        //when\n+        mock.simpleMethod();\n+        mock.simpleMethod(10);\n+        mock.otherMethod();\n+        \n+        //then\n+        InOrder inOrder = inOrder(mock);\n+        inOrder.verify(mock).simpleMethod(10);\n+        inOrder.verify(mock).otherMethod();\n+        inOrder.verifyNoMoreInteractions();        \n+    }\n+    \n+    @Test\n+    public void shouldFailToVerifyNoMoreInteractionsInOrder() throws Exception {\n+        //when\n+        mock.simpleMethod();\n+        mock.simpleMethod(10);\n+        mock.otherMethod();\n+        \n+        //then\n+        InOrder inOrder = inOrder(mock);\n+        inOrder.verify(mock).simpleMethod(10);\n+        try {\n+            inOrder.verifyNoMoreInteractions();\n+            fail();\n+        } catch(VerificationInOrderFailure e) {}\n+    }\n+}", "timestamp": 1268601745, "metainfo": ""}