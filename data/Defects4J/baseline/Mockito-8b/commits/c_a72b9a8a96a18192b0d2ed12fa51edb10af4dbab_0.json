{"sha": "a72b9a8a96a18192b0d2ed12fa51edb10af4dbab", "log": "Fixed issue 142 In order to provide best feedback when dev misuses jUnit I forward initializer jUnit exceptions (for example: @BeforeClass must be static). This way exceptions from jUnit are correctly handled by IDE (previously, confusing Mockito exception was thrown). Some tiny refactorings according to IDEA warnings.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401673", "commit": "\n--- a/src/org/mockito/internal/runners/RunnerFactory.java\n+++ b/src/org/mockito/internal/runners/RunnerFactory.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.runners.util.RunnerProvider;\n import org.mockito.internal.runners.util.TestMethodsFinder;\n+\n+import java.lang.reflect.InvocationTargetException;\n \n public class RunnerFactory {\n \n         this(new RunnerProvider());\n     }\n \n-    public RunnerImpl create(Class<?> klass) {\n+    public RunnerImpl create(Class<?> klass) throws InvocationTargetException {\n         try {\n             if (runnerProvider.isJUnit45OrHigherAvailable()) {\n                 return runnerProvider.newInstance(\"org.mockito.internal.runners.JUnit45AndHigherRunnerImpl\", klass);\n             } else {\n                 return runnerProvider.newInstance(\"org.mockito.internal.runners.JUnit44RunnerImpl\", klass);\n             }\n-        } catch (Throwable t) {\n+        } catch (InvocationTargetException e) {\n             if (!new TestMethodsFinder().hasTestMethods(klass)) {\n                 throw new MockitoException(\n                     \"\\n\" +\n                     \"\\n\" +\n                     \"No tests found in \" + klass.getSimpleName() + \"\\n\" +\n                     \"Haven't you forgot @Test annotation?\\n\"\n-                    , t);\n+                    , e);\n             }\n+            throw e;\n+        } catch (Throwable t) {\n             throw new MockitoException(\n                     \"\\n\" +\n                     \"\\n\" +\n--- a/src/org/mockito/internal/runners/util/RunnerProvider.java\n+++ b/src/org/mockito/internal/runners/util/RunnerProvider.java\n package org.mockito.internal.runners.util;\n \n import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n \n import org.mockito.internal.runners.RunnerImpl;\n \n     }\n \n     public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n-        Class<?> runnerClass = Class.forName(runnerClassName);\n-        Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n-        return (RunnerImpl) constructor.newInstance(constructorParam);   \n+        Constructor<?> constructor;\n+        try {\n+            Class<?> runnerClass = Class.forName(runnerClassName);\n+            constructor = runnerClass.getConstructor(Class.class.getClass());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        \n+        try {\n+            return (RunnerImpl) constructor.newInstance(constructorParam);\n+        } catch (InvocationTargetException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);        \n+        }\n     }\n }\n--- a/src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java\n import org.mockito.internal.runners.RunnerImpl;\n import org.mockito.internal.util.MockitoLogger;\n import org.mockito.internal.util.MockitoLoggerImpl;\n+\n+import java.lang.reflect.InvocationTargetException;\n \n /**\n  * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n     private final MockitoLogger logger;\n     private RunnerImpl runner;\n     \n-    public ConsoleSpammingMockitoJUnitRunner(Class<?> klass) {\n-        this(klass, new MockitoLoggerImpl(), new RunnerFactory().create(klass));\n+    public ConsoleSpammingMockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {\n+        this(new MockitoLoggerImpl(), new RunnerFactory().create(klass));\n     }\n     \n-    ConsoleSpammingMockitoJUnitRunner(Class<?> klass, MockitoLogger logger, RunnerImpl runnerImpl) {\n+    ConsoleSpammingMockitoJUnitRunner(MockitoLogger logger, RunnerImpl runnerImpl) {\n         this.runner = runnerImpl;\n         this.logger = logger;\n     }\n--- a/src/org/mockito/runners/MockitoJUnit44Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit44Runner.java\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n+\n+import java.lang.reflect.InvocationTargetException;\n \n /**\n  * <b>Deprecated: Simply use {@link MockitoJUnitRunner}</b>\n @Deprecated\n public class MockitoJUnit44Runner extends MockitoJUnitRunner {\n \n-    public MockitoJUnit44Runner(Class<?> klass) {\n+    public MockitoJUnit44Runner(Class<?> klass) throws InvocationTargetException {\n         super(klass);\n     }\n }\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n import org.mockito.MockitoAnnotations;\n import org.mockito.internal.runners.RunnerFactory;\n import org.mockito.internal.runners.RunnerImpl;\n+\n+import java.lang.reflect.InvocationTargetException;\n \n \n /**\n \n     private final RunnerImpl runner;\n \n-    public MockitoJUnitRunner(Class<?> klass) {\n+    public MockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {\n         runner = new RunnerFactory().create(klass);\n     }\n \n--- a/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n import org.mockito.internal.runners.RunnerFactory;\n import org.mockito.internal.runners.RunnerImpl;\n import org.mockito.internal.util.reflection.Whitebox;\n+\n+import java.lang.reflect.InvocationTargetException;\n \n /**\n  * Experimental implementation that suppose to improve tdd/testing experience. \n \n     private RunnerImpl runner;\n     \n-    public VerboseMockitoJUnitRunner(Class<?> klass) {\n-        this(klass, new RunnerFactory().create(klass));\n+    public VerboseMockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {\n+        this(new RunnerFactory().create(klass));\n     }\n     \n-    VerboseMockitoJUnitRunner(Class<?> klass, RunnerImpl runnerImpl) {\n+    VerboseMockitoJUnitRunner(RunnerImpl runnerImpl) {\n         this.runner = runnerImpl;\n     }\n     \n--- a/test/org/mockito/internal/runners/RunnerFactoryTest.java\n+++ b/test/org/mockito/internal/runners/RunnerFactoryTest.java\n import org.mockito.internal.runners.util.RunnerProvider;\n import org.mockitoutil.TestBase;\n \n+import java.lang.reflect.InvocationTargetException;\n+\n public class RunnerFactoryTest extends TestBase {\n \n     static class ClassProviderStub extends RunnerProvider {\n     }\n \n     @Test\n-    public void shouldCreateRunnerForJUnit44() {\n+    public void shouldCreateRunnerForJUnit44() throws Exception {\n         //given\n         RunnerProvider provider = new RunnerProvider() {\n             public boolean isJUnit45OrHigherAvailable() {\n     }\n     \n     @Test\n-    public void shouldCreateRunnerForJUnit45() {\n+    public void shouldCreateRunnerForJUnit45()  throws Exception{\n         //given\n         RunnerProvider provider = new RunnerProvider() {\n             public boolean isJUnit45OrHigherAvailable() {\n     }\n     \n     @Test\n-    public void shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound() {\n+    public void\n+    shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound()  throws Exception{\n         //given\n         RunnerProvider provider = new RunnerProvider() {\n             public boolean isJUnit45OrHigherAvailable() {\n     static class NoTestMethods {}\n \n     @Test\n-    public void shouldSaySomethingMeaningfulWhenNoTestMethods() {\n+    public void shouldSaySomethingMeaningfulWhenNoTestMethods()  throws Exception{\n         //given\n         RunnerFactory factory = new RunnerFactory(new RunnerProvider());\n \n             assertContains(\"No tests\", e.getMessage());\n         }\n     }\n+\n+    @Test\n+    public void shouldForwardInvocationTargetException()  throws Exception{\n+        //given\n+        RunnerFactory factory = new RunnerFactory(new RunnerProvider()\n+        {\n+            @Override\n+            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n+                throw new InvocationTargetException(new RuntimeException());\n+            }\n+        });\n+\n+        //when\n+        try {\n+            factory.create(this.getClass());\n+            fail();\n+        }\n+        //then\n+        catch (InvocationTargetException e) {}\n+    }\n }\n--- a/test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java\n public class ConsoleSpammingMockitoJUnitRunnerTest extends TestBase {\n     \n     @Mock private IMethods mock;\n-    \n+\n     private ConsoleSpammingMockitoJUnitRunner runner;\n     private MockitoLoggerStub loggerStub;\n     private RunNotifier notifier;\n     \n     @Test\n     public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {\n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             @Override\n             public void run(RunNotifier notifier) {\n                 //this is what happens when the test runs:\n     @Ignore\n     @Test\n     public void shouldLogUnstubbedMethodWarningWhenTestFails() throws Exception {\n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             @Override\n             public void run(RunNotifier notifier) {\n                 callUnstubbedMethodThatQualifiesForWarning();\n     \n     @Test\n     public void shouldLogStubCalledWithDifferentArgumentsWhenTestFails() throws Exception {\n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             @Override\n             public void run(RunNotifier notifier) {\n                 someStubbing();\n     \n     @Test\n     public void shouldNotLogAnythingWhenStubCalledCorrectly() throws Exception {\n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             @Override\n             public void run(RunNotifier notifier) {\n                 when(mock.simpleMethod(1)).thenReturn(\"foo\");\n     \n     @Test\n     public void shouldNotLogWhenTestPasses() throws Exception {\n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             @Override\n             public void run(RunNotifier notifier) {\n                 when(mock.simpleMethod()).thenReturn(\"foo\");\n         //given\n         final DebuggingInfo debuggingInfo = new ThreadSafeMockingProgress().getDebuggingInfo();\n \n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             @Override\n             public void run(RunNotifier notifier) {\n                 unusedStubbingThatQualifiesForWarning();\n     public void shouldDelegateToGetDescription() throws Exception {\n         //given\n         final Description expectedDescription = Description.createSuiteDescription(this.getClass());\n-        runner = new ConsoleSpammingMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {\n             public Description getDescription() {\n                 return expectedDescription;\n             }", "timestamp": 1257804204, "metainfo": ""}