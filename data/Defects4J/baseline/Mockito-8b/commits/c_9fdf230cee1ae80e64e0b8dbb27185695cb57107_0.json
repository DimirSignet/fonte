{"sha": "9fdf230cee1ae80e64e0b8dbb27185695cb57107", "log": "refactored the code a bit, added TODOs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40835", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * //verification using never(). never() is an alias to times(0)\n  * verify(mockedList, never()).add(\"never happened\");\n  * \n- * //verification using atLeastOnce()\n+ * //verification using atLeast()\n  * verify(mockedList, atLeastOnce()).add(\"three times\");\n- * \n- * //verification using atLeast()\n- * verify(mockedList, atLeast(2)).add(\"twice\");\n- * verify(mockedList, atLeast(2)).add(\"three times\");\n+ * verify(mockedList, atLeast(2)).add(\"five times\");\n  * \n  * </pre>\n  * \n     }\n \n     /**\n-     * Verifies certain behavior happened at least n times / exact number of times / never. E.g:\n+     * Verifies certain behavior happened at least once / exact number of times / never. E.g:\n      * <pre>\n      *   verify(mock, times(5)).someMethod(\"was called five times\");\n      *   \n      * See examples in javadoc for {@link Mockito} class\n      * \n      * @param mock to be verified\n-     * @param mode times(x), atLeastOnce(), atLeast(x) or never()\n+     * @param mode times(x), atLeastOnce() or never()\n      * \n      * @return mock object itself\n      */\n     }\n \n     /**\n-     * Allows at-least-once verification.E.g:\n+     * Allows at-least-once verification. E.g:\n      * <pre>\n      *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\n      * </pre>\n-     * Alias for {@link Mockito#atLeast(int)} with 1 as an argument:\n-     * <pre>\n-     *   verify(mock, atLeast(1)).someMethod(\"some arg\");\n-     * </pre> \n+     * Alias to atLeast(1)\n      * \n      * See examples in javadoc for {@link Mockito} class\n      * \n      * \n      * See examples in javadoc for {@link Mockito} class\n      * \n+     * //TODO call it accordingly\n      * @param minNumberOfInvocations minimum number of invocations \n      * \n      * @return verification mode\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n  *   }\n  * </pre>\n  * \n+ * TODO we have now runners in mockito\n  * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated mocks.\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n public class MockitoAnnotations {\n \n     /**\n-     * <b> Deprecated </b>\n-     * \n+     * <b>Deprecated</b> Use {@link Mock} annotation instead\n+     * <p>\n+     * Annotation is now a top-level class so that IDEs are not confused.\n+     * <p>\n      * Allows shorthand mock creation, see examples in javadoc for {@link MockitoAnnotations} class.\n-     * \n-     * To fix deprecation warning replace deprecated annotation's import:\n+     * <p>\n+     * To fix deprecation warnings just search & replace:\n+     * Search:\n      *  import org.mockito.MockitoAnnotations.Mock;\n-     * with the new one:\n-     *  <b>import org.mockito.Mock;</b>\n+     * <p>\n+     *  with:\n+     * <p>\n+     *  import org.mockito.Mock;\n      * \n      * @deprecated Use {@link Mock} annotation instead\n      * \n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n     public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations) {\n         LinkedList<Invocation> verifiedOnly = ListUtil.filter(invocations, new RemoveUnverifiedInOrder());\n         \n-        return verifiedOnly.isEmpty() ? null : verifiedOnly.getLast();\n+        if (verifiedOnly.isEmpty()) {\n+            return null;\n+        } else {\n+            return verifiedOnly.getLast();\n+        }\n     }\n     \n     private List<Invocation> removeVerifiedInOrder(List<Invocation> invocations) {\n--- a/src/org/mockito/internal/progress/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/progress/VerificationModeImpl.java\n     \n     private VerificationModeImpl(Integer wantedNumberOfInvocations, Integer minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n         if (wantedNumberOfInvocations != null && wantedNumberOfInvocations < 0) {\n-            throw new MockitoException(\"Negative value is not allowed for wantedNumberOfInvocations\");\n+            throw new MockitoException(\"Negative value is not allowed here\");\n         }\n         if (minNumberOfInvocations != null && minNumberOfInvocations < 1) {\n-            throw new MockitoException(\"Negative value and zero are not allowed for minNumberOfInvocations\");\n+            throw new MockitoException(\"Negative value or zero are not allowed here\");\n         }\n         assert mocksToBeVerifiedInOrder != null;\n         this.wantedInvocationCount = wantedNumberOfInvocations;\n--- a/test/org/mockito/internal/progress/VerificationModeImplTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeImplTest.java\n     }\n     \n     @Test\n-    public void shouldNotAllowCreatingModeWithNegativeNumberOfInvocations() throws Exception {\n+    public void shouldNotAllowNegativeNumberOfInvocations() throws Exception {\n         try {\n             times(-50);\n             fail();\n         } catch (MockitoException e) {\n-            assertEquals(\"Negative value is not allowed for wantedNumberOfInvocations\", e.getMessage());\n+            assertEquals(\"Negative value is not allowed here\", e.getMessage());\n         }\n     }\n \n     @Test\n-    public void shouldNotAllowCreatingModeWithNegativeNumberOfMinimumInvocations() throws Exception {\n+    public void shouldNotAllowNegativeNumberOfMinimumInvocations() throws Exception {\n         try {\n             atLeast(-50);\n             fail();\n         } catch (MockitoException e) {\n-            assertEquals(\"Negative value and zero are not allowed for minNumberOfInvocations\", e.getMessage());\n+            assertEquals(\"Negative value or zero are not allowed here\", e.getMessage());\n         }\n     }\n     \n         assertTrue(atLeastOnce().matchesActualCount(1));\n         assertTrue(atLeastOnce().matchesActualCount(100));\n     }\n-\n+    \n     @Test\n     public void shouldKnowIfMatchesActualInvocationCountWhenAtLeastMode() throws Exception {\n         assertFalse(atLeast(10).matchesActualCount(5));\n     \n     @Test\n     public void tooLittleActualInvocationsShouldNotApplyToAtLeastMode() throws Exception {\n+        //TODO why?\n         assertFalse(atLeast(10).tooLittleActualInvocations(5));        \n         assertFalse(atLeast(10).tooLittleActualInvocations(15));        \n         assertFalse(atLeastOnce().tooLittleActualInvocations(10));        \n \n     @Test\n     public void shouldKnowIfTooLittleActualInvocationsInAtLeastMode() throws Exception {\n+        //TODO lengthy method\n         assertTrue(atLeast(3).tooLittleActualInvocationsInAtLeastMode(2));\n         assertTrue(atLeast(3).tooLittleActualInvocationsInAtLeastMode(1));\n         assertTrue(atLeast(3).tooLittleActualInvocationsInAtLeastMode(0));\n \n     @Test\n     public void tooLittleActualInvocationsInAtLeastModeShouldNotApplyToOtherModes() throws Exception {\n+        //TODO review\n         assertFalse(times(10).tooLittleActualInvocationsInAtLeastMode(5));        \n         assertFalse(times(10).tooLittleActualInvocationsInAtLeastMode(15));        \n     }\n--- a/test/org/mockitousage/verification/AtLeastXVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtLeastXVerificationTest.java\n         mock.add(\"foo\");\n         mock.add(\"foo\");\n         mock.add(\"foo\");\n-\n+        \n         verify(mock, atLeast(1)).add(\"foo\");\n         verify(mock, atLeast(2)).add(\"foo\");\n         verify(mock, atLeast(3)).add(\"foo\");\n     public void shouldFailOnVerifyAtLeast10WhenMethodWasInvokedOnce() throws Exception {\n         mock.add(\"foo\");\n \n-        verify(mock, atLeast(10)).add(\"foo\");\n-    }    \n+        verify(mock, atLeast(2)).add(\"foo\");\n+    }\n }", "timestamp": 1219959701, "metainfo": ""}