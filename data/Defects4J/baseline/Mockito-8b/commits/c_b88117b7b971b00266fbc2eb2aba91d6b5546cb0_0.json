{"sha": "b88117b7b971b00266fbc2eb2aba91d6b5546cb0", "log": "Simplified GitHub ticket collection  Started using read-only auth token so that the code runs everywhere and does not require secret env variable. Added test for GitHub api query (not very nice, yet)", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n class GitHubImprovementsProvider implements ImprovementsProvider {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GitHubImprovementsProvider.class);\n-    private final GitHubAuthToken authToken;\n+    private final String authToken;\n \n-    public GitHubImprovementsProvider(GitHubAuthToken authToken) {\n+    public GitHubImprovementsProvider(String authToken) {\n         this.authToken = authToken;\n     }\n \n     public ImprovementSet getImprovements(ContributionSet contributions) {\n         LOGGER.info(\"Parsing {} commits with {} tickets\", contributions.getAllCommits().size(), contributions.getAllTickets().size());\n         DefaultImprovements out = new DefaultImprovements();\n-        new GitHubTicketFetcher().fetchTickets(authToken.getToken(), contributions.getAllTickets(), out);\n+        new GitHubTicketFetcher().fetchTickets(authToken, contributions.getAllTickets(), out);\n         return out;\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n \n     private static final Logger LOG = LoggerFactory.getLogger(GitHubTicketFetcher.class);\n \n-    void fetchTickets(String gitHubAuthToken, Collection<String> ticketIds, DefaultImprovements improvements) {\n+    void fetchTickets(String authToken, Collection<String> ticketIds, DefaultImprovements improvements) {\n         if (ticketIds.isEmpty()) {\n             return;\n         }\n         LOG.info(\"Querying GitHub API for {} tickets\", ticketIds.size());\n-        String url = \"https://api.github.com/repos/mockito/mockito/issues?access_token=\" + gitHubAuthToken;\n-        url += \"&state=closed\";\n+        String url = \"https://api.github.com/repos/mockito/mockito/issues?access_token=\" + authToken;\n+        url += \"&state=closed&filter=all\";\n \n         Set<Long> tickets = new HashSet<Long>();\n         for (String id : ticketIds) {\n     private void fetch(Set<Long> tickets, DefaultImprovements improvements, String url) throws IOException {\n         InputStream response = new URL(url).openStream();\n         String content = IOUtil.readStream(response);\n+        LOG.info(\"GitHub API responded successfully.\");\n         List<JSONObject> issues = (List) JSONValue.parse(content);\n+        LOG.info(\"GitHub API returned {} issues.\", issues.size());\n \n         for (JSONObject issue : issues) {\n             long id = (Long) issue.get(\"number\");\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n     /**\n      * Fetches tickets from GitHub. Needs GitHub auth token.\n      *\n-     * @param authTokenEnvVarName name of the env var that holds the token\n+     * @param authToken the GitHub auth token\n      */\n-    public static ImprovementsProvider getGitHubProvider(final String authTokenEnvVarName) {\n-        return new GitHubImprovementsProvider(new GitHubAuthToken(authTokenEnvVarName));\n+    public static ImprovementsProvider getGitHubProvider(final String authToken) {\n+        return new GitHubImprovementsProvider(authToken);\n     }\n }", "timestamp": 1416674239, "metainfo": ""}