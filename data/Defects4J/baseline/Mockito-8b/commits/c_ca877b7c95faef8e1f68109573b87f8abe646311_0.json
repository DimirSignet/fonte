{"sha": "ca877b7c95faef8e1f68109573b87f8abe646311", "log": "Fixed issue 197 only() mode did not respect capturing matchers  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%402016", "commit": "\n--- a/src/org/mockito/internal/verification/Only.java\n+++ b/src/org/mockito/internal/verification/Only.java\n \t\tInvocationMatcher wantedMatcher = data.getWanted();\n \t\tList<Invocation> invocations = data.getAllInvocations();\n \t\tList<Invocation> chunk = finder.findInvocations(invocations,wantedMatcher);\n-\t\tif (invocations.size() != 1 && chunk.size() > 0) {\n-\t\t\tmarker.markVerified(chunk.get(0), wantedMatcher);\n+\t\tif (invocations.size() != 1 && chunk.size() > 0) {\t\t\t\n \t\t\tInvocation unverified = finder.findFirstUnverified(invocations);\n \t\t\treporter.noMoreInteractionsWanted(unverified, (List) invocations);\n \t\t} else if (invocations.size() != 1 || chunk.size() == 0) {\n \t\t\treporter.wantedButNotInvoked(wantedMatcher);\n \t\t}\n+\t\tmarker.markVerified(chunk.get(0), wantedMatcher);\n \t}\n-\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/OnlyTest.java\n+package org.mockito.internal.verification;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.api.VerificationData;\n+\n+public class OnlyTest {\n+\n+    Only only = new Only();\n+    \n+    public class VerificationDataStub implements VerificationData {\n+        private final Invocation invocation;\n+        private final InvocationMatcher wanted;\n+\n+        public VerificationDataStub(InvocationMatcher wanted, Invocation invocation) {\n+            this.invocation = invocation;\n+            this.wanted = wanted;\n+        }\n+\n+        public List<Invocation> getAllInvocations() {\n+            return Arrays.asList(invocation);\n+        }\n+\n+        public InvocationMatcher getWanted() {\n+            return wanted;\n+        }\n+    }\n+\n+    @Test\n+    public void shouldMarkAsVerified() {\n+        //given\n+        Invocation invocation = new InvocationBuilder().toInvocation();\n+        assertFalse(invocation.isVerified());\n+        \n+        //when\n+        only.verify(new VerificationDataStub(new InvocationMatcher(invocation), invocation));\n+        \n+        //then\n+        assertTrue(invocation.isVerified());\n+    }\n+    \n+    @Test\n+    public void shouldNotMarkAsVerifiedWhenAssertionFailed() {\n+        //given\n+        Invocation invocation = new InvocationBuilder().toInvocation();\n+        assertFalse(invocation.isVerified());\n+        \n+        //when\n+        try {\n+            only.verify(new VerificationDataStub(new InvocationBuilder().toInvocationMatcher(), invocation));\n+        } catch (MockitoAssertionError e) {}\n+        \n+        //then\n+        assertFalse(invocation.isVerified());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+//bug 197\n+public class ShouldOnlyModeAllowCapturingArgumentsTest extends TestBase {\n+    \n+    @Mock IMethods mock;\n+    \n+    @Test\n+    public void shouldAllowCapturingArguments() {\n+        //given\n+        mock.simpleMethod(\"o\");\n+        ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class);\n+        \n+        //when\n+        verify(mock, only()).simpleMethod(arg.capture());\n+\n+        //then\n+        assertEquals(\"o\", arg.getValue());\n+    }\n+}", "timestamp": 1276549334, "metainfo": ""}