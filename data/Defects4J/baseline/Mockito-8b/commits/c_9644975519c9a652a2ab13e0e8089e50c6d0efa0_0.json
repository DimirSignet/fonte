{"sha": "9644975519c9a652a2ab13e0e8089e50c6d0efa0", "log": "offer more information on a class cast issue due to objenesis instantiation strategy.", "commit": "\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n     }\n     \n     public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\n+        Class<?> proxyClass = null;\n+        Object proxyInstance = null;\n         try {\n             setConstructorsAccessible(mockedType, true);\n-            Class<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\n-            return mockedType.cast(createProxy(proxyClass, interceptor));\n+            proxyClass = createProxyClass(mockedType, ancillaryTypes);\n+            proxyInstance = createProxy(proxyClass, interceptor);\n+            return mockedType.cast(proxyInstance);\n         } catch (ClassCastException cce) {\n+            // NPE unlikely to happen because CCE will only happen on the cast statement\n             throw new MockitoException(join(\n-                \"ClassCastException occurred when creating the proxy.\",\n+                \"ClassCastException occurred while creating the mockito proxy :\",\n+                \"  class to imposterize : '\" + mockedType.getCanonicalName() + \"', loaded by classloader : '\" + mockedType.getClassLoader() + \"'\",\n+                \"  imposterizing class : '\" + proxyClass.getCanonicalName() + \"', loaded by classloader : '\" + proxyClass.getClassLoader() + \"'\",\n+                \"  proxy instance class : '\" + proxyInstance.getClass().getCanonicalName() + \"', loaded by classloader : '\" + proxyInstance.getClass().getClassLoader() + \"'\",\n+                \"\",\n                 \"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)\"\n             ), cce);\n         } finally {\n         }\n     }\n     \n-    public Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\n+    public Class<?> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\n         if (mockedType == Object.class) {\n             mockedType = ClassWithSuperclassToWorkAroundCglibBug.class;\n         }", "timestamp": 1357204521, "metainfo": ""}