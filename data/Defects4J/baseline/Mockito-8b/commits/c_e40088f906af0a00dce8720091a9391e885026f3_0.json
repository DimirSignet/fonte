{"sha": "e40088f906af0a00dce8720091a9391e885026f3", "log": "name change, documentation updated  --HG-- rename : src/org/mockito/internal/matchers/IArgumentMatcher.java => src/org/mockito/internal/matchers/ArgumentMatcher.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40256", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.internal.creation.MockNamer;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n \n /**\n  * Method call on a mock object. \n         return toString(argumentsToMatchers());\n     }\n \n-    public String toString(List<IArgumentMatcher> matchers) {\n+    public String toString(List<ArgumentMatcher> matchers) {\n         String mockName = MockNamer.nameForMock(mock);\n         String methodName = method.getName();\n         String arguments = getArgumentsString(matchers);\n         return result.toString().replaceFirst(\", $\", \"\").concat(\")\");\n     }\n     \n-    private String getArgumentsString(List<IArgumentMatcher> matchers) {\n+    private String getArgumentsString(List<ArgumentMatcher> matchers) {\n         StringBuilder result = new StringBuilder();\n         result.append(\"(\");\n-        for (IArgumentMatcher matcher : matchers) {\n+        for (ArgumentMatcher matcher : matchers) {\n             matcher.appendTo(result);\n             result.append(\", \");\n         }\n         return result.toString().replaceFirst(\", $\", \"\").concat(\")\");\n     }\n     \n-    private List<IArgumentMatcher> argumentsToMatchers() {\n-        List<IArgumentMatcher> matchers = new LinkedList<IArgumentMatcher>();\n+    private List<ArgumentMatcher> argumentsToMatchers() {\n+        List<ArgumentMatcher> matchers = new LinkedList<ArgumentMatcher>();\n         for (Object arg : this.arguments) {\n             if (arg != null && arg.getClass().isArray()) {\n                 matchers.add(new ArrayEquals(arg));\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n import java.util.Collections;\n import java.util.List;\n \n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationMatcher {\n \n     private final Invocation invocation;\n-    private final List<IArgumentMatcher> matchers;\n+    private final List<ArgumentMatcher> matchers;\n \n-    public InvocationMatcher(Invocation invocation, List<IArgumentMatcher> matchers) {\n+    public InvocationMatcher(Invocation invocation, List<ArgumentMatcher> matchers) {\n         if (matchers == null) {\n             throw new IllegalArgumentException(\"matchers cannot be null\");\n         }\n     }\n     \n     public InvocationMatcher(Invocation invocation) {\n-        this(invocation, Collections.<IArgumentMatcher>emptyList());\n+        this(invocation, Collections.<ArgumentMatcher>emptyList());\n     }\n     \n     public Method getMethod() {\n         return this.invocation;\n     }\n     \n-    public List<IArgumentMatcher> getMatchers() {\n+    public List<ArgumentMatcher> getMatchers() {\n         return this.matchers;\n     }\n \n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n \n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.progress.LastArguments;\n \n @SuppressWarnings(\"unchecked\")\n public class MatchersBinder {\n \n     public InvocationMatcher bindMatchers(Invocation invocation) {\n-        List<IArgumentMatcher> lastMatchers = LastArguments.instance().pullMatchers();\n+        List<ArgumentMatcher> lastMatchers = LastArguments.instance().pullMatchers();\n         validateMatchers(invocation, lastMatchers);\n \n-        List<IArgumentMatcher> processedMatchers = createEqualsMatchers(invocation, lastMatchers);\n+        List<ArgumentMatcher> processedMatchers = createEqualsMatchers(invocation, lastMatchers);\n         \n         InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, processedMatchers);\n         return invocationWithMatchers;\n     }\n \n-    private void validateMatchers(Invocation invocation, List<IArgumentMatcher> matchers) {\n+    private void validateMatchers(Invocation invocation, List<ArgumentMatcher> matchers) {\n         if (matchers != null) {\n             if (matchers.size() != invocation.getArguments().length) {\n                 throw new InvalidUseOfMatchersException(\n     /**\n      * if user passed bare arguments then create EqualsMatcher for every argument.\n      */\n-    private List<IArgumentMatcher> createEqualsMatchers(Invocation invocation,\n-            List<IArgumentMatcher> matchers) {\n+    private List<ArgumentMatcher> createEqualsMatchers(Invocation invocation,\n+            List<ArgumentMatcher> matchers) {\n         if (matchers != null) {\n             return matchers;\n         }\n-        List<IArgumentMatcher> result = new ArrayList<IArgumentMatcher>();\n+        List<ArgumentMatcher> result = new ArrayList<ArgumentMatcher>();\n         for (Object argument : invocation.getArguments()) {\n             result.add(new Equals(argument));\n         }\n--- a/src/org/mockito/internal/matchers/And.java\n+++ b/src/org/mockito/internal/matchers/And.java\n import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n-public class And implements IArgumentMatcher {\n+public class And implements ArgumentMatcher {\n \n-    private final List<IArgumentMatcher> matchers;\n+    private final List<ArgumentMatcher> matchers;\n \n-    public And(List<IArgumentMatcher> matchers) {\n+    public And(List<ArgumentMatcher> matchers) {\n         this.matchers = matchers;\n     }\n \n     public boolean matches(Object actual) {\n-        for (IArgumentMatcher matcher : matchers) {\n+        for (ArgumentMatcher matcher : matchers) {\n             if (!matcher.matches(actual)) {\n                 return false;\n             }\n \n     public void appendTo(StringBuilder buffer) {\n         buffer.append(\"and(\");\n-        for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n+        for (Iterator<ArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n             it.next().appendTo(buffer);\n             if (it.hasNext()) {\n                 buffer.append(\", \");\n--- a/src/org/mockito/internal/matchers/Any.java\n+++ b/src/org/mockito/internal/matchers/Any.java\n package org.mockito.internal.matchers;\n \n @SuppressWarnings(\"unchecked\")\n-public class Any implements IArgumentMatcher {\n+public class Any implements ArgumentMatcher {\n \n     public static final Any ANY = new Any();    \n     \n--- /dev/null\n+++ b/src/org/mockito/internal/matchers/ArgumentMatcher.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.matchers;\n+\n+/**\n+ * Decides whether an actual argument is accepted.\n+ */\n+public interface ArgumentMatcher<T> {\n+    \n+    /**\n+     * Returns whether this matcher accepts the given argument. \n+     * <p>\n+     * Like Object.equals(), it should be aware that the argument passed might \n+     * be null and of any type. So you will usually start the method with an \n+     * instanceof and/or null check.\n+     * <p>\n+     * The method should <b>never</b> assert if the argument doesn't match. It\n+     * should only return false.\n+     * \n+     * @param argument the argument\n+     * @return whether this matcher accepts the given argument.\n+     */\n+    boolean matches(T argument);\n+\n+    /**\n+     * Appends a string representation of this matcher to the given buffer. In case\n+     * of failure, the printed message will show this string to allow to know which\n+     * matcher was used for the failing call.\n+     * \n+     * @param builder the builder to which the string representation is appended.\n+     */\n+    void appendTo(StringBuilder builder);\n+}\n--- a/src/org/mockito/internal/matchers/Compare.java\n+++ b/src/org/mockito/internal/matchers/Compare.java\n import java.util.Comparator;\n \n @SuppressWarnings(\"unchecked\")\n-public class Compare<T> implements IArgumentMatcher {\n+public class Compare<T> implements ArgumentMatcher {\n \n     private T wanted;\n \n--- a/src/org/mockito/internal/matchers/CompareTo.java\n+++ b/src/org/mockito/internal/matchers/CompareTo.java\n package org.mockito.internal.matchers;\n \n \n-public abstract class CompareTo<T extends Comparable<T>> implements IArgumentMatcher<T> {\n+public abstract class CompareTo<T extends Comparable<T>> implements ArgumentMatcher<T> {\n     private final Comparable<T> wanted;\n \n     public CompareTo(Comparable<T> value) {\n--- a/src/org/mockito/internal/matchers/Contains.java\n+++ b/src/org/mockito/internal/matchers/Contains.java\n package org.mockito.internal.matchers;\n \n \n-public class Contains implements IArgumentMatcher<String> {\n+public class Contains implements ArgumentMatcher<String> {\n \n     private final String substring;\n \n--- a/src/org/mockito/internal/matchers/EndsWith.java\n+++ b/src/org/mockito/internal/matchers/EndsWith.java\n package org.mockito.internal.matchers;\n \n \n-public class EndsWith implements IArgumentMatcher<String> {\n+public class EndsWith implements ArgumentMatcher<String> {\n \n     private final String suffix;\n \n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n package org.mockito.internal.matchers;\n \n \n-public class Equals implements IArgumentMatcher<Object> {\n+public class Equals implements ArgumentMatcher<Object> {\n \n     private final Object wanted;\n \n--- a/src/org/mockito/internal/matchers/EqualsWithDelta.java\n+++ b/src/org/mockito/internal/matchers/EqualsWithDelta.java\n package org.mockito.internal.matchers;\n \n \n-public class EqualsWithDelta implements IArgumentMatcher<Number>{\n+public class EqualsWithDelta implements ArgumentMatcher<Number>{\n     private final Number wanted;\n \n     private final Number delta;\n--- a/src/org/mockito/internal/matchers/Find.java\n+++ b/src/org/mockito/internal/matchers/Find.java\n \n import java.util.regex.Pattern;\n \n-public class Find implements IArgumentMatcher<String> {\n+public class Find implements ArgumentMatcher<String> {\n \n     private final String regex;\n \n--- a/src/org/mockito/internal/matchers/InstanceOf.java\n+++ b/src/org/mockito/internal/matchers/InstanceOf.java\n package org.mockito.internal.matchers;\n \n \n-public class InstanceOf implements IArgumentMatcher<Object> {\n+public class InstanceOf implements ArgumentMatcher<Object> {\n \n     private final Class<?> clazz;\n \n--- a/src/org/mockito/internal/matchers/Matches.java\n+++ b/src/org/mockito/internal/matchers/Matches.java\n package org.mockito.internal.matchers;\n \n \n-public class Matches implements IArgumentMatcher<Object> {\n+public class Matches implements ArgumentMatcher<Object> {\n \n     private final String regex;\n \n--- a/src/org/mockito/internal/matchers/Not.java\n+++ b/src/org/mockito/internal/matchers/Not.java\n package org.mockito.internal.matchers;\n \n @SuppressWarnings(\"unchecked\")\n-public class Not implements IArgumentMatcher {\n+public class Not implements ArgumentMatcher {\n \n-    private final IArgumentMatcher first;\n+    private final ArgumentMatcher first;\n \n-    public Not(IArgumentMatcher first) {\n+    public Not(ArgumentMatcher first) {\n         this.first = first;\n     }\n \n--- a/src/org/mockito/internal/matchers/NotNull.java\n+++ b/src/org/mockito/internal/matchers/NotNull.java\n package org.mockito.internal.matchers;\n \n \n-public class NotNull implements IArgumentMatcher<Object> {\n+public class NotNull implements ArgumentMatcher<Object> {\n \n     public static final NotNull NOT_NULL = new NotNull();\n     \n--- a/src/org/mockito/internal/matchers/Null.java\n+++ b/src/org/mockito/internal/matchers/Null.java\n package org.mockito.internal.matchers;\n \n \n-public class Null implements IArgumentMatcher<Object> {\n+public class Null implements ArgumentMatcher<Object> {\n \n     public static final Null NULL = new Null();\n \n--- a/src/org/mockito/internal/matchers/Or.java\n+++ b/src/org/mockito/internal/matchers/Or.java\n \n \n @SuppressWarnings(\"unchecked\")\n-public class Or implements IArgumentMatcher {\n+public class Or implements ArgumentMatcher {\n \n-    private final List<IArgumentMatcher> matchers;\n+    private final List<ArgumentMatcher> matchers;\n \n-    public Or(List<IArgumentMatcher> matchers) {\n+    public Or(List<ArgumentMatcher> matchers) {\n         this.matchers = matchers;\n     }\n \n     public boolean matches(Object actual) {\n-        for (IArgumentMatcher matcher : matchers) {\n+        for (ArgumentMatcher matcher : matchers) {\n             if (matcher.matches(actual)) {\n                 return true;\n             }\n \n     public void appendTo(StringBuilder buffer) {\n         buffer.append(\"or(\");\n-        for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n+        for (Iterator<ArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n             it.next().appendTo(buffer);\n             if (it.hasNext()) {\n                 buffer.append(\", \");\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n package org.mockito.internal.matchers;\n \n \n-public class Same implements IArgumentMatcher<Object> {\n+public class Same implements ArgumentMatcher<Object> {\n \n     private final Object wanted;\n \n--- a/src/org/mockito/internal/matchers/StartsWith.java\n+++ b/src/org/mockito/internal/matchers/StartsWith.java\n package org.mockito.internal.matchers;\n \n \n-public class StartsWith implements IArgumentMatcher<String> {\n+public class StartsWith implements ArgumentMatcher<String> {\n \n     private final String prefix;\n \n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n \n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.matchers.And;\n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Not;\n import org.mockito.internal.matchers.Or;\n \n     \n     private static final ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();\n     \n-    private Stack<IArgumentMatcher> matcherStack = new Stack<IArgumentMatcher>();\n+    private Stack<ArgumentMatcher> matcherStack = new Stack<ArgumentMatcher>();\n \n     public static LastArguments instance() {\n         if (INSTANCE.get() == null) {\n         return INSTANCE.get();\n     }\n     \n-    public void reportMatcher(IArgumentMatcher matcher) {\n+    public void reportMatcher(ArgumentMatcher matcher) {\n         matcherStack.push(matcher);\n     }\n \n-    public List<IArgumentMatcher> pullMatchers() {\n+    public List<ArgumentMatcher> pullMatchers() {\n         if (matcherStack.isEmpty()) {\n             return null;\n         }\n         \n-        ArrayList<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>(matcherStack);\n+        ArrayList<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>(matcherStack);\n         matcherStack.clear();\n         return matchers;\n     }\n         matcherStack.push(new Not(popLastArgumentMatchers(1).get(0)));\n     }\n \n-    private List<IArgumentMatcher> popLastArgumentMatchers(int count) {\n+    private List<ArgumentMatcher> popLastArgumentMatchers(int count) {\n         assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n         assertState(matcherStack.size() >= count,\n                 \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n-        List<IArgumentMatcher> result = new LinkedList<IArgumentMatcher>();\n+        List<ArgumentMatcher> result = new LinkedList<ArgumentMatcher>();\n         result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n         for (int i = 0; i < count; i++) {\n             matcherStack.pop();\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.NotNull;\n \n @SuppressWarnings(\"unchecked\")\n     \n     @Test\n     public void shouldToStringWithMatchers() throws Exception {\n-        IArgumentMatcher m = NotNull.NOT_NULL;\n+        ArgumentMatcher m = NotNull.NOT_NULL;\n         InvocationMatcher notNull = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(m));\n-        IArgumentMatcher mTwo = new Equals('x');\n+        ArgumentMatcher mTwo = new Equals('x');\n         InvocationMatcher equals = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(mTwo));\n \n         assertEquals(\"Object.simpleMethod(notNull())\", notNull.toString());\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.progress.LastArguments;\n import org.mockitousage.IMethods;\n \n     }\n \n     //TODO make CustomMatcher part of framework\n-    abstract class CustomMatcher<T> implements IArgumentMatcher<T> {\n+    abstract class CustomMatcher<T> implements ArgumentMatcher<T> {\n         public void appendTo(StringBuilder builder) {\n             builder.append(\"<custom argument matcher>\");\n         }\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n import org.mockito.internal.matchers.EndsWith;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.Find;\n-import org.mockito.internal.matchers.IArgumentMatcher;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Matches;\n import org.mockito.internal.matchers.Not;\n import org.mockito.internal.matchers.NotNull;\n \n     @Test\n     public void orToString() {\n-        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>();\n         matchers.add(new Equals(1));\n         matchers.add(new Equals(2));\n         new Or(matchers).appendTo(buffer);\n \n     @Test\n     public void andToString() {\n-        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>();\n         matchers.add(new Equals(1));\n         matchers.add(new Equals(2));\n         new And(matchers).appendTo(buffer);", "timestamp": 1199566074, "metainfo": ""}