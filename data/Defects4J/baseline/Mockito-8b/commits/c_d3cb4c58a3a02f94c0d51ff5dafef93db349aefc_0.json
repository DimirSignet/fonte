{"sha": "d3cb4c58a3a02f94c0d51ff5dafef93db349aefc", "log": "Rename job for clarity.", "commit": "\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n \n import org.mockito.Incubating;\n import org.mockito.exceptions.base.MockitoSerializationIssue;\n-import org.mockito.internal.creation.instance.CachingObjenesisInstanceFactory;\n+import org.mockito.internal.creation.instance.CachingObjenesisInstantiator;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n             // create the Mockito mock class before it can even be deserialized\n             //TODO SF unify creation of imposterizer, constructor code duplicated\n-            ClassImposterizer imposterizer = new ClassImposterizer(new CachingObjenesisInstanceFactory());\n+            ClassImposterizer imposterizer = new ClassImposterizer(new CachingObjenesisInstantiator());\n             imposterizer.setConstructorsAccessible(typeToMock, true);\n             Class<?> proxyClass = imposterizer.createProxyClass(\n                     typeToMock,\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.InternalMockHandler;\n-import org.mockito.internal.creation.instance.CachingObjenesisInstanceFactory;\n+import org.mockito.internal.creation.instance.CachingObjenesisInstantiator;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\n-        return new ClassImposterizer(new CachingObjenesisInstanceFactory()).imposterise(\n+        return new ClassImposterizer(new CachingObjenesisInstantiator()).imposterise(\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/CachingObjenesisInstantiator.java\n+package org.mockito.internal.creation.instance;\n+\n+public class CachingObjenesisInstantiator implements Instantiator {\n+\n+    private static ObjenesisInstantiator INSTANCE = new ObjenesisInstantiator();\n+\n+    public <T> T newInstance(Class<T> cls) {\n+        return INSTANCE.newInstance(cls);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n+package org.mockito.internal.creation.instance;\n+\n+public class ConstructorInstantiator implements Instantiator {\n+\n+    public <T> T newInstance(Class<T> cls) {\n+        try {\n+            return cls.newInstance();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Problems instantiating class: \" + cls, e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/Instantiator.java\n+package org.mockito.internal.creation.instance;\n+\n+/**\n+ * Provides instances of classes.\n+ */\n+public interface Instantiator {\n+\n+    /**\n+     * Creates instance of given class\n+     */\n+    <T> T newInstance(Class<T> cls);\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/ObjenesisInstantiator.java\n+package org.mockito.internal.creation.instance;\n+\n+import org.mockito.internal.configuration.GlobalConfiguration;\n+import org.objenesis.ObjenesisStd;\n+\n+public class ObjenesisInstantiator implements Instantiator {\n+\n+    //TODO: in order to provide decent exception message when objenesis is not found,\n+    //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing\n+    //TODO: for the same reason catch and give better feedback when hamcrest core is not found.\n+    private final ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());\n+\n+    public <T> T newInstance(Class<T> cls) {\n+        return objenesis.newInstance(cls);\n+    }\n+}\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n import org.mockito.cglib.proxy.*;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.cglib.MockitoNamingPolicy;\n-import org.mockito.internal.creation.instance.InstanceFactory;\n+import org.mockito.internal.creation.instance.Instantiator;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n  */\n public class ClassImposterizer  {\n \n-    private final InstanceFactory instanceFactory;\n+    private final Instantiator instantiator;\n \n-    public ClassImposterizer(InstanceFactory instanceFactory) {\n-        this.instanceFactory = instanceFactory;\n+    public ClassImposterizer(Instantiator instantiator) {\n+        this.instantiator = instantiator;\n     }\n     \n     private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {\n                 \"  class to mock : \" + describeClass(mockedType),\n                 \"  created class : \" + describeClass(proxyClass),\n                 \"  proxy instance class : \" + describeClass(proxyInstance),\n-                \"  instance creation by : \" + instanceFactory.getClass().getSimpleName(),\n+                \"  instance creation by : \" + instantiator.getClass().getSimpleName(),\n                 \"\",\n                 \"You might experience classloading issues, disabling the Objenesis cache *might* help (see MockitoConfiguration)\"\n             ), cce);\n     }\n     \n     private Object createProxy(Class<Factory> proxyClass, final MethodInterceptor interceptor) {\n-        Factory proxy = instanceFactory.newInstance(proxyClass);\n+        Factory proxy = instantiator.newInstance(proxyClass);\n         proxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\n         return proxy;\n     }\n--- a/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.creation.instance.ConstructorInstanceFactory;\n-import org.mockito.internal.creation.instance.ObjenesisInstanceFactory;\n+import org.mockito.internal.creation.instance.ConstructorInstantiator;\n+import org.mockito.internal.creation.instance.ObjenesisInstantiator;\n import org.mockitoutil.TestBase;\n \n import java.lang.reflect.Method;\n @SuppressWarnings(\"unchecked\")\n public class ClassImposterizerTest extends TestBase {\n \n-    ClassImposterizer imposterizer = new ClassImposterizer(new ObjenesisInstanceFactory());\n+    ClassImposterizer imposterizer = new ClassImposterizer(new ObjenesisInstantiator());\n \n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {\n \n     @Test\n     public void shouldCreateClassByConstructor() {\n-        imposterizer = new ClassImposterizer(new ConstructorInstanceFactory());\n+        imposterizer = new ClassImposterizer(new ConstructorInstantiator());\n         OtherClass mock = imposterizer.imposterise(new MethodInterceptorStub(), OtherClass.class);\n         assertNotNull(mock);\n     }", "timestamp": 1413584546, "metainfo": ""}