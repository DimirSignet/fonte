{"sha": "5bc60cf32d06f0b71038c00b8e162957a33beb65", "log": "Reworked the public api for the Mockito JUnit rule.", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;\n import org.mockito.internal.verification.VerificationModeFactory;\n-import org.mockito.junit.MockitoJUnitRule;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n import org.mockito.verification.*;\n+import org.mockito.junit.*;\n \n /**\n  * <p align=\"left\"><img src=\"logo.jpg\"/></p>\n  * MockitoAnnotations.initMocks(testClass);\n  * </code></pre>\n  *\n- * You can use built-in runner: {@link MockitoJUnitRunner} or a rule: {@link MockitoJUnitRule}.\n+ * You can use built-in runner: {@link MockitoJUnitRunner} or a rule: {@link MockitoRule}.\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  *\n  * <p>\n  * All new annotations are <b>*only*</b> processed on {@link MockitoAnnotations#initMocks(Object)}.\n  * Just like for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner} or rule:\n- * {@link MockitoJUnitRule}.\n+ * {@link MockitoRule}.\n  * <p>\n  *\n  *\n  * using <b>constructor</b> injection, <b>setter</b> injection, or <b>field</b> injection.\n  * <p>\n  * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)}, {@link MockitoJUnitRunner}\n- * or {@link MockitoJUnitRule}.\n+ * or {@link MockitoRule}.\n  * <p>\n  * Read more about available tricks and the rules of injection in the javadoc for {@link InjectMocks}\n  * <pre class=\"code\"><code class=\"java\">\n      * But even though JUnit might report next test as red, don't worry about it\n      * and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.\n      * <p>\n-     * <b>Both built-in runner: {@link MockitoJUnitRunner} and rule: {@link MockitoJUnitRule}</b> do validateMockitoUsage() after each test method.\n+     * <b>Both built-in runner: {@link MockitoJUnitRunner} and rule: {@link MockitoRule}</b> do validateMockitoUsage() after each test method.\n      * <p>\n      * Bear in mind that <b>usually you don't have to <code>validateMockitoUsage()</code></b>\n      * and framework validation triggered on next-time basis should be just enough,\n--- /dev/null\n+++ b/src/org/mockito/junit/MockitoJUnit.java\n+package org.mockito.junit;\n+\n+/**\n+ * The JUnit rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}. See {@link MockitoRule}.\n+ *\n+ * @since 1.10.17\n+ */\n+public class MockitoJUnit {\n+\n+    /**\n+     * Creates rule instance that initiates &#064;Mocks\n+     * See {@link MockitoRule}.\n+     *\n+     * @return the rule instance\n+     */\n+    public static MockitoRule rule() {\n+        return new MockitoJUnitRule();\n+    }\n+}\n--- a/src/org/mockito/junit/MockitoJUnitRule.java\n+++ b/src/org/mockito/junit/MockitoJUnitRule.java\n import org.junit.runners.model.FrameworkMethod;\n import org.junit.runners.model.Statement;\n import org.mockito.internal.junit.JUnitRule;\n-import org.mockito.rules.MockitoJUnit;\n \n \n /**\n  * Please use {@link MockitoJUnit#rule()} instead of direct use.\n+ * The reason of the deprecation is that we want to avoid concrete classes in the public api.\n  *\n  * @see MockitoJUnit\n+ * @since 1.10.6\n  */\n-@Deprecated\n-public class MockitoJUnitRule implements MethodRule {\n-\n+public class MockitoJUnitRule implements MethodRule, MockitoRule {\n+    //MethodRule is undeprecated in latest JUnit\n     private final JUnitRule jUnitRule;\n \n     /**\n      * Please use {@link MockitoJUnit#rule()}.\n+     * The reason of the deprecation is that we want to avoid concrete classes in the public api.\n      */\n     @Deprecated\n     public MockitoJUnitRule() {\n \n     /**\n      * Please use {@link MockitoJUnit#rule()}.\n+     * The reason of the deprecation is that we want to avoid concrete classes in the public api.\n      */\n     @Deprecated\n     public MockitoJUnitRule(Object targetTest) {\n--- /dev/null\n+++ b/src/org/mockito/junit/MockitoRule.java\n+package org.mockito.junit;\n+\n+import org.junit.rules.MethodRule;\n+\n+/**\n+ * The JUnit rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}.\n+ *\n+ * This rule adds following behavior:\n+ * <ul>\n+ *   <li>\n+ *      Initializes mocks annotated with {@link org.mockito.Mock},\n+ *      so that explicit usage of {@link org.mockito.MockitoAnnotations#initMocks(Object)} is not necessary.\n+ *      Mocks are initialized before each test method.\n+ *   <li>\n+ *      validates framework usage after each test method. See javadoc for {@link org.mockito.Mockito#validateMockitoUsage()}.\n+ * </ul>\n+ * Example use:\n+ * <pre class=\"code\"><code class=\"java\">\n+ * public class ExampleTest {\n+ *\n+ *     &#064;Rule\n+ *     public MockitoRule rule = MockitoJUnit.rule();\n+ *\n+ *     &#064;Mock\n+ *     private List list;\n+ *\n+ *     &#064;Test\n+ *     public void shouldDoSomething() {\n+ *         list.add(100);\n+ *     }\n+ * }\n+ * </code></pre>\n+ *\n+ * @since 1.10.17\n+ */\n+public interface MockitoRule extends MethodRule {}\n--- a/test/org/mockitousage/junitrule/MockitoJUnitRuleTest.java\n+++ b/test/org/mockitousage/junitrule/MockitoJUnitRuleTest.java\n import org.junit.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRule;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n public class MockitoJUnitRuleTest {\n \n     @Rule\n-    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule();\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n \n     @Mock\n     private Injected injected;\n         assertNotNull(\"Mock created\", injected);\n         assertNotNull(\"Object created\", injectInto);\n         assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n-\n     }\n \n     public static class Injected {\n--- a/test/org/mockitousage/junitrule/RuleTestWithFactoryMethodTest.java\n+++ b/test/org/mockitousage/junitrule/RuleTestWithFactoryMethodTest.java\n import org.junit.rules.MethodRule;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.rules.MockitoJUnit;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n public class RuleTestWithFactoryMethodTest {\n \n     @Rule\n-    public MethodRule mockitoJUnitRule = MockitoJUnit.rule();\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n \n     @Mock\n     private Injected injected;", "timestamp": 1418685931, "metainfo": ""}