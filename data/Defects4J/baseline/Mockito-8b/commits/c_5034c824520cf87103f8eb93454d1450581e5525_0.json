{"sha": "5034c824520cf87103f8eb93454d1450581e5525", "log": "Made another assertion error use clickable stack trace inside exception's message instead of use exception's cause  --HG-- rename : test/org/mockitousage/stacktrace/StackTrackeChangingTest.java => test/org/mockitousage/stacktrace/ClickableStackTracesTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401268", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     }    \n \n     public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {\n-        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualInvocationStackTrace);\n-\n+        String ending = \n+            (lastActualInvocationStackTrace != null)? \"-> at \" + lastActualInvocationStackTrace.getStackTrace()[0] + \"\\n\" : \"\\n\";\n+        \n         throw new TooLittleActualInvocations(join(\n                 wanted.toString(),\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n+                \"Wanted \" + pluralize(wantedCount) + \":\",\n+                \"-> at \" + new Location(),\n+                \"But was \" + actualCount + \":\", \n+                ending\n+        ));\n     }\n \n     \n--- a/src/org/mockito/exceptions/verification/TooLittleActualInvocations.java\n+++ b/src/org/mockito/exceptions/verification/TooLittleActualInvocations.java\n \n     private static final long serialVersionUID = 1L;\n     \n+    public TooLittleActualInvocations(String message) {\n+        super(message);\n+    }\n+    \n     public TooLittleActualInvocations(String message, Throwable cause) {\n         super(message, cause);\n     }\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkTest;\n import org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest;\n import org.mockitousage.stacktrace.StackTraceFilteringTest;\n-import org.mockitousage.stacktrace.StackTrackeChangingTest;\n+import org.mockitousage.stacktrace.ClickableStackTracesTest;\n import org.mockitousage.stubbing.BasicStubbingTest;\n import org.mockitousage.stubbing.ReturningDefaultValuesTest;\n import org.mockitousage.stubbing.StubbingWithThrowablesTest;\n                     DescriptiveMessagesOnVerificationInOrderErrorsTest.class,\n                     InvalidStateDetectionTest.class,\n                     ReplacingObjectMethodsTest.class,\n-                    StackTrackeChangingTest.class,\n+                    ClickableStackTracesTest.class,\n                     ExampleTest.class,\n                     PointingStackTraceToActualInvocationTest.class,\n                     PointingStackTraceToActualInvocationChunkTest.class,\n--- /dev/null\n+++ b/test/org/mockitousage/stacktrace/ClickableStackTracesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stacktrace;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.verification.TooLittleActualInvocations;\n+import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class ClickableStackTracesTest extends TestBase {\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    private void callMethodOnMock(String param) {\n+        mock.simpleMethod(param);\n+    }\n+\n+    private void verifyTheMock(int times, String param) {\n+        verify(mock, times(times)).simpleMethod(param);\n+    }\n+    \n+    @Test\n+    public void shouldShowActualAndExpectedWhenArgumentsAreDifferent() {\n+        callMethodOnMock(\"foo\");\n+        try {\n+            verifyTheMock(1, \"not foo\");\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            assertThat(e, messageContains(\"callMethodOnMock(\"));\n+            assertThat(e, messageContains(\"verifyTheMock(\"));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldShowActualAndExpected1() {\n+        callMethodOnMock(\"foo\");\n+        try {\n+            verifyTheMock(2, \"foo\");\n+            fail();\n+        } catch (TooLittleActualInvocations e) {\n+            assertThat(e, messageContains(\"callMethodOnMock(\"));\n+            assertThat(e, messageContains(\"verifyTheMock(\"));\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stacktrace;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@Ignore\n+public class ModellingDescriptiveMessagesTest extends TestBase {\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+    \n+    @Test\n+    public void shouldShowActualAndExpected() {\n+        mock.simpleMethod(\"blah\");\n+        verify(mock).simpleMethod();\n+    }\n+    \n+    @Test\n+    public void shouldTooLittleInvocations() {\n+        mock.simpleMethod();\n+        verify(mock, times(2)).simpleMethod();\n+    }\n+}\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n     }\n     \n     @Test\n-    public void shouldPointToTooLittleInvocationsChunkOnError() {\n-        verify(mock, atLeastOnce()).simpleMethod(1);\n-        try {\n-            verify(mock, times(3)).simpleMethod(3);\n-            fail();\n-        } catch (TooLittleActualInvocations e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n-        }\n-    }   \n-    \n-    @Test\n     public void shouldPointToTooManyInvocationsChunkOnError() {\n         try {\n             verify(mock).simpleMethod(1);\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n import org.junit.runner.RunWith;\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n-import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n     }\n     \n     @Test\n-    public void shouldPointToTooLittleInvocationsChunkOnError() {\n-        verify(mock, atLeastOnce()).simpleMethod(1);\n-        try {\n-            verify(mock, times(3)).simpleMethod(3);\n-            fail();\n-        } catch (TooLittleActualInvocations e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"third\"));\n-        }\n-    }   \n-    \n-    @Test\n     public void shouldPointToTooManyInvocationsChunkOnError() {\n         try {\n             verify(mock, times(0)).simpleMethod(1);\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n \n import java.util.LinkedList;\n \n-import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.cause.TooLittleInvocations;\n-import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockitoutil.TestBase;\n @SuppressWarnings(\"unchecked\")\n public class DescriptiveMessagesWhenTimesXVerificationFailsTest extends TestBase {\n \n-    private LinkedList mock;\n-\n-    @Before\n-    public void setup() {\n-        mock = Mockito.mock(LinkedList.class);\n-    }\n+    @Mock private LinkedList mock;\n \n     @Test\n     public void shouldVerifyActualNumberOfInvocationsSmallerThanWanted() throws Exception {\n             Mockito.verify(mock, times(100)).clear();\n             fail();\n         } catch (TooLittleActualInvocations e) {\n-            String expected =\n-                \"\\n\" +\n-                \"linkedList.clear();\" +\n-                \"\\n\" +\n-                \"Wanted 100 times but was 3\";\n-            assertEquals(expected, e.getMessage());\n-\n-            assertEquals(TooLittleInvocations.class, e.getCause().getClass());\n-\n-            String expectedCause =\n-                \"\\n\" +\n-                \"Too little invocations:\";\n-            assertEquals(expectedCause, e.getCause().getMessage());\n+            assertThat(e, messageContains(\"mock.clear();\"));\n+            assertThat(e, messageContains(\"Wanted 100 times\"));\n+            assertThat(e, messageContains(\"was 3\"));\n         }\n     }\n \n+    //TODO next thing to do\n+    @Ignore\n     @Test\n     public void shouldVerifyActualNumberOfInvocationsLargerThanWanted() throws Exception {\n         mock.clear();\n             Mockito.verify(mock, times(1)).clear();\n             fail();\n         } catch (TooManyActualInvocations e) {\n-            String expected =\n-                \"\\n\" +\n-                \"linkedList.clear();\" +\n-                \"\\n\" +\n-                \"Wanted 1 time but was 4\";\n-            assertEquals(expected, e.getMessage());\n-\n-            assertEquals(UndesiredInvocation.class, e.getCause().getClass());\n-\n-            String expectedCause =\n-                \"\\n\" +\n-                \"Undesired invocation:\";\n-\n-            assertEquals(expectedCause, e.getCause().getMessage());\n+            assertThat(e, messageContains(\"mock.clear();\"));\n+            assertThat(e, messageContains(\"Wanted 1 time\"));\n+            assertThat(e, messageContains(\"was 4\"));\n         }\n     }\n }\n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n             verify(mock, times(100)).clear();\n             fail();\n         } catch (TooLittleActualInvocations e) {\n-            assertThat(e, messageContains(\"Wanted 100 times but was 2\"));\n+            assertThat(e, messageContains(\"Wanted 100 times\"));\n+            assertThat(e, messageContains(\"was 2\"));\n         }\n     }\n ", "timestamp": 1235260822, "metainfo": ""}