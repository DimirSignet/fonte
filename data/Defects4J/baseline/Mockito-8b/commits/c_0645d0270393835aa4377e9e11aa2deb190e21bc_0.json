{"sha": "0645d0270393835aa4377e9e11aa2deb190e21bc", "log": "changed the naming policy for proxies so that \"Mockito\" is included in the resulting class name  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401079", "commit": "\n--- a/src/org/mockito/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n public class StackTraceFilter {\n     \n     public boolean isLastStackElementToRemove(StackTraceElement e) {\n-        boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByCGLIB$$\");\n+        boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n         boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n         return fromMockObject || fromOrgMockito;\n     }\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n         @Override\n         public String getClassName(String prefix, String source, Object key, Predicate names) {\n             return \"codegen.\" + super.getClassName(prefix, source, key, names);\n+        }\n+        \n+        @Override\n+        protected String getTag() {\n+            return \"ByMockitoWithCGLIB\";\n+        }        \n+    };\n+    \n+    private static final NamingPolicy MOCKITO_NAMING_POLICY = new DefaultNamingPolicy() {\n+        @Override\n+        protected String getTag() {\n+            return \"ByMockitoWithCGLIB\";\n         }\n     };\n     \n         enhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\n         if (mockedType.getSigners() != null) {\n             enhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n+        } else {\n+            enhancer.setNamingPolicy(MOCKITO_NAMING_POLICY);\n         }\n         \n         try {\n--- a/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n+++ b/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n     public void testShouldFilterOutCglibGarbage() {\n         HasStackTrace trace = new TraceBuilder().classes(\n             \"MockitoExampleTest\",\n-            \"List$$EnhancerByCGLIB$$2c406024\", \n+            \"List$$EnhancerByMockitoWithCGLIB$$2c406024\", \n             \"MethodInterceptorFilter\"\n         ).toTrace();\n         ", "timestamp": 1226434742, "metainfo": ""}