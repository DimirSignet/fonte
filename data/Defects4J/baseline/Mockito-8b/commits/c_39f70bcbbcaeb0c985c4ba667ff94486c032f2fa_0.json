{"sha": "39f70bcbbcaeb0c985c4ba667ff94486c032f2fa", "log": "added some unit tests to strict verifier to make sure it's easily testable and the class design is ok :)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40243", "commit": "\n--- a/src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java\n         this.reporter = reporter;\n     }\n \n-    //TODO tests! - do you like the message?\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n         if (!mode.strictMode()) {\n             return;\n--- a/test/org/mockito/internal/verification/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/InvocationsFinderStub.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n class InvocationsFinderStub extends InvocationsFinder {\n     final List<Invocation> actualToReturn = new LinkedList<Invocation>();\n     List<Invocation> invocations;\n     Invocation firstUnverifiedToReturn;\n+    final List<Invocation> firstUnverifiedChunkToReturn = new LinkedList<Invocation>();\n \n     @Override public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted,\n             VerificationModeImpl mode) {\n         this.invocations = invocations;\n         return firstUnverifiedToReturn;\n     }\n+    \n+    @Override public List<Invocation> findFirstUnverifiedChunk(List<Invocation> invocations, InvocationMatcher wanted) {\n+        return firstUnverifiedChunkToReturn;\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifierTest.java\n+package org.mockito.internal.verification;\n+\n+import static java.util.Arrays.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.internal.progress.VerificationModeImpl.*;\n+\n+import java.util.LinkedList;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.VerificationModeBuilder;\n+\n+public class StrictlyNumberOfInvocationsVerifierTest extends RequiresValidState {\n+\n+    private StrictlyNumberOfInvocationsVerifier verifier;\n+    private ReporterStub reporterStub;\n+    private InvocationMatcher wanted;\n+    private LinkedList<Invocation> invocations;\n+    private InvocationsFinderStub finderStub;\n+    \n+    @Before\n+    public void setup() {\n+        reporterStub = new ReporterStub();\n+        finderStub = new InvocationsFinderStub();\n+        verifier = new StrictlyNumberOfInvocationsVerifier(finderStub, reporterStub);\n+        \n+        wanted = new InvocationBuilder().toInvocationMatcher();\n+        invocations = new LinkedList<Invocation>(asList(new InvocationBuilder().toInvocation()));\n+    }\n+    \n+    @Test\n+    public void shouldNeverVerifyIfModeIsNotStrict() throws Exception {\n+        verifier.verify(null, wanted, atLeastOnce());\n+    }\n+    \n+    @Test\n+    public void shouldPassIfWantedIsZeroAndFirstUnverifiedChunkIsEmpty() throws Exception {\n+        assertTrue(finderStub.firstUnverifiedChunkToReturn.isEmpty());\n+        verifier.verify(invocations, wanted, new VerificationModeBuilder().times(0).strict());\n+    }\n+    \n+    @Test\n+    public void shouldPassIfWantedIsZeroAndFirstUnverifiedChunkDoesNotMatch() throws Exception {\n+        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n+        finderStub.firstUnverifiedChunkToReturn.add(differentMethod); \n+        \n+        assertFalse(wanted.matches(differentMethod));\n+        verifier.verify(invocations, wanted, new VerificationModeBuilder().times(0).strict());\n+    }\n+    \n+    class ReporterStub extends Reporter {\n+    }\n+}", "timestamp": 1198706378, "metainfo": ""}