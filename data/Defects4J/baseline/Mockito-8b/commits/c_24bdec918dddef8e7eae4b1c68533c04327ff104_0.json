{"sha": "24bdec918dddef8e7eae4b1c68533c04327ff104", "log": "Improved exception messages.  Issue #92", "commit": "\n--- a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n     }\n \n     public <T> T newInstance(Class<T> cls) {\n+        if (outerClassInstance == null) {\n+            return noArgConstructor(cls);\n+        }\n+        return withOuterClass(cls);\n+    }\n+\n+    private <T> T withOuterClass(Class<T> cls) {\n         try {\n-            if (outerClassInstance == null) {\n-                return cls.newInstance();\n-            }\n             Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n             return c.newInstance(outerClassInstance);\n+        } catch (Exception e) {\n+            throw new InstantationException(\"Unable to create mock instance of '\"\n+                    + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n+        }\n+    }\n+\n+    private <T> T noArgConstructor(Class<T> cls) {\n+        try {\n+            return cls.newInstance();\n         } catch (Exception e) {\n             throw new InstantationException(\"Unable to create mock instance of '\"\n                     + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e);\n--- a/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n+++ b/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n             new ConstructorInstantiator(null).newInstance(SomeClass2.class);\n             fail();\n         } catch (InstantationException e) {\n-            assertEquals(\"Please ensure it has parameter-less constructor.\", e.getMessage());\n+            assertEquals(\"Unable to create mock instance of 'SomeClass2'.\\n\" +\n+                    \"Please ensure it has parameter-less constructor.\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n     }\n \n     @Test\n-    @Ignore //TODO SF\n     public void mocking_inner_classes_with_wrong_outer_instance() {\n-        fail();\n+        try {\n+            //when\n+            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n+            //then\n+            fail();\n+        } catch (MockitoException e) {\n+            assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());\n+            assertContains(\"Please ensure that the outer instance has correct type and that the target class has parameter-less constructor\", e.getCause().getMessage());\n+        }\n     }\n \n     @Test", "timestamp": 1416177930, "metainfo": ""}