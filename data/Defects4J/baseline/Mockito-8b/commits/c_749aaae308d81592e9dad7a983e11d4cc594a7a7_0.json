{"sha": "749aaae308d81592e9dad7a983e11d4cc594a7a7", "log": "some package refactoring  --HG-- rename : src/org/mockito/configuration/DefaultReturnValues.java => src/org/mockito/internal/configuration/DefaultReturnValues.java rename : src/org/mockito/configuration/MockitoProperties.java => src/org/mockito/internal/configuration/MockitoProperties.java rename : test/org/mockito/configuration/DefaultReturnValuesTest.java => test/org/mockito/internal/configuration/DefaultReturnValuesTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40569", "commit": "\n--- a/src/org/mockito/configuration/ReturnValues.java\n+++ b/src/org/mockito/configuration/ReturnValues.java\n  */\n package org.mockito.configuration;\n \n+import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n  * Configures return values for an unstubbed invocation\n  * <p>\n- * See examples in javadoc for {@link MockitoConfiguration}\n+ * See examples in javadoc for {@link ConfigurationSupport}\n  */\n public interface ReturnValues {\n \n     /**\n-     * See examples in javadoc for {@link MockitoConfiguration}\n+     * returns value for an unstubbed invocation\n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n      * \n      * @param invocation placeholder for mock and a method\n      * @return the return value\n--- /dev/null\n+++ b/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.configuration.experimental;\n+\n+import java.lang.reflect.Modifier;\n+\n+import org.mockito.internal.configuration.MockitoConfiguration;\n+import org.mockito.internal.configuration.Configuration;\n+import org.mockito.internal.configuration.MockitoProperties;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Allows configuring Mockito to enable custom 'mocking style'. \n+ * It can be useful when working with legacy code, etc.\n+ * <p>\n+ * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n+ * You may want to check out the project from svn repository to easily browse Mockito's test code.\n+ * <p>\n+ * Basic example:\n+ * <pre>\n+ *   //create an implementation of ReturnValues interface\n+ *   \n+ *   public class FriendlyReturnValues implements ReturnValues {\n+ *\n+ *   public Object valueFor(InvocationOnMock invocation) {\n+ *       \n+ *       Class<?> returnType = invocation.getMethod().getReturnType();\n+ *       \n+ *       Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n+ *       \n+ *       if (defaultReturnValue != null || !ConfigurationSupport.isMockable(returnType)) {\n+ *           return defaultReturnValue;\n+ *       } else { \n+ *           return Mockito.mock(returnType);\n+ *       }\n+ *   }\n+ *   \n+ *   //finally, change the configuration: \n+ *   \n+ *   ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());\n+ * </pre>\n+ * <p>\n+ * Configuring Mockito is a new concept that we evaluate. Please let us know if you find it useful/harmful. \n+ */\n+public class ConfigurationSupport {\n+    \n+    /**\n+     * this is what Mockito returns by default for given invocation \n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n+     * \n+     * @param invocation\n+     * @return default return value\n+     */\n+    public static Object defaultValueFor(InvocationOnMock invocation) {\n+        return MockitoProperties.DEFAULT_RETURN_VALUES.valueFor(invocation);\n+    }\n+\n+    /**\n+     * returns true if Mockito CAN create mocks of the clazz\n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n+     * \n+     * @param clazz\n+     * @return \n+     */\n+    public static boolean isMockable(Class<?> clazz) {\n+        return !Modifier.isFinal(clazz.getModifiers());\n+    }\n+    \n+    /**\n+     * returns a configuration object\n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n+     * \n+     * @return\n+     */\n+    public static MockitoConfiguration getConfiguration() {\n+        return Configuration.instance();\n+    }\n+}\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n \n import net.sf.cglib.proxy.MethodProxy;\n \n-import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.creation.ClassNameFinder;\n import org.mockito.internal.creation.MockAwareInterceptor;\n import org.mockito.internal.invocation.AllInvocationsFinder;\n         \n         if (verificationMode != null) {\n             verifyingRecorder.verify(invocationMatcher, verificationMode);\n-            return MockitoConfiguration.instance().getReturnValues().valueFor(invocationMatcher.getInvocation());\n+            return Configuration.instance().getReturnValues().valueFor(invocationMatcher.getInvocation());\n         }\n         \n         stubber.setInvocationForPotentialStubbing(invocationMatcher);\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/Configuration.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+/**\n+ * Singleton implementation of MockitoConfiguration\n+ */\n+public class Configuration implements MockitoConfiguration {\n+    \n+    public static final ThreadLocal<Configuration> CONFIG = new ThreadLocal<Configuration>();\n+\n+    private ReturnValues returnValues;\n+    \n+    private Configuration() {\n+        resetReturnValues();\n+    }\n+    \n+    /**\n+     * gets the singleton instance of a configuration\n+     */\n+    public static Configuration instance() {\n+        if (CONFIG.get() == null) {\n+            CONFIG.set(new Configuration());\n+        }\n+        return CONFIG.get();\n+    }\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.configuration.MockitoConfiguration#getReturnValues()\n+     */\n+    public ReturnValues getReturnValues() {\n+        return returnValues;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.configuration.MockitoConfiguration#setReturnValues(org.mockito.configuration.ReturnValues)\n+     */\n+    public void setReturnValues(ReturnValues returnValues) {\n+        if (returnValues == null) {\n+            throw new MockitoException(\"Cannot set null ReturnValues!\");\n+        }\n+        this.returnValues = returnValues;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.configuration.MockitoConfiguration#resetReturnValues()\n+     */\n+    public void resetReturnValues() {\n+        returnValues = MockitoProperties.DEFAULT_RETURN_VALUES;\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/DefaultReturnValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.configuration;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.internal.creation.ClassNameFinder;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Used by default by every Mockito mock.\n+ * <ul>\n+ * <li>\n+ *  Returns appropriate primitive for primitive-returning methods\n+ * </li>\n+ * <li>\n+ *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)\n+ * </li>\n+ * <li>\n+ *  Returns empty collection for collection-returning methods (works for most commonly used collection types)\n+ * </li>\n+ * <li>\n+ *  Returns description of mock for toString() method\n+ * </li>\n+ * <li>\n+ *  Returns null for everything else\n+ * </li>\n+ * </ul>\n+ */\n+public class DefaultReturnValues implements ReturnValues {\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)\n+     */\n+    public Object valueFor(InvocationOnMock invocation) {\n+        if (Invocation.isToString(invocation)) {\n+            Object mock = invocation.getMock();\n+            String mockDescription = \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n+            return mockDescription;\n+        }\n+        \n+        Class<?> returnType = invocation.getMethod().getReturnType();\n+        return returnValueFor(returnType);\n+    }\n+    \n+    Object returnValueFor(Class<?> type) {\n+        if (type.isPrimitive()) {\n+            return primitiveOf(type);\n+        } else if (isPrimitiveWrapper(type)) {\n+            return primitiveWrapperOf(type);\n+        //new instances are used instead of Collections.emptyList(), etc.\n+        //to avoid UnsupportedOperationException if code under test modifies returned collection\n+        } else if (type == Collection.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == Set.class) {\n+            return new HashSet<Object>();\n+        } else if (type == HashSet.class) {\n+            return new HashSet<Object>();\n+        } else if (type == SortedSet.class) {\n+            return new TreeSet<Object>();\n+        } else if (type == TreeSet.class) {\n+            return new TreeSet<Object>();\n+        } else if (type == LinkedHashSet.class) {\n+            return new LinkedHashSet<Object>();\n+        } else if (type == List.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == LinkedList.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == ArrayList.class) {\n+            return new ArrayList<Object>();\n+        } else if (type == Map.class) {\n+            return new HashMap<Object, Object>();\n+        } else if (type == HashMap.class) {\n+            return new HashMap<Object, Object>();\n+        } else if (type == SortedMap.class) {\n+            return new TreeMap<Object, Object>();\n+        } else if (type == TreeMap.class) {\n+            return new TreeMap<Object, Object>();\n+        } else if (type == LinkedHashMap.class) {\n+            return new LinkedHashMap<Object, Object>();\n+        }       \n+        //Let's not care about the rest of collections.\n+        return null;\n+    }\n+\n+    private Object primitiveOf(Class<?> type) {\n+        if (type == Boolean.TYPE) {\n+            return false;\n+        } else if (type == Character.TYPE) {\n+            return (char) 0;\n+        } else {\n+            return 0;\n+        } \n+    }\n+    \n+    private boolean isPrimitiveWrapper(Class<?> type) {\n+        return wrapperReturnValues.containsKey(type);\n+    }\n+    \n+    private Object primitiveWrapperOf(Class<?> type) {\n+        return wrapperReturnValues.get(type);\n+    }\n+    \n+    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n+    \n+    static {\n+        wrapperReturnValues.put(Boolean.class, Boolean.FALSE);\n+        wrapperReturnValues.put(Character.class, new Character((char) 0));\n+        wrapperReturnValues.put(Byte.class, new Byte((byte) 0));\n+        wrapperReturnValues.put(Short.class, new Short((short) 0));\n+        wrapperReturnValues.put(Integer.class, new Integer(0));\n+        wrapperReturnValues.put(Long.class, new Long(0));\n+        wrapperReturnValues.put(Float.class, new Float(0));\n+        wrapperReturnValues.put(Double.class, new Double(0));\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/MockitoConfiguration.java\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.configuration.experimental.ConfigurationSupport;\n+\n+/**\n+ * Allows configuring Mockito.\n+ * <p>\n+ * See examples in javadoc for {@link ConfigurationSupport}\n+ */\n+public interface MockitoConfiguration {\n+\n+    /**\n+     * returns currently set {@link ReturnValues}\n+     * \n+     * @return\n+     */\n+    ReturnValues getReturnValues();\n+\n+    /**\n+     * Sets {@link ReturnValues} implementation. \n+     * <p>\n+     * Allows to change the values returned by unstubbed methods. \n+     * \n+     * @param returnValues\n+     */\n+    void setReturnValues(ReturnValues returnValues);\n+\n+    /**\n+     * Resets {@link ReturnValues} implementation to the default one: {@link MockitoProperties#DEFAULT_RETURN_VALUES}\n+     */\n+    void resetReturnValues();\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/MockitoProperties.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.configuration.ReturnValues;\n+\n+/**\n+ * Configuration properties \n+ */\n+public class MockitoProperties {\n+\n+    /**\n+     * Mockito uses it by default to get return values for unstubbed invocations \n+     */\n+    public static final ReturnValues DEFAULT_RETURN_VALUES =  new DefaultReturnValues();\n+   \n+}\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n \n import java.util.LinkedList;\n \n-import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.StackTraceFilter;\n+import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgress;\n                 return s.answer();\n             }\n         }\n-        return MockitoConfiguration.instance().getReturnValues().valueFor(invocation);\n+        return Configuration.instance().getReturnValues().valueFor(invocation);\n     }\n \n     public void addThrowableForVoidMethod(Throwable throwable) {\n--- /dev/null\n+++ b/test/org/mockito/configuration/experimental/ConfigurationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.configuration.experimental;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class ConfigurationTest extends TestBase {\n+    \n+    @Test\n+    public void shouldNotAllowConfiguringWithNullReturnValues() {\n+        try {\n+            ConfigurationSupport.getConfiguration().setReturnValues(null);\n+            fail();\n+        } catch (MockitoException e) {\n+            assertThat(e, messageContains(\"Cannot set null ReturnValues!\"));\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/configuration/DefaultReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.configuration;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+\n+public class DefaultReturnValuesTest extends TestBase {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n+        DefaultReturnValues values = new DefaultReturnValues();\n+        \n+        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n+\n+        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n+        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());\n+        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());\n+        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());\n+        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());\n+\n+        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());\n+        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());\n+        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());\n+\n+        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());\n+        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());\n+        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n+        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n+        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n+        \n+        assertNull(values.returnValueFor(String.class));\n+    }\n+    \n+    @Test public void shouldReturnPrimitive() {\n+        DefaultReturnValues values = new DefaultReturnValues();\n+        \n+        assertEquals(false, values.returnValueFor(Boolean.TYPE));\n+        assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n+        assertEquals(0, values.returnValueFor(Byte.TYPE));\n+        assertEquals(0, values.returnValueFor(Short.TYPE));\n+        assertEquals(0, values.returnValueFor(Integer.TYPE));\n+        assertEquals(0, values.returnValueFor(Long.TYPE));\n+        assertEquals(0, values.returnValueFor(Float.TYPE));\n+        assertEquals(0, values.returnValueFor(Double.TYPE));\n+    }\n+}\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.junit.runner.notification.Failure;\n import org.mockito.MockitoTest;\n import org.mockito.TestBase;\n-import org.mockito.configuration.DefaultReturnValuesTest;\n import org.mockito.exceptions.ReporterTest;\n import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n import org.mockito.exceptions.base.MockitoExceptionTest;\n import org.mockito.exceptions.base.StackTraceRemoverTest;\n import org.mockito.internal.AllInvocationsFinderTest;\n import org.mockito.internal.MockHandlerTest;\n+import org.mockito.internal.configuration.DefaultReturnValuesTest;\n import org.mockito.internal.creation.CglibTest;\n import org.mockito.internal.creation.MockFactoryTest;\n import org.mockito.internal.invocation.InvocationMatcherTest;\n--- a/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n package org.mockitousage.examples.configure;\n \n import org.mockito.Mockito;\n-import org.mockito.configuration.ConfigurationSupport;\n import org.mockito.configuration.ReturnValues;\n+import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n--- a/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n \n import org.junit.After;\n import org.junit.Before;\n-import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockitousage.examples.configure.FriendlyReturnValues;\n \n public class MakesMocksNotToReturnNulls {\n     @Before\n     public void configureMockito() {\n         //setting custom return values\n-        MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());\n+        ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());\n     }\n     \n     @After\n     public void resetReturnValuesToDefaults() {\n         //I don't want mocks from other tests to be reconfigured\n-        MockitoConfiguration.instance().resetReturnValues();\n+        ConfigurationSupport.getConfiguration().resetReturnValues();\n     }\n }\n--- a/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n import org.junit.internal.runners.InitializationError;\n import org.junit.internal.runners.JUnit4ClassRunner;\n import org.junit.runner.notification.RunNotifier;\n-import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockitousage.examples.configure.FriendlyReturnValues;\n \n public class MakesMocksNotToReturnNulls extends JUnit4ClassRunner {\n     protected Object createTest() throws Exception {\n         Object test = super.createTest();\n         //setting up custom return values\n-        MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());\n+        ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());\n         return test;\n     }\n \n     public void run(RunNotifier notifier) {\n         super.run(notifier);\n         //I don't want mocks from other tests to be reconfigured\n-        MockitoConfiguration.instance().resetReturnValues();\n+        ConfigurationSupport.getConfiguration().resetReturnValues();\n     }\n }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n  */\n package org.mockitousage.examples.configure.withstaticutility;\n \n-import static org.mockito.Mockito.*;\n-\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import org.mockito.configuration.ConfigurationSupport;\n-import org.mockito.configuration.MockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n-import org.mockito.invocation.InvocationOnMock;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.configuration.experimental.ConfigurationSupport;\n+import org.mockito.internal.configuration.MockitoConfiguration;\n+import org.mockito.invocation.InvocationOnMock;\n \n public class AllowsFakingReturnValues {\n     \n     }\n     \n     private static FakeReturnValues getFakeReturnValues() {\n-        MockitoConfiguration config = MockitoConfiguration.instance();\n+        MockitoConfiguration config = ConfigurationSupport.getConfiguration();\n         ReturnValues current = config.getReturnValues();\n         //if my custom return values are NOT yet set, do it \n         if (!(current instanceof FakeReturnValues)) {", "timestamp": 1207782883, "metainfo": ""}