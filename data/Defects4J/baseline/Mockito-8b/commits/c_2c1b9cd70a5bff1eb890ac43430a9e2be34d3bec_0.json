{"sha": "2c1b9cd70a5bff1eb890ac43430a9e2be34d3bec", "log": "refactoring  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401684", "commit": "\n--- a/src/org/mockito/internal/creation/AbstractMockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/AbstractMockitoMethodProxy.java\n package org.mockito.internal.creation;\n-\n-import java.lang.reflect.Field;\n-\n-import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.creation.cglib.MockitoNamingPolicy;\n \n public abstract class AbstractMockitoMethodProxy implements MockitoMethodProxy {\n \n     public Object invokeSuper(Object target, Object[] arguments) throws Throwable {\n         return getMethodProxy().invokeSuper(target, arguments);\n     }\n-\n-    //TODO refactor back to CGLIBHacker and get rid of abstract class\n-    public void setNamingPolicyField(MockitoNamingPolicy namingPolicy) {\n-        try {\n-            MethodProxy methodProxy = getMethodProxy();\n-            Field createInfoField = reflectOnCreateInfo(methodProxy);\n-            createInfoField.setAccessible(true);\n-            Object createInfo = createInfoField.get(methodProxy);\n-            Field namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\n-            namingPolicyField.setAccessible(true);\n-            if (namingPolicyField.get(createInfo) == null) {\n-                namingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\n-                            \"Unable to set MockitoNamingPolicy on cglib generator which creates FastClasses\", e);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\n-        \n-        Class cglibMethodProxyClass = methodProxy.getClass();\n-        // in case methodProxy was extended by user, let's traverse the object\n-        // graph to find the cglib methodProxy\n-        // with all the fields we would like to change\n-        while (cglibMethodProxyClass != MethodProxy.class) {\n-            cglibMethodProxyClass = methodProxy.getClass().getSuperclass();\n-        }\n-        return cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n-    }\n-\n-\n-    protected abstract MethodProxy getMethodProxy();\n-}\n+}\n--- a/src/org/mockito/internal/creation/DelegatingMockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/DelegatingMockitoMethodProxy.java\n         this.methodProxy = methodProxy;\n     }\n \n-    @Override\n-    protected MethodProxy getMethodProxy() {\n+    public MethodProxy getMethodProxy() {\n         return methodProxy;\n     }\n-\n-}\n+}\n--- a/src/org/mockito/internal/creation/MockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/MockitoMethodProxy.java\n package org.mockito.internal.creation;\n \n-import org.mockito.internal.creation.cglib.MockitoNamingPolicy;\n+import org.mockito.cglib.proxy.MethodProxy;\n \n public interface MockitoMethodProxy {\n \n     Object invokeSuper(Object target, Object[] arguments) throws Throwable;\n \n-    void setNamingPolicyField(MockitoNamingPolicy namingPolicy);\n+    MethodProxy getMethodProxy();\n \n }\n--- a/src/org/mockito/internal/creation/SerializableMockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/SerializableMockitoMethodProxy.java\n public class SerializableMockitoMethodProxy extends AbstractMockitoMethodProxy implements Serializable {\n \n     private static final long serialVersionUID = -5337859962876770632L;\n-    private Class<?> c1;\n-    private Class<?> c2;\n-    private String desc;\n-    private String name;\n-    private String superName;\n+    private final Class<?> c1;\n+    private final Class<?> c2;\n+    private final String desc;\n+    private final String name;\n+    private final String superName;\n     private transient MethodProxy methodProxy;\n \n     public SerializableMockitoMethodProxy(MethodProxy methodProxy) {\n         this.methodProxy = methodProxy;\n     }\n \n-    protected MethodProxy getMethodProxy() {\n+    public MethodProxy getMethodProxy() {\n         if (methodProxy == null)\n             methodProxy = MethodProxy.create(c1, c2, desc, name, superName);\n         return methodProxy;\n     }\n-}\n+}\n--- a/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n+++ b/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n package org.mockito.internal.creation.cglib;\n \n import java.io.Serializable;\n+import java.lang.reflect.Field;\n \n import org.mockito.internal.creation.MockitoMethodProxy;\n+import org.mockito.cglib.proxy.MethodProxy;\n \n public class CGLIBHacker implements Serializable {\n \n     private static final long serialVersionUID = -4389233991416356668L;\n \n-    public void setMockitoNamingPolicy(MockitoMethodProxy methodProxy) {\n-        methodProxy.setNamingPolicyField(MockitoNamingPolicy.INSTANCE);\n+    public void setMockitoNamingPolicy(MockitoMethodProxy mockitoMethodProxy) {\n+        try {\n+            MethodProxy methodProxy = mockitoMethodProxy.getMethodProxy();\n+            Field createInfoField = reflectOnCreateInfo(methodProxy);\n+            createInfoField.setAccessible(true);\n+            Object createInfo = createInfoField.get(methodProxy);\n+            Field namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\n+            namingPolicyField.setAccessible(true);\n+            if (namingPolicyField.get(createInfo) == null) {\n+                namingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\n+                            \"Unable to set MockitoNamingPolicy on cglib generator which creates FastClasses\", e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\n+\n+        Class cglibMethodProxyClass = methodProxy.getClass();\n+        // in case methodProxy was extended by user, let's traverse the object\n+        // graph to find the cglib methodProxy\n+        // with all the fields we would like to change\n+        while (cglibMethodProxyClass != MethodProxy.class) {\n+            cglibMethodProxyClass = methodProxy.getClass().getSuperclass();\n+        }\n+        return cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n     }\n }", "timestamp": 1257939815, "metainfo": ""}