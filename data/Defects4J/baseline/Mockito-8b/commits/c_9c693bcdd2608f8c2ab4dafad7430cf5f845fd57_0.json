{"sha": "9c693bcdd2608f8c2ab4dafad7430cf5f845fd57", "log": "Next step of a rename job. The end goal is get the codebase more conventional.  --HG-- rename : src/org/mockito/internal/MockHandlerInterface.java => src/org/mockito/internal/InternalMockHandler.java", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/InternalMockHandler.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal;\n+\n+import java.util.List;\n+\n+import org.mockito.Incubating;\n+import org.mockito.internal.stubbing.InvocationContainer;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.MockitoInvocationHandler;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.VoidMethodStubbable;\n+\n+@SuppressWarnings(\"unchecked\")\n+public interface InternalMockHandler<T> extends MockitoInvocationHandler {\n+\n+    MockCreationSettings getMockSettings();\n+\n+    VoidMethodStubbable<T> voidMethodStubbable(T mock);\n+    \n+    void setAnswersForStubbing(List<Answer> answers);\n+\n+    InvocationContainer getInvocationContainer();\n+\n+    /**\n+     * Takes an invocation object and handles it.\n+     * <p>\n+     * The default implementation provided by Mockito handles invocations by recording\n+     * method calls on mocks for further verification, captures the stubbing information when mock is stubbed,\n+     * returns the stubbed values for invocations that have been stubbed, and much more.\n+     *\n+     * @param invocation The invocation to handle\n+     * @return Result\n+     * @throws Throwable Throwable\n+     */\n+    @Incubating\n+    Object handle(Invocation invocation) throws Throwable;\n+}\n--- a/src/org/mockito/internal/InvocationNotifierHandler.java\n+++ b/src/org/mockito/internal/InvocationNotifierHandler.java\n  * Handler, that call all listeners wanted for this mock, before delegating it\n  * to the parameterized handler.\n  *\n- * Also imposterize MockHandlerImpl, delegate all call of MockHandlerInterface to the real mockHandler\n+ * Also imposterize MockHandlerImpl, delegate all call of InternalMockHandler to the real mockHandler\n  */\n-public class InvocationNotifierHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T>  {\n+public class InvocationNotifierHandler<T> implements MockitoInvocationHandler, InternalMockHandler<T> {\n \n     private List<InvocationListener> invocationListeners;\n     private MockHandlerImpl<T> mockHandler;\n--- a/src/org/mockito/internal/MockHandlerImpl.java\n+++ b/src/org/mockito/internal/MockHandlerImpl.java\n  * @param <T>\n  *            type of mock object to handle\n  */\n-public class MockHandlerImpl<T> implements MockHandlerInterface<T> {\n+public class MockHandlerImpl<T> implements InternalMockHandler<T> {\n \n     private static final long serialVersionUID = -2917871070982574165L;\n \n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;\n     }\n     \n     public <T> VoidMethodStubbable<T> stubVoid(T mock) {\n-        MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock);\n+        InternalMockHandler<T> handler = mockUtil.getMockHandler(mock);\n         mockingProgress.stubbingStarted();\n         return handler.voidMethodStubbable(mock);\n     }\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Callback;\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.plugins.MockMaker;\n import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n-\n-import java.util.Set;\n \n /**\n  * A MockMaker that uses cglib to generate mocks on a JVM.\n public final class CglibMockMaker implements MockMaker {\n \n     public <T> T createMock(MockCreationSettings<T> settings, MockitoInvocationHandler handler) {\n-        MockHandlerInterface mockitoHandler = cast(handler);\n+        InternalMockHandler mockitoHandler = cast(handler);\n         return ClassImposterizer.INSTANCE.imposterise(\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n-    private MockHandlerInterface cast(MockitoInvocationHandler handler) {\n-        if (!(handler instanceof MockHandlerInterface)) {\n+    private InternalMockHandler cast(MockitoInvocationHandler handler) {\n+        if (!(handler instanceof InternalMockHandler)) {\n             throw new MockitoException(\"At the moment you cannot provide own implementations of MockitoInvocationHandler.\" +\n                     \"\\nPlease see the javadocs for the MockMaker interface.\");\n         }\n-        return (MockHandlerInterface) handler;\n+        return (InternalMockHandler) handler;\n     }\n \n     public void resetMock(Object mock, MockitoInvocationHandler newHandler, MockCreationSettings settings) {\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n \n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.invocation.Invocation;\n import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n \n     private static final long serialVersionUID = 6182795666612683784L;\n-    private final MockHandlerInterface handler;\n+    private final InternalMockHandler handler;\n     CGLIBHacker cglibHacker = new CGLIBHacker();\n     ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();\n     private final MockCreationSettings mockSettings;\n \n-    public MethodInterceptorFilter(MockHandlerInterface handler, MockCreationSettings mockSettings) {\n+    public MethodInterceptorFilter(InternalMockHandler handler, MockCreationSettings mockSettings) {\n         this.handler = handler;\n         this.mockSettings = mockSettings;\n     }\n--- a/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n+++ b/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n \n package org.mockito.internal.invocation;\n \n-import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.Invocation;\n     public List<Invocation> find(List<?> mocks) {\n         List<Invocation> unused = new LinkedList<Invocation>();\n         for (Object mock : mocks) {\n-            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n+            InternalMockHandler<Object> handler = new MockUtil().getMockHandler(mock);\n             List<StubbedInvocationMatcher> fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();\n             for(StubbedInvocationMatcher s : fromSingleMock) {\n                 if (!s.wasUsed()) {\n--- a/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n \n package org.mockito.internal.invocation.finder;\n \n-import org.mockito.internal.MockHandlerInterface;\n-import org.mockito.internal.invocation.InvocationImpl;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.Invocation;\n \n     public List<Invocation> find(List<?> mocks) {\n         Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n         for (Object mock : mocks) {\n-            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n+            InternalMockHandler<Object> handler = new MockUtil().getMockHandler(mock);\n             List<Invocation> fromSingleMock = handler.getInvocationContainer().getInvocations();\n             invocationsInOrder.addAll(fromSingleMock);\n         }\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.mockito.Mockito;\n-import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n     }\n \n     private Object getMock(InvocationOnMock invocation) throws Throwable {\n-    \tMockHandlerInterface<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n+    \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n         // matches invocation for verification\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n package org.mockito.internal.util;\n \n import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.InvocationNotifierHandler;\n import org.mockito.internal.MockHandlerImpl;\n-import org.mockito.internal.MockHandlerInterface;\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n         mockMaker.resetMock(mock, newHandler, settings);\n     }\n \n-    public <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+    public <T> InternalMockHandler<T> getMockHandler(T mock) {\n         if (mock == null) {\n             throw new NotAMockException(\"Argument should be a mock, but is null!\");\n         }\n \n         if (isMockitoMock(mock)) {\n-            return (MockHandlerInterface) mockMaker.getHandler(mock);\n+            return (InternalMockHandler) mockMaker.getHandler(mock);\n         } else {\n             throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.InvocationBuilder;\n \n public class MethodInterceptorFilterTest extends TestBase {\n \n-    MockHandlerInterface handler = Mockito.mock(MockHandlerInterface.class);\n+    InternalMockHandler handler = Mockito.mock(InternalMockHandler.class);\n     MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings());\n \n     @Before", "timestamp": 1334524158, "metainfo": ""}