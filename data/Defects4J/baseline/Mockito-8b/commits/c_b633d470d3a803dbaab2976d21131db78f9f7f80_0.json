{"sha": "b633d470d3a803dbaab2976d21131db78f9f7f80", "log": "added yet one more problem and TODO :)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40125", "commit": "\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n     }\n \n     private boolean equalArguments(Object[] arguments) {\n+        //TODO find out if the bottom code has any sense (it's easymock's legacy)\n+        //and if we can replace it with Arrays.equals()\n+        //e.g prove that we should treat the following as not equal calls for chunking evaluation        \n+        //mock.add(new String(\"one\"));\n+        //mock.add(\"one\");\n+        \n         if (this.arguments.length != arguments.length) {\n             return false;\n         }\n--- a/src/org/mockito/internal/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/RegisteredInvocations.java\n         List<Invocation> allInvocations = invocationsFinder.allInvocationsInOrder(allMocksToBeVerifiedInOrder);\n         allInvocationsInOrder.addAll(allInvocations);\n         \n-        List<InvocationChunk> chunks = new LinkedList<InvocationChunk>();\n+        LinkedList<InvocationChunk> chunks = new LinkedList<InvocationChunk>();\n         for (Invocation i : allInvocationsInOrder) {\n             if (i.isVerifiedInOrder()) {\n                 continue;\n             }\n             if (!chunks.isEmpty() \n-                    && chunks.get(chunks.size()-1).getInvocation().equals(i)) {\n+                    && chunks.getLast().getInvocation().equals(i)) {\n                 chunks.get(chunks.size()-1).add(i);\n             } else {\n                 chunks.add(new InvocationChunk(i));\n--- a/test/org/mockito/InvocationTest.java\n+++ b/test/org/mockito/InvocationTest.java\n     private Invocation call;\n     private Invocation equalCall;\n     private Invocation nonEqualCall;\n+    private Invocation newStringObjectShouldNotBeEqual;\n \n     @Before\n     public void setup() throws SecurityException, NoSuchMethodException {\n         call            = new InvocationBuilder().args(\" \").mock(\"mock\").seq(1).toInvocation();\n         equalCall       = new InvocationBuilder().args(\" \").mock(\"mock\").seq(2).toInvocation();\n         nonEqualCall    = new InvocationBuilder().args(\"X\").mock(\"mock\").seq(3).toInvocation();\n+        \n+        newStringObjectShouldNotBeEqual    = new InvocationBuilder().args(new String(\" \")).mock(\"mock\").seq(4).toInvocation();\n     }\n \n     @Test\n         assertFalse(call.equals(\"\"));\n         assertTrue(call.equals(equalCall));\n         assertFalse(call.equals(nonEqualCall));\n+        assertFalse(call.equals(newStringObjectShouldNotBeEqual));\n     }\n     \n     @Test", "timestamp": 1196640862, "metainfo": ""}