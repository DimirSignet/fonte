{"sha": "c45a107c3ebdcb3c032740b42c2689b6fa2f14ab", "log": "MockHandler is now one of our main API classes. It won't have much for now but it will change as we start moving out from InternalMockHandler.  --HG-- rename : src/org/mockito/invocation/MockitoInvocationHandler.java => src/org/mockito/invocation/MockHandler.java", "commit": "\n--- a/src/org/mockito/internal/InternalMockHandler.java\n+++ b/src/org/mockito/internal/InternalMockHandler.java\n import org.mockito.Incubating;\n import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.invocation.Invocation;\n-import org.mockito.invocation.MockitoInvocationHandler;\n+import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n @SuppressWarnings(\"unchecked\")\n-public interface InternalMockHandler<T> extends MockitoInvocationHandler {\n+public interface InternalMockHandler<T> extends MockHandler {\n \n     MockCreationSettings getMockSettings();\n \n--- a/src/org/mockito/internal/InvocationNotifierHandler.java\n+++ b/src/org/mockito/internal/InvocationNotifierHandler.java\n import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.invocation.Invocation;\n import org.mockito.listeners.InvocationListener;\n-import org.mockito.invocation.MockitoInvocationHandler;\n+import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n  *\n  * Also imposterize MockHandlerImpl, delegate all call of InternalMockHandler to the real mockHandler\n  */\n-public class InvocationNotifierHandler<T> implements MockitoInvocationHandler, InternalMockHandler<T> {\n+public class InvocationNotifierHandler<T> implements MockHandler, InternalMockHandler<T> {\n \n     private List<InvocationListener> invocationListeners;\n     private MockHandlerImpl<T> mockHandler;\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.InternalMockHandler;\n+import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.plugins.MockMaker;\n-import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n \n /**\n  */\n public final class CglibMockMaker implements MockMaker {\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockitoInvocationHandler handler) {\n+    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n         return ClassImposterizer.INSTANCE.imposterise(\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n-    private InternalMockHandler cast(MockitoInvocationHandler handler) {\n+    private InternalMockHandler cast(MockHandler handler) {\n         if (!(handler instanceof InternalMockHandler)) {\n-            throw new MockitoException(\"At the moment you cannot provide own implementations of MockitoInvocationHandler.\" +\n+            throw new MockitoException(\"At the moment you cannot provide own implementations of MockHandler.\" +\n                     \"\\nPlease see the javadocs for the MockMaker interface.\");\n         }\n         return (InternalMockHandler) handler;\n     }\n \n-    public void resetMock(Object mock, MockitoInvocationHandler newHandler, MockCreationSettings settings) {\n+    public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {\n         ((Factory) mock).setCallback(0, new MethodInterceptorFilter(cast(newHandler), settings));\n     }\n \n-    public MockitoInvocationHandler getHandler(Object mock) {\n+    public MockHandler getHandler(Object mock) {\n         if (!(mock instanceof Factory)) {\n             return null;\n         }\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.invocation.Invocation;\n-import org.mockito.invocation.MockitoInvocationHandler;\n+import org.mockito.invocation.MockHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.*;\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n         return handler.handle(invocation);\n     }\n    \n-    public MockitoInvocationHandler getHandler() {\n+    public MockHandler getHandler() {\n         return handler;\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/invocation/MockHandler.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.invocation;\n+\n+import org.mockito.Incubating;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Mockito handler of an invocation on a mock. This is a core part of the API, the heart of Mockito.\n+ * See also the {@link org.mockito.plugins.MockMaker}.\n+ * <p>\n+ * This api is work in progress, hence a marker interface. Do not provide your own implementations.\n+ * Mockito will provide you with the implementation via other {@link org.mockito.plugins.MockMaker} methods.\n+ */\n+@Incubating\n+public interface MockHandler extends Serializable {}\n--- a/src/org/mockito/plugins/MockMaker.java\n+++ b/src/org/mockito/plugins/MockMaker.java\n package org.mockito.plugins;\n \n import org.mockito.Incubating;\n-import org.mockito.invocation.MockitoInvocationHandler;\n+import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n-\n-import java.util.Set;\n \n /**\n  * The facility to create mocks.\n  * Mockito will only use the first returned by the standard {@link ClassLoader#getResource} mechanism.\n  *\n  * @see org.mockito.mock.MockCreationSettings\n- * @see org.mockito.invocation.MockitoInvocationHandler\n+ * @see org.mockito.invocation.MockHandler\n  * @since 1.9.5\n  */\n @Incubating\n      * </ul>\n      *\n      * @param settings - mock creation settings like type to mock, extra interfaces and so on.\n-     * @param handler See {@link MockitoInvocationHandler}.\n+     * @param handler See {@link org.mockito.invocation.MockHandler}.\n      *                <b>Do not</b> provide your own implementation at this time. Make sure your implementation of\n      *                {@link #getHandler(Object)} will return this instance.\n      * @param <T> Type of the mock to return, actually the <code>settings.getTypeToMock</code>.\n      */\n     <T> T createMock(\n             MockCreationSettings<T> settings,\n-            MockitoInvocationHandler handler\n+            MockHandler handler\n     );\n \n     /**\n      *   This means the passed object is not really a Mockito mock.\n      * @since 1.9.5\n      */\n-    MockitoInvocationHandler getHandler(Object mock);\n+    MockHandler getHandler(Object mock);\n \n     /**\n      * Replaces the existing handler on {@code mock} with {@code newHandler}.\n      */\n     void resetMock(\n             Object mock,\n-            MockitoInvocationHandler newHandler,\n+            MockHandler newHandler,\n             MockCreationSettings settings\n     );\n }", "timestamp": 1334524290, "metainfo": ""}