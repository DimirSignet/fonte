{"sha": "0cf55a45ad4176bc2041a87c4693b1bcf0bc04db", "log": "made VerificationMode api thinner  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40943", "commit": "\n--- a/src/org/mockito/InOrderVerifier.java\n+++ b/src/org/mockito/InOrderVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.verification.MockitoInOrderVerificationMode;\n+import org.mockito.internal.verification.MockitoVerificationMode;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.verification.VerificationMode;\n \n         if (!mocksToBeVerifiedInOrder.contains(mock)) {\n             reporter.inOrderRequiresFamiliarMock();\n         }\n-        mode.setMocksToBeVerifiedInOrder(mocksToBeVerifiedInOrder);\n+//        if (!(mode instanceof InOrderVerificationMode) {\n+//            //TODO fail nicely here\n+//        }\n+        if (mode instanceof MockitoVerificationMode) {\n+            return Mockito.verify(mock, new MockitoInOrderVerificationMode((MockitoVerificationMode) mode, mocksToBeVerifiedInOrder));\n+        }\n         return Mockito.verify(mock, mode);\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/MockitoInOrderVerificationMode.java\n+package org.mockito.internal.verification;\n+\n+import java.util.List;\n+\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.MockitoVerificationMode.Verification;\n+import org.mockito.verification.VerificationMode;\n+\n+public class MockitoInOrderVerificationMode implements VerificationMode {\n+\n+    private final MockitoVerificationMode mode;\n+    private final List<Object> mocksToBeVerifiedInOrder;\n+\n+    public MockitoInOrderVerificationMode(MockitoVerificationMode mode, List<Object> mocksToBeVerifiedInOrder) {\n+        this.mode = mode;\n+        this.mocksToBeVerifiedInOrder = mocksToBeVerifiedInOrder;\n+    }\n+\n+    @Override\n+    //TODO this API is not valid here - we want ALL invocations here\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n+        List<Invocation> allInvocations;\n+        allInvocations = new AllInvocationsFinder().getAllInvocations(mocksToBeVerifiedInOrder);\n+        \n+        MissingInvocationInOrderVerifier missingInvocation = new MissingInvocationInOrderVerifier();\n+        NumberOfInvocationsInOrderVerifier numberOfCalls = new NumberOfInvocationsInOrderVerifier();\n+        \n+        if (mode.wantedCount() > 0 || (mode.verification == Verification.AT_LEAST && mode.wantedCount() == 1)) {\n+            missingInvocation.verify(allInvocations, wanted, this);\n+        }\n+        \n+        numberOfCalls.verify(allInvocations, wanted, mode);\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return \"Wanted invocations count: \" + mode.wantedCount() + \", Mocks to verify in order: \" + mocksToBeVerifiedInOrder;\n+    }\n+}\n--- a/src/org/mockito/internal/verification/MockitoVerificationMode.java\n+++ b/src/org/mockito/internal/verification/MockitoVerificationMode.java\n  */\n package org.mockito.internal.verification;\n \n-import java.util.LinkedList;\n import java.util.List;\n \n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.verification.VerificationMode;\n     final int wantedInvocationCount;\n     final Verification verification;\n     \n-    List<? extends Object> mocksToBeVerifiedInOrder = new LinkedList<Object>();\n-    \n     public MockitoVerificationMode(int wantedNumberOfInvocations, Verification verification) {\n         if (verification != Verification.AT_LEAST && wantedNumberOfInvocations < 0) {\n             throw new MockitoException(\"Negative value is not allowed here\");\n     }\n     \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n-        //TODO null-check or isEmpty?\n-        if (mocksToBeVerifiedInOrder.isEmpty()) {\n-            doBasicVerification(invocations, wanted);\n-        } else {            \n-            doInOrderVerification(wanted);\n-        }\n-    }\n-\n-    private void doInOrderVerification(InvocationMatcher wanted) {\n-        List<Invocation> invocations;\n-        invocations = new AllInvocationsFinder().getAllInvocations(mocksToBeVerifiedInOrder);\n-\n-        MissingInvocationInOrderVerifier missingInvocation = new MissingInvocationInOrderVerifier();\n-        NumberOfInvocationsInOrderVerifier numberOfCalls = new NumberOfInvocationsInOrderVerifier();\n-        \n-        if (wantedInvocationCount > 0 || (verification == Verification.AT_LEAST && wantedInvocationCount == 1)) {\n-            missingInvocation.verify(invocations, wanted, this);\n-        }\n-\n-        numberOfCalls.verify(invocations, wanted, this);\n-    }\n-\n-    private void doBasicVerification(List<Invocation> invocations, InvocationMatcher wanted) {\n         MissingInvocationVerifier missingInvocation = new MissingInvocationVerifier();\n         NumberOfInvocationsVerifier numberOfInvocations = new NumberOfInvocationsVerifier();\n         \n         numberOfInvocations.verify(invocations, wanted, this);\n     }\n \n-    public void setMocksToBeVerifiedInOrder(List<Object> mocks) {\n-        this.mocksToBeVerifiedInOrder = mocks;\n-    }\n     public int wantedCount() {\n         return wantedInvocationCount;\n     }\n     \n     @Override\n     public String toString() {\n-        return \"Wanted invocations count: \" + wantedInvocationCount + \", Mocks to verify in order: \" + mocksToBeVerifiedInOrder;\n+        return \"Wanted invocations count: \" + wantedInvocationCount;\n     }\n }\n--- a/src/org/mockito/verification/VerificationMode.java\n+++ b/src/org/mockito/verification/VerificationMode.java\n  * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}\n  */\n public interface VerificationMode {\n-\n+    \n     void verify(List<Invocation> invocations, InvocationMatcher wanted);\n-\n-    void setMocksToBeVerifiedInOrder(List<Object> mocks);\n+    \n }", "timestamp": 1223745387, "metainfo": ""}