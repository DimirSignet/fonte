{"sha": "f1c6f6e9a2701423a9db3c32b469a7b51a68f722", "log": "killing down the verificationModeDecoder bit of rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40977", "commit": "\n--- a/src/org/mockito/internal/verification/AtLeast.java\n+++ b/src/org/mockito/internal/verification/AtLeast.java\n \n public class AtLeast implements VerificationInOrderMode, VerificationMode {\n     \n-    final int wantedInvocationCount;\n+    final int wantedCount;\n     \n     public AtLeast(int wantedNumberOfInvocations) {\n         if (wantedNumberOfInvocations <= 0) {\n             throw new MockitoException(\"Negative value or zero are not allowed here\");\n         }\n-        this.wantedInvocationCount = wantedNumberOfInvocations;\n+        this.wantedCount = wantedNumberOfInvocations;\n     }\n     \n     public void verify(VerificationData data) {\n         MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n         AtLeastXNumberOfInvocationsChecker numberOfInvocations = new AtLeastXNumberOfInvocationsChecker();\n         \n-        if (wantedInvocationCount == 1) {\n+        if (wantedCount == 1) {\n             missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n         }\n-        numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), wantedInvocationCount);\n+        numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), wantedCount);\n     }\n     \n     public void verifyInOrder(VerificationData data) {\n         MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n         AtLeastXNumberOfInvocationsInOrderChecker numberOfCalls = new AtLeastXNumberOfInvocationsInOrderChecker();\n         \n-        if (wantedInvocationCount == 1) {\n+        if (wantedCount == 1) {\n             missingInvocation.verify(allInvocations, wanted, this);\n         }\n         \n-        numberOfCalls.verify(allInvocations, wanted, wantedInvocationCount);\n+        numberOfCalls.verify(allInvocations, wanted, wantedCount);\n     }\n     \n     @Override\n     }    \n \n     public int wantedCount() {\n-        return wantedInvocationCount;\n+        return wantedCount;\n     }\n }\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsChecker.java\n         this.finder = finder;\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, Times mode) {\n-        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n         \n         int actualCount = actualInvocations.size();\n-        if (decoder.tooLittleActualInvocations(actualCount)) {\n+        if (wantedCount > actualCount) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n-            reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        } else if (decoder.neverWantedButInvoked(actualCount)) {\n-            HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n+            reporter.tooLittleActualInvocations(wantedCount, actualCount, wanted, lastInvocation);\n+        } else if (wantedCount == 0 && actualCount > 0) {\n+            HasStackTrace firstUndesired = actualInvocations.get(wantedCount).getStackTrace();\n             reporter.neverWantedButInvoked(wanted, firstUndesired); \n-        } else if (decoder.tooManyActualInvocations(actualCount)) {\n-            HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n-            reporter.tooManyActualInvocations(mode.wantedCount(), actualCount, wanted, firstUndesired);\n+        } else if (wantedCount < actualCount) {\n+            HasStackTrace firstUndesired = actualInvocations.get(wantedCount).getStackTrace();\n+            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n         }\n         \n         for (Invocation i : actualInvocations) {\n--- a/src/org/mockito/internal/verification/Times.java\n+++ b/src/org/mockito/internal/verification/Times.java\n \n public class Times implements VerificationInOrderMode, VerificationMode {\n     \n-    final int wantedInvocationCount;\n+    final int wantedCount;\n     \n     public Times(int wantedNumberOfInvocations) {\n         if (wantedNumberOfInvocations < 0) {\n             throw new MockitoException(\"Negative value is not allowed here\");\n         }\n-        this.wantedInvocationCount = wantedNumberOfInvocations;\n+        this.wantedCount = wantedNumberOfInvocations;\n     }\n     \n     public void verify(VerificationData data) {\n-        if (wantedInvocationCount > 0) {\n+        if (wantedCount > 0) {\n             MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n             missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n         }\n         NumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\n-        numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), this);\n+        numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), wantedCount);\n     }\n     \n     public void verifyInOrder(VerificationData data) {\n     }    \n \n     public int wantedCount() {\n-        return wantedInvocationCount;\n+        return wantedCount;\n     }\n }\n--- a/src/org/mockito/internal/verification/VerificationModeDecoder.java\n+++ b/src/org/mockito/internal/verification/VerificationModeDecoder.java\n         this.mode = mode;\n     }\n \n-    public boolean matchesActualCount(int actualCount) {\n-        return mode.wantedCount() == actualCount;\n-    }\n-    \n     public boolean tooLittleActualInvocations(int actualCount) {\n         return mode.wantedCount() > actualCount; \n     }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n \n     @Test\n     public void shouldReportTooLittleActual() throws Exception {\n-        Times mode = VerificationModeFactory.times(100);\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted, 100);\n         \n         assertEquals(1, reporterStub.actualCount);\n         assertEquals(100, reporterStub.wantedCount);\n \n     @Test\n     public void shouldReportWithLastInvocationStackTrace() throws Exception {\n-        Times mode = VerificationModeFactory.times(100);\n         Invocation first = new InvocationBuilder().toInvocation();\n         Invocation second = new InvocationBuilder().toInvocation();\n         \n         finderStub.actualToReturn.addAll(asList(first, second));\n         \n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted, 100);\n         \n         assertSame(second.getStackTrace(), reporterStub.stackTrace);\n     }\n     \n     @Test\n     public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound() throws Exception {\n-        Times mode = VerificationModeFactory.times(100);\n-        \n         assertTrue(finderStub.actualToReturn.isEmpty());\n         \n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted, 100);\n         \n         assertNull(reporterStub.stackTrace);\n     }\n     \n     @Test\n     public void shouldReportWithFirstUndesiredInvocationStackTrace() throws Exception {\n-        Times mode = VerificationModeFactory.times(2);\n-\n         Invocation first = new InvocationBuilder().toInvocation();\n         Invocation second = new InvocationBuilder().toInvocation();\n         Invocation third = new InvocationBuilder().toInvocation();\n         \n         finderStub.actualToReturn.addAll(asList(first, second, third));\n         \n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted, 2);\n         \n         assertSame(third.getStackTrace(), reporterStub.stackTrace);\n     }\n     \n     @Test\n     public void shouldReportTooManyActual() throws Exception {\n-        Times mode = VerificationModeFactory.times(1);\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted, 1);\n         \n         assertEquals(2, reporterStub.actualCount);\n         assertEquals(1, reporterStub.wantedCount);\n     \n     @Test\n     public void shouldReportNeverWantedButInvoked() throws Exception {\n-        Times mode = VerificationModeFactory.times(0);\n         Invocation invocation = new InvocationBuilder().toInvocation();\n         finderStub.actualToReturn.add(invocation);\n         \n-        verifier.verify(invocations, wanted, mode);\n+        verifier.verify(invocations, wanted, 0);\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertEquals(invocation.getStackTrace(), reporterStub.stackTrace);\n--- a/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n+++ b/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n     \n     private VerificationModeDecoder decode(Times mode) {\n         return new VerificationModeDecoder(mode);\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfMatchesActualInvocationCount() throws Exception {\n-        assertFalse(decode(VerificationModeFactory.times(1)).matchesActualCount(0));\n-        assertFalse(decode(VerificationModeFactory.times(1)).matchesActualCount(2));\n-        assertFalse(decode(VerificationModeFactory.times(10)).matchesActualCount(20));\n-        \n-        assertTrue(decode(VerificationModeFactory.times(1)).matchesActualCount(1));\n-        assertTrue(decode(VerificationModeFactory.times(10)).matchesActualCount(10));\n     }\n     \n     @Test", "timestamp": 1223982611, "metainfo": ""}