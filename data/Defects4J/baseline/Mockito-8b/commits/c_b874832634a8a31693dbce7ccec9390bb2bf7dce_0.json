{"sha": "b874832634a8a31693dbce7ccec9390bb2bf7dce", "log": "strictly shows cause with wrong invocation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40152", "commit": "\n--- a/src/org/mockito/exceptions/Exceptions.java\n+++ b/src/org/mockito/exceptions/Exceptions.java\n     }\n     \n     public static void wantedInvocationDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n+        wantedDiffersFromActual(\"Invocation differs from actual\", wanted, actual, actualInvocationStackTrace);\n+    }\n+    \n+    public static void strictlyWantedInvocationDiffersFromActual(String wanted, String actual, HasStackTrace actualInvocationStackTrace) {\n+        wantedDiffersFromActual(\"Strict order verification failed\", wanted, actual, actualInvocationStackTrace);\n+    }\n+\n+    private static void wantedDiffersFromActual(String messageTopic, String wanted, String actual, HasStackTrace actualInvocationStackTrace)\n+            throws VerificationError {\n         WantedDiffersFromActual cause = new WantedDiffersFromActual(join(\n-            \"Actual invocation:\",\n-            actual\n-        ));\n-        \n+                \"Actual invocation:\",\n+                actual\n+            ));\n+            \n         cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n         \n         throw new VerificationError(join(\n-                \"Invocation differs from actual\",\n+                messageTopic,\n                 \"Wanted invocation:\",\n                 wanted\n             ), cause);\n-    }\n-    \n-    public static void strictlyWantedInvocationDiffersFromActual(String wanted, String actual) {\n-        throw new VerificationError(join(\n-                \"Strict order verification failed\",\n-                \"Wanted: \" + wanted,\n-                \"Actual: \" + actual\n-            ));\n     }\n \n     public static void wantedButNotInvoked(String wanted) {\n--- a/src/org/mockito/internal/MockitoBehavior.java\n+++ b/src/org/mockito/internal/MockitoBehavior.java\n             actual = actualInvocation.toStringWithArgumentTypes();\n         }\n         \n-        Exceptions.strictlyWantedInvocationDiffersFromActual(wanted, actual);\n+        Exceptions.strictlyWantedInvocationDiffersFromActual(wanted, actual, actualInvocation.getStackTrace());\n     }\n \n     //TODO Cyclomatic Complexity = 10 :|\n--- a/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n package org.mockitousage.binding;\n \n import static org.junit.Assert.*;\n+import static org.mockito.util.ExtraMatchers.*;\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n         try {\n             strictly.verify(sub).say(\"Hello\");\n             fail();\n-        } catch (VerificationError error) {\n-            String expected = \n-                \"\\n\" +\n-                \"Strict order verification failed\" +\n-                \"\\n\" +\n-                \"Wanted: Sub.say(class java.lang.String)\" +\n-                \"\\n\" +\n-                \"Actual: Sub.say(class java.lang.Object)\";\n-            \n-            assertEquals(expected, error.getMessage());\n+        } catch (VerificationError e) {\n+            assertThat(e, messageContains(\"Sub.say(class java.lang.String)\"));\n+            assertThat(e, causeMessageContains(\"Sub.say(class java.lang.Object)\"));\n         }\n     }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java\n package org.mockitousage.verification;\n \n import static org.junit.Assert.*;\n+import static org.mockito.util.ExtraMatchers.*;\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n import org.mockito.*;\n+import org.mockito.exceptions.cause.WantedDiffersFromActual;\n import org.mockito.exceptions.verification.*;\n import org.mockito.internal.StateResetter;\n import org.mockito.util.RequiresValidState;\n         try {\n             strictly.verify(one).simpleMethod(999);\n             fail();\n-        } catch (VerificationError expected) {\n-            String actualMessage = expected.getMessage();\n-            String expectedMessage = \n+        } catch (VerificationError e) {\n+            String expected = \n                     \"\\n\" +\n                     \"Strict order verification failed\" +\n                     \"\\n\" +\n-                    \"Wanted: IMethods.simpleMethod(999)\" + \n-            \t\t\"\\n\" +\n-            \t\t\"Actual: IMethods.simpleMethod(1)\";\n-            assertEquals(expectedMessage, actualMessage);         \n+                    \"Wanted invocation:\" +\n+                    \"\\n\" +\n+                    \"IMethods.simpleMethod(999)\"; \n+            \n+            assertEquals(expected, e.getMessage());\n+            \n+            assertEquals(e.getCause().getClass(), WantedDiffersFromActual.class);\n+            \n+            String expectedCause = \n+                \"\\n\" +\n+                \"Actual invocation:\" +\n+                \"\\n\" +\n+                \"IMethods.simpleMethod(1)\";\n+            \n+            assertEquals(expectedCause, e.getCause().getMessage());\n         }\n     }  \n     \n             strictly.verify(two).simpleMethod();\n             fail();\n         } catch (VerificationError expected) {\n-            String actualMessage = expected.getMessage();\n-            String expectedMessage = \n-                    \"\\n\" +    \n-                    \"Strict order verification failed\" +\n-                    \"\\n\" +\n-                    \"Wanted: IMethods#3.simpleMethod()\" +\n-                    \"\\n\" +\n-                    \"Actual: IMethods#1.simpleMethod()\"; \n-            assertEquals(expectedMessage, actualMessage);         \n+            assertThat(expected, messageContains(\"IMethods#3.simpleMethod()\"));\n+            assertThat(expected, causeMessageContains(\"IMethods#1.simpleMethod()\"));\n         }\n     }\n }", "timestamp": 1197230111, "metainfo": ""}