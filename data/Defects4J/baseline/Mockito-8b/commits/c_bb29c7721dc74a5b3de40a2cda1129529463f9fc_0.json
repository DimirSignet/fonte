{"sha": "bb29c7721dc74a5b3de40a2cda1129529463f9fc", "log": "Started using Invocation instead of InvocationImpl where possible", "commit": "\n--- a/src/org/mockito/internal/InvocationNotifierHandler.java\n+++ b/src/org/mockito/internal/InvocationNotifierHandler.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n import org.mockito.internal.stubbing.InvocationContainer;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n         this.invocationListeners = settings.getInvocationListeners();\n     }\n \n-    public Object handle(InvocationImpl invocation) throws Throwable {\n+    public Object handle(Invocation invocation) throws Throwable {\n         try {\n             Object returnedValue = mockHandler.handle(invocation);\n             notifyMethodCall(invocation, returnedValue);\n     }\n \n \n-\tprivate void notifyMethodCall(InvocationImpl invocation, Object returnValue) {\n+\tprivate void notifyMethodCall(Invocation invocation, Object returnValue) {\n \t\tfor (InvocationListener listener : invocationListeners) {\n             try {\n                 listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, returnValue));\n         }\n \t}\n \n-    private void notifyMethodCallException(InvocationImpl invocation, Throwable exception) {\n+    private void notifyMethodCallException(Invocation invocation, Throwable exception) {\n \t\tfor (InvocationListener listener : invocationListeners) {\n             try {\n                 listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, exception));\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n package org.mockito.internal;\n \n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.stubbing.*;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockito.invocation.Invocation;\n import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n         this(oldMockHandler.getMockSettings());\n     }\n \n-    public Object handle(InvocationImpl invocation) throws Throwable {\n+    public Object handle(Invocation invocation) throws Throwable {\n \t\tif (invocationContainerImpl.hasAnswersForStubbing()) {\n             // stubbing voids with stubVoid() or doAnswer() style\n             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n \n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.invocation.Invocation;\n import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.*;\n         MockitoMethod mockitoMethod = createMockitoMethod(method);\n         \n         FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\n-        InvocationImpl invocation = new InvocationImpl(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\n+        Invocation invocation = new InvocationImpl(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\n         return handler.handle(invocation);\n     }\n    \n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n package org.mockito.internal.debugging;\n \n import org.mockito.MockitoDebugger;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.UnusedStubsFinder;\n import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n import org.mockito.invocation.Invocation;\n         out += line(\"********************************\");\n         out += line(\"*** Mockito interactions log ***\");\n         out += line(\"********************************\");\n-        for(InvocationImpl i:invocations) {\n+        for(Invocation i:invocations) {\n             out += line(i.toString());\n             out += line(\" invoked: \" + i.getLocation());\n             if (i.stubInfo() != null) {\n         out += line(\"***       Unused stubs       ***\");\n         out += line(\"********************************\");\n         \n-        for(InvocationImpl i:invocations) {\n+        for(Invocation i:invocations) {\n             out += line(i.toString());\n             out += line(\" stubbed: \" + i.getLocation());\n         }\n--- a/src/org/mockito/internal/debugging/WarningsFinder.java\n+++ b/src/org/mockito/internal/debugging/WarningsFinder.java\n  */\n package org.mockito.internal.debugging;\n \n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.invocation.Invocation;\n \n             }\n         }\n \n-        for (InvocationImpl i : unusedStubs) {\n+        for (Invocation i : unusedStubs) {\n             findingsListener.foundUnusedStub(i);\n         }\n \n--- a/src/org/mockito/internal/invocation/InvocationMarker.java\n+++ b/src/org/mockito/internal/invocation/InvocationMarker.java\n     public void markVerifiedInOrder(List<Invocation> chunk, CapturesArgumensFromInvocation wanted, InOrderContext context) {\n         markVerified(chunk, wanted);\n         \n-        for (InvocationImpl i : chunk) {\n+        for (Invocation i : chunk) {\n             context.markVerified(i);\n         }\n     }\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n     \n     public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n         Invocation firstSimilar = null;\n-        for (InvocationImpl invocation : invocations) {\n+        for (Invocation invocation : invocations) {\n             if (!wanted.hasSimilarMethod(invocation)) {\n                 continue;\n             }\n         }\n     }\n     \n-    public InvocationImpl findPreviousVerifiedInOrder(List<Invocation> invocations, InOrderContext context) {\n+    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations, InOrderContext context) {\n         LinkedList<Invocation> verifiedOnly = ListUtil.filter(invocations, new RemoveUnverifiedInOrder(context));\n         \n         if (verifiedOnly.isEmpty()) {\n--- a/src/org/mockito/internal/listeners/NotifiedMethodInvocationReport.java\n+++ b/src/org/mockito/internal/listeners/NotifiedMethodInvocationReport.java\n package org.mockito.internal.listeners;\n \n import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.internal.invocation.InvocationImpl;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.MethodInvocationReport;\n \n /**\n  * Report on a method call\n  */\n public class NotifiedMethodInvocationReport implements MethodInvocationReport {\n-        private final InvocationImpl invocation;\n+        private final Invocation invocation;\n         private Object returnedValue;\n         private Throwable throwable;\n \n          * @param invocation Information on the method call\n          * @param returnedValue The value returned by the method invocation\n          */\n-        public NotifiedMethodInvocationReport(InvocationImpl invocation, Object returnedValue) {\n+        public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue) {\n             this.invocation = invocation;\n             this.returnedValue = returnedValue;\n         }\n          * @param invocation Information on the method call\n          * @param throwable Tha throwable raised by the method invocation\n          */\n-        public NotifiedMethodInvocationReport(InvocationImpl invocation, Throwable throwable) {\n+        public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable) {\n             this.invocation = invocation;\n             this.throwable = throwable;\n         }\n--- a/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n+++ b/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n  */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.StubInfoImpl;\n import org.mockito.internal.progress.MockingProgress;\n         }\n     }\n \n-    Object answerTo(InvocationImpl invocation) throws Throwable {\n+    Object answerTo(Invocation invocation) throws Throwable {\n         return findAnswerFor(invocation).answer(invocation);\n     }\n \n-    public StubbedInvocationMatcher findAnswerFor(InvocationImpl invocation) {\n+    public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {\n         synchronized (stubbed) {\n             for (StubbedInvocationMatcher s : stubbed) {\n                 if (s.matches(invocation)) {\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n import org.mockito.Mockito;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.LocationImpl;\n-import org.mockito.internal.invocation.InvocationImpl;\n+import org.mockito.invocation.Invocation;\n import org.mockito.invocation.Location;\n import org.mockito.plugins.MockMaker;\n import org.mockito.internal.configuration.ClassPathLoader;\n             this.invocation = invocation;\n         }\n \n-        public Object handle(InvocationImpl nullDereference) throws Throwable {\n+        public Object handle(Invocation nullDereference) throws Throwable {\n             if (new ObjectMethodsGuru().isToString(nullDereference.getMethod())) {\n                 return \"SmartNull returned by this unstubbed method call on a mock:\\n\" +\n                         invocation.toString();\n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.reporting.SmartPrinter;\n             return;\n         }\n         \n-        InvocationImpl previousInOrder = finder.findPreviousVerifiedInOrder(invocations, context);\n+        Invocation previousInOrder = finder.findPreviousVerifiedInOrder(invocations, context);\n         if (previousInOrder == null) {\n             /**\n              * It is of course possible to have an issue where the arguments are different\n--- a/src/org/mockito/plugins/MockitoInvocationHandler.java\n+++ b/src/org/mockito/plugins/MockitoInvocationHandler.java\n package org.mockito.plugins;\n \n import org.mockito.internal.Incubating;\n-import org.mockito.internal.invocation.InvocationImpl;\n+import org.mockito.invocation.Invocation;\n \n import java.io.Serializable;\n \n      * @throws Throwable Throwable\n      */\n     @Incubating\n-    Object handle(InvocationImpl invocation) throws Throwable;\n+    Object handle(Invocation invocation) throws Throwable;\n \n }\n--- a/test/org/mockito/internal/InvocationNotifierHandlerTest.java\n+++ b/test/org/mockito/internal/InvocationNotifierHandlerTest.java\n import org.mockito.Spy;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n import org.mockito.runners.MockitoJUnitRunner;\n     @Mock private InvocationListener listener2;\n     @Spy private CustomListener customListener;\n \n-    @Mock private InvocationImpl invocation;\n+    @Mock private Invocation invocation;\n     @Mock private MockHandler mockHandler;\n \n     private InvocationNotifierHandler notifier;\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n public class MockHandlerTest extends TestBase {\n \n \tprivate StubbedInvocationMatcher stubbedInvocationMatcher = mock(StubbedInvocationMatcher.class);\n-\tprivate InvocationImpl invocation = mock(InvocationImpl.class);\n+\tprivate Invocation invocation = mock(InvocationImpl.class);\n \n \n \t@Test\n \tpublic void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n \t\t// given\n-\t\tInvocationImpl invocation = new InvocationBuilder().toInvocation();\n+\t\tInvocation invocation = new InvocationBuilder().toInvocation();\n \t\t@SuppressWarnings(\"rawtypes\")\n \t\tMockHandler<?> handler = new MockHandler();\n \t\thandler.mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n--- a/test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java\n+++ b/test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.StubInfoImpl;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n+import org.mockito.invocation.Invocation;\n \n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n     private VerboseMockInvocationLogger listener;\n \n     private ByteArrayOutputStream output;\n-    private InvocationImpl invocation = new InvocationBuilder().toInvocation();\n+    private Invocation invocation = new InvocationBuilder().toInvocation();\n     private PrintableInvocation stubbedInvocation = new InvocationBuilder().toInvocation();\n \n     @Before\n--- a/test/org/mockito/internal/invocation/InvocationBuilder.java\n+++ b/test/org/mockito/internal/invocation/InvocationBuilder.java\n package org.mockito.internal.invocation;\n \n import org.mockito.Mockito;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n \n import java.lang.reflect.Method;\n      *\n      * @return invocation\n      */\n-    public InvocationImpl toInvocation() {\n+    public Invocation toInvocation() {\n         if (method == null) {\n             List<Class> argTypes = new LinkedList<Class>();\n             for (Object arg : args) {\n             }\n         }\n         \n-        InvocationImpl i = new InvocationImpl(mock, new SerializableMethod(method), args, sequenceNumber, null);\n+        Invocation i = new InvocationImpl(mock, new SerializableMethod(method), args, sequenceNumber, null);\n         if (verified) {\n             i.markVerified();\n         }\n--- a/test/org/mockito/internal/stubbing/InvocationContainerImplTest.java\n+++ b/test/org/mockito/internal/stubbing/InvocationContainerImplTest.java\n package org.mockito.internal.stubbing;\n \n import org.junit.Test;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n+import org.mockito.invocation.Invocation;\n \n import java.util.LinkedList;\n \n public class InvocationContainerImplTest {\n \n     InvocationContainerImpl container = new InvocationContainerImpl(new ThreadSafeMockingProgress());\n-    InvocationImpl invocation = new InvocationBuilder().toInvocation();\n+    Invocation invocation = new InvocationBuilder().toInvocation();\n     LinkedList<Throwable> exceptions = new LinkedList<Throwable>();\n \n     @Test\n--- a/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n+++ b/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.MockingProgressImpl;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class MockitoStubberTest extends TestBase{\n \n     private InvocationContainerImpl invocationContainerImpl;\n     private MockingProgress state;\n-    private InvocationImpl simpleMethod;\n+    private Invocation simpleMethod;\n \n     @Before\n     public void setup() {\n         invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n         invocationContainerImpl.addAnswer(new Returns(\"simpleMethod\"));\n         \n-        InvocationImpl differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n+        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n         invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n         invocationContainerImpl.addAnswer(new ThrowsException(new MyException()));\n         \n--- a/test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.InOrderContext;\n     \n     Invocation similarToReturn;\n     Invocation firstUnverifiedToReturn;\n-    InvocationImpl previousInOrderToReturn;\n+    Invocation previousInOrderToReturn;\n     \n     final List<Invocation> actualToReturn = new LinkedList<Invocation>();\n     final List<Invocation> validMatchingChunkToReturn = new LinkedList<Invocation>();\n     }\n     \n     @Override\n-    public InvocationImpl findPreviousVerifiedInOrder(List<Invocation> invocations, InOrderContext context) {\n+    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations, InOrderContext context) {\n         return previousInOrderToReturn;\n     }\n }\n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n     \n     @Test\n     public void shouldReportWantedDiffersFromActual() throws Exception {\n-        InvocationImpl previous = new InvocationBuilder().toInvocation();\n+        Invocation previous = new InvocationBuilder().toInvocation();\n         finderStub.previousInOrderToReturn = previous;\n         \n         checker.check(invocations, wanted, new VerificationModeBuilder().inOrder(), context);", "timestamp": 1333233066, "metainfo": ""}