{"sha": "e76f3344e21d2a7c0ec341af5d0b8b39057a97a7", "log": "Added some utility code  A bit or reinventing the wheel but we don't want extra 3rd party deps.", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/util/io/IOUtil.java\n+package org.mockito.internal.util.io;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+import java.io.*;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * IO utils. A bit of reinventing the wheel but we don't want extra dependencies at this stage and we want to be java.\n+ */\n+public class IOUtil {\n+\n+    /**\n+     * Writes text to file\n+     */\n+    public static void writeText(String text, File output) {\n+        PrintWriter pw = null;\n+        try {\n+            pw = new PrintWriter(new FileWriter(output));\n+            pw.write(text);\n+        } catch (Exception e) {\n+            throw new MockitoException(\"Problems writing text to file: \" + output);\n+        } finally {\n+            close(pw);\n+        }\n+    }\n+\n+    public static Collection<String> readLines(Reader reader) {\n+        List<String> out = new LinkedList<String>();\n+        BufferedReader r = new BufferedReader(reader);\n+        String line;\n+        try {\n+            while((line = r.readLine()) != null) {\n+                out.add(line);\n+            }\n+        } catch (IOException e) {\n+            throw new MockitoException(\"Problems reading from: \" + reader);\n+        }\n+        return out;\n+    }\n+\n+    /**\n+     * Closes the target. Does nothing when target is null. Is silent.\n+     *\n+     * @param closeable the target, may be null\n+     */\n+    public static void closeQuietly(Closeable closeable) {\n+        try {\n+            close(closeable);\n+        } catch (MockitoException ignored) {\n+            //ignore, for backwards compatibility\n+        }\n+    }\n+\n+    /**\n+     * Closes the target. Does nothing when target is null. Is not silent and exceptions are rethrown.\n+     *\n+     * @param closeable the target, may be null\n+     */\n+    public static void close(Closeable closeable) {\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (IOException e) {\n+                throw new MockitoException(\"Problems closing stream: \" + closeable);\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/io/IOUtilTest.java\n+package org.mockito.internal.util.io;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileReader;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+\n+public class IOUtilTest {\n+\n+    @Rule public TemporaryFolder tmp = new TemporaryFolder();\n+\n+    @Test\n+    public void closes_streams() throws Exception {\n+        IOUtil.closeQuietly(null);\n+        IOUtil.closeQuietly(new ByteArrayOutputStream());\n+\n+        IOUtil.close(null);\n+        IOUtil.close(new ByteArrayOutputStream());\n+    }\n+\n+    @Test\n+    public void writes_reads_files() throws Exception {\n+        File file = tmp.newFile();\n+        IOUtil.writeText(\"foo\\n\\nbar\", file);\n+        assertEquals(asList(\"foo\", \"\", \"bar\"), IOUtil.readLines(new FileReader(file)));\n+    }\n+}", "timestamp": 1418426972, "metainfo": ""}