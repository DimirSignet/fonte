{"sha": "c7872e0be25fa61cddb3aaa2709fe1833d90ec9b", "log": "added tests for Stubber  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40160", "commit": "\n--- a/test/org/mockito/internal/StubberTest.java\n+++ b/test/org/mockito/internal/StubberTest.java\n package org.mockito.internal;\n \n import static org.junit.Assert.*;\n+\n+import java.nio.charset.CharacterCodingException;\n \n import org.junit.*;\n import org.mockito.RequiresValidState;\n \n     private Stubber stubber;\n     private MockitoStateImpl state;\n+    private Invocation simpleMethod;\n     \n     @Before\n     public void setup() {\n         state = new MockitoStateImpl();\n-        state.stubbingStarted();\n         \n         stubber = new Stubber(state);\n         stubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n+        \n+        simpleMethod = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n     }\n \n     @Test\n     public void shouldFinishStubbingBeforeValidatingThrowable() throws Exception {\n+        state.stubbingStarted();\n         try {\n             stubber.addThrowable(new Exception());\n             fail();\n     \n     @Test\n     public void shouldFinishStubbingOnAddingReturnValue() throws Exception {\n+        state.stubbingStarted();\n         stubber.addReturnValue(\"test\");\n         state.validateState();\n     }\n     \n     @Test\n     public void shouldGetResultsForMethods() throws Throwable {\n-        Invocation simpleMethod = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n         stubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n         stubber.addReturnValue(\"simpleMethod\");\n         \n         Invocation differentMethod = new InvocationBuilder().method(\"differentMethod\").toInvocation();\n         stubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n-        stubber.addThrowable(new IllegalStateException());\n+        stubber.addThrowable(new MyException());\n         \n         assertEquals(\"simpleMethod\", stubber.resultFor(simpleMethod));\n         \n         try {\n             stubber.resultFor(differentMethod);\n             fail();\n-        } catch (IllegalStateException e) {}\n+        } catch (MyException e) {}\n     }\n     \n     @Test\n     public void shouldGetEmptyResultIfMethodsDontMatch() throws Throwable {\n-        Invocation simpleMethod = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n         stubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n         stubber.addReturnValue(\"simpleMethod\");\n         \n         \n         assertEquals(null, stubber.resultFor(differentMethod));\n     }\n+    \n+    @Test\n+    public void shouldAddThrowableForVoidMethod() throws Throwable {\n+        stubber.addThrowableForVoidMethod(new MyException());\n+        stubber.addVoidMethodForThrowable(new InvocationMatcher(simpleMethod));\n+        \n+        try {\n+            stubber.resultFor(simpleMethod);\n+            fail();\n+        } catch (MyException e) {};\n+    }\n+    \n+    @Test\n+    public void shouldValidateThrowableForVoidMethod() throws Throwable {\n+        stubber.addThrowableForVoidMethod(new Exception());\n+        \n+        try {\n+            stubber.addVoidMethodForThrowable(new InvocationMatcher(simpleMethod));\n+            fail();\n+        } catch (MockitoException e) {};\n+    }\n+    \n+    @Test\n+    public void shouldValidateNullThrowable() throws Throwable {\n+        try {\n+            stubber.addThrowable(null);\n+            fail();\n+        } catch (MockitoException e) {};\n+    }\n+    \n+    @Test\n+    public void shouldLetSettingProperCheckedException() throws Throwable {\n+        stubber.setInvocationForPotentialStubbing(new InvocationBuilder().method(\"canThrowException\").toInvocationMatcher());\n+        stubber.addThrowable(new CharacterCodingException());\n+    }\n+    \n+    @SuppressWarnings(\"serial\") class MyException extends RuntimeException {};\n }\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n package org.mockitousage;\n \n import java.io.IOException;\n+import java.nio.charset.CharacterCodingException;\n import java.util.List;\n+\n+import javax.swing.text.ChangedCharSetException;\n \n public interface IMethods {\n \n     String oneArray(short[] array);\n \n     String oneArray(Object[] array);\n+    \n+    String canThrowException() throws ChangedCharSetException, CharacterCodingException; \n \n     String oneArray(String[] array);\n ", "timestamp": 1197332083, "metainfo": ""}