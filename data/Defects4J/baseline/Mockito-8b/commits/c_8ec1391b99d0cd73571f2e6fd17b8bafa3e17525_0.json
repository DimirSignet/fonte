{"sha": "8ec1391b99d0cd73571f2e6fd17b8bafa3e17525", "log": "Added more detailed messages on delegatesTo error", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.invocation.Location;\n import org.mockito.listeners.InvocationListener;\n-\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-\n import static org.mockito.internal.reporting.Pluralizer.pluralize;\n import static org.mockito.internal.util.StringJoiner.join;\n \n                 \"\"\n         ));\n     }\n+    \n+    public void delegatedMethodHasWrongReturnType(Method mockMethod, Method delegateMethod, Object mock, Object delegate) {\n+    \tthrow new MockitoException(join(\n+    \t        \"Methods called on delegated instance must have compatible return types with the mock.\",\n+    \t        \"When calling: \" + mockMethod + \" on mock: \" + new MockUtil().getMockName(mock),\n+    \t        \"return type should be: \" + mockMethod.getReturnType().getSimpleName() + \", but was: \" + delegateMethod.getReturnType().getSimpleName(),\n+    \t        \"Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods\",\n+    \t        \"(delegate instance had type: \" + delegate.getClass().getSimpleName() + \")\"\n+    \t));\n+    }\n+\n+\tpublic void delegatedMethodDoesNotExistOnDelegate(Method mockMethod, Object mock, Object delegate) {\n+\t\tthrow new MockitoException(join(\n+    \t        \"Methods called on mock must exist in delegated instance.\",\n+    \t        \"When calling: \" + mockMethod + \" on mock: \" + new MockUtil().getMockName(mock),\n+    \t        \"no such method was found.\",\n+    \t        \"Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods\",\n+    \t        \"(delegate instance had type: \" + delegate.getClass().getSimpleName() + \")\"\n+    \t));\n+\t}\n }\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n+import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.stubbing.answers.MethodInfo;\n+import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         Method mockMethod = invocation.getMethod();\n-\n+        \n+        Object result = null;\n+        \n         try {\n             Method delegateMethod = getDelegateMethod(mockMethod);\n             \n             if (!compatibleReturnTypes(mockMethod.getReturnType(), delegateMethod.getReturnType())) {\n-                throw new MockitoException(\"Incompatible return type on delegate method: \" + delegateMethod);\n+                new Reporter().delegatedMethodHasWrongReturnType(mockMethod, delegateMethod, invocation.getMock(), delegatedObject);\n             }\n             \n-            return delegateMethod.invoke(delegatedObject, invocation.getArguments());\n+            result = delegateMethod.invoke(delegatedObject, invocation.getArguments());\n         } catch (NoSuchMethodException e) {\n-            throw new MockitoException(\"Method not found on delegate: \" + mockMethod, e);\n+            new Reporter().delegatedMethodDoesNotExistOnDelegate(mockMethod, invocation.getMock(), delegatedObject);\n         } catch (InvocationTargetException e) {\n             // propagate the original exception from the delegate\n             throw e.getCause();\n         }\n+        \n+        return result;\n     }\n \n     private Method getDelegateMethod(Method mockMethod) throws NoSuchMethodException {\n--- a/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n             mock.isEmpty();\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.toString()).contains(\"Method not found on delegate\");\n+            assertThat(e.toString()).contains(\"Methods called on mock must exist\");\n         }\n     }\n     \n             mock.size();\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.toString()).contains(\"Incompatible return type on delegate method\");\n+            assertThat(e.toString()).contains(\"Methods called on delegated instance must have compatible return type\");\n         }\n     }\n     \n             mock.subList(0, 0);\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.toString()).contains(\"Incompatible return type on delegate method\");\n+            assertThat(e.toString()).contains(\"Methods called on delegated instance must have compatible return type\");\n         }\n-\t}\n+    }\n \n     @Test\n     public void exception_should_be_propagated_from_delegate() throws Exception {", "timestamp": 1416072731, "metainfo": ""}