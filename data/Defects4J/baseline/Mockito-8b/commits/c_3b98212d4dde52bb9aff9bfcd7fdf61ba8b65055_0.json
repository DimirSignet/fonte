{"sha": "3b98212d4dde52bb9aff9bfcd7fdf61ba8b65055", "log": "names refactoring  --HG-- rename : test/org/mockitousage/verification/AtMostXVerificationTest.java => test/org/mockitousage/verification/AtLeastXVerificationTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40956", "commit": "\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockitousage.stubbing.BasicStubbingTest;\n import org.mockitousage.stubbing.ReturningDefaultValuesTest;\n import org.mockitousage.stubbing.StubbingWithThrowablesTest;\n-import org.mockitousage.verification.AtLeastXVerificationTest;\n+import org.mockitousage.verification.AtMostXVerificationTest;\n import org.mockitousage.verification.BasicVerificationInOrderTest;\n import org.mockitousage.verification.BasicVerificationTest;\n import org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest;\n                     BasicStubbingTest.class,\n                     ReturningDefaultValuesTest.class,\n                     StubbingWithThrowablesTest.class,\n-                    AtLeastXVerificationTest.class,\n+                    AtMostXVerificationTest.class,\n                     BasicVerificationTest.class,\n                     ExactNumberOfTimesVerificationTest.class,\n                     VerificationInOrderTest.class,\n--- a/test/org/mockitousage/verification/AtLeastXVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtLeastXVerificationTest.java\n \n import java.util.List;\n \n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.Mock;\n-import org.mockito.exceptions.base.MockitoAssertionError;\n-import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.verification.TooLittleActualInvocations;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class AtLeastXVerificationTest extends TestBase {\n \n-    @Mock private List mock;\n+    private List mock;\n+    private List mockTwo;\n     \n+    @Before public void setup() {\n+        mock = Mockito.mock(List.class);\n+        mockTwo = Mockito.mock(List.class);\n+    }\n+\n     @Test\n-    public void shouldVerifyAtMostXTimes() throws Exception {\n+    public void shouldVerifyAtLeastOnce() throws Exception {\n         mock.clear();\n         mock.clear();\n         \n-        verify(mock, atMost(2)).clear();\n-        verify(mock, atMost(3)).clear();\n-        \n+        mockTwo.add(\"add\");\n+\n+        verify(mock, atLeastOnce()).clear();\n+        verify(mockTwo, atLeastOnce()).add(\"add\");\n         try {\n-            verify(mock, atMost(1)).clear();\n+            verify(mockTwo, atLeastOnce()).add(\"foo\");\n             fail();\n-        } catch (MockitoAssertionError e) {}\n+        } catch (WantedButNotInvoked e) {}\n+    }\n+    \n+    @Test(expected=WantedButNotInvoked.class)\n+    public void shouldFailIfMethodWasNotCalledAtAll() throws Exception {\n+        verify(mock, atLeastOnce()).add(\"foo\");\n     }\n     \n     @Test\n-    public void shouldWorkWithArgumentMatchers() throws Exception {\n-        mock.add(\"one\");\n-        verify(mock, atMost(5)).add(anyString());\n+    public void shouldVerifyAtLeastXTimes() throws Exception {\n+        mock.add(\"foo\");\n+        mock.add(\"foo\");\n+        mock.add(\"foo\");\n         \n-        try {\n-            verify(mock, atMost(0)).add(anyString());\n-            fail();\n-        } catch (MockitoAssertionError e) {}\n+        verify(mock, atLeast(1)).add(\"foo\");\n+        verify(mock, atLeast(2)).add(\"foo\");\n+        verify(mock, atLeast(3)).add(\"foo\");\n+    }\n+    \n+    @Test(expected=TooLittleActualInvocations.class)\n+    public void shouldFailOnVerifyAtLeast10WhenMethodWasInvokedOnce() throws Exception {\n+        mock.add(\"foo\");\n+\n+        verify(mock, atLeast(2)).add(\"foo\");\n     }\n     \n     @Test\n-    public void shouldNotAllowNegativeNumber() throws Exception {\n-        try {\n-            verify(mock, atMost(-1)).clear();\n-            fail();\n-        } catch (MockitoException e) {\n-            //TODO assert message\n-        }\n+    public void shouldVerifyInOrder() throws Exception {\n+        mock.add(\"one\");\n+        mock.add(\"two\");\n+        mock.add(\"three\");\n+        \n+        mock.clear();\n+  \n+        InOrder inOrder = inOrder(mock);\n+        \n+        inOrder.verify(mock, atLeast(2)).add(anyString());\n+        inOrder.verify(mock).clear();\n+        verifyNoMoreInteractions(mock);\n     }\n     \n     @Test\n-    public void shouldPrintDecentMessage() throws Exception {\n+    public void shouldFailVerificationInOrder() throws Exception {\n         mock.clear();\n-        mock.clear();\n-        \n-        try {\n-            verify(mock, atMost(1)).clear();\n-            fail();\n-        } catch (MockitoAssertionError e) {\n-            //TODO assert message\n-        }\n-    }\n-    \n-    @Test\n-    public void shouldNotAllowInOrderMode() throws Exception {\n-        mock.clear();\n+\n+        mock.add(\"one\");\n+        mock.add(\"two\");\n+        mock.add(\"three\");\n+  \n         InOrder inOrder = inOrder(mock);\n         \n+        inOrder.verify(mock, atLeastOnce()).clear();\n+\n         try {\n-            inOrder.verify(mock, atMost(1)).clear();\n+            inOrder.verify(mock, atLeast(4)).add(anyString());\n             fail();\n-        } catch (MockitoException e) {\n-            //TODO assert message\n-        }\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n }\n--- a/test/org/mockitousage/verification/AtMostXVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtMostXVerificationTest.java\n \n import java.util.List;\n \n-import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.Mockito;\n-import org.mockito.exceptions.verification.TooLittleActualInvocations;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n-import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class AtMostXVerificationTest extends TestBase {\n \n-    private List mock;\n-    private List mockTwo;\n+    @Mock private List mock;\n     \n-    @Before public void setup() {\n-        mock = Mockito.mock(List.class);\n-        mockTwo = Mockito.mock(List.class);\n-    }\n-\n     @Test\n-    public void shouldVerifyAtLeastOnce() throws Exception {\n+    public void shouldVerifyAtMostXTimes() throws Exception {\n         mock.clear();\n         mock.clear();\n         \n-        mockTwo.add(\"add\");\n-\n-        verify(mock, atLeastOnce()).clear();\n-        verify(mockTwo, atLeastOnce()).add(\"add\");\n+        verify(mock, atMost(2)).clear();\n+        verify(mock, atMost(3)).clear();\n+        \n         try {\n-            verify(mockTwo, atLeastOnce()).add(\"foo\");\n+            verify(mock, atMost(1)).clear();\n             fail();\n-        } catch (WantedButNotInvoked e) {}\n-    }\n-    \n-    @Test(expected=WantedButNotInvoked.class)\n-    public void shouldFailIfMethodWasNotCalledAtAll() throws Exception {\n-        verify(mock, atLeastOnce()).add(\"foo\");\n+        } catch (MockitoAssertionError e) {}\n     }\n     \n     @Test\n-    public void shouldVerifyAtLeastXTimes() throws Exception {\n-        mock.add(\"foo\");\n-        mock.add(\"foo\");\n-        mock.add(\"foo\");\n+    public void shouldWorkWithArgumentMatchers() throws Exception {\n+        mock.add(\"one\");\n+        verify(mock, atMost(5)).add(anyString());\n         \n-        verify(mock, atLeast(1)).add(\"foo\");\n-        verify(mock, atLeast(2)).add(\"foo\");\n-        verify(mock, atLeast(3)).add(\"foo\");\n-    }\n-    \n-    @Test(expected=TooLittleActualInvocations.class)\n-    public void shouldFailOnVerifyAtLeast10WhenMethodWasInvokedOnce() throws Exception {\n-        mock.add(\"foo\");\n-\n-        verify(mock, atLeast(2)).add(\"foo\");\n+        try {\n+            verify(mock, atMost(0)).add(anyString());\n+            fail();\n+        } catch (MockitoAssertionError e) {}\n     }\n     \n     @Test\n-    public void shouldVerifyInOrder() throws Exception {\n-        mock.add(\"one\");\n-        mock.add(\"two\");\n-        mock.add(\"three\");\n-        \n-        mock.clear();\n-  \n-        InOrder inOrder = inOrder(mock);\n-        \n-        inOrder.verify(mock, atLeast(2)).add(anyString());\n-        inOrder.verify(mock).clear();\n-        verifyNoMoreInteractions(mock);\n+    public void shouldNotAllowNegativeNumber() throws Exception {\n+        try {\n+            verify(mock, atMost(-1)).clear();\n+            fail();\n+        } catch (MockitoException e) {\n+            //TODO assert message\n+        }\n     }\n     \n     @Test\n-    public void shouldFailVerificationInOrder() throws Exception {\n+    public void shouldPrintDecentMessage() throws Exception {\n         mock.clear();\n-\n-        mock.add(\"one\");\n-        mock.add(\"two\");\n-        mock.add(\"three\");\n-  \n+        mock.clear();\n+        \n+        try {\n+            verify(mock, atMost(1)).clear();\n+            fail();\n+        } catch (MockitoAssertionError e) {\n+            //TODO assert message\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotAllowInOrderMode() throws Exception {\n+        mock.clear();\n         InOrder inOrder = inOrder(mock);\n         \n-        inOrder.verify(mock, atLeastOnce()).clear();\n-\n         try {\n-            inOrder.verify(mock, atLeast(4)).add(anyString());\n+            inOrder.verify(mock, atMost(1)).clear();\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (MockitoException e) {\n+            //TODO assert message\n+        }\n     }\n }", "timestamp": 1223844716, "metainfo": ""}