{"sha": "850852a3a3aa71c4da3d7404e83c74a98191cb6c", "log": "Javadoc works :  - Release note.  - Added many @since where appropriate.  - Added underscores in the meaningful links.", "commit": "\n--- a/src/org/mockito/AdditionalAnswers.java\n+++ b/src/org/mockito/AdditionalAnswers.java\n \n /**\n  *\n+ *\n+ *\n+ * @since 1.9.5\n  */\n @SuppressWarnings(\"unchecked\")\n public class AdditionalAnswers {\n      *\n      * @param <T> Return type of the invocation.\n      * @return Answer that will return the first argument of the invocation.\n+     *\n+     * @since 1.9.5\n      */\n     public static <T> Answer<T> returnsFirstArg() {\n         return (Answer<T>) RETURNS_FIRST_ARGUMENT;\n      *\n      * @param <T> Return type of the invocation.\n      * @return Answer that will return the second argument of the invocation.\n+     *\n+     * @since 1.9.5\n      */\n     public static <T> Answer<T> returnsSecondArg() {\n         return (Answer<T>) RETURNS_SECOND_ARGUMENT;\n      *\n      * @param <T> Return type of the invocation.\n      * @return Answer that will return the last argument of the invocation.\n+     *\n+     * @since 1.9.5\n      */\n     public static <T> Answer<T> returnsLastArg() {\n         return (Answer<T>) RETURNS_LAST_ARGUMENT;\n      *\n      * @param <T> Return type of the invocation.\n      * @return Answer that will return the second argument of the invocation.\n+     *\n+     * @since 1.9.5\n      */\n     public static <T> Answer<T> returnsArgAtPosition(int position) {\n         return (Answer<T>) new ReturnsIdentity(position);\n     }\n \n-\n }\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n  * See the full documentation on Mockito in javadoc for {@link Mockito} class.\n  *\n  * @see Captor\n+ * @since 1.8.0\n  */\n public class ArgumentCaptor<T> {\n     \n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n  *   assertEquals(failure, result);\n  * </code></pre>\n  * <p>\n- * One of the purposes of BDDMockito is also to show how to tailor the mocking syntax to a different programming style. \n+ * One of the purposes of BDDMockito is also to show how to tailor the mocking syntax to a different programming style.\n+ *\n+ * @since 1.8.0\n  */\n @SuppressWarnings(\"unchecked\")\n public class BDDMockito extends Mockito {\n     \n     /**\n      * See original {@link OngoingStubbing}\n+     * @since 1.8.0\n      */\n     public static interface BDDMyOngoingStubbing<T> {\n         \n         /**\n          * See original {@link OngoingStubbing#thenAnswer(Answer)}\n+         * @since 1.8.0\n          */\n         BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer);\n \n         /**\n          * See original {@link OngoingStubbing#then(Answer)}\n+         * @since 1.9.0\n          */\n         BDDMyOngoingStubbing<T> will(Answer<?> answer);\n \n         /**\n          * See original {@link OngoingStubbing#thenReturn(Object)}\n+         * @since 1.8.0\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value);\n \n         /**\n          * See original {@link OngoingStubbing#thenReturn(Object, Object[])}\n+         * @since 1.8.0\n          */\n         BDDMyOngoingStubbing<T> willReturn(T value, T... values);\n \n         /**\n          * See original {@link OngoingStubbing#thenThrow(Throwable...)}\n+         * @since 1.8.0\n          */\n         BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);\n \n         /**\n          * See original {@link OngoingStubbing#thenThrow(Class[])}\n+         * @since 1.9.0\n          */\n         BDDMyOngoingStubbing<T> willThrow(Class<? extends Throwable>... throwableClasses);\n \n         /**\n          * See original {@link OngoingStubbing#thenCallRealMethod()}\n+         * @since 1.9.0\n          */\n         BDDMyOngoingStubbing<T> willCallRealMethod();\n \n         /**\n          * See original {@link OngoingStubbing#getMock()}\n+         * @since 1.9.0\n          */\n         <M> M getMock();\n     }\n     \n     /**\n      * see original {@link Mockito#when(Object)}\n+     * @since 1.8.0\n      */\n     public static <T> BDDMyOngoingStubbing<T> given(T methodCall) {\n         return new BDDOngoingStubbingImpl<T>(Mockito.when(methodCall));\n     \n     /**\n      * See original {@link Stubber}\n+     * @since 1.8.0\n      */\n     public static interface BDDStubber {\n         /**\n          * See original {@link Stubber#doAnswer(Answer)}\n+         * @since 1.8.0\n          */\n         BDDStubber willAnswer(Answer answer);\n         \n         /**\n          * See original {@link Stubber#doNothing()}\n+         * @since 1.8.0\n          */\n         BDDStubber willNothing();\n         \n         /**\n          * See original {@link Stubber#doReturn(Object)}\n+         * @since 1.8.0\n          */\n         BDDStubber willReturn(Object toBeReturned);\n         \n         /**\n          * See original {@link Stubber#doThrow(Throwable)}\n+         * @since 1.8.0\n          */\n         BDDStubber willThrow(Throwable toBeThrown);\n \n         /**\n          * See original {@link Stubber#doThrow(Class)}\n+         * @since 1.9.0\n          */\n         BDDStubber willThrow(Class<? extends Throwable> toBeThrown);\n \n         /**\n          * See original {@link Stubber#doCallRealMethod()}\n+         * @since 1.9.0\n          */\n         BDDStubber willCallRealMethod();\n \n         /**\n          * See original {@link Stubber#when(Object)}\n+         * @since 1.8.0\n          */\n         <T> T given(T mock);\n     }\n     \n     /**\n      * see original {@link Mockito#doThrow(Throwable)}\n+     * @since 1.8.0\n      */\n     public static BDDStubber willThrow(Throwable toBeThrown) {\n         return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n \n     /**\n      * see original {@link Mockito#doThrow(Throwable)}\n+     * @since 1.9.0\n      */\n     public static BDDStubber willThrow(Class<? extends Throwable> toBeThrown) {\n         return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n     \n     /**\n      * see original {@link Mockito#doAnswer(Answer)}\n+     * @since 1.8.0\n      */\n     public static BDDStubber willAnswer(Answer answer) {\n         return new BDDStubberImpl(Mockito.doAnswer(answer));\n     \n     /**\n      * see original {@link Mockito#doNothing()}\n+     * @since 1.8.0\n      */\n     public static BDDStubber willDoNothing() {\n         return new BDDStubberImpl(Mockito.doNothing());\n     \n     /**\n      * see original {@link Mockito#doReturn(Object)}\n+     * @since 1.8.0\n      */\n     public static BDDStubber willReturn(Object toBeReturned) {\n         return new BDDStubberImpl(Mockito.doReturn(toBeReturned));\n \n     /**\n      * see original {@link Mockito#doCallRealMethod()}\n+     * @since 1.8.0\n      */\n     public static BDDStubber willCallRealMethod() {\n         return new BDDStubberImpl(Mockito.doCallRealMethod());\n--- a/src/org/mockito/Captor.java\n+++ b/src/org/mockito/Captor.java\n  * One of the advantages of using &#64;Captor annotation is that you can avoid warnings related capturing complex generic types.\n  *\n  * @see ArgumentCaptor\n+ * @since 1.8.3\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.FIELD)\n--- a/src/org/mockito/InjectMocks.java\n+++ b/src/org/mockito/InjectMocks.java\n  * @see Spy\n  * @see MockitoAnnotations#initMocks(Object)\n  * @see org.mockito.runners.MockitoJUnitRunner\n+ * @since 1.8.3\n  */\n @Documented\n @Target(FIELD)\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n      * </code></pre>\n      *\n      * @return settings instance so that you can fluently specify other settings\n+     * @since 1.8.1\n      */\n     MockSettings serializable();\n \n      *\n      *   //You have to use doReturn() for stubbing\n      *   doReturn(\"foo\").when(listWithDelegate).get(0);\n-     * </code>\n+     * </code></pre>\n      *\n      * @param delegate The delegate to forward calls to.\n      * @return settings instance so that you can fluently specify other settings\n+     *\n+     * @since 1.9.5\n      */\n     MockSettings forwardTo(Object delegate) ;\n }\n--- a/src/org/mockito/MockingDetails.java\n+++ b/src/org/mockito/MockingDetails.java\n \n /**\n  * Class to inspect any object, and identify whether a particular object is either a mock or a spy.\n+ *\n+ * @since 1.9.5\n  */\n public abstract class MockingDetails {\n     \n     /**\n      * Create a MockingDetails to inspect a particular Object.\n      * @param toInspect the object to inspect\n-     * @return\n+     * @return A {@link org.mockito.MockingDetails} instance.\n+     *\n+     * @since 1.9.5\n      */\n     public static MockingDetails of( Object toInspect ){\n         return new DefaultMockingDetails( toInspect, new MockUtil());\n     /**\n      * Find out whether the object is a mock.\n      * @return true if the object is a mock or a spy.\n+     *\n+     * @since 1.9.5\n      */\n     public abstract boolean isMock();\n \n     /**\n      * Find out whether the object is a spy.\n      * @return true if the object is a spy.\n+     *\n+     * @since 1.9.5\n      */\n     public abstract boolean isSpy();\n }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n  *      <a href=\"#21\">21. New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </a><br/>\n- *      <a href=\"#22\">22. (New) Verification with timeout (Since 1.8.5) </a><br/>\n- *      <a href=\"#23\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a><br/>\n- *      <a href=\"#24\">24. (**New**) One-liner stubs (Since 1.9.0)</a><br/>\n- *      <a href=\"#25\">25. (**New**) Verification ignoring stubs (Since 1.9.0)</a><br/>\n- *      <a href=\"#26\">26. (**New**) Mocking details (Since 1.9.1)</a><br/>\n+ *      <a href=\"#22\">22. Verification with timeout (Since 1.8.5) </a><br/>\n+ *      <a href=\"#23\">23. (New) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a><br/>\n+ *      <a href=\"#24\">24. (New) One-liner stubs (Since 1.9.0)</a><br/>\n+ *      <a href=\"#25\">25. (New) Verification ignoring stubs (Since 1.9.0)</a><br/>\n+ *      <a href=\"#26\">26. (**New**) Mocking details (Since 1.9.5)</a><br/>\n+ *      <a href=\"#27\">27. (**New**) Forward calls to real instance (Since 1.9.5)</a><br/>\n+ *      <a href=\"#28\">28. (**New**) Introduction of the internal <code>MockMaker</code> API (Since 1.9.5)</a><br/>\n  * </b>\n  * \n  * <p>\n  * Following examples mock a List, because everyone knows its interface (methods\n  * like <code>add()</code>, <code>get()</code>, <code>clear()</code> will be used). <br>\n  * You probably wouldn't mock List class 'in real'.\n- * \n- * <h3 id=\"1\"><a name=\"verify\">1. Let's verify some behaviour!</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"1\">1. <a name=\"verification\">Let's verify some behaviour!</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //Let's import Mockito statically so that the code looks clearer\n  * <p>\n  * Once created, mock will remember all interactions. Then you can selectively\n  * verify whatever interaction you are interested in.\n- * \n- * <h3 id=\"2\"><a name=\"stubbing\">2. How about some stubbing?</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"2\">2. <a name=\"stubbing\">How about some stubbing?</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //You can mock concrete classes, not only interfaces\n  * e.g. when stubbing exactly the same method calls or sometimes when argument matchers are used, etc.</li>\n  * \n  * </ul>\n- * \n- * <h3 id=\"3\"><a name=\"matchers\">3. Argument matchers</a></h3>\n- * \n+ *\n+ *\n+ *\n+ * <h3 id=\"3\">3. <a name=\"argument_matchers\">Argument matchers</a></h3>\n+ *\n  * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.\n  * Sometimes, when extra flexibility is required then you might use argument matchers:  \n  * \n  * Internally, they record a matcher on a stack and return a dummy value (usually null).\n  * This implementation is due static type safety imposed by java compiler.\n  * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n- * \n- * <h3 id=\"4\"><a name=\"verifyexactly\">4. Verifying exact number of invocations / at least x / never</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"4\">4. <a name=\"exact_verification\">Verifying exact number of invocations</a> /\n+ * <a name=\"at_least_verification\">at least x</a> / never</h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //using mock \n  * <p>\n  * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be\n  * omitted.\n- * \n- * <h3 id=\"5\"><a name=\"stubexceptions\">5. Stubbing void methods with exceptions</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"5\">5. <a name=\"stubbing_with_exceptions\">Stubbing void methods with exceptions</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n  * Currently <code>stubVoid()</code> is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n  * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods. \n- * \n- * <h3 id=\"6\"><a name=\"verifyinorder\">6. Verification in order</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"6\">6. <a name=\"in_order_verification\">Verification in order</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * // A. Single mock whose methods must be invoked in a particular order\n  * <p>\n  * Also, you can create InOrder object passing only mocks that are relevant for\n  * in-order verification.\n- * \n- * <h3 id=\"7\"><a name=\"verifynever\">7. Making sure interaction(s) never happened on mock</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"7\">7. <a name=\"never_verification\">Making sure interaction(s) never happened on mock</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //using mocks - only mockOne is interacted\n  * verifyZeroInteractions(mockTwo, mockThree);\n  * \n  * </code></pre>\n- * \n- * <h3 id=\"8\"><a name=\"findredundant\">8. Finding redundant invocations</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"8\">8. <a name=\"finding_redundant_invocations\">Finding redundant invocations</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //using mocks\n  * Some users who did a lot of classic, expect-run-verify mocking tend to use <code>verifyNoMoreInteractions()</code> very often, even in every test method.\n  * <code>verifyNoMoreInteractions()</code> is not recommended to use in every test method.\n  * <code>verifyNoMoreInteractions()</code> is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n- * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n+ * Abusing it leads to <strong>overspecified</strong>, <strong>less maintainable</strong> tests. You can find further reading\n  * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n  * \n  * <p>   \n  * See also {@link Mockito#never()} - it is more explicit and\n  * communicates the intent well.\n  * <p>\n- * \n- * <h3 id=\"9\"><a name=\"mockannotation\">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"9\">9. <a name=\"mock_annotation\">Shorthand for mocks creation - <code>&#064;Mock</code> annotation</a></h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.</li>\n  * You can use built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n- * \n- * <h3 id=\"10\"><a name=\"stubrepeated\"> 10. Stubbing consecutive calls (iterator-style stubbing)</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"10\">10. <a name=\"stubbing_consecutive_calls\">Stubbing consecutive calls</a> (iterator-style stubbing)</h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same\n  * method call. Typical use case could be mocking iterators. \n  * when(mock.someMethod(\"some arg\"))\n  *   .thenReturn(\"one\", \"two\", \"three\");\n  * </code></pre>\n- * \n- * <h3 id=\"11\"><a name=\"stubanswer\"> 11. Stubbing with callbacks</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"11\">11. <a name=\"answer_stubs\">Stubbing with callbacks</a></h3>\n  * \n  * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n  * //Following prints \"called with arguments: foo\"\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </code></pre>\n- * \n- * <h3 id=\"12\"><a name=\"stubdo\"> 12. <code>doReturn()</code>|<code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a></h3>\n- * \n- * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"12\">12. <a name=\"do_family_methods_stubs\"><code>doReturn()</code>|<code>doThrow()</code>|\n+ * <code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a></h3>\n+ * \n+ * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not\n+ * like void methods inside brackets...\n  * <p>\n  * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids. \n  * The main reason is improved readability and consistency with the family of <code>doAnswer()</code> methods.\n  * </code></pre>\n  *\n  * <p>\n- * You can use <code>doThrow()</code>, <code>doAnswer()</code>,  <code>doNothing()</code>,  <code>doReturn()</code> and <code>doCallRealMethod()</code> in place\n- * of the corresponding call with <code>when()</code>, for any method.  It is necessary when you\n+ * You can use <code>doThrow()</code>, <code>doAnswer()</code>, <code>doNothing()</code>, <code>doReturn()</code>\n+ * and <code>doCallRealMethod()</code> in place of the corresponding call with <code>when()</code>, for any method.\n+ * It is necessary when you\n  * <ul>\n  *     <li>stub void methods</li>\n  *     <li>stub methods on spy objects (see below)</li>\n  * <p>\n  * {@link Mockito#doCallRealMethod()}\n  *\n- * <h3 id=\"13\"><a name=\"spy\"> 13. Spying on real objects</a></h3>\n- * \n- * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called (unless a method was stubbed).\n+ *\n+ *\n+ *\n+ * <h3 id=\"13\">13. <a name=\"spy\">Spying on real objects</a></h3>\n+ * \n+ * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called\n+ * (unless a method was stubbed).\n  * <p>\n  * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n  * \n  *   //optionally, you can stub out some methods:\n  *   when(spy.size()).thenReturn(100);\n  * \n- *   //using the spy calls <b>real</b> methods\n+ *   //using the spy calls <b>*real*</b> methods\n  *   spy.add(\"one\");\n  *   spy.add(\"two\");\n  * \n  * <h4>Important gotcha on spying real objects!</h4>\n  * <ol>\n  * <li>Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n- * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of methods for stubbing. Example:\n+ * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of\n+ * methods for stubbing. Example:\n  *\n  * <pre class=\"code\"><code class=\"java\">\n  *   List list = new LinkedList();\n  * </li>\n  * </ol>\n  *\n- * <h3 id=\"14\"><a name=\"defaultreturn\">14. Changing default return values of unstubbed invocations (Since 1.7) </a></h3>\n+ *\n+ *\n+ *\n+ * <h3 id=\"14\">14. Changing <a name=\"defaultreturn\">default return values of unstubbed invocations</a> (Since 1.7)</h3>\n  * \n  * You can create a mock with specified strategy for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n  * \n  * <p>\n  * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}\n- * \n- * <h3 id=\"15\"><a name=\"captors\">15. Capturing arguments for further assertions (Since 1.8.0) </a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"15\">15. <a name=\"captors\">Capturing arguments</a> for further assertions (Since 1.8.0)</h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.\n  * This is also the recommended way of matching arguments because it makes tests clean & simple.\n  * For example:\n  * <pre class=\"code\"><code class=\"java\">\n  *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n- *   verify(mock).doSomething(argument.c<code>apture()</code>);\n- *   assertEquals(\"John\", argument.g<code>etValue()</code>.g<code>etName()</code>);\n+ *   verify(mock).doSomething(argument.capture());\n+ *   assertEquals(\"John\", argument.getValue().getName());\n  * </code></pre>\n  * \n  * <b>Warning:</b> it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.\n  * <li>you just need it to assert on argument values to complete verification</li>\n  * </ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n- * \n- * <h3 id=\"16\"><a name=\"partialmocks\">16. Real partial mocks (Since 1.8.0) </a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"16\">16. <a name=\"partial_mocks\">Real partial mocks</a> (Since 1.8.0)</h3>\n  *  \n  *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n  *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n  * However, there are rare cases when partial mocks come handy: \n  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n- *  \n- * <h3 id=\"17\"><a name=\"resetting\">17. Resetting mocks (Since 1.8.0) </a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"17\">17. <a name=\"resetting_mocks\">Resetting mocks</a> (Since 1.8.0)</h3>\n  *  \n  * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n  *   reset(mock);\n  *   //at this point the mock forgot any interactions & stubbing\n  * </code></pre>\n- *  \n- * <h3 id=\"18\"><a name=\"frameworkvalidate\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"18\">18. <a name=\"framework_validation\">Troubleshooting & validating framework usage</a> (Since 1.8.0)</h3>\n  * \n  * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n  * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n  * <p>\n  * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. \n  * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n- * \n- * <h3 id=\"19\"><a name=\"bddmockito\">19. Aliases for behavior driven development (Since 1.8.0) </a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"19\">19. <a name=\"bdd_mockito\">Aliases for behavior driven development</a> (Since 1.8.0)</h3>\n  * \n  * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.\n  * This is exactly how we write our tests and we warmly encourage you to do so!\n  *   assertThat(goods, containBread());\n  * }  \n  * </code></pre>\n- * \n- * <h3 id=\"20\"><a name=\"serializablemocks\">20. (**New**) Serializable mocks (Since 1.8.1) </a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"20\">20. <a name=\"serializable_mocks\">Serializable mocks</a> (Since 1.8.1)</h3>\n  * \n  * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n  * <p>\n  *                 .defaultAnswer(CALLS_REAL_METHODS)\n  *                 .serializable());\n  * </code></pre>\n- * \n- * <h3 id=\"21\"><a name=\"annotations183\">21. (**New**) New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3)</a></h3>\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"21\">21. New annotations: <a name=\"captor_annotation\"><code>&#064;Captor</code></a>,\n+ * <a name=\"spy_annotation\"><code>&#064;Spy</code></a>,\n+ * <a name=\"injectmocks_annotation\"><code>&#064;InjectMocks</code></a> (Since 1.8.3)</h3>\n+ *\n  * <p>\n  * Release 1.8.3 brings new annotations that may be helpful on occasion:\n  * \n  * All new annotations are <b>*only*</b> processed on {@link MockitoAnnotations#initMocks(Object)}.\n  * Just like for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n- * <h3 id=\"22\"><a name=\"verificationtimeout\">22. (**New**) Verification with timeout (Since 1.8.5)  </a></h3>\n+ * <h3 id=\"22\"><a name=\"verification_timeout\">22. (**New**) Verification with timeout (Since 1.8.5)  </a></h3>\n  * <p>\n  * Allows verifying with timeout. It causes a verify to wait for a specified period of time for a desired\n  * interaction rather than fails immediately if had not already happened. May be useful for testing in concurrent\n  *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n  * </code></pre>\n  *\n- * <h3 id=\"23\"><a name=\"autoinstantiate\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a></h3>\n+ *\n+ *\n+ *\n+ * <h3 id=\"23\">23. (New) <a name=\"automatic_instantiation\">Automatic instantiation of <code>&#064;Spies</code>,\n+ * <code>&#064;InjectMocks</code></a> and <a name=\"constructor_injection\">constructor injection goodness</a> (Since 1.9.0)</h3>\n+ *\n  * <p>\n  * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields\n  * using <b>constructor</b> injection, <b>setter</b> injection, or <b>field</b> injection.\n  * &#064;InjectMocks LocalPub;\n  * </code></pre>\n  *\n- * <h3 id=\"24\"><a name=\"onelinestub\">24. (**New**) One-liner stubs (Since 1.9.0)</a></h3>\n+ *\n+ *\n+ *\n+ * <h3 id=\"24\">24. (New) <a name=\"one_liner_stub\">One-liner stubs</a> (Since 1.9.0)</h3>\n  * <p>\n  * Mockito will now allow you to create mocks when stubbing.\n  * Basically, it allows to create a stub in one line of code.\n  *   &#064;Test public void should... {}\n  * </code></pre>\n  *\n- * <h3 id=\"25\"><a name=\"verifyignorestubs\">25. Verification ignoring stubs (Since 1.9.0)</a></h3>\n+ *\n+ *\n+ *\n+ * <h3 id=\"25\">25. (New) <a name=\"ignore_stubs_verification\">Verification ignoring stubs</a> (Since 1.9.0)</h3>\n  * <p>\n  * Mockito will now allow to ignore stubbing for the sake of verification.\n  * Sometimes useful when coupled with <code>verifyNoMoreInteractions()</code> or verification <code>inOrder()</code>.\n  * <p>\n  * Advanced examples and more details can be found in javadoc for {@link Mockito#ignoreStubs(Object...)}\n  *\n- * <h3 id=\"26\"><a name=\"mockingdetails\">26. Mocking details (Since 1.9.1)</a></h3>\n+ *\n+ *\n+ *\n+ * <h3 id=\"26\">26. (**New**) <a name=\"mocking_details\">Mocking details</a> (Since 1.9.5)</h3>\n  * <p>\n  * To identify whether a particular object is a mock or a spy, you can write\n  * <pre class=\"code\"><code class=\"java\">\n  *     MockingDetails.of( someObject ).isMock();\n  *     MockingDetails.of( someObject ).isSpy();\n  * </code></pre>\n- * Both the <code>isMock()</code> and <code>isSpy()</code> methods return <code>boolean</code>.  As a spy\n- * is considered a special kind of mock, <code>isMock()</code> returns true if the object is a spy.\n+ * Both the {@link MockingDetails#isMock} and {@link MockingDetails#isSpy()} methods return <code>boolean</code>.\n+ * As a spy is considered a special kind of mock, <code>isMock()</code> returns true if the object is a spy.\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"27\">27. (**New**) <a name=\"forwarding_call_to_real_instance\">Forward calls to real instance</a> (Since 1.9.5)</h3>\n+ * <p>Now mockito offer a specific way to forward calls to a concrete instance. This is different than than a\n+ * spy because the spy creation syntax discard the to be spied instance.\n+ *\n+ * <p>Note that this feature only makes sense only for spies or partial mocks of objects <strong>that are difficult to\n+ * mock or spy</strong> using the usual spy API.\n+ * Possible use cases :\n+ * <ul>\n+ *     <li>Final classes but with an interface</li>\n+ *     <li>Already custom proxied object</li>\n+ *     <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>\n+ *     <li>...</li>\n+ * </ul>\n+ *\n+ * Possible example with an object interacting with native objects and spy that would not work :\n+ * <pre class=\"code\"><code class=\"java\">\n+ *   InteractingWithNativeStuff theSpy = spy(interactingWithNativeStuff);\n+ *\n+ *   // Some time after the GC collect interactingWithNativeStuff as it not anymore used,\n+ *   // the finalizer is executed, for example to call a C++ destructor.\n+ *\n+ *   // Later on, it's finally the psy to be garbage collected, finalize method is called again,\n+ *   // unfortunately the second interaction with the native objects will crash the JVM.\n+ * </code></pre>\n+ * Now with the forwarding feature in place :\n+ * <pre class=\"code\"><code class=\"java\">\n+ *   InteractingWithNativeStuff native = mock(InteractingWithNativeStuff.class, withSettings().forwardTo(interactingWithNativeStuff));\n+ *\n+ *   // OK, the mock keeps a reference to the interactingWithNativeStuff, so the finalize method never kick-in.\n+ * </code></pre>\n+ *\n+ * <p>Friendly reminder that final Methods cannot be mocked, so if <code>finalize</code> is <code>final</code> the\n+ * real code will still be executed.\n+ *\n+ * <p>\n+ * See more information there {@link MockSettings#forwardTo}.\n+ *\n+ *\n+ *\n+ *\n+ * <h3 id=\"28\">28. (**New**) <a name=\"mock_maker_plugin\">Introduction of the internal <code>MockMaker</code> API</a> (Since 1.9.5)</h3>\n+ * <p>Thanks to Google Android guys, we now have a brand new extension that allows anyone to write his own mock maker engine.\n+ *\n+ * <p>How does that work ?\n+ * <ul>\n+ *     <li>For a Mockito user : Just put the alternate MockMaker plugin, say mockito-dex-maker.jar</li>\n+ *     <li>For a Mockito developer :\n+ *         <ol style=\"list-style-type: lower-alpha\">\n+ *             <li>Write the implementation itself, for example <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n+ *             <li>Place a file named <code>org.mockito.plugins.MockMaker</code> in a folder named\n+ *             <code>mockito-extensions</code>, the content of this file need to have <strong>one</strong> line with\n+ *             the qualified name <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n+ *         </ol>\n+ *     </li>\n+ * </ul>\n+ *\n+ * <p>Note that if several <code>mockito-extensions/org.mockito.plugins.MockMaker</code> files exists in the classpath\n+ * Mockito will only use the first returned by the standard {@link ClassLoader#getResource} mechanism.\n+ *\n+ * Take a look at the API : {@link org.mockito.plugins.MockMaker}\n+ *\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n      *\n      * @param toBeThrown to be thrown when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n+     * @since 1.9.0\n      */\n     public static Stubber doThrow(Class<? extends Throwable> toBeThrown) {\n         return MOCKITO_CORE.doAnswer(new ThrowsExceptionClass(toBeThrown));\n      * See examples in javadoc for {@link Mockito} class\n      *\n      * @return stubber - to select a method for stubbing\n+     * @since 1.9.5\n      */\n     public static Stubber doCallRealMethod() {\n         return MOCKITO_CORE.doAnswer(new CallsRealMethods());\n      *  inOrder.verifyNoMoreInteractions();\n      * </code></pre>\n      *\n-     * @since 1.9\n+     * @since 1.9.0\n      * @param mocks input mocks that will be changed\n      * @return the same mocks that were passed in as parameters\n      */\n--- a/src/org/mockito/Spy.java\n+++ b/src/org/mockito/Spy.java\n  * @see InjectMocks\n  * @see MockitoAnnotations#initMocks(Object)\n  * @see org.mockito.runners.MockitoJUnitRunner\n+ * @since 1.8.3\n  */\n @Retention(RUNTIME)\n @Target(FIELD)\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n import java.io.Serializable;\n import java.lang.reflect.Method;\n \n+/**\n+ * Internal answer to forward invocations on a real instance.\n+ *\n+ * @since 1.9.5\n+ */\n public class ForwardsInvocations implements Answer<Object>, Serializable {\n \n \tprivate static final long serialVersionUID = -8343690268123254910L;\n--- a/src/org/mockito/invocation/Invocation.java\n+++ b/src/org/mockito/invocation/Invocation.java\n  * The javadoc does not have lots of examples or documentation because its audience is different.\n  * Vast majority of users don't need to use the Invocation. It's mostly useful for other framework authors\n  * that extend Mockito.\n+ *\n+ * @since 1.9.5\n  */\n @Incubating\n public interface Invocation extends InvocationOnMock, DescribedInvocation {\n--- a/src/org/mockito/plugins/MockMaker.java\n+++ b/src/org/mockito/plugins/MockMaker.java\n  *     the qualified name <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n  * </ol></p>\n  *\n+ * <p>Note that if several <code>mockito-extensions/org.mockito.plugins.MockMaker</code> files exists in the classpath\n+ * Mockito will only use the first returned by the standard {@link ClassLoader#getResource} mechanism.\n+ *\n  * @see org.mockito.mock.MockSettingsInfo\n  * @see org.mockito.invocation.MockitoInvocationHandler\n  * @see org.mockito.internal.configuration.ClassPathLoader\n+ * @since 1.9.5\n  */\n @Incubating\n public interface MockMaker {\n      * @param settings Mock creation settings.\n      * @param <T> Type of the mock to return, actually the <code>typeToMock</code>.\n      * @return The mock instance.\n+     * @since 1.9.5\n      */\n     <T> T createMock(\n             Class<T> typeToMock,\n      *\n      * @param mock The mock instance.\n      * @return The invocation handler if this object is a mock, otherwise <code>null</code>.\n+     * @since 1.9.5\n      */\n     MockitoInvocationHandler getHandler(Object mock);\n \n      * @param mock The mock instance whose invocation handler shall be replaced.\n      * @param newHandler The new invocation handler instance.\n      * @param settings The mock settings.\n+     * @since 1.9.5\n      */\n     void resetMock(\n             Object mock,\n--- a/src/org/mockito/stubbing/OngoingStubbing.java\n+++ b/src/org/mockito/stubbing/OngoingStubbing.java\n      * @param throwableClasses to be thrown on method invocation\n      *\n      * @return iOngoingStubbing object that allows stubbing consecutive calls\n+     * @since 1.9.0\n      */\n     OngoingStubbing<T> thenThrow(Class<? extends Throwable>... throwableClasses);\n \n      * @return iOngoingStubbing object that allows stubbing consecutive calls\n      *\n      * @see #thenAnswer(Answer)\n+     * @since 1.9.0\n      */\n     OngoingStubbing<T> then(Answer<?> answer);\n \n      *\n      * @param <M> The mock type given by the variable type.\n      * @return Mock used in this ongoing stubbing.\n+     * @since 1.9.0\n      */\n     <M> M getMock();\n \n--- a/src/org/mockito/stubbing/answers/ReturnsIdentity.java\n+++ b/src/org/mockito/stubbing/answers/ReturnsIdentity.java\n  * <p>If this number equals -1 then the last argument is returned.</p>\n  *\n  * @see org.mockito.AdditionalAnswers\n+ * @since 1.9.5\n  */\n public class ReturnsIdentity implements Answer<Object>, Serializable {\n ", "timestamp": 1333562992, "metainfo": ""}