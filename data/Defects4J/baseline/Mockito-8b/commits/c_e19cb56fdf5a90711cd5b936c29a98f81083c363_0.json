{"sha": "e19cb56fdf5a90711cd5b936c29a98f81083c363", "log": "Some refactoring around javadoc of argument captor Sightly changed captor api (renames mostly) Added more tests  --HG-- rename : src/org/mockito/Argument.java => src/org/mockito/ArgumentCaptor.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401372", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/ArgumentCaptor.java\n+/**\n+ * \n+ */\n+package org.mockito;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.hamcrest.Description;\n+import org.mockito.exceptions.Reporter;\n+\n+/**\n+ * Use it to capture argument values for further assertions.\n+ * <p>\n+ * Mockito verifies argument values in typical java style: by using an equals() method.\n+ * This is also the recommended way of matching arguments because it makes tests clean & simple.\n+ * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n+ * For example:\n+ * <pre>\n+ *   ArgumentCaptor&lt;Person&gt; argument = new ArgumentCaptor&ltPerson&gt();\n+ *   verify(mock).doSomething(argument.capture());\n+ *   assertEquals(\"John\", argument.getValue().getName());\n+ * </pre>\n+ *\n+ * Warning: it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.\n+ * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.\n+ * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.   \n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentCaptor<T> extends ArgumentMatcher<T> {\n+    \n+    private LinkedList<Object> arguments = new LinkedList<Object>();\n+\n+    public boolean matches(Object argument) {\n+        this.arguments.add(argument);\n+        return true;\n+    }\n+\n+    public T capture() {\n+        Mockito.argThat(this);\n+        return null;\n+    }\n+\n+    public T getValue() {\n+        if (arguments.isEmpty()) {\n+            new Reporter().noArgumentValueWasCaptured();\n+        } else {\n+            return (T) arguments.getLast();\n+        }\n+        return (T) arguments;\n+    }\n+\n+    public List<T> getAllValues() {\n+        return (List) arguments;\n+    }\n+    \n+    @Override\n+    public void describeTo(Description description) {\n+        description.appendText(\"<Capturing argument>\");\n+    }\n+}\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"Examples of correct argument capturing:\",\n                 \"    Argument<Person> argument = new Argument<Person>();\",\n                 \"    verify(mock).doSomething(argument.capture());\",\n-                \"    assertEquals(\\\"John\\\", argument.value().getName());\",\n+                \"    assertEquals(\\\"John\\\", argument.getValue().getName());\",\n                 \"\"\n                 ));\n     }\n--- a/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n+++ b/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.Argument;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"unchecked\")\n public class CapturingArgumentsTest extends TestBase {\n \n     class Person {\n         emailer.email(12);\n         \n         //then\n-        Argument<Person> argument = new Argument<Person>();\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         verify(emailService).sendEmailTo(argument.capture());\n         \n-        assertEquals(12, argument.value().getAge());\n+        assertEquals(12, argument.getValue().getAge());\n     }\n     \n     @Test\n         emailer.email(11, 12);\n         \n         //then\n-        Argument<Person> argument = new Argument<Person>();\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n-        List<Person> allValues = argument.allValues();\n+        List<Person> allValues = argument.getAllValues();\n         \n         assertEquals(11, allValues.get(0).getAge());\n         assertEquals(12, allValues.get(1).getAge());\n         emailer.email(11, 12, 13);\n         \n         //then\n-        Argument<Person> argument = new Argument<Person>();\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n         \n-        assertEquals(13, argument.value().getAge());\n+        assertEquals(13, argument.getValue().getAge());\n+    }\n+    \n+    @Test\n+    public void shouldPrintCaptorMatcher() {\n+        //given\n+        ArgumentCaptor<Person> person = new ArgumentCaptor<Person>();\n+        \n+        try {\n+            //when\n+            verify(emailService).sendEmailTo(person.capture());\n+            fail();\n+        } catch(WantedButNotInvoked e) {\n+            //then\n+            assertContains(\"<Capturing argument>\", e.getMessage());\n+        }\n     }\n     \n     @Test\n         emailService.sendEmailTo(null);\n         \n         //then\n-        Argument<Person> argument = new Argument<Person>();\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         verify(emailService).sendEmailTo(argument.capture());\n-        assertEquals(null, argument.value());\n+        assertEquals(null, argument.getValue());\n     }\n     \n     @Test\n     public void shouldAllowCapturingForStubbing() {\n         //given\n-        Argument<Person> argument = new Argument<Person>();\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         when(emailService.sendEmailTo(argument.capture())).thenReturn(false);\n         \n         //when\n         emailService.sendEmailTo(new Person(10));\n         \n         //then\n-        assertEquals(10, argument.value().getAge());\n+        assertEquals(10, argument.getValue().getAge());\n     }\n     \n     @Test\n     public void shouldSaySomethingSmartWhenMisused() {\n-        Argument<Person> argument = new Argument<Person>();\n+        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n         try {\n-            argument.value();\n+            argument.getValue();\n             fail();\n         } catch (MockitoException e) {}\n     }\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.Argument;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockitousage.IMethods;\n     \n     @Test\n     public void shouldShowExampleOfCorrectArgumentCapturing() {\n-        Argument<String> argument = new Argument<String>();\n+        ArgumentCaptor<String> argument = new ArgumentCaptor<String>();\n         argument.capture();\n-        argument.value();\n+        argument.getValue();\n     }\n }", "timestamp": 1241173920, "metainfo": ""}