{"sha": "13d617313ad155ca62d2a716b9a2ce424eae901f", "log": "moved classes around, removed useless interface  --HG-- rename : src/org/mockito/internal/AllInvocationsFinder.java => src/org/mockito/internal/invocation/AllInvocationsFinder.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40539", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.internal.creation.ClassNameFinder;\n import org.mockito.internal.creation.MockAwareInterceptor;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.invocation;\n+\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.mockito.internal.util.MockUtil;\n+\n+public class AllInvocationsFinder {\n+    \n+    /**\n+     * gets all invocations from mocks. Invocations are ordered earlier first. \n+     * \n+     * @param mocks\n+     * @return invocations\n+     */\n+    public List<Invocation> getAllInvocations(List<? extends Object> mocks) {\n+        Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n+        for (Object mock : mocks) {\n+            List<Invocation> fromSingleMock = MockUtil.getMockHandler(mock).getRegisteredInvocations();\n+            invocationsInOrder.addAll(fromSingleMock);\n+        }\n+        \n+        return new LinkedList<Invocation>(invocationsInOrder);\n+    }\n+\n+    private final class SequenceNumberComparator implements Comparator<Invocation> {\n+        public int compare(Invocation o1, Invocation o2) {\n+            int comparison = o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n+            assert comparison != 0 : \"sequence number has to be globally unique\";\n+            return comparison;\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n \n import java.util.List;\n \n-import org.mockito.internal.invocation.GlobalInvocationsFinder;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n     private RegisteredInvocations registeredInvocations = new RegisteredInvocations();\n \n     private final List<? extends Verifier> verifiers;\n-    private final GlobalInvocationsFinder globalInvocationsFinder;\n+    private final AllInvocationsFinder invocationsFinder;\n \n-    public VerifyingRecorder(GlobalInvocationsFinder globalInvocationsFinder, List<? extends Verifier> verifiers) {\n-        this.globalInvocationsFinder = globalInvocationsFinder;\n+    public VerifyingRecorder(AllInvocationsFinder globalInvocationsFinder, List<? extends Verifier> verifiers) {\n+        this.invocationsFinder = globalInvocationsFinder;\n         this.verifiers = verifiers;\n     }\n \n     public void verify(InvocationMatcher wanted, VerificationModeImpl mode) {\n         List<Invocation> invocations;\n         if (mode.inOrderMode()) {\n-            invocations = globalInvocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedInOrder());\n+            invocations = invocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedInOrder());\n         } else {\n             invocations = getRegisteredInvocations();\n         }\n--- a/test/org/mockito/internal/AllInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/AllInvocationsFinderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockitousage.IMethods;\n \n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.internal.invocation.GlobalInvocationsFinder;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n     @Before\n     public void setup() {\n         verifierStub = new VerifierStub();\n-        recorder = new VerifyingRecorder(new GlobalInvocationsFinder() {\n+        recorder = new VerifyingRecorder(new AllInvocationsFinder() {\n             public List<Invocation> getAllInvocations(List<? extends Object> mocks) {\n                 return asList(simpleMethod, differentMethod.getInvocation());\n             }}, asList(verifierStub));", "timestamp": 1207608068, "metainfo": ""}