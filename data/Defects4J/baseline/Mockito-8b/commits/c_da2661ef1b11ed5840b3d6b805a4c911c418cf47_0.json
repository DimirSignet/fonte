{"sha": "da2661ef1b11ed5840b3d6b805a4c911c418cf47", "log": "thx PMD :)", "commit": "\n--- a/test/org/mockito/internal/InvocationNotifierHandlerTest.java\n+++ b/test/org/mockito/internal/InvocationNotifierHandlerTest.java\n import java.util.ArrayList;\n \n import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.BDDMockito.willThrow;\n import static org.mockito.Matchers.any;\n         // when\n         try {\n             notifier.handle(invocation);\n+            fail();\n         } finally {\n             // then\n             verify(listener1).reportInvocation(new NotifiedMethodInvocationReport(invocation, parseException));\n \n         try {\n             notifier.handle(invocation);\n+            fail();\n         } catch (MockitoException me) {\n             assertThat(me.getMessage())\n                     .contains(\"invocation listener\")\n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n         assertTrue(mockSettingsImpl.isSerializable());\n     }\n \n-    /////////////////////////////////////////////////////////////////////////\n-    /////////////////////////////////////////////////////////////////////////\n-    /////////////////////////////////////////////////////////////////////////\n-    // issue 148\n-\n-\n     @Test\n     public void shouldAddVerboseLoggingListener() {\n         //given\n     public void shouldReportErrorWhenAddingNoInvocationListeners() throws Exception {\n         try {\n             mockSettingsImpl.invocationListeners();\n+            fail();\n         } catch (Exception e) {\n             Assertions.assertThat(e.getMessage()).contains(\"at least one listener\");\n         }\n     public void shouldReportErrorWhenAddingANullInvocationListener() throws Exception {\n         try {\n             mockSettingsImpl.invocationListeners(invocationListener, null);\n+            fail();\n         } catch (Exception e) {\n             Assertions.assertThat(e.getMessage()).contains(\"does not accept null\");\n         }", "timestamp": 1305476352, "metainfo": ""}