{"sha": "1913433248da0be71f8c8c9302ec41b0c69ee1f4", "log": "Added some refactorings around custom matchers added TODO  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40270", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/CustomMatcher.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.mockito.internal.matchers.ArgumentMatcher;\n+\n+/**\n+ * TODO document\n+ * @param <T>\n+ */\n+public abstract class CustomMatcher<T> implements ArgumentMatcher<T> {\n+    /* \n+     * @see org.mockito.internal.matchers.ArgumentMatcher#appendTo(java.lang.StringBuilder)\n+     */\n+    public void appendTo(StringBuilder builder) {\n+        builder.append(\"<custom argument matcher>\");\n+    }\n+\n+    public abstract boolean matches(T argument);\n+}\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n         LastArguments.instance().reportMatcher(new StartsWith(prefix));\n         return null;\n     }\n+\n+    public static int intThatIs(CustomMatcher<?> matcher) {\n+        LastArguments.instance().reportMatcher(matcher);\n+        return 0;\n+    }\n+    \n+    public static boolean booleanThatIs(CustomMatcher<?> matcher) {\n+        LastArguments.instance().reportMatcher(matcher);\n+        return false;\n+    }\n }\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n         return firstChunk;\n     }\n     \n+    //TODO it should only show method of the same name (or even nothing)\n     public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n         for (Invocation invocation : invocations) {\n             String wantedMethodName = wanted.getMethod().getName();\n--- a/src/org/mockito/internal/matchers/ArgumentMatcher.java\n+++ b/src/org/mockito/internal/matchers/ArgumentMatcher.java\n     boolean matches(T argument);\n \n     /**\n-     * Appends a string representation of this matcher to the given buffer. In case\n+     * Appends a string representation of this matcher to the given builder. In case\n      * of failure, the printed message will show this string to allow to know which\n      * matcher was used for the failing call.\n      * \n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n package org.mockitousage.matchers;\n \n import static org.junit.Assert.*;\n+import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.CustomMatcher;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n-import org.mockito.internal.progress.LastArguments;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n public class CustomMatchersTest extends RequiresValidState {\n+    private final class AnyBoolean extends CustomMatcher<Boolean> {\n+        public boolean matches(Boolean argument) {\n+            return true;\n+        }\n+    }\n+\n     private final class ZeroOrOne extends CustomMatcher<Integer> {\n         public boolean matches(Integer argument) {\n             if (argument == 0 || argument == 1) {\n                 return true;\n             }\n-            \n             return false;\n         }\n     }\n \n-    //TODO make CustomMatcher part of framework\n-    abstract class CustomMatcher<T> implements ArgumentMatcher<T> {\n-        public void appendTo(StringBuilder builder) {\n-            builder.append(\"<custom argument matcher>\");\n-        }\n-\n-        public abstract boolean matches(T argument);\n-    }\n-    \n     private IMethods mock;\n \n     @Before\n     }\n \n     @Test\n-    public void shouldAllowUsingCustomMatcher() {\n+    public void shouldUseCustomIntMatcher() {\n         stub(mock.simpleMethod(intThatIs(new ZeroOrOne()))).toReturn(\"zero or one\");\n         \n         assertEquals(\"zero or one\", mock.simpleMethod(0));\n             fail();\n         } catch (TooManyActualInvocations e) {}\n     }\n-\n-    private int intThatIs(CustomMatcher matcher) {\n-        LastArguments.instance().reportMatcher(matcher);\n-        return 0;\n+    \n+    @Test\n+    public void shouldUseCustomBooleanMatcher() {\n+        stub(mock.oneArg(booleanThatIs(new AnyBoolean()))).toReturn(\"any boolean\");\n+        \n+        assertEquals(\"any boolean\", mock.oneArg(true));\n+        assertEquals(\"any boolean\", mock.oneArg(false));\n+        \n+        try {\n+            verify(mock).oneArg(booleanThatIs(new AnyBoolean()));\n+            fail();\n+        } catch (TooManyActualInvocations e) {}\n     }\n }", "timestamp": 1199661348, "metainfo": ""}