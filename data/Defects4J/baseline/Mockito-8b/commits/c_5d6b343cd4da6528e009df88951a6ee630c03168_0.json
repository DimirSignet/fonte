{"sha": "5d6b343cd4da6528e009df88951a6ee630c03168", "log": "Added javadocs around new features  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401454", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n \n import org.mockito.stubbing.Answer;\n \n+/**\n+ * @author SG0897539\n+ *\n+ */\n public interface MockSettings {\n+    //TODO: validate javadoc\n     \n+    /**\n+     * Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.\n+     * For background, see issue 51 <a href=\"http://code.google.com/p/mockito/issues/detail?id=51\">here</a>  \n+     * <p>\n+     * This mysterious feature should be used very occasionally. \n+     * The object under test should know exactly its collaborators & dependencies.\n+     * If you happen to use it often than please make sure you are really producing simple, clean & readable code.\n+     * <p>   \n+     * Examples:\n+     * <pre>\n+     *   Foo foo = mock(Foo.class, withSettings().extraInterfaces(Bar.class, Baz.class));\n+     *   \n+     *   //now, the mock implements extra interfaces, so following casting is possible:\n+     *   Bar bar = (Bar) foo;\n+     *   Baz baz = (Baz) foo;\n+     * </pre>\n+     * \n+     * \n+     * @param interfaces extra interfaces the should implement.\n+     * @return settings instance so that you can fluently specify other settings \n+     */\n     MockSettings extraInterfaces(Class<?>... interfaces);\n \n+    /**\n+     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. \n+     * <p>\n+     * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \n+     * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.\n+     * <p>\n+     * <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\n+     * <p>\n+     * Examples:\n+     * <pre>\n+     *   Foo foo = mock(Foo.class, withSettings().name(\"foo\"));\n+     *   \n+     *   //Below does exactly the same:\n+     *   Foo foo = mock(Foo.class, \"foo\");\n+     * </pre>\n+     * @param name the name of the mock, later used in all verification errors\n+     * @return settings instance so that you can fluently specify other settings\n+     */\n     MockSettings name(String name);\n \n     MockSettings spiedInstance(Object object);\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     }\n     \n     /**\n-     * Creates mock with a name. Naming mocks can be helpful for debugging. \n+     * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. \n      * <p>\n      * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \n      * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.\n         MOCKITO_CORE.validateMockitoUsage();\n     }\n \n-    //TODO: javadoc\n+    /**\n+     * Allows mock creation with additional mock settings. \n+     * <p>\n+     * Don't use it too often. \n+     * Consider writing simple tests that use simple mocks. \n+     * Repeat after me: simple tests push simple, KISSy, readable & maintainable code.\n+     * If you cannot write a test in a simple way - refactor the code under test.\n+     * <p>\n+     * Examples of mock settings:\n+     * <pre>\n+     *   //Creates mock with different default answer & name\n+     *   Foo mock = mock(Foo.class, withSettings()\n+     *       .defaultAnswer(RETURNS_SMART_NULLS)\n+     *       .name(\"cool mockie\"));\n+     *       \n+     *   //Creates mock with different default answer, descriptive name and extra interfaces\n+     *   Foo mock = mock(Foo.class, withSettings()\n+     *       .defaultAnswer(RETURNS_SMART_NULLS)\n+     *       .name(\"cool mockie\")\n+     *       .extraInterfaces(Bar.class));    \n+     * </pre>\n+     * {@link MockSettings} has been introduced for two reasons. \n+     * Firstly, to make it easy to add another mock settings when the demand comes.\n+     * Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods.\n+     * <p>\n+     * See javadoc for {@link MockSettings} to learn about possible mock settings.\n+     * <p>\n+     * \n+     * @return mock settings instance with defaults.\n+     */\n     public static MockSettings withSettings() {\n         return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n     }", "timestamp": 1243285811, "metainfo": ""}