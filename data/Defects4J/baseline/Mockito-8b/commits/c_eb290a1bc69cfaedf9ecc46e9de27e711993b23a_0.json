{"sha": "eb290a1bc69cfaedf9ecc46e9de27e711993b23a", "log": "Refactored MockName to be contained in mockSettings. Added TODO Cosmetical refactorings  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401724", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     MatchersBinder matchersBinder;\n     MockingProgress mockingProgress;\n \n-    private final MockName mockName;\n     private final MockSettingsImpl mockSettings;\n \n-    public MockHandler(MockName mockName, MockingProgress mockingProgress, MatchersBinder matchersBinder,\n+    public MockHandler(MockingProgress mockingProgress, MatchersBinder matchersBinder,\n                     MockSettingsImpl mockSettings) {\n-        this.mockName = mockName;\n         this.mockingProgress = mockingProgress;\n         this.matchersBinder = matchersBinder;\n         this.mockSettings = mockSettings;\n     }\n \n     public MockHandler(MockHandler<T> oldMockHandler) {\n-        this(oldMockHandler.mockName, oldMockHandler.mockingProgress, oldMockHandler.matchersBinder,\n+        this(oldMockHandler.mockingProgress, oldMockHandler.matchersBinder,\n                         oldMockHandler.mockSettings);\n     }\n \n     // for tests\n     MockHandler() {\n-        this(new MockName(\"mockie for tests\", MockHandler.class), new ThreadSafeMockingProgress(),\n+        this(new ThreadSafeMockingProgress(),\n                         new MatchersBinder(), new MockSettingsImpl());\n     }\n \n         return mockitoStubber.getInvocations();\n     }\n \n+    public List<StubbedInvocationMatcher> getStubbedInvocations() {\n+        return mockitoStubber.getStubbedInvocations();\n+    }\n+\n     public MockName getMockName() {\n-        return mockName;\n+        return mockSettings.getMockName();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public void setAnswersForStubbing(List<Answer> answers) {\n         mockitoStubber.setAnswersForStubbing(answers);\n     }\n-\n-    public List<StubbedInvocationMatcher> getStubbedInvocations() {\n-        return mockitoStubber.getStubbedInvocations();\n-    }\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n \n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.util.MockName;\n import org.mockito.stubbing.Answer;\n \n import java.util.Arrays;\n     private String name;\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n+    private MockName mockName;\n \n     public MockSettings serializable() {\n         return this.extraInterfaces(Serializable.class);\n         return this;\n     }\n \n-    public String getMockName() {\n-        return name;\n+    public MockName getMockName() {\n+        return mockName;\n     }\n \n     public Class<?>[] getExtraInterfaces() {\n                 extraInterfaces != null\n                 && Arrays.asList(extraInterfaces).contains(Serializable.class);\n     }\n+\n+    public void initiateMockName(Class classToMock) {\n+        mockName = new MockName(name, classToMock);\n+    }\n }\n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n package org.mockito.internal.debugging;\n \n-import org.mockito.MockitoDebugger;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n-import org.mockito.internal.invocation.Invocation;\n+    import org.mockito.MockitoDebugger;\n+    import org.mockito.internal.invocation.AllInvocationsFinder;\n+    import org.mockito.internal.invocation.Invocation;\n \n-import java.util.List;\n+    import java.util.List;\n \n-import static java.util.Arrays.*;\n+    import static java.util.Arrays.*;\n \n-public class MockitoDebuggerImpl implements MockitoDebugger {\n-    public void printInvocations(Object ... mocks) {\n-        AllInvocationsFinder finder = new AllInvocationsFinder();\n-        List<Invocation> invocations = finder.getAllInvocations(asList(mocks));\n-        System.out.println(\"********************************\");\n-        System.out.println(\"*** Mockito interactions log ***\");\n-        System.out.println(\"********************************\");\n-        for(Invocation i:invocations) {\n-            System.out.println(i.toString());\n-            System.out.println(\" invoked: \" + i.getLocation());\n-            if (i.stubInfo() != null) {\n-                System.out.println(\" stubbed: \" + i.stubInfo().stubbingLocation());\n+    public class MockitoDebuggerImpl implements MockitoDebugger {\n+        public void printInvocations(Object ... mocks) {\n+            AllInvocationsFinder finder = new AllInvocationsFinder();\n+            List<Invocation> invocations = finder.getAllInvocations(asList(mocks));\n+            System.out.println(\"********************************\");\n+            System.out.println(\"*** Mockito interactions log ***\");\n+            System.out.println(\"********************************\");\n+            for(Invocation i:invocations) {\n+                System.out.println(i.toString());\n+                System.out.println(\" invoked: \" + i.getLocation());\n+                if (i.stubInfo() != null) {\n+                    System.out.println(\" stubbed: \" + i.stubInfo().stubbingLocation());\n+                }\n+            }\n+            invocations = finder.getAllUnusedStubs(asList(mocks));\n+            if (invocations.isEmpty()) {\n+                return;\n+            }\n+            System.out.println(\"********************************\");\n+            System.out.println(\"***       Unused stubs       ***\");\n+            System.out.println(\"********************************\");\n+            invocations = finder.getAllUnusedStubs(asList(mocks));\n+            for(Invocation i:invocations) {\n+                System.out.println(i.toString());\n+                System.out.println(\" stubbed: \" + i.getLocation());\n             }\n         }\n-        invocations = finder.getAllUnusedStubs(asList(mocks));\n-        if (invocations.isEmpty()) {\n-            return;\n-        }\n-        System.out.println(\"********************************\");\n-        System.out.println(\"***       Unused stubs       ***\");\n-        System.out.println(\"********************************\");\n-        invocations = finder.getAllUnusedStubs(asList(mocks));\n-        for(Invocation i:invocations) {\n-            System.out.println(i.toString());\n-            System.out.println(\" stubbed: \" + i.getLocation());\n-        }\n-    }\n }\n--- a/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n         return new LinkedList<Invocation>(invocationsInOrder);\n     }\n \n+    //TODO belongs elsewhere\n     public List<Invocation> getAllUnusedStubs(List<?> mocks) {\n         List<Invocation> unused = new LinkedList<Invocation>();\n         for (Object mock : mocks) {\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         creationValidator.validateType(classToMock);\n         creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());\n         creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());\n-        \n-        MockName mockName = new MockName(settings.getMockName(), classToMock);\n-        MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);\n+\n+        settings.initiateMockName(classToMock);\n+\n+        MockHandler<T> mockHandler = new MockHandler<T>(progress, new MatchersBinder(), settings);\n         MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n         Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;", "timestamp": 1258316312, "metainfo": ""}