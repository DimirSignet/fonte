{"sha": "cf2f9ba107407646d39b139ebe132682d9c0d104", "log": "Split up a class into different object (SRP)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401342", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/ConditionalStackTraceFilter.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import org.mockito.configuration.IMockitoConfiguration;\n+import org.mockito.internal.configuration.GlobalConfiguration;\n+\n+public class ConditionalStackTraceFilter {\n+    \n+    private IMockitoConfiguration config = new GlobalConfiguration();\n+    private StackTraceFilter filter = new StackTraceFilter();\n+    \n+    public void filter(Throwable throwable) {\n+        if (!config.cleansStackTrace()) {\n+            return;\n+        }\n+        StackTraceElement[] filtered = filter.filter(throwable.getStackTrace());\n+        throwable.setStackTrace(filtered);\n+    }\n+}\n--- a/src/org/mockito/exceptions/base/MockitoAssertionError.java\n+++ b/src/org/mockito/exceptions/base/MockitoAssertionError.java\n \n         unfilteredStackTrace = getStackTrace();\n         \n-        StackTraceFilter filter = new StackTraceFilter();\n-        filter.filterConditionally(this);\n+        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n+        filter.filter(this);\n     }\n \n     public StackTraceElement[] getUnfilteredStackTrace() {\n--- a/src/org/mockito/exceptions/base/MockitoException.java\n+++ b/src/org/mockito/exceptions/base/MockitoException.java\n     private void filterStackTrace() {\n         unfilteredStackTrace = getStackTrace();\n         \n-        StackTraceFilter filter = new StackTraceFilter();\n-        filter.filterConditionally(this);\n+        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n+        filter.filter(this);\n     }\n \n     public StackTraceElement[] getUnfilteredStackTrace() {\n--- a/src/org/mockito/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n import java.util.Arrays;\n import java.util.List;\n \n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.internal.configuration.GlobalConfiguration;\n-\n public class StackTraceFilter {\n-    \n-    private IMockitoConfiguration config = new GlobalConfiguration();\n     \n     public boolean isLastStackElementToRemove(StackTraceElement e) {\n         boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n         boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n         boolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\n         return fromMockObject || fromOrgMockito && !isRunner;\n-    }\n-\n-    public void filterConditionally(Throwable throwable) {\n-        if (!config.cleansStackTrace()) {\n-            return;\n-        }\n-        StackTraceElement[] filtered = filter(throwable.getStackTrace());\n-        throwable.setStackTrace(filtered);\n     }\n \n     public StackTraceElement[] filter(StackTraceElement[] target) {\n--- a/src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java\n+++ b/src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java\n \n import junit.framework.ComparisonFailure;\n \n-import org.mockito.exceptions.base.StackTraceFilter;\n+import org.mockito.exceptions.base.ConditionalStackTraceFilter;\n \n \n public class ArgumentsAreDifferent extends ComparisonFailure {\n         this.message = message;\n         \n         unfilteredStackTrace = getStackTrace();\n-        StackTraceFilter filter = new StackTraceFilter();\n-        filter.filterConditionally(this);\n+        ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n+        filter.filter(this);\n     }\n     \n     @Override\n--- a/src/org/mockito/internal/stubbing/ThrowsException.java\n+++ b/src/org/mockito/internal/stubbing/ThrowsException.java\n  */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.exceptions.base.StackTraceFilter;\n+import org.mockito.exceptions.base.ConditionalStackTraceFilter;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n public class ThrowsException implements Answer<Object> {\n \n     private final Throwable throwable;\n-    private final StackTraceFilter filter = new StackTraceFilter();\n+    private final ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n \n     public ThrowsException(Throwable throwable) {\n         this.throwable = throwable;\n             throw throwable;\n         }\n         Throwable t = throwable.fillInStackTrace();\n-        filter.filterConditionally(t);\n+        filter.filter(t);\n         throw t;\n     }\n \n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/ConditionalStackTraceFilterTest.java\n+package org.mockito.exceptions.base;\n+\n+import static org.mockitoutil.ExtraMatchers.*;\n+\n+import org.junit.Test;\n+import org.mockito.internal.configuration.ConfigurationAccess;\n+import org.mockitoutil.TestBase;\n+\n+public class ConditionalStackTraceFilterTest extends TestBase {\n+    \n+    private ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n+\n+    @Test\n+    public void shouldNotFilterWhenConfigurationSaysNo() {\n+        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n+        \n+        Throwable t = new TraceBuilder().classes(\n+                \"org.test.MockitoSampleTest\",\n+                \"org.mockito.Mockito\" \n+        ).toThrowable();\n+        \n+        filter.filter(t);\n+        \n+        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.mockito.Mockito\", \"org.test.MockitoSampleTest\"));\n+    }\n+\n+    @Test\n+    public void shouldFilterWhenConfigurationSaysYes() {\n+        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        \n+        Throwable t = new TraceBuilder().classes(\n+                \"org.test.MockitoSampleTest\",\n+                \"org.mockito.Mockito\" \n+        ).toThrowable();\n+        \n+        filter.filter(t);\n+        \n+        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.test.MockitoSampleTest\"));\n+    }\n+}\n--- a/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n+++ b/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Test;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitoutil.TestBase;\n \n public class StackTraceFilterTest extends TestBase {\n         \n         assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"junit.stuff\", \"org.mockito.runners.Runner\"));\n     }\n-    \n-    //TODO remove this test when next TODO is finished\n-    @Test\n-    public void shouldFilterEvenIfConfigurationSaysNo() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n-        \n-        Throwable t = new TraceBuilder().classes(\n-            \"org.test.MockitoSampleTest\",\n-            \"org.mockito.Mockito\" \n-        ).toThrowable();\n-            \n-        StackTraceElement[] filtered = filter.filter(t.getStackTrace());\n-        \n-        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\"));\n-    }\n-    \n-    //TODO move to different class\n-    @Test\n-    public void shouldNotFilterConditionally() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n-        \n-        Throwable t = new TraceBuilder().classes(\n-                \"org.test.MockitoSampleTest\",\n-                \"org.mockito.Mockito\" \n-        ).toThrowable();\n-        \n-        filter.filterConditionally(t);\n-        \n-        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.mockito.Mockito\", \"org.test.MockitoSampleTest\"));\n-    }\n }", "timestamp": 1240161995, "metainfo": ""}