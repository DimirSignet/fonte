{"sha": "c764d2272d622434f3a753fc16ac98d3a78ea4ba", "log": "some refactorings. Got rid of some redundant code.  --HG-- rename : src/org/mockito/internal/stubbing/Result.java => src/org/mockito/internal/stubbing/AnswerFactory.java rename : test/org/mockito/internal/stubbing/ResultTest.java => test/org/mockito/internal/stubbing/AnswerFactoryTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40601", "commit": "\n--- a/src/org/mockito/internal/stubbing/Answer.java\n+++ b/src/org/mockito/internal/stubbing/Answer.java\n /**\n  * Used to answer expected calls.\n  * @param <T> the type to return.\n- * //TODO should be Answer\n  */\n public interface Answer<T> {\n \n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/AnswerFactory.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+import org.mockito.exceptions.base.HasStackTraceThrowableWrapper;\n+import org.mockito.exceptions.base.StackTraceFilter;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class AnswerFactory {\n+\n+    public static Answer createThrowResult(final Throwable throwable, final StackTraceFilter filter) {\n+        return new Answer<Object>() {\n+            public Object answer() throws Throwable {\n+                Throwable filtered = throwable.fillInStackTrace();\n+                filter.filterStackTrace(new HasStackTraceThrowableWrapper(filtered));\n+                throw filtered;\n+            }\n+        };\n+    }\n+    \n+    public static Answer createReturnResult(final Object value) {\n+        return new Answer<Object>() {\n+            public Object answer() throws Throwable {\n+                return value;\n+            }\n+        };\n+    }\n+}\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgress;\n \n+@SuppressWarnings(\"unchecked\")\n public class Stubber {\n \n     private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();\n     \n     public void addReturnValue(Object value) {\n         mockingProgress.stubbingCompleted();\n-        addResult(Result.createReturnResult(value));\n+        addResult(AnswerFactory.createReturnResult(value));\n     }\n     \n     public void addThrowable(Throwable throwable) {\n         mockingProgress.stubbingCompleted();\n         validateThrowable(throwable);\n-        addResult(Result.createThrowResult(throwable, new StackTraceFilter()));\n+        addResult(AnswerFactory.createThrowResult(throwable, new StackTraceFilter()));\n     }\n     \n-    private void addResult(Result result) {\n+    private void addResult(Answer result) {\n         assert invocationForStubbing != null;\n         stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, result));\n     }\n     \n     public void addConsecutiveReturnValue(Object value) {\n-        stubbed.getFirst().addAnswer(Result.createReturnResult(value));\n+        stubbed.getFirst().addAnswer(AnswerFactory.createReturnResult(value));\n     }\n \n     public void addConsecutiveThrowable(Throwable throwable) {\n         validateThrowable(throwable);\n-        stubbed.getFirst().addAnswer(Result.createThrowResult(throwable, new StackTraceFilter()));\n+        stubbed.getFirst().addAnswer(AnswerFactory.createThrowResult(throwable, new StackTraceFilter()));\n     }    \n \n     public Object resultFor(Invocation invocation) throws Throwable {\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/AnswerFactoryTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+import static org.mockito.util.ExtraMatchers.*;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.exceptions.base.StackTraceFilter;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class AnswerFactoryTest extends TestBase {\n+\n+    @Test\n+    public void shouldCreateReturnResult() throws Throwable {\n+        Answer result = AnswerFactory.createReturnResult(\"lol\");\n+        assertEquals(\"lol\", result.answer());\n+    }\n+    \n+    @Test(expected=RuntimeException.class)\n+    public void shouldCreateThrowResult() throws Throwable {\n+        AnswerFactory.createThrowResult(new RuntimeException(), new StackTraceFilter()).answer();\n+    }\n+    \n+    @Test\n+    public void shouldFilterStackTraceWhenCreatingThrowResult() throws Throwable {\n+        StackTraceFilterStub filterStub = new StackTraceFilterStub();\n+        Answer result = AnswerFactory.createThrowResult(new RuntimeException(), filterStub);\n+        try {\n+            result.answer(); \n+            fail();\n+        } catch (RuntimeException e) {\n+            assertTrue(Arrays.equals(filterStub.hasStackTrace.getStackTrace(), e.getStackTrace()));\n+            assertThat(e, hasFirstMethodInStackTrace(\"answer\"));\n+        }\n+    }\n+    \n+    class StackTraceFilterStub extends StackTraceFilter {\n+        HasStackTrace hasStackTrace;\n+        @Override public void filterStackTrace(HasStackTrace hasStackTrace) {\n+            this.hasStackTrace = hasStackTrace;\n+        }\n+    }\n+}\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.internal.matchers.EqualsTest;\n import org.mockito.internal.progress.MockingProgressImplTest;\n import org.mockito.internal.progress.VerificationModeImplTest;\n-import org.mockito.internal.stubbing.ResultTest;\n+import org.mockito.internal.stubbing.AnswerFactoryTest;\n import org.mockito.internal.stubbing.StubberTest;\n import org.mockito.internal.util.ListUtilTest;\n import org.mockito.internal.util.MockUtilTest;\n                     AllInvocationsFinderTest.class,\n                     DefaultReturnValuesTest.class,\n                     StubberTest.class,\n-                    ResultTest.class,\n+                    AnswerFactoryTest.class,\n                     NumberOfInvocationsVerifierTest.class,\n                     VerifyingRecorderTest.class,\n                     MissingInvocationVerifierTest.class,", "timestamp": 1209065304, "metainfo": ""}