{"sha": "7a647a702c8af81ccf5d37b09c11529c6c0cb1b7", "log": "Fixed issue 188 @Captor annotation should work OK with nested parametrized type  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401984", "commit": "\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n         Type generic = field.getGenericType();\n         if (generic != null && generic instanceof ParameterizedType) {\n             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-            return (Class) actual;\n+            if (actual instanceof Class) {\n+                return (Class) actual;\n+            } else if (actual instanceof ParameterizedType) {\n+                //in case of nested generics we don't go deep\n+                return (Class) ((ParameterizedType) actual).getRawType();\n+            }\n         }\n         \n         return Object.class;\n--- a/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n+++ b/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n import static org.junit.Assert.*;\n \n import java.lang.reflect.Field;\n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n     Set<Integer> two;\n     Map<Double, String> map;\n     String nonGeneric;\n+    List<Set<String>> nested;\n+    List<Set<Collection<String>>> multiNested;\n     \n     @Test\n     public void shouldFindGenericClass() throws Exception {\n-        assertEquals(m.getGenericType(field(\"one\")), String.class);\n-        assertEquals(m.getGenericType(field(\"two\")), Integer.class);\n-        assertEquals(m.getGenericType(field(\"map\")), Double.class);\n+        assertEquals(String.class, m.getGenericType(field(\"one\")));\n+        assertEquals(Integer.class, m.getGenericType(field(\"two\")));\n+        assertEquals(Double.class, m.getGenericType(field(\"map\")));\n     }\n     \n     @Test\n     public void shouldGetObjectForNonGeneric() throws Exception {\n-        assertEquals(m.getGenericType(field(\"nonGeneric\")), Object.class);\n+        assertEquals(Object.class, m.getGenericType(field(\"nonGeneric\")));\n+    }\n+    \n+    @Test\n+    public void shouldDealWithNestedGenerics() throws Exception {\n+        assertEquals(Set.class, m.getGenericType(field(\"nested\")));\n+        assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));\n     }\n \n     private Field field(String fieldName) throws SecurityException, NoSuchFieldException {", "timestamp": 1274026860, "metainfo": ""}