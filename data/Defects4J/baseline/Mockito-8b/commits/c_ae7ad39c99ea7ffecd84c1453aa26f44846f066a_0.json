{"sha": "ae7ad39c99ea7ffecd84c1453aa26f44846f066a", "log": "Helper methods when returning one of the parameters  --HG-- extra : transplant_source : %2A39%84%21%F4%AB%C4%2A%A5v%0BD%AB8%81%82%3A%C9k", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/stubbing/answers/IdentityAnswers.java\n+package org.mockito.stubbing.answers;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+public enum IdentityAnswers implements Answer<Object> {\n+\tRETURN_FIRST_PARAMETER(RETURN_PARAMETER(0)), //\n+\tRETURN_SECOND_PARAMETER(RETURN_PARAMETER(1)), //\n+\tRETURN_LAST_PARAMETER(RETURN_PARAMETER(-1));\n+\n+\tpublic static <T> Answer<T> RETURN_PARAMETER(final int index) {\n+\t\treturn new Answer<T>() {\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t@Override\n+\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n+\t\t\t\tint actualIndex = (index == -1) ? invocation.getArguments().length - 1\n+\t\t\t\t\t\t: index;\n+\t\t\t\treturn (T) invocation.getArguments()[actualIndex];\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tprivate final Answer<Object> answer;\n+\n+\tprivate IdentityAnswers(Answer<Object> answer) {\n+\t\tthis.answer = answer;\n+\t}\n+\n+\t@Override\n+\tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n+\t\treturn answer.answer(invocation);\n+\t}\n+\n+}\n--- /dev/null\n+++ b/test/org/mockito/stubbing/answers/IdentityAnswersTest.java\n+package org.mockito.stubbing.answers;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.lang.reflect.Method;\n+\n+import org.junit.Test;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class IdentityAnswersTest {\n+\t@Test\n+\tpublic void should_be_able_to_return_the_first_parameter() throws Throwable {\n+\t\tassertThat(\n+\t\t\t\t(String) IdentityAnswers.RETURN_FIRST_PARAMETER.answer(invocationWith(\n+\t\t\t\t\t\t\"A\", \"B\")), is(\"A\"));\n+\t}\n+\n+\t@Test\n+\tpublic void should_be_able_to_return_the_second_parameter()\n+\t\t\tthrows Throwable {\n+\t\tassertThat(\n+\t\t\t\t(String) IdentityAnswers.RETURN_SECOND_PARAMETER.answer(invocationWith(\n+\t\t\t\t\t\t\"A\", \"B\", \"C\")), is(\"B\"));\n+\t}\n+\n+\t@Test\n+\tpublic void should_be_able_to_return_the_last_parameter() throws Throwable {\n+\t\tassertThat(\n+\t\t\t\t(String) IdentityAnswers.RETURN_LAST_PARAMETER\n+\t\t\t\t\t\t.answer(invocationWith(\"A\")),\n+\t\t\t\tis(\"A\"));\n+\t\tassertThat(\n+\t\t\t\t(String) IdentityAnswers.RETURN_LAST_PARAMETER.answer(invocationWith(\n+\t\t\t\t\t\t\"A\", \"B\")), is(\"B\"));\n+\t}\n+\n+\t@Test\n+\tpublic void should_be_able_to_return_the_specified_parameter()\n+\t\t\tthrows Throwable {\n+\t\tassertThat(\n+\t\t\t\t(String) IdentityAnswers.RETURN_PARAMETER(0).answer(\n+\t\t\t\t\t\tinvocationWith(\"A\", \"B\", \"C\")), is(\"A\"));\n+\t\tassertThat(\n+\t\t\t\t(String) IdentityAnswers.RETURN_PARAMETER(1).answer(\n+\t\t\t\t\t\tinvocationWith(\"A\", \"B\", \"C\")), is(\"B\"));\n+\t}\n+\n+\tprivate static InvocationOnMock invocationWith(final String... parameters) {\n+\t\t@SuppressWarnings(\"serial\")\n+\t\tInvocationOnMock invocation = new InvocationOnMock() {\n+\n+\t\t\t@Override\n+\t\t\tpublic Object getMock() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Method getMethod() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Object[] getArguments() {\n+\t\t\t\treturn parameters;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Object callRealMethod() throws Throwable {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t};\n+\t\treturn invocation;\n+\t}\n+}", "timestamp": 1331155906, "metainfo": ""}