{"sha": "0bbd22652616182d55949c1dacabb6bcff04d901", "log": "fixed problem related to returning primitives fixed one configuration example  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40528", "commit": "\n--- a/src/org/mockito/configuration/DefaultReturnValues.java\n+++ b/src/org/mockito/configuration/DefaultReturnValues.java\n         return returnValueFor(returnType);\n     }\n     \n-    //new instances are used instead of Collections.emptyList(), etc.\n-    //to avoid UnsupportedOperationException if code under test modifies returned collection\n     protected Object returnValueFor(Class<?> type) {\n-        if (type == Collection.class) {\n+        if (type.isPrimitive()) {\n+            return primitiveOf(type);\n+        //new instances are used instead of Collections.emptyList(), etc.\n+        //to avoid UnsupportedOperationException if code under test modifies returned collection\n+        } else if (type == Collection.class) {\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();\n         } else if (type == LinkedHashMap.class) {\n             return new LinkedHashMap<Object, Object>();\n         }       \n-        \n         //Let's not care about the rest of collections.\n-        //Don't worry about primitives also: Null is going to be \n-        //automatically changed into appropriate primitive value by cglib\n         return null;\n     }\n+\n+    private Object primitiveOf(Class<?> type) {\n+        if (type == Boolean.TYPE) {\n+            return false;\n+        } else if (type == Character.TYPE) {\n+            return (char) 0;\n+        } else {\n+            return 0;\n+        } \n+    }\n }\n--- a/test/org/mockito/configuration/DefaultReturnValuesTest.java\n+++ b/test/org/mockito/configuration/DefaultReturnValuesTest.java\n         \n         assertNull(values.returnValueFor(String.class));\n     }\n+    \n+    @Test public void shouldReturnPrimitive() {\n+        DefaultReturnValues values = new DefaultReturnValues();\n+        \n+        assertEquals(false, values.returnValueFor(Boolean.TYPE));\n+        assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n+        assertEquals(0, values.returnValueFor(Short.TYPE));\n+        assertEquals(0, values.returnValueFor(Integer.TYPE));\n+        assertEquals(0, values.returnValueFor(Long.TYPE));\n+        assertEquals(0, values.returnValueFor(Float.TYPE));\n+        assertEquals(0, values.returnValueFor(Double.TYPE));\n+    }\n }\n--- a/test/org/mockitousage/examples/configure/withbaseclass/ConfiguringDefaultReturnValuesUsingBaseClassTest.java\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/ConfiguringDefaultReturnValuesUsingBaseClassTest.java\n         MyObject returned = m.foo();\n         assertNotNull(returned);\n         assertNotNull(returned.foo());\n+        \n+        assertEquals(0, returned.bar());\n     }\n \n     interface MyObject {\n         MyObject foo();\n+        int bar();\n     }\n }\n--- a/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n import org.junit.Before;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n-import org.mockito.configuration.DefaultReturnValues;\n+import org.mockito.configuration.BaseReturnValues;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n         MockitoConfiguration.instance().resetReturnValues();\n     }\n     \n-    private final class MyDefaultReturnValues implements ReturnValues {\n-        public Object valueFor(InvocationOnMock invocation) {\n-            //get the default return value\n-            Object value = new DefaultReturnValues().valueFor(invocation);\n-            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n-                return value;\n-            } else {\n-                //in case the default return value is null and method is not void, return new mock:\n-                return Mockito.mock(invocation.getMethod().getReturnType());\n-            }\n+    private final class MyDefaultReturnValues extends BaseReturnValues implements ReturnValues {\n+        public Object returnValueFor(InvocationOnMock invocation) {\n+            return Mockito.mock(invocation.getMethod().getReturnType());\n         }\n     }\n }\n--- a/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n+++ b/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n         assertEquals(0L, mock.intReturningMethod(12));\n         assertEquals(0.0F, mock.floatReturningMethod(12), 0.0F);\n         assertEquals(0.0D, mock.doubleReturningMethod(12), 0.0D);\n-        assertEquals('\\u0000', mock.charReturningMethod(12));\n+        assertEquals((char) 0, mock.charReturningMethod(12));\n         assertEquals(false, mock.booleanReturningMethod(12));\n         assertEquals(null, mock.objectReturningMethod(12));\n     }", "timestamp": 1207177364, "metainfo": ""}