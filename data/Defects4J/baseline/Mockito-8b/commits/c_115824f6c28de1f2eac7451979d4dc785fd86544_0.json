{"sha": "115824f6c28de1f2eac7451979d4dc785fd86544", "log": "More javadoccing  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401177", "commit": "\n--- a/src/org/junit/mockito/ExperimentalMockitoJUnitRunner.java\n+++ b/src/org/junit/mockito/ExperimentalMockitoJUnitRunner.java\n  * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n  * <p>\n  * This runner does exactly what {@link MockitoJUnitRunner} does but also  \n- * prints useful warnings that can be helpful for debugging failed tests.\n+ * prints useful warnings that can enhance testing experience. \n+ * The point is that Mockito should help the tdd developer to quickly figure out if the test fails for the right reason. \n+ * Then the developer can implement the functionality. \n+ * Also when the test fails it should be easy to figure out why the test fails. \n  * <p>\n  * Sometimes when the test fails, the underlying reason is that stubbed method was called with wrong arguments. \n  * Sometimes it fails because one forgets to stub a method or forgets to call a stubbed method. \n--- a/src/org/mockito/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/DefaultMockitoConfiguration.java\n \n import org.mockito.internal.returnvalues.EmptyReturnValues;\n \n-//TODO javadocs\n+/**\n+ * DefaultConfiguration of Mockito framework\n+ * <p>\n+ * Currently it doesn't have many configuration options but it will probably change if future.\n+ * <p>\n+ * See javadocs for {@link IMockitoConfiguration} on info how to configure Mockito\n+ */\n public class DefaultMockitoConfiguration implements IMockitoConfiguration {\n \n     public ReturnValues getReturnValues() {\n--- a/src/org/mockito/IMockitoConfiguration.java\n+++ b/src/org/mockito/IMockitoConfiguration.java\n /**\n  * Use it to configure Mockito. For now there are not many configuration options but it may change in future.\n  * <p>\n- * Currently, configuring Mockito can help you changing {@link ReturnValues} for all mocks. ReturnValues determines the return values for unstubbed invocations.\n+ * In most cases you don't really need to configure Mockito. For example in case of working with legacy code, \n+ * when you might want to have different 'mocking style' this interface might be helpful. \n+ * A reason of configuring Mockito might be if you disagree with the default return values mocks return.\n+ * <p>\n+ * Currently, configuring Mockito can help you changing {@link ReturnValues} for all mocks. \n+ * {@link ReturnValues} determines the return values for unstubbed invocations.\n  * <p>\n  * To configure Mockito create exactly <b>org.mockito.MockitoConfiguration</b> class that implements this interface.\n  * <p>\n  * <p>\n  * Mockito will store single instance of org.mockito.MockitoConfiguration per thread (using ThreadLocal). \n  * For sanity of your tests, don't make the implementation stateful.   \n- * \n+ * <p>\n+ * If you have comments on Mockito configuration feature don't hesitate to write to mockito@googlegroups.com\n  */\n public interface IMockitoConfiguration {\n \n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      11. Stubbing with callbacks <br/>\n  *      12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>\n  *      13. Spying on real objects <br/>\n+ *      14. (**New**) Changing default return values of unstubbed invocations <br/>\n+ *      15. (**New**) ExperimentalMockitoJUnitRunner to help with debugging failing tests <br/>\n  * </b>\n  * \n  * <p>\n  * 2. Watch out for final methods. \n  * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n  * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n- * Typically you may get a NullPointerException because mock instances don't have fields initiated. \n+ * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n+ * \n+ * <h3>14. (**New**) Changing default return values of unstubbed invocations</h3>\n+ * \n+ * You can create a mock with specified strategy of for its return values.\n+ * It's quite advanced feature and typically you don't need it to write decent tests.\n+ * However it can be helpful for working with legacy systems.\n+ * <p>\n+ * Obviously return values are used only when you don't stub the method call.\n+ * \n+ * <pre>\n+ *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n+ *   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); \n+ * </pre>\n+ * \n+ * <p>\n+ * Read more about {@link Mockito#RETURNS_SMART_NULLS}\n+ * <p>\n+ * Optionally, you can configure default return values using {@link IMockitoConfiguration}.\n+ * \n+ * <h3>15. (**New**) ExperimentalMockitoJUnitRunner to enhance testing experience</h3>\n+ *      \n+ * ExperimentalMockitoJUnitRunner initializes &#064;Mock annotated mocks and prints useful warnings that can enhance testing experience.\n+ * <p>\n+ * The point is that Mockito should help the tdd developer to quickly figure out if the test fails for the right reason. \n+ * Then the developer can implement the functionality. \n+ * Also when the test fails it should be easy to figure out why the test fails.\n+ * <p>\n+ * Read more in javadocs for ExperimentalMockitoJUnitRunner class: {@link ExperimentalMockitoJUnitRunner}\n+ * <pre>\n+ * \n+ * &#064;RunWith(\"ExperimentalMockitoJUnitRunner.class\")\n+ * YourTest extends TestCase {\n+ *     \n+ *     &#064;Mock private List list;\n+ * \n+ * </pre>\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     /**\n      * Default ReturnValues used by the framework.\n      * <p>\n-     * {@link ReturnValues} defines the return values of unstubbed calls. \n+     * {@link ReturnValues} defines the return values of unstubbed invocations. \n      * <p>\n      * This implementation first tries the global configuration (see {@link IMockitoConfiguration}). \n      * If there is no global configuration then it uses {@link HandyReturnValues} (returns zeros, empty collections, nulls, etc.)\n     /**\n      * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n      * <p>\n-     * {@link ReturnValues} defines the return values of unstubbed calls.\n+     * {@link ReturnValues} defines the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n     }\n     \n     /**\n-     * Warning: the interface of this method may change\n-     * \n-     * Creates mock with a specified strategy for its return values.\n+     * Creates mock with a specified strategy for its return values. \n+     * It's quite advanced feature and typically you don't need it to write decent tests.\n+     * However it can be helpful for working with legacy systems.\n+     * <p>\n+     * Obviously return values are used only when you don't stub the method call.\n      *\n-     * <p>This can be helpful for working with legacy systems.</p>\n+     * <pre>\n+     *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n+     *   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); \n+     * </pre>\n      * \n      * <p>See examples in javadoc for {@link Mockito} class</p>\n      * \n      * @param classToMock class or interface to mock\n+     * @param returnValues default return values for unstubbed methods\n+     *\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n--- a/src/org/mockito/ReturnValues.java\n+++ b/src/org/mockito/ReturnValues.java\n \n /**\n  * Configures return values for an unstubbed invocation\n+ * <p>\n+ * Can be used in {@link Mockito#mock(Class, ReturnValues)} or configured globally - see: {@link IMockitoConfiguration}\n  */\n public interface ReturnValues {\n \n     /**\n-     * returns value for an unstubbed invocation\n+     * return value for an unstubbed invocation\n      * \n      * @param invocation placeholder for mock and a method\n      * @return the return value\n--- a/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n         assertThat(logger.getLoggedInfo(), contains(\"called with different arguments\"));\n         assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"bar\\\")\"));\n     }\n+    \n+    //TODO after 1.7 consider writing a warning when someone tries to mock a class that has any final methods\n }", "timestamp": 1231677619, "metainfo": ""}