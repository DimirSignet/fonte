{"sha": "f668427341272626209d0b21d1cb1e349a7186ad", "log": "Added early completion on definite failure to timeout() too, by refactoring to combine after() and timeout() implementations", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.verification.VerificationMode;\n+\n+/**\n+ * Verifies that another verification mode (the delegate) is satisfied within a certain timeframe\n+ * (before timeoutMillis has passed, measured from the call to verify()), and either returns immediately\n+ * once it does, or waits until it is definitely satisfied once the full time has passed.\n+ */\n+public class VerificationOverTimeImpl implements VerificationMode {\n+\n+    private final int pollingPeriod;\n+    private final int durationMillis;\n+    private final VerificationMode delegate;\n+    private final boolean returnOnSuccess;\n+    \n+    /**\n+     * Create this verification mode, to be used to verify invocation ongoing data later.\n+     *\n+     * @param pollingPeriod The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n+     * @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied\n+     * @param delegate The verification mode to delegate overall success or failure to\n+     * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in\n+     *                        {@link org.mockito.verification.VerificationWithTimeout}, or to only return once\n+     *                        the delegate is satisfied and the full duration has passed (as in\n+     *                        {@link org.mockito.verification.VerificationAfterDelay}).\n+     */\n+    public VerificationOverTimeImpl(int pollingPeriod, int durationMillis, VerificationMode delegate, boolean returnOnSuccess) {\n+        this.pollingPeriod = pollingPeriod;\n+        this.durationMillis = durationMillis;\n+        this.delegate = delegate;\n+        this.returnOnSuccess = returnOnSuccess;\n+    }\n+\n+    /**\n+     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n+     * before the full duration has passed.\n+     *\n+     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once\n+     * the full duration has passed, the last error returned by the delegate verification mode will be thrown\n+     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known\n+     * to never recover from this situation (e.g. {@link AtMost}).\n+     *\n+     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter\n+     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If\n+     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.\n+     *\n+     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n+     */\n+    public void verify(VerificationData data) {\n+        MockitoAssertionError error = null;\n+        \n+        long startTime = System.currentTimeMillis();\n+        while (System.currentTimeMillis() - startTime <= durationMillis) {\n+            try {\n+                delegate.verify(data);\n+                \n+                if (returnOnSuccess) {\n+                    return;\n+                } else {\n+                    error = null;\n+                }\n+            } catch (MockitoAssertionError e) {\n+                if (canRecoverFromFailure(delegate)) {\n+                    error = e;\n+                    sleep(pollingPeriod);\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+        \n+        if (error != null) {\n+            throw error;\n+        }\n+    }\n+\n+    protected boolean canRecoverFromFailure(VerificationMode verificationMode) {\n+        return !(verificationMode instanceof AtMost || verificationMode instanceof NoMoreInteractions);\n+    }\n+\n+    private void sleep(int sleep) {\n+        try {\n+            Thread.sleep(sleep);\n+        } catch (InterruptedException ie) {\n+            // oups. not much luck.\n+        }\n+    }\n+    \n+    public int getPollingPeriod() {\n+        return pollingPeriod;\n+    }\n+    \n+    public int getDuration() {\n+        return durationMillis;\n+    }\n+    \n+    public VerificationMode getDelegate() {\n+        return delegate;\n+    }\n+    \n+}\n--- a/src/org/mockito/verification/After.java\n+++ b/src/org/mockito/verification/After.java\n package org.mockito.verification;\n \n-import org.mockito.internal.verification.VerificationAfterDelayImpl;\n+import org.mockito.internal.verification.VerificationOverTimeImpl;\n \n /**\n  * See the javadoc for {@link VerificationAfterDelay}\n  * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.\n  * See javadoc for {@link VerificationWithTimeout}\n  */  \n-public class After extends VerificationWrapper<VerificationAfterDelayImpl> implements VerificationAfterDelay {\n+public class After extends VerificationWrapper<VerificationOverTimeImpl> implements VerificationAfterDelay {\n     \n     /**\n      * See the javadoc for {@link VerificationAfterDelay}\n     }\n     \n     public After(int pollingPeriod, int delayMillis, VerificationMode verificationMode) {\n-        super(new VerificationAfterDelayImpl(pollingPeriod, delayMillis, verificationMode));\n+        super(new VerificationOverTimeImpl(pollingPeriod, delayMillis, verificationMode, false));\n     }\n     \n     @Override\n     protected VerificationMode copySelfWithNewVerificationMode(VerificationMode verificationMode) {\n-        return new After(wrappedVerification.getPollingPeriod(), wrappedVerification.getDelay(), verificationMode);\n+        return new After(wrappedVerification.getPollingPeriod(), wrappedVerification.getDuration(), verificationMode);\n     }\n \n }\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n package org.mockito.verification;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.verification.VerificationModeFactory;\n-import org.mockito.internal.verification.VerificationWithTimeoutImpl;\n-\n+import org.mockito.internal.verification.VerificationOverTimeImpl;\n /**\n  * See the javadoc for {@link VerificationWithTimeout}\n  * <p>\n  * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.\n  * See javadoc for {@link VerificationWithTimeout}\n  */\n-public class Timeout extends VerificationWrapper<VerificationWithTimeoutImpl> implements VerificationWithTimeout {\n+public class Timeout extends VerificationWrapper<VerificationOverTimeImpl> implements VerificationWithTimeout {\n     \n     /**\n      * See the javadoc for {@link VerificationWithTimeout}\n      * See the javadoc for {@link VerificationWithTimeout}\n      */\n     Timeout(int pollingPeriod, int millis, VerificationMode delegate) {\n-        super(new VerificationWithTimeoutImpl(pollingPeriod, millis, delegate));\n+        super(new VerificationOverTimeImpl(pollingPeriod, millis, delegate, true));\n     }\n     \n     @Override\n     protected VerificationMode copySelfWithNewVerificationMode(VerificationMode newVerificationMode) {\n-        return new Timeout(wrappedVerification.getPollingPeriod(), wrappedVerification.getTimeout(), newVerificationMode);\n+        return new Timeout(wrappedVerification.getPollingPeriod(), wrappedVerification.getDuration(), newVerificationMode);\n     }\n     \n     public VerificationMode atMost(int maxNumberOfInvocations) {\n--- a/src/org/mockito/verification/VerificationWithTimeout.java\n+++ b/src/org/mockito/verification/VerificationWithTimeout.java\n  * </code></pre>\n  * \n  * This is similar to {@link VerificationAfterDelay after()} except this assertion will immediately pass if it becomes true at any point,\n- * whereas after() will wait the full period (or until the test has definitely failed). Assertions which are consistently expected to be\n- * initially true and potentially become false are deprecated below, and after() should be used instead.\n+ * whereas after() will wait the full period. Assertions which are consistently expected to be initially true and potentially become false \n+ * are deprecated below, and after() should be used instead.\n  * \n  * <p>\n  * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n     \n     private void assertCorrectMode(VerificationMode t, Class<?> expectedType, int expectedTimeout, int expectedPollingPeriod, Class<?> expectedDelegateType) {\n         assertEquals(expectedType, t.getClass());\n-        assertEquals(expectedTimeout, ((Timeout) t).wrappedVerification.getTimeout());\n+        assertEquals(expectedTimeout, ((Timeout) t).wrappedVerification.getDuration());\n         assertEquals(expectedPollingPeriod, ((Timeout) t).wrappedVerification.getPollingPeriod());\n         assertEquals(expectedDelegateType, ((Timeout) t).wrappedVerification.getDelegate().getClass());\n     }", "timestamp": 1381493193, "metainfo": ""}