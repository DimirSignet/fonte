{"sha": "e8dd6d114e332e1c235a30ade1e4bf7ba29661f5", "log": "Further insulation of cglib", "commit": "\n--- a/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n+++ b/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n import java.io.Serializable;\n import java.lang.reflect.Field;\n \n-class CGLIBHacker implements Serializable {\n+class CGLIBHacker {\n \n-    private static final long serialVersionUID = -4389233991416356668L;\n-\n-    public void setMockitoNamingPolicy(MockitoMethodProxy mockitoMethodProxy) {\n+    public void setMockitoNamingPolicy(MethodProxy methodProxy) {\n         try {\n-            MethodProxy methodProxy = mockitoMethodProxy.getMethodProxy();\n             Field createInfoField = reflectOnCreateInfo(methodProxy);\n             createInfoField.setAccessible(true);\n             Object createInfo = createInfoField.get(methodProxy);\n--- a/src/org/mockito/internal/creation/cglib/DelegatingMockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/cglib/DelegatingMockitoMethodProxy.java\n \n import org.mockito.cglib.proxy.MethodProxy;\n \n-class DelegatingMockitoMethodProxy extends AbstractMockitoMethodProxy {\n+class DelegatingMockitoMethodProxy implements MockitoMethodProxy {\n \n     private final MethodProxy methodProxy;\n \n         this.methodProxy = methodProxy;\n     }\n \n-    public MethodProxy getMethodProxy() {\n-        return methodProxy;\n+    public Object invokeSuper(Object target, Object[] arguments) throws Throwable {\n+        return methodProxy.invokeSuper(target, arguments);\n     }\n }\n--- a/src/org/mockito/internal/creation/cglib/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/cglib/MethodInterceptorFilter.java\n \n     private static final long serialVersionUID = 6182795666612683784L;\n     private final InternalMockHandler handler;\n-    CGLIBHacker cglibHacker = new CGLIBHacker();\n     final ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();\n     private final MockCreationSettings mockSettings;\n     private final AcrossJVMSerializationFeature acrossJVMSerializationFeature = new AcrossJVMSerializationFeature();\n         }\n         \n         MockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\n-        cglibHacker.setMockitoNamingPolicy(mockitoMethodProxy);\n+        new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n         \n         MockitoMethod mockitoMethod = createMockitoMethod(method);\n         \n--- a/src/org/mockito/internal/creation/cglib/MockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/cglib/MockitoMethodProxy.java\n  */\n package org.mockito.internal.creation.cglib;\n \n-import org.mockito.cglib.proxy.MethodProxy;\n-\n public interface MockitoMethodProxy {\n-\n     Object invokeSuper(Object target, Object[] arguments) throws Throwable;\n-\n-    MethodProxy getMethodProxy();\n-\n }\n--- a/src/org/mockito/internal/creation/cglib/SerializableMockitoMethodProxy.java\n+++ b/src/org/mockito/internal/creation/cglib/SerializableMockitoMethodProxy.java\n \n import java.io.Serializable;\n \n-class SerializableMockitoMethodProxy extends AbstractMockitoMethodProxy implements Serializable {\n+class SerializableMockitoMethodProxy implements MockitoMethodProxy, Serializable {\n \n     private static final long serialVersionUID = -5337859962876770632L;\n     private final Class<?> c1;\n     }\n \n     public MethodProxy getMethodProxy() {\n-        if (methodProxy == null)\n+        if (methodProxy == null) {\n             methodProxy = MethodProxy.create(c1, c2, desc, name, superName);\n+        }\n         return methodProxy;\n     }\n+\n+    public Object invokeSuper(Object target, Object[] arguments) throws Throwable {\n+        return methodProxy.invokeSuper(target, arguments);\n+    }\n }\n--- a/test/org/mockito/internal/creation/cglib/CGLIBHackerTest.java\n+++ b/test/org/mockito/internal/creation/cglib/CGLIBHackerTest.java\n \n import org.junit.Test;\n import org.mockito.cglib.core.NamingPolicy;\n+import org.mockito.cglib.proxy.MethodProxy;\n import org.mockitoutil.TestBase;\n import org.powermock.reflect.Whitebox;\n \n     @Test\n     public void shouldSetMockitoNamingPolicy() throws Exception {\n         //given\n-        MockitoMethodProxy methodProxy = new MethodProxyBuilder().build();\n+        MethodProxy methodProxy = MethodProxy.create(null, null, null, null, null);\n         \n         //when\n         new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n     @Test\n     public void shouldSetMockitoNamingPolicyEvenIfMethodProxyIsProxied() throws Exception {\n         //given\n-        MockitoMethodProxy proxiedMethodProxy = spy(new MethodProxyBuilder().build());\n+        MethodProxy proxiedMethodProxy = spy(MethodProxy.create(null, null, null, null, null));\n         \n         //when\n         new CGLIBHacker().setMockitoNamingPolicy(proxiedMethodProxy);\n--- a/test/org/mockito/internal/creation/cglib/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/cglib/MethodInterceptorFilterTest.java\n \n     InternalMockHandler handler = Mockito.mock(InternalMockHandler.class);\n     MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings());\n-\n-    @Before\n-    public void setUp() {\n-        filter.cglibHacker = Mockito.mock(CGLIBHacker.class);        \n-    }\n \n     @Test\n     public void shouldBeSerializable() throws Exception {", "timestamp": 1413587277, "metainfo": ""}