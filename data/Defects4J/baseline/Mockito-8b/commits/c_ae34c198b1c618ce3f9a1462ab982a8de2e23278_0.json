{"sha": "ae34c198b1c618ce3f9a1462ab982a8de2e23278", "log": "added feasibility to stub toString() - can be used for debugging purposes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40491", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.ListUtil;\n+import org.mockito.internal.util.ListUtil.Filter;\n+\n+\n+public class RegisteredInvocations {\n+\n+    private final LinkedList<Invocation> invocations = new LinkedList<Invocation>();\n+    \n+    public void add(Invocation invocation) {\n+        invocations.add(invocation);\n+    }\n+\n+    public void removeLast() {\n+        invocations.removeLast();\n+    }\n+\n+    public List<Invocation> getVerifiableInvocations() {\n+        return ListUtil.filter(invocations, new RemoveToString());\n+    }\n+    \n+    private static class RemoveToString implements Filter<Invocation> {\n+        public boolean isOut(Invocation invocation) {\n+            return invocation.isToString();\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n  */\n package org.mockito.internal.verification;\n \n-import java.util.LinkedList;\n import java.util.List;\n \n import org.mockito.internal.invocation.GlobalInvocationsFinder;\n \n public class VerifyingRecorder {\n \n-    private LinkedList<Invocation> registeredInvocations = new LinkedList<Invocation>();\n+    private RegisteredInvocations registeredInvocations = new RegisteredInvocations();\n \n     private final List<? extends Verifier> verifiers;\n     private final GlobalInvocationsFinder globalInvocationsFinder;\n     }\n \n     public void recordInvocation(Invocation invocation) {\n-        if (!invocation.isToString()) {\n-            this.registeredInvocations.add(invocation);\n-        }\n+        registeredInvocations.add(invocation);\n     }\n \n     public void eraseLastInvocation() {\n     }\n \n     public List<Invocation> getRegisteredInvocations() {\n-        return registeredInvocations;\n+        return registeredInvocations.getVerifiableInvocations();\n     }\n \n     public void verify(VerificationModeImpl mode) {\n         if (mode.inOrderMode()) {\n             invocations = globalInvocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedInOrder());\n         } else {\n-            invocations = registeredInvocations;\n+            invocations = getRegisteredInvocations();\n         }\n \n         for (Verifier verifier : verifiers) {\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n     }\n     \n     @Test\n-    public void shouldNotRecordToStringMethod() throws Exception {\n-        Invocation invocation = new InvocationBuilder().method(\"toString\").toInvocation();\n-        recorder.recordInvocation(invocation);\n-        assertTrue(recorder.getRegisteredInvocations().isEmpty());\n+    public void shouldNotReturnToStringMethod() throws Exception {\n+        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n+        Invocation simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n+        \n+        recorder.recordInvocation(toString);\n+        recorder.recordInvocation(simpleMethod);\n+        \n+        assertTrue(recorder.getRegisteredInvocations().contains(simpleMethod));\n+        assertFalse(recorder.getRegisteredInvocations().contains(toString));\n     }\n     \n     class VerifierStub implements Verifier {\n--- /dev/null\n+++ b/test/org/mockitousage/ConfiguringReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+\n+public class ConfiguringReturnValuesTest extends TestBase {\n+\n+    @Ignore\n+    @Test\n+    public void shouldAllowConfiguringDefaultStubs() {\n+       fail();\n+    }\n+}\n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n     }\n     \n     @Test\n+    public void shouldAllowStubbingToString() throws Exception {\n+        IMethods mockTwo = mock(IMethods.class);\n+        stub(mockTwo.toString()).toReturn(\"test\");\n+        \n+        assertContains(\"Mock for IMethods\", mock.toString());\n+        assertEquals(\"test\", mockTwo.toString());\n+    }\n+    \n+    @Test\n     public void shouldStubbingWithThrowableFailVerification() {\n         stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n         stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(\"two\");", "timestamp": 1206288748, "metainfo": ""}