{"sha": "264b7307b34a5c9ab80c52166c7b555ac580b802", "log": "Merged the stack trace cleaning extension point work. Not sure why another commit was need. Looks like me or hg got confused.", "commit": "\n--- a/src/org/mockito/exceptions/base/MockitoAssertionError.java\n+++ b/src/org/mockito/exceptions/base/MockitoAssertionError.java\n \n package org.mockito.exceptions.base;\n \n-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;\n \n \n \n--- a/src/org/mockito/exceptions/base/MockitoException.java\n+++ b/src/org/mockito/exceptions/base/MockitoException.java\n \n package org.mockito.exceptions.base;\n \n-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;\n \n \n public class MockitoException extends RuntimeException {\n--- /dev/null\n+++ b/src/org/mockito/exceptions/stacktrace/StackTraceCleaner.java\n+package org.mockito.exceptions.stacktrace;\n+\n+import org.mockito.Incubating;\n+\n+/**\n+ * Decides if particular StackTraceElement is excluded from the human-readable stack trace output.\n+ * Mockito stack trace filtering mechanism uses this information.\n+ * <p>\n+ * Excluding an element will make it not show in the cleaned stack trace.\n+ * Not-excluding an element does not guarantee it will be shown\n+ * (e.g. it depends on the implementation of\n+ * Mockito internal {@link org.mockito.internal.exceptions.stacktrace.StackTraceFilter}).\n+ * <p>\n+ * The implementations are required to be thread safe. For example, make them stateless.\n+ * <p>\n+ * See the default implementation: {@link org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner}.\n+ *\n+ */\n+@Incubating\n+public interface StackTraceCleaner {\n+\n+    /**\n+     * Decides if element is excluded.\n+     *\n+     * @param candidate element of the actual stack trace\n+     * @return whether the element should be excluded from cleaned stack trace.\n+     */\n+    boolean isOut(StackTraceElement candidate);\n+}\n--- a/src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java\n+++ b/src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java\n package org.mockito.exceptions.verification.junit;\n \n import junit.framework.ComparisonFailure;\n-\n-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;\n import org.mockito.internal.util.RemoveFirstLine;\n \n \n--- a/src/org/mockito/internal/configuration/ClassPathLoader.java\n+++ b/src/org/mockito/internal/configuration/ClassPathLoader.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.configuration;\n \n import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.MockitoConfigurationException;\n import org.mockito.internal.creation.CglibMockMaker;\n+import org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider;\n import org.mockito.plugins.MockMaker;\n+import org.mockito.plugins.StackTraceCleanerProvider;\n \n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n+import java.io.*;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collections;\n  */\n public class ClassPathLoader {\n     private static final MockMaker mockMaker = findPlatformMockMaker();\n+    private static final StackTraceCleanerProvider stackTraceCleanerProvider =\n+            findPluginImplementation(StackTraceCleanerProvider.class, new DefaultStackTraceCleanerProvider());\n     public static final String MOCKITO_CONFIGURATION_CLASS_NAME = \"org.mockito.configuration.MockitoConfiguration\";\n \n     /**\n         return mockMaker;\n     }\n \n+    public static StackTraceCleanerProvider getStackTraceCleanerProvider() {\n+        return stackTraceCleanerProvider;\n+    }\n+\n     /**\n      * Scans the classpath to find a mock maker plugin if one is available,\n      * allowing mockito to run on alternative platforms like Android.\n      */\n     static MockMaker findPlatformMockMaker() {\n-        for (MockMaker mockMaker : loadImplementations(MockMaker.class)) {\n-            return mockMaker; // return the first one service loader finds (if any)\n+        return findPluginImplementation(MockMaker.class, new CglibMockMaker());\n+    }\n+\n+    static <T> T findPluginImplementation(Class<T> pluginType, T defaultPlugin) {\n+        for (T plugin : loadImplementations(pluginType)) {\n+            return plugin; // return the first one service loader finds (if any)\n         }\n-        return new CglibMockMaker(); // default implementation\n+        return defaultPlugin; // default implementation\n     }\n \n     /**\n--- a/src/org/mockito/internal/debugging/LocationImpl.java\n+++ b/src/org/mockito/internal/debugging/LocationImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n+import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;\n+import org.mockito.invocation.Location;\n+\n import java.io.Serializable;\n-\n-import org.mockito.internal.exceptions.base.StackTraceFilter;\n-import org.mockito.invocation.Location;\n \n public class LocationImpl implements Location, Serializable {\n \n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.exceptions.stacktrace;\n+\n+import org.mockito.configuration.IMockitoConfiguration;\n+import org.mockito.internal.configuration.GlobalConfiguration;\n+\n+import java.io.Serializable;\n+\n+public class ConditionalStackTraceFilter implements Serializable {\n+    static final long serialVersionUID = -8085849703510292641L;\n+    \n+    private IMockitoConfiguration config = new GlobalConfiguration();\n+    private StackTraceFilter filter = new StackTraceFilter();\n+    \n+    public void filter(Throwable throwable) {\n+        if (!config.cleansStackTrace()) {\n+            return;\n+        }\n+        StackTraceElement[] filtered = filter.filter(throwable.getStackTrace(), true);\n+        throwable.setStackTrace(filtered);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java\n+package org.mockito.internal.exceptions.stacktrace;\n+\n+import org.mockito.exceptions.stacktrace.StackTraceCleaner;\n+\n+/**\n+* by Szczepan Faber, created at: 7/29/12\n+*/\n+public class DefaultStackTraceCleaner implements StackTraceCleaner {\n+    public boolean isOut(StackTraceElement e) {\n+        boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n+        boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n+        boolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\n+        boolean isInternalRunner = e.getClassName().startsWith(\"org.mockito.internal.runners.\");\n+        return (fromMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java\n+package org.mockito.internal.exceptions.stacktrace;\n+\n+import org.mockito.exceptions.stacktrace.StackTraceCleaner;\n+import org.mockito.plugins.StackTraceCleanerProvider;\n+\n+/**\n+ * by Szczepan Faber, created at: 7/29/12\n+ */\n+public class DefaultStackTraceCleanerProvider implements StackTraceCleanerProvider {\n+\n+    public StackTraceCleaner getStackTraceCleaner(StackTraceCleaner defaultCleaner) {\n+        return defaultCleaner;\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.exceptions.stacktrace;\n+\n+import org.mockito.exceptions.stacktrace.StackTraceCleaner;\n+import org.mockito.internal.configuration.ClassPathLoader;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class StackTraceFilter implements Serializable {\n+\n+    static final long serialVersionUID = -5499819791513105700L;\n+\n+    private static StackTraceCleaner cleaner =\n+            ClassPathLoader.getStackTraceCleanerProvider().getStackTraceCleaner(new DefaultStackTraceCleaner());\n+    \n+    /**\n+     * Example how the filter works (+/- means good/bad):\n+     * [a+, b+, c-, d+, e+, f-, g+] -> [a+, b+, g+]\n+     * Basically removes all bad from the middle. If any good are in the middle of bad those are also removed. \n+     */\n+    public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n+        //TODO: after 1.8 profile\n+        List<StackTraceElement> unfilteredStackTrace = Arrays.asList(target);\n+        \n+        int lastBad = -1;\n+        int firstBad = -1;\n+        for (int i = 0; i < unfilteredStackTrace.size(); i++) {\n+            if (!cleaner.isOut(unfilteredStackTrace.get(i))) {\n+                continue;\n+            }\n+            lastBad = i;\n+            if (firstBad == -1) {\n+                firstBad = i;\n+            }\n+        }\n+        \n+        List<StackTraceElement> top;\n+        if (keepTop && firstBad != -1) {\n+            top = unfilteredStackTrace.subList(0, firstBad);\n+        } else {\n+            top = new LinkedList<StackTraceElement>();\n+        }\n+        \n+        List<StackTraceElement> bottom = unfilteredStackTrace.subList(lastBad + 1, unfilteredStackTrace.size());\n+        List<StackTraceElement> filtered = new ArrayList<StackTraceElement>(top);\n+        filtered.addAll(bottom);\n+        return filtered.toArray(new StackTraceElement[]{});\n+    }\n+}\n--- a/src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java\n+++ b/src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation.realmethod;\n \n+import org.mockito.internal.creation.MockitoMethodProxy;\n+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;\n+\n import java.io.Serializable;\n-\n-import org.mockito.internal.creation.MockitoMethodProxy;\n-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n \n public class FilteredCGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy, Serializable {\n \n--- a/src/org/mockito/internal/stubbing/answers/ThrowsException.java\n+++ b/src/org/mockito/internal/stubbing/answers/ThrowsException.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.answers;\n \n-import java.io.Serializable;\n-\n-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n+\n+import java.io.Serializable;\n \n public class ThrowsException implements Answer<Object>, Serializable {\n \n--- a/src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java\n+++ b/src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java\n \n package org.mockito.internal.stubbing.answers;\n \n-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.objenesis.ObjenesisHelper;\n--- /dev/null\n+++ b/src/org/mockito/plugins/StackTraceCleanerProvider.java\n+package org.mockito.plugins;\n+\n+import org.mockito.Incubating;\n+import org.mockito.exceptions.stacktrace.StackTraceCleaner;\n+\n+/**\n+ * An extension point to register custom {@link StackTraceCleaner}.\n+ * You can replace Mockito's default StackTraceCleaner.\n+ * You can also 'enhance' Mockito's default behavior\n+ * because the default cleaner is passed as parameter to the method.\n+ * <p>\n+ * For more information how to register custom StackTraceCleaner\n+ * please refer to the documentation of {@link MockMaker}.\n+ * We will update the documentation shortly.\n+ * <p>\n+ * See the default implementation: {@link org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider}\n+ */\n+@Incubating\n+public interface StackTraceCleanerProvider {\n+\n+    /**\n+     * Allows configuring custom StackTraceCleaner.\n+     *\n+     * @param defaultCleaner - Mockito's default StackTraceCleaner\n+     * @return StackTraceCleaner to use\n+     */\n+    StackTraceCleaner getStackTraceCleaner(StackTraceCleaner defaultCleaner);\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.exceptions.stacktrace;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.base.TraceBuilder;\n+import org.mockito.internal.configuration.ConfigurationAccess;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockitoutil.ExtraMatchers.hasOnlyThoseClassesInStackTrace;\n+\n+public class ConditionalStackTraceFilterTest extends TestBase {\n+    \n+    private ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\n+\n+    @Test\n+    public void shouldNotFilterWhenConfigurationSaysNo() {\n+        ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n+        \n+        Throwable t = new TraceBuilder().classes(\n+                \"org.test.MockitoSampleTest\",\n+                \"org.mockito.Mockito\" \n+        ).toThrowable();\n+        \n+        filter.filter(t);\n+        \n+        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.mockito.Mockito\", \"org.test.MockitoSampleTest\"));\n+    }\n+\n+    @Test\n+    public void shouldFilterWhenConfigurationSaysYes() {\n+        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        \n+        Throwable t = new TraceBuilder().classes(\n+                \"org.test.MockitoSampleTest\",\n+                \"org.mockito.Mockito\" \n+        ).toThrowable();\n+        \n+        filter.filter(t);\n+        \n+        assertThat(t, hasOnlyThoseClassesInStackTrace(\"org.test.MockitoSampleTest\"));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.exceptions.stacktrace;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.base.TraceBuilder;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses;\n+\n+public class StackTraceFilterTest extends TestBase {\n+    \n+    private StackTraceFilter filter = new StackTraceFilter();\n+    \n+    @Test\n+    public void shouldFilterOutCglibGarbage() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+            \"MockitoExampleTest\",\n+            \"List$$EnhancerByMockitoWithCGLIB$$2c406024\"\n+        ).toTraceArray();\n+        \n+        StackTraceElement[] filtered = filter.filter(t, false);\n+        \n+        assertThat(filtered, hasOnlyThoseClasses(\"MockitoExampleTest\"));\n+    }\n+    \n+    @Test\n+    public void shouldFilterOutMockitoPackage() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+            \"org.test.MockitoSampleTest\",\n+            \"org.mockito.Mockito\"\n+        ).toTraceArray();\n+            \n+        StackTraceElement[] filtered = filter.filter(t, false);\n+        \n+        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\"));\n+    }\n+    \n+    @Test\n+    public void shouldFilterOutTracesMiddleBadTraces() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+                \"org.test.MockitoSampleTest\",\n+                \"org.test.TestSupport\",\n+                \"org.mockito.Mockito\", \n+                \"org.test.TestSupport\",\n+                \"org.mockito.Mockito\"\n+        ).toTraceArray();\n+        \n+        StackTraceElement[] filtered = filter.filter(t, false);\n+        \n+        assertThat(filtered, hasOnlyThoseClasses(\"org.test.TestSupport\", \"org.test.MockitoSampleTest\"));\n+    }\n+    \n+    @Test\n+    public void shouldKeepRunners() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+                \"org.mockito.runners.Runner\",\n+                \"junit.stuff\",\n+                \"org.test.MockitoSampleTest\",\n+                \"org.mockito.Mockito\"\n+        ).toTraceArray();\n+        \n+        StackTraceElement[] filtered = filter.filter(t, false);\n+        \n+        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"junit.stuff\", \"org.mockito.runners.Runner\"));\n+    }\n+    \n+    @Test\n+    public void shouldKeepInternalRunners() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+                \"org.mockito.internal.runners.Runner\",\n+                \"org.test.MockitoSampleTest\"\n+        ).toTraceArray();\n+        \n+        StackTraceElement[] filtered = filter.filter(t, false);\n+        \n+        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"org.mockito.internal.runners.Runner\"));\n+    }\n+    \n+    @Test\n+    public void shouldStartFilteringAndKeepTop() {\n+        //given\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+                \"org.test.Good\",\n+                \"org.mockito.internal.Bad\",\n+                \"org.test.MockitoSampleTest\"\n+        ).toTraceArray();\n+        \n+        //when\n+        StackTraceElement[] filtered = filter.filter(t, true);\n+        \n+        //then\n+        assertThat(filtered, hasOnlyThoseClasses(\"org.test.MockitoSampleTest\", \"org.test.Good\"));\n+    }\n+\n+    @Test\n+    public void shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions() {\n+        StackTraceElement[] t = new TraceBuilder().classes(\n+                \"org.good.Trace\",\n+                \"org.yet.another.good.Trace\",\n+                \"org.mockito.internal.to.be.Filtered\",\n+                \"org.test.MockitoSampleTest\"\n+        ).toTraceArray();\n+        \n+        StackTraceElement[] filtered = filter.filter(t, true);\n+        \n+        assertThat(filtered, hasOnlyThoseClasses(\n+                \"org.test.MockitoSampleTest\",\n+                \"org.yet.another.good.Trace\",\n+                \"org.good.Trace\"\n+                ));\n+    }\n+    \n+    @Test\n+    public void shouldReturnEmptyArrayWhenInputIsEmpty() throws Exception {\n+        //when\n+        StackTraceElement[] filtered = filter.filter(new StackTraceElement[0], false);\n+        //then\n+        assertEquals(0, filtered.length);\n+    }\n+}\n--- a/test/org/mockitousage/internal/debugging/LocationImplTest.java\n+++ b/test/org/mockitousage/internal/debugging/LocationImplTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.internal.debugging;\n \n import org.junit.Test;\n import org.mockito.internal.debugging.LocationImpl;\n-import org.mockito.internal.exceptions.base.StackTraceFilter;\n+import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"serial\")", "timestamp": 1343915222, "metainfo": ""}