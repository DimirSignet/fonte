{"sha": "bb4a1660d133f256e43fd7938b9b8fced112868d", "log": "In order to avoid using internal classes from mockitousage package and therefore make it easier to test osgi bundle I moved a test class to a better place In order to make the bundle work properly in osgi environment I moved all the required api interfaces to packages that are externally visible  --HG-- rename : src/org/mockito/internal/progress/DeprecatedOngoingStubbing.java => src/org/mockito/stubbing/DeprecatedOngoingStubbing.java rename : src/org/mockito/internal/progress/NewOngoingStubbing.java => src/org/mockito/stubbing/NewOngoingStubbing.java rename : src/org/mockito/internal/stubbing/Stubber.java => src/org/mockito/stubbing/Stubber.java rename : src/org/mockito/internal/stubbing/VoidMethodStubbable.java => src/org/mockito/stubbing/VoidMethodStubbable.java rename : test/org/mockitousage/misuse/InvalidStateDetectionTest.java => test/org/mockito/internal/InvalidStateDetectionTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401515", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n  */\n package org.mockito;\n \n-import org.mockito.internal.progress.NewOngoingStubbing;\n-import org.mockito.internal.stubbing.Stubber;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.Stubber;\n \n /**\n  * Behavior Driven Development style of stubbing that integrates nicely with //given //when //then comments.\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n-import org.mockito.internal.progress.NewOngoingStubbing;\n-import org.mockito.internal.stubbing.Stubber;\n-import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter;\n import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.internal.stubbing.answers.DoesNothing;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.Stubber;\n+import org.mockito.stubbing.VoidMethodStubbable;\n \n /**\n  * <p align=\"left\"><img src=\"logo.jpg\"/></p>\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.progress.SequenceNumber;\n import org.mockito.internal.stubbing.MockitoStubber;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n-import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.util.MockName;\n import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.VoidMethodStubbable;\n \n /**\n  * Invocation handler set on mock objects.\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n-import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.internal.progress.OngoingStubbing;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n-import org.mockito.internal.stubbing.Stubber;\n import org.mockito.internal.stubbing.StubberImpl;\n-import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.NewOngoingStubbing;\n+import org.mockito.stubbing.Stubber;\n+import org.mockito.stubbing.VoidMethodStubbable;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n--- a/src/org/mockito/internal/stubbing/BaseStubbing.java\n+++ b/src/org/mockito/internal/stubbing/BaseStubbing.java\n  */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n-import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.NewOngoingStubbing;\n \n public abstract class BaseStubbing<T> implements NewOngoingStubbing<T>, DeprecatedOngoingStubbing<T> {\n     public NewOngoingStubbing<T> thenReturn(T value) {\n--- a/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n+++ b/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n  */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n-import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.NewOngoingStubbing;\n \n public class ConsecutiveStubbing<T> extends BaseStubbing<T> {\n     private final MockitoStubber mockitoStubber;\n--- a/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n+++ b/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n  */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n-import org.mockito.internal.progress.NewOngoingStubbing;\n import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.NewOngoingStubbing;\n \n public class OngoingStubbingImpl<T> extends BaseStubbing<T> {\n     \n--- a/src/org/mockito/internal/stubbing/StubberImpl.java\n+++ b/src/org/mockito/internal/stubbing/StubberImpl.java\n import org.mockito.internal.stubbing.answers.ThrowsException;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.Stubber;\n \n @SuppressWarnings(\"unchecked\")\n public class StubberImpl implements Stubber {\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java\n import org.mockito.internal.stubbing.answers.DoesNothing;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.VoidMethodStubbable;\n \n public class VoidMethodStubbableImpl<T> implements VoidMethodStubbable<T> {\n     private final T mock;\n--- /dev/null\n+++ b/src/org/mockito/stubbing/DeprecatedOngoingStubbing.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.progress.OngoingStubbing;\n+\n+/**\n+ * Stubs a method call with return value or an exception. E.g:\n+ *\n+ * <pre>\n+ * stub(mock.someMethod()).toReturn(10);\n+ *\n+ * //you can use flexible argument matchers, e.g:\n+ * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);\n+ *\n+ * //setting exception to be thrown:\n+ * stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n+ *\n+ * //you can stub with different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.\n+ * stub(mock.someMethod(\"some arg\"))\n+ *  .toThrow(new RuntimeException())\n+ *  .toReturn(\"foo\");\n+ *\n+ * </pre>\n+ *\n+ * See examples in javadoc for {@link Mockito#stub}\n+ */\n+public interface DeprecatedOngoingStubbing<T> extends OngoingStubbing {\n+\n+    /**\n+     * Set a return value for the stubbed method. E.g:\n+     * <pre>\n+     * stub(mock.someMethod()).toReturn(10);\n+     * </pre>\n+     *\n+     * See examples in javadoc for {@link Mockito#stub}\n+     *\n+     * @param value return value\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    DeprecatedOngoingStubbing<T> toReturn(T value);\n+\n+    /**\n+     * Set a Throwable to be thrown when the stubbed method is called. E.g:\n+     * <pre>\n+     * stub(mock.someMethod()).toThrow(new RuntimeException());\n+     * </pre>\n+     *\n+     * If throwable is a checked exception then it has to\n+     * match one of the checked exceptions of method signature.\n+     *\n+     * See examples in javadoc for {@link Mockito#stub}\n+     *\n+     * @param throwable to be thrown on method invocation\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    DeprecatedOngoingStubbing<T> toThrow(Throwable throwable);\n+\n+    /**\n+     * Set a generic Answer for the stubbed method. E.g:\n+     * <pre>\n+     * stub(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {\n+     *     public Integer answer(InvocationOnMock invocation) throws Throwable {\n+     *         return (Integer) invocation.getArguments()[0];\n+     *     }\n+     * }\n+     * </pre>\n+     *\n+     * @param answer the custom answer to execute.\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer);\n+}\n--- /dev/null\n+++ b/src/org/mockito/stubbing/NewOngoingStubbing.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.progress.OngoingStubbing;\n+\n+/**\n+ * Simply put: \"<b>When</b> the x method is called <b>then</b> return y\". E.g:\n+ *\n+ * <pre>\n+ * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);\n+ *\n+ * //you can use flexible argument matchers, e.g:\n+ * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);\n+ *\n+ * //setting exception to be thrown:\n+ * when(mock.someMethod(\"some arg\")).thenThrow(new RuntimeException());\n+ *\n+ * //you can set different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: thenReturn(\"foo\")) determines the behavior of further consecutive calls.\n+ * when(mock.someMethod(\"some arg\"))\n+ *  .thenThrow(new RuntimeException())\n+ *  .thenReturn(\"foo\");\n+ * \n+ * //There is a shorter way of consecutive stubbing:\n+ * when(mock.someMethod()).thenReturn(1,2,3);\n+ * when(mock.otherMethod()).thenThrow(exc1, exc2);\n+ * </pre>\n+ *\n+ * See examples in javadoc for {@link Mockito#when}\n+ */\n+public interface NewOngoingStubbing<T> extends OngoingStubbing {\n+\n+    /**\n+     * Sets a return value to be returned when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenReturn(10);\n+     * </pre>\n+     *\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param value return value\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenReturn(T value);\n+\n+    /**\n+     * Sets consecutive return values to be returned when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenReturn(1, 2, 3);\n+     * </pre>\n+     *\n+     * Last return value in the sequence (in example: 3) determines the behavior of further consecutive calls.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param value first return value\n+     * @param values next return values\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenReturn(T value, T... values);\n+\n+    /**\n+     * Sets Throwable objects to be thrown when the method is called. E.g:\n+     * <pre>\n+     * when(mock.someMethod()).thenThrow(new RuntimeException());\n+     * </pre>\n+     *\n+     * If throwables contain a checked exception then it has to\n+     * match one of the checked exceptions of method signature.\n+     * <p>\n+     * You can specify throwables to be thrown for consecutive calls. \n+     * In that case the last throwable determines the behavior of further consecutive calls.\n+     * <p>\n+     * if throwable is null then exception will be thrown.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @param throwables to be thrown on method invocation\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenThrow(Throwable... throwables);\n+\n+    /**     \n+     * Sets the real implementation to be called when the method is called on a mock object.\n+     * <p>\n+     * As usual you are going to read <b>the partial mock warning</b>:\n+     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n+     * How does partial mock fit into this paradigm? Well, it just doesn't... \n+     * Partial mock usually means that the complexity has been moved to a different method on the same object.\n+     * In most cases, this is not the way you want to design your application.\n+     * <p>\n+     * However, there are rare cases when partial mocks come handy: \n+     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n+     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n+     * <pre>\n+     *   // someMethod() must be safe (e.g. doesn't throw, doesn't have dependencies to the object state, etc.)\n+     *   // if it isn't safe then you will have trouble stubbing it using this api. Use Mockito.doCallRealMethod() instead. \n+     *   when(mock.someMethod()).thenCallRealMethod();\n+     *   \n+     *   // calls real method:\n+     *   mock.someMethod();\n+     *   \n+     * </pre>\n+     * See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks. \n+     * <b>Mockito.spy() is a recommended way of creating partial mocks.</b> \n+     * The reason is it guarantees real methods are called against correctly constructed object because you're responsible for constructing the object passed to spy() method.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#when}\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenCallRealMethod();\n+\n+    /**\n+     * Sets a generic Answer for the method. E.g:\n+     * <pre>\n+     * when(mock.someMethod(10)).thenAnswer(new Answer&lt;Integer&gt;() {\n+     *     public Integer answer(InvocationOnMock invocation) throws Throwable {\n+     *         return (Integer) invocation.getArguments()[0];\n+     *     }\n+     * }\n+     * </pre>\n+     *\n+     * @param answer the custom answer to execute.\n+     *\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n+     */\n+    NewOngoingStubbing<T> thenAnswer(Answer<?> answer);\n+}\n--- /dev/null\n+++ b/src/org/mockito/stubbing/Stubber.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing;\n+\n+import org.mockito.Mockito;\n+\n+/**\n+ * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style\n+ * <p> \n+ * Example:\n+ * <pre>\n+ *   doThrow(new RuntimeException()).when(mockedList).clear();\n+ *   \n+ *   //following throws RuntimeException:\n+ *   mockedList.clear();\n+ * </pre>\n+ * \n+ * Also useful when stubbing consecutive calls:\n+ * \n+ * <pre>\n+ *   doThrow(new RuntimeException(\"one\")).\n+ *   doThrow(new RuntimeException(\"two\"))\n+ *   .when(mock).someVoidMethod();\n+ * </pre>\n+ * \n+ * Read more about those methods:\n+ * <p>\n+ * {@link Mockito#doThrow(Throwable)}\n+ * <p>\n+ * {@link Mockito#doAnswer(Answer)}\n+ * <p>\n+ * {@link Mockito#doNothing()}\n+ * <p>\n+ * {@link Mockito#doReturn(Object)}\n+ * <p>\n+ * \n+ * See examples in javadoc for {@link Mockito}\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public interface Stubber {\n+\n+    /**\n+     * Allows to choose a method when stubbing in doThrow()|doAnswer()|doNothing()|doReturn() style\n+     * <p> \n+     * Example:\n+     * <pre>\n+     *   doThrow(new RuntimeException())\n+     *   .when(mockedList).clear();\n+     *   \n+     *   //following throws RuntimeException:\n+     *   mockedList.clear();\n+     * </pre>\n+     * \n+     * Read more about those methods:\n+     * <p>\n+     * {@link Mockito#doThrow(Throwable)}\n+     * <p>\n+     * {@link Mockito#doAnswer(Answer)}\n+     * <p>\n+     * {@link Mockito#doNothing()}\n+     * <p>\n+     * {@link Mockito#doReturn(Object)}\n+     * <p>\n+     * \n+     *  See examples in javadoc for {@link Mockito}\n+     * \n+     * @param mock\n+     * @return select method for stubbing\n+     */\n+    <T> T when(T mock);\n+\n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable)} style:\n+     * <pre>\n+     *   doThrow(new RuntimeException(\"one\")).\n+     *   doThrow(new RuntimeException(\"two\"))\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n+     * See javadoc for {@link Mockito#doThrow(Throwable)}\n+     * \n+     * @param toBeThrown to be thrown when the stubbed method is called\n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doThrow(Throwable toBeThrown);\n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:\n+     * <pre>\n+     *   doAnswer(answerOne).\n+     *   doAnswer(answerTwo)\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n+     * See javadoc for {@link Mockito#doAnswer(Answer)}\n+     * \n+     * @param answer to answer when the stubbed method is called\n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doAnswer(Answer answer);    \n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:\n+     * <pre>\n+     *   doNothing().\n+     *   doThrow(new RuntimeException(\"two\"))\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n+     * See javadoc for {@link Mockito#doNothing()}\n+     * \n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doNothing();\n+    \n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.\n+     * <p>\n+     * See javadoc for {@link Mockito#doReturn(Object)}\n+     * \n+     * @param toBeReturned to be returned when the stubbed method is called\n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doReturn(Object toBeReturned);\n+}\n--- /dev/null\n+++ b/src/org/mockito/stubbing/VoidMethodStubbable.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing;\n+\n+import org.mockito.Mockito;\n+\n+/**\n+ * Stubs void method with an exception. E.g:\n+ *\n+ * <pre>\n+ * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+ *\n+ * //you can stub with different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.\n+ * stubVoid(mock)\n+ *  .toThrow(new RuntimeException())\n+ *  .toReturn()\n+ *  .on().someMethod();\n+ * </pre>\n+ *\n+ * See examples in javadoc for {@link Mockito#stubVoid}\n+ */\n+//TODO: needs to go to exported package\n+public interface VoidMethodStubbable<T> {\n+\n+    /**\n+     * Stubs void method with an exception. E.g:\n+     *\n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+     * </pre>\n+     *\n+     * If throwable is a checked exception then it has to\n+     * match one of the checked exceptions of method signature.\n+     *\n+     * See examples in javadoc for {@link Mockito#stubVoid}\n+     *\n+     * @param throwable to be thrown on method invocation\n+     *\n+     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\n+     */\n+    VoidMethodStubbable<T> toThrow(Throwable throwable);\n+\n+    /**\n+     * Stubs void method to 'just return' (e.g. to <b>not</b> to throw any exception)\n+     * <p>\n+     * <b>Only use this method if you're stubbing consecutive calls.</b>\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * stubVoid(mock)\n+     *   .toReturn()\n+     *   .toThrow(new RuntimeException())\n+     *   .on().foo(10);\n+     * </pre>\n+     * <ul>\n+     * <li>first time foo(10) is called the mock will 'just return' (e.g. don't throw any exception)</li>\n+     * <li>second time foo(10) is called the mock will throw RuntimeException</li>\n+     * <li>every consecutive time foo(10) is called the mock will throw RuntimeException</li>\n+     * </ul>\n+     * <p>\n+     * See examples in javadoc for {@link Mockito#stubVoid}\n+     *\n+     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\n+     */\n+    VoidMethodStubbable<T> toReturn();\n+\n+    /**\n+     * Stubs a void method with generic {@link Answer}\n+     * <p>\n+     * For Example:\n+     * <pre>\n+     * stubVoid(mock)\n+     *   .toAnswer(new Answer() {\n+     *                 public Object answer(InvocationOnMOck invocation) {\n+     *                     Visitor v = (Visitor) invocation.getArguments()[0];\n+     *                     v.visitMock(invocation.getMock());\n+     *\n+     *                     return null;\n+     *                 }\n+     *             })\n+     *    .on().accept(any());\n+     * </pre>\n+     *\n+     * @param answer the custom answer to execute.\n+     *\n+     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\n+     */\n+    VoidMethodStubbable<T> toAnswer(Answer<?> answer);\n+\n+    /**\n+     * Choose void method for stubbing. E.g:\n+     *\n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n+     * </pre>\n+     *\n+     * See examples in javadoc for {@link Mockito#stubVoid}\n+     *\n+     * @return mock object itself\n+     */\n+    T on();\n+}\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n import org.mockito.exceptions.base.MockitoExceptionTest;\n import org.mockito.internal.AllInvocationsFinderTest;\n+import org.mockito.internal.InvalidStateDetectionTest;\n import org.mockito.internal.MockHandlerTest;\n import org.mockito.internal.creation.jmock.ClassImposterizerTest;\n import org.mockito.internal.invocation.InvocationMatcherTest;\n import org.mockitousage.matchers.InvalidUseOfMatchersTest;\n import org.mockitousage.matchers.MatchersTest;\n import org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest;\n-import org.mockitousage.misuse.InvalidStateDetectionTest;\n import org.mockitousage.misuse.InvalidUsageTest;\n import org.mockitousage.puzzlers.BridgeMethodPuzzleTest;\n import org.mockitousage.puzzlers.OverloadingPuzzleTest;\n--- /dev/null\n+++ b/test/org/mockito/internal/InvalidStateDetectionTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.StateMaster;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n+import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+/**\n+ * invalid state happens if:\n+ * \n+ *    -unfinished stubbing\n+ *    -unfinished stubVoid\n+ *    -unfinished doReturn()\n+ *    -stubbing without actual method call\n+ *    -verify without actual method call\n+ *    \n+ * we should aim to detect invalid state in following scenarios:\n+ * \n+ *    -on method call on mock\n+ *    -on verify\n+ *    -on verifyZeroInteractions\n+ *    -on verifyNoMoreInteractions\n+ *    -on verify in order\n+ *    -on stub\n+ *    -on stubVoid\n+ */\n+@SuppressWarnings({\"unchecked\", \"deprecation\"})\n+public class InvalidStateDetectionTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+\n+    @After\n+    public void resetState() {\n+        super.resetState();\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedStubbing() {\n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n+\n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n+\n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnMockCreation(), UnfinishedStubbingException.class);\n+        \n+        when(mock.simpleMethod());\n+        detectsAndCleansUp(new OnSpyCreation(), UnfinishedStubbingException.class);\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedStubbingVoid() {\n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n+        \n+        stubVoid(mock);\n+        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedDoAnswerStubbing() {\n+        doAnswer(null);\n+        detectsAndCleansUp(new OnMethodCallOnMock(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnStub(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnStubVoid(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnVerify(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);\n+        \n+        doAnswer(null);\n+        detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedVerification() {\n+        verify(mock);\n+        detectsAndCleansUp(new OnStub(), UnfinishedVerificationException.class);\n+        \n+        verify(mock);\n+        detectsAndCleansUp(new OnStubVoid(), UnfinishedVerificationException.class);\n+        \n+        verify(mock);\n+        detectsAndCleansUp(new OnVerify(), UnfinishedVerificationException.class);\n+        \n+        verify(mock);\n+        detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedVerificationException.class);\n+        \n+        verify(mock);\n+        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedVerificationException.class);\n+        \n+        verify(mock);\n+        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedVerificationException.class);\n+        \n+        verify(mock);\n+        detectsAndCleansUp(new OnDoAnswer(), UnfinishedVerificationException.class);\n+    }\n+\n+    @Test\n+    public void shouldDetectMisplacedArgumentMatcher() {\n+        anyObject();\n+        detectsAndCleansUp(new OnStubVoid(), InvalidUseOfMatchersException.class);\n+        \n+        anyObject();\n+        detectsAndCleansUp(new OnVerify(), InvalidUseOfMatchersException.class);\n+        \n+        anyObject();\n+        detectsAndCleansUp(new OnVerifyInOrder(), InvalidUseOfMatchersException.class);\n+        \n+        anyObject();\n+        detectsAndCleansUp(new OnVerifyZeroInteractions(), InvalidUseOfMatchersException.class);\n+        \n+        anyObject();\n+        detectsAndCleansUp(new OnVerifyNoMoreInteractions(), InvalidUseOfMatchersException.class);\n+        \n+        anyObject();\n+        detectsAndCleansUp(new OnDoAnswer(), InvalidUseOfMatchersException.class);\n+    }\n+    \n+    @Test\n+    public void shouldCorrectStateAfterDetectingUnfinishedStubbing() {\n+        stubVoid(mock).toThrow(new RuntimeException());\n+        \n+        try {\n+            stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);\n+            fail();\n+        } catch (UnfinishedStubbingException e) {}\n+        \n+        stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);\n+        try {\n+            mock.oneArg(true);\n+            fail();\n+        } catch (RuntimeException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldCorrectStateAfterDetectingUnfinishedVerification() {\n+        mock.simpleMethod();\n+        verify(mock);\n+        \n+        try {\n+            verify(mock).simpleMethod();\n+            fail();\n+        } catch (UnfinishedVerificationException e) {}\n+        \n+        verify(mock).simpleMethod();\n+    }\n+    \n+    private static interface DetectsInvalidState {\n+        void detect(IMethods mock);\n+    }\n+    \n+    private static class OnVerify implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            verify(mock);\n+        }\n+    }\n+    \n+    private static class OnVerifyInOrder implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            inOrder(mock).verify(mock);\n+        }\n+    }\n+    \n+    private static class OnVerifyZeroInteractions implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            verifyZeroInteractions(mock);\n+        }\n+    }\n+    \n+    private static class OnVerifyNoMoreInteractions implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            verifyNoMoreInteractions(mock);\n+        }\n+    }   \n+    \n+    private static class OnDoAnswer implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            doAnswer(null);\n+        }\n+    }  \n+    \n+    private static class OnStub implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            when(mock);\n+        }\n+    }\n+    \n+    private static class OnStubVoid implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            stubVoid(mock);\n+        }\n+    }\n+    \n+    private static class OnMethodCallOnMock implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            mock.simpleMethod();\n+        }\n+    }\n+    \n+    private static class OnMockCreation implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            mock(IMethods.class);\n+        }\n+    }\n+    \n+    private static class OnSpyCreation implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            spy(new Object());\n+        }\n+    }\n+    \n+    private void detectsAndCleansUp(DetectsInvalidState detector, Class expected) {\n+        try {\n+            detector.detect(mock);\n+            fail(\"Should throw an exception\");\n+        } catch (Exception e) {\n+            assertEquals(expected, e.getClass());\n+        }\n+        //Make sure state is cleaned up\n+        new StateMaster().validate();\n+    }\n+}\n--- a/test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java\n+++ b/test/org/mockitousage/misuse/DetectingMisusedMatchersTest.java\n     public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {\n         verify(withFinal).finalMethod(anyObject());\n         try {\n-            verify(withFinal).finalMethod(anyObject());\n+            verify(withFinal);\n             fail();\n         } catch (UnfinishedVerificationException e) {}\n     }", "timestamp": 1245188335, "metainfo": ""}