{"sha": "e13dff521491cf175e531124d1a22ab415508408", "log": "split a test into 2  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40110", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/usage/InvalidStateDetectionTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.*;\n+import org.mockito.exceptions.*;\n+import org.mockito.internal.StateResetter;\n+\n+/**\n+ * invalid state happens if:\n+ * \n+ *    -unfinished stubbing\n+ *    -unfinished stubVoid\n+ *    -stubbing without actual method call\n+ *    -verify without actual method call\n+ *    \n+ * we should aim to detect invalid state in following scenarios:\n+ * \n+ *    -on method call on mock\n+ *    -on verify\n+ *    -on verifyZeroInteractions\n+ *    -on verifyNoMoreInteractions\n+ *    -on verify on strictly\n+ *    -on stub\n+ *    -on stubVoid\n+ *\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class InvalidStateDetectionTest {\n+\n+    private IMethods mock;\n+\n+    @Before\n+    @After\n+    public void resetState() {\n+        StateResetter.reset();\n+        mock = mock(IMethods.class);\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedStubbing() {\n+        stub(mock.simpleMethod());\n+        \n+        detects(new OnMethodCallOnMock(), mock, UnfinishedStubbingException.class);\n+        detects(new OnStub(), mock, UnfinishedStubbingException.class);\n+//        detects(new OnStubVoid(), mock, expected);\n+        detects(new OnVerify(), mock, UnfinishedStubbingException.class);\n+        detects(new OnStrictVerify(), mock, UnfinishedStubbingException.class);\n+        detects(new OnVerifyZeroInteractions(), mock, UnfinishedStubbingException.class);\n+        detects(new OnVerifyNoMoreInteractions(), mock, UnfinishedStubbingException.class);\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldDetectUnfinishedStubbingVoid() {\n+        stubVoid(mock);\n+        detects(new OnMethodCallOnMock(), mock, UnfinishedStubbingException.class);\n+        detects(new OnStub(), mock, UnfinishedStubbingException.class);\n+//        detects(new OnStubVoid(), mock, expected);\n+        detects(new OnVerify(), mock, UnfinishedStubbingException.class);\n+        detects(new OnStrictVerify(), mock, UnfinishedStubbingException.class);\n+        detects(new OnVerifyZeroInteractions(), mock, UnfinishedStubbingException.class);\n+        detects(new OnVerifyNoMoreInteractions(), mock, UnfinishedStubbingException.class);\n+    }\n+    \n+    @Test\n+    public void shouldDetectUnfinishedVerification() {\n+        verify(mock);\n+//        detects(new OnMethodCallOnMock(), mock, expected);\n+        detects(new OnStub(), mock, UnfinishedVerificationException.class);\n+//        detects(new OnStubVoid(), mock, expected);\n+        detects(new OnVerify(), mock, UnfinishedVerificationException.class);\n+        detects(new OnStrictVerify(), mock, UnfinishedVerificationException.class);\n+        detects(new OnVerifyZeroInteractions(), mock, UnfinishedVerificationException.class);\n+        detects(new OnVerifyNoMoreInteractions(), mock, UnfinishedVerificationException.class);\n+    }\n+    \n+    private static interface DetectsInvalidState {\n+        void detect(IMethods mock);\n+    }\n+    \n+    private static class OnVerify implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            verify(mock);\n+        }\n+    }\n+    \n+    private static class OnStrictVerify implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            createStrictOrderVerifier(mock).verify(mock);\n+        }\n+    }\n+    \n+    private static class OnVerifyZeroInteractions implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            verifyZeroInteractions(mock);\n+        }\n+    }\n+    \n+    private static class OnVerifyNoMoreInteractions implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            verifyNoMoreInteractions(mock);\n+        }\n+    }    \n+    \n+    private static class OnStub implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            stub(mock.toString());\n+        }\n+    }\n+    \n+//    private static class OnStubVoid implements DetectsInvalidState {\n+//        public void detect(IMethods mock) {\n+//            stubVoid(mock);\n+//        }\n+//    }\n+    \n+    private static class OnMethodCallOnMock implements DetectsInvalidState {\n+        public void detect(IMethods mock) {\n+            mock.simpleMethod();\n+        }\n+    }\n+    \n+    private void detects(DetectsInvalidState detector, IMethods mock, Class expected) {\n+        try {\n+            detector.detect(mock);\n+            fail(\"Should throw an exception\");\n+        } catch (Exception e) {\n+            assertEquals(expected, e.getClass());\n+        }\n+    }\n+}\n--- a/test/org/mockito/usage/InvalidUsageTest.java\n+++ b/test/org/mockito/usage/InvalidUsageTest.java\n  */\n package org.mockito.usage;\n \n-import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n import org.mockito.Strictly;\n-import org.mockito.exceptions.*;\n+import org.mockito.exceptions.MockitoException;\n import org.mockito.internal.StateResetter;\n \n-/**\n- * invalid state happens if:\n- *    -unfinished stubbing\n- *    -unfinished stubVoid ?\n- *    -stubbing without actual method call\n- *    -verify without actual method call\n- *\n- * obviously we should consider if it is really important to cover all those naughty usage\n- */\n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageTest {\n \n     }\n     \n     @Test(expected=MockitoException.class)\n-    public void shouldNotVerifyStrictlyUnfamilarMocks() {\n+    public void shouldNotStrictlyVerifyUnfamilarMocks() {\n         Strictly strictly = createStrictOrderVerifier(mock);\n         strictly.verify(mockTwo).simpleMethod();\n     }\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n         stub(mock.simpleMethod()).andThrows(null);\n     }    \n-\n-    @Test(expected=MissingMethodInvocationException.class)\n-    public void shouldDetectStubbingWithoutMethodCallOnMock() {\n-        stub(\"blah\".contains(\"blah\"));\n-    }\n-\n-    @Test\n-    public void shouldDetectUnfinishedStubbing() {\n-        stub(mock.simpleMethod());\n-        assertInvalidStateDetected(mock, UnfinishedStubbingException.class);\n-    }\n-    \n-    @Ignore\n-    @Test\n-    public void shouldDetectUnfinishedStubbingVoid() {\n-        stubVoid(mock);\n-        assertInvalidStateDetected(mock, UnfinishedStubbingException.class);\n-    }\n-    \n-    @Ignore\n-    @Test\n-    public void unfinishedStubbingVoid() {\n-        stubVoid(mock);\n-\n-        try {\n-            mock.simpleMethod();\n-            fail();\n-        } catch (UnfinishedStubbingException e) {}\n-    }\n-    \n-    @Test\n-    public void shouldDetectUnfinishedVerification() {\n-        verify(mock);\n-        try {\n-            verify(mock).simpleMethod();\n-            fail();\n-        } catch (MockitoException e) {}\n-    }\n-    \n-    @Test\n-    public void shouldDetectUnfinishedVerificationWhenVeryfingNoMoreInteractions() {\n-        verify(mock);\n-        try {\n-            verifyNoMoreInteractions(mock);\n-            fail();\n-        } catch (MockitoException e) {}\n-    }\n-    \n-    @Test\n-    public void shouldDetectUnfinishedVerificationWhenVeryfingZeroInteractions() {\n-        verify(mock);\n-        try {\n-            verifyZeroInteractions(mock);\n-            fail();\n-        } catch (MockitoException e) {}\n-    }\n-\n-    private static interface DetectsInvalidState {\n-        void detect(IMethods mock);\n-    }\n-    \n-    private static class OnVerify implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            verify(mock);\n-        }\n-    }\n-    \n-    private static class OnStrictVerify implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            createStrictOrderVerifier(mock).verify(mock);\n-        }\n-    }\n-    \n-    private static class OnVerifyZeroInteractions implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            verifyZeroInteractions(mock);\n-        }\n-    }\n-    \n-    private static class OnVerifyNoMoreInteractions implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            verifyNoMoreInteractions(mock);\n-        }\n-    }    \n-    \n-    private static class OnStub implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            stub(mock.simpleMethod());\n-        }\n-    }\n-    \n-//    private static class OnStubVoid implements DetectsInvalidState {\n-//        public void detect(IMethods mock) {\n-//            stubVoid(mock);\n-//        }\n-//    }\n-    \n-    private static class OnMethodCallOnMock implements DetectsInvalidState {\n-        public void detect(IMethods mock) {\n-            mock.simpleMethod();\n-        }\n-    }\n-    \n-    private void assertInvalidStateDetected(IMethods mock, Class expected) {\n-        detects(new OnMethodCallOnMock(), mock, expected);\n-        detects(new OnStub(), mock, expected);\n-//        detects(new OnStubVoid(), mock, expected);\n-        detects(new OnVerify(), mock, expected);\n-        detects(new OnStrictVerify(), mock, expected);\n-        detects(new OnVerifyZeroInteractions(), mock, expected);\n-        detects(new OnVerifyNoMoreInteractions(), mock, expected);\n-    }\n-    \n-    private void detects(DetectsInvalidState detector, IMethods mock, Class expected) {\n-        try {\n-            detector.detect(mock);\n-            fail(\"Should throw an exception\");\n-        } catch (Exception e) {\n-            assertEquals(expected, e.getClass());\n-        }\n-    }\n-}\n+}", "timestamp": 1196470323, "metainfo": ""}