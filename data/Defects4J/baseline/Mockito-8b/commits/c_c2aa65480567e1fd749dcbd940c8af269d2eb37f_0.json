{"sha": "c2aa65480567e1fd749dcbd940c8af269d2eb37f", "log": "added specific exception for no-invocations-wanted scenario  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40212", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.TooLittleActualInvocationsError;\n import org.mockito.exceptions.verification.TooManyActualInvocationsError;\n import org.mockito.exceptions.verification.VerificationError;\n \n     public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n         UndesiredInvocation cause = buildUndesiredInvocationCause(actualInvocationStackTrace, \"Undesired invocation:\", undesired);\n-        throw new VerificationError(join(\"No interactions wanted\"), cause);\n+        throw new NoInteractionsWantedError(join(\"No interactions wanted\"), cause);\n     }\n \n     private UndesiredInvocation buildUndesiredInvocationCause(HasStackTrace actualInvocationStackTrace, String ... messageLines) {\n--- /dev/null\n+++ b/src/org/mockito/exceptions/verification/NoInteractionsWantedError.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.verification;\n+\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+\n+/**\n+ * No interactions wanted. See exception's cause for location of undesired invocation.\n+ */\n+public class NoInteractionsWantedError extends MockitoAssertionError {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public NoInteractionsWantedError(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n--- a/test/org/mockitousage/StackTrackeFilteringTest.java\n+++ b/test/org/mockitousage/StackTrackeFilteringTest.java\n import org.mockito.StateResetter;\n import org.mockito.Strictly;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n \n public class StackTrackeFilteringTest extends RequiresValidState {\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError expected) {\n-            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyNoMoreInteractions\"));\n+        } catch (NoInteractionsWantedError e) {\n+            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyNoMoreInteractions\"));\n         }\n     }\n     \n         try {\n             verifyZeroInteractions(mock);\n             fail();\n-        } catch (VerificationError expected) {\n-            assertThat(expected, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyZeroInteractions\"));\n+        } catch (NoInteractionsWantedError e) {\n+            assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStackTraceOnVerifyZeroInteractions\"));\n         }\n     }\n     \n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n \n public class UsingVarargsTest extends RequiresValidState {\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n \n     @Test\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import static org.mockito.Matchers.anyInt;\n import static org.mockito.Matchers.anyLong;\n import static org.mockito.Matchers.anyObject;\n-import static org.mockito.Matchers.*;\n+import static org.mockito.Matchers.anyShort;\n+import static org.mockito.Matchers.anyString;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Matchers.isA;\n import static org.mockito.Matchers.isNull;\n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n import org.mockitousage.IMethods;\n \n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     @Test\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n }\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     private class ExceptionOne extends RuntimeException {};\n--- a/test/org/mockitousage/verification/BasicVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.TooManyActualInvocationsError;\n import org.mockito.exceptions.verification.VerificationError;\n \n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError expected) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedDiffersFromActual;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n import org.mockitousage.IMethods;\n \n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {\n+        } catch (NoInteractionsWantedError e) {\n             String expectedMessage =\n                     \"\\n\" +\n                     \"No interactions wanted\";\n         try {\n             verifyZeroInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {\n+        } catch (NoInteractionsWantedError e) {\n             String expected =\n                     \"\\n\" +\n                     \"No interactions wanted\";\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n \n @SuppressWarnings(\"unchecked\")\n         try {\n             verifyZeroInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     @Test\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     @Test\n         try {\n             verifyZeroInteractions(map);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n }\n--- a/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.Strictly;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.VerificationError;\n import org.mockitousage.IMethods;\n \n         try {\n             verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     @Test\n         try {\n             verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n             fail();\n-        } catch (VerificationError e) {}\n+        } catch (NoInteractionsWantedError e) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/StrictVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.Strictly;\n+import org.mockito.exceptions.verification.NoInteractionsWantedError;\n import org.mockito.exceptions.verification.TooLittleActualInvocationsError;\n import org.mockito.exceptions.verification.TooManyActualInvocationsError;\n import org.mockito.exceptions.verification.VerificationError;\n         try {\n             verifyNoMoreInteractions(mockOne, mockTwo, mockThree);\n             fail();\n-        } catch (VerificationError e) {}\n-    } \n-    \n-    @Test(expected=VerificationError.class)\n+        } catch (NoInteractionsWantedError e) {}\n+    } \n+    \n+    @Test(expected=NoInteractionsWantedError.class)\n     public void shouldFailOnVerifyZeroInteractions() {\n         verifyZeroInteractions(mockOne);\n     }", "timestamp": 1197734725, "metainfo": ""}