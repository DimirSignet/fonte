{"sha": "729a8c2d5ee712bfc322da56034a2c064b7854d3", "log": "Uses festasserty assertions and made tests a bit more robusts for the classloader utils", "commit": "\n--- a/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n+++ b/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n \n package org.mockitousage.basicapi;\n \n-import static org.hamcrest.CoreMatchers.is;\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.fest.assertions.Fail.fail;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n import static org.mockitoutil.ClassLoaders.inMemoryClassLoader;\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockitousage.IMethods;\n-import org.mockitoutil.TestBase;\n \n // See issue 453\n-public class MockingMultipleInterfacesTest extends TestBase {\n+public class MockingMultipleInterfacesTest {\n \n     class Foo {}\n     interface IFoo {}\n         Foo mock = mock(Foo.class, withSettings().extraInterfaces(IFoo.class, IBar.class));\n         \n         //then\n-        assertThat(mock, is(IFoo.class));\n-        assertThat(mock, is(IBar.class));\n+        assertThat(mock).isInstanceOf(IFoo.class);\n+        assertThat(mock).isInstanceOf(IBar.class);\n     }\n     \n     @Test\n             fail();\n         } catch (MockitoException e) {\n             //then\n-            assertContains(\"extraInterfaces() does not accept null parameters\", e.getMessage());\n+            assertThat(e.getMessage()).contains(\"extraInterfaces() does not accept null parameters\");\n         }\n     }\n     \n             fail();\n         } catch (MockitoException e) {\n             //then\n-            assertContains(\"extraInterfaces() requires at least one interface\", e.getMessage());\n+            assertThat(e.getMessage()).contains(\"extraInterfaces() requires at least one interface\");\n         }\n     }\n     \n             fail();\n         } catch (MockitoException e) {\n             //then\n-            assertContains(\"extraInterfaces() requires at least one interface\", e.getMessage());\n+            assertThat(e.getMessage()).contains(\"extraInterfaces() requires at least one interface\");\n         }\n     }\n     \n             fail();\n         } catch (MockitoException e) {\n             //then\n-            assertContains(\"Foo which is not an interface\", e.getMessage());\n+            assertThat(e.getMessage()).contains(\"Foo which is not an interface\");\n         }\n     }\n     \n             fail();\n         } catch (MockitoException e) {\n             //then\n-            assertContains(\"You mocked following type: IMethods\", e.getMessage());\n+            assertThat(e.getMessage()).contains(\"You mocked following type: IMethods\");\n         }\n     }\n \n                 .build()\n                 .loadClass(\"test.Interface2\");\n \n-        try {\n-            Object mocked = mock(interface1, withSettings().extraInterfaces(interface2));\n-            assertTrue(\"mock should be assignable from interface2 type\", interface2.isInstance(mocked));\n-        } catch (MockitoException e) {\n-            fail(\"Couldn't mock interfaces with different class loaders and different classpaths\");\n-        }\n+        Object mocked = mock(interface1, withSettings().extraInterfaces(interface2));\n+        assertThat(interface2.isInstance(mocked)).describedAs(\"mock should be assignable from interface2 type\").isTrue();\n     }\n }\n--- a/test/org/mockitoutil/ClassLoadersTest.java\n+++ b/test/org/mockitoutil/ClassLoadersTest.java\n package org.mockitoutil;\n \n import static org.fest.assertions.Assertions.assertThat;\n+import static org.fest.assertions.Fail.fail;\n import static org.mockitoutil.ClassLoaders.isolatedClassLoader;\n import org.junit.Test;\n \n         // when\n         try {\n             cl.loadClass(CLASS_NAME_USING_INTERFACE);\n+            fail();\n         } catch (ClassNotFoundException e) {\n             // then\n             assertThat(e.getMessage()).contains(CLASS_NAME_USING_INTERFACE);\n         // when\n         try {\n             cl.loadClass(CLASS_NAME_USING_INTERFACE);\n+            fail();\n         } catch (NoClassDefFoundError e) {\n             // then\n             assertThat(e.getMessage()).contains(\"org/mockitoutil/ClassLoadersTest$Interface1\");\n         // when\n         try {\n             cl.loadClass(\"not.Defined\");\n+            fail();\n         } catch (ClassNotFoundException e) {\n             // then\n             assertThat(e.getMessage()).contains(\"not.Defined\");", "timestamp": 1386168733, "metainfo": ""}