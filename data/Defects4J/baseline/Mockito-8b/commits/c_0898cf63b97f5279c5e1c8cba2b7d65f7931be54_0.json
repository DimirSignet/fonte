{"sha": "0898cf63b97f5279c5e1c8cba2b7d65f7931be54", "log": "- inorder to correct issue with serializable mocks when using ThrowsException answer -- made ConditionalStackTraceFilter, StackTraceFilter, and GlobalConfiguration Serializable  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401964", "commit": "\n--- a/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.stubbing.Answer;\n \n+import java.io.Serializable;\n+\n /**\n  * Thread-safe wrapper on user-defined org.mockito.configuration.MockitoConfiguration implementation\n  */\n @SuppressWarnings(\"deprecation\")//supressed until ReturnValues are removed\n-public class GlobalConfiguration implements IMockitoConfiguration {\n-\n+public class GlobalConfiguration implements IMockitoConfiguration, Serializable {\n+    static final long serialVersionUID = -2860353062105505938L;\n+    \n     private static ThreadLocal<IMockitoConfiguration> globalConfiguration = new ThreadLocal<IMockitoConfiguration>();\n \n     //back door for testing\n--- a/src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java\n+++ b/src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java\n import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.internal.configuration.GlobalConfiguration;\n \n-public class ConditionalStackTraceFilter {\n+import java.io.Serializable;\n+\n+public class ConditionalStackTraceFilter implements Serializable {\n+    static final long serialVersionUID = -8085849703510292641L;\n     \n     private IMockitoConfiguration config = new GlobalConfiguration();\n     private StackTraceFilter filter = new StackTraceFilter();\n--- a/src/org/mockito/internal/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/internal/exceptions/base/StackTraceFilter.java\n  */\n package org.mockito.internal.exceptions.base;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n \n-public class StackTraceFilter {\n+public class StackTraceFilter implements Serializable {\n+    static final long serialVersionUID = -5499819791513105700L;\n     \n     public boolean isBad(StackTraceElement e) {\n         boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.internal.matchers.Any;\n+import org.mockito.internal.stubbing.answers.ThrowsException;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n \n     private static final long serialVersionUID = 6160482220413048624L;\n \n+    @Test\n+    public void shouldAllowThrowsExceptionToBeSerializable() throws Exception {\n+        // given\n+        Bar mock = mock(Bar.class, new ThrowsException(new RuntimeException()));\n+        // when-serialize then-deserialize\n+        serializeAndBack(mock);\n+    }\n+    \n     @Test\n     public void shouldAllowMockToBeSerializable() throws Exception {\n         // given", "timestamp": 1273280698, "metainfo": ""}