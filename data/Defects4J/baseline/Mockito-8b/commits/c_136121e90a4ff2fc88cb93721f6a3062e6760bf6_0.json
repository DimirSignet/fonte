{"sha": "136121e90a4ff2fc88cb93721f6a3062e6760bf6", "log": "bit of refactoring - hid InvocationMatcher behind Answer interface  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40813", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.OngoingStubbing;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.MockitoStubber;\n import org.mockito.internal.stubbing.Returns;\n-import org.mockito.internal.stubbing.DoesNothing;\n-import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.ThrowsException;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n         mockingProgress.reportOngoingStubbing(new OngoingStubbingImpl());\n \n         \n-        StubbedInvocationMatcher matchForInvocation = mockitoStubber.findMatchFor(invocation);\n-        if (matchForInvocation != null) {\n-            return matchForInvocation.answer(invocation);\n+        Answer<?> answer = mockitoStubber.findAnswerFor(invocation);\n+        if (answer != null) {\n+            return answer.answer(invocation);\n         } else if (MockUtil.isMock(instance)) {\n             return Configuration.instance().getReturnValues().valueFor(invocation);\n         } else {\n--- a/src/org/mockito/internal/stubbing/MockitoStubber.java\n+++ b/src/org/mockito/internal/stubbing/MockitoStubber.java\n         }\n     } \n     \n-    Object getResultFor(Invocation invocation) throws Throwable {\n-        return findMatchFor(invocation).answer(invocation);\n+    Object answerTo(Invocation invocation) throws Throwable {\n+        return findAnswerFor(invocation).answer(invocation);\n     }\n \n-    public StubbedInvocationMatcher findMatchFor(Invocation invocation) {\n+    public Answer findAnswerFor(Invocation invocation) {\n         for (StubbedInvocationMatcher s : stubbed) {\n             if (s.matches(invocation)) {\n                 return s;\n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n @SuppressWarnings(\"unchecked\")\n-public class StubbedInvocationMatcher extends InvocationMatcher {\n+public class StubbedInvocationMatcher extends InvocationMatcher implements Answer {\n \n     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();\n \n         this.answers.add(answer);\n     }\n \n-    public Object answer(Invocation invocation) throws Throwable {\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n         synchronized(answers) {\n             return answers.size() == 1 ? answers.peek().answer(invocation) : answers.poll().answer(invocation);\n         }\n--- a/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n+++ b/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n         mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n         mockitoStubber.addAnswer(new ThrowsException(new MyException()));\n         \n-        assertEquals(\"simpleMethod\", mockitoStubber.getResultFor(simpleMethod));\n+        assertEquals(\"simpleMethod\", mockitoStubber.answerTo(simpleMethod));\n         \n         try {\n-            mockitoStubber.getResultFor(differentMethod);\n+            mockitoStubber.answerTo(differentMethod);\n             fail();\n         } catch (MyException e) {}\n     }\n         mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n         \n         try {\n-            mockitoStubber.getResultFor(simpleMethod);\n+            mockitoStubber.answerTo(simpleMethod);\n             fail();\n         } catch (MyException e) {}\n     }", "timestamp": 1219506908, "metainfo": ""}