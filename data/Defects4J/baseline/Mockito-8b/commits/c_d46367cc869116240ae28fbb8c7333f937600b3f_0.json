{"sha": "d46367cc869116240ae28fbb8c7333f937600b3f", "log": "fixed bug with stack trace cleaning logic. The bug appeared in case when mocks are used and verified in java main method (to very usual case :).  I couldn't do a proper functional test for that one since I cannot reproduce it from junit method.  Some TODOs are left.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40414", "commit": "\n--- a/src/org/mockito/exceptions/base/CommonStackTraceRemover.java\n+++ b/src/org/mockito/exceptions/base/CommonStackTraceRemover.java\n public class CommonStackTraceRemover {\n \n     public void remove(HasStackTrace hasStackTrace, List<StackTraceElement> causeStackTrace) {\n-        List<StackTraceElement> exceptionsPart = null;\n-        List<StackTraceElement> exceptionsTrace = Arrays.asList(hasStackTrace.getStackTrace());\n-        int length = exceptionsTrace.size();\n-        for (int i = 0; i < length; i++) {\n-            List<StackTraceElement> subList = exceptionsTrace.subList(i, length);\n+        List<StackTraceElement> fullTrace = Arrays.asList(hasStackTrace.getStackTrace());\n+        List<StackTraceElement> cleanedPart = fullTrace;\n+        final int totalCount = fullTrace.size();\n+        for (int i = 0; i < totalCount; i++) {\n+            List<StackTraceElement> subList = fullTrace.subList(i, totalCount);\n             int lastStartingIndexOfSubList = Collections.lastIndexOfSubList(causeStackTrace, subList);\n             if (lastStartingIndexOfSubList == -1) {\n                 continue;\n             \n             int lastEndingIndexOfSubList = lastStartingIndexOfSubList + subList.size() - 1;\n             if (lastEndingIndexOfSubList == causeStackTrace.size() - 1) {\n-                exceptionsPart = exceptionsTrace.subList(0, i);\n+                cleanedPart = fullTrace.subList(0, i);\n                 break;\n             }\n         }\n         \n-        assert exceptionsPart != null;\n-        hasStackTrace.setStackTrace(exceptionsPart.toArray(new StackTraceElement[exceptionsPart.size()]));\n+        hasStackTrace.setStackTrace(cleanedPart.toArray(new StackTraceElement[cleanedPart.size()]));\n     }\n-}\n+}\n--- a/src/org/mockito/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n \n import java.util.Arrays;\n import java.util.List;\n-\n \n public class StackTraceFilter {\n     \n             i++;\n         }\n         \n-        List<StackTraceElement> filtered = unfilteredStackTrace.subList(lastToRemove+1, unfilteredStackTrace.size() - 1);\n+        List<StackTraceElement> filtered = unfilteredStackTrace.subList(lastToRemove + 1, unfilteredStackTrace.size());\n         hasStackTrace.setStackTrace(filtered.toArray(new StackTraceElement[]{}));\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/CommonStackTraceRemoverTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+\n+public class CommonStackTraceRemoverTest extends TestBase {\n+\n+    private CommonStackTraceRemover remover;\n+    \n+    @Before\n+    public void setup() {\n+        remover = new CommonStackTraceRemover();\n+    }\n+\n+    @Test\n+    public void testShouldNotRemoveWhenStackTracesDontHaveCommonPart() {\n+        StackTraceElement elementOne = new StackTraceElement(\"MethodInterceptorFilter\", \"intercept\", \"MethodInterceptorFilter.java\", 49);\n+        HasStackTrace trace = new HasStackTraceStub(elementOne);\n+        \n+        StackTraceElement elementTwo = new StackTraceElement(\"Mockito\", \"other\", \"Mockito.java\", 90);\n+        List<StackTraceElement> cause = Arrays.asList(elementTwo);\n+        \n+        remover.remove(trace, cause);\n+        \n+        assertEquals(1, trace.getStackTrace().length);\n+        assertEquals(elementOne, trace.getStackTrace()[0]);\n+        //TODO decent arrays equal please, the same in STFT\n+    }\n+    \n+    //TODO even though this stuff is tested on functional level, I want some more tests here - the unit test should be complete\n+}\n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/HasStackTraceStub.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+public class HasStackTraceStub implements HasStackTrace {\n+    private StackTraceElement[] stackTrace;\n+    \n+    public HasStackTraceStub(StackTraceElement ... stackTrace) {\n+        this.stackTrace = stackTrace;\n+    }\n+\n+    public StackTraceElement[] getStackTrace() {\n+        return stackTrace;\n+    }\n+\n+    public void setStackTrace(StackTraceElement[] stackTrace) {\n+        this.stackTrace = stackTrace;\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+\n+public class StackTraceFilterTest extends TestBase {\n+    \n+    private StackTraceFilter filter;\n+    \n+    @Before\n+    public void setup() {\n+        filter = new StackTraceFilter();\n+    }\n+\n+    @Test\n+    public void testShouldFilterStackTrace() {\n+        StackTraceElement first = new StackTraceElement(\"MethodInterceptorFilter\", \"intercept\", \"MethodInterceptorFilter.java\", 49);\n+        StackTraceElement second = new StackTraceElement(\"List$$EnhancerByCGLIB$$2c406024\", \"add\", \"<generated>\", 0);\n+        StackTraceElement third = new StackTraceElement(\"MockitoSampleTest\", \"main\", \"MockitoSampleTest.java\", 100);\n+        \n+        HasStackTraceStub trace = new HasStackTraceStub(first, second, third);\n+        \n+        filter.filterStackTrace(trace);\n+        \n+        assertEquals(1, trace.getStackTrace().length);\n+        assertEquals(third, trace.getStackTrace()[0]);\n+        //TODO even though this stuff is tested on functional level, I want some more tests here - the unit test should be complete \n+    }\n+}", "timestamp": 1204294174, "metainfo": ""}