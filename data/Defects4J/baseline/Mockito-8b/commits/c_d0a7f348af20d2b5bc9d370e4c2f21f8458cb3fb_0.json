{"sha": "d0a7f348af20d2b5bc9d370e4c2f21f8458cb3fb", "log": "got rid of IAnswer interface  --HG-- rename : src/org/mockito/internal/stubbing/IAnswer.java => src/org/mockito/internal/stubbing/Answer.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40600", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/Answer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+/**\n+ * Used to answer expected calls.\n+ * @param <T> the type to return.\n+ * //TODO should be Answer\n+ */\n+public interface Answer<T> {\n+\n+    /**\n+     * @return the value to be returned\n+     * @throws Throwable the throwable to be thrown\n+     */\n+    T answer() throws Throwable;\n+}\n--- a/src/org/mockito/internal/stubbing/Result.java\n+++ b/src/org/mockito/internal/stubbing/Result.java\n import org.mockito.exceptions.base.HasStackTraceThrowableWrapper;\n import org.mockito.exceptions.base.StackTraceFilter;\n \n-//TODO name of this class is stupid\n @SuppressWarnings(\"unchecked\")\n-public class Result implements IAnswer {\n+public class Result implements Answer {\n \n-    private IAnswer value;\n+    private Answer value;\n \n-    private Result(IAnswer value) {\n+    private Result(Answer value) {\n         this.value = value;\n     }\n \n     public static Result createThrowResult(final Throwable throwable, final StackTraceFilter filter) {\n-        return new Result(new IAnswer<Object>() {\n+        return new Result(new Answer<Object>() {\n             public Object answer() throws Throwable {\n                 Throwable filtered = throwable.fillInStackTrace();\n                 filter.filterStackTrace(new HasStackTraceThrowableWrapper(filtered));\n         });\n     }\n     public static Result createReturnResult(final Object value) {\n-        return new Result(new IAnswer<Object>() {\n+        return new Result(new Answer<Object>() {\n             public Object answer() throws Throwable {\n                 return value;\n             }\n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n @SuppressWarnings(\"unchecked\")\n public class StubbedInvocationMatcher extends InvocationMatcher {\n \n-    private final LinkedList<IAnswer> answers = new LinkedList<IAnswer>();\n+    private final LinkedList<Answer> answers = new LinkedList<Answer>();\n     \n-    public StubbedInvocationMatcher(InvocationMatcher invocation, IAnswer result) {\n+    public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\n         super(invocation.getInvocation(), invocation.getMatchers());\n-        this.answers.add(result);\n+        this.answers.add(answer);\n     }\n \n     public Object answer() throws Throwable {\n         return answers.size() == 1 ? answers.getFirst().answer() : answers.removeFirst().answer();\n     }\n \n-    public void addResult(IAnswer answer) {\n+    public void addAnswer(Answer answer) {\n         answers.add(answer);\n     }\n     \n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n     }\n     \n     public void addConsecutiveReturnValue(Object value) {\n-        stubbed.getFirst().addResult(Result.createReturnResult(value));\n+        stubbed.getFirst().addAnswer(Result.createReturnResult(value));\n     }\n \n     public void addConsecutiveThrowable(Throwable throwable) {\n         validateThrowable(throwable);\n-        stubbed.getFirst().addResult(Result.createThrowResult(throwable, new StackTraceFilter()));\n+        stubbed.getFirst().addAnswer(Result.createThrowResult(throwable, new StackTraceFilter()));\n     }    \n \n     public Object resultFor(Invocation invocation) throws Throwable {", "timestamp": 1209064958, "metainfo": ""}