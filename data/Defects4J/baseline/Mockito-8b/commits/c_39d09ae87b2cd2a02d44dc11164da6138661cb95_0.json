{"sha": "39d09ae87b2cd2a02d44dc11164da6138661cb95", "log": "Some rename job in the MockName area. Added javadocs for the public type.", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n         if (methodsGuru.isToString(invocation.getMethod())) {\n             Object mock = invocation.getMock();\n             MockName name = new MockUtil().getMockName(mock);\n-            if (name.isSurrogate()) {\n+            if (name.isDefault()) {\n                 return \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n             } else {\n                 return name.toString();\n--- a/src/org/mockito/internal/util/MockNameImpl.java\n+++ b/src/org/mockito/internal/util/MockNameImpl.java\n     \n     private static final long serialVersionUID = 8014974700844306925L;\n     private final String mockName;\n-    private boolean surrogate;\n+    private boolean defaultName;\n \n     @SuppressWarnings(\"unchecked\")\n     public MockNameImpl(String mockName, Class classToMock) {\n         if (mockName == null) {\n             this.mockName = toInstanceName(classToMock);\n-            this.surrogate = true;\n+            this.defaultName = true;\n         } else {\n             this.mockName = mockName;\n         }\n         return className.substring(0, 1).toLowerCase() + className.substring(1);\n     }\n     \n-    public boolean isSurrogate() {\n-        return surrogate;\n+    public boolean isDefault() {\n+        return defaultName;\n     }\n     \n     @Override\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n     }\n \n     public void maybeRedefineMockName(Object mock, String newName) {\n-        if (getMockName(mock).isSurrogate()) {\n+        if (getMockName(mock).isDefault()) {\n             getMockHandler(mock).getMockSettings().redefineMockName(newName);\n         }\n     }\n--- a/src/org/mockito/mock/MockName.java\n+++ b/src/org/mockito/mock/MockName.java\n package org.mockito.mock;\n \n /**\n- * by Szczepan Faber, created at: 4/9/12\n+ * Represents the name of the mock as shown in the verification failure reports, etc.\n  */\n public interface MockName {\n \n-    boolean isSurrogate();\n+    /**\n+     * the name\n+     */\n+    String toString();\n \n-    String toString();\n+    /**\n+     * default name means generated by Mockito. non-default means the user has named the mock at creation.\n+     */\n+    boolean isDefault();\n }\n--- a/test/org/mockito/internal/util/MockUtilTest.java\n+++ b/test/org/mockito/internal/util/MockUtilTest.java\n     }\n \n     @Test\n-    public void should_redefine_MockName_if_surrogate() {\n+    public void should_redefine_MockName_if_default() {\n         List mock = Mockito.mock(List.class);\n         mockUtil.maybeRedefineMockName(mock, \"newName\");\n \n     }\n \n     @Test\n-    public void should_not_redefine_MockName_if_surrogate() {\n+    public void should_not_redefine_MockName_if_default() {\n         List mock = Mockito.mock(List.class, \"original\");\n         mockUtil.maybeRedefineMockName(mock, \"newName\");\n ", "timestamp": 1333987547, "metainfo": ""}