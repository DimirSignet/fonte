{"sha": "cf4389715e89e790ed8ab87d3c7354b5fe715ac4", "log": "Fixed typo Added more exceptions for modelling exception messages  --HG-- rename : src/org/mockito/exceptions/verification/VerifcationInOrderFailure.java => src/org/mockito/exceptions/verification/VerificationInOrderFailure.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401298", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.verification.SmartNullPointerException;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockito.exceptions.verification.junit.JUnitTool;\n import org.mockito.internal.debugging.Location;\n     }\n     \n     public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous, HasStackTrace previousStackTrace) {\n-        throw new VerifcationInOrderFailure(join(\n+        throw new VerificationInOrderFailure(join(\n                     \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n                     wanted.toString(),\n     \n     public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n         String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n-        throw new VerifcationInOrderFailure(join(\n+        throw new VerificationInOrderFailure(join(\n                 \"Verification in order failure:\" + message\n                 ));\n     }\n     public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n         String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualStackTrace);\n         \n-        throw new VerifcationInOrderFailure(join(\n+        throw new VerificationInOrderFailure(join(\n                 \"Verification in order failure:\" + message\n                 ));\n     }\n--- /dev/null\n+++ b/src/org/mockito/exceptions/verification/VerificationInOrderFailure.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.verification;\n+\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+\n+public class VerificationInOrderFailure extends MockitoAssertionError {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public VerificationInOrderFailure(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    public VerificationInOrderFailure(String message) {\n+        super(message);\n+    }\n+}\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n         try {\n             checker.check(invocations, wanted, 4);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 4 times\"));\n             assertThat(e, messageContains(\"But was 2 times\"));\n         }\n         try {\n             checker.check(invocations, wanted, 1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 1 time\"));\n             assertThat(e, messageContains(\"But was 2 times\"));\n         }\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n  */\n package org.mockitousage;\n \n+import static org.mockito.Matchers.*;\n+\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n+@Ignore\n public class PlaygroundTest extends TestBase {\n \n     @Mock IMethods mock;\n \n     @Test\n-    public void testSomething() {}\n+    public void testSomething() {\n+        anyString();\n+    }\n+    \n+    @Test\n+    public void testGetLastUpdates() {\n+        mock = Mockito.mock(IMethods.class);\n+        mock.simpleMethod();\n+    }\n }\n--- a/test/org/mockitousage/SpyingOnRealObjectsTest.java\n+++ b/test/org/mockitousage/SpyingOnRealObjectsTest.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n         try {\n             inOrder.verify(spy).add(\"one\");\n             fail();\n-        } catch (VerifcationInOrderFailure f) {}\n+        } catch (VerificationInOrderFailure f) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.mockito.InOrder;\n import org.mockito.Mockito;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n     }\n     \n     @Test\n-    public void shouldTooLittleInvocations() {\n+    public void shouldSayTooLittleInvocations() {\n         mock.simpleMethod();\n         verify(mock, times(2)).simpleMethod();\n     }\n     \n     @Test\n-    public void shouldTooManyInvocations() {\n+    public void shouldSayTooManyInvocations() {\n         mock.simpleMethod();\n         mock.simpleMethod();\n         verify(mock, times(1)).simpleMethod();\n     }\n+    \n+    @Test\n+    public void shouldSayWantedButNotInvokedInOrder() {\n+        mock.simpleMethod();\n+        mock.otherMethod();\n+        InOrder inOrder = inOrder(mock);\n+        inOrder.verify(mock).otherMethod();\n+        inOrder.verify(mock).simpleMethod();\n+    }\n+    \n+    @Test\n+    public void shouldSayTooLittleInvocationsInOrder() {\n+        mock.simpleMethod();\n+        mock.otherMethod();\n+        mock.otherMethod();\n+\n+        InOrder inOrder = inOrder(mock);\n+        inOrder.verify(mock).simpleMethod();\n+        inOrder.verify(mock, times(3)).otherMethod();\n+    }\n+    \n+    @Test\n+    public void shouldSayTooManyInvocationsInOrder() {\n+        mock.otherMethod();\n+        mock.otherMethod();\n+        \n+        InOrder inOrder = inOrder(mock);\n+        inOrder.verify(mock, times(1)).otherMethod();\n+    }\n+\n+    @Test\n+    public void shouldSayNeverWantedButInvokedHere() {\n+        mock.otherMethod();\n+        \n+        verify(mock, never()).otherMethod();\n+    }\n+    \n+    @Test\n+    public void shouldSayTooLittleInvocationsInAtLeastModeInOrder() {\n+        mock.simpleMethod();\n+\n+        InOrder inOrder = inOrder(mock);\n+        inOrder.verify(mock, atLeast(2)).simpleMethod();\n+    }\n+    \n+    @Test\n+    public void shouldSayTooLittleInvocationsInAtLeastMode() {\n+        mock.simpleMethod();\n+        \n+        verify(mock, atLeast(2)).simpleMethod();\n+    }\n+\n+    @Test\n+    public void shouldSayNoMoreInteractions() {\n+        mock.simpleMethod();\n+        \n+        verifyNoMoreInteractions(mock);\n+    }\n+    \n+    @Test\n+    public void shouldSayUnstubbedMethodWasInvokedHere() {\n+        mock = mock(IMethods.class, RETURNS_SMART_NULLS);\n+        \n+        IMethods m = mock.iMethodsReturningMethod();\n+        \n+        m.simpleMethod();\n+    }\n }\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n import org.junit.runner.RunWith;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(mock).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"secondChunk(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mockTwo).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"thirdChunk(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"thirdChunk(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"fourthChunk(\", e.getMessage());\n         }\n     }\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n import org.junit.runner.RunWith;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(mock).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"fourth(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mockTwo).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"third(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"second(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mock, times(0)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"first(\", e.getMessage());\n         }\n     }    \n         try {\n             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"second(\", e.getMessage());\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(3)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertContains(\"fourth(\", e.getMessage());\n         }\n     }\n--- a/test/org/mockitousage/stacktrace/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/stacktrace/StackTraceFilteringTest.java\n import org.mockito.StateMaster;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(mock).oneArg(true);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenVerifyingInOrder\"));\n         }\n     }\n--- a/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(4);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n-    }\n-    \n-    @Test(expected=VerifcationInOrderFailure.class)\n+        } catch (VerificationInOrderFailure e) {}\n+    }\n+    \n+    @Test(expected=VerificationInOrderFailure.class)\n     public void shouldFailOnFirstMethodBecauseOneInvocationWanted() {\n         inOrder.verify(mockOne, times(0)).simpleMethod(1);\n     }\n     \n-    @Test(expected=VerifcationInOrderFailure.class)\n+    @Test(expected=VerificationInOrderFailure.class)\n     public void shouldFailOnFirstMethodBecauseOneInvocationWantedAgain() {\n         inOrder.verify(mockOne, times(2)).simpleMethod(1);\n     }\n         try {\n             inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }    \n     \n     @Test\n         try {\n             inOrder.verify(mockOne, times(0)).simpleMethod(4);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne, times(2)).simpleMethod(4);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }    \n     \n     /* ------------- */\n         try {\n             inOrder.verify(mockTwo, times(2)).simpleMethod(-999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(2)).oneArg(true);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }    \n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(-666);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).oneArg(false);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }    \n     \n     /* -------------- */\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(one, atLeastOnce()).simpleMethod(11);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             String expected = \n                     \"\\n\" +\n                     \"Verification in order failure\" +\n         try {\n             inOrder.verify(three).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n         try {\n             inOrder.verify(two, times(1)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n         try {\n             inOrder.verify(two, times(2)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {\n+        } catch (VerificationInOrderFailure e) {\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitoutil.TestBase;\n \n         try {\n             inOrder.verify(mock, never()).add(\"two\");\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n }\n--- a/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n import org.mockito.InOrder;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(mockThree).simpleMethod(3);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         } catch (NoInteractionsWanted e) {}\n     }\n     \n-    @Test(expected=VerifcationInOrderFailure.class)\n+    @Test(expected=VerificationInOrderFailure.class)\n     public void shouldFailVerificationOfNonFirstChunk() {\n         inOrder.verify(mockTwo, times(1)).simpleMethod(2);\n     }\n         try {\n             inOrder.verify(mockThree, times(0)).simpleMethod(3);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n-    }\n-    \n-    @Test(expected=VerifcationInOrderFailure.class)\n+        } catch (VerificationInOrderFailure e) {}\n+    }\n+    \n+    @Test(expected=VerificationInOrderFailure.class)\n     public void shouldFailWhenMockTwoWantedZeroTimes() {\n         inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n     }\n         try {\n             inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n }\n--- a/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n+++ b/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n         try {\n             inOrder.verify(mockOne).differentMethod();\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     } \n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     } \n \n     @Test\n         try {\n             inOrder.verify(mockTwo).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n         try {\n             inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test(expected=MockitoException.class)\n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     } \n     \n     @Test\n         try {\n             inOrder.verify(mockOne, atLeastOnce()).simpleMethod();\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne, times(3)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailure e) {}\n+        } catch (VerificationInOrderFailure e) {}\n     }\n }", "timestamp": 1238771392, "metainfo": ""}