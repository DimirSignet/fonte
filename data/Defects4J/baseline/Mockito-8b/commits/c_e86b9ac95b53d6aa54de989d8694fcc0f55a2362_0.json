{"sha": "e86b9ac95b53d6aa54de989d8694fcc0f55a2362", "log": "documented and added test  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40210", "commit": "\n--- a/src/org/mockito/CrazyMatchers.java\n+++ b/src/org/mockito/CrazyMatchers.java\n         return 0;\n     }\n     \n+\n+    /**\n+     * Expects a comparable argument equals to the given value according to their\n+     * compareTo method. For details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n+        LastArguments.instance().reportMatcher(new CompareEqual<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a string that contains a substring that matches the given regular\n+     * expression. For details, see the documentation.\n+     * \n+     * @param regex\n+     *            the regular expression.\n+     * @return <code>null</code>.\n+     */\n+    public static String find(String regex) {\n+        LastArguments.instance().reportMatcher(new Find(regex));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object array that is equal to the given array, i.e. it has to\n+     * have the same type, length, and each element has to be equal.\n+     * \n+     * @param <T>\n+     *            the type of the array, it is passed through to prevent casts.\n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T[] aryEq(T[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static short[] aryEq(short[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a long array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static long[] aryEq(long[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an int array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static int[] aryEq(int[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a float array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static float[] aryEq(float[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a double array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static double[] aryEq(double[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a char array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static char[] aryEq(char[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a byte array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static byte[] aryEq(byte[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static boolean[] aryEq(boolean[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }    \n+\n     /**\n      * Expects a string that contains the given substring. For details, see the\n      * documentation.\n         LastArguments.instance().reportMatcher(new Contains(substring));\n         return null;\n     }\n-\n+    \n     /**\n      * Expects a boolean that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return false;\n     }\n-\n+    \n     /**\n      * Expects a byte that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects a char that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects a double that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects a float that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects an int that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects a long that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects a short that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return 0;\n     }\n-\n+    \n     /**\n      * Expects an Object that matches both given expectations.\n      * \n         LastArguments.instance().reportAnd(2);\n         return null;\n     }\n-\n+    \n     /**\n      * Expects a boolean that matches one of the given expectations.\n      * \n         LastArguments.instance().reportOr(2);\n         return false;\n     }\n-\n-    /**\n-     * Expects a comparable argument equals to the given value according to their\n-     * compareTo method. For details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n-        LastArguments.instance().reportMatcher(new CompareEqual<T>(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an Object that is the same as the given value. For details, see\n-     * the documentation.\n+    \n+    /**\n+     * Expects an Object that matches one of the given expectations.\n      * \n      * @param <T>\n      *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T or(T first, T second) {\n+        LastArguments.instance().reportOr(2);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short or(short first, short second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long or(long first, long second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int or(int first, int second) {\n+        LastArguments.instance().reportOr(2);\n+        return first;\n+    }\n+\n+    /**\n+     * Expects a float that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float or(float first, float second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double or(double first, double second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char or(char first, char second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a byte that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte or(byte first, byte second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }    \n+    \n+    /**\n+     * Expects an Object that is the same as the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n      * @param value\n      *            the given value.\n      * @return <code>null</code>.\n      */\n     public static String startsWith(String prefix) {\n         LastArguments.instance().reportMatcher(new StartsWith(prefix));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that contains a substring that matches the given regular\n-     * expression. For details, see the documentation.\n-     * \n-     * @param regex\n-     *            the regular expression.\n-     * @return <code>null</code>.\n-     */\n-    public static String find(String regex) {\n-        LastArguments.instance().reportMatcher(new Find(regex));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an Object array that is equal to the given array, i.e. it has to\n-     * have the same type, length, and each element has to be equal.\n-     * \n-     * @param <T>\n-     *            the type of the array, it is passed through to prevent casts.\n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T[] aryEq(T[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a short array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static short[] aryEq(short[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a long array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static long[] aryEq(long[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an int array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static int[] aryEq(int[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a float array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static float[] aryEq(float[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a double array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static double[] aryEq(double[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a char array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static char[] aryEq(char[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a byte array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static byte[] aryEq(byte[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static boolean[] aryEq(boolean[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n         return null;\n     }\n \n         LastArguments.instance().reportNot();\n         return 0;\n     }\n-\n-    /**\n-     * Expects an Object that matches one of the given expectations.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T or(T first, T second) {\n-        LastArguments.instance().reportOr(2);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a short that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short or(short first, short second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long or(long first, long second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int or(int first, int second) {\n-        LastArguments.instance().reportOr(2);\n-        return first;\n-    }\n-\n-    /**\n-     * Expects a float that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float or(float first, float second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double or(double first, double second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char or(char first, char second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a byte that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte or(byte first, byte second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n-    }\n }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n         return null;\n     }\n     \n+    /**\n+     * Argument should be any String.\n+     * \n+     * @return <code>null</code>.\n+     */\n     public static String anyString() {\n         isA(String.class);\n         return null;\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import static org.mockito.Matchers.anyInt;\n import static org.mockito.Matchers.anyLong;\n import static org.mockito.Matchers.anyObject;\n-import static org.mockito.Matchers.anyShort;\n+import static org.mockito.Matchers.*;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Matchers.isA;\n import static org.mockito.Matchers.isNull;\n         assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n         assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n     }\n+    \n+    @Test\n+    public void anyStringMatcher() {\n+        stub(mock.oneArg(anyString())).andReturn(\"1\");\n+        \n+        assertEquals(\"1\", mock.oneArg(\"\"));\n+        assertEquals(\"1\", mock.oneArg(\"any string\"));\n+        assertEquals(null, mock.oneArg(null));\n+    }\n \n     @Test\n     public void anyMatcher() {\n         stub(mock.oneArg(anyShort())).andReturn(\"7\");\n         stub(mock.oneArg((String) anyObject())).andReturn(\"8\");\n         stub(mock.oneArg(anyObject())).andReturn(\"9\");\n-\n+        \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(\"0\", mock.oneArg(false));\n ", "timestamp": 1197733507, "metainfo": ""}