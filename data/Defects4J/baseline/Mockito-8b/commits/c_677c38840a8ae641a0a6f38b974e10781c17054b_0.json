{"sha": "677c38840a8ae641a0a6f38b974e10781c17054b", "log": "Small rename job.  --HG-- rename : src/org/mockito/internal/verification/RegisteredInvocationsAll.java => src/org/mockito/internal/verification/DefaultRegisteredInvocations.java rename : test/org/mockito/internal/verification/RegisteredInvocationsAllTest.java => test/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java", "commit": "\n--- a/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n+++ b/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n import org.mockito.internal.invocation.StubInfoImpl;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.stubbing.answers.AnswersValidator;\n+import org.mockito.internal.verification.DefaultRegisteredInvocations;\n import org.mockito.internal.verification.RegisteredInvocations;\n+import org.mockito.internal.verification.RegisteredInvocationsStubOnly;\n import org.mockito.invocation.Invocation;\n+import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n-import org.mockito.internal.verification.RegisteredInvocationsAll;\n-import org.mockito.internal.verification.RegisteredInvocationsStubOnly;\n-import org.mockito.mock.MockCreationSettings;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationContainerImpl implements InvocationContainer, Serializable {\n     private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\n         return mockSettings.isStubOnly()\n           ? new RegisteredInvocationsStubOnly()\n-          : new RegisteredInvocationsAll();\n+          : new DefaultRegisteredInvocations();\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/DefaultRegisteredInvocations.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.verification;\n+\n+import org.mockito.internal.util.ObjectMethodsGuru;\n+import org.mockito.internal.util.collections.ListUtil;\n+import org.mockito.internal.util.collections.ListUtil.Filter;\n+import org.mockito.invocation.Invocation;\n+\n+import java.io.Serializable;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+public class DefaultRegisteredInvocations implements RegisteredInvocations, Serializable {\n+\n+    private static final long serialVersionUID = -2674402327380736290L;\n+    private final LinkedList<Invocation> invocations = new LinkedList<Invocation>();\n+\n+    public void add(Invocation invocation) {\n+        synchronized (invocations) {\n+            invocations.add(invocation);\n+        }\n+    }\n+\n+    public void removeLast() {\n+        //TODO: add specific test for synchronization of this block (it is tested by InvocationContainerImplTest at the moment)\n+        synchronized (invocations) {\n+            if (! invocations.isEmpty()) {\n+                invocations.removeLast();\n+            }\n+        }\n+    }\n+\n+    public List<Invocation> getAll() {\n+    \tList<Invocation> copiedList;\n+    \tsynchronized (invocations) {\n+\t\t\tcopiedList = new LinkedList<Invocation>(invocations) ;\n+\t\t}\n+\n+        return ListUtil.filter(copiedList, new RemoveToString());\n+    }\n+\n+    public boolean isEmpty() {\n+        synchronized (invocations) {\n+            return invocations.isEmpty();\n+        }\n+    }\n+\n+    private static class RemoveToString implements Filter<Invocation> {\n+        public boolean isOut(Invocation invocation) {\n+            return new ObjectMethodsGuru().isToString(invocation.getMethod());\n+        }\n+    }\n+\n+}\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;\n import org.mockito.internal.util.MockUtilTest;\n import org.mockito.internal.util.collections.ListUtilTest;\n-import org.mockito.internal.verification.RegisteredInvocationsAllTest;\n+import org.mockito.internal.verification.DefaultRegisteredInvocationsTest;\n import org.mockito.internal.verification.checkers.MissingInvocationCheckerTest;\n import org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest;\n import org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest;\n                     AllInvocationsFinderTest.class,\n                     ReturnsEmptyValuesTest.class,\n                     NumberOfInvocationsCheckerTest.class,\n-                    RegisteredInvocationsAllTest.class,\n+                    DefaultRegisteredInvocationsTest.class,\n                     MissingInvocationCheckerTest.class,\n                     NumberOfInvocationsInOrderCheckerTest.class,\n                     MissingInvocationInOrderCheckerTest.class,\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.verification;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.invocation.Invocation;\n+import org.mockitoutil.TestBase;\n+\n+public class DefaultRegisteredInvocationsTest extends TestBase {\n+    \n+    private DefaultRegisteredInvocations invocations;\n+    \n+    @Before\n+    public void setup() {\n+        invocations = new DefaultRegisteredInvocations();\n+    }\n+    \n+    @Test\n+    public void should_not_return_to_string_method() throws Exception {\n+        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n+        Invocation simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n+        \n+        invocations.add(toString);\n+        invocations.add(simpleMethod);\n+        \n+        assertTrue(invocations.getAll().contains(simpleMethod));\n+        assertFalse(invocations.getAll().contains(toString));\n+    }\n+}", "timestamp": 1347829982, "metainfo": ""}