{"sha": "31f908029b8cd9b1f32bed3a41651b30ebb47b9f", "log": "Changed CallsRealMethods to delegate to default answer for abstract methods.  Fixes #122", "commit": "\n--- a/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java\n+++ b/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java\n  */\n package org.mockito.internal.stubbing.answers;\n \n-import java.io.Serializable;\n-\n-import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.stubbing.Answer;\n+import java.io.Serializable;\n+import java.lang.reflect.Modifier;\n+\n+import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Optional Answer that adds partial mocking support\n public class CallsRealMethods implements Answer<Object>, Serializable {\n     private static final long serialVersionUID = 9057165148930624087L;\n \n-    public Object answer(InvocationOnMock invocation) throws Throwable {\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+    \tif (Modifier.isAbstract(invocation.getMethod().getModifiers())) {\n+    \t\treturn new GloballyConfiguredAnswer().answer(invocation);\n+    \t}\n         return invocation.callRealMethod();\n     }\n }\n--- a/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n package org.mockitousage.constructor;\n \n-import org.junit.Ignore;\n+import java.util.List;\n+\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.mock.SerializableMode;\n             assertEquals(\"Mocks instantiated with constructor cannot be combined with \" + SerializableMode.ACROSS_CLASSLOADERS + \" serialization mode.\", e.getMessage());\n         }\n     }\n+\n+    static abstract class AbstractThing {\n+    \tabstract String name();\n+    \tString fullName() {\n+    \t\treturn \"abstract \" + name();\n+    \t}\n+    }\n+    \n+    @Test\n+    public void abstractMethodReturnsDefault() {\n+    \tAbstractThing thing = spy(AbstractThing.class);\n+    \tassertEquals(\"abstract null\", thing.fullName());\n+    }\n+    \n+    @Test\n+    public void abstractMethodStubbed() {\n+    \tAbstractThing thing = spy(AbstractThing.class);\n+    \twhen(thing.name()).thenReturn(\"me\");\n+    \tassertEquals(\"abstract me\", thing.fullName());\n+    }\n+ \n+    @Test\n+    public void testCallsRealInterfaceMethod() {\n+    \tList<String> list = mock(List.class, withSettings().defaultAnswer(CALLS_REAL_METHODS));\n+    \tassertNull(list.get(1));\n+    }\n }", "timestamp": 1416690809, "metainfo": ""}