{"sha": "b98828372603759b1997841a2e2135bc99066b0e", "log": "added javadoc  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401160", "commit": "\n--- a/src/org/junit/mockito/ExperimentalMockitoJUnitRunner.java\n+++ b/src/org/junit/mockito/ExperimentalMockitoJUnitRunner.java\n /**\n  * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n  * <p>\n- * Does what {@link MockitoJUnitRunner} does plus warns when stubbing\n- * TODO copy-paste stuff from web here  \n+ * This runner does exactly what {@link MockitoJUnitRunner} does but also  \n+ * prints useful warnings that can be helpful for debugging failed tests.\n+ * <p>\n+ * Sometimes when the test fails, the underlying reason is that stubbed method was called with wrong arguments. \n+ * Sometimes it fails because one forgets to stub a method or forgets to call a stubbed method. \n+ * All above problems are not immediately obvious.\n+ * <p>\n+ * One way of approaching this problem is full-blown 'expect' API. \n+ * However it means the 'expectations upfront' business which is not in line with core Mockito concepts.\n+ * After all, one of the key points of Mockito are <b>explicit assertions</b> that are always placed at the <b>bottom of the test</b> method.\n+ * <p>\n+ * Let's look at different ways of addressing the issue.\n+ * Here's the experiment: a warning is printed to the standard output if the test fails.\n+ * Also, you get a clickabe link to the line of code. You can immediately jump to the place in code where the potential problem is.\n+ * <p> \n+ * Let's say your test fails on assertion. \n+ * Let's say the underlying reason is a stubbed method that was called with different arguments:\n+ * <pre>\n+ * //test:\n+ * when(translator.translate(\"Mockito\")).thenReturn(\"cool framework\");\n+ * String translated = dictionary.search(\"Mockito\");\n+ * assertEquals(\"cool framework\", translated);\n+ * \n+ * //code:\n+ * public String search(String word) {\n+ *     ...\n+ *     return translator.translate(\"oups\");\n+ *\n+ * </pre>\n+ * On standard output you'll see something like that:\n+ * <pre>\n+ * [Mockito] Warning - stubbed method called with different arguments.\n+ * Stubbed this way:\n+ * translator.translate(\"Mockito\");\n+ * org.dictionary.SmartDictionaryTest.shouldFindTranslation(SmartDictionaryTest.java:27)\n+ *  \n+ * But called with different arguments:\n+ * translator.translate(\"oups\");\n+ * org.dictionary.SmartDictionary.search(SmartDictionary.java:15)\n+ * </pre>\n+ * <p>\n+ * Note that it is just a warning, not an assertion. \n+ * The test fails on assertion because it's the assertion's task to document what the test stands for and what behavior it proves. \n+ * Warnings just helps debugging tests.\n+ * <p>\n+ * Note that code links printed to the console are clickable in any decent IDE (e.g. Eclipse).\n+ * <p>\n+ * So far I identified 3 cases when warnings are printed:\n+ * <li>unstubbed method</li>\n+ * <li>unsued stub</li>\n+ * <li>stubbed method but called with different arguments</li> \n+ * <p>\n+ * <br/>\n+ * Do you think it is useful or not? Drop us an email at mockito@googlegroups.com \n  */\n public class ExperimentalMockitoJUnitRunner extends MockitoJUnitRunner {\n ", "timestamp": 1231609715, "metainfo": ""}