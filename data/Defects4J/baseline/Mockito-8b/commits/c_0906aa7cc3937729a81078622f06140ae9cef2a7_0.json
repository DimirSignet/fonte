{"sha": "0906aa7cc3937729a81078622f06140ae9cef2a7", "log": "In order to have all OS headers consistent  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401577", "commit": "\n--- a/src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java\n+++ b/src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n public interface CapturesArgumensFromInvocation {\n--- a/src/org/mockito/internal/invocation/InvocationMarker.java\n+++ b/src/org/mockito/internal/invocation/InvocationMarker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import java.util.List;\n--- a/src/org/mockito/internal/matchers/CapturesArguments.java\n+++ b/src/org/mockito/internal/matchers/CapturesArguments.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.matchers;\n \n public interface CapturesArguments {\n--- a/src/org/mockito/internal/util/RemoveFirstLine.java\n+++ b/src/org/mockito/internal/util/RemoveFirstLine.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util;\n \n public class RemoveFirstLine {\n--- a/test/org/mockito/ArgumentCaptorTest.java\n+++ b/test/org/mockito/ArgumentCaptorTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.junit.After;\n--- a/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import java.util.Arrays;\n--- a/test/org/mockito/internal/matchers/CapturingMatcherTest.java\n+++ b/test/org/mockito/internal/matchers/CapturingMatcherTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.matchers;\n \n import org.fest.assertions.Assertions;\n--- a/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n+++ b/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.progress;\n \n import org.junit.Test;\n--- a/test/org/mockito/internal/util/ObjectBox.java\n+++ b/test/org/mockito/internal/util/ObjectBox.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util;\n \n \n--- a/test/org/mockito/internal/util/reflection/DummyClassForTests.java\n+++ b/test/org/mockito/internal/util/reflection/DummyClassForTests.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n public class DummyClassForTests extends DummyParentClassForTests {\n--- a/test/org/mockito/internal/util/reflection/DummyParentClassForTests.java\n+++ b/test/org/mockito/internal/util/reflection/DummyParentClassForTests.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n public class DummyParentClassForTests {\n--- a/test/org/mockito/internal/util/reflection/WhiteboxTest.java\n+++ b/test/org/mockito/internal/util/reflection/WhiteboxTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n import org.junit.Test;\n--- a/test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java\n+++ b/test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java\n-package org.mockitousage.bugs;\n-\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n-\n-import org.junit.After;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockitousage.IMethods;\n-import org.mockitoutil.TestBase;\n-\n-@Ignore\n-//TODO\n-public class NPEWithIsAClassMatcherTest extends TestBase {\n-\n-    @Mock IMethods mock;\n-    \n-    @After\n-    public void clearState() {\n-        this.resetState();\n-    }\n-\n-    @Test\n-    public void shouldNotThrowNPEWhenIntegerPassed() {\n-        mock.intArgumentMethod(100);\n-\n-        verify(mock).intArgumentMethod(isA(Integer.class));\n-    }\n-\n-    @Test\n-    public void shouldNotThrowNPEWhenIntPassed() {\n-        mock.intArgumentMethod(100);\n-        \n-        verify(mock).intArgumentMethod(isA(Integer.class));\n-    }\n-    \n-    @Test\n-    public void shouldNotThrowNPEWhenIntegerPassedToEq() {\n-        mock.intArgumentMethod(100);\n-        \n-        verify(mock).intArgumentMethod(eq(new Integer(100)));\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.After;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@Ignore\n+//TODO\n+public class NPEWithIsAClassMatcherTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+    \n+    @After\n+    public void clearState() {\n+        this.resetState();\n+    }\n+\n+    @Test\n+    public void shouldNotThrowNPEWhenIntegerPassed() {\n+        mock.intArgumentMethod(100);\n+\n+        verify(mock).intArgumentMethod(isA(Integer.class));\n+    }\n+\n+    @Test\n+    public void shouldNotThrowNPEWhenIntPassed() {\n+        mock.intArgumentMethod(100);\n+        \n+        verify(mock).intArgumentMethod(isA(Integer.class));\n+    }\n+    \n+    @Test\n+    public void shouldNotThrowNPEWhenIntegerPassedToEq() {\n+        mock.intArgumentMethod(100);\n+        \n+        verify(mock).intArgumentMethod(eq(new Integer(100)));\n+    }\n }", "timestamp": 1248377294, "metainfo": ""}