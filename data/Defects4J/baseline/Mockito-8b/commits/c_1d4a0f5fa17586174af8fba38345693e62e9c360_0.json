{"sha": "1d4a0f5fa17586174af8fba38345693e62e9c360", "log": "Tidy-up in buildSrc - major rewrite of some parts", "commit": "\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/DefaultImprovements.java\n+package org.mockito.release.notes.improvements;\n+\n+import java.util.Set;\n+\n+class DefaultImprovements implements ImprovementSet {\n+\n+    private Set<Improvement> improvements;\n+\n+    public String toText() {\n+        return null;\n+    }\n+\n+    public void add(Improvement improvement) {\n+        improvements.add(improvement);\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java\n+package org.mockito.release.notes.improvements;\n+\n+import org.mockito.release.notes.vcs.Commit;\n+import org.mockito.release.notes.vcs.ContributionSet;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+class GitHubImprovementsProvider implements ImprovementSetProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GitHubImprovementsProvider.class);\n+\n+    public ImprovementSet getImprovements(ContributionSet contributions) {\n+        LOGGER.info(\"Parsing {} commits\", contributions.getAllCommits());\n+        Set<String> ticketIds = findTickets(contributions);\n+        return new GitHubTicketFetcher().fetchTickets(ticketIds);\n+    }\n+\n+    private Set<String> findTickets(ContributionSet contributions) {\n+        Set<String> tickets = new LinkedHashSet<String>();\n+        for (Commit commit : contributions.getAllCommits()) {\n+            Scanner scanner = new Scanner(commit.getMessage());\n+            Pattern ticket = Pattern.compile(\"#\\\\d+\");\n+            while(scanner.hasNext(ticket)) {\n+                String ticketId = scanner.next(ticket).substring(1); //remove leading '#'\n+                tickets.add(ticketId);\n+            }\n+\n+        }\n+        return tickets;\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n+package org.mockito.release.notes.improvements;\n+\n+import com.jcabi.github.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class GitHubTicketFetcher {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GitHubTicketFetcher.class);\n+\n+    ImprovementSet fetchTickets(String gitHubToken, Set<String> ticketIds) {\n+        if (ticketIds.isEmpty()) {\n+            return new DefaultImprovements();\n+        }\n+        try {\n+            //TODO if possible we should query for all tickets via one REST call and perhaps stop using jcapi\n+            LOG.info(\"Querying GitHub API for {} tickets\", ticketIds.size());\n+            RtGithub github = new RtGithub(gitHubToken);\n+            Repo repo = github.repos().get(new Coordinates.Simple(\"mockito/mockito\"));\n+            Issues issues = repo.issues();\n+            DefaultImprovements out = new DefaultImprovements();\n+\n+            for (String ticketId : ticketIds) {\n+                LOG.info(\" #{}\", ticketId);\n+                //TODO make ticked id an int\n+                Issue i = issues.get(Integer.parseInt(ticketId));\n+                Issue.Smart issue = new Issue.Smart(i);\n+                if (issue.exists() && !issue.isOpen()) {\n+                    out.add(new Improvement(issue.number(), issue.title(), issue.htmlUrl(),\n+                            labels(issue.labels())));\n+                }\n+            }\n+            return out;\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Problems fetching \" + ticketIds.size() + \" from GitHub\", e);\n+        }\n+    }\n+\n+    private static Set<String> labels(IssueLabels labels) {\n+        Set<String> out = new HashSet<String>();\n+        for (Label label : labels.iterate()) {\n+            out.add(label.name());\n+        }\n+        return out;\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java\n+package org.mockito.release.notes.improvements;\n+\n+import java.net.URL;\n+import java.util.Set;\n+\n+class Improvement {\n+\n+    private final int id;\n+    private final String title;\n+    private final URL url;\n+    private final Set<String> labels;\n+\n+    public Improvement(int id, String title, URL url, Set<String> labels) {\n+        this.id = id;\n+        this.title = title;\n+        this.url = url;\n+        this.labels = labels;\n+    }\n+\n+    public String toText() {\n+        return title + \"[(#\" + id + \")](\" + url + \")\";\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementSet.java\n+package org.mockito.release.notes.improvements;\n+\n+public interface ImprovementSet {\n+\n+    /**\n+     * human readable representation of the improvements\n+     */\n+    String toText();\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementSetProvider.java\n+package org.mockito.release.notes.improvements;\n+\n+import org.mockito.release.notes.vcs.ContributionSet;\n+\n+public interface ImprovementSetProvider {\n+\n+    ImprovementSet getImprovements(ContributionSet contributions);\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java\n+package org.mockito.release.notes.improvements;\n+\n+public class Improvements {\n+\n+    public static ImprovementSetProvider getImprovementSetProvider() {\n+        return null;\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionsProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionsProvider.java\n package org.mockito.release.notes.vcs;\n \n+/**\n+ * Knows the contributions\n+ */\n public interface ContributionsProvider {\n+\n+    /**\n+     * Provides contributions between specified versions\n+     */\n     ContributionSet getContributionsBetween(String fromRev, String toRev);\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n public class Vcs {\n \n     /**\n-     * Provides the ContributionsProvider\n+     * Provides means to get contributions.\n      */\n     public static ContributionsProvider getContributionsProvider(ProcessRunner runner) {\n         return new GitContributionsProvider(new GitLogProvider(runner), new IgnoreCiSkip());", "timestamp": 1416516894, "metainfo": ""}