{"sha": "120f622c8b299ce2347243dd67b9314cef33da89", "log": "Added MockingDetails; also tweaked Mockito javadocs", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/MockingDetails.java\n+package org.mockito;\n+\n+import org.mockito.internal.util.MockUtil;\n+\n+/**\n+ * Class to inspect any object, and identify whether a particular object is either a mock or a spy.  This is\n+ * effectively a &ldquo;public&rdquo; version of {@link MockUtil}.\n+ */\n+public class MockingDetails {\n+    \n+    private Object toInspect;\n+    private MockUtil delegate;\n+\n+    MockingDetails( Object toInspect, MockUtil delegate ){\n+        this.toInspect = toInspect;\n+        this.delegate = delegate;\n+    }\n+\n+    /**\n+     * Create a MockingDetails to inspect a particular Object.\n+     * @param toInspect the object to inspect\n+     * @return\n+     */\n+    public static MockingDetails of( Object toInspect ){\n+        return new MockingDetails( toInspect, new MockUtil());\n+    }\n+\n+    /**\n+     * Find out whether the object is a mock.\n+     * @return whether the object is a mock.\n+     */\n+    public boolean isMock(){\n+        return delegate.isMock( toInspect );\n+    }\n+\n+    /**\n+     * Find out whether the object is a spy.\n+     * @return whether the object is a spy.\n+     */\n+    public boolean isSpy(){\n+        return delegate.isSpy( toInspect );\n+    }\n+\n+\n+}\n+\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#9\">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation </a><br/>\n  *      <a href=\"#10\">10. Stubbing consecutive calls (iterator-style stubbing) </a><br/> \n  *      <a href=\"#11\">11. Stubbing with callbacks </a><br/>\n- *      <a href=\"#12\">12. <code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doReturn()</code> family of methods mostly for stubbing voids </a><br/>\n+ *      <a href=\"#12\">12. <code>doReturn()</code>|<code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a><br/>\n  *      <a href=\"#13\">13. Spying on real objects </a><br/>\n  *      <a href=\"#14\">14. Changing default return values of unstubbed invocations (Since 1.7) </a><br/>\n  *      <a href=\"#15\">15. Capturing arguments for further assertions (Since 1.8.0) </a><br/>\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n  *      <a href=\"#21\">21. New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </a><br/>\n  *      <a href=\"#22\">22. (New) Verification with timeout (Since 1.8.5) </a><br/>\n- *      <a href=\"#23\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9)</a><br/>\n- *      <a href=\"#24\">24. (**New**) One-liner stubs (Since 1.9)</a><br/>\n- *      <a href=\"#25\">25. (**New**) Verification ignoring stubs (Since 1.9)</a><br/>\n+ *      <a href=\"#23\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a><br/>\n+ *      <a href=\"#24\">24. (**New**) One-liner stubs (Since 1.9.0)</a><br/>\n+ *      <a href=\"#25\">25. (**New**) Verification ignoring stubs (Since 1.9.0)</a><br/>\n+ *      <a href=\"#26\">26. (**New**) Mocking details (Since 1.9.1)</a><br/>\n  * </b>\n  * \n  * <p>\n  * like <code>add()</code>, <code>get()</code>, <code>clear()</code> will be used). <br>\n  * You probably wouldn't mock List class 'in real'.\n  * \n- * <h3 id=\"1\">1. Let's verify some behaviour!</h3>\n+ * <h3 id=\"1\"><a name=\"verify\">1. Let's verify some behaviour!</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //Let's import Mockito statically so that the code looks clearer\n  * Once created, mock will remember all interactions. Then you can selectively\n  * verify whatever interaction you are interested in.\n  * \n- * <h3 id=\"2\">2. How about some stubbing?</h3>\n+ * <h3 id=\"2\"><a name=\"stubbing\">2. How about some stubbing?</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //You can mock concrete classes, not only interfaces\n  * \n  * </ul>\n  * \n- * <h3 id=\"3\">3. Argument matchers</h3>\n+ * <h3 id=\"3\"><a name=\"matchers\">3. Argument matchers</a></h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.\n  * Sometimes, when extra flexibility is required then you might use argument matchers:  \n  * This implementation is due static type safety imposed by java compiler.\n  * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n  * \n- * <h3 id=\"4\">4. Verifying exact number of invocations / at least x / never</h3>\n+ * <h3 id=\"4\"><a name=\"verifyexactly\">4. Verifying exact number of invocations / at least x / never</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //using mock \n  * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be\n  * omitted.\n  * \n- * <h3 id=\"5\">5. Stubbing void methods with exceptions</h3>\n+ * <h3 id=\"5\"><a name=\"stubexceptions\">5. Stubbing void methods with exceptions</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  * Currently <code>stubVoid()</code> is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n  * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods. \n  * \n- * <h3 id=\"6\">6. Verification in order</h3>\n+ * <h3 id=\"6\"><a name=\"verifyinorder\">6. Verification in order</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * // A. Single mock whose methods must be invoked in a particular order\n  * Also, you can create InOrder object passing only mocks that are relevant for\n  * in-order verification.\n  * \n- * <h3 id=\"7\">7. Making sure interaction(s) never happened on mock</h3>\n+ * <h3 id=\"7\"><a name=\"verifynever\">7. Making sure interaction(s) never happened on mock</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //using mocks - only mockOne is interacted\n  * \n  * </code></pre>\n  * \n- * <h3 id=\"8\">8. Finding redundant invocations</h3>\n+ * <h3 id=\"8\"><a name=\"findredundant\">8. Finding redundant invocations</a></h3>\n  * \n  * <pre class=\"code\"><code class=\"java\">\n  * //using mocks\n  * communicates the intent well.\n  * <p>\n  * \n- * <h3 id=\"9\">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation</h3>\n+ * <h3 id=\"9\"><a name=\"mockannotation\">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation</a></h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.</li>\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  * \n- * <h3 id=\"10\"> 10. Stubbing consecutive calls (iterator-style stubbing)</h3>\n+ * <h3 id=\"10\"><a name=\"stubrepeated\"> 10. Stubbing consecutive calls (iterator-style stubbing)</a></h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same\n  * method call. Typical use case could be mocking iterators. \n  *   .thenReturn(\"one\", \"two\", \"three\");\n  * </code></pre>\n  * \n- * <h3 id=\"11\"> 11. Stubbing with callbacks</h3>\n+ * <h3 id=\"11\"><a name=\"stubanswer\"> 11. Stubbing with callbacks</a></h3>\n  * \n  * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </code></pre>\n  * \n- * <h3 id=\"12\"> 12. <code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doReturn()</code> family of methods for stubbing voids (mostly)</h3>\n+ * <h3 id=\"12\"><a name=\"stubdo\"> 12. <code>doReturn()</code>|<code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doCallRealMethod()</code> family of methods</a></h3>\n  * \n  * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n  * <p>\n  *   //following throws RuntimeException:\n  *   mockedList.clear();\n  * </code></pre>\n- * \n- * Read more about other methods:\n+ *\n+ * <p>\n+ * You can use <code>doThrow()</code>, <code>doAnswer()</code>,  <code>doNothing()</code>,  <code>doReturn()</code> and <code>doCallRealMethod()</code> in place\n+ * of the corresponding call with <code>when()</code>, for any method.  It is necessary when you\n+ * <ul>\n+ *     <li>stub void methods</li>\n+ *     <li>stub methods on spy objects (see below)</li>\n+ *     <li>stub the same method more than once, to change the behaviour of a mock in the middle of a test.</li>\n+ * </ul>\n+ * but you may prefer to use these methods in place of the alternative with <code>when()</code>, for all of your stubbing calls.\n+ * <p>\n+ * Read more about these methods:\n+ * <p>\n+ * {@link Mockito#doReturn(Object)}\n  * <p>\n  * {@link Mockito#doThrow(Throwable)}\n  * <p>\n+ * {@link Mockito#doThrow(Class)}\n+ * <p>\n  * {@link Mockito#doAnswer(Answer)}\n  * <p>\n  * {@link Mockito#doNothing()}\n  * <p>\n- * {@link Mockito#doReturn(Object)}\n- * \n- * <h3 id=\"13\"> 13. Spying on real objects</h3>\n+ * {@link Mockito#doCallRealMethod()}\n+ *\n+ * <h3 id=\"13\"><a name=\"spy\"> 13. Spying on real objects</a></h3>\n  * \n  * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called (unless a method was stubbed).\n  * <p>\n  * </li>\n  * </ol>\n  *\n- * <h3 id=\"14\">14. Changing default return values of unstubbed invocations (Since 1.7) </h3>\n+ * <h3 id=\"14\"><a name=\"defaultreturn\">14. Changing default return values of unstubbed invocations (Since 1.7) </a></h3>\n  * \n  * You can create a mock with specified strategy for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n  * <p>\n  * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n- * <h3 id=\"15\">15. Capturing arguments for further assertions (Since 1.8.0) </h3>\n+ * <h3 id=\"15\"><a name=\"captors\">15. Capturing arguments for further assertions (Since 1.8.0) </a></h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.\n  * This is also the recommended way of matching arguments because it makes tests clean & simple.\n  * </ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n  * \n- * <h3 id=\"16\">16. Real partial mocks (Since 1.8.0) </h3>\n+ * <h3 id=\"16\"><a name=\"partialmocks\">16. Real partial mocks (Since 1.8.0) </a></h3>\n  *  \n  *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n  *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n  *  \n- * <h3 id=\"17\">17. Resetting mocks (Since 1.8.0) </h3>\n+ * <h3 id=\"17\"><a name=\"resetting\">17. Resetting mocks (Since 1.8.0) </a></h3>\n  *  \n  * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n  *   //at this point the mock forgot any interactions & stubbing\n  * </code></pre>\n  *  \n- * <h3 id=\"18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </h3>\n+ * <h3 id=\"18\"><a name=\"frameworkvalidate\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a></h3>\n  * \n  * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n  * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n  * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. \n  * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n  * \n- * <h3 id=\"19\">19. Aliases for behavior driven development (Since 1.8.0) </h3>\n+ * <h3 id=\"19\"><a name=\"bddmockito\">19. Aliases for behavior driven development (Since 1.8.0) </a></h3>\n  * \n  * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.\n  * This is exactly how we write our tests and we warmly encourage you to do so!\n  * }  \n  * </code></pre>\n  * \n- * <h3 id=\"20\">20. (**New**) Serializable mocks (Since 1.8.1) </h3>\n+ * <h3 id=\"20\"><a name=\"serializablemocks\">20. (**New**) Serializable mocks (Since 1.8.1) </a></h3>\n  * \n  * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n  * <p>\n  *                 .serializable());\n  * </code></pre>\n  * \n- * <h3 id=\"21\">21. (**New**) New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </h3>\n+ * <h3 id=\"21\"><a name=\"annotations183\">21. (**New**) New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3)</a></h3>\n  * <p>\n  * Release 1.8.3 brings new annotations that may be helpful on occasion:\n  * \n  * All new annotations are <b>*only*</b> processed on {@link MockitoAnnotations#initMocks(Object)}.\n  * Just like for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n- * <h3 id=\"22\">22. (**New**) Verification with timeout (Since 1.8.5)  </h3>\n+ * <h3 id=\"22\"><a name=\"verificationtimeout\">22. (**New**) Verification with timeout (Since 1.8.5)  </a></h3>\n  * <p>\n  * Allows verifying with timeout. May be useful for testing in concurrent conditions.\n  * <p>\n  *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n  * </code></pre>\n  *\n- * <h3 id=\"23\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9)</h3>\n+ * <h3 id=\"23\"><a name=\"autoinstantiate\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a></h3>\n  * <p>\n  * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields\n  * using <b>constructor</b> injection, <b>setter</b> injection, or <b>field</b> injection.\n  * &#064;InjectMocks LocalPub;\n  * </code></pre>\n  *\n- * <h3 id=\"24\">24. (**New**) One-liner stubs (Since 1.9)</h3>\n+ * <h3 id=\"24\"><a name=\"onelinestub\">24. (**New**) One-liner stubs (Since 1.9.0)</a></h3>\n  * <p>\n  * Mockito will now allow you to create mocks when stubbing.\n  * Basically, it allows to create a stub in one line of code.\n  *   &#064;Test public void should... {}\n  * </code></pre>\n  *\n- * <h3 id=\"25\">25. Verification ignoring stubs (Since 1.9)</h3>\n+ * <h3 id=\"25\"><a name=\"verifyignorestubs\">25. Verification ignoring stubs (Since 1.9.0)</a></h3>\n  * <p>\n  * Mockito will now allow to ignore stubbing for the sake of verification.\n  * Sometimes useful when coupled with <code>verifyNoMoreInteractions()</code> or verification <code>inOrder()</code>.\n  * </code></pre>\n  * <p>\n  * Advanced examples and more details can be found in javadoc for {@link Mockito#ignoreStubs(Object...)}\n+ *\n+ * <h3 id=\"26\"><a name=\"mockingdetails\">26. Mocking details (Since 1.9.1)</a></h3>\n+ * <p>\n+ * To identify whether a particular object is a mock or a spy, you can write\n+ * <pre class=\"code\"><code class=\"java\">\n+ *     MockingDetails.of( someObject ).isMock();\n+ *     MockingDetails.of( someObject ).isSpy();\n+ * </code></pre>\n+ * Both the <code>isMock()</code> and <code>isSpy()</code> methods return <code>boolean</code>.\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n--- /dev/null\n+++ b/test/org/mockito/MockingDetailsTest.java\n+package org.mockito;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MockingDetailsTest {\n+    \n+    private static class TestClass{\n+    }\n+\n+    @Mock TestClass mock1;\n+    @Spy TestClass spy1;\n+    \n+    @Before\n+    public void setUp(){\n+        initMocks( this );\n+    }\n+    \n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForAnnotatedMock(){\n+        assertTrue(MockingDetails.of(mock1).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForDirectMock(){\n+        TestClass mock2 = mock( TestClass.class );\n+        assertTrue(MockingDetails.of(mock2).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsMock_ForNonMock(){\n+        TestClass nonMock = new TestClass();\n+        assertFalse(MockingDetails.of(nonMock).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsSpy_ForAnnotatedSpy(){\n+        assertTrue(MockingDetails.of(spy1).isSpy());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsSpy_ForDirectSpy(){\n+        TestClass spy2 = spy( new TestClass());\n+        assertTrue(MockingDetails.of(spy2).isSpy());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsSpy_ForNonSpy(){\n+        TestClass nonSpy = new TestClass();\n+        assertFalse(MockingDetails.of(nonSpy).isSpy());\n+    }\n+}", "timestamp": 1332654962, "metainfo": ""}