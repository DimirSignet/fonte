{"sha": "a72219e8c74fc4cccb8a8a6471a2866e8b6af8f7", "log": "Deprecated timeout.never(), in line with atMost", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     public void atMostShouldNotBeUsedWithTimeout() {\n         throw new FriendlyReminderException(join(\"\",\n                 \"Don't panic! I'm just a friendly reminder!\",\n-                \"timeout() should not be used with atMost() because...\",\n+                \"timeout() should not be used with atMost() or never() because...\",\n                 \"...it does not make much sense - the test would have passed immediately in concurency\",\n                 \"We kept this method only to avoid compilation errors when upgrading Mockito.\",\n                 \"In future release we will remove timeout(x).atMost(y) from the API.\",\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n     /**\n      * See the javadoc for {@link VerificationWithTimeout}\n      */\n-    public VerificationMode never() {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(0));\n+    public VerificationMode never() {\n+        new Reporter().atMostShouldNotBeUsedWithTimeout();\n+        return null;\n     }\n \n     /**\n--- a/src/org/mockito/verification/VerificationWithTimeout.java\n+++ b/src/org/mockito/verification/VerificationWithTimeout.java\n     public VerificationMode times(int wantedNumberOfInvocations);\n     \n     /**\n-     * Alias to times(0), see {@link #times(int)}\n+     * @deprecated\n+     * Validation with timeout combined with never simply does not make sense...\n+     * The test would have passed immediately in the concurrent environment\n      * <p>\n-     * Verifies that interaction did not happen within given timeout. E.g:\n-     * <pre class=\"code\"><code class=\"java\">\n-     *   verify(mock, timeout(100).never()).someMethod();\n-     * </code></pre>\n-     * \n+     * To avoid compilation errors upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n      * <p>\n-     * If you want to verify there were NO interactions with the mock \n-     * check out {@link Mockito#verifyNoMoreInteractions(Object...)}\n+     * In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.\n      * <p>\n-     * See examples in javadoc for {@link Mockito} class\n+     * Do you want to find out more? See <a href=\"http://code.google.com/p/mockito/issues/detail?id=235\">issue 235</a>\n      * \n      * @return verification mode\n      */\n+    @Deprecated    \n     public VerificationMode never();\n     \n     /**\n-     * Allows at-least-once verification withing given timeout. E.g:\n+     * Allows at-least-once verification within given timeout. E.g:\n      * <pre class=\"code\"><code class=\"java\">\n      *   verify(mock, timeout(100).atLeastOnce()).someMethod(\"some arg\");\n      * </code></pre>\n     public VerificationMode atLeastOnce();\n \n     /**\n-     * Allows at-least-x verification withing given timeout. E.g:\n+     * Allows at-least-x verification within given timeout. E.g:\n      * <pre class=\"code\"><code class=\"java\">\n      *   verify(mock, timeout(100).atLeast(3)).someMethod(\"some arg\");\n      * </code></pre>\n      * @deprecated\n      *\n      * <b>Deprecated</b>\n-     * validation with timeout combined with atMost simply does not make sense...\n+     * Validation with timeout combined with atMost simply does not make sense...\n      * The test would have passed immediately in the concurrent environment\n      * <p>\n-     * To avoid compilation erros upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n+     * To avoid compilation errors upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n      * <p>\n-     * In future release we will remove timeout(x).atMost(y) from the API.\n+     * In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.\n      * <p>\n      * Do you want to find out more? See <a href=\"http://code.google.com/p/mockito/issues/detail?id=235\">issue 235</a>\n      *\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n         assertCorrectMode(t.atLeastOnce(), Timeout.class, 50, 25, AtLeast.class);\n         assertCorrectMode(t.atLeast(5), Timeout.class, 50, 25, AtLeast.class);\n         assertCorrectMode(t.times(5), Timeout.class, 50, 25, Times.class);\n-        assertCorrectMode(t.never(), Timeout.class, 50, 25, Times.class);\n         assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);\n     }\n     \n--- a/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n+++ b/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n         t2.start();\n         \n         //then\n-        verify(mock, timeout(1).never()).clear();\n-        verify(mock, timeout(100).times(2)).clear();\n+        verify(mock, timeout(50).atLeast(1)).clear();\n+        verify(mock, timeout(50).times(2)).clear();\n         verifyNoMoreInteractions(mock);\n     }\n     \n         t2.start();\n         \n         //then\n-        verify(mock, timeout(1).never()).clear();\n+        verify(mock, timeout(50).atLeast(1)).clear();\n         try {\n             verify(mock, timeout(100).times(3)).clear();\n             fail();\n     @Test\n     public void shouldAllowMixingOnlyWithTimeoutAndFail() throws Exception {\n         //given\n-        Thread t1 = waitAndExerciseMock(20);        \n+        Thread t1 = waitAndExerciseMock(20);\n         \n         //when\n         t1.start();\n     @Test\n     public void shouldAllowTimeoutVerificationInOrder() throws Exception {\n         //given\n-        Thread t1 = waitAndExerciseMock(20);        \n+        Thread t1 = waitAndExerciseMock(20);\n         \n         //when\n         t1.start();\n         InOrder inOrder = inOrder(mock);\n         inOrder.verify(mock).add(anyString());\n         inOrder.verify(mock, never()).clear();\n-        inOrder.verify(mock, timeout(40)).clear();                             \n+        inOrder.verify(mock, timeout(40)).clear();\n     }\n \n     private Thread waitAndExerciseMock(final int sleep) {", "timestamp": 1375262609, "metainfo": ""}