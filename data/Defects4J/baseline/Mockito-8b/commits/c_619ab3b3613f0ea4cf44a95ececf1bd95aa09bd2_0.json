{"sha": "619ab3b3613f0ea4cf44a95ececf1bd95aa09bd2", "log": "rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40981", "commit": "\n--- a/src/org/mockito/internal/verification/AtLeast.java\n+++ b/src/org/mockito/internal/verification/AtLeast.java\n         AtLeastXNumberOfInvocationsChecker numberOfInvocations = new AtLeastXNumberOfInvocationsChecker();\n         \n         if (wantedCount == 1) {\n-            missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n+            missingInvocation.check(data.getAllInvocations(), data.getWanted());\n         }\n         numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), wantedCount);\n     }\n         AtLeastXNumberOfInvocationsInOrderChecker numberOfCalls = new AtLeastXNumberOfInvocationsInOrderChecker();\n         \n         if (wantedCount == 1) {\n-            missingInvocation.verify(allInvocations, wanted, this);\n+            missingInvocation.check(allInvocations, wanted, this);\n         }\n         \n         numberOfCalls.verify(allInvocations, wanted, wantedCount);\n--- a/src/org/mockito/internal/verification/MissingInvocationChecker.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationChecker.java\n         this.reporter = reporter;\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted) {\n+    public void check(List<Invocation> invocations, InvocationMatcher wanted) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n         \n         if (actualInvocations.isEmpty()) {\n--- a/src/org/mockito/internal/verification/MissingInvocationInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationInOrderChecker.java\n         this.reporter = reporter;\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+    public void check(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n         \n         if (!chunk.isEmpty()) {\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsChecker.java\n         this.finder = finder;\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n+    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n         \n         int actualCount = actualInvocations.size();\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java\n         this.reporter = reporter;\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n+    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount);\n         \n         boolean noMatchFound = chunk.size() == 0;\n--- a/src/org/mockito/internal/verification/Times.java\n+++ b/src/org/mockito/internal/verification/Times.java\n     public void verify(VerificationData data) {\n         if (wantedCount > 0) {\n             MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n-            missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n+            missingInvocation.check(data.getAllInvocations(), data.getWanted());\n         }\n         NumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\n-        numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), wantedCount);\n+        numberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount);\n     }\n     \n     public void verifyInOrder(VerificationData data) {\n         \n         if (wantedCount > 0) {\n             MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n-            missingInvocation.verify(allInvocations, wanted, this);\n+            missingInvocation.check(allInvocations, wanted, this);\n         }\n         NumberOfInvocationsInOrderChecker numberOfCalls = new NumberOfInvocationsInOrderChecker();\n-        numberOfCalls.verify(allInvocations, wanted, wantedCount);\n+        numberOfCalls.check(allInvocations, wanted, wantedCount);\n     }\n     \n     @Override\n--- a/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n     @Test\n     public void shouldAskFinderForActualInvocations() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        verifier.verify(invocations, wanted);\n+        verifier.check(invocations, wanted);\n         \n         assertSame(invocations, finderStub.invocations);\n     }\n     @Test\n     public void shouldPassBecauseActualInvocationFound() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        verifier.verify(invocations, wanted);\n+        verifier.check(invocations, wanted);\n     }\n     \n     @Test\n     public void shouldAskAnalyzerForSimilarInvocation() {\n-        verifier.verify(invocations, wanted);\n+        verifier.check(invocations, wanted);\n         \n         assertSame(invocations, finderStub.invocations);\n     }\n         assertTrue(finderStub.actualToReturn.isEmpty());\n         finderStub.similarToReturn = null;\n         \n-        verifier.verify(invocations, wanted);\n+        verifier.check(invocations, wanted);\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertNull(reporterStub.actualInvocationStackTrace);\n         Invocation actualInvocation = new InvocationBuilder().toInvocation();\n         finderStub.similarToReturn = actualInvocation;\n         \n-        verifier.verify(invocations, wanted);\n+        verifier.check(invocations, wanted);\n         \n         assertNotNull(reporterStub.wanted);\n         assertNotNull(reporterStub.actual);\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderCheckerTest.java\n         Invocation actual = new InvocationBuilder().toInvocation();\n         finderStub.allMatchingUnverifiedChunksToReturn.add(actual);\n         \n-        verifier.verify(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        verifier.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n     }\n     \n     @Test\n     public void shouldReportWantedButNotInvoked() throws Exception {\n         assertTrue(finderStub.allMatchingUnverifiedChunksToReturn.isEmpty());\n-        verifier.verify(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        verifier.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n         \n         assertEquals(wanted, reporterStub.wanted);\n     }\n         Invocation previous = new InvocationBuilder().toInvocation();\n         finderStub.previousInOrderToReturn = previous;\n         \n-        verifier.verify(invocations, wanted, new VerificationModeBuilder().inOrder());\n+        verifier.check(invocations, wanted, new VerificationModeBuilder().inOrder());\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertEquals(previous, reporterStub.previous);\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n     public void shouldReportTooLittleActual() throws Exception {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n-        verifier.verify(invocations, wanted, 100);\n+        verifier.check(invocations, wanted, 100);\n         \n         assertEquals(1, reporterStub.actualCount);\n         assertEquals(100, reporterStub.wantedCount);\n         \n         finderStub.actualToReturn.addAll(asList(first, second));\n         \n-        verifier.verify(invocations, wanted, 100);\n+        verifier.check(invocations, wanted, 100);\n         \n         assertSame(second.getStackTrace(), reporterStub.stackTrace);\n     }\n     public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound() throws Exception {\n         assertTrue(finderStub.actualToReturn.isEmpty());\n         \n-        verifier.verify(invocations, wanted, 100);\n+        verifier.check(invocations, wanted, 100);\n         \n         assertNull(reporterStub.stackTrace);\n     }\n         \n         finderStub.actualToReturn.addAll(asList(first, second, third));\n         \n-        verifier.verify(invocations, wanted, 2);\n+        verifier.check(invocations, wanted, 2);\n         \n         assertSame(third.getStackTrace(), reporterStub.stackTrace);\n     }\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n-        verifier.verify(invocations, wanted, 1);\n+        verifier.check(invocations, wanted, 1);\n         \n         assertEquals(2, reporterStub.actualCount);\n         assertEquals(1, reporterStub.wantedCount);\n         Invocation invocation = new InvocationBuilder().toInvocation();\n         finderStub.actualToReturn.add(invocation);\n         \n-        verifier.verify(invocations, wanted, 0);\n+        verifier.check(invocations, wanted, 0);\n         \n         assertEquals(wanted, reporterStub.wanted);\n         assertEquals(invocation.getStackTrace(), reporterStub.stackTrace);\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderCheckerTest.java\n     @Test\n     public void shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty() throws Exception {\n         assertTrue(finderStub.validMatchingChunkToReturn.isEmpty());\n-        verifier.verify(invocations, wanted, 0);\n+        verifier.check(invocations, wanted, 0);\n     }\n     \n     @Test\n     public void shouldPassIfChunkMatches() throws Exception {\n         finderStub.validMatchingChunkToReturn.add(wanted.getInvocation());\n         \n-        verifier.verify(invocations, wanted, 1);\n+        verifier.check(invocations, wanted, 1);\n     }\n     \n     @Test\n         finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n         \n         try {\n-            verifier.verify(invocations, wanted, 4);\n+            verifier.check(invocations, wanted, 4);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 4 times but was 2\"));\n         finderStub.validMatchingChunkToReturn.addAll(asList(first, second)); \n         \n         try {\n-            verifier.verify(invocations, wanted, 1);\n+            verifier.check(invocations, wanted, 1);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 1 time but was 2\"));\n         assertFalse(invocation.isVerifiedInOrder());\n         finderStub.validMatchingChunkToReturn.addAll(asList(invocation)); \n         \n-        verifier.verify(invocations, wanted, 1);\n+        verifier.check(invocations, wanted, 1);\n         \n         assertTrue(invocation.isVerifiedInOrder());\n     }", "timestamp": 1223983167, "metainfo": ""}