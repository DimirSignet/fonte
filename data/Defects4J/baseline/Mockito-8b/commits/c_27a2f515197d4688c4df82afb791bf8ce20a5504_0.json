{"sha": "27a2f515197d4688c4df82afb791bf8ce20a5504", "log": "Fixed issue 98 In order to avoid NPE in some very rare cases.  --HG-- rename : test/org/mockitousage/bugs/NPEWithIsAClassMatcherTest.java => test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401677", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n      * @return <code>null</code>.\n      */\n     public static <T> T isA(Class<T> clazz) {\n-        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n+        return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T eq(T value) {\n-        return reportMatcher(new Equals(value)).<T>returnNull();\n+        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());\n     }  \n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T same(T value) {\n-        return reportMatcher(new Same(value)).<T>returnNull();\n+        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());\n     }\n \n     /**\n--- a/src/org/mockito/internal/progress/HandyReturnValues.java\n+++ b/src/org/mockito/internal/progress/HandyReturnValues.java\n         if (isPrimitiveWrapper(clazz)) {\n             return primitiveWrapperOf(clazz);\n         } \n-        return primitiveValueFor(clazz);\n+        return primitiveValueOrNullFor(clazz);\n     }\n \n     public Map returnMap() {\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n         return (Class<T>) primitiveTypes.get(clazz);\n     }\n     \n-    public static <T> T primitiveValueFor(Class<T> primitiveType) {\n+    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {\n         return (T) primitiveValues.get(primitiveType);\n     }\n     \n--- /dev/null\n+++ b/test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.After;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import static org.mockito.AdditionalMatchers.*;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class NPEWithCertainMatchersTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+    \n+    @After\n+    public void clearState() {\n+        this.resetState();\n+    }\n+\n+    @Test\n+    public void shouldNotThrowNPEWhenIntegerPassed() {\n+        mock.intArgumentMethod(100);\n+\n+        verify(mock).intArgumentMethod(isA(Integer.class));\n+    }\n+\n+    @Test\n+    public void shouldNotThrowNPEWhenIntPassed() {\n+        mock.intArgumentMethod(100);\n+        \n+        verify(mock).intArgumentMethod(isA(Integer.class));\n+    }\n+    \n+    @Test\n+    public void shouldNotThrowNPEWhenIntegerPassedToEq() {\n+        mock.intArgumentMethod(100);\n+        \n+        verify(mock).intArgumentMethod(eq(new Integer(100)));\n+    }\n+\n+    @Test\n+    public void shouldNotThrowNPEWhenIntegerPassedToSame() {\n+        mock.intArgumentMethod(100);\n+\n+        verify(mock, never()).intArgumentMethod(same(new Integer(100)));\n+    }\n+}", "timestamp": 1257806166, "metainfo": ""}