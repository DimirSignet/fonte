{"sha": "b147aab083b21a961ef1a801e7e6493bf7f32dff", "log": "fixed the problem with equals() on Invocation checking for objects identity rather than equality  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40126", "commit": "\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n     }\n \n     private boolean equalArguments(Object[] arguments) {\n-        //TODO find out if the bottom code has any sense (it's easymock's legacy)\n-        //and if we can replace it with Arrays.equals()\n-        //e.g prove that we should treat the following as not equal calls for chunking evaluation        \n-        //mock.add(new String(\"one\"));\n-        //mock.add(\"one\");\n-        \n-        if (this.arguments.length != arguments.length) {\n-            return false;\n-        }\n-        for (int i = 0; i < this.arguments.length; i++) {\n-            Object myArgument = this.arguments[i];\n-            Object otherArgument = arguments[i];\n-\n-            if (isPrimitiveParameter(i)) {\n-                if (!myArgument.equals(otherArgument)) {\n-                    return false;\n-                }\n-            } else {\n-                if (myArgument != otherArgument) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private boolean isPrimitiveParameter(int parameterPosition) {\n-        Class<?>[] parameterTypes = method.getParameterTypes();\n-        if (method.isVarArgs()) {\n-            //TODO not tested?\n-            parameterPosition = Math.min(parameterPosition,\n-                    parameterTypes.length - 1);\n-        }\n-        return parameterTypes[parameterPosition].isPrimitive();\n+        return Arrays.equals(arguments, this.arguments);\n     }\n \n     private String getMockAndMethodName() {\n--- a/test/org/mockito/InvocationTest.java\n+++ b/test/org/mockito/InvocationTest.java\n     private Invocation call;\n     private Invocation equalCall;\n     private Invocation nonEqualCall;\n-    private Invocation newStringObjectShouldNotBeEqual;\n+    private Invocation callWithNewStringInstance;\n \n     @Before\n     public void setup() throws SecurityException, NoSuchMethodException {\n         equalCall       = new InvocationBuilder().args(\" \").mock(\"mock\").seq(2).toInvocation();\n         nonEqualCall    = new InvocationBuilder().args(\"X\").mock(\"mock\").seq(3).toInvocation();\n         \n-        newStringObjectShouldNotBeEqual    = new InvocationBuilder().args(new String(\" \")).mock(\"mock\").seq(4).toInvocation();\n+        callWithNewStringInstance    = new InvocationBuilder().args(new String(\" \")).mock(\"mock\").seq(4).toInvocation();\n     }\n \n     @Test\n         assertFalse(call.equals(\"\"));\n         assertTrue(call.equals(equalCall));\n         assertFalse(call.equals(nonEqualCall));\n-        assertFalse(call.equals(newStringObjectShouldNotBeEqual));\n+        assertTrue(call.equals(callWithNewStringInstance));\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n     public void shouldScreamWhenNotStrictMockPassedToStrictly() {\n         strictly.verify(mockTwo, atLeastOnce()).simpleMethod(1);\n     } \n+    \n+    @Test\n+    public void shouldUseEqualsToVerifyMethodArguments() {\n+        mockOne = mock(IMethods.class);\n+        \n+        String textOne = \"test\";\n+        String textTwo = new String(textOne);\n+        \n+        assertEquals(textOne, textTwo);\n+        assertNotSame(textOne, textTwo);\n+        \n+        mockOne.simpleMethod(textOne);\n+        mockOne.simpleMethod(textTwo);\n+        \n+        verify(mockOne, 2).simpleMethod(textOne);\n+        \n+        strictly = createStrictOrderVerifier(mockOne);\n+        strictly.verify(mockOne, 2).simpleMethod(textOne);\n+    } \n+    \n+    @Test\n+    public void shouldUseEqualsToVerifyMethodVarargs() {\n+        mockOne = mock(IMethods.class);\n+        \n+        String textOne = \"test\";\n+        String textTwo = new String(textOne);\n+        \n+        assertEquals(textOne, textTwo);\n+        assertNotSame(textOne, textTwo);\n+        \n+        mockOne.varargsObject(1, textOne, textOne);\n+        mockOne.varargsObject(1, textTwo, textTwo);\n+        \n+        verify(mockOne, 2).varargsObject(1, textOne, textOne);\n+        \n+        strictly = createStrictOrderVerifier(mockOne);\n+        strictly.verify(mockOne, 2).varargsObject(1, textOne, textOne);\n+    } \n }", "timestamp": 1196690893, "metainfo": ""}