{"sha": "649fe76fe86ced40dc7185c706accd659507ae68", "log": "got rid of warnings fixed javadoc a bit  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401117", "commit": "\n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.progress;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.Invocation;\n--- a/src/org/mockito/internal/progress/NewOngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/NewOngoingStubbing.java\n  * when(mock.someMethod(\"some arg\"))\n  *  .thenThrow(new RuntimeException())\n  *  .thenReturn(\"foo\");\n+ * \n+ * //There is a shorter way of consecutive stubbing:\n+ * when(mock.someMethod()).thenReturn(1,2,3);\n+ * when(mock.otherMethod()).thenThrow(exc1, exc2);\n  * </pre>\n  *\n  * See examples in javadoc for {@link Mockito#when}\n      * when(mock.someMethod()).thenReturn(1, 2, 3);\n      * </pre>\n      *\n+     * Last return value in the sequence (in example: 3) determines the behavior of further consecutive calls.\n+     * <p>\n      * See examples in javadoc for {@link Mockito#when}\n      *\n      * @param value first return value\n      *\n      * If throwables contain a checked exception then it has to\n      * match one of the checked exceptions of method signature.\n-     *\n+     * <p>\n+     * You can specify throwables to be thrown for consecutive calls. \n+     * In that case the last throwable determines the behavior of further consecutive calls.\n+     * <p>\n+     * if throwable is null then exception will be thrown.\n+     * <p>\n      * See examples in javadoc for {@link Mockito#when}\n      *\n      * @param throwables to be thrown on method invocation\n--- a/test/org/mockitousage/misuse/InvalidUsageTest.java\n+++ b/test/org/mockitousage/misuse/InvalidUsageTest.java\n     \n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n+        when(mock.simpleMethod()).thenThrow(new Throwable[] {null});\n+    }    \n+\n+    @SuppressWarnings(\"all\")\n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowSettingNullThrowableVararg() throws Exception {\n         when(mock.simpleMethod()).thenThrow(null);\n+    }    \n+\n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowSettingNullConsecutiveThrowable() throws Exception {\n+        when(mock.simpleMethod()).thenThrow(new RuntimeException(), null);\n     }    \n     \n     final class FinalClass {}", "timestamp": 1230730644, "metainfo": ""}