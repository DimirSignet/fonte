{"sha": "75e15e432ce0caed960387dbdf363b6872794d90", "log": "Fixing issue 188 (@Captor annotation does not deal nicely with primitive types)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401980", "commit": "\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n         AnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\n         Field[] fields = clazz.getDeclaredFields();\n         for (Field field : fields) {\n+            //below can be removed later, when we get rid of deprecated stuff\n             if (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {\n                 //this means user has his own annotation engine and we have to respect that.\n                 //we will do annotation processing the old way so that we are backwards compatible\n                 processAnnotationDeprecatedWay(annotationEngine, testClass, field);                \n             } \n-            //act 'the new' way\n-            annotationEngine.process(clazz, testClass);\n         }\n+        //act 'the new' way\n+        annotationEngine.process(clazz, testClass);\n     }\n \n     @SuppressWarnings(\"deprecation\")\n--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n \n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n                     + field.getName() + \"' has wrong type\\n\"\n                     + \"For info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.\");\n         }\n-        return ArgumentCaptor.forClass(Object.class); // Object.class due to\n-                                                      // erasure\n+        Type generic = field.getGenericType();\n+        if (generic != null && generic instanceof ParameterizedType) {\n+            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+            return ArgumentCaptor.forClass(typeToClass(actual));\n+        }\n+        return ArgumentCaptor.forClass(Object.class);    \n     }       \n+\n+    private Class typeToClass(Type actual) {\n+        if (actual.equals(Double.class)) {\n+            return Double.class;\n+        }\n+        return Object.class;\n+    }\n \n     @Override\n     public void process(Class<?> clazz, Object testClass) {\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockitoutil.TestBase;\n+\n+//see issue 188\n+public class CaptorAnnotationAutoboxingTest extends TestBase {\n+    \n+    interface Fun {\n+        void doFun(double prmitive);\n+    }\n+    \n+    @Mock Fun fun;\n+    @Captor ArgumentCaptor<Double> captor;\n+\n+    @Test\n+    public void shouldAutoboxSafely() {\n+        //given\n+        fun.doFun(1.0);\n+        \n+        //then\n+        verify(fun).doFun(captor.capture());\n+        assertEquals((Double) 1.0, captor.getValue());\n+    }\n+}", "timestamp": 1274026809, "metainfo": ""}