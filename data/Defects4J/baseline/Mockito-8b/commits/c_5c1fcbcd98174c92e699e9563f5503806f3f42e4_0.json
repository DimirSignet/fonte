{"sha": "5c1fcbcd98174c92e699e9563f5503806f3f42e4", "log": "made thenReturn type safe  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401064", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     }\n \n     private abstract class BaseStubbing implements NewOngoingStubbing<T>, DeprecatedOngoingStubbing<T> {\n-        public NewOngoingStubbing<T> thenReturn(Object value) {\n+        public NewOngoingStubbing<T> thenReturn(T value) {\n             return thenAnswer(new Returns(value));\n         }\n \n-        public NewOngoingStubbing<T> thenReturn(Object value, Object... values) {\n+        public NewOngoingStubbing<T> thenReturn(T value, T... values) {\n             NewOngoingStubbing<T> stubbing = thenReturn(value);            \n             if (values == null) {\n                 return stubbing.thenReturn(null);\n             }\n-            for (Object v: values) {\n+            for (T v: values) {\n                 stubbing = stubbing.thenReturn(v);\n             }\n             return stubbing;\n             return stubbing;\n         }        \n \n-        public DeprecatedOngoingStubbing<T> toReturn(Object value) {\n+        public DeprecatedOngoingStubbing<T> toReturn(T value) {\n             return toAnswer(new Returns(value));\n         }\n \n--- a/src/org/mockito/internal/progress/NewOngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/NewOngoingStubbing.java\n      *\n      * @return ongoingStubbing object that allows stubbing consecutive calls\n      */\n-    NewOngoingStubbing<T> thenReturn(Object value);\n+    NewOngoingStubbing<T> thenReturn(T value);\n \n     /**\n      * Sets consecutive return values to be returned when the method is called. E.g:\n      *\n      * @return ongoingStubbing object that allows stubbing consecutive calls\n      */\n-    NewOngoingStubbing<T> thenReturn(Object value, Object... values);\n+    NewOngoingStubbing<T> thenReturn(T value, T... values);\n \n     /**\n      * Sets Throwable objects to be thrown when the method is called. E.g:", "timestamp": 1225394621, "metainfo": ""}