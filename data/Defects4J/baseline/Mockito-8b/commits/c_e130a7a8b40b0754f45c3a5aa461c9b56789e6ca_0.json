{"sha": "e130a7a8b40b0754f45c3a5aa461c9b56789e6ca", "log": "Moved internal JUnitRule to better package", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/junit/JUnitRule.java\n+package org.mockito.internal.junit;\n+\n+import org.junit.runners.model.Statement;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Internal implementation.\n+ */\n+public class JUnitRule {\n+    public Statement apply(final Statement base, final Object target) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                MockitoAnnotations.initMocks(target);\n+                base.evaluate();\n+                Mockito.validateMockitoUsage();\n+            }\n+        };\n+    }\n+}\n--- a/src/org/mockito/junit/MockitoJUnitRule.java\n+++ b/src/org/mockito/junit/MockitoJUnitRule.java\n import org.junit.rules.MethodRule;\n import org.junit.runners.model.FrameworkMethod;\n import org.junit.runners.model.Statement;\n-import org.mockito.internal.rules.JUnitRule;\n+import org.mockito.internal.junit.JUnitRule;\n import org.mockito.rules.MockitoJUnit;\n \n \n--- /dev/null\n+++ b/test/org/mockito/internal/junit/JUnitRuleTest.java\n+package org.mockito.internal.junit;\n+\n+import org.junit.Test;\n+import org.junit.runners.model.Statement;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n+import org.mockito.internal.junit.JUnitRule;\n+\n+import static org.junit.Assert.*;\n+\n+public class JUnitRuleTest {\n+\n+    private JUnitRule jUnitRule = new JUnitRule();\n+    private InjectTestCase injectTestCase = new InjectTestCase();\n+\n+    @Test\n+    public void shouldInjectIntoTestCase() throws Throwable {\n+        jUnitRule.apply(new DummyStatement(), injectTestCase).evaluate();\n+        assertNotNull(\"@Mock mock object created\", injectTestCase.getInjected());\n+        assertNotNull(\"@InjectMocks object created\", injectTestCase.getInjectInto());\n+        assertNotNull(\"Mock injected into the object\", injectTestCase.getInjectInto().getInjected());\n+    }\n+\n+    @Test\n+    public void shouldRethrowException() throws Throwable {\n+        try {\n+            jUnitRule.apply(new ExceptionStatement(), injectTestCase).evaluate();\n+            fail(\"Should throw exception\");\n+        } catch (RuntimeException e) {\n+            assertEquals(\"Correct message\", \"Statement exception\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldDetectUnfinishedStubbing() throws Throwable {\n+        try {\n+            jUnitRule.apply(new UnfinishedStubbingStatement(), injectTestCase).evaluate();\n+            fail(\"Should detect invalid Mockito usage\");\n+        } catch (UnfinishedStubbingException e) {\n+        }\n+    }\n+\n+    private static class DummyStatement extends Statement {\n+        @Override\n+        public void evaluate() throws Throwable {\n+        }\n+    }\n+\n+    private static class ExceptionStatement extends Statement {\n+        @Override\n+        public void evaluate() throws Throwable {\n+            throw new RuntimeException(\"Statement exception\");\n+        }\n+    }\n+\n+    private static class UnfinishedStubbingStatement extends Statement {\n+        @Override\n+        public void evaluate() throws Throwable {\n+            InjectTestCase injectTestCase = new InjectTestCase();\n+            MockitoAnnotations.initMocks(injectTestCase);\n+            injectTestCase.unfinishedStubbingThrowsException();\n+        }\n+    }\n+\n+    public static class InjectTestCase {\n+\n+        @Mock\n+        private Injected injected;\n+\n+        @InjectMocks\n+        private InjectInto injectInto;\n+\n+        @Test\n+        public void dummy() throws Exception {\n+        }\n+\n+        public void unfinishedStubbingThrowsException() throws Exception {\n+            Mockito.when(injected.stringMethod());\n+        }\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+\n+        public InjectInto getInjectInto() {\n+            return injectInto;\n+        }\n+\n+        public static class Injected {\n+            public String stringMethod() {\n+                return \"string\";\n+            }\n+        }\n+\n+        public static class InjectInto {\n+            private Injected injected;\n+\n+            public Injected getInjected() {\n+                return injected;\n+            }\n+        }\n+\n+    }\n+}", "timestamp": 1418685930, "metainfo": ""}