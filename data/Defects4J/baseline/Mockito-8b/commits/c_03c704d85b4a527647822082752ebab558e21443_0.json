{"sha": "03c704d85b4a527647822082752ebab558e21443", "log": "removed dead code  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401108", "commit": "\n--- a/src/org/mockito/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n package org.mockito.exceptions.base;\n \n import java.util.Arrays;\n-import java.util.LinkedList;\n import java.util.List;\n \n public class StackTraceFilter {\n     public boolean isLastStackElementToRemove(StackTraceElement e) {\n         boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n         boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n-        //boolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\n-        //) && !isRunner;\n         return fromMockObject || fromOrgMockito;\n     }\n \n         List<StackTraceElement> filtered = unfilteredStackTrace.subList(lastToRemove + 1, unfilteredStackTrace.size());\n         hasStackTrace.setStackTrace(filtered.toArray(new StackTraceElement[]{}));\n     }\n-\n-    //TODO dummy & duplicated\n-    public void removeRunner(HasStackTrace hasStackTrace) {\n-        StackTraceElement[] stackTrace = hasStackTrace.getStackTrace();\n-        List<StackTraceElement> filtered = new LinkedList<StackTraceElement>();\n-        for (StackTraceElement trace : stackTrace) {\n-            boolean isRunner = trace.getClassName().startsWith(\"org.mockito.runners.\");\n-            if (!isRunner) {\n-                filtered.add(trace);\n-            }\n-        }\n-        hasStackTrace.setStackTrace(filtered.toArray(new StackTraceElement[]{}));\n-    }\n }", "timestamp": 1230494843, "metainfo": ""}