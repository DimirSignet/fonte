{"sha": "2bebe821a7e31ed6cfcfecab07eab35d9c6b3b2d", "log": "covered scenario when argument is null  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40135", "commit": "\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n     private List<IArgumentMatcher> argumentsToMatchers() {\n         List<IArgumentMatcher> matchers = new LinkedList<IArgumentMatcher>();\n         for (Object arg : this.arguments) {\n-            //TODO cover the arg == null scenario\n             if (arg != null && arg.getClass().isArray()) {\n                 matchers.add(new ArrayEquals(arg));\n             } else {\n--- a/test/org/mockito/InvocationTest.java\n+++ b/test/org/mockito/InvocationTest.java\n         Map map = new HashMap();\n         try {\n             map.put(call, \"one\");\n+            fail();\n         } catch (RuntimeException e) {\n             assertEquals(\"hashCode() is not implemented\", e.getMessage());\n         }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n         \n         try {\n             verify(mock).oneArray(aryEq(nullArray));\n+            fail();\n         } catch (VerificationError e) {\n             String expected = \"\\n\" +\n             \t\t\"Wanted but not invoked:\" +\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n import static org.mockito.CrazyMatchers.startsWith;\n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n        \n         try {\n             three.simpleMethod(\"test three again\");\n+            fail();\n         } catch (RuntimeException e) {};\n     }\n     \n \n         try {\n             one.oneArg(true);\n+            fail();\n         } catch (RuntimeException e) {}\n \n         one.simpleMethod(100);\n         \n         try {\n             verify(three).varargsObject(eq(10), eq(\"first arg\"), startsWith(\"third\"));\n+            fail();\n         } catch (VerificationError e) {}\n     }\n }\n--- a/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n             assertEquals(expected, e.getMessage());\n         }\n     }\n-}\n+    \n+    @Test\n+    public void shouldPrintNullArguments() throws Exception {\n+        mock.simpleMethod(null, null);\n+        try {\n+            verify(mock).simpleMethod(\"test\");\n+            fail();\n+        } catch (VerificationError e) {\n+            assertTrue(e.getMessage().contains(\"simpleMethod(null, null)\"));\n+        }\n+    }\n+}", "timestamp": 1196900463, "metainfo": ""}