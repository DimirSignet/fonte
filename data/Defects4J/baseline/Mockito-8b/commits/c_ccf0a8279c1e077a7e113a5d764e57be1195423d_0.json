{"sha": "ccf0a8279c1e077a7e113a5d764e57be1195423d", "log": "Rename job", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/comparison/PublicationsComparatorTask.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/comparison/PublicationsComparatorTask.java\n \n public class PublicationsComparatorTask extends DefaultTask implements PublicationsComparator {\n \n-    private BinaryComparator binaryComparator = new BinaryComparator();\n+    private ZipComparator zipComparator = new ZipComparator();\n     private PomComparator pomComparator = new PomComparator();\n     private Boolean publicationsEqual;\n \n     public void compareBinaries(Closure<File> left, Closure<File> right) {\n-        binaryComparator.setPair(left, right);\n+        zipComparator.setPair(left, right);\n     }\n \n     public void comparePoms(Closure<String> left, Closure<String> right) {\n         boolean poms = pomComparator.areEqual();\n         getLogger().lifecycle(\"{} - pom files equal: {}\", getPath(), poms);\n \n-        BinaryComparator.Result result = binaryComparator.compareFiles();\n+        ZipComparator.Result result = zipComparator.compareFiles();\n         getLogger().info(\"{} - compared binaries: '{}' and '{}'\", getPath(), result.getFile1(), result.getFile2());\n         boolean jars = result.areEqual();\n         getLogger().lifecycle(\"{} - source jars equal: {}\", getPath(), jars);\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/comparison/ZipComparator.java\n+package org.mockito.release.comparison;\n+\n+import groovy.lang.Closure;\n+\n+import java.io.File;\n+\n+import static org.mockito.release.util.ArgumentValidation.notNull;\n+\n+class ZipComparator {\n+\n+    private Closure<File> file1;\n+    private Closure<File> file2;\n+\n+    ZipComparator setPair(Closure<File> file1, Closure<File> file2) {\n+        notNull(file1, \"source jar file to compare\", file2, \"source jar file to compare\");\n+        this.file1 = file1;\n+        this.file2 = file2;\n+        return this;\n+    }\n+\n+    Result compareFiles() {\n+        final File file1 = this.file1.call();\n+        final File file2 = this.file2.call();\n+        notNull(file1, \"source jar file to compare\", file2, \"source jar file to compare\");\n+\n+        FileHasher hasher = new FileHasher();\n+        final byte[] hash1 = hasher.hash(file1);\n+        final byte[] hash2 = hasher.hash(file2);\n+\n+        final boolean equals = new ZipCompare().compareZips(file1.getAbsolutePath(), file2.getAbsolutePath());\n+\n+        return new Result() {\n+            public boolean areEqual() { return equals; }\n+            public File getFile1() { return file1; }\n+            public File getFile2() { return file2; }\n+        };\n+    }\n+\n+    static interface Result {\n+        boolean areEqual();\n+        File getFile1();\n+        File getFile2();\n+    }\n+}", "timestamp": 1416078327, "metainfo": ""}