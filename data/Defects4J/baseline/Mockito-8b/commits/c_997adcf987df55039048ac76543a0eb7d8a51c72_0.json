{"sha": "997adcf987df55039048ac76543a0eb7d8a51c72", "log": "removed dead code  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40419", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n     }\n \n     public String toString(List<Matcher> matchers) {\n-        String mockName = MockNamer.nameForMock(mock);\n-        String methodName = method.getName();\n-        String arguments = getArgumentsString(matchers);\n-        \n-        return mockName + \".\" + methodName + arguments;\n-    }\n-\n-    public String toStringWithArgumentTypes() {\n-        StringBuilder result = new StringBuilder();\n-        result.append((MockNamer.nameForMock(mock) + \".\" + method.getName()));\n-        result.append(\"(\");\n-        for (Class<?> paramType : getMethod().getParameterTypes()) {\n-            result.append(paramType);\n-            result.append(\", \");\n-        } \n-        return result.toString().replaceFirst(\", $\", \"\").concat(\")\");\n-    }\n-    \n-    private String getArgumentsString(List<Matcher> matchers) {\n-        Description result = new StringDescription();\n-        result.appendList(\"(\", \", \", \")\", matchers);\n-        return result.toString();\n-    }\n-    \n-    private List<Matcher> argumentsToMatchers() {\n-        List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n-        for (Object arg : arguments) {\n-            if (arg != null && arg.getClass().isArray()) {\n-                matchers.add(new ArrayEquals(arg));\n-            } else {\n-                matchers.add(new Equals(arg));\n-            }\n-        }\n-        return matchers;\n+        return qualifiedMethodName() + getArgumentsString(matchers);\n     }\n \n     public String getMethodName() {\n-        //TODO duplicated, unordered\n-        return MockNamer.nameForMock(mock) + \".\" + method.getName() + \"(...)\";\n+        return qualifiedMethodName() + \"(...)\";\n     }\n \n     public String getTypedArgs() {\n \n         return d.toString();\n     }\n+    \n+\n+    private String qualifiedMethodName() {\n+        return MockNamer.nameForMock(mock) + \".\" + method.getName();\n+    }\n+\n+    private String getArgumentsString(List<Matcher> matchers) {\n+        Description result = new StringDescription();\n+        result.appendList(\"(\", \", \", \")\", matchers);\n+        return result.toString();\n+    }\n+    \n+    private List<Matcher> argumentsToMatchers() {\n+        List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n+        for (Object arg : arguments) {\n+            if (arg != null && arg.getClass().isArray()) {\n+                matchers.add(new ArrayEquals(arg));\n+            } else {\n+                matchers.add(new Equals(arg));\n+            }\n+        }\n+        return matchers;\n+    }\n \n     private String argNumber(int zeroBasedIndex) {\n         String no = String.valueOf(zeroBasedIndex+1);\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n         return invocation.toString(matchers);\n     }\n     \n-    public String toStringWithArgumentTypes() {\n-        return invocation.toStringWithArgumentTypes();\n-    }\n-\n     public String getMethodName() {\n         return invocation.getMethodName();\n     }", "timestamp": 1204422382, "metainfo": ""}