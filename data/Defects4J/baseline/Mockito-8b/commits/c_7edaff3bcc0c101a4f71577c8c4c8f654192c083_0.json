{"sha": "7edaff3bcc0c101a4f71577c8c4c8f654192c083", "log": "JUnit rule compatible with JUnit 4.7+  Fixes #140", "commit": "\n--- a/src/org/mockito/internal/rules/JUnitRule.java\n+++ b/src/org/mockito/internal/rules/JUnitRule.java\n package org.mockito.internal.rules;\n \n-import org.junit.runner.Description;\n import org.junit.runners.model.Statement;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n  * Internal implementation.\n  */\n public class JUnitRule {\n-    private Object object;\n-\n-    public JUnitRule(Object object) {\n-        this.object = object;\n-    }\n-\n-    public Statement apply(final Statement base, Description description) {\n+    public Statement apply(final Statement base, final Object target) {\n         return new Statement() {\n             @Override\n             public void evaluate() throws Throwable {\n-                MockitoAnnotations.initMocks(object);\n+                MockitoAnnotations.initMocks(target);\n                 base.evaluate();\n                 Mockito.validateMockitoUsage();\n             }\n--- a/src/org/mockito/junit/MockitoJUnitRule.java\n+++ b/src/org/mockito/junit/MockitoJUnitRule.java\n package org.mockito.junit;\n \n-import org.junit.rules.TestRule;\n-import org.junit.runner.Description;\n+import org.junit.rules.MethodRule;\n+import org.junit.runners.model.FrameworkMethod;\n import org.junit.runners.model.Statement;\n import org.mockito.internal.rules.JUnitRule;\n-\n-import static org.mockito.internal.util.Checks.checkNotNull;\n \n /**\n  * The MockitoJUnitRule Rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}.\n  * public class ExampleTest {\n  *\n  *     &#064;Rule\n- *     public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);</b>\n+ *     public MockitoJUnitRule mockitoJUnitRule = MockitoJUnitRule.rule();</b>\n  *\n  *     &#064;Mock\n  *     private List list;\n  * }\n  * </code></pre>\n  */\n-public class MockitoJUnitRule implements TestRule {\n+public class MockitoJUnitRule implements MethodRule {\n \n     private final JUnitRule jUnitRule;\n \n     /**\n+     */\n+    public MockitoJUnitRule() {\n+        this.jUnitRule = new JUnitRule();\n+    }\n+\n+    /**\n+     * Please use {@link MockitoJUnitRule#MockitoJUnitRule()}.\n      * @param targetTest the test class instance where the rule is declared. Cannot be null.\n      */\n+    @Deprecated\n     public MockitoJUnitRule(Object targetTest) {\n-        checkNotNull(targetTest, \"Mockito JUnit rule target\");\n-        this.jUnitRule = new JUnitRule(targetTest);\n+        this();\n     }\n \n-    public Statement apply(final Statement base, Description description) {\n-        return jUnitRule.apply(base, description);\n+    /**\n+     * @return new default MockitoJUnitRule.\n+     */\n+    public static MockitoJUnitRule rule() {\n+        return new MockitoJUnitRule();\n     }\n \n+    public Statement apply(Statement base, FrameworkMethod method, Object target) {\n+        return jUnitRule.apply(base, target);\n+    }\n }\n--- a/test/org/mockito/internal/rules/InjectTestCase.java\n+++ b/test/org/mockito/internal/rules/InjectTestCase.java\n         return injectInto;\n     }\n \n-    private static class Injected {\n+    public static class Injected {\n         public String stringMethod() {\n             return \"string\";\n         }\n     }\n \n-    private static class InjectInto {\n+    public static class InjectInto {\n         private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n     }\n \n }\n--- a/test/org/mockito/internal/rules/JUnitRuleTest.java\n+++ b/test/org/mockito/internal/rules/JUnitRuleTest.java\n package org.mockito.internal.rules;\n \n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.Description;\n import org.junit.runners.model.Statement;\n import org.mockito.MockitoAnnotations;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n public class JUnitRuleTest {\n \n     @Before\n     public void setUp() throws Exception {\n         injectTestCase = new InjectTestCase();\n-        jUnitRule = new JUnitRule(injectTestCase);\n+        jUnitRule = new JUnitRule();\n     }\n \n     @Test\n     public void testInject() throws Throwable {\n-        jUnitRule.apply(new DummyStatement(), Description.EMPTY).evaluate();\n-        assertNotNull(\"\", injectTestCase.getInjected());\n-        assertNotNull(\"\", injectTestCase.getInjectInto());\n+        jUnitRule.apply(new DummyStatement(), injectTestCase).evaluate();\n+        assertNotNull(\"@Mock mock object created\", injectTestCase.getInjected());\n+        assertNotNull(\"@InjectMocks object created\", injectTestCase.getInjectInto());\n+        assertNotNull(\"Mock injected into the object\", injectTestCase.getInjectInto().getInjected());\n     }\n \n     @Test\n     public void testThrowAnException() throws Throwable {\n         try {\n-            jUnitRule.apply(new ExceptionStatement(), Description.EMPTY).evaluate();\n+            jUnitRule.apply(new ExceptionStatement(), injectTestCase).evaluate();\n             fail(\"Should throw exception\");\n         } catch (RuntimeException e) {\n             assertEquals(\"Correct message\", \"Statement exception\", e.getMessage());\n     @Test\n     public void testMockitoValidation() throws Throwable {\n         try {\n-            jUnitRule.apply(new UnfinishedStubbingStatement(), Description.EMPTY).evaluate();\n-            fail(\"Should detect unvalid Mockito usage\");\n+            jUnitRule.apply(new UnfinishedStubbingStatement(), injectTestCase).evaluate();\n+            fail(\"Should detect invalid Mockito usage\");\n         } catch (UnfinishedStubbingException e) {\n         }\n     }\n--- a/test/org/mockito/junit/MockitoJUnitRuleTest.java\n+++ b/test/org/mockito/junit/MockitoJUnitRuleTest.java\n public class MockitoJUnitRuleTest {\n \n     @Rule\n-    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule();\n \n     @Mock\n     private Injected injected;\n \n     }\n \n-    @Test\n-    public void testThrowExceptionWhenNullTarget() throws Exception {\n-        try {\n-            new MockitoJUnitRule(null);\n-            fail();\n-        } catch (NullPointerException e) {\n-            assertEquals(\"valid message\", \"Mockito JUnit rule target should not be null\", e.getMessage());\n-        }\n+    public static class Injected {\n     }\n \n-    private static class Injected {\n-    }\n-\n-    private static class InjectInto {\n+    public static class InjectInto {\n \n         private Injected injected;\n \n--- /dev/null\n+++ b/test/org/mockito/rules/InvalidTargetMockitoJUnitRuleTest.java\n+package org.mockito.rules;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.rules.MockitoJUnitRuleTest.InjectInto;\n+import static org.mockito.rules.MockitoJUnitRuleTest.Injected;\n+\n+public class InvalidTargetMockitoJUnitRuleTest {\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(\"asdf\");\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInvalidReference() throws Exception {\n+        assertNull(\"Mock not created\", injected);\n+        assertNull(\"Test object not created\", injectInto);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/rules/RuleTestWithFactoryMethodTest.java\n+package org.mockito.rules;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleTestWithFactoryMethodTest {\n+\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = MockitoJUnitRule.rule();\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInjectMocks() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Object created\", injectInto);\n+        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n+\n+    }\n+\n+    public static class Injected {\n+    }\n+\n+    public static class InjectInto {\n+\n+        private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/rules/RuleTestWithParameterConstructorTest.java\n+package org.mockito.rules;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleTestWithParameterConstructorTest {\n+\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInjectMocks() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Object created\", injectInto);\n+        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n+\n+    }\n+\n+    public static class Injected {\n+    }\n+\n+    public static class InjectInto {\n+\n+        private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+    }\n+}", "timestamp": 1418685922, "metainfo": ""}