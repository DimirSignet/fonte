{"sha": "62f7eddb2323516cf65ecb7f060a7e857aabe8fd", "log": "- added BDD(then) style verification of mock behavior - added tests for this feature", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.OngoingStubbing;\n import org.mockito.stubbing.Stubber;\n+import org.mockito.verification.VerificationMode;\n \n /**\n  * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.\n     public static <T> BDDMyOngoingStubbing<T> given(T methodCall) {\n         return new BDDOngoingStubbingImpl<T>(Mockito.when(methodCall));\n     }\n+\n+    /**\n+     * Bdd style verification of mock behavior.\n+     *\n+     * @see #verify(Object)\n+     * @see #verify(Object, VerificationMode)\n+     */\n+    public static <T> Then<T> then(T mock) {\n+        return new Then<T>(mock);\n+    }\n+\n+    /**\n+     * Provides fluent way of mock verification.\n+     *\n+     * @author Lovro Pandzic\n+     * @param <T> type of the mock\n+     */\n+    public final static class Then<T> {\n+\n+        private final T mock;\n+\n+        public Then(T mock) {\n+\n+            this.mock = mock;\n+        }\n+\n+        /**\n+         * @see #verify(Object)\n+         */\n+        public T should() {\n+            return verify(mock);\n+        }\n+\n+        /**\n+         * @see #verify(Object, VerificationMode)\n+         */\n+        public T should(VerificationMode mode) {\n+            return verify(mock, mode);\n+        }\n+    }\n     \n     /**\n      * See original {@link Stubber}\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.customization;\n \n import org.junit.Test;\n import org.mockito.Mock;\n+import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n \n         assertEquals(expectedMock, returnedMock);\n     }\n+\n+    @Test(expected = NotAMockException.class)\n+    public void shouldValidateMockWhenVerifying() {\n+\n+        then(\"notMock\").should();\n+    }\n+\n+    @Test(expected = NotAMockException.class)\n+    public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {\n+\n+        then(\"notMock\").should(times(19));\n+    }\n+\n+    @Test(expected = NotAMockException.class)\n+    public void shouldValidateMockWhenVerifyingNoMoreInteractions() {\n+\n+        then(\"notMock\").should();\n+    }\n+\n+    @Test(expected = WantedButNotInvoked.class)\n+    public void shouldFailForExpectedBehaviorThatDidNotHappen() {\n+\n+        then(mock).should().booleanObjectReturningMethod();\n+    }\n+\n+    @Test\n+    public void shouldPassForExpectedBehaviorThatHappened() {\n+\n+        mock.booleanObjectReturningMethod();\n+\n+        then(mock).should().booleanObjectReturningMethod();\n+    }\n }", "timestamp": 1393618843, "metainfo": ""}