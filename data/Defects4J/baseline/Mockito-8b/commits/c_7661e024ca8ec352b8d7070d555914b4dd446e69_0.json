{"sha": "7661e024ca8ec352b8d7070d555914b4dd446e69", "log": "rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401726", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n  * @param <T>\n  *            type of mock object to handle\n  */\n-public class MockHandler<T> implements IMockHandler {\n+public class MockHandler<T> implements MockitoInvocationHandler {\n \n     private static final long serialVersionUID = -2917871070982574165L;\n \n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n \n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.IMockHandler;\n+import org.mockito.internal.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.*;\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n \n     private static final long serialVersionUID = 6182795666612683784L;\n-    private final IMockHandler mockHandler;\n+    private final MockitoInvocationHandler handler;\n     CGLIBHacker cglibHacker = new CGLIBHacker();\n     ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();\n     private final MockSettingsImpl mockSettings;\n \n-    public MethodInterceptorFilter(IMockHandler mockHandler, MockSettingsImpl mockSettings) {\n-        this.mockHandler = mockHandler;\n+    public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsImpl mockSettings) {\n+        this.handler = handler;\n         this.mockSettings = mockSettings;\n     }\n \n         \n         FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\n         Invocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\n-        return mockHandler.handle(invocation);\n+        return handler.handle(invocation);\n     }\n    \n-    public IMockHandler getMockHandler() {\n-        return mockHandler;\n+    public MockitoInvocationHandler getHandler() {\n+        return handler;\n     }\n \n     private int hashCodeForMock(Object mock) {\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         }\n \n         if (isMockitoMock(mock)) {\n-            return (MockHandler) getInterceptor(mock).getMockHandler();\n+            return (MockHandler) getInterceptor(mock).getHandler();\n         } else {\n             throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.IMockHandler;\n+import org.mockito.internal.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n \n public class MethodInterceptorFilterTest extends TestBase {\n \n-    IMockHandler mockHanlder = Mockito.mock(IMockHandler.class);\n-    MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings());\n+    MockitoInvocationHandler handler = Mockito.mock(MockitoInvocationHandler.class);\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings());\n \n     @Before\n     public void setUp() {\n \n         //then\n         assertTrue((Integer) ret != 0);\n-        Mockito.verify(mockHanlder, never()).handle(any(Invocation.class));\n+        Mockito.verify(handler, never()).handle(any(Invocation.class));\n     }\n \n     @Test\n \n         //then\n         assertTrue((Boolean) ret);\n-        Mockito.verify(mockHanlder, never()).handle(any(Invocation.class));\n+        Mockito.verify(handler, never()).handle(any(Invocation.class));\n     }\n     \n     //TODO: move to separate factory\n     @Test\n     public void shouldCreateSerializableMethodProxyIfIsSerializableMock() throws Exception {\n-        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings().serializable());\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings().serializable());\n         MethodProxy methodProxy = MethodProxy.create(String.class, String.class, \"\", \"toString\", \"toString\");\n         \n         // when\n     \n     @Test\n     public void shouldCreateNONSerializableMethodProxyIfIsNotSerializableMock() throws Exception {\n-        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings());\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings());\n         MethodProxy methodProxy = MethodProxy.create(String.class, String.class, \"\", \"toString\", \"toString\");\n         \n         // when\n     \n     @Test\n     public void shouldCreateSerializableMethodIfIsSerializableMock() throws Exception {\n-        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings().serializable());\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings().serializable());\n         Method method = new InvocationBuilder().toInvocation().getMethod();\n         \n         // when\n     \n     @Test\n     public void shouldCreateJustDelegatingMethodIfIsNotSerializableMock() throws Exception {\n-        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder, (MockSettingsImpl) withSettings());\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings());\n         Method method = new InvocationBuilder().toInvocation().getMethod();\n         \n         // when", "timestamp": 1258316344, "metainfo": ""}