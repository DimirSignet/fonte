{"sha": "bfa1226f57643f86ff3d01b71c1d9352bf6b7579", "log": "Issue 308 Removed the dependency to java.beans.Introspector which is not available in the Android SDK, tiddied up tests", "commit": "\n--- a/src/org/mockito/internal/util/reflection/BeanPropertySetter.java\n+++ b/src/org/mockito/internal/util/reflection/BeanPropertySetter.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n-import java.beans.BeanInfo;\n-import java.beans.IntrospectionException;\n-import java.beans.Introspector;\n-import java.beans.PropertyDescriptor;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.Locale;\n \n /**\n  * This utility class will call the setter of the property to inject a new value.\n  */\n public class BeanPropertySetter {\n+\n+    private static final String SET_PREFIX = \"set\";\n \n     private final Object target;\n     private boolean reportNoSetterFound;\n         AccessibilityChanger changer = new AccessibilityChanger();\n         Method writeMethod = null;\n         try {\n-            BeanInfo targetInfo = Introspector.getBeanInfo(target.getClass());\n-            PropertyDescriptor[] propertyDescriptors = targetInfo.getPropertyDescriptors();\n+            writeMethod = target.getClass().getMethod(setterName(field.getName()), field.getType());\n \n-            for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\n-                if(propertyNameMatchFieldName(propertyDescriptor)\n-                        && propertyTypeMatchFieldType(propertyDescriptor)) {\n-                    writeMethod = propertyDescriptor.getWriteMethod();\n-                    if(writeMethod != null) {\n-                        changer.enableAccess(writeMethod);\n-                        writeMethod.invoke(target, value);\n-                        return true;\n-                    }\n-                }\n-            }\n+            changer.enableAccess(writeMethod);\n+            writeMethod.invoke(target, value);\n+            return true;\n         } catch (InvocationTargetException e) {\n             throw new RuntimeException(\"Setter '\" + writeMethod + \"' of '\" + target + \"' with value '\" + value + \"' threw exception : '\" + e.getTargetException() + \"'\", e);\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(\"Access not authorized on field '\" + field + \"' of object '\" + target + \"' with value: '\" + value + \"'\", e);\n-        } catch (IntrospectionException e) {\n-            throw new RuntimeException(\"Something went wrong when trying to infer by introspection the setter of property '\" + field.getName() + \"' on type '\" + target.getClass() + \"'\" + target.getClass(), e);\n+        } catch (NoSuchMethodException e) {\n+            reportNoSetterFound();\n         } finally {\n             if(writeMethod != null) {\n                 changer.safelyDisableAccess(writeMethod);\n         return false;\n     }\n \n+    /**\n+     * Retrieve the setter name from the field name.\n+     *\n+     * <p>Implementation is based on the code of {@link java.beans.Introspector}.</p>\n+     *\n+     * @param fieldName the Field name\n+     * @return Setter name.\n+     */\n+    private String setterName(String fieldName) {\n+        return new StringBuilder(SET_PREFIX)\n+                .append(fieldName.substring(0, 1).toUpperCase(Locale.ENGLISH))\n+                .append(fieldName.substring(1))\n+                .toString();\n+    }\n+\n     private void reportNoSetterFound() {\n         if(reportNoSetterFound) {\n             throw new RuntimeException(\"Problems setting value on object: [\" + target + \"] for property : [\" + field.getName() + \"], setter not found\");\n         }\n     }\n \n-    private boolean propertyTypeMatchFieldType(PropertyDescriptor pd) {\n-        return field.getType().equals(pd.getPropertyType());\n-    }\n-\n-    private boolean propertyNameMatchFieldName(PropertyDescriptor pd) {\n-        return field.getName().equals(pd.getName());\n-    }\n-\n }\n--- a/test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java\n+++ b/test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n import org.fest.assertions.Assertions;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.lang.reflect.Field;\n+import java.util.UUID;\n \n import static org.junit.Assert.*;\n \n public class BeanPropertySetterTest {\n \n     @Test\n-    public void shouldUseTheSetterOnTheTargetWithTheFieldType() throws Exception {\n+    public void use_the_correct_setter_on_the_target() throws Exception {\n+        // given\n         SomeBean someBean = new SomeBean();\n         Field theField = someBean.getClass().getDeclaredField(\"theField\");\n-\n         File valueToInject = new File(\"path\");\n \n+        // when\n         boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);\n \n+        // then\n         assertTrue(injected);\n-        assertTrue(someBean.setTheFieldWasUsed);\n+        assertTrue(someBean.theFieldSetterWasUsed);\n         assertSame(valueToInject, someBean.getTheField());\n     }\n \n     @Test\n-    public void shouldNotFailIfBeanHasOnlyASetter() throws Exception {\n-        SomeBeanWithJustASetter someBean = new SomeBeanWithJustASetter();\n-        Field theField = someBean.getClass().getDeclaredField(\"theField\");\n+    public void use_the_setter_on_the_target_when_field_name_begins_by_at_least_2_caps() throws Exception {\n+        // given\n+        BeanWithWeirdFields someBean = new BeanWithWeirdFields();\n+        Field theField = someBean.getClass().getDeclaredField(\"UUID\");\n+        UUID valueToInject = new UUID(0L, 0L);\n \n-        File valueToInject = new File(\"path\");\n-\n+        // when\n         boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);\n \n+        // then\n         assertTrue(injected);\n-        assertTrue(someBean.setTheFieldWasUsed);\n+        assertTrue(someBean.theFieldSetterWasUSed);\n+        assertSame(valueToInject, someBean.UUID);\n     }\n \n     @Test\n-    public void shouldFailIfMatchingSetterCannotBeFoundAndIfReportFailureTrue() throws Exception {\n+    public void should_not_fail_if_bean_class_declares_only_the_setter_for_the_property() throws Exception {\n+        // given\n+        SomeBeanWithJustASetter someBean = new SomeBeanWithJustASetter();\n+        Field theField = someBean.getClass().getDeclaredField(\"theField\");\n+        File valueToInject = new File(\"path\");\n+\n+        // when\n+        boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);\n+\n+        // then\n+        assertTrue(injected);\n+        assertTrue(someBean.theFieldSetterWasUsed);\n+    }\n+\n+    @Test\n+    public void should_fail_if_matching_setter_cannot_be_found_and_if_report_failure_is_true() throws Exception {\n+        // given\n         SomeBeanWithNoSetterMatchingFieldType bean = new SomeBeanWithNoSetterMatchingFieldType();\n         Field theField = bean.getClass().getDeclaredField(\"theField\");\n-\n         File valueToInject = new File(\"path\");\n \n         try {\n+            // when\n             new BeanPropertySetter(bean, theField, true).set(valueToInject);\n             fail();\n         } catch (Exception e) {\n+            // then\n             Assertions.assertThat(e.getMessage()).contains(\"setter not found\");\n         }\n     }\n \n     @Test\n-    public void shouldReturnFalseIfNoSetterFound() throws Exception {\n+    public void return_false_if_no_setter_was_found() throws Exception {\n+        // given\n         SomeBeanWithJustAGetter bean = new SomeBeanWithJustAGetter();\n         Field theField = bean.getClass().getDeclaredField(\"theField\");\n-\n         File valueToInject = new File(\"path\");\n \n+        // when\n         boolean injected = new BeanPropertySetter(bean, theField).set(valueToInject);\n \n+        // then\n         assertFalse(injected);\n     }\n \n     @Test\n-    public void shouldReturnFalseIfNoSetterWasFoundAndIfReportFailureFalse() throws Exception {\n+    public void return_false_if_no_setter_was_found_and_if_reportNoSetterFound_is_false() throws Exception {\n+        // given\n         SomeBeanWithNoSetterMatchingFieldType bean = new SomeBeanWithNoSetterMatchingFieldType();\n         Field theField = bean.getClass().getDeclaredField(\"theField\");\n-\n         File valueToInject = new File(\"path\");\n \n+        // when\n         boolean injected = new BeanPropertySetter(bean, theField, false).set(valueToInject);\n \n+        // then\n         assertFalse(injected);\n     }\n \n     static class SomeBean {\n         private File theField;\n-        boolean setTheFieldWasUsed;\n+        boolean theFieldSetterWasUsed;\n \n         public void setTheField(final File theField) {\n-            setTheFieldWasUsed = true;\n+            theFieldSetterWasUsed = true;\n             this.theField = theField;\n         }\n \n \n     static class SomeBeanWithJustASetter {\n         private File theField;\n-        boolean setTheFieldWasUsed;\n+        boolean theFieldSetterWasUsed;\n \n         public void setTheField(final File theField) {\n+            theFieldSetterWasUsed = true;\n             this.theField = theField;\n-            setTheFieldWasUsed = true;\n         }\n     }\n     static class SomeBeanWithJustAGetter {\n \n     static class SomeBeanWithNoSetterMatchingFieldType {\n         private File theField;\n-        boolean setTheFieldWasUsed;\n+        boolean theFieldSetterWasUsed;\n \n         public void setTheField(final FileOutputStream somethingElse) {\n-            setTheFieldWasUsed = true;\n+            theFieldSetterWasUsed = true;\n+        }\n+    }\n+\n+    static class BeanWithWeirdFields {\n+        private UUID UUID;\n+        boolean theFieldSetterWasUSed;\n+\n+        public void setUUID(UUID UUID) {\n+            theFieldSetterWasUSed = true;\n+            this.UUID = UUID;\n         }\n     }\n ", "timestamp": 1328026577, "metainfo": ""}