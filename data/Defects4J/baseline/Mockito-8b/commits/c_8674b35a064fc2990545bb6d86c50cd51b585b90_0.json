{"sha": "8674b35a064fc2990545bb6d86c50cd51b585b90", "log": "Refactored some stuff, got rid of duplication  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401844", "commit": "\n--- a/src/org/mockito/internal/debugging/LoggingListener.java\n+++ b/src/org/mockito/internal/debugging/LoggingListener.java\n         logger.log(join(\n                 \" *** Stubbing warnings from Mockito: *** \",\n                 \"\",\n-                \"stubbed with those args here:   \" + unused.getLocation(),\n-                \"BUT called with different args: \" + unstubbed.getInvocation().getLocation(),\n+                \"stubbed with those args here   \" + unused.getLocation(),\n+                \"BUT called with different args \" + unstubbed.getInvocation().getLocation(),\n                 \"\"));\n     }\n \n     public void foundUnusedStub(Invocation unused) {\n-        logger.log(\"This stubbing was never used:   \" + unused.getLocation() + \"\\n\");\n+        logger.log(\"This stubbing was never used   \" + unused.getLocation() + \"\\n\");\n     }\n \n     public void foundUnstubbed(InvocationMatcher unstubbed) {\n         if (warnAboutUnstubbed) {\n             logger.log(join(\n-                    \"This method was not stubbed:\",\n+                    \"This method was not stubbed \",\n                     unstubbed,\n                     unstubbed.getInvocation().getLocation(),\n                     \"\"));\n--- /dev/null\n+++ b/src/org/mockito/internal/debugging/WarningsCollector.java\n+package org.mockito.internal.debugging;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.UnusedStubsFinder;\n+import org.mockito.internal.listeners.CollectCreatedMocks;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class WarningsCollector {\n+   \n+    List createdMocks;\n+\n+    public WarningsCollector() {\n+        createdMocks = new LinkedList();\n+        MockingProgress progress = new ThreadSafeMockingProgress();\n+        progress.setListener(new CollectCreatedMocks(createdMocks));\n+    }\n+\n+    public String getWarnings() {\n+        List<Invocation> unused = new UnusedStubsFinder().find(createdMocks);\n+        List<Invocation> all = new AllInvocationsFinder().find(createdMocks);\n+        List<InvocationMatcher> allInvocationMatchers = InvocationMatcher.createFrom(all);\n+\n+        String warnings = new WarningsPrinterImpl(unused, allInvocationMatchers, false).print();\n+\n+        return warnings;\n+    }\n+}\n--- a/src/org/mockito/internal/runners/RunnerImpl.java\n+++ b/src/org/mockito/internal/runners/RunnerImpl.java\n package org.mockito.internal.runners;\n \n import org.junit.runner.Description;\n-import org.junit.runner.manipulation.Filter;\n import org.junit.runner.manipulation.Filterable;\n import org.junit.runner.notification.RunNotifier;\n \n--- a/src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java\n import org.junit.runner.notification.RunListener;\n import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.mockito.internal.debugging.WarningsCollector;\n import org.mockito.internal.debugging.WarningsPrinterImpl;\n import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n     \n     @Override\n     public void run(RunNotifier notifier) {\n-        MockingProgress progress = new ThreadSafeMockingProgress();\n-        final List createdMocks = new LinkedList();\n-        progress.setListener(new CollectCreatedMocks(createdMocks));\n-\n         RunListener listener = new RunListener() {\n+            WarningsCollector warningsCollector;\n+            \n+            @Override\n+            public void testStarted(Description description) throws Exception {\n+                warningsCollector = new WarningsCollector();\n+            }\n+            \n             @Override public void testFailure(Failure failure) throws Exception {                \n-                List<Invocation> unused = new UnusedStubsFinder().find(createdMocks);\n-                List<Invocation> all = new AllInvocationsFinder().find(createdMocks);\n-                List<InvocationMatcher> allMatchers = InvocationMatcher.createFrom(all);\n-\n-                new WarningsPrinterImpl(unused, allMatchers, false).print(logger);\n+                logger.log(warningsCollector.getWarnings());\n             }\n         };\n \n--- a/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n import org.junit.runner.notification.RunListener;\n import org.junit.runner.notification.RunNotifier;\n import org.mockito.MockSettings;\n+import org.mockito.Mockito;\n import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;\n+import org.mockito.internal.debugging.WarningsCollector;\n import org.mockito.internal.debugging.WarningsPrinterImpl;\n import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n     }\n     \n     @Override\n-    public void run(RunNotifier notifier) {\n-        MockingProgress progress = new ThreadSafeMockingProgress();\n-        final List createdMocks = new LinkedList();\n-        progress.setListener(new CollectCreatedMocks(createdMocks));\n+    public void run(RunNotifier notifier) {        \n \n         //a listener that changes the failure's exception in a very hacky way...\n         RunListener listener = new RunListener() {\n-            @Override public void testFailure(final Failure failure) throws Exception {\n+            \n+            WarningsCollector warningsCollector;\n+                       \n+            @Override\n+            public void testStarted(Description description) throws Exception {\n+                warningsCollector = new WarningsCollector();\n+            }\n+            \n+            @Override \n+            public void testFailure(final Failure failure) throws Exception {       \n+                String warnings = warningsCollector.getWarnings();\n+                \n                 //TODO: this has to protect the use in case jUnit changes and this internal state logic fails\n                 Throwable throwable = (Throwable) Whitebox.getInternalState(failure, \"fThrownException\");\n \n-                List< Invocation > unused = new UnusedStubsFinder().find(createdMocks);\n-                List<Invocation> all = new AllInvocationsFinder().find(createdMocks);\n-                List<InvocationMatcher> allInvocationMatchers = InvocationMatcher.createFrom(all);\n-\n-                String warnings = new WarningsPrinterImpl(unused, allInvocationMatchers, false).print();\n-\n-                String newMessage = throwable.getMessage();\n-                newMessage += warnings + \"\\n*** The actual failure is because of: ***\\n\";\n-\n-                newMessage = \"contains both: actual test failure *and* Mockito warnings.\\n\" +\n+                String newMessage = \"contains both: actual test failure *and* Mockito warnings.\\n\" +\n                         warnings + \"\\n *** The actual failure is because of: ***\\n\";\n \n                 ExceptionIncludingMockitoWarnings e = new ExceptionIncludingMockitoWarnings(newMessage, throwable);", "timestamp": 1266179021, "metainfo": ""}