{"sha": "81b663a8db96a70e0ca2b7ec8d73702f19e19845", "log": "using snake case as previously decided in a dev thread", "commit": "\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n  */\n package org.mockito.verification;\n \n-import static org.mockito.Mockito.*;\n-\n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockito.exceptions.base.MockitoAssertionError;\n-import org.mockito.internal.verification.AtLeast;\n-import org.mockito.internal.verification.Only;\n-import org.mockito.internal.verification.Times;\n-import org.mockito.internal.verification.VerificationDataImpl;\n-import org.mockitoutil.TestBase;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.internal.verification.AtLeast;\n+import org.mockito.internal.verification.Only;\n+import org.mockito.internal.verification.Times;\n+import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockitoutil.TestBase;\n \n public class TimeoutTest extends TestBase {\n     \n     MockitoAssertionError error = new MockitoAssertionError(\"\"); \n \n     @Test\n-    public void shouldPassWhenVerificationPasses() {\n+    public void should_pass_when_verification_passes() {\n         Timeout t = new Timeout(1, 3, mode);\n         \n         doNothing().when(mode).verify(data);\n     }\n     \n     @Test\n-    public void shouldFailBecauseVerificationFails() {\n+    public void should_fail_because_verification_fails() {\n         Timeout t = new Timeout(1, 2, mode);\n         \n         doThrow(error).\n     }\n     \n     @Test\n-    public void shouldPassEvenIfFirstVerificationFails() {\n+    public void should_pass_even_if_first_verification_fails() {\n         Timeout t = new Timeout(1, 5, mode);\n         \n         doThrow(error).\n     }\n \n     @Test\n-    public void shouldTryToVerifyCorrectNumberOfTimes() {\n+    public void should_try_to_verify_correct_number_of_times() {\n         Timeout t = new Timeout(1, 4, mode);\n         \n         doThrow(error).when(mode).verify(data);\n         try {\n             t.verify(data);\n             fail();\n-        } catch (MockitoAssertionError e) {};\n+        } catch (MockitoAssertionError e) {}\n         \n         verify(mode, times(5)).verify(data);\n     }\n     \n     @Test\n-    public void shouldCreateCorrectType() {\n+    public void should_create_correctly_configured_timeout() {\n         Timeout t = new Timeout(25, 50, mode);\n         \n-        assertCorrectMode(t.atLeastOnce(), Timeout.class, 50, 25, AtLeast.class);\n-        assertCorrectMode(t.atLeast(5), Timeout.class, 50, 25, AtLeast.class);\n-        assertCorrectMode(t.times(5), Timeout.class, 50, 25, Times.class);\n-        assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);\n+        assertTimeoutCorrectlyConfigured(t.atLeastOnce(), Timeout.class, 50, 25, AtLeast.class);\n+        assertTimeoutCorrectlyConfigured(t.atLeast(5), Timeout.class, 50, 25, AtLeast.class);\n+        assertTimeoutCorrectlyConfigured(t.times(5), Timeout.class, 50, 25, Times.class);\n+        assertTimeoutCorrectlyConfigured(t.only(), Timeout.class, 50, 25, Only.class);\n     }\n     \n-    private void assertCorrectMode(VerificationMode t, Class<?> expectedType, int expectedTimeout, int expectedPollingPeriod, Class<?> expectedDelegateType) {\n+    private void assertTimeoutCorrectlyConfigured(VerificationMode t, Class<?> expectedType, int expectedTimeout, int expectedPollingPeriod, Class<?> expectedDelegateType) {\n         assertEquals(expectedType, t.getClass());\n         assertEquals(expectedTimeout, ((Timeout) t).wrappedVerification.getDuration());\n         assertEquals(expectedPollingPeriod, ((Timeout) t).wrappedVerification.getPollingPeriod());", "timestamp": 1381508412, "metainfo": ""}