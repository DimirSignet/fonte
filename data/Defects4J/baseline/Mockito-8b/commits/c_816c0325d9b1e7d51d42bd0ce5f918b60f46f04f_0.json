{"sha": "816c0325d9b1e7d51d42bd0ce5f918b60f46f04f", "log": "added TODO and a test for interesting logic  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40676", "commit": "\n--- a/src/org/mockito/internal/stubbing/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/AnswersValidator.java\n     \n     public void validate(Answer<?> answer, Invocation invocation) {\n         if (answer instanceof ThrowsException) {\n-            Throwable throwable = ((ThrowsException) answer).getThrowable();\n-            if (throwable == null) {\n-                reporter.cannotStubWithNullThrowable();\n-            }\n-            \n-            if (throwable instanceof RuntimeException || throwable instanceof Error) {\n-                return;\n-            }\n-            \n-            if (!invocation.isValidException(throwable)) {\n-                reporter.checkedExceptionInvalid(throwable);\n-            }\n+            validateException(answer, invocation);\n         }\n         \n         if (answer instanceof Returns) {\n-            if (invocation.isVoid() && ((Returns) answer).hasReturnValue()) {\n-                reporter.cannotStubVoidMethodWithAReturnValue();\n-            }\n+            validateReturnValue(answer, invocation);\n+        }\n+    }\n+\n+    private void validateReturnValue(Answer<?> answer, Invocation invocation) {\n+        if (invocation.isVoid() && ((Returns) answer).hasReturnValue()) {\n+            reporter.cannotStubVoidMethodWithAReturnValue();\n+        }\n+    }\n+\n+    private void validateException(Answer<?> answer, Invocation invocation) {\n+        Throwable throwable = ((ThrowsException) answer).getThrowable();\n+        if (throwable == null) {\n+            reporter.cannotStubWithNullThrowable();\n+        }\n+        \n+        if (throwable instanceof RuntimeException || throwable instanceof Error) {\n+            return;\n+        }\n+        \n+        if (!invocation.isValidException(throwable)) {\n+            reporter.checkedExceptionInvalid(throwable);\n         }\n     }\n }\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n     \n     public static boolean isMock(Object mock) {\n         try {\n+            //TODO hacky\n             getMockHandler(mock);\n             return true;\n         } catch (MockitoException e) {\n--- a/test/org/mockito/internal/stubbing/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/AnswersValidatorTest.java\n         validator.validate(new ThrowsException(new Error()), invocation);\n         validator.validate(new ThrowsException(new RuntimeException()), invocation);\n     }\n+    \n+    @Test\n+    public void shouldValidateReturnValue() throws Throwable {\n+        validator.validate(new Returns(\"one\"), new InvocationBuilder().simpleMethod().toInvocation());\n+    }\n+    \n+    @Test(expected = MockitoException.class)\n+    public void shouldFailWhenReturnValueSetForVoidMethod() throws Throwable {\n+        validator.validate(new Returns(\"one\"), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n+    }\n }", "timestamp": 1216235254, "metainfo": ""}