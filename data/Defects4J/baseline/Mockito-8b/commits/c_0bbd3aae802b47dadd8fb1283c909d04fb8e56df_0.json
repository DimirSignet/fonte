{"sha": "0bbd3aae802b47dadd8fb1283c909d04fb8e56df", "log": "Further refactoring of exception messages - following the new patterns of storing and presenting locations of errors / verification failures  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401290", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     }\n     \n     public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous, HasStackTrace previousStackTrace) {\n-//        WantedAnywhereAfterFollowingInteraction cause = new WantedAnywhereAfterFollowingInteraction(join(\n-//                        \"Wanted anywhere AFTER following interaction:\",\n-//                        previous.toString()));\n-//        cause.setStackTrace(previousStackTrace.getStackTrace());\n-        \n         throw new VerifcationInOrderFailure(join(\n                     \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n         return cause;\n     }    \n \n-    public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {\n+    private String createTooLittleInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n+            HasStackTrace lastActualStackTrace) {\n         String ending = \n-            (lastActualInvocationStackTrace != null)? \"-> at \" + lastActualInvocationStackTrace.getStackTrace()[0] + \"\\n\" : \"\\n\";\n+            (lastActualStackTrace != null)? \"-> at \" + lastActualStackTrace.getStackTrace()[0] + \"\\n\" : \"\\n\";\n+            \n+            String message = join(\n+                    wanted.toString(),\n+                    \"Wanted \" + pluralize(wantedCount) + \":\",\n+                    \"-> at \" + new Location(),\n+                    \"But was \" + pluralize(actualCount) + \":\", \n+                    ending\n+            );\n+            return message;\n+    }\n+   \n+    public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n+        String message = createTooLittleInvocationsMessage(wantedCount, actualCount, wanted, lastActualStackTrace);\n         \n-        throw new TooLittleActualInvocations(join(\n-                wanted.toString(),\n-                \"Wanted \" + pluralize(wantedCount) + \":\",\n-                \"-> at \" + new Location(),\n-                \"But was \" + pluralize(actualCount) + \":\", \n-                ending\n-        ));\n-    }\n-\n+        throw new TooLittleActualInvocations(message);\n+    }\n     \n     public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n-        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n-\n+        String message = createTooLittleInvocationsMessage(wantedCount, actualCount, wanted, lastActualStackTrace);\n+        \n         throw new VerifcationInOrderFailure(join(\n-                \"Verification in order failure\",\n-                wanted.toString(),\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ), cause);\n+                \"Verification in order failure:\" + message\n+                ));\n     }\n     \n     private TooLittleInvocations createTooLittleInvocationsCause(HasStackTrace lastActualInvocationStackTrace) {\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n             checker.check(invocations, wanted, 4);\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e, messageContains(\"Wanted 4 times but was 2\"));\n+            assertThat(e, messageContains(\"Wanted 4 times\"));\n+            assertThat(e, messageContains(\"But was 2 times\"));\n         }\n     }\n     \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n             inOrder.verify(mockTwo, times(3)).simpleMethod(anyInt());\n             fail();\n         } catch (VerifcationInOrderFailure e) {\n-            assertThat(e.getCause(), hasFirstMethodInStackTrace(\"fourth\"));\n+            assertContains(\"fourth(\", e.getMessage());\n         }\n     }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Verification in order failure\" +\n+                    \"Verification in order failure:\" +\n                     \"\\n\" +\n                     \"iMethods.simpleMethod(2);\" +\n                     \"\\n\" +\n-                    \"Wanted 2 times but was 1\";\n-            assertEquals(expectedMessage, actualMessage);\n-            \n-            assertEquals(e.getCause().getClass(), TooLittleInvocations.class);\n+                    \"Wanted 2 times:\" +\n+                    \"\\n\" +\n+                    \"-> at\";\n+            assertContains(expectedMessage, actualMessage);\n             \n             String expectedCause = \n                 \"\\n\" +\n-                \"Too little invocations:\";\n+                \"But was 1 time:\" +\n+                \"\\n\" +\n+                \"-> at\";\n             \n-            assertEquals(expectedCause, e.getCause().getMessage());\n+            assertContains(expectedCause, e.getMessage());\n         }\n     }   \n }\n--- a/test/org/mockitoutil/ExtraMatchers.java\n+++ b/test/org/mockitoutil/ExtraMatchers.java\n @SuppressWarnings(\"unchecked\")\n public class ExtraMatchers {\n \n+    //TODO remove\n     public static <T> Assertor<Throwable> hasFirstMethodInStackTrace(final String method) {\n         return hasMethodInStackTraceAt(0, method);\n     }", "timestamp": 1238763982, "metainfo": ""}