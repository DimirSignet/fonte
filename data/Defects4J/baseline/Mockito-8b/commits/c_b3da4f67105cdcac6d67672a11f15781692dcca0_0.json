{"sha": "b3da4f67105cdcac6d67672a11f15781692dcca0", "log": "Fixed issue 177. New feature: verification with timeout for testing in concurrent conditions. Example: verify(mock, timeout(100)).foo();  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401974", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.stubbing.OngoingStubbing;\n import org.mockito.stubbing.Stubber;\n import org.mockito.stubbing.VoidMethodStubbable;\n+import org.mockito.verification.VerificationWithTimeout;\n import org.mockito.verification.Timeout;\n-import org.mockito.verification.VerificationWithTimeout;\n import org.mockito.verification.VerificationMode;\n \n /**\n  *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n- *      <a href=\"#21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </a><br/>\n+ *      <a href=\"#21\">21. New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </a><br/>\n+ *      <a href=\"#22\">22. (**New**) Verification with timeout (Since 1.8.5) </a><br/>\n  * </b>\n  * \n  * <p>\n  * <li>&#064;{@link InjectMocks} - injects mocks into tested object automatically.\n  * </ul>\n  * <p>\n- * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}  \n+ * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}\n+ * <p>\n+ * <h3 id=\"22\">22. (**New**) Verification with timeout (Since 1.8.5)  </h3>\n+ * <p>\n+ * Allows verifying with timeout. May be useful for testing in concurrent conditions.\n+ * <p>\n+ * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system.\n+ * <p>\n+ * Examples:\n+ * <p>\n+ * <pre>\n+ *   //passes when someMethod() is called within given time span \n+ *   verify(mock, timeout(100)).someMethod();\n+ *   //above is an alias to:\n+ *   verify(mock, timeout(100).times(1)).someMethod();\n+ *   \n+ *   //passes when someMethod() is called *exactly* 2 times within given time span\n+ *   verify(mock, timeout(100).times(2)).someMethod();\n+ *\n+ *   //passes when someMethod() is called *at lest* 2 times within given time span\n+ *   verify(mock, timeout(100).atLeast(2)).someMethod();\n+ *   \n+ *   //verifies someMethod() within given time span using given verification mode\n+ *   //useful only if you have your own custom verification modes.\n+ *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n+ * </pre>\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     }    \n     \n     /**\n-     * Allows verifying with timeout. May be useful for testing concurrency.\n+     * Allows verifying with timeout. May be useful for testing in concurrent conditions.\n+     * <p>\n+     * It feels this feature should be used rarely - figure out a better way of testing your multi-threaded system\n      * <pre>\n      *   //passes when someMethod() is called within given time span \n      *   verify(mock, timeout(100)).someMethod();\n-     *   //TODO decide what is the default for timeout() - atLeastOnce() or times(1)\n+     *   //above is an alias to:\n+     *   verify(mock, timeout(100).times(1)).someMethod();\n      *   \n      *   //passes when someMethod() is called *exactly* 2 times within given time span\n      *   verify(mock, timeout(100).times(2)).someMethod();\n      *   //passes when someMethod() is called *at lest* 2 times within given time span\n      *   verify(mock, timeout(100).atLeast(2)).someMethod();\n      *   \n-     *   //verifies someMethod() times within given time span using given verification mode\n+     *   //verifies someMethod() within given time span using given verification mode\n      *   //useful only if you have your own custom verification modes.\n      *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n      * </pre>\n      * \n      * @return verification mode\n      */\n-    public static Timeout timeout(int millis) {\n-        return new VerificationWithTimeout(millis, VerificationModeFactory.atLeastOnce());\n+    public static VerificationWithTimeout timeout(int millis) {\n+        return new Timeout(millis, VerificationModeFactory.times(1));\n     }       \n     \n     /**\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito.verification;\n-\n-import org.mockito.Mockito;\n-\n-/**\n- * Similar to {@link VerificationMode} but allows combining with other modes. E.g:\n- * \n- * <pre>\n- * verify(mock, timeout(100).times(5)).foo();\n- * \n- * verify(mock, timeout(100).never()).bar();\n- * \n- * verify(mock, timeout(200).atLeastOnce()).baz();\n- * </pre>\n- * \n- * <p>\n- * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}\n- */\n-public interface Timeout extends VerificationMode {\n-    \n-    //TODO: verifyNoMoreInteractions() ?\n-    \n-    /**\n-     * Allows verifying exact number of invocations within given timeout\n-     * <pre>\n-     *   verify(mock, timeout(100).times(2)).someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param wantedNumberOfInvocations wanted number of invocations \n-     * \n-     * @return verification mode\n-     */\n-    public VerificationMode times(int wantedNumberOfInvocations);\n-    \n-    /**\n-     * Alias to times(0), see {@link times(int)}\n-     * <p>\n-     * Verifies that interaction did not happen within given timeout. E.g:\n-     * <pre>\n-     *   verify(mock, timeout(100).never()).someMethod();\n-     * </pre>\n-     * \n-     * <p>\n-     * If you want to verify there were NO interactions with the mock \n-     * check out {@link verifyNoMoreInteractions(Object...)}\n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @return verification mode\n-     */\n-    public VerificationMode never();\n-    \n-    /**\n-     * Allows at-least-once verification withing given timeout. E.g:\n-     * <pre>\n-     *   verify(mock, timeout(100).atLeastOnce()).someMethod(\"some arg\");\n-     * </pre>\n-     * Alias to atLeast(1)\n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @return verification mode\n-     */\n-    public VerificationMode atLeastOnce();\n-\n-    /**\n-     * Allows at-least-x verification withing given timeout. E.g:\n-     * <pre>\n-     *   verify(mock, timeout(100).atLeast(3)).someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param minNumberOfInvocations minimum number of invocations \n-     * \n-     * @return verification mode\n-     */\n-    public VerificationMode atLeast(int minNumberOfInvocations);\n-\n-    /**\n-     * Allows at-most-x verification within given timeout. E.g:\n-     * <pre>\n-     *   verify(mock, timeout(100).atMost(3)).someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @param maxNumberOfInvocations max number of invocations \n-     * \n-     * @return verification mode\n-     */\n-    public VerificationMode atMost(int maxNumberOfInvocations);\n-\n-    /**\n-     * Allows checking if given method was the only one invoked. E.g:\n-     * <pre>\n-     *   verify(mock, only()).someMethod();\n-     *   //above is a shorthand for following 2 lines of code:\n-     *   verify(mock).someMethod();\n-     *   verifyNoMoreInvocations(mock);\n-     * </pre>\n-     * \n-     * <p>\n-     * See also {@link Mockito#verifyNoMoreInteractions(Object...)}\n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     * \n-     * @return verification mode\n-     */\n-    public VerificationMode only();       \n+package org.mockito.verification;\n+\n+import org.mockito.internal.verification.VerificationModeFactory;\n+import org.mockito.internal.verification.VerificationWithTimeoutImpl;\n+import org.mockito.internal.verification.api.VerificationData;\n+\n+/**\n+ * See the javadoc for {@link VerificationWithTimeout}\n+ */\n+public class Timeout implements VerificationWithTimeout {\n+\n+    VerificationWithTimeoutImpl impl;\n+\n+    /**\n+     * See the javadoc for {@link VerificationWithTimeout}\n+     */\n+    public Timeout(int millis, VerificationMode delegate) {\n+        this(10, millis, delegate);\n+    }\n+\n+    Timeout(int treshhold, int millis, VerificationMode delegate) {\n+        this.impl = new VerificationWithTimeoutImpl(treshhold, millis, delegate);\n+    }\n+\n+    @Override\n+    public void verify(VerificationData data) {\n+        impl.verify(data);\n+    }\n+\n+    @Override\n+    public VerificationMode atLeast(int minNumberOfInvocations) {\n+        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeast(minNumberOfInvocations));\n+    }\n+\n+    @Override\n+    public VerificationMode atLeastOnce() {\n+        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeastOnce());\n+    }\n+\n+    @Override\n+    public VerificationMode atMost(int maxNumberOfInvocations) {\n+        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atMost(maxNumberOfInvocations));\n+    }\n+\n+    @Override\n+    public VerificationMode never() {\n+        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(0));\n+    }\n+\n+    @Override\n+    public VerificationMode only() {\n+        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.only());\n+    }\n+\n+    @Override\n+    public VerificationMode times(int wantedNumberOfInvocations) {\n+        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(wantedNumberOfInvocations));\n+    }\n }\n--- a/src/org/mockito/verification/VerificationWithTimeout.java\n+++ b/src/org/mockito/verification/VerificationWithTimeout.java\n-package org.mockito.verification;\n-\n-import org.mockito.internal.verification.VerificationModeFactory;\n-import org.mockito.internal.verification.VerificationWithTimeoutImpl;\n-import org.mockito.internal.verification.api.VerificationData;\n-\n-//TODO: must be called Timeout\n-public class VerificationWithTimeout implements Timeout {\n-\n-    VerificationWithTimeoutImpl impl;\n-\n-    public VerificationWithTimeout(int millis, VerificationMode delegate) {\n-        this(10, millis, delegate);\n-    }\n-\n-    VerificationWithTimeout(int treshhold, int millis, VerificationMode delegate) {\n-        this.impl = new VerificationWithTimeoutImpl(treshhold, millis, delegate);\n-    }\n-\n-    @Override\n-    public void verify(VerificationData data) {\n-        impl.verify(data);\n-    }\n-\n-    @Override\n-    public VerificationMode atLeast(int minNumberOfInvocations) {\n-        return new VerificationWithTimeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeast(minNumberOfInvocations));\n-    }\n-\n-    @Override\n-    public VerificationMode atLeastOnce() {\n-        return new VerificationWithTimeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeastOnce());\n-    }\n-\n-    @Override\n-    public VerificationMode atMost(int maxNumberOfInvocations) {\n-        return new VerificationWithTimeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atMost(maxNumberOfInvocations));\n-    }\n-\n-    @Override\n-    public VerificationMode never() {\n-        return new VerificationWithTimeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(0));\n-    }\n-\n-    @Override\n-    public VerificationMode only() {\n-        return new VerificationWithTimeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.only());\n-    }\n-\n-    @Override\n-    public VerificationMode times(int wantedNumberOfInvocations) {\n-        return new VerificationWithTimeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(wantedNumberOfInvocations));\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.verification;\n+\n+import org.mockito.Mockito;\n+\n+/**\n+ * VerificationWithTimeout is a {@link VerificationMode} that allows combining existing verification modes with 'timeout'. E.g:\n+ * \n+ * <pre>\n+ * verify(mock, timeout(100).times(5)).foo();\n+ * \n+ * verify(mock, timeout(100).never()).bar();\n+ * \n+ * verify(mock, timeout(200).atLeastOnce()).baz();\n+ * </pre>\n+ * \n+ * <p>\n+ * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}\n+ */\n+public interface VerificationWithTimeout extends VerificationMode {\n+        \n+    /**\n+     * Allows verifying exact number of invocations within given timeout\n+     * <pre>\n+     *   verify(mock, timeout(100).times(2)).someMethod(\"some arg\");\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param wantedNumberOfInvocations wanted number of invocations \n+     * \n+     * @return verification mode\n+     */\n+    public VerificationMode times(int wantedNumberOfInvocations);\n+    \n+    /**\n+     * Alias to times(0), see {@link times(int)}\n+     * <p>\n+     * Verifies that interaction did not happen within given timeout. E.g:\n+     * <pre>\n+     *   verify(mock, timeout(100).never()).someMethod();\n+     * </pre>\n+     * \n+     * <p>\n+     * If you want to verify there were NO interactions with the mock \n+     * check out {@link verifyNoMoreInteractions(Object...)}\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @return verification mode\n+     */\n+    public VerificationMode never();\n+    \n+    /**\n+     * Allows at-least-once verification withing given timeout. E.g:\n+     * <pre>\n+     *   verify(mock, timeout(100).atLeastOnce()).someMethod(\"some arg\");\n+     * </pre>\n+     * Alias to atLeast(1)\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @return verification mode\n+     */\n+    public VerificationMode atLeastOnce();\n+\n+    /**\n+     * Allows at-least-x verification withing given timeout. E.g:\n+     * <pre>\n+     *   verify(mock, timeout(100).atLeast(3)).someMethod(\"some arg\");\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param minNumberOfInvocations minimum number of invocations \n+     * \n+     * @return verification mode\n+     */\n+    public VerificationMode atLeast(int minNumberOfInvocations);\n+\n+    /**\n+     * Allows at-most-x verification within given timeout. E.g:\n+     * <pre>\n+     *   verify(mock, timeout(100).atMost(3)).someMethod(\"some arg\");\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param maxNumberOfInvocations max number of invocations \n+     * \n+     * @return verification mode\n+     */\n+    public VerificationMode atMost(int maxNumberOfInvocations);\n+\n+    /**\n+     * Allows checking if given method was the only one invoked. E.g:\n+     * <pre>\n+     *   verify(mock, only()).someMethod();\n+     *   //above is a shorthand for following 2 lines of code:\n+     *   verify(mock).someMethod();\n+     *   verifyNoMoreInvocations(mock);\n+     * </pre>\n+     * \n+     * <p>\n+     * See also {@link Mockito#verifyNoMoreInteractions(Object...)}\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @return verification mode\n+     */\n+    public VerificationMode only();       \n }\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n \n     @Test\n     public void shouldPassWhenVerificationPasses() {\n-        VerificationWithTimeout t = new VerificationWithTimeout(1, 3, mode);\n+        Timeout t = new Timeout(1, 3, mode);\n         \n         doNothing().when(mode).verify(data);\n         \n     \n     @Test\n     public void shouldFailBecauseVerificationFails() {\n-        VerificationWithTimeout t = new VerificationWithTimeout(1, 2, mode);\n+        Timeout t = new Timeout(1, 2, mode);\n         \n         doThrow(error).\n         doThrow(error).\n     \n     @Test\n     public void shouldPassEvenIfFirstVerificationFails() {\n-        VerificationWithTimeout t = new VerificationWithTimeout(1, 2, mode);\n+        Timeout t = new Timeout(1, 2, mode);\n         \n         doThrow(error).\n         doThrow(error).\n \n     @Test\n     public void shouldTryToVerifyCorrectNumberOfTimes() {\n-        VerificationWithTimeout t = new VerificationWithTimeout(1, 4, mode);\n+        Timeout t = new Timeout(1, 4, mode);\n         \n         doThrow(error).when(mode).verify(data);\n         \n     \n     @Test\n     public void shouldCreateCorrectType() {\n-        VerificationWithTimeout t = new VerificationWithTimeout(25, 50, mode);\n+        Timeout t = new Timeout(25, 50, mode);\n         \n-        assertCorrectMode(t.atLeastOnce(), VerificationWithTimeout.class, 50, 25, AtLeast.class);\n-        assertCorrectMode(t.atLeast(5), VerificationWithTimeout.class, 50, 25, AtLeast.class);\n-        assertCorrectMode(t.times(5), VerificationWithTimeout.class, 50, 25, Times.class);\n-        assertCorrectMode(t.never(), VerificationWithTimeout.class, 50, 25, Times.class);\n-        assertCorrectMode(t.only(), VerificationWithTimeout.class, 50, 25, Only.class);\n-        assertCorrectMode(t.atMost(10), VerificationWithTimeout.class, 50, 25, AtMost.class);\n+        assertCorrectMode(t.atLeastOnce(), Timeout.class, 50, 25, AtLeast.class);\n+        assertCorrectMode(t.atLeast(5), Timeout.class, 50, 25, AtLeast.class);\n+        assertCorrectMode(t.times(5), Timeout.class, 50, 25, Times.class);\n+        assertCorrectMode(t.never(), Timeout.class, 50, 25, Times.class);\n+        assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);\n+        assertCorrectMode(t.atMost(10), Timeout.class, 50, 25, AtMost.class);\n     }\n     \n     private void assertCorrectMode(VerificationMode t, Class expectedType, int expectedTimeout, int expectedTreshold, Class expectedDelegateType) {\n         assertEquals(expectedType, t.getClass());\n-        assertEquals(expectedTimeout, ((VerificationWithTimeout) t).impl.getTimeout());\n-        assertEquals(expectedTreshold, ((VerificationWithTimeout) t).impl.getTreshhold());\n-        assertEquals(expectedDelegateType, ((VerificationWithTimeout) t).impl.getDelegate().getClass());\n+        assertEquals(expectedTimeout, ((Timeout) t).impl.getTimeout());\n+        assertEquals(expectedTreshold, ((Timeout) t).impl.getTreshhold());\n+        assertEquals(expectedDelegateType, ((Timeout) t).impl.getDelegate().getClass());\n     }\n }\n--- a/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n+++ b/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n \n import org.junit.After;\n import org.junit.Test;\n+import org.mockito.InOrder;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n         t.start();\n         \n         //then\n-        verify(mock, never()).clear();\n-        verify(mock, timeout(40).atLeast(1)).clear();\n+        verify(mock, timeout(100)).clear();\n+        \n+        verify(mock, timeout(100).atLeastOnce()).clear();\n+        verify(mock, timeout(100).times(1)).clear();\n+        \n+        \n+        verify(mock).clear();\n+        verify(mock, times(1)).clear();\n     }\n \n     @Test", "timestamp": 1273604516, "metainfo": ""}