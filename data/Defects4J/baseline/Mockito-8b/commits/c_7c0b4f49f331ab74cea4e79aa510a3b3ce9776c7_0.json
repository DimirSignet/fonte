{"sha": "7c0b4f49f331ab74cea4e79aa510a3b3ce9776c7", "log": "added better description message for custom matchers  --HG-- rename : test/org/mockito/ArgumentMatcherTest.java => test/org/mockito/DecamelizerTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40445", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n-\n-import java.util.regex.Pattern;\n \n import org.hamcrest.BaseMatcher;\n import org.hamcrest.Description;\n  */\n public abstract class ArgumentMatcher<T> extends BaseMatcher<T> {\n \n-    private static final Pattern CAPS = Pattern.compile(\"([A-Z][^A-Z]*)\");\n     \n     /**\n      * Returns whether this matcher accepts the given argument.\n      * appended.\n      */\n     public void describeTo(Description description) {\n-        description.appendText(deCamelCase());\n-    }\n-    \n-    private String deCamelCase() {\n         String className = getClass().getSimpleName();\n-        if (className.length() == 0) {\n-            return \"<custom argument matcher>\";\n-        }\n-        \n-        java.util.regex.Matcher match = CAPS.matcher(className);\n-        \n-        StringBuilder deCameled = new StringBuilder();\n-        while(match.find()) {\n-            if (deCameled.length() == 0) {\n-                deCameled.append(match.group());\n-            } else {\n-                deCameled.append(\" \");\n-                deCameled.append(match.group().toLowerCase());\n-            }\n-        }\n-        \n-        if (deCameled.length() == 0) {\n-            return className;\n-        }\n-        \n-        return deCameled.toString();\n+        description.appendText(Decamelizer.decamelizeMatcher(className));\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/Decamelizer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Decamelizer {\n+\n+private static final Pattern CAPS = Pattern.compile(\"([A-Z\\\\d][^A-Z\\\\d]*)\");\n+    \n+    public static String decamelizeMatcher(String className) {\n+        if (className.length() == 0) {\n+            return \"<custom argument matcher>\";\n+        }\n+        \n+        String decamelized = decamelizeClassName(className);\n+        \n+        if (decamelized.length() == 0) {\n+            return className;\n+        }\n+        \n+        return decamelized.toString();\n+    }\n+\n+    private static String decamelizeClassName(String className) {\n+        Matcher match = CAPS.matcher(className);\n+        StringBuilder deCameled = new StringBuilder();\n+        while(match.find()) {\n+            if (deCameled.length() == 0) {\n+                deCameled.append(match.group());\n+            } else {\n+                deCameled.append(\" \");\n+                deCameled.append(match.group().toLowerCase());\n+            }\n+        }\n+        return deCameled.toString();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/DecamelizerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Decamelizer.*;\n+\n+import org.junit.Test;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class DecamelizerTest extends TestBase {\n+    \n+    @Test\n+    public void shouldDecamelize() throws Exception {\n+        assertEquals(\"Sentence with strong language\", decamelizeMatcher(\"SentenceWithStrongLanguage\"));\n+        assertEquals(\"W e i r d o 1\", decamelizeMatcher(\"WEIRDO1\"));\n+        assertEquals(\"_\", decamelizeMatcher(\"_\"));\n+        assertEquals(\"Has exactly 3 elements\", decamelizeMatcher(\"HasExactly3Elements\"));\n+        assertEquals(\"<custom argument matcher>\", decamelizeMatcher(\"\"));\n+    }\n+}", "timestamp": 1204637710, "metainfo": ""}