{"sha": "d5fb4ee089a859e0bff7ea0ffa2d6b3717b0b43b", "log": "fixed SmartNulls problem with toString() methods  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401228", "commit": "\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n             equalsMethod = toMock.getMethod(\"equals\", new Class[] { Object.class });\n             hashCodeMethod = toMock.getMethod(\"hashCode\", (Class[]) null);\n         } catch (NoSuchMethodException e) {\n-            throw new RuntimeException(\"An Object method could not be found!\");\n+            throw new RuntimeException(\"\\nSomething went really wrong. Object method could not be found!\" +\n+                \"\\n please report it to the mocking mailing list at http://mockito.org\");\n         }\n         this.delegate = delegate;\n     }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n     }\n \n     public static boolean isToString(InvocationOnMock invocation) {\n-        return invocation.getMethod().getReturnType() == String.class \n-            && invocation.getMethod().getParameterTypes().length == 0 \n-            && invocation.getMethod().getName().equals(\"toString\");\n+        return isToString(invocation.getMethod());\n+    }\n+    \n+    public static boolean isToString(Method method) {\n+        return method.getReturnType() == String.class \n+        && method.getParameterTypes().length == 0 \n+        && method.getName().equals(\"toString\");\n     }\n \n     public boolean isValidException(Throwable throwable) {\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n import org.mockito.ReturnValues;\n import org.mockito.exceptions.cause.BecauseThisMethodWasNotStubbed;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockito.internal.creation.ClassNameFinder;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n+import org.mockito.internal.invocation.Invocation;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n             return ClassImposterizer.INSTANCE.imposterise(new MethodInterceptor() {\n                 Exception whenCreated = new BecauseThisMethodWasNotStubbed(\"\\nBecause this method was not stubbed correctly:\");\n                 public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+                    if (Invocation.isToString(method)) {\n+//                        return \"SmartNull for \" + ClassNameFinder.classNameForMock(obj) + \", hashCode: \" + obj.hashCode();\n+                        return \"SmartNull for \" + ClassNameFinder.classNameForMock(obj);\n+                    }\n                     throw new SmartNullPointerException(\"\\nYou have a NullPointerException here:\", whenCreated);\n                 }}, type);\n         }\n--- a/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n         } catch (SmartNullPointerException e) {}\n     }\n     \n-    \n     @Test\n     public void shouldThrowSmartNPEWhenMethodReturnsInterface() throws Exception {\n         Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n         assertEquals(true, mock.listReturningMethod().isEmpty());\n         assertEquals(0, mock.arrayReturningMethod().length);\n     }\n+    \n+    @Test\n+    public void shouldNotThrowSmartNullPointerOnToString() {\n+        Object smartNull = mock.objectReturningMethod();\n+        try {\n+            verify(mock).simpleMethod(smartNull);\n+            fail();\n+        } catch (WantedButNotInvoked e) {}\n+    }\n+\n+//    @Test\n+//    public void shouldNotThrowSmartNullPointerOnObjectMethods() {\n+//        Object smartNull = mock.objectReturningMethod();\n+//        try {\n+//            verify(mock).simpleMethod(smartNull);\n+//            fail();\n+//        } catch (WantedButNotInvoked e) {}\n+//    }\n }", "timestamp": 1232490569, "metainfo": ""}