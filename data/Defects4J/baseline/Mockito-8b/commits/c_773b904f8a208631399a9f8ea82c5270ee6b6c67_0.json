{"sha": "773b904f8a208631399a9f8ea82c5270ee6b6c67", "log": "finishing touches to exception messages  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40347", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n     private static void assertMocksNotEmpty(Object[] mocks) {\n         if (mocks == null || mocks.length == 0) {\n-            REPORTER.mocksHaveToBePassedAsArguments();\n+            REPORTER.mocksHaveToBePassedToVerifyNoMoreInteractions();\n         }\n     }\n \n      * @return InOrder object to be used to verify in order\n      */\n     public static InOrder inOrder(Object... mocks) {\n-        if (mocks.length == 0) {\n+        if (mocks == null || mocks.length == 0) {\n             REPORTER.mocksHaveToBePassedWhenCreatingInOrder();\n         }\n         for (Object mock : mocks) {\n-            MockUtil.validateMock(mock);\n+            if (!MockUtil.isMock(mock)) {\n+                REPORTER.notAMockPassedWhenCreatingInOrder();\n+            }\n         }\n         InOrder inOrderVerifier = new InOrderVerifier(Arrays.asList(mocks));\n         return inOrderVerifier;\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n import org.mockito.exceptions.cause.WantedDiffersFromActual;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n         return number == 1 ? \"1 time\" : number + \" times\";\n     }\n \n-    public void mocksHaveToBePassedAsArguments() {\n-        throw new MockitoException(join(\n-                \"Method requires argument(s).\",\n-                \"Pass mocks that should be verified, e.g:\",\n-                \"  verifyNoMoreInteractions(mockOne, mockTwo);\",\n-                \"  verifyZeroInteractions(mockOne, mockTwo);\"\n-                ));\n-    }\n-\n-    public void inOrderRequiresFamiliarMock() {\n-        throw new MockitoException(join(\n-                \"InOrder can only verify mocks that were passed in during creation of InOrder. E.g:\",\n-                \"  InOrder inOrder = inOrder(mockOne);\",\n-                \"  inOrder.verify(mockOne).doStuff();\"\n-                ));\n-    }\n-\n-    public void mocksHaveToBePassedWhenCreatingInOrder() {\n-        throw new MockitoException(join(\n-                \"Method requires argument(s).\",\n-                \"Pass mocks that require verification in order, e.g:\",\n-                \"  InOrder inOrder = inOrder(mockOne, mockTwo);\"\n-                ));\n-    }\n-\n     public void checkedExceptionInvalid(Throwable t) {\n         throw new MockitoException(join(\n-                \"Checked exception is invalid for this method\",\n+                \"Checked exception is invalid for this method!\",\n                 \"Invalid: \" + t\n                 ));\n     }\n \n     public void cannotStubWithNullThrowable() {\n         throw new MockitoException(join(\n-                \"Cannot stub with null throwable\"\n+                \"Cannot stub with null throwable!\"\n                 ));\n \n     }\n     \n     public void unfinishedStubbing() {\n         throw new UnfinishedStubbingException(join(\n-                \"Unifinished stubbing detected, e.g. toReturn() may be missing\",\n+                \"Unifinished stubbing detected!\",\n+                \"E.g. toReturn() may be missing.\",\n                 \"Examples of correct stubbing:\",\n-                \"  stub(mock.isOk()).toReturn(true);\",\n-                \"  stub(mock.isOk()).toThrow(exception);\",\n-                \"  stubVoid(mock).toThrow(exception).on().someMethod();\"\n+                \"    stub(mock.isOk()).toReturn(true);\",\n+                \"    stub(mock.isOk()).toThrow(exception);\",\n+                \"    stubVoid(mock).toThrow(exception).on().someMethod();\"\n         ));\n     }\n \n     public void missingMethodInvocation() {\n         throw new MissingMethodInvocationException(join(\n-                \"stub() requires an argument which has to be a method call on a mock\",\n-                \"For example:\",\n-                \"  stub(mock.getArticles()).toReturn(articles);\"\n+                \"stub() requires an argument which has to be a method call on a mock.\",\n+                \"For example:\",\n+                \"    stub(mock.getArticles()).toReturn(articles);\"\n         ));\n     }\n \n     public void unfinishedVerificationException() {\n         throw new UnfinishedVerificationException(join(\n-                \"Previous verify(mock) doesn't have a method call.\",\n+                \"Previous verify(mock) doesn't have a method call!\",\n                 \"Example of correct verification:\",\n-                \"  verify(mock).doSomething()\"\n-        ));\n-    }\n+                \"    verify(mock).doSomething()\"\n+        ));\n+    }\n+    \n+\n+    public void notAMockPassedToVerify() {\n+        throw new NotAMockException(join(\n+                \"Argument passed to verify() is not a mock!\",\n+                \"Examples of correct verifications:\",\n+                \"    verify(mock).someMethod();\",\n+                \"    verify(mock, times(10)).someMethod();\",\n+                \"    verify(mock, atLeastOnce()).someMethod();\"\n+                \n+        ));\n+    }\n+    \n+    public void mocksHaveToBePassedToVerifyNoMoreInteractions() {\n+        throw new MockitoException(join(\n+                \"Method requires argument(s)!\",\n+                \"Pass mocks that should be verified, e.g:\",\n+                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n+                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n+                ));\n+    }\n+\n+    public void notAMockPassedToVerifyNoMoreInteractions() {\n+        throw new NotAMockException(join(\n+            \"Argument(s) passed is not a mock!\",\n+            \"Examples of correct verifications:\",\n+            \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n+            \"    verifyZeroInteractions(mockOne, mockTwo);\"\n+        ));\n+    }\n+\n+    public void notAMockPassedWhenCreatingInOrder() {\n+        throw new NotAMockException(join(\n+                \"Argument(s) passed is not a mock!\",\n+                \"Pass mocks that require verification in order.\",\n+                \"For example:\",\n+                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n+                ));\n+    } \n+    \n+    public void mocksHaveToBePassedWhenCreatingInOrder() {\n+        throw new MockitoException(join(\n+                \"Method requires argument(s)!\",\n+                \"Pass mocks that require verification in order.\",\n+                \"For example:\",\n+                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n+                ));\n+    }\n+    \n+    public void inOrderRequiresFamiliarMock() {\n+        throw new MockitoException(join(\n+                \"InOrder can only verify mocks that were passed in during creation of InOrder.\",\n+                \"For example:\",\n+                \"    InOrder inOrder = inOrder(mockOne);\",\n+                \"    inOrder.verify(mockOne).doStuff();\"\n+                ));\n+    }\n+    \n+    public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount) {\n+        throw new InvalidUseOfMatchersException(join(\n+                \"Invalid use of matchers! - see javadoc for Matchers class.\",\n+                expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n+                \"Typically this exception occurs when matchers are combined with raw values:\",        \n+                \"    verify(mock).someMethod(anyObject(), \\\"raw String\\\");\",\n+                \"When using matchers, all arguments have to be provided by matchers.\",\n+                \"For example:\",\n+                \"    verify(mock).someMethod(anyObject(), eq(\\\"String by matcher\\\"));\"\n+        ));\n+    }    \n \n     public void wantedDiffersFromActual(Printable wanted, Printable actual, HasStackTrace actualInvocationStackTrace) {\n         WantedDiffersFromActual cause1 = new WantedDiffersFromActual(join(\n                 clazz.toString()\n         ));\n     }\n-\n-    public void notAMockPassedToVerify() {\n-        throw new NotAMockException(join(\n-                \"Not a mock passed to verify() method\",\n-                \"Examples of correct verifications:\",\n-                \"  verify(mock).someMethod();\",\n-                \"  verify(mock, times(10)).someMethod();\",\n-                \"  verify(mock, atLeastOnce()).someMethod();\"\n-                \n-        ));\n-    }\n-\n-    public void notAMockPassedToVerifyNoMoreInteractions() {\n-        throw new NotAMockException(join(\n-            \"Not a mock passed to method\",\n-            \"Examples of correct verifications:\",\n-            \"  verifyNoMoreInteractions(mockOne, mockTwo);\",\n-            \"  verifyZeroInteractions(mockOne, mockTwo);\"\n-        ));\n-    }\n }\n--- a/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n+++ b/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n     private static final long serialVersionUID = 1L;\n \n     public InvalidUseOfMatchersException(String message) {\n-        super(  \"\\n\" +\n-                message +\n-                \"\\n\" +\n-                \"Invalid use of matchers - see javadoc for Matchers class.\" +\n-                \"\\n\" +\n-                \"Typically this exception occurs when matchers are combined with raw values:\" +\n-                \"\\n\" +\n-                \"    verify(mock).someMethod(anyObject(), \\\"raw value\\\");\" +\n-                \"\\n\" +\n-                \"When using matchers, all arguments have to be provided by matchers, eg:\" +\n-                \"\\n\" +\n-                \"    verify(mock).someMethod(anyObject(), eq(\\\"raw value\\\"));\");\n+        super(message);\n     }\n }\n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.exceptions.Reporter;\n import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.progress.LastArguments;\n \n     private void validateMatchers(Invocation invocation, List<ArgumentMatcher> matchers) {\n         if (matchers != null) {\n-            if (matchers.size() != invocation.getArguments().length) {\n-                throw new InvalidUseOfMatchersException(\n-                        invocation.getArguments().length\n-                        + \" matchers expected, \" + matchers.size()\n-                        + \" recorded.\");\n+            int recordedMatchersSize = matchers.size();\n+            int expectedMatchersSize = invocation.getArguments().length;\n+            if (expectedMatchersSize != recordedMatchersSize) {\n+                new Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);\n             }\n         }\n     }\n--- a/test/org/mockito/MockUtilTest.java\n+++ b/test/org/mockito/MockUtilTest.java\n  */\n package org.mockito;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n import static org.mockito.internal.MockUtil.*;\n \n import java.util.ArrayList;\n         getMockHandler(null);\n     }\n     \n-    @Test (expected=NotAMockException.class)\n+    @Test\n     public void shouldValidateMock() {\n-        validateMock(\"\");\n-    }\n-    \n-    @Test (expected=MockitoException.class)\n-    public void shouldScreamWhenNullPassedToValidation() {\n-        validateMock(null);\n+        assertFalse(isMock(\"i mock a mock\"));\n+        assertTrue(isMock(Mockito.mock(List.class)));\n     }\n }\n--- a/test/org/mockitousage/DescriptiveMessagesOnMisuseTest.java\n+++ b/test/org/mockitousage/DescriptiveMessagesOnMisuseTest.java\n     \n     @Mock private IMethods mock;\n \n+    @SuppressWarnings(\"all\")\n+    @Ignore\n+    @Test\n+    public void tryDescriptiveMessagesOnMisuse() {\n+        verifyNoMoreInteractions();\n+        verifyNoMoreInteractions(null);\n+        verifyNoMoreInteractions(\"\");\n+        verifyZeroInteractions();\n+        verifyZeroInteractions(null);\n+        verifyZeroInteractions(\"\");\n+\n+        inOrder();\n+        inOrder(null);\n+        inOrder(\"test\");\n+        InOrder inOrder = inOrder(mock(List.class));\n+        inOrder.verify(mock).simpleMethod();\n+\n+        verify(mock.differentMethod());\n+        verify(null);\n+\n+        verify(mock).varargs(\"test\", anyString());\n+\n+        stub(\"x\").toReturn(\"x\");\n+\n+        stub(mock.simpleMethod());\n+        stub(mock.differentMethod()).toReturn(\"\");\n+    } \n+    \n     @Test(expected=NotAMockException.class)\n     public void shouldScreamWhenWholeMethodPassedToVerify() {\n         verify(mock.booleanReturningMethod(2));\n     public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions() {\n         verifyNoMoreInteractions(null);\n     }\n-    \n-    @SuppressWarnings(\"all\")\n-    @Ignore\n-    @Test\n-    public void shouldExceptionMessageProvideUsefulInfo() {\n-        verifyNoMoreInteractions(null);\n-        verifyNoMoreInteractions(\"\");\n-        verifyZeroInteractions(null);\n-        verifyZeroInteractions(\"\");\n-        \n-        inOrder(null);\n-        inOrder(\"test\");\n-        InOrder inOrder = inOrder(mock(List.class));\n-        inOrder.verify(mock).simpleMethod();\n-        \n-        verify(mock.differentMethod());\n-        verify(null);\n-        \n-        verify(mock).varargs(\"test\", anyString());\n-        //TODO replace 'Not a mock' with arg that ... or something ???\n-    } \n }\n--- a/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.InOrder;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n     public void shouldFailOnVerifyZeroInteractions() {\n         verifyZeroInteractions(mockOne);\n     }\n+    \n+    @SuppressWarnings(\"all\")\n+    @Test(expected=MockitoException.class)\n+    public void shouldScreamWhenNullPassed() {\n+        inOrder(null);\n+    }\n }", "timestamp": 1202427592, "metainfo": ""}