{"sha": "ce8b133a4a126bced5c077f6a1e8389b0384ee32", "log": "Merged troubleshooter into Mockito based by user requests Started tuning out the javadocs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401373", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n  *\n  * Warning: it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.\n  * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.\n- * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.   \n+ * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.\n+ * <p>\n+ * See the full documentation on Mockito in javadoc for {@link Mockito} class.    \n  */\n @SuppressWarnings(\"unchecked\")\n public class ArgumentCaptor<T> extends ArgumentMatcher<T> {\n     \n     private LinkedList<Object> arguments = new LinkedList<Object>();\n \n+    /**\n+     * <b>Don't call this method directly.</b> It is used internally by the framework to store argument value. \n+     */\n     public boolean matches(Object argument) {\n         this.arguments.add(argument);\n         return true;\n     }\n \n+    /**\n+     * Use it to capture the argument. This method <b>must be used inside of verification</b>.\n+     * <p>\n+     * Internally, this method registers a special implementation of an {@link ArgumentMatcher}.\n+     * This argument matcher stores the argument value so that you can use it later to perform assertions.  \n+     * <p>\n+     * See examples in javadoc for {@link ArgumentCaptor} class.\n+     * \n+     * @return null\n+     */\n     public T capture() {\n         Mockito.argThat(this);\n         return null;\n     }\n \n+    /**\n+     * Returns the captured value of the argument\n+     * <p>\n+     * If the method was called multiple times then it returns the latest captured value\n+     * <p>\n+     * See examples in javadoc for {@link ArgumentCaptor} class.\n+     * \n+     * @return captured argument value\n+     */\n     public T getValue() {\n         if (arguments.isEmpty()) {\n             new Reporter().noArgumentValueWasCaptured();\n         return (T) arguments;\n     }\n \n+    /**\n+     * Returns the captured value of the argument\n+     * <p>\n+     * If the method was called multiple times then it returns the latest captured value\n+     * <p>\n+     * See examples in javadoc for {@link ArgumentCaptor} class.\n+     * \n+     * @return captured argument value\n+     */\n     public List<T> getAllValues() {\n         return (List) arguments;\n     }\n-    \n-    @Override\n+\n+    /**\n+     * <b>Don't call this method directly.</b> It is used internally by the framework to print friendly matcher description.\n+     */\n     public void describeTo(Description description) {\n         description.appendText(\"<Capturing argument>\");\n     }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n+import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.NewOngoingStubbing;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n import org.mockito.internal.returnvalues.MockReturnValues;\n  *      12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>\n  *      13. Spying on real objects <br/>\n  *      14. Changing default return values of unstubbed invocations <br/>\n- *      15. (**New**) Troubleshooting <br/>\n+ *      15. **New**) Capturing arguments for further assertions <br/>\n+ *      16. (**New**) Troubleshooting <br/>\n  * </b>\n  * \n  * <p>\n  * <p>\n  * Read more about this interesting implementation of <i>ReturnValues</i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n- * <h3>15. (**New**) Troubleshooting</h3>\n- * \n- * First, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n- * <p>\n- * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a>\n- * <p>\n- * If you are experiencing problems with the framework check out new {@link MockitoTroubleshooter}.\n- * Although Mockito performs framework validation every time you use it, {@link MockitoTroubleshooter} allows executing the validation explicitly.\n- * Read more in javadoc for {@link MockitoTroubleshooter} class to find out where it could be useful.\n+ * <h3>15. (**New**) Capturing arguments for further assertions</h3>\n+ * \n+ * \n+ *  \n+ * <h3>16. (**New**) Troubleshooting</h3>\n+ * \n+ * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n+ * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n+ * <p>\n+ * In case of questions you may also post to mockito mailing list: \n+ * <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a>\n+ * <p>\n+ * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. \n+ * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     public static VerificationMode atMost(int maxNumberOfInvocations) {\n         return VerificationModeFactory.atMost(maxNumberOfInvocations);\n     }\n+\n+    /**\n+     * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n+     * <p>\n+     * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a> \n+     * <p>  \n+     * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. However, there's a gotcha so read on.\n+     * <p>\n+     * {@link Mockito#validateMockitoUsage()} explicitly validates the framework state to detect invalid use of Mockito.\n+     * <p>\n+     * Examples of incorrect use:\n+     * <pre>\n+     * //Oups, someone forgot thenReturn() part:\n+     * when(mock.get());\n+     * \n+     * //Oups, someone put the verified method call inside verify() where it should be outside:\n+     * verify(mock.execute());\n+     * \n+     * //Oups, someone has used EasyMock for too long and forgot to specify the method to verify:\n+     * verify(mock);\n+     * </pre>\n+     * \n+     * Mockito throws exceptions if you misuse it so that you know if your tests are written correctly. \n+     * The gotcha is that Mockito does the validation <b>next time</b> you use the framework (e.g. next time you verify, stub, call mock etc.). \n+     * But even though the exception might be thrown in the next test, \n+     * the exception <b>message contains a navigable stack trace element</b> with location of the defect. \n+     * Hence you can click and find the place where Mockito was misused.\n+     * <p>\n+     * Sometimes though, you might want to validate the framework usage explicitly. \n+     * For example, one of the users wanted to put {@link Mockito#validateMockitoUsage()} in his &#064;After method\n+     * so that he knows immediately when he misused Mockito. \n+     * Without it, he would have known about it not sooner than <b>next time</b> he used the framework.  \n+     * <p>\n+     * Bear in mind that <b>usually you shouldn't need to validateMockitoUsage()</b> \n+     * and framework validation triggered on next-time basis is just enough.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     */\n+    public static void validateMockitoUsage() {\n+        MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n+        mockingProgress.validateState();\n+    }\n }\n--- a/test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java\n+++ b/test/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java\n \n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.MockitoTroubleshooter;\n+import org.mockito.Mockito;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n     public void shouldValidateExplicitly() {\n         verify(mock);\n         try {\n-            MockitoTroubleshooter.validateFrameworkState();\n+            Mockito.validateMockitoUsage();\n             fail();\n         } catch (UnfinishedVerificationException e) {}\n     }\n     public void shouldDetectUnfinishedStubbing() {\n         when(mock.simpleMethod());\n         try {\n-            MockitoTroubleshooter.validateFrameworkState();\n+            Mockito.validateMockitoUsage();\n             fail();\n         } catch (UnfinishedStubbingException e) {}\n     }\n     public void shouldDetectMisplacedArgumentMatcher() {\n         anyObject();\n         try {\n-            MockitoTroubleshooter.validateFrameworkState();\n+            Mockito.validateMockitoUsage();\n             fail();\n         } catch (InvalidUseOfMatchersException e) {}\n     }", "timestamp": 1241175656, "metainfo": ""}