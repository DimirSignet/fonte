{"sha": "be44f9cabc9abaeea72857225928cb6c67742be3", "log": "added more descriptive messages on misuse  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40595", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @return mock object itself\n      */\n     public static <T> T verify(T mock, VerificationMode mode) {\n-        if (!MockUtil.isMock(mock)) {\n+        if (mock == null) {\n+            REPORTER.nullPassedToVerify();\n+        } else if (!MockUtil.isMock(mock)) {\n             REPORTER.notAMockPassedToVerify();\n         }\n         MOCKING_PROGRESS.verificationStarted(mode);\n         MOCKING_PROGRESS.validateState();\n         for (Object mock : mocks) {\n             try {\n+                if (mock == null) {\n+                    REPORTER.nullPassedToVerifyNoMoreInteractions();\n+                }\n                 MockUtil.getMockHandler(mock).verifyNoMoreInteractions();\n             } catch (NotAMockException e) {\n                 REPORTER.notAMockPassedToVerifyNoMoreInteractions();\n             REPORTER.mocksHaveToBePassedWhenCreatingInOrder();\n         }\n         for (Object mock : mocks) {\n-            if (!MockUtil.isMock(mock)) {\n+            if (mock == null) {\n+                REPORTER.nullPassedWhenCreatingInOrder();\n+            } else if (!MockUtil.isMock(mock)) {\n                 REPORTER.notAMockPassedWhenCreatingInOrder();\n             }\n         }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockito.exceptions.misusing.NullInsteadOfMockException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n         ));\n     }\n     \n-\n     public void notAMockPassedToVerify() {\n         throw new NotAMockException(join(\n                 \"Argument passed to verify() is not a mock!\",\n                 \n         ));\n     }\n+\n+    public void nullPassedToVerify() {\n+        throw new NullInsteadOfMockException(join(\n+                \"Argument passed to verify() is null!\",\n+                \"Examples of correct verifications:\",\n+                \"    verify(mock).someMethod();\",\n+                \"    verify(mock, times(10)).someMethod();\",\n+                \"    verify(mock, atLeastOnce()).someMethod();\",\n+                \"Also, if you use @Mock annotation don't miss initMocks()\"\n+        ));\n+    }    \n     \n     public void mocksHaveToBePassedToVerifyNoMoreInteractions() {\n         throw new MockitoException(join(\n             \"    verifyZeroInteractions(mockOne, mockTwo);\"\n         ));\n     }\n+    \n+    public void nullPassedToVerifyNoMoreInteractions() {\n+        throw new NullInsteadOfMockException(join(\n+                \"Argument(s) passed is null!\",\n+                \"Examples of correct verifications:\",\n+                \"    verifyNoMoreInteractions(mockOne, mockTwo);\",\n+                \"    verifyZeroInteractions(mockOne, mockTwo);\"\n+        ));\n+    }\n \n     public void notAMockPassedWhenCreatingInOrder() {\n         throw new NotAMockException(join(\n                 ));\n     } \n     \n+    public void nullPassedWhenCreatingInOrder() {\n+        throw new NullInsteadOfMockException(join(\n+                \"Argument(s) passed is null!\",\n+                \"Pass mocks that require verification in order.\",\n+                \"For example:\",\n+                \"    InOrder inOrder = inOrder(mockOne, mockTwo);\"\n+                ));\n+    }\n+    \n     public void mocksHaveToBePassedWhenCreatingInOrder() {\n         throw new MockitoException(join(\n                 \"Method requires argument(s)!\",\n         throw new InvalidUseOfMatchersException(join(\n                 \"Invalid use of argument matchers!\",\n                 expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n-                \"Typically this exception occurs when matchers are combined with raw values:\",        \n+                \"This exception may occur if matchers are combined with raw values:\",        \n                 \"    //incorrect:\",\n                 \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                 \"When using matchers, all arguments have to be provided by matchers.\",\n                 clazz.toString()\n         ));\n     }\n+\n+\n+\n+\n+\n }\n--- /dev/null\n+++ b/src/org/mockito/exceptions/misusing/NullInsteadOfMockException.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.misusing;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class NullInsteadOfMockException extends MockitoException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public NullInsteadOfMockException(String message) {\n+        super(message);\n+    }\n+}\n--- a/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n+++ b/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n  */\n package org.mockitousage.misuse;\n \n-import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n-\n-import java.util.List;\n \n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.InOrder;\n import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockito.exceptions.misusing.NullInsteadOfMockException;\n import org.mockitousage.IMethods;\n \n public class DescriptiveMessagesOnMisuseTest extends TestBase {\n     @Ignore(\"just for tuning up the error messages\")\n     @Test\n     public void tryDescriptiveMessagesOnMisuse() {\n-        verifyNoMoreInteractions();\n-        verifyNoMoreInteractions(null);\n-        verifyNoMoreInteractions(\"\");\n-        verifyZeroInteractions();\n-        verifyZeroInteractions(null);\n-        verifyZeroInteractions(\"\");\n+//        verifyNoMoreInteractions();\n+//        verifyNoMoreInteractions(null);\n+//        verifyNoMoreInteractions(\"\");\n+//        verifyZeroInteractions();\n+//        verifyZeroInteractions(null);\n+//        verifyZeroInteractions(\"\");\n+//\n+//        inOrder();\n+//        inOrder(null);\n+//        inOrder(\"test\");\n+//        InOrder inOrder = inOrder(mock(List.class));\n+//        inOrder.verify(mock).simpleMethod();\n \n-        inOrder();\n-        inOrder(null);\n-        inOrder(\"test\");\n-        InOrder inOrder = inOrder(mock(List.class));\n-        inOrder.verify(mock).simpleMethod();\n+//        verify(null);\n+//        verify(mock.booleanReturningMethod());\n \n-        verify(mock.differentMethod());\n-        verify(null);\n+//        verify(mock).varargs(\"test\", anyString());\n \n-        verify(mock).varargs(\"test\", anyString());\n+//        stub(\"x\").toReturn(\"x\");\n \n-        stub(\"x\").toReturn(\"x\");\n-\n-        stub(mock.simpleMethod());\n-        stub(mock.differentMethod()).toReturn(\"\");\n+//        stub(mock.simpleMethod());\n+//        stub(mock.differentMethod()).toReturn(\"\");\n     } \n     \n     @Test(expected=NotAMockException.class)\n     @Test(expected=NotAMockException.class)\n     public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions() {\n         verifyNoMoreInteractions(mock.byteReturningMethod());\n-    }  \n+    }\n     \n-    @Test(expected=MockitoException.class)\n+    @Test(expected=NotAMockException.class)\n+    public void shouldScreamWhenInOrderCreatedWithDodgyMock() {\n+        inOrder(\"not a mock\");\n+    }\n+    \n+    @Test(expected=NullInsteadOfMockException.class)\n+    public void shouldScreamWhenInOrderCreatedWithNulls() {\n+        inOrder(mock, null);\n+    }\n+    \n+    @Test(expected=NullInsteadOfMockException.class)\n     public void shouldScreamNullPassedToVerify() {\n         verify(null);\n     }  \n     \n-    @Test(expected=NotAMockException.class)\n+    @Test(expected=NullInsteadOfMockException.class)\n     public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions() {\n         verifyNoMoreInteractions(null, \"blah\");\n     } ", "timestamp": 1208887738, "metainfo": ""}