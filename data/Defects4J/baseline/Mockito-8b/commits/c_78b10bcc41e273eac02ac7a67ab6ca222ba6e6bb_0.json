{"sha": "78b10bcc41e273eac02ac7a67ab6ca222ba6e6bb", "log": "refactorings around thread-safety  --HG-- rename : test/org/mockitousage/MultiThreadedRun.java => test/org/mockitousage/MultiThreadedTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40132", "commit": "\n--- a/src/org/mockito/internal/MockitoState.java\n+++ b/src/org/mockito/internal/MockitoState.java\n  */\n package org.mockito.internal;\n \n-import org.mockito.exceptions.*;\n+import org.mockito.exceptions.Exceptions;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoState {\n     \n-    //TODO this has to be thready singleton\n-    //look how many synchronized stuff we can get rid off\n-    private static MockitoState INSTANCE = new MockitoState();\n-    \n-    private final ThreadLocal<MockControl> lastControl = new ThreadLocal<MockControl>();\n-    private final ThreadLocal<VerifyingMode> verifyingModeLocal = new ThreadLocal<VerifyingMode>();\n-    private final ThreadLocal<Integer> invocationSequenceNumber = new ThreadLocal<Integer>();\n-    private final ThreadLocal<Object> stubbingModeLocal = new ThreadLocal<Object>();\n+    private static ThreadLocal<MockitoState> INSTANCE = new ThreadLocal<MockitoState>();\n+        \n+    private MockControl lastControl;\n+    private VerifyingMode verifyingModeLocal;\n+    private int invocationSequenceNumber = 1;\n+    private boolean stubbingModeLocal = false;\n \n-    MockitoState() {}\n-    \n-    public static synchronized MockitoState instance() {\n-        return INSTANCE;\n+    public static MockitoState instance() {\n+        if (INSTANCE.get() == null) {\n+            INSTANCE.set(new MockitoState());\n+        }\n+        return INSTANCE.get();\n     }\n     \n-    public synchronized void reportControlForStubbing(MockControl mockControl) {\n-        lastControl.set(mockControl);\n+    public void reportControlForStubbing(MockControl mockControl) {\n+        lastControl = mockControl;\n     }\n \n-    public synchronized MockitoExpectation pullControlToBeStubbed() {\n-        MockControl control = lastControl.get();\n-        lastControl.set(null);\n-        return control;\n+    public MockitoExpectation pullControlToBeStubbed() {\n+        MockControl temp = lastControl;\n+        lastControl = null;\n+        return temp;\n     }\n     \n-    public synchronized void verifyingStarted(VerifyingMode verify) {\n+    public void verifyingStarted(VerifyingMode verify) {\n         validateState();\n-        verifyingModeLocal.set(verify);\n+        verifyingModeLocal = verify;\n     }\n \n-    public synchronized VerifyingMode pullVerifyingMode() {\n-        VerifyingMode verifyingMode = verifyingModeLocal.get();\n-        verifyingModeLocal.set(null);\n-        return verifyingMode;\n+    public VerifyingMode pullVerifyingMode() {\n+        VerifyingMode temp = verifyingModeLocal;\n+        verifyingModeLocal = null;\n+        return temp;\n     }\n \n-    public synchronized int nextSequenceNumber() {\n-        if (invocationSequenceNumber.get() == null) {\n-            invocationSequenceNumber.set(1);\n-            return 1;\n-        } else {\n-            int next = invocationSequenceNumber.get() + 1;\n-            invocationSequenceNumber.set(next);\n-            return next;\n-        }\n+    public int nextSequenceNumber() {\n+        return invocationSequenceNumber++;\n     }\n \n-    public synchronized void stubbingStarted() {\n+    public void stubbingStarted() {\n         validateState();\n-        stubbingModeLocal.set(new Object());\n+        stubbingModeLocal = true;\n     }\n \n-    public synchronized void validateState() {\n-        if (verifyingModeLocal.get() != null) {\n-            verifyingModeLocal.set(null);\n+    public void validateState() {\n+        if (verifyingModeLocal != null) {\n+            verifyingModeLocal = null;\n             Exceptions.unfinishedVerificationException();\n         }\n         \n-        if (stubbingModeLocal.get() != null) {\n-            stubbingModeLocal.set(null);\n+        if (stubbingModeLocal) {\n+            stubbingModeLocal = false;\n             Exceptions.unfinishedStubbing();\n         }\n     }\n \n-    public synchronized void stubbingCompleted() {\n-        stubbingModeLocal.set(null);\n+    public void stubbingCompleted() {\n+        stubbingModeLocal = false;\n     }\n     \n     public String toString() {\n-        return  \"lastControl: \" + lastControl.get() + \n-                \", verifyingMode: \" + verifyingModeLocal.get() +\n-                \", invocationSequenceNumber: \" + invocationSequenceNumber.get() +\n-                \", stubbingModeLocal: \" + stubbingModeLocal.get();\n-    }\n-\n-    synchronized static void setInstance(MockitoState mockitoState) {\n-        INSTANCE = mockitoState;\n+        return  \"lastControl: \" + lastControl + \n+                \", verifyingMode: \" + verifyingModeLocal +\n+                \", invocationSequenceNumber: \" + invocationSequenceNumber +\n+                \", stubbingModeLocal: \" + stubbingModeLocal;\n     }\n \n     synchronized void reset() {\n-        stubbingModeLocal.set(null);\n-        verifyingModeLocal.set(null);\n-        invocationSequenceNumber.set(null);\n+        stubbingModeLocal = false;\n+        verifyingModeLocal = null;\n+        invocationSequenceNumber = 1;\n     }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n+package org.mockitousage;\n+import static org.junit.Assert.assertFalse;\n+\n+import java.util.*;\n+\n+import org.junit.Test;\n+import org.junit.runner.*;\n+import org.junit.runner.Result;\n+import org.junit.runner.notification.Failure;\n+import org.mockito.*;\n+import org.mockito.exceptions.*;\n+import org.mockito.internal.*;\n+import org.mockito.internal.matchers.EqualsTest;\n+import org.mockito.sample.MockitoSampleTest;\n+import org.mockitousage.binding.*;\n+import org.mockitousage.matchers.*;\n+import org.mockitousage.stubbing.*;\n+import org.mockitousage.verification.*;\n+\n+public class MultiThreadedTest {\n+    \n+    private static class AllTestsRunner extends Thread {\n+        \n+        private boolean failed;\n+\n+        public void run() {\n+            Result result = JUnitCore.runClasses(\n+                    MockitoSampleTest.class, \n+                    EqualsTest.class, \n+                    CglibTest.class, \n+                    ExpectedInvocationTest.class, \n+                    InvocationChunkTest.class, \n+                    MockFactoryTest.class, \n+                    MockitoBehaviorTest.class, \n+                    MockitoStateTest.class, \n+                    RegisteredInvocationsTest.class, \n+                    ToTypeMappingsTest.class, \n+                    VerifyingModeTest.class, \n+                    InvocationTest.class, \n+                    MockUtilTest.class, \n+                    MockitoAssertionErrorTest.class, \n+                    MockitoErrorTest.class, \n+                    BridgeMethodPuzzleTest.class, \n+                    IncorectBindingPuzzleFixedTest.class, \n+                    UsingVarargsTest.class, \n+                    ComparableMatchersTest.class, \n+                    MatchersToStringTest.class, \n+                    VerificationAndStubbingUsingMatchersTest.class, \n+                    BasicStubbingTest.class, \n+                    ReturningDefaultValuesTest.class, \n+                    StubbingWithThrowablesTest.class, \n+                    AtLeastOnceVerificationTest.class, \n+                    BasicVerificationTest.class, \n+                    ExactNumberOfTimesVerificationTest.class, \n+                    NiceMessagesWhenVerificationFailsTest.class, \n+                    NoMoreInteractionsVerificationTest.class, \n+                    VerificationInOrderMixedWithOrdiraryVerificationTest.class, \n+                    VerificationInOrderTest.class, \n+                    VerificationOnMultipleMocksUsingMatchersTest.class, \n+                    VerificationUsingMatchersTest.class, \n+                    MatchersTest.class,\n+                    ReplacingObjectMethodsTest.class,\n+                    //below are tests that mess up the state\n+                    MockControlTest.class,\n+                    MockitoTest.class,\n+                    InvalidUsageTest.class,\n+                    InvalidUseOfMatchersTest.class,\n+                    NiceMessagesOnStrictOrderErrorsTest.class,\n+                    InvalidStateDetectionTest.class,\n+                    StackTrackeFilteringTest.class\n+                );\n+                \n+                if (!result.wasSuccessful()) {\n+                    System.err.println(\"Thread[\" + Thread.currentThread().getId() + \"]: error!\");\n+                    List<Failure> failures = result.getFailures();\n+                    System.err.println(failures.size());\n+                    for (Failure failure : failures) {\n+                        System.err.println(failure.getTrace());\n+                        failed = true;\n+                    }\n+                }\n+        }\n+\n+        public boolean isFailed() {\n+            return failed;\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldRunInMultipleThreads() throws Exception {\n+        assertFalse(\"Run in multiple thread failed\", runInMultipleThreads(4));\n+    }\n+    \n+    public static boolean runInMultipleThreads(int numberOfThreads) throws Exception {\n+        List<AllTestsRunner> threads = new LinkedList<AllTestsRunner>();\n+        for(int i = 1 ; i <= numberOfThreads ; i++) {\n+            threads.add(new AllTestsRunner());\n+        }\n+        \n+        for (Thread t : threads) {\n+            t.start();\n+        }\n+        \n+        boolean failed = false;        \n+        for (AllTestsRunner t : threads) {\n+            t.join();\n+            failed = failed? true : t.isFailed();\n+        }\n+        \n+        return failed;\n+    }\n+    \n+    public static void main(String[] args) throws Exception {\n+        int numberOfThreads = 100; \n+        runInMultipleThreads(numberOfThreads);\n+        \n+        System.out.println(\"Finished running tests in \" + numberOfThreads + \" threads\");\n+    }\n+}", "timestamp": 1196879041, "metainfo": ""}