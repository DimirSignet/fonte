{"sha": "594feb1d171f9f8e6bf2258d9fb403fe8388642d", "log": "More javadoc tweaks + added information about missing type checks on any methods and ArgumentCaptor (transplanted from a1981f7467cbfe2d5a80ac72e429cd69bc327390)  --HG-- branch : 1.9-rc1 extra : transplant_source : %A1%98%1Ftg%CB%FE-Z%80%ACr%E4%29%CDi%BC2s%90", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n  * <li>you just need it to assert on argument values to complete verification</li>\n  * </ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n+ * <p>\n+ * This utility class <b>*don't do any type checks*</b>, the generic signatures are only there to avoid casting\n+ * in your code. If you want specific types, then you should do that the captured values.\n+ * This behavior might change (type checks could be added) in a\n+ * future major release.\n  * <p>\n  * There is an <b>annotation</b> that you might find useful: &#64;{@link Captor}\n  * <p>\n         return this.capturingMatcher.getAllValues();\n     }\n \n+    /**\n+     * Build a new <code>ArgumentCaptor</code>.\n+     * <p>\n+     * Note that an <code>ArgumentCaptor</code> <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n+     *\n+     * @param clazz Type matching the parameter to be captured.\n+     * @param <T> Type of clazz\n+     * @return A new ArgumentCaptor\n+     */\n     public static <T> ArgumentCaptor<T> forClass(Class<T> clazz) {\n         return new ArgumentCaptor<T>(clazz);\n     }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n  * </pre>\n  * <p>\n- * Matcher methods like anyObject(), eq() <b>do not</b> return matchers.\n+ * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n  * Internally, they record a matcher on a stack and return a dummy value (usually null).\n  * This implementation is due static type safety imposed by java compiler.\n- * The consequence is that you cannot use anyObject(), eq() methods outside of verified/stubbed method.\n- * \n+ * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n+ *\n+ * <p>\n+ * <b>Warning 2:</b>\n+ * <p>\n+ * The any family methods <b>*don't do any type checks*</b>, those are only here to avoid casting\n+ * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n+ * This <b>might</b> however change (type checks could be added) in a future major release.\n+ *\n  * <h1>Custom Argument Matchers</h1>\n  * \n  * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n     private static MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n \n     /**\n-     * any boolean, Boolean or null.\n+     * Any <code>boolean</code>, <code>Boolean</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any byte, Byte or null\n+     * Any <code>byte</code>, <code>Byte</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any char, Character or null.\n+     * Any <code>char</code>, <code>Character</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any int, Integer or null.\n+     * Any int, Integer or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any long, Long or null.\n+     * Any <code>long</code>, <code>Long</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any float, Float or null.\n+     * Any <code>float</code>, <code>Float</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any double, Double or null.\n+     * Any <code>double</code>, <code>Double</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any short, Short or null.\n+     * Any <code>short</code>, <code>Short</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any Object or null.\n+     * Any <code>Object</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * Has aliases: {@link #any()} and {@link #any(Class clazz)}\n      * <p>\n     }\n     \n     /**\n-     * any kind object, not necessary of the given class.\n+     * Any kind object, not necessary of the given class.\n      * The class argument is provided only to avoid casting.\n      * <p>\n-     * Sometimes looks better than anyObject() - especially when explicit casting is required\n+     * Sometimes looks better than <code>anyObject()</code> - especially when explicit casting is required\n      * <p>\n      * Alias to {@link Matchers#anyObject()}\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * any object or null \n+     * Any object or <code>null</code>.\n      * <p>\n      * Shorter alias to {@link Matchers#anyObject()}\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * any String or null.\n+     * Any <code>String</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * any List or null.\n+     * Any <code>List</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }    \n     \n     /**\n-     * generic friendly alias to {@link Matchers#anyList()}.\n+     * Generic friendly alias to {@link Matchers#anyList()}.\n      * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n      * <p>\n-     * any List or null.\n+     * Any <code>List</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }    \n     \n     /**\n-     * any Set or null\n+     * Any <code>Set</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n     }\n     \n     /**\n-     * generic friendly alias to {@link Matchers#anySet()}.\n+     * Generic friendly alias to {@link Matchers#anySet()}.\n      * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n      * <p>\n-     * any Set or null\n+     * Any <code>Set</code> or <code>null</code>\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n     }\n \n     /**\n-     * any Map or null.\n+     * Any <code>Map</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * generic friendly alias to {@link Matchers#anyMap()}.\n+     * Generic friendly alias to {@link Matchers#anyMap()}.\n      * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n      * <p>\n-     * any Map or null\n+     * Any <code>Map</code> or <code>null</code>\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n     }\n     \n     /**\n-     * any Collection or null.\n+     * Any <code>Collection</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }    \n     \n     /**\n-     * generic friendly alias to {@link Matchers#anyCollection()}. \n+     * Generic friendly alias to {@link Matchers#anyCollection()}.\n      * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.     \n      * <p>\n-     * any Collection or null.\n+     * Any <code>Collection</code> or <code>null</code>.\n+     * <p>\n+     * This method <b>*don't do any type checks*</b>, it is only there to avoid casting\n+     * in your code. This might however change (type checks could be added) in a\n+     * future major release.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }    \n \n     /**\n-     * Object argument that implements the given class. \n+     * <code>Object</code> argument that implements the given class.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * boolean argument that is equal to the given value.\n+     * <code>boolean</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * byte argument that is equal to the given value.\n+     * <code>byte</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * char argument that is equal to the given value.\n+     * <code>char</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * double argument that is equal to the given value.\n+     * <code>double</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * float argument that is equal to the given value.\n+     * <code>float</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * int argument that is equal to the given value.\n+     * <code>int</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * long argument that is equal to the given value.\n+     * <code>long</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * short argument that is equal to the given value.\n+     * <code>short</code> argument that is equal to the given value.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * null argument.\n+     * <code>null</code> argument.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * null argument.\n+     * <code>null</code> argument.\n      * The class argument is provided to avoid casting.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n     }\n \n     /**\n-     * not null argument.\n+     * Not <code>null</code> argument.\n      * <p>\n      * alias to {@link Matchers#isNotNull()}\n      * <p>\n     }\n \n     /**\n-     * not null argument, not necessary of the given class.\n+     * Not <code>null</code> argument, not necessary of the given class.\n      * The class argument is provided to avoid casting.\n      * <p>\n      * alias to {@link Matchers#isNotNull(Class)}\n     }\n     \n     /**\n-     * not null argument.\n+     * Not <code>null</code> argument.\n      * <p>\n      * alias to {@link Matchers#notNull()}\n      * <p>\n     }\n \n     /**\n-     * not null argument, not necessary of the given class.\n+     * Not <code>null</code> argument, not necessary of the given class.\n      * The class argument is provided to avoid casting.\n      * <p>\n      * alias to {@link Matchers#notNull(Class)}\n     }\n \n     /**\n-     * String argument that contains the given substring.\n+     * <code>String</code> argument that contains the given substring.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * String argument that matches the given regular expression.\n+     * <code>String</code> argument that matches the given regular expression.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * String argument that ends with the given suffix.\n+     * <code>String</code> argument that ends with the given suffix.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * String argument that starts with the given prefix.\n+     * <code>String</code> argument that starts with the given prefix.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n      * Allows creating custom argument matchers.\n      * <p>\n      * In rare cases when the parameter is a primitive then you <b>*must*</b> use relevant intThat(), floatThat(), etc. method.\n-     * This way you will avoid NullPointerException during autounboxing  \n+     * This way you will avoid <code>NullPointerException</code> during auto-unboxing.\n      * <p>\n      * See examples in javadoc for {@link ArgumentMatcher} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Character</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Boolean</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Byte</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Short</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Integer</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Long</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Float</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n     }\n     \n     /**\n-     * Allows creating custom argument matchers.\n+     * Allows creating custom <code>Double</code> argument matchers.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#6\">6. Verification in order </a><br/> \n  *      <a href=\"#7\">7. Making sure interaction(s) never happened on mock </a><br/> \n  *      <a href=\"#8\">8. Finding redundant invocations </a><br/> \n- *      <a href=\"#9\">9. Shorthand for mocks creation - &#064;Mock annotation </a><br/> \n+ *      <a href=\"#9\">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation </a><br/>\n  *      <a href=\"#10\">10. Stubbing consecutive calls (iterator-style stubbing) </a><br/> \n  *      <a href=\"#11\">11. Stubbing with callbacks </a><br/>\n- *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids </a><br/>\n+ *      <a href=\"#12\">12. <code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doReturn()</code> family of methods mostly for stubbing voids </a><br/>\n  *      <a href=\"#13\">13. Spying on real objects </a><br/>\n  *      <a href=\"#14\">14. Changing default return values of unstubbed invocations (Since 1.7) </a><br/>\n  *      <a href=\"#15\">15. Capturing arguments for further assertions (Since 1.8.0) </a><br/>\n  *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n- *      <a href=\"#21\">21. New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </a><br/>\n+ *      <a href=\"#21\">21. New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </a><br/>\n  *      <a href=\"#22\">22. (New) Verification with timeout (Since 1.8.5) </a><br/>\n- *      <a href=\"#23\">23. (**New**) Automatic instantiation of &#064;Spies, &#064;InjectMocks and constructor injection goodness (Since 1.9)</a><br/>\n+ *      <a href=\"#23\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9)</a><br/>\n  *      <a href=\"#24\">24. (**New**) One-liner stubs (Since 1.9)</a><br/>\n  *      <a href=\"#25\">25. (**New**) Verification ignoring stubs (Since 1.9)</a><br/>\n  * </b>\n  * \n  * <p>\n  * Following examples mock a List, because everyone knows its interface (methods\n- * like add(), get(), clear() will be used). <br>\n+ * like <code>add()</code>, <code>get()</code>, <code>clear()</code> will be used). <br>\n  * You probably wouldn't mock List class 'in real'.\n  * \n  * <h3 id=\"1\">1. Let's verify some behaviour!</h3>\n  * \n  * <h3 id=\"3\">3. Argument matchers</h3>\n  * \n- * Mockito verifies argument values in natural java style: by using an equals() method.\n+ * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.\n  * Sometimes, when extra flexibility is required then you might use argument matchers:  \n  * \n  * <pre>\n  * For information solely on <b>custom argument matchers</b> check out javadoc for {@link ArgumentMatcher} class.\n  * <p>\n  * Be reasonable with using complicated argument matching.\n- * The natural matching style using equals() with occasional anyX() matchers tend to give clean & simple tests.\n- * Sometimes it's just better to refactor the code to allow equals() matching or even implement equals() method to help out with testing.\n+ * The natural matching style using <code>equals()</code> with occasional <code>anyX()</code> matchers tend to give clean & simple tests.\n+ * Sometimes it's just better to refactor the code to allow <code>equals()</code> matching or even implement <code>equals()</code> method to help out with testing.\n  * <p>\n  * Also, read <a href=\"#15\">section 15</a> or javadoc for {@link ArgumentCaptor} class.\n  * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.  \n  * </pre>\n  * \n  * <p>\n- * Matcher methods like anyObject(), eq() <b>do not</b> return matchers.\n+ * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n  * Internally, they record a matcher on a stack and return a dummy value (usually null).\n  * This implementation is due static type safety imposed by java compiler.\n- * The consequence is that you cannot use anyObject(), eq() methods outside of verified/stubbed method.\n+ * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n  * \n  * <h3 id=\"4\">4. Verifying exact number of invocations / at least x / never</h3>\n  * \n  * Read more about doThrow|doAnswer family of methods in paragraph 12.\n  * <p>\n  * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n- * Currently stubVoid() is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n+ * Currently <code>stubVoid()</code> is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n  * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods. \n  * \n  * <h3 id=\"6\">6. Verification in order</h3>\n  * </pre>\n  * \n  * A word of <b>warning</b>: \n- * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \n- * verifyNoMoreInteractions() is not recommended to use in every test method. \n- * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n+ * Some users who did a lot of classic, expect-run-verify mocking tend to use <code>verifyNoMoreInteractions()</code> very often, even in every test method.\n+ * <code>verifyNoMoreInteractions()</code> is not recommended to use in every test method.\n+ * <code>verifyNoMoreInteractions()</code> is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n  * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n  * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n  * \n  * communicates the intent well.\n  * <p>\n  * \n- * <h3 id=\"9\">9. Shorthand for mocks creation - &#064;Mock annotation</h3>\n+ * <h3 id=\"9\">9. Shorthand for mocks creation - <code>&#064;Mock</code> annotation</h3>\n  * \n  * <ul>\n  * <li>Minimizes repetitive mock creation code.</li>\n  * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n  * Yet another controversial feature which was not included in Mockito\n- * originally. We recommend using simple stubbing with thenReturn() or\n- * thenThrow() only. Those two should be <b>just enough</b> to test/test-drive\n+ * originally. We recommend using simple stubbing with <code>thenReturn()</code> or\n+ * <code>thenThrow()</code> only. Those two should be <b>just enough</b> to test/test-drive\n  * any clean & simple code.\n  * \n  * <pre>\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </pre>\n  * \n- * <h3 id=\"12\"> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>\n+ * <h3 id=\"12\"> 12. <code>doThrow()</code>|<code>doAnswer()</code>|<code>doNothing()</code>|<code>doReturn()</code> family of methods for stubbing voids (mostly)</h3>\n  * \n  * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n  * <p>\n  * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids. \n- * The main reason is improved readability and consistency with the family of doAnswer() methods.\n- * <p>\n- * Use doThrow() when you want to stub a void method with an exception:\n+ * The main reason is improved readability and consistency with the family of <code>doAnswer()</code> methods.\n+ * <p>\n+ * Use <code>doThrow()</code> when you want to stub a void method with an exception:\n  * <pre>\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  * </pre>\n  * \n  * <h4>Important gotcha on spying real objects!</h4>\n- * \n- * 1. Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n- * Therefore when using spies please consider doReturn|Answer|Throw() family of methods for stubbing. Example:\n- * \n+ * <ol>\n+ * <li>Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n+ * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of methods for stubbing. Example:\n+ *\n  * <pre>\n  *   List list = new LinkedList();\n  *   List spy = spy(list);\n- *   \n+ *\n  *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n  *   when(spy.get(0)).thenReturn(\"foo\");\n- *   \n+ *\n  *   //You have to use doReturn() for stubbing\n  *   doReturn(\"foo\").when(spy).get(0);\n  * </pre>\n- *\n- * 2. Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.\n+ * </li>\n+ *\n+ * <li>Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.\n  * So if you keep the real instance and interact with it, don't expect the spied to be aware of those interaction\n  * and their effect on real instance state.\n  * The corollary is that when an <b>*unstubbed*</b> method is called <b>*on the spy*</b> but <b>*not on the real instance*</b>,\n  * you won't see any effects on the real instance.\n- *\n- * 3. Watch out for final methods.\n+ * </li>\n+ *\n+ * <li>Watch out for final methods.\n  * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n  * Also you won't be able to verify those method as well.\n- * \n+ * </li>\n+ * </ol>\n+ *\n  * <h3 id=\"14\">14. Changing default return values of unstubbed invocations (Since 1.7) </h3>\n  * \n  * You can create a mock with specified strategy for its return values.\n  * \n  * <h3 id=\"15\">15. Capturing arguments for further assertions (Since 1.8.0) </h3>\n  * \n- * Mockito verifies argument values in natural java style: by using an equals() method.\n+ * Mockito verifies argument values in natural java style: by using an <code>equals()</code> method.\n  * This is also the recommended way of matching arguments because it makes tests clean & simple.\n  * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n  * For example:\n  * <pre>\n  *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n- *   verify(mock).doSomething(argument.capture());\n- *   assertEquals(\"John\", argument.getValue().getName());\n+ *   verify(mock).doSomething(argument.c<code>apture()</code>);\n+ *   assertEquals(\"John\", argument.g<code>etValue()</code>.g<code>etName()</code>);\n  * </pre>\n  * \n  * <b>Warning:</b> it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.\n  *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n  *  <a href=\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\">here</a>\n  *  <p>\n- *  <b>Before release 1.8</b> spy() was not producing real partial mocks and it was confusing for some users.\n+ *  <b>Before release 1.8</b> <code>spy()</code> was not producing real partial mocks and it was confusing for some users.\n  *  Read more about spying: <a href=\"#13\">here</a> or in javadoc for {@link Mockito#spy(Object)} method. \n  *  <p>\n  *  <pre>\n  * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n  * <p>\n- * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n- * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n+ * Instead of <code>reset()</code> please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n+ * <b>First potential code smell is <code>reset()</code> in the middle of the test method.</b> This probably means you're testing too much.\n  * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \n  * There are several threads about it on mockito mailing list.\n  * <p>\n- * The only reason we added reset() method is to\n+ * The only reason we added <code>reset()</code> method is to\n  * make it possible to work with container-injected mocks.\n  * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n  * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n  * <p>\n- * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much). \n+ * <b>Don't harm yourself.</b> <code>reset()</code> in the middle of the test method is a code smell (you're probably testing too much).\n  * <pre>\n  *   List mock = mock(List.class);\n  *   when(mock.size()).thenReturn(10);\n  *                 .serializable());\n  * </pre>\n  * \n- * <h3 id=\"21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </h3>\n+ * <h3 id=\"21\">21. (**New**) New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </h3>\n  * <p>\n  * Release 1.8.3 brings new annotations that may be helpful on occasion:\n  * \n  *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n  * </pre>\n  *\n- * <h3 id=\"23\">23. (**New**) Automatic instantiation of &#064;Spies, &#064;InjectMocks and constructor injection goodness (Since 1.9)</h3>\n+ * <h3 id=\"23\">23. (**New**) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9)</h3>\n  * <p>\n  * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields\n  * using <b>constructor</b> injection, <b>setter</b> injection, or <b>field</b> injection.\n  * <h3 id=\"25\">25. Verification ignoring stubs (Since 1.9)</h3>\n  * <p>\n  * Mockito will now allow to ignore stubbing for the sake of verification.\n- * Sometimes useful when coupled with verifyNoMoreInteractions() or verification inOrder().\n+ * Sometimes useful when coupled with <code>verifyNoMoreInteractions()</code> or verification <code>inOrder()</code>.\n  * Helps avoiding redundant verification of stubbed calls - typically we're not interested in verifying stubs.\n  * <p>\n- * <b>Warning</b>, ignoreStubs() might lead to overuse of verifyNoMoreInteractions(ignoreStubs(...));\n- * Bear in mind that Mockito does not recommend bombarding every test with verifyNoMoreInteractions()\n+ * <b>Warning</b>, <code>ignoreStubs()</code> might lead to overuse of verifyNoMoreInteractions(ignoreStubs(...));\n+ * Bear in mind that Mockito does not recommend bombarding every test with <code>verifyNoMoreInteractions()</code>\n  * for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}\n  * <p>Some examples:\n  * <pre>\n     static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     \n     /**\n-     * The default Answer of every mock <b>if</b> the mock was not stubbed. \n+     * The default <code>Answer</code> of every mock <b>if</b> the mock was not stubbed.\n      * Typically it just returns some empty value. \n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations. \n     public static final Answer<Object> RETURNS_DEFAULTS = Answers.RETURNS_DEFAULTS.get();\n     \n     /**\n-     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}.\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n      * This implementation of Answer <b>returns SmartNull instead of null</b>.\n-     * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n-     * <p>\n-     * ReturnsSmartNulls first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n+     * <code>SmartNull</code> gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n+     * <p>\n+     * <code>ReturnsSmartNulls</code> first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n      * then it tries to return SmartNull. If the return type is final then plain null is returned.\n      * <p>\n-     * ReturnsSmartNulls will be probably the default return values strategy in Mockito 2.0\n+     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 2.0.\n      * <p>\n      * Example:\n      * <pre>\n     public static final Answer<Object> RETURNS_SMART_NULLS = Answers.RETURNS_SMART_NULLS.get();\n     \n     /**\n-     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n     public static final Answer<Object> RETURNS_MOCKS = Answers.RETURNS_MOCKS.get();\n \n     /**\n-     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}.\n      * <p>\n      * Example that shows how deep stub works:\n      * <pre>\n     public static final Answer<Object> RETURNS_DEEP_STUBS = Answers.RETURNS_DEEP_STUBS.get();\n \n     /**\n-     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * Optional <code>Answer</code> to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * <p>\n      * Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. \n      * <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.\n      * <p>\n-     * <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}\n+     * <b>If you use <code>&#064;Mock</code> annotation then you've got naming mocks for free!</b> <code>&#064;Mock</code> uses field name as mock name. {@link Mock Read more.}\n      * <p>\n      * \n      * See examples in javadoc for {@link Mockito} class\n      * </pre>\n      * \n      * <h4>Important gotcha on spying real objects!</h4>\n-     *\n-     * 1. Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n-     * Therefore when using spies please consider doReturn|Answer|Throw() family of methods for stubbing. Example:\n+     * <ol>\n+     * <li>Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.\n+     * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of methods for stubbing. Example:\n      *\n      * <pre>\n      *   List list = new LinkedList();\n      *   //You have to use doReturn() for stubbing\n      *   doReturn(\"foo\").when(spy).get(0);\n      * </pre>\n-     *\n-     * 2. Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.\n+     * </li>\n+     *\n+     * <li>Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.\n      * So if you keep the real instance and interact with it, don't expect the spied to be aware of those interaction\n      * and their effect on real instance state.\n      * The corollary is that when an <b>*unstubbed*</b> method is called <b>*on the spy*</b> but <b>*not on the real instance*</b>,\n-     * you won't see any effects on the real instance.\n-     *\n-     * 3. Watch out for final methods.\n+     * you won't see any effects on the real instance.</li>\n+     *\n+     * <li>Watch out for final methods.\n      * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n      * Also you won't be able to verify those method as well.\n+     * </li>\n+     * </ol>\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * the same arguments many times.\n      * <p>\n      * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.\n-     * Let's say you've stubbed foo.bar(). \n-     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).\n-     * If your code doesn't care what get(0) returns then it should not be stubbed. \n+     * Let's say you've stubbed <code>foo.bar()</code>.\n+     * If your code cares what <code>foo.bar()</code> returns then something else breaks(often before even <code>verify()</code> gets executed).\n+     * If your code doesn't care what <code>get(0)</code> returns then it should not be stubbed.\n      * Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\n      * \n      * <p>\n     }\n \n     /**\n-     * Verifies certain behavior <b>happened once</b> \n+     * Verifies certain behavior <b>happened once</b>.\n      * <p>\n      * Alias to <code>verify(mock, times(1))</code> E.g:\n      * <pre>\n      *   verify(mock, times(1)).someMethod(\"some arg\");\n      * </pre>\n      * <p>\n-     * Arguments passed are compared using equals() method.\n+     * Arguments passed are compared using <code>equals()</code> method.\n      * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.\n      * <p>\n      * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.\n-     * Let's say you've stubbed foo.bar(). \n-     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).\n-     * If your code doesn't care what get(0) returns then it should not be stubbed. \n+     * Let's say you've stubbed <code>foo.bar()</code>.\n+     * If your code cares what <code>foo.bar()</code> returns then something else breaks(often before even <code>verify()</code> gets executed).\n+     * If your code doesn't care what <code>get(0)</code> returns then it should not be stubbed.\n      * Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\n      * \n      * <p>\n      *\n      * <b>times(1) is the default</b> and can be omitted\n      * <p>\n-     * Arguments passed are compared using equals() method.\n+     * Arguments passed are compared using <code>equals()</code> method.\n      * Read about {@link ArgumentCaptor} or {@link ArgumentMatcher} to find out other ways of matching / asserting arguments passed.\n      * <p>\n      *\n      * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n      * Normally, you don't need to reset your mocks, just create new mocks for each test method.\n      * <p>\n-     * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n-     * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n+     * Instead of <code>#reset()</code> please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n+     * <b>First potential code smell is <code>reset()</code> in the middle of the test method.</b> This probably means you're testing too much.\n      * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\".\n      * There are several threads about it on mockito mailing list.\n      * <p>\n-     * The only reason we added reset() method is to\n+     * The only reason we added <code>reset()</code> method is to\n      * make it possible to work with container-injected mocks.\n      * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n      * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n      * <p>\n-     * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much).\n+     * <b>Don't harm yourself.</b> <code>reset()</code> in the middle of the test method is a code smell (you're probably testing too much).\n      * <pre>\n      *   List mock = mock(List.class);\n      *   when(mock.size()).thenReturn(10);\n      * Stubbed invocations (if called) are also treated as interactions.\n      * <p>\n      * A word of <b>warning</b>: \n-     * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \n-     * verifyNoMoreInteractions() is not recommended to use in every test method. \n-     * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n+     * Some users who did a lot of classic, expect-run-verify mocking tend to use <code>verifyNoMoreInteractions()</code> very often, even in every test method.\n+     * <code>verifyNoMoreInteractions()</code> is not recommended to use in every test method.\n+     * <code>verifyNoMoreInteractions()</code> is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n      * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n      * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n      * <p>\n      * This method will also detect unverified invocations that occurred before the test method,\n-     * for example: in setUp(), &#064;Before method or in constructor.\n+     * for example: in <code>setUp()</code>, <code>&#064;Before</code> method or in constructor.\n      * Consider writing nice code that makes interactions only in test methods.\n      * \n      * <p>\n      *   verifyZeroInteractions(mockOne, mockTwo);\n      * </pre>\n      * This method will also detect invocations \n-     * that occurred before the test method, for example: in setUp(), &#064;Before method or in constructor.\n+     * that occurred before the test method, for example: in <code>setUp()</code>, <code>&#064;Before</code> method or in constructor.\n      * Consider writing nice code that makes interactions only in test methods.  \n      * <p>\n      * See also {@link Mockito#never()} - it is more explicit and communicates the intent well.\n      * \n      * doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods. \n      * <p>\n-     * Originally, stubVoid() was used for stubbing void methods with exceptions. E.g:\n+     * Originally, <code>stubVoid()</code> was used for stubbing void methods with exceptions. E.g:\n      * \n      * <pre>\n      * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n     }\n     \n     /**\n-     * Use doThrow() when you want to stub the void method with an exception.\n+     * Use <code>doThrow()</code> when you want to stub the void method with an exception.\n      * <p>\n      * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n      * <p>\n     }\n \n     /**\n-     * Use doThrow() when you want to stub the void method to throw exception of specified class.\n+     * Use <code>doThrow()</code> when you want to stub the void method to throw exception of specified class.\n      * <p>\n      * A new exception instance will be created for each method invocation.\n      * <p>\n \n \n     /**\n-     * Use doCallRealMethod() when you want to call the real implementation of a method.\n+     * Use <code>doCallRealMethod()</code> when you want to call the real implementation of a method.\n      * <p>\n      * As usual you are going to read <b>the partial mock warning</b>:\n      * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n     }\n     \n     /**\n-     * Use doAnswer() when you want to stub a void method with generic {@link Answer}.\n+     * Use <code>doAnswer()</code> when you want to stub a void method with generic {@link Answer}.\n      * <p>\n      * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n      * <p>\n     }  \n     \n     /**\n-     * Use doNothing() for setting void methods to do nothing. <b>Beware that void methods on mocks do nothing by default!</b> \n+     * Use <code>doNothing()</code> for setting void methods to do nothing. <b>Beware that void methods on mocks do nothing by default!</b>\n      * However, there are rare situations when doNothing() comes handy:  \n      * <p>\n-     * 1. Stubbing consecutive calls on a void method:\n+     * <ol>\n+     * <li>Stubbing consecutive calls on a void method:\n      * <pre>\n      *   doNothing().\n      *   doThrow(new RuntimeException())\n      *   .when(mock).someVoidMethod();\n-     *   \n+     *\n      *   //does nothing the first time:\n      *   mock.someVoidMethod();\n-     *   \n+     *\n      *   //throws RuntimeException the next time:\n      *   mock.someVoidMethod();\n      * </pre>\n-     * \n-     * 2. When you spy real objects and you want the void method to do nothing:\n+     * </li>\n+     * <li>When you spy real objects and you want the void method to do nothing:\n      * <pre>\n      *   List list = new LinkedList();\n      *   List spy = spy(list);\n-     *   \n+     *\n      *   //let's make clear() do nothing\n      *   doNothing().when(spy).clear();\n-     *   \n+     *\n      *   spy.add(\"one\");\n-     *   \n+     *\n      *   //clear() does nothing, so the list still contains \"one\"\n      *   spy.clear();\n      * </pre>\n-     * <p>\n-     * See examples in javadoc for {@link Mockito} class\n-     *   \n+     * </li>\n+     * </ol>\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     *\n      * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doNothing() {\n     }    \n     \n     /**\n-     * Use doReturn() in those rare occasions when you cannot use {@link Mockito#when(Object)}.\n+     * Use <code>doReturn()</code> in those rare occasions when you cannot use {@link Mockito#when(Object)}.\n      * <p>\n      * <b>Beware that {@link Mockito#when(Object)} is always recommended for stubbing because it is argument type-safe \n      * and more readable</b> (especially when stubbing consecutive calls). \n      * <p>\n      * Here are those rare occasions when doReturn() comes handy:\n      * <p>\n-     * \n-     * 1. When spying real objects and calling real methods on a spy brings side effects  \n-     * \n+     *\n+     * <ol>\n+     * <li>When spying real objects and calling real methods on a spy brings side effects\n+     *\n      * <pre>\n      *   List list = new LinkedList();\n      *   List spy = spy(list);\n-     *   \n+     *\n      *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n      *   when(spy.get(0)).thenReturn(\"foo\");\n-     *   \n+     *\n      *   //You have to use doReturn() for stubbing:\n      *   doReturn(\"foo\").when(spy).get(0);\n      * </pre>\n-     * \n-     * 2. Overriding a previous exception-stubbing:\n-     * \n+     * </li>\n+     *\n+     * <li>Overriding a previous exception-stubbing:\n      * <pre>\n      *   when(mock.foo()).thenThrow(new RuntimeException());\n-     *   \n-     *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown. \n+     *\n+     *   //Impossible: the exception-stubbed foo() method is called so RuntimeException is thrown.\n      *   when(mock.foo()).thenReturn(\"bar\");\n-     *   \n+     *\n      *   //You have to use doReturn() for stubbing:\n      *   doReturn(\"bar\").when(mock).foo();\n      * </pre>\n-     * \n-     * Above scenarios shows a tradeoff of Mockito's ellegant syntax. Note that the scenarios are very rare, though. \n+     * </li>\n+     * </ol>\n+     *\n+     * Above scenarios shows a tradeoff of Mockito's elegant syntax. Note that the scenarios are very rare, though.\n      * Spying should be sporadic and overriding exception-stubbing is very rare. Not to mention that in general\n      * overridding stubbing is a potential code smell that points out too much stubbing.\n      * <p>\n     }\n  \n     /**\n-     * Creates InOrder object that allows verifying mocks in order.\n+     * Creates {@link org.mockito.InOrder} object that allows verifying mocks in order.\n      * \n      * <pre>\n      *   InOrder inOrder = inOrder(firstMock, secondMock);\n      * <p>\n      * Also, you can create InOrder object passing only mocks that are relevant for in-order verification.\n      * <p>\n-     * InOrder verification is 'greedy'. You will hardly every notice it but \n+     * <code>InOrder</code> verification is 'greedy'. You will hardly every notice it but\n      * if you want to find out more search for 'greedy' on the Mockito \n      * <a href=\"http://code.google.com/p/mockito/w/list\">wiki pages</a>.  \n      * <p>\n \n     /**\n      * Ignores stubbed methods of given mocks for the sake of verification.\n-     * Sometimes useful when coupled with verifyNoMoreInteractions() or verification inOrder().\n+     * Sometimes useful when coupled with <code>verifyNoMoreInteractions()</code> or verification <code>inOrder()</code>.\n      * Helps avoiding redundant verification of stubbed calls - typically we're not interested in verifying stubs.\n      * <p>\n-     * <b>Warning</b>, ignoreStubs() might lead to overuse of verifyNoMoreInteractions(ignoreStubs(...));\n-     * Bear in mind that Mockito does not recommend bombarding every test with verifyNoMoreInteractions()\n+     * <b>Warning</b>, <code>ignoreStubs()</code> might lead to overuse of <code>verifyNoMoreInteractions(ignoreStubs(...));</code>\n+     * Bear in mind that Mockito does not recommend bombarding every test with <code>verifyNoMoreInteractions()</code>\n      * for the reasons outlined in javadoc for {@link Mockito#verifyNoMoreInteractions(Object...)}\n-     * Other words: all <b>*stubbed*</b> methods of given mocks are marked <b>*verfied*</b> so that they don't get in a way during verifyNoMoreInteractions().\n+     * Other words: all <b>*stubbed*</b> methods of given mocks are marked <b>*verified*</b> so that they don't get in a way during verifyNoMoreInteractions().\n      * <p>\n      * This method <b>changes the input mocks</b>! This method returns input mocks just for convenience.\n      * <p>\n     }\n     \n     /**\n-     * Alias to times(0), see {@link Mockito#times(int)}\n+     * Alias to <code>times(0)</code>, see {@link Mockito#times(int)}\n      * <p>\n      * Verifies that interaction did not happen. E.g:\n      * <pre>\n      * <pre>\n      *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\n      * </pre>\n-     * Alias to atLeast(1)\n+     * Alias to <code>atLeast(1)</code>.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      * \n      * \n      * See examples in javadoc for {@link Mockito} class\n      * \n-     * @param millis - time span in millis\n+     * @param millis - time span in millisecond\n      * \n      * @return verification mode\n      */\n      * <p>\n      * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a> \n      * <p>\n-     * validateMockitoUsage() <b>explicitly validates</b> the framework state to detect invalid use of Mockito.\n+     * <code>validateMockitoUsage()</code> <b>explicitly validates</b> the framework state to detect invalid use of Mockito.\n      * However, this feature is optional <b>because Mockito validates the usage all the time...</b> but there is a gotcha so read on.\n      * <p>\n      * Examples of incorrect use:\n      * Hence you can click and find the place where Mockito was misused.\n      * <p>\n      * Sometimes though, you might want to validate the framework usage explicitly. \n-     * For example, one of the users wanted to put validateMockitoUsage() in his &#064;After method\n+     * For example, one of the users wanted to put <code>validateMockitoUsage()</code> in his <code>&#064;After</code> method\n      * so that he knows immediately when he misused Mockito. \n      * Without it, he would have known about it not sooner than <b>next time</b> he used the framework.\n-     * One more benefit of having validateMockitoUsage() in &#064;After is that jUnit runner will always fail in the test method with defect\n+     * One more benefit of having <code>validateMockitoUsage()</code> in <code>&#064;After</code> is that jUnit runner will always fail in the test method with defect\n      * whereas ordinary 'next-time' validation might fail the <b>next</b> test method. \n      * But even though JUnit might report next test as red, don't worry about it \n      * and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.   \n      * <p>\n      * <b>Built-in runner: {@link MockitoJUnitRunner}</b> does validateMockitoUsage() after each test method.\n      * <p>\n-     * Bear in mind that <b>usually you don't have to validateMockitoUsage()</b> \n+     * Bear in mind that <b>usually you don't have to <code>validateMockitoUsage()</code></b>\n      * and framework validation triggered on next-time basis should be just enough,\n      * mainly because of enhanced exception message with clickable location of defect.\n      * However, I would recommend validateMockitoUsage() if you already have sufficient test infrastructure\n-     * (like your own runner or base class for all tests) because adding a special action to &#064;After has zero cost.\n+     * (like your own runner or base class for all tests) because adding a special action to <code>&#064;After</code> has zero cost.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      */\n         return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n     }\n \n-    /*\n+    /**\n      * Helps debugging failing tests. Experimental - use at your own risk. We're not sure if this method will stay in public api.\n      */\n     @Deprecated", "timestamp": 1322050170, "metainfo": ""}