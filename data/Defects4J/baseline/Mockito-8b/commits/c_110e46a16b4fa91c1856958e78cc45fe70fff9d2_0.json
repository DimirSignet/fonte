{"sha": "110e46a16b4fa91c1856958e78cc45fe70fff9d2", "log": "more and more refactorings  --HG-- rename : src/org/mockito/internal/InvocationMatcherFactory.java => src/org/mockito/internal/MatchersBinder.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40158", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     \n     public static <T> T mock(Class<T> classToMock) {\n         MockFactory<T> proxyFactory = new MockFactory<T>();\n-        MockControl<T> mockControl = new MockControl<T>(mockitoState);\n+        MockControl<T> mockControl = new MockControl<T>(mockitoState, new MatchersBinder());\n         return proxyFactory.createMock(classToMock, new ObjectMethodsFilter<MockControl>(\n                 classToMock, mockControl));\n     }\n     \n     public static <T> VoidMethodExpectation<T> stubVoid(T mock) {\n         MockControl<T> control = MockUtil.getControl(mock);\n-        //TODO add test\n         mockitoState.stubbingStarted();\n         return control;\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/MatchersBinder.java\n+package org.mockito.internal;\n+\n+import java.util.*;\n+\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.internal.matchers.*;\n+\n+public class MatchersBinder {\n+\n+    public InvocationMatcher bindMatchers(Invocation invocation) throws InvalidUseOfMatchersException {\n+        List<IArgumentMatcher> lastMatchers = LastArguments.instance().pullMatchers();\n+        validateMatchers(invocation, lastMatchers);\n+\n+        List<IArgumentMatcher> processedMatchers = createEqualsMatchers(invocation, lastMatchers);\n+        \n+        InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, processedMatchers);\n+        return invocationWithMatchers;\n+    }\n+\n+    private void validateMatchers(Invocation invocation, List<IArgumentMatcher> matchers) throws InvalidUseOfMatchersException {\n+        if (matchers != null) {\n+            if (matchers.size() != invocation.getArguments().length) {\n+                throw new InvalidUseOfMatchersException(\n+                        + invocation.getArguments().length\n+                        + \" matchers expected, \" + matchers.size()\n+                        + \" recorded.\");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * if user passed bare arguments then create EqualsMatcher for every argument\n+     */\n+    private List<IArgumentMatcher> createEqualsMatchers(Invocation invocation,\n+            List<IArgumentMatcher> matchers) {\n+        if (matchers != null) {\n+            return matchers;\n+        }\n+        List<IArgumentMatcher> result = new ArrayList<IArgumentMatcher>();\n+        for (Object argument : invocation.getArguments()) {\n+            result.add(new Equals(argument));\n+        }\n+        return result;\n+    }\n+}\n--- a/src/org/mockito/internal/MockControl.java\n+++ b/src/org/mockito/internal/MockControl.java\n \n     private final MockitoBehavior<T> behavior = new MockitoBehavior<T>();\n     private final Stubber stubber;\n-    private final InvocationMatcherFactory invocationMatcherFactory;\n+    private final MatchersBinder matchersBinder;\n     private final MockitoState mockitoState;\n     \n-    public MockControl(MockitoState mockitoState) {\n+    public MockControl(MockitoState mockitoState, MatchersBinder matchersBinder) {\n         this.mockitoState = mockitoState;\n-        invocationMatcherFactory = new InvocationMatcherFactory(mockitoState);\n+        this.matchersBinder = matchersBinder;\n         stubber = new Stubber(mockitoState);\n     }\n \n     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n         if (stubber.hasThrowableForVoidMethod()) {\n-            InvocationMatcher invocationMatcher = invocationMatcherFactory.create(proxy, method, args);\n+            Invocation invocation = new Invocation(proxy, method, args, mockitoState.nextSequenceNumber());\n+            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n             stubber.addVoidMethodForThrowable(invocationMatcher);\n             return null;\n         }\n         VerifyingMode verifyingMode = mockitoState.pullVerifyingMode();\n         mockitoState.validateState();\n         \n-        InvocationMatcher invocationWithMatchers = invocationMatcherFactory.create(proxy, method, args);\n+        Invocation invocation = new Invocation(proxy, method, args, mockitoState.nextSequenceNumber());\n+        InvocationMatcher invocationWithMatchers = matchersBinder.bindMatchers(invocation);\n         \n         if (verifyingMode != null) {\n             behavior.verify(invocationWithMatchers, verifyingMode);\n--- a/test/org/mockito/RequiresValidState.java\n+++ b/test/org/mockito/RequiresValidState.java\n     public void requiresValidState() {\n         Mockito.mockitoState.validateState();\n     }\n-}\n+}\n--- a/test/org/mockito/internal/MockControlTest.java\n+++ b/test/org/mockito/internal/MockControlTest.java\n \n import static org.junit.Assert.*;\n \n-import org.junit.*;\n-import org.mockito.*;\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n-import org.mockito.internal.matchers.Equals;\n \n @SuppressWarnings(\"unchecked\")\n public class MockControlTest extends RequiresValidState {\n     \n     @Test\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n-        LastArguments.instance().reportMatcher(new Equals(\"test\"));\n-        \n         MockitoStateImpl state = new MockitoStateImpl();\n         state.verifyingStarted(VerifyingMode.atLeastOnce());\n-        MockControl control = new MockControl(state);\n+        MockControl control = new MockControl(state, new ExceptionThrowingBinder());\n         \n-        //TODO fix this test make it stub invocation factory with thrown exception\n-\n         try {\n             control.invoke(null, String.class.getDeclaredMethod(\"toString\"), new Object[]{});\n             fail();\n         \n         assertNull(state.pullVerifyingMode());\n     }\n+    \n+    private class ExceptionThrowingBinder extends MatchersBinder {\n+        @Override\n+        public InvocationMatcher bindMatchers(Invocation invocation)\n+                throws InvalidUseOfMatchersException {\n+            throw new InvalidUseOfMatchersException(\"\");\n+        }\n+    }\n }", "timestamp": 1197331062, "metainfo": ""}