{"sha": "b0eb765f143cac4af2a59bf465770ed35730cd35", "log": "MockFactory now passes super smart ClassLoader (thank you jmockers) to the cglib generator.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40718", "commit": "\n--- a/src/org/mockito/internal/creation/MockFactory.java\n+++ b/src/org/mockito/internal/creation/MockFactory.java\n \n         //This is required to make (cglib + eclipse plugins testing) happy\n         //See issue #11\n-        //TODO allow other classloaders here\n-        enhancer.setClassLoader(MockFactory.class.getClassLoader());\n+        enhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(toMock));\n         \n         return enhancer;\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/SearchingClassLoader.java\n+package org.mockito.internal.creation;\n+\n+import static java.lang.Thread.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Thanks to jMock guys for this cool ClassLoader. \n+ */\n+public class SearchingClassLoader extends ClassLoader {\n+    private final ClassLoader nextToSearch;\n+    \n+    public SearchingClassLoader(ClassLoader parent, ClassLoader nextToSearch) {\n+        super(parent);\n+        this.nextToSearch = nextToSearch;\n+    }\n+    \n+    public static ClassLoader combineLoadersOf(Class<?>... classes) {\n+        return combineLoadersOf(classes[0], classes);\n+    }\n+    \n+    private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\n+        List<ClassLoader> loaders = new ArrayList<ClassLoader>();\n+        \n+        addIfNewElement(loaders, first.getClassLoader());\n+        for (Class<?> c : others) {\n+            addIfNewElement(loaders, c.getClassLoader());\n+        }\n+        \n+        // To support Eclipse Plug-in tests.\n+        // In an Eclipse plug-in, jMock itself will not be on the system class loader\n+        // but in the class loader of the plug-in.\n+        //\n+        // Note: I've been unable to reproduce the error in jMock's test suite.\n+        addIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\n+        \n+        // To support the Maven Surefire plugin.\n+        // Note: I've been unable to reproduce the error in jMock's test suite.\n+        addIfNewElement(loaders, currentThread().getContextClassLoader());\n+        \n+        addIfNewElement(loaders, ClassLoader.getSystemClassLoader());\n+        \n+        return combine(loaders);\n+    }\n+    \n+    private static ClassLoader combine(List<ClassLoader> parentLoaders) {\n+        ClassLoader loader = parentLoaders.get(parentLoaders.size()-1);\n+        \n+        for (int i = parentLoaders.size()-2; i >= 0; i--) {\n+            loader = new SearchingClassLoader(parentLoaders.get(i), loader);\n+        }\n+        \n+        return loader;\n+    }\n+    \n+    private static void addIfNewElement(List<ClassLoader> loaders, ClassLoader c) {\n+        if (c != null && !loaders.contains(c)) {\n+            loaders.add(c);\n+        }\n+    }\n+    \n+    @Override\n+    protected Class<?> findClass(String name) throws ClassNotFoundException {\n+        if (nextToSearch != null) {\n+            return nextToSearch.loadClass(name);\n+        } else {\n+            return super.findClass(name); // will throw ClassNotFoundException\n+        }\n+    }\n+}", "timestamp": 1217020192, "metainfo": ""}