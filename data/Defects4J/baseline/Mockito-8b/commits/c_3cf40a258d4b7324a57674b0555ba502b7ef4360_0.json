{"sha": "3cf40a258d4b7324a57674b0555ba502b7ef4360", "log": "Removed diamond operator for source 1.5", "commit": "\n--- a/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n         }\n         \n         public ArrayList<T> subList(int fromIndex, int toIndex) {\n-            return new ArrayList<>();\n+            return new ArrayList<T>();\n         }\n     }\n     \n         }\n         \n         public Collection<T> subList(int fromIndex, int toIndex) {\n-            return new ArrayList<>();\n+            return new ArrayList<T>();\n         }\n     }\n \t\n     \n     @Test\n     public void instance_of_different_class_can_be_called() {\n-        List<String> mock = mock(List.class, delegatesTo(new FakeList<>()));\n+        List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));\n         \n         mock.set(1, \"1\");\n         assertThat(mock.get(1).equals(\"1\"));\n     \n     @Test\n     public void method_with_subtype_return_can_be_called() {\n-        List<String> mock = mock(List.class, delegatesTo(new FakeList<>()));\n+        List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));\n         \n         List<String> subList = mock.subList(0, 0);\n         assertThat(subList.isEmpty());\n     \n     @Test\n     public void calling_missing_method_should_throw_exception() {\n-        List<String> mock = mock(List.class, delegatesTo(new FakeList<>()));\n+        List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));\n         \n         try {\n             mock.isEmpty();\n     \n     @Test\n     public void calling_method_with_wrong_primitive_return_should_throw_exception() {\n-        List<String> mock = mock(List.class, delegatesTo(new FakeListWithWrongMethods<>()));\n+        List<String> mock = mock(List.class, delegatesTo(new FakeListWithWrongMethods<String>()));\n         \n         try {\n             mock.size();\n     \n     @Test\n     public void calling_method_with_wrong_reference_return_should_throw_exception() {\n-        List<String> mock = mock(List.class, delegatesTo(new FakeListWithWrongMethods<>()));\n+        List<String> mock = mock(List.class, delegatesTo(new FakeListWithWrongMethods<String>()));\n         \n         try {\n             mock.subList(0, 0);", "timestamp": 1416072731, "metainfo": ""}