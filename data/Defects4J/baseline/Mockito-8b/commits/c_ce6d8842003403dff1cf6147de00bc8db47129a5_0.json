{"sha": "ce6d8842003403dff1cf6147de00bc8db47129a5", "log": "tiny comments  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401457", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n                 ret = mockSettings.getDefaultAnswer().answer(invocation);\n             } catch (Throwable t) {\n                 //TODO: this needs to be a different filter. \n+//                new ConditionalStackTraceFilter().filter(t);\n                 //The one detects first stack trace element that is mockito internal\n                 //detects last stack trace element that is mockito internal\n                 //removes both of them and all inside\n                 \n-                new ConditionalStackTraceFilter().filter(t);\n                 throw t;\n             }\n             //redo setting invocation for potential stubbing in case of partial mocks / spies.\n--- a/test/org/mockitousage/spies/PartialMockingWithSpiesTest.java\n+++ b/test/org/mockitousage/spies/PartialMockingWithSpiesTest.java\n     }\n     \n //    @Test\n+//    TODO: see the TODO comment in MockHandler about extra stack trace filter\n     public void shouldStackTraceGetFilteredOnUserExceptions() {\n+        spy.getNameButDelegateToMethodThatThrows();\n         try {\n             // when\n             spy.getNameButDelegateToMethodThatThrows();\n             fail();\n         } catch (Throwable t) {\n+            // then\n             assertThat(t, ExtraMatchers.hasMethodsInStackTrace(\n                     \"throwSomeException\",\n                     \"getNameButDelegateToMethodThatThrows\",", "timestamp": 1243374483, "metainfo": ""}