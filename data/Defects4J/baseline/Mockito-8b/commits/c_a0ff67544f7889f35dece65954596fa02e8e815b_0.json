{"sha": "a0ff67544f7889f35dece65954596fa02e8e815b", "log": "Refactorings around Printable - all because there is no more special handling of overloading puzzle  --HG-- rename : src/org/mockito/exceptions/Printable.java => src/org/mockito/exceptions/PrintableInvocation.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40422", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/exceptions/PrintableInvocation.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions;\n+\n+public interface PrintableInvocation {\n+\n+    String toString();\n+\n+    String getArgs();\n+\n+    String getMethodName();\n+}\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         ));\n     }    \n \n-    public void argumentsAreDifferent(Printable wanted, Printable wantedArgs, Printable actualArgs, HasStackTrace actualInvocationStackTrace) {\n+    public void argumentsAreDifferent(PrintableInvocation wanted, PrintableInvocation actual, HasStackTrace actualStackTrace) {\n         WantedDiffersFromActual cause = new WantedDiffersFromActual(join(\n                 \"All actual arguments:\",\n-                actualArgs.toString()\n+                actual.getArgs()\n             ));\n         \n-        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n+        cause.setStackTrace(actualStackTrace.getStackTrace());\n         \n         throw new ArgumentsAreDifferentException(join(\n                 \"Argument(s) are different!\",\n-                \"Method: \" + wanted.toString(),\n+                \"Method: \" + wanted.getMethodName(),\n                 \"All wanted arguments:\",\n-                wantedArgs.toString()\n+                wanted.getArgs()\n             ), cause);\n     }\n     \n-    public void wantedButNotInvoked(Printable wanted) {\n+    public void wantedButNotInvoked(PrintableInvocation wanted) {\n         throw new WantedButNotInvoked(join(\n                     \"Wanted but not invoked:\",\n                     wanted.toString()\n         ));\n     }\n     \n-    public void wantedButNotInvokedInOrder(Printable wanted, Printable previous, HasStackTrace previousStackTrace) {\n+    public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous, HasStackTrace previousStackTrace) {\n         WantedAnywhereAfterFollowingInteraction cause = new WantedAnywhereAfterFollowingInteraction(join(\n                         \"Wanted anywhere AFTER following interaction:\",\n                         previous.toString()));\n         ), cause);\n     }\n \n-    public void tooManyActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n+    public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n         UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n \n         throw new TooManyActualInvocations(join(\n         ), cause);\n     }\n     \n-    public void neverWantedButInvoked(Printable wanted, HasStackTrace firstUndesired) {\n+    public void neverWantedButInvoked(PrintableInvocation wanted, HasStackTrace firstUndesired) {\n         UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n \n         throw new NeverWantedButInvoked(join(\n         ), cause);\n     }    \n     \n-    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n+    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n         UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n \n         throw new VerifcationInOrderFailure(join(\n         return cause;\n     }    \n \n-    public void tooLittleActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualInvocationStackTrace) {\n+    public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {\n         TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualInvocationStackTrace);\n \n         throw new TooLittleActualInvocations(join(\n     }\n \n     \n-    public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualStackTrace) {\n+    public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n         TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n \n         throw new VerifcationInOrderFailure(join(\n         return cause;\n     }\n \n-    public void noMoreInteractionsWanted(Printable undesired, HasStackTrace actualInvocationStackTrace) {\n+    public void noMoreInteractionsWanted(PrintableInvocation undesired, HasStackTrace actualInvocationStackTrace) {\n         UndesiredInvocation cause = new UndesiredInvocation(join(\n                 \"Undesired invocation:\", \n                 undesired.toString()\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n import org.hamcrest.StringDescription;\n-import org.mockito.exceptions.Printable;\n+import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockNamer;\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class Invocation implements Printable {\n+public class Invocation implements PrintableInvocation {\n \n     private static final String TAB = \"    \";\n     private final int sequenceNumber;\n         return toString(argumentsToMatchers());\n     }\n \n-    public String toString(List<Matcher> matchers) {\n+    protected String toString(List<Matcher> matchers) {\n         return qualifiedMethodName() + getArgumentsString(matchers);\n     }\n \n         return getArgs(argumentsToMatchers());\n     }\n \n-    public String getArgs(List<Matcher> matchers) {\n+    protected String getArgs(List<Matcher> matchers) {\n         //TODO some unit testing please\n         if (matchers.isEmpty()) {\n             return TAB + \"<NO ARGUMENTS>\"; \n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n import java.util.List;\n \n import org.hamcrest.Matcher;\n-import org.mockito.exceptions.Printable;\n+import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.matchers.Equals;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvocationMatcher implements Printable {\n+public class InvocationMatcher implements PrintableInvocation {\n \n     private final Invocation invocation;\n     private final List<Matcher> matchers;\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.invocation.InvocationsPrinter;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n public class MissingInvocationVerifier implements Verifier {\n \n     private void reportMissingInvocationError(InvocationMatcher wanted, Invocation similar) {\n         if (similar != null) {\n-            InvocationsPrinter printer = new InvocationsPrinter(wanted, similar);\n-            //TODO smelly\n-            reporter.argumentsAreDifferent(printer.getWanted(), printer.getWantedArgs(), printer.getActualArgs(), similar.getStackTrace());\n+            reporter.argumentsAreDifferent(wanted, similar, similar.getStackTrace());\n         } else {\n             reporter.wantedButNotInvoked(wanted);\n         }\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.Printable;\n+import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n     }\n     \n     class ReporterStub extends Reporter {\n-        private Printable wanted;\n-        private Printable previous;\n+        private PrintableInvocation wanted;\n+        private PrintableInvocation previous;\n         private HasStackTrace previousStackTrace;\n         \n-        @Override public void wantedButNotInvokedInOrder(Printable wanted, Printable previous, HasStackTrace previousStackTrace) {\n+        @Override public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous, HasStackTrace previousStackTrace) {\n             this.wanted = wanted;\n             this.previous = previous;\n             this.previousStackTrace = previousStackTrace;\n         }\n         \n-        @Override public void wantedButNotInvoked(Printable wanted) {\n+        @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n             this.wanted = wanted;\n         }\n     }\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.Printable;\n+import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n         verifier.verify(invocations, wanted, VerificationModeImpl.atLeastOnce());\n         \n         assertNotNull(reporterStub.wanted);\n-        assertNotNull(reporterStub.actualArgs);\n-        assertNotNull(reporterStub.wantedArgs);\n+        assertNotNull(reporterStub.actual);\n         \n         assertSame(actualInvocation.getStackTrace(), reporterStub.actualInvocationStackTrace);\n     }\n     \n     class ReporterStub extends Reporter {\n-        private Object wanted;\n+        private PrintableInvocation wanted;\n+        private PrintableInvocation actual;\n         private HasStackTrace actualInvocationStackTrace;\n-        private Printable wantedArgs;\n-        private Printable actualArgs;\n-        @Override public void wantedButNotInvoked(Printable wanted) {\n+        @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n             this.wanted = wanted;\n         }\n         \n-        @Override public void argumentsAreDifferent(Printable wanted, Printable wantedArgs, Printable actualArgs,\n-                HasStackTrace actualInvocationStackTrace) {\n+        @Override public void argumentsAreDifferent(PrintableInvocation wanted, PrintableInvocation actual, HasStackTrace actualInvocationStackTrace) {\n                     this.wanted = wanted;\n-                    this.wantedArgs = wantedArgs;\n-                    this.actualArgs = actualArgs;\n+                    this.actual = actual;\n                     this.actualInvocationStackTrace = actualInvocationStackTrace;\n         }\n     }\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.Printable;\n+import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n     }\n     \n     class ReporterStub extends Reporter {\n-        private Printable undesired;\n+        private PrintableInvocation undesired;\n         private HasStackTrace actualInvocationStackTrace;\n-        @Override public void noMoreInteractionsWanted(Printable undesired, HasStackTrace actualInvocationStackTrace) {\n+        @Override public void noMoreInteractionsWanted(PrintableInvocation undesired, HasStackTrace actualInvocationStackTrace) {\n             this.undesired = undesired;\n             this.actualInvocationStackTrace = actualInvocationStackTrace;\n         }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.Printable;\n+import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n     class ReporterStub extends Reporter {\n         private int wantedCount;\n         private int actualCount;\n-        private Printable wanted;\n+        private PrintableInvocation wanted;\n         private HasStackTrace stackTrace;\n-        @Override public void tooLittleActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualInvocationStackTrace) {\n+        @Override public void tooLittleActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualInvocationStackTrace) {\n                     this.wantedCount = wantedCount;\n                     this.actualCount = actualCount;\n                     this.wanted = wanted;\n                     this.stackTrace = lastActualInvocationStackTrace;\n         }\n         \n-        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n+        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace firstUndesired) {\n                     this.wantedCount = wantedCount;\n                     this.actualCount = actualCount;\n                     this.wanted = wanted;\n         }\n         \n         @Override\n-        public void neverWantedButInvoked(Printable wanted, HasStackTrace firstUndesired) {\n+        public void neverWantedButInvoked(PrintableInvocation wanted, HasStackTrace firstUndesired) {\n             this.wanted = wanted;\n             this.stackTrace = firstUndesired;\n         }\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.internal.invocation.InvocationMatcherTest;\n import org.mockito.internal.invocation.InvocationTest;\n import org.mockito.internal.invocation.InvocationsFinderTest;\n-import org.mockito.internal.invocation.InvocationsPrinterTest;\n import org.mockito.internal.matchers.EqualsTest;\n import org.mockito.internal.progress.MockingProgressImplTest;\n import org.mockito.internal.progress.VerificationModeImplTest;\n                     InvocationMatcherTest.class,\n                     InvocationsFinderTest.class,\n                     InvocationTest.class,\n-                    InvocationsPrinterTest.class,\n                     MockitoTest.class,\n                     MockUtilTest.class,\n                     ReporterTest.class,", "timestamp": 1204473200, "metainfo": ""}