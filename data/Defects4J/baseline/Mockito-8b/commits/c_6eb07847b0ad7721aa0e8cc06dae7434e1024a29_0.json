{"sha": "6eb07847b0ad7721aa0e8cc06dae7434e1024a29", "log": "refactored default return values stuff. On the way to get rid of some inheritance  --HG-- rename : src/org/mockito/configuration/BaseReturnValues.java => src/org/mockito/configuration/ConfigurationSupport.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40565", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/configuration/ConfigurationSupport.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.configuration;\n+\n+import java.lang.reflect.Modifier;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Helps configuring Mockito\n+ * <p>\n+ * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n+ * You may want to check out the project from svn repository to easily browse Mockito's test code.\n+ */\n+public class ConfigurationSupport {\n+    \n+    /**\n+     * this is what Mockito returns by default for given invocation \n+     * \n+     * @param invocation\n+     * @return default return value\n+     */\n+    public static Object defaultValueFor(InvocationOnMock invocation) {\n+        return MockitoProperties.DEFAULT_RETURN_VALUES.valueFor(invocation);\n+    }\n+\n+    /**\n+     * @param clazz\n+     * @return returns true if Mockito CAN create mocks of the clazz\n+     */\n+    public static boolean isMockable(Class<?> clazz) {\n+        return Modifier.isFinal(clazz.getModifiers());\n+    }\n+}\n--- a/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n import org.junit.Before;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n-import org.mockito.configuration.BaseReturnValues;\n+import org.mockito.configuration.ConfigurationSupport;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n         MockitoConfiguration.instance().resetReturnValues();\n     }\n     \n-    private final class MyDefaultReturnValues extends BaseReturnValues implements ReturnValues {\n-        public Object returnValueFor(InvocationOnMock invocation) {\n+    private final class MyDefaultReturnValues extends ConfigurationSupport implements ReturnValues {\n+        public Object valueFor(InvocationOnMock invocation) {\n             Class<?> returnType = invocation.getMethod().getReturnType();\n-            if (isFinalClass(returnType)) {\n-                return null;\n+            Object defaultReturnValue = defaultValueFor(invocation);\n+            if (defaultReturnValue != null) {\n+                return defaultReturnValue;\n+            } else if (!isMockable(returnType)) { \n+                return Mockito.mock(returnType);\n             } else {\n-                return Mockito.mock(returnType);\n+                return defaultReturnValue;\n             }\n         }\n     }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n import java.util.HashSet;\n import java.util.Set;\n \n-import org.mockito.configuration.BaseReturnValues;\n+import org.mockito.configuration.ConfigurationSupport;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n         return (FakeReturnValues) config.getReturnValues();\n     }\n \n-    private static final class FakeReturnValues extends BaseReturnValues {\n+    private static final class FakeReturnValues extends ConfigurationSupport implements ReturnValues {\n         \n         private Set<Object> mocksReturningFakes = new HashSet<Object>();\n \n-        public Object returnValueFor(InvocationOnMock invocation) {\n+        public Object valueFor(InvocationOnMock invocation) {\n             if (mocksReturningFakes.contains(invocation.getMock())) {\n                 return returnFake(invocation);\n             } else {\n                 return \"\";\n             } else if (returnType == Boolean.TYPE) {\n                 return true;\n-            } else if (isFinalClass(returnType)) {\n-                //cannot mock final class :(\n-                return null;\n-            } else {\n-                return mock(returnType);\n+            } else if (!isMockable(returnType)) {\n+                return mock(returnType);\n+            } else {\n+                return defaultValueFor(invocation);\n             }\n         }\n     }", "timestamp": 1207769541, "metainfo": ""}