{"sha": "79759998d806dcd4506db3cd35ba9ef8df92a97b", "log": "Rename job  --HG-- rename : src/org/mockito/internal/runners/util/ClassProvider.java => src/org/mockito/internal/runners/util/RunnerProvider.java rename : test/org/mockito/internal/runners/util/ClassProviderTest.java => test/org/mockito/internal/runners/util/RunnerProviderTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401393", "commit": "\n--- a/src/org/mockito/internal/runners/RunnerFactory.java\n+++ b/src/org/mockito/internal/runners/RunnerFactory.java\n \n import org.junit.runner.Runner;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.runners.util.ClassProvider;\n+import org.mockito.internal.runners.util.RunnerProvider;\n \n public class RunnerFactory {\n \n-    private final ClassProvider classProvider;\n+    private final RunnerProvider classProvider;\n \n-    RunnerFactory(ClassProvider classProvider) {\n+    RunnerFactory(RunnerProvider classProvider) {\n         this.classProvider = classProvider;\n     }\n \n     public RunnerFactory() {\n-        this(new ClassProvider());\n+        this(new RunnerProvider());\n     }\n \n     public Runner create(Class<?> klass) {\n         try {\n-            if (classProvider.hasJUnit45OrHigher()) {\n+            if (classProvider.isJUnit45OrHigherAvailable()) {\n                 return classProvider.newInstance(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\", klass);\n             } else {\n                 return classProvider.newInstance(\"org.mockito.internal.runners.MockitoJUnit44RunnerImpl\", klass);\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/util/RunnerProvider.java\n+package org.mockito.internal.runners.util;\n+\n+import java.lang.reflect.Constructor;\n+\n+import org.junit.runner.Runner;\n+\n+public class RunnerProvider {\n+\n+    private static boolean hasJUnit45OrHigher; \n+\n+    static {\n+        try {\n+            Class.forName(\"org.junit.runners.BlockJUnit4ClassRunner\");\n+            hasJUnit45OrHigher = true;\n+        } catch (Throwable t) {\n+            hasJUnit45OrHigher = false;\n+        }\n+    }\n+    \n+    public boolean isJUnit45OrHigherAvailable() {\n+        return hasJUnit45OrHigher;\n+    }\n+\n+    public Runner newInstance(String runnerClassName, Class<?> constructorParam) throws Throwable {\n+        Class<?> runnerClass = Class.forName(runnerClassName);\n+        Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n+        return (Runner) constructor.newInstance(constructorParam);   \n+    }\n+}\n--- a/test/org/mockito/internal/runners/RunnerFactoryTest.java\n+++ b/test/org/mockito/internal/runners/RunnerFactoryTest.java\n import org.junit.runner.Runner;\n import org.junit.runners.model.InitializationError;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.runners.util.ClassProvider;\n+import org.mockito.internal.runners.util.RunnerProvider;\n import org.mockitoutil.TestBase;\n \n public class RunnerFactoryTest extends TestBase {\n \n-    static class ClassProviderStub extends ClassProvider {\n+    static class ClassProviderStub extends RunnerProvider {\n         @Override\n-        public boolean hasJUnit45OrHigher() {\n-            return super.hasJUnit45OrHigher();\n+        public boolean isJUnit45OrHigherAvailable() {\n+            return super.isJUnit45OrHigherAvailable();\n         }\n     }\n \n     @Test\n     public void shouldCreateRunnerForJUnit44() {\n         //given\n-        ClassProvider provider = new ClassProvider() {\n-            public boolean hasJUnit45OrHigher() {\n+        RunnerProvider provider = new RunnerProvider() {\n+            public boolean isJUnit45OrHigherAvailable() {\n                 return false;\n             }\n         };\n     @Test\n     public void shouldCreateRunnerForJUnit45() {\n         //given\n-        ClassProvider provider = new ClassProvider() {\n-            public boolean hasJUnit45OrHigher() {\n+        RunnerProvider provider = new RunnerProvider() {\n+            public boolean isJUnit45OrHigherAvailable() {\n                 return true;\n             }\n         };\n     @Test\n     public void shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound() {\n         //given\n-        ClassProvider provider = new ClassProvider() {\n-            public boolean hasJUnit45OrHigher() {\n+        RunnerProvider provider = new RunnerProvider() {\n+            public boolean isJUnit45OrHigherAvailable() {\n                 return false;\n             }\n             public Runner newInstance(String runnerClassName, Class<?> constructorParam) throws Throwable {\n--- /dev/null\n+++ b/test/org/mockito/internal/runners/util/RunnerProviderTest.java\n+package org.mockito.internal.runners.util;\n+\n+import org.junit.Test;\n+import org.junit.runner.Runner;\n+import org.mockitoutil.TestBase;\n+\n+\n+public class RunnerProviderTest extends TestBase {\n+    \n+    @Test\n+    public void shouldKnowAboutJUnit45() throws Exception {\n+        //given\n+        RunnerProvider provider = new RunnerProvider();\n+        //then\n+        assertTrue(provider.isJUnit45OrHigherAvailable());\n+        //I cannot test the opposite condition :(\n+    }\n+    \n+    @Test\n+    public void shouldCreateRunnerInstance() throws Throwable {\n+        //given\n+        RunnerProvider provider = new RunnerProvider();\n+        //when\n+        Runner runner = provider.newInstance(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\", this.getClass());\n+        //then\n+        assertNotNull(runner);\n+    }\n+}", "timestamp": 1241289880, "metainfo": ""}