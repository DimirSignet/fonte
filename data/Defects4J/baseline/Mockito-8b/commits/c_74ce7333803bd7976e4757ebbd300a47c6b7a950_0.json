{"sha": "74ce7333803bd7976e4757ebbd300a47c6b7a950", "log": "MoreEmptyReturnValues now deals with creation of empty arrays  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401165", "commit": "\n--- a/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n  */\n package org.mockito.internal.returnvalues;\n \n+import java.lang.reflect.Array;\n+\n import org.mockito.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * Will be used by default by every Mockito 2.0 mock.\n+ * It's likely this implmentation will be used by default by every Mockito 2.0 mock.\n  * <ul>\n  * <li>\n  *  Returns appropriate primitive for primitive-returning methods\n         } else if (type == Object.class) {\n             return new Object();\n         } else if (type.isArray()) {\n-            //TODO is it possible to dynamically create array?\n-            return null;\n-//            System.out.println(type. getConstructors()[0].getParameterTypes());\n-//            try {\n-//                return type.newInstance();\n-//            } catch (Exception e) {\n-//                throw new RuntimeException(e);\n-//            }\n+            Class<?> componenetType = type.getComponentType();\n+            return Array.newInstance(componenetType, 0);\n         }\n         return null;\n     }\n--- a/test/org/mockito/internal/returnvalues/MoreEmptyReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/MoreEmptyReturnValuesTest.java\n package org.mockito.internal.returnvalues;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockitoutil.TestBase;\n \n \n     private MoreEmptyReturnValues rv = new MoreEmptyReturnValues();\n \n-    @Ignore\n     @Test\n     public void shouldReturnEmptyArray() {\n         String[] ret = (String[]) rv.returnValueFor((new String[0]).getClass());", "timestamp": 1231617600, "metainfo": ""}