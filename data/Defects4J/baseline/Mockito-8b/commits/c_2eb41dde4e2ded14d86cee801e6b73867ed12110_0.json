{"sha": "2eb41dde4e2ded14d86cee801e6b73867ed12110", "log": "Fixed issue 188 @Captor annotation will not lead to NPE during autounboxing. I'm getting hold of the parametrized type using reflection and using this type when creating ArgumentCaptor  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401981", "commit": "\n--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n \n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.FieldSetter;\n+import org.mockito.internal.util.reflection.GenericMaster;\n \n /**\n  * Initializes fields annotated with &#64;{@link org.mockito.Mock} or &#64;{@link org.mockito.Captor}.\n  * <p/>\n  * See {@link MockitoAnnotations}\n  */\n+@SuppressWarnings(\"unchecked\")\n public class DefaultAnnotationEngine implements AnnotationEngine {\n \n     /* (non-Javadoc)\n     private Object processAnnotationOn(org.mockito.MockitoAnnotations.Mock annotation, Field field) {\n         return Mockito.mock(field.getType(), field.getName());\n     }\n-\n+    \n     private Object processAnnotationOn(Captor annotation, Field field) {\n         Class<?> type = field.getType();\n         if (!ArgumentCaptor.class.isAssignableFrom(type)) {\n                     + field.getName() + \"' has wrong type\\n\"\n                     + \"For info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.\");\n         }\n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-            return ArgumentCaptor.forClass(typeToClass(actual));\n-        }\n-        return ArgumentCaptor.forClass(Object.class);    \n-    }       \n-\n-    private Class typeToClass(Type actual) {\n-        if (actual.equals(Double.class)) {\n-            return Double.class;\n-        }\n-        return Object.class;\n-    }\n+        Class cls = new GenericMaster().getGenericType(field);        \n+        return ArgumentCaptor.forClass(cls);    \n+    }           \n \n     @Override\n     public void process(Class<?> clazz, Object testClass) {\n--- /dev/null\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n+package org.mockito.internal.util.reflection;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class GenericMaster {\n+\n+    /**\n+     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n+     * \n+     * @param field\n+     * @return\n+     */\n+    public Class getGenericType(Field field) {        \n+        Type generic = field.getGenericType();\n+        if (generic != null && generic instanceof ParameterizedType) {\n+            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+            return (Class) actual;\n+        }\n+        \n+        return Object.class;\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n+package org.mockito.internal.util.reflection;\n+\n+import static org.junit.Assert.*;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.Test;\n+\n+public class GenericMasterTest {\n+    \n+    GenericMaster m = new GenericMaster();\n+    \n+    List<String> one;\n+    Set<Integer> two;\n+    Map<Double, String> map;\n+    String nonGeneric;\n+    \n+    @Test\n+    public void shouldFindGenericClass() throws Exception {\n+        assertEquals(m.getGenericType(field(\"one\")), String.class);\n+        assertEquals(m.getGenericType(field(\"two\")), Integer.class);\n+        assertEquals(m.getGenericType(field(\"map\")), Double.class);\n+    }\n+    \n+    @Test\n+    public void shouldGetObjectForNonGeneric() throws Exception {\n+        assertEquals(m.getGenericType(field(\"nonGeneric\")), Object.class);\n+    }\n+\n+    private Field field(String fieldName) throws SecurityException, NoSuchFieldException {\n+        return this.getClass().getDeclaredField(fieldName);\n+    }\n+}\n--- a/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java\n+++ b/test/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java\n     \n     interface Fun {\n         void doFun(double prmitive);\n+        void moreFun(int howMuch);\n     }\n     \n     @Mock Fun fun;\n         verify(fun).doFun(captor.capture());\n         assertEquals((Double) 1.0, captor.getValue());\n     }\n+\n+    @Captor ArgumentCaptor<Integer> intCaptor;\n+    \n+    @Test\n+    public void shouldAutoboxAllPrimitives() {\n+        verify(fun, never()).moreFun(intCaptor.capture());\n+    }\n }", "timestamp": 1274026822, "metainfo": ""}