{"sha": "5c1306b054c0101a19a061b9791ebc8ec361a820", "log": "In order to make mocks serializable started work on this feature. Refactoring.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401600", "commit": "\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.internal.IMockHandler;\n+import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n @SuppressWarnings(\"unchecked\")\n public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n \n-    private final Method equalsMethod;\n     private final Method hashCodeMethod;\n \n     private final IMockHandler mockHandler;\n-    CGLIBHacker cglibHacker;\n+    CGLIBHacker cglibHacker = new CGLIBHacker();\n+    ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();\n \n     public MethodInterceptorFilter(Class toMock, IMockHandler mockHandler) {\n         try {\n             if (toMock.isInterface()) {\n                 toMock = Object.class;\n             }\n-            equalsMethod = toMock.getMethod(\"equals\", Object.class);\n             hashCodeMethod = toMock.getMethod(\"hashCode\", (Class[]) null);\n         } catch (NoSuchMethodException e) {\n             throw new RuntimeException(\"\\nSomething went really wrong. Object method could not be found!\" +\n                 \"\\n please report it to the mocking mailing list at http://mockito.org\");\n         }\n         this.mockHandler = mockHandler;\n-        this.cglibHacker = new CGLIBHacker();\n     }\n \n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\n             throws Throwable {\n-        if (equalsMethod.equals(method)) {\n+        if (objectMethodsGuru.isEqualsMethod(method)) {\n             return proxy == args[0];\n         } else if (hashCodeMethod.equals(method)) {\n             return hashCodeForMock(proxy);\n--- a/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n                 && method.getName().equals(\"toString\");\n     }\n \n-    \n+    public boolean isEqualsMethod(Method method) {\n+        return method.getName().equals(\"equals\") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class;\n+    }\n }\n--- a/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n+++ b/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n import org.junit.Test;\n \n public class ObjectMethodsGuruTest extends TestBase {\n+\n+    ObjectMethodsGuru guru = new ObjectMethodsGuru();\n     \n     @Test\n     public void shouldKnowToStringMethod() throws Exception {\n         assertFalse(isToString(IMethods.class.getMethod(\"toString\", String.class)));\n         assertTrue(isToString(Object.class.getMethod(\"toString\")));\n     }\n+\n+    @Test\n+    public void shouldKnowEqualsMethod() throws Exception {\n+        assertFalse(guru.isEqualsMethod(IMethods.class.getMethod(\"equals\", String.class)));\n+        assertFalse(guru.isEqualsMethod(Object.class.getMethod(\"toString\")));\n+        assertTrue(guru.isEqualsMethod(String.class.getMethod(\"equals\", Object.class)));\n+    }\n }\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n     void longArg(long longArg);\n \n     void intArgumentMethod(int i);\n+\n+    boolean equals(String str);\n }\n--- a/test/org/mockitousage/MethodsImpl.java\n+++ b/test/org/mockitousage/MethodsImpl.java\n     public void intArgumentMethod(int i) {\n       \n     }\n+\n+    public boolean equals(String str) {\n+        return false;\n+    }\n }", "timestamp": 1251141456, "metainfo": ""}