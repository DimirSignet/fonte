{"sha": "d15cf2653e526661cd4e40b94e883045403c478b", "log": "added some more package.html, changed name of one package  --HG-- rename : src/org/mockito/exceptions/parents/CommonStackTraceRemover.java => src/org/mockito/exceptions/base/CommonStackTraceRemover.java rename : src/org/mockito/exceptions/parents/HasStackTrace.java => src/org/mockito/exceptions/base/HasStackTrace.java rename : src/org/mockito/exceptions/parents/HasStackTraceThrowableWrapper.java => src/org/mockito/exceptions/base/HasStackTraceThrowableWrapper.java rename : src/org/mockito/exceptions/parents/MockitoAssertionError.java => src/org/mockito/exceptions/base/MockitoAssertionError.java rename : src/org/mockito/exceptions/parents/MockitoException.java => src/org/mockito/exceptions/base/MockitoException.java rename : src/org/mockito/exceptions/parents/StackTraceFilter.java => src/org/mockito/exceptions/base/StackTraceFilter.java rename : test/org/mockito/exceptions/parents/MockitoAssertionErrorTest.java => test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java rename : test/org/mockito/exceptions/parents/MockitoExceptionTest.java => test/org/mockito/exceptions/base/MockitoExceptionTest.java rename : test/org/mockito/exceptions/parents/StackTraceBuilder.java => test/org/mockito/exceptions/base/StackTraceBuilder.java rename : test/org/mockito/exceptions/parents/StackTraceRemoverTest.java => test/org/mockito/exceptions/base/StackTraceRemoverTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40206", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n import static org.mockito.exceptions.StringJoiner.join;\n \n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.cause.FirstUndesiredInvocation;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n-import org.mockito.exceptions.parents.HasStackTrace;\n-import org.mockito.exceptions.parents.MockitoException;\n import org.mockito.exceptions.verification.TooLittleActualInvocationsError;\n import org.mockito.exceptions.verification.TooManyActualInvocationsError;\n import org.mockito.exceptions.verification.VerificationError;\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/CommonStackTraceRemover.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+public class CommonStackTraceRemover {\n+\n+    public void remove(HasStackTrace hasStackTrace, List<StackTraceElement> causeStackTrace) {\n+        List<StackTraceElement> exceptionsPart = null;\n+        List<StackTraceElement> exceptionsTrace = Arrays.asList(hasStackTrace.getStackTrace());\n+        int length = exceptionsTrace.size();\n+        for (int i = 0; i < length; i++) {\n+            List<StackTraceElement> subList = exceptionsTrace.subList(i, length);\n+            int lastStartingIndexOfSubList = Collections.lastIndexOfSubList(causeStackTrace, subList);\n+            if (lastStartingIndexOfSubList == -1) {\n+                continue;\n+            }\n+            \n+            int lastEndingIndexOfSubList = lastStartingIndexOfSubList + subList.size() - 1;\n+            if (lastEndingIndexOfSubList == causeStackTrace.size() - 1) {\n+                exceptionsPart = exceptionsTrace.subList(0, i);\n+                break;\n+            }\n+        }\n+        \n+        assert exceptionsPart != null;\n+        hasStackTrace.setStackTrace(exceptionsPart.toArray(new StackTraceElement[exceptionsPart.size()]));\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/HasStackTrace.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+public interface HasStackTrace {\n+    \n+    void setStackTrace(StackTraceElement[] stackTrace);\n+    \n+    StackTraceElement[] getStackTrace();\n+\n+}\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/HasStackTraceThrowableWrapper.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+public class HasStackTraceThrowableWrapper implements HasStackTrace {\n+\n+    private final Throwable throwable;\n+\n+    public HasStackTraceThrowableWrapper(Throwable throwable) {\n+        this.throwable = throwable;\n+    }\n+    \n+    public StackTraceElement[] getStackTrace() {\n+        return throwable.getStackTrace();\n+    }\n+\n+    public void setStackTrace(StackTraceElement[] stackTrace) {\n+        throwable.setStackTrace(stackTrace);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/MockitoAssertionError.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import java.util.Arrays;\n+\n+\n+public class MockitoAssertionError extends AssertionError implements HasStackTrace {\n+\n+    private static final long serialVersionUID = 1L;\n+    private StackTraceElement[] unfilteredStackTrace;\n+\n+    public MockitoAssertionError(String message) {\n+        super(message);\n+\n+        unfilteredStackTrace = getStackTrace();\n+        \n+        StackTraceFilter filter = new StackTraceFilter();\n+        filter.filterStackTrace(this);\n+    }\n+    \n+    public MockitoAssertionError(String message, Throwable cause) {\n+        this(message);\n+\n+        if (cause != null) {\n+            this.initCause(cause);\n+            CommonStackTraceRemover remover = new CommonStackTraceRemover();\n+            remover.remove(this, Arrays.asList(cause.getStackTrace()));\n+        }\n+    }\n+\n+    public StackTraceElement[] getUnfilteredStackTrace() {\n+        return unfilteredStackTrace;\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/MockitoException.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+\n+public class MockitoException extends RuntimeException implements HasStackTrace {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private StackTraceElement[] unfilteredStackTrace;\n+\n+    public MockitoException(String message) {\n+        super(message);\n+\n+        unfilteredStackTrace = getStackTrace();\n+        \n+        StackTraceFilter filter = new StackTraceFilter();\n+        filter.filterStackTrace(this);\n+    }\n+    \n+    public StackTraceElement[] getUnfilteredStackTrace() {\n+        return unfilteredStackTrace;\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+public class StackTraceFilter {\n+    \n+    public boolean isLastStackElementToRemove(StackTraceElement e) {\n+        boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByCGLIB$$\");\n+        boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n+        return fromMockObject || fromOrgMockito;\n+    }\n+\n+    public void filterStackTrace(HasStackTrace hasStackTrace) {\n+        List<StackTraceElement> unfilteredStackTrace = Arrays.asList(hasStackTrace.getStackTrace());\n+        \n+        int lastToRemove = -1;\n+        int i = 0;\n+        for (StackTraceElement trace : unfilteredStackTrace) {\n+            if (this.isLastStackElementToRemove(trace)) {\n+                lastToRemove = i;\n+            }\n+            i++;\n+        }\n+        \n+        List<StackTraceElement> filtered = unfilteredStackTrace.subList(lastToRemove+1, unfilteredStackTrace.size() - 1);\n+        hasStackTrace.setStackTrace(filtered.toArray(new StackTraceElement[]{}));\n+    }\n+}\n--- a/src/org/mockito/exceptions/cause/FirstUndesiredInvocation.java\n+++ b/src/org/mockito/exceptions/cause/FirstUndesiredInvocation.java\n  */\n package org.mockito.exceptions.cause;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class FirstUndesiredInvocation extends MockitoException {\n \n--- a/src/org/mockito/exceptions/cause/TooLittleInvocations.java\n+++ b/src/org/mockito/exceptions/cause/TooLittleInvocations.java\n  */\n package org.mockito.exceptions.cause;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class TooLittleInvocations extends MockitoException {\n \n--- a/src/org/mockito/exceptions/cause/UndesiredInvocation.java\n+++ b/src/org/mockito/exceptions/cause/UndesiredInvocation.java\n  */\n package org.mockito.exceptions.cause;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class UndesiredInvocation extends MockitoException {\n \n--- a/src/org/mockito/exceptions/cause/WantedDiffersFromActual.java\n+++ b/src/org/mockito/exceptions/cause/WantedDiffersFromActual.java\n  */\n package org.mockito.exceptions.cause;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class WantedDiffersFromActual extends MockitoException {\n \n--- a/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n+++ b/src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java\n  */\n package org.mockito.exceptions.misusing;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class InvalidUseOfMatchersException extends MockitoException {\n \n--- a/src/org/mockito/exceptions/misusing/MissingMethodInvocationException.java\n+++ b/src/org/mockito/exceptions/misusing/MissingMethodInvocationException.java\n  */\n package org.mockito.exceptions.misusing;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class MissingMethodInvocationException extends MockitoException {\n \n--- a/src/org/mockito/exceptions/misusing/NotAMockException.java\n+++ b/src/org/mockito/exceptions/misusing/NotAMockException.java\n  */\n package org.mockito.exceptions.misusing;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class NotAMockException extends MockitoException {\n \n--- a/src/org/mockito/exceptions/misusing/UnfinishedStubbingException.java\n+++ b/src/org/mockito/exceptions/misusing/UnfinishedStubbingException.java\n  */\n package org.mockito.exceptions.misusing;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class UnfinishedStubbingException extends MockitoException {\n \n--- a/src/org/mockito/exceptions/misusing/UnfinishedVerificationException.java\n+++ b/src/org/mockito/exceptions/misusing/UnfinishedVerificationException.java\n  */\n package org.mockito.exceptions.misusing;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class UnfinishedVerificationException extends MockitoException {\n     \n--- a/src/org/mockito/exceptions/verification/TooLittleActualInvocationsError.java\n+++ b/src/org/mockito/exceptions/verification/TooLittleActualInvocationsError.java\n  */\n package org.mockito.exceptions.verification;\n \n-import org.mockito.exceptions.parents.MockitoAssertionError;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n \n public class TooLittleActualInvocationsError extends MockitoAssertionError {\n \n--- a/src/org/mockito/exceptions/verification/TooManyActualInvocationsError.java\n+++ b/src/org/mockito/exceptions/verification/TooManyActualInvocationsError.java\n  */\n package org.mockito.exceptions.verification;\n \n-import org.mockito.exceptions.parents.MockitoAssertionError;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n \n public class TooManyActualInvocationsError extends MockitoAssertionError {\n \n--- a/src/org/mockito/exceptions/verification/VerificationError.java\n+++ b/src/org/mockito/exceptions/verification/VerificationError.java\n  */\n package org.mockito.exceptions.verification;\n \n-import org.mockito.exceptions.parents.MockitoAssertionError;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n \n \n public class VerificationError extends MockitoAssertionError {\n--- a/src/org/mockito/internal/MockUtil.java\n+++ b/src/org/mockito/internal/MockUtil.java\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.Factory;\n \n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n-import org.mockito.exceptions.parents.MockitoException;\n import org.mockito.internal.creation.ObjectMethodsFilter;\n import org.mockito.internal.creation.MockFactory.MockMethodInterceptor;\n \n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.exceptions.parents.HasStackTrace;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockNamer;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n--- a/src/org/mockito/internal/invocation/InvocationsCalculator.java\n+++ b/src/org/mockito/internal/invocation/InvocationsCalculator.java\n \n import java.util.List;\n \n-import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.progress.VerificationMode;\n \n //TODO refactor to an object that holds Invocations and exposes some calculations\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n import java.util.Collections;\n import java.util.List;\n \n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class VerificationMode {\n     \n--- a/src/org/mockito/internal/stubbing/Result.java\n+++ b/src/org/mockito/internal/stubbing/Result.java\n  */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.exceptions.parents.HasStackTraceThrowableWrapper;\n-import org.mockito.exceptions.parents.StackTraceFilter;\n+import org.mockito.exceptions.base.HasStackTraceThrowableWrapper;\n+import org.mockito.exceptions.base.StackTraceFilter;\n \n @SuppressWarnings(\"unchecked\")\n public class Result implements IAnswer {\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n import java.util.LinkedList;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.parents.StackTraceFilter;\n+import org.mockito.exceptions.base.StackTraceFilter;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgress;\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsCalculator;\n--- a/test/org/mockito/MockUtilTest.java\n+++ b/test/org/mockito/MockUtilTest.java\n import net.sf.cglib.proxy.NoOp;\n \n import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n-import org.mockito.exceptions.parents.MockitoException;\n \n public class MockUtilTest extends RequiresValidState {\n \n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+\n+public class MockitoAssertionErrorTest extends RequiresValidState {\n+\n+    private void throwIt() {\n+        throw new MockitoAssertionError(\"boom\");\n+    }\n+    \n+    @Test\n+    public void shouldKeepUnfilteredStackTrace() {\n+        try {\n+            throwIt();\n+            fail();\n+        } catch (MockitoAssertionError e) {\n+            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotInitCauseWhenCauseIsNull() {\n+        new MockitoAssertionError(\"test\", null);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/MockitoExceptionTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class MockitoExceptionTest extends RequiresValidState {\n+\n+    private void throwIt() {\n+        throw new MockitoException(\"boom\");\n+    }\n+    \n+    @Test\n+    public void shouldKeepUnfilteredStackTrace() {\n+        try {\n+            throwIt();\n+            fail();\n+        } catch (MockitoException e) {\n+            assertEquals(\"throwIt\", e.getUnfilteredStackTrace()[0].getMethodName());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/StackTraceBuilder.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class StackTraceBuilder {\n+    \n+    private String[] methods;\n+\n+    public StackTraceBuilder methods(String ... methods) {\n+        this.methods = methods;\n+        return this;\n+    }\n+\n+    public StackTraceElement[] toStackTrace() {\n+        StackTraceElement[] trace = new StackTraceElement[methods.length];\n+        \n+        for (int i = 0; i < methods.length; i++) {\n+            trace[i] = new StackTraceElement(\"DummyClass\", methods[i], \"DummyClass.java\", 100);\n+        }\n+        \n+        return trace;\n+    }\n+\n+    public List<StackTraceElement> toStackTraceList() {\n+        return Arrays.asList(toStackTrace());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/exceptions/base/StackTraceRemoverTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.base;\n+\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.util.ExtraMatchers.collectionHasExactlyInOrder;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.base.CommonStackTraceRemover;\n+import org.mockito.exceptions.base.HasStackTrace;\n+\n+public class StackTraceRemoverTest extends RequiresValidState {\n+\n+    private StackTraceElement[] stackTrace;\n+    private List<StackTraceElement> causeStackTrace;\n+    private List<String> methodsOnTraceAfterRemoving;\n+    \n+    private class SomeException implements HasStackTrace {\n+        public StackTraceElement[] getStackTrace() {\n+            return stackTrace;\n+        }\n+        public void setStackTrace(StackTraceElement[] stackTrace) {\n+            methodsOnTraceAfterRemoving = new LinkedList<String>();\n+            for(StackTraceElement e : stackTrace) {\n+                methodsOnTraceAfterRemoving.add(e.getMethodName());\n+            }\n+        }\n+    }\n+    \n+    private void remove() {\n+        CommonStackTraceRemover remover = new CommonStackTraceRemover();\n+        SomeException exception = new SomeException();\n+        remover.remove(exception, causeStackTrace);\n+    }\n+    \n+    private void setStackTrace(String ... methods) {\n+        stackTrace = new StackTraceBuilder().methods(methods).toStackTrace();\n+    }\n+    \n+    private void setCauseStackTrace(String ... methods) {\n+        causeStackTrace = new StackTraceBuilder().methods(methods).toStackTraceList();\n+    }\n+    \n+    @Test\n+    public void shouldRemoveCommonStackTrace() throws Exception {\n+        setStackTrace(\"methodOne\", \"methodTwo\", \"methodThree\", \"commonMethodOne\", \"commonMethodTwo\");\n+        setCauseStackTrace(\"actualOne\", \"actualTwo\", \"commonMethodOne\", \"commonMethodTwo\");\n+        remove();\n+        assertThat(methodsOnTraceAfterRemoving, collectionHasExactlyInOrder(\n+                \"methodOne\",\n+                \"methodTwo\",\n+                \"methodThree\"\n+        ));\n+    }\n+    \n+    @Test\n+    public void shouldRemoveCommonWhenExceptionTraceHasRecursion() throws Exception {\n+        setStackTrace(\"methodOne\", \"commonMethodOne\", \"commonMethodTwo\", \"commonMethodOne\", \"commonMethodTwo\");\n+        setCauseStackTrace(\"actualOne\", \"commonMethodOne\", \"commonMethodTwo\");\n+        remove();\n+        assertThat(methodsOnTraceAfterRemoving, collectionHasExactlyInOrder(\n+                \"methodOne\",\n+                \"commonMethodOne\",\n+                \"commonMethodTwo\"\n+        ));\n+    }\n+\n+    @Test\n+    public void shouldRemoveCommonWhenActualTraceHasRecursion() throws Exception {\n+        setStackTrace(\"methodOne\", \"commonMethodOne\");\n+        setCauseStackTrace(\"actualOne\", \"commonMethodOne\", \"actualOne\", \"commonMethodOne\");\n+        remove();\n+        assertThat(methodsOnTraceAfterRemoving, collectionHasExactlyInOrder(\n+                \"methodOne\"\n+        ));\n+    }\n+    \n+    @Test\n+    public void shouldRemoveCommonWhenOnlyOneMethodOnStackTrace() throws Exception {\n+        setStackTrace(\"commonOne\");\n+        setCauseStackTrace(\"commonOne\");\n+        remove();\n+        assertThat(methodsOnTraceAfterRemoving, collectionHasExactlyInOrder());\n+    }\n+    \n+    @Test\n+    public void shouldRemoveCommonWhenOneMethodEach() throws Exception {\n+        setStackTrace(\"one\", \"commonOne\");\n+        setCauseStackTrace(\"two\", \"commonOne\");\n+        remove();\n+        assertThat(methodsOnTraceAfterRemoving, collectionHasExactlyInOrder(\n+                \"one\"\n+        ));\n+    }\n+}\n--- a/test/org/mockito/internal/invocation/InvocationsCalculatorTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsCalculatorTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.progress.VerificationMode;\n \n \n--- a/test/org/mockito/internal/progress/MockingProgressImplTest.java\n+++ b/test/org/mockito/internal/progress/MockingProgressImplTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class MockingProgressImplTest extends RequiresValidState {\n \n--- a/test/org/mockito/internal/progress/VerificationModeTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeTest.java\n \n import org.junit.Test;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n \n public class VerificationModeTest extends RequiresValidState {\n \n--- a/test/org/mockito/internal/stubbing/ResultTest.java\n+++ b/test/org/mockito/internal/stubbing/ResultTest.java\n \n import org.junit.Test;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.HasStackTrace;\n-import org.mockito.exceptions.parents.StackTraceFilter;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.exceptions.base.StackTraceFilter;\n \n public class ResultTest extends RequiresValidState {\n \n--- a/test/org/mockito/internal/stubbing/StubberTest.java\n+++ b/test/org/mockito/internal/stubbing/StubberTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationsCalculator;\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.parents.HasStackTrace;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.StateResetter;\n import org.mockito.Strictly;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n-import org.mockito.exceptions.parents.MockitoException;\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageTest extends RequiresValidState {\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.MockUtilTest;\n import org.mockito.MockitoTest;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.MockitoAssertionErrorTest;\n-import org.mockito.exceptions.parents.MockitoExceptionTest;\n+import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n+import org.mockito.exceptions.base.MockitoExceptionTest;\n import org.mockito.internal.MockControlTest;\n import org.mockito.internal.creation.CglibTest;\n import org.mockito.internal.creation.MockFactoryTest;\n--- a/test/org/mockitousage/StackTrackeFilteringTest.java\n+++ b/test/org/mockitousage/StackTrackeFilteringTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.StateResetter;\n import org.mockito.Strictly;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.VerificationError;\n \n public class StackTrackeFilteringTest extends RequiresValidState {\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.VerificationError;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})\n--- a/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.Strictly;\n-import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.VerificationError;\n import org.mockitousage.IMethods;\n ", "timestamp": 1197729940, "metainfo": ""}