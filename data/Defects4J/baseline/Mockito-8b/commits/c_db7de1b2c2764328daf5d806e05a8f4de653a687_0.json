{"sha": "db7de1b2c2764328daf5d806e05a8f4de653a687", "log": "more elegant :), got rid of synchronized stuff  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40133", "commit": "\n--- a/src/org/mockito/internal/LastArguments.java\n+++ b/src/org/mockito/internal/LastArguments.java\n \n public class LastArguments {\n     \n-    static LastArguments INSTANCE = new LastArguments();\n+    private static ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();\n     \n-    private final ThreadLocal<Stack<IArgumentMatcher>> threadToArgumentMatcherStack = new ThreadLocal<Stack<IArgumentMatcher>>();\n+    private Stack<IArgumentMatcher> matcherStack = new Stack<IArgumentMatcher>();\n \n-    //does everything needs to be synchronized\n-    public static synchronized LastArguments instance() {\n-        return INSTANCE;\n+    public static LastArguments instance() {\n+        if (INSTANCE.get() == null) {\n+            INSTANCE.set(new LastArguments()); \n+        }\n+        \n+        return INSTANCE.get();\n     }\n     \n-    public synchronized void reportMatcher(IArgumentMatcher matcher) {\n-        Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();\n-        if (stack == null) {\n-            stack = new Stack<IArgumentMatcher>();\n-            threadToArgumentMatcherStack.set(stack);\n-        }\n-        stack.push(matcher);\n+    public void reportMatcher(IArgumentMatcher matcher) {\n+        matcherStack.push(matcher);\n     }\n \n-    public synchronized List<IArgumentMatcher> pullMatchers() {\n-        Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();\n-        if (stack == null) {\n+    public List<IArgumentMatcher> pullMatchers() {\n+        if (matcherStack.isEmpty()) {\n             return null;\n         }\n         \n-        threadToArgumentMatcherStack.remove();\n-        return new ArrayList<IArgumentMatcher>(stack);\n+        ArrayList<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>(matcherStack);\n+        matcherStack.clear();\n+        return matchers;\n     }\n \n-    public synchronized void reportAnd(int count) {\n-        Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();\n-        assertState(stack != null, missingMatchers());\n-        stack.push(new And(popLastArgumentMatchers(count)));\n+    public void reportAnd(int count) {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n+        matcherStack.push(new And(popLastArgumentMatchers(count)));\n     }\n \n-    private String missingMatchers() {\n-        return \"No matchers found.\";\n-    }\n-\n-    public synchronized void reportNot() {\n-        Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();\n-        assertState(stack != null, missingMatchers());\n-        stack.push(new Not(popLastArgumentMatchers(1).get(0)));\n+    public void reportNot() {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n+        matcherStack.push(new Not(popLastArgumentMatchers(1).get(0)));\n     }\n \n     private List<IArgumentMatcher> popLastArgumentMatchers(int count) {\n-        Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();\n-        assertState(stack != null, missingMatchers());\n-        assertState(stack.size() >= count,\n-                \"\" + count + \" matchers expected, \" + stack.size() + \" recorded.\");\n+        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n+        assertState(matcherStack.size() >= count,\n+                \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n         List<IArgumentMatcher> result = new LinkedList<IArgumentMatcher>();\n-        result.addAll(stack.subList(stack.size() - count, stack.size()));\n+        result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n         for (int i = 0; i < count; i++) {\n-            stack.pop();\n+            matcherStack.pop();\n         }\n         return result;\n     }\n \n     private void assertState(boolean toAssert, String message) {\n         if (!toAssert) {\n-            if (threadToArgumentMatcherStack.get() != null) \n-                threadToArgumentMatcherStack.get().clear();\n+            reset();\n             throw new InvalidUseOfMatchersException(message);\n         }\n     }\n \n-    public synchronized void reportOr(int count) {\n-        Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();\n-        assertState(stack != null, missingMatchers());\n-        stack.push(new Or(popLastArgumentMatchers(count)));\n+    public void reportOr(int count) {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n+        matcherStack.push(new Or(popLastArgumentMatchers(count)));\n     }\n \n-    static synchronized void setInstance(LastArguments lastArguments) {\n-        INSTANCE = lastArguments;\n-    }\n-\n-    public synchronized void validateState() {\n-        if (threadToArgumentMatcherStack.get() != null && !threadToArgumentMatcherStack.get().isEmpty()) {\n-            threadToArgumentMatcherStack.get().clear();\n-            throw new MockitoException(\"invalid arguments state\");\n+    public void validateState() {\n+        if (!matcherStack.isEmpty()) {\n+            reset();\n+            throw new InvalidUseOfMatchersException(\"The way matchers were used is inapropriate!\");\n         }\n     }\n \n-    //TODO crap, needs to be TL singleton\n-    synchronized void reset() {\n-        if (threadToArgumentMatcherStack.get() != null) {\n-            threadToArgumentMatcherStack.get().clear();\n-        }\n+    void reset() {\n+        matcherStack.clear();\n     }\n }\n--- a/src/org/mockito/internal/MockitoState.java\n+++ b/src/org/mockito/internal/MockitoState.java\n     private static ThreadLocal<MockitoState> INSTANCE = new ThreadLocal<MockitoState>();\n         \n     private MockControl lastControl;\n-    private VerifyingMode verifyingModeLocal;\n+    private VerifyingMode verifyingMode;\n     private int invocationSequenceNumber = 1;\n-    private boolean stubbingModeLocal = false;\n+    private boolean stubbingInProgress = false;\n \n     public static MockitoState instance() {\n         if (INSTANCE.get() == null) {\n     \n     public void verifyingStarted(VerifyingMode verify) {\n         validateState();\n-        verifyingModeLocal = verify;\n+        verifyingMode = verify;\n     }\n \n     public VerifyingMode pullVerifyingMode() {\n-        VerifyingMode temp = verifyingModeLocal;\n-        verifyingModeLocal = null;\n+        VerifyingMode temp = verifyingMode;\n+        verifyingMode = null;\n         return temp;\n     }\n \n \n     public void stubbingStarted() {\n         validateState();\n-        stubbingModeLocal = true;\n+        stubbingInProgress = true;\n     }\n \n     public void validateState() {\n-        if (verifyingModeLocal != null) {\n-            verifyingModeLocal = null;\n+        if (verifyingMode != null) {\n+            verifyingMode = null;\n             Exceptions.unfinishedVerificationException();\n         }\n         \n-        if (stubbingModeLocal) {\n-            stubbingModeLocal = false;\n+        if (stubbingInProgress) {\n+            stubbingInProgress = false;\n             Exceptions.unfinishedStubbing();\n         }\n     }\n \n     public void stubbingCompleted() {\n-        stubbingModeLocal = false;\n+        stubbingInProgress = false;\n     }\n     \n     public String toString() {\n         return  \"lastControl: \" + lastControl + \n-                \", verifyingMode: \" + verifyingModeLocal +\n-                \", invocationSequenceNumber: \" + invocationSequenceNumber +\n-                \", stubbingModeLocal: \" + stubbingModeLocal;\n+        \", verifyingMode: \" + verifyingMode +\n+        \", invocationSequenceNumber: \" + invocationSequenceNumber +\n+        \", stubbingInProgress: \" + stubbingInProgress;\n     }\n \n-    synchronized void reset() {\n-        stubbingModeLocal = false;\n-        verifyingModeLocal = null;\n+    void reset() {\n+        stubbingInProgress = false;\n+        verifyingMode = null;\n         invocationSequenceNumber = 1;\n     }\n }\n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n         } catch (InvalidUseOfMatchersException e) {\n             assertEquals(\n                     \"\\n\" +\n-            \t\t\"No matchers found.\" +\n+            \t\t\"No matchers found for Not(?).\" +\n             \t\t\"\\n\" +\n                     \"Read more: http://code.google.com/p/mockito/matchers\"\n             \t\t, e.getMessage());", "timestamp": 1196891016, "metainfo": ""}