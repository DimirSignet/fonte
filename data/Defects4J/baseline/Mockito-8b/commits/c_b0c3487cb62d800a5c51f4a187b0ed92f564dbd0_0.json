{"sha": "b0c3487cb62d800a5c51f4a187b0ed92f564dbd0", "log": "fixed a bit of javadoc to be more readable  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40693", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n  * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}, e.g:\n  * \n  * <pre>\n- * class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n+ * class IsListOfTwoElements extends ArgumentMatcher<List> {\n  *     public boolean matches(Object list) {\n  *         return ((List) list).size() == 2;\n  *     }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  * Example:\n  * \n  * <pre>\n- *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n+ *   class IsListOfTwoElements extends ArgumentMatcher<List> {\n  *      public boolean matches(Object list) {\n  *          return ((List) list).size() == 2;\n  *      }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * \n  * <h1>Contents</h1>\n  * \n- * <b> 1. Let's verify some behaviour! <br/> 2. How about some stubbing? <br/>\n- * 3. Argument matchers <br/> 4. Verifying exact number of invocations / at\n- * least once / never <br/> 5. Stubbing void methods with exceptions <br/> 6.\n- * Verification in order <br/> 7. Making sure interaction(s) never happened on\n- * mock <br/> 8. Finding redundant invocations <br/> 9. Shorthand for mocks\n- * creation - &#064;Mock annotation <br/> 10. (**New**) Stubbing consecutive\n- * calls (iterator-style stubbing) <br/> 11. (**New**) Stubbing with callbacks\n+ * <b> \n+ *      1. Let's verify some behaviour! <br/> \n+ *      2. How about some stubbing? <br/>\n+ *      3. Argument matchers <br/> \n+ *      4. Verifying exact number of invocations / at least once / never <br/> \n+ *      5. Stubbing void methods with exceptions <br/> \n+ *      6. Verification in order <br/> \n+ *      7. Making sure interaction(s) never happened on mock <br/> \n+ *      8. Finding redundant invocations <br/> \n+ *      9. Shorthand for mocks creation - &#064;Mock annotation <br/> \n+ *      10. (**New**) Stubbing consecutive calls (iterator-style stubbing) <br/> \n+ *      11. (**New**) Stubbing with callbacks\n  * </b>\n  * \n  * <p>\n  * //following prints \"null\" because get(999) was not stubbed\n  * System.out.println(mockedList.get(999));\n  * \n- * //Stubbed invocations &lt;b&gt;are verified implicitly&lt;/b&gt;. The execution flow of your own code does it completely &lt;b&gt;for free&lt;/b&gt;. \n- * //Although it is possible to verify a stubbed invocation, in majority of cases &lt;b&gt;it's not necessary&lt;/b&gt;:\n+ * //Stubbed invocations <b>are verified implicitly</b>. The execution flow of your own code does it completely <b>for free</b>. \n+ * //Although it is possible to verify a stubbed invocation, in majority of cases <b>it's not necessary</b>:\n  * verify(mockedList).get(0);\n  * </pre>\n  * \n  * //following prints \"element\"\n  * System.out.println(mockedList.get(999));\n  * \n- * //&lt;b&gt;you can also verify using argument matcher&lt;/b&gt;\n+ * //<b>you can also verify using argument matcher</b>\n  * verify(mockedList).get(anyInt());\n  * </pre>\n  * \n  * E.g: (example shows verification but the same applies to stubbing):\n  * \n  * <pre>\n- *   verify(mock).someMethod(anyInt(), anyString(), &lt;b&gt;eq(\"third argument\")&lt;/b&gt;);\n+ *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n  *   //above is correct - eq() is also an argument matcher\n  *   \n- *   verify(mock).someMethod(anyInt(), anyString(), &lt;b&gt;\"third argument\"&lt;/b&gt;);\n+ *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n  * </pre>\n  * \n  * any decent (clean & simple) code.\n  * \n  * Allows stubbing with generic {@link Answer} interface\n- * \n- * <p>\n  * \n  * <pre>\n  * stub(mock.someMethod(anyString())).toAnswer(new Answer() {\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n     /**\n      * Stub mock object with a custom answer. E.g:\n      * <pre>\n-     * stub(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {\n+     * stub(mock.someMethod(10)).toAnswer(new Answer<Integer>() {\n      *     public Integer answer(InvocationOnMock invocation) throws Throwable {\n      *         return (Integer) invocation.getArguments()[0];\n      *     }", "timestamp": 1216303925, "metainfo": ""}