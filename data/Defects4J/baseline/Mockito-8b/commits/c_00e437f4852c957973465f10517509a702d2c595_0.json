{"sha": "00e437f4852c957973465f10517509a702d2c595", "log": "gc'ed some TODOs", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.hamcrest.Matcher;\n     public static <T> T anyObject() {\n         return (T) reportMatcher(Any.ANY).returnNull();\n     }\n-    //TODO: after 1.8 check out Jay Fields' idea on any() matcher\n \n     /**\n      * Any vararg, meaning any number and values of arguments.\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n      * \n      * @return verification mode\n      */\n-    //TODO make exception message nicer\n     public static VerificationMode only() {\n     \treturn VerificationModeFactory.only();\n     }    \n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation.jmock;\n \n import org.mockito.cglib.core.CodeGenerationException;\n     \n     private ClassImposterizer() {}\n     \n-    //TODO: after 1.8, in order to provide decent exception message when objenesis is not found,\n+    //TODO: in order to provide decent exception message when objenesis is not found,\n     //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing\n-    //TODO: after 1.8, for the same reason catch and give better feedback when hamcrest core is not found.\n+    //TODO: for the same reason catch and give better feedback when hamcrest core is not found.\n     private ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());\n     \n     private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {\n--- a/src/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java\n+++ b/src/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java\n      * Basically removes all bad from the middle. If any good are in the middle of bad those are also removed. \n      */\n     public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n-        //TODO: after 1.8 profile\n+        //TODO: profile\n         List<StackTraceElement> unfilteredStackTrace = Arrays.asList(target);\n         \n         int lastBad = -1;\n--- a/src/org/mockito/internal/handler/MockHandlerImpl.java\n+++ b/src/org/mockito/internal/handler/MockHandlerImpl.java\n  */\n package org.mockito.internal.handler;\n \n+import org.mockito.exceptions.Reporter;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.verification.VerificationMode;\n \n import java.util.List;\n-import org.mockito.exceptions.Reporter;\n \n /**\n  * Invocation handler set on mock objects.\n         if (verificationMode != null) {\n             // We need to check if verification was started on the correct mock\n             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n-            // TODO: can I avoid this cast here?\n             if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n                 VerificationDataImpl data = createVerificationData(invocationContainerImpl, invocationMatcher);\n                 verificationMode.verify(data);\n--- a/src/org/mockito/internal/verification/VerificationModeFactory.java\n+++ b/src/org/mockito/internal/verification/VerificationModeFactory.java\n     }\n \n     public static VerificationMode only() {\n-        return new Only();\n+        return new Only(); //TODO make exception message nicer\n     }\n \n     public static Times times(int wantedNumberOfInvocations) {", "timestamp": 1347831928, "metainfo": ""}