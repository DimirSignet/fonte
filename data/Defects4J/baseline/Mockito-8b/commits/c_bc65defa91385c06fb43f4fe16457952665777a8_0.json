{"sha": "bc65defa91385c06fb43f4fe16457952665777a8", "log": "Moved test to correct source tree  --HG-- rename : src/org/mockito/internal/verification/OnlyTest.java => test/org/mockito/internal/verification/OnlyTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%402017", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/OnlyTest.java\n+package org.mockito.internal.verification;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.api.VerificationData;\n+\n+public class OnlyTest {\n+\n+    Only only = new Only();\n+    \n+    public class VerificationDataStub implements VerificationData {\n+        private final Invocation invocation;\n+        private final InvocationMatcher wanted;\n+\n+        public VerificationDataStub(InvocationMatcher wanted, Invocation invocation) {\n+            this.invocation = invocation;\n+            this.wanted = wanted;\n+        }\n+\n+        public List<Invocation> getAllInvocations() {\n+            return Arrays.asList(invocation);\n+        }\n+\n+        public InvocationMatcher getWanted() {\n+            return wanted;\n+        }\n+    }\n+\n+    @Test\n+    public void shouldMarkAsVerified() {\n+        //given\n+        Invocation invocation = new InvocationBuilder().toInvocation();\n+        assertFalse(invocation.isVerified());\n+        \n+        //when\n+        only.verify(new VerificationDataStub(new InvocationMatcher(invocation), invocation));\n+        \n+        //then\n+        assertTrue(invocation.isVerified());\n+    }\n+    \n+    @Test\n+    public void shouldNotMarkAsVerifiedWhenAssertionFailed() {\n+        //given\n+        Invocation invocation = new InvocationBuilder().toInvocation();\n+        assertFalse(invocation.isVerified());\n+        \n+        //when\n+        try {\n+            only.verify(new VerificationDataStub(new InvocationBuilder().toInvocationMatcher(), invocation));\n+            fail();\n+        } catch (MockitoAssertionError e) {}\n+        \n+        //then\n+        assertFalse(invocation.isVerified());\n+    }\n+}", "timestamp": 1276550229, "metainfo": ""}