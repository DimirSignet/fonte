{"sha": "7c684e1640e4ee14f21f1cf1a26c70dd2b19fb81", "log": "added comments  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40515", "commit": "\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n     \n     @Test\n     public void shouldAllowConfiguringReturnValuesForSelectedMocks() throws Exception {\n+        //create smart mock\n         MyObject smartMock = mock(MyObject.class);\n         beSmart(smartMock);\n+        //create ordinary mock\n         MyObject ordinaryMock = mock(MyObject.class);\n         \n         //returns mock instead of null\n         assertFalse(ordinaryMock.returnBoolean());\n     }\n     \n-    //Configuration code below is typically hidden in a base class/test runner/some kind of static utility\n+    //Configuration code below is typically hidden in a base class / your test runner / some kind of static utility\n     \n     private MyDefaultReturnValues myDefaultReturnValues;\n \n     }\n     \n     @After\n-    public void resetDefaultReturnValues() {\n+    public void resetReturnValuesToDefaults() {\n         MockitoConfiguration.instance().resetReturnValues();\n     }\n     \n+    //My own sophisticated version of ReturnValues - it treats 'smart mocks' differently\n     private final class MyDefaultReturnValues implements ReturnValues {\n         private List<Object> smartMocks = new LinkedList<Object>();\n \n             if (value != null || returnType == Void.TYPE) {\n                 return value;\n             } else if (smartMocks.contains(invocation.getMock())) {\n+                //if is a smart mock then return different value\n                 return returnValueForSmartMock(returnType);\n             } else {\n                 return null;\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n     @Test\n     public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {\n         MyObject m = mock(MyObject.class);\n+        //mocks don't return nulls any more...\n         MyObject returned = m.foo();\n         assertNotNull(returned);\n         assertNotNull(returned.foo());\n         MyObject foo();\n     }\n     \n-    //Configuration code below is typically hidden in a base class/test runner/some kind of static utility\n+    //Configuration code below is typically hidden in a base class / your test runner / some kind of static utility\n     \n     @Before\n     public void configureDefaultReturnValues() {\n     }\n     \n     @After\n-    public void resetDefaultReturnValues() {\n+    public void resetReturnValuesToDefaults() {\n         MockitoConfiguration.instance().resetReturnValues();\n     }\n     \n     private final class MyDefaultReturnValues implements ReturnValues {\n         public Object valueFor(InvocationOnMock invocation) {\n+            //get the default return value\n             Object value = new DefaultReturnValues().valueFor(invocation);\n             if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n                 return value;\n             } else {\n+                //in case the default return value is null and method is not void, return new mock:\n                 return Mockito.mock(invocation.getMethod().getReturnType());\n             }\n         }", "timestamp": 1206406387, "metainfo": ""}