{"sha": "8dc41b5914398fbe319e13d1c675bd628aa83e5e", "log": "Tidy-up in buildSrc - rewriting it from scratch", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilder.java\n package org.mockito.release.notes;\n-\n-import org.mockito.release.notes.internal.ContributionSet;\n \n import java.io.File;\n \n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/exec/Exec.java\n+package org.mockito.release.notes.exec;\n+\n+import org.gradle.api.Project;\n+\n+public class Exec {\n+\n+    public static ProcessRunner getGradleProcessRunner(Project project) {\n+        return new GradleProcessRunner(project);\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/exec/ProcessRunner.java\n+package org.mockito.release.notes.exec;\n+\n+/**\n+ * Provides ways to execute external processes\n+ */\n+public interface ProcessRunner {\n+\n+    /**\n+     * Executes given command line and returns the output.\n+     *\n+     * @param commandLine to execute\n+     * @return combined error and standard output.\n+     */\n+    String run(String ... commandLine);\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Commit.java\n+package org.mockito.release.notes.vcs;\n+\n+public interface Commit {\n+    String getEmail();\n+    String getAuthor();\n+    String getMessage();\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Contribution.java\n+package org.mockito.release.notes.vcs;\n+\n+import java.util.Collection;\n+\n+public interface Contribution {\n+    Collection<Commit> getCommits();\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionSet.java\n+package org.mockito.release.notes.vcs;\n+\n+import java.util.Collection;\n+\n+public interface ContributionSet {\n+    Collection<Commit> getAllCommits();\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionsProvider.java\n+package org.mockito.release.notes.vcs;\n+\n+public interface ContributionsProvider {\n+    ContributionSet getContributionsBetween(String fromRev, String toRev);\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContribution.java\n+package org.mockito.release.notes.vcs;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+class DefaultContribution implements Contribution, Comparable<DefaultContribution> {\n+\n+    //email identifies the contributor, author alias not necessarily\n+    final String email;\n+    final String author;\n+    final List<Commit> commits = new LinkedList<Commit>();\n+\n+    DefaultContribution(Commit commit) {\n+        email = commit.getEmail();\n+        author = commit.getAuthor();\n+        commits.add(commit);\n+    }\n+\n+    void add(GitCommit commit) {\n+        assert email.equals(commit.getEmail());\n+        commits.add(commit);\n+    }\n+\n+    public String toString() {\n+        return author + \":\" + commits.size();\n+    }\n+\n+    public int compareTo(DefaultContribution other) {\n+        return Integer.valueOf(commits.size()).compareTo(other.getCommits().size());\n+    }\n+\n+    public Collection<Commit> getCommits() {\n+        return commits;\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n+package org.mockito.release.notes.vcs;\n+\n+import java.util.*;\n+\n+class DefaultContributionSet implements ContributionSet {\n+    private final Map<String, DefaultContribution> contributions = new HashMap<String, DefaultContribution>();\n+    private final Collection<Commit> commits = new LinkedList<Commit>();\n+\n+    void add(GitCommit commit) {\n+        if (commit.getMessage().contains(\"[ci skip]\")) {\n+            //we used #id for Travis CI build number in commits performed by Travis. Let's avoid pulling those ids here.\n+            //also, if ci was skipped we probably are not interested in such change, no?\n+            //Currently, all our [ci skip] are infrastructure commits\n+            return;\n+        }\n+        commits.add(commit);\n+        DefaultContribution c = contributions.get(commit.getEmail());\n+        if (c == null) {\n+            contributions.put(commit.getEmail(), c = new DefaultContribution(commit));\n+        } else {\n+            c.add(commit);\n+        }\n+    }\n+\n+    public Collection<Commit> getAllCommits() {\n+        return commits;\n+    }\n+\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(\"* Authors: \").append(contributions.size())\n+                .append(\"\\n* Commits: \").append(commits.size());\n+\n+        for (Map.Entry<String, DefaultContribution> entry : sortByValue(contributions)) {\n+            Contribution c = entry.getValue();\n+            sb.append(\"\\n  * \").append(c);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    public static <K, V extends Comparable<V>> List<Map.Entry<K, V>> sortByValue(Map<K, V> map) {\n+        List<Map.Entry<K, V>> entries = new ArrayList<Map.Entry<K, V>>(map.entrySet());\n+        Collections.sort(entries, new ByValue<K, V>());\n+        return entries;\n+    }\n+\n+    private static class ByValue<K, V extends Comparable<V>> implements Comparator<Map.Entry<K, V>> {\n+        public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n+            return o1.getValue().compareTo(o2.getValue());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java\n+package org.mockito.release.notes.vcs;\n+\n+class GitCommit implements Commit {\n+\n+    private final String email;\n+    private final String author;\n+    private final String message;\n+\n+    public GitCommit(String email, String author, String message) {\n+        this.email = email;\n+        this.author = author;\n+        this.message = message;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public String getAuthor() {\n+        return author;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java\n+package org.mockito.release.notes.vcs;\n+\n+import org.mockito.release.notes.exec.ProcessRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class GitContributionsProvider implements ContributionsProvider {\n+\n+    private static Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);\n+    private final ProcessRunner runner;\n+\n+    GitContributionsProvider(ProcessRunner runner) {\n+        this.runner = runner;\n+    }\n+\n+    public ContributionSet getContributionsBetween(String fromRev, String toRev) {\n+        LOG.info(\"Fetching {} from the repo\", fromRev);\n+\n+        runner.run(\"git\", \"fetch\", \"origin\", \"+refs/tags/$previousVersion:refs/tags/$previousVersion\");\n+\n+        LOG.info(\"Loading all commits between {} and {}\", fromRev, toRev);\n+\n+        String entryToken = \"@@commit@@\";\n+        String infoToken = \"@@info@@\";\n+        String output = runner.run(\"git\", \"log\", \"--pretty=format:%ae\" + infoToken + \"%an\" + infoToken + \"%B%N\" + entryToken, fromRev + \"..\" + toRev);\n+\n+        DefaultContributionSet contributions = new DefaultContributionSet();\n+\n+        for (String entry : output.split(entryToken)) {\n+            String[] entryParts = entry.split(infoToken);\n+            String email = entryParts[0].trim();\n+            String author = entryParts[1].trim();\n+            String message = entryParts[2].trim();\n+            contributions.add(new GitCommit(email, author, message));\n+        }\n+\n+        return contributions;\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n+package org.mockito.release.notes.vcs;\n+\n+import org.mockito.release.notes.exec.ProcessRunner;\n+\n+public class Vcs {\n+\n+    /**\n+     * Provides the ContributionsProvider\n+     */\n+    public static ContributionsProvider getContributionsProvider(ProcessRunner runner) {\n+        return new GitContributionsProvider(runner);\n+    }\n+}", "timestamp": 1416516893, "metainfo": ""}