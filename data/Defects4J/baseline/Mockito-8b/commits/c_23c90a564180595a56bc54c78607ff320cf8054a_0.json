{"sha": "23c90a564180595a56bc54c78607ff320cf8054a", "log": "Made cglib creating FastClasses with Mockito naming policy  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401082", "commit": "\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n package org.mockito.internal.creation;\n \n import java.lang.reflect.Method;\n+\n+import org.mockito.internal.creation.cglib.CGLIBHacker;\n \n import net.sf.cglib.proxy.MethodProxy;\n \n \n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\n             throws Throwable {\n+        //TODO check if this is any useful\n         if (method.isBridge()) {\n             return methodProxy.invokeSuper(proxy, args);\n         }\n         } else if (hashCodeMethod.equals(method)) {\n             return hashCodeForMock(proxy);\n         }\n+        \n+        new CGLIBHacker().setMockitoNamingPolicy(methodProxy);\n         \n         return delegate.intercept(proxy, method, args, methodProxy);\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/cglib/CGLIBHacker.java\n+package org.mockito.internal.creation.cglib;\n+\n+import java.lang.reflect.Field;\n+\n+import net.sf.cglib.proxy.MethodProxy;\n+\n+public class CGLIBHacker {\n+\n+    public void setMockitoNamingPolicy(MethodProxy methodProxy) {\n+        try {\n+            Field createInfoField = methodProxy.getClass().getDeclaredField(\"createInfo\");\n+            createInfoField.setAccessible(true);\n+            Object createInfo = createInfoField.get(methodProxy);\n+            Field namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\n+            namingPolicyField.setAccessible(true);\n+            if (namingPolicyField.get(createInfo) == null) {\n+                namingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to set MockitoNamingPolicy on cglib generator which creates FastClasses\", e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/cglib/MockitoNamingPolicy.java\n+package org.mockito.internal.creation.cglib;\n+\n+import net.sf.cglib.core.DefaultNamingPolicy;\n+\n+public class MockitoNamingPolicy extends DefaultNamingPolicy {\n+    \n+    public static final MockitoNamingPolicy INSTANCE = new MockitoNamingPolicy(); \n+    \n+    @Override\n+    protected String getTag() {\n+        return \"ByMockitoWithCGLIB\";\n+    }\n+}\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n import java.util.List;\n \n import net.sf.cglib.core.CodeGenerationException;\n-import net.sf.cglib.core.DefaultNamingPolicy;\n import net.sf.cglib.core.NamingPolicy;\n import net.sf.cglib.core.Predicate;\n import net.sf.cglib.proxy.Callback;\n import net.sf.cglib.proxy.MethodInterceptor;\n import net.sf.cglib.proxy.NoOp;\n \n+import org.mockito.internal.creation.cglib.MockitoNamingPolicy;\n import org.objenesis.ObjenesisStd;\n \n /**\n     \n     private ObjenesisStd objenesis = new ObjenesisStd();\n     \n-    private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new DefaultNamingPolicy() {\n+    private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {\n         @Override\n         public String getClassName(String prefix, String source, Object key, Predicate names) {\n             return \"codegen.\" + super.getClassName(prefix, source, key, names);\n-        }\n-        \n-        @Override\n-        protected String getTag() {\n-            return \"ByMockitoWithCGLIB\";\n-        }        \n-    };\n-    \n-    private static final NamingPolicy MOCKITO_NAMING_POLICY = new DefaultNamingPolicy() {\n-        @Override\n-        protected String getTag() {\n-            return \"ByMockitoWithCGLIB\";\n         }\n     };\n     \n         if (mockedType.getSigners() != null) {\n             enhancer.setNamingPolicy(NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES);\n         } else {\n-            enhancer.setNamingPolicy(MOCKITO_NAMING_POLICY);\n+            enhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\n         }\n         \n         try {", "timestamp": 1226507588, "metainfo": ""}