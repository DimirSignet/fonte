{"sha": "efa9b555bc9805bd546151c32b5658b3fb8f23ea", "log": "added javadoc generation and some more documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40203", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n import org.mockito.exceptions.parents.HasStackTrace;\n import org.mockito.exceptions.parents.MockitoException;\n-import org.mockito.exceptions.verification.NumberOfInvocationsError;\n import org.mockito.exceptions.verification.TooLittleActualInvocationsError;\n import org.mockito.exceptions.verification.TooManyActualInvocationsError;\n import org.mockito.exceptions.verification.VerificationError;\n \n /**\n+ * Reports verification and misusing errors.\n+ * <p>\n  * One of the key points of mocking library is proper verification/exception\n- * messages. All messages in one place makes it easier to tune and amend.\n+ * messages. All messages in one place makes it easier to tune and amend them.\n+ * <p>\n+ * Reporter can be injected and therefore is easily testable.\n+ * <p>\n+ * Generally, exception messages are full of line breaks to make them easy to\n+ * read (xunit plugins take only fraction of screen on modern IDEs).\n  */\n public class Reporter {\n \n         ));\n     }\n \n-    public void numberOfInvocationsDiffers(int wantedCount, int actualCount, String wanted) {\n-        throw new NumberOfInvocationsError(join(\n-                wanted,\n-                \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n-        ));\n-    }\n-\n     public void tooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n         FirstUndesiredInvocation cause = new FirstUndesiredInvocation(join(\"First undesired invocation:\"));\n         cause.setStackTrace(firstUndesired.getStackTrace());\n--- a/src/org/mockito/exceptions/StringJoiner.java\n+++ b/src/org/mockito/exceptions/StringJoiner.java\n         int lastBreak = out.lastIndexOf(\"\\n\");\n         return out.replace(lastBreak, lastBreak+1, \"\").toString();\n     }\n-}\n+}\n--- a/src/org/mockito/internal/matchers/ArrayEquals.java\n+++ b/src/org/mockito/internal/matchers/ArrayEquals.java\n                 && (actual == null || actual instanceof Object[])) {\n             return Arrays.equals((Object[]) wanted, (Object[]) actual);\n         } else {\n-            throw new IllegalStateException(\"Something went really wrong. Arguments passed to ArrayEquals have to be an array or null!\");\n+            throw new IllegalArgumentException(\"Something went really wrong. Arguments passed to ArrayEquals have to be an array or null!\");\n         }\n     }\n \n--- a/src/org/mockito/internal/matchers/EqualsWithDelta.java\n+++ b/src/org/mockito/internal/matchers/EqualsWithDelta.java\n                         + delta.doubleValue();\n     }\n \n+    //TODO not tested\n     public void appendTo(StringBuilder buffer) {\n         buffer.append(\"eq(\" + wanted + \", \" + delta + \")\");\n     }", "timestamp": 1197725225, "metainfo": ""}