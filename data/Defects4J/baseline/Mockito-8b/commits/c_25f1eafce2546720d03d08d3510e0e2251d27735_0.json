{"sha": "25f1eafce2546720d03d08d3510e0e2251d27735", "log": "name change refactoring  --HG-- rename : src/org/mockito/exceptions/verification/VerifcationInOrderFailed.java => src/org/mockito/exceptions/verification/VerifcationInOrderFailure.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40326", "commit": "\n--- a/src/org/mockito/exceptions/Printable.java\n+++ b/src/org/mockito/exceptions/Printable.java\n package org.mockito.exceptions;\n \n-//TODO exceptions.Printable ?\n public interface Printable {\n \n     String toString();\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n /**\n                         previous.toString()));\n         cause.setStackTrace(previousStackTrace.getStackTrace());\n         \n-        throw new VerifcationInOrderFailed(join(\n-                    \"Verification in order failed\",\n+        throw new VerifcationInOrderFailure(join(\n+                    \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n                     wanted.toString()\n         ), cause);\n     public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, Printable wanted, HasStackTrace firstUndesired) {\n         UndesiredInvocation cause = createUndesiredInvocationCause(firstUndesired);\n \n-        throw new VerifcationInOrderFailed(join(\n-                \"Verification in order failed\",\n+        throw new VerifcationInOrderFailure(join(\n+                \"Verification in order failure\",\n                 wanted.toString(),\n                 \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n         ), cause);\n     public void tooLittleActualInvocationsInOrder(int wantedCount, int actualCount, Printable wanted, HasStackTrace lastActualStackTrace) {\n         TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n \n-        throw new VerifcationInOrderFailed(join(\n-                \"Verification in order failed\",\n+        throw new VerifcationInOrderFailure(join(\n+                \"Verification in order failure\",\n                 wanted.toString(),\n                 \"Wanted \" + pluralize(wantedCount) + \" but was \" + actualCount\n         ), cause);\n--- /dev/null\n+++ b/src/org/mockito/exceptions/verification/VerifcationInOrderFailure.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.verification;\n+\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+\n+public class VerifcationInOrderFailure extends MockitoAssertionError {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public VerifcationInOrderFailure(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    public VerifcationInOrderFailure(String message) {\n+        super(message);\n+    }\n+}\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n         try {\n             verifier.verify(invocations, wanted, new VerificationModeBuilder().times(4).inOrder());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 4 times but was 2\"));\n         }\n     }\n         try {\n             verifier.verify(invocations, wanted, new VerificationModeBuilder().times(1).inOrder());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e, messageContains(\"Wanted 1 time but was 2\"));\n         }\n     }\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationChunkInOrderTest.java\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n \n //TODO pmd rule so that all that starts with should have @Test annotation (or all XTest have some annotations on public methods)\n public class PointingStackTraceToActualInvocationChunkInOrderTest extends RequiresValidState {\n         try {\n             inOrder.verify(mock).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"secondChunk\"));\n         }\n     }\n         try {\n             inOrder.verify(mockTwo).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"fourthChunk\"));\n         }\n     }\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationInOrderTest.java\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n \n public class PointingStackTraceToActualInvocationInOrderTest extends RequiresValidState {\n     \n         try {\n             inOrder.verify(mock).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"fourth\"));\n         }\n     }\n         try {\n             inOrder.verify(mockTwo).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"third\"));\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(3)).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"second\"));\n         }\n     }\n         try {\n             inOrder.verify(mock, times(0)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"first\"));\n         }\n     }    \n         try {\n             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"second\"));\n         }\n     }\n         try {\n             inOrder.verify(mockTwo, times(3)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"fourth\"));\n         }\n     }\n--- a/test/org/mockitousage/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/StackTraceFilteringTest.java\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n public class StackTraceFilteringTest extends RequiresValidState {\n         try {\n             inOrder.verify(mock).oneArg(true);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             assertThat(e, hasFirstMethodInStackTrace(\"shouldFilterStacktraceWhenVerifyingInOrder\"));\n         }\n     }\n--- a/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.InOrder;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(4);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n-    }\n-    \n-    @Test(expected=VerifcationInOrderFailed.class)\n+        } catch (VerifcationInOrderFailure e) {}\n+    }\n+    \n+    @Test(expected=VerifcationInOrderFailure.class)\n     public void shouldFailOnFirstMethodBecauseOneInvocationWanted() {\n         inOrder.verify(mockOne, times(0)).simpleMethod(1);\n     }\n     \n-    @Test(expected=VerifcationInOrderFailed.class)\n+    @Test(expected=VerifcationInOrderFailure.class)\n     public void shouldFailOnFirstMethodBecauseOneInvocationWantedAgain() {\n         inOrder.verify(mockOne, times(2)).simpleMethod(1);\n     }\n         try {\n             inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }    \n     \n     @Test\n         try {\n             inOrder.verify(mockOne, times(0)).simpleMethod(4);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne, times(2)).simpleMethod(4);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }    \n     \n     /* ------------- */\n         try {\n             inOrder.verify(mockTwo, times(2)).simpleMethod(-999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(2)).oneArg(true);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }    \n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(-666);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).oneArg(false);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }    \n     \n     /* -------------- */\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n         try {\n             inOrder.verify(one, atLeastOnce()).simpleMethod(11);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             String expected = \n                     \"\\n\" +\n-                    \"Verification in order failed\" +\n+                    \"Verification in order failure\" +\n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n         try {\n             inOrder.verify(three).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Verification in order failed\" +\n+                    \"Verification in order failure\" +\n                     \"\\n\" +\n                     \"Wanted but not invoked:\" +\n                     \"\\n\" +\n         try {\n             inOrder.verify(two, times(1)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Verification in order failed\" +\n+                    \"Verification in order failure\" +\n                     \"\\n\" +\n                     \"IMethods.simpleMethod(2)\" +\n                     \"\\n\" +\n         try {\n             inOrder.verify(two, times(2)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {\n+        } catch (VerifcationInOrderFailure e) {\n             String actualMessage = e.getMessage();\n             String expectedMessage = \n                     \"\\n\" +\n-                    \"Verification in order failed\" +\n+                    \"Verification in order failure\" +\n                     \"\\n\" +\n                     \"IMethods.simpleMethod(2)\" +\n                     \"\\n\" +\n--- a/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n         try {\n             inOrder.verify(mockThree).simpleMethod(3);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         } catch (NoInteractionsWanted e) {}\n     }\n     \n-    @Test(expected=VerifcationInOrderFailed.class)\n+    @Test(expected=VerifcationInOrderFailure.class)\n     public void shouldFailVerificationOfNonFirstChunk() {\n         inOrder.verify(mockTwo, times(1)).simpleMethod(2);\n     }\n         try {\n             inOrder.verify(mockThree, times(0)).simpleMethod(3);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n-    }\n-    \n-    @Test(expected=VerifcationInOrderFailed.class)\n+        } catch (VerifcationInOrderFailure e) {}\n+    }\n+    \n+    @Test(expected=VerifcationInOrderFailure.class)\n     public void shouldFailWhenMockTwoWantedZeroTimes() {\n         inOrder.verify(mockTwo, times(0)).simpleMethod(2);\n     }\n         try {\n             inOrder.verify(mockTwo, atLeastOnce()).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(999);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n }\n--- a/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n+++ b/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.InOrder;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n         try {\n             inOrder.verify(mockOne).differentMethod();\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     } \n     \n     @Test\n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     } \n \n     @Test\n         try {\n             inOrder.verify(mockTwo).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(4)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockTwo, times(2)).simpleMethod(2);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n--- a/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n import org.mockito.InOrder;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n         try {\n             inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test(expected=MockitoException.class)\n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.verification.VerifcationInOrderFailed;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n         try {\n             inOrder.verify(mockOne).simpleMethod(1);\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     } \n     \n     @Test\n         try {\n             inOrder.verify(mockOne, atLeastOnce()).simpleMethod();\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n     \n     @Test\n         try {\n             inOrder.verify(mockOne, times(3)).simpleMethod(anyInt());\n             fail();\n-        } catch (VerifcationInOrderFailed e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n }", "timestamp": 1201038404, "metainfo": ""}