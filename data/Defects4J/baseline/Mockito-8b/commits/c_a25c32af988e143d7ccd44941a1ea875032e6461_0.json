{"sha": "a25c32af988e143d7ccd44941a1ea875032e6461", "log": "In order to hide one piece that is not ready yet  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401878", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     }\n \n     /*\n-     * Helps debugging failing tests. Not yet ready.\n-     */\n-    public static MockitoDebugger debug() {\n+     * Helps debugging failing tests. Experimental - use at your own risk. \n+     */\n+    @Deprecated\n+    static MockitoDebugger debug() {\n         return new MockitoDebuggerImpl();\n     }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/debugging/NewMockito.java\n+package org.mockitousage.debugging;\n+\n+import org.mockito.Mockito;\n+import org.mockito.MockitoDebugger;\n+import org.mockito.internal.debugging.MockitoDebuggerImpl;\n+\n+//TODO get rid when debug() finally is out\n+public class NewMockito extends Mockito {\n+    \n+    public static MockitoDebugger debug() {\n+        return new MockitoDebuggerImpl();\n+    }\n+}\n--- a/test/org/mockitousage/debugging/PrintingInvocationsDetectsUnusedStubTest.java\n+++ b/test/org/mockitousage/debugging/PrintingInvocationsDetectsUnusedStubTest.java\n package org.mockitousage.debugging;\n+\n+import static org.mockito.BDDMockito.*;\n \n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockitoutil.TestBase;\n-\n-import static org.mockito.BDDMockito.*;\n \n public class PrintingInvocationsDetectsUnusedStubTest extends TestBase {\n \n         mock.giveMeSomeString(\"arg\");\n \n         //when\n-        String log = Mockito.debug().printInvocations(mock, mockTwo);\n+        String log = NewMockito.debug().printInvocations(mock, mockTwo);\n \n         //then\n         assertContainsIgnoringCase(\"unused\", log);\n--- a/test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java\n+++ b/test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java\n package org.mockitousage.debugging;\n+\n+import static org.mockito.BDDMockito.*;\n \n import org.junit.After;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockitoutil.TestBase;\n-\n-import static org.mockito.BDDMockito.*;\n \n public class PrintingInvocationsWhenEverythingOkTest extends TestBase {\n \n \n     @After\n     public void printInvocations() {\n-        String log = Mockito.debug().printInvocations(mock, mockTwo);\n+        String log = NewMockito.debug().printInvocations(mock, mockTwo);\n         //asking\n         assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n         assertContains(\".businessLogicWithAsking(\", log);\n--- a/test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java\n+++ b/test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java\n \n import org.junit.After;\n import org.junit.Test;\n-import org.mockito.Mockito;\n import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n import org.mockitoutil.TestBase;\n \n \n     @After\n     public void printInvocations() {\n-        String log = Mockito.debug().printInvocations(mock, mockTwo);\n+        String log = NewMockito.debug().printInvocations(mock, mockTwo);\n         //asking\n         assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n         assertContains(\".businessLogicWithAsking(\", log);", "timestamp": 1267561399, "metainfo": ""}