{"sha": "9a032513dc6c072c90f4e4969670462277de399b", "log": "added pmd rule to check that all tests should require valid state  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40145", "commit": "\n--- a/test/org/mockito/exceptions/StackTraceRemoverTest.java\n+++ b/test/org/mockito/exceptions/StackTraceRemoverTest.java\n package org.mockito.exceptions;\n \n-import static org.junit.Assert.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.util.ExtraMatchers.collectionIsExactlyInOrder;\n+\n import java.util.*;\n \n import org.junit.Test;\n+import org.mockito.util.RequiresValidState;\n \n-public class StackTraceRemoverTest {\n+public class StackTraceRemoverTest extends RequiresValidState {\n \n     private StackTraceElement[] stackTrace;\n     private List<StackTraceElement> causeStackTrace;\n--- a/test/org/mockito/util/RequiresValidState.java\n+++ b/test/org/mockito/util/RequiresValidState.java\n import org.junit.Before;\n import org.mockito.internal.*;\n \n+/**\n+ * the easiest way to make sure that tests clean up invalid state is to require\n+ * valid state for all tests\n+ */\n public class RequiresValidState {\n \n-    @Before public void requiresValidState() {\n+    @Before\n+    public void requiresValidState() {\n         MockitoState.instance().validateState();\n     }\n }\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.exceptions.*;\n import org.mockito.internal.*;\n import org.mockito.internal.matchers.EqualsTest;\n+import org.mockito.util.RequiresValidState;\n import org.mockitousage.binding.*;\n import org.mockitousage.matchers.*;\n import org.mockitousage.sample.MockitoSampleTest;\n import org.mockitousage.stubbing.*;\n import org.mockitousage.verification.*;\n \n-public class MultiThreadedTest {\n+public class MultiThreadedTest extends RequiresValidState {\n     \n     private static class AllTestsRunner extends Thread {\n         ", "timestamp": 1197161340, "metainfo": ""}