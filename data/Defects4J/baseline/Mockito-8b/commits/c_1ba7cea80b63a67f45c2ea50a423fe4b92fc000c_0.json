{"sha": "1ba7cea80b63a67f45c2ea50a423fe4b92fc000c", "log": "Improved exception messages.  Issue #92", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.invocation.Location;\n import org.mockito.listeners.InvocationListener;\n+\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+\n import static org.mockito.internal.reporting.Pluralizer.pluralize;\n import static org.mockito.internal.util.StringJoiner.join;\n \n--- a/src/org/mockito/internal/creation/cglib/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/cglib/ClassImposterizer.java\n import org.mockito.cglib.core.Predicate;\n import org.mockito.cglib.proxy.*;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.creation.instance.InstantationException;\n import org.mockito.internal.creation.instance.Instantiator;\n import org.mockito.internal.creation.util.SearchingClassLoader;\n \n     }\n     \n     private Object createProxy(Class<Factory> proxyClass, final MethodInterceptor interceptor) {\n-        Factory proxy = instantiator.newInstance(proxyClass);\n+        Factory proxy;\n+        try {\n+            proxy = instantiator.newInstance(proxyClass);\n+        } catch (InstantationException e) {\n+            throw new MockitoException(\"Unable to create mock instance of type '\" + proxyClass.getSuperclass().getSimpleName() + \"'\", e);\n+        }\n         proxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\n         return proxy;\n     }\n--- a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n \n     public <T> T newInstance(Class<T> cls) {\n         try {\n-            if (outerClassInstance != null) {\n-                Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n-                return c.newInstance(outerClassInstance);\n+            if (outerClassInstance == null) {\n+                return cls.newInstance();\n             }\n-            return cls.newInstance();\n+            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n+            return c.newInstance(outerClassInstance);\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Problems instantiating class: \" + cls, e);\n+            throw new InstantationException(\"Unable to create mock instance of '\"\n+                    + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e);\n         }\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/InstantationException.java\n+package org.mockito.internal.creation.instance;\n+\n+public class InstantationException extends RuntimeException {\n+\n+    public InstantationException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n--- a/src/org/mockito/internal/creation/instance/Instantiator.java\n+++ b/src/org/mockito/internal/creation/instance/Instantiator.java\n     /**\n      * Creates instance of given class\n      */\n-    <T> T newInstance(Class<T> cls);\n+    <T> T newInstance(Class<T> cls) throws InstantationException;\n+\n }\n--- a/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n+++ b/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n package org.mockito.internal.creation.instance;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockitoutil.TestBase;\n \n \n     static class SomeClass {}\n     class SomeInnerClass {}\n+    static class SomeClass2 {\n+        SomeClass2(String x) {}\n+    }\n \n     @Test public void creates_instances() {\n         assertEquals(new ConstructorInstantiator(null).newInstance(SomeClass.class).getClass(), SomeClass.class);\n         assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);\n     }\n \n-    @Ignore //TODO SF\n     @Test public void explains_when_constructor_cannot_be_found() {\n-        fail();\n-    }\n-\n-    @Ignore //TODO SF\n-    @Test public void fails_with_graceful_message() {\n-        fail();\n+        try {\n+            new ConstructorInstantiator(null).newInstance(SomeClass2.class);\n+            fail();\n+        } catch (InstantationException e) {\n+            assertEquals(\"Please ensure it has parameter-less constructor.\", e.getMessage());\n+        }\n     }\n }\n--- a/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n         assertEquals(\"hey!\", mock.getMessage());\n     }\n \n+    static class HasConstructor {\n+        HasConstructor(String x) {}\n+    }\n+\n+    @Test\n+    public void exception_message_when_constructor_not_found() {\n+        try {\n+            //when\n+            spy(HasConstructor.class);\n+            //then\n+            fail();\n+        } catch (MockitoException e) {\n+            assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());\n+            assertContains(\"Please ensure it has parameter-less constructor\", e.getCause().getMessage());\n+        }\n+    }\n+\n     @Test\n     @Ignore //TODO SF\n     public void mocking_inner_classes_with_wrong_outer_instance() {", "timestamp": 1416176170, "metainfo": ""}