{"sha": "c03a47fb2d3d4df94ba608c26a0a7570798b3611", "log": "Improved exception messages.  Issue #92", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.invocation.Location;\n import org.mockito.listeners.InvocationListener;\n+import org.mockito.mock.SerializableMode;\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n     \t        \"(delegate instance had type: \" + delegate.getClass().getSimpleName() + \")\"\n     \t));\n \t}\n+\n+    public void usingConstructorWithFancySerializable(SerializableMode mode) {\n+        throw new MockitoException(\"Mocks instantiated with constructor cannot be combined with \" + mode + \" serialization mode.\");\n+    }\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n //        validator.validateDelegatedInstance(classToMock, settings.getDelegatedInstance());\n \n         validator.validateSerializable(typeToMock, source.isSerializable());\n+        validator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());\n \n+        //TODO SF - I don't think we really need CreationSettings type\n         CreationSettings<T> settings = new CreationSettings<T>(source);\n         settings.setMockName(new MockNameImpl(source.getName(), typeToMock));\n         settings.setTypeToMock(typeToMock);\n--- a/src/org/mockito/internal/util/MockCreationValidator.java\n+++ b/src/org/mockito/internal/util/MockCreationValidator.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.util.reflection.Constructors;\n+import org.mockito.mock.SerializableMode;\n \n import java.io.Serializable;\n import java.util.Collection;\n             new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);\n         }\n     }\n+\n+    public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\n+        if (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n+            new Reporter().usingConstructorWithFancySerializable(mode);\n+        }\n+    }\n }\n--- a/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\n import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.mock.SerializableMode;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     }\n \n     @Test\n-    @Ignore //TODO SF\n     public void prevents_across_jvm_serialization_with_constructor() {\n-        fail();\n+        try {\n+            //when\n+            mock(AbstractMessage.class, withSettings().useConstructor().serializable(SerializableMode.ACROSS_CLASSLOADERS));\n+            //then\n+            fail();\n+        } catch (MockitoException e) {\n+            assertEquals(\"Mocks instantiated with constructor cannot be combined with \" + SerializableMode.ACROSS_CLASSLOADERS + \" serialization mode.\", e.getMessage());\n+        }\n     }\n }", "timestamp": 1416180708, "metainfo": ""}