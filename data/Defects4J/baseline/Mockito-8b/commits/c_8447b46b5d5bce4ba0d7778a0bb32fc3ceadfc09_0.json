{"sha": "8447b46b5d5bce4ba0d7778a0bb32fc3ceadfc09", "log": "added hashCode value to toString() method for mock. It can be useful for debugging purposes, see issue #6  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40486", "commit": "\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n         if (equalsMethod.equals(method)) {\n             return Boolean.valueOf(proxy == args[0]);\n         } else if (hashCodeMethod.equals(method)) {\n-            return new Integer(System.identityHashCode(proxy));\n+            return hashCodeForMock(proxy);\n         } else if (toStringMethod.equals(method)) {\n-            return mockToString(proxy);\n+            return stringForMock(proxy);\n         }\n         \n         return delegate.intercept(proxy, method, args, null);\n     }\n \n-    private String mockToString(Object mock) {\n-        return \"Mock for \" + MockNamer.nameForMock(mock);\n+    private int hashCodeForMock(Object mock) {\n+        return new Integer(System.identityHashCode(mock));\n+    }\n+\n+    private String stringForMock(Object mock) {\n+        return \"Mock for \" + MockNamer.nameForMock(mock) + \", hashCode: \" + hashCodeForMock(mock);\n     }\n \n     public T getDelegate() {\n--- a/test/org/mockitousage/ReplacingObjectMethodsTest.java\n+++ b/test/org/mockitousage/ReplacingObjectMethodsTest.java\n     \n     @Test\n     public void shouldProvideMockyImplementationOfToString() {\n-        assertEquals(\"Mock for DummyClass\", Mockito.mock(DummyClass.class).toString());\n-        assertEquals(\"Mock for DummyInterface\", Mockito.mock(DummyInterface.class).toString());\n+        DummyClass dummyClass = Mockito.mock(DummyClass.class);\n+        assertEquals(\"Mock for DummyClass, hashCode: \" + dummyClass.hashCode(), dummyClass.toString());\n+        DummyInterface dummyInterface = Mockito.mock(DummyInterface.class);\n+        assertEquals(\"Mock for DummyInterface, hashCode: \" + dummyInterface.hashCode(), dummyInterface.toString());\n     }\n     \n     @Test \n         \n         assertThat(mock.hashCode(), not(equalTo(otherMock.hashCode())));\n         \n-        assertThat(mock.toString(), equalTo(\"Mock for ObjectMethodsOverridden\"));\n+        assertContains(\"Mock for ObjectMethodsOverridden\", mock.toString());\n     }\n     \n     @Test \n         \n         assertThat(mock.hashCode(), not(equalTo(otherMock.hashCode())));\n         \n-        assertThat(mock.toString(), equalTo(\"Mock for ObjectMethodsOverriddenSubclass\"));\n+        assertContains(\"Mock for ObjectMethodsOverriddenSubclass\", mock.toString());\n     }\n     \n     public static class ObjectMethodsOverridden {", "timestamp": 1206211271, "metainfo": ""}