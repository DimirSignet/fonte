{"sha": "c7be3968d5ab439a7a2a9073bd1199857a9b939f", "log": "Some clean-up with classes leaking to the public API. Made the JUnitTool private.  --HG-- rename : src/org/mockito/exceptions/verification/junit/JUnitTool.java => src/org/mockito/internal/junit/JUnitTool.java", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n-import org.mockito.exceptions.verification.junit.JUnitTool;\n import org.mockito.internal.debugging.LocationImpl;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.exceptions.util.ScenarioPrinter;\n+import org.mockito.internal.junit.JUnitTool;\n import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.StringJoiner;\n--- a/src/org/mockito/exceptions/verification/junit/JUnitTool.java\n+++ b/src/org/mockito/exceptions/verification/junit/JUnitTool.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions.verification.junit;\n \n-import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n-\n+@Deprecated\n+/**\n+ * @Deprecated. This class has been moved to internal packages because it was never meant to be public.\n+ * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.junit.JUnitTool}.\n+ * However, the package clearly states that the class in a part of a public API so it can change.\n+ */\n public class JUnitTool {\n-\n-    private static boolean hasJUnit;\n-\n-    static {\n-        try {\n-            Class.forName(\"junit.framework.ComparisonFailure\");\n-            hasJUnit = true;\n-        } catch (Throwable t) {\n-            hasJUnit = false;\n-        }\n-    }\n     \n     public static boolean hasJUnit() {\n-        return hasJUnit;\n+        return org.mockito.internal.junit.JUnitTool.hasJUnit();\n     }\n \n     public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n-        try {\n-            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n-            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n-            return throwable;\n-        } catch (Throwable t) {\n-//            throw the default exception in case of problems\n-            return new ArgumentsAreDifferent(message);\n-        }\n+        return org.mockito.internal.junit.JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/junit/JUnitTool.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.junit;\n+\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n+\n+public class JUnitTool {\n+\n+    private static boolean hasJUnit;\n+\n+    static {\n+        try {\n+            Class.forName(\"junit.framework.ComparisonFailure\");\n+            hasJUnit = true;\n+        } catch (Throwable t) {\n+            hasJUnit = false;\n+        }\n+    }\n+    \n+    public static boolean hasJUnit() {\n+        return hasJUnit;\n+    }\n+\n+    public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n+        try {\n+            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n+            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n+            return throwable;\n+        } catch (Throwable t) {\n+//            throw the default exception in case of problems\n+            return new ArgumentsAreDifferent(message);\n+        }\n+    }\n+}", "timestamp": 1333280689, "metainfo": ""}