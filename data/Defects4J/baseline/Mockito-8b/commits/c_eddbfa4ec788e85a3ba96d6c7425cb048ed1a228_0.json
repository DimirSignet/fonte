{"sha": "eddbfa4ec788e85a3ba96d6c7425cb048ed1a228", "log": "In order to make mocks serializable started work on this feature. Refactoring.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401601", "commit": "\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n @SuppressWarnings(\"unchecked\")\n public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n \n-    private final Method hashCodeMethod;\n-\n     private final IMockHandler mockHandler;\n     CGLIBHacker cglibHacker = new CGLIBHacker();\n     ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();\n \n-    public MethodInterceptorFilter(Class toMock, IMockHandler mockHandler) {\n-        try {\n-            if (toMock.isInterface()) {\n-                toMock = Object.class;\n-            }\n-            hashCodeMethod = toMock.getMethod(\"hashCode\", (Class[]) null);\n-        } catch (NoSuchMethodException e) {\n-            throw new RuntimeException(\"\\nSomething went really wrong. Object method could not be found!\" +\n-                \"\\n please report it to the mocking mailing list at http://mockito.org\");\n-        }\n+    public MethodInterceptorFilter(IMockHandler mockHandler) {\n         this.mockHandler = mockHandler;\n     }\n \n             throws Throwable {\n         if (objectMethodsGuru.isEqualsMethod(method)) {\n             return proxy == args[0];\n-        } else if (hashCodeMethod.equals(method)) {\n+        } else if (objectMethodsGuru.isHashCodeMethod(method)) {\n             return hashCodeForMock(proxy);\n         }\n \n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         \n         MockName mockName = new MockName(settings.getMockName(), classToMock);\n         MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);\n-        MethodInterceptorFilter filter = new MethodInterceptorFilter(classToMock, mockHandler);\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler);\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n         Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n         Object spiedInstance = settings.getSpiedInstance();\n     public <T> void resetMock(T mock) {\n         MockHandler<T> oldMockHandler = getMockHandler(mock);\n         MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(Object.class, newMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n--- a/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n     public boolean isEqualsMethod(Method method) {\n         return method.getName().equals(\"equals\") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class;\n     }\n+\n+    public boolean isHashCodeMethod(Method method) {\n+        return method.getName().equals(\"hashCode\") && method.getParameterTypes().length == 0;\n+    }\n }\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n import org.mockito.internal.IMockHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.Invocation;\n-import org.mockitousage.IMethods;\n import org.mockitousage.MethodsImpl;\n import org.mockitoutil.TestBase;\n \n public class MethodInterceptorFilterTest extends TestBase {\n \n     IMockHandler mockHanlder = Mockito.mock(IMockHandler.class);\n-    MethodInterceptorFilter filter = new MethodInterceptorFilter(IMethods.class, mockHanlder);\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHanlder);\n \n     @Before\n     public void setUp() {\n--- a/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n+++ b/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n     \n     @Test\n     public void shouldKnowToStringMethod() throws Exception {\n-        assertFalse(isToString(String.class.getMethod(\"equals\", Object.class)));\n+        assertFalse(isToString(Object.class.getMethod(\"equals\", Object.class)));\n         assertFalse(isToString(IMethods.class.getMethod(\"toString\", String.class)));\n-        assertTrue(isToString(Object.class.getMethod(\"toString\")));\n+        assertTrue(isToString(IMethods.class.getMethod(\"toString\")));\n     }\n \n     @Test\n     public void shouldKnowEqualsMethod() throws Exception {\n         assertFalse(guru.isEqualsMethod(IMethods.class.getMethod(\"equals\", String.class)));\n+        assertFalse(guru.isEqualsMethod(IMethods.class.getMethod(\"equals\")));\n         assertFalse(guru.isEqualsMethod(Object.class.getMethod(\"toString\")));\n-        assertTrue(guru.isEqualsMethod(String.class.getMethod(\"equals\", Object.class)));\n+        assertTrue(guru.isEqualsMethod(Object.class.getMethod(\"equals\", Object.class)));\n+    }\n+\n+    @Test\n+    public void shouldKnowHashCodeMethod() throws Exception {\n+        assertFalse(guru.isHashCodeMethod(IMethods.class.getMethod(\"toString\")));\n+        assertFalse(guru.isHashCodeMethod(IMethods.class.getMethod(\"hashCode\", String.class)));\n+        assertTrue(guru.isHashCodeMethod(Object.class.getDeclaredMethod(\"hashCode\")));\n     }\n }\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n     void intArgumentMethod(int i);\n \n     boolean equals(String str);\n+\n+    boolean equals();\n+\n+    int hashCode(String str);\n }\n--- a/test/org/mockitousage/MethodsImpl.java\n+++ b/test/org/mockitousage/MethodsImpl.java\n     public boolean equals(String str) {\n         return false;\n     }\n+\n+    public boolean equals() {\n+        return false;\n+    }\n+\n+    public int hashCode(String str) {\n+        return 0;\n+    }\n }", "timestamp": 1251142282, "metainfo": ""}