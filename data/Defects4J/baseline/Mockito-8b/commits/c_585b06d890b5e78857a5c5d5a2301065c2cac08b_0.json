{"sha": "585b06d890b5e78857a5c5d5a2301065c2cac08b", "log": "Merge pull request #29 from marcingrzejszczak/issue421  Issue 421", "commit": "\n--- a/src/org/mockito/internal/util/reflection/FieldInitializer.java\n+++ b/src/org/mockito/internal/util/reflection/FieldInitializer.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n-\n-import org.mockito.exceptions.base.MockitoException;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.util.MockUtil;\n \n /**\n  * Initialize a field with type instance if a default constructor can be found.\n         private Object testClass;\n         private Field field;\n         private ConstructorArgumentResolver argResolver;\n+\t    private final MockUtil mockUtil = new MockUtil();\n         private Comparator<Constructor<?>> byParameterNumber = new Comparator<Constructor<?>>() {\n             public int compare(Constructor<?> constructorA, Constructor<?> constructorB) {\n-                return constructorB.getParameterTypes().length - constructorA.getParameterTypes().length;\n-            }\n+\t            int argLengths = constructorB.getParameterTypes().length - constructorA.getParameterTypes().length;\n+\t            if (argLengths == 0) {\n+\t\t            int constructorAMockableParamsSize = countMockableParams(constructorA);\n+\t\t            int constructorBMockableParamsSize = countMockableParams(constructorB);\n+\t\t            return constructorBMockableParamsSize - constructorAMockableParamsSize;\n+\t            }\n+\t            return argLengths;\n+            }\n+\t        \n+\t        private int countMockableParams(Constructor<?> constructor) {\n+\t\t        int constructorMockableParamsSize = 0;\n+\t\t        for (Class<?> aClass : constructor.getParameterTypes()) {\n+\t\t\t        if(mockUtil.isTypeMockable(aClass)){\n+\t\t\t\t        constructorMockableParamsSize++;\n+\t\t\t        }\n+\t\t        }\n+\t\t        return constructorMockableParamsSize;\n+\t        }\n         };\n \n         /**\n         private Constructor<?> biggestConstructor(Class<?> clazz) {\n             final List<Constructor<?>> constructors = Arrays.asList(clazz.getDeclaredConstructors());\n             Collections.sort(constructors, byParameterNumber);\n-\n+\t\t\t\n             Constructor<?> constructor = constructors.get(0);\n             checkParameterized(constructor, field);\n             return constructor;\n--- /dev/null\n+++ b/test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockitousage.annotation;\n+\n+import static org.fest.assertions.Assertions.*;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockitousage.examples.use.ArticleCalculator;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MockInjectionUsingConstructorIssue421Test {\n+\n+    @Mock private ArticleCalculator calculator;\n+\n+    @InjectMocks private Issue421 issue421;\n+\n+    @Test\n+    public void mockJustWorks() {\n+\t    issue421.checkIfMockIsInjected();\n+    }\n+\n+\tstatic class Issue421 {\n+\n+\t\tprivate ArticleCalculator calculator;\n+\n+\t\tpublic Issue421(int a) {\n+\t\t}\n+\n+\t\tpublic Issue421(ArticleCalculator calculator) {\n+\t\t\tthis.calculator = calculator;\n+\t\t}\n+\n+\t\tpublic void checkIfMockIsInjected(){\n+\t\t\tassertThat(new MockUtil().isMock(calculator)).isTrue();\n+\t\t}\n+\t}\n+\n+}", "timestamp": 1387885124, "metainfo": ""}