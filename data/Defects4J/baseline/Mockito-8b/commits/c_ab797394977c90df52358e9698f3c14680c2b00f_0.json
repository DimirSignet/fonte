{"sha": "ab797394977c90df52358e9698f3c14680c2b00f", "log": "fixed build (PMD errors), some rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40602", "commit": "\n--- a/src/org/mockito/internal/stubbing/AnswerFactory.java\n+++ b/src/org/mockito/internal/stubbing/AnswerFactory.java\n @SuppressWarnings(\"unchecked\")\n public class AnswerFactory {\n \n-    public static Answer createThrowResult(final Throwable throwable, final StackTraceFilter filter) {\n+    public static Answer createThrowingAnswer(final Throwable throwable, final StackTraceFilter filter) {\n         return new Answer<Object>() {\n             public Object answer() throws Throwable {\n                 Throwable filtered = throwable.fillInStackTrace();\n         };\n     }\n     \n-    public static Answer createReturnResult(final Object value) {\n+    public static Answer createReturningAnswer(final Object value) {\n         return new Answer<Object>() {\n             public Object answer() throws Throwable {\n                 return value;\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n     \n     public void addReturnValue(Object value) {\n         mockingProgress.stubbingCompleted();\n-        addResult(AnswerFactory.createReturnResult(value));\n+        addResult(AnswerFactory.createReturningAnswer(value));\n     }\n     \n     public void addThrowable(Throwable throwable) {\n         mockingProgress.stubbingCompleted();\n         validateThrowable(throwable);\n-        addResult(AnswerFactory.createThrowResult(throwable, new StackTraceFilter()));\n+        addResult(AnswerFactory.createThrowingAnswer(throwable, new StackTraceFilter()));\n     }\n     \n     private void addResult(Answer result) {\n     }\n     \n     public void addConsecutiveReturnValue(Object value) {\n-        stubbed.getFirst().addAnswer(AnswerFactory.createReturnResult(value));\n+        stubbed.getFirst().addAnswer(AnswerFactory.createReturningAnswer(value));\n     }\n \n     public void addConsecutiveThrowable(Throwable throwable) {\n+        //TODO move validation of throwable to createThrowResult\n         validateThrowable(throwable);\n-        stubbed.getFirst().addAnswer(AnswerFactory.createThrowResult(throwable, new StackTraceFilter()));\n+        stubbed.getFirst().addAnswer(AnswerFactory.createThrowingAnswer(throwable, new StackTraceFilter()));\n     }    \n \n     public Object resultFor(Invocation invocation) throws Throwable {\n--- a/test/org/mockito/internal/stubbing/AnswerFactoryTest.java\n+++ b/test/org/mockito/internal/stubbing/AnswerFactoryTest.java\n \n     @Test\n     public void shouldCreateReturnResult() throws Throwable {\n-        Answer result = AnswerFactory.createReturnResult(\"lol\");\n+        Answer result = AnswerFactory.createReturningAnswer(\"lol\");\n         assertEquals(\"lol\", result.answer());\n     }\n     \n     @Test(expected=RuntimeException.class)\n     public void shouldCreateThrowResult() throws Throwable {\n-        AnswerFactory.createThrowResult(new RuntimeException(), new StackTraceFilter()).answer();\n+        AnswerFactory.createThrowingAnswer(new RuntimeException(), new StackTraceFilter()).answer();\n     }\n     \n     @Test\n     public void shouldFilterStackTraceWhenCreatingThrowResult() throws Throwable {\n         StackTraceFilterStub filterStub = new StackTraceFilterStub();\n-        Answer result = AnswerFactory.createThrowResult(new RuntimeException(), filterStub);\n+        Answer result = AnswerFactory.createThrowingAnswer(new RuntimeException(), filterStub);\n         try {\n             result.answer(); \n             fail();\n--- a/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n \n         try {\n             mock.simpleMethod();\n+            fail();\n         } catch (RuntimeException e) {}\n         \n         try {\n             mock.simpleMethod();\n+            fail();\n         } catch (IllegalArgumentException e) {}\n         \n         try {\n             mock.simpleMethod();\n+            fail();\n         } catch (NullPointerException e) {}\n         \n         try {\n             mock.simpleMethod();\n+            fail();\n         } catch (NullPointerException e) {}\n     }\n     \n         \n         try {\n             mock.simpleMethod();\n+            fail();\n         } catch (IllegalArgumentException e) {}\n         \n         assertEquals(\"one\", mock.simpleMethod());\n         \n         try {\n             mock.simpleMethod();\n+            fail();\n         } catch (NullPointerException e) {}\n         \n         assertEquals(null, mock.simpleMethod());", "timestamp": 1209067639, "metainfo": ""}