{"sha": "bb56055b50ddb97e7fbe3182e26f7da684438df3", "log": "Working on issue 191 (allow inline mock stubbing)  --HG-- rename : test/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java => test/org/mockitousage/bugs/ShouldAllowInlineMockCreationTest.java", "commit": "\n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n     }\n \n     public void validateState() {\n+        validateMostStuff();\n+        \n+        //validate stubbing:\n+        if (stubbingInProgress != null) {\n+            Location temp = stubbingInProgress;\n+            stubbingInProgress = null;\n+            reporter.unfinishedStubbing(temp);\n+        }\n+    }\n+\n+    private void validateMostStuff() {\n         //State is cool when GlobalConfiguration is already loaded\n-        //this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class \n+        //this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class\n         GlobalConfiguration.validate();\n-        \n+\n         if (verificationMode != null) {\n             Location location = verificationMode.getLocation();\n             verificationMode = null;\n             reporter.unfinishedVerificationException(location);\n         }\n-        \n-        if (stubbingInProgress != null) {\n-            Location temp = stubbingInProgress;\n-            stubbingInProgress = null;\n-            reporter.unfinishedStubbing(temp);\n-        }\n-      \n+\n         getArgumentMatcherStorage().validateState();\n     }\n \n         if (listener != null && listener instanceof MockingStartedListener) {\n             ((MockingStartedListener) listener).mockingStarted(mock, classToMock, mockSettings);\n         }\n-        validateState();\n+        validateMostStuff();\n     }\n \n     public void setListener(MockingProgressListener listener) {\n--- a/test/org/mockito/internal/InvalidStateDetectionTest.java\n+++ b/test/org/mockito/internal/InvalidStateDetectionTest.java\n \n         when(mock.simpleMethod());\n         detectsAndCleansUp(new OnDoAnswer(), UnfinishedStubbingException.class);\n-        \n-        when(mock.simpleMethod());\n-        detectsAndCleansUp(new OnMockCreation(), UnfinishedStubbingException.class);\n-        \n-        when(mock.simpleMethod());\n-        detectsAndCleansUp(new OnSpyCreation(), UnfinishedStubbingException.class);\n     }\n     \n     @Test\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/ShouldAllowInlineMockCreationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.fest.assertions.Assertions;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.mockito.Mockito.*;\n+\n+//see issue 191\n+public class ShouldAllowInlineMockCreationTest extends TestBase {\n+\n+    @Mock List list;\n+\n+    @Test\n+    public void shouldAllowInlineMockCreation() {\n+        when(list.get(0)).thenReturn(mock(Set.class));\n+        assertTrue(list.get(0) instanceof Set);\n+    }\n+}", "timestamp": 1288558383, "metainfo": ""}