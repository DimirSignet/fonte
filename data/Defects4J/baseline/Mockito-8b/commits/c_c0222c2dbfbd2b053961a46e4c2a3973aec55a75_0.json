{"sha": "c0222c2dbfbd2b053961a46e4c2a3973aec55a75", "log": "Inform the user immediately when she tries to 'callRealMethod()' on a mock of a interface. Fixed issue 140  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401661", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );\"\n         ));\n     }\n+\n+    public void cannotCallRealMethodOnInterface() {\n+        throw new MockitoException(join(\n+                \"Cannot call real methond on java interface. Interface does not have any implementation!\",\n+                \"Calling real methods is only possible when mocking concrete classes.\",\n+                \"  //correct:\",\n+                \"  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();\"\n+        ));\n+    }\n }\n--- a/src/org/mockito/internal/invocation/MockitoMethod.java\n+++ b/src/org/mockito/internal/invocation/MockitoMethod.java\n \n   boolean isVarArgs();\n \n+  Class<?> getDeclaringClass();\n+\n }\n--- a/src/org/mockito/internal/invocation/SerializableMockitoMethod.java\n+++ b/src/org/mockito/internal/invocation/SerializableMockitoMethod.java\n     }\n \n     public String getName() {\n-      return methodName;\n+        return methodName;\n     }\n-    \n+\n     public Class<?> getReturnType() {\n-      return returnType;\n+        return returnType;\n     }\n-    \n+\n     public Class<?>[] getParameterTypes() {\n-      return parameterTypes;\n+        return parameterTypes;\n     }\n \n     public Class<?>[] getExceptionTypes() {\n-      return exceptionTypes;\n+        return exceptionTypes;\n     }\n \n     public boolean isVarArgs() {\n-      return isVarArgs;\n+        return isVarArgs;\n+    }\n+\n+    public Class<?> getDeclaringClass() {\n+        return declaringClass;\n     }\n \n     @Override\n--- a/src/org/mockito/internal/stubbing/BaseStubbing.java\n+++ b/src/org/mockito/internal/stubbing/BaseStubbing.java\n         return stubbing;\n     }        \n \n-    //TODO: after 1.8 fail when someone tries to do it with a mock of an Interface\n     public OngoingStubbing<T> thenCallRealMethod() {\n         return thenAnswer(new CallsRealMethods());\n     }\n--- a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n         \n         if (answer instanceof DoesNothing) {\n             validateDoNothing((DoesNothing) answer, invocation);\n+        }\n+        \n+        if (answer instanceof CallsRealMethods) {\n+            validateMockingConcreteClass((CallsRealMethods) answer, invocation);\n+        }\n+    }\n+\n+    private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {\n+        if (invocation.getMethod().getDeclaringClass().isInterface()) {\n+            reporter.cannotCallRealMethodOnInterface();\n         }\n     }\n \n--- a/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n  */\n package org.mockito.internal.stubbing.answers;\n \n+import static org.mockito.Mockito.*;\n+\n import java.io.IOException;\n import java.nio.charset.CharacterCodingException;\n+import java.util.ArrayList;\n \n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"unchecked\")\n public class AnswersValidatorTest extends TestBase {\n \n     private AnswersValidator validator = new AnswersValidator();\n     public void shouldFailOnNullWithPrimitive() throws Throwable {\n         validator.validate(new Returns(null), new InvocationBuilder().method(\"booleanReturningMethod\").toInvocation());\n     }\n+    \n+    @Test\n+    public void shouldFailWhenCallingRealMethodOnIterface() throws Throwable {\n+        //given\n+        Invocation inovcationOnIterface = new InvocationBuilder().method(\"simpleMethod\").toInvocation();\n+        try {\n+            //when\n+            validator.validate(new CallsRealMethods(), inovcationOnIterface);\n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+            \n+    @Test\n+    public void shouldBeOKWhenCallingRealMethodOnConcreteClass() throws Throwable {\n+        //given\n+        ArrayList mock = mock(ArrayList.class);\n+        mock.clear();\n+        Invocation invocationOnClass = getLastInvocation();\n+        //when\n+        validator.validate(new CallsRealMethods(), invocationOnClass);\n+        //then no exception is thrown\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/spies/SpyingOnInterfacesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.spies;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings({\"unchecked\", \"serial\"})\n+public class SpyingOnInterfacesTest extends TestBase {\n+\n+    @Test\n+    public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {\n+        List list = mock(List.class);\n+        try {\n+            //when\n+            when(list.get(0)).thenCallRealMethod();\n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+    \n+    @Ignore(\"not yet implemented\")\n+    @Test\n+    public void shouldFailFastWhenCallingRealMethodOnInterface2() throws Exception {\n+        //given\n+        List list = mock(List.class);\n+        when(list.get(0)).thenAnswer(\n+            new Answer() {\n+                public Object answer(InvocationOnMock invocation) throws Throwable {\n+                    return invocation.callRealMethod();\n+                }\n+            }\n+        );\n+        try {\n+            //when\n+            list.get(0);            \n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+}", "timestamp": 1257708745, "metainfo": ""}