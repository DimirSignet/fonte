{"sha": "b548037b9740a3e81bb6962102a57af6f2265008", "log": "Tidied-up the tests and the exception messages", "commit": "\n--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n             Class<?> enclosing = type.getEnclosingClass();\n             if (enclosing != null) {\n                 if (!enclosing.isInstance(testInstance)) {\n-                    throw new MockitoException(\"If you are mocking an inner class please ensure the instance of the outer class is supplied via withSettings().outerInstance()\"\n-                            + \"\\nThe outer class is: '\" + enclosing.getSimpleName() + \"'\");\n+                    throw new MockitoException(\"@Spy annotation can only initialize inner classes declared in the test. \"\n+                            + \"Inner class: '\" + type.getSimpleName() + \"', \"\n+                            + \"outer class: '\" + enclosing.getSimpleName() + \"'.\");\n                 }\n-                //TODO SF find out if it is useful\n-//\t        \t\tif (Modifier.isPrivate(type.getDeclaredConstructor(enclosing).getModifiers())) {\n-//                        throw new AssertionError();\n-//\t        \t\t\tthrow new MockitoException(\"Unable to initialize @Spy annotated field '\" + field.getName() + \"'. \"\n-//                                + \"Cannot spy inner type '\" + type.getSimpleName() + \"' because it has private constructor.\");\n-//\t        \t\t}\n                 return Mockito.mock(type, settings\n                         .useConstructor()\n                         .outerInstance(testInstance));\n--- a/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n+++ b/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n             new ConstructorInstantiator(null).newInstance(SomeClass2.class);\n             fail();\n         } catch (InstantationException e) {\n-            assertEquals(\"Unable to create mock instance of 'SomeClass2'.\\n\" +\n+            assertEquals(\"Unable to create instance of 'SomeClass2'.\\n\" +\n                     \"Please ensure it has 0-arg constructor which invokes cleanly.\", e.getMessage());\n         }\n     }\n--- a/test/org/mockitousage/annotation/SpyAnnotationTest.java\n+++ b/test/org/mockitousage/annotation/SpyAnnotationTest.java\n \t\tclass WithSpy {\n \t\t\t@Spy private Outer.Inner inner;\n \t\t}\n-\t\tshouldThrow.expect(MockitoException.class);\n-\t\tshouldThrow.expectMessage(\"outer class is supplied via withSettings().outerInstance()\");\n-\t\tMockitoAnnotations.initMocks(new WithSpy());\n+\t\ttry {\n+            MockitoAnnotations.initMocks(new WithSpy());\n+            fail();\n+        } catch (MockitoException e) {\n+            assertContains(\"@Spy annotation can only initialize inner classes\", e.getMessage());\n+        }\n \t}\n \n     static class NestedClassWithoutDefinedConstructor { }", "timestamp": 1417513678, "metainfo": ""}