{"sha": "1cd9d2d18a5823025018928fdfffbc2df4789056", "log": "Refactoring for better clarity.", "commit": "\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n \n import org.mockito.Incubating;\n import org.mockito.exceptions.base.MockitoSerializationIssue;\n-import org.mockito.internal.creation.instance.CachingObjenesisInstantiator;\n+import org.mockito.internal.creation.instance.InstantiatorProvider;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n             // create the Mockito mock class before it can even be deserialized\n             //TODO SF unify creation of imposterizer, constructor code duplicated\n-            ClassImposterizer imposterizer = new ClassImposterizer(new CachingObjenesisInstantiator());\n+            ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator());\n             imposterizer.setConstructorsAccessible(typeToMock, true);\n             Class<?> proxyClass = imposterizer.createProxyClass(\n                     typeToMock,\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.InternalMockHandler;\n-import org.mockito.internal.creation.instance.CachingObjenesisInstantiator;\n+import org.mockito.internal.creation.instance.InstantiatorProvider;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\n-        return new ClassImposterizer(new CachingObjenesisInstantiator()).imposterise(\n+        return new ClassImposterizer(new InstantiatorProvider().getInstantiator()).imposterise(\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/internal/creation/instance/InstantiatorProvider.java\n+package org.mockito.internal.creation.instance;\n+\n+public class InstantiatorProvider {\n+\n+    private final static Instantiator INSTANCE = new ObjenesisInstantiator();\n+\n+    public Instantiator getInstantiator() {\n+        return INSTANCE;\n+    }\n+}\n--- a/src/org/mockito/internal/creation/instance/ObjenesisInstantiator.java\n+++ b/src/org/mockito/internal/creation/instance/ObjenesisInstantiator.java\n import org.mockito.internal.configuration.GlobalConfiguration;\n import org.objenesis.ObjenesisStd;\n \n-public class ObjenesisInstantiator implements Instantiator {\n+class ObjenesisInstantiator implements Instantiator {\n \n     //TODO: in order to provide decent exception message when objenesis is not found,\n     //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing\n--- a/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.internal.creation.instance.ConstructorInstantiator;\n-import org.mockito.internal.creation.instance.ObjenesisInstantiator;\n+import org.mockito.internal.creation.instance.InstantiatorProvider;\n import org.mockitoutil.TestBase;\n \n import java.lang.reflect.Method;\n @SuppressWarnings(\"unchecked\")\n public class ClassImposterizerTest extends TestBase {\n \n-    ClassImposterizer imposterizer = new ClassImposterizer(new ObjenesisInstantiator());\n+    ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator());\n \n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {", "timestamp": 1413584758, "metainfo": ""}