{"sha": "b1ff12af2346ff0e3e9ed9153e6ab80a4828d04d", "log": "added the code that triggers state validation at the end of each runner added handy matchers / assertors ignored one class because somehow junit started to run it as a test but it's not really a test but a runner. added test method to the modelling test case so that I try it out any time  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401381", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/FrameworkUsageValidator.java\n+/**\n+ * \n+ */\n+package org.mockito.internal.runners;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.Mockito;\n+\n+public class FrameworkUsageValidator extends RunListener {\n+    \n+    private final RunNotifier notifier;\n+\n+    public FrameworkUsageValidator(RunNotifier notifier) {\n+        this.notifier = notifier;\n+    }\n+\n+    @Override\n+    public void testFinished(Description description) throws Exception {\n+        super.testFinished(description);\n+        try {\n+            Mockito.validateMockitoUsage();\n+        } catch(Throwable t) {\n+            notifier.fireTestFailure(new Failure(description, t));\n+        }\n+    }\n+}\n--- a/src/org/mockito/runners/MockitoJUnit44Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit44Runner.java\n \n import org.junit.internal.runners.InitializationError;\n import org.junit.internal.runners.JUnit4ClassRunner;\n+import org.junit.runner.notification.RunNotifier;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.FrameworkUsageValidator;\n \n /**\n  * <b>JUnit 4.4</b> runner initializes mocks annotated with {@link Mock},\n         MockitoAnnotations.initMocks(test);\n         return test;\n     }\n+    \n+    @Override\n+    public void run(final RunNotifier notifier) {\n+        //add listener that validates framework usage at the end of each test\n+        notifier.addListener(new FrameworkUsageValidator(notifier));\n+        \n+        super.run(notifier);\n+    }\n }\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n  */\n package org.mockito.runners;\n \n+import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n import org.junit.runners.model.FrameworkMethod;\n import org.junit.runners.model.InitializationError;\n import org.junit.runners.model.Statement;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.FrameworkUsageValidator;\n \n /**\n  * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n \n     @Override\n     protected Statement withBefores(FrameworkMethod method, Object target, Statement statement) {\n+        //init annotated mocks before tests\n         MockitoAnnotations.initMocks(target);\n         return super.withBefores(method, target, statement);\n     }\n+    \n+    @Override\n+    public void run(final RunNotifier notifier) {\n+        //add listener that validates framework usage at the end of each test\n+        notifier.addListener(new FrameworkUsageValidator(notifier));\n+        \n+        super.run(notifier);\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java\n+package org.mockito.runners;\n+\n+import static org.mockitoutil.ExtraMatchers.*;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.Runner;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.internal.runners.FrameworkUsageValidator;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class RunnersValidateFrameworkUsageTest extends TestBase {\n+    \n+    private Runner runner;\n+    private RunNotifierStub notifier = new RunNotifierStub();\n+    \n+    public static class DummyTest extends TestBase {\n+        @Test public void dummy() throws Exception {}\n+    }\n+\n+    public class RunNotifierStub extends RunNotifier {\n+\n+        private List<RunListener> addedListeners = new LinkedList<RunListener>();\n+\n+        @Override\n+        public void addListener(RunListener listener) {\n+            addedListeners.add(listener);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldValidateWithDefaultRunner() throws Exception {\n+        //given\n+        runner = new MockitoJUnitRunner(DummyTest.class);\n+\n+        //when\n+        runner.run(notifier);\n+        \n+        //then\n+        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n+    }\n+    \n+    @Test\n+    public void shouldValidateWithD44Runner() throws Exception {\n+        //given\n+        runner = new MockitoJUnit44Runner(DummyTest.class);\n+\n+        //when\n+        runner.run(notifier);\n+        \n+        //then\n+        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n+    }\n+    \n+    @Test\n+    public void shouldValidateWithVerboseRunner() throws Exception {\n+        //given\n+        runner = new VerboseMockitoJUnitRunner(DummyTest.class);\n+        \n+        //when\n+        runner.run(notifier);\n+        \n+        //then\n+        assertEquals(2, notifier.addedListeners.size());\n+        assertThat(notifier.addedListeners, contains(clazz(FrameworkUsageValidator.class)));\n+    }\n+}\n--- a/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n  */\n package org.mockitousage.examples.configure.withrunner;\n \n+import org.junit.Ignore;\n import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n import org.junit.runners.model.InitializationError;\n import org.mockitousage.examples.configure.FriendlyReturnValues;\n \n //deprecated but will dump it eventually\n-@SuppressWarnings(\"deprecation\")\n+@SuppressWarnings(\"deprecation\")\n+@Ignore(\"somehow this class is picked up by a runner, therfore ignore it\")\n public class MakesMocksNotToReturnNulls extends BlockJUnit4ClassRunner {\n     \n     public MakesMocksNotToReturnNulls(Class<?> clazz) throws InitializationError {\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n @Ignore\n+@RunWith(MockitoJUnitRunner.class)\n public class ModellingDescriptiveMessagesTest extends TestBase {\n     \n     @Mock private IMethods mock;\n         super.makeStackTracesClean();\n     }\n \n+    @Test\n+    public void makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner() {\n+        //mess up the state:\n+        verify(mock);\n+    }\n+    \n     @Test\n     public void shouldSayWantedButNotInvoked() {\n         verify(mock).otherMethod();\n--- a/test/org/mockitoutil/ExtraMatchers.java\n+++ b/test/org/mockitoutil/ExtraMatchers.java\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+\n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.Matcher;\n \n @SuppressWarnings(\"unchecked\")\n public class ExtraMatchers {\n             }\n         };\n     }\n+    \n+    public static <T> Assertor<Collection> contains(final Matcher<T> ... elements) {\n+        return new Assertor<Collection>() {\n+            \n+            public void assertValue(Collection value) {\n+                int matched = 0;\n+                for (Matcher<T> m : elements) {\n+                    for (Object el : value) {\n+                        if (m.matches(el)) {\n+                            matched++;\n+                            continue;\n+                        }\n+                    }\n+                }\n+                \n+                assertEquals(\"At least one of the matchers failed to match any of the elements\", elements.length, matched);\n+            }\n+        };\n+    }\n+    \n+    public static org.hamcrest.Matcher<java.lang.Object> clazz(java.lang.Class<?> type) {\n+        return CoreMatchers.is(type);\n+    }\n }", "timestamp": 1241204044, "metainfo": ""}