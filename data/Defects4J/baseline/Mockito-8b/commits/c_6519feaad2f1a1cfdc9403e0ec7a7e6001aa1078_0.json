{"sha": "6519feaad2f1a1cfdc9403e0ec7a7e6001aa1078", "log": "second batch of implementing doReturn() API moved TestBase around to stop stack trace filtering  --HG-- rename : src/org/mockito/internal/stubbing/ExceptionsValidator.java => src/org/mockito/internal/stubbing/AnswersValidator.java rename : test/org/mockito/StateResetter.java => test/org/mockito/StateMaster.java rename : test/org/mockito/internal/stubbing/ExceptionsValidatorTest.java => test/org/mockito/internal/stubbing/AnswersValidatorTest.java rename : test/org/mockito/util/Assertor.java => test/org/mockitoutil/Assertor.java rename : test/org/mockito/util/ExtraMatchers.java => test/org/mockitoutil/ExtraMatchers.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40675", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockito.internal.stubbing.MethodSelector;\n import org.mockito.internal.stubbing.MethodSelectorImpl;\n+import org.mockito.internal.stubbing.Returns;\n+import org.mockito.internal.stubbing.ThrowsException;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.stubbing.Answer;\n     \n     public static MethodSelector doReturn(Object toBeReturned) {\n         MOCKING_PROGRESS.stubbingStarted();\n-        return new MethodSelectorImpl(toBeReturned);\n+        return new MethodSelectorImpl(new Returns(toBeReturned));\n     }\n     \n     public static MethodSelector doThrow(Throwable toBeThrown) {\n         MOCKING_PROGRESS.stubbingStarted();\n-        return new MethodSelectorImpl(null);\n-    }\n-\n+        return new MethodSelectorImpl(new ThrowsException(toBeThrown));\n+    }\n+    \n     /**\n      * Creates InOrder object that allows verifying mocks in order.\n      * \n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"    verify(mock).someMethod();\",\n                 \"    verify(mock, times(10)).someMethod();\",\n                 \"    verify(mock, atLeastOnce()).someMethod();\"\n-                \n-        ));\n-    }\n-\n+        ));\n+    }\n+    \n     public void nullPassedToVerify() {\n         throw new NullInsteadOfMockException(join(\n                 \"Argument passed to verify() is null!\",\n                 \"Also, if you use @Mock annotation don't miss initMocks()\"\n         ));\n     }    \n+    \n+    public void notAMockPassedToWhenMethod() {\n+        throw new NotAMockException(join(\n+                \"Argument passed to when() is not a mock!\",\n+                \"Example of correct stubbing:\",\n+                \"    doThrow(new RuntimeException()).when(mock).someMethod();\"\n+        ));\n+    }\n+    \n+    public void nullPassedToWhenMethod() {\n+        throw new NullInsteadOfMockException(join(\n+                \"Argument passed to when() is null!\",\n+                \"Example of correct stubbing:\",\n+                \"    doThrow(new RuntimeException()).when(mock).someMethod();\",                \n+                \"Also, if you use @Mock annotation don't miss initMocks()\"\n+        ));\n+    }\n     \n     public void mocksHaveToBePassedToVerifyNoMoreInteractions() {\n         throw new MockitoException(join(\n         ));\n     }\n \n-\n-\n-\n-\n+    public void cannotStubVoidMethodWithAReturnValue() {\n+        throw new MockitoException(join(\n+                \"Cannot stub a void method with a return value!\",\n+                \"Voids should be stubbed with Throwables (or instances of Answer interface)\"\n+             ));\n+    }\n }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n         \n         return false;\n     }\n+\n+    public boolean isVoid() {\n+        return this.method.getReturnType() == Void.TYPE;\n+    }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/AnswersValidator.java\n+package org.mockito.internal.stubbing;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.stubbing.Answer;\n+\n+public class AnswersValidator {\n+\n+    private Reporter reporter = new Reporter();\n+    \n+    public void validate(Answer<?> answer, Invocation invocation) {\n+        if (answer instanceof ThrowsException) {\n+            Throwable throwable = ((ThrowsException) answer).getThrowable();\n+            if (throwable == null) {\n+                reporter.cannotStubWithNullThrowable();\n+            }\n+            \n+            if (throwable instanceof RuntimeException || throwable instanceof Error) {\n+                return;\n+            }\n+            \n+            if (!invocation.isValidException(throwable)) {\n+                reporter.checkedExceptionInvalid(throwable);\n+            }\n+        }\n+        \n+        if (answer instanceof Returns) {\n+            if (invocation.isVoid() && ((Returns) answer).hasReturnValue()) {\n+                reporter.cannotStubVoidMethodWithAReturnValue();\n+            }\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/stubbing/MethodSelectorImpl.java\n+++ b/src/org/mockito/internal/stubbing/MethodSelectorImpl.java\n package org.mockito.internal.stubbing;\n \n+import org.mockito.exceptions.Reporter;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.stubbing.Answer;\n \n public class MethodSelectorImpl implements MethodSelector {\n \n-    private final Object toBeReturned;\n+    private final Answer<?> answer;\n+    private final Reporter reporter = new Reporter();\n \n-    public MethodSelectorImpl(Object toBeReturned) {\n-        this.toBeReturned = toBeReturned;\n+    public MethodSelectorImpl(Answer<?> answer) {\n+        this.answer = answer;\n     }\n \n     public <T> T when(T mock) {\n-        MockUtil.getMockHandler(mock).setAnswerForStubbing(new Returns(toBeReturned));\n+        if (mock == null) {\n+            reporter.nullPassedToWhenMethod();\n+        } else if (!MockUtil.isMock(mock)) {\n+            reporter.notAMockPassedToWhenMethod();\n+        }\n+        \n+        MockUtil.getMockHandler(mock).setAnswerForStubbing(answer);\n         return mock;\n     }\n }\n--- a/src/org/mockito/internal/stubbing/Returns.java\n+++ b/src/org/mockito/internal/stubbing/Returns.java\n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         return value;\n     }\n+\n+    public boolean hasReturnValue() {\n+        return this.value != null;\n+    }\n }\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n     \n     private void addAnswer(Answer answer, boolean isConsecutive) {\n         mockingProgress.stubbingCompleted();\n-        if (answer instanceof ThrowsException) {\n-            new ExceptionsValidator().validate(((ThrowsException) answer).getThrowable(), invocationForStubbing.getInvocation());\n-        }\n+        AnswersValidator answersValidator = new AnswersValidator();\n+        answersValidator.validate(answer, invocationForStubbing.getInvocation());\n         \n         if (isConsecutive) {\n             stubbed.getFirst().addAnswer(answer);\n         return !answersForVoidMethod.isEmpty();\n     }\n \n+    //TODO it's not for void method any more\n     public void addVoidMethodForStubbing(InvocationMatcher voidMethodInvocationMatcher) {\n         invocationForStubbing = voidMethodInvocationMatcher;\n         assert hasAnswerForVoidMethod();\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         return (MethodInterceptorFilter) factory.getCallback(0);\n     }\n     \n-    public static void validateMock(Object mock) {\n-        getMockHandler(mock);\n-    }\n-    \n     public static boolean isMock(Object mock) {\n         try {\n             getMockHandler(mock);\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.junit.runner.Result;\n import org.junit.runner.notification.Failure;\n import org.mockito.MockitoTest;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.ReporterTest;\n import org.mockito.exceptions.base.MockitoAssertionErrorTest;\n import org.mockito.exceptions.base.MockitoExceptionTest;\n import org.mockitousage.verification.VerificationInOrderTest;\n import org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest;\n import org.mockitousage.verification.VerificationUsingMatchersTest;\n+import org.mockitoutil.TestBase;\n \n public class ThreadsRunAllTestsHalfManualTest extends TestBase {\n     \n--- a/test/org/concurrentmockito/ThreadsShareAMockTest.java\n+++ b/test/org/concurrentmockito/ThreadsShareAMockTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n //this test exposes the problem at least once in 10 runs\n public class ThreadsShareAMockTest extends TestBase {\n--- a/test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java\n+++ b/test/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n //this test always passes but please keep looking sys err\n //this test should be run multiple times, manually\n--- a/test/org/concurrentmockito/ThreadsStubSharedMockTest.java\n+++ b/test/org/concurrentmockito/ThreadsStubSharedMockTest.java\n \n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class ThreadsStubSharedMockTest extends TestBase {\n \n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n \n import org.junit.Test;\n import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoTest extends TestBase {\n--- /dev/null\n+++ b/test/org/mockito/StateMaster.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+public class StateMaster {\n+    \n+    public static void reset() {\n+        Mockito.MOCKING_PROGRESS.reset();\n+    }\n+    \n+    public static void validate() {\n+        Mockito.MOCKING_PROGRESS.validateState();\n+    }\n+}\n--- a/test/org/mockito/configuration/experimental/ConfigurationTest.java\n+++ b/test/org/mockito/configuration/experimental/ConfigurationTest.java\n package org.mockito.configuration.experimental;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n \n public class ConfigurationTest extends TestBase {\n     \n--- a/test/org/mockito/exceptions/ReporterTest.java\n+++ b/test/org/mockito/exceptions/ReporterTest.java\n package org.mockito.exceptions;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockitoutil.TestBase;\n \n public class ReporterTest extends TestBase {\n \n--- a/test/org/mockito/exceptions/base/CommonStackTraceRemoverTest.java\n+++ b/test/org/mockito/exceptions/base/CommonStackTraceRemoverTest.java\n  */\n package org.mockito.exceptions.base;\n \n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import java.util.List;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class CommonStackTraceRemoverTest extends TestBase {\n--- a/test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java\n+++ b/test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java\n package org.mockito.exceptions.base;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n public class MockitoAssertionErrorTest extends TestBase {\n \n--- a/test/org/mockito/exceptions/base/MockitoExceptionTest.java\n+++ b/test/org/mockito/exceptions/base/MockitoExceptionTest.java\n package org.mockito.exceptions.base;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n public class MockitoExceptionTest extends TestBase {\n \n--- a/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n+++ b/test/org/mockito/exceptions/base/StackTraceFilterTest.java\n  */\n package org.mockito.exceptions.base;\n \n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class StackTraceFilterTest extends TestBase {\n--- a/test/org/mockito/exceptions/base/StackTraceRemoverTest.java\n+++ b/test/org/mockito/exceptions/base/StackTraceRemoverTest.java\n  */\n package org.mockito.exceptions.base;\n \n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import java.util.LinkedList;\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n public class StackTraceRemoverTest extends TestBase {\n \n--- a/test/org/mockito/internal/AllInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/AllInvocationsFinderTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class AllInvocationsFinderTest extends TestBase {\n     \n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n package org.mockito.internal;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.progress.MockingProgressImpl;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class MockHandlerTest extends TestBase {\n--- a/test/org/mockito/internal/configuration/DefaultReturnValuesTest.java\n+++ b/test/org/mockito/internal/configuration/DefaultReturnValuesTest.java\n import java.util.TreeSet;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n public class DefaultReturnValuesTest extends TestBase {\n     \n--- a/test/org/mockito/internal/creation/CglibTest.java\n+++ b/test/org/mockito/internal/creation/CglibTest.java\n import net.sf.cglib.proxy.MethodProxy;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n /**\n  * This test case is used to make sure that the way cglib is used is providing the expected behavior.\n--- a/test/org/mockito/internal/creation/MockFactoryTest.java\n+++ b/test/org/mockito/internal/creation/MockFactoryTest.java\n import net.sf.cglib.proxy.Factory;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class MockFactoryTest extends TestBase {\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n package org.mockito.internal.invocation;\n \n import static java.util.Arrays.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import java.lang.reflect.Method;\n import java.util.HashMap;\n import org.hamcrest.Matcher;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.NotNull;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationMatcherTest extends TestBase {\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationTest extends TestBase {\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n package org.mockito.internal.invocation;\n \n import static org.mockito.internal.progress.VerificationModeImpl.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import java.util.Arrays;\n import java.util.Collections;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n \n public class InvocationsFinderTest extends TestBase {\n--- a/test/org/mockito/internal/matchers/EqualsTest.java\n+++ b/test/org/mockito/internal/matchers/EqualsTest.java\n package org.mockito.internal.matchers;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n \n public class EqualsTest extends TestBase {\n--- a/test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java\n+++ b/test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java\n import java.util.Arrays;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n /**\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n--- a/test/org/mockito/internal/progress/MockingProgressImplTest.java\n+++ b/test/org/mockito/internal/progress/MockingProgressImplTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n \n public class MockingProgressImplTest extends TestBase {\n \n--- a/test/org/mockito/internal/progress/VerificationModeImplTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeImplTest.java\n import static org.mockito.internal.progress.VerificationModeImpl.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n \n public class VerificationModeImplTest extends TestBase {\n \n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/AnswersValidatorTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+import java.io.IOException;\n+import java.nio.charset.CharacterCodingException;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockitoutil.TestBase;\n+\n+public class AnswersValidatorTest extends TestBase {\n+\n+    private AnswersValidator validator = new AnswersValidator();\n+    private Invocation invocation = new InvocationBuilder().method(\"canThrowException\").toInvocation();\n+\n+    @Test\n+    public void shouldValidateNullThrowable() throws Throwable {\n+        try {\n+            validator.validate(new ThrowsException(null), null);\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+\n+    @Test\n+    public void shouldPassProperCheckedException() throws Throwable {\n+        validator.validate(new ThrowsException(new CharacterCodingException()), invocation);\n+    }\n+\n+    @Test(expected = MockitoException.class)\n+    public void shouldFailInvalidCheckedException() throws Throwable {\n+        validator.validate(new ThrowsException(new IOException()), invocation);\n+    }\n+    \n+    @Test\n+    public void shouldPassRuntimeExceptions() throws Throwable {\n+        validator.validate(new ThrowsException(new Error()), invocation);\n+        validator.validate(new ThrowsException(new RuntimeException()), invocation);\n+    }\n+}\n--- a/test/org/mockito/internal/stubbing/StubberTest.java\n+++ b/test/org/mockito/internal/stubbing/StubberTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgressImpl;\n+import org.mockitoutil.TestBase;\n \n public class StubberTest extends TestBase{\n \n--- a/test/org/mockito/internal/util/DecamelizerTest.java\n+++ b/test/org/mockito/internal/util/DecamelizerTest.java\n import static org.mockito.internal.util.Decamelizer.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class DecamelizerTest extends TestBase {\n--- a/test/org/mockito/internal/util/ListUtilTest.java\n+++ b/test/org/mockito/internal/util/ListUtilTest.java\n package org.mockito.internal.util;\n \n import static java.util.Arrays.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import java.util.LinkedList;\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.util.ListUtil.Filter;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class ListUtilTest extends TestBase {\n--- a/test/org/mockito/internal/util/MockUtilTest.java\n+++ b/test/org/mockito/internal/util/MockUtilTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockitoutil.TestBase;\n \n public class MockUtilTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n+import org.mockitoutil.TestBase;\n \n public class MissingInvocationInOrderVerifierTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockitoutil.TestBase;\n \n public class MissingInvocationVerifierTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockitoutil.TestBase;\n \n public class NoMoreInvocationsVerifierTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n+import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsInOrderVerifierTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsVerifierTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/SyncingPrinterTest.java\n+++ b/test/org/mockito/internal/verification/SyncingPrinterTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.invocation.CanPrintInMultilines;\n+import org.mockitoutil.TestBase;\n \n public class SyncingPrinterTest extends TestBase {\n \n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n package org.mockito.internal.verification;\n \n import static java.util.Arrays.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import java.util.List;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.CanPrintInMultilines;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockitoutil.TestBase;\n \n public class VerifyingRecorderTest extends TestBase {\n     \n--- a/test/org/mockitousage/AnnotationsTest.java\n+++ b/test/org/mockitousage/AnnotationsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.MockitoAnnotations;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class AnnotationsTest extends TestBase {\n--- a/test/org/mockitousage/MockingRealObjectsTest.java\n+++ b/test/org/mockitousage/MockingRealObjectsTest.java\n import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class MockingRealObjectsTest extends TestBase {\n--- a/test/org/mockitousage/MocksCreationTest.java\n+++ b/test/org/mockitousage/MocksCreationTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n public class MocksCreationTest extends TestBase {\n \n--- a/test/org/mockitousage/ReplacingObjectMethodsTest.java\n+++ b/test/org/mockitousage/ReplacingObjectMethodsTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n public class ReplacingObjectMethodsTest extends TestBase {\n \n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n+import org.mockitoutil.TestBase;\n \n public class UsingVarargsTest extends TestBase {\n \n--- a/test/org/mockitousage/binding/BridgeMethodPuzzleTest.java\n+++ b/test/org/mockitousage/binding/BridgeMethodPuzzleTest.java\n package org.mockitousage.binding;\n \n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n /**\n  * Bridge method is generated by compiler when erasure in parent class is\n--- a/test/org/mockitousage/binding/OverloadingPuzzleTest.java\n+++ b/test/org/mockitousage/binding/OverloadingPuzzleTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitoutil.TestBase;\n \n public class OverloadingPuzzleTest extends TestBase {\n \n--- a/test/org/mockitousage/examples/use/ExampleTest.java\n+++ b/test/org/mockitousage/examples/use/ExampleTest.java\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockitousage.examples.junitrunner.MockitoRunner;\n+import org.mockitoutil.TestBase;\n \n @RunWith(MockitoRunner.class)\n public class ExampleTest extends TestBase {\n--- a/test/org/mockitousage/examples/use/PrototypingTest.java\n+++ b/test/org/mockitousage/examples/use/PrototypingTest.java\n import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.TestBase;\n import org.mockitousage.examples.junitrunner.MockitoRunner;\n+import org.mockitoutil.TestBase;\n \n @RunWith(MockitoRunner.class)\n public class PrototypingTest extends TestBase {\n--- a/test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java\n+++ b/test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class AnyXMatchersAcceptNullsTest extends TestBase {\n--- a/test/org/mockitousage/matchers/AssertingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/AssertingMatchersTest.java\n import org.junit.Test;\n import org.mockito.ArgumentMatcher;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @Ignore(\"that's just prototyping\")\n public class AssertingMatchersTest extends TestBase {\n--- a/test/org/mockitousage/matchers/CapturingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CapturingMatchersTest.java\n \n import org.junit.Test;\n import org.mockito.ArgumentMatcher;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class CapturingMatchersTest extends TestBase {\n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n import org.hamcrest.Description;\n import org.hamcrest.StringDescription;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.matchers.CompareEqual;\n import org.mockito.internal.matchers.CompareTo;\n import org.mockito.internal.matchers.GreaterOrEqual;\n import org.mockito.internal.matchers.GreaterThan;\n import org.mockito.internal.matchers.LessOrEqual;\n import org.mockito.internal.matchers.LessThan;\n+import org.mockitoutil.TestBase;\n \n public class ComparableMatchersTest extends TestBase {\n \n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import org.junit.Test;\n import org.mockito.ArgumentMatcher;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class CustomMatchersTest extends TestBase {\n     \n--- a/test/org/mockitousage/matchers/GenericMatchersTest.java\n+++ b/test/org/mockitousage/matchers/GenericMatchersTest.java\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n+import org.mockitoutil.TestBase;\n \n public class GenericMatchersTest extends TestBase {\n     \n--- a/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n+++ b/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n import org.hamcrest.BaseMatcher;\n import org.hamcrest.Description;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class HamcrestMatchersTest extends TestBase {\n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n import org.junit.Test;\n import org.mockito.AdditionalMatchers;\n import org.mockito.Mockito;\n-import org.mockito.StateResetter;\n-import org.mockito.TestBase;\n+import org.mockito.StateMaster;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUseOfMatchersTest extends TestBase {\n \n     @Before\n     public void setUp() {\n-        StateResetter.reset();\n+        StateMaster.reset();\n         mock = Mockito.mock(IMethods.class);\n     }\n \n     @After\n     public void resetState() {\n-        StateResetter.reset();\n+        StateMaster.reset();\n     }\n \n     @Test\n--- a/test/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java\n+++ b/test/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java\n \n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class MatchersMixedWithRawArgumentsTest extends TestBase {\n     \n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import org.junit.Test;\n import org.mockito.Matchers;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n \n @SuppressWarnings(\"unchecked\")\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n import org.hamcrest.StringDescription;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.internal.matchers.And;\n import org.mockito.internal.matchers.Any;\n import org.mockito.internal.matchers.Contains;\n import org.mockito.internal.matchers.Or;\n import org.mockito.internal.matchers.Same;\n import org.mockito.internal.matchers.StartsWith;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class MatchersToStringTest extends TestBase {\n--- a/test/org/mockitousage/matchers/ReflectionMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ReflectionMatchersTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"all\")\n public class ReflectionMatchersTest extends TestBase {\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class VerificationAndStubbingUsingMatchersTest extends TestBase {\n--- a/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n+++ b/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n \n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.misusing.NullInsteadOfMockException;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class DescriptiveMessagesOnMisuseTest extends TestBase {\n     \n--- a/test/org/mockitousage/misuse/InvalidStateDetectionTest.java\n+++ b/test/org/mockitousage/misuse/InvalidStateDetectionTest.java\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.StateResetter;\n-import org.mockito.TestBase;\n+import org.mockito.StateMaster;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n /**\n  * invalid state happens if:\n     @Before\n     @After\n     public void resetState() {\n-        StateResetter.reset();\n+        StateMaster.reset();\n         mock = mock(IMethods.class);\n     }\n     \n--- a/test/org/mockitousage/misuse/InvalidUsageTest.java\n+++ b/test/org/mockitousage/misuse/InvalidUsageTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.StateResetter;\n-import org.mockito.TestBase;\n+import org.mockito.StateMaster;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageTest extends TestBase {\n     \n     @After\n     public void resetState() {\n-        StateResetter.reset();\n+        StateMaster.reset();\n     }\n     \n     @Test(expected=MockitoException.class)\n--- a/test/org/mockitousage/packageprotected/MockingPackageProtectedTest.java\n+++ b/test/org/mockitousage/packageprotected/MockingPackageProtectedTest.java\n package org.mockitousage.packageprotected;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n+\n import static org.mockito.Mockito.*;\n \n public class MockingPackageProtectedTest extends TestBase {\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n \n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class PointingStackTraceToActualInvocationChunkInOrderTest extends TestBase {\n     \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java\n package org.mockitousage.stacktrace;\n \n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class PointingStackTraceToActualInvocationChunkTest extends TestBase {\n     \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n \n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class PointingStackTraceToActualInvocationInOrderTest extends TestBase {\n     \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n package org.mockitousage.stacktrace;\n \n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class PointingStackTraceToActualInvocationTest extends TestBase {\n     \n--- a/test/org/mockitousage/stacktrace/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/stacktrace/StackTraceFilteringTest.java\n package org.mockitousage.stacktrace;\n \n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.StateResetter;\n-import org.mockito.TestBase;\n+import org.mockito.StateMaster;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class StackTraceFilteringTest extends TestBase {\n     \n \n     @After\n     public void resetState() {\n-        StateResetter.reset();\n+        StateMaster.reset();\n     }\n     \n     @Before\n--- a/test/org/mockitousage/stacktrace/StackTrackeChangingTest.java\n+++ b/test/org/mockitousage/stacktrace/StackTrackeChangingTest.java\n package org.mockitousage.stacktrace;\n \n import static org.mockito.Mockito.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.mockitoutil.ExtraMatchers.*;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class StackTrackeChangingTest extends TestBase {\n     \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class BasicStubbingTest extends TestBase {\n--- a/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n+++ b/test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class ReturningDefaultValuesTest extends TestBase {\n--- a/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class StubbingConsecutiveReturnValuesTest extends TestBase {\n \n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n \n-import java.util.List;\n-\n-import org.junit.Ignore;\n+import org.junit.After;\n import org.junit.Test;\n-import org.mockito.TestBase;\n+import org.mockito.StateMaster;\n import org.mockito.MockitoAnnotations.Mock;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class StubbingUsingDoReturnTest extends TestBase {\n \n     @Mock private IMethods mock;\n+    \n+    @After public void resetState() {\n+        StateMaster.reset();\n+    }\n \n     @Test\n     public void shouldStub() throws Exception {\n     @SuppressWarnings(\"serial\")\n     class FooException extends RuntimeException {}\n     \n-    @Ignore\n     @Test\n     public void shouldStubWithThrowable() throws Exception {\n         doThrow(new FooException()).when(mock).voidMethod();\n         } catch (FooException e) {}\n     }\n     \n-    @Ignore\n     @Test\n     public void shouldScreamWhenReturnSetForVoid() throws Exception {\n-        doReturn(new RuntimeException()).when(mock).voidMethod();\n-        fail();\n+        try {\n+            doReturn(\"foo\").when(mock).voidMethod();\n+            fail();\n+        } catch (MockitoException e) {\n+            //TODO could the message be clearer?\n+            assertThat(e.getMessage(), contains(\"Cannot stub a void method with a return value\"));\n+        }\n     }\n     \n-    @Ignore\n     @Test\n     public void shouldScreamWhenNotAMockPassed() throws Exception {\n         try {\n             doReturn(\"foo\").when(\"foo\").toString();\n             fail();\n         } catch (Exception e) {\n-            assertEquals(\"Argument passed to when() method is not a mock\", e.getMessage());\n+            assertThat(e.getMessage(), contains(\"Argument passed to when() is not a mock\"));\n         }\n     }\n     \n-    //TODO when not a mock passed\n+    @Test\n+    public void shouldScreamWhenNullPassed() throws Exception {\n+        try {\n+            doReturn(\"foo\").when(null).toString();\n+            fail();\n+        } catch (Exception e) {\n+            assertThat(e.getMessage(), contains(\"Argument passed to when() is null\"));\n+        }\n+    }    \n     \n     //TODO checked Exceptions\n     \n     \n     @Test\n     public void shouldStubbingBeTreatedAsInteraction() throws Exception {\n-        stub(mock.booleanReturningMethod()).toReturn(true);\n-        \n-        mock.booleanReturningMethod();\n-        \n+        doReturn(\"foo\").when(mock).simpleMethod();\n+        mock.simpleMethod();\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n         } catch (NoInteractionsWanted e) {}\n     }\n     \n-    class Base {}\n-    class Sub extends Base {}\n-\n-    interface Generic {\n-        List<Base> getList();\n-    }\n-    \n     @Test\n-    public void shouldAllowStubbingWithSubtypes() throws Exception {\n-        Generic mockTwo = mock(Generic.class);\n+    public void shouldVerifyStubbedCall() throws Exception {\n+        doReturn(\"foo\").when(mock).simpleMethod();\n+        mock.simpleMethod();\n+        mock.simpleMethod();\n         \n-        List<Sub> subs = null;\n-        //can I somehow avoid a cast here:\n-        stub(mockTwo.getList()).toReturn((List) subs);\n+        verify(mock, times(2)).simpleMethod();\n+        verifyNoMoreInteractions(mock);\n     }\n     \n     @Test\n     public void shouldAllowStubbingToString() throws Exception {\n-        IMethods mockTwo = mock(IMethods.class);\n-        stub(mockTwo.toString()).toReturn(\"test\");\n-        \n-        assertThat(mock.toString(), contains(\"Mock for IMethods\"));\n-        assertEquals(\"test\", mockTwo.toString());\n-    }\n-    \n-    @Test\n-    public void shouldStubbingWithThrowableFailVerification() {\n-        stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n-        stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(\"two\");\n-        \n-        verifyZeroInteractions(mock);\n-        \n-        mock.simpleMethod(\"foo\");\n-        \n-        try {\n-            verify(mock).simpleMethod(\"one\");\n-            fail();\n-        } catch (ArgumentsAreDifferent e) {}\n-        \n-        try {\n-            verify(mock).simpleMethod(\"two\");\n-            fail();\n-        } catch (ArgumentsAreDifferent e) {}\n-        \n-        try {\n-            verifyNoMoreInteractions(mock);\n-            fail();\n-        } catch (NoInteractionsWanted e) {}\n+        doReturn(\"test\").when(mock).toString();\n+        assertEquals(\"test\", mock.toString());\n     }\n }\n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n import org.junit.Test;\n import static org.mockito.Mockito.*;\n import org.mockito.MockitoAnnotations.Mock;\n-import org.mockito.TestBase;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class StubbingWithCustomAnswerTest extends TestBase {\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})\n public class StubbingWithThrowablesTest extends TestBase {\n--- a/test/org/mockitousage/verification/AtLeastOnceVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtLeastOnceVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class AtLeastOnceVerificationTest extends TestBase {\n--- a/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class BasicVerificationInOrderTest extends TestBase {\n--- a/test/org/mockitousage/verification/BasicVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationTest.java\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class BasicVerificationTest extends TestBase {\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class DescriptiveMessagesOnVerificationInOrderErrorsTest extends TestBase {\n     \n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class DescriptiveMessagesWhenTimesXVerificationFailsTest extends TestBase {\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.exceptions.cause.ActualArgumentsAreDifferent;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n public class DescriptiveMessagesWhenVerificationFailsTest extends TestBase {\n \n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class ExactNumberOfTimesVerificationTest extends TestBase {\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class NoMoreInteractionsVerificationTest extends TestBase {\n--- a/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n /**\n  * ignored since 'relaxed' in order verification is not implemented (too complex to bother, maybe later).\n--- a/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n+++ b/test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class SelectedMocksInOrderVerificationTest extends TestBase {\n--- a/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class VerificationInOrderMixedWithOrdiraryVerificationTest extends TestBase {\n--- a/test/org/mockitousage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/VerificationInOrderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class VerificationInOrderTest extends TestBase {\n--- a/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n \n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class VerificationOnMultipleMocksUsingMatchersTest extends TestBase {\n--- a/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n import org.junit.Test;\n import org.mockito.Matchers;\n import org.mockito.Mockito;\n-import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")  \n public class VerificationUsingMatchersTest extends TestBase {\n--- /dev/null\n+++ b/test/org/mockitoutil/Assertor.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitoutil;\n+\n+public interface Assertor<T> {\n+    \n+    void assertValue(T value);\n+}\n--- /dev/null\n+++ b/test/org/mockitoutil/ExtraMatchers.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitoutil;\n+\n+import static org.junit.Assert.*;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.mockito.exceptions.base.HasStackTrace;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ExtraMatchers {\n+\n+    public static <T> Assertor<Throwable> hasFirstMethodInStackTrace(final String method) {\n+        return hasMethodInStackTraceAt(0, method);\n+    }\n+    \n+    public static <T> Assertor hasOnlyThoseMethodsInStackTrace(final String ... methods) {\n+        return new Assertor() {\n+            public void assertValue(Object traceElements) {\n+                final List<StackTraceElement> trace;\n+                if (traceElements instanceof List) {\n+                    trace = (List<StackTraceElement>) traceElements;\n+                } else if (traceElements instanceof HasStackTrace) {\n+                    trace = Arrays.asList(((HasStackTrace) traceElements).getStackTrace());\n+                } else {\n+                    throw new RuntimeException(\"this matcher cannot deal with object provided: \" + traceElements);\n+                }\n+                \n+                assertEquals(methods.length, trace.size());\n+                    \n+                for (int i = 0; i < trace.size(); i++) {\n+                    assertEquals(methods[i], trace.get(i).getMethodName());\n+                }\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<HasStackTrace> hasOnlyThoseClassesInStackTrace(final String ... classes) {\n+        return new Assertor<HasStackTrace>() {\n+            public void assertValue(HasStackTrace traceElements) {\n+                StackTraceElement[] trace = traceElements.getStackTrace();\n+                \n+                assertEquals(\"Number of classes does not match\",\n+                        classes.length, trace.length);\n+                    \n+                for (int i = 0; i < trace.length; i++) {\n+                    assertEquals(classes[i], trace[i].getClassName());\n+                }\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<Throwable> hasMethodInStackTraceAt(final int stackTraceIndex, final String method) {\n+        return new Assertor<Throwable>() {\n+\n+            private String actualMethodAtIndex;\n+\n+            public void assertValue(Throwable throwable) {\n+                actualMethodAtIndex = throwable.getStackTrace()[stackTraceIndex].getMethodName();\n+                assertTrue(\n+                    \"Method at index: \" + stackTraceIndex + \n+                    \"\\n\" +\n+                    \"expected to be: \" + method + \n+                    \"\\n\" +\n+                    \"but is: \" + actualMethodAtIndex,\n+                    actualMethodAtIndex.equals(method));\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<Object> hasBridgeMethod(final String methodName) {\n+        return new Assertor<Object>() {\n+\n+            public void assertValue(Object o) {\n+                Class clazz = null;\n+                if (o instanceof Class) {\n+                    clazz = (Class) o;\n+                } else {\n+                    clazz = o.getClass();\n+                }\n+                \n+                for (Method m : clazz.getMethods()) {\n+                    if (m.isBridge() && m.getName().equals(methodName)) {\n+                        return;\n+                    }\n+                }\n+                \n+                fail(\"Bridge method [\" + methodName + \"]\\nnot found in:\\n\" + o);\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<Collection> has(final T ... elements) {\n+        return new Assertor<Collection>() {\n+\n+            public void assertValue(Collection value) {\n+                for (T element : elements) {\n+                    assertTrue(\n+                            \"Element:\" +\n+                            \"\\n\" +\n+                            element +\n+                            \"does not exists in:\" +\n+                            \"\\n\" +\n+                            value, \n+                            value.contains(element));\n+                }\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<Collection> hasExactlyInOrder(final T ... elements) {\n+        return new Assertor<Collection>() {\n+\n+            public void assertValue(Collection value) {\n+                assertEquals(elements.length, value.size());\n+                \n+                boolean containsSublist = Collections.indexOfSubList((List<?>) value, Arrays.asList(elements)) != -1;\n+                assertTrue(\n+                        \"Elements:\" +\n+                        \"\\n\" + \n+                        Arrays.toString(elements) + \n+                        \"\\n\" +\n+                        \"were not found in collection:\" +\n+                        \"\\n\" +\n+                        value, containsSublist);\n+            }\n+        };\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitoutil/TestBase.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitoutil;\n+\n+import junit.framework.Assert;\n+\n+import org.hamcrest.Matcher;\n+import org.junit.Before;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.StateMaster;\n+\n+/**\n+ * the easiest way to make sure that tests clean up invalid state is to require\n+ * valid state for all tests.\n+ */\n+public class TestBase extends Assert {\n+\n+    @Before\n+    public void init() {\n+        StateMaster.validate();\n+        MockitoAnnotations.initMocks(this);\n+    }\n+    \n+    //I'm really tired of matchers, enter the assertor!\n+    protected <T> void assertThat(T o, Assertor<T> a) {\n+        a.assertValue(o);\n+    }\n+    \n+    protected <T> void assertThat(T actual, Matcher<T> m) {\n+        org.junit.Assert.assertThat(actual, m);\n+    }\n+    \n+    protected <T> void assertThat(String message, T actual, Matcher<T> m) {\n+        org.junit.Assert.assertThat(message, actual, m);\n+    }\n+    \n+    public static <T> Assertor<String> contains(final String substring) {\n+        return new Assertor<String>() {\n+            public void assertValue(String value) {\n+                assertTrue(\"This substring: \\n\" + substring + \n+                        \"\\nshould be inside of:\\n\" + value\n+                        , value.contains(substring));\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<String> endsWith(final String substring) {\n+        return new Assertor<String>() {\n+            public void assertValue(String value) {\n+                assertTrue(\"This substring: \\n\" + substring + \n+                        \"\\nshould be at the end of:\\n\" + value\n+                        , value.endsWith(substring));\n+            }\n+        };\n+    }\n+\n+    public static <T> Assertor<Throwable> messageContains(final String text) {\n+        return new Assertor<Throwable>() {\n+            public void assertValue(Throwable value) {\n+                assertTrue(\"This substring: \\n\" + text + \n+                        \"\\nshould occur in this exception message:\" + value.getMessage()\n+                        , ((Throwable) value).getMessage().contains(text));\n+            }\n+        };\n+    }\n+    \n+    public static <T> Assertor<Throwable> causeMessageContains(final String text) {\n+        return new Assertor<Throwable>() {\n+            public void assertValue(Throwable value) {\n+                Throwable cause = ((Throwable) value).getCause();\n+                assertNotNull(\"Exception cause should not be null\", cause);\n+                assertTrue(\"\\nException message >>>\" + cause.getMessage() + \"\\n>>> should contain: \" + text,\n+                        cause.getMessage().contains(text));\n+            }\n+        };\n+    }\n+}", "timestamp": 1216234776, "metainfo": ""}