{"sha": "70dc019c99db83338728d117f7c744fe12d4c23b", "log": "removed unused code added TODOs for untested code (thank you djUnit)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4091", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n public class Mockito extends Matchers {\n \n     public static VerifyingMode atLeastOnce() {\n-        return VerifyingMode.atLeastOnce();\n-    }\n-    \n-    public static VerifyingMode times(int expectedNumerOfTimes) {\n         return VerifyingMode.atLeastOnce();\n     }\n     \n--- a/src/org/mockito/exceptions/StrictVerificationError.java\n+++ b/src/org/mockito/exceptions/StrictVerificationError.java\n \n     private static final long serialVersionUID = 1L;\n \n-    public StrictVerificationError() {\n-        super(\"blah\");\n-    }\n-\n     public StrictVerificationError(String string) {\n         super(string);\n     }\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n     private boolean isPrimitiveParameter(int parameterPosition) {\n         Class<?>[] parameterTypes = method.getParameterTypes();\n         if (method.isVarArgs()) {\n+            //TODO not tested?\n             parameterPosition = Math.min(parameterPosition,\n                     parameterTypes.length - 1);\n         }\n--- a/src/org/mockito/internal/InvocationChunk.java\n+++ b/src/org/mockito/internal/InvocationChunk.java\n         return invocations.get(0);\n     }\n \n-    public boolean isVerified() {\n-        return getInvocation().isVerified();\n-    }\n-\n     public int getCount() {\n         return invocations.size();\n     }\n         invocations.add(invocation);\n     }\n     \n-    public String toString() {\n-        return getInvocation() + \" x \" + getCount();\n-    }\n-\n     public void markAllInvocationsAsVerified() {\n         for (Invocation invocation : invocations) {\n             invocation.markVerifiedInOrder();\n             invocation.markVerified();\n         }\n     }\n+    \n+    public String toString() {\n+        return getInvocation() + \" x \" + getCount();\n+    }\n }\n--- a/src/org/mockito/internal/LastArguments.java\n+++ b/src/org/mockito/internal/LastArguments.java\n     \n     static LastArguments INSTANCE = new LastArguments();\n     \n-    private final ThreadLocal<Stack<Object[]>> threadToCurrentArguments = new ThreadLocal<Stack<Object[]>>();\n     private final ThreadLocal<Stack<IArgumentMatcher>> threadToArgumentMatcherStack = new ThreadLocal<Stack<IArgumentMatcher>>();\n \n     public static LastArguments instance() {\n         assertState(stack != null, missingMatchers());\n         stack.push(new Or(popLastArgumentMatchers(count)));\n     }\n-\n-    public void pushCurrentArguments(Object[] args) {\n-        Stack<Object[]> stack = threadToCurrentArguments.get();\n-        if (stack == null) {\n-            stack = new Stack<Object[]>();\n-            threadToCurrentArguments.set(stack);\n-        }\n-        stack.push(args);\n-    }\n-\n-    public void popCurrentArguments() {\n-        Stack<Object[]> stack = threadToCurrentArguments.get();\n-        stack.pop();\n-    }\n }\n--- a/src/org/mockito/internal/MockFactory.java\n+++ b/src/org/mockito/internal/MockFactory.java\n             public Object intercept(Object obj, Method method, Object[] args,\n                     MethodProxy proxy) throws Throwable {\n                 if (method.isBridge()) {\n+                    //TODO still don't understand this one. Is it needed?\n                     return proxy.invokeSuper(obj, args);\n                 }\n                 return handler.invoke(obj, method, args);\n--- a/src/org/mockito/internal/matchers/ArrayEquals.java\n+++ b/src/org/mockito/internal/matchers/ArrayEquals.java\n     }\n \n     public void appendTo(StringBuffer buffer) {\n+        //TODO not tested\n         if (getExpected() != null && getExpected().getClass().isArray()) {\n             appendArray(createObjectArray(getExpected()), buffer);\n         } else {\n     }\n \n     private void appendArray(Object[] array, StringBuffer buffer) {\n+        //TODO not tested\n         buffer.append(\"[\");\n         for (int i = 0; i < array.length; i++) {\n             new Equals(array[i]).appendTo(buffer);\n--- a/test/org/mockito/internal/MockFactoryTest.java\n+++ b/test/org/mockito/internal/MockFactoryTest.java\n     \n     @Test\n     public void shouldCreateMockFromClassEvenWhenConstructorIsDodgy() throws Exception {\n+        try {\n+            new ClassWithDodgyConstructor();\n+            fail();\n+        } catch (Exception e) {};\n+        \n         MockFactory<ClassWithDodgyConstructor> factory = new MockFactory<ClassWithDodgyConstructor>();\n         ClassWithDodgyConstructor mock = factory.createMock(ClassWithDodgyConstructor.class, new MockAwareStub());\n         assertNotNull(mock);", "timestamp": 1196344342, "metainfo": ""}