{"sha": "cca6a04de17459f5affc9c1cd27314aff5eee623", "log": "refactored the code so that it's easier to expose default return values configuration  --HG-- rename : test/org/mockito/internal/stubbing/EmptyReturnValuesTest.java => test/org/mockito/internal/stubbing/DefaultReturnValuesTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40492", "commit": "\n--- a/src/org/mockito/MockitoConfiguration.java\n+++ b/src/org/mockito/MockitoConfiguration.java\n  */\n package org.mockito;\n \n+import org.mockito.internal.stubbing.DefaultReturnValues;\n+\n public class MockitoConfiguration {\n     \n-    private static EmptyValuesProvider emptyValuesProvider = new EmptyValuesProvider();\n-\n-    public static EmptyValuesProvider emptyValues() {\n-        return emptyValuesProvider;\n+    private static ReturnValues returnValues = new DefaultReturnValues();\n+    \n+    public static ReturnValues defaultReturnValues() {\n+        return returnValues;\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/ReturnValues.java\n+package org.mockito;\n+\n+import org.mockito.internal.invocation.Invocation;\n+\n+public interface ReturnValues {\n+\n+    Object valueFor(Invocation invocation);\n+\n+}\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n         \n         if (verificationMode != null) {\n             verifyingRecorder.verify(invocationMatcher, verificationMode);\n-            return MockitoConfiguration.emptyValues().valueFor(invocationMatcher.getInvocation());\n+            return MockitoConfiguration.defaultReturnValues().valueFor(invocationMatcher.getInvocation());\n         }\n         \n         stubber.setInvocationForPotentialStubbing(invocationMatcher);\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/DefaultReturnValues.java\n+package org.mockito.internal.stubbing;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.mockito.ReturnValues;\n+import org.mockito.internal.creation.MockNamer;\n+import org.mockito.internal.invocation.Invocation;\n+\n+public class DefaultReturnValues implements ReturnValues {\n+    \n+    public Object valueFor(Invocation invocation) {\n+        if (invocation.isToString()) {\n+            Object mock = invocation.getMock();\n+            String mockDescription = \"Mock for \" + MockNamer.nameForMock(mock) + \", hashCode: \" + mock.hashCode();\n+            return mockDescription;\n+        }\n+        \n+        Class<?> returnType = invocation.getMethod().getReturnType();\n+        return emptyValueFor(returnType);\n+    }\n+    \n+    //new instances are used instead of Collections.emptyList(), etc.\n+    //to avoid UnsupportedOperationException if code under test modifies returned collection\n+    protected Object emptyValueFor(Class<?> type) {\n+        if (type == Collection.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == Set.class) {\n+            return new HashSet<Object>();\n+        } else if (type == HashSet.class) {\n+            return new HashSet<Object>();\n+        } else if (type == SortedSet.class) {\n+            return new TreeSet<Object>();\n+        } else if (type == TreeSet.class) {\n+            return new TreeSet<Object>();\n+        } else if (type == LinkedHashSet.class) {\n+            return new LinkedHashSet<Object>();\n+        } else if (type == List.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == LinkedList.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == ArrayList.class) {\n+            return new ArrayList<Object>();\n+        } else if (type == Map.class) {\n+            return new HashMap<Object, Object>();\n+        } else if (type == HashMap.class) {\n+            return new HashMap<Object, Object>();\n+        } else if (type == SortedMap.class) {\n+            return new TreeMap<Object, Object>();\n+        } else if (type == TreeMap.class) {\n+            return new TreeMap<Object, Object>();\n+        } else if (type == LinkedHashMap.class) {\n+            return new LinkedHashMap<Object, Object>();\n+        }       \n+        \n+        //let's not care about the rest of collections\n+        return null;\n+    }\n+}\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n                 return s.answer();\n             }\n         }\n-        return MockitoConfiguration.emptyValues().valueFor(invocation);\n+        return MockitoConfiguration.defaultReturnValues().valueFor(invocation);\n     }\n \n     public void addThrowableForVoidMethod(Throwable throwable) {\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/DefaultReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+\n+public class DefaultReturnValuesTest extends TestBase {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n+        DefaultReturnValues values = new DefaultReturnValues();\n+        \n+        assertTrue(((Collection) values.emptyValueFor(Collection.class)).isEmpty());\n+\n+        assertTrue(((Set) values.emptyValueFor(Set.class)).isEmpty());\n+        assertTrue(((SortedSet) values.emptyValueFor(SortedSet.class)).isEmpty());\n+        assertTrue(((HashSet) values.emptyValueFor(HashSet.class)).isEmpty());\n+        assertTrue(((TreeSet) values.emptyValueFor(TreeSet.class)).isEmpty());\n+        assertTrue(((LinkedHashSet) values.emptyValueFor(LinkedHashSet.class)).isEmpty());\n+\n+        assertTrue(((List) values.emptyValueFor(List.class)).isEmpty());\n+        assertTrue(((ArrayList) values.emptyValueFor(ArrayList.class)).isEmpty());\n+        assertTrue(((LinkedList) values.emptyValueFor(LinkedList.class)).isEmpty());\n+\n+        assertTrue(((Map) values.emptyValueFor(Map.class)).isEmpty());\n+        assertTrue(((SortedMap) values.emptyValueFor(SortedMap.class)).isEmpty());\n+        assertTrue(((HashMap) values.emptyValueFor(HashMap.class)).isEmpty());\n+        assertTrue(((TreeMap) values.emptyValueFor(TreeMap.class)).isEmpty());\n+        assertTrue(((LinkedHashMap) values.emptyValueFor(LinkedHashMap.class)).isEmpty());\n+        \n+        assertNull(values.emptyValueFor(String.class));\n+    }\n+}\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.internal.matchers.EqualsTest;\n import org.mockito.internal.progress.MockingProgressImplTest;\n import org.mockito.internal.progress.VerificationModeImplTest;\n-import org.mockito.internal.stubbing.EmptyReturnValuesTest;\n+import org.mockito.internal.stubbing.DefaultReturnValuesTest;\n import org.mockito.internal.stubbing.ResultTest;\n import org.mockito.internal.stubbing.StubberTest;\n import org.mockito.internal.util.ListUtilTest;\n                     VerificationModeImplTest.class,\n                     MockHandlerTest.class,\n                     AllInvocationsFinderTest.class,\n-                    EmptyReturnValuesTest.class,\n+                    DefaultReturnValuesTest.class,\n                     StubberTest.class,\n                     ResultTest.class,\n                     NumberOfInvocationsVerifierTest.class,", "timestamp": 1206315145, "metainfo": ""}