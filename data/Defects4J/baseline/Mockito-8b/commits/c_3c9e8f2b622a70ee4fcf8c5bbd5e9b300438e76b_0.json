{"sha": "3c9e8f2b622a70ee4fcf8c5bbd5e9b300438e76b", "log": "Refactored Runner code so that internal runners don't inherit from JUnit runners. Thanks to that, we can hide from clients internal runners code (internal runners cannot be used with RunWith annotation)  --HG-- rename : src/org/mockito/internal/runners/MockitoJUnit44RunnerImpl.java => src/org/mockito/internal/runners/JUnit44RunnerImpl.java rename : src/org/mockito/internal/runners/MockitoJUnit45AndUpRunner.java => src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401394", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/JUnit44RunnerImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.runners;\n+\n+import org.junit.internal.runners.InitializationError;\n+import org.junit.internal.runners.JUnit4ClassRunner;\n+import org.junit.runner.Description;\n+import org.junit.runner.Runner;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.util.FrameworkUsageValidator;\n+\n+@SuppressWarnings(\"deprecation\")\n+public class JUnit44RunnerImpl implements RunnerImpl {\n+\n+    Runner runner;\n+\n+    public JUnit44RunnerImpl(Class<?> klass) throws InitializationError {\n+        this.runner = new JUnit4ClassRunner(klass) {\n+            @Override\n+            protected Object createTest() throws Exception {\n+                Object test = super.createTest();\n+                MockitoAnnotations.initMocks(test);\n+                return test;\n+            }\n+        };\n+    }\n+\n+    public void run(RunNotifier notifier) {\n+        // add listener that validates framework usage at the end of each test\n+        notifier.addListener(new FrameworkUsageValidator(notifier));\n+\n+        runner.run(notifier);\n+    }\n+\n+    public Description getDescription() {\n+        return runner.getDescription();\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java\n+package org.mockito.internal.runners;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.Runner;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n+import org.junit.runners.model.Statement;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.util.FrameworkUsageValidator;\n+\n+//TODO: check out if this runner is still recommended in jUnit 4.6\n+public class JUnit45AndHigherRunnerImpl implements RunnerImpl {\n+\n+    private Runner runner;\n+\n+    public JUnit45AndHigherRunnerImpl(Class<?> klass) throws InitializationError {\n+        runner = new BlockJUnit4ClassRunner(klass) {\n+            protected Statement withBefores(FrameworkMethod method, Object target,\n+                    Statement statement) {\n+                // init annotated mocks before tests\n+                MockitoAnnotations.initMocks(target);\n+                return super.withBefores(method, target, statement);\n+            }\n+        };\n+    }\n+\n+    public void run(final RunNotifier notifier) {\n+        // add listener that validates framework usage at the end of each test\n+        notifier.addListener(new FrameworkUsageValidator(notifier));\n+\n+        runner.run(notifier);\n+    }\n+\n+    public Description getDescription() {\n+        return runner.getDescription();\n+    }\n+}\n--- a/src/org/mockito/internal/runners/RunnerFactory.java\n+++ b/src/org/mockito/internal/runners/RunnerFactory.java\n package org.mockito.internal.runners;\n \n-import org.junit.runner.Runner;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.runners.util.RunnerProvider;\n \n public class RunnerFactory {\n \n-    private final RunnerProvider classProvider;\n+    private final RunnerProvider runnerProvider;\n \n-    RunnerFactory(RunnerProvider classProvider) {\n-        this.classProvider = classProvider;\n+    RunnerFactory(RunnerProvider runnerProvider) {\n+        this.runnerProvider = runnerProvider;\n     }\n \n     public RunnerFactory() {\n         this(new RunnerProvider());\n     }\n \n-    public Runner create(Class<?> klass) {\n+    public RunnerImpl create(Class<?> klass) {\n         try {\n-            if (classProvider.isJUnit45OrHigherAvailable()) {\n-                return classProvider.newInstance(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\", klass);\n+            if (runnerProvider.isJUnit45OrHigherAvailable()) {\n+                return runnerProvider.newInstance(\"org.mockito.internal.runners.JUnit45AndHigherRunnerImpl\", klass);\n             } else {\n-                return classProvider.newInstance(\"org.mockito.internal.runners.MockitoJUnit44RunnerImpl\", klass);\n+                return runnerProvider.newInstance(\"org.mockito.internal.runners.JUnit44RunnerImpl\", klass);\n             }\n         } catch (Throwable t) {\n             throw new MockitoException(\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/RunnerImpl.java\n+package org.mockito.internal.runners;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+\n+/**\n+ * I'm using this surrogate interface to hide internal Runner implementations.\n+ * Surrogate cannot be used with &#064;RunWith therefore it is less likely clients will use interal runners.\n+ */\n+public interface RunnerImpl {\n+\n+    void run(RunNotifier notifier);\n+\n+    Description getDescription();\n+\n+}\n--- a/src/org/mockito/internal/runners/util/RunnerProvider.java\n+++ b/src/org/mockito/internal/runners/util/RunnerProvider.java\n \n import java.lang.reflect.Constructor;\n \n-import org.junit.runner.Runner;\n+import org.mockito.internal.runners.RunnerImpl;\n \n public class RunnerProvider {\n \n         return hasJUnit45OrHigher;\n     }\n \n-    public Runner newInstance(String runnerClassName, Class<?> constructorParam) throws Throwable {\n+    public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n         Class<?> runnerClass = Class.forName(runnerClassName);\n         Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n-        return (Runner) constructor.newInstance(constructorParam);   \n+        return (RunnerImpl) constructor.newInstance(constructorParam);   \n     }\n }\n--- a/src/org/mockito/runners/MockitoJUnit44Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit44Runner.java\n package org.mockito.runners;\n \n import org.junit.internal.runners.InitializationError;\n+import org.junit.runner.Description;\n+import org.junit.runner.Runner;\n+import org.junit.runner.notification.RunNotifier;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n-import org.mockito.internal.runners.MockitoJUnit44RunnerImpl;\n+import org.mockito.internal.runners.JUnit44RunnerImpl;\n+import org.mockito.internal.runners.RunnerImpl;\n \n \n /**\n  */\n @SuppressWarnings(\"deprecation\")\n @Deprecated\n-public class MockitoJUnit44Runner extends MockitoJUnit44RunnerImpl {\n+public class MockitoJUnit44Runner extends Runner {\n+\n+    private RunnerImpl runner;\n \n     public MockitoJUnit44Runner(Class<?> klass) throws InitializationError {\n-        super(klass);\n-    }}\n+        this.runner = new JUnit44RunnerImpl(klass);\n+    }\n+\n+    @Override\n+    public Description getDescription() {\n+        return runner.getDescription();\n+    }\n+\n+    @Override\n+    public void run(RunNotifier notifier) {\n+        runner.run(notifier);\n+    }\n+}\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n import org.mockito.internal.runners.RunnerFactory;\n+import org.mockito.internal.runners.RunnerImpl;\n \n \n /**\n  */\n public class MockitoJUnitRunner extends Runner {\n \n-    private final Runner runner;\n+    private final RunnerImpl runner;\n \n     public MockitoJUnitRunner(Class<?> klass) {\n         runner = new RunnerFactory().create(klass);\n--- a/test/org/mockito/internal/runners/RunnerFactoryTest.java\n+++ b/test/org/mockito/internal/runners/RunnerFactoryTest.java\n import static org.hamcrest.CoreMatchers.*;\n \n import org.junit.Test;\n-import org.junit.runner.Runner;\n import org.junit.runners.model.InitializationError;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.runners.util.RunnerProvider;\n         RunnerFactory factory = new RunnerFactory(provider);\n         \n         //when\n-        Runner runner = factory.create(RunnerFactoryTest.class);\n+        RunnerImpl runner = factory.create(RunnerFactoryTest.class);\n         \n         //then\n-        assertThat(runner, is(MockitoJUnit44RunnerImpl.class));\n+        assertThat(runner, is(JUnit44RunnerImpl.class));\n     }\n     \n     @Test\n         RunnerFactory factory = new RunnerFactory(provider);\n         \n         //when\n-        Runner runner = factory.create(RunnerFactoryTest.class);\n+        RunnerImpl runner = factory.create(RunnerFactoryTest.class);\n         \n         //then\n-        assertThat(runner, is(MockitoJUnit45AndUpRunner.class));\n+        assertThat(runner, is(JUnit45AndHigherRunnerImpl.class));\n     }\n     \n     @Test\n             public boolean isJUnit45OrHigherAvailable() {\n                 return false;\n             }\n-            public Runner newInstance(String runnerClassName, Class<?> constructorParam) throws Throwable {\n+            public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\n                 throw new InitializationError(\"Where is JUnit, dude?\");\n             }\n         };\n--- a/test/org/mockito/internal/runners/util/RunnerProviderTest.java\n+++ b/test/org/mockito/internal/runners/util/RunnerProviderTest.java\n package org.mockito.internal.runners.util;\n \n import org.junit.Test;\n-import org.junit.runner.Runner;\n+import org.mockito.internal.runners.RunnerImpl;\n import org.mockitoutil.TestBase;\n \n \n         //given\n         RunnerProvider provider = new RunnerProvider();\n         //when\n-        Runner runner = provider.newInstance(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\", this.getClass());\n+        RunnerImpl runner = provider.newInstance(\"org.mockito.internal.runners.JUnit45AndUpRunnerImpl\", this.getClass());\n         //then\n         assertNotNull(runner);\n     }", "timestamp": 1241291591, "metainfo": ""}