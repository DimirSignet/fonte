{"sha": "9f0ba11e3cd015f54fe2e3c37742a2dceb481fc3", "log": "deleted easymock package  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4026", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/CoolMatchers.java\n+package org.mockito;\n+\n+import org.mockito.internal.LastArguments;\n+import org.mockito.internal.matchers.*;\n+\n+public class CoolMatchers {\n+    /**\n+     * Expects any boolean argument. For details, see the EasyMock\n+     * documentation.\n+     * \n+     * @return <code>false</code>.\n+     */\n+    public static boolean anyBoolean() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return false;\n+    }\n+\n+    /**\n+     * Expects any byte argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static byte anyByte() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any char argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static char anyChar() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any int argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static int anyInt() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any long argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static long anyLong() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any float argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static float anyFloat() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any double argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static double anyDouble() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any short argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static short anyShort() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any Object argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object anyObject() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an object implementing the given class. For details, see the\n+     * EasyMock documentation.\n+     * \n+     * @param <T>\n+     *            the accepted type.\n+     * @param clazz\n+     *            the class of the accepted type.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T isA(Class<T> clazz) {\n+        LastArguments.reportMatcher(new InstanceOf(clazz));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static boolean eq(boolean value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a byte that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte eq(byte value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static char eq(char value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double eq(double value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float eq(float value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int eq(int value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long eq(long value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short eq(short value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an Object that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T eq(T value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects null.\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object isNull() {\n+        LastArguments.reportMatcher(Null.NULL);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects not null.\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object notNull() {\n+        LastArguments.reportMatcher(NotNull.NOT_NULL);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that matches the given regular expression. For details,\n+     * see the EasyMock documentation.\n+     * \n+     * @param regex\n+     *            the regular expression.\n+     * @return <code>null</code>.\n+     */\n+    public static String matches(String regex) {\n+        LastArguments.reportMatcher(new Matches(regex));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a double that has an absolute difference to the given value that\n+     * is less than the given delta. For details, see the EasyMock\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param delta\n+     *            the given delta.\n+     * @return <code>0</code>.\n+     */\n+    public static double eq(double value, double delta) {\n+        LastArguments.reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that has an absolute difference to the given value that\n+     * is less than the given delta. For details, see the EasyMock\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param delta\n+     *            the given delta.\n+     * @return <code>0</code>.\n+     */\n+    public static float eq(float value, float delta) {\n+        LastArguments.reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n+    }\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.hamcrest.*;\n import org.mockito.internal.*;\n \n-public class Mockito {\n+public class Mockito extends CoolMatchers {\n \n     public static <T> T mock(Class<T> classToMock) {\n         try {\n--- a/test/org/mockito/InvocationTest.java\n+++ b/test/org/mockito/InvocationTest.java\n \n import java.lang.reflect.Method;\n \n-import org.easymock.internal.*;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.internal.Invocation;\n--- a/test/org/mockito/internal/ExpectedInvocationTest.java\n+++ b/test/org/mockito/internal/ExpectedInvocationTest.java\n \n import java.lang.reflect.Method;\n \n-import org.easymock.internal.*;\n import org.junit.Test;\n \n public class ExpectedInvocationTest {\n--- a/test/org/mockito/sample/MockitoSampleTest.java\n+++ b/test/org/mockito/sample/MockitoSampleTest.java\n package org.mockito.sample;\n-import org.easymock.EasyMock;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n--- a/test/org/mockito/usage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockito/usage/matchers/ComparableMatchersTest.java\n \n import java.math.BigDecimal;\n \n-import org.easymock.internal.matchers.*;\n import org.junit.Test;\n import org.mockito.internal.matchers.*;\n-import org.mockito.matchers.*;\n \n //TODO do we need matchers like GreaterThan - does it make any sense?\n public class ComparableMatchersTest {\n--- a/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n  */\n package org.mockito.usage.matchers;\n \n-import static org.easymock.EasyMock.*;\n+import static org.mockito.Mockito.*;\n import static org.junit.Assert.*;\n \n import org.junit.*;\n--- a/test/org/mockito/usage/matchers/MatchersTest.java\n+++ b/test/org/mockito/usage/matchers/MatchersTest.java\n  */\n package org.mockito.usage.matchers;\n \n-import static org.easymock.EasyMock.*;\n+import static org.mockito.Mockito.*;\n import static org.junit.Assert.*;\n import static org.mockito.Mockito.stub;\n \n--- a/test/org/mockito/usage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockito/usage/matchers/MatchersToStringTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.easymock.internal.matchers.*;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.internal.matchers.*;\n--- a/test/org/mockito/usage/verification/BasicVerificationTest.java\n+++ b/test/org/mockito/usage/verification/BasicVerificationTest.java\n \n import java.util.*;\n \n-import org.easymock.EasyMock;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n--- a/test/org/mockito/usage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n+++ b/test/org/mockito/usage/verification/VerificationOnMultipleMocksUsingMatchersTest.java\n \n import java.util.*;\n \n-import org.easymock.EasyMock;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n         map.put(\"test\", 100);\n         map.put(\"test two\", 200);\n         \n-        verify(list).add(EasyMock.anyObject());\n-        verify(list).add(EasyMock.anyInt(), EasyMock.eq(\"test two\"));\n+        verify(list).add(anyObject());\n+        verify(list).add(anyInt(), eq(\"test two\"));\n         \n-        verify(map).put(EasyMock.anyObject(), EasyMock.anyObject());\n-        verify(map).put(EasyMock.eq(\"test two\"), EasyMock.eq(200));\n+        verify(map).put(anyObject(), anyObject());\n+        verify(map).put(eq(\"test two\"), eq(200));\n         \n         verifyNoMoreInteractions(list, map);\n     }\n         verify(list, 1).add(\"two\");\n         verify(list, 0).add(\"three\");\n         \n-        verify(map, 2).put(EasyMock.anyObject(), EasyMock.anyInt());\n+        verify(map, 2).put(anyObject(), anyInt());\n         \n         verifyNoMoreInteractions(list, map);\n         verifyZeroInteractions(set);\n--- a/test/org/mockito/usage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockito/usage/verification/VerificationUsingMatchersTest.java\n  */\n package org.mockito.usage.verification;\n \n-import static org.easymock.EasyMock.*;\n import static org.mockito.Matchers.*;\n import static org.junit.Assert.*;\n-import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.*;\n \n import org.junit.*;\n import org.mockito.*;", "timestamp": 1195320488, "metainfo": ""}