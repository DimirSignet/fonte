{"sha": "f60452d3bd20356d6ad97808656be93fa3b495e8", "log": "Removed some generics warnings, suppressed where it wasn't possible.  --HG-- branch : issue148 extra : transplant_source : 7%9B%99%09%20%3D%E6%FFfP%DC%81%03%D4%BCsl%C0F%14", "commit": "\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n @SuppressWarnings({\"unchecked\",\"serial\"})\n public class MockHandlerTest extends TestBase {\n     \n+\t@SuppressWarnings(\"rawtypes\")\n \tprivate static final Answer SOME_ANSWER = mock(Answer.class);\n \tprivate static final StubbedInvocationMatcher SOME_RETURN_VALUE = mock(StubbedInvocationMatcher.class);\n \tprivate static final Invocation SOME_INVOCATION = mock(Invocation.class);\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n         //given\n         Invocation invocation = new InvocationBuilder().toInvocation();\n-        MockHandler handler = new MockHandler();\n+        @SuppressWarnings(\"rawtypes\")\n+\t\tMockHandler<?> handler = new MockHandler();\n         handler.mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());\n         handler.matchersBinder = new MatchersBinder() {\n             public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n     @Test\n     public void shouldNotifyInvocationHandlerDuringStubVoid() throws Throwable {\n     \t// given\n-    \tMockHandler handler = createHandlerWithListeners(listener1, listener2);\n+    \tMockHandler<?> handler = createHandlerWithListeners(listener1, listener2);\n     \tstubWithInvocationDuringStubVoid(handler);\n     \t\n     \t\n     \tstubHandlerStateWithPreviousStubVoidInvocation(handler);\n \t}\n \n-\tprivate void stubHandlerStateWithPreviousStubVoidInvocation(MockHandler handler) {\n+\tprivate void stubHandlerStateWithPreviousStubVoidInvocation(MockHandler<?> handler) {\n \t\tStubbedInvocationMatcher invocationContainer = mock(StubbedInvocationMatcher.class);\n \t\tgiven(handler.matchersBinder.bindMatchers(any(ArgumentMatcherStorage.class), any(Invocation.class))).willReturn(invocationContainer);\n \t\t\n \t\tgiven(invocation.isVoid()).willReturn(true);\n \t}\n \n+\t@SuppressWarnings(\"rawtypes\")\n \tprivate void stubWithPreviouslySetVoidAnswer(MockHandler handler) {\n \t\tList<Answer<?>> answers = new ArrayList<Answer<?>>();\n     \tanswers.add(new DoesNothing());", "timestamp": 1297971765, "metainfo": ""}