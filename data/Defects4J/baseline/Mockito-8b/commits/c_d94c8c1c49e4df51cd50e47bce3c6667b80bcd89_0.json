{"sha": "d94c8c1c49e4df51cd50e47bce3c6667b80bcd89", "log": "Fixed enhancement 65 New matcher: anySet() matches any set or null  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401284", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.hamcrest.Matcher;\n-import org.mockito.internal.matchers.Any;\n-import org.mockito.internal.matchers.Contains;\n-import org.mockito.internal.matchers.EndsWith;\n-import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.InstanceOf;\n-import org.mockito.internal.matchers.Matches;\n-import org.mockito.internal.matchers.NotNull;\n-import org.mockito.internal.matchers.Null;\n-import org.mockito.internal.matchers.Same;\n-import org.mockito.internal.matchers.StartsWith;\n-import org.mockito.internal.matchers.apachecommons.ReflectionEquals;\n-import org.mockito.internal.progress.HandyReturnValues;\n-import org.mockito.internal.progress.MockingProgress;\n-import org.mockito.internal.progress.ThreadSafeMockingProgress;\n-\n-/**\n- * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n- * <p>\n- * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n- * <pre>\n- *  //stubbing using anyInt() argument matcher\n- *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n- *  \n- *  //following prints \"element\"\n- *  System.out.println(mockedList.get(999));\n- *  \n- *  //you can also verify using argument matcher\n- *  verify(mockedList).get(anyInt());\n- * </pre>\n- * Scroll down to see all methods - full list of matchers.\n- * <p>\n- * <b>Warning:</b>\n- * <p>\n- * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n- * <p>\n- * E.g: (example shows verification but the same applies to stubbing):\n- * <pre>\n- *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n- *   //above is correct - eq() is also an argument matcher\n- *   \n- *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n- *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n- * </pre>\n- * \n- * <h1>Custom Argument Matchers</h1>\n- * \n- * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n- * <p>\n- * You can use {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n- * In case of failure {@link ArgumentMatcher} generates description based on <b>decamelized class name</b> - to promote meaningful class names.\n- * <p>\n- * Example:\n- * \n- * <pre>\n- *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n- *      public boolean matches(Object list) {\n- *          return ((List) list).size() == 2;\n- *      }\n- *   }\n- *   \n- *   List mock = mock(List.class);\n- *   \n- *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n- *   \n- *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n- *   \n- *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n- * </pre>\n- * \n- * To keep it readable you may want to extract method, e.g:\n- * <pre>\n- *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n- *   //becomes\n- *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n- * </pre>\n- *\n- * Custom argument matchers can make the test less readable. \n- * Sometimes it's better to implement equals() for arguments that are passed to mocks \n- * (Mockito naturally uses equals() for argument matching). \n- * This can make the test cleaner.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public class Matchers {\n-    \n-    private static MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n-\n-    /**\n-     * any boolean, Boolean or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>false</code>.\n-     */\n-    public static boolean anyBoolean() {\n-        return reportMatcher(Any.ANY).returnFalse();\n-    }\n-\n-    /**\n-     * any byte, Byte or null\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static byte anyByte() {\n-        return reportMatcher(Any.ANY).returnZero();\n-    }\n-\n-    /**\n-     * any char, Character or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static char anyChar() {\n-        return reportMatcher(Any.ANY).returnChar();\n-    }\n-\n-    /**\n-     * any int, Integer or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static int anyInt() {\n-        return reportMatcher(Any.ANY).returnZero();\n-    }\n-\n-    /**\n-     * any long, Long or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static long anyLong() {\n-        return reportMatcher(Any.ANY).returnZero();\n-    }\n-\n-    /**\n-     * any float, Float or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static float anyFloat() {\n-        return reportMatcher(Any.ANY).returnZero();\n-    }\n-\n-    /**\n-     * any double, Double or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static double anyDouble() {\n-        return reportMatcher(Any.ANY).returnZero();\n-    }\n-\n-    /**\n-     * any short, Short or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>0</code>.\n-     */\n-    public static short anyShort() {\n-        return reportMatcher(Any.ANY).returnZero();\n-    }\n-\n-    /**\n-     * any Object or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>null</code>.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T> T anyObject() {\n-        return (T) reportMatcher(Any.ANY).returnNull();\n-    }\n-    \n-    /**\n-     * any object of specified class. \n-     * Sometimes looks better than anyObject() \n-     * <p>\n-     * Alias to {@link Matchers#anyObject()}\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>null</code>.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T> T any(Class<T> clazz) {\n-        return isA(clazz);\n-    }\n-\n-    /**\n-     * any String or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return empty String (\"\")\n-     */\n-    public static String anyString() {\n-        return reportMatcher(Any.ANY).returnString();\n-    }\n-    \n-    /**\n-     * any List or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return empty List.\n-     */\n-    public static List anyList() {\n-        return reportMatcher(Any.ANY).returnList();\n-    }    \n-    \n-    /**\n-     * any Map or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return empty Map.\n-     */\n-    public static Map anyMap() {\n-        return reportMatcher(Any.ANY).returnMap();\n-    }    \n-    \n-    /**\n-     * any Collection or null.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return empty Collection.\n-     */\n-    public static Collection anyCollection() {\n-        return reportMatcher(Any.ANY).returnList();\n-    }    \n-\n-    /**\n-     * Object argument that implements the given class. \n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param <T>\n-     *            the accepted type.\n-     * @param clazz\n-     *            the class of the accepted type.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T isA(Class<T> clazz) {\n-        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n-    }\n-\n-    /**\n-     * boolean argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static boolean eq(boolean value) {\n-        return reportMatcher(new Equals(value)).returnFalse();\n-    }\n-\n-    /**\n-     * byte argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte eq(byte value) {\n-        return reportMatcher(new Equals(value)).returnZero();\n-    }\n-\n-    /**\n-     * char argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static char eq(char value) {\n-        return reportMatcher(new Equals(value)).returnChar();\n-    }\n-\n-    /**\n-     * double argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double eq(double value) {\n-        return reportMatcher(new Equals(value)).returnZero();\n-    }\n-\n-    /**\n-     * float argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float eq(float value) {\n-        return reportMatcher(new Equals(value)).returnZero();\n-    }\n-    \n-    /**\n-     * int argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int eq(int value) {\n-        return reportMatcher(new Equals(value)).returnZero();\n-    }\n-\n-    /**\n-     * long argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long eq(long value) {\n-        return reportMatcher(new Equals(value)).returnZero();\n-    }\n-\n-    /**\n-     * short argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short eq(short value) {\n-        return reportMatcher(new Equals(value)).returnZero();\n-    }\n-\n-    /**\n-     * Object argument that is equal to the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T eq(T value) {\n-        return reportMatcher(new Equals(value)).<T>returnNull();\n-    }\n-\n-    /**\n-     * Object argument that is reflection-equal to the given value.\n-     * <p>\n-     * This matcher can be used when equals() is not implemented on compared objects.\n-     * Matcher uses java reflection API to compare fields of wanted and actual object.\n-     * <p>\n-     * Works similarly to EqualsBuilder.reflectionEquals(this, other) from apache commons library.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T refEq(T value) {\n-        return reportMatcher(new ReflectionEquals(value)).<T>returnNull();\n-    }\n-    \n-    /**\n-     * Object argument that is the same as the given value.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T same(T value) {\n-        return reportMatcher(new Same(value)).<T>returnNull();\n-    }\n-\n-    /**\n-     * null argument.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>null</code>.\n-     */\n-    public static Object isNull() {\n-        return reportMatcher(Null.NULL).returnNull();\n-    }\n-\n-    /**\n-     * not null argument.\n-     * <p>\n-     * alias to {@link Matchers#isNotNull()}\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>null</code>.\n-     */\n-    public static Object notNull() {\n-        return reportMatcher(NotNull.NOT_NULL).returnNull();\n-    }\n-    \n-    /**\n-     * not null argument.\n-     * <p>\n-     * alias to {@link Matchers#notNull()}\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @return <code>null</code>.\n-     */\n-    public static Object isNotNull() {\n-        return notNull();\n-    }\n-\n-    /**\n-     * String argument that contains the given substring.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param substring\n-     *            the substring.\n-     * @return empty String (\"\").\n-     */\n-    public static String contains(String substring) {\n-        return reportMatcher(new Contains(substring)).returnString();\n-    }\n-\n-    /**\n-     * String argument that matches the given regular expression.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param regex\n-     *            the regular expression.\n-     * @return empty String (\"\").\n-     */\n-    public static String matches(String regex) {\n-        return reportMatcher(new Matches(regex)).returnString();\n-    }\n-\n-    /**\n-     * String argument that ends with the given suffix.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param suffix\n-     *            the suffix.\n-     * @return empty String (\"\").\n-     */\n-    public static String endsWith(String suffix) {\n-        return reportMatcher(new EndsWith(suffix)).returnString();\n-    }\n-\n-    /**\n-     * String argument that starts with the given prefix.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param prefix\n-     *            the prefix.\n-     * @return empty String (\"\").\n-     */\n-    public static String startsWith(String prefix) {\n-        return reportMatcher(new StartsWith(prefix)).returnString();\n-    }\n-\n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link ArgumentMatcher} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T argThat(Matcher<T> matcher) {\n-        return reportMatcher(matcher).<T>returnNull();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static char charThat(Matcher<Character> matcher) {\n-        return reportMatcher(matcher).returnChar();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>false</code>.\n-     */\n-    public static boolean booleanThat(Matcher<Boolean> matcher) {\n-        return reportMatcher(matcher).returnFalse();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static byte byteThat(Matcher<Byte> matcher) {\n-        return reportMatcher(matcher).returnZero();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static short shortThat(Matcher<Short> matcher) {\n-        return reportMatcher(matcher).returnZero();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static int intThat(Matcher<Integer> matcher) {\n-        return reportMatcher(matcher).returnZero();\n-    }\n-\n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static long longThat(Matcher<Long> matcher) {\n-        return reportMatcher(matcher).returnZero();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static float floatThat(Matcher<Float> matcher) {\n-        return reportMatcher(matcher).returnZero();\n-    }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers} class\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>0</code>.\n-     */\n-    public static double doubleThat(Matcher<Double> matcher) {\n-        return reportMatcher(matcher).returnZero();\n-    }\n-\n-    private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\n-        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hamcrest.Matcher;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.internal.matchers.Contains;\n+import org.mockito.internal.matchers.EndsWith;\n+import org.mockito.internal.matchers.Equals;\n+import org.mockito.internal.matchers.InstanceOf;\n+import org.mockito.internal.matchers.Matches;\n+import org.mockito.internal.matchers.NotNull;\n+import org.mockito.internal.matchers.Null;\n+import org.mockito.internal.matchers.Same;\n+import org.mockito.internal.matchers.StartsWith;\n+import org.mockito.internal.matchers.apachecommons.ReflectionEquals;\n+import org.mockito.internal.progress.HandyReturnValues;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+\n+/**\n+ * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n+ * <p>\n+ * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n+ * <pre>\n+ *  //stubbing using anyInt() argument matcher\n+ *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n+ *  \n+ *  //following prints \"element\"\n+ *  System.out.println(mockedList.get(999));\n+ *  \n+ *  //you can also verify using argument matcher\n+ *  verify(mockedList).get(anyInt());\n+ * </pre>\n+ * Scroll down to see all methods - full list of matchers.\n+ * <p>\n+ * <b>Warning:</b>\n+ * <p>\n+ * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n+ * <p>\n+ * E.g: (example shows verification but the same applies to stubbing):\n+ * <pre>\n+ *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n+ *   //above is correct - eq() is also an argument matcher\n+ *   \n+ *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n+ *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n+ * </pre>\n+ * \n+ * <h1>Custom Argument Matchers</h1>\n+ * \n+ * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n+ * <p>\n+ * You can use {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n+ * In case of failure {@link ArgumentMatcher} generates description based on <b>decamelized class name</b> - to promote meaningful class names.\n+ * <p>\n+ * Example:\n+ * \n+ * <pre>\n+ *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n+ *      public boolean matches(Object list) {\n+ *          return ((List) list).size() == 2;\n+ *      }\n+ *   }\n+ *   \n+ *   List mock = mock(List.class);\n+ *   \n+ *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n+ *   \n+ *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n+ *   \n+ *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n+ * </pre>\n+ * \n+ * To keep it readable you may want to extract method, e.g:\n+ * <pre>\n+ *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n+ *   //becomes\n+ *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n+ * </pre>\n+ *\n+ * Custom argument matchers can make the test less readable. \n+ * Sometimes it's better to implement equals() for arguments that are passed to mocks \n+ * (Mockito naturally uses equals() for argument matching). \n+ * This can make the test cleaner.\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class Matchers {\n+    \n+    private static MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n+\n+    /**\n+     * any boolean, Boolean or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>false</code>.\n+     */\n+    public static boolean anyBoolean() {\n+        return reportMatcher(Any.ANY).returnFalse();\n+    }\n+\n+    /**\n+     * any byte, Byte or null\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static byte anyByte() {\n+        return reportMatcher(Any.ANY).returnZero();\n+    }\n+\n+    /**\n+     * any char, Character or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static char anyChar() {\n+        return reportMatcher(Any.ANY).returnChar();\n+    }\n+\n+    /**\n+     * any int, Integer or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static int anyInt() {\n+        return reportMatcher(Any.ANY).returnZero();\n+    }\n+\n+    /**\n+     * any long, Long or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static long anyLong() {\n+        return reportMatcher(Any.ANY).returnZero();\n+    }\n+\n+    /**\n+     * any float, Float or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static float anyFloat() {\n+        return reportMatcher(Any.ANY).returnZero();\n+    }\n+\n+    /**\n+     * any double, Double or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static double anyDouble() {\n+        return reportMatcher(Any.ANY).returnZero();\n+    }\n+\n+    /**\n+     * any short, Short or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static short anyShort() {\n+        return reportMatcher(Any.ANY).returnZero();\n+    }\n+\n+    /**\n+     * any Object or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T anyObject() {\n+        return (T) reportMatcher(Any.ANY).returnNull();\n+    }\n+    \n+    /**\n+     * any object of specified class. \n+     * Sometimes looks better than anyObject() \n+     * <p>\n+     * Alias to {@link Matchers#anyObject()}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T any(Class<T> clazz) {\n+        return isA(clazz);\n+    }\n+\n+    /**\n+     * any String or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return empty String (\"\")\n+     */\n+    public static String anyString() {\n+        return reportMatcher(Any.ANY).returnString();\n+    }\n+    \n+    /**\n+     * any List or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return empty List.\n+     */\n+    public static List anyList() {\n+        return reportMatcher(Any.ANY).returnList();\n+    }    \n+    \n+    /**\n+     * any Set or null\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     *\n+     * @return empty Set\n+     */\n+    public static Set anySet() {\n+        return reportMatcher(Any.ANY).returnSet();\n+    }\n+\n+    /**\n+     * any Map or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return empty Map.\n+     */\n+    public static Map anyMap() {\n+        return reportMatcher(Any.ANY).returnMap();\n+    }    \n+    \n+    /**\n+     * any Collection or null.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return empty Collection.\n+     */\n+    public static Collection anyCollection() {\n+        return reportMatcher(Any.ANY).returnList();\n+    }    \n+\n+    /**\n+     * Object argument that implements the given class. \n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param <T>\n+     *            the accepted type.\n+     * @param clazz\n+     *            the class of the accepted type.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T isA(Class<T> clazz) {\n+        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n+    }\n+\n+    /**\n+     * boolean argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static boolean eq(boolean value) {\n+        return reportMatcher(new Equals(value)).returnFalse();\n+    }\n+\n+    /**\n+     * byte argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte eq(byte value) {\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+\n+    /**\n+     * char argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static char eq(char value) {\n+        return reportMatcher(new Equals(value)).returnChar();\n+    }\n+\n+    /**\n+     * double argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double eq(double value) {\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+\n+    /**\n+     * float argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float eq(float value) {\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+    \n+    /**\n+     * int argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int eq(int value) {\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+\n+    /**\n+     * long argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long eq(long value) {\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+\n+    /**\n+     * short argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short eq(short value) {\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+\n+    /**\n+     * Object argument that is equal to the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T eq(T value) {\n+        return reportMatcher(new Equals(value)).<T>returnNull();\n+    }\n+\n+    /**\n+     * Object argument that is reflection-equal to the given value.\n+     * <p>\n+     * This matcher can be used when equals() is not implemented on compared objects.\n+     * Matcher uses java reflection API to compare fields of wanted and actual object.\n+     * <p>\n+     * Works similarly to EqualsBuilder.reflectionEquals(this, other) from apache commons library.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T refEq(T value) {\n+        return reportMatcher(new ReflectionEquals(value)).<T>returnNull();\n+    }\n+    \n+    /**\n+     * Object argument that is the same as the given value.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T same(T value) {\n+        return reportMatcher(new Same(value)).<T>returnNull();\n+    }\n+\n+    /**\n+     * null argument.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object isNull() {\n+        return reportMatcher(Null.NULL).returnNull();\n+    }\n+\n+    /**\n+     * not null argument.\n+     * <p>\n+     * alias to {@link Matchers#isNotNull()}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object notNull() {\n+        return reportMatcher(NotNull.NOT_NULL).returnNull();\n+    }\n+    \n+    /**\n+     * not null argument.\n+     * <p>\n+     * alias to {@link Matchers#notNull()}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object isNotNull() {\n+        return notNull();\n+    }\n+\n+    /**\n+     * String argument that contains the given substring.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param substring\n+     *            the substring.\n+     * @return empty String (\"\").\n+     */\n+    public static String contains(String substring) {\n+        return reportMatcher(new Contains(substring)).returnString();\n+    }\n+\n+    /**\n+     * String argument that matches the given regular expression.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param regex\n+     *            the regular expression.\n+     * @return empty String (\"\").\n+     */\n+    public static String matches(String regex) {\n+        return reportMatcher(new Matches(regex)).returnString();\n+    }\n+\n+    /**\n+     * String argument that ends with the given suffix.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param suffix\n+     *            the suffix.\n+     * @return empty String (\"\").\n+     */\n+    public static String endsWith(String suffix) {\n+        return reportMatcher(new EndsWith(suffix)).returnString();\n+    }\n+\n+    /**\n+     * String argument that starts with the given prefix.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param prefix\n+     *            the prefix.\n+     * @return empty String (\"\").\n+     */\n+    public static String startsWith(String prefix) {\n+        return reportMatcher(new StartsWith(prefix)).returnString();\n+    }\n+\n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link ArgumentMatcher} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T argThat(Matcher<T> matcher) {\n+        return reportMatcher(matcher).<T>returnNull();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static char charThat(Matcher<Character> matcher) {\n+        return reportMatcher(matcher).returnChar();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>false</code>.\n+     */\n+    public static boolean booleanThat(Matcher<Boolean> matcher) {\n+        return reportMatcher(matcher).returnFalse();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static byte byteThat(Matcher<Byte> matcher) {\n+        return reportMatcher(matcher).returnZero();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static short shortThat(Matcher<Short> matcher) {\n+        return reportMatcher(matcher).returnZero();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static int intThat(Matcher<Integer> matcher) {\n+        return reportMatcher(matcher).returnZero();\n+    }\n+\n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static long longThat(Matcher<Long> matcher) {\n+        return reportMatcher(matcher).returnZero();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static float floatThat(Matcher<Float> matcher) {\n+        return reportMatcher(matcher).returnZero();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n+    public static double doubleThat(Matcher<Double> matcher) {\n+        return reportMatcher(matcher).returnZero();\n+    }\n+\n+    private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\n+        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n+    }\n }\n--- a/src/org/mockito/internal/progress/HandyReturnValues.java\n+++ b/src/org/mockito/internal/progress/HandyReturnValues.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito.internal.progress;\n-\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n-@SuppressWarnings(\"unchecked\")\n-public class HandyReturnValues {\n-\n-    public byte returnZero() {\n-        return 0;\n-    }\n-\n-    public char returnChar() {\n-        return 0;\n-    }\n-\n-    public <T> T returnNull() {\n-        return null;\n-    }\n-\n-    public boolean returnFalse() {\n-        return false;\n-    }\n-\n-    public String returnString() {\n-        return \"\";\n-    }\n-\n-    public Map returnMap() {\n-        return new HashMap();\n-    }\n-\n-    public List returnList() {\n-        return new LinkedList();\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.progress;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class HandyReturnValues {\n+\n+    public byte returnZero() {\n+        return 0;\n+    }\n+\n+    public char returnChar() {\n+        return 0;\n+    }\n+\n+    public <T> T returnNull() {\n+        return null;\n+    }\n+\n+    public boolean returnFalse() {\n+        return false;\n+    }\n+\n+    public String returnString() {\n+        return \"\";\n+    }\n+\n+    public Map returnMap() {\n+        return new HashMap();\n+    }\n+\n+    public List returnList() {\n+        return new LinkedList();\n+    }\n+\n+    public Set returnSet() {\n+        return new HashSet();\n+    }\n }\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockitousage;\n-\n-import java.io.IOException;\n-import java.nio.charset.CharacterCodingException;\n-import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.swing.text.ChangedCharSetException;\n-\n-public interface IMethods {\n-\n-    boolean booleanReturningMethod();\n-    \n-    Boolean booleanObjectReturningMethod();\n-\n-    byte byteReturningMethod();\n-    \n-    Byte byteObjectReturningMethod();\n-\n-    short shortReturningMethod();\n-    \n-    Short shortObjectReturningMethod();\n-\n-    char charReturningMethod();\n-    \n-    Character charObjectReturningMethod();\n-\n-    int intReturningMethod();\n-    \n-    Integer integerReturningMethod();\n-\n-    long longReturningMethod();\n-    \n-    Long longObjectReturningMethod();\n-\n-    float floatReturningMethod();\n-    \n-    Float floatObjectReturningMethod();\n-\n-    double doubleReturningMethod();\n-    \n-    Double doubleObjectReturningMethod();\n-\n-    Object objectReturningMethod(Object ... objects);\n-    \n-    Object objectReturningMethodNoArgs();\n-\n-    String oneArg(boolean value);\n-    \n-    String oneArg(Boolean value);\n-\n-    String forBoolean(Boolean value);\n-\n-    String oneArg(byte value);\n-    \n-    String oneArg(Byte value);\n-\n-    String forByte(Byte value);\n-    \n-    String oneArg(short value);\n-\n-    String oneArg(Short value);\n-    \n-    String forShort(Short value);\n-    \n-    String oneArg(char value);\n-    \n-    String oneArg(Character value);\n-    \n-    String forCharacter(Character value);\n-\n-    String oneArg(int value);\n-    \n-    String oneArg(Integer value);\n-    \n-    String forInteger(Integer value);\n-\n-    String oneArg(long value);\n-\n-    String oneArg(Long value);\n-    \n-    String forLong(Long value);\n-    \n-    String oneArg(float value);\n-\n-    String oneArg(Float value);\n-    \n-    String forFloat(Float value);\n-    \n-    String oneArg(double value);\n-\n-    String oneArg(Double value);\n-    \n-    String forDouble(Double value);\n-    \n-    String oneArg(Object value);\n-\n-    String oneArg(String value);\n-\n-    String throwsNothing(boolean value);\n-\n-    String throwsIOException(int count) throws IOException;\n-\n-    String throwsError(int count);\n-\n-    String simpleMethod();\n-    \n-    String differentMethod();\n-    \n-    String differentMethod(String argument);\n-    \n-    String otherMethod();\n-\n-    String simpleMethod(String argument);\n-    \n-    String simpleMethod(Collection<?> collection);\n-    \n-    String simpleMethod(Object argument);\n-    \n-    String simpleMethod(int argument);\n-    \n-    String simpleMethod(String argOne, Integer argTwo);\n-    \n-    String simpleMethod(String one, Integer two, Integer three, Integer four, Integer five);\n-    \n-    String simpleMethod(String one, String[] two);\n-\n-    Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);\n-\n-    void twoArgumentMethod(int one, int two);\n-\n-    void arrayMethod(String[] strings);\n-\n-    String oneArray(boolean[] array);\n-\n-    String oneArray(byte[] array);\n-\n-    String oneArray(char[] array);\n-\n-    String oneArray(double[] array);\n-\n-    String oneArray(float[] array);\n-\n-    String oneArray(int[] array);\n-\n-    String oneArray(long[] array);\n-\n-    String oneArray(short[] array);\n-\n-    String oneArray(Object[] array);\n-    \n-    String canThrowException() throws ChangedCharSetException, CharacterCodingException; \n-\n-    String oneArray(String[] array);\n-\n-    void varargsString(int i, String... string);\n-\n-    Object varargsObject(int i, Object... object);\n-    \n-    void varargs(Object ... object);\n-    \n-    void varargs(String ... string);\n-\n-    List<String> listReturningMethod(Object ... objects);\n-    \n-    LinkedList<String> linkedListReturningMethod();\n-    \n-    String toString();\n-    \n-    String toString(String foo);\n-\n-    void voidMethod();\n-\n-    String forList(List<String> list);\n-    \n-    String forMap(Map<String, String> map);\n-    \n-    String forCollection(Collection<String> collection);\n-\n-    Object[] arrayReturningMethod();\n-\n-    IMethods iMethodsReturningMethod();\n-\n-    String stringReturningMethod();\n-\n-    Object objectArgMethod(Object str);\n-\n-    Object listArgMethod(List<String> list);\n-\n-    Object collectionArgMethod(Collection<String> collection);\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import java.io.IOException;\n+import java.nio.charset.CharacterCodingException;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.swing.text.ChangedCharSetException;\n+\n+public interface IMethods {\n+\n+    boolean booleanReturningMethod();\n+    \n+    Boolean booleanObjectReturningMethod();\n+\n+    byte byteReturningMethod();\n+    \n+    Byte byteObjectReturningMethod();\n+\n+    short shortReturningMethod();\n+    \n+    Short shortObjectReturningMethod();\n+\n+    char charReturningMethod();\n+    \n+    Character charObjectReturningMethod();\n+\n+    int intReturningMethod();\n+    \n+    Integer integerReturningMethod();\n+\n+    long longReturningMethod();\n+    \n+    Long longObjectReturningMethod();\n+\n+    float floatReturningMethod();\n+    \n+    Float floatObjectReturningMethod();\n+\n+    double doubleReturningMethod();\n+    \n+    Double doubleObjectReturningMethod();\n+\n+    Object objectReturningMethod(Object ... objects);\n+    \n+    Object objectReturningMethodNoArgs();\n+\n+    String oneArg(boolean value);\n+    \n+    String oneArg(Boolean value);\n+\n+    String forBoolean(Boolean value);\n+\n+    String oneArg(byte value);\n+    \n+    String oneArg(Byte value);\n+\n+    String forByte(Byte value);\n+    \n+    String oneArg(short value);\n+\n+    String oneArg(Short value);\n+    \n+    String forShort(Short value);\n+    \n+    String oneArg(char value);\n+    \n+    String oneArg(Character value);\n+    \n+    String forCharacter(Character value);\n+\n+    String oneArg(int value);\n+    \n+    String oneArg(Integer value);\n+    \n+    String forInteger(Integer value);\n+\n+    String oneArg(long value);\n+\n+    String oneArg(Long value);\n+    \n+    String forLong(Long value);\n+    \n+    String oneArg(float value);\n+\n+    String oneArg(Float value);\n+    \n+    String forFloat(Float value);\n+    \n+    String oneArg(double value);\n+\n+    String oneArg(Double value);\n+    \n+    String forDouble(Double value);\n+    \n+    String oneArg(Object value);\n+\n+    String oneArg(String value);\n+\n+    String throwsNothing(boolean value);\n+\n+    String throwsIOException(int count) throws IOException;\n+\n+    String throwsError(int count);\n+\n+    String simpleMethod();\n+    \n+    String differentMethod();\n+    \n+    String differentMethod(String argument);\n+    \n+    String otherMethod();\n+\n+    String simpleMethod(String argument);\n+    \n+    String simpleMethod(Collection<?> collection);\n+    \n+    String simpleMethod(Object argument);\n+    \n+    String simpleMethod(int argument);\n+    \n+    String simpleMethod(String argOne, Integer argTwo);\n+    \n+    String simpleMethod(String one, Integer two, Integer three, Integer four, Integer five);\n+    \n+    String simpleMethod(String one, String[] two);\n+\n+    Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);\n+\n+    void twoArgumentMethod(int one, int two);\n+\n+    void arrayMethod(String[] strings);\n+\n+    String oneArray(boolean[] array);\n+\n+    String oneArray(byte[] array);\n+\n+    String oneArray(char[] array);\n+\n+    String oneArray(double[] array);\n+\n+    String oneArray(float[] array);\n+\n+    String oneArray(int[] array);\n+\n+    String oneArray(long[] array);\n+\n+    String oneArray(short[] array);\n+\n+    String oneArray(Object[] array);\n+    \n+    String canThrowException() throws ChangedCharSetException, CharacterCodingException; \n+\n+    String oneArray(String[] array);\n+\n+    void varargsString(int i, String... string);\n+\n+    Object varargsObject(int i, Object... object);\n+    \n+    void varargs(Object ... object);\n+    \n+    void varargs(String ... string);\n+\n+    List<String> listReturningMethod(Object ... objects);\n+    \n+    LinkedList<String> linkedListReturningMethod();\n+    \n+    String toString();\n+    \n+    String toString(String foo);\n+\n+    void voidMethod();\n+\n+    String forList(List<String> list);\n+    \n+    String forSet(Set<String> anySet);\n+\n+    String forMap(Map<String, String> map);\n+    \n+    String forCollection(Collection<String> collection);\n+\n+    Object[] arrayReturningMethod();\n+\n+    IMethods iMethodsReturningMethod();\n+\n+    String stringReturningMethod();\n+\n+    Object objectArgMethod(Object str);\n+\n+    Object listArgMethod(List<String> list);\n+\n+    Object collectionArgMethod(Collection<String> collection);\n }\n--- a/test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java\n+++ b/test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockitousage.matchers;\n-\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.mockitousage.IMethods;\n-import org.mockitoutil.TestBase;\n-\n-@SuppressWarnings(\"unchecked\")\n-public class AnyXMatchersAcceptNullsTest extends TestBase {\n-    \n-    private IMethods mock;\n-\n-    @Before\n-    public void setUp() {\n-        mock = Mockito.mock(IMethods.class);\n-    }\n-\n-    @Test\n-    public void shouldAnyXMatchersAcceptNull() {\n-        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n-        when(mock.oneArg(anyString())).thenReturn(\"1\");\n-        when(mock.forList(anyList())).thenReturn(\"2\");\n-        when(mock.forMap(anyMap())).thenReturn(\"3\");\n-        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n-        \n-        assertEquals(\"0\", mock.oneArg((Object) null));\n-        assertEquals(\"1\", mock.oneArg((String) null));\n-        assertEquals(\"2\", mock.forList(null));\n-        assertEquals(\"3\", mock.forMap(null));\n-        assertEquals(\"4\", mock.forCollection(null));\n-    }\n-    \n-    @Test\n-    public void shouldAnyPrimiteWraperMatchersAcceptNull() {\n-        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n-        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n-        when(mock.forShort(anyShort())).thenReturn(\"2\");\n-        when(mock.forByte(anyByte())).thenReturn(\"3\");\n-        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n-        when(mock.forLong(anyLong())).thenReturn(\"5\");\n-        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n-        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n-        \n-        assertEquals(\"0\", mock.forInteger(null));\n-        assertEquals(\"1\", mock.forCharacter(null));\n-        assertEquals(\"2\", mock.forShort(null));\n-        assertEquals(\"3\", mock.forByte(null));\n-        assertEquals(\"4\", mock.forBoolean(null));\n-        assertEquals(\"5\", mock.forLong(null));\n-        assertEquals(\"6\", mock.forFloat(null));\n-        assertEquals(\"7\", mock.forDouble(null));\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class AnyXMatchersAcceptNullsTest extends TestBase {\n+    \n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void shouldAnyXMatchersAcceptNull() {\n+        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n+        when(mock.oneArg(anyString())).thenReturn(\"1\");\n+        when(mock.forList(anyList())).thenReturn(\"2\");\n+        when(mock.forMap(anyMap())).thenReturn(\"3\");\n+        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n+        when(mock.forSet(anySet())).thenReturn(\"5\");\n+        \n+        assertEquals(\"0\", mock.oneArg((Object) null));\n+        assertEquals(\"1\", mock.oneArg((String) null));\n+        assertEquals(\"2\", mock.forList(null));\n+        assertEquals(\"3\", mock.forMap(null));\n+        assertEquals(\"4\", mock.forCollection(null));\n+        assertEquals(\"5\", mock.forSet(null));\n+    }\n+    \n+    @Test\n+    public void shouldAnyPrimiteWraperMatchersAcceptNull() {\n+        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n+        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n+        when(mock.forShort(anyShort())).thenReturn(\"2\");\n+        when(mock.forByte(anyByte())).thenReturn(\"3\");\n+        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n+        when(mock.forLong(anyLong())).thenReturn(\"5\");\n+        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n+        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n+        \n+        assertEquals(\"0\", mock.forInteger(null));\n+        assertEquals(\"1\", mock.forCharacter(null));\n+        assertEquals(\"2\", mock.forShort(null));\n+        assertEquals(\"3\", mock.forByte(null));\n+        assertEquals(\"4\", mock.forBoolean(null));\n+        assertEquals(\"5\", mock.forLong(null));\n+        assertEquals(\"6\", mock.forFloat(null));\n+        assertEquals(\"7\", mock.forDouble(null));\n+    }\n }\n--- a/test/org/mockitousage/spies/StubbingSpiesTest.java\n+++ b/test/org/mockitousage/spies/StubbingSpiesTest.java\n         spy.size(anyMap());\n         spy.size(anyList());\n         spy.size(anyCollection());\n+        spy.size(anySet());\n     }\n }", "timestamp": 1238492925, "metainfo": ""}