{"sha": "6cfff46ebfdba5b8a4e1087a0113cba24aca4a70", "log": "fixed #13 Mockito doesn't yield NPE when null varArg array is passed.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40611", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n         if (stubber.hasThrowableForVoidMethod()) {\n             Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());\n+            //TODO ideally we should get matchers first so that invocation doesn't have to expand varargs\n+            //matchersBinder then would become argumentsBinder\n             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n             stubber.addVoidMethodForThrowable(invocationMatcher);\n             return null;\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n         this.stackTrace = new MockitoException(\"\");\n     }\n \n+    //expands array varArgs that are given by runtime (1, [a, b]) into true varArgs (1, a, b);\n     private static Object[] expandVarArgs(final boolean isVarArgs,\n             final Object[] args) {\n         if (!isVarArgs || isVarArgs && args[args.length - 1] != null\n                 && !args[args.length - 1].getClass().isArray()) {\n             return args == null ? new Object[0] : args;\n         }\n-        Object[] varArgs = ArrayEquals.createObjectArray(args[args.length - 1]);\n+        \n+        //in case someone deliberately passed null varArg array\n+        if (args[args.length - 1] == null) {\n+            return new Object[] {null};\n+        }\n+            \n         final int nonVarArgsCount = args.length - 1;\n+        Object[] varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n         final int varArgsCount = varArgs.length;\n         Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];\n         System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n             fail();\n         } catch (ArgumentsAreDifferent e) {}\n     }\n+    \n+    @Test\n+    public void shouldVerifyWithAnyObject() {\n+        Foo myClass = Mockito.mock(Foo.class);\n+        myClass.varArgs(\"\");        \n+        Mockito.verify(myClass).varArgs((String[]) Mockito.anyObject());\n+        Mockito.verify(myClass).varArgs((String) Mockito.anyObject());\n+    }   \n+    \n+    @Test\n+    public void shouldVerifyWithNullVarArgArray() {\n+        Foo myClass = Mockito.mock(Foo.class);\n+        myClass.varArgs((String[]) null);    \n+        Mockito.verify(myClass).varArgs((String[]) Mockito.anyObject());\n+        Mockito.verify(myClass).varArgs((String[]) null);\n+    }  \n+    \n+    public class Foo {      \n+        public void varArgs(String... args) {}       \n+    }\n }", "timestamp": 1211027037, "metainfo": ""}