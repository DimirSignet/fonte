{"sha": "0bac85d866d19584703a838033166f14e132b47a", "log": "Added more refactoring Made VerboseMockitoRunner print nice errors when wrong version of JUnit is on classpath  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401402", "commit": "\n--- a/src/org/mockito/internal/runners/RunnerFactory.java\n+++ b/src/org/mockito/internal/runners/RunnerFactory.java\n         } catch (Throwable t) {\n             throw new MockitoException(\n                     \"\\n\" +\n+                    \"\\n\" +\n                     \"MockitoRunner can only be used with JUnit 4.4 or higher.\\n\" +\n                     \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\" +\n                     \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\" +\n--- a/src/org/mockito/runners/MockitoJUnit44Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit44Runner.java\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n-\n \n /**\n  * <b>Deprecated: Simply use {@link MockitoJUnitRunner}</b>\n--- a/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n  */\n package org.mockito.runners;\n \n+import org.junit.runner.Description;\n+import org.junit.runner.Runner;\n import org.junit.runner.notification.Failure;\n import org.junit.runner.notification.RunListener;\n import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n-import org.junit.runners.model.InitializationError;\n import org.mockito.internal.debugging.DebuggingInfo;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.runners.RunnerFactory;\n+import org.mockito.internal.runners.RunnerImpl;\n import org.mockito.internal.util.MockitoLogger;\n import org.mockito.internal.util.MockitoLoggerImpl;\n \n  * <p>\n  * Do you think it is useful or not? Drop us an email at mockito@googlegroups.com\n  */\n-//TODO this runner fails badly when wrong JUnit is on the path\n-public class VerboseMockitoJUnitRunner extends MockitoJUnitRunner {\n+public class VerboseMockitoJUnitRunner extends Runner {\n \n     private final MockitoLogger logger;\n+    private RunnerImpl runner;\n     \n-    public VerboseMockitoJUnitRunner(Class<?> klass) throws InitializationError {\n-        this(klass, new MockitoLoggerImpl());\n+    public VerboseMockitoJUnitRunner(Class<?> klass) {\n+        this(klass, new MockitoLoggerImpl(), new RunnerFactory().create(klass));\n     }\n     \n-    public VerboseMockitoJUnitRunner(Class<?> klass, MockitoLogger logger) throws InitializationError {\n-        super(klass);\n+    VerboseMockitoJUnitRunner(Class<?> klass, MockitoLogger logger, RunnerImpl runnerImpl) {\n+        this.runner = runnerImpl;\n         this.logger = logger;\n-    }\n-    \n-    public void runTest(RunNotifier notifier) {\n-        super.run(notifier);\n     }\n     \n     @Override\n         \n         beforeRun(notifier, debuggingInfo);\n         \n-        this.runTest(notifier);\n+        runner.run(notifier);\n         \n         afterRun(debuggingInfo);\n     }\n         \n         notifier.addListener(listener);\n     }\n+\n+    @Override\n+    public Description getDescription() {\n+        return runner.getDescription();\n+    }\n }\n--- a/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.Description;\n import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.model.InitializationError;\n import org.mockito.Mock;\n import org.mockito.internal.debugging.DebuggingInfo;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.runners.RunnerImpl;\n import org.mockito.internal.util.MockitoLoggerImpl;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n     public void setup() throws InitializationError {\n         loggerStub = new MockitoLoggerStub();\n         notifier = new RunNotifier();\n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub);\n     }\n     \n     @Test\n     public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {\n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n-            @Override\n-            public void runTest(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            @Override\n+            public void run(RunNotifier notifier) {\n                 //this is what happens when the test runs:\n                 //first, unused stubbing:\n                 unusedStubbingThatQualifiesForWarning();\n                 assertContains(\"mock.simpleMethod(123);\", loggedInfo);\n                 assertContains(\".unusedStubbingThatQualifiesForWarning(\", loggedInfo);\n             }\n-        };\n+        });\n         \n         runner.run(notifier);\n     }\n \n     @Test\n     public void shouldLogUnstubbedMethodWarningWhenTestFails() throws Exception {\n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n-            @Override\n-            public void runTest(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            @Override\n+            public void run(RunNotifier notifier) {\n                 callUnstubbedMethodThatQualifiesForWarning();\n                 notifier.fireTestFailure(null);\n \n                 assertContains(\"mock.simpleMethod(456);\", loggedInfo);\n                 assertContains(\".callUnstubbedMethodThatQualifiesForWarning(\", loggedInfo);\n             }\n-        };\n+        });\n         \n         runner.run(notifier);\n     }\n     \n     @Test\n     public void shouldLogStubCalledWithDifferentArgumentsWhenTestFails() throws Exception {\n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n-            @Override\n-            public void runTest(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            @Override\n+            public void run(RunNotifier notifier) {\n                 someStubbing();\n                 callStubbedMethodWithDifferentArgs();\n                 notifier.fireTestFailure(null);\n                 assertContains(\"mock.simpleMethod(10);\", loggedInfo);\n                 assertContains(\".callStubbedMethodWithDifferentArgs(\", loggedInfo);\n             }\n-        };\n+        });\n         \n         runner.run(notifier);\n     }\n     \n     @Test\n     public void shouldNotLogAnythingWhenStubCalledCorrectly() throws Exception {\n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n-            @Override\n-            public void runTest(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            @Override\n+            public void run(RunNotifier notifier) {\n                 when(mock.simpleMethod(1)).thenReturn(\"foo\");\n                 mock.simpleMethod(1);\n \n                 \n                 assertEquals(\"\", loggerStub.getLoggedInfo());\n             }\n-        };\n+        });\n         \n         runner.run(notifier);\n     }\n     \n     @Test\n     public void shouldNotLogWhenTestPasses() throws Exception {\n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n-            @Override\n-            public void runTest(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            @Override\n+            public void run(RunNotifier notifier) {\n                 when(mock.simpleMethod()).thenReturn(\"foo\");\n                 \n                 notifier.fireTestFinished(null);\n                 \n                 assertEquals(\"\", loggerStub.getLoggedInfo());\n             }\n-        };\n-        \n-        runner.run(notifier);\n-    }\n-    \n+        });\n+        \n+        runner.run(notifier);\n+    }\n     \n     public void shouldClearDebuggingDataAfterwards() throws Exception {\n         //given\n         final DebuggingInfo debuggingInfo = new ThreadSafeMockingProgress().getDebuggingInfo();\n \n-        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {\n-            @Override\n-            public void runTest(RunNotifier notifier) {\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            @Override\n+            public void run(RunNotifier notifier) {\n                 unusedStubbingThatQualifiesForWarning();\n                 notifier.fireTestFailure(null);\n                 assertTrue(debuggingInfo.hasData());\n             }\n-        };\n+        });\n         \n         //when\n         runner.run(notifier);\n         //then\n         assertFalse(debuggingInfo.hasData());\n     }    \n+    \n+    @Test\n+    public void shouldDelegateToGetDescription() throws Exception {\n+        //given\n+        final Description expectedDescription = Description.createSuiteDescription(this.getClass());\n+        runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub, new RunnerImplStub() {\n+            public Description getDescription() {\n+                return expectedDescription;\n+            }\n+        });\n+        \n+        //when\n+        Description description = runner.getDescription();\n+        \n+        //then\n+        assertEquals(expectedDescription, description);\n+    }\n \n     private void unusedStubbingThatQualifiesForWarning() {\n         when(mock.simpleMethod(123)).thenReturn(\"foo\");\n             return loggedInfo.toString();\n         }\n     }\n+    \n+    static class RunnerImplStub implements RunnerImpl {\n+\n+        public Description getDescription() {\n+            return null;\n+        }\n+\n+        public void run(RunNotifier notifier) {}\n+\n+    }\n }", "timestamp": 1241295536, "metainfo": ""}