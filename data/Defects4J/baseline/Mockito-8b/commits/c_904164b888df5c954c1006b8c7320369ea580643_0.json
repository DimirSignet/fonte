{"sha": "904164b888df5c954c1006b8c7320369ea580643", "log": "fixed error messages when arrays compared  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40122", "commit": "\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n  */\n package org.mockito.internal;\n \n-import java.lang.reflect.Method;\n+import java.lang.reflect.*;\n import java.util.*;\n \n import org.mockito.internal.matchers.*;\n     private List<IArgumentMatcher> argumentsToMatchers() {\n         List<IArgumentMatcher> matchers = new LinkedList<IArgumentMatcher>();\n         for (Object arg : this.arguments) {\n-            matchers.add(new Equals(arg));\n+            if (arg.getClass().isArray()) {\n+                matchers.add(new ArrayEquals(arg));\n+            } else {\n+                matchers.add(new Equals(arg));\n+            }\n         }\n         return matchers;\n     }\n--- a/test/org/mockitousage/InvalidStateDetectionTest.java\n+++ b/test/org/mockitousage/InvalidStateDetectionTest.java\n         detects(new OnVerifyNoMoreInteractions(), mock, UnfinishedVerificationException.class);\n     }\n     \n+    @Test\n+    @Ignore\n+    public void shouldCorrectStateAfterDetectingInvalidity() {\n+        \n+    }\n+    \n     private static interface DetectsInvalidState {\n         void detect(IMethods mock);\n     }\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n import java.util.HashMap;\n \n import org.junit.*;\n-import org.mockito.*;\n+import org.mockito.Mockito;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")  \n     @Test\n     public void orOverloaded() {\n         stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n+        stub(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n+        stub(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n+        stub(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n+        stub(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n+        stub(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n+        stub(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n+        stub(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n+        stub(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(\"0\", mock.oneArg(false));\n \n     @Test\n     public void notOverloaded() {\n-        stub(mock.oneArg(CrazyMatchers.not(eq(false)))).andReturn(\"0\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq((byte) 1)))).andReturn(\"1\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq('a')))).andReturn(\"2\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq((double) 1)))).andReturn(\"3\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq((float) 1)))).andReturn(\"4\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq((int) 1)))).andReturn(\"5\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq((long) 1)))).andReturn(\"6\");\n-        stub(mock.oneArg(CrazyMatchers.not(eq((short) 1)))).andReturn(\"7\");\n-        stub(mock.oneArg(CrazyMatchers.not(contains(\"a\")))).andReturn(\"8\");\n-        stub(mock.oneArg(CrazyMatchers.not(isA(Class.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(not(eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(not(eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(not(eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(not(eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(not(eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(not(eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(not(eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(not(eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(not(contains(\"a\")))).andReturn(\"8\");\n+        stub(mock.oneArg(not(isA(Class.class)))).andReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(null, mock.oneArg(false));\n \n     @Test\n     public void compareToMatcher() {\n-        stub(mock.oneArg(CrazyMatchers.cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+        stub(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n \n         assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n         assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n \n     @Test\n     public void arrayEqualsMatcher() {\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new byte[] { 1 }))).andReturn(\"1\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new char[] { 1 }))).andReturn(\"2\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new double[] { 1 }))).andReturn(\"3\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new float[] { 1 }))).andReturn(\"4\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new int[] { 1 }))).andReturn(\"5\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new long[] { 1 }))).andReturn(\"6\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new short[] { 1 }))).andReturn(\"7\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n-        stub(mock.oneArray(CrazyMatchers.aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n+        stub(mock.oneArray(aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n+        stub(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(\"1\");\n+        stub(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(\"2\");\n+        stub(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(\"3\");\n+        stub(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(\"4\");\n+        stub(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(\"5\");\n+        stub(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(\"6\");\n+        stub(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(\"7\");\n+        stub(mock.oneArray(aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n+        stub(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n         assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n         assertEquals(null, mock.oneArray(new boolean[] { true, false }));\n         assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));\n     }\n-\n+    \n     @Test\n     public void greaterOrEqualMatcher() {\n         stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n     @Test\n     public void orMatcher() {\n         stub(mock.oneArg(anyInt())).andReturn(\"other\");\n-        stub(mock.oneArg(CrazyMatchers.or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n+        stub(mock.oneArg(or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n \n         assertEquals(\"other\", mock.oneArg(10));\n         assertEquals(\"7 or 9\", mock.oneArg(7));\n     @Test\n     public void nullMatcher() {\n         stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).andReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), CrazyMatchers.not(isNull()), eq(\"\"))).andReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n     @Test\n     public void notNullMatcher() {\n         stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), CrazyMatchers.not(notNull()), eq(\"\"))).andReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), not(notNull()), eq(\"\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n \n     @Test\n     public void findMatcher() {\n-        stub(mock.oneArg(CrazyMatchers.find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n+        stub(mock.oneArg(find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n \n         assertEquals(\"1\", mock.oneArg(\"ab12\"));\n         assertEquals(null, mock.oneArg(\"12345\"));\n \n     @Test\n     public void startsWithMatcher() {\n-        stub(mock.oneArg(CrazyMatchers.startsWith(\"ab\"))).andReturn(\"1\");\n-        stub(mock.oneArg(CrazyMatchers.startsWith(\"bc\"))).andReturn(\"2\");\n+        stub(mock.oneArg(startsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(startsWith(\"bc\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n         assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n \n     @Test\n     public void endsWithMatcher() {\n-        stub(mock.oneArg(CrazyMatchers.endsWith(\"ab\"))).andReturn(\"1\");\n-        stub(mock.oneArg(CrazyMatchers.endsWith(\"bc\"))).andReturn(\"2\");\n+        stub(mock.oneArg(endsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(endsWith(\"bc\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"xab\"));\n         assertEquals(\"2\", mock.oneArg(\"xbc\"));\n         assertEquals(one, two);\n         assertEquals(two, three);\n \n-        stub(mock.oneArg(CrazyMatchers.same(one))).andReturn(\"1\");\n-        stub(mock.oneArg(CrazyMatchers.same(two))).andReturn(\"2\");\n+        stub(mock.oneArg(same(one))).andReturn(\"1\");\n+        stub(mock.oneArg(same(two))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(one));\n         assertEquals(\"2\", mock.oneArg(two));\n--- a/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n package org.mockitousage.verification;\n \n import static org.junit.Assert.*;\n+import static org.mockito.CrazyMatchers.aryEq;\n import static org.mockito.Mockito.*;\n \n import org.junit.*;\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }\n+    \n+    @Test\n+    public void shouldPrintMethodNicelyWhenMissingInvocationWithArrayMatcher() {\n+        mock.oneArray(new boolean[] { true, false, false });\n+        \n+        try {\n+            verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n+            fail();\n+        } catch (VerificationError e) {\n+            String expected = \"\\n\" +\n+                    \"Invocation differs from actual\" +\n+                    \"\\n\" +\n+                    \"Wanted: IMethods.oneArray([false, false, false])\" +\n+                    \"\\n\" +\n+                    \"Actual: IMethods.oneArray([true, false, false])\";\n+            assertEquals(expected, e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldPrintMethodNicelyWhenMissingInvocationWithVarargMatcher() {\n+        mock.varargsString(10, \"one\", \"two\");\n+        \n+        try {\n+            verify(mock).varargsString(10, \"two\", \"one\");\n+            fail();\n+        } catch (VerificationError e) {\n+            String expected = \"\\n\" +\n+                    \"Invocation differs from actual\" +\n+                    \"\\n\" +\n+                    \"Wanted: IMethods.varargsString(10, \\\"two\\\", \\\"one\\\")\" +\n+                    \"\\n\" +\n+                    \"Actual: IMethods.varargsString(10, \\\"one\\\", \\\"two\\\")\";\n+            assertEquals(expected, e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldPrintMethodNicelyWhenMissingInvocationWithMatcher() {\n+        mock.simpleMethod(\"foo\");\n+        \n+        try {\n+            verify(mock).simpleMethod(matches(\"burrito\"));\n+            fail();\n+        } catch (VerificationError e) {\n+            String expected = \"\\n\" +\n+                    \"Invocation differs from actual\" +\n+                    \"\\n\" +\n+                    \"Wanted: IMethods.simpleMethod(matches(\\\"burrito\\\"))\" +\n+                    \"\\n\" +\n+                    \"Actual: IMethods.simpleMethod(\\\"foo\\\")\";\n+            assertEquals(expected, e.getMessage());\n+        }\n+    }\n }", "timestamp": 1196635160, "metainfo": ""}