{"sha": "c478e6c8709034e4796cffc1d1bfeba8dc8d0ca2", "log": "New ClassPathLoader that doesn't depend on ServiceLoader.", "commit": "\n--- a/src/org/mockito/internal/configuration/ClassPathLoader.java\n+++ b/src/org/mockito/internal/configuration/ClassPathLoader.java\n  */\n package org.mockito.internal.configuration;\n \n-import java.util.ServiceLoader;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.exceptions.misusing.MockitoConfigurationException;\n+import org.mockito.internal.creation.CglibMockMaker;\n import org.mockito.plugins.MockMaker;\n-import org.mockito.internal.creation.CglibMockMaker;\n \n public class ClassPathLoader {\n-    \n+    private static final MockMaker mockMaker = findPlatformMockMaker();\n+\n     /**\n      * @return configuration loaded from classpath or null\n      */\n     @SuppressWarnings({\"unchecked\"})\n     public IMockitoConfiguration loadConfiguration() {\n         //Trying to get config from classpath\n-        Class configClass = null;\n+        Class configClass;\n         try {\n             configClass = (Class) Class.forName(\"org.mockito.configuration.MockitoConfiguration\");\n         } catch (ClassNotFoundException e) {\n-            //that's ok, it means there is no global config, using default one. \n+            //that's ok, it means there is no global config, using default one.\n             return null;\n         }\n-        \n+\n         try {\n             return (IMockitoConfiguration) configClass.newInstance();\n         } catch (ClassCastException e) {\n     }\n \n     /**\n-     * Returns the best mock maker available for the current runtime. This scans\n-     * the classpath to find a mock maker plugin if one is available, allowing\n-     * mockito to run on alternative platforms like Android.\n+     * Returns the best mock maker available for the current runtime.\n      */\n     public static MockMaker getMockMaker() {\n-        for (MockMaker mockMaker : ServiceLoader.load(MockMaker.class)) {\n+        return mockMaker;\n+    }\n+\n+    /**\n+     * Scans the classpath to find a mock maker plugin if one is available,\n+     * allowing mockito to run on alternative platforms like Android.\n+     */\n+    private static MockMaker findPlatformMockMaker() {\n+        for (MockMaker mockMaker : loadImplementations(MockMaker.class)) {\n             return mockMaker; // return the first one service loader finds (if any)\n         }\n         return new CglibMockMaker(); // default implementation\n     }\n+\n+    /**\n+     * Equivalent to {@link java.util.ServiceLoader#load} but without requiring\n+     * Java 6 / Android 2.3 (Gingerbread).\n+     */\n+    static <T> List<T> loadImplementations(Class<T> service) {\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        if (loader == null) {\n+            loader = ClassLoader.getSystemClassLoader();\n+        }\n+\n+        Enumeration<URL> resources;\n+        try {\n+            resources = loader.getResources(\"META-INF/services/\" + service.getName());\n+        } catch (IOException e) {\n+            throw new ServiceConfigurationError(\"Failed to load \" + service, e);\n+        }\n+\n+        List<T> result = new ArrayList<T>();\n+        for (URL resource : Collections.list(resources)) {\n+            InputStream in = null;\n+            try {\n+                in = resource.openStream();\n+                for (String line : readerToLines(new InputStreamReader(in, \"UTF-8\"))) {\n+                    String name = stripCommentAndWhitespace(line);\n+                    if (!name.isEmpty()) {\n+                        result.add(service.cast(loader.loadClass(name).newInstance()));\n+                    }\n+                }\n+            } catch (Exception e) {\n+                throw new ServiceConfigurationError(\n+                        \"Failed to load \" + service + \" using \" + resource, e);\n+            } finally {\n+                closeQuietly(in);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    static List<String> readerToLines(Reader reader) throws IOException {\n+        List<String> result = new ArrayList<String>();\n+        BufferedReader lineReader = new BufferedReader(reader);\n+        String line;\n+        while ((line = lineReader.readLine()) != null) {\n+            result.add(line);\n+        }\n+        return result;\n+    }\n+\n+    static String stripCommentAndWhitespace(String line) {\n+        int hash = line.indexOf('#');\n+        if (hash != -1) {\n+            line = line.substring(0, hash);\n+        }\n+        return line.trim();\n+    }\n+\n+    static void closeQuietly(InputStream in) {\n+        if (in != null) {\n+            try {\n+                in.close();\n+            } catch (IOException ignored) {\n+            }\n+        }\n+    }\n }\n--- a/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n+++ b/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.configuration;\n \n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Arrays;\n+import java.util.Collections;\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n import org.mockitoutil.TestBase;\n \n public class ReadingConfigurationFromClasspathTest extends TestBase {\n-    \n+\n     @Test\n     public void shouldReadConfigurationClassFromClassPath() {\n         ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n                 return \"foo\";\n             }});\n \n-        IMethods mock = mock(IMethods.class); \n+        IMethods mock = mock(IMethods.class);\n         assertEquals(\"foo\", mock.simpleMethod());\n     }\n+\n+    @Test\n+    public void readerToLinesEmptyString() throws IOException {\n+        assertEquals(Collections.emptyList(), ClassPathLoader.readerToLines(new StringReader(\"\")));\n+    }\n+\n+    @Test\n+    public void readerToLinesNoLineBreaks() throws IOException {\n+        assertEquals(Arrays.asList(\"a\"), ClassPathLoader.readerToLines(new StringReader(\"a\")));\n+    }\n+\n+    @Test\n+    public void readerToLinesWithLineBreaks() throws IOException {\n+        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"),\n+                ClassPathLoader.readerToLines(new StringReader(\"a\\nb\\nc\")));\n+    }\n+\n+    @Test\n+    public void readerToLinesWithEmptyLines() throws IOException {\n+        assertEquals(Arrays.asList(\"a\", \"\", \"c\"),\n+                ClassPathLoader.readerToLines(new StringReader(\"a\\n\\nc\")));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceEmptyInput() throws IOException {\n+        assertEquals(\"\", ClassPathLoader.stripCommentAndWhitespace(\"\"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceWhitespaceInput() throws IOException {\n+        assertEquals(\"\", ClassPathLoader.stripCommentAndWhitespace(\" \"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceCommentInInput() throws IOException {\n+        assertEquals(\"a\", ClassPathLoader.stripCommentAndWhitespace(\"a#b\"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceMultipleHashes() throws IOException {\n+        assertEquals(\"a\", ClassPathLoader.stripCommentAndWhitespace(\"a#b#c\"));\n+    }\n+\n+    @Test\n+    public void stripCommentsAndWhitespaceWithWhitespaceAndComments() throws IOException {\n+        assertEquals(\"a\", ClassPathLoader.stripCommentAndWhitespace(\" a #b\"));\n+    }\n }", "timestamp": 1328241862, "metainfo": ""}