{"sha": "c8f5d57e3d01f4367db626ff5e63a5aa7564b47c", "log": "Renamed polling to include the mills unit in param name", "commit": "\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n  */\n public class VerificationOverTimeImpl implements VerificationMode {\n \n-    private final int pollingPeriod;\n+    private final int pollingPeriodMillis;\n     private final int durationMillis;\n     private final VerificationMode delegate;\n     private final boolean returnOnSuccess;\n     /**\n      * Create this verification mode, to be used to verify invocation ongoing data later.\n      *\n-     * @param pollingPeriod The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n+     * @param pollingPeriodMillis The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n      * @param durationMillis The max time to wait (in millis) for the delegate verification mode to be satisfied\n      * @param delegate The verification mode to delegate overall success or failure to\n      * @param returnOnSuccess Whether to immediately return successfully once the delegate is satisfied (as in\n      *                        the delegate is satisfied and the full duration has passed (as in\n      *                        {@link org.mockito.verification.VerificationAfterDelay}).\n      */\n-    public VerificationOverTimeImpl(int pollingPeriod, int durationMillis, VerificationMode delegate, boolean returnOnSuccess) {\n-        this.pollingPeriod = pollingPeriod;\n+    public VerificationOverTimeImpl(int pollingPeriodMillis, int durationMillis, VerificationMode delegate, boolean returnOnSuccess) {\n+        this.pollingPeriodMillis = pollingPeriodMillis;\n         this.durationMillis = durationMillis;\n         this.delegate = delegate;\n         this.returnOnSuccess = returnOnSuccess;\n             } catch (MockitoAssertionError e) {\n                 if (canRecoverFromFailure(delegate)) {\n                     error = e;\n-                    sleep(pollingPeriod);\n+                    sleep(pollingPeriodMillis);\n                 } else {\n                     throw e;\n                 }\n     }\n     \n     public int getPollingPeriod() {\n-        return pollingPeriod;\n+        return pollingPeriodMillis;\n     }\n     \n     public int getDuration() {\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n     /**\n      * See the javadoc for {@link VerificationWithTimeout}\n      */\n-    Timeout(int pollingPeriod, int millis, VerificationMode delegate) {\n-        super(new VerificationOverTimeImpl(pollingPeriod, millis, delegate, true));\n+    Timeout(int pollingPeriodMillis, int millis, VerificationMode delegate) {\n+        super(new VerificationOverTimeImpl(pollingPeriodMillis, millis, delegate, true));\n     }\n-    \n-    @Override\n-    protected VerificationMode copySelfWithNewVerificationMode(VerificationMode newVerificationMode) {\n-        return new Timeout(wrappedVerification.getPollingPeriod(), wrappedVerification.getDuration(), newVerificationMode);\n+    \n+    @Override\n+    protected VerificationMode copySelfWithNewVerificationMode(VerificationMode newVerificationMode) {\n+        return new Timeout(wrappedVerification.getPollingPeriod(), wrappedVerification.getDuration(), newVerificationMode);\n     }\n-    \n+    \n     public VerificationMode atMost(int maxNumberOfInvocations) {\n         new Reporter().atMostAndNeverShouldNotBeUsedWithTimeout();\n         return null;", "timestamp": 1381509667, "metainfo": ""}