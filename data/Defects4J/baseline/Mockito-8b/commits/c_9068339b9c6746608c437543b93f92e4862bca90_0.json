{"sha": "9068339b9c6746608c437543b93f92e4862bca90", "log": "some rename job added handling of null in one case in configuration  --HG-- rename : src/org/mockito/Decamelizer.java => src/org/mockito/internal/util/Decamelizer.java rename : src/org/mockito/internal/invocation/InvocationOnMock.java => src/org/mockito/invocation/InvocationOnMock.java rename : test/org/mockito/DecamelizerTest.java => test/org/mockito/internal/util/DecamelizerTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40516", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n import org.hamcrest.BaseMatcher;\n import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n+import org.mockito.internal.util.Decamelizer;\n \n /**\n  * Allows creating customized argument matchers. \n--- a/src/org/mockito/configuration/DefaultReturnValues.java\n+++ b/src/org/mockito/configuration/DefaultReturnValues.java\n \n import org.mockito.internal.creation.MockNamer;\n import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.invocation.InvocationOnMock;\n+import org.mockito.invocation.InvocationOnMock;\n \n public class DefaultReturnValues implements ReturnValues {\n     \n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n-        return emptyValueFor(returnType);\n+        return returnValueFor(returnType);\n     }\n     \n     //new instances are used instead of Collections.emptyList(), etc.\n     //to avoid UnsupportedOperationException if code under test modifies returned collection\n-    protected Object emptyValueFor(Class<?> type) {\n+    protected Object returnValueFor(Class<?> type) {\n         if (type == Collection.class) {\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n--- a/src/org/mockito/configuration/MockitoConfiguration.java\n+++ b/src/org/mockito/configuration/MockitoConfiguration.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.configuration;\n+\n+import org.mockito.exceptions.base.MockitoException;\n \n public class MockitoConfiguration {\n     \n     }\n \n     public void setReturnValues(ReturnValues returnValues) {\n-        //TODO null check\n+        if (returnValues == null) {\n+            throw new MockitoException(\"Cannot set null ReturnValues!\");\n+        }\n         this.returnValues = returnValues;\n     }\n \n--- a/src/org/mockito/configuration/ReturnValues.java\n+++ b/src/org/mockito/configuration/ReturnValues.java\n  */\n package org.mockito.configuration;\n \n-import org.mockito.internal.invocation.InvocationOnMock;\n+import org.mockito.invocation.InvocationOnMock;\n \n public interface ReturnValues {\n \n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.internal.creation.MockNamer;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n+import org.mockito.invocation.InvocationOnMock;\n \n /**\n  * Method call on a mock object. \n--- /dev/null\n+++ b/src/org/mockito/internal/util/Decamelizer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.util;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class Decamelizer {\n+\n+private static final Pattern CAPS = Pattern.compile(\"([A-Z\\\\d][^A-Z\\\\d]*)\");\n+    \n+    public static String decamelizeMatcher(String className) {\n+        if (className.length() == 0) {\n+            return \"<custom argument matcher>\";\n+        }\n+        \n+        String decamelized = decamelizeClassName(className);\n+        \n+        if (decamelized.length() == 0) {\n+            return \"<\" + className + \">\";\n+        }\n+        \n+        return \"<\" + decamelized + \">\";\n+    }\n+\n+    private static String decamelizeClassName(String className) {\n+        Matcher match = CAPS.matcher(className);\n+        StringBuilder deCameled = new StringBuilder();\n+        while(match.find()) {\n+            if (deCameled.length() == 0) {\n+                deCameled.append(match.group());\n+            } else {\n+                deCameled.append(\" \");\n+                deCameled.append(match.group().toLowerCase());\n+            }\n+        }\n+        return deCameled.toString();\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/invocation/InvocationOnMock.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.invocation;\n+\n+import java.lang.reflect.Method;\n+\n+public interface InvocationOnMock {\n+\n+    Object getMock();\n+\n+    Method getMethod();\n+\n+    Object[] getArguments();\n+\n+}\n--- a/test/org/mockito/configuration/DefaultReturnValuesTest.java\n+++ b/test/org/mockito/configuration/DefaultReturnValuesTest.java\n     @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n         DefaultReturnValues values = new DefaultReturnValues();\n         \n-        assertTrue(((Collection) values.emptyValueFor(Collection.class)).isEmpty());\n+        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n \n-        assertTrue(((Set) values.emptyValueFor(Set.class)).isEmpty());\n-        assertTrue(((SortedSet) values.emptyValueFor(SortedSet.class)).isEmpty());\n-        assertTrue(((HashSet) values.emptyValueFor(HashSet.class)).isEmpty());\n-        assertTrue(((TreeSet) values.emptyValueFor(TreeSet.class)).isEmpty());\n-        assertTrue(((LinkedHashSet) values.emptyValueFor(LinkedHashSet.class)).isEmpty());\n+        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n+        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());\n+        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());\n+        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());\n+        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());\n \n-        assertTrue(((List) values.emptyValueFor(List.class)).isEmpty());\n-        assertTrue(((ArrayList) values.emptyValueFor(ArrayList.class)).isEmpty());\n-        assertTrue(((LinkedList) values.emptyValueFor(LinkedList.class)).isEmpty());\n+        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());\n+        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());\n+        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());\n \n-        assertTrue(((Map) values.emptyValueFor(Map.class)).isEmpty());\n-        assertTrue(((SortedMap) values.emptyValueFor(SortedMap.class)).isEmpty());\n-        assertTrue(((HashMap) values.emptyValueFor(HashMap.class)).isEmpty());\n-        assertTrue(((TreeMap) values.emptyValueFor(TreeMap.class)).isEmpty());\n-        assertTrue(((LinkedHashMap) values.emptyValueFor(LinkedHashMap.class)).isEmpty());\n+        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());\n+        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());\n+        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n+        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n+        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n         \n-        assertNull(values.emptyValueFor(String.class));\n+        assertNull(values.returnValueFor(String.class));\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/configuration/MockitoConfigurationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.configuration;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class MockitoConfigurationTest extends TestBase {\n+    \n+    @Test\n+    public void shouldNotAllowConfiguringWithNullReturnValues() {\n+        try {\n+            MockitoConfiguration.instance().setReturnValues(null);\n+            fail();\n+        } catch (MockitoException e) {\n+            assertContains(\"Cannot set null ReturnValues!\", e.getMessage());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/DecamelizerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.util;\n+\n+import static org.mockito.internal.util.Decamelizer.*;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class DecamelizerTest extends TestBase {\n+    \n+    @Test\n+    public void shouldProduceDecentDescription() throws Exception {\n+        assertEquals(\"<Sentence with strong language>\", decamelizeMatcher(\"SentenceWithStrongLanguage\"));\n+        assertEquals(\"<W e i r d o 1>\", decamelizeMatcher(\"WEIRDO1\"));\n+        assertEquals(\"<_>\", decamelizeMatcher(\"_\"));\n+        assertEquals(\"<Has exactly 3 elements>\", decamelizeMatcher(\"HasExactly3Elements\"));\n+        assertEquals(\"<custom argument matcher>\", decamelizeMatcher(\"\"));\n+    }\n+}\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n import org.mockito.configuration.DefaultReturnValues;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n-import org.mockito.internal.invocation.InvocationOnMock;\n+import org.mockito.invocation.InvocationOnMock;\n \n public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {\n     \n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n import org.mockito.configuration.DefaultReturnValues;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n-import org.mockito.internal.invocation.InvocationOnMock;\n+import org.mockito.invocation.InvocationOnMock;\n \n public class ConfiguringDefaultReturnValuesTest extends TestBase {\n     ", "timestamp": 1206452228, "metainfo": ""}