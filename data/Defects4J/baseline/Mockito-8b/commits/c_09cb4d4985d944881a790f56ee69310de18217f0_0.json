{"sha": "09cb4d4985d944881a790f56ee69310de18217f0", "log": "javadoc tuning  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40719", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * of cases it's not necessary: Let's say you've stubbed foo.bar()\n  * method. If your code cares what value foo.bar() returns, something\n  * else will fail if you forget to call foo.bar(). Hence you don't have\n- * to verify() it (e.g. it's just redundant). Not convinced? See  \n+ * to verify() it. It's  (e.g. it's just redundant). Not convinced? See  \n  * <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a></li>\n  * </ul>\n  * \n  * \n  * <h3>5. Stubbing void methods with exceptions</h3>\n  * \n- * {@link Mockito#doThrow(Throwable)} replaces {@link Mockito#stubVoid(Object)} because of improved readability and consistency with family of doAnswer() methods. \n+ * {@link Mockito#doThrow(Throwable)} replaces {@link Mockito#stubVoid(Object)} because of improved readability and consistency with the family of doAnswer() methods. \n  * <p>\n  * See paragraph 12.\n  * \n  * interactions</b> one-by-one but only those that you are interested in\n  * testing in order.\n  * <p>\n- * Also, you can create InOrder object passing only mocks that relevant for\n+ * Also, you can create InOrder object passing only mocks that are relevant for\n  * in-order verification.\n  * \n  * <h3>7. Making sure interaction(s) never happened on mock</h3>\n  * verifyNoMoreInteractions(mockedList);\n  * </pre>\n  * \n- * verifyNoMoreInteractions() should not be used in every test method. \n+ * Some users who did a lot of classical, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \n+ * verifyNoMoreInteractions() is not recommended to use in every test method. \n  * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n  * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n  * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n  * <h3> 10. (**New**) Stubbing consecutive calls (iterator-style stubbing)</h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same\n- * method call. Typical use case could be mocking iterators. Initially this\n- * feature was not included in original version of Mockito to promote simple\n- * mocking. Instead of iterators we strongly recommend using Iterable or simply\n+ * method call. Typical use case could be mocking iterators. \n+ * Original version of Mockito did not have this feature to promote simple mocking. \n+ * For example, instead of iterators one could use {@link Iterable} or simply\n  * collections. Those offer natural ways of stubbing (e.g. using real\n- * collections). In rare scenarios stubbing consecutive calls could useful,\n+ * collections). In rare scenarios stubbing consecutive calls could be useful,\n  * though:\n  * <p>\n  * \n  * <pre>\n- * stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException()).toReturn(\"foo\");\n+ * stub(mock.someMethod(\"some arg\"))\n+ *   .toThrow(new RuntimeException())\n+ *   .toReturn(\"foo\");\n  * \n  * //First call: throws runtime exception:\n  * mock.someMethod(\"some arg\");\n  * \n  * <h3> 11. (**New**) Stubbing with callbacks</h3>\n  * \n+ * Allows stubbing with generic {@link Answer} interface.\n+*  <p>\n  * Yet another controversial feature which was not included in Mockito\n- * originally. We strongly recommend using simple stubbing (toReturn() or\n- * toThrow() only). Those two should be <b>just enough</b> to test/test-drive\n+ * originally. We recommend using simple stubbing with toReturn() or\n+ * toThrow() only. Those two should be <b>just enough</b> to test/test-drive\n  * any decent (clean & simple) code.\n- * \n- * Allows stubbing with generic {@link Answer} interface\n  * \n  * <pre>\n  * stub(mock.someMethod(anyString())).toAnswer(new Answer() {\n  * System.out.println(mock.someMethod(\"foo\"));\n  * </pre>\n  * \n- * <h3> 12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids</h3>\n- * \n- * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because void is not a decent type.\n+ * <h3> 12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>\n+ * \n+ * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because the compiler does not like void methods inside brackets...\n  * <p>\n  * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids.\n  * <p>\n- * Use doThrow() when you want the void method to throw an exception:\n+ * Use doThrow() when you want to stub a void method with an exception:\n  * <pre>\n  *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  *   mockedList.clear();\n  * </pre>\n  * \n- * Read more about other those methods:\n+ * Read more about other methods:\n  * <p>\n  * {@link Mockito#doThrow(Throwable)}\n  * <p>\n  * \n  * <pre>\n  *   List list = new LinkedList();\n- *   List spy = Mockito.spy(list);\n+ *   List spy = spy(list);\n  * \n  *   //optionally, you can stub out some methods:\n  *   stub(spy.size()).toReturn(100);\n  * \n  * <pre>\n  *   List list = new LinkedList();\n- *   List spy = Mockito.spy(list);\n+ *   List spy = spy(list);\n  *   \n- *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException because the list is yet empty\n+ *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n  *   stub(spy.get(0)).toReturn(\"foo\");\n  *   \n  *   //You have to use doReturn() for stubbing\n      * \n      * <pre>\n      *   List list = new LinkedList();\n-     *   List spy = Mockito.spy(list);\n+     *   List spy = spy(list);\n      *   \n      *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n      *   stub(spy.get(0)).toReturn(\"foo\");\n      * <p>\n      * Stubbed invocations (if called) are also treated as interactions.\n      * <p>\n-     * verifyNoMoreInteractions() should not be used in every test method. \n+     * Some users who did a lot of classical, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method. \n+     * verifyNoMoreInteractions() is not recommended to use in every test method. \n      * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n      * Abusing it leads to overspecified, less maintainable tests. You can find further reading \n      * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n      * \n      * Use {@link Mockito#doThrow(Throwable)} method for stubbing voids\n      * <p>\n-     * doThrow() replaces stubVoid() because of improved readability and consistency with family of doAnswer() methods. \n+     * doThrow() replaces stubVoid() because of improved readability and consistency with the family of doAnswer() methods. \n      * <p>\n      * Originally, stubVoid() was used for stubbing void methods with exceptions. E.g:\n      * \n     }\n     \n     /**\n-     * Use doThrow() when you want the void method to throw an exception.\n-     * <p>\n-     * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because void is not a decent type.\n+     * Use doThrow() when you want to stub the void method with an exception.\n+     * <p>\n+     * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because the compiler does not like void methods inside brackets...\n      * <p>\n      * Example:\n      * \n      *   doThrow(new RuntimeException()).when(mock).someVoidMethod();\n      * </pre>\n      * \n-     * @param toBeThrown\n+     * @param toBeThrown to be thrown when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doThrow(Throwable toBeThrown) {\n     /**\n      * Use doAnswer() when you want to stub a void method with generic {@link Answer}.\n      * <p>\n-     * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because void is not a decent type.\n+     * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because the compiler does not like void methods inside brackets...\n      * <p>\n      * Example:\n      * \n      * <pre>\n-     *   doAnswer(new Answer() {\n+     *  doAnswer(new Answer() {\n      *      public Object answer(InvocationOnMock invocation) {\n      *          Object[] args = invocation.getArguments();\n      *          Mock mock = invocation.getMock();\n-                return null;\n+     *          return null;\n      *      }})\n-     *    .when(mock).someMethod();\n-     * </pre>\n-     * \n-     * @param answer\n+     *  .when(mock).someMethod();\n+     * </pre>\n+     * \n+     * @param answer to answer when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doAnswer(Answer answer) {\n      * 1. Stubbing consecutive calls on a void method:\n      * <pre>\n      *   doNothing().\n-     *   doThrow(new RuntimeException()).\n-     *   when(mock).someVoidMethod();\n+     *   doThrow(new RuntimeException())\n+     *   .when(mock).someVoidMethod();\n      *   \n      *   //does nothing the first time:\n      *   mock.someVoidMethod();\n      *   \n      *   spy.add(\"one\");\n      *   \n-     *   //clear does nothing, so the list still contains \"one\"\n+     *   //clear() does nothing, so the list still contains \"one\"\n      *   spy.clear();\n      * </pre>\n      *   \n     /**\n      * Use doReturn() in those rare occasions when you cannot use {@link Mockito#stub(Object)}.\n      * <p>\n-     * Beware that {@link Mockito#stub(Object)} is always recommended for stubbing because it is argument type-safe \n+     * Beware that {@link Mockito#stub(Object)} is <b>always recommended</b> for stubbing because it is argument type-safe \n      * and more readable (especially when stubbing consecutive calls). \n      * <p>\n      * However, there are occasions when doReturn() comes handy:\n      * \n      * <pre>\n      *   List list = new LinkedList();\n-     *   List spy = Mockito.spy(list);\n+     *   List spy = spy(list);\n      *   \n      *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n      *   stub(spy.get(0)).toReturn(\"foo\");\n      *   \n-     *   //You have to use doReturn() for stubbing\n+     *   //You have to use doReturn() for stubbing:\n      *   doReturn(\"foo\").when(spy).get(0);\n      * </pre>\n      * \n      * <pre>\n      *   stub(mock.foo()).toThrow(new RuntimeException());\n      *   \n-     *   //Impossible: real method is called so mock.foo() throws RuntimeException\n+     *   //Impossible: the exception-stubbed foo() method is really called so RuntimeException is thrown. \n      *   stub(mock.foo()).toReturn(\"bar\");\n      *   \n-     *   //You have to use doReturn() for stubbing\n+     *   //You have to use doReturn() for stubbing:\n      *   doReturn(\"bar\").when(mock).foo();\n      * </pre>\n      * \n-     * @param toBeReturned\n+     * Above scenario shows a tradeoff of Mockito's ellegant syntax. The scenario is very rare, though.\n+     * \n+     * @param toBeReturned to be returned when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doReturn(Object toBeReturned) {\n      * Verification in order is flexible - <b>you don't have to verify all interactions</b> one-by-one\n      * but only those that you are interested in testing in order.\n      * <p>\n-     * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  \n+     * Also, you can create InOrder object passing only mocks that are relevant for in-order verification.  \n      *\n      * See examples in javadoc for {@link Mockito} class\n      * \n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"Only void methods can doNothing()!\",\n                 \"Example of correct use of doNothing():\",\n                 \"    doNothing().\",\n-                \"    doThrow(new RuntimeException()).\",\n-                \"    when(mock).someVoidMethod();\",\n+                \"    doThrow(new RuntimeException())\",\n+                \"    .when(mock).someVoidMethod();\",\n                 \"Above means:\",\n                 \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n              ));\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n  * <p> \n  * Example:\n  * <pre>\n- *   doThrow(new RuntimeException()).\n- *   when(mockedList).clear();\n+ *   doThrow(new RuntimeException()).when(mockedList).clear();\n  *   \n  *   //following throws RuntimeException:\n  *   mockedList.clear();\n+ * </pre>\n+ * \n+ * Also useful when stubbing consecutive calls:\n+ * \n+ * <pre>\n+ *   doThrow(new RuntimeException(\"one\")).\n+ *   doThrow(new RuntimeException(\"two\"))\n+ *   .when(mock).someVoidMethod();\n  * </pre>\n  * \n  * Read more about those methods:\n      * <p> \n      * Example:\n      * <pre>\n-     *   doThrow(new RuntimeException()).\n-     *   when(mockedList).clear();\n+     *   doThrow(new RuntimeException())\n+     *   .when(mockedList).clear();\n      *   \n      *   //following throws RuntimeException:\n      *   mockedList.clear();\n      * @return select method for stubbing\n      */\n     <T> T when(T mock);\n+\n+    /**\n+     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable)} style:\n+     * <pre>\n+     *   doThrow(new RuntimeException(\"one\")).\n+     *   doThrow(new RuntimeException(\"two\"))\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n+     * See javadoc for {@link Mockito#doThrow(Throwable)}\n+     * \n+     * @param toBeThrown to be thrown when the stubbed method is called\n+     * @return stubber - to select a method for stubbing\n+     */\n+    Stubber doThrow(Throwable toBeThrown);\n     \n     /**\n-     * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.\n-     * <p>\n-     * See javadoc for {@link Mockito#doReturn(Object)}\n+     * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style:\n+     * <pre>\n+     *   doAnswer(answerOne).\n+     *   doAnswer(answerTwo)\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n+     * See javadoc for {@link Mockito#doAnswer(Answer)}\n      * \n-     * @param toBeReturned\n+     * @param answer to answer when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n      */\n-    Stubber doReturn(Object toBeReturned);\n+    Stubber doAnswer(Answer answer);    \n     \n     /**\n-     * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style.\n-     * <p>\n+     * Use it for stubbing consecutive calls in {@link Mockito#doNothing()} style:\n+     * <pre>\n+     *   doNothing().\n+     *   doThrow(new RuntimeException(\"two\"))\n+     *   .when(mock).someVoidMethod();\n+     * </pre>\n      * See javadoc for {@link Mockito#doNothing()}\n      * \n      * @return stubber - to select a method for stubbing\n     Stubber doNothing();\n     \n     /**\n-     * Use it for stubbing consecutive calls in {@link Mockito#doThrow(Throwable)} style.\n+     * Use it for stubbing consecutive calls in {@link Mockito#doReturn(Object)} style.\n      * <p>\n-     * See javadoc for {@link Mockito#doThrow(Throwable)}\n+     * See javadoc for {@link Mockito#doReturn(Object)}\n      * \n-     * @param toBeThrown\n+     * @param toBeReturned to be returned when the stubbed method is called\n      * @return stubber - to select a method for stubbing\n      */\n-    Stubber doThrow(Throwable toBeThrown);\n-    \n-    /**\n-     * Use it for stubbing consecutive calls in {@link Mockito#doAnswer(Answer)} style.\n-     * <p>\n-     * See javadoc for {@link Mockito#doAnswer(Answer)}\n-     * \n-     * @param answer\n-     * @return stubber - to select a method for stubbing\n-     */\n-    Stubber doAnswer(Answer answer);\n+    Stubber doReturn(Object toBeReturned);\n }\n--- a/src/org/mockito/stubbing/Answer.java\n+++ b/src/org/mockito/stubbing/Answer.java\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * Used to answer expected calls.\n- *\n+ * Generic interface for stubbing methods with callbacks.\n+ * <p>\n+ * Example:\n+ * \n+ * <pre>\n+ * stub(mock.someMethod(anyString())).toAnswer(new Answer() {\n+ *     Object answer(InvocationOnMock invocation) {\n+ *         Object[] args = invocation.getArguments();\n+ *         Object mock = invocation.getMock();\n+ *         return \"called with arguments: \" + args;\n+ *     }\n+ * });\n+ * \n+ * //Following prints \"called with arguments: foo\"\n+ * System.out.println(mock.someMethod(\"foo\"));\n+ * </pre>\n+ * \n  * @param <T> the type to return.\n  */\n public interface Answer<T> {", "timestamp": 1217028378, "metainfo": ""}