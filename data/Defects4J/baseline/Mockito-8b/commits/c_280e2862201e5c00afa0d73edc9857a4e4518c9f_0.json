{"sha": "280e2862201e5c00afa0d73edc9857a4e4518c9f", "log": "In order to simplify use of verifyNoMoreInteractions for one method the new verification mode was introduced (see issue 105).  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401604", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     public static VerificationMode atLeast(int minNumberOfInvocations) {\n         return VerificationModeFactory.atLeast(minNumberOfInvocations);\n     }\n-    \n+\n     /**\n      * Allows at-most-x verification. E.g:\n      * <pre>\n         return VerificationModeFactory.atMost(maxNumberOfInvocations);\n     }\n \n+    /**\n+     * Allows checking if given method was the only one invoked. E.g:\n+     * <pre>\n+     *   verify(mock, only()).someMethod();\n+     * </pre>\n+     * \n+     * <p>\n+     * It is a shortened version for {@link Mockito#verifyNoMoreInteractions(Object[])}\n+     * when only one method was invoked.\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @return verification mode\n+     */\n+    public static VerificationMode only() {\n+    \treturn VerificationModeFactory.only();\n+    }\n+    \n     /**\n      * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n      * <p>\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/Only.java\n+package org.mockito.internal.verification;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMarker;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.internal.verification.api.VerificationMode;\n+\n+public class Only implements VerificationMode {\n+\n+\tprivate final InvocationsFinder finder = new InvocationsFinder();\n+\tprivate final InvocationMarker marker = new InvocationMarker();\n+\tprivate final Reporter reporter = new Reporter();\n+\n+\t@Override\n+\tpublic void verify(VerificationData data) {\n+\t\tInvocationMatcher wantedMatcher = data.getWanted();\n+\t\tList<Invocation> invocations = data.getAllInvocations();\n+\t\tList<Invocation> chunk = finder.findInvocations(invocations,wantedMatcher);\n+\t\tif (invocations.size() != 1 && chunk.size() > 0) {\n+\t\t\tmarkFirstOccurence(chunk, wantedMatcher);\n+\t\t\tInvocation unverified = finder.findFirstUnverified(invocations);\n+\t\t\treporter.noMoreInteractionsWanted(unverified);\n+\t\t} else if (invocations.size() != 1 || chunk.size() == 0) {\n+\t\t\treporter.wantedButNotInvoked(wantedMatcher);\n+\t\t}\n+\t}\n+\n+\tprivate void markFirstOccurence(List<Invocation> chunk, InvocationMatcher wantedMatcher) {\n+\t\tInvocation invocation = chunk.get(0);\n+\t\tList<Invocation> invocationsToMark = new LinkedList<Invocation>();\n+\t\tinvocationsToMark.add(invocation);\n+\t\tmarker.markVerified(invocationsToMark, wantedMatcher);\n+\t}\n+\n+}\n--- a/src/org/mockito/internal/verification/VerificationModeFactory.java\n+++ b/src/org/mockito/internal/verification/VerificationModeFactory.java\n         return new AtLeast(minNumberOfInvocations);\n     }\n \n+    public static VerificationMode only() {\n+        return new Only();\n+    }\n+\n     public static Times times(int wantedNumberOfInvocations) {\n         return new Times(wantedNumberOfInvocations);\n     }\n--- /dev/null\n+++ b/test/org/mockitousage/verification/OnlyVerificationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.verification;\n+\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Mockito.only;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.verification.NoInteractionsWanted;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitoutil.TestBase;\n+\n+public class OnlyVerificationTest extends TestBase {\n+\n+    @Mock private List<Object> mock;\n+\n+\t@Test\n+\tpublic void shouldVerifyMethodWasInvokedExclusively() {\n+\t\tmock.clear();\n+\t\tverify(mock, only()).clear();\n+\t}\n+\n+\t@Test\n+\tpublic void shouldVerifyMethodWasInvokedExclusivelyWithMatchersUsage() {\n+\t\tmock.get(0);\n+\t\tverify(mock, only()).get(anyInt());\n+\t}\n+\n+\t@Test\n+\tpublic void shouldFailIfMethodWasNotInvoked() {\n+\t\tmock.clear();\n+\t\ttry {\n+\t\t\tverify(mock, only()).get(0);\n+\t\t\tfail();\n+\t\t} catch (WantedButNotInvoked e) {}\n+\t}\n+\n+\t@Test\n+\tpublic void shouldFailIfMethodWasInvokedMoreThanOnce() {\n+\t\tmock.clear();\n+\t\tmock.clear();\n+\t\ttry {\n+\t\t\tverify(mock, only()).clear();\n+\t\t\tfail();\n+\t\t} catch (NoInteractionsWanted e) {}\n+\t}\n+\n+\t@Test\n+\tpublic void shouldFailIfMethodWasInvokedButWithDifferentArguments() {\n+\t\tmock.get(0);\n+\t\tmock.get(2);\n+\t\ttry {\n+\t\t\tverify(mock, only()).get(1);\n+\t\t\tfail();\n+\t\t} catch (WantedButNotInvoked e) {}\n+\t}\n+}", "timestamp": 1251365676, "metainfo": ""}