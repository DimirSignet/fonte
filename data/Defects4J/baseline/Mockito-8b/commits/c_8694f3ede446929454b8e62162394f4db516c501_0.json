{"sha": "8694f3ede446929454b8e62162394f4db516c501", "log": "Promoted most @Incubating features  Removed @Incubating from some internal types as this annotation does not make sense on internal types.  Fixes #137", "commit": "\n--- a/src/org/mockito/MockingDetails.java\n+++ b/src/org/mockito/MockingDetails.java\n  *\n  * @since 1.9.5\n  */\n-@Incubating\n public interface MockingDetails {\n     \n     /**\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @return A {@link org.mockito.MockingDetails} instance.\n      * @since 1.9.5\n      */\n-    @Incubating\n     public static MockingDetails mockingDetails(Object toInspect) {\n         return MOCKITO_CORE.mockingDetails(toInspect);\n     }\n--- a/src/org/mockito/exceptions/stacktrace/StackTraceCleaner.java\n+++ b/src/org/mockito/exceptions/stacktrace/StackTraceCleaner.java\n package org.mockito.exceptions.stacktrace;\n-\n-import org.mockito.Incubating;\n \n /**\n  * Decides if particular StackTraceElement is excluded from the human-readable stack trace output.\n  * See the default implementation: {@link org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner}.\n  *\n  */\n-@Incubating\n public interface StackTraceCleaner {\n \n     /**\n--- a/src/org/mockito/internal/util/reflection/Fields.java\n+++ b/src/org/mockito/internal/util/reflection/Fields.java\n  */\n package org.mockito.internal.util.reflection;\n \n-import org.mockito.Incubating;\n import org.mockito.internal.util.Checks;\n+import org.mockito.internal.util.collections.ListUtil;\n import org.mockito.internal.util.collections.ListUtil.Filter;\n-import org.mockito.internal.util.collections.ListUtil;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n  *\n  * Code is very new and might need rework.\n  */\n-@Incubating\n public abstract class Fields {\n \n     /**\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n package org.mockito.internal.util.reflection;\n \n \n-import java.lang.reflect.Method;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.lang.reflect.TypeVariable;\n-import java.lang.reflect.WildcardType;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.mockito.Incubating;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.Checks;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n \n \n /**\n  * @see #resolveGenericReturnType(Method)\n  * @see org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs\n  */\n-@Incubating\n public abstract class GenericMetadataSupport {\n \n     // public static MockitoLogger logger = new ConsoleMockitoLogger();\n--- a/src/org/mockito/invocation/DescribedInvocation.java\n+++ b/src/org/mockito/invocation/DescribedInvocation.java\n package org.mockito.invocation;\n \n import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.Incubating;\n \n /**\n  * Provides information about the invocation, specifically a human readable description and the location.\n  */\n-@Incubating\n public interface DescribedInvocation extends PrintableInvocation {\n \n     /**\n--- a/src/org/mockito/invocation/Invocation.java\n+++ b/src/org/mockito/invocation/Invocation.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.invocation;\n-\n-import org.mockito.Incubating;\n \n /**\n  * A method call on a mock object. Contains all information and state needed for the Mockito framework to operate.\n  *\n  * @since 1.9.5\n  */\n-@Incubating\n public interface Invocation extends InvocationOnMock, DescribedInvocation {\n \n     /**\n--- a/src/org/mockito/invocation/Location.java\n+++ b/src/org/mockito/invocation/Location.java\n  */\n package org.mockito.invocation;\n \n-import org.mockito.Incubating;\n-\n /**\n  * Describes the location of something in the source code.\n  */\n-@Incubating\n public interface Location {\n \n     /**\n--- a/src/org/mockito/invocation/MockHandler.java\n+++ b/src/org/mockito/invocation/MockHandler.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.invocation;\n-\n-import org.mockito.Incubating;\n \n import java.io.Serializable;\n \n  * This api is work in progress. Do not provide your own implementations.\n  * Mockito will provide you with the implementation via other {@link org.mockito.plugins.MockMaker} methods.\n  */\n-@Incubating\n public interface MockHandler extends Serializable {\n     /**\n      * Takes an invocation object and handles it.\n      * @return Result\n      * @throws Throwable Throwable\n      */\n-    @Incubating\n     Object handle(Invocation invocation) throws Throwable;\n }\n--- a/src/org/mockito/invocation/StubInfo.java\n+++ b/src/org/mockito/invocation/StubInfo.java\n  */\n package org.mockito.invocation;\n \n-import org.mockito.Incubating;\n-\n /**\n  * The information about stubbing, for example the location of stubbing.\n  */\n-@Incubating\n public interface StubInfo {\n \n     /**\n--- a/src/org/mockito/mock/MockCreationSettings.java\n+++ b/src/org/mockito/mock/MockCreationSettings.java\n /**\n  * Informs about the mock settings. An immutable view of {@link org.mockito.MockSettings}.\n  */\n-@Incubating\n public interface MockCreationSettings<T> {\n \n     /**\n--- a/src/org/mockito/plugins/MockMaker.java\n+++ b/src/org/mockito/plugins/MockMaker.java\n  */\n package org.mockito.plugins;\n \n-import org.mockito.Incubating;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n \n  * @see org.mockito.invocation.MockHandler\n  * @since 1.9.5\n  */\n-@Incubating\n public interface MockMaker {\n \n     /**\n--- a/src/org/mockito/plugins/StackTraceCleanerProvider.java\n+++ b/src/org/mockito/plugins/StackTraceCleanerProvider.java\n package org.mockito.plugins;\n \n-import org.mockito.Incubating;\n import org.mockito.exceptions.stacktrace.StackTraceCleaner;\n \n /**\n  * <p>\n  * See the default implementation: {@link org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider}\n  */\n-@Incubating\n public interface StackTraceCleanerProvider {\n \n     /**", "timestamp": 1418597654, "metainfo": ""}