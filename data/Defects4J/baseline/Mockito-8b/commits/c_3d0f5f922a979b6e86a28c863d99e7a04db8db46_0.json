{"sha": "3d0f5f922a979b6e86a28c863d99e7a04db8db46", "log": "In order to avoid debug warnings when there are no warnings  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401846", "commit": "\n--- a/src/org/mockito/internal/util/junit/JUnitFailureHacker.java\n+++ b/src/org/mockito/internal/util/junit/JUnitFailureHacker.java\n public class JUnitFailureHacker {\n \n     public void appendWarnings(Failure failure, String warnings) {\n+        if (isEmpty(warnings)) {\n+            return;\n+        }\n         //TODO: this has to protect the use in case jUnit changes and this internal state logic fails\n         Throwable throwable = (Throwable) Whitebox.getInternalState(failure, \"fThrownException\");\n \n         ExceptionIncludingMockitoWarnings e = new ExceptionIncludingMockitoWarnings(newMessage, throwable);\n         e.setStackTrace(throwable.getStackTrace());\n         Whitebox.setInternalState(failure, \"fThrownException\", e);\n+    }\n+\n+    private boolean isEmpty(String warnings) {\n+        return warnings == null || warnings.isEmpty(); \n     }   \n }\n--- a/test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java\n+++ b/test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java\n         \n         //then\n         assertContains(\"unused stubbing blah\", failure.getException().getMessage());        \n+    }   \n+    \n+    @Test\n+    public void shouldNotAppendWhenNoWarnings() throws Exception {\n+        RuntimeException ex = new RuntimeException(\"foo\");\n+        Failure failure = new Failure(Description.EMPTY, ex);\n+        \n+        //when\n+        hacker.appendWarnings(failure, \"\");\n+        \n+        //then\n+        assertEquals(ex, failure.getException());        \n+    }\n+    \n+    @Test\n+    public void shouldNotAppendWhenNullWarnings() throws Exception {\n+        RuntimeException ex = new RuntimeException(\"foo\");\n+        Failure failure = new Failure(Description.EMPTY, ex);\n+        \n+        //when\n+        hacker.appendWarnings(failure, null);\n+        \n+        //then\n+        assertEquals(ex, failure.getException());        \n+    }\n+    \n+    @Test\n+    public void shouldPrintTheWarningSoICanSeeIt() throws Exception {\n+        Failure failure = new Failure(Description.EMPTY, new RuntimeException(\"foo\"));\n+        \n+        //when\n+        hacker.appendWarnings(failure, \"unused stubbing blah\");\n+        \n+        //then\n+        System.out.println(failure.getException());        \n     }\n }", "timestamp": 1266179052, "metainfo": ""}