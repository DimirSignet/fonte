{"sha": "22de8ed87810869cabae83af469639aa5d6fb383", "log": "assertions were activated on Jenkins  --HG-- extra : transplant_source : %979%CEZj%7F%7B%01%27%8E%98%8C%3F%CA%9B%9F%EB5%1B-", "commit": "\n--- a/src/org/mockito/internal/util/reflection/AccessibilityChanger.java\n+++ b/src/org/mockito/internal/util/reflection/AccessibilityChanger.java\n      * safely disables access\n      */\n     public void safelyDisableAccess(AccessibleObject accessibleObject) {\n-        assert wasAccessible != null;\n+        assert wasAccessible != null : \"accessibility info shall not be null\";\n         try {\n             accessibleObject.setAccessible(wasAccessible);\n         } catch (Throwable t) {\n         wasAccessible = accessibleObject.isAccessible();\n         accessibleObject.setAccessible(true);\n     }\n-}\n+}\n--- a/src/org/mockito/internal/util/reflection/FieldInitializer.java\n+++ b/src/org/mockito/internal/util/reflection/FieldInitializer.java\n             Constructor<?> constructor = null;\n             try {\n                 constructor = biggestConstructor(field.getType());\n-                checkParameterized(constructor, field);\n                 changer.enableAccess(constructor);\n \n                 final Object[] args = argResolver.resolveTypeInstances(constructor.getParameterTypes());\n         private Constructor<?> biggestConstructor(Class<?> clazz) {\n             final List<Constructor<?>> constructors = Arrays.asList(clazz.getDeclaredConstructors());\n             Collections.sort(constructors, byParameterNumber);\n-            return constructors.get(0);\n+\n+            Constructor<?> constructor = constructors.get(0);\n+            checkParameterized(constructor, field);\n+            return constructor;\n         }\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/util/reflection/AccessibilityChangerTest.java\n+package org.mockito.internal.util.reflection;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.lang.reflect.Field;\n+import java.util.Observable;\n+\n+public class AccessibilityChangerTest {\n+\n+    private Observable whatever;\n+\n+    @Test\n+    public void should_enable_and_safely_disable() throws Exception {\n+        AccessibilityChanger changer = new AccessibilityChanger();\n+        changer.enableAccess(field(\"whatever\"));\n+        changer.safelyDisableAccess(field(\"whatever\"));\n+    }\n+\n+    @Test(expected = java.lang.AssertionError.class)\n+    @Ignore(\"should be run only when -ea is passed to the VM\")\n+    public void safelyDisableAccess_should_fail_when_enableAccess_not_called() throws Exception {\n+        new AccessibilityChanger().safelyDisableAccess(field(\"whatever\"));\n+    }\n+\n+    private Field field(String fieldName) throws NoSuchFieldException {\n+        return this.getClass().getDeclaredField(fieldName);\n+    }\n+}", "timestamp": 1301265605, "metainfo": ""}