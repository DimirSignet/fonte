{"sha": "cec9351e14b46b76bb9a9c4a9b2fedae05b784e0", "log": "Fixed javadocs before the release  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401879", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n  * <li>you just need it to assert on argument values to complete verification</li>\n  * </ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n+ * <p>\n+ * There is an <b>annotation</b> that you might find useful: &#64;{@link Captor}\n  * <p>\n  * See the full documentation on Mockito in javadoc for {@link Mockito} class.    \n  */\n--- a/src/org/mockito/Captor.java\n+++ b/src/org/mockito/Captor.java\n  *       MockitoAnnotations.init(this);\n  *    }\n  *\n- *    ...\n+ *    &#64;Test public void shouldDoSomethingUseful() {\n+ *       //...\n+ *       verify(mock.doStuff(captor.capture()));\n+ *       assertEquals(\"foo\", captor.getValue());\n+ *    }\n  * }\n  * </pre>\n  * <p>\n--- a/src/org/mockito/InjectMock.java\n+++ b/src/org/mockito/InjectMock.java\n  * <ul>\n  * <li>Allows shorthand mock and spy injection.</li>\n  * <li>Minimizes repetitive mock and spy injection.</li>\n- * <li>Makes the test class more readable.</li>\n  * </ul>\n- *\n+ * <p>\n+ * Currently it only supports setter injection. If you prefer constructor injection - please contribute a patch.\n+ * <p>\n+ * Mockito tries to inject by type (using name in case types are the same). \n+ * Mockito does not throw anything when injection fails - you will have to satisfy the dependencies manually.  \n+ * <p>\n+ * Example:\n  * <pre>\n  *   public class ArticleManagerTest extends SampleBaseTestCase {\n  *\n  *\n  *       &#064;Before public void initMocks() {\n  *           MockitoAnnotations.initMocks(this);\n- *           MockitoAnnotations.injectMocks(this);\n  *       }\n  *   }\n  * </pre>\n  *\n  * <b>The field annotated with &#064;InjectMock must be initialized.</b>\n- * Mocks and spies must also be initialized with <code>MockitoAnnotations.initMocks(this)</code>.\n- *\n+ * <p>\n  * <b><code>MockitoAnnotations.injectMocks(this)</code></b> method has to called to initialize annotated objects.\n  * <p>\n  * In above example, <code>injectMocks()</code> is called in &#064;Before (JUnit4) method of test's base class.\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#17\">17. Resetting mocks (Since 1.8.0) </a><br/>\n  *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n- *      <a href=\"#20\">20. (**New**) Serializable mocks (Since 1.8.1) </a><br/>\n+ *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n+ *      <a href=\"#21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMock (Since 1.8.3) </a><br/>\n  * </b>\n  * \n  * <p>\n  *                 .defaultAnswer(CALLS_REAL_METHODS)\n  *                 .serializable());\n  * </pre>\n+ * \n+ * <h3 id=\"21\">21. (**New**) New annotations: &#064;Captor, &#064;Spy, &#064;InjectMock (Since 1.8.3) </h3>\n+ * <p>\n+ * Release 1.8.3 brings new annotations that may be helpful on occasion:\n+ * \n+ * <ul>\n+ * <li>&#064;{@link Captor} simplifies creation of {@link ArgumentCaptor} \n+ * - useful when the argument to capture is a nasty generic class and you want to avoid compiler warnings\n+ * <li>&#064;{@link Spy} - you can use it instead {@link Mockito#spy(Object)}. \n+ * <li>&#064;{@link InjectMock} - injects mocks into tested object automatically.\n+ * </ul>\n+ * <p>\n+ * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}  \n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n+ * MockitoAnnotations.initMocks(this); initializes fields annotated with Mockito annotations.\n+ * <p>  \n  * <ul>\n- * <li>Allows shorthand mock creation.</li> \n+ * <li>Allows shorthand creation of objects required for testing.</li> \n  * <li>Minimizes repetitive mock creation code.</li> \n  * <li>Makes the test class more readable.</li>\n  * <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>\n  *       }\n  *   }\n  * </pre>\n- * \n- * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated mocks.\n+ * <p>\n+ * Read also about other annotations &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMock}\n+ * <p>\n+ * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated fields.\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n     public @interface Mock {}    \n     \n     /**\n-     * Initializes objects annotated with &#064;Mock for given testClass.\n+     * Initializes objects annotated with Mockito annotations for given testClass:\n+     *  &#064;{@link org.mockito.Mock}, &#064;{@link Spy}, &#064;{@link Captor}, &#064;{@link InjectMock} \n      * <p>\n      * See examples in javadoc for {@link MockitoAnnotations} class.\n      */", "timestamp": 1267561417, "metainfo": ""}