{"sha": "2f63705252e9281324a8ef1c89a355f888d18e97", "log": "Rework in the automation.  Made it possible to run binary comparison task without providing the github token. Rename job and refactoring in the release notes automation machinery.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilder.java\n     void updateNotes(File notesFile, String toRevision);\n \n     /**\n-     * Retrieves previously released version based on the release notes file.\n-     *\n-     * @param notesFile\n-     * @return version, for example '1.10.0'\n-     */\n-    String getPreviousVersion(File notesFile);\n-\n-    /**\n      * Returns contributions between two revisions. Revisions can also be tag names or HEAD, etc.\n      *\n      * @param fromRevision start revision\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesServices.java\n+package org.mockito.release.notes;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Project;\n+import org.mockito.release.notes.internal.*;\n+\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+class ReleaseNotesServices {\n+\n+    private final Project project;\n+    private String gitHubToken;\n+    private String ignorePattern;\n+    private Map<String, String> labelToHeaderMapping = Collections.emptyMap();\n+    private List<String> labelsToIgnore = Collections.emptyList();\n+    private String headerForOtherImprovements;\n+\n+    ReleaseNotesServices(Project project) {\n+        this.project = project;\n+    }\n+\n+    ReleaseNotesBuilder createBuilder() {\n+        Collection<String> labelsToShowSeparately = labelToHeaderMapping.keySet();\n+        ImprovementSetSegregator segregator = new ImprovementSetSegregator(labelsToShowSeparately, labelsToIgnore);\n+        ImprovementsPrinter improvementsPrinter = new ImprovementsPrinter(segregator, labelToHeaderMapping, headerForOtherImprovements);\n+        if (gitHubToken == null) {\n+            throw new GradleException(\"GitHub token not provided\");\n+        }\n+        return new DefaultReleaseNotesBuilder(project, gitHubToken, ignorePattern, improvementsPrinter);\n+    }\n+\n+    //TODO SF interface\n+    ReleaseNotesServices gitHubToken(String gitHubToken) {\n+        this.gitHubToken = gitHubToken;\n+        return this;\n+    }\n+\n+    //TODO: MZ: Not needed when labelsToIgnore are used\n+    ReleaseNotesServices ignoreImprovementsMatching(String pattern) {\n+        this.ignorePattern = pattern;\n+        return this;\n+    }\n+\n+    ReleaseNotesServices ignoreImprovementsWithLabels(List<String> labelsToIgnore) {\n+        this.labelsToIgnore = labelsToIgnore;\n+        return this;\n+    }\n+\n+    ReleaseNotesServices showSeparatelyImprovementsWithLabelMappings(Map<String, String> labelToHeaderMapping) {\n+        this.labelToHeaderMapping = labelToHeaderMapping;\n+        return this;\n+    }\n+\n+    ReleaseNotesServices headerForOtherImprovements(String headerForOtherImprovements) {\n+        this.headerForOtherImprovements = headerForOtherImprovements;\n+        return this;\n+    }\n+\n+    PreviousVersionProvider getPreviousVersionProvider(File releaseNotesFile) {\n+        return new PreviousVersionFromFile(releaseNotesFile);\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/internal/PreviousVersionProvider.java\n+package org.mockito.release.notes.internal;\n+\n+/**\n+ * Provides previous version of the library.\n+ */\n+public interface PreviousVersionProvider {\n+\n+    /**\n+     * The previous version\n+     */\n+    String getPreviousVersion();\n+}", "timestamp": 1415220232, "metainfo": ""}