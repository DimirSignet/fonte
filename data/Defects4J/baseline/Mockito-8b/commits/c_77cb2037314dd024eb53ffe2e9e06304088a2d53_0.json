{"sha": "77cb2037314dd024eb53ffe2e9e06304088a2d53", "log": "Fixed issue 152 User should be able to configure the mock to be serializable and have extra interfaces  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401768", "commit": "\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.internal.util.MockName;\n import org.mockito.stubbing.Answer;\n \n-import java.util.Arrays;\n-import java.io.Serializable;\n-\n public class MockSettingsImpl implements MockSettings {\n \n     private static final long serialVersionUID = 4475297236197939568L;\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n+    private boolean serializable;\n \n     public MockSettings serializable() {\n-        return this.extraInterfaces(Serializable.class);\n+        this.serializable = true;\n+        return this;\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n     }\n \n     public boolean isSerializable() {\n-        return\n-                extraInterfaces != null\n-                && Arrays.asList(extraInterfaces).contains(Serializable.class);\n+        return serializable;\n     }\n \n     public void initiateMockName(Class classToMock) {\n--- /dev/null\n+++ b/src/org/mockito/internal/util/ArrayUtils.java\n+package org.mockito.internal.util;\n+\n+public class ArrayUtils {\n+    public Class<?>[] concat(Class<?>[] interfaces, Class<?> clazz) {\n+        int length = interfaces.length;\n+        Class[] out = new Class[length +1];\n+        System.arraycopy(interfaces, 0, out, 0, length);\n+        out[length] = clazz;\n+        return out;\n+    }\n+}\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n+\n+import java.io.Serializable;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);\n         MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n-        Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n+\n+        Class<?>[] ancillaryTypes;\n+        if (settings.isSerializable()) {\n+            ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);\n+        } else {\n+            ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n+        }\n+\n         Object spiedInstance = settings.getSpiedInstance();\n         \n         T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n  */\n package org.mockito.internal.creation;\n \n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n+\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Set;\n-import java.io.Serializable;\n-\n-import org.junit.Test;\n-import org.mockito.exceptions.base.MockitoException;\n-import org.mockitoutil.TestBase;\n-import org.fest.assertions.Assertions;\n \n public class MockSettingsImplTest extends TestBase {\n \n         mockSettingsImpl.serializable();\n \n         //then\n-        Assertions.assertThat(mockSettingsImpl.getExtraInterfaces()).contains(Serializable.class);\n+        assertTrue(mockSettingsImpl.isSerializable());\n     }\n \n     @Test\n--- /dev/null\n+++ b/test/org/mockito/internal/util/ArrayUtilsTest.java\n+package org.mockito.internal.util;\n+\n+import org.fest.assertions.Assertions;\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ArrayUtilsTest extends TestBase {\n+\n+    ArrayUtils utils = new ArrayUtils();\n+\n+    @Test\n+    public void shouldConcatenateItemToAnEmptyArray() throws Exception {\n+        //when\n+        Class<?>[] items = utils.concat(new Class[0], List.class);\n+\n+        //then\n+        Assertions.assertThat(items).containsOnly(List.class);\n+    }\n+\n+    @Test\n+    public void shouldConcatenateItemToFullArray() throws Exception {\n+        //when\n+        Class<?>[] items = utils.concat(new Class[] {Serializable.class, Map.class}, List.class);\n+\n+        //then\n+        Assertions.assertThat(items).containsOnly(Serializable.class, Map.class, List.class);\n+    }\n+}\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n         // then\n         assertEquals(\"foo\", mock.toString());\n     }\n+\n+    @Test\n+    public void shouldBeSerializeAndHaveExtraInterfaces() throws Exception {\n+        //when\n+        IMethods mock = mock(IMethods.class, withSettings().serializable().extraInterfaces(List.class));\n+        IMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());\n+\n+        //then\n+        serializeAndBack((List) mock);\n+        serializeAndBack((List) mockTwo);\n+    }\n }", "timestamp": 1258844692, "metainfo": ""}