{"sha": "2e92c49a861a1e572a39a23266056e32d1bc10c8", "log": "added handy constructor to ExpectedInvocation added some import static to increase readibility  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4088", "commit": "\n--- a/src/org/mockito/internal/ExpectedInvocation.java\n+++ b/src/org/mockito/internal/ExpectedInvocation.java\n         }\n         this.invocation = invocation;\n         this.matchers = matchers;\n+    }\n+    \n+    public ExpectedInvocation(Invocation invocation) {\n+        this(invocation, Collections.<IArgumentMatcher>emptyList());\n     }\n     \n     public boolean equals(Object o) {\n--- a/test/org/mockito/internal/ExpectedInvocationTest.java\n+++ b/test/org/mockito/internal/ExpectedInvocationTest.java\n package org.mockito.internal;\n \n import static org.junit.Assert.*;\n+import static java.util.Arrays.*;\n \n import java.util.*;\n \n     \n     @Test\n     public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {\n-        ExpectedInvocation withOneArg = new ExpectedInvocation(new InvocationBuilder().args(\"test\").toInvocation(), Collections.EMPTY_LIST);\n-        ExpectedInvocation withTwoArgs = new ExpectedInvocation(new InvocationBuilder().args(\"test\", 100).toInvocation(), Collections.EMPTY_LIST);\n+        ExpectedInvocation withOneArg = new ExpectedInvocation(new InvocationBuilder().args(\"test\").toInvocation());\n+        ExpectedInvocation withTwoArgs = new ExpectedInvocation(new InvocationBuilder().args(\"test\", 100).toInvocation());\n \n         assertFalse(withOneArg.equals(null));\n         assertFalse(withOneArg.equals(withTwoArgs));\n     public void shouldEqualWhenMatchersEqual() throws Exception {\n         IArgumentMatcher m = new Equals(1);\n         IArgumentMatcher mTwo = new Equals(2);\n-        ExpectedInvocation withMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), Arrays.asList(m));\n-        ExpectedInvocation withEqualMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), Arrays.asList(m));\n-        ExpectedInvocation withoutEqualMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), Arrays.asList(mTwo));\n+        ExpectedInvocation withMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(m));\n+        ExpectedInvocation withEqualMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(m));\n+        ExpectedInvocation withoutEqualMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(mTwo));\n         \n         assertTrue(withMatchers.equals(withEqualMatchers));\n         assertFalse(withMatchers.equals(withoutEqualMatchers));\n     @Test\n     public void shouldToStringWithMatchers() throws Exception {\n         IArgumentMatcher m = NotNull.NOT_NULL;\n-        ExpectedInvocation notNull = new ExpectedInvocation(new InvocationBuilder().toInvocation(), Arrays.asList(m));\n+        ExpectedInvocation notNull = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(m));\n         IArgumentMatcher mTwo = new Equals('x');\n-        ExpectedInvocation equals = new ExpectedInvocation(new InvocationBuilder().toInvocation(), Arrays.asList(mTwo));\n+        ExpectedInvocation equals = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(mTwo));\n \n         assertEquals(\"Object.simpleMethod(notNull())\", notNull.toString());\n         assertEquals(\"Object.simpleMethod('x')\", equals.toString());\n--- a/test/org/mockito/internal/MockitoBehaviorTest.java\n+++ b/test/org/mockito/internal/MockitoBehaviorTest.java\n \n     @Test\n     public void shouldNotCheckForWrongNumberOfModificationsWhenVerifyingInOrder() throws Exception {\n-        ExpectedInvocation invocation = new ExpectedInvocation(new InvocationBuilder().toInvocation() , Collections.EMPTY_LIST);\n+        ExpectedInvocation invocation = new ExpectedInvocation(new InvocationBuilder().toInvocation());\n         MockitoBehavior behavior = new MockitoBehavior();\n         \n         VerifyingMode inOrder = VerifyingMode.inOrder(1, Arrays.asList(new Object()));\n--- a/test/org/mockito/internal/RegisteredInvocationsTest.java\n+++ b/test/org/mockito/internal/RegisteredInvocationsTest.java\n package org.mockito.internal;\n \n import static java.util.Arrays.asList;\n-import static java.util.Collections.EMPTY_LIST;\n+import static org.mockito.internal.VerifyingMode.*;\n+import static java.util.Collections.*;\n import static org.junit.Assert.*;\n \n import java.util.*;\n                 return EMPTY_LIST;\n             }});\n         \n-        registered.unverifiedInvocationChunks(VerifyingMode.inOrder(null, dummyMocks));\n+        registered.unverifiedInvocationChunks(inOrder(null, dummyMocks));\n         assertEquals(\"InvocationsFinder was asked\", s.toString());\n     }    \n     \n     @Test\n     public void shouldGetUnverifiedInvocationChunks() throws Exception {\n         Object mock = new Object();\n-        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(VerifyingMode.inOrder(null, asList(mock)));\n+        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(inOrder(null, asList(mock)));\n         \n         assertEquals(3, chunks.size());\n         \n     public void shouldGetTwoUnverifiedInvocationChunks() throws Exception {\n         Object mock = new Object();\n         \n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.inOrder(null, asList(mock)));\n-        \n-        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(VerifyingMode.inOrder(null, asList(mock)));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), inOrder(null, asList(mock)));\n+        \n+        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(inOrder(null, asList(mock)));\n         \n         assertEquals(2, chunks.size());\n         \n     public void shouldGetOneUnverifiedInvocationChunk() throws Exception {\n         Object mock = new Object();\n         \n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.inOrder(null, asList(mock)));\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(differentMethodInvocation, EMPTY_LIST), VerifyingMode.inOrder(null, asList(mock)));\n-        \n-        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(VerifyingMode.inOrder(null, asList(mock)));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), inOrder(null, asList(mock)));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(differentMethodInvocation), inOrder(null, asList(mock)));\n+        \n+        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(inOrder(null, asList(mock)));\n         \n         assertEquals(1, chunks.size());\n         \n     public void shouldNotGetAnyInvocationChunks() throws Exception {\n         Object mock = new Object();\n         \n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.inOrder(null, asList(mock)));\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(differentMethodInvocation, EMPTY_LIST), VerifyingMode.inOrder(null, asList(mock)));\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.inOrder(null, asList(mock)));\n-        \n-        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(VerifyingMode.inOrder(null, asList(mock)));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), inOrder(null, asList(mock)));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(differentMethodInvocation), inOrder(null, asList(mock)));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), inOrder(null, asList(mock)));\n+        \n+        List<InvocationChunk> chunks = registered.unverifiedInvocationChunks(inOrder(null, asList(mock)));\n         \n         assertEquals(0, chunks.size());\n     }\n     \n     @Test\n     public void shouldMarkAllsimpleMethodAsVerified() throws Exception {\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST),VerifyingMode.times(2));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation),times(2));\n         \n         List<Invocation> invocations = registered.all();\n         assertEquals(true, invocations.get(0).isVerified());\n     \n     @Test\n     public void shouldMarkAllsimpleMethodAsVerifiedWhenAtLeastOnceIsUsed() throws Exception {\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.atLeastOnce());\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), atLeastOnce());\n         \n         List<Invocation> invocations = registered.all();\n         assertEquals(true, invocations.get(0).isVerified());\n     \n     @Test\n     public void shouldNeverMarkInvocationsAsVerifiedIfExpectedCountIsZero() throws Exception {\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.times(0));\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), times(0));\n         \n         List<Invocation> invocations = registered.all();\n         assertEquals(false, invocations.get(0).isVerified());\n     \n     @Test\n     public void shouldMarkAsVerifedAllInvocationsFromFirstChunk() throws Exception {\n-        VerifyingMode mode = VerifyingMode.inOrder(null, Arrays.asList(new Object()));\n+        VerifyingMode mode = inOrder(null, Arrays.asList(new Object()));\n         assertTrue(mode.orderOfInvocationsMatters());\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(null, EMPTY_LIST), mode);\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(null), mode);\n         \n         List<Invocation> invocations = registered.all();\n         assertEquals(true, invocations.get(0).isVerified());\n     \n     @Test\n     public void shouldMarkAsVerifedAllInvocationsFromSecondChunk() throws Exception {\n-        VerifyingMode mode = VerifyingMode.inOrder(null, Arrays.asList(new Object()));\n+        VerifyingMode mode = inOrder(null, Arrays.asList(new Object()));\n         assertTrue(mode.orderOfInvocationsMatters());\n         \n         Invocation doesntMatter = null;\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter, EMPTY_LIST), mode);\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter, EMPTY_LIST), mode);\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter), mode);\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter), mode);\n         \n         List<Invocation> invocations = registered.all();\n         assertEquals(true, invocations.get(2).isVerified());\n     \n     @Test\n     public void shouldMarkAsVerifedAllInvocationsFromThirdChunk() throws Exception {\n-        VerifyingMode mode = VerifyingMode.inOrder(null, Arrays.asList(new Object()));\n+        VerifyingMode mode = inOrder(null, Arrays.asList(new Object()));\n         assertTrue(mode.orderOfInvocationsMatters());\n         \n         Invocation doesntMatter = null;\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter, EMPTY_LIST), mode);\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter, EMPTY_LIST), mode);\n-        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter, EMPTY_LIST), mode);\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter), mode);\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter), mode);\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(doesntMatter), mode);\n         \n         List<Invocation> invocations = registered.all();\n         assertEquals(true, invocations.get(3).isVerified());\n     public void shouldGetFirstUnverifiedInvocation() throws Exception {\n         assertSame(simpleMethodInvocation, registered.getFirstUnverified());\n         \n-        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation, EMPTY_LIST), VerifyingMode.atLeastOnce());\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(simpleMethodInvocation), atLeastOnce());\n         assertSame(differentMethodInvocation, registered.getFirstUnverified());\n         \n-        registered.markInvocationsAsVerified(new ExpectedInvocation(differentMethodInvocation, EMPTY_LIST), VerifyingMode.atLeastOnce());\n+        registered.markInvocationsAsVerified(new ExpectedInvocation(differentMethodInvocation), atLeastOnce());\n         assertNull(registered.getFirstUnverified());\n     }\n }", "timestamp": 1196283259, "metainfo": ""}