{"sha": "391944034566d8a6f43d96f6e9282f10878e1d0e", "log": "Fixed license headers Minor cosmetic changes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401357", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     public static final ReturnValues RETURNS_MOCKS = new MockReturnValues();\n \n     /**\n-     * TODO THIS INTERFACE MIGHT CHANGE IN 1.8\n-     * TODO mention partial mocks warning\n+     * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8\n+     * TODO: mention partial mocks warning\n      * \n      * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n      * <p>\n     /**\n      * Use doCallRealMethod() when you want to call the real implementation of a method.\n      * <p>\n-     * TODO mention partial mocks warning\n+     * TODO: mention partial mocks warning\n      * <p>\n      * Example:\n      * <pre>\n--- a/src/org/mockito/exceptions/Discrepancy.java\n+++ b/src/org/mockito/exceptions/Discrepancy.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions;\n \n public class Discrepancy {\n--- a/src/org/mockito/exceptions/Pluralizer.java\n+++ b/src/org/mockito/exceptions/Pluralizer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions;\n \n public class Pluralizer {\n--- a/src/org/mockito/internal/debugging/Localized.java\n+++ b/src/org/mockito/internal/debugging/Localized.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n \n--- a/src/org/mockito/internal/debugging/Location.java\n+++ b/src/org/mockito/internal/debugging/Location.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n import org.mockito.exceptions.base.StackTraceFilter;\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * Method call on a mock object. \n+ * Method call on a mock object.\n  * <p>\n- * Contains sequence number which should be\n- * globally unique and is used for verification in order.\n+ * Contains sequence number which should be globally unique and is used for\n+ * verification in order.\n  * <p>\n  * Contains stack trace of invocation\n  */\n         this.methodProxy = methodProxy;\n     }\n \n-    //expands array varArgs that are given by runtime (1, [a, b]) into true varArgs (1, a, b);\n-    private static Object[] expandVarArgs(final boolean isVarArgs,\n-            final Object[] args) {\n-        if (!isVarArgs || isVarArgs && args[args.length - 1] != null\n-                && !args[args.length - 1].getClass().isArray()) {\n+    // expands array varArgs that are given by runtime (1, [a, b]) into true\n+    // varArgs (1, a, b);\n+    private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n+        if (!isVarArgs || isVarArgs && args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n             return args == null ? new Object[0] : args;\n         }\n-            \n+\n         final int nonVarArgsCount = args.length - 1;\n-        Object[] varArgs;  \n+        Object[] varArgs;\n         if (args[nonVarArgsCount] == null) {\n-            //in case someone deliberately passed null varArg array\n-            varArgs = new Object[] {null};\n+            // in case someone deliberately passed null varArg array\n+            varArgs = new Object[] { null };\n         } else {\n             varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n         }\n     public boolean isVerified() {\n         return verified;\n     }\n-    \n+\n     public Integer getSequenceNumber() {\n         return sequenceNumber;\n     }\n     public boolean isVerifiedInOrder() {\n         return verifiedInOrder;\n     }\n-    \n+\n     public boolean equals(Object o) {\n         if (o == null || !o.getClass().equals(this.getClass())) {\n             return false;\n \n         Invocation other = (Invocation) o;\n \n-        return this.mock.equals(other.mock) && this.method.equals(other.method)\n-                && this.equalArguments(other.arguments);\n+        return this.mock.equals(other.mock) && this.method.equals(other.method) && this.equalArguments(other.arguments);\n     }\n \n     private boolean equalArguments(Object[] arguments) {\n     public int hashCode() {\n         throw new RuntimeException(\"hashCode() is not implemented\");\n     }\n-    \n+\n     public String toString() {\n         return toString(argumentsToMatchers(), false);\n     }\n \n     public String toMultilineString() {\n         return toString(argumentsToMatchers(), true);\n-    }    \n+    }\n \n     protected String toString(List<Matcher> matchers, boolean forceMultiline) {\n         String method = qualifiedMethodName();\n         result.appendList(\"(\", \", \", \");\", matchers);\n         return result.toString();\n     }\n-    \n+\n     private String getArgumentsBlock(List<Matcher> matchers) {\n         Description result = new StringDescription();\n         result.appendList(\"(\\n    \", \",\\n    \", \"\\n);\", matchers);\n         return result.toString();\n     }\n-    \n+\n     protected List<Matcher> argumentsToMatchers() {\n         List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n         for (Object arg : arguments) {\n     public static boolean isToString(InvocationOnMock invocation) {\n         return isToString(invocation.getMethod());\n     }\n-    \n+\n     public static boolean isToString(Method method) {\n-        return method.getReturnType() == String.class \n-        && method.getParameterTypes().length == 0 \n-        && method.getName().equals(\"toString\");\n+        return method.getReturnType() == String.class && method.getParameterTypes().length == 0 && method.getName().equals(\"toString\");\n     }\n \n     public boolean isValidException(Throwable throwable) {\n                 return true;\n             }\n         }\n-        \n+\n         return false;\n     }\n-    \n+\n     public boolean isValidReturnType(Class clazz) {\n         if (method.getReturnType().isPrimitive()) {\n             return Primitives.primitiveTypeOf(clazz) == method.getReturnType();\n         return this.rawArguments;\n     }\n \n-\t//TODO call it invokeReal or something along\n+    // TODO: call it invokeReal or something along\n     public Object invokeSuper() throws Throwable {\n         return methodProxy.invokeSuper(mock, arguments);\n     }\n--- a/src/org/mockito/internal/matchers/LocalizedMatcher.java\n+++ b/src/org/mockito/internal/matchers/LocalizedMatcher.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.matchers;\n \n import org.hamcrest.Description;\n--- a/src/org/mockito/internal/progress/NewOngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/NewOngoingStubbing.java\n     NewOngoingStubbing<T> thenThrow(Throwable... throwables);\n \n     /**\n-     * TODO partial mocks warning\n+     * TODO: partial mocks warning\n      * Sets the real implementation to be called when the method is called on a mock object.  E.g.:\n      * <pre>\n      * when(mock.someMethod()).thenCallRealMethod();\n--- a/src/org/mockito/internal/returnvalues/MockReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MockReturnValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.returnvalues;\n \n import org.mockito.ReturnValues;\n--- a/src/org/mockito/internal/returnvalues/RealReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/RealReturnValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.returnvalues;\n \n import org.mockito.ReturnValues;\n--- a/src/org/mockito/internal/stubbing/CallsRealMethod.java\n+++ b/src/org/mockito/internal/stubbing/CallsRealMethod.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n import org.mockito.invocation.InvocationOnMock;\n--- a/src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.checkers;\n \n import org.mockito.exceptions.Discrepancy;\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n         Mockito.inOrder(\"notMock\");\n     }\n     \n-    //TODO after 1.7 stack filter does not work very well when it comes to threads?\n+    //TODO: after 1.7 stack filter does not work very well when it comes to threads?\n }\n--- a/test/org/mockito/exceptions/base/ConditionalStackTraceFilterTest.java\n+++ b/test/org/mockito/exceptions/base/ConditionalStackTraceFilterTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions.base;\n \n import static org.mockitoutil.ExtraMatchers.*;\n--- a/test/org/mockito/internal/configuration/ConfigurationAccess.java\n+++ b/test/org/mockito/internal/configuration/ConfigurationAccess.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.configuration;\n \n import org.mockito.configuration.MockitoConfiguration;\n--- a/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n         assertNotContains(\"was not stubbed\", logger.getLoggedInfo());\n     }\n \n-    // TODO after 1.7 consider writing a warning when someone tries to mock a\n+    // TODO: after 1.7 consider writing a warning when someone tries to mock a\n     // class that has any final methods\n }\n--- a/test/org/mockito/internal/returnvalues/HasPrimitiveMethods.java\n+++ b/test/org/mockito/internal/returnvalues/HasPrimitiveMethods.java\n-/**\n- * \n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.returnvalues;\n \n--- a/test/org/mockito/internal/returnvalues/MockReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/MockReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.returnvalues;\n \n import org.junit.Test;\n--- a/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n         \n         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n         \n-        //TODO after 1.7 add functionality of printing params\n+        //TODO: after 1.7 add functionality of printing params\n         assertEquals(\"SmartNull returned by unstubbed get() method on mock\", smartNull + \"\");\n     }\n }\n--- a/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java\n         runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub);\n     }\n     \n-    //TODO after 1.7 refactor it to override-and-subclass\n+    //TODO: after 1.7 refactor it to override-and-subclass\n     @Test(expected=RunWasCalled.class)\n     public void shouldRunTests() throws Exception {\n         runner.run(notifier, new JunitTestBody() {\n--- a/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n+++ b/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n         }\n \n         public T getValue() {\n-            //TODO after 1.7 nice instanceof check here?\n-            //TODO capture according to what one guy wrote to the mailing list?\n+            //TODO: after 1.7 nice instanceof check here?\n+            //TODO: capture according to what one guy wrote to the mailing list?\n             return (T) argument;\n         }\n     }\n \n     @Mock IMethods mock;\n \n-    //TODO after 1.7 decide on getting capture matcher into Mockito\n+    //TODO: after 1.7 decide on getting capture matcher into Mockito\n     @Test\n     public void shouldUseArgumentCaptorInEasyMockStyle() {\n         Foo foo = new Foo(mock);\n--- a/test/org/mockitousage/matchers/MoreMatchersTest.java\n+++ b/test/org/mockitousage/matchers/MoreMatchersTest.java\n     \n     @Test\n     public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n-//        TODO implement after 1.7\n+//        TODO: implement after 1.7\n //        when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n //        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"collection\");\n //        \n--- a/test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java\n+++ b/test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java\n     @Ignore\n     @Test\n     public void shouldNotAllowVerifyingRestrictedMethods() {\n-        //TODO after 1.7 exception message should mention those methods are not verifiable\n+        //TODO: after 1.7 exception message should mention those methods are not verifiable\n         verify(mock).toString();\n         verify(mock).hashCode();\n         verify(mock).equals(null);\n--- a/test/org/mockitousage/stubbing/CallingRealMethodTest.java\n+++ b/test/org/mockitousage/stubbing/CallingRealMethodTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.stubbing;\n \n import static org.mockito.Matchers.*;\n--- a/test/org/mockitousage/stubbing/ReturningMockValuesTest.java\n+++ b/test/org/mockitousage/stubbing/ReturningMockValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.stubbing;\n \n import org.junit.Test;\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n     } \n     \n     @Ignore(\"i don't know how to implement it nicely... yet :)\")\n-    //TODO related to enhancement 27\n+    //TODO: related to enhancement 27\n     @Test\n     public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {\n         try {\n--- a/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n+++ b/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n     public void shouldVerify() throws Exception {\n         mock.clear();\n         \n-        //TODO after 1.8 implement timeout\n+        //TODO: after 1.8 implement timeout\n         //verify(mock, atLeastOnce().timeout(100)).clear();\n     }\n }", "timestamp": 1240342078, "metainfo": ""}