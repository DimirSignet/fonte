{"sha": "ebcb3e78c5236687731c674423ac2a640b59f935", "log": "fixed bug around @Mock (didn't initialize annotated mocks from base classes)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40386", "commit": "\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n     @Target( { FIELD })\n     @Retention(RetentionPolicy.RUNTIME)\n     public @interface Mock {}\n-\n+    \n     /**\n      * Initializes objects annotated with &#064;Mock for given testClass.\n      * See examples in javadoc for {@link MockitoAnnotations}.\n             throw new MockitoException(\"testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations\");\n         }\n         \n-        Field[] fields = testClass.getClass().getDeclaredFields();\n+        Class<?> clazz = testClass.getClass();\n+        while (clazz != Object.class) {\n+            scan(testClass, clazz);\n+            clazz = clazz.getSuperclass();\n+        }\n+    }\n+\n+    private static void scan(Object testClass, Class<?> clazz) {\n+        Field[] fields = clazz.getDeclaredFields();\n         for (Field f : fields) {\n             if (f.isAnnotationPresent(Mock.class)) {\n                 f.setAccessible(true);\n--- a/test/org/mockitousage/AnnotationsTest.java\n+++ b/test/org/mockitousage/AnnotationsTest.java\n                     e.getMessage());\n         }\n     }\n+    \n+    @Test\n+    public void shouldLookForAnnotatedMocksInSuperClasses() throws Exception {\n+        Sub sub = new Sub();\n+        MockitoAnnotations.initMocks(sub);\n+        \n+        assertNotNull(sub.getMock());\n+        assertNotNull(sub.getBaseMock());\n+        assertNotNull(sub.getSuperBaseMock());\n+    }\n+    \n+    class SuperBase {\n+        @Mock private IMethods mock;\n+        \n+        public IMethods getSuperBaseMock() {\n+            return mock;\n+        }\n+    }\n+    \n+    class Base extends SuperBase {\n+        @Mock private IMethods mock;\n+        \n+        public IMethods getBaseMock() {\n+            return mock;\n+        }\n+    }\n+    \n+    class Base2 extends SuperBase {\n+        @Mock private IMethods mock;\n+        \n+        public IMethods getBaseMock() {\n+            return mock;\n+        }\n+    }\n+    \n+    class Sub extends Base {\n+        @Mock private IMethods mock;\n+        \n+        public IMethods getMock() {\n+            return mock;\n+        }\n+    }\n }", "timestamp": 1203367180, "metainfo": ""}