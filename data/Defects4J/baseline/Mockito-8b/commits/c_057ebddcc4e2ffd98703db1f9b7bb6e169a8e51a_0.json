{"sha": "057ebddcc4e2ffd98703db1f9b7bb6e169a8e51a", "log": "simplified Matchers.java  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40273", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n package org.mockito;\n \n import org.mockito.internal.matchers.Any;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Contains;\n import org.mockito.internal.matchers.EndsWith;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.Same;\n import org.mockito.internal.matchers.StartsWith;\n import org.mockito.internal.progress.LastArguments;\n+import org.mockito.internal.progress.ReturnValues;\n \n /**\n  * Allow less constrained verification or stubbing. See also {@link AdditionalMatchers}.\n      */\n     public static boolean anyBoolean() {\n         //TODO every matcher should have a link to documentation about matchers\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return false;\n+        return reportMatcher(Any.ANY).booleanValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte anyByte() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).byteValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char anyChar() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).charValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int anyInt() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).intValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long anyLong() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).longValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float anyFloat() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).floatValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double anyDouble() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).doubleValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short anyShort() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return 0;\n+        return reportMatcher(Any.ANY).shortValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static Object anyObject() {\n-        LastArguments.instance().reportMatcher(Any.ANY);\n-        return null;\n+        return reportMatcher(Any.ANY).nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String anyString() {\n-        isA(String.class);\n-        return null;\n+        return isA(String.class);\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T isA(Class<T> clazz) {\n-        LastArguments.instance().reportMatcher(new InstanceOf(clazz));\n-        return null;\n+        return reportMatcher(new InstanceOf(clazz)).nullValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static boolean eq(boolean value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return false;\n+        return reportMatcher(new Equals(value)).booleanValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte eq(byte value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n+        return reportMatcher(new Equals(value)).byteValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char eq(char value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n+        return reportMatcher(new Equals(value)).charValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double eq(double value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n+        return reportMatcher(new Equals(value)).doubleValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float eq(float value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n+        return reportMatcher(new Equals(value)).floatValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int eq(int value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n+        return reportMatcher(new Equals(value)).intValue();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long eq(long value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n-    }\n-\n+        return reportMatcher(new Equals(value)).longValue();\n+    }\n+\n+    //TODO can I replace those with Number?\n     /**\n      * short argument that is equal to the given value.\n      * \n      * @return <code>0</code>.\n      */\n     public static short eq(short value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return 0;\n+        return reportMatcher(new Equals(value)).shortValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T eq(T value) {\n-        LastArguments.instance().reportMatcher(new Equals(value));\n-        return null;\n+        return reportMatcher(new Equals(value)).nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T same(T value) {\n-        LastArguments.instance().reportMatcher(new Same(value));\n-        return null;\n+        return reportMatcher(new Same(value)).nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static Object isNull() {\n-        LastArguments.instance().reportMatcher(Null.NULL);\n-        return null;\n+        return reportMatcher(Null.NULL).nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static Object notNull() {\n-        LastArguments.instance().reportMatcher(NotNull.NOT_NULL);\n-        return null;\n+        return reportMatcher(NotNull.NOT_NULL).nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String contains(String substring) {\n-        LastArguments.instance().reportMatcher(new Contains(substring));\n-        return null;\n+        return reportMatcher(new Contains(substring)).<String>nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String matches(String regex) {\n-        LastArguments.instance().reportMatcher(new Matches(regex));\n-        return null;\n+        return reportMatcher(new Matches(regex)).<String>nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String endsWith(String suffix) {\n-        LastArguments.instance().reportMatcher(new EndsWith(suffix));\n-        return null;\n+        return reportMatcher(new EndsWith(suffix)).<String>nullValue();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String startsWith(String prefix) {\n-        return LastArguments.instance().reportMatcher(new StartsWith(prefix)).<String>nullValue();\n+        return reportMatcher(new StartsWith(prefix)).<String>nullValue();\n     }\n     \n     public static char charThat(CustomMatcher<Character> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).charValue();\n+        return reportMatcher(matcher).charValue();\n     }\n     \n     public static boolean booleanThat(CustomMatcher<Boolean> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).booleanValue();\n+        return reportMatcher(matcher).booleanValue();\n     }\n     \n     public static byte byteThat(CustomMatcher<Byte> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).byteValue();\n+        return reportMatcher(matcher).byteValue();\n     }\n     \n     public static short shortThat(CustomMatcher<Short> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).shortValue();\n+        return reportMatcher(matcher).shortValue();\n     }\n     \n     public static int intThat(CustomMatcher<Integer> matcher) {\n-        //TODO one-liner pattern everywhere\n-        return LastArguments.instance().reportMatcher(matcher).intValue();\n-    }\n-    \n+        return reportMatcher(matcher).intValue();\n+    }\n+\n     public static long longThat(CustomMatcher<Long> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).longValue();\n+        return reportMatcher(matcher).longValue();\n     }\n     \n     public static float floatThat(CustomMatcher<Float> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).floatValue();\n+        return reportMatcher(matcher).floatValue();\n     }\n     \n     public static double doubleThat(CustomMatcher<Double> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).doubleValue();\n+        return reportMatcher(matcher).doubleValue();\n     }\n \n     public static <T> T argThat(CustomMatcher<T> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher).<T>nullValue();\n+        return reportMatcher(matcher).<T>nullValue();\n+    }\n+    \n+    private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher);\n     }\n }\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})", "timestamp": 1199886933, "metainfo": ""}