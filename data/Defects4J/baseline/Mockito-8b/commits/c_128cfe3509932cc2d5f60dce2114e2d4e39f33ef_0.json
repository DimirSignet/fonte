{"sha": "128cfe3509932cc2d5f60dce2114e2d4e39f33ef", "log": "Fixed issue 70 NPE was thrown when user put mocked Throwables in thenThrow() clause.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401304", "commit": "\n--- a/src/org/mockito/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n         return fromMockObject || fromOrgMockito && !isRunner;\n     }\n \n+    //TODO remove hasStackTrace strings\n     public void filterStackTrace(Throwable hasStackTrace) {\n         StackTraceElement[] filtered = filterStackTrace(hasStackTrace.getStackTrace());\n         hasStackTrace.setStackTrace(filtered);\n--- a/src/org/mockito/internal/stubbing/ThrowsException.java\n+++ b/src/org/mockito/internal/stubbing/ThrowsException.java\n package org.mockito.internal.stubbing;\n \n import org.mockito.exceptions.base.StackTraceFilter;\n+import org.mockito.internal.util.MockUtil;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n     }\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n-        Throwable filtered = throwable.fillInStackTrace();\n-        filter.filterStackTrace(filtered);\n-        throw filtered;\n+        //TODO validate performance\n+        if (MockUtil.isMock(throwable)) {\n+            throw throwable;\n+        }\n+        Throwable t = throwable.fillInStackTrace();\n+        filter.filterStackTrace(t);\n+        throw t;\n     }\n \n     public Throwable getThrowable() {\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class NPEWhenMockingThrowablesTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+    @Mock DummyException mock2;\n+    \n+    class DummyException extends RuntimeException {\n+        private static final long serialVersionUID = 1L;\n+    }\n+\n+    //issue 70\n+    @Test\n+    public void shouldNotThrowNPE() {\n+        when(mock.simpleMethod()).thenThrow(mock2);\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch(DummyException e) {}\n+    }\n+}", "timestamp": 1239136871, "metainfo": ""}