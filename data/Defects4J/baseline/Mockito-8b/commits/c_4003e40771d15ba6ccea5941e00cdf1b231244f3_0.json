{"sha": "4003e40771d15ba6ccea5941e00cdf1b231244f3", "log": "Added synchronization on instantiation of transient fields to guard thread safety", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n-\t    instantiateFieldsIfNeeded();\n+        instantiateMockitoCoreIfNeeded();\n+        instantiateDelegateIfNeeded();\n         if (!mockitoCore.isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n         return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n-\tprivate void instantiateFieldsIfNeeded() {\n-\t\tif (mockitoCore == null) {\n-\t\t\tmockitoCore = new MockitoCore();\n-\t\t}\n-\t\tif (delegate == null) {\n-\t\t\tdelegate = new ReturnsEmptyValues();\n-\t\t}\n-\t}\n+    private synchronized void instantiateMockitoCoreIfNeeded() {\n+        if (mockitoCore == null) {\n+            mockitoCore = new MockitoCore();\n+        }\n+    }\n \n-\tprivate Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n+    private synchronized void instantiateDelegateIfNeeded() {\n+        if (delegate == null) {\n+            delegate = new ReturnsEmptyValues();\n+        }\n+    }\n+\n+    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n ", "timestamp": 1389489665, "metainfo": ""}