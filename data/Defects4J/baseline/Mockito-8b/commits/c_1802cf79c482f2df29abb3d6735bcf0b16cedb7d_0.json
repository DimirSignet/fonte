{"sha": "1802cf79c482f2df29abb3d6735bcf0b16cedb7d", "log": "Merge pull request #87 from hughwphamill/master  Fixed DelegatingMethod.equals() so that it's easier to extend Mockito by custom verification modes", "commit": "\n--- a/src/org/mockito/internal/creation/DelegatingMethod.java\n+++ b/src/org/mockito/internal/creation/DelegatingMethod.java\n  */\n package org.mockito.internal.creation;\n \n+import org.mockito.internal.invocation.MockitoMethod;\n+\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n-\n-import org.mockito.internal.invocation.MockitoMethod;\n \n public class DelegatingMethod implements MockitoMethod {\n \n     public boolean isAbstract() {\n         return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n     }\n-    \n+\n+    /**\n+     * @return True if the input object is a DelegatingMethod which has an internal Method which is equal to the internal Method of this DelegatingMethod,\n+     * or if the input object is a Method which is equal to the internal Method of this DelegatingMethod.\n+     */\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o instanceof DelegatingMethod) {\n+            DelegatingMethod that = (DelegatingMethod) o;\n+            return method.equals(that.method);\n+        } else {\n+            return method.equals(o);\n+        }\n+    }\n+\n     @Override\n     public int hashCode() {\n-        return 1;\n-    }\n-    \n-    @Override\n-    public boolean equals(Object obj) {\n-        return method.equals(obj);\n+        return method.hashCode();\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/creation/DelegatingMethodTest.java\n+package org.mockito.internal.creation;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+import java.lang.reflect.Method;\n+\n+public class DelegatingMethodTest extends TestBase {\n+\n+    private Method someMethod, otherMethod;\n+    private DelegatingMethod delegatingMethod;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        someMethod = Something.class.getMethod(\"someMethod\", Object.class);\n+        otherMethod = Something.class.getMethod(\"otherMethod\", Object.class);\n+        delegatingMethod = new DelegatingMethod(someMethod);\n+    }\n+\n+    @Test\n+    public void equals_should_return_false_when_not_equal() throws Exception {\n+        DelegatingMethod notEqual = new DelegatingMethod(otherMethod);\n+        assertFalse(delegatingMethod.equals(notEqual));\n+    }\n+\n+    @Test\n+    public void equals_should_return_true_when_equal() throws Exception {\n+        DelegatingMethod equal = new DelegatingMethod(someMethod);\n+        assertTrue(delegatingMethod.equals(equal));\n+    }\n+\n+    @Test\n+    public void equals_should_return_true_when_self() throws Exception {\n+        assertTrue(delegatingMethod.equals(delegatingMethod));\n+    }\n+\n+    @Test\n+    public void equals_should_return_false_when_not_equal_to_method() throws Exception {\n+        assertFalse(delegatingMethod.equals(otherMethod));\n+    }\n+\n+    @Test\n+    public void equals_should_return_true_when_equal_to_method() throws Exception {\n+        assertTrue(delegatingMethod.equals(someMethod));\n+    }\n+\n+    private interface Something {\n+\n+        public Object someMethod(Object param);\n+\n+        public Object otherMethod(Object param);\n+    }\n+}\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n     MockSettings invocationListeners(InvocationListener... listeners);\n \n     /**\n-     * Sets whether this mock should only provide stubbing of methods.\n      * A stub-only mock does not record method\n      * invocations, thus saving memory but\n      * disallowing verification of invocations.\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n  *      <a href=\"#21\">21. New annotations: <code>&#064;Captor</code>, <code>&#064;Spy</code>, <code>&#064;InjectMocks</code> (Since 1.8.3) </a><br/>\n  *      <a href=\"#22\">22. Verification with timeout (Since 1.8.5) </a><br/>\n- *      <a href=\"#23\">23. (New) Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a><br/>\n- *      <a href=\"#24\">24. (New) One-liner stubs (Since 1.9.0)</a><br/>\n- *      <a href=\"#25\">25. (New) Verification ignoring stubs (Since 1.9.0)</a><br/>\n- *      <a href=\"#26\">26. (**New**) Mocking details (Since 1.9.5)</a><br/>\n- *      <a href=\"#27\">27. (**New**) Delegate calls to real instance (Since 1.9.5)</a><br/>\n- *      <a href=\"#28\">28. (**New**) <code>MockMaker</code> API (Since 1.9.5)</a><br/>\n- *      <a href=\"#29\">29. (**New**) BDD style verification (Since 1.9.8)</a><br/>\n+ *      <a href=\"#23\">23. Automatic instantiation of <code>&#064;Spies</code>, <code>&#064;InjectMocks</code> and constructor injection goodness (Since 1.9.0)</a><br/>\n+ *      <a href=\"#24\">24. One-liner stubs (Since 1.9.0)</a><br/>\n+ *      <a href=\"#25\">25. Verification ignoring stubs (Since 1.9.0)</a><br/>\n+ *      <a href=\"#26\">26. Mocking details (Since 1.9.5)</a><br/>\n+ *      <a href=\"#27\">27. Delegate calls to real instance (Since 1.9.5)</a><br/>\n+ *      <a href=\"#28\">28. <code>MockMaker</code> API (Since 1.9.5)</a><br/>\n+ *      <a href=\"#29\">29. BDD style verification (Since 1.9.8)</a><br/>\n  * </b>\n  *\n  * <p>\n  *\n  *\n  *\n- * <h3 id=\"23\">23. (New) <a class=\"meaningful_link\" href=\"#automatic_instantiation\">Automatic instantiation of <code>&#064;Spies</code>,\n+ * <h3 id=\"23\">23. <a class=\"meaningful_link\" href=\"#automatic_instantiation\">Automatic instantiation of <code>&#064;Spies</code>,\n  * <code>&#064;InjectMocks</code></a> and <a class=\"meaningful_link\" href=\"#constructor_injection\">constructor injection goodness</a> (Since 1.9.0)</h3>\n  *\n  * <p>\n  *\n  *\n  *\n- * <h3 id=\"24\">24. (New) <a class=\"meaningful_link\" href=\"#one_liner_stub\">One-liner stubs</a> (Since 1.9.0)</h3>\n+ * <h3 id=\"24\">24. <a class=\"meaningful_link\" href=\"#one_liner_stub\">One-liner stubs</a> (Since 1.9.0)</h3>\n  * <p>\n  * Mockito will now allow you to create mocks when stubbing.\n  * Basically, it allows to create a stub in one line of code.\n  *\n  *\n  *\n- * <h3 id=\"25\">25. (New) <a class=\"meaningful_link\" href=\"#ignore_stubs_verification\">Verification ignoring stubs</a> (Since 1.9.0)</h3>\n+ * <h3 id=\"25\">25. <a class=\"meaningful_link\" href=\"#ignore_stubs_verification\">Verification ignoring stubs</a> (Since 1.9.0)</h3>\n  * <p>\n  * Mockito will now allow to ignore stubbing for the sake of verification.\n  * Sometimes useful when coupled with <code>verifyNoMoreInteractions()</code> or verification <code>inOrder()</code>.\n  *\n  *\n  *\n- * <h3 id=\"26\">26. (**New**) <a class=\"meaningful_link\" href=\"#mocking_details\">Mocking details</a> (Since 1.9.5)</h3>\n+ * <h3 id=\"26\">26. <a class=\"meaningful_link\" href=\"#mocking_details\">Mocking details</a> (Since 1.9.5)</h3>\n  * <p>\n  * To identify whether a particular object is a mock or a spy:\n  * <pre class=\"code\"><code class=\"java\">\n  *\n  *\n  *\n- * <h3 id=\"27\">27. (**New**) <a class=\"meaningful_link\" href=\"#delegating_call_to_real_instance\">Delegate calls to real instance</a> (Since 1.9.5)</h3>\n+ * <h3 id=\"27\">27. <a class=\"meaningful_link\" href=\"#delegating_call_to_real_instance\">Delegate calls to real instance</a> (Since 1.9.5)</h3>\n  *\n  * <p>Useful for spies or partial mocks of objects <strong>that are difficult to mock or spy</strong> using the usual spy API.\n  * Possible use cases:\n  *\n  *\n  *\n- * <h3 id=\"28\">28. (**New**) <a class=\"meaningful_link\" href=\"#mock_maker_plugin\"><code>MockMaker</code> API</a> (Since 1.9.5)</h3>\n+ * <h3 id=\"28\">28. <a class=\"meaningful_link\" href=\"#mock_maker_plugin\"><code>MockMaker</code> API</a> (Since 1.9.5)</h3>\n  * <p>Driven by requirements and patches from Google Android guys Mockito now offers an extension point\n  *   that allows replacing the proxy generation engine. By default, Mockito uses cglib to create dynamic proxies.\n  * <p>The extension point is for advanced users that want to extend Mockito. For example, it is now possible\n  *\n  *\n  *\n- * <h3 id=\"29\">29. (**New**) <a class=\"meaningful_link\" href=\"#BDD_behavior_verification\">BDD style verification</a> (Since 1.9.8)</h3>\n+ * <h3 id=\"29\">29. <a class=\"meaningful_link\" href=\"#BDD_behavior_verification\">BDD style verification</a> (Since 1.9.8)</h3>\n  *\n  * Enables Behavior Driven Development (BDD) style verification by starting verification with the BDD <b>then</b> keyword.\n  *", "timestamp": 1411740107, "metainfo": ""}