{"sha": "6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc", "log": "Reformat", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n-import static org.mockito.Mockito.withSettings;\n-\n-import java.io.IOException;\n-import java.io.Serializable;\n import org.mockito.MockSettings;\n import org.mockito.Mockito;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import static org.mockito.Mockito.withSettings;\n \n /**\n  * Returning deep stub implementation.\n  * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n  */\n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n-    \n+\n     private static final long serialVersionUID = -7105341425736035847L;\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n     }\n \n     private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n-    \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n-    \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n+        InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n+        InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n         // matches invocation for verification\n         for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {\n-    \t\tif(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n-    \t\t\treturn stubbedInvocationMatcher.answer(invocation);\n-    \t\t}\n-\t\t}\n+            if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {\n+                return stubbedInvocationMatcher.answer(invocation);\n+            }\n+        }\n \n         // record deep stub answer\n         return recordDeepStubAnswer(newDeepStubMock(returnTypeGenericMetadata), container);", "timestamp": 1412863827, "metainfo": ""}