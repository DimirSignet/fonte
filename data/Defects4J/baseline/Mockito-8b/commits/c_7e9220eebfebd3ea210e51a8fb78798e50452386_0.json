{"sha": "7e9220eebfebd3ea210e51a8fb78798e50452386", "log": "Simplified some internal classes - one of the arguments was not really needed.", "commit": "\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n         MockSettingsImpl impl = MockSettingsImpl.class.cast(settings);\n         MockCreationSettings<T> creationSettings = impl.confirm(typeToMock);\n         T mock = mockUtil.createMock(creationSettings);\n-        mockingProgress.mockingStarted(mock, typeToMock, settings); //TODO SF review if we need to pass it\n+        mockingProgress.mockingStarted(mock, typeToMock);\n         return mock;\n     }\n     \n--- a/src/org/mockito/internal/listeners/CollectCreatedMocks.java\n+++ b/src/org/mockito/internal/listeners/CollectCreatedMocks.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.listeners;\n \n import org.mockito.MockSettings;\n         this.toBeFilled = toBeFilled;\n     }\n \n-    public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\n+    public void mockingStarted(Object mock, Class classToMock) {\n         toBeFilled.add(mock);\n     }\n }\n--- a/src/org/mockito/internal/listeners/MockingStartedListener.java\n+++ b/src/org/mockito/internal/listeners/MockingStartedListener.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.listeners;\n \n import org.mockito.MockSettings;\n @SuppressWarnings(\"unchecked\")\n public interface MockingStartedListener extends MockingProgressListener {\n     \n-    void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings);\n+    void mockingStarted(Object mock, Class classToMock);\n }\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n \n     ArgumentMatcherStorage getArgumentMatcherStorage();\n     \n-    void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings);\n+    void mockingStarted(Object mock, Class classToMock);\n \n     void setListener(MockingProgressListener listener);\n }\n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n         return argumentMatcherStorage;\n     }\n \n-    public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\n+    public void mockingStarted(Object mock, Class classToMock) {\n         if (listener != null && listener instanceof MockingStartedListener) {\n-            ((MockingStartedListener) listener).mockingStarted(mock, classToMock, mockSettings);\n+            ((MockingStartedListener) listener).mockingStarted(mock, classToMock);\n         }\n         validateMostStuff();\n     }\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n         return threadSafely().getArgumentMatcherStorage();\n     }\n     \n-    public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\n-        threadSafely().mockingStarted(mock, classToMock, mockSettings);\n+    public void mockingStarted(Object mock, Class classToMock) {\n+        threadSafely().mockingStarted(mock, classToMock);\n     }\n \n     public void setListener(MockingProgressListener listener) {\n--- a/test/org/mockito/internal/progress/MockingProgressImplTest.java\n+++ b/test/org/mockito/internal/progress/MockingProgressImplTest.java\n         mockingProgress.setListener(listener);\n \n         //when\n-        mockingProgress.mockingStarted(\"foo\", List.class, new MockSettingsImpl());\n+        mockingProgress.mockingStarted(\"foo\", List.class);\n \n         //then\n-        verify(listener).mockingStarted(eq(\"foo\"), eq(List.class), (MockSettingsImpl) notNull());\n+        verify(listener).mockingStarted(eq(\"foo\"), eq(List.class));\n     }\n \n     @Test\n         mockingProgress.setListener(null);\n \n         //then no exception is thrown:\n-        mockingProgress.mockingStarted(null, null, null);\n+        mockingProgress.mockingStarted(null, null);\n     }\n }", "timestamp": 1334523656, "metainfo": ""}