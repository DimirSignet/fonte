{"sha": "519e11ae749d78bd721e6e3adc5c231c6cca4264", "log": "Some refactoring before thinning up the Invocation implementation.", "commit": "\n--- a/src/org/mockito/internal/reporting/SmartPrinter.java\n+++ b/src/org/mockito/internal/reporting/SmartPrinter.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.reporting;\n \n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n \n /**\n  * Makes sure both wanted and actual are printed consistently (single line or multiline)\n     private final String wanted;\n     private final String actual;\n \n-    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {\n+    public SmartPrinter(InvocationMatcher wanted, Invocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {\n         PrintSettings printSettings = new PrintSettings();\n         printSettings.setMultiline(wanted.toString().contains(\"\\n\") || actual.toString().contains(\"\\n\"));\n         printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);\n--- a/test/org/mockito/internal/verification/SmartPrinterTest.java\n+++ b/test/org/mockito/internal/verification/SmartPrinterTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockitousage.IMethods;\n \n public class SmartPrinterTest extends TestBase {\n \n-    private PrintingFriendlyInvocation multi;\n-    private PrintingFriendlyInvocation shortie;\n+    private InvocationMatcher multi;\n+    private InvocationMatcher shortie;\n     @Mock private IMethods mock;\n \n     @Before\n     public void setup() throws Exception {\n         mock.varargs(\"first very long argument\", \"second very long argument\", \"another very long argument\");\n-        multi = getLastInvocation();\n-        multi.toString();\n-        \n+        multi = new InvocationMatcher(getLastInvocation());\n+\n         mock.varargs(\"short arg\");\n-        shortie = getLastInvocation();\n+        shortie = new InvocationMatcher(getLastInvocation());\n     }\n \n     @Test\n     public void shouldPrintBothInMultilinesWhenFirstIsMulti() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(multi, shortie);\n+        SmartPrinter printer = new SmartPrinter(multi, shortie.getInvocation());\n         \n         //then\n         assertContains(\"\\n\", printer.getWanted().toString());\n     @Test\n     public void shouldPrintBothInMultilinesWhenSecondIsMulti() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(shortie, multi);\n+        SmartPrinter printer = new SmartPrinter(shortie, multi.getInvocation());\n         \n         //then\n         assertContains(\"\\n\", printer.getWanted().toString());\n     @Test\n     public void shouldPrintBothInMultilinesWhenBothAreMulti() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(multi, multi);\n+        SmartPrinter printer = new SmartPrinter(multi, multi.getInvocation());\n         \n         //then\n         assertContains(\"\\n\", printer.getWanted().toString());\n     @Test\n     public void shouldPrintBothInSingleLineWhenBothAreShort() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(shortie, shortie);\n+        SmartPrinter printer = new SmartPrinter(shortie, shortie.getInvocation());\n         \n         //then\n         assertNotContains(\"\\n\", printer.getWanted().toString());", "timestamp": 1333229815, "metainfo": ""}