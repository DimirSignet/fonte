{"sha": "9ad80915fada08d8e5da0efabbf1c249ffabd28f", "log": "Added javadocs for capturing arguments  --HG-- rename : test/org/mockitousage/matchers/ArgumentCaptorTest.java => test/org/mockitousage/matchers/CapturingArgumentsTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401371", "commit": "\n--- a/src/org/mockito/Argument.java\n+++ b/src/org/mockito/Argument.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.ArgumentMatcher;\n-import org.mockito.Mockito;\n+import org.hamcrest.Description;\n import org.mockito.exceptions.Reporter;\n \n /**\n- * Use it to assert on \n+ * Use it to capture argument values for further assertions.\n+ * <p>\n+ * Mockito verifies argument values in typical java style: by using an equals() method.\n+ * This is also the recommended way of matching arguments because it makes tests clean & simple.\n+ * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n+ * For example:\n  * <pre>\n  *   Argument&lt;Person&gt; argument = new Argument&ltPerson&gt();\n- *   verify(mock).sendTo(argument.capture());\n+ *   verify(mock).doSomething(argument.capture());\n  *   assertEquals(\"John\", argument.value().getName());\n  * </pre>\n+ *\n+ * Warning: Usually, capturing arguments makes sense only with verification <b>but not</b> with stubbing.  \n  */\n+@SuppressWarnings(\"unchecked\")\n public class Argument<T> extends ArgumentMatcher<T> {\n     private LinkedList<Object> arguments = new LinkedList<Object>();\n \n \n     public T value() {\n         if (arguments.isEmpty()) {\n-            new Reporter().argumentValueNotYetCaptured();\n+            new Reporter().noArgumentValueWasCaptured();\n         } else {\n-            // TODO: after 1.7 nice instanceof check here?\n             return (T) arguments.getLast();\n         }\n         return (T) arguments;\n     public List<T> allValues() {\n         return (List) arguments;\n     }\n+    \n+    @Override\n+    public void describeTo(Description description) {\n+        description.appendText(\"<Capturing argument>\");\n+    }\n }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 ));\n     }\n \n-    public void argumentValueNotYetCaptured() {\n-        throw new MockitoException(join(\n-                \"Argument value not yet captured!\",\n+    public void noArgumentValueWasCaptured() {\n+        throw new MockitoException(join(\n+                \"No argument value was captured!\",\n+                \"You might have forgotten to use argument.capture() in verify()...\",\n+                \"...or you used capture() in stubbing but stubbed method was not called.\",\n+                \"Be aware that it is recommended to use capture() only with verify()\",\n+                \"\",\n                 \"Examples of correct argument capturing:\",\n                 \"    Argument<Person> argument = new Argument<Person>();\",\n-                \"    verify(mock).sendTo(argument.capture());\",\n+                \"    verify(mock).doSomething(argument.capture());\",\n                 \"    assertEquals(\\\"John\\\", argument.value().getName());\",\n                 \"\"\n                 ));\n     }\n-}\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.Argument;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class CapturingArgumentsTest extends TestBase {\n+\n+    class Person {\n+\n+        private final Integer age;\n+\n+        public Person(Integer age) {\n+            this.age = age;\n+        }\n+\n+        public int getAge() {\n+            return age;\n+        }\n+    }\n+    \n+    class Emailer {\n+     \n+        private EmailService service;\n+        \n+        public Emailer(EmailService service) {\n+            this.service = service;\n+        }\n+\n+        public void email(Integer ... personId) {\n+            for (Integer i : personId) {\n+                Person person = new Person(i);\n+                service.sendEmailTo(person);\n+            }\n+        }\n+    }\n+    \n+    interface EmailService {\n+        boolean sendEmailTo(Person person);\n+    }\n+\n+    EmailService emailService = mock(EmailService.class);\n+    Emailer emailer = new Emailer(emailService);\n+\n+    @Test\n+    public void shouldAllowAssertionsOnCapturedArgument() {\n+        //when\n+        emailer.email(12);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService).sendEmailTo(argument.capture());\n+        \n+        assertEquals(12, argument.value().getAge());\n+    }\n+    \n+    @Test\n+    public void shouldAllowAssertionsOnAllCapturedArguments() {\n+        //when\n+        emailer.email(11, 12);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n+        List<Person> allValues = argument.allValues();\n+        \n+        assertEquals(11, allValues.get(0).getAge());\n+        assertEquals(12, allValues.get(1).getAge());\n+    }\n+    \n+    @Test\n+    public void shouldAllowAssertionsOnLastArgument() {\n+        //when\n+        emailer.email(11, 12, 13);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n+        \n+        assertEquals(13, argument.value().getAge());\n+    }\n+    \n+    @Test\n+    public void shouldAllowAssertionsOnCapturedNull() {\n+        //when\n+        emailService.sendEmailTo(null);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService).sendEmailTo(argument.capture());\n+        assertEquals(null, argument.value());\n+    }\n+    \n+    @Test\n+    public void shouldAllowCapturingForStubbing() {\n+        //given\n+        Argument<Person> argument = new Argument<Person>();\n+        when(emailService.sendEmailTo(argument.capture())).thenReturn(false);\n+        \n+        //when\n+        emailService.sendEmailTo(new Person(10));\n+        \n+        //then\n+        assertEquals(10, argument.value().getAge());\n+    }\n+    \n+    @Test\n+    public void shouldSaySomethingSmartWhenMisused() {\n+        Argument<Person> argument = new Argument<Person>();\n+        try {\n+            argument.value();\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+}", "timestamp": 1241130328, "metainfo": ""}