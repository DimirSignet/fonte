{"sha": "a5e2b6909035f673a365a3b5cf3a6cf83a270920", "log": "Added code that guards from misusing extraInterfaces()  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401420", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"and you passed the same very interface to the extraInterfaces()\"\n         ));\n     }\n+\n+    public void extraInterfacesRequiresAtLeastOneInterface() {\n+        throw new MockitoException(join(\n+                \"extraInterfaces() requires at least one interface.\"\n+        ));\n+    }\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n     private Object spiedInstance;\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n+        if (extraInterfaces == null || extraInterfaces.length == 0) {\n+            new Reporter().extraInterfacesRequiresAtLeastOneInterface();\n+        }\n+            \n         for (Class<?> i : extraInterfaces) {\n             if (i == null) {\n                 new Reporter().extraInterfacesDoesNotAcceptNullParameters();\n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n @SuppressWarnings(\"unchecked\")\n public class MockSettingsImplTest extends TestBase {\n \n-    @Test\n+    private MockSettingsImpl mockSettingsImpl = new MockSettingsImpl();\n+\n+    @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullInterface() {\n-        try {\n-            //when\n-            new MockSettingsImpl().extraInterfaces(List.class, null);\n-            fail();\n-            //then\n-        } catch (MockitoException e) {}\n+        mockSettingsImpl.extraInterfaces(List.class, null);\n     }\n     \n-    @Test\n+    @Test(expected=MockitoException.class)\n     public void shouldNotAllowNonInterfaces() {\n-        try {\n-            //when\n-            new MockSettingsImpl().extraInterfaces(List.class, LinkedList.class);\n-            fail();\n-            //then\n-        } catch (MockitoException e) {}\n+        mockSettingsImpl.extraInterfaces(List.class, LinkedList.class);\n     }\n     \n-    @Test\n+    @Test(expected=MockitoException.class)\n     public void shouldNotAllowUsingTheSameInterfaceAsExtra() {\n-        try {\n-            //when\n-            new MockSettingsImpl().extraInterfaces(List.class, LinkedList.class);\n-            fail();\n-            //then\n-        } catch (MockitoException e) {}\n+        mockSettingsImpl.extraInterfaces(List.class, LinkedList.class);\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowEmptyExtraInterfaces() {\n+        mockSettingsImpl.extraInterfaces();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowNullArrayOfExtraInterfaces() {\n+        mockSettingsImpl.extraInterfaces((Class[]) null);\n     }\n     \n     @Test\n     public void shouldAllowMultipleInterfaces() {\n-        //given\n-        MockSettingsImpl settings = new MockSettingsImpl();\n-        \n         //when\n-        settings.extraInterfaces(List.class, Set.class);\n+        mockSettingsImpl.extraInterfaces(List.class, Set.class);\n         \n         //then\n-        assertEquals(List.class, settings.getExtraInterfaces()[0]);\n-        assertEquals(Set.class, settings.getExtraInterfaces()[1]);\n+        assertEquals(List.class, mockSettingsImpl.getExtraInterfaces()[0]);\n+        assertEquals(Set.class, mockSettingsImpl.getExtraInterfaces()[1]);\n     }\n }\n--- a/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n+++ b/test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java\n     }\n     \n     @Test\n+    public void shouldScreamWhenNoArgsPassed() {\n+        try {\n+            //when\n+            mock(Foo.class, configureWith().extraInterfaces());\n+            fail();\n+        } catch (MockitoException e) {\n+            //then\n+            assertContains(\"extraInterfaces() requires at least one interface\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldScreamWhenNullPassedInsteadOfAnArray() {\n+        try {\n+            //when\n+            mock(Foo.class, configureWith().extraInterfaces((Class[]) null));\n+            fail();\n+        } catch (MockitoException e) {\n+            //then\n+            assertContains(\"extraInterfaces() requires at least one interface\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n     public void shouldScreamWhenNonInterfacePassed() {\n         try {\n             //when\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n     public void shouldScreamWhenExtraIsTheSame() {\n         mock(IMethods.class, configureWith().extraInterfaces(IMethods.class));\n     }\n+    \n+    @Test\n+    public void shouldScreamWhenExtraInterfacesEmpty() {\n+        mock(IMethods.class, configureWith().extraInterfaces());\n+    }\n+    \n+    @Test\n+    public void shouldScreamWhenExtraInterfacesIsANullArray() {\n+        mock(IMethods.class, configureWith().extraInterfaces((Class[]) null));\n+    }\n }", "timestamp": 1242077279, "metainfo": ""}