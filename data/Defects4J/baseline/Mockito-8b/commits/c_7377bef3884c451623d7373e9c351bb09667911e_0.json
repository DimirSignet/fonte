{"sha": "7377bef3884c451623d7373e9c351bb09667911e", "log": "Started refactoring verifiers. Step I  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40923", "commit": "\n--- a/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n-        if (!mode.missingMethodInOrderMode()) {\n-            return;\n-        }\n-        \n         List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n         \n         if (!chunk.isEmpty()) {\n             reporter.wantedButNotInvokedInOrder(wanted, previousInOrder, previousInOrder.getStackTrace());\n         }\n     }\n+\n+    public boolean appliesTo(VerificationModeImpl mode) {\n+        return mode.missingMethodInOrderMode();\n+    }\n }\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n+    \n+    public boolean appliesTo(VerificationModeImpl mode) {\n+        return mode.missingMethodMode();\n+    }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n-        if (!mode.missingMethodMode()) {\n-            return;\n-        }\n-        \n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n         if (actualInvocations.isEmpty()) {\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n+    \n+    public boolean appliesTo(VerificationModeImpl mode) {\n+        return !mode.explicitMode() && !mode.atLeastMode();\n+    }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n-        if (mode.explicitMode() || mode.atLeastMode()) {\n-            return;\n-        }\n-\n         Invocation unverified = finder.findFirstUnverified(invocations);\n         if (unverified != null) {\n             reporter.noMoreInteractionsWanted(unverified, unverified.getStackTrace());\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n+    \n+    public boolean appliesTo(VerificationModeImpl mode) {\n+        return mode.inOrderMode();\n+    }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n-        if (!mode.inOrderMode()) {\n-            return;\n-        }\n-        \n         List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode);\n         \n         boolean noMatchFound = chunk.size() == 0;\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n         this.finder = finder;\n     }\n     \n+    public boolean appliesTo(VerificationModeImpl mode) {\n+        return mode.exactNumberOfInvocationsMode();\n+    }\n+    \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n-        if (!mode.exactNumberOfInvocationsMode()) {\n-            return;\n-        }\n-        \n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n         int actualCount = actualInvocations.size();\n--- a/src/org/mockito/internal/verification/Verifier.java\n+++ b/src/org/mockito/internal/verification/Verifier.java\n \n public interface Verifier {\n     void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode);\n+\n+    boolean appliesTo(VerificationModeImpl mode);\n }\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n         }\n \n         for (Verifier verifier : verifiers) {\n-            verifier.verify(invocations, wanted, mode);\n+            if (verifier.appliesTo(mode)) {\n+                verifier.verify(invocations, wanted, mode);\n+            }\n         }\n     }\n }\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java\n \n     @Test\n     public void shouldNeverVerifyIfModeIsNotMissingInvocationInOrderMode() throws Exception {\n-        verifier.verify(null, null, atLeastOnce());\n+        assertFalse(verifier.appliesTo(atLeastOnce()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n     \n     @Test\n     public void shouldNeverVerifyWhenModeIsNotMissingMethodMode() {\n-        verifier.verify(null, null, noMoreInteractions());\n+        assertFalse(verifier.appliesTo(noMoreInteractions()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n     \n     @Test\n     public void shouldNeverVerifyWhenVerificationIsExplicit() throws Exception {\n-        verifier.verify(null, null, VerificationModeImpl.times(1));\n+        assertFalse(verifier.appliesTo(VerificationModeImpl.times(1)));\n     }\n \n     @Test\n     public void shouldNeverVerifyWhenVerificationIsInAtLeastMode() throws Exception {\n-        verifier.verify(null, null, VerificationModeImpl.atLeastOnce());\n+        assertFalse(verifier.appliesTo(VerificationModeImpl.atLeastOnce()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java\n     \n     @Test\n     public void shouldNeverVerifyIfModeIsNotInOrder() throws Exception {\n-        verifier.verify(null, wanted, atLeastOnce());\n+        assertFalse(verifier.appliesTo(atLeastOnce()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n \n     @Test\n     public void shouldNeverVerifyWhenNotModeIsInOrder() throws Exception {\n-        verifier.verify(null, null, new VerificationModeBuilder().inOrder());\n+        assertFalse(verifier.appliesTo(new VerificationModeBuilder().inOrder()));\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n             this.wanted = wanted;\n             this.mode = mode;\n         }\n+        @Override\n+        public boolean appliesTo(VerificationModeImpl mode) {\n+            return true;\n+        }\n     }\n }", "timestamp": 1223477427, "metainfo": ""}