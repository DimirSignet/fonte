{"sha": "5182cbe6bb910efbe5de43d3c3648d8026089b59", "log": "Tuned the javadocs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401689", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#11\">11. Stubbing with callbacks </a><br/>\n  *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids </a><br/>\n  *      <a href=\"#13\">13. Spying on real objects </a><br/>\n- *      <a href=\"#14\">14. Changing default return values of unstubbed invocations </a><br/>\n- *      <a href=\"#15\">15. (**New**) Capturing arguments for further assertions</a><br/>\n- *      <a href=\"#16\">16. (**New**) Real partial mocks</a><br/>\n- *      <a href=\"#17\">17. (**New**) Resetting mocks</a><br/>\n- *      <a href=\"#18\">18. (**New**) Troubleshooting & validating framework usage</a><br/>\n- *      <a href=\"#19\">19. (**New**) Aliases for behavior driven development</a><br/>\n- *      <a href=\"#20\">20. (**New**) Serializable mocks</a><br/>\n+ *      <a href=\"#14\">14. (Since 1.7) Changing default return values of unstubbed invocations </a><br/>\n+ *      <a href=\"#15\">15. (Since 1.8.0) Capturing arguments for further assertions</a><br/>\n+ *      <a href=\"#16\">16. (Since 1.8.0) Real partial mocks</a><br/>\n+ *      <a href=\"#17\">17. (Since 1.8.0) Resetting mocks</a><br/>\n+ *      <a href=\"#18\">18. (Since 1.8.0) Troubleshooting & validating framework usage</a><br/>\n+ *      <a href=\"#19\">19. (Since 1.8.0) Aliases for behavior driven development</a><br/>\n+ *      <a href=\"#20\">20. (**New** since 1.8.1) Serializable mocks</a><br/>\n  * </b>\n  * \n  * <p>\n  * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n  * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n  * \n- * <h3 id=\"14\">14. Changing default return values of unstubbed invocations</h3>\n+ * <h3 id=\"14\">14. (Since 1.7) Changing default return values of unstubbed invocations</h3>\n  * \n  * You can create a mock with specified strategy for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n  * <p>\n  * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n- * <h3 id=\"15\">15. (**New**) Capturing arguments for further assertions</h3>\n+ * <h3 id=\"15\">15. (Since 1.8.0) Capturing arguments for further assertions</h3>\n  * \n  * Mockito verifies argument values in natural java style: by using an equals() method.\n  * This is also the recommended way of matching arguments because it makes tests clean & simple.\n  * </ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n  * \n- * <h3 id=\"16\">16. (**New**) Real partial mocks</h3>\n+ * <h3 id=\"16\">16. (Since 1.8.0) Real partial mocks</h3>\n  *  \n  *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n  *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n  *  \n- * <h3 id=\"17\">17. (**New**) Resetting mocks</h3>\n+ * <h3 id=\"17\">17. (Since 1.8.0) Resetting mocks</h3>\n  *  \n  * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n  * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n  *   //at this point the mock forgot any interactions & stubbing\n  * </pre>\n  *  \n- * <h3 id=\"18\">18. (**New**) Troubleshooting & validating framework usage</h3>\n+ * <h3 id=\"18\">18. (Since 1.8.0) Troubleshooting & validating framework usage</h3>\n  * \n  * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n  * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n  * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. \n  * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n  * \n- * <h3 id=\"19\">19. (**New**) Aliases for behavior driven development</h3>\n+ * <h3 id=\"19\">19. (Since 1.8.0) Aliases for behavior driven development</h3>\n  * \n  * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.\n  * This is exactly how we write our tests and we warmly encourage you to do so!\n  * }  \n  * </pre>\n  * \n- * <h3 id=\"20\">20. (**New**) Serializable mocks</h3>\n+ * <h3 id=\"20\">20. (**New** since 1.8.1) Serializable mocks</h3>\n  * \n  * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n  * <p>", "timestamp": 1257942948, "metainfo": ""}