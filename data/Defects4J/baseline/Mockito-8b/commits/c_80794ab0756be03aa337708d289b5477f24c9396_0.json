{"sha": "80794ab0756be03aa337708d289b5477f24c9396", "log": "merged two tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4094", "commit": "\n--- a/test/org/mockito/exceptions/MockitoErrorTest.java\n+++ b/test/org/mockito/exceptions/MockitoErrorTest.java\n package org.mockito.exceptions;\n \n-import org.junit.*;\n-import static org.mockito.util.ExtraMatchers.*;\n+import static org.junit.Assert.*;\n \n-import static org.junit.Assert.*;\n+import org.junit.Test;\n \n public class MockitoErrorTest {\n \n--- a/test/org/mockito/usage/InvalidUsageTest.java\n+++ b/test/org/mockito/usage/InvalidUsageTest.java\n import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n \n-import java.util.List;\n+import java.util.*;\n \n import org.junit.*;\n+import org.mockito.Strictly;\n import org.mockito.exceptions.*;\n import org.mockito.internal.StateResetter;\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageTest {\n \n-    private List mock;\n+    private LinkedList mock;\n+    private LinkedList mockTwo;\n \n     @Before\n     @After\n     public void resetState() {\n         StateResetter.reset();\n-        mock = mock(List.class);\n+        mock = mock(LinkedList.class);\n+        mockTwo = mock(LinkedList.class);\n     }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldRequireArgumentsWhenVerifyingNoMoreInteractions() {\n+        verifyNoMoreInteractions();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldRequireArgumentsWhenVerifyingZeroInteractions() {\n+        verifyZeroInteractions();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotCreateStrictlyWithoutMocks() {\n+        createStrictOrderVerifier();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotVerifyStrictlyUnfamilarMocks() {\n+        Strictly strictly = createStrictOrderVerifier(mock);\n+        strictly.verify(mockTwo).clear();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n+        stub(mock.add(\"monkey island\")).andThrows(new Exception());\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowSettingNullThrowable() throws Exception {\n+        stub(mock.add(\"monkey island\")).andThrows(null);\n+    }    \n \n     @Test(expected=MissingMethodInvocationException.class)\n     public void shouldDetectStubbingWithoutMethodCallOnMock() {", "timestamp": 1196355158, "metainfo": ""}