{"sha": "9f532870b51bcdc52717bc786660040da9f6954b", "log": "Added basic support for verification within timeout. Useful for concurrent testing.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401967", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.MockitoDebuggerImpl;\n-import org.mockito.internal.stubbing.answers.*;\n-import org.mockito.internal.stubbing.defaultanswers.*;\n+import org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter;\n+import org.mockito.internal.stubbing.answers.CallsRealMethods;\n+import org.mockito.internal.stubbing.answers.DoesNothing;\n+import org.mockito.internal.stubbing.answers.Returns;\n+import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.runners.MockitoJUnitRunner;\n-import org.mockito.stubbing.*;\n+import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n+import org.mockito.stubbing.Stubber;\n+import org.mockito.stubbing.VoidMethodStubbable;\n+import org.mockito.verification.FluentVerificationMode;\n+import org.mockito.verification.Timeout;\n import org.mockito.verification.VerificationMode;\n \n /**\n     }\n     \n     /**\n+     * Allows verifying with timeout. May be useful for testing concurrency.\n+     * <pre>\n+     *   //passes when someMethod() is called within given time span \n+     *   verify(mock, timeout(100)).someMethod();\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @param millis - time span in millis\n+     * \n+     * @return verification mode\n+     */\n+    public static FluentVerificationMode timeout(int millis) {\n+        return new Timeout(millis, VerificationModeFactory.atLeastOnce());\n+    }    \n+    \n+    /**\n      * Alias to times(0), see {@link Mockito#times(int)}\n      * <p>\n      * Verifies that interaction did not happen. E.g:\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest\n             if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n-                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n+                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n             }\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n                 if (mock == null) {\n                     reporter.nullPassedToVerifyNoMoreInteractions();\n                 }\n-                List<Invocation> invocations = mockUtil.getMockHandler(mock).getInvocationContainer().getInvocations();\n+                InvocationContainer invocations = mockUtil.getMockHandler(mock).getInvocationContainer();\n                 VerificationDataImpl data = new VerificationDataImpl(invocations, null);\n                 VerificationModeFactory.noMoreInteractions().verify(data);\n             } catch (NotAMockException e) {\n--- a/src/org/mockito/internal/verification/VerificationDataImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationDataImpl.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.verification.api.VerificationData;\n \n public class VerificationDataImpl implements VerificationData {\n \n-    private final List<Invocation> allInvocations;\n     private final InvocationMatcher wanted;\n+    private final InvocationContainer invocations;\n \n-    public VerificationDataImpl(List<Invocation> allInvocations, InvocationMatcher wanted) {\n-        this.allInvocations = allInvocations;\n+    public VerificationDataImpl(InvocationContainer invocations, InvocationMatcher wanted) {\n+        this.invocations = invocations;\n         this.wanted = wanted;\n         this.assertWantedIsVerifiable();\n     }\n \n     public List<Invocation> getAllInvocations() {\n-        return allInvocations;\n+        return invocations.getInvocations();\n     }\n \n     public InvocationMatcher getWanted() {\n--- /dev/null\n+++ b/src/org/mockito/verification/FluentVerificationMode.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.verification;\n+\n+import org.mockito.Mockito;\n+\n+/**\n+ * Similar to {@link VerificationMode} but allows combining with other modes. E.g:\n+ * \n+ * <pre>\n+ * verify(mock, timeout(100).times(5)).foo();\n+ * \n+ * verify(mock, timeout(100).never()).bar();\n+ * \n+ * verify(mock, timeout(200).atLeastOnce()).baz();\n+ * </pre>\n+ * \n+ * <p>\n+ * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}\n+ */\n+public interface FluentVerificationMode extends VerificationMode {\n+    \n+   \n+    \n+}\n--- /dev/null\n+++ b/src/org/mockito/verification/Timeout.java\n+package org.mockito.verification;\n+\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.verification.api.VerificationData;\n+\n+public class Timeout implements FluentVerificationMode {\n+\n+    private final VerificationMode delegate;\n+    private final int max;\n+    private final int treshhold;\n+\n+    public Timeout(int millis, VerificationMode delegate) {\n+        this(10, millis, delegate);\n+    }\n+\n+    Timeout(int treshhold, int millis, VerificationMode delegate) {\n+        this.treshhold = treshhold;\n+        this.max = millis;\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void verify(VerificationData data) {\n+        int soFar = 0;\n+        MockitoAssertionError error = null;\n+        while (soFar <= max) {\n+            try {\n+                delegate.verify(data);\n+                return;\n+            } catch (MockitoAssertionError e) {\n+                error = e;\n+                soFar += treshhold;\n+                sleep(treshhold);\n+            }\n+        }\n+        if (error != null) {\n+            throw error;\n+        }\n+    }\n+\n+    private void sleep(int sleep) {\n+        try {\n+            Thread.sleep(sleep);\n+        } catch (InterruptedException ie) {\n+            // TODO\n+            throw new MockitoException(\"TODO\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/verification/TimeoutTest.java\n+package org.mockito.verification;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockito.internal.verification.concurrent.ConcurrentVerifier;\n+import org.mockitoutil.TestBase;\n+\n+public class TimeoutTest extends TestBase {\n+    \n+    @Mock ConcurrentVerifier verifier;\n+    @Mock VerificationMode mode;\n+    @Mock VerificationDataImpl data;\n+    MockitoAssertionError error = new MockitoAssertionError(\"\"); \n+\n+    @Test\n+    public void shouldPassWhenVerificationPasses() {\n+        Timeout t = new Timeout(1, 3, mode);\n+        \n+        doNothing().when(mode).verify(data);\n+        \n+        t.verify(data);\n+    }\n+    \n+    @Test\n+    public void shouldFailBecauseVerificationFails() {\n+        Timeout t = new Timeout(1, 2, mode);\n+        \n+        doThrow(error).\n+        doThrow(error).\n+        doThrow(error).        \n+        when(mode).verify(data);\n+        \n+        try {\n+            t.verify(data);\n+            fail();\n+        } catch (MockitoAssertionError e) {}\n+    }\n+    \n+    @Test\n+    public void shouldPassEvenIfFirstVerificationFails() {\n+        Timeout t = new Timeout(1, 2, mode);\n+        \n+        doThrow(error).\n+        doThrow(error).\n+        doNothing().    \n+        when(mode).verify(data);\n+        \n+        t.verify(data);\n+    }\n+\n+    @Test\n+    public void shouldTryToVerifyCorrectNumberOfTimes() {\n+        Timeout t = new Timeout(1, 4, mode);\n+        \n+        doThrow(error).when(mode).verify(data);\n+        \n+        try {\n+            t.verify(data);\n+        } catch (MockitoAssertionError e) {};\n+        \n+        verify(mode, times(5)).verify(data);\n+    }\n+}\n--- a/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n+++ b/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n  */\n package org.mockitousage.verification;\n \n+import static org.mockito.Mockito.*;\n+\n+import java.util.LinkedList;\n import java.util.List;\n \n+import org.junit.After;\n import org.junit.Test;\n import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class VerificationWithTimeoutTest extends TestBase {\n \n-    @Mock private List mock;\n+    List exceptions = new LinkedList();\n     \n+    @After\n+    public void after() {\n+        //making sure there are no threading related exceptions\n+        assertTrue(exceptions.isEmpty());\n+        exceptions.clear();\n+    }\n+    \n+    @Mock\n+    private List mock;\n+\n     @Test\n-    public void shouldVerify() throws Exception {\n-        mock.clear();\n+    public void shouldVerifyWithTimeout() throws Exception {\n+        //given\n+        Thread t = waitAndExerciseMock(20);\n         \n-        //TODO: after 1.8 implement timeout\n-        //verify(mock, atLeastOnce().timeout(100)).clear();\n+        //when\n+        t.start();\n+        \n+        //then\n+        verify(mock, never()).clear();\n+        verify(mock, timeout(40)).clear();\n+    }\n+\n+    @Test\n+    public void shouldFailVerificationWithTimeout() throws Exception {\n+        //given\n+        Thread t = waitAndExerciseMock(40);\n+        \n+        //when\n+        t.start();\n+        \n+        //then\n+        verify(mock, never()).clear();\n+        try {\n+            verify(mock, timeout(20)).clear();\n+            fail();\n+        } catch (MockitoAssertionError e) {}\n+    }\n+    \n+//    @Test\n+//    public void shouldAllowMixingOtherModesWithTimeout() throws Exception {\n+//        //given\n+//        Thread t = waitAndExerciseMock(40);\n+//        \n+//        //when\n+//        t.start();\n+//        \n+//        //then\n+//        verify(mock, never()).clear();\n+//        try {\n+//            verify(mock, timeout(20)).clear();\n+//            fail();\n+//        } catch (MockitoAssertionError e) {}\n+//    }\n+\n+    private Thread waitAndExerciseMock(final int sleep) {\n+        Thread t = new Thread() { \n+            @Override\n+            public void run() {\n+                try {\n+                    Thread.sleep(sleep);\n+                } catch (InterruptedException e) {\n+                    exceptions.add(e);\n+                    throw new RuntimeException(e);\n+                }\n+                mock.clear();\n+            }\n+        };\n+        return t;\n     }\n }", "timestamp": 1273604445, "metainfo": ""}