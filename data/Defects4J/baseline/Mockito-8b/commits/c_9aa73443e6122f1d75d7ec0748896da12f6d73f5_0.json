{"sha": "9aa73443e6122f1d75d7ec0748896da12f6d73f5", "log": "added TODO for next release Documented newly added features  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401487", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids </a><br/>\n  *      <a href=\"#13\">13. Spying on real objects </a><br/>\n  *      <a href=\"#14\">14. Changing default return values of unstubbed invocations </a><br/>\n- *      <a href=\"#15\">15. (**New**) Capturing arguments for further assertions </a><br/>\n- *      <a href=\"#16\">16. (**New**) Troubleshooting & validating framework usage</a><br/>\n+ *      <a href=\"#15\">15. (**New**) Capturing arguments for further assertions</a><br/>\n+ *      <a href=\"#16\">16. (**New**) Real partial mocks</a><br/>\n+ *      <a href=\"#17\">17. (**New**) Resetting mocks</a><br/>\n+ *      <a href=\"#18\">18. (**New**) Troubleshooting & validating framework usage</a><br/>\n  * </b>\n  * \n  * <p>\n  * <li>you just need it to assert on argument values to complete verification</li>\n  * </ul>\n  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n+ * \n+ * <h3 id=\"16\">16. (**New**) Real partial mocks</h3>\n  *  \n- * <h3 id=\"16\">16. (**New**) Troubleshooting & validating framework usage</h3>\n+ *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n+ *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n+ *  <a href=\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\">here</a>\n+ *  <p>\n+ *  <b>Before release 1.8</b> spy() was working slightly differently, e.g. it didn't produce real partial mocks and it was confusing for some users.\n+ *  Read more about spying: <a href=\"#13\">here</a> or in javadoc for {@link Mockito#spy(Object)} method. \n+ *  <p>\n+ *  <pre>\n+ *    //you can create partial mock with spy() method:    \n+ *    List list = spy(new LinkedList());\n+ *    \n+ *    //you can enable partial mock capabilities selectively on mocks:\n+ *    Foo mock = mock(Foo.class);\n+ *    when(mock.someMethod()).thenCallRealMethod();\n+ *    //However, be sure the real implementation is 'safe'.\n+ *    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.\n+ *  </pre>\n+ *  \n+ * As usual you are going to read <b>the partial mock warning</b>:\n+ * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n+ * How does partial mock fit into this paradigm? Well, it just doesn't... \n+ * Partial mock usually means that the complexity has been moved to a different method on the same object.\n+ * In most cases, this is not the way you want to design your application.\n+ * <p>\n+ * However, there are rare cases when partial mocks come handy: \n+ * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n+ * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n+ *  \n+ * <h3 id=\"17\">17. (**New**) Resetting mocks</h3>\n+ *  \n+ * Smart Mockito users hardly use this method because they know it could be a sign of poor tests.\n+ * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n+ * <p>\n+ * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n+ * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n+ * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \n+ * There are several threads about it on mockito mailing list.\n+ * <p>\n+ * The only reason we added reset() method is to\n+ * make it possible to work with container-injected mocks.\n+ * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n+ * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n+ * <p>\n+ * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much). \n+ * <pre>\n+ *   List mock = mock(List.class);\n+ *   when(mock.size()).thenReturn(10);\n+ *   mock.add(1);\n+ *   \n+ *   reset(mock);\n+ *   //at this point the mock forgot any interactions & stubbing\n+ * </pre>\n+ *  \n+ * <h3 id=\"18\">18. (**New**) Troubleshooting & validating framework usage</h3>\n  * \n  * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: \n  * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n      * Normally, you don't need to reset your mocks, just create new mocks for each test method. \n      * <p>\n      * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n-     * First potential smell is reset() in the middle of the test method. This probably means you're testing too much.\n+     * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n      * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\". \n      * There are several threads about it on mockito mailing list.\n      * <p>\n      * make it possible to work with container-injected mocks.\n      * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n      * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n+     * <p>\n+     * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much). \n+     * <pre>\n+     *   List mock = mock(List.class);\n+     *   when(mock.size()).thenReturn(10);\n+     *   mock.add(1);\n+     *   \n+     *   reset(mock);\n+     *   //at this point the mock forgot any interactions & stubbing\n+     * </pre>\n      * \n      * @param <T>\n      * @param mocks\n--- a/src/org/mockito/internal/stubbing/BaseStubbing.java\n+++ b/src/org/mockito/internal/stubbing/BaseStubbing.java\n         return stubbing;\n     }        \n \n+    //TODO: after 1.8 fail when someone tries to do it with a mock of an Interface\n     public NewOngoingStubbing<T> thenCallRealMethod() {\n         return thenAnswer(new CallsRealMethods());\n     }", "timestamp": 1244557309, "metainfo": ""}