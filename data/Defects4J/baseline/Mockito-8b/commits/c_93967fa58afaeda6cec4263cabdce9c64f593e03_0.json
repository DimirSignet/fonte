{"sha": "93967fa58afaeda6cec4263cabdce9c64f593e03", "log": "Fixed #90 Mockito hints at the \"non public parent\" problem.  During state validation, when invalid use of the API is detected, Mockito also hints at the limitation of the mocking engine, that we don't support mocking methods that are declared on non-public parent class.", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n package org.mockito.exceptions;\n \n-import static org.mockito.internal.reporting.Pluralizer.pluralize;\n-import static org.mockito.internal.util.StringJoiner.join;\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.*;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n-import org.mockito.exceptions.verification.NeverWantedButInvoked;\n-import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.SmartNullPointerException;\n-import org.mockito.exceptions.verification.TooLittleActualInvocations;\n-import org.mockito.exceptions.verification.TooManyActualInvocations;\n-import org.mockito.exceptions.verification.VerificationInOrderFailure;\n-import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockito.exceptions.verification.*;\n import org.mockito.internal.debugging.LocationImpl;\n+import org.mockito.internal.exceptions.MockitoLimitations;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.exceptions.util.ScenarioPrinter;\n import org.mockito.internal.junit.JUnitTool;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.invocation.Location;\n import org.mockito.listeners.InvocationListener;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static org.mockito.internal.reporting.Pluralizer.pluralize;\n+import static org.mockito.internal.util.StringJoiner.join;\n \n /**\n  * Reports verification and misusing errors.\n                 \"Also, this error might show up because:\",\n                 \"1. you stub either of: final/private/equals()/hashCode() methods.\",\n                 \"   Those methods *cannot* be stubbed/verified.\",\n+                \"   \" + MockitoLimitations.NON_PUBLIC_PARENT,\n                 \"2. inside when() you don't call method on mock but on some other object.\",\n-                \"3. the parent of the mocked class is not public.\",\n-                \"   It is a limitation of the mock engine.\",\n                 \"\"\n         ));\n     }\n                 \"\",\n                 \"Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.\",\n                 \"Those methods *cannot* be stubbed/verified.\",\n+                MockitoLimitations.NON_PUBLIC_PARENT,\n                 \"\"\n         ));\n \n                 \"2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.\",\n                 \"3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - \",\n                 \"   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.\",\n+                \"4. \" + MockitoLimitations.NON_PUBLIC_PARENT,\n                 \"\"\n         ));\n     }\n                 \"\",\n                 \"Also, this error might show up because you use argument matchers with methods that cannot be mocked.\",\n                 \"Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().\",\n+                MockitoLimitations.NON_PUBLIC_PARENT,\n                 \"\"\n         ));\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/MockitoLimitations.java\n+package org.mockito.internal.exceptions;\n+\n+public class MockitoLimitations {\n+\n+    public final static String NON_PUBLIC_PARENT = \"Mocking methods declared on non-public parent classes is not supported.\";\n+\n+}\n--- a/test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java\n+++ b/test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java\n import org.fest.assertions.Assertions;\n import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.Mockito;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n+import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n+import org.mockito.internal.exceptions.MockitoLimitations;\n import org.mockitoutil.TestBase;\n \n-import static org.mockito.Mockito.mock;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.*;\n \n //see bug 212\n-// @Ignore(\"needs fixing\")\n public class ParentClassNotPublicVeryWeirdBugTest extends TestBase {\n     \n     class SuperClass {\n         public boolean isValid() {\n           return false;\n         }\n+        public int arg(Object o) { return 0; }\n       }\n     \n     public class ClassForMocking extends SuperClass {\n     @Ignore(\"needs fixing\")\n     public void is_valid_mocked() {\n         ClassForMocking clazzMock = mock(ClassForMocking.class);\n-        Mockito.when(clazzMock.isValid()).thenReturn(true);\n+        when(clazzMock.isValid()).thenReturn(true);\n     }\n \n     @Test\n-    public void report_why_this_exception_happen() throws Exception {\n+    public void hints_that_parent_not_public_during_stubbing() throws Exception {\n         ClassForMocking clazzMock = mock(ClassForMocking.class);\n         try {\n-            Mockito.when(clazzMock.isValid()).thenReturn(true);\n+            when(clazzMock.isValid()).thenReturn(true);\n             fail();\n         } catch (MissingMethodInvocationException e) {\n             Assertions.assertThat(e.getMessage())\n-                    .contains(\"the parent of the mocked class is not public.\")\n-                    .contains(\"It is a limitation of the mock engine\");\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_during_stubbing_start() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        mock(List.class).clear();\n+        try {\n+            //Mockito thinks that we're stubbing void 'clear' method here and reports that boolean value cannot stub void method\n+            when(clazzMock.isValid()).thenReturn(true);\n+            fail();\n+        } catch (MockitoException e) {   //TODO SF custom exception\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_during_verify() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        verify(clazzMock).isValid();\n+        try {\n+            //Since Mockito did not see 'isValid()' method, we will report unfinished verification\n+            verify(clazzMock);\n+            fail();\n+        } catch (UnfinishedVerificationException e) {\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n+        }\n+    }\n+\n+    @Test\n+    public void hints_that_parent_not_public_when_misplaced_matchers_detected() throws Exception {\n+        ClassForMocking clazzMock = mock(ClassForMocking.class);\n+        try {\n+            //Mockito does not see 'arg()' method so the anyObject() matcher is reported as misplaced\n+            when(clazzMock.arg(anyObject())).thenReturn(0);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(MockitoLimitations.NON_PUBLIC_PARENT);\n         }\n     }\n }", "timestamp": 1411927619, "metainfo": ""}