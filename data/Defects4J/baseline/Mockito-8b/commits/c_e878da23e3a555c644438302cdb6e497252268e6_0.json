{"sha": "e878da23e3a555c644438302cdb6e497252268e6", "log": "Initial check-in for argument capturing code  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401366", "commit": "\n--- a/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n+++ b/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n \n import static org.mockito.Mockito.*;\n \n-import org.junit.Ignore;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n import org.junit.Test;\n import org.mockito.ArgumentMatcher;\n-import org.mockito.Mock;\n import org.mockito.Mockito;\n-import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class ArgumentCaptorTest extends TestBase {\n \n-    public class Capture<T> extends ArgumentMatcher<T> {\n-        private Object argument;\n+    public class Argument<T> extends ArgumentMatcher<T> {\n+        private LinkedList<Object> arguments = new LinkedList<Object>();\n \n         public boolean matches(Object argument) {\n-            this.argument = argument;\n+            this.arguments.add(argument);\n             return true;\n         }\n+        \n+        public T capture() {\n+            Mockito.argThat(this);\n+            return null;\n+        }\n \n-        public T getValue() {\n-            //TODO: after 1.7 nice instanceof check here?\n-            //TODO: capture according to what one guy wrote to the mailing list?\n-            return (T) argument;\n+        public T value() {\n+            if (arguments.isEmpty()) {\n+                assert false;\n+            } else {\n+                //TODO: after 1.7 nice instanceof check here?\n+                return (T) arguments.getLast();\n+            }\n+            return (T) arguments;\n+        }\n+        \n+        public T getLastValue() {\n+            return value();\n+        }\n+\n+        public List<T> allValues() {\n+            return (List) arguments;\n         }\n     }\n \n     class Person {\n \n-        private final int age;\n+        private final Integer age;\n \n-        public Person(int age) {\n+        public Person(Integer age) {\n             this.age = age;\n         }\n \n         }\n     }\n     \n-    class Foo {\n+    class Emailer {\n      \n-        private IMethods methods;\n+        private EmailService service;\n         \n-        public Foo(IMethods methods) {\n-            this.methods = methods;\n+        public Emailer(EmailService service) {\n+            this.service = service;\n         }\n \n-        public void bar() {\n-            Person person = new Person(12);\n-            methods.simpleMethod(person);\n+        public void email(Integer ... personId) {\n+            for (Integer i : personId) {\n+                Person person = new Person(i);\n+                service.sendEmailTo(person);\n+            }\n         }\n     }\n-\n-    private Object capture(Capture<Person> capturedArgument) {\n-        Mockito.argThat(capturedArgument);\n-        return null;\n+    \n+    interface EmailService {\n+        void sendEmailTo(Person person);\n     }\n \n-    @Mock IMethods mock;\n+    EmailService emailService = mock(EmailService.class);\n+    Emailer emailer = new Emailer(emailService);\n \n-    //TODO: after 1.7 decide on getting capture matcher into Mockito\n     @Test\n-    public void shouldUseArgumentCaptorInEasyMockStyle() {\n-        Foo foo = new Foo(mock);\n-        foo.bar();\n-        Capture<Person> capturedArgument = new Capture<Person>();\n-        verify(mock).simpleMethod(capture(capturedArgument));\n-        assertEquals(12, capturedArgument.getValue().getAge());\n+    public void shouldAllowAssertionsOnCapturedArgument() {\n+        //when\n+        emailer.email(12);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService).sendEmailTo(argument.capture());\n+        \n+        assertEquals(12, argument.value().getAge());\n     }\n     \n-    @Ignore(\"assertion idea is not for current release I guess\")\n     @Test\n-    public void shouldUseAssertor() {\n-        Foo foo = new Foo(mock);\n-        foo.bar();\n-        verify(mock).simpleMethod(argThat(new Assertion<Person>() {\n-            public void asserts(Person person) {\n-                assertEquals(12, person.getAge());\n-            }\n-        }));\n+    public void shouldAllowAssertionsOnAllCapturedArguments() {\n+        //when\n+        emailer.email(11, 12);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n+        List<Person> allValues = argument.allValues();\n+        \n+        assertEquals(11, allValues.get(0).getAge());\n+        assertEquals(12, allValues.get(1).getAge());\n     }\n     \n-    public static <T> T argThat(Assertion<T> assertion) {\n-        return null;\n+    @Test\n+    public void shouldAllowAssertionsOnLastArgument() {\n+        //when\n+        emailer.email(11, 12, 13);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n+        \n+        assertEquals(13, argument.value().getAge());\n     }\n     \n-    public interface Assertion<T> {\n-        void asserts(T object);\n+    @Test\n+    public void shouldAllowAssertionsOnCapturedNull() {\n+        //when\n+        emailService.sendEmailTo(null);\n+        \n+        //then\n+        Argument<Person> argument = new Argument<Person>();\n+        verify(emailService).sendEmailTo(argument.capture());\n+        assertEquals(null, argument.value());\n     }\n }", "timestamp": 1241113751, "metainfo": ""}