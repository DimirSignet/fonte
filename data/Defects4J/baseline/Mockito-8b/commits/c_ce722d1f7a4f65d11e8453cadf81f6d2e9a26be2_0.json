{"sha": "ce722d1f7a4f65d11e8453cadf81f6d2e9a26be2", "log": "added nicer exception message fixed build.xml removed verifyNoMoreInteractions() from strictly  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4067", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  */\n package org.mockito;\n \n-import org.mockito.exceptions.MissingMethodInvocationException;\n+import org.mockito.exceptions.*;\n import org.mockito.internal.*;\n \n @SuppressWarnings(\"unchecked\")\n     }\n \n \t/**\n-\t * <pre>\n-\t * Throws an AssertionError if any of given mocksToBeVerifiedInOrder has any unverified interaction.\n-     * \n-     * Use this method after you verified all your mocksToBeVerifiedInOrder - to make sure that nothing \n-     * else was invoked on your mocksToBeVerifiedInOrder.\n-     * \n+\t * Throws an AssertionError if any of given mocks has any unverified interaction.\n+     * <p>\n+     * Use this method after you verified all your mocks - to make sure that nothing \n+     * else was invoked on your mocks.\n+     * <p>\n      * It's a good pattern not to use this method in every test method.\n-     * Sometimes test method focuses on different behavior/interaction \n-     * and it's not necessary to call verifyNoMoreInteractions()\n-     * \n+     * Test methods should focus on different behavior/interaction \n+     * and it's not necessary to call verifyNoMoreInteractions() all the time\n+     * <p>\n      * Stubbed invocations are also treated as interactions.\n-     * \n+     * <p>\n      * Example:\n-\t * \n-\t *    <code>\n-\t *         //interactions\n-\t *         mock.doSomething();\n-\t *         mock.doSomethingUnexpected();\n-\t *         \n-\t *         //verification\n-\t *         verify(mock).doSomething();\n-\t *         \n-\t *         //throws error: 'doSomethingUnexpected()' is unexpected\n-\t *         verifyNoMoreInteractions(mock);\n-\t *    </code>\n+     * <pre>\n+     *     //interactions\n+     *     mock.doSomething();\n+     *     mock.doSomethingUnexpected();\n+     *     \n+     *     //verification\n+     *     verify(mock).doSomething();\n+     *     \n+     *     verifyNoMoreInteractions(mock);\n+     *     //oups: 'doSomethingUnexpected()' is unexpected\n \t *</pre>\n \t *\n-\t * @param mocksToBeVerifiedInOrder\n+\t * @param mocks\n \t */\n \tpublic static void verifyNoMoreInteractions(Object ... mocks) {\n+\t    assertMocksNotEmpty(mocks);\n \t    MockitoState.instance().checkForUnfinishedVerification();\n \t    for (Object mock : mocks) {\n             MockUtil.getControl(mock).verifyNoMoreInteractions();\n         }\n \t}\n+\n+    private static void assertMocksNotEmpty(Object[] mocks) {\n+        if (mocks.length == 0) {\n+            throw Exceptions.mocksHaveToBePassedAsArguments();\n+        }\n+    }\n \n     public static void verifyZeroInteractions(Object ... mocks) {\n         MockitoState.instance().checkForUnfinishedVerification();\n--- a/src/org/mockito/Strictly.java\n+++ b/src/org/mockito/Strictly.java\n \n     //TODO get rid of interface with int\n     <T> T verify(T mock, int expectedNumberOfInvocations);\n-\n-    void verifyNoMoreInteractions();\n-\n+    \n }\n--- /dev/null\n+++ b/src/org/mockito/exceptions/Exceptions.java\n+package org.mockito.exceptions;\n+\n+public class Exceptions {\n+\n+    public static MockitoException mocksHaveToBePassedAsArguments() {\n+        throw new MockitoException(\n+                    \"\\n\" +\n+                    \"verifyNoMoreInteractions() requires arguments.\" +\n+                    \"\\n\" +\n+                    \"Pass mocks that should be verified.\");\n+    }\n+}\n--- a/src/org/mockito/internal/StrictOrderVerifier.java\n+++ b/src/org/mockito/internal/StrictOrderVerifier.java\n     }\n \n     public void verifyNoMoreInteractions() {\n-    //MockitoState.instance().checkForUnfinishedVerification();\n-    //TODO not implemented yet\n+        Mockito.verifyNoMoreInteractions(mocksToBeVerifiedInOrder.toArray());\n     }\n \n     public void addMockToBeVerifiedInOrder(Object mock) {\n--- a/test/org/mockito/internal/MockFactoryTest.java\n+++ b/test/org/mockito/internal/MockFactoryTest.java\n  */\n package org.mockito.internal;\n \n-import static org.hamcrest.CoreMatchers.*;\n import static org.junit.Assert.*;\n import net.sf.cglib.proxy.Factory;\n \n         SomeInterface proxy = factory.createMock(SomeInterface.class, new MockAwareStub());\n         \n         Class superClass = proxy.getClass().getSuperclass();\n-        assertThat(superClass, equalTo(Object.class));\n+        assertEquals(Object.class, superClass);\n     }\n     \n     @Test\n         ClassWithoutConstructor proxy = factory.createMock(ClassWithoutConstructor.class, new MockAwareStub());\n         \n         Class superClass = proxy.getClass().getSuperclass();\n-        assertThat(superClass, equalTo(ClassWithoutConstructor.class));\n+        assertEquals(ClassWithoutConstructor.class, superClass);\n     }\n     \n     @Test\n     public void shouldCreateMockFromClassEvenWhenConstructorIsDodgy() throws Exception {\n         MockFactory<ClassWithDodgyConstructor> factory = new MockFactory<ClassWithDodgyConstructor>();\n         ClassWithDodgyConstructor mock = factory.createMock(ClassWithDodgyConstructor.class, new MockAwareStub());\n-        assertThat(mock, notNullValue());\n+        assertNotNull(mock);\n     }\n     \n     @Test \n--- /dev/null\n+++ b/test/org/mockito/usage/NiceMessagesOnRuntimeExceptions.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.MockitoException;\n+\n+public class NiceMessagesOnRuntimeExceptions {\n+    \n+    @Test\n+    public void shouldPrintThatRequiresArguments() {\n+        try {\n+            verifyNoMoreInteractions();\n+            fail();\n+        }\n+        catch (MockitoException e) {\n+            String expected = \n+                    \"\\n\" +\n+                    \"verifyNoMoreInteractions() requires arguments.\" +\n+                    \"\\n\" +\n+                    \"Pass mocks that should be verified.\";\n+            assertEquals(expected, e.getMessage());\n+        }\n+    }\n+}\n--- a/test/org/mockito/usage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockito/usage/verification/NoMoreInteractionsVerificationTest.java\n     }\n     \n     @Test\n-    public void shouldVerifyNoInteractions() throws Exception {\n+    public void shouldVerifyNoInteractionsAsManyTimesAsYouWant() throws Exception {\n         List mock = mock(List.class);\n \n         verifyNoMoreInteractions(mock);\n+        verifyNoMoreInteractions(mock);\n+        \n+        verifyZeroInteractions(mock);\n         verifyZeroInteractions(mock);\n     }\n     \n--- a/test/org/mockito/usage/verification/VerificationInOrderTest.java\n+++ b/test/org/mockito/usage/verification/VerificationInOrderTest.java\n         strictly.verify(list, 2).add(\"three and four\");\n         strictly.verify(map).put(\"five\", \"five\");\n         strictly.verify(set).add(\"six\");\n-        strictly.verifyNoMoreInteractions();\n+        verifyNoMoreInteractions(list, map, set);\n     } \n \n     @Test(expected = VerificationAssertionError.class)\n             fail();\n         } catch (StrictVerificationError e) {}\n     }\n+    \n+    @Test\n+    public void shouldFailOnVerifyNoMoreInteractions() {\n+        strictly.verify(list).add(\"one\");\n+        strictly.verify(map).put(\"two\", \"two\");\n+        strictly.verify(list, 2).add(\"three and four\");\n+        strictly.verify(map).put(\"five\", \"five\");\n+        try {\n+            verifyNoMoreInteractions(list, map, set);\n+            fail();\n+        } catch (VerificationAssertionError e) {}\n+    } \n }", "timestamp": 1196015955, "metainfo": ""}