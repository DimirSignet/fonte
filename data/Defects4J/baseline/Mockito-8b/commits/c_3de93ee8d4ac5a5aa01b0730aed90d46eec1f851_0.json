{"sha": "3de93ee8d4ac5a5aa01b0730aed90d46eec1f851", "log": "issue 218 : adding isNull(Class), notNull(Class), isNotNull(Class) matchers", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n \n import org.hamcrest.Matcher;\n import org.mockito.internal.matchers.*;\n import org.mockito.internal.progress.HandyReturnValues;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n     }\n \n     /**\n+     * null argument.\n+     * The class argument is provided to avoid casting.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     *\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T isNull(Class<T> clazz) {\n+        return (T) reportMatcher(Null.NULL).returnNull();\n+    }\n+\n+    /**\n      * not null argument.\n      * <p>\n      * alias to {@link Matchers#isNotNull()}\n     public static Object notNull() {\n         return reportMatcher(NotNull.NOT_NULL).returnNull();\n     }\n+\n+    /**\n+     * not null argument, not necessary of the given class.\n+     * The class argument is provided to avoid casting.\n+     * <p>\n+     * alias to {@link Matchers#isNotNull(Class)}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     *\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T notNull(Class<T> clazz) {\n+        return (T) reportMatcher(NotNull.NOT_NULL).returnNull();\n+    }\n     \n     /**\n      * not null argument.\n      */\n     public static Object isNotNull() {\n         return notNull();\n+    }\n+\n+    /**\n+     * not null argument, not necessary of the given class.\n+     * The class argument is provided to avoid casting.\n+     * <p>\n+     * alias to {@link Matchers#notNull(Class)}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     *\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T isNotNull(Class<T> clazz) {\n+        return notNull(clazz);\n     }\n \n     /**\n     private static HandyReturnValues reportMatcher(Matcher<?> matcher) {\n         return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n     }\n-}\n+}\n--- a/test/org/mockitousage/matchers/MoreMatchersTest.java\n+++ b/test/org/mockitousage/matchers/MoreMatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.LinkedList;\n \n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockitousage.IMethods;\n-import org.mockitoutil.TestBase;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n public class MoreMatchersTest extends TestBase {\n \n     @Mock private IMethods mock;\n-    \n+\n     @Test\n     public void shouldHelpOutWithUnnecessaryCasting() {\n         when(mock.objectArgMethod(any(String.class))).thenReturn(\"string\");\n-        \n+\n         assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n     }\n \n         verify(mock).simpleMethod(anyObject());\n         verify(mock).simpleMethod(any(Object.class));\n     }\n-    \n+\n     @Test\n     public void shouldHelpOutWithUnnecessaryCastingOfLists() {\n         //Below yields compiler warning:\n         //when(mock.listArgMethod(anyList())).thenReturn(\"list\");\n         when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n-        \n+\n         assertEquals(\"list\", mock.listArgMethod(new LinkedList<String>()));\n         assertEquals(\"list\", mock.listArgMethod(Collections.<String>emptyList()));\n     }\n-    \n+\n     @Test\n     public void shouldHelpOutWithUnnecessaryCastingOfSets() {\n         //Below yields compiler warning:\n         //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n         when(mock.setArgMethod(anySetOf(String.class))).thenReturn(\"set\");\n-        \n+\n         assertEquals(\"set\", mock.setArgMethod(new HashSet<String>()));\n         assertEquals(\"set\", mock.setArgMethod(Collections.<String>emptySet()));\n     }\n-    \n+\n     @Test\n     public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n         //Below yields compiler warning:\n         //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n         when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"col\");\n-        \n+\n         assertEquals(\"col\", mock.collectionArgMethod(new ArrayList<String>()));\n         assertEquals(\"col\", mock.collectionArgMethod(Collections.<String>emptyList()));\n     }\n-}\n+\n+    @Test\n+    public void shouldHelpOutWithUnnecessaryCastingOfNullityChecks() {\n+        when(mock.objectArgMethod(isNull(LinkedList.class))).thenReturn(\"string\");\n+        when(mock.objectArgMethod(notNull(LinkedList.class))).thenReturn(\"string\");\n+        when(mock.objectArgMethod(isNotNull(LinkedList.class))).thenReturn(\"string\");\n+\n+        assertEquals(\"string\", mock.objectArgMethod(null));\n+        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n+        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n+    }\n+\n+}", "timestamp": 1293473163, "metainfo": ""}