{"sha": "2697ee9d8fb36dd101fbd2da5706e5dd45654792", "log": "refactoring VerificationMode  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40191", "commit": "\n--- a/src/org/mockito/StrictOrderVerifier.java\n+++ b/src/org/mockito/StrictOrderVerifier.java\n     private final Reporter reporter = new Reporter();\n     private final List<Object> mocksToBeVerifiedSrictly = new LinkedList<Object>();\n     \n+    public void addMockToBeVerifiedStrictly(Object mock) {\n+        mocksToBeVerifiedSrictly.add(mock);\n+    }\n+    \n     public <T> T verify(T mock) {\n         return this.verify(mock, 1);\n     }\n+    \n     //TODO get rid of interface with int\n     public <T> T verify(T mock, int wantedNumberOfInvocations) {\n         return this.verify(mock, VerificationMode.strict(wantedNumberOfInvocations, mocksToBeVerifiedSrictly));\n         }\n         return Mockito.verify(mock, VerificationMode.strict(verificationMode.wantedCount(), mocksToBeVerifiedSrictly));\n     }\n-\n-    public void addMockToBeVerifiedStrictly(Object mock) {\n-        mocksToBeVerifiedSrictly.add(mock);\n-    }\n }\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n     public static VerificationMode times(int wantedNumberOfInvocations) {\n         return new VerificationMode(wantedNumberOfInvocations, Collections.emptyList());\n     }\n+\n+    public static VerificationMode strict(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedStrictly) {\n+        return new VerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedStrictly);\n+    }\n     \n     /**\n      * Don't use VerificationMode class directly. \n      */\n     public static void dont_use_this_class_directly_instead_use_static_methods_on_Mockito() {}\n     \n-    public static VerificationMode strict(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedStrictly) {\n-        return new VerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedStrictly);\n-    }\n-\n     public boolean atLeastOnceMode() {\n         return wantedInvocationCount == null;\n     }\n--- a/test/org/mockito/internal/invocation/InvocationsMarkerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsMarkerTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.mockito.internal.progress.VerificationMode.atLeastOnce;\n-import static org.mockito.internal.progress.VerificationMode.strict;\n import static org.mockito.internal.progress.VerificationMode.times;\n \n import java.util.Arrays;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.internal.progress.VerificationMode;\n+import org.mockito.internal.progress.VerificationModeBuilder;\n \n public class InvocationsMarkerTest extends RequiresValidState {\n \n     \n     @Test\n     public void shouldMarkAsVerifedStrictlyAllInvocationsFromChunk() throws Exception {\n-        VerificationMode mode = strict(null, Arrays.asList(new Object()));\n+        VerificationMode mode = new VerificationModeBuilder().strict();\n         Invocation doesntMatter = null;\n         marker.markInvocationsAsVerified(invocations, new InvocationMatcher(doesntMatter), mode);\n         \n     \n     @Test\n     public void shouldMarkAsVerifedAllInvocationsFromThirdChunk() throws Exception {\n-        VerificationMode mode = strict(null, Arrays.asList(new Object()));\n+        VerificationMode mode = new VerificationModeBuilder().strict();\n         \n         Invocation doesntMatter = null;\n         marker.markInvocationsAsVerified(invocations, new InvocationMatcher(doesntMatter), mode);\n--- /dev/null\n+++ b/test/org/mockito/internal/progress/VerificationModeBuilder.java\n+package org.mockito.internal.progress;\n+\n+import java.util.Arrays;\n+\n+public class VerificationModeBuilder {\n+\n+    public VerificationMode strict() {\n+        return VerificationMode.strict(null, Arrays.asList(new Object()));\n+    }\n+}\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n import org.mockito.internal.invocation.InvocationsChunker;\n import org.mockito.internal.invocation.InvocationsMarker;\n import org.mockito.internal.progress.VerificationMode;\n+import org.mockito.internal.progress.VerificationModeBuilder;\n \n public class VerifyingRecorderTest extends RequiresValidState {\n     \n     public void shouldVerifyStrictly() {\n         recorder.recordInvocation(simpleMethod);\n         \n-        VerificationMode mode = VerificationMode.strict(10, Arrays.<Object>asList(\"mock\"));\n+        VerificationMode mode = new VerificationModeBuilder().strict();\n         recorder.verify(differentMethod, mode);\n         \n         assertEquals(verifier.mode, mode);", "timestamp": 1197653957, "metainfo": ""}