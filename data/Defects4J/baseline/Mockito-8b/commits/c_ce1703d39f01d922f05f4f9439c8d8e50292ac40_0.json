{"sha": "ce1703d39f01d922f05f4f9439c8d8e50292ac40", "log": "a bit of rename job added one more test scenario  --HG-- rename : test/org/mockitousage/MockingRealObjectsTest.java => test/org/mockitousage/SpyingOnRealObjectsTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40742", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/SpyingOnRealObjectsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.verification.TooLittleActualInvocations;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class SpyingOnRealObjectsTest extends TestBase {\n+\n+    List list = new LinkedList();\n+    List spy = Mockito.spy(list);\n+    \n+    @Test\n+    public void shouldVerify() {\n+        spy.add(\"one\");\n+        spy.add(\"two\");\n+        \n+        assertEquals(\"one\", spy.get(0));\n+        assertEquals(\"two\", spy.get(1));\n+        \n+        verify(spy).add(\"one\");\n+        verify(spy).add(\"two\");\n+    }\n+    \n+    @Test\n+    public void shouldStub() {\n+        spy.add(\"one\");\n+        stub(spy.get(0))\n+            .toReturn(\"1\")\n+            .toReturn(\"1 again\");\n+               \n+        assertEquals(\"1\", spy.get(0));\n+        assertEquals(\"1 again\", spy.get(0));\n+        assertEquals(\"one\", spy.iterator().next());\n+        \n+        assertEquals(1, spy.size());\n+    }\n+    \n+    @Test\n+    public void shouldAllowOverridingStubs() {\n+        stub(spy.contains(anyObject())).toReturn(true);\n+        stub(spy.contains(\"foo\")).toReturn(false);\n+        \n+        assertTrue(spy.contains(\"bar\"));\n+        assertFalse(spy.contains(\"foo\"));\n+    }\n+    \n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void shouldStubVoid() {\n+        stubVoid(spy)\n+            .toReturn()\n+            .toThrow(new RuntimeException())\n+            .on().clear();\n+\n+        spy.add(\"one\");\n+        spy.clear();\n+        try {\n+            spy.clear();\n+            fail();\n+        } catch (RuntimeException e) {}\n+            \n+        assertEquals(1, spy.size());\n+    }\n+    \n+    @Test\n+    public void shouldStubWithDoReturnAndVerify() {\n+        doReturn(\"foo\")\n+        .doReturn(\"bar\")\n+        .when(spy).get(0);\n+        \n+        assertEquals(\"foo\", spy.get(0));\n+        assertEquals(\"bar\", spy.get(0));\n+        \n+        verify(spy, times(2)).get(0);\n+        verifyNoMoreInteractions(spy);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyInOrder() {\n+        spy.add(\"one\");\n+        spy.add(\"two\");\n+        \n+        InOrder inOrder = inOrder(spy);\n+        inOrder.verify(spy).add(\"one\");\n+        inOrder.verify(spy).add(\"two\");\n+        \n+        verifyNoMoreInteractions(spy);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyInOrderAndFail() {\n+        spy.add(\"one\");\n+        spy.add(\"two\");\n+        \n+        InOrder inOrder = inOrder(spy);\n+        inOrder.verify(spy).add(\"two\");\n+        try {\n+            inOrder.verify(spy).add(\"one\");\n+            fail();\n+        } catch (VerifcationInOrderFailure f) {}\n+    }\n+    \n+    @Test\n+    public void shouldVerifyNumberOfTimes() {\n+        spy.add(\"one\");\n+        spy.add(\"one\");\n+        \n+        verify(spy, times(2)).add(\"one\");\n+        verifyNoMoreInteractions(spy);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyNumberOfTimesAndFail() {\n+        spy.add(\"one\");\n+        spy.add(\"one\");\n+        \n+        try {\n+            verify(spy, times(3)).add(\"one\");\n+            fail();\n+        } catch (TooLittleActualInvocations e) {}\n+    }\n+    \n+    @Test\n+    public void shouldToString() {\n+        spy.add(\"foo\");\n+        assertEquals(\"[foo]\" , spy.toString());\n+    }\n+}", "timestamp": 1217102587, "metainfo": ""}