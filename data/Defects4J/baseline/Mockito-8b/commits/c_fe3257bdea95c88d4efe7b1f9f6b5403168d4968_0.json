{"sha": "fe3257bdea95c88d4efe7b1f9f6b5403168d4968", "log": "changed to Stubbable  --HG-- rename : src/org/mockito/internal/stubbing/VoidMethodStubable.java => src/org/mockito/internal/stubbing/VoidMethodStubbable.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40220", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.progress.OngoingStubbing;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.progress.VerificationMode;\n-import org.mockito.internal.stubbing.VoidMethodStubable;\n+import org.mockito.internal.stubbing.VoidMethodStubbable;\n \n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n     public static <T> OngoingStubbing<T> stub(T methodCallToStub) {\n         MOCKING_PROGRESS.stubbingStarted();\n \n-        OngoingStubbing stubable = MOCKING_PROGRESS.pullStubable();\n-        if (stubable == null) {\n+        OngoingStubbing stubbable = MOCKING_PROGRESS.pullStubbable();\n+        if (stubbable == null) {\n             REPORTER.missingMethodInvocation();\n         }\n-        return stubable;\n+        return stubbable;\n     }\n \n     public static <T> T verify(T mock) {\n         }\n     }\n \n-    public static <T> VoidMethodStubable<T> stubVoid(T mock) {\n+    public static <T> VoidMethodStubbable<T> stubVoid(T mock) {\n         MockHandler<T> handler = MockUtil.getMockHandler(mock);\n         MOCKING_PROGRESS.stubbingStarted();\n         return handler;\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.stubbing.EmptyReturnValues;\n import org.mockito.internal.stubbing.StubbedMethodSelector;\n import org.mockito.internal.stubbing.Stubber;\n-import org.mockito.internal.stubbing.VoidMethodStubable;\n+import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.verification.MissingInvocationVerifier;\n import org.mockito.internal.verification.NoMoreInvocationsVerifier;\n import org.mockito.internal.verification.NumberOfInvocationsVerifier;\n  *\n  * @param <T> type of mock object to handle\n  */\n-public class MockHandler<T> implements MockAwareInterceptor<T>, OngoingStubbing<T>, VoidMethodStubable<T>, StubbedMethodSelector<T> {\n+public class MockHandler<T> implements MockAwareInterceptor<T>, OngoingStubbing<T>, VoidMethodStubbable<T>, StubbedMethodSelector<T> {\n \n     private final VerifyingRecorder verifyingRecorder;\n     private final Stubber stubber;\n         stubber.setInvocationForPotentialStubbing(invocationMatcher);\n         verifyingRecorder.recordInvocation(invocationMatcher.getInvocation());\n \n-        mockingProgress.reportStubable(this);\n+        mockingProgress.reportStubbable(this);\n         \n         return stubber.resultFor(invocationMatcher.getInvocation());\n     }\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n @SuppressWarnings(\"unchecked\")\n public interface MockingProgress {\n \n-    void reportStubable(OngoingStubbing ongoingStubbing);\n+    void reportStubbable(OngoingStubbing ongoingStubbing);\n \n-    OngoingStubbing pullStubable();\n+    OngoingStubbing pullStubbable();\n \n     void verificationStarted(VerificationMode verificationMode);\n \n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n     private int invocationSequenceNumber = 1;\n     private boolean stubbingInProgress = false;\n \n-    public void reportStubable(OngoingStubbing ongoingStubbing) {\n+    public void reportStubbable(OngoingStubbing ongoingStubbing) {\n         this.ongoingStubbing = ongoingStubbing;\n     }\n \n-    public OngoingStubbing pullStubable() {\n+    public OngoingStubbing pullStubbable() {\n         OngoingStubbing temp = ongoingStubbing;\n         ongoingStubbing = null;\n         return temp;\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n         return mockingProgress.get();\n     }\n     \n-    public void reportStubable(OngoingStubbing ongoingStubbing) {\n-        threadSafely().reportStubable(ongoingStubbing);\n+    public void reportStubbable(OngoingStubbing ongoingStubbing) {\n+        threadSafely().reportStubbable(ongoingStubbing);\n     }\n \n-    public OngoingStubbing pullStubable() {\n-        return threadSafely().pullStubable();\n+    public OngoingStubbing pullStubbable() {\n+        return threadSafely().pullStubbable();\n     }\n     \n     public void verificationStarted(VerificationMode verify) {\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+public interface VoidMethodStubbable<T> {\n+\n+    StubbedMethodSelector<T> toThrow(Throwable throwable);\n+\n+}\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n public class MockitoTest extends RequiresValidState {\n \n     @Test\n-    public void shouldRemoveStubableFromProgressAfterStubbing() {\n+    public void shouldRemoveStubbableFromProgressAfterStubbing() {\n         List mock = Mockito.mock(List.class);\n         Mockito.stub(mock.add(\"test\")).andReturn(true);\n         \n-        assertNull(Mockito.MOCKING_PROGRESS.pullStubable());\n+        assertNull(Mockito.MOCKING_PROGRESS.pullStubbable());\n     }\n     \n     @Test(expected=NotAMockException.class)\n--- a/test/org/mockitousage/InvalidUsageTest.java\n+++ b/test/org/mockitousage/InvalidUsageTest.java\n     \n     @Test(expected=MissingMethodInvocationException.class)\n     public void shouldReportMissingMethodInvocationWhenStubbing() {\n-        stub(mock.simpleMethod()).andReturn(\"this stubbing is required to make sure Stubable is pulled\");\n+        stub(mock.simpleMethod()).andReturn(\"this stubbing is required to make sure Stubbable is pulled\");\n         stub(\"\".toString()).andReturn(\"x\");\n     }\n     ", "timestamp": 1197827325, "metainfo": ""}