{"sha": "6b79cff6fc3be51a0dfa9bba5e348eb21ecdc860", "log": "added feature of chaining consecutive return values for the same stubbed method call  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40596", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     }\n \n     private class OngoingStubbingImpl implements OngoingStubbing<T> {\n-        public void toReturn(Object value) {\n+        public OngoingStubbing<T> toReturn(Object value) {\n             verifyingRecorder.eraseLastInvocation();\n             stubber.addReturnValue(value);\n+            return new ConsecutiveStubbing();\n         }\n \n-        public void toThrow(Throwable throwable) {\n+        public OngoingStubbing<T> toThrow(Throwable throwable) {\n             verifyingRecorder.eraseLastInvocation();\n             stubber.addThrowable(throwable);\n+            return new ConsecutiveStubbing();\n+        }\n+    }\n+    \n+    private class ConsecutiveStubbing implements OngoingStubbing<T> {\n+        public OngoingStubbing<T> toReturn(Object value) {\n+            stubber.addConsecutiveReturnValue(value);\n+            return this;\n+        }\n+\n+        public OngoingStubbing<T> toThrow(Throwable throwable) {\n+            stubber.addConsecutiveThrowable(throwable);\n+            return this;\n         }\n     }\n }\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n      * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param value return value\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n      */\n-    void toReturn(T value);\n+    OngoingStubbing<T> toReturn(T value);\n \n     /**\n      * Stub mock object with throwable that will be thrown on method invocation. E.g:\n      * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param throwable to be thrown on method invocation\n+     * @return ongoingStubbing object that allows stubbing consecutive calls\n      */\n-    void toThrow(Throwable throwable);\n+    OngoingStubbing<T> toThrow(Throwable throwable);\n }\n--- a/src/org/mockito/internal/stubbing/IAnswer.java\n+++ b/src/org/mockito/internal/stubbing/IAnswer.java\n /**\n  * Used to answer expected calls.\n  * @param <T> the type to return.\n+ * //TODO should be Answer\n  */\n public interface IAnswer<T> {\n \n--- a/src/org/mockito/internal/stubbing/Result.java\n+++ b/src/org/mockito/internal/stubbing/Result.java\n import org.mockito.exceptions.base.HasStackTraceThrowableWrapper;\n import org.mockito.exceptions.base.StackTraceFilter;\n \n+//TODO name of this class is stupid\n @SuppressWarnings(\"unchecked\")\n public class Result implements IAnswer {\n \n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n  */\n package org.mockito.internal.stubbing;\n \n+import java.util.LinkedList;\n+\n import org.mockito.internal.invocation.InvocationMatcher;\n \n @SuppressWarnings(\"unchecked\")\n public class StubbedInvocationMatcher extends InvocationMatcher {\n \n-    private final IAnswer result;\n+    private final LinkedList<IAnswer> answers = new LinkedList<IAnswer>();\n     \n     public StubbedInvocationMatcher(InvocationMatcher invocation, IAnswer result) {\n         super(invocation.getInvocation(), invocation.getMatchers());\n-        this.result = result;\n+        this.answers.add(result);\n     }\n \n     public Object answer() throws Throwable {\n-        return result.answer();\n+        return answers.size() == 1 ? answers.getFirst().answer() : answers.removeFirst().answer();\n+    }\n+\n+    public void addResult(IAnswer answer) {\n+        answers.add(answer);\n     }\n     \n     @Override\n     public String toString() {\n-        return super.toString() + \" stubbed with: \" + result.toString();\n+        return super.toString() + \" stubbed with: \" + answers;\n     }\n }\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n         validateThrowable(throwable);\n         addResult(Result.createThrowResult(throwable, new StackTraceFilter()));\n     }\n-\n+    \n     private void addResult(Result result) {\n         assert invocationForStubbing != null;\n         stubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, result));\n     }\n+    \n+    public void addConsecutiveReturnValue(Object value) {\n+        stubbed.getFirst().addResult(Result.createReturnResult(value));\n+    }\n+\n+    public void addConsecutiveThrowable(Throwable throwable) {\n+        // TODO Auto-generated method stub\n+    }    \n \n     public Object resultFor(Invocation invocation) throws Throwable {\n         for (StubbedInvocationMatcher s : stubbed) {\n         \n         return false;\n     }\n-}\n+}\n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n import java.util.List;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n         assertEquals(200, mock.objectReturningMethod(200));\n         assertEquals(100, mock.objectReturningMethod(666));\n         assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n-    }\n-    \n-    @Ignore(\"prototyping new API\")\n-    @Test\n-    public void shouldReturnMultipleValues() throws Exception {\n-//        stub(mock.simpleMethod())\n-//            .toReturn(\"test\")\n-//            .andThen(\"test2\")\n-//            .andThen(null);\n     }\n     \n     @Test\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/StubbingMultipleReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stubbing;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.TestBase;\n+import org.mockito.MockitoAnnotations.Mock;\n+import org.mockitousage.IMethods;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class StubbingMultipleReturnValuesTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+   \n+    @Test\n+    public void shouldReturnMultipleValues() throws Exception {\n+        stub(mock.simpleMethod())\n+            .toReturn(\"one\")\n+            .toReturn(\"two\")\n+            .toReturn(\"three\");\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+    }\n+}", "timestamp": 1209063913, "metainfo": ""}