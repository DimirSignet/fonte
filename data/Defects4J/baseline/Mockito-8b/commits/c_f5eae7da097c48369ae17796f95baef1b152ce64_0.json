{"sha": "f5eae7da097c48369ae17796f95baef1b152ce64", "log": "Tidy-up in buildSrc - removed not needed interface.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Contribution.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Contribution.java\n package org.mockito.release.notes.vcs;\n \n import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n \n-/**\n- * Source code contribution by one single author\n- */\n-interface Contribution {\n+class Contribution implements Comparable<Contribution> {\n \n-    /**\n-     * all commits in this contribution\n-     */\n-    Collection<Commit> getCommits();\n+    //email identifies the contributor, author alias not necessarily\n+    final String authorId;\n+    final String author;\n+    final List<Commit> commits = new LinkedList<Commit>();\n \n-    /**\n-     * readable text representation of this contribution\n-     */\n-    String toText();\n+    Contribution(Commit commit) {\n+        authorId = commit.getAuthorId();\n+        author = commit.getAuthor();\n+        commits.add(commit);\n+    }\n+\n+    Contribution add(Commit commit) {\n+        assert authorId.equals(commit.getAuthorId());\n+        commits.add(commit);\n+        return this;\n+    }\n+\n+    public String toText() {\n+        return commits.size() + \": \" + author;\n+    }\n+\n+    public int compareTo(Contribution other) {\n+        return Integer.valueOf(other.getCommits().size()).compareTo(commits.size());\n+    }\n+\n+    public Collection<Commit> getCommits() {\n+        return commits;\n+    }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java\n import java.util.*;\n \n class DefaultContributionSet implements ContributionSet {\n-    private final Map<String, DefaultContribution> contributions = new HashMap<String, DefaultContribution>();\n+    private final Map<String, Contribution> contributions = new HashMap<String, Contribution>();\n     private final Collection<Commit> commits = new LinkedList<Commit>();\n     private final Predicate<Commit> ignoreCommit;\n \n             return;\n         }\n         commits.add(commit);\n-        DefaultContribution c = contributions.get(commit.getAuthorId());\n+        Contribution c = contributions.get(commit.getAuthorId());\n         if (c == null) {\n-            contributions.put(commit.getAuthorId(), new DefaultContribution(commit));\n+            contributions.put(commit.getAuthorId(), new Contribution(commit));\n         } else {\n             c.add(commit);\n         }\n         StringBuilder sb = new StringBuilder(\"* Authors: \").append(contributions.size())\n                 .append(\"\\n* Commits: \").append(commits.size());\n \n-        for (Map.Entry<String, DefaultContribution> entry : sortByValue(contributions)) {\n+        for (Map.Entry<String, Contribution> entry : sortByValue(contributions)) {\n             Contribution c = entry.getValue();\n             sb.append(\"\\n  * \").append(c.toText());\n         }", "timestamp": 1416516894, "metainfo": ""}