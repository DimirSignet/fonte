{"sha": "db1c0c1f6eae25857faa9b503e004d3d06c00867", "log": "Issue 184. If mock implements Comparable the compareTo() method should not return 0 Requires also documentation update  --HG-- rename : test/org/mockitousage/bugs/ShouldAllowInlineMockCreationTest.java => test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = 1998191268711234347L;\n+    ObjectMethodsGuru methodsGuru = new ObjectMethodsGuru();\n \n     /* (non-Javadoc)\n      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n      */\n     public Object answer(InvocationOnMock invocation) {\n-        if (new ObjectMethodsGuru().isToString(invocation.getMethod())) {\n+        if (methodsGuru.isToString(invocation.getMethod())) {\n             Object mock = invocation.getMock();\n             MockName name = new MockUtil().getMockName(mock);\n             if (name.isSurrogate()) {\n             } else {\n                 return name.toString();\n             }\n+        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n+            //see issue 184.\n+            //mocks by default should not return 0 for compareTo because they are not the same. Hence we return 1 (anything but 0 is good).\n+            //Only for compareTo() method by the Comparable interface\n+            return 1;\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n--- a/src/org/mockito/internal/util/ObjectMethodsGuru.java\n+++ b/src/org/mockito/internal/util/ObjectMethodsGuru.java\n     public boolean isHashCodeMethod(Method method) {\n         return method.getName().equals(\"hashCode\") && method.getParameterTypes().length == 0;\n     }\n+\n+    public boolean isCompareToMethod(Method method) {\n+        return Comparable.class.isAssignableFrom(method.getDeclaringClass()) && method.getName().equals(\"compareTo\")\n+                && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == method.getDeclaringClass();\n+    }\n }\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.SortedMap;\n-import java.util.SortedSet;\n-import java.util.TreeMap;\n-import java.util.TreeSet;\n+import java.util.*;\n \n import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n+import static org.mockito.Mockito.mock;\n+\n+@SuppressWarnings(\"unchecked\")\n public class ReturnsEmptyValuesTest extends TestBase {\n-    \n-    @SuppressWarnings(\"unchecked\")\n+\n+    ReturnsEmptyValues values = new ReturnsEmptyValues();\n+\n     @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n-        ReturnsEmptyValues values = new ReturnsEmptyValues();\n-        \n         assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n \n         assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n         assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n         assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n         assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n-        \n+\n         assertNull(values.returnValueFor(String.class));\n     }\n-    \n+\n     @Test public void shouldReturnPrimitive() {\n-        ReturnsEmptyValues values = new ReturnsEmptyValues();\n-        \n         assertEquals(false, values.returnValueFor(Boolean.TYPE));\n         assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n         assertEquals(0, values.returnValueFor(Byte.TYPE));\n         assertEquals(0, values.returnValueFor(Float.TYPE));\n         assertEquals(0, values.returnValueFor(Double.TYPE));\n     }\n+\n+    @Test public void shouldReturnNonZeroForCompareToMethod() {\n+        //given\n+        Date d = mock(Date.class);\n+        d.compareTo(new Date());\n+        Invocation compareTo = this.getLastInvocation();\n+\n+        //when\n+        Object result = values.answer(compareTo);\n+        \n+        //then\n+        assertTrue(result != (Object) 0);\n+    }\n+\n }\n--- a/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n+++ b/test/org/mockito/internal/util/ObjectMethodsGuruTest.java\n import org.junit.Test;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n+\n+import java.util.Date;\n \n public class ObjectMethodsGuruTest extends TestBase {\n \n         assertFalse(guru.isHashCodeMethod(IMethods.class.getMethod(\"hashCode\", String.class)));\n         assertTrue(guru.isHashCodeMethod(Object.class.getDeclaredMethod(\"hashCode\")));\n     }\n+\n+    interface HasCompareToButDoesNotImplementComparable {\n+        public int compareTo(HasCompareToButDoesNotImplementComparable other);\n+    }\n+\n+    interface HasCompare extends Comparable {\n+        public int foo(HasCompare other);\n+        public int compareTo(HasCompare other, String redHerring);\n+        public int compareTo(String redHerring);\n+        public int compareTo(HasCompare redHerring);\n+    }\n+\n+    @Test\n+    public void shouldKnowCompareToMethod() throws Exception {\n+        assertFalse(guru.isCompareToMethod(Date.class.getMethod(\"toString\")));\n+        assertFalse(guru.isCompareToMethod(HasCompare.class.getMethod(\"foo\", HasCompare.class)));\n+        assertFalse(guru.isCompareToMethod(HasCompare.class.getMethod(\"compareTo\", HasCompare.class, String.class)));\n+        assertFalse(guru.isCompareToMethod(HasCompare.class.getMethod(\"compareTo\", String.class)));\n+        assertFalse(guru.isCompareToMethod(HasCompareToButDoesNotImplementComparable.class.getDeclaredMethod(\"compareTo\", HasCompareToButDoesNotImplementComparable.class)));\n+\n+        assertTrue(guru.isCompareToMethod(HasCompare.class.getMethod(\"compareTo\", HasCompare.class)));\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import static org.mockito.Mockito.*;\n+\n+//see issue 184\n+public class ShouldMocksCompareToBeConsistentWithEqualsTest extends TestBase {\n+\n+    @Test\n+    public void shouldCompareToBeConsistentWithEquals() {\n+        //given\n+        Date today    = mock(Date.class);\n+        Date tomorrow = mock(Date.class);\n+\n+        //when\n+        Set<Date> set = new TreeSet<Date>();\n+        set.add(today);\n+        set.add(tomorrow);\n+\n+        //then\n+        assertEquals(2, set.size());\n+    }\n+\n+    @Test\n+    public void shouldAllowStubbingAndVerifyingCompareTo() {\n+        //given\n+        Date mock    = mock(Date.class);\n+        when(mock.compareTo(any(Date.class))).thenReturn(10);\n+\n+        //when\n+        mock.compareTo(new Date());\n+\n+        //then\n+        assertEquals(10, mock.compareTo(new Date()));\n+        verify(mock, atLeastOnce()).compareTo(new Date());\n+    }\n+\n+    @Test\n+    public void shouldResetNotRemoveDefaultStubbing() {\n+        //given\n+        Date mock    = mock(Date.class);\n+        reset(mock);\n+\n+        //then\n+        assertEquals(1, mock.compareTo(new Date()));\n+    }\n+}", "timestamp": 1288565614, "metainfo": ""}