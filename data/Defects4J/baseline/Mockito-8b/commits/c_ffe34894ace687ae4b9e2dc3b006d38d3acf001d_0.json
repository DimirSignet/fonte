{"sha": "ffe34894ace687ae4b9e2dc3b006d38d3acf001d", "log": "Test case for overriden methods in the interface with generics and side effect of upcasting  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4046", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/BaseClass.java\n+package org.mockito.usage.binding;\n+\n+public class BaseClass<M extends BaseMessage, D extends IBaseInteface<M>> {\n+\n+\tprivate final D object;\n+\n+\tBaseClass(D object) {\n+\t\tthis.object = object;\n+\t}\n+\n+\tpublic void print(M message) {\n+\t\tobject.print(message);\n+\t}\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/BaseMessage.java\n+package org.mockito.usage.binding;\n+\n+public class BaseMessage {\n+\tprivate String content;\n+\n+\tpublic String getContent() {\n+\t\treturn content;\n+\t}\n+\n+\tprotected void setContent(String content) {\n+\t\tthis.content = content;\n+\t}\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/ClassUseDerivedInterface.java\n+package org.mockito.usage.binding;\n+\n+public class ClassUseDerivedInterface extends BaseClass<Message, IDerivedInterface> {\n+\n+\tpublic ClassUseDerivedInterface(IDerivedInterface derivedIterfaceObject) {\n+\t    super(derivedIterfaceObject);\n+\t}\n+\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/IBaseInteface.java\n+package org.mockito.usage.binding;\n+\n+\n+public interface IBaseInteface <E extends BaseMessage>{\n+    public void print(E message);\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/IDerivedInterface.java\n+package org.mockito.usage.binding;\n+\n+public interface IDerivedInterface extends IBaseInteface<Message>{\n+    public void print(Message message);\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/ISuperDerived.java\n+package org.mockito.usage.binding;\n+\n+public interface ISuperDerived extends IBaseInteface<Message> {\n+\tpublic void print(Message Message);\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/IncorectBindingTest.java\n+package org.mockito.usage.binding;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+\n+public class IncorectBindingTest {\n+\n+\n+    @Test\n+    public void overriddenInterfaceMethod() throws Exception {\n+        IDerivedInterface mock = Mockito.mock(IDerivedInterface.class);\n+\n+        ClassUseDerivedInterface superDerived = new ClassUseDerivedInterface(mock);\n+        Message message = new Message(\"Shake it baby\");\n+\n+\n+        superDerived.print(message);\n+\n+\n+        Mockito.verify(mock).print(message);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/Message.java\n+package org.mockito.usage.binding;\n+\n+public class Message extends BaseMessage{\n+\n+\tpublic Message(String content) {\n+\t\tsetContent(content);\n+\t}\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/OverriddenIntrefaceMethodTest.java\n+package org.mockito.usage.binding;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+\n+public class OverriddenIntrefaceMethodTest {\n+\n+\n+    @Test\n+    public void virtualMethodTableBinding() throws Exception {\n+        IDerivedInterface mock = Mockito.mock(IDerivedInterface.class);\n+\n+        ClassUseDerivedInterface superDerived = new ClassUseDerivedInterface(mock);\n+        Message message = new Message(\"Shake it baby\");\n+\n+\n+        superDerived.print(message);\n+\n+        Mockito.verify(mock).print(message);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/binding/SuperClassUseSuperDerived.java\n+package org.mockito.usage.binding;\n+\n+public class SuperClassUseSuperDerived extends BaseClass<Message, IDerivedInterface> {\n+\t\n+\tpublic SuperClassUseSuperDerived(IDerivedInterface derivedIterfaceObject) {\n+\t\tsuper(derivedIterfaceObject);\n+\t}\n+\n+}", "timestamp": 1195621887, "metainfo": ""}