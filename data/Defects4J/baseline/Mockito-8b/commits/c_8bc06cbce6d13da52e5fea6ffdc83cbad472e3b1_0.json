{"sha": "8bc06cbce6d13da52e5fea6ffdc83cbad472e3b1", "log": "Release notes automation rework.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n         this.project = project;\n     }\n \n-    public String getNotes(String fromRevision, String toRevision) {\n+    public String buildNotes(String fromRevision, String toRevision) {\n         LOG.info(\"Getting release notes between {} and {}\", fromRevision, toRevision);\n \n         ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.getGradleProcessRunner(project));\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java\n /**\n  * Release notes services\n  */\n-class Notes {\n+public class Notes {\n \n     /**\n      * Release notes build based on git and GitHub.\n      * @param project the Gradle project\n      * @param authTokenEnvVar env variable name that holds the GitHub auth token\n      */\n-    NotesBuilder gitHubNotesBuilder(Project project, String authTokenEnvVar) {\n+    public static NotesBuilder gitHubNotesBuilder(Project project, String authTokenEnvVar) {\n         return new GitNotesBuilder(project, authTokenEnvVar);\n     }\n \n     /**\n      * Provides previous version information based on the release notes file\n      */\n-    PreviousVersion previousVersion(File releaseNotesFile) {\n+    public static PreviousVersion previousVersion(File releaseNotesFile) {\n         return new PreviousVersionFromFile(releaseNotesFile);\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/NotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/NotesBuilder.java\n package org.mockito.release.notes;\n \n public interface NotesBuilder {\n-\n-//    /**\n-//     * Updates release notes in specified file. The 'from' revision is extracted from the release notes file.\n-//     * The 'to' revision needs to be supplied.\n-//     *\n-//     * @param notesFile the file to update. Must contain the current version.\n-//     * @param toRevision valid git revision (can be tag name or HEAD)\n-//     */\n-//    void updateNotes(File notesFile, String toRevision);\n \n     /**\n      * Release notes text for contributions between given versions.\n      * @param fromRevision valid git revision (can be tag name or HEAD)\n      * @param toRevision valid git revision (can be tag name or HEAD)\n      */\n-    String getNotes(String fromRevision, String toRevision);\n+    String buildNotes(String fromRevision, String toRevision);\n }", "timestamp": 1416516942, "metainfo": ""}