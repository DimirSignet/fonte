{"sha": "5950ae4b34ceaefb3e44660ae8f393ff718ab6f9", "log": "Refactored MockingDetails.  Although the factory method looked sweet I'd prefer to have MockingDetails interface. It made sense to include the mockingDetails() method in the core api (Mockito class).  --HG-- rename : test/org/mockito/MockingDetailsTest.java => test/org/mockitousage/basicapi/MockingDetailsTest.java", "commit": "\n--- a/src/org/mockito/MockingDetails.java\n+++ b/src/org/mockito/MockingDetails.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n-import org.mockito.internal.util.DefaultMockingDetails;\n-import org.mockito.internal.util.MockUtil;\n-\n /**\n- * Class to inspect any object, and identify whether a particular object is either a mock or a spy.\n+ * Provides mocking information.\n+ * For example, you can identify whether a particular object is either a mock or a spy.\n  *\n  * @since 1.9.5\n  */\n-public abstract class MockingDetails {\n+public interface MockingDetails {\n     \n-\n     /**\n-     * Create a MockingDetails to inspect a particular Object.\n-     * @param toInspect the object to inspect\n-     * @return A {@link org.mockito.MockingDetails} instance.\n-     *\n-     * @since 1.9.5\n-     */\n-    public static MockingDetails of( Object toInspect ){\n-        return new DefaultMockingDetails( toInspect, new MockUtil());\n-    }\n-\n-    /**\n-     * Find out whether the object is a mock.\n+     * Informs if the object is a mock.\n      * @return true if the object is a mock or a spy.\n      *\n      * @since 1.9.5\n      */\n-    public abstract boolean isMock();\n+    boolean isMock();\n \n     /**\n-     * Find out whether the object is a spy.\n+     * Informs if the object is a spy.\n      * @return true if the object is a spy.\n      *\n      * @since 1.9.5\n      */\n-    public abstract boolean isSpy();\n-}\n-\n+    boolean isSpy();\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n  *\n  * <h3 id=\"26\">26. (**New**) <a class=\"meaningful_link\" href=\"#mocking_details\">Mocking details</a> (Since 1.9.5)</h3>\n  * <p>\n- * To identify whether a particular object is a mock or a spy, you can write\n- * <pre class=\"code\"><code class=\"java\">\n- *     MockingDetails.of( someObject ).isMock();\n- *     MockingDetails.of( someObject ).isSpy();\n+ * To identify whether a particular object is a mock or a spy:\n+ * <pre class=\"code\"><code class=\"java\">\n+ *     Mockito.mockingDetails(someObject).isMock();\n+ *     Mockito.mockingDetails(someObject).isSpy();\n  * </code></pre>\n  * Both the {@link MockingDetails#isMock} and {@link MockingDetails#isSpy()} methods return <code>boolean</code>.\n- * As a spy is considered a special kind of mock, <code>isMock()</code> returns true if the object is a spy.\n+ * As a spy is just a different kind of mock, <code>isMock()</code> returns true if the object is a spy.\n+ * In future Mockito versions MockingDetails may grow and provide other useful information about the mock,\n+ * e.g. invocations, stubbing info, etc.\n  *\n  *\n  *\n         return mock(classToMock, withSettings()\n                 .name(name)\n                 .defaultAnswer(RETURNS_DEFAULTS));\n+    }\n+\n+    /**\n+     * Returns a MockingDetails instance that enables inspecting a particular object for Mockito related information.\n+     * Can be used to find out if given object is a Mockito mock\n+     * or to find out if a given mock is a spy or mock.\n+     * <p>\n+     * In future Mockito versions MockingDetails may grow and provide other useful information about the mock,\n+     * e.g. invocations, stubbing info, etc.\n+     *\n+     * @param toInspect - object to inspect\n+     * @return A {@link org.mockito.MockingDetails} instance.\n+     * @since 1.9.5\n+     */\n+    public static MockingDetails mockingDetails(Object toInspect) {\n+        return MOCKITO_CORE.mockingDetails(toInspect);\n     }\n     \n     /**\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal;\n \n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n+import org.mockito.MockingDetails;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n+import org.mockito.internal.util.DefaultMockingDetails;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n         }\n         return mocks;\n     }\n+\n+    public MockingDetails mockingDetails(Object toInspect) {\n+        return new DefaultMockingDetails(toInspect, new MockUtil());\n+    }\n }\n--- a/src/org/mockito/internal/util/DefaultMockingDetails.java\n+++ b/src/org/mockito/internal/util/DefaultMockingDetails.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util;\n \n import org.mockito.MockingDetails;\n  * Class to inspect any object, and identify whether a particular object is either a mock or a spy.  This is\n  * a wrapper for {@link org.mockito.internal.util.MockUtil}.\n  */\n-public class DefaultMockingDetails extends MockingDetails {\n+public class DefaultMockingDetails implements MockingDetails {\n \n     private Object toInspect;\n     private MockUtil delegate;\n--- /dev/null\n+++ b/test/org/mockitousage/basicapi/MockingDetailsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.basicapi;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+public class MockingDetailsTest {\n+    \n+    private static class TestClass{\n+    }\n+\n+    @Mock\n+    TestClass mock1;\n+    @Spy\n+    TestClass spy1;\n+    TestClass mock2;\n+    TestClass spy2;\n+    TestClass nonMock;\n+    \n+    @Before\n+    public void setUp(){\n+        initMocks( this );\n+        mock2 = mock( TestClass.class );\n+        spy2 = spy( new TestClass());\n+        nonMock = new TestClass();\n+    }\n+    \n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForAnnotatedMock(){\n+        assertTrue(mockingDetails(mock1).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForDirectMock(){\n+        assertTrue(mockingDetails(mock2).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForAnnotatedSpy(){\n+        assertTrue(mockingDetails(spy1).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForDirectSpy(){\n+\n+        assertTrue(mockingDetails(spy2).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsMock_ForNonMock(){\n+        assertFalse(mockingDetails(nonMock).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsSpy_ForAnnotatedMock(){\n+        assertFalse(mockingDetails(mock1).isSpy());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsSpy_ForDirectMock(){\n+        assertFalse(mockingDetails(mock2).isSpy());\n+    }\n+\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsSpy_ForAnnotatedSpy(){\n+        assertTrue(mockingDetails(spy1).isSpy());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsSpy_ForDirectSpy(){\n+        assertTrue(mockingDetails(spy2).isSpy());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsSpy_ForNonMock(){\n+        assertFalse(mockingDetails(nonMock).isSpy());\n+    }\n+}", "timestamp": 1338565588, "metainfo": ""}