{"sha": "cbca8d00eea63103309e939a233db533f2dc2675", "log": "Got rid of some hardly used deprecated API Changed ReturnValues into Answer (effectively got rid of ReturnValues)  --HG-- rename : src/org/mockito/internal/stubbing/answers/CallsRealMethod.java => src/org/mockito/internal/stubbing/answers/CallsRealMethods.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401446", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n package org.mockito;\n+\n+import org.mockito.stubbing.Answer;\n \n public interface MockSettings {\n     \n \n     MockSettings name(String name);\n \n-    MockSettings defaultBehavior(ReturnValues returnValues);\n-    \n     //TODO: hide spiedInstance?\n     MockSettings spiedInstance(Object object);\n+\n+    //TODO: check out types when using this method - can we suppress deprecation warnings?\n+    MockSettings defaultAnswer(Answer defaultAnswer);\n+    \n }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n import org.mockito.internal.returnvalues.MockReturnValues;\n import org.mockito.internal.returnvalues.MoreEmptyReturnValues;\n-import org.mockito.internal.returnvalues.RealReturnValues;\n import org.mockito.internal.returnvalues.SmartNullReturnValues;\n import org.mockito.internal.stubbing.Stubber;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n-import org.mockito.internal.stubbing.answers.CallsRealMethod;\n+import org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter;\n+import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.internal.stubbing.answers.DoesNothing;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n     private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     \n     /**\n-     * Default ReturnValues used by the framework.\n+     * Answer of unstubbed invocations used by all Mockito mocks by default.\n      * <p>\n      * {@link ReturnValues} defines the return values of unstubbed invocations. \n      * <p>\n      * This implementation first tries the global configuration. \n      * If there is no global configuration then it uses {@link EmptyReturnValues} (returns zeros, empty collections, nulls, etc.)\n      */\n-    public static final ReturnValues RETURNS_DEFAULTS = new GloballyConfiguredReturnValues();\n+    public static final Answer RETURNS_DEFAULTS = new GloballyConfiguredReturnValues();\n     \n     /**\n      * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n      *   //Exception's cause links to unstubbed <i>mock.getStuff()</i> - just click on the stack trace.  \n      * </pre>\n      */\n-    public static final ReturnValues RETURNS_SMART_NULLS = new SmartNullReturnValues();\n+    public static final Answer RETURNS_SMART_NULLS = new SmartNullReturnValues();\n     \n     /**\n      * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n      * then it tries to return mocks. If the return type cannot be mocked (e.g. is final) then plain null is returned.\n      * <p>\n      */\n-    public static final ReturnValues RETURNS_MOCKS = new MockReturnValues();\n+    public static final Answer RETURNS_MOCKS = new MockReturnValues();\n \n     /**\n      * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8\n      * value = mock.getSomething();\n      * </pre>\n      */\n-    public static final ReturnValues CALLS_REAL_METHODS = new RealReturnValues();\n+    public static final Answer CALLS_REAL_METHODS = new CallsRealMethods();\n     \n     /**\n      * Creates mock object of given class or interface.\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n-        return mock(classToMock, withSettings().defaultBehavior(RETURNS_DEFAULTS));\n+        return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));\n     }\n     \n     /**\n     public static <T> T mock(Class<T> classToMock, String name) {\n         return mock(classToMock, withSettings()\n                 .name(name)\n-                .defaultBehavior(RETURNS_DEFAULTS));\n-    }\n-    \n-    /**\n+                .defaultAnswer(RETURNS_DEFAULTS));\n+    }\n+    \n+    /**\n+     * @deprecated\n+     * <b>Please use mock(Foo.class, defaultAnswer);</b>\n+     * <p>\n+     * See {@link Mockito#mock(Class, Answer)}\n+     * <p>\n+     * The reason why it is deprecated is that ReturnValues is being replaced by Answer\n+     * for better consistency & interoperability of the framework. \n+     * Answer interface has been in Mockito for a while and it's the same as ReturnValues.\n+     * <p>\n      * Creates mock with a specified strategy for its return values. \n      * It's quite advanced feature and typically you don't need it to write decent tests.\n      * However it can be helpful for working with legacy systems.\n      *\n      * @return mock object\n      */\n+    @Deprecated\n     public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {\n-        return mock(classToMock, withSettings().defaultBehavior(returnValues));\n-    }\n-    \n+        return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues)));\n+    }\n+    \n+    /**\n+     * Creates mock with a specified strategy for its answers to interactions. \n+     * It's quite advanced feature and typically you don't need it to write decent tests.\n+     * However it can be helpful for working with legacy systems.\n+     * <p>\n+     * Obviously the answer is used only when you <b>don't</b> stub the method call.\n+     *\n+     * <pre>\n+     *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);\n+     *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \n+     * </pre>\n+     * \n+     * <p>See examples in javadoc for {@link Mockito} class</p>\n+     * \n+     * @param classToMock class or interface to mock\n+     * @param returnValues default return values for unstubbed methods\n+     *\n+     * @return mock object\n+     */\n+    public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {\n+        return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));\n+    }\n     \n     /**\n      * Creates a mock with some non-standard settings.\n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n-                .defaultBehavior(RETURNS_DEFAULTS));\n+                .defaultAnswer(RETURNS_DEFAULTS));\n     }\n \n     /**\n      * @return stubber - to select a method for stubbing\n      */\n     public static Stubber doCallRealMethod() {\n-        return MOCKITO_CORE.doAnswer(new CallsRealMethod());\n+        return MOCKITO_CORE.doAnswer(new CallsRealMethods());\n     }\n     \n     /**\n         MOCKITO_CORE.validateMockitoUsage();\n     }\n \n+    //TODO: javadoc\n     public static MockSettings withSettings() {\n-        return new MockSettingsImpl().defaultBehavior(RETURNS_DEFAULTS);\n+        return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n     }\n }\n--- a/src/org/mockito/ReturnValues.java\n+++ b/src/org/mockito/ReturnValues.java\n package org.mockito;\n \n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n /**\n+ * @deprecated\n+ * <b>Just use {@link Answer} interface</b>\n+ * <p>\n+ * The reason why it is deprecated is that ReturnValues is being replaced by Answer\n+ * for better consistency & interoperability of the framework. \n+ * Answer interface has been in Mockito for a while and it's the same as ReturnValues.\n+ * <p>\n  * Configures return values for an unstubbed invocation\n  * <p>\n  * Can be used in {@link Mockito#mock(Class, ReturnValues)}\n  */\n+@Deprecated\n public interface ReturnValues {\n \n     /**\n--- a/src/org/mockito/configuration/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/configuration/DefaultMockitoConfiguration.java\n import org.mockito.ReturnValues;\n import org.mockito.internal.configuration.DefaultAnnotationEngine;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * DefaultConfiguration of Mockito framework\n  * <p>\n  * See javadocs for {@link IMockitoConfiguration} on info how to configure Mockito\n  */\n+@SuppressWarnings(\"deprecation\")//supressed until ReturnValues are removed\n public class DefaultMockitoConfiguration implements IMockitoConfiguration {\n     \n     /* (non-Javadoc)\n      * @see org.mockito.IMockitoConfiguration#getReturnValues()\n      */\n     public ReturnValues getReturnValues() {\n+        throw new RuntimeException(\"\\n\" + \"This method should not be used by the framework because it was deprecated\"\n+                + \"\\n\" + \"Please report the failure to the Mockito mailing list\");\n+    }\n+\n+    public Answer<Object> getDefaultAnswer() {\n         return new EmptyReturnValues();\n     }\n     \n--- a/src/org/mockito/configuration/IMockitoConfiguration.java\n+++ b/src/org/mockito/configuration/IMockitoConfiguration.java\n \n import org.mockito.ReturnValues;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Use it to configure Mockito. For now there are not many configuration options but it may change in future.\n  * <p>\n  * If you have comments on Mockito configuration feature don't hesitate to write to mockito@googlegroups.com\n  */\n+@SuppressWarnings(\"deprecation\")//supressed until ReturnValues are removed\n public interface IMockitoConfiguration {\n \n+    /**\n+     * @deprecated\n+     * <b>Please use {@link IMockitoConfiguration#getDefaultAnswer()}</b>\n+     * Leave the implementation of this method empty - it's not going to be used anyway.\n+     * <p>\n+     * See javadoc {@link ReturnValues} for info why this method was deprecated\n+     * <p>\n+     * Allows configuring the default return values of unstubbed invocations\n+     * <p>\n+     * See javadoc for {@link IMockitoConfiguration}\n+     */\n+    @Deprecated\n+    ReturnValues getReturnValues();\n+    \n     /**\n      * Allows configuring the default return values of unstubbed invocations\n      * <p>\n      * See javadoc for {@link IMockitoConfiguration}\n-     */\n-    ReturnValues getReturnValues();\n+     */    \n+    Answer<Object> getDefaultAnswer();\n \n     /**\n      * Configures annotations for mocks\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"extraInterfaces() requires at least one interface.\"\n         ));\n     }\n+\n+    public void sayThatGetReturnValuesIsNowDeprecated() {\n+        throw new MockitoException(join( \n+                \"getReturnValues() is not used by the framework ever since verion 1.8\", \n+                \"Please implement getDefaultBehavior() instead\",\n+                \"Sorry for inconvenience\"));\n+    }\n }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n             mockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);\n             return answer.answer(invocation);\n         } else if (mockSettings.isSpy() == false) {\n-            return mockSettings.getReturnValues().valueFor(invocation);\n+            return mockSettings.getDefaultAnswer().answer(invocation);\n         } else {\n             Object ret = methodProxy.invokeSuper(proxy, args);\n             //redo setting invocation for potential stubbing in case of partial mocks / spies.\n--- a/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n import org.mockito.configuration.AnnotationEngine;\n import org.mockito.configuration.DefaultMockitoConfiguration;\n import org.mockito.configuration.IMockitoConfiguration;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Thread-safe wrapper on user-defined org.mockito.configuration.MockitoConfiguration implementation\n  */\n+@SuppressWarnings(\"deprecation\")//supressed until ReturnValues are removed\n public class GlobalConfiguration implements IMockitoConfiguration {\n     \n     private static ThreadLocal<IMockitoConfiguration> globalConfiguration = new ThreadLocal<IMockitoConfiguration>();\n     \n     @SuppressWarnings(\"deprecation\")\n     private IMockitoConfiguration createConfig() {\n-        IMockitoConfiguration defaultConfiguration = new DefaultMockitoConfiguration() {\n-            @Override public ReturnValues getReturnValues() {\n-                //For now, let's leave the deprecated way of getting return values, \n-                //it will go away, replaced simply by return new DefaultReturnValues()\n-                return Configuration.instance().getReturnValues();\n-            }\n-        };\n+        IMockitoConfiguration defaultConfiguration = new DefaultMockitoConfiguration();\n         IMockitoConfiguration config = new ClassPathLoader().loadConfiguration();\n         if (config != null) {\n             return config;\n     public boolean cleansStackTrace() {\n         return globalConfiguration.get().cleansStackTrace();\n     }\n+\n+    public Answer<Object> getDefaultAnswer() {\n+        return globalConfiguration.get().getDefaultAnswer();\n+    }\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n package org.mockito.internal.creation;\n \n import org.mockito.MockSettings;\n-import org.mockito.ReturnValues;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.stubbing.Answer;\n \n public class MockSettingsImpl implements MockSettings {\n \n-    private ReturnValues returnValues;\n     private Class<?>[] extraInterfaces;\n     private String name;\n     private Object spiedInstance;\n+    private Answer<Object> defaultAnswer;\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n         if (extraInterfaces == null || extraInterfaces.length == 0) {\n         return name;\n     }\n \n-    public ReturnValues getReturnValues() {\n-        return returnValues;\n-    }\n-\n     public Class<?>[] getExtraInterfaces() {\n         return extraInterfaces;\n     }\n \n     public Object getSpiedInstance() {\n         return spiedInstance;\n-    }\n-\n-    public MockSettings defaultBehavior(ReturnValues returnValues) {\n-        this.returnValues = returnValues;\n-        return this;\n     }\n \n     public MockSettings name(String name) {\n     public boolean isSpy() {\n         return spiedInstance != null;\n     }\n+\n+    public MockSettings defaultAnswer(Answer defaultAnswer) {\n+        this.defaultAnswer = defaultAnswer;\n+        return this;\n+    }\n+\n+    public Answer<Object> getDefaultAnswer() {\n+        return defaultAnswer;\n+    }\n }\n--- a/src/org/mockito/internal/returnvalues/EmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/EmptyReturnValues.java\n import java.util.TreeMap;\n import java.util.TreeSet;\n \n-import org.mockito.ReturnValues;\n import org.mockito.internal.creation.ClassNameFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.MockName;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Used by default by every Mockito mock.\n  * </li>\n  * </ul>\n  */\n-public class EmptyReturnValues implements ReturnValues {\n+public class EmptyReturnValues implements Answer<Object> {\n     \n     /* (non-Javadoc)\n      * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)\n      */\n-    public Object valueFor(InvocationOnMock invocation) {\n+    public Object answer(InvocationOnMock invocation) {\n         if (Invocation.isToString(invocation)) {\n             Object mock = invocation.getMock();\n             MockName name = new MockUtil().getMockName(mock);\n--- a/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n  */\n package org.mockito.internal.returnvalues;\n \n-import org.mockito.ReturnValues;\n+import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n /**\n- * ReturnValues from global configuration\n+ * Globally configured Answer.\n+ * <p>\n+ * See javadoc for {@link IMockitoConfiguration}\n  */\n-public class GloballyConfiguredReturnValues implements ReturnValues {\n+public class GloballyConfiguredReturnValues implements Answer<Object> {\n     \n-    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n-        return new GlobalConfiguration().getReturnValues().valueFor(invocation);\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        return new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n     }\n }\n--- a/src/org/mockito/internal/returnvalues/MockReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MockReturnValues.java\n  */\n package org.mockito.internal.returnvalues;\n \n-import org.mockito.ReturnValues;\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n-public class MockReturnValues implements ReturnValues {\n+public class MockReturnValues implements Answer<Object> {\n     \n     private MockitoCore mockitoCore = new MockitoCore();\n-    private ReturnValues delegate = new MoreEmptyReturnValues();\n+    private Answer<Object> delegate = new MoreEmptyReturnValues();\n     \n-    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n-        Object ret = delegate.valueFor(invocation);\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        Object ret = delegate.answer(invocation);\n         if (ret != null) {\n             return ret;\n         }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    Object returnValueFor(Class<?> class1) {\n-        if (!ClassImposterizer.INSTANCE.canImposterise(class1)) {\n+    Object returnValueFor(Class<?> clazz) {\n+        if (!ClassImposterizer.INSTANCE.canImposterise(clazz)) {\n             return null;\n         }\n         \n-        return mockitoCore.mock((Class) class1, new MockSettingsImpl().defaultBehavior(this));\n+        return mockitoCore.mock((Class) clazz, new MockSettingsImpl().defaultAnswer(this));\n     }\n }\n--- a/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n import java.lang.reflect.Array;\n \n import org.mockito.Mockito;\n-import org.mockito.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * It's likely this implementation will be used by default by every Mockito 2.0 mock.\n  * </li>\n  * </ul>\n  */\n-public class MoreEmptyReturnValues implements ReturnValues {\n+public class MoreEmptyReturnValues implements Answer<Object> {\n     \n-    private ReturnValues delegate = new EmptyReturnValues();\n+    private Answer<Object> delegate = new EmptyReturnValues();\n     \n     /* (non-Javadoc)\n      * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)\n      */\n-    public Object valueFor(InvocationOnMock invocation) throws Throwable {\n-        Object ret = delegate.valueFor(invocation);\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        Object ret = delegate.answer(invocation);\n         if (ret != null) {\n             return ret;\n         }\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n import java.lang.reflect.Method;\n \n import org.mockito.Mockito;\n-import org.mockito.ReturnValues;\n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n /**\n- * Optional ReturnValues to be used with\n- * {@link Mockito#mock(Class, ReturnValues)}\n- * <p>\n- * {@link ReturnValues} defines the return values of unstubbed calls.\n+ * Optional Answer that can be used with\n+ * {@link Mockito#mock(Class, Answer)}\n  * <p>\n  * This implementation can be helpful when working with legacy code. Unstubbed\n  * methods often return null. If your code uses the object returned by an\n  * SmartNullReturnValues will be probably the default return values strategy in\n  * Mockito 2.0\n  */\n-public class SmartNullReturnValues implements ReturnValues {\n+public class SmartNullReturnValues implements Answer<Object> {\n \n     private final class ThrowingInterceptor implements MethodInterceptor {\n         private final InvocationOnMock invocation;\n         }\n     }\n \n-    private final ReturnValues delegate = new MoreEmptyReturnValues();\n+    private final Answer<Object> delegate = new MoreEmptyReturnValues();\n \n-    public Object valueFor(final InvocationOnMock invocation) throws Throwable {\n-        Object defaultReturnValue = delegate.valueFor(invocation);\n+    public Object answer(final InvocationOnMock invocation) throws Throwable {\n+        Object defaultReturnValue = delegate.answer(invocation);\n         if (defaultReturnValue != null) {\n             return defaultReturnValue;\n         }\n--- a/src/org/mockito/internal/stubbing/BaseStubbing.java\n+++ b/src/org/mockito/internal/stubbing/BaseStubbing.java\n \n import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n import org.mockito.internal.progress.NewOngoingStubbing;\n-import org.mockito.internal.stubbing.answers.CallsRealMethod;\n+import org.mockito.internal.stubbing.answers.CallsRealMethods;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n \n     }        \n \n     public NewOngoingStubbing<T> thenCallRealMethod() {\n-        return thenAnswer(new CallsRealMethod());\n+        return thenAnswer(new CallsRealMethods());\n     }\n \n     public DeprecatedOngoingStubbing<T> toReturn(T value) {\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.mockito.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+//It's ok to suppress deprecation because this class goes away as soon as ReturnValues disappears in future release\n+@SuppressWarnings(\"deprecation\")\n+public class AnswerReturnValuesAdapter implements Answer<Object> {\n+\n+    private final ReturnValues returnValues;\n+\n+    public AnswerReturnValuesAdapter(ReturnValues returnValues) {\n+        this.returnValues = returnValues;\n+    }\n+\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        return returnValues.valueFor(invocation);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+public class CallsRealMethods implements Answer<Object> {\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        return invocation.invokeSuper();\n+    }\n+}\n--- a/src/org/mockito/stubbing/Answer.java\n+++ b/src/org/mockito/stubbing/Answer.java\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * Generic interface for stubbing methods with callbacks.\n+ * Generic interface to be used for configuring mock's answer. \n+ * Answer specifies an action that is executed and a return value that is returned when you interact with the mock.   \n  * <p>\n- * Example:\n+ * Example of stubbing a mock with custom answer: \n  * \n  * <pre>\n  * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockitousage.basicapi.ReplacingObjectMethodsTest;\n import org.mockitousage.basicapi.ResetTest;\n import org.mockitousage.basicapi.UsingVarargsTest;\n-import org.mockitousage.examples.configure.withbaseclass.ConfiguringDefaultReturnValuesUsingBaseClassTest;\n-import org.mockitousage.examples.configure.withrunner.ConfiguringDefaultReturnValuesUsingRunnerTest;\n-import org.mockitousage.examples.configure.withstaticutility.ConfiguringSelectedMocksToReturnFakesTest;\n import org.mockitousage.examples.use.ExampleTest;\n import org.mockitousage.matchers.ComparableMatchersTest;\n import org.mockitousage.matchers.CustomMatchersTest;\n \n         public void run() {\n             Result result = JUnitCore.runClasses(\n-                    ConfiguringDefaultReturnValuesUsingBaseClassTest.class,\n-                    ConfiguringDefaultReturnValuesUsingRunnerTest.class,\n-                    ConfiguringSelectedMocksToReturnFakesTest.class,\n                     EqualsTest.class,\n                     ListUtilTest.class,\n                     MockingProgressImplTest.class,\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n         MockSettingsImpl settings = (MockSettingsImpl) Mockito.withSettings();\n         \n         //then\n-        assertEquals(Mockito.RETURNS_DEFAULTS, settings.getReturnValues());\n+        assertEquals(Mockito.RETURNS_DEFAULTS, settings.getDefaultAnswer());\n     }\n     \n     //TODO: after 1.8 stack filter does not work very well when it comes to threads?\n--- a/test/org/mockito/configuration/MockitoConfiguration.java\n+++ b/test/org/mockito/configuration/MockitoConfiguration.java\n import java.lang.reflect.Field;\n \n import org.mockito.Mockito;\n-import org.mockito.ReturnValues;\n-import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.configuration.DefaultAnnotationEngine;\n+import org.mockito.stubbing.Answer;\n import org.mockitousage.configuration.SmartMock;\n \n-@SuppressWarnings(\"deprecation\")\n public class MockitoConfiguration extends DefaultMockitoConfiguration implements IMockitoConfiguration {\n \n-    private ReturnValues overriddenReturnValues = null;\n+    private Answer<Object> overriddenReturnValues = null;\n     private boolean cleansStackTrace;\n \n     //for testing purposes, allow to override the configuration\n-    public void overrideReturnValues(ReturnValues returnValues) {\n+    public void overrideReturnValues(Answer<Object> returnValues) {\n         this.overriddenReturnValues = returnValues;\n     }\n \n     }\n \n     @Override\n-    public ReturnValues getReturnValues() {\n+    public Answer<Object> getDefaultAnswer() {\n         if (overriddenReturnValues == null) {\n-            return Configuration.instance().getReturnValues();\n+            return super.getDefaultAnswer();\n         } else {\n             return overriddenReturnValues;\n         }\n--- a/test/org/mockito/internal/returnvalues/MockReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/MockReturnValuesTest.java\n     public void shouldReturnTheUsualDefaultValuesForPrimitives()\n             throws Throwable {\n         MockReturnValues returnValues = new MockReturnValues();\n-        assertEquals(false, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n-        assertEquals((char) 0, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n-        assertEquals(0, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n-        assertEquals(0, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n-        assertEquals(0, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n-        assertEquals(0, returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+        assertEquals(false, returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n+        assertEquals((char) 0, returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals(0, returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n+        assertEquals(0, returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0, returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0, returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n     }\n     \n     interface StringMethods {\n     \n     @Test\n     public void shouldReturnEmptyArray() throws Throwable {\n-        String[] ret = (String[]) values.valueFor(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n+        String[] ret = (String[]) values.answer(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n         \n         assertTrue(ret.getClass().isArray());\n         assertTrue(ret.length == 0);\n     \n     @Test\n     public void shouldReturnEmptyString() throws Throwable {\n-        assertEquals(\"\", values.valueFor(invocationOf(StringMethods.class, \"stringMethod\")));\n+        assertEquals(\"\", values.answer(invocationOf(StringMethods.class, \"stringMethod\")));\n     }\n }\n--- a/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n package org.mockito.internal.returnvalues;\n \n import org.junit.Test;\n-import org.mockito.ReturnValues;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.stubbing.Answer;\n import org.mockitoutil.TestBase;\n \n public class SmartNullReturnValuesTest extends TestBase {\n     \n     @Test\n     public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Throwable {\n-        SmartNullReturnValues returnValues = new SmartNullReturnValues();\n-        assertEquals(false  ,   returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n-        assertEquals((char) 0,  returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n-        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n-        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n-        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n-        assertEquals(0,         returnValues.valueFor(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+        Answer<Object> returnValues = new SmartNullReturnValues();\n+        assertEquals(false  ,   returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n+        assertEquals((char) 0,  returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals(0,         returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n+        assertEquals(0,         returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0,         returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0,         returnValues.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n     }\n     \n     interface Foo {\n     \n     @Test\n     public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Throwable {\n-        ReturnValues returnValues = new SmartNullReturnValues();\n+        Answer<Object> returnValues = new SmartNullReturnValues();\n         \n-        Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n+        Foo smartNull = (Foo) returnValues.answer(invocationOf(Foo.class, \"get\"));\n         \n         try {\n             smartNull.get();\n     \n     @Test\n     public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {\n-        ReturnValues returnValues = new SmartNullReturnValues();\n+        Answer<Object> returnValues = new SmartNullReturnValues();\n         \n-        Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n+        Foo smartNull = (Foo) returnValues.answer(invocationOf(Foo.class, \"get\"));\n         \n         //TODO: after 1.8 add functionality of printing params\n         assertEquals(\"SmartNull returned by unstubbed get() method on mock\", smartNull + \"\");\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n     @Test\n     public void partialMockInAction() {\n //        mock = mock(Foo.class, withSettings() \n-//            .defaultBehavior(CALLS_REAL_METHODS)\n-//            .createUsing(constructor, 1, \"foo\");\n-//\n+//            .defaultBehavior(CALLS_REAL_METHODS);\n+\n+//        mock = mock(Foo.class, withSettings() \n+//            .defaultMockAnswer(CALLS_REAL_METHODS);\n+\n+//        mock = mock(Foo.class, withSettings() \n+//            .defaultAnswer(CALLS_REAL_METHODS);\n+\n+//        mock = mock(Foo.class, CALLS_REAL_METHODS);\n+\n //        mock = mock(Foo.class, withSettings() \n //            .defaultBehavior(CALLS_REAL_METHODS)\n //            .createUsingDefaultConstructor();\n--- a/test/org/mockitousage/basicapi/MocksCreationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksCreationTest.java\n     public void shouldCombineMockNameAndSmartNulls() {\n         //given\n         IMethods mock = mock(IMethods.class, withSettings()\n-            .defaultBehavior(RETURNS_SMART_NULLS)\n+            .defaultAnswer(RETURNS_SMART_NULLS)\n             .name(\"great mockie\"));    \n         \n         //when\n     public void shouldSpecifyMockNameViaSettings() {\n         //given\n         IMethods mock = mock(IMethods.class, withSettings().name(\"great mockie\"));\n-        \n+\n         //when\n         String name = mock.toString();\n         \n--- a/test/org/mockitousage/configuration/MockitoConfigurationTest.java\n+++ b/test/org/mockitousage/configuration/MockitoConfigurationTest.java\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n-import org.mockito.ReturnValues;\n import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Test\n     public void shouldReadConfigurationClassFromClassPath() {\n-        ConfigurationAccess.getConfig().overrideReturnValues(new ReturnValues() {\n-            public Object valueFor(InvocationOnMock invocation) {\n+        ConfigurationAccess.getConfig().overrideReturnValues(new Answer<Object>() {\n+            public Object answer(InvocationOnMock invocation) {\n                 return \"foo\";\n             }});\n ", "timestamp": 1243027422, "metainfo": ""}