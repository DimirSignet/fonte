{"sha": "f647a16034c692c7f138793b97990a2b18dcf874", "log": "fixed javadoc  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40338", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *   inOrder.verify(firstMock).add(\"should be called first\");\n  *   inOrder.verify(secondMock).add(\"should be called second\");\n  * </pre>\n+ * \n+ * Verification in order is flexible - you don't have to verify all interactions one-by-one\n+ * but only those that you are interested in testing in order. \n+ * <p>\n+ * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  \n  *\n  * <h3>Making sure no interactions happened on mock</h3>\n  * \n      *   inOrder.verify(firstMock).add(\"should be called first\");\n      *   inOrder.verify(secondMock).add(\"should be called second\");\n      * </pre>\n+     * \n+     * Verification in order is flexible - you don't have to verify all interactions one-by-one\n+     * but only those that you are interested in testing in order.\n+     * <p>\n+     * Also, you can create InOrder object passing only mocks that relevant for in-order verification.  \n      *\n      * See examples in javadoc for {@link Mockito}\n      * ", "timestamp": 1202059231, "metainfo": ""}