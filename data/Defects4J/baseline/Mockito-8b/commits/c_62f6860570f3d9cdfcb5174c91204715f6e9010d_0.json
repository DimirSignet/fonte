{"sha": "62f6860570f3d9cdfcb5174c91204715f6e9010d", "log": "fixed javadoc  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40852", "commit": "\n--- a/src/org/mockito/Mock.java\n+++ b/src/org/mockito/Mock.java\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n+import org.mockito.runners.MockitoJUnit4Runner;\n+\n /**\n- * Allows shorthand mock creation, see examples in javadoc for {@link MockitoAnnotations} class.\n+ * <ul>\n+ * <li>Allows shorthand mock creation.</li> \n+ * <li>Minimizes repetitive mock creation code.</li> \n+ * <li>Makes the test class more readable.</li>\n+ * <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>\n+ * </ul>\n+ * \n+ * <pre>\n+ *   public class ArticleManagerTest extends SampleBaseTestCase { \n+ *     \n+ *       &#064;Mock private ArticleCalculator calculator;\n+ *       &#064;Mock private ArticleDatabase database;\n+ *       &#064;Mock private UserProvider userProvider;\n+ *     \n+ *       private ArticleManager manager;\n+ *     \n+ *       &#064;Before public void setup() {\n+ *           manager = new ArticleManager(userProvider, database, calculator);\n+ *       }\n+ *   }\n+ *   \n+ *   public class SampleBaseTestCase {\n+ *   \n+ *       &#064;Before public void initMocks() {\n+ *           MockitoAnnotations.initMocks(this);\n+ *       }\n+ *   }\n+ * </pre>\n+ * \n+ * <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated mocks.\n+ * <p>\n+ * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n+ * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n+ * You can also put it in your JUnit4 runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit4Runner}, {@link MockitoJUnit45Runner}\n  */\n @Target( { FIELD })\n @Retention(RetentionPolicy.RUNTIME)\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n- * You can also use put it in your JUnit4 runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit4Runner}, {@link MockitoJUnit45Runner}\n+ * You can also put it in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit4Runner}, {@link MockitoJUnit45Runner}\n  */\n public class MockitoAnnotations {\n \n--- a/src/org/mockito/runners/MockitoJUnit45Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit45Runner.java\n import org.junit.runners.model.FrameworkMethod;\n import org.junit.runners.model.InitializationError;\n import org.junit.runners.model.Statement;\n+import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n \n /**\n- * Mockito integration with JUnit 4.5. Supports new default JUnit's runner\n- * {@link BlockJUnit4ClassRunner}.\n+ * Uses new default JUnit's runner {@link BlockJUnit4ClassRunner}.\n  * <p>\n- * See {@link MockitoJUnit4Runner} for details.\n+ * JUnit 4.5 runner initializes mocks annotated with {@link Mock},\n+ * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n+ * Mocks are initialized before each test method. \n+ * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n+ * Read more in javadoc for {@link MockitoAnnotations#initMocks(Object)}\n  * <p>\n- * Example of use in test class:\n- * \n+ * Example:\n  * <pre>\n- * &#064;RunWith(MockitoJUnit45Runner.class)\n+ * &#064;RunWith(MockitoJUnit4Runner.class)\n  * public class ExampleTest {\n  * \n  *     &#064;Mock\n  *     private List list;\n  * \n  *     &#064;Test\n- *     public void shouldInitMocksUsingRunner() {\n- *         list.add(&quot;test&quot;);\n+ *     public void shouldDoSomething() {\n+ *         list.add(100);\n  *     }\n  * }\n+ * <p>\n+ * \n  * </pre>\n  */\n public class MockitoJUnit45Runner extends BlockJUnit4ClassRunner {\n--- a/src/org/mockito/runners/MockitoJUnit4Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit4Runner.java\n \n import org.junit.internal.runners.InitializationError;\n import org.junit.internal.runners.JUnit4ClassRunner;\n-import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n \n /**\n- * Mockito integration with JUnit 4.x.\n+ * JUnit 4.0-4.4 runner initializes mocks annotated with {@link Mock},\n+ * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n+ * Mocks are initialized before each test method. \n+ * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n+ * Read more in javadoc for {@link MockitoAnnotations#initMocks(Object)}\n  * <p>\n- * If JUnit version 4.x (4.0-4.4) is in use {@link RunWith} annotation can be\n- * used to enable custom Mockito runner. This runner automatically initializes\n- * mocks annotated with {@link Mock}, so that explicit usage of\n- * {@link MockitoAnnotations#initMocks(Object)} is not necessary. Mocks are\n- * initialized before each invocation of particular test method.\n- * <p>\n- * Example of use in test class:\n- * \n+ * Example:\n  * <pre>\n  * &#064;RunWith(MockitoJUnit4Runner.class)\n  * public class ExampleTest {\n  *     private List list;\n  * \n  *     &#064;Test\n- *     public void shouldInitMocksUsingRunner() {\n- *         list.add(&quot;test&quot;);\n+ *     public void shouldDoSomething() {\n+ *         list.add(100);\n  *     }\n  * }\n+ * <p>\n+ * \n  * </pre>\n  */\n+@SuppressWarnings(\"deprecation\")\n public class MockitoJUnit4Runner extends JUnit4ClassRunner {\n \n     public MockitoJUnit4Runner(Class<?> klass) throws InitializationError {\n         MockitoAnnotations.initMocks(test);\n         return test;\n     }\n-\n }", "timestamp": 1220044676, "metainfo": ""}