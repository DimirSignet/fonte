{"sha": "e3a453045c2efdc768a1dc6699cb11974230f6a4", "log": "committed the fix for enhancement #19  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40810", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.stubbing.MockitoStubber;\n import org.mockito.internal.stubbing.Returns;\n import org.mockito.internal.stubbing.DoesNothing;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.ThrowsException;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n \n         mockingProgress.reportOngoingStubbing(new OngoingStubbingImpl());\n \n-        if (mockitoStubber.hasResultFor(invocation)) {\n-            return mockitoStubber.getResultFor(invocation);\n+        \n+        StubbedInvocationMatcher matchForInvocation = mockitoStubber.findMatchFor(invocation);\n+        if (matchForInvocation != null) {\n+            return matchForInvocation.answer(invocation);\n         } else if (MockUtil.isMock(instance)) {\n             return Configuration.instance().getReturnValues().valueFor(invocation);\n         } else {\n--- a/src/org/mockito/internal/stubbing/MockitoStubber.java\n+++ b/src/org/mockito/internal/stubbing/MockitoStubber.java\n         }\n     } \n     \n-    public boolean hasResultFor(Invocation invocation) {\n-        return findMatch(invocation) != null;\n-    }\n-    \n     public Object getResultFor(Invocation invocation) throws Throwable {\n-        return findMatch(invocation).answer(invocation);\n+        return findMatchFor(invocation).answer(invocation);\n     }\n \n-    private StubbedInvocationMatcher findMatch(Invocation invocation) {\n+    public StubbedInvocationMatcher findMatchFor(Invocation invocation) {\n         for (StubbedInvocationMatcher s : stubbed) {\n             if (s.matches(invocation)) {\n                 return s;", "timestamp": 1219494339, "metainfo": ""}