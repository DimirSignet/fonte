{"sha": "6dc36bab96d42800a30e90fc16db6cdcfad2e0bf", "log": "-killed/refactored some tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4017", "commit": "\n--- a/src/org/mockito/MockitoBehavior.java\n+++ b/src/org/mockito/MockitoBehavior.java\n \n public class MockitoBehavior {\n \n-    private List<MockitoInvocation> registeredInvocations = new LinkedList<MockitoInvocation>();\n-    private Map<MockitoInvocation, Result> results = new HashMap<MockitoInvocation, Result>();\n+    private List<InvocationWithMatchers> registeredInvocations = new LinkedList<InvocationWithMatchers>();\n+    private Map<InvocationWithMatchers, Result> results = new HashMap<InvocationWithMatchers, Result>();\n     \n-    public void addInvocation(MockitoInvocation invocation) {\n+    public void addInvocation(InvocationWithMatchers invocation) {\n         this.registeredInvocations.add(invocation);\n     }\n \n \n     private int numberOfActualInvocations(InvocationWithMatchers expectedInvocation) {\n         int verifiedInvocations = 0;\n-        for (MockitoInvocation registeredInvocation : registeredInvocations) {\n-            if (expectedInvocation.matches(registeredInvocation)) {\n+        for (InvocationWithMatchers registeredInvocation : registeredInvocations) {\n+            MockitoInvocation invocation = registeredInvocation.getInvocation();\n+            if (expectedInvocation.matches(invocation)) {\n                 verifiedInvocations += 1;\n-                registeredInvocation.markVerified();\n+                invocation.markVerified();\n             } else {\n                 verifiedInvocations += 0;\n             }\n     }\n \n     public void verifyNoMoreInteractions() {\n-        for (MockitoInvocation registeredInvocation : registeredInvocations) {\n-            if (!registeredInvocation.isVerified()) {\n+        for (InvocationWithMatchers registeredInvocation : registeredInvocations) {\n+            if (!registeredInvocation.getInvocation().isVerified()) {\n                 throw new MockVerificationAssertionError();\n             }\n         }\n     }\n \n     public Object resultFor(MockitoInvocation invocation) throws Throwable {\n-        if (results.get(invocation) == null) {\n-            return ToTypeMappings.emptyReturnValueFor(invocation.getMethod().getReturnType());\n-        } else {\n-            return results.get(invocation).answer();\n+        for (InvocationWithMatchers invocationWithMatchers : results.keySet()) {\n+            if (invocationWithMatchers.matches(invocation)) {\n+                return results.get(invocationWithMatchers).answer();\n+            }\n         }\n+\n+        return ToTypeMappings.emptyReturnValueFor(invocation.getMethod().getReturnType());\n     }\n \n     public MockitoInvocation lastInvocation() {\n-        return registeredInvocations.get(registeredInvocations.size() - 1);\n+        return registeredInvocations.get(registeredInvocations.size() - 1).getInvocation();\n     }\n }\n--- a/src/org/mockito/MockitoControl.java\n+++ b/src/org/mockito/MockitoControl.java\n         \n         MockitoOperations.reportLastControlForStubbing(this);\n         \n-        behavior.addInvocation(invocation);\n+        behavior.addInvocation(invocationWithMatchers);\n         \n         if (MockitoOperations.settingThrowableOnVoidMethodScenario()) {\n             Throwable throwable = MockitoOperations.removeThrowableToBeSetOnVoidMethod();\n--- a/src/org/mockito/MockitoInvocation.java\n+++ b/src/org/mockito/MockitoInvocation.java\n import org.easymock.IArgumentMatcher;\n import org.easymock.internal.*;\n \n+//TODO kill this class and move verified to InvocationWithMatchers\n public class MockitoInvocation extends Invocation {\n \n     private boolean verified;\n--- /dev/null\n+++ b/src/org/mockito/exceptions/InvalidUseOfMatchersException.java\n+package org.mockito.exceptions;\n+\n+public class InvalidUseOfMatchersException extends RuntimeException {\n+\n+}\n--- a/test/org/easymock/CompareToTest.java\n+++ b/test/org/easymock/CompareToTest.java\n import org.easymock.internal.matchers.*;\n import org.junit.Test;\n \n+//TODO do we need matchers like GreaterThan - does it make any sense?\n public class CompareToTest {\n \n     @Test\n         assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n     }\n \n-    private void test(CompareTo<String> cmpTo, boolean lower, boolean higher,\n+    private void test(CompareTo<String> compareTo, boolean lower, boolean higher,\n             boolean equals, String name) {\n \n-        assertEquals(lower, cmpTo.matches(\"a\"));\n-        assertEquals(equals, cmpTo.matches(\"b\"));\n-        assertEquals(higher, cmpTo.matches(\"c\"));\n+        assertEquals(lower, compareTo.matches(\"a\"));\n+        assertEquals(equals, compareTo.matches(\"b\"));\n+        assertEquals(higher, compareTo.matches(\"c\"));\n \n         StringBuffer sb = new StringBuffer();\n-        cmpTo.appendTo(sb);\n+        compareTo.appendTo(sb);\n         assertEquals(name + \"(b)\", sb.toString());\n     }\n }\n--- a/test/org/easymock/NameTest.java\n+++ b/test/org/easymock/NameTest.java\n import static org.easymock.EasyMock.*;\n import static org.junit.Assert.*;\n \n+//TODO change this test so it asserts nice exception messages and method name is displayed \n public class NameTest {\n     @Test\n     public void nameForMock() {\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }\n-    \n-    @Test\n-    public void shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier() {\n-        try {\n-            createMock(\"no-valid-java-identifier\", IMethods.class);\n-            throw new AssertionError();\n-        } catch (IllegalArgumentException expected) {\n-            assertEquals(\"'no-valid-java-identifier' is not a valid Java identifier.\", expected.getMessage());\n-        }\n-    }\n-\n }\n--- /dev/null\n+++ b/test/org/easymock/UsingMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock;\n+\n+import static org.junit.Assert.*;\n+import static org.easymock.EasyMock.*;\n+\n+import java.math.*;\n+import java.util.*;\n+\n+import org.easymock.internal.matchers.*;\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+\n+import static org.mockito.Mockito.*;\n+\n+@SuppressWarnings(\"unchecked\")  \n+public class UsingMatchersTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void shouldScreamWhenMatchersAreInvalid() {\n+        mock.simpleMethodWithArgument(not(eq(\"asd\")));\n+        try {\n+            mock.simpleMethodWithArgument(not(\"jkl\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"no matchers found.\", e.getMessage());\n+        }\n+        try {\n+            mock.simpleMethodWithArgument(or(eq(\"jkl\"), \"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"2 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+        try {\n+            mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"3 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void andOverloaded() {\n+        stub(mock.oneArg(and(eq(false), eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(and(eq('a'), eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(and(contains(\"a\"), contains(\"d\")))).andReturn(\"8\");\n+        stub(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(false));\n+        assertEquals(null, mock.oneArg(true));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg('a'));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        \n+        assertEquals(\"8\", mock.oneArg(\"abcde\"));\n+        assertEquals(null, mock.oneArg(\"aaaaa\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        \n+    }\n+\n+    @Test\n+    public void orOverloaded() {\n+        stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n+        stub(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n+        stub(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n+        stub(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n+        stub(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n+        stub(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n+        stub(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n+        stub(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n+        stub(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n+        stub(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        \n+        assertEquals(\"8\", mock.oneArg(\"jkl\"));\n+        assertEquals(\"8\", mock.oneArg(\"asd\"));\n+        assertEquals(null, mock.oneArg(\"asdjkl\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        assertEquals(null, mock.oneArg(String.class));\n+    }\n+\n+    @Test\n+    public void notOverloaded() {\n+        stub(mock.oneArg(not(eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(not(eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(not(eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(not(eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(not(eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(not(eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(not(eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(not(eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(not(contains(\"a\")))).andReturn(\"8\");\n+        stub(mock.oneArg(not(isA(Class.class)))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(null, mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg('b'));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 2));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"8\", mock.oneArg(\"bcde\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(null, mock.oneArg(Class.class));\n+    }\n+\n+    @Test\n+    public void lessOrEqualOverloaded() {\n+        stub(mock.oneArg(leq((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(leq((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(leq((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(leq((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(leq((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(leq((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(leq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(null, mock.oneArg((byte) 2));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -5));\n+        assertEquals(\"5\", mock.oneArg((int) -2));\n+        assertEquals(\"6\", mock.oneArg((long) -3));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"1.1\")));\n+    }\n+\n+    @Test\n+    public void lessThanOverloaded() {\n+        stub(mock.oneArg(lt((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(lt((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(lt((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(lt((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(lt((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(lt((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(lt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 0));\n+        assertEquals(null, mock.oneArg((byte) 1));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 0));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -4));\n+        assertEquals(\"5\", mock.oneArg((int) -34));\n+        assertEquals(\"6\", mock.oneArg((long) -6));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"23\")));\n+    }\n+\n+    @Test\n+    public void greaterOrEqualMatcherOverloaded() {\n+        stub(mock.oneArg(geq((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(geq((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(geq((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(geq((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(geq((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(geq((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(geq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(null, mock.oneArg((byte) 0));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 4));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.00\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n+    }\n+\n+    @Test\n+    public void greaterThanMatcherOverloaded() {\n+        stub(mock.oneArg(gt((byte) 1))).andReturn(\"1\");\n+        stub(mock.oneArg(gt((double) 1))).andReturn(\"3\");\n+        stub(mock.oneArg(gt((float) 1))).andReturn(\"4\");\n+        stub(mock.oneArg(gt((int) 1))).andReturn(\"5\");\n+        stub(mock.oneArg(gt((long) 1))).andReturn(\"6\");\n+        stub(mock.oneArg(gt((short) 1))).andReturn(\"7\");\n+        stub(mock.oneArg(gt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(null, mock.oneArg((byte) 1));\n+        \n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        \n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"0.9\")));\n+    }\n+\n+    @Test\n+    public void compareToMatcher() {\n+        stub(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+\n+        assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n+        assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n+    }\n+\n+    @Test\n+    public void anyMatcher() {\n+        stub(mock.oneArg(anyBoolean())).andReturn(\"0\");\n+        stub(mock.oneArg(anyByte())).andReturn(\"1\");\n+        stub(mock.oneArg(anyChar())).andReturn(\"2\");\n+        stub(mock.oneArg(anyDouble())).andReturn(\"3\");\n+        stub(mock.oneArg(anyFloat())).andReturn(\"4\");\n+        stub(mock.oneArg(anyInt())).andReturn(\"5\");\n+        stub(mock.oneArg(anyLong())).andReturn(\"6\");\n+        stub(mock.oneArg(anyShort())).andReturn(\"7\");\n+        stub(mock.oneArg((String) anyObject())).andReturn(\"8\");\n+        stub(mock.oneArg(anyObject())).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        \n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"4\", mock.oneArg((float) 889));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        assertEquals(\"8\", mock.oneArg(\"Test\"));\n+        \n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(\"9\", mock.oneArg(new HashMap()));\n+    }\n+\n+    @Test\n+    public void arrayEqualsMatcher() {\n+        stub(mock.oneArray(aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n+        stub(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(\"1\");\n+        stub(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(\"2\");\n+        stub(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(\"3\");\n+        stub(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(\"4\");\n+        stub(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(\"5\");\n+        stub(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(\"6\");\n+        stub(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(\"7\");\n+        stub(mock.oneArray(aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n+        stub(mock.oneArray(aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n+\n+        assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n+        assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n+        assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n+        assertEquals(\"3\", mock.oneArray(new double[] { 1 }));\n+        assertEquals(\"4\", mock.oneArray(new float[] { 1 }));\n+        assertEquals(\"5\", mock.oneArray(new int[] { 1 }));\n+        assertEquals(\"6\", mock.oneArray(new long[] { 1 }));\n+        assertEquals(\"7\", mock.oneArray(new short[] { 1 }));\n+        assertEquals(\"8\", mock.oneArray(new String[] { \"Test\" }));\n+        assertEquals(\"9\", mock.oneArray(new Object[] { \"Test\", new Integer(4) }));\n+        \n+        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(999) }));\n+        assertEquals(null, mock.oneArray(new Object[] { \"Test\", new Integer(4), \"x\" }));\n+        \n+        assertEquals(null, mock.oneArray(new boolean[] { true, false }));\n+        assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));\n+    }\n+\n+    @Test\n+    public void greaterOrEqualMatcher() {\n+        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+\n+        assertEquals(\">= 7\", mock.oneArg(7));\n+        assertEquals(\">= 7\", mock.oneArg(8));\n+        assertEquals(\">= 7\", mock.oneArg(9));\n+\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+    }\n+\n+    @Test\n+    public void greaterThanMatcher() {\n+        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+\n+        assertEquals(\"> 7\", mock.oneArg(8));\n+        assertEquals(\"> 7\", mock.oneArg(9));\n+        assertEquals(\"> 7\", mock.oneArg(10));\n+\n+        assertEquals(\"<= 7\", mock.oneArg(7));\n+        assertEquals(\"<= 7\", mock.oneArg(6));\n+    }\n+\n+    @Test\n+    public void lessOrEqualMatcher() {\n+        stub(mock.oneArg(leq(7))).andReturn(\"<= 7\");\n+        stub(mock.oneArg(gt(7))).andReturn(\"> 7\");\n+\n+        assertEquals(\"<= 7\", mock.oneArg(7));\n+        assertEquals(\"<= 7\", mock.oneArg(6));\n+        assertEquals(\"<= 7\", mock.oneArg(5));\n+\n+        assertEquals(\"> 7\", mock.oneArg(8));\n+        assertEquals(\"> 7\", mock.oneArg(9));\n+    }\n+\n+    @Test\n+    public void lessThanMatcher() {\n+        stub(mock.oneArg(lt(7))).andReturn(\"< 7\");\n+        stub(mock.oneArg(geq(7))).andReturn(\">= 7\");\n+\n+        assertEquals(\"< 7\", mock.oneArg(5));\n+        assertEquals(\"< 7\", mock.oneArg(6));\n+        assertEquals(\"< 7\", mock.oneArg(4));\n+\n+        assertEquals(\">= 7\", mock.oneArg(7));\n+        assertEquals(\">= 7\", mock.oneArg(8));\n+    }\n+\n+    @Test\n+    public void orMatcher() {\n+        stub(mock.oneArg(anyInt())).andReturn(\"other\");\n+        stub(mock.oneArg(or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n+\n+        assertEquals(\"other\", mock.oneArg(10));\n+        assertEquals(\"7 or 9\", mock.oneArg(7));\n+        assertEquals(\"7 or 9\", mock.oneArg(9));\n+    }\n+\n+    @Test\n+    public void nullMatcher() {\n+        stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).andReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+    }\n+\n+    @Test\n+    public void notNullMatcher() {\n+        stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\"1\");\n+        stub(mock.threeArgumentMethod(eq(1), not(notNull()), eq(\"\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n+    }\n+\n+    @Test\n+    //TODO how different is this one from matchesMatcher?\n+    public void findMatcher() {\n+        stub(mock.oneArg(find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"ab12\"));\n+        assertEquals(null, mock.oneArg(\"12345\"));\n+    }\n+\n+    @Test\n+    public void matchesMatcher() {\n+        stub(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).andReturn(\"1\");\n+        stub(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"a12\"));\n+        assertEquals(\"2\", mock.oneArg(\"131\"));\n+        assertEquals(null, mock.oneArg(\"blah\"));\n+    }\n+\n+    @Test\n+    public void containsMatcher() {\n+        stub(mock.oneArg(contains(\"ell\"))).andReturn(\"1\");\n+        stub(mock.oneArg(contains(\"ld\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"hello\"));\n+        assertEquals(\"2\", mock.oneArg(\"world\"));\n+        assertEquals(null, mock.oneArg(\"xlx\"));\n+    }\n+\n+    @Test\n+    public void startsWithMatcher() {\n+        stub(mock.oneArg(startsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(startsWith(\"bc\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n+        assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n+        assertEquals(null, mock.oneArg(\"ba quake\"));\n+    }\n+\n+    @Test\n+    public void endsWithMatcher() {\n+        stub(mock.oneArg(endsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(endsWith(\"bc\"))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(\"xab\"));\n+        assertEquals(\"2\", mock.oneArg(\"xbc\"));\n+        assertEquals(null, mock.oneArg(\"ac\"));\n+    }\n+\n+    @Test\n+    public void deltaMatcher() {\n+        stub(mock.oneArg(eq(1.0D, 0.1D))).andReturn(\"1\");\n+        stub(mock.oneArg(eq(2.0D, 0.1D))).andReturn(\"2\");\n+        stub(mock.oneArg(eq(1.0F, 0.1F))).andReturn(\"3\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+        stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(\"4\");\n+\n+        assertEquals(\"1\", mock.oneArg(1.0));\n+        assertEquals(\"1\", mock.oneArg(0.91));\n+        assertEquals(\"1\", mock.oneArg(1.09));\n+        assertEquals(\"2\", mock.oneArg(2.0));\n+\n+        assertEquals(\"3\", mock.oneArg(1.0F));\n+        assertEquals(\"3\", mock.oneArg(0.91F));\n+        assertEquals(\"3\", mock.oneArg(1.09F));\n+        assertEquals(\"4\", mock.oneArg(2.1F));\n+        \n+        assertEquals(null, mock.oneArg(2.2F));\n+    }\n+\n+    @Test\n+    public void sameMatcher() {\n+        Object one = new String(\"1243\");\n+        Object two = new String(\"1243\");\n+        Object three = new String(\"1243\");\n+\n+        assertNotSame(one, two);\n+        assertEquals(one, two);\n+        assertEquals(two, three);\n+\n+        stub(mock.oneArg(same(one))).andReturn(\"1\");\n+        stub(mock.oneArg(same(two))).andReturn(\"2\");\n+\n+        assertEquals(\"1\", mock.oneArg(one));\n+        assertEquals(\"2\", mock.oneArg(two));\n+        assertEquals(null, mock.oneArg(three));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/VerificationUsingMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.verify;\n+\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+\n+@SuppressWarnings(\"unchecked\")  \n+public class VerificationUsingMatchersTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void shouldVerifyUsingSameMatcher() {\n+        Object one = new String(\"1243\");\n+        Object two = new String(\"1243\");\n+        Object three = new String(\"1243\");\n+\n+        assertNotSame(one, two);\n+        assertEquals(one, two);\n+        assertEquals(two, three);\n+\n+        mock.oneArg(one);\n+        mock.oneArg(two);\n+        \n+        verify(mock).oneArg(same(one));\n+        verify(mock).oneArg(two);\n+        \n+        try {\n+            verify(mock).oneArg(same(three));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }  \n+    \n+    @Test\n+    public void shouldVerifyUsingMixedMatchers() {\n+        mock.threeArgumentMethod(11, \"\", \"01234\");\n+\n+        try {\n+            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+\n+        mock.threeArgumentMethod(8, new Object(), \"01234\");\n+        \n+        try {\n+            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+        \n+        mock.threeArgumentMethod(8, \"\", \"no match\");\n+\n+        try {\n+            verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+        \n+        mock.threeArgumentMethod(8, \"\", \"123\");\n+        \n+        verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/internal/matchers/EqualsTest.java\n+package org.easymock.internal.matchers;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+\n+public class EqualsTest {\n+    \n+    @Test\n+    public void shouldBeEqual() {\n+        assertEquals(new Equals(null), new Equals(null));\n+        assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));\n+        assertFalse(new Equals(null).equals(null));\n+        assertFalse(new Equals(null).equals(\"Test\"));\n+        try {\n+            new Equals(null).hashCode();\n+            fail();\n+        } catch (UnsupportedOperationException expected) {\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/usage/InvalidUseOfMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.usage;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+import org.easymock.IMethods;\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.InvalidUseOfMatchersException;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class InvalidUseOfMatchersTest {\n+    \n+    private IMethods mock;\n+    \n+    @Before\n+    public void setUp() {\n+        mock = Mockito.mock(IMethods.class);\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void shouldDetectWrongNumberOfMatchersWhenStubbing() {\n+        Mockito.stub(mock.threeArgumentMethod(1, \"2\", \"3\")).andReturn(null);\n+        try {\n+            Mockito.stub(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).andReturn(null);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldDetectStupidUseOfMatchersWhenVerifying() {\n+        mock.oneArg(true);\n+        eq(\"that's the stupid way\");\n+        eq(\"of using matchers\");\n+        try {\n+            Mockito.verify(mock).oneArg(true);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void shouldScreamWhenMatchersAreInvalid() {\n+        mock.simpleMethodWithArgument(not(eq(\"asd\")));\n+        try {\n+            mock.simpleMethodWithArgument(not(\"jkl\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"no matchers found.\", e.getMessage());\n+        }\n+        \n+        try {\n+            mock.simpleMethodWithArgument(or(eq(\"jkl\"), \"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"2 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+        \n+        try {\n+            mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"3 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+    }\n+}", "timestamp": 1195249943, "metainfo": ""}