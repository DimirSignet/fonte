{"sha": "cf7442035989f1a856f987ea43cc93134dab9695", "log": "moved things  --HG-- rename : test/org/mockito/sample/Article.java => test/org/mockitousage/sample/Article.java rename : test/org/mockito/sample/ArticleCalculator.java => test/org/mockitousage/sample/ArticleCalculator.java rename : test/org/mockito/sample/ArticleDatabase.java => test/org/mockitousage/sample/ArticleDatabase.java rename : test/org/mockito/sample/ArticleManager.java => test/org/mockitousage/sample/ArticleManager.java rename : test/org/mockito/sample/MockitoSampleTest.java => test/org/mockitousage/sample/MockitoSampleTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40138", "commit": "\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.exceptions.*;\n import org.mockito.internal.*;\n import org.mockito.internal.matchers.EqualsTest;\n-import org.mockito.sample.MockitoSampleTest;\n import org.mockitousage.binding.*;\n import org.mockitousage.matchers.*;\n+import org.mockitousage.sample.MockitoSampleTest;\n import org.mockitousage.stubbing.*;\n import org.mockitousage.verification.*;\n \n--- /dev/null\n+++ b/test/org/mockitousage/sample/Article.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.sample;\n+\n+public class Article {\n+\n+    private int numberOfRelatedArticles;\n+\n+    public int getNumberOfRelatedArticles() {\n+        return numberOfRelatedArticles;\n+    }\n+\n+    public void setNumberOfRelatedArticles(int numberOfRelatedArticles) {\n+        this.numberOfRelatedArticles = numberOfRelatedArticles;\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/sample/ArticleCalculator.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.sample;\n+\n+public interface ArticleCalculator {\n+    int countArticles(String newspaper);\n+    int countArticlesInPolish(String newspaper);\n+    int countNumberOfRelatedArticles(Article article);\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/sample/ArticleDatabase.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.sample;\n+\n+import java.util.List;\n+\n+public class ArticleDatabase {\n+\n+    public void updateNumberOfArticles(String newspaper, int articles) {\n+    }\n+\n+    public void updateNumberOfPolishArticles(String newspaper, int polishArticles) {\n+    }\n+\n+    public void updateNumberOfEnglishArticles(String newspaper, int i) {\n+    }\n+\n+    public List<Article> getArticlesFor(String string) {\n+        return null;\n+    }\n+\n+    public void save(Article article) {\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/sample/ArticleManager.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.sample;\n+\n+import java.util.List;\n+\n+public class ArticleManager {\n+    \n+    private final ArticleCalculator calculator;\n+    private final ArticleDatabase database;\n+\n+    public ArticleManager(ArticleCalculator calculator, ArticleDatabase database) {\n+        this.calculator = calculator;\n+        this.database = database;\n+    }\n+    \n+    public void updateArticleCounters(String newspaper) {\n+        int articles = calculator.countArticles(newspaper);\n+        int polishArticles = calculator.countArticlesInPolish(newspaper);\n+        \n+        database.updateNumberOfArticles(newspaper, articles);\n+        database.updateNumberOfPolishArticles(newspaper, polishArticles);\n+        database.updateNumberOfEnglishArticles(newspaper, articles - polishArticles);\n+    }\n+    \n+    public void updateRelatedArticlesCounters(String newspaper) {\n+        List<Article> articles = database.getArticlesFor(\"Guardian\");\n+        for (Article article : articles) {\n+            int numberOfRelatedArticles = calculator.countNumberOfRelatedArticles(article);\n+            article.setNumberOfRelatedArticles(numberOfRelatedArticles);\n+            database.save(article);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.sample;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.util.RequiresValidState;\n+\n+public class MockitoSampleTest extends RequiresValidState {\n+    \n+    @Test\n+    public void managerCountsArticlesAndSavesThemInTheDatabase() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        stub(mockCalculator.countArticles(\"Guardian\")).andReturn(12);\n+        stub(mockCalculator.countArticlesInPolish(\"Guardian\")).andReturn(5);\n+        \n+        articleManager.updateArticleCounters(\"Guardian\");\n+        \n+        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 12);\n+        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 5);\n+        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 7);\n+        \n+        verifyNoMoreInteractions(mockDatabase);\n+    }\n+    \n+    @Test\n+    public void managerCountsArticlesUsingCalculator() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        articleManager.updateArticleCounters(\"Guardian\");\n+\n+        verify(mockCalculator).countArticles(\"Guardian\");\n+        verify(mockCalculator).countArticlesInPolish(\"Guardian\");\n+        \n+        verifyNoMoreInteractions(mockCalculator);\n+    }\n+    \n+    @Test\n+    public void managerSavesArticlesInTheDatabase() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        articleManager.updateArticleCounters(\"Guardian\");\n+\n+        verify(mockDatabase).updateNumberOfArticles(\"Guardian\", 0);\n+        verify(mockDatabase).updateNumberOfPolishArticles(\"Guardian\", 0);\n+        verify(mockDatabase).updateNumberOfEnglishArticles(\"Guardian\", 0);\n+        \n+        verifyNoMoreInteractions(mockDatabase);\n+    }\n+    \n+    @Test\n+    public void managerUpdatesNumberOfRelatedArticles() {\n+        ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);\n+        ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);\n+        \n+        ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);\n+\n+        Article articleOne = new Article();\n+        Article articleTwo = new Article();\n+        Article articleThree = new Article();\n+        \n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(1);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(12);\n+        stub(mockCalculator.countNumberOfRelatedArticles(articleOne)).andReturn(0);\n+        \n+        stub(mockDatabase.getArticlesFor(\"Guardian\")).andReturn(Arrays.asList(articleOne, articleTwo, articleThree)); \n+        \n+        articleManager.updateRelatedArticlesCounters(\"Guardian\");\n+\n+        verify(mockDatabase).save(articleOne);\n+        verify(mockDatabase).save(articleTwo);\n+        verify(mockDatabase).save(articleThree);\n+    }\n+}", "timestamp": 1196985427, "metainfo": ""}