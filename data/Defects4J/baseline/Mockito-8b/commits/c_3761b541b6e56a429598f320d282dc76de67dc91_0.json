{"sha": "3761b541b6e56a429598f320d282dc76de67dc91", "log": "asdfasdfa sdf  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40567", "commit": "\n--- a/src/org/mockito/configuration/ConfigurationSupport.java\n+++ b/src/org/mockito/configuration/ConfigurationSupport.java\n /**\n  * Helps configuring Mockito\n  * <p>\n+ * See examples in javadoc for {@link MockitoConfiguration}\n+ * <p>\n  * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n  * You may want to check out the project from svn repository to easily browse Mockito's test code.\n  */\n     \n     /**\n      * this is what Mockito returns by default for given invocation \n+     * <p>\n+     * See examples in javadoc for {@link MockitoConfiguration}\n      * \n      * @param invocation\n      * @return default return value\n     }\n \n     /**\n+     * returns true if Mockito CAN create mocks of the clazz\n+     * <p>\n+     * See examples in javadoc for {@link MockitoConfiguration}\n+     * \n      * @param clazz\n-     * @return returns true if Mockito CAN create mocks of the clazz\n+     * @return \n      */\n     public static boolean isMockable(Class<?> clazz) {\n         return !Modifier.isFinal(clazz.getModifiers());\n--- a/src/org/mockito/configuration/DefaultReturnValues.java\n+++ b/src/org/mockito/configuration/DefaultReturnValues.java\n         return returnValueFor(returnType);\n     }\n     \n-    protected Object returnValueFor(Class<?> type) {\n+    Object returnValueFor(Class<?> type) {\n         if (type.isPrimitive()) {\n             return primitiveOf(type);\n         } else if (isPrimitiveWrapper(type)) {\n--- a/src/org/mockito/configuration/MockitoConfiguration.java\n+++ b/src/org/mockito/configuration/MockitoConfiguration.java\n \n /**\n  * Allows configuring Mockito to enable custom 'mocking style'. \n- * It can be useful when working with legacy code, etc. \n+ * It can be useful when working with legacy code, etc.\n  * <p>\n  * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n  * You may want to check out the project from svn repository to easily browse Mockito's test code.\n  * <p>\n- * This class is thread-safe but every thread has own instance of configuration (ThreadLocal pattern).\n+ * Basic example:\n+ * <pre>\n+ *   //create an implementation of ReturnValues interface\n+ *   \n+ *   public class FriendlyReturnValues implements ReturnValues {\n+ *\n+ *   public Object valueFor(InvocationOnMock invocation) {\n+ *       \n+ *       Class<?> returnType = invocation.getMethod().getReturnType();\n+ *       \n+ *       Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n+ *       \n+ *       if (defaultReturnValue != null || !ConfigurationSupport.isMockable(returnType)) {\n+ *           return defaultReturnValue;\n+ *       } else { \n+ *           return Mockito.mock(returnType);\n+ *       }\n+ *   }\n+ *   \n+ *   //finally, change the configuration: \n+ *   \n+ *   MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());\n+ * </pre>\n  * <p>\n- * Configuring mockito is a new concept that we evaluate. Please let us know if you find it useful. \n+ * Configuring Mockito is a new concept that we evaluate. Please let us know if you find it useful/harmful. \n  */\n public class MockitoConfiguration {\n     \n     }\n     \n     /**\n-     * @return instance of a configuration \n+     * gets the singleton instance of a configuration\n+     * \n+     * @return configuration \n      */\n     public static MockitoConfiguration instance() {\n         if (CONFIG.get() == null) {\n     }\n     \n     /**\n-     * @return current {@link ReturnValues} implementation\n+     * returns currently set {@link ReturnValues}\n+     * \n+     * @return\n      */\n     public ReturnValues getReturnValues() {\n         return returnValues;\n \n     /**\n      * Sets {@link ReturnValues} implementation. \n-     * Allows to change the default (unstubbed) values returned by mocks. \n+     * <p>\n+     * Allows to change the values returned by unstubbed methods. \n      * \n      * @param returnValues\n      */\n--- a/src/org/mockito/configuration/MockitoProperties.java\n+++ b/src/org/mockito/configuration/MockitoProperties.java\n  */\n public class MockitoProperties {\n \n+    /**\n+     * Mockito uses it by default to get return values for unstubbed invocations \n+     */\n     public static final ReturnValues DEFAULT_RETURN_VALUES =  new DefaultReturnValues();\n    \n }\n--- a/src/org/mockito/configuration/ReturnValues.java\n+++ b/src/org/mockito/configuration/ReturnValues.java\n \n /**\n  * Configures return values for an unstubbed invocation\n+ * <p>\n+ * See examples in javadoc for {@link MockitoConfiguration}\n  */\n public interface ReturnValues {\n \n     /**\n-     * @param invocation\n-     * @return default return value if no stubbed value found\n+     * See examples in javadoc for {@link MockitoConfiguration}\n+     * \n+     * @param invocation placeholder for mock and a method\n+     * @return the return value\n      */\n     Object valueFor(InvocationOnMock invocation);\n }\n--- a/src/org/mockito/invocation/InvocationOnMock.java\n+++ b/src/org/mockito/invocation/InvocationOnMock.java\n \n import java.lang.reflect.Method;\n \n+/**\n+ * An invocation on a mock\n+ * <p>\n+ * A placeholder for mock, the method that was called and the arguments that were passed.\n+ */\n public interface InvocationOnMock {\n \n+    /**\n+     * returns the mock object \n+     * \n+     * @return mock object\n+     */\n     Object getMock();\n \n+    /**\n+     * returns the method\n+     * \n+     * @return method\n+     */\n     Method getMethod();\n \n+    /**\n+     * returns arguments passed to the method\n+     * \n+     * @return arguments\n+     */\n     Object[] getArguments();\n-\n }\n--- a/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n /**\n  * tries to return mocks instead of nulls\n  */\n-public final class FriendlyReturnValues implements ReturnValues {\n+public class FriendlyReturnValues implements ReturnValues {\n \n     public Object valueFor(InvocationOnMock invocation) {\n-        \n+\n         Class<?> returnType = invocation.getMethod().getReturnType();\n-        \n+\n         Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n-        \n-        if (defaultReturnValue != null) {\n+\n+        if (defaultReturnValue != null || !ConfigurationSupport.isMockable(returnType)) {\n             return defaultReturnValue;\n-        } else if (ConfigurationSupport.isMockable(returnType)) { \n+        } else {\n             return Mockito.mock(returnType);\n-        } else {\n-            return defaultReturnValue;\n         }\n     }\n }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n \n         private Object returnFake(InvocationOnMock invocation) {\n            \n-            Class<?> returnType = invocation.getMethod().getReturnType();\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n+            \n+            Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n \n             if (returnType == String.class) {\n                 return \"\";\n             } else if (returnType == Boolean.TYPE) {\n                 return true;\n-            } else if (ConfigurationSupport.isMockable(returnType)) {\n-                return mock(returnType);\n+            } else if (defaultReturnValue != null || !ConfigurationSupport.isMockable(returnType)) {\n+                return defaultReturnValue;\n             } else {\n-                return ConfigurationSupport.defaultValueFor(invocation);\n+                return mock(returnType);\n             }\n         }\n     }", "timestamp": 1207772555, "metainfo": ""}