{"sha": "72076a82c786cd691b80a01a8e6d741a8b0ad0db", "log": "Fixed issue 151. Merged from trunk. Mockito should not be so defensive and clear potential stubbed call on creation of new mock  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401774", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n-        return MOCKITO_CORE.mock(classToMock, mockSettings, true);\n+        return MOCKITO_CORE.mock(classToMock, mockSettings);\n     }\n     \n     /**\n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n-                .defaultAnswer(CALLS_REAL_METHODS), true); \n+                .defaultAnswer(CALLS_REAL_METHODS));\n     }\n \n     /**\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n     private final MockUtil mockUtil = new MockUtil();\n     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n-    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {\n+    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n         mockingProgress.validateState();\n-        if (shouldResetOngoingStubbing) {\n-            mockingProgress.resetOngoingStubbing();\n-        }\n         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n             return null;\n         }\n         \n-        return mockitoCore.mock(clazz, new MockSettingsImpl().defaultAnswer(this), false);\n+        return mockitoCore.mock(clazz, new MockSettingsImpl().defaultAnswer(this));\n     }\n }\n--- a/test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java\n+++ b/test/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java\n         // second test\n         assertOngoingStubbingIsReset();\n     }\n-    \n-    @Test\n-    public void shouldResetOngoingStubbingOnMock() {\n-        mock.booleanReturningMethod();\n-        mock(IMethods.class);\n-        assertOngoingStubbingIsReset();\n-    }\n-    \n+\n     @Test\n     public void shouldResetOngoingStubbingOnInOrder() {\n         mock.booleanReturningMethod();\n         assertOngoingStubbingIsReset();\n     }\n \n-    @Test\n-    public void shouldResetOngoingStubbingOnVerifyNoMoreInteractions() {\n-        mock.booleanReturningMethod();\n-        IMethods mock2 = mock(IMethods.class);\n-        verifyNoMoreInteractions(mock2);\n-        assertOngoingStubbingIsReset();\n-    }\n-\n     private void assertOngoingStubbingIsReset() {\n         try {\n             //In real, there might be a call to real object or a final method call\n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n     \n     @Test\n     public void unfinishedStubbingCleansUpTheState() {\n+        reset(mock);\n         try {\n             when(\"\").thenReturn(\"\");\n             fail(); ", "timestamp": 1258900547, "metainfo": ""}