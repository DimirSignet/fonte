{"sha": "5e3a9dcd5c4acbe5b87d8c458df7f8a925ebe1e6", "log": "remove redundant static keyword  inner interfaces are implicitly static", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n      * See original {@link OngoingStubbing}\n      * @since 1.8.0\n      */\n-    public static interface BDDMyOngoingStubbing<T> {\n+    public interface BDDMyOngoingStubbing<T> {\n         \n         /**\n          * See original {@link OngoingStubbing#thenAnswer(Answer)}\n      * See original {@link Stubber}\n      * @since 1.8.0\n      */\n-    public static interface BDDStubber {\n+    public interface BDDStubber {\n         /**\n          * See original {@link Stubber#doAnswer(Answer)}\n          * @since 1.8.0\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n      *\n      * @see #enableSerializationAcrossJVM(org.mockito.mock.MockCreationSettings)\n      */\n-    public static interface AcrossJVMMockitoMockSerializable {\n+    public interface AcrossJVMMockitoMockSerializable {\n         public Object writeReplace() throws java.io.ObjectStreamException;\n     }\n }\n--- a/src/org/mockito/internal/util/collections/ListUtil.java\n+++ b/src/org/mockito/internal/util/collections/ListUtil.java\n         return filtered;\n     }\n     \n-    public static interface Filter<T> {\n+    public interface Filter<T> {\n         boolean isOut(T object);\n     }\n }\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n      * @see WildCardBoundedType\n      * @see <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1\">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1</a>\n      */\n-    public static interface BoundedType extends Type {\n+    public interface BoundedType extends Type {\n         Type firstBound();\n \n         Type[] interfaceBounds();\n--- a/test/org/mockito/internal/InvalidStateDetectionTest.java\n+++ b/test/org/mockito/internal/InvalidStateDetectionTest.java\n         verify(mock).simpleMethod();\n     }\n     \n-    private static interface DetectsInvalidState {\n+    private interface DetectsInvalidState {\n         void detect(IMethods mock);\n     }\n     \n--- a/test/org/mockito/internal/util/reflection/FieldInitializerTest.java\n+++ b/test/org/mockito/internal/util/reflection/FieldInitializerTest.java\n         public AbstractStaticClass() {}\n     }\n \n-    static interface Interface {\n+    interface Interface {\n \n     }\n \n--- a/test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java\n+++ b/test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java\n \t\t\n \t}\n \t\n-\tpublic static interface ITarget {\n+\tpublic interface ITarget {\n \n \t\tpublic String targetMethod(String arg);\n \t}\n--- a/test/org/mockitousage/bugs/CovariantOverrideTest.java\n+++ b/test/org/mockitousage/bugs/CovariantOverrideTest.java\n //see issue 101\n public class CovariantOverrideTest extends TestBase {\n    \n-    public static interface ReturnsObject {\n+    public interface ReturnsObject {\n         Object callMe();\n     }\n \n-    public static interface ReturnsString extends ReturnsObject {\n+    public interface ReturnsString extends ReturnsObject {\n         // Java 5 covariant override of method from parent interface\n         String callMe();\n     }\n--- a/test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java\n+++ b/test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java\n \n     }\n \n-    static interface Service {\n+    interface Service {\n \n         String verySlowMethod();\n \n--- a/test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java\n+++ b/test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java\n     }\n \n \n-    public static interface ReloadClassPredicate {\n+    public interface ReloadClassPredicate {\n         boolean acceptReloadOf(String qualifiedName);\n     }\n }", "timestamp": 1392726042, "metainfo": ""}