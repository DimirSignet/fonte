{"sha": "c01c0aa8acfe7d461e1d3959226c8433678bd69b", "log": "In order to make ArgumentCaptor working nicely without NPE even is someone is creating AC for primitive classes. See issue 99.  --HG-- rename : test/org/mockito/TestArgumentCaptorTest.java => test/org/mockito/ArgumentCaptorTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401568", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n  */\n public class ArgumentCaptor<T> {\n     \n+    HandyReturnValues handyReturnValues = new HandyReturnValues();\n+\n     private final CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();\n     private final Class<T> clazz;\n \n      */\n     public T capture() {\n         Mockito.argThat(capturingMatcher);\n-        return new HandyReturnValues().returnFor(clazz);\n+        return handyReturnValues.returnFor(clazz);\n     }\n \n     /**\n--- a/src/org/mockito/internal/progress/HandyReturnValues.java\n+++ b/src/org/mockito/internal/progress/HandyReturnValues.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.progress;\n+\n+import static org.mockito.internal.util.Primitives.*;\n \n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n-import org.mockito.internal.util.Primitives;\n \n @SuppressWarnings(\"unchecked\")\n public class HandyReturnValues {\n     }\n \n     public <T> T returnFor(Class<T> clazz) {\n-        if (Primitives.isPrimitiveWrapper(clazz)) {\n-            return Primitives.primitiveWrapperOf(clazz);\n-        }\n-        return null;\n+        if (isPrimitiveWrapper(clazz)) {\n+            return primitiveWrapperOf(clazz);\n+        } \n+        return primitiveValueFor(clazz);\n     }\n \n     public Map returnMap() {\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n         return (T) wrapperReturnValues.get(type);\n     }\n     \n-    public static Class<?> primitiveTypeOf(Class<?> clazz) {\n-        return primitiveTypes.get(clazz);\n+    public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {\n+        return (Class<T>) primitiveTypes.get(clazz);\n+    }\n+    \n+    public static <T> T primitiveValueFor(Class<T> primitiveType) {\n+        return (T) primitiveValues.get(primitiveType);\n     }\n     \n     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n+    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n     \n     static {\n         wrapperReturnValues.put(Boolean.class, Boolean.FALSE);\n         primitiveTypes.put(Float.class, Float.TYPE);\n         primitiveTypes.put(Double.class, Double.TYPE);\n     }\n+\n+    static {\n+        primitiveValues.put(boolean.class, false);\n+        primitiveValues.put(char.class, 0);\n+        primitiveValues.put(byte.class, 0);\n+        primitiveValues.put(short.class, 0);\n+        primitiveValues.put(int.class, 0);\n+        primitiveValues.put(long.class, 0);\n+        primitiveValues.put(float.class, 0);\n+        primitiveValues.put(double.class, 0);\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockito/ArgumentCaptorTest.java\n+package org.mockito;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.mockito.internal.progress.HandyReturnValues;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentCaptorTest extends TestBase {\n+    \n+    @Test\n+    public void tellHandyReturnValuesToReturnValueFor() throws Exception {\n+        //given\n+        final Object expected = new Object(); \n+        ArgumentCaptor<Object> argumentCaptor = ArgumentCaptor.forClass(Object.class);\n+        argumentCaptor.handyReturnValues = new HandyReturnValues() {\n+            @Override\n+            public <T> T returnFor(Class<T> clazz) {\n+                return (T) expected;\n+            }\n+        };\n+        \n+        //when\n+        Object returned = argumentCaptor.capture();\n+        \n+        //then\n+        assertEquals(expected, returned);\n+    }\n+    \n+    @After\n+    public void yesIKnowSomeMatchersAreMisplaced() {\n+        resetState();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n+package org.mockito.internal.progress;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+\n+public class HandyReturnValuesTest {\n+\n+    private HandyReturnValues h = new HandyReturnValues();\n+\n+    @Test\n+    public void shouldNotReturnNullForPrimitivesWprappers() throws Exception {\n+        assertNotNull(h.returnFor(Boolean.class));\n+        assertNotNull(h.returnFor(Character.class));\n+        assertNotNull(h.returnFor(Byte.class));\n+        assertNotNull(h.returnFor(Short.class));\n+        assertNotNull(h.returnFor(Integer.class));\n+        assertNotNull(h.returnFor(Long.class));\n+        assertNotNull(h.returnFor(Float.class));\n+        assertNotNull(h.returnFor(Double.class));        \n+    }\n+\n+    @Test\n+    public void shouldNotReturnNullForPrimitives() throws Exception {\n+        assertNotNull(h.returnFor(boolean.class));\n+        assertNotNull(h.returnFor(char.class));\n+        assertNotNull(h.returnFor(byte.class));\n+        assertNotNull(h.returnFor(short.class));\n+        assertNotNull(h.returnFor(int.class));\n+        assertNotNull(h.returnFor(long.class));\n+        assertNotNull(h.returnFor(float.class));\n+        assertNotNull(h.returnFor(double.class));\n+    }\n+\n+    @Test\n+    public void shouldReturnNullForEverythingElse() throws Exception {\n+        assertNull(h.returnFor(Object.class));\n+        assertNull(h.returnFor(String.class));\n+    }\n+}\n--- a/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n+++ b/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n import java.util.List;\n \n import org.fest.assertions.Assertions;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n     EmailService emailService = mock(EmailService.class);\n     Emailer emailer = new Emailer(emailService);\n \n+    @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldAllowAssertionsOnCapturedArgument() {\n         //when\n         emailer.email(11, 12);\n         \n         //then\n-        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n         verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n         List<Person> allValues = argument.getAllValues();\n         \n         emailer.email(11, 12, 13);\n         \n         //then\n-        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n         verify(emailService, atLeastOnce()).sendEmailTo(argument.capture());\n         \n         assertEquals(13, argument.getValue().getAge());\n     @Test\n     public void shouldPrintCaptorMatcher() {\n         //given\n-        ArgumentCaptor<Person> person = new ArgumentCaptor<Person>();\n+        ArgumentCaptor<Person> person = ArgumentCaptor.forClass(Person.class);\n         \n         try {\n             //when\n         emailService.sendEmailTo(null);\n         \n         //then\n-        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n         verify(emailService).sendEmailTo(argument.capture());\n         assertEquals(null, argument.getValue());\n     }\n     @Test\n     public void shouldAllowCapturingForStubbing() {\n         //given\n-        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n         when(emailService.sendEmailTo(argument.capture())).thenReturn(false);\n         \n         //when\n     @Test\n     public void shouldCaptureWhenStubbingOnlyWhenEntireInvocationMatches() {\n         //given\n-        ArgumentCaptor<String> argument = new ArgumentCaptor<String>();\n+        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);\n         when(mock.simpleMethod(argument.capture(), eq(2))).thenReturn(\"blah\");\n         \n         //when\n     \n     @Test\n     public void shouldSaySomethingSmartWhenMisused() {\n-        ArgumentCaptor<Person> argument = new ArgumentCaptor<Person>();\n+        ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);\n         try {\n             argument.getValue();\n             fail();\n         mock.simpleMethod(\"bar\", 2);\n         \n         //when\n-        ArgumentCaptor<String> captor = new ArgumentCaptor<String>();\n+        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n         verify(mock).simpleMethod(captor.capture(), eq(1));\n         \n         //then\n     }\n     \n     @Test\n-    public void shouldCaptureInt() {\n+    public void shouldCaptureIntByCreatingCaptorWithPrimitiveWrapper() {\n         //given\n         IMethods mock = mock(IMethods.class);\n         ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(Integer.class);\n         verify(mock).intArgumentMethod(argument.capture());\n         assertEquals(10, (int) argument.getValue());\n     }\n+\n+    @Test\n+    public void shouldCaptureIntByCreatingCaptorWithPrimitive() throws Exception {\n+        //given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(int.class);\n+        \n+        //when\n+        mock.intArgumentMethod(10);\n+        \n+        //then\n+        verify(mock).intArgumentMethod(argument.capture());\n+        assertEquals(10, (int) argument.getValue());\n+    }\n }", "timestamp": 1248039511, "metainfo": ""}