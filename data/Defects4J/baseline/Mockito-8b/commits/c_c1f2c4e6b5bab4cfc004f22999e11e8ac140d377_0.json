{"sha": "c1f2c4e6b5bab4cfc004f22999e11e8ac140d377", "log": "In order to fixed issue 79 (NPE) added null handling code  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401549", "commit": "\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+        return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n     }\n }\n--- a/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n+++ b/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n     }\n     \n     @Test\n+    public void shouldWorkFineWhenGivenArgIsNull() {\n+        //when\n+        Integer[] suspicious = tool.getSuspiciouslyNotMatchingArgsIndexes((List) Arrays.asList(new Equals(20)), new Object[] {null});\n+        \n+        //then\n+        assertEquals(0, suspicious.length);\n+    }\n+    \n+    @Test\n     public void shouldUseMatchersSafely() {\n         //given\n         List<Matcher> matchers = (List) Arrays.asList(new BaseMatcher() {\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class ActualInvocationHasNullArgumentNPEBugTest extends TestBase {\n+    \n+    public interface Fun {\n+        String doFun(String something);\n+    }\n+\n+    @Test\n+    public void shouldAllowPassingNullArgument() {\n+        //given\n+        Fun mockFun = mock(Fun.class);\n+        when(mockFun.doFun((String) anyObject())).thenReturn(\"value\");\n+\n+        //when\n+        mockFun.doFun(null);\n+\n+        //then\n+        try {\n+            verify(mockFun).doFun(\"hello\");\n+        } catch(AssertionError r) {\n+            //it's ok, we just want to reproduce the bug\n+        }\n+    }\n+}", "timestamp": 1247138638, "metainfo": ""}