{"sha": "cf10abcfb88e365591600c0283c196abc33a7931", "log": "some minor refactorings and documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40216", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.IArgumentMatcher;\n \n+/**\n+ * Method call on a mock object. \n+ * <p>\n+ * Contains sequence number which should be\n+ * globally unique and is used for strict order verification.\n+ * <p>\n+ * Contains stack trace of invocation\n+ */\n public class Invocation {\n \n     private final int sequenceNumber;\n     }\n \n     public String toString(List<IArgumentMatcher> matchers) {\n-        return getMockAndMethodName() + getArgumentsString(matchers);\n+        String mockName = MockNamer.nameForMock(mock);\n+        String methodName = method.getName();\n+        String arguments = getArgumentsString(matchers);\n+        \n+        return mockName + \".\" + methodName + arguments;\n     }\n \n     public String toStringWithSequenceNumber() {\n     }\n \n     public String toStringWithSequenceNumber(List<IArgumentMatcher> matchers) {\n-        return getMockAndMethodNameWithSeqenceNumber() + getArgumentsString(matchers);\n+        String mockName = MockNamer.nameForMock(mock);\n+        String methodName = method.getName();\n+        String arguments = getArgumentsString(matchers);\n+        \n+        return mockName + \"#\" + sequenceNumber + \".\" + methodName + arguments;\n     }\n     \n     public String toStringWithArgumentTypes() {\n         StringBuilder result = new StringBuilder();\n-        result.append(getMockAndMethodName());\n+        result.append((MockNamer.nameForMock(mock) + \".\" + method.getName()));\n         result.append(\"(\");\n         for (Class<?> paramType : getMethod().getParameterTypes()) {\n             result.append(paramType);\n             result.append(\", \");\n         } \n         return result.toString().replaceFirst(\", $\", \"\").concat(\")\");\n-    }\n-    \n-    private String getMockAndMethodName() {\n-        return MockNamer.nameForMock(mock) + \".\" + method.getName();\n-    }\n-    \n-    private String getMockAndMethodNameWithSeqenceNumber() {\n-        return MockNamer.nameForMock(mock) + \"#\" + sequenceNumber + \".\" + method.getName();\n     }\n     \n     private String getArgumentsString(List<IArgumentMatcher> matchers) {", "timestamp": 1197744020, "metainfo": ""}