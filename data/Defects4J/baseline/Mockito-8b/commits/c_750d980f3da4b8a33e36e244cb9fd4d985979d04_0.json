{"sha": "750d980f3da4b8a33e36e244cb9fd4d985979d04", "log": "Growing the release plugin  Getting the author setting / unsetting working correctly. Moving classes around packages. Added impl.", "commit": "\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/exec/DefaultProcessRunner.java\n+package org.mockito.release.exec;\n+\n+import org.mockito.release.notes.util.ReleaseNotesException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.Arrays;\n+\n+class DefaultProcessRunner implements ProcessRunner {\n+\n+    private static Logger LOG = LoggerFactory.getLogger(DefaultProcessRunner.class);\n+    private final File workDir;\n+\n+    DefaultProcessRunner(File workDir) {\n+        this.workDir = workDir;\n+    }\n+\n+    public String run(String... commandLine) {\n+        LOG.info(\"Executing command: {}\", (Object) commandLine);\n+\n+        try {\n+            Process process = new ProcessBuilder(commandLine).directory(workDir).redirectErrorStream(true).start();\n+            return readFully(new BufferedReader(new InputStreamReader(process.getInputStream())));\n+        } catch (Exception e) {\n+            throw new ReleaseNotesException(\"Problems executing command: \" + Arrays.toString(commandLine), e);\n+        }\n+    }\n+\n+    private static String readFully(BufferedReader reader) throws IOException {\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            String line;\n+            while((line = reader.readLine()) != null) {\n+                sb.append(line).append(\"\\n\");\n+            }\n+            return sb.toString();\n+        } finally {\n+            reader.close();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/exec/Exec.java\n+package org.mockito.release.exec;\n+\n+import java.io.File;\n+\n+/**\n+ * Process execution services\n+ */\n+public class Exec {\n+\n+    /**\n+     * Provides process runner for given working dir\n+     */\n+    public static ProcessRunner getProcessRunner(File workDir) {\n+        return new DefaultProcessRunner(workDir);\n+    }\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/exec/ProcessRunner.java\n+package org.mockito.release.exec;\n+\n+/**\n+ * Provides ways to execute external processes\n+ */\n+public interface ProcessRunner {\n+\n+    /**\n+     * Executes given command line and returns the output.\n+     *\n+     * @param commandLine to execute\n+     * @return combined error and standard output.\n+     */\n+    String run(String ... commandLine);\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitAuthor.java\n+package org.mockito.release.git;\n+\n+class DefaultGitAuthor implements GitAuthor {\n+\n+  final String previousUser;\n+  final String previousEmail;\n+\n+  DefaultGitAuthor(String previousUser, String previousEmail) {\n+    this.previousUser = previousUser;\n+    this.previousEmail = previousEmail;\n+  }\n+\n+  public void restoreOriginal() {\n+\n+  }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitTool.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitTool.java\n package org.mockito.release.git;\n \n+import org.mockito.release.exec.ProcessRunner;\n+\n class DefaultGitTool implements GitTool {\n-  public GitAuthor setAuthor(String name, String email) {\n-    return new GitAuthor() {\n-      public void restoreOriginal() {\n+  private final ProcessRunner runner;\n \n-      }\n-    };\n+  public DefaultGitTool(ProcessRunner runner) {\n+    this.runner = runner;\n+  }\n+\n+  public DefaultGitAuthor setAuthor(String name, String email) {\n+    String currentLocalUser = runner.run(\"git\", \"config\", \"--local\", \"user.name\").trim();\n+    String currentLocalEmail = runner.run(\"git\", \"config\", \"--local\", \"user.email\").trim();\n+\n+    runner.run(\"git\", \"config\", \"user.name\", name);\n+    runner.run(\"git\", \"config\", \"user.email\", email);\n+\n+    return new DefaultGitAuthor(currentLocalUser, currentLocalEmail);\n   }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/Git.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/Git.java\n package org.mockito.release.git;\n+\n+import org.mockito.release.exec.ProcessRunner;\n \n public class Git {\n \n-  public static GitTool gitTool() {\n-    return new DefaultGitTool();\n+  public static GitTool gitTool(ProcessRunner runner) {\n+    return new DefaultGitTool(runner);\n   }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n package org.mockito.release.notes;\n \n-import org.gradle.api.Project;\n-import org.mockito.release.notes.exec.Exec;\n+import org.mockito.release.exec.Exec;\n import org.mockito.release.notes.improvements.ImprovementSet;\n import org.mockito.release.notes.improvements.ImprovementsProvider;\n import org.mockito.release.notes.improvements.Improvements;\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitLogProvider.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitLogProvider.java\n package org.mockito.release.notes.vcs;\n \n-import org.mockito.release.notes.exec.ProcessRunner;\n+import org.mockito.release.exec.ProcessRunner;\n \n class GitLogProvider {\n \n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java\n package org.mockito.release.notes.vcs;\n \n-import org.mockito.release.notes.exec.ProcessRunner;\n+import org.mockito.release.exec.ProcessRunner;\n \n /**\n  * Vcs services", "timestamp": 1419881492, "metainfo": ""}