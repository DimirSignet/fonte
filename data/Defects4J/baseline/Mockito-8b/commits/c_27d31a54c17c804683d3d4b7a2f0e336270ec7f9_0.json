{"sha": "27d31a54c17c804683d3d4b7a2f0e336270ec7f9", "log": "buildSrc tidy-up. Removed dependency on Gradle.  Also pushed one final class from groovy->java so that the library can be extracted out of this code.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.File;\n import java.util.Date;\n \n class GitNotesBuilder implements NotesBuilder {\n \n     private static Logger LOG = LoggerFactory.getLogger(GitNotesBuilder.class);\n \n-    private final Project project;\n+    private final File workDir;\n     private final String authTokenEnvVar;\n \n-    GitNotesBuilder(Project project, String authTokenEnvVar) {\n+    /**\n+     * @param workDir the working directory for external processes execution (for example: git log)\n+     * @param authTokenEnvVar the env var that holds the GitHub auth token\n+     */\n+    GitNotesBuilder(File workDir, String authTokenEnvVar) {\n+        this.workDir = workDir;\n         this.authTokenEnvVar = authTokenEnvVar;\n-        this.project = project;\n     }\n \n-    public String buildNotes(String fromRevision, String toRevision) {\n+    public String buildNotes(String version, String fromRevision, String toRevision) {\n         LOG.info(\"Getting release notes between {} and {}\", fromRevision, toRevision);\n \n-        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.getGradleProcessRunner(project));\n+        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.getProcessRunner(workDir));\n         ContributionSet contributions = contributionsProvider.getContributionsBetween(fromRevision, toRevision);\n \n         ImprovementsProvider improvementsProvider = Improvements.getGitHubProvider(authTokenEnvVar);\n         ImprovementSet improvements = improvementsProvider.getImprovements(contributions);\n \n-        return new NotesPrinter().printNotes(project.getVersion().toString(), new Date(), contributions, improvements);\n+        return new NotesPrinter().printNotes(version, new Date(), contributions, improvements);\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java\n import org.gradle.api.Project;\n import org.mockito.release.notes.versions.PreviousVersion;\n import org.mockito.release.notes.versions.Versions;\n+\n+import java.io.File;\n \n /**\n  * Release notes services\n     /**\n      * Release notes build based on git and GitHub.\n      *\n-     * @param project the Gradle project\n+     * @param workDir working directory for executing external processes like 'git log'\n      * @param authTokenEnvVar env variable name that holds the GitHub auth token\n      */\n-    public static NotesBuilder gitHubNotesBuilder(Project project, String authTokenEnvVar) {\n-        return new GitNotesBuilder(project, authTokenEnvVar);\n+    public static NotesBuilder gitHubNotesBuilder(File workDir, String authTokenEnvVar) {\n+        return new GitNotesBuilder(workDir, authTokenEnvVar);\n     }\n \n     /**\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/NotesBuilder.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/NotesBuilder.java\n package org.mockito.release.notes;\n \n+/**\n+ * Builds the release notes text\n+ */\n public interface NotesBuilder {\n \n     /**\n      * Release notes text for contributions between given versions.\n      *\n+     * @param version the version of the release we're building the notes\n      * @param fromRevision valid git revision (can be tag name or HEAD)\n      * @param toRevision valid git revision (can be tag name or HEAD)\n      */\n-    String buildNotes(String fromRevision, String toRevision);\n+    String buildNotes(String version, String fromRevision, String toRevision);\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/exec/Exec.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/exec/Exec.java\n package org.mockito.release.notes.exec;\n \n-import org.gradle.api.Project;\n+import java.io.File;\n \n public class Exec {\n \n-    public static ProcessRunner getGradleProcessRunner(Project project) {\n-        return new GradleProcessRunner(project);\n+    public static ProcessRunner getProcessRunner(File workDir) {\n+        return new DefaultProcessRunner(workDir);\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubAuthToken.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubAuthToken.java\n     public String getToken() {\n         String out = System.getenv(envVariableName);\n         if (out == null) {\n-            throw new ReleaseNotesException(\"Environmental variable '\" + envVariableName + \"' is missing.\");\n+            throw new ReleaseNotesException(\"Environmental variable '\" + envVariableName + \"' is missing.\", null);\n         }\n         return out;\n     }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/util/ReleaseNotesException.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/util/ReleaseNotesException.java\n \n public class ReleaseNotesException extends RuntimeException {\n \n-    public ReleaseNotesException(String message) {\n-        super(message);\n+    public ReleaseNotesException(String message, Throwable cause) {\n+        super(message, cause);\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/versions/FromNotesContent.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/versions/FromNotesContent.java\n         Pattern p = Pattern.compile(\"(?s)^### (.+?) .*\");\n         Matcher m = p.matcher(releaseNotesContent);\n         if(!m.matches()) {\n-            throw new ReleaseNotesException(\"Unable to parse previous version from release notes content: \" + releaseNotesContent);\n+            throw new ReleaseNotesException(\"Unable to parse previous version from release notes content: \" + releaseNotesContent, null);\n         }\n         return m.group(1);\n     }", "timestamp": 1416674238, "metainfo": ""}