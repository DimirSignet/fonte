{"sha": "efd204344323dda9ef352bb6271f7ecc77d9e473", "log": "fixed some documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40259", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n \n /**\n- * Enables mock objects creation, verification and stubbing.\n+ * Enables mocks creation, verification and stubbing.\n+ * <p>\n+ * Following examples mock List or LinkedList, because everyone knows their interface (methods like add(), get(), clear() will be used). \n+ * <br>You probably wouldn't mock List class 'in real'.  \n  * \n  * <h3>Let's verify!</h3>\n  * \n  * </pre>\n  * \n  * <p>\n- * Strict verification is required only in some cases and in most cases ordinary verification is enough. \n+ * Strict verification is required only in some cases and mostly ordinary verification is enough. \n  * \n  * <h3>Making sure no interactions happened on mock</h3>\n  * \n      * Creates mock object of given class or interface.\n      * <p>\n      * \n-     * See examples in javadoc for {@link Mockito#stub}\n-     * \n-     * @param classToMock\n+     * See examples in javadoc for {@link Mockito}\n+     * \n+     * @param classToMock class or interface to mock\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock) {\n     /**\n      * Stubs with return value or exception. E.g:\n      * <pre>\n-     *   stub(mock.countElements()).toReturn(10);\n+     *   stub(mock.someMethod()).toReturn(10);\n      *   \n-     *   stub(mock.countElements()).toThrow(new RuntimeException());\n-     * </pre>\n-     * <p>\n-     * Trying to stub void method? Look here: {@link Mockito#stubVoid}\n-     * \n-     * See examples in javadoc for {@link Mockito#stub}\n-     * \n-     * @param methodCallToStub\n+     *   stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n+     * </pre>\n+     * <p>\n+     * For stubbing void methods with throwables see: {@link Mockito#stubVoid}\n+     * <p>\n+     * See examples in javadoc for {@link Mockito}\n+     * \n+     * @param methodCallToStub method call\n      * @return OngoingStubbing object to set stubbed value/exception\n      */\n     @SuppressWarnings(\"unchecked\")\n      *   verify(mock).someMethod(\"some arg\");\n      * </pre>\n      * \n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param mock to be verified\n      * @return mock object itself\n      *   verify(mock, atLeastOnce()).someMethod(\"should be called at least once\");\n      * </pre>\n      * \n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param mock to be verified\n      * @param mode times(x) or atLeastOnce()\n      * else was invoked on your mocks.\n      * <p>\n      * It's a good pattern not to use this method in every test method. Test\n-     * methods should focus on different behavior/interaction and it's not\n+     * methods should focus on different behavior/interaction and it's usually not\n      * necessary to call verifyNoMoreInteractions() all the time\n      * <p>\n      * Stubbed invocations are also treated as interactions.\n      * //oups: 'doSomethingUnexpected()' is unexpected\n      * </pre>\n      * \n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param mocks to be verified\n      */\n      * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n      * the first one is more explicit and can read better.\n      * <p>\n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param mocks to be verified\n      */\n     /**\n      * Stubs void method with exception. E.g:\n      * <pre>\n-     *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito#stub}\n+     *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param mock to stub\n      * @return stubbable object that allows stubbing with throwable\n      *   strictly.verify(secondMock).add(\"should be called second\");\n      * </pre>\n      *\n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param mocks to be verified in strict order\n      * \n      *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\n      * </pre>\n      * \n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @return verification mode\n      */\n      *   verify(mock, times(2)).someMethod(\"some arg\");\n      * </pre>\n      * \n-     * See examples in javadoc for {@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito}\n      * \n      * @param wantedNumberOfInvocations wanted number of invocations \n      * \n--- a/src/org/mockito/Strictly.java\n+++ b/src/org/mockito/Strictly.java\n      * <pre>\n      * Strictly strictly = strictly(firstMock, secondMock);\n      * \n-     * strictly.verify(firstMock).add(\"should be called first\");\n-     * strictly.verify(secondMock).add(\"should be called second\");\n+     * strictly.verify(firstMock).someMethod(\"should be called first\");\n+     * strictly.verify(secondMock).someMethod(\"should be called second\");\n      * </pre>\n      * <p>\n      * \n      * <pre>\n      * Strictly strictly = strictly(firstMock, secondMock);\n      * \n-     * strictly.verify(firstMock, times(2)).add(\"should be called first two times\");\n-     * strictly.verify(secondMock, atLeastOnce()).add(\"should be called second\");\n+     * strictly.verify(firstMock, times(2)).someMethod(\"should be called first two times\");\n+     * strictly.verify(secondMock, atLeastOnce()).someMethod(\"should be called second\");\n      * </pre>\n      * <p>\n      * \n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n  * Stubs with return value or exception. E.g:\n  * \n  * <pre>\n- * stub(mock.countElements()).toReturn(10);\n+ * stub(mock.someMethod()).toReturn(10);\n  * \n- * stub(mock.countElements()).toThrow(new RuntimeException());\n+ * stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n  * </pre>\n  * \n  * See examples in javadoc for {@link Mockito#stub}\n     /**\n      * Stub mock object with given return value. E.g:\n      * <pre>\n-     * stub(mock.countElements()).toReturn(10);\n+     * stub(mock.someMethod()).toReturn(10);\n      * </pre>\n      * \n      * See examples in javadoc for {@link Mockito#stub}\n     /**\n      * Stub mock object with throwable that will be thrown on method invocation. E.g:\n      * <pre>\n-     * stub(mock.countElements()).toThrow(new RuntimeException());\n+     * stub(mock.someMethod()).toThrow(new RuntimeException());\n      * </pre>\n      *\n      * If throwable is a checked exception then it has to \n--- a/src/org/mockito/internal/stubbing/StubbedMethodSelector.java\n+++ b/src/org/mockito/internal/stubbing/StubbedMethodSelector.java\n  * Chooses void method for stubbing with throwable. E.g:\n  * \n  * <pre>\n- * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+ * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n  * </pre>\n  * \n  * See examples in javadoc for {@link Mockito#stubVoid}\n      * Choose void method for stubbing with throwable. E.g:\n      * \n      * <pre>\n-     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n      * </pre>\n      * \n      * If throwable is a checked exception then it has to match one of the", "timestamp": 1199578836, "metainfo": ""}