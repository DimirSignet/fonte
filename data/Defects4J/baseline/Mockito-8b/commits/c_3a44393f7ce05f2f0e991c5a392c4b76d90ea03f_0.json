{"sha": "3a44393f7ce05f2f0e991c5a392c4b76d90ea03f", "log": "Moved configuration to appropriate package Moved experimental runner yet again in some different package  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401210", "commit": "\n--- /dev/null\n+++ b/src/org/junit/experimental/VerboseMockitoJUnitRunner.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.junit.mockito.experimental;\n+\n+import org.junit.runner.notification.Failure;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.InitializationError;\n+import org.mockito.internal.debugging.DebuggingInfo;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.util.MockitoLogger;\n+import org.mockito.internal.util.MockitoLoggerImpl;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+/**\n+ * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n+ * <p>\n+ * Experimental implementation that suppose to improve tdd/testing experience. \n+ * Don't hesitate to send feedback to mockito@googlegroups.com\n+ * <b>It is very likely it will change in the next version!</b>\n+ * <p>\n+ * This runner does exactly what {@link MockitoJUnitRunner} does but also  \n+ * prints warnings that might be useful. \n+ * The point is that Mockito should help the tdd developer to quickly figure out if the test fails for the right reason. \n+ * Then the developer can implement the functionality. \n+ * Also when the test fails it should be easy to figure out why the test fails. \n+ * <p>\n+ * Sometimes when the test fails, the underlying reason is that stubbed method was called with wrong arguments. \n+ * Sometimes it fails because one forgets to stub a method or forgets to call a stubbed method. \n+ * All above problems are not immediately obvious.\n+ * <p>\n+ * One way of approaching this problem is full-blown 'expect' API. \n+ * However it means the 'expectations upfront' business which is not in line with core Mockito concepts.\n+ * After all, the essence of testing are <b>explicit assertions</b> that are described consistently at the <b>bottom of the test</b> method.\n+ * <p>\n+ * Here's the experiment: a warning is printed to the standard output if the test fails.\n+ * Also, you get a clickabe link to the line of code. You can immediately jump to the place in code where the potential problem is.\n+ * <p> \n+ * Let's say your test fails on assertion. \n+ * Let's say the underlying reason is a stubbed method that was called with different arguments:\n+ * <pre>\n+ * //test:\n+ * Dictionary dictionary = new Dictionary(translator);\n+ * when(translator.translate(\"Mockito\")).thenReturn(\"cool framework\");\n+ * String translated = dictionary.search(\"Mockito\");\n+ * assertEquals(\"cool framework\", translated);\n+ * \n+ * //code:\n+ * public String search(String word) {\n+ *     ...\n+ *     return translator.translate(\"oups\");\n+ *\n+ * </pre>\n+ * On standard output you'll see something like that:\n+ * <pre>\n+ * [Mockito] Warning - stubbed method called with different arguments.\n+ * Stubbed this way:\n+ * translator.translate(\"Mockito\");\n+ * org.dictionary.SmartDictionaryTest.shouldFindTranslation(SmartDictionaryTest.java:27)\n+ *  \n+ * But called with different arguments:\n+ * translator.translate(\"oups\");\n+ * org.dictionary.SmartDictionary.search(SmartDictionary.java:15)\n+ * </pre>\n+ * <p>\n+ * Note that it is just a warning, not an assertion. \n+ * The test fails on assertion because it's the assertion's duty to document what the test stands for and what behavior it proves. \n+ * Warnings just makes it quicker to figure out if the test fails for the right reason.\n+ * <p>\n+ * Note that code links printed to the console are clickable in any decent IDE (e.g. Eclipse).\n+ * <p>\n+ * So far I identified 3 cases when warnings are printed:\n+ * <li>unstubbed method</li>\n+ * <li>unsued stub</li>\n+ * <li>stubbed method but called with different arguments</li> \n+ * <p>\n+ * <br/>\n+ * This runner lives under org.junit.mockito package \n+ * so that it automatically takes advantage on clean stack traces in most IDEs \n+ * <p>\n+ * Do you think it is useful or not? Drop us an email at mockito@googlegroups.com\n+ */\n+public class VerboseMockitoJUnitRunner extends MockitoJUnitRunner {\n+\n+    private final MockitoLogger logger;\n+    \n+    public VerboseMockitoJUnitRunner(Class<?> klass) throws InitializationError {\n+        this(klass, new MockitoLoggerImpl());\n+    }\n+    \n+    public VerboseMockitoJUnitRunner(Class<?> klass, MockitoLogger logger) throws InitializationError {\n+        super(klass);\n+        this.logger = logger;\n+    }\n+    \n+    //this is what is really executed when the test runs\n+    static interface JunitTestBody {\n+        void run(RunNotifier notifier);\n+    }\n+    \n+    @Override\n+    public void run(RunNotifier notifier) {\n+        this.run(notifier, new JunitTestBody() {\n+            public void run(RunNotifier notifier) {\n+                VerboseMockitoJUnitRunner.super.run(notifier);\n+            }\n+        });\n+    }\n+    \n+    public void run(RunNotifier notifier, JunitTestBody junitTestBody) {\n+        MockingProgress progress = new ThreadSafeMockingProgress();\n+        DebuggingInfo debuggingInfo = progress.getDebuggingInfo();\n+        \n+        beforeRun(notifier, debuggingInfo);\n+        \n+        junitTestBody.run(notifier);\n+        \n+        afterRun(debuggingInfo);\n+    }\n+\n+    private void afterRun(final DebuggingInfo debuggingInfo) {\n+        debuggingInfo.clearData();\n+    }\n+\n+    private void beforeRun(RunNotifier notifier, final DebuggingInfo debuggingInfo) {\n+        debuggingInfo.collectData();\n+\n+        RunListener listener = new RunListener() {\n+            @Override public void testFailure(Failure failure) throws Exception {\n+                debuggingInfo.printWarnings(logger);\n+            }\n+        };\n+        \n+        notifier.addListener(listener);\n+    }\n+}", "timestamp": 1232113808, "metainfo": ""}