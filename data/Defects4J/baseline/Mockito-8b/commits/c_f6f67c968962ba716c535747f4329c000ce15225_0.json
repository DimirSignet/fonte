{"sha": "f6f67c968962ba716c535747f4329c000ce15225", "log": "added one more example and restructured packages a little bit  --HG-- rename : test/org/mockitousage/examples/configure/MakesMocksNotToReturnNulls.java => test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java rename : test/org/mockitousage/examples/configure/AllowsFakingReturnValues.java => test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40522", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/configuration/BaseReturnValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.configuration;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public abstract class BaseReturnValues implements ReturnValues {\n+    \n+    private DefaultReturnValues defaultReturnValues = new DefaultReturnValues();\n+    \n+    public Object valueFor(InvocationOnMock invocation) {\n+        Object returnByDefault = defaultReturnValues.valueFor(invocation);\n+        Class<?> returnType = invocation.getMethod().getReturnType();\n+        if (returnByDefault != null || returnType == Void.TYPE) {\n+            return returnByDefault;\n+        }\n+        return returnValueFor(invocation);\n+    }\n+\n+    protected abstract Object returnValueFor(InvocationOnMock invocation);\n+}\n--- a/src/org/mockito/configuration/DefaultReturnValues.java\n+++ b/src/org/mockito/configuration/DefaultReturnValues.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.invocation.InvocationOnMock;\n \n+/**\n+ * Used by default by every Mockito mock\n+ */\n public class DefaultReturnValues implements ReturnValues {\n     \n     public Object valueFor(InvocationOnMock invocation) {\n             return new LinkedHashMap<Object, Object>();\n         }       \n         \n-        //let's not care about the rest of collections\n+        //Let's not care about the rest of collections.\n+        //Don't worry about primitives also: Null is going to be \n+        //automatically changed into appropriate primitive value by cglib\n         return null;\n     }\n }\n--- a/test/org/mockitousage/MultiThreadedTest.java\n+++ b/test/org/mockitousage/MultiThreadedTest.java\n import org.mockito.internal.verification.VerifyingRecorderTest;\n import org.mockitousage.binding.BridgeMethodPuzzleTest;\n import org.mockitousage.binding.OverloadingPuzzleTest;\n-import org.mockitousage.examples.configure.ConfiguringDefaultReturnValuesForSelectedMocksTest;\n-import org.mockitousage.examples.configure.ConfiguringMocksToReturnFakesTest;\n-import org.mockitousage.examples.configure.ConfiguringDefaultReturnValuesTest;\n+import org.mockitousage.examples.configure.withbaseclass.ConfiguringDefaultReturnValuesUsingBaseClassTest;\n+import org.mockitousage.examples.configure.withrunner.ConfiguringDefaultReturnValuesUsingRunnerTest;\n+import org.mockitousage.examples.configure.withstaticutility.ConfiguringSelectedMocksToReturnFakesTest;\n import org.mockitousage.examples.use.ExampleTest;\n import org.mockitousage.matchers.ComparableMatchersTest;\n import org.mockitousage.matchers.CustomMatchersTest;\n \n         public void run() {\n             Result result = JUnitCore.runClasses(\n-                    ConfiguringDefaultReturnValuesForSelectedMocksTest.class,\n-                    ConfiguringDefaultReturnValuesTest.class,\n-                    ConfiguringMocksToReturnFakesTest.class,\n+                    ConfiguringDefaultReturnValuesUsingBaseClassTest.class,\n+                    ConfiguringDefaultReturnValuesUsingRunnerTest.class,\n+                    ConfiguringSelectedMocksToReturnFakesTest.class,\n                     EqualsTest.class,\n                     ListUtilTest.class,\n                     MockingProgressImplTest.class,\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/ConfiguringDefaultReturnValuesUsingBaseClassTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure.withbaseclass;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+\n+public class ConfiguringDefaultReturnValuesUsingBaseClassTest extends MakesMocksNotToReturnNulls {\n+    \n+    @Test\n+    public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {\n+        MyObject m = mock(MyObject.class);\n+        //mocks don't return nulls any more...\n+        MyObject returned = m.foo();\n+        assertNotNull(returned);\n+        assertNotNull(returned.foo());\n+    }\n+\n+    interface MyObject {\n+        MyObject foo();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n+package org.mockitousage.examples.configure.withbaseclass;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.configuration.DefaultReturnValues;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class MakesMocksNotToReturnNulls {\n+    \n+    @Before\n+    public void configureMockito() {\n+        //setting custom return values\n+        MockitoConfiguration.instance().setReturnValues(new MyDefaultReturnValues());\n+        //initializing annotated mocks\n+        MockitoAnnotations.initMocks(this);\n+    }\n+    \n+    @After\n+    public void resetReturnValuesToDefaults() {\n+        //I don't want mocks from other tests to be reconfigured\n+        MockitoConfiguration.instance().resetReturnValues();\n+    }\n+    \n+    private final class MyDefaultReturnValues implements ReturnValues {\n+        public Object valueFor(InvocationOnMock invocation) {\n+            //get the default return value\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n+                return value;\n+            } else {\n+                //in case the default return value is null and method is not void, return new mock:\n+                return Mockito.mock(invocation.getMethod().getReturnType());\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/withrunner/ConfiguringDefaultReturnValuesUsingRunnerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure.withrunner;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(MakesMocksNotToReturnNulls.class)\n+public class ConfiguringDefaultReturnValuesUsingRunnerTest {\n+    \n+    @Test\n+    public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {\n+        MyObject m = mock(MyObject.class);\n+        //mocks don't return nulls any more...\n+        MyObject returned = m.foo();\n+        assertNotNull(returned);\n+        assertNotNull(returned.foo());\n+    }\n+\n+    interface MyObject {\n+        MyObject foo();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java\n+package org.mockitousage.examples.configure.withrunner;\n+\n+import org.junit.internal.runners.InitializationError;\n+import org.junit.internal.runners.JUnit4ClassRunner;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.configuration.DefaultReturnValues;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class MakesMocksNotToReturnNulls extends JUnit4ClassRunner {\n+    \n+    public MakesMocksNotToReturnNulls(Class<?> klass) throws InitializationError {\n+        super(klass);\n+    }\n+    \n+    @Override\n+    protected Object createTest() throws Exception {\n+        Object test = super.createTest();\n+        //setting up custom return values\n+        MockitoConfiguration.instance().setReturnValues(new MyDefaultReturnValues());\n+        //initializing annotated mocks\n+        MockitoAnnotations.initMocks(test);\n+        return test;\n+    }\n+\n+    @Override\n+    public void run(RunNotifier notifier) {\n+        super.run(notifier);\n+        MockitoConfiguration.instance().resetReturnValues();\n+    }\n+    \n+    private final class MyDefaultReturnValues implements ReturnValues {\n+        public Object valueFor(InvocationOnMock invocation) {\n+            //get the default return value\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n+                return value;\n+            } else {\n+                //in case the default return value is null and method is not void, return new mock\n+                return Mockito.mock(invocation.getMethod().getReturnType());\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+package org.mockitousage.examples.configure.withstaticutility;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.mockito.configuration.BaseReturnValues;\n+import org.mockito.configuration.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+public class AllowsFakingReturnValues {\n+    \n+    public static void fakeReturnValues(Object ... mocks) {\n+        FakeReturnValues fakeReturnValues = getFakeReturnValues();\n+        fakeReturnValues.configure(mocks);\n+    }\n+    \n+    private static FakeReturnValues getFakeReturnValues() {\n+        MockitoConfiguration config = MockitoConfiguration.instance();\n+        ReturnValues current = config.getReturnValues();\n+        //if my custom return values are NOT yet set, do it \n+        if (!(current instanceof FakeReturnValues)) {\n+            config.setReturnValues(new FakeReturnValues());\n+        }\n+        return (FakeReturnValues) config.getReturnValues();\n+    }\n+\n+    private static final class FakeReturnValues extends BaseReturnValues {\n+        \n+        private Set<Object> mocksReturningFakes = new HashSet<Object>();\n+\n+        public Object returnValueFor(InvocationOnMock invocation) {\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n+            if (mocksReturningFakes.contains(invocation.getMock())) {\n+                return returnFake(returnType);\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        public void configure(Object ... mocks) {\n+            mocksReturningFakes.addAll(Arrays.asList(mocks));\n+        }\n+\n+        private Object returnFake(Class<?> returnType) {\n+            if (returnType == String.class) {\n+                return \"\";\n+            } else if (returnType == Boolean.TYPE) {\n+                return true;\n+            } else {\n+                return mock(returnType);\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/ConfiguringSelectedMocksToReturnFakesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure.withstaticutility;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+import static org.mockitousage.examples.configure.withstaticutility.AllowsFakingReturnValues.*;\n+\n+import org.junit.Test;\n+\n+public class ConfiguringSelectedMocksToReturnFakesTest {\n+    \n+    @Test\n+    public void shouldAllowConfiguringMocksToReturnFakes() throws Exception {\n+        MyObject fakeReturningMock = mock(MyObject.class);\n+        //configure mock to return fakes\n+        fakeReturnValues(fakeReturningMock);\n+        \n+        //create ordinary mock\n+        MyObject ordinaryMock = mock(MyObject.class);\n+        \n+        //returns mock instead of null\n+        assertNotNull(fakeReturningMock.returnMyObject());\n+        //returns empty string instead of null\n+        assertEquals(\"\", fakeReturningMock.returnString());\n+        \n+        //returns defaults\n+        assertNull(ordinaryMock.returnMyObject());\n+        assertNull(ordinaryMock.returnString());\n+    }\n+    \n+    interface MyObject {\n+        MyObject returnMyObject();\n+        String returnString();\n+        boolean returnBoolean();\n+    }\n+}", "timestamp": 1206749682, "metainfo": ""}