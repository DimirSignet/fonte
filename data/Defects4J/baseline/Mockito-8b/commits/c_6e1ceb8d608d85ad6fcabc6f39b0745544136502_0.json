{"sha": "6e1ceb8d608d85ad6fcabc6f39b0745544136502", "log": "moved AtLeastX verification logic to separate object (hurray!!!)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40971", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n         List<Invocation> firstChunk = getFirstMatchingChunk(wanted, unverified);\n         \n         VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n-        if (decoder.atLeastMode() || !decoder.matchesActualCount(firstChunk.size())) {\n+        if (!decoder.matchesActualCount(firstChunk.size())) {\n             return this.findAllMatchingUnverifiedChunks(invocations, wanted);\n         } else {\n             return firstChunk;\n--- a/src/org/mockito/internal/verification/MockitoVerificationMode.java\n+++ b/src/org/mockito/internal/verification/MockitoVerificationMode.java\n  */\n public class MockitoVerificationMode implements VerificationInOrderMode, VerificationMode {\n     \n-    public enum Verification { EXPLICIT, AT_LEAST };\n+    public enum Verification { EXPLICIT };\n     \n     final int wantedInvocationCount;\n     final Verification verification;\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsChecker.java\n         if (decoder.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n             reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        } else if (decoder.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n-            HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n-            reporter.tooLittleActualInvocationsInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);        \n         } else if (decoder.neverWantedButInvoked(actualCount)) {\n             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n             reporter.neverWantedButInvoked(wanted, firstUndesired); \n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java\n         if (decoder.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n             reporter.tooLittleActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        } else if (decoder.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n-            HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n-            reporter.tooLittleActualInvocationsInOrderInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);\n         } else if (decoder.tooManyActualInvocations(actualCount)) {\n             HasStackTrace firstUndesired = chunk.get(mode.wantedCount()).getStackTrace();\n             reporter.tooManyActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, firstUndesired);\n--- a/src/org/mockito/internal/verification/VerificationModeDecoder.java\n+++ b/src/org/mockito/internal/verification/VerificationModeDecoder.java\n         this.mode = mode;\n     }\n \n-    public boolean atLeastMode() {\n-        return mode.getVerification() == Verification.AT_LEAST;\n-    }\n-\n     public boolean explicitMode() {\n         return mode.getVerification() == Verification.EXPLICIT;\n     }\n     \n     public boolean matchesActualCount(int actualCount) {\n-        boolean atLeast = atLeastMode() && actualCount >= mode.wantedCount();\n-        boolean actualMatchesWanted = !atLeastMode() && mode.wantedCount() == actualCount;\n-        \n-        return atLeast || actualMatchesWanted;\n+        return mode.wantedCount() == actualCount;\n     }\n     \n     public boolean tooLittleActualInvocations(int actualCount) {\n-        return !atLeastMode() && mode.wantedCount() > actualCount; \n+        return mode.wantedCount() > actualCount; \n     }\n \n-    public boolean tooLittleActualInvocationsInAtLeastMode(int actualCount) {\n-        return atLeastMode() && mode.wantedCount() > actualCount;\n-    }\n-    \n     public boolean tooManyActualInvocations(int actualCount) {\n-        return !atLeastMode() && mode.wantedCount() < actualCount;\n+        return mode.wantedCount() < actualCount;\n     }\n     \n     public boolean neverWanted() {\n-        return !atLeastMode() && mode.wantedCount() == 0;\n+        return mode.wantedCount() == 0;\n     }\n     \n     public boolean neverWantedButInvoked(int actualCount) {\n--- a/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n+++ b/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n     \n     private VerificationModeDecoder decode(MockitoVerificationMode mode) {\n         return new VerificationModeDecoder(mode);\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfIsAtLeastMode() throws Exception {\n-        assertFalse(decode(VerificationModeFactory.times(0)).atLeastMode());\n-        assertFalse(decode(VerificationModeFactory.times(10)).atLeastMode());\n     }\n     \n     @Test\n         assertFalse(decode(VerificationModeFactory.times(0)).tooLittleActualInvocations(0));\n         assertFalse(decode(VerificationModeFactory.times(1)).tooLittleActualInvocations(1));\n         assertFalse(decode(VerificationModeFactory.times(1)).tooLittleActualInvocations(2));\n-    }\n-    \n-    @Test\n-    public void shouldTooLittleActualInvocationsInAtLeastModeIgnoreOtherModes() throws Exception {\n-        assertFalse(decode(VerificationModeFactory.times(10)).tooLittleActualInvocationsInAtLeastMode(5));        \n-        assertFalse(decode(VerificationModeFactory.times(10)).tooLittleActualInvocationsInAtLeastMode(15));        \n     }\n     \n     @Test", "timestamp": 1223981338, "metainfo": ""}