{"sha": "2faec95a3610c368898751e996fbf76b4f7dbcc3", "log": "fixed issue 26. Javadoc fix  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40951", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n  * <p>\n  * Spying on real objects is often associated with \"partial mocking\" concept. \n+ * However, Mockito spies are not partial mocks. Mockito spy is meant to help testing other classes - not the spy itself. \n+ * Therefore spy will not help if you intend to verify if method calls other method on the same object. \n+ * In this case I suggest being OO/SRPy (for example you might extract new class/interface...)\n  * \n  * <pre>\n  *   List list = new LinkedList();\n      * <p>\n      * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n      * <p>\n-     * Spying on real objects is often associated with \"partial mocking\" concept.\n+     * Spying on real objects is often associated with \"partial mocking\" concept. \n+     * However, Mockito spies are not partial mocks. Mockito spy is meant to help testing other classes - not the spy itself. \n+     * Therefore spy will not help if you intend to verify if method calls other method on the same object. \n+     * In this case I suggest being OO/SRPy (for example you might extract new class/interface...)\n      * <p>\n      * Example:\n      * ", "timestamp": 1223843037, "metainfo": ""}