{"sha": "bd87024f527131ea17870755a19581e601e6e18a", "log": "Moved class to a better package.", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/util/Timer.java\n+package org.mockito.internal.util;\n+\n+public class Timer {\n+\n+    private final long durationMillis;\n+    private long startTime = -1;\n+\n+    public Timer(long durationMillis) {\n+        this.durationMillis = durationMillis;\n+    }\n+\n+    /**\n+     * Informs whether the timer is still counting down.\n+     */\n+    public boolean isCounting() {\n+        assert startTime != -1;\n+        return System.currentTimeMillis() - startTime <= durationMillis;\n+    }\n+\n+    /**\n+     * Starts the timer count down.\n+     */\n+    public void start() {\n+        startTime = System.currentTimeMillis();\n+    }\n+}\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n \n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockito.internal.util.Timer;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.verification.VerificationMode;\n \n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n package org.mockito.verification;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.verification.Timer;\n+import org.mockito.internal.util.Timer;\n import org.mockito.internal.verification.VerificationOverTimeImpl;\n /**\n  * See the javadoc for {@link VerificationWithTimeout}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/TimerTest.java\n+package org.mockito.internal.util;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class TimerTest extends TestBase {\n+\n+    @Test\n+    public void should_return_true_if_task_is_in_acceptable_time_bounds() {\n+        //given\n+        long duration = 10000L;\n+        Timer timer = new Timer(duration);\n+\n+        //when\n+        timer.start();\n+        boolean stillCounting = timer.isCounting();\n+\n+        //then\n+        assertThat(stillCounting, is(true));\n+    }\n+\n+    @Test\n+    public void should_return_false_if_task_is_outside_the_acceptable_time_bounds() {\n+        //given\n+        Timer timer = new Timer(-1);\n+        timer.start();\n+\n+        //when\n+        boolean stillCounting = timer.isCounting();\n+\n+        //then\n+        assertThat(timer.isCounting(), is(false));\n+    }\n+}\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockito.exceptions.base.MockitoAssertionError;\n-import org.mockito.internal.verification.*;\n+import org.mockito.internal.util.Timer;\n+import org.mockito.internal.verification.AtLeast;\n+import org.mockito.internal.verification.Only;\n+import org.mockito.internal.verification.Times;\n+import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockitoutil.TestBase;\n \n import static org.mockito.Mockito.*;\n     \n     @Mock VerificationMode mode;\n     @Mock VerificationDataImpl data;\n-    @Mock Timer timer;\n+    @Mock\n+    Timer timer;\n     MockitoAssertionError error = new MockitoAssertionError(\"\"); \n \n     @Test", "timestamp": 1411850417, "metainfo": ""}