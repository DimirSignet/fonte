{"sha": "b9e474a6c3d00b6ea3af9f1caed718cfc8990cd1", "log": "Merge pull request #42 from asolntsev/master  fair enough", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         ));\n     }\n \n-    public void cannotCallRealMethodOnInterface() {\n-        throw new MockitoException(join(\n-                \"Cannot call real method on java interface. Interface does not have any implementation!\",\n-                \"Calling real methods is only possible when mocking concrete classes.\",\n+    public void cannotCallAbstractRealMethod() {\n+        throw new MockitoException(join(\n+                \"Cannot call abstract real method on java object!\",\n+                \"Calling real methods is only possible when mocking non abstract method.\",\n                 \"  //correct example:\",\n-                \"  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();\"\n+                \"  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\"\n         ));\n     }\n \n--- a/src/org/mockito/internal/creation/DelegatingMethod.java\n+++ b/src/org/mockito/internal/creation/DelegatingMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation;\n \n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n \n import org.mockito.internal.invocation.MockitoMethod;\n \n     public boolean isVarArgs() {\n         return method.isVarArgs();\n     }\n+\n+    @Override\n+    public boolean isAbstract() {\n+        return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n+    }\n     \n     @Override\n     public int hashCode() {\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/AbstractAwareMethod.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.invocation;\n+\n+public interface AbstractAwareMethod {\n+    boolean isAbstract();\n+}\n--- a/src/org/mockito/internal/invocation/InvocationImpl.java\n+++ b/src/org/mockito/internal/invocation/InvocationImpl.java\n     }\n \n     public Object callRealMethod() throws Throwable {\n-        if (this.getMethod().getDeclaringClass().isInterface()) {\n-            new Reporter().cannotCallRealMethodOnInterface();\n+        if (method.isAbstract()) {\n+            new Reporter().cannotCallAbstractRealMethod();\n         }\n         return realMethod.invoke(mock, rawArguments);\n     }\n--- a/src/org/mockito/internal/invocation/MockitoMethod.java\n+++ b/src/org/mockito/internal/invocation/MockitoMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import java.lang.reflect.Method;\n \n-public interface MockitoMethod {\n+public interface MockitoMethod extends AbstractAwareMethod {\n \n     public String getName();\n \n--- a/src/org/mockito/internal/invocation/SerializableMethod.java\n+++ b/src/org/mockito/internal/invocation/SerializableMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n import org.mockito.exceptions.base.MockitoException;\n     private Class<?> returnType;\n     private Class<?>[] exceptionTypes;\n     private boolean isVarArgs;\n+    private boolean isAbstract;\n \n     public SerializableMethod(Method method) {\n         declaringClass = method.getDeclaringClass();\n         returnType = method.getReturnType();\n         exceptionTypes = method.getExceptionTypes();\n         isVarArgs = method.isVarArgs();\n+        isAbstract = (method.getModifiers() & Modifier.ABSTRACT) != 0;\n     }\n \n     public String getName() {\n \n     public boolean isVarArgs() {\n         return isVarArgs;\n-    }  \n+    }\n+\n+    @Override\n+    public boolean isAbstract() {\n+        return isAbstract;\n+    }\n \n     public Method getJavaMethod() {\n         try {\n                             \"Please report this as a defect with an example of how to reproduce it.\", declaringClass, methodName);\n             throw new MockitoException(message, e);\n         }\n-    }    \n+    }\n \n     @Override\n     public int hashCode() {\n--- a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.answers;\n \n import org.mockito.exceptions.Reporter;\n     }\n \n     private void validateMockingConcreteClass(CallsRealMethods answer, MethodInfo methodInfo) {\n-        if (methodInfo.isDeclaredOnInterface()) {\n-            reporter.cannotCallRealMethodOnInterface();\n+        if (methodInfo.isAbstract()) {\n+            reporter.cannotCallAbstractRealMethod();\n         }\n     }\n \n--- a/src/org/mockito/internal/stubbing/answers/MethodInfo.java\n+++ b/src/org/mockito/internal/stubbing/answers/MethodInfo.java\n  */\n package org.mockito.internal.stubbing.answers;\n \n+import org.mockito.internal.invocation.AbstractAwareMethod;\n import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.Invocation;\n \n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n \n /**\n  * by Szczepan Faber, created at: 3/31/12\n  */\n-public class MethodInfo {\n+public class MethodInfo implements AbstractAwareMethod {\n \n     private Method method;\n \n     public boolean isDeclaredOnInterface() {\n         return method.getDeclaringClass().isInterface();\n     }\n+\n+    @Override\n+    public boolean isAbstract() {\n+        return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n+    }\n }", "timestamp": 1395872245, "metainfo": ""}