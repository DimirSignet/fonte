{"sha": "b6494294f526b30dbac9be4e520fe8011b306d19", "log": "Javadoc tweaks.", "commit": "\n--- a/src/org/mockito/AdditionalAnswers.java\n+++ b/src/org/mockito/AdditionalAnswers.java\n \n     /**\n      * An answer that directly forwards the calls to the delegate.\n-     *\n-     * Makes sense only for spies or partial mocks of objects that are difficult to mock or spy using the usual spy API.\n-     * Possible use cases:\n+     * <p>\n+     * Useful for spies or partial mocks of objects that are difficult to mock\n+     * or spy using the usual spy API. Possible use cases:\n      * <ul>\n      *     <li>Final classes but with an interface</li>\n      *     <li>Already custom proxied object</li>\n      *     <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>\n-     *     <li>...</li>\n      * </ul>\n-     * Sets the real implementation to be called when the method is called on a mock object.\n+     * For more details including the use cases reported by users take a look at\n+     * <a link=\"http://code.google.com/p/mockito/issues/detail?id=145\">issue 145</a>.\n+     * <p>\n+     * The difference with the regular spy:\n+     * <ul>\n+     *   <li>\n+     *     The regular spy ({@link Mockito#spy(Object)} contains <strong>all</strong> state from the spied instance\n+     *     and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.\n+     *   </li>\n+     *   <li>\n+     *     The mock that delegates simply delegates all methods to the delegate.\n+     *     The delegate is used all the time as methods are delegated onto it.\n+     *   </li>\n+     * </ul>\n+     * An example with a final class that we want to delegate to:\n      * <p>\n      * <pre class=\"code\"><code class=\"java\">\n-     *   final class DontMessTheCodeOfThisList implements list { ... }\n+     *   final class DontYouDareToMockMe implements list { ... }\n      *\n-     *   DontMessTheCodeOfThisList awesomeList = new DontMessTheCodeOfThisList();\n+     *   DontYouDareToMockMe awesomeList = new DontYouDareToMockMe();\n      *\n-     *   List listWithDelegate = mock(List.class, delegatesTo(awesomeList));\n+     *   List mock = mock(List.class, delegatesTo(awesomeList));\n      * </code></pre>\n      *\n      * <p>\n-     * This features suffer from the same drawback as the spy.\n+     * This feature suffers from the same drawback as the spy.\n      * The mock will call the delegate if you use regular when().then() stubbing style.\n      * Since the real implementation is called this might have some side effects.\n      * Therefore you should to use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example:\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.mockito.internal.MockitoCore;\n  *      <a href=\"#24\">24. (New) One-liner stubs (Since 1.9.0)</a><br/>\n  *      <a href=\"#25\">25. (New) Verification ignoring stubs (Since 1.9.0)</a><br/>\n  *      <a href=\"#26\">26. (**New**) Mocking details (Since 1.9.5)</a><br/>\n- *      <a href=\"#27\">27. (**New**) Forward calls to real instance (Since 1.9.5)</a><br/>\n+ *      <a href=\"#27\">27. (**New**) Delegate calls to real instance (Since 1.9.5)</a><br/>\n  *      <a href=\"#28\">28. (**New**) Introduction of the internal <code>MockMaker</code> API (Since 1.9.5)</a><br/>\n  * </b>\n  * \n  *\n  *\n  * <h3 id=\"27\">27. (**New**) <a class=\"meaningful_link\" href=\"#delegating_call_to_real_instance\">Delegate calls to real instance</a> (Since 1.9.5)</h3>\n- * <p>Now mockito offer a specific way to delegate calls to a concrete instance. This is different than the\n- * spy because the regular spy contains all the state of the spied instance. TODO SF - add more information.\n- *\n- * <p>Note that this feature only makes sense only for spies or partial mocks of objects <strong>that are difficult to\n- * mock or spy</strong> using the usual spy API.\n+ *\n+ * <p>Useful for spies or partial mocks of objects <strong>that are difficult to mock or spy</strong> using the usual spy API.\n  * Possible use cases:\n  * <ul>\n  *     <li>Final classes but with an interface</li>\n  *     <li>Already custom proxied object</li>\n  *     <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>\n- *     <li>...</li>\n  * </ul>\n  *\n- * Possible example with an object interacting with native objects and spy that would not work:\n- * <pre class=\"code\"><code class=\"java\">\n- *   InteractingWithNativeStuff theSpy = spy(interactingWithNativeStuff);\n- *\n- *   // Some time after the GC collect interactingWithNativeStuff as it not anymore used,\n- *   // the finalizer is executed, for example to call a C++ destructor.\n- *\n- *   // Later on, it's finally the spy to be garbage collected, finalize method is called again,\n- *   // unfortunately the second interaction with the native objects will crash the JVM.\n- * </code></pre>\n- * Now with the forwarding feature in place :\n- * <pre class=\"code\"><code class=\"java\">\n- *   InteractingWithNativeStuff native = mock(InteractingWithNativeStuff.class, AdditionalAnswers.delegateTo(interactingWithNativeStuff));\n- *\n- *   //TODO SF - I don't quite follow this example... spied instance is also something we hold in the MockSettings...\n- *   // OK, the mock keeps a reference to the interactingWithNativeStuff, so the finalize method never kicks in.\n- * </code></pre>\n- *\n- * <p>Friendly reminder that final Methods cannot be mocked, so if <code>finalize</code> is <code>final</code> the\n- * real code will still be executed.\n- *\n- * <p>\n- * See more information there {@link AdditionalAnswers#delegatesTo(Object)}.\n+ * <p>The difference with the regular spy:\n+ * <ul>\n+ *   <li>\n+ *     The regular spy ({@link #spy(Object)}) contains <strong>all</strong> state from the spied instance\n+ *     and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.\n+ *   </li>\n+ *   <li>\n+ *     The mock that delegates simply delegates all methods to the delegate.\n+ *     The delegate is used all the time as methods are delegated onto it.\n+ *   </li>\n+ * </ul>\n+ *\n+ * <p>\n+ * See more information in docs for {@link AdditionalAnswers#delegatesTo(Object)}.\n  *\n  *\n  *", "timestamp": 1336940030, "metainfo": ""}