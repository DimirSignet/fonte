{"sha": "9f6cfd439d32a4c014471536824c7ed2a1772277", "log": "Finished CustomMatchers stuff, documentation is yet needed  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40271", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n      * @return <code>null</code>.\n      */\n     public static String startsWith(String prefix) {\n-        LastArguments.instance().reportMatcher(new StartsWith(prefix));\n-        return null;\n-    }\n-\n-    public static int intThatIs(CustomMatcher<?> matcher) {\n-        LastArguments.instance().reportMatcher(matcher);\n-        return 0;\n-    }\n-    \n-    public static boolean booleanThatIs(CustomMatcher<?> matcher) {\n-        LastArguments.instance().reportMatcher(matcher);\n-        return false;\n-    }\n-}\n+        return LastArguments.instance().reportMatcher(new StartsWith(prefix)).<String>nullValue();\n+    }\n+    \n+    public static char charThat(CustomMatcher<Character> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).charValue();\n+    }\n+    \n+    public static boolean booleanThat(CustomMatcher<Boolean> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).booleanValue();\n+    }\n+    \n+    public static byte byteThat(CustomMatcher<Byte> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).byteValue();\n+    }\n+    \n+    public static short shortThat(CustomMatcher<Short> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).shortValue();\n+    }\n+    \n+    public static int intThat(CustomMatcher<Integer> matcher) {\n+        //TODO one-liner pattern everywhere\n+        return LastArguments.instance().reportMatcher(matcher).intValue();\n+    }\n+    \n+    public static long longThat(CustomMatcher<Long> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).longValue();\n+    }\n+    \n+    public static float floatThat(CustomMatcher<Float> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).floatValue();\n+    }\n+    \n+    public static double doubleThat(CustomMatcher<Double> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).doubleValue();\n+    }\n+\n+    public static <T> T argThat(CustomMatcher<T> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher).<T>nullValue();\n+    }\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n /**\n  * Enables mocks creation, verification and stubbing.\n  * <p>\n- * Following examples mock List or LinkedList, because everyone knows their interface (methods like add(), get(), clear() will be used). \n+ * Following examples mock List, because everyone knows its interface (methods like add(), get(), clear() will be used). \n  * <br>You probably wouldn't mock List class 'in real'.  \n  * \n  * <h3>Let's verify!</h3>\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n         return INSTANCE.get();\n     }\n     \n-    public void reportMatcher(ArgumentMatcher matcher) {\n+    public ReturnValues reportMatcher(ArgumentMatcher matcher) {\n         matcherStack.push(matcher);\n+        return new ReturnValues();\n     }\n \n     public List<ArgumentMatcher> pullMatchers() {\n--- /dev/null\n+++ b/src/org/mockito/internal/progress/ReturnValues.java\n+package org.mockito.internal.progress;\n+\n+public class ReturnValues {\n+\n+    public byte byteValue() {\n+        return 0;\n+    }\n+\n+    public short shortValue() {\n+        return 0;\n+    }\n+\n+    public int intValue() {\n+        return 0;\n+    }\n+\n+    public long longValue() {\n+        return 0;\n+    }\n+\n+    public float floatValue() {\n+        return 0;\n+    }\n+\n+    public double doubleValue() {\n+        return 0;\n+    }\n+\n+    public char charValue() {\n+        return 0;\n+    }\n+\n+    public <T> T nullValue() {\n+        return null;\n+    }\n+\n+    public boolean booleanValue() {\n+        return false;\n+    }\n+}\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import org.mockito.CustomMatcher;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n-import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockitousage.IMethods;\n \n-@SuppressWarnings(\"unchecked\")\n public class CustomMatchersTest extends RequiresValidState {\n-    private final class AnyBoolean extends CustomMatcher<Boolean> {\n+    \n+    private final class ContainsFoo extends CustomMatcher<String> {\n+        public boolean matches(String arg) {\n+            return arg.contains(\"foo\");\n+        }\n+    }\n+\n+    private final class IsAnyBoolean extends CustomMatcher<Boolean> {\n         public boolean matches(Boolean argument) {\n             return true;\n         }\n     }\n+    \n+    private final class IsSorZ extends CustomMatcher<Character> {\n+        public boolean matches(Character argument) {\n+            return argument.equals('s') || argument.equals('z');\n+        }\n+    }\n \n-    private final class ZeroOrOne extends CustomMatcher<Integer> {\n-        public boolean matches(Integer argument) {\n-            if (argument == 0 || argument == 1) {\n+    private final class IsZeroOrOne<T extends Number> extends CustomMatcher<T> {\n+        public boolean matches(T argument) {\n+            if (argument.intValue() == 0 || argument.intValue() == 1) {\n                 return true;\n             }\n             return false;\n     }\n \n     @Test\n-    public void shouldUseCustomIntMatcher() {\n-        stub(mock.simpleMethod(intThatIs(new ZeroOrOne()))).toReturn(\"zero or one\");\n+    public void shouldUseCustomBooleanMatcher() {\n+        stub(mock.oneArg(booleanThat(new IsAnyBoolean()))).toReturn(\"foo\");\n         \n-        assertEquals(\"zero or one\", mock.simpleMethod(0));\n-        assertEquals(\"zero or one\", mock.simpleMethod(1));\n-        assertEquals(null, mock.simpleMethod(2));\n+        assertEquals(\"foo\", mock.oneArg(true));\n+        assertEquals(\"foo\", mock.oneArg(false));\n+    }\n+    \n+  @Test\n+  public void shouldUseCustomCharMatcher() {\n+      stub(mock.oneArg(charThat(new IsSorZ()))).toReturn(\"foo\");\n+      \n+      assertEquals(\"foo\", mock.oneArg('s'));\n+      assertEquals(\"foo\", mock.oneArg('z'));\n+      assertEquals(null, mock.oneArg('x'));\n+  }\n+    \n+    @Test\n+    public void shouldUseCustomPrimitiveNumberMatchers() {\n+        stub(mock.oneArg(byteThat(new IsZeroOrOne<Byte>()))).toReturn(\"byte\");\n+        stub(mock.oneArg(shortThat(new IsZeroOrOne<Short>()))).toReturn(\"short\");\n+        stub(mock.oneArg(intThat(new IsZeroOrOne<Integer>()))).toReturn(\"int\");\n+        stub(mock.oneArg(longThat(new IsZeroOrOne<Long>()))).toReturn(\"long\");\n+        stub(mock.oneArg(floatThat(new IsZeroOrOne<Float>()))).toReturn(\"float\");\n+        stub(mock.oneArg(doubleThat(new IsZeroOrOne<Double>()))).toReturn(\"double\");\n         \n-        try {\n-            verify(mock).simpleMethod(intThatIs(new ZeroOrOne()));\n-            fail();\n-        } catch (TooManyActualInvocations e) {}\n+        assertEquals(\"byte\", mock.oneArg((byte) 0));\n+        assertEquals(\"short\", mock.oneArg((short) 1));\n+        assertEquals(\"int\", mock.oneArg(0));\n+        assertEquals(\"long\", mock.oneArg(1L));\n+        assertEquals(\"float\", mock.oneArg(0F));\n+        assertEquals(\"double\", mock.oneArg(1.0));\n+        \n+        assertEquals(null, mock.oneArg(2));\n     }\n     \n     @Test\n-    public void shouldUseCustomBooleanMatcher() {\n-        stub(mock.oneArg(booleanThatIs(new AnyBoolean()))).toReturn(\"any boolean\");\n+    public void shouldUseCustomObjectMatcher() {\n+        stub(mock.oneArg(argThat(new ContainsFoo()))).toReturn(\"foo\");\n         \n-        assertEquals(\"any boolean\", mock.oneArg(true));\n-        assertEquals(\"any boolean\", mock.oneArg(false));\n-        \n-        try {\n-            verify(mock).oneArg(booleanThatIs(new AnyBoolean()));\n-            fail();\n-        } catch (TooManyActualInvocations e) {}\n+        assertEquals(\"foo\", mock.oneArg(\"foo\"));\n+        assertEquals(null, mock.oneArg(\"bar\"));\n     }\n }", "timestamp": 1199834187, "metainfo": ""}