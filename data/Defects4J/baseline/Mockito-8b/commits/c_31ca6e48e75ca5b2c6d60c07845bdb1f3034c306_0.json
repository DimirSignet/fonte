{"sha": "31ca6e48e75ca5b2c6d60c07845bdb1f3034c306", "log": "Renamed MockName into MockNameImpl so that we can expose MockName interface.  --HG-- rename : src/org/mockito/internal/util/MockName.java => src/org/mockito/internal/util/MockNameImpl.java rename : test/org/mockito/internal/util/MockNameTest.java => test/org/mockito/internal/util/MockNameImplTest.java", "commit": "\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.VerboseMockInvocationLogger;\n import org.mockito.internal.stubbing.defaultanswers.ForwardsInvocations;\n-import org.mockito.internal.util.MockName;\n+import org.mockito.internal.util.MockNameImpl;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.stubbing.Answer;\n \n     private Object spiedInstance;\n     private Object delegatedInstance;\n     private Answer<Object> defaultAnswer;\n-    private MockName mockName;\n+    private MockNameImpl mockName;\n     private boolean serializable;\n     private List<InvocationListener> invocationListeners = new ArrayList<InvocationListener>();\n \n         return this;\n     }\n \n-    public MockName getMockName() {\n+    public MockNameImpl getMockName() {\n         return mockName;\n     }\n \n-    public MockName mockName() {\n+    public MockNameImpl mockName() {\n         return mockName;\n     }\n \n     }\n \n     public void initiateMockName(Class classToMock) {\n-        mockName = new MockName(name, classToMock);\n+        mockName = new MockNameImpl(name, classToMock);\n     }\n \n \tpublic MockSettings verboseLogging() {\n     }\n \n     public void redefineMockName(String newName) {\n-        mockName = new MockName(newName);\n+        mockName = new MockNameImpl(newName);\n     }\n \n \tpublic MockSettings forwardTo(Object delegatedInstance) {\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n import java.util.TreeSet;\n \n import org.mockito.internal.creation.ClassNameFinder;\n-import org.mockito.internal.util.MockName;\n+import org.mockito.internal.util.MockNameImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.util.Primitives;\n     public Object answer(InvocationOnMock invocation) {\n         if (methodsGuru.isToString(invocation.getMethod())) {\n             Object mock = invocation.getMock();\n-            MockName name = new MockUtil().getMockName(mock);\n+            MockNameImpl name = new MockUtil().getMockName(mock);\n             if (name.isSurrogate()) {\n                 return \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n             } else {\n--- /dev/null\n+++ b/src/org/mockito/internal/util/MockNameImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.util;\n+\n+import java.io.Serializable;\n+\n+public class MockNameImpl implements Serializable {\n+    \n+    private static final long serialVersionUID = 8014974700844306925L;\n+    private final String mockName;\n+    private boolean surrogate;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public MockNameImpl(String mockName, Class classToMock) {\n+        if (mockName == null) {\n+            this.mockName = toInstanceName(classToMock);\n+            this.surrogate = true;\n+        } else {\n+            this.mockName = mockName;\n+        }\n+    }\n+\n+    public MockNameImpl(String mockName) {\n+        this.mockName = mockName;\n+    }\n+\n+    private static String toInstanceName(Class<?> clazz) {\n+        String className = clazz.getSimpleName();\n+        if (className.length() == 0) {\n+            //it's an anonymous class, let's get name from the parent\n+            className = clazz.getSuperclass().getSimpleName();\n+        }\n+        //lower case first letter\n+        return className.substring(0, 1).toLowerCase() + className.substring(1);\n+    }\n+    \n+    public boolean isSurrogate() {\n+        return surrogate;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return mockName;\n+    }\n+}\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import org.mockito.internal.MockHandlerInterface;\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.util.collections.ArrayUtils;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n import org.mockito.mock.MockSettingsInfo;\n import org.mockito.plugins.MockMaker;\n         return mockMaker.getHandler(mock) != null;\n     }\n \n-    public MockName getMockName(Object mock) {\n+    public MockNameImpl getMockName(Object mock) {\n         return getMockHandler(mock).getMockSettings().getMockName();\n     }\n \n--- a/src/org/mockito/mock/MockSettingsInfo.java\n+++ b/src/org/mockito/mock/MockSettingsInfo.java\n package org.mockito.mock;\n \n import org.mockito.Incubating;\n-import org.mockito.internal.util.MockName;\n+import org.mockito.internal.util.MockNameImpl;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.stubbing.Answer;\n \n     /**\n      * the name of this mock, as printed on verification errors; see {@link org.mockito.MockSettings#name}.\n      */\n-    MockName getMockName();\n+    MockNameImpl getMockName();\n \n     void redefineMockName(String newName);\n \n--- /dev/null\n+++ b/test/org/mockito/internal/util/MockNameImplTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.util;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class MockNameImplTest extends TestBase {\n+\n+    @Test\n+    public void shouldProvideTheNameForClass() throws Exception {\n+        //when\n+        String name = new MockNameImpl(null, SomeClass.class).toString();\n+        //then\n+        assertEquals(\"someClass\", name);\n+    }\n+\n+    @Test\n+    public void shouldProvideTheNameForAnonymousClass() throws Exception {\n+        //given\n+        SomeInterface anonymousInstance = new SomeInterface() {};\n+        //when\n+        String name = new MockNameImpl(null, anonymousInstance.getClass()).toString();\n+        //then\n+        assertEquals(\"someInterface\", name);\n+    }\n+\n+    @Test\n+    public void shouldProvideTheGivenName() throws Exception {\n+        //when\n+        String name = new MockNameImpl(\"The Hulk\", SomeClass.class).toString();\n+        //then\n+        assertEquals(\"The Hulk\", name);\n+    }\n+\n+    private class SomeClass {}\n+    private class SomeInterface {}\n+}", "timestamp": 1333987226, "metainfo": ""}