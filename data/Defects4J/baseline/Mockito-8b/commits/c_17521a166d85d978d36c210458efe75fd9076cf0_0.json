{"sha": "17521a166d85d978d36c210458efe75fd9076cf0", "log": "Exposed the MockName interface. A fallout after exposing other parts of the API. Now behind a proper interface.", "commit": "\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.internal.stubbing.defaultanswers.ForwardsInvocations;\n import org.mockito.internal.util.MockNameImpl;\n import org.mockito.listeners.InvocationListener;\n+import org.mockito.mock.MockName;\n import org.mockito.stubbing.Answer;\n \n import java.util.ArrayList;\n     private Object spiedInstance;\n     private Object delegatedInstance;\n     private Answer<Object> defaultAnswer;\n-    private MockNameImpl mockName;\n+    private MockName mockName;\n     private boolean serializable;\n     private List<InvocationListener> invocationListeners = new ArrayList<InvocationListener>();\n \n         return this;\n     }\n \n-    public MockNameImpl getMockName() {\n+    public MockName getMockName() {\n         return mockName;\n     }\n \n-    public MockNameImpl mockName() {\n+    public MockName mockName() {\n         return mockName;\n     }\n \n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n import java.util.TreeSet;\n \n import org.mockito.internal.creation.ClassNameFinder;\n-import org.mockito.internal.util.MockNameImpl;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.mock.MockName;\n import org.mockito.stubbing.Answer;\n \n /**\n     public Object answer(InvocationOnMock invocation) {\n         if (methodsGuru.isToString(invocation.getMethod())) {\n             Object mock = invocation.getMock();\n-            MockNameImpl name = new MockUtil().getMockName(mock);\n+            MockName name = new MockUtil().getMockName(mock);\n             if (name.isSurrogate()) {\n                 return \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n             } else {\n--- a/src/org/mockito/internal/util/MockNameImpl.java\n+++ b/src/org/mockito/internal/util/MockNameImpl.java\n  */\n package org.mockito.internal.util;\n \n+import org.mockito.mock.MockName;\n+\n import java.io.Serializable;\n \n-public class MockNameImpl implements Serializable {\n+public class MockNameImpl implements MockName, Serializable {\n     \n     private static final long serialVersionUID = 8014974700844306925L;\n     private final String mockName;\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n+import org.mockito.mock.MockName;\n import org.mockito.mock.MockSettingsInfo;\n import org.mockito.plugins.MockMaker;\n \n         return mockMaker.getHandler(mock) != null;\n     }\n \n-    public MockNameImpl getMockName(Object mock) {\n+    public MockName getMockName(Object mock) {\n         return getMockHandler(mock).getMockSettings().getMockName();\n     }\n \n--- /dev/null\n+++ b/src/org/mockito/mock/MockName.java\n+package org.mockito.mock;\n+\n+/**\n+ * by Szczepan Faber, created at: 4/9/12\n+ */\n+public interface MockName {\n+\n+    boolean isSurrogate();\n+\n+    String toString();\n+}\n--- a/src/org/mockito/mock/MockSettingsInfo.java\n+++ b/src/org/mockito/mock/MockSettingsInfo.java\n     /**\n      * the name of this mock, as printed on verification errors; see {@link org.mockito.MockSettings#name}.\n      */\n-    MockNameImpl getMockName();\n+    MockName getMockName();\n \n     void redefineMockName(String newName);\n ", "timestamp": 1333987370, "metainfo": ""}