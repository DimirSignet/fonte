{"sha": "a8ec4fa290bc1cdde060218d6bb811ac1fa6da6f", "log": "issue 282 : mock invocation listeners were removed on reset(mock)  --HG-- branch : 1.9-rc1 extra : transplant_source : R%1C%F1%AA%AA%FEJ%AAZ%E9Dy%F4%5D%29%91%B7%5E%12%7F", "commit": "\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import org.mockito.internal.util.reflection.LenientCopyTool;\n \n import java.io.Serializable;\n-\n-import static org.mockito.Mockito.RETURNS_DEFAULTS;\n-import static org.mockito.Mockito.withSettings;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n \n         settings.initiateMockName(classToMock);\n \n-        MockHandler<T> mockHandler = new MockHandler<T>(settings);\n-        InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);\n-        MethodInterceptorFilter filter = new MethodInterceptorFilter(invocationNotifierHandler, settings);\n+        MethodInterceptorFilter filter = newMethodInterceptorFilter(settings);\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n \n         Class<?>[] ancillaryTypes;\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \n-                        (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());\n         ((Factory) mock).setCallback(0, newFilter);\n+    }\n+\n+    private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n+        MockHandler<T> mockHandler = new MockHandler<T>(settings);\n+        InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings);\n+        return new MethodInterceptorFilter(invocationNotifierHandler, settings);\n     }\n \n     public <T> MockHandlerInterface<T> getMockHandler(T mock) {\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/ListenersLostOnResetMockTest.java\n+package org.mockitousage.bugs;\n+\n+\n+import org.junit.Test;\n+import org.mockito.listeners.InvocationListener;\n+import org.mockito.listeners.MethodInvocationReport;\n+\n+import java.util.List;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class ListenersLostOnResetMockTest {\n+\n+    @Test\n+    public void listener() throws Exception {\n+        InvocationListener invocationListener = mock(InvocationListener.class);\n+\n+        List mockedList = mock(List.class, withSettings().invocationListeners(invocationListener));\n+        reset(mockedList);\n+\n+        mockedList.clear();\n+\n+        verify(invocationListener).reportInvocation(any(MethodInvocationReport.class));\n+    }\n+}", "timestamp": 1317481790, "metainfo": ""}