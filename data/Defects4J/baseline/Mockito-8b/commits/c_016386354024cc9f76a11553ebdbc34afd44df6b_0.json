{"sha": "016386354024cc9f76a11553ebdbc34afd44df6b", "log": "Basic support for creating mocks of inner classes using constructor  Fixed #92", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n \n     /**\n      * Mockito attempts to use constructor when creating instance of the mock.\n+     *\n+     * @return settings instance so that you can fluently specify other settings\n      */\n     MockSettings useConstructor();\n+\n+    /**\n+     * Useful for mocking non-static inner classes in conjunction with {@link #useConstructor()}\n+     *\n+     * @return settings instance so that you can fluently specify other settings\n+     */\n+    MockSettings outerInstance(Object outerClassInstance);\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n \n     private static final long serialVersionUID = 4475297236197939569L;\n     private boolean useConstructor;\n+    private Object outerClassInstance;\n \n     public MockSettings serializable() {\n         return serializable(SerializableMode.BASIC);\n         return this;\n     }\n \n+    public MockSettings outerInstance(Object outerClassInstance) {\n+        this.outerClassInstance = outerClassInstance;\n+        return this;\n+    }\n+\n     public boolean isUsingConstructor() {\n         return useConstructor;\n+    }\n+\n+    public Object getOuterClassInstance() {\n+        return outerClassInstance;\n     }\n \n     public boolean isStubOnly() {\n--- a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n package org.mockito.internal.creation.instance;\n+\n+import java.lang.reflect.Constructor;\n \n public class ConstructorInstantiator implements Instantiator {\n \n+    private final Object outerClassInstance;\n+\n+    public ConstructorInstantiator(Object outerClassInstance) {\n+        this.outerClassInstance = outerClassInstance;\n+    }\n+\n     public <T> T newInstance(Class<T> cls) {\n         try {\n+            if (outerClassInstance != null) {\n+                Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n+                return c.newInstance(outerClassInstance);\n+            }\n             return cls.newInstance();\n         } catch (Exception e) {\n             throw new RuntimeException(\"Problems instantiating class: \" + cls, e);\n--- a/src/org/mockito/internal/creation/instance/InstantiatorProvider.java\n+++ b/src/org/mockito/internal/creation/instance/InstantiatorProvider.java\n \n     public Instantiator getInstantiator(MockCreationSettings settings) {\n         if (settings.isUsingConstructor()) {\n-            return new ConstructorInstantiator();\n+            return new ConstructorInstantiator(settings.getOuterClassInstance());\n         } else {\n             return INSTANCE;\n         }\n--- a/src/org/mockito/internal/creation/settings/CreationSettings.java\n+++ b/src/org/mockito/internal/creation/settings/CreationSettings.java\n     protected List<InvocationListener> invocationListeners = new ArrayList<InvocationListener>();\n     protected boolean stubOnly;\n     private boolean useConstructor;\n+    private Object outerClassInstance;\n \n     public CreationSettings() {}\n \n         this.invocationListeners = copy.invocationListeners;\n         this.stubOnly = copy.stubOnly;\n         this.useConstructor = copy.isUsingConstructor();\n+        this.outerClassInstance = copy.getOuterClassInstance();\n     }\n \n     public Class<T> getTypeToMock() {\n         return useConstructor;\n     }\n \n+    public Object getOuterClassInstance() {\n+        return outerClassInstance;\n+    }\n+\n     public boolean isStubOnly() {\n         return stubOnly;\n     }\n--- a/src/org/mockito/mock/MockCreationSettings.java\n+++ b/src/org/mockito/mock/MockCreationSettings.java\n     boolean isStubOnly();\n \n     /**\n-     * the invocation listeners attached to this mock, see {@link org.mockito.MockSettings#invocationListeners}.\n+     * The invocation listeners attached to this mock, see {@link org.mockito.MockSettings#invocationListeners}.\n      */\n     List<InvocationListener> getInvocationListeners();\n \n     /**\n-     * informs whether the mock instance should be created via constructor\n+     * Informs whether the mock instance should be created via constructor\n      */\n     boolean isUsingConstructor();\n+\n+    /**\n+     * Used when mocking non-static inner classes in conjunction with {@link #isUsingConstructor()}\n+     *\n+     * @return the outer class instance used for creation of the mock object via the constructor.\n+     */\n+    @Incubating\n+    Object getOuterClassInstance();\n }\n--- a/test/org/mockito/internal/creation/cglib/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/cglib/ClassImposterizerTest.java\n \n     @Test\n     public void shouldCreateClassByConstructor() {\n-        imposterizer = new ClassImposterizer(new ConstructorInstantiator());\n+        imposterizer = new ClassImposterizer(new ConstructorInstantiator(null));\n         OtherClass mock = imposterizer.imposterise(new MethodInterceptorStub(), OtherClass.class);\n         assertNotNull(mock);\n     }\n--- /dev/null\n+++ b/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n+package org.mockito.internal.creation.instance;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class ConstructorInstantiatorTest extends TestBase {\n+\n+    static class SomeClass {}\n+    class SomeInnerClass {}\n+\n+    @Test public void creates_instances() {\n+        assertEquals(new ConstructorInstantiator(null).newInstance(SomeClass.class).getClass(), SomeClass.class);\n+    }\n+\n+    @Test public void creates_instances_of_inner_classes() {\n+        assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);\n+    }\n+\n+    @Ignore //TODO SF\n+    @Test public void explains_when_constructor_cannot_be_found() {\n+        fail();\n+    }\n+\n+    @Ignore //TODO SF\n+    @Test public void fails_with_graceful_message() {\n+        fail();\n+    }\n+}\n--- a/test/org/mockitousage/constructor/CreatingMocksWithConstructor.java\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructor.java\n public class CreatingMocksWithConstructor extends TestBase {\n \n     static abstract class AbstractMessage {\n-        String message = \"hey!\";\n+        private final String message;\n+        AbstractMessage() {\n+            this.message = \"hey!\";\n+        }\n         String getMessage() {\n             return message;\n         }\n     }\n \n     static class Message extends AbstractMessage {}\n+    class InnerClass extends AbstractMessage {}\n \n     @Test\n     public void can_create_mock_with_constructor() {\n         AbstractMessage mock = mock(AbstractMessage.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n         //the message is a part of state of the mocked type that gets initialized in constructor\n         assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    public void can_mock_inner_classes() {\n+        InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(this).defaultAnswer(CALLS_REAL_METHODS));\n+\n+        //the message is a part of state of the mocked type that gets initialized in constructor\n+        assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    @Ignore //TODO SF\n+    public void mocking_inner_classes_with_wrong_outer_instance() {\n+        fail();\n     }\n \n     @Test", "timestamp": 1416164910, "metainfo": ""}