{"sha": "affa89d1e43844ba83bd152fe41c5688d6b3df3f", "log": "Refactored LastArguments so that it all belongs to MockingProgress  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401110", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n import org.mockito.internal.matchers.LessOrEqual;\n import org.mockito.internal.matchers.LessThan;\n import org.mockito.internal.progress.EmptyReturnValues;\n-import org.mockito.internal.progress.LastArguments;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n \n /**\n  * See {@link Matchers} for general info about matchers.\n  * Scroll down to see all methods - full list of matchers.\n  */\n public class AdditionalMatchers {\n+    \n+    private static MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n \n     /**\n      * argument greater than or equal the given value.\n      * @return <code>false</code>.\n      */\n     public static boolean and(boolean first, boolean second) {\n-        return LastArguments.instance().reportAnd().returnFalse();\n+        return mockingProgress.getLastArguments().reportAnd().returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte and(byte first, byte second) {\n-        return LastArguments.instance().reportAnd().returnZero();\n+        return mockingProgress.getLastArguments().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char and(char first, char second) {\n-        return LastArguments.instance().reportAnd().returnChar();\n+        return mockingProgress.getLastArguments().reportAnd().returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double and(double first, double second) {\n-        return LastArguments.instance().reportAnd().returnZero();\n+        return mockingProgress.getLastArguments().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float and(float first, float second) {\n-        return LastArguments.instance().reportAnd().returnZero();\n+        return mockingProgress.getLastArguments().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int and(int first, int second) {\n-        return LastArguments.instance().reportAnd().returnZero();\n+        return mockingProgress.getLastArguments().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long and(long first, long second) {\n-        return LastArguments.instance().reportAnd().returnZero();\n+        return mockingProgress.getLastArguments().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short and(short first, short second) {\n-        return LastArguments.instance().reportAnd().returnZero();\n+        return mockingProgress.getLastArguments().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T and(T first, T second) {\n-        return LastArguments.instance().reportAnd().<T>returnNull();\n+        return mockingProgress.getLastArguments().reportAnd().<T>returnNull();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean or(boolean first, boolean second) {\n-        return LastArguments.instance().reportOr().returnFalse();\n+        return mockingProgress.getLastArguments().reportOr().returnFalse();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T or(T first, T second) {\n-        return LastArguments.instance().reportOr().<T>returnNull();\n+        return mockingProgress.getLastArguments().reportOr().<T>returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short or(short first, short second) {\n-        return LastArguments.instance().reportOr().returnZero();\n+        return mockingProgress.getLastArguments().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long or(long first, long second) {\n-        return LastArguments.instance().reportOr().returnZero();\n+        return mockingProgress.getLastArguments().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int or(int first, int second) {\n-        return LastArguments.instance().reportOr().returnZero();\n+        return mockingProgress.getLastArguments().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float or(float first, float second) {\n-        return LastArguments.instance().reportOr().returnZero();\n+        return mockingProgress.getLastArguments().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double or(double first, double second) {\n-        return LastArguments.instance().reportOr().returnZero();\n+        return mockingProgress.getLastArguments().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char or(char first, char second) {\n-        return LastArguments.instance().reportOr().returnChar();\n+        return mockingProgress.getLastArguments().reportOr().returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte or(byte first, byte second) {\n-        return LastArguments.instance().reportOr().returnZero();\n+        return mockingProgress.getLastArguments().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T not(T first) {\n-        return LastArguments.instance().reportNot().<T>returnNull();\n+        return mockingProgress.getLastArguments().reportNot().<T>returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short not(short first) {\n-        return LastArguments.instance().reportNot().returnZero();\n+        return mockingProgress.getLastArguments().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int not(int first) {\n-        return LastArguments.instance().reportNot().returnZero();\n+        return mockingProgress.getLastArguments().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long not(long first) {\n-        return LastArguments.instance().reportNot().returnZero();\n+        return mockingProgress.getLastArguments().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float not(float first) {\n-        return LastArguments.instance().reportNot().returnZero();\n+        return mockingProgress.getLastArguments().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double not(double first) {\n-        return LastArguments.instance().reportNot().returnZero();\n+        return mockingProgress.getLastArguments().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char not(char first) {\n-        return LastArguments.instance().reportNot().returnChar();\n+        return mockingProgress.getLastArguments().reportNot().returnChar();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean not(boolean first) {\n-        return LastArguments.instance().reportNot().returnFalse();\n+        return mockingProgress.getLastArguments().reportNot().returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte not(byte first) {\n-        return LastArguments.instance().reportNot().returnZero();\n+        return mockingProgress.getLastArguments().reportNot().returnZero();\n     }\n \n     /**\n     }\n     \n     private static EmptyReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher);\n+        return mockingProgress.getLastArguments().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n import org.mockito.internal.matchers.StartsWith;\n import org.mockito.internal.matchers.apachecommons.ReflectionEquals;\n import org.mockito.internal.progress.EmptyReturnValues;\n-import org.mockito.internal.progress.LastArguments;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n \n /**\n  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n  */\n @SuppressWarnings(\"unchecked\")\n public class Matchers {\n+    \n+    private static MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n \n     /**\n      * any boolean, Boolean or null.\n     }\n \n     private static EmptyReturnValues reportMatcher(Matcher<?> matcher) {\n-        return LastArguments.instance().reportMatcher(matcher);\n+        return mockingProgress.getLastArguments().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n         if (mockitoStubber.hasAnswersForStubbing()) {\n             //stubbing voids with stubVoid() or doAnswer() style\n             Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());\n-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n+            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getLastArguments(), invocation);\n             mockitoStubber.setMethodForStubbing(invocationMatcher);\n             return null;\n         }\n         VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n \n         Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());\n-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n+        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getLastArguments(), invocation);\n         \n         mockingProgress.validateState();\n \n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n @SuppressWarnings(\"unchecked\")\n public class MatchersBinder {\n \n-    public InvocationMatcher bindMatchers(Invocation invocation) {\n-        List<Matcher> lastMatchers = LastArguments.instance().pullMatchers();\n+    public InvocationMatcher bindMatchers(LastArguments lastArguments, Invocation invocation) {\n+        List<Matcher> lastMatchers = lastArguments.pullMatchers();\n         validateMatchers(invocation, lastMatchers);\n \n         InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n @SuppressWarnings(\"unchecked\")\n public class LastArguments {\n     \n-    private static final ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();\n-    \n     private Stack<Matcher> matcherStack = new Stack<Matcher>();\n-\n-    public static LastArguments instance() {\n-        if (INSTANCE.get() == null) {\n-            INSTANCE.set(new LastArguments()); \n-        }\n-        \n-        return INSTANCE.get();\n-    }\n     \n     public EmptyReturnValues reportMatcher(Matcher matcher) {\n         matcherStack.push(matcher);\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n     void resetOngoingStubbing();\n \n     List<Invocation> pullStubbedInvocations();\n+\n+    LastArguments getLastArguments();\n }\n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n public class MockingProgressImpl implements MockingProgress {\n     \n     private final Reporter reporter = new Reporter();\n+    private final LastArguments lastArguments = new LastArguments();\n     \n     OngoingStubbing ongoingStubbing;\n     private VerificationMode verificationMode;\n         }\n       \n         //TODO LastArguments should be somewhere here...\n-        LastArguments.instance().validateState();\n+        getLastArguments().validateState();\n     }\n \n     public void stubbingCompleted(Invocation invocation) {\n         stubbingInProgress = false;\n         verificationMode = null;\n         //TODO LastArguments should be somewhere here...\n-        LastArguments.instance().reset();\n+        getLastArguments().reset();\n     }\n \n     public List<Invocation> pullStubbedInvocations() {\n         stubbedInvocations.clear();\n         return ret;\n     }\n+\n+    public LastArguments getLastArguments() {\n+        return lastArguments;\n+    }\n }\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n     public List<Invocation> pullStubbedInvocations() {\n         return threadSafely().pullStubbedInvocations();\n     }\n+\n+    public LastArguments getLastArguments() {\n+        return threadSafely().getLastArguments();\n+    }\n }\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n+import org.mockito.internal.progress.LastArguments;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.MockingProgressImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n     \n     private class ExceptionThrowingBinder extends MatchersBinder {\n         @Override\n-        public InvocationMatcher bindMatchers(Invocation invocation) {\n+        public InvocationMatcher bindMatchers(LastArguments lastArguments, Invocation invocation) {\n             throw new InvalidUseOfMatchersException(\"\");\n         }\n     }", "timestamp": 1230495956, "metainfo": ""}