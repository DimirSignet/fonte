{"sha": "b5403f8d1f780ed7b866801e459c861dd4d98798", "log": "Finished fixing javadocs after changing ReturnValues into Answers More rename job in the same domain  --HG-- rename : src/org/mockito/internal/returnvalues/GloballyConfiguredAnswer.java => src/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java rename : src/org/mockito/internal/returnvalues/ReturnsEmptyValues.java => src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java rename : src/org/mockito/internal/returnvalues/ReturnsMocks.java => src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java rename : src/org/mockito/internal/returnvalues/ReturnsMoreEmptyValues.java => src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java rename : src/org/mockito/internal/returnvalues/ReturnsSmartNulls.java => src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java rename : src/org/mockito/internal/returnvalues/package.html => src/org/mockito/internal/stubbing/defaultanswers/package.html rename : test/org/mockito/internal/returnvalues/HasPrimitiveMethods.java => test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java rename : test/org/mockito/internal/returnvalues/ReturnsEmptyValuesTest.java => test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java rename : test/org/mockito/internal/returnvalues/ReturnsMocksTest.java => test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java rename : test/org/mockito/internal/returnvalues/ReturnsMoreEmptyValuesTest.java => test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java rename : test/org/mockito/internal/returnvalues/ReturnsSmartNullsTest.java => test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java rename : test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java => test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401448", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n import org.mockito.internal.progress.NewOngoingStubbing;\n-import org.mockito.internal.returnvalues.ReturnsEmptyValues;\n-import org.mockito.internal.returnvalues.GloballyConfiguredAnswer;\n-import org.mockito.internal.returnvalues.ReturnsMocks;\n-import org.mockito.internal.returnvalues.ReturnsMoreEmptyValues;\n-import org.mockito.internal.returnvalues.ReturnsSmartNulls;\n import org.mockito.internal.stubbing.Stubber;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.stubbing.answers.AnswerReturnValuesAdapter;\n import org.mockito.internal.stubbing.answers.DoesNothing;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.runners.MockitoJUnitRunner;\n  * \n  * <h3 id=\"14\">14. Changing default return values of unstubbed invocations</h3>\n  * \n- * You can create a mock with specified strategy of for its return values.\n+ * You can create a mock with specified strategy for its return values.\n  * It's quite advanced feature and typically you don't need it to write decent tests.\n- * However, it can be helpful for working with legacy systems.\n- * <p>\n- * Obviously those return values are used only when you don't stub the method call.\n+ * However, it can be helpful for working with <b>legacy systems</b>.\n+ * <p>\n+ * Obviously those return values are used <b>only</b> when you don't stub the method call.\n  * \n  * <pre>\n  *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n- *   Foo mockTwo = mock(Foo.class, new YourOwnReturnValues()); \n- * </pre>\n- * \n- * <p>\n- * Read more about this interesting implementation of <i>ReturnValues</i>: {@link Mockito#RETURNS_SMART_NULLS}\n+ *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); \n+ * </pre>\n+ * \n+ * <p>\n+ * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}\n  * \n  * <h3 id=\"15\">15. (**New**) Capturing arguments for further assertions</h3>\n  * \n     private static final MockitoCore MOCKITO_CORE = new MockitoCore();\n     \n     /**\n-     * Answer of unstubbed invocations used by all Mockito mocks by default.\n-     * <p>\n-     * {@link ReturnValues} defines the return values of unstubbed invocations. \n+     * The default Answer of every mock <b>if</b> the mock was not stubbed. \n+     * Typically it just returns some empty value. \n+     * <p>\n+     * {@link Answer} cab be used to define the return values of unstubbed invocations. \n      * <p>\n      * This implementation first tries the global configuration. \n      * If there is no global configuration then it uses {@link ReturnsEmptyValues} (returns zeros, empty collections, nulls, etc.)\n     public static final Answer RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n     \n     /**\n-     * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n-     * <p>\n-     * {@link ReturnValues} defines the return values of unstubbed invocations.\n+     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * <p>\n+     * {@link Answer} cab be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n-     * This implementation of ReturnValues makes unstubbed methods <b>return SmartNull instead of null</b>.\n+     * This implementation of Answer <b>returns SmartNull instead of null</b>.\n      * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n      * <p>\n      * ReturnsSmartNulls first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})\n     public static final Answer RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n     \n     /**\n-     * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n-     * <p>\n-     * {@link ReturnValues} defines the return values of unstubbed invocations.\n+     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * <p>\n+     * {@link Answer} cab be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code. \n      * <p>\n     public static final Answer RETURNS_MOCKS = new ReturnsMocks();\n \n     /**\n-     * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8\n+     * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8 - decide whether to hide it or not?\n      * TODO: mention partial mocks warning\n      * \n-     * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n-     * <p>\n-     * {@link ReturnValues} defines the return values of unstubbed invocations.\n+     * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n+     * <p>\n+     * {@link Answer} cab be used to define the return values of unstubbed invocations.\n      * <p>\n      * This implementation can be helpful when working with legacy code.\n      * When this implementation is used, unstubbed methods will delegate to the real implementation.\n      * <p>\n      * See {@link Mockito#mock(Class, Answer)}\n      * <p>\n-     * The reason why it is deprecated is that ReturnValues is being replaced by Answer\n+     * Why it is deprecated? ReturnValues is being replaced by Answer\n      * for better consistency & interoperability of the framework. \n      * Answer interface has been in Mockito for a while and it's the same as ReturnValues.\n+     * There's no point in mainting exactly the same interfaces.\n      * <p>\n      * Creates mock with a specified strategy for its return values. \n      * It's quite advanced feature and typically you don't need it to write decent tests.\n      * <p>See examples in javadoc for {@link Mockito} class</p>\n      * \n      * @param classToMock class or interface to mock\n-     * @param returnValues default return values for unstubbed methods\n+     * @param defaultAnswer default return values for unstubbed methods\n      *\n      * @return mock object\n      */\n--- a/src/org/mockito/ReturnValues.java\n+++ b/src/org/mockito/ReturnValues.java\n  * @deprecated\n  * <b>Just use {@link Answer} interface</b>\n  * <p>\n- * The reason why it is deprecated is that ReturnValues is being replaced by Answer\n+ * Why it is deprecated? ReturnValues is being replaced by Answer\n  * for better consistency & interoperability of the framework. \n  * Answer interface has been in Mockito for a while and it's the same as ReturnValues.\n+ * There's no point in mainting exactly the same interfaces.\n  * <p>\n  * Configures return values for an unstubbed invocation\n  * <p>\n--- a/src/org/mockito/configuration/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/configuration/DefaultMockitoConfiguration.java\n \n import org.mockito.ReturnValues;\n import org.mockito.internal.configuration.DefaultAnnotationEngine;\n-import org.mockito.internal.returnvalues.ReturnsEmptyValues;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n import org.mockito.stubbing.Answer;\n \n /**\n--- a/src/org/mockito/configuration/IMockitoConfiguration.java\n+++ b/src/org/mockito/configuration/IMockitoConfiguration.java\n package org.mockito.configuration;\n \n import org.mockito.ReturnValues;\n-import org.mockito.internal.returnvalues.ReturnsEmptyValues;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n import org.mockito.stubbing.Answer;\n \n /**\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"extraInterfaces() requires at least one interface.\"\n         ));\n     }\n-\n-    public void sayThatGetReturnValuesIsNowDeprecated() {\n-        throw new MockitoException(join( \n-                \"getReturnValues() is not used by the framework ever since verion 1.8\", \n-                \"Please implement getDefaultBehavior() instead\",\n-                \"Sorry for inconvenience\"));\n-    }\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n         return spiedInstance != null;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public MockSettings defaultAnswer(Answer defaultAnswer) {\n         this.defaultAnswer = defaultAnswer;\n         return this;\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import org.mockito.configuration.IMockitoConfiguration;\n+import org.mockito.internal.configuration.GlobalConfiguration;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Globally configured Answer.\n+ * <p>\n+ * See javadoc for {@link IMockitoConfiguration}\n+ */\n+public class GloballyConfiguredAnswer implements Answer<Object> {\n+    \n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        return new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.mockito.internal.creation.ClassNameFinder;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.MockName;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.internal.util.Primitives;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Default answer of every Mockito mock.\n+ * <ul>\n+ * <li>\n+ *  Returns appropriate primitive for primitive-returning methods\n+ * </li>\n+ * <li>\n+ *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)\n+ * </li>\n+ * <li>\n+ *  Returns empty collection for collection-returning methods (works for most commonly used collection types)\n+ * </li>\n+ * <li>\n+ *  Returns description of mock for toString() method\n+ * </li>\n+ * <li>\n+ *  Returns null for everything else\n+ * </li>\n+ * </ul>\n+ */\n+public class ReturnsEmptyValues implements Answer<Object> {\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n+     */\n+    public Object answer(InvocationOnMock invocation) {\n+        if (Invocation.isToString(invocation)) {\n+            Object mock = invocation.getMock();\n+            MockName name = new MockUtil().getMockName(mock);\n+            if (name.isSurrogate()) {\n+                return \"Mock for \" + ClassNameFinder.classNameForMock(mock) + \", hashCode: \" + mock.hashCode();\n+            } else {\n+                return name.toString();\n+            }\n+        }\n+        \n+        Class<?> returnType = invocation.getMethod().getReturnType();\n+        return returnValueFor(returnType);\n+    }\n+    \n+    Object returnValueFor(Class<?> type) {\n+        if (type.isPrimitive()) {\n+            return primitiveOf(type);\n+        } else if (Primitives.isPrimitiveWrapper(type)) {\n+            return Primitives.primitiveWrapperOf(type);\n+        //new instances are used instead of Collections.emptyList(), etc.\n+        //to avoid UnsupportedOperationException if code under test modifies returned collection\n+        } else if (type == Collection.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == Set.class) {\n+            return new HashSet<Object>();\n+        } else if (type == HashSet.class) {\n+            return new HashSet<Object>();\n+        } else if (type == SortedSet.class) {\n+            return new TreeSet<Object>();\n+        } else if (type == TreeSet.class) {\n+            return new TreeSet<Object>();\n+        } else if (type == LinkedHashSet.class) {\n+            return new LinkedHashSet<Object>();\n+        } else if (type == List.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == LinkedList.class) {\n+            return new LinkedList<Object>();\n+        } else if (type == ArrayList.class) {\n+            return new ArrayList<Object>();\n+        } else if (type == Map.class) {\n+            return new HashMap<Object, Object>();\n+        } else if (type == HashMap.class) {\n+            return new HashMap<Object, Object>();\n+        } else if (type == SortedMap.class) {\n+            return new TreeMap<Object, Object>();\n+        } else if (type == TreeMap.class) {\n+            return new TreeMap<Object, Object>();\n+        } else if (type == LinkedHashMap.class) {\n+            return new LinkedHashMap<Object, Object>();\n+        }       \n+        //Let's not care about the rest of collections.\n+        return null;\n+    }\n+\n+    private Object primitiveOf(Class<?> type) {\n+        if (type == Boolean.TYPE) {\n+            return false;\n+        } else if (type == Character.TYPE) {\n+            return (char) 0;\n+        } else {\n+            return 0;\n+        } \n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import org.mockito.internal.MockitoCore;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.creation.jmock.ClassImposterizer;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+public class ReturnsMocks implements Answer<Object> {\n+    \n+    private MockitoCore mockitoCore = new MockitoCore();\n+    private Answer<Object> delegate = new ReturnsMoreEmptyValues();\n+    \n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        Object ret = delegate.answer(invocation);\n+        if (ret != null) {\n+            return ret;\n+        }\n+            \n+        return returnValueFor(invocation.getMethod().getReturnType());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Object returnValueFor(Class<?> clazz) {\n+        if (!ClassImposterizer.INSTANCE.canImposterise(clazz)) {\n+            return null;\n+        }\n+        \n+        return mockitoCore.mock((Class) clazz, new MockSettingsImpl().defaultAnswer(this));\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import java.lang.reflect.Array;\n+\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * It's likely this implementation will be used by default by every Mockito 2.0 mock.\n+ * <p>\n+ * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}\n+ * <p>\n+ * Current version of Mockito mocks by deafult use {@link ReturnsEmptyValues}  \n+ * <ul>\n+ * <li>\n+ *  Returns appropriate primitive for primitive-returning methods\n+ * </li>\n+ * <li>\n+ *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)\n+ * </li>\n+ * <li>\n+ *  Returns empty collection for collection-returning methods (works for most commonly used collection types)\n+ * </li>\n+ * <li>\n+ *  Returns empty array for array-returning methods\n+ * </li>\n+ * <li>\n+ *  Returns \"\" for String-returning method\n+ * </li>\n+ * <li>\n+ *  Returns description of mock for toString() method\n+ * </li>\n+ * <li>\n+ *  Returns null for everything else\n+ * </li>\n+ * </ul>\n+ */\n+public class ReturnsMoreEmptyValues implements Answer<Object> {\n+    \n+    private Answer<Object> delegate = new ReturnsEmptyValues();\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n+     */\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        Object ret = delegate.answer(invocation);\n+        if (ret != null) {\n+            return ret;\n+        }\n+\n+        Class<?> returnType = invocation.getMethod().getReturnType();\n+        return returnValueFor(returnType);\n+    }\n+    \n+    Object returnValueFor(Class<?> type) {\n+        if (type == String.class) {\n+            return \"\";\n+        }  else if (type.isArray()) {\n+            Class<?> componenetType = type.getComponentType();\n+            return Array.newInstance(componenetType, 0);\n+        }\n+        return null;\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import java.lang.reflect.Method;\n+\n+import org.mockito.Mockito;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.creation.jmock.ClassImposterizer;\n+import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Optional Answer that can be used with\n+ * {@link Mockito#mock(Class, Answer)}\n+ * <p>\n+ * This implementation can be helpful when working with legacy code. Unstubbed\n+ * methods often return null. If your code uses the object returned by an\n+ * unstubbed call you get a NullPointerException. This implementation of\n+ * Answer returns SmartNulls instead of nulls.\n+ * SmartNull gives nicer exception message than NPE because it points out the\n+ * line where unstubbed method was called. You just click on the stack trace.\n+ * <p>\n+ * ReturnsSmartNulls first tries to return ordinary return values (see\n+ * {@link ReturnsMoreEmptyValues}) then it tries to return SmartNull. If the\n+ * return type is not mockable (e.g. final) then ordinary null is returned.\n+ * <p>\n+ * ReturnsSmartNulls will be probably the default return values strategy in\n+ * Mockito 2.0\n+ */\n+public class ReturnsSmartNulls implements Answer<Object> {\n+\n+    private final class ThrowingInterceptor implements MethodInterceptor {\n+        private final InvocationOnMock invocation;\n+        private final Location location = new Location();\n+\n+        private ThrowingInterceptor(InvocationOnMock invocation) {\n+            this.invocation = invocation;\n+        }\n+\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            if (Invocation.isToString(method)) {\n+                return \"SmartNull returned by unstubbed \" + invocation.getMethod().getName() + \"() method on mock\";\n+            }\n+            \n+            new Reporter().smartNullPointerException(location);\n+            return null;\n+        }\n+    }\n+\n+    private final Answer<Object> delegate = new ReturnsMoreEmptyValues();\n+\n+    public Object answer(final InvocationOnMock invocation) throws Throwable {\n+        Object defaultReturnValue = delegate.answer(invocation);\n+        if (defaultReturnValue != null) {\n+            return defaultReturnValue;\n+        }\n+        Class<?> type = invocation.getMethod().getReturnType();\n+        if (ClassImposterizer.INSTANCE.canImposterise(type)) {\n+            return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type);\n+        }\n+        return null;\n+    }\n+}\n--- a/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n+++ b/test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java\n import org.mockito.internal.matchers.EqualsTest;\n import org.mockito.internal.progress.MockingProgressImplTest;\n import org.mockito.internal.progress.TimesTest;\n-import org.mockito.internal.returnvalues.ReturnsEmptyValuesTest;\n+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;\n import org.mockito.internal.util.ListUtilTest;\n import org.mockito.internal.util.MockUtilTest;\n import org.mockito.internal.verification.RegisteredInvocationsTest;\n--- a/test/org/mockito/configuration/MockitoConfiguration.java\n+++ b/test/org/mockito/configuration/MockitoConfiguration.java\n \n public class MockitoConfiguration extends DefaultMockitoConfiguration implements IMockitoConfiguration {\n \n-    private Answer<Object> overriddenReturnValues = null;\n+    private Answer<Object> overriddenDefaultAnswer = null;\n     private boolean cleansStackTrace;\n \n     //for testing purposes, allow to override the configuration\n-    public void overrideReturnValues(Answer<Object> returnValues) {\n-        this.overriddenReturnValues = returnValues;\n+    public void overrideDefaultAnswer(Answer<Object> defaultAnswer) {\n+        this.overriddenDefaultAnswer = defaultAnswer;\n     }\n \n     //for testing purposes, allow to override the configuration\n \n     @Override\n     public Answer<Object> getDefaultAnswer() {\n-        if (overriddenReturnValues == null) {\n+        if (overriddenDefaultAnswer == null) {\n             return super.getDefaultAnswer();\n         } else {\n-            return overriddenReturnValues;\n+            return overriddenDefaultAnswer;\n         }\n     }\n     \n--- a/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n     }\n     \n     @Test(expected = MockitoException.class)\n-    public void shouldFailWhenReturnValueSetForVoidMethod() throws Throwable {\n+    public void shouldFailWhenReturnValueIsSetForVoidMethod() throws Throwable {\n         validator.validate(new Returns(\"one\"), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n     }\n     \n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+interface HasPrimitiveMethods {\n+    boolean booleanMethod();\n+    char charMethod();\n+    int intMethod();\n+    long longMethod();\n+    float floatMethod();\n+    double doubleMethod();\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class ReturnsEmptyValuesTest extends TestBase {\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n+        ReturnsEmptyValues values = new ReturnsEmptyValues();\n+        \n+        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n+\n+        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n+        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());\n+        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());\n+        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());\n+        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());\n+\n+        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());\n+        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());\n+        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());\n+\n+        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());\n+        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());\n+        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());\n+        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());\n+        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());\n+        \n+        assertNull(values.returnValueFor(String.class));\n+    }\n+    \n+    @Test public void shouldReturnPrimitive() {\n+        ReturnsEmptyValues values = new ReturnsEmptyValues();\n+        \n+        assertEquals(false, values.returnValueFor(Boolean.TYPE));\n+        assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n+        assertEquals(0, values.returnValueFor(Byte.TYPE));\n+        assertEquals(0, values.returnValueFor(Short.TYPE));\n+        assertEquals(0, values.returnValueFor(Integer.TYPE));\n+        assertEquals(0, values.returnValueFor(Long.TYPE));\n+        assertEquals(0, values.returnValueFor(Float.TYPE));\n+        assertEquals(0, values.returnValueFor(Double.TYPE));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockitoutil.TestBase;\n+\n+public class ReturnsMocksTest extends TestBase {\n+    private ReturnsMocks values = new ReturnsMocks();\n+\n+    interface FooInterface {\n+    }\n+\n+    class BarClass {\n+    }\n+\n+    final class Baz {\n+    }\n+\n+    @Test\n+    // FIXME split into separate\n+    public void shouldReturnMockValueForInterface() throws Exception {\n+        Object interfaceMock = values.returnValueFor(FooInterface.class);\n+        assertTrue(new MockUtil().isMock(interfaceMock));\n+    }\n+\n+    public void shouldReturnMockValueForClass() throws Exception {\n+        Object classMock = values.returnValueFor(BarClass.class);\n+        assertTrue(new MockUtil().isMock(classMock));\n+    }\n+\n+    @Test\n+    public void shouldReturnNullForFinalClass() throws Exception {\n+        assertNull(values.returnValueFor(Baz.class));\n+    }\n+\n+    private Invocation invocationOf(Class<?> type, String methodName)\n+            throws NoSuchMethodException {\n+        return new Invocation(new Object(), type.getMethod(methodName,\n+                new Class[0]), new Object[0], 1, null);\n+    }\n+\n+    @Test\n+    public void shouldReturnTheUsualDefaultValuesForPrimitives()\n+            throws Throwable {\n+        ReturnsMocks answer = new ReturnsMocks();\n+        assertEquals(false, answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n+        assertEquals((char) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n+        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+    }\n+    \n+    interface StringMethods {\n+        String stringMethod();\n+        String[] stringArrayMethod();\n+    }\n+    \n+    @Test\n+    public void shouldReturnEmptyArray() throws Throwable {\n+        String[] ret = (String[]) values.answer(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n+        \n+        assertTrue(ret.getClass().isArray());\n+        assertTrue(ret.length == 0);\n+    }\n+    \n+    @Test\n+    public void shouldReturnEmptyString() throws Throwable {\n+        assertEquals(\"\", values.answer(invocationOf(StringMethods.class, \"stringMethod\")));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class ReturnsMoreEmptyValuesTest extends TestBase {\n+\n+    private ReturnsMoreEmptyValues rv = new ReturnsMoreEmptyValues();\n+\n+    @Test\n+    public void shouldReturnEmptyArray() {\n+        String[] ret = (String[]) rv.returnValueFor((new String[0]).getClass());\n+        assertTrue(ret.getClass().isArray());\n+        assertTrue(ret.length == 0);\n+    }\n+    \n+    @Test\n+    public void shouldReturnEmptyString() {\n+        assertEquals(\"\", rv.returnValueFor(String.class));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing.defaultanswers;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.stubbing.Answer;\n+import org.mockitoutil.TestBase;\n+\n+public class ReturnsSmartNullsTest extends TestBase {\n+    \n+    private Invocation invocationOf(Class<?> type, String methodName) throws NoSuchMethodException {\n+        return new Invocation(new Object(), type.getMethod(methodName, new Class[0]), new Object[0], 1, null);\n+    }\n+    \n+    @Test\n+    public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Throwable {\n+        Answer<Object> answer = new ReturnsSmartNulls();\n+        assertEquals(false  ,   answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n+        assertEquals((char) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n+        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+    }\n+    \n+    interface Foo {\n+        Foo get();\n+    }\n+    \n+    @Test\n+    public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Throwable {\n+        Answer<Object> answer = new ReturnsSmartNulls();\n+        \n+        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n+        \n+        try {\n+            smartNull.get();\n+            fail();\n+        } catch (SmartNullPointerException expected) {}\n+    }\n+    \n+    @Test\n+    public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {\n+        Answer<Object> answer = new ReturnsSmartNulls();\n+        \n+        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n+        \n+        //TODO: after 1.8 add functionality of printing params\n+        assertEquals(\"SmartNull returned by unstubbed get() method on mock\", smartNull + \"\");\n+    }\n+}\n--- a/test/org/mockitousage/basicapi/ResetTest.java\n+++ b/test/org/mockitousage/basicapi/ResetTest.java\n     }\n     \n     @Test\n-    public void shouldMaintainPreviousReturnValuesStrategy() {\n+    public void shouldMaintainPreviousDefaultAnswer() {\n         //given\n         mock = mock(IMethods.class, RETURNS_MOCKS);\n         //when\n--- a/test/org/mockitousage/configuration/MockitoConfigurationTest.java\n+++ b/test/org/mockitousage/configuration/MockitoConfigurationTest.java\n     \n     @Test\n     public void shouldReadConfigurationClassFromClassPath() {\n-        ConfigurationAccess.getConfig().overrideReturnValues(new Answer<Object>() {\n+        ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) {\n                 return \"foo\";\n             }});\n--- /dev/null\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.stubbing;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"deprecation\")\n+public class StubbingConsecutiveAnswersTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+   \n+    @Test\n+    public void shouldReturnConsecutiveValues() throws Exception {\n+        when(mock.simpleMethod())\n+            .thenReturn(\"one\")\n+            .thenReturn(\"two\")\n+            .thenReturn(\"three\");\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+    }\n+\n+    @SuppressWarnings(\"all\")\n+    @Test\n+    public void shouldReturnConsecutiveValuesForTwoNulls() throws Exception {\n+        when(mock.simpleMethod()).thenReturn(null, null);\n+        \n+        assertNull(mock.simpleMethod());        \n+        assertNull(mock.simpleMethod());        \n+    }\n+\n+    @Test\n+    public void shouldReturnConsecutiveValuesSetByShortenThenReturnMethod() throws Exception {        \n+        when(mock.simpleMethod())\n+            .thenReturn(\"one\", \"two\", \"three\");\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+        assertEquals(\"three\", mock.simpleMethod());\n+    }\n+\n+    @Test\n+    public void shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods()\n+            throws Exception {\n+        when(mock.simpleMethod())\n+            .thenReturn(\"zero\")\n+            .thenReturn(\"one\", \"two\")\n+            .thenThrow(new NullPointerException(), new RuntimeException())\n+            .thenReturn(\"three\")\n+            .thenThrow(new IllegalArgumentException());\n+\n+        assertEquals(\"zero\", mock.simpleMethod());\n+        assertEquals(\"one\", mock.simpleMethod());\n+        assertEquals(\"two\", mock.simpleMethod());\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (RuntimeException e) {}\n+        assertEquals(\"three\", mock.simpleMethod());\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldThrowConsecutively() throws Exception {\n+        when(mock.simpleMethod())\n+            .thenThrow(new RuntimeException())\n+            .thenThrow(new IllegalArgumentException())\n+            .thenThrow(new NullPointerException());\n+\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (RuntimeException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (IllegalArgumentException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+    }\n+\n+    @Test\n+    public void shouldThrowConsecutivelySetByShortenThenThrowMethod() throws Exception {\n+        when(mock.simpleMethod())\n+            .thenThrow(new RuntimeException(), new IllegalArgumentException(), new NullPointerException());\n+\n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (RuntimeException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (IllegalArgumentException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldMixConsecutiveReturnsWithExcepions() throws Exception {\n+        when(mock.simpleMethod())\n+            .thenThrow(new IllegalArgumentException())\n+            .thenReturn(\"one\")\n+            .thenThrow(new NullPointerException())\n+            .thenReturn(null);\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (IllegalArgumentException e) {}\n+        \n+        assertEquals(\"one\", mock.simpleMethod());\n+        \n+        try {\n+            mock.simpleMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+        \n+        assertEquals(null, mock.simpleMethod());\n+        assertEquals(null, mock.simpleMethod());\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldValidateConsecutiveException() throws Exception {\n+        when(mock.simpleMethod())\n+            .thenReturn(\"one\")\n+            .thenThrow(new Exception());\n+    }\n+    \n+    @Test\n+    public void shouldStubVoidMethodAndContinueThrowing() throws Exception {\n+        stubVoid(mock)\n+            .toThrow(new IllegalArgumentException())\n+            .toReturn()\n+            .toThrow(new NullPointerException())\n+            .on().voidMethod();\n+        \n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch (IllegalArgumentException e) {}\n+        \n+        mock.voidMethod();\n+        \n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+        \n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch (NullPointerException e) {}        \n+    }\n+    \n+    @Test\n+    public void shouldStubVoidMethod() throws Exception {\n+        stubVoid(mock)\n+            .toReturn()\n+            .toThrow(new NullPointerException())\n+            .toReturn()\n+            .on().voidMethod();\n+        \n+        mock.voidMethod();\n+        \n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch (NullPointerException e) {}\n+        \n+        mock.voidMethod();\n+        mock.voidMethod();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldValidateConsecutiveExceptionForVoidMethod() throws Exception {\n+        stubVoid(mock)\n+            .toReturn()\n+            .toThrow(new Exception())\n+            .on().voidMethod();\n+    }\n+}\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n     }    \n     \n     @Test\n-    public void shouldMixThrowablesAndReturnValuesOnDifferentMocks() throws Exception {\n+    public void shouldMixThrowablesAndReturnsOnDifferentMocks() throws Exception {\n         when(mock.add(\"ExceptionOne\")).thenThrow(new ExceptionOne());\n         when(mock.getLast()).thenReturn(\"last\");\n         stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n     @After\n     public void cleanUpConfigInAnyCase() {\n         ConfigurationAccess.getConfig().overrideCleansStackTrace(false);\n-        ConfigurationAccess.getConfig().overrideReturnValues(null);\n+        ConfigurationAccess.getConfig().overrideDefaultAnswer(null);\n     }\n \n     @Before", "timestamp": 1243029928, "metainfo": ""}