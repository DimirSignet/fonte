{"sha": "004ce06f0ba5601ae6eedcd5c09563d638069e93", "log": "refactored some stuff, added test  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40325", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n         }\n     }\n     \n-    public Invocation findPreviousInOrder(List<Invocation> invocations, InvocationMatcher wanted) {\n+    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations) {\n         LinkedList<Invocation> verifiedOnly = ListUtil.filter(invocations, new RemoveUnverifiedInOrder());\n         \n         if (verifiedOnly.isEmpty()) {\n--- a/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n             return;\n         }\n         \n-        Invocation previousInOrder = finder.findPreviousInOrder(invocations, wanted);\n+        Invocation previousInOrder = finder.findPreviousVerifiedInOrder(invocations);\n         if (previousInOrder == null) {\n             reporter.wantedButNotInvoked(wanted);\n         } else {\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.internal.progress.VerificationModeBuilder;\n+import org.mockito.internal.progress.VerificationModeImpl;\n \n \n public class InvocationsFinderTest extends RequiresValidState {\n         \n         assertNull(finder.getLastStackTrace(Collections.<Invocation>emptyList()));\n     } \n+    \n+    @Test\n+    public void shouldFindAllMatchingUnverifiedChunks() throws Exception {\n+        List<Invocation> allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation));\n+        assertThat(allMatching, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n+        \n+        simpleMethodInvocation.markVerifiedInOrder();\n+        allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation));\n+        assertThat(allMatching, collectionHasExactlyInOrder(simpleMethodInvocationTwo));\n+        \n+        simpleMethodInvocationTwo.markVerifiedInOrder();\n+        allMatching = finder.findAllMatchingUnverifiedChunks(invocations, new InvocationMatcher(simpleMethodInvocation));\n+        assertTrue(allMatching.isEmpty());\n+    }\n+    \n+    @Test\n+    public void shouldFindMatchingChunk() throws Exception {\n+        Invocation simpleMethodInvocationThree = new InvocationBuilder().toInvocation();\n+        invocations.add(simpleMethodInvocationThree);\n+        \n+        VerificationModeImpl inOrderMode = new VerificationModeBuilder().times(2).inOrder();\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), inOrderMode);\n+        assertThat(chunk, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n+    }\n+    \n+    @Test\n+    public void shouldReturnAllChunksWhenModeIsAtLeastOnce() throws Exception {\n+        Invocation simpleMethodInvocationThree = new InvocationBuilder().toInvocation();\n+        invocations.add(simpleMethodInvocationThree);\n+        \n+        VerificationModeImpl atLeastOnceInOrder = new VerificationModeBuilder().inOrder();\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnceInOrder);\n+        assertThat(chunk, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n+    }\n+    \n+    @Test\n+    public void shouldReturnAllChunksWhenWantedCountDoesntMatch() throws Exception {\n+        Invocation simpleMethodInvocationThree = new InvocationBuilder().toInvocation();\n+        invocations.add(simpleMethodInvocationThree);\n+        \n+        VerificationModeImpl atLeastOnceInOrder = new VerificationModeBuilder().times(100).inOrder();\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnceInOrder);\n+        assertThat(chunk, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n+    }\n+    \n+    @Test\n+    public void shouldFindPreviousInOrder() throws Exception {\n+        Invocation previous = finder.findPreviousVerifiedInOrder(invocations);\n+        assertNull(previous);\n+        \n+        simpleMethodInvocation.markVerifiedInOrder();\n+        simpleMethodInvocationTwo.markVerifiedInOrder();\n+        \n+        previous = finder.findPreviousVerifiedInOrder(invocations);\n+        assertSame(simpleMethodInvocationTwo, previous);\n+    }\n }\n--- a/test/org/mockito/internal/verification/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/InvocationsFinderStub.java\n     }\n     \n     @Override\n-    public Invocation findPreviousInOrder(List<Invocation> invocations, InvocationMatcher wanted) {\n+    public Invocation findPreviousVerifiedInOrder(List<Invocation> invocations) {\n         return previousInOrderToReturn;\n     }\n }", "timestamp": 1201038055, "metainfo": ""}