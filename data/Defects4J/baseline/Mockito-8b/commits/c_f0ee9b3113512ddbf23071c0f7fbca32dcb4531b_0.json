{"sha": "f0ee9b3113512ddbf23071c0f7fbca32dcb4531b", "log": "removed hashCode() and equals() implementation from SmartNull  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401232", "commit": "\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n \n import java.lang.reflect.Method;\n \n+import net.sf.cglib.proxy.MethodInterceptor;\n import net.sf.cglib.proxy.MethodProxy;\n \n import org.mockito.Mockito;\n import org.mockito.ReturnValues;\n import org.mockito.exceptions.cause.BecauseThisMethodWasNotStubbed;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n-import org.mockito.internal.creation.MethodInterceptorFilter;\n-import org.mockito.internal.creation.MockAwareInterceptor;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}\n+ * Optional ReturnValues to be used with\n+ * {@link Mockito#mock(Class, ReturnValues)}\n  * <p>\n  * {@link ReturnValues} defines the return values of unstubbed calls.\n  * <p>\n- * This implementation can be helpful when working with legacy code.\n- * Unstubbed methods often return null. If your code uses the object returned by an unstubbed call you get a NullPointerException.\n- * This implementation of ReturnValues makes unstubbed methods return SmartNulls instead of nulls.\n- * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n+ * This implementation can be helpful when working with legacy code. Unstubbed\n+ * methods often return null. If your code uses the object returned by an\n+ * unstubbed call you get a NullPointerException. This implementation of\n+ * ReturnValues makes unstubbed methods return SmartNulls instead of nulls.\n+ * SmartNull gives nicer exception message than NPE because it points out the\n+ * line where unstubbed method was called. You just click on the stack trace.\n  * <p>\n- * SmartNullReturnValues first tries to return ordinary return values (see {@link MoreEmptyReturnValues})\n- * then it tries to return SmartNull. If the return type is not mockable (e.g. final) then ordinary null is returned.\n+ * SmartNullReturnValues first tries to return ordinary return values (see\n+ * {@link MoreEmptyReturnValues}) then it tries to return SmartNull. If the\n+ * return type is not mockable (e.g. final) then ordinary null is returned.\n  * <p>\n- * SmartNullReturnValues will be probably the default return values strategy in Mockito 2.0\n+ * SmartNullReturnValues will be probably the default return values strategy in\n+ * Mockito 2.0\n  */\n public class SmartNullReturnValues implements ReturnValues {\n+\n+    private final class ThrowingInterceptor implements MethodInterceptor {\n+        private final InvocationOnMock invocation;\n+        private final Exception whenCreated = new BecauseThisMethodWasNotStubbed(\"\\nBecause this method was not stubbed correctly:\");\n+\n+        private ThrowingInterceptor(InvocationOnMock invocation) {\n+            this.invocation = invocation;\n+        }\n+\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            if (Invocation.isToString(method)) {\n+                return \"SmartNull returned by \" + invocation.getMethod().getName() + \"() method on mock\";\n+            }\n+            throw new SmartNullPointerException(\"\\nYou have a NullPointerException here:\", whenCreated);\n+        }\n+    }\n \n     private final ReturnValues delegate = new MoreEmptyReturnValues();\n \n         }\n         Class<?> type = invocation.getMethod().getReturnType();\n         if (ClassImposterizer.INSTANCE.canImposterise(type)) {\n-            return ClassImposterizer.INSTANCE.imposterise(\n-                    new MethodInterceptorFilter<MockAwareInterceptor>(type, new MockAwareInterceptor() {\n-                        \n-                        Exception whenCreated = new BecauseThisMethodWasNotStubbed(\"\\nBecause this method was not stubbed correctly:\");\n-                        \n-                        public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n-                            if (Invocation.isToString(method)) {\n-                                return \"SmartNull returned by \" + invocation.getMethod().getName() + \"() method on mock\";\n-                            }\n-                            throw new SmartNullPointerException(\"\\nYou have a NullPointerException here:\", whenCreated);\n-                        }\n-\n-                        public void setInstance(Object mock) {\n-                        }\n-                    }), type);\n+            return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type);\n         }\n         return null;\n     }\n--- a/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n         ReturnValues returnValues = new SmartNullReturnValues();\n         \n         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n-        Foo otherSmartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, \"get\"));\n         \n         //TODO after 1.7 add functionality of printing params\n         assertEquals(\"SmartNull returned by get() method on mock\", smartNull + \"\");\n-        assertEquals(false, smartNull.equals(null));\n-        assertTrue(otherSmartNull.hashCode() != smartNull.hashCode());\n     }\n }\n--- a/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n     public void shouldNotThrowSmartNullPointerOnObjectMethods() {\n         Object smartNull = mock.objectReturningMethod();\n         smartNull.toString();\n-        smartNull.hashCode();\n-        smartNull.equals(null);\n     }\n }", "timestamp": 1232635109, "metainfo": ""}