{"sha": "42b3e6b1765c9269b0e16b52253d2c4b1c19cb90", "log": "removed equals() method from ExpectedInvocation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40124", "commit": "\n--- a/src/org/mockito/internal/ExpectedInvocation.java\n+++ b/src/org/mockito/internal/ExpectedInvocation.java\n public class ExpectedInvocation {\n \n     protected final Invocation invocation;\n-    private final List<IArgumentMatcher> matchers;\n+    protected final List<IArgumentMatcher> matchers;\n \n     public ExpectedInvocation(Invocation invocation, List<IArgumentMatcher> matchers) {\n         if (matchers == null) {\n     \n     public ExpectedInvocation(Invocation invocation) {\n         this(invocation, Collections.<IArgumentMatcher>emptyList());\n-    }\n-    \n-    public boolean equals(Object o) {\n-        if (o == null || !this.getClass().equals(o.getClass()))\n-            return false;\n-\n-        ExpectedInvocation other = (ExpectedInvocation) o;\n-        return invocation.equals(other.invocation) && matchers.equals(other.matchers);\n-    }\n-\n-    public int hashCode() {\n-        return 1;\n     }\n \n     public boolean matches(Invocation actual) {\n--- a/src/org/mockito/internal/Invocation.java\n+++ b/src/org/mockito/internal/Invocation.java\n     }\n \n     public int hashCode() {\n-        return 1;\n+        throw new RuntimeException(\"hashCode() is not implemented\");\n     }\n \n     private boolean equalArguments(Object[] arguments) {\n--- a/src/org/mockito/internal/MockitoBehavior.java\n+++ b/src/org/mockito/internal/MockitoBehavior.java\n public class MockitoBehavior<T> {\n \n     private RegisteredInvocations registeredInvocations = new RegisteredInvocations(new AllInvocationsFinder());\n-    private Map<ExpectedInvocation, Result> results = new HashMap<ExpectedInvocation, Result>();\n+    private LinkedList<StubbedInvocation> stubbed = new LinkedList<StubbedInvocation>();\n \n     private T mock;\n     private ExpectedInvocation invocationForStubbing;\n     public void addResult(Result result) {\n         assert invocationForStubbing != null;\n         registeredInvocations.removeLast();\n-        results.put(invocationForStubbing, result);\n+        stubbed.addFirst(new StubbedInvocation(invocationForStubbing, result));\n     }\n     \n     public void verify(ExpectedInvocation wanted, VerifyingMode mode) {\n     }\n \n     public Object resultFor(Invocation wanted) throws Throwable {\n-        for (ExpectedInvocation i : results.keySet()) {\n-            if (i.matches(wanted)) {\n-                return results.get(i).answer();\n+        for (StubbedInvocation s : stubbed) {\n+            if (s.matches(wanted)) {\n+                return s.getResult().answer();\n             }\n         }\n \n--- /dev/null\n+++ b/src/org/mockito/internal/StubbedInvocation.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal;\n+\n+\n+public class StubbedInvocation extends ExpectedInvocation {\n+\n+    private final Result result;\n+\n+    public StubbedInvocation(ExpectedInvocation invocation, Result result) {\n+        super(invocation.invocation, invocation.matchers);\n+        this.result = result;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+}\n--- a/test/org/mockito/InvocationTest.java\n+++ b/test/org/mockito/InvocationTest.java\n     }\n     \n     @Test\n-    public void shouldBeACitizenOfHashes() {\n+    public void shouldNotBeACitizenOfHashes() {\n         Map map = new HashMap();\n-        map.put(call, \"one\");\n-        map.put(nonEqualCall, \"two\");\n-        \n-        assertEquals(2, map.size());\n+        try {\n+            map.put(call, \"one\");\n+        } catch (RuntimeException e) {\n+            assertEquals(\"hashCode() is not implemented\", e.getMessage());\n+        }\n     }\n     \n     @Test\n--- a/test/org/mockito/internal/ExpectedInvocationTest.java\n+++ b/test/org/mockito/internal/ExpectedInvocationTest.java\n         Invocation invocationTwo = new InvocationBuilder().args(\"blah\").toInvocation();\n         \n         Map map = new HashMap();\n-        map.put(invocation, \"one\");\n-        map.put(invocationTwo, \"two\");\n+        map.put(new ExpectedInvocation(invocation), \"one\");\n+        map.put(new ExpectedInvocation(invocationTwo), \"two\");\n         \n         assertEquals(2, map.size());\n     }\n     }\n     \n     @Test\n-    public void shouldEqualWhenMatchersEqual() throws Exception {\n-        IArgumentMatcher m = new Equals(1);\n-        IArgumentMatcher mTwo = new Equals(2);\n-        ExpectedInvocation withMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(m));\n-        ExpectedInvocation withEqualMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(m));\n-        ExpectedInvocation withoutEqualMatchers = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(mTwo));\n-        \n-        assertTrue(withMatchers.equals(withEqualMatchers));\n-        assertFalse(withMatchers.equals(withoutEqualMatchers));\n-    }\n-    \n-    @Test\n     public void shouldToStringWithMatchers() throws Exception {\n         IArgumentMatcher m = NotNull.NOT_NULL;\n         ExpectedInvocation notNull = new ExpectedInvocation(new InvocationBuilder().toInvocation(), asList(m));", "timestamp": 1196639554, "metainfo": ""}