{"sha": "144cbb390ff3bf75d8967d0262255784166cc32e", "log": "simplified the test  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40106", "commit": "\n--- a/test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java\n+++ b/test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java\n \n import org.junit.Test;\n \n-\n /**\n  * Bridge method is generated by compiler when erasure in parent class is\n  * different. When is different then it means that in runtime we will have\n--- a/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n \n public class IncorectBindingPuzzleFixedTest {\n \n-    private BaseInteface mock;\n-\n-    private class BaseMessage {}\n-    \n-    private class Message extends BaseMessage {}\n-\n-    private interface BaseInteface {\n-        public void print(BaseMessage message);\n+    private Super mock;\n+    \n+    private void setMockWithDowncast(Super mock) {\n+        this.mock = mock;\n     }\n \n-    private interface DerivedInterface extends BaseInteface {\n-        public void print(Message message);\n+    private interface Super {\n+        public void print(Object message);\n     }\n \n-    private void print(BaseMessage message) {\n+    private interface Sub extends Super {\n+        public void print(String message);\n+    }\n+\n+    private void print(Object message) {\n         mock.print(message);\n     }\n \n     @Test\n     public void shouldUseArgumentTypeWhenOverloadingPuzzleDetected() throws Exception {\n-        DerivedInterface derivedMock = mock(DerivedInterface.class);\n-        mock = derivedMock;\n-        Message message = new Message();\n-        print(message);\n+        Sub sub = mock(Sub.class);\n+        setMockWithDowncast(sub);\n+        print(\"Hello\");\n         try {\n-            verify(derivedMock).print(message);\n+            verify(sub).print(\"Hello\");\n             fail();\n         } catch (VerificationError error) {\n             String expected = \n                 \"\\n\" +\n         \t\t\"Invocation differs from actual\" +\n         \t\t\"\\n\" +\n-        \t\t\"Wanted: DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$Message)\" +\n-        \t\t\"\\n\" +\n-        \t\t\"Actual: DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$BaseMessage)\";\n+                \"Wanted: Sub.print(class java.lang.String)\" +\n+                \"\\n\" +\n+                \"Actual: Sub.print(class java.lang.Object)\";\n             \n             assertEquals(expected, error.getMessage());\n         }\n     \n     @Test\n     public void shouldUseArgumentTypeWhenOverloadingPuzzleDetectedByStrictly() throws Exception {\n-        DerivedInterface derivedMock = mock(DerivedInterface.class);\n-        mock = derivedMock;\n-        Message message = new Message();\n-        print(message);\n+        Sub sub = mock(Sub.class);\n+        setMockWithDowncast(sub);\n+        print(\"Hello\");\n         Strictly strictly = createStrictOrderVerifier(mock);\n         try {\n-            strictly.verify(derivedMock).print(message);\n+            strictly.verify(sub).print(\"Hello\");\n             fail();\n         } catch (VerificationError error) {\n             String expected = \n                 \"\\n\" +\n                 \"Strict order verification failed\" +\n                 \"\\n\" +\n-                \"Wanted: DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$Message)\" +\n+                \"Wanted: Sub.print(class java.lang.String)\" +\n                 \"\\n\" +\n-                \"Actual: DerivedInterface.print(class org.mockito.usage.binding.IncorectBindingPuzzleFixedTest$BaseMessage)\";\n+                \"Actual: Sub.print(class java.lang.Object)\";\n             \n             assertEquals(expected, error.getMessage());\n         }", "timestamp": 1196442179, "metainfo": ""}