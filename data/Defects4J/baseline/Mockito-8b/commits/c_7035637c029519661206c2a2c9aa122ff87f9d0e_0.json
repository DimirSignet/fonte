{"sha": "7035637c029519661206c2a2c9aa122ff87f9d0e", "log": "implemented enhancement 41 added new handy matcher that is helpful when too much casting is around. added TODO for further matchers  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401175", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n     public static <T> T anyObject() {\n         return (T) reportMatcher(Any.ANY).returnNull();\n     }\n+    \n+    /**\n+     * any object of specified class. \n+     * Sometimes looks better than anyObject() \n+     * <p>\n+     * Alias to {@link Matchers#anyObject()}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T any(Class<T> clazz) {\n+        return isA(clazz);\n+    }\n \n     /**\n      * any String or null.\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n     IMethods iMethodsReturningMethod();\n \n     String stringReturningMethod();\n+\n+    Object objectArgMethod(Object str);\n+\n+    Object listArgMethod(List<String> list);\n+\n+    Object collectionArgMethod(Collection<String> collection);\n }\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/MoreMatchersTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class MoreMatchersTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+\n+    @Test\n+    public void shouldHelpOutWithUnnecessaryCasting() {\n+        when(mock.objectArgMethod(any(String.class))).thenReturn(\"string\");\n+        \n+        assertEquals(\"string\", mock.objectArgMethod(\"foo\"));\n+        assertEquals(null, mock.objectArgMethod(new Object()));\n+    }\n+    \n+    \n+    @Test\n+    public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n+//        TODO implement after 1.7\n+//        when(mock.listArgMethod(anyListOf(String.class))).thenReturn(\"list\");\n+//        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(\"collection\");\n+//        \n+//        assertEquals(\"list\", mock.listArgMethod(new LinkedList()));\n+//        assertEquals(null, mock.listArgMethod(new LinkedList()));\n+    }\n+}", "timestamp": 1231670675, "metainfo": ""}