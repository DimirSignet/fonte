{"sha": "464d5c5369c8d696107553ddfba9b5978ea441a8", "log": "Polished javadocs.  Issue #92", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n      * Example:\n      * <pre class=\"code\"><code class=\"java\">\n      * //Robust API, via settings builder:\n-     * OtherAbstract spy = mock(OtherAbstract.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+     * OtherAbstract spy = mock(OtherAbstract.class, withSettings()\n+     *   .useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n      *\n      * //Mocking a non-static inner abstract class:\n-     * InnerAbstract spy = mock(InnerAbstract.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n+     * InnerAbstract spy = mock(InnerAbstract.class, withSettings()\n+     *   .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n      * </code></pre>\n      *\n      * @return settings instance so that you can fluently specify other settings\n      * <p>\n      * Example:\n      * <pre class=\"code\"><code class=\"java\">\n-     * InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n+     * InnerClass mock = mock(InnerClass.class, withSettings()\n+     *   .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n      * </code></pre>\n      *\n      * @return settings instance so that you can fluently specify other settings\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *\n  *\n  *\n- * <h3 id=\"30\">30. <a class=\"meaningful_link\" href=\"#spying_abstract_classes\">(new) Spying or mocking abstract classes (Since 1.10.12)</h3>\n- *\n- * It is now possible to conveniently spy on abstract classes. Note that overusing spies hints at code design smells (see {@link #spy(Object)}.\n+ * <h3 id=\"30\">30. <a class=\"meaningful_link\" href=\"#spying_abstract_classes\">(new) Spying or mocking abstract classes (Since 1.10.12)</a></h3>\n+ *\n+ * It is now possible to conveniently spy on abstract classes. Note that overusing spies hints at code design smells (see {@link #spy(Object)}).\n  * <p>\n  * Previously, spying was only possible on instances of objects.\n  * New API makes it possible to use constructor when creating an instance of the mock.\n  *   SomeAbstract spy = spy(SomeAbstract.class);\n  *\n  *   //Robust API, via settings builder:\n- *   OtherAbstract spy = mock(OtherAbstract.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+ *   OtherAbstract spy = mock(OtherAbstract.class, withSettings()\n+ *      .useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n  *\n  *   //Mocking a non-static inner abstract class:\n- *   InnerAbstract spy = mock(InnerAbstract.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n+ *   InnerAbstract spy = mock(InnerAbstract.class, withSettings()\n+ *      .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n  * </code></pre>\n  *\n  * For more information please see {@link MockSettings#useConstructor()}.\n      *   SomeAbstract spy = spy(SomeAbstract.class);\n      *\n      *   //Robust API, via settings builder:\n-     *   OtherAbstract spy = mock(OtherAbstract.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+     *   OtherAbstract spy = mock(OtherAbstract.class, withSettings()\n+     *      .useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n      *\n      *   //Mocking a non-static inner abstract class:\n-     *   InnerAbstract spy = mock(InnerAbstract.class, withSettings().useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n+     *   InnerAbstract spy = mock(InnerAbstract.class, withSettings()\n+     *      .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));\n      * </code></pre>\n      *\n      * @param classToSpy the class to spy", "timestamp": 1416168679, "metainfo": ""}