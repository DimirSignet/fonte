{"sha": "719320a788653b6fef8b6d8c9ec3ff4ed7825019", "log": "housekeeping  --HG-- rename : src/org/mockito/internal/invocation/AllInvocationsFinder.java => src/org/mockito/internal/invocation/UnusedStubsFinder.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401829", "commit": "\n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n import org.mockito.MockitoDebugger;\n import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.UnusedStubsFinder;\n \n import java.util.List;\n \n import static java.util.Arrays.*;\n \n public class MockitoDebuggerImpl implements MockitoDebugger {\n+\n+    private AllInvocationsFinder allInvocationsFinder = new AllInvocationsFinder();\n+    private UnusedStubsFinder unusedStubsFinder = new UnusedStubsFinder();\n+\n     public String printInvocations(Object ... mocks) {\n         String out = \"\";\n-        AllInvocationsFinder finder = new AllInvocationsFinder();\n-        List<Invocation> invocations = finder.getAllInvocations(asList(mocks));\n+        List<Invocation> invocations = allInvocationsFinder.find(asList(mocks));\n         out += line(\"********************************\");\n         out += line(\"*** Mockito interactions log ***\");\n         out += line(\"********************************\");\n                 out += line(\" stubbed: \" + i.stubInfo().stubbedAt());\n             }\n         }\n-        invocations = finder.getAllUnusedStubs(asList(mocks));\n+\n+        invocations = unusedStubsFinder.find(asList(mocks));\n         if (invocations.isEmpty()) {\n             return print(out);\n         }\n         out += line(\"********************************\");\n         out += line(\"***       Unused stubs       ***\");\n         out += line(\"********************************\");\n-        invocations = finder.getAllUnusedStubs(asList(mocks));\n+        \n         for(Invocation i:invocations) {\n             out += line(i.toString());\n             out += line(\" stubbed: \" + i.getLocation());\n--- a/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n      * @param mocks mocks\n      * @return invocations\n      */\n-    public List<Invocation> getAllInvocations(List<?> mocks) {\n+    public List<Invocation> find(List<?> mocks) {\n         Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n         for (Object mock : mocks) {\n             MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n         return new LinkedList<Invocation>(invocationsInOrder);\n     }\n \n-    //TODO belongs elsewhere\n-    public List<Invocation> getAllUnusedStubs(List<?> mocks) {\n-        List<Invocation> unused = new LinkedList<Invocation>();\n-        for (Object mock : mocks) {\n-            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n-            List<StubbedInvocationMatcher> fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();\n-            for(StubbedInvocationMatcher s : fromSingleMock) {\n-                if (!s.wasUsed()) {\n-                     unused.add(s.getInvocation());\n-                }\n-            }\n-        }\n-        return unused;\n-    }\n-\n     private final class SequenceNumberComparator implements Comparator<Invocation> {\n         public int compare(Invocation o1, Invocation o2) {\n             return o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.invocation;\n+\n+import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.internal.util.MockUtil;\n+\n+import java.util.*;\n+\n+public class UnusedStubsFinder {\n+\n+    /**\n+     * Finds all unused stubs for given mocks\n+     * \n+     * @param mocks\n+     * @return\n+     */\n+    public List<Invocation> find(List<?> mocks) {\n+        List<Invocation> unused = new LinkedList<Invocation>();\n+        for (Object mock : mocks) {\n+            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n+            List<StubbedInvocationMatcher> fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();\n+            for(StubbedInvocationMatcher s : fromSingleMock) {\n+                if (!s.wasUsed()) {\n+                     unused.add(s.getInvocation());\n+                }\n+            }\n+        }\n+        return unused;\n+    }\n+}\n--- a/src/org/mockito/internal/verification/InOrderWrapper.java\n+++ b/src/org/mockito/internal/verification/InOrderWrapper.java\n     }\n \n     public void verify(VerificationData data) {\n-        List<Invocation> allInvocations = new AllInvocationsFinder().getAllInvocations(mocksToBeVerifiedInOrder);\n+        List<Invocation> allInvocations = new AllInvocationsFinder().find(mocksToBeVerifiedInOrder);\n         mode.verifyInOrder(new VerificationDataImpl(allInvocations, data.getWanted()));\n     }\n }\n--- a/test/org/mockito/internal/AllInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/AllInvocationsFinderTest.java\n         mockTwo.simpleMethod(200);\n         mockOne.simpleMethod(300);\n         \n-        List<Invocation> invocations = finder.getAllInvocations(asList(mockOne, mockTwo));\n+        List<Invocation> invocations = finder.find(asList(mockOne, mockTwo));\n         \n         assertEquals(3, invocations.size());\n         assertArgumentEquals(100, invocations.get(0));\n     public void shouldNotCountDuplicatedInteractions() throws Exception {\n         mockOne.simpleMethod(100);\n \n-        List<Invocation> invocations = finder.getAllInvocations(asList(mockOne, mockOne, mockOne));\n+        List<Invocation> invocations = finder.find(asList(mockOne, mockOne, mockOne));\n \n         assertEquals(1, invocations.size());\n     }", "timestamp": 1266178690, "metainfo": ""}