{"sha": "abfd88d53110134d32e056e84011718bc548030a", "log": "Fixed issue 93 Now it is possible to inOrder.verifyNoMoreInteractions() that has slightly different behavior than Mockito.verifyNoMoreInteractions()  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401926", "commit": "\n--- a/src/org/mockito/InOrder.java\n+++ b/src/org/mockito/InOrder.java\n  * inOrder.verify(firstMock).add(\"was called first\");\n  * inOrder.verify(secondMock).add(\"was called second\");\n  * </pre>\n+ * \n+ * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}\n+ * <p>\n  * \n  * See examples in javadoc for {@link Mockito} class\n  */\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockito.exceptions.verification.junit.JUnitTool;\n import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.invocation.Invocation;\n \n /**\n  * Reports verification and misusing errors.\n                 ));\n     }\n     \n+    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n+        throw new VerificationInOrderFailure(join(\n+                \"No interactions wanted here:\",\n+                new Location(),\n+                \"But found this interaction:\",\n+                undesired.getLocation(),\n+                \"\"\n+                ));\n+    }\n+    \n     public void cannotMockFinalClass(Class<?> clazz) {\n         throw new MockitoException(join(\n                 \"Cannot mock/spy \" + clazz.toString(),\n--- a/src/org/mockito/internal/InOrderImpl.java\n+++ b/src/org/mockito/internal/InOrderImpl.java\n \n     @Override\n     public void verifyNoMoreInteractions() {\n-                \n+        mockitoCore.verifyNoMoreInteractionsInOrder(mocksToBeVerifiedInOrder, this);\n     }\n }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal;\n+\n+import java.util.List;\n \n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n-import org.mockito.internal.stubbing.*;\n+import org.mockito.internal.stubbing.InvocationContainer;\n+import org.mockito.internal.stubbing.InvocationContainerImpl;\n+import org.mockito.internal.stubbing.OngoingStubbingImpl;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n import org.mockito.internal.verification.VerificationDataImpl;\n-import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n import org.mockito.verification.VerificationMode;\n-\n-import java.util.List;\n \n /**\n  * Invocation handler set on mock objects.\n         }\n     }\n \n-    public void verifyNoMoreInteractions() {\n-        VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), null);\n-        VerificationModeFactory.noMoreInteractions().verify(data);\n-    }\n-\n     public VoidMethodStubbable<T> voidMethodStubbable(T mock) {\n         return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl);\n     }\n--- a/src/org/mockito/internal/MockHandlerInterface.java\n+++ b/src/org/mockito/internal/MockHandlerInterface.java\n \n     MockSettingsImpl getMockSettings();\n \n-    void verifyNoMoreInteractions();\n-\n     VoidMethodStubbable<T> voidMethodStubbable(T mock);\n     \n     void setAnswersForStubbing(List<Answer> answers);\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n  */\n package org.mockito.internal;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n-import org.mockito.stubbing.*;\n+import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockito.internal.verification.VerificationModeFactory;\n+import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.internal.verification.api.VerificationDataInOrder;\n+import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n+import org.mockito.stubbing.Answer;\n+import org.mockito.stubbing.DeprecatedOngoingStubbing;\n+import org.mockito.stubbing.OngoingStubbing;\n+import org.mockito.stubbing.Stubber;\n+import org.mockito.stubbing.VoidMethodStubbable;\n import org.mockito.verification.VerificationMode;\n-\n-import java.util.Arrays;\n-import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n         return (OngoingStubbing) stub();\n     }\n     \n-    \n     public <T> T verify(T mock, VerificationMode mode) {\n         if (mock == null) {\n             reporter.nullPassedToVerify();\n                 if (mock == null) {\n                     reporter.nullPassedToVerifyNoMoreInteractions();\n                 }\n-                mockUtil.getMockHandler(mock).verifyNoMoreInteractions();\n+                List<Invocation> invocations = mockUtil.getMockHandler(mock).getInvocationContainer().getInvocations();\n+                VerificationDataImpl data = new VerificationDataImpl(invocations, null);\n+                VerificationModeFactory.noMoreInteractions().verify(data);\n             } catch (NotAMockException e) {\n                 reporter.notAMockPassedToVerifyNoMoreInteractions();\n             }\n         }\n     }\n+\n+    public void verifyNoMoreInteractionsInOrder(List<Object> mocks, InOrderContext inOrderContext) {\n+        mockingProgress.validateState();\n+        AllInvocationsFinder finder = new AllInvocationsFinder();\n+        VerificationDataInOrder data = new VerificationDataInOrderImpl(inOrderContext, finder.find(mocks), null);\n+        VerificationModeFactory.noMoreInteractions().verifyInOrder(data);\n+    }    \n     \n     private void assertMocksNotEmpty(Object[] mocks) {\n         if (mocks == null || mocks.length == 0) {\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n             return !orderingContext.isVerified(invocation);\n         }\n     }\n+\n+    /**\n+     * i3 is unverified here:\n+     * \n+     * i1, i2, i3\n+     *     v\n+     *     \n+     * all good here:\n+     * \n+     * i1, i2, i3\n+     *     v   v\n+     * \n+     * @param context\n+     * @param orderedInvocations\n+     * @return\n+     */\n+    public Invocation findFirstUnverifiedInOrder(InOrderContext context, List<Invocation> orderedInvocations) {        \n+        Invocation candidate = null;\n+        for(Invocation i : orderedInvocations) {\n+            if (!context.isVerified(i)) {\n+                candidate = candidate != null ? candidate : i;\n+            } else {\n+                candidate = null;\n+            }\n+        }\n+        return candidate;\n+    }\n }\n--- a/src/org/mockito/internal/verification/NoMoreInteractions.java\n+++ b/src/org/mockito/internal/verification/NoMoreInteractions.java\n  */\n package org.mockito.internal.verification;\n \n+import java.util.List;\n+\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.internal.verification.api.VerificationDataInOrder;\n+import org.mockito.internal.verification.api.VerificationInOrderMode;\n import org.mockito.verification.VerificationMode;\n \n-public class NoMoreInteractions implements VerificationMode {\n+public class NoMoreInteractions implements VerificationMode, VerificationInOrderMode {\n \n     public void verify(VerificationData data) {\n         Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());\n             new Reporter().noMoreInteractionsWanted(unverified);\n         }\n     }\n+\n+    public void verifyInOrder(VerificationDataInOrder data) {\n+        List<Invocation> invocations = data.getAllInvocations();\n+        Invocation unverified = new InvocationsFinder().findFirstUnverifiedInOrder(data.getOrderingContext(), invocations);\n+        \n+        if (unverified != null) {\n+            new Reporter().noMoreInteractionsWantedInOrder(unverified);\n+        }\n+    }\n }\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n         \n         differentMethodInvocation.markVerified();\n         assertNull(finder.findFirstUnverified(invocations));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstUnverifiedInOrder() throws Exception {\n+        //given\n+        InOrderContextImpl context = new InOrderContextImpl();\n+        assertSame(simpleMethodInvocation, finder.findFirstUnverifiedInOrder(context, invocations));        \n+        \n+        //when\n+        context.markVerified(simpleMethodInvocationTwo);\n+        context.markVerified(simpleMethodInvocation);\n+        \n+        //then\n+        assertSame(differentMethodInvocation, finder.findFirstUnverifiedInOrder(context, invocations));\n+        \n+        //when\n+        context.markVerified(differentMethodInvocation);\n+        \n+        //then\n+        assertNull(finder.findFirstUnverifiedInOrder(context, invocations));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstUnverifiedInOrderAndRespectSequenceNumber() throws Exception {\n+        //given\n+        InOrderContextImpl context = new InOrderContextImpl();\n+        assertSame(simpleMethodInvocation, finder.findFirstUnverifiedInOrder(context, invocations));        \n+        \n+        //when\n+        //skipping verification of first invocation, then:\n+        context.markVerified(simpleMethodInvocationTwo);\n+        context.markVerified(differentMethodInvocation);\n+        \n+        //then\n+        assertSame(null, finder.findFirstUnverifiedInOrder(context, invocations));        \n     }\n     \n     @Test\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/NoMoreInteractionsTest.java\n+package org.mockito.internal.verification;\n+\n+import static java.util.Arrays.*;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n+import org.mockitoutil.TestBase;\n+\n+public class NoMoreInteractionsTest extends TestBase {\n+\n+    InOrderContextImpl context = new InOrderContextImpl();\n+    \n+    @Test\n+    public void shouldVerifyInOrder() {\n+        //given\n+        NoMoreInteractions n = new NoMoreInteractions();\n+        Invocation i = new InvocationBuilder().toInvocation();\n+        assertFalse(context.isVerified(i));\n+        \n+        try {\n+            //when\n+            n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i), null));\n+            //then\n+            fail();\n+        } catch(VerificationInOrderFailure e) {}\n+    }\n+    \n+    @Test\n+    public void shouldVerifyInOrderAndPass() {\n+        //given\n+        NoMoreInteractions n = new NoMoreInteractions();\n+        Invocation i = new InvocationBuilder().toInvocation();\n+        context.markVerified(i);\n+        assertTrue(context.isVerified(i));\n+        \n+        //when\n+        n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i), null));\n+        //then no exception is thrown\n+    }\n+    \n+    @Test\n+    public void shouldVerifyInOrderMultipleInvoctions() {\n+        //given\n+        NoMoreInteractions n = new NoMoreInteractions();\n+        Invocation i = new InvocationBuilder().seq(1).toInvocation();\n+        Invocation i2 = new InvocationBuilder().seq(2).toInvocation();\n+\n+        //when\n+        context.markVerified(i2);\n+        \n+        //then no exception is thrown\n+        n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i, i2), null));\n+    }\n+    \n+    @Test\n+    public void shouldVerifyInOrderMultipleInvoctionsAndThrow() {\n+        //given\n+        NoMoreInteractions n = new NoMoreInteractions();\n+        Invocation i = new InvocationBuilder().seq(1).toInvocation();\n+        Invocation i2 = new InvocationBuilder().seq(2).toInvocation();\n+        \n+        try {\n+            //when     \n+            n.verifyInOrder(new VerificationDataInOrderImpl(context, asList(i, i2), null));\n+            fail();\n+        } catch (VerificationInOrderFailure e) {}\n+    }\n+}\n--- a/test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java\n+++ b/test/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java\n \n import static org.mockito.Mockito.*;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n+import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@Ignore\n public class FindingRedundantInvocationsInOrderTest extends TestBase {\n \n     @Mock private IMethods mock;\n+    @Mock private IMethods mock2;\n+    \n+    @Test\n+    public void shouldWorkFineIfNoInvocatins() throws Exception {\n+        //when\n+        InOrder inOrder = inOrder(mock);\n+        \n+        //then\n+        inOrder.verifyNoMoreInteractions();        \n+    }\n     \n     @Test\n     public void shouldVerifyNoMoreInteractionsInOrder() throws Exception {\n         //then\n         InOrder inOrder = inOrder(mock);\n         inOrder.verify(mock).simpleMethod(10);\n+        inOrder.verify(mock).otherMethod();\n+        inOrder.verifyNoMoreInteractions();        \n+    }\n+    \n+    @Test\n+    public void shouldVerifyNoMoreInteractionsInOrderWithMultipleMocks() throws Exception {\n+        //when\n+        mock.simpleMethod();\n+        mock2.simpleMethod();\n+        mock.otherMethod();\n+        \n+        //then\n+        InOrder inOrder = inOrder(mock, mock2);\n+        inOrder.verify(mock2).simpleMethod();\n         inOrder.verify(mock).otherMethod();\n         inOrder.verifyNoMoreInteractions();        \n     }\n             fail();\n         } catch(VerificationInOrderFailure e) {}\n     }\n+    \n+    @Test\n+    public void shouldFailToVerifyNoMoreInteractionsInOrderWithMultipleMocks() throws Exception {\n+        //when\n+        mock.simpleMethod();\n+        mock2.simpleMethod();\n+        mock.otherMethod();\n+        \n+        //then\n+        InOrder inOrder = inOrder(mock, mock2);\n+        inOrder.verify(mock2).simpleMethod();\n+        try {\n+            inOrder.verifyNoMoreInteractions();\n+            fail();\n+        } catch(VerificationInOrderFailure e) {}\n+    }\n+    \n+    @Test\n+    public void shouldValidateState() throws Exception {\n+        //when\n+        InOrder inOrder = inOrder(mock);\n+        verify(mock); // mess up state\n+        \n+        //then\n+        try {\n+            inOrder.verifyNoMoreInteractions();\n+            fail();\n+        } catch(UnfinishedVerificationException e) {}\n+    }\n }", "timestamp": 1268688642, "metainfo": ""}