{"sha": "017467abdeb35bef3437c6bab89199ab9daee67f", "log": "Adds simple in memory classloader", "commit": "\n--- a/test/org/mockitoutil/ClassLoaders.java\n+++ b/test/org/mockitoutil/ClassLoaders.java\n import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n-public class ClassLoaders {\n-    private final ArrayList<String> privateCopyPrefixes = new ArrayList<String>();\n-    private final ArrayList<URL> codeSourceUrls = new ArrayList<URL>();\n+public abstract class ClassLoaders {\n+    protected ClassLoaders() {}\n \n-    public static ClassLoaders isolatedClassLoader() {\n-        return new ClassLoaders();\n+    public static IsolatedURLClassLoaderBuilder isolatedClassLoader() {\n+        return new IsolatedURLClassLoaderBuilder();\n     }\n \n-    public ClassLoaders withPrivateCopyOf(String... privatePrefixes) {\n-        privateCopyPrefixes.addAll(asList(privatePrefixes));\n-        return this;\n-    }\n-\n-    public ClassLoaders withCodeSourceUrls(String... urls) {\n-        codeSourceUrls.addAll(pathsToURLs(urls));\n-        return this;\n-    }\n-\n-    public ClassLoaders withCurrentCodeSourceUrls() {\n-        codeSourceUrls.add(obtainClassPathOF(ClassLoaders.class.getName()));\n-        return this;\n+    public static InMemoryClassLoaderBuilder inMemoryClassLoader() {\n+        return new InMemoryClassLoaderBuilder();\n     }\n \n \n-    private static URL obtainClassPathOF(String className) {\n-        String path = className.replace('.', '/') + \".class\";\n-        String url = ClassLoaders.class.getClassLoader().getResource(path).toExternalForm();\n+    public static class IsolatedURLClassLoaderBuilder extends ClassLoaders {\n+        private final ArrayList<String> privateCopyPrefixes = new ArrayList<String>();\n+        private final ArrayList<URL> codeSourceUrls = new ArrayList<URL>();\n \n-        try {\n-            return new URL(url.substring(0, url.length() - path.length()));\n-        } catch (MalformedURLException e) {\n-            throw new RuntimeException(\"Classloader couldn't obtain a proper classpath URL\", e);\n+        public IsolatedURLClassLoaderBuilder withPrivateCopyOf(String... privatePrefixes) {\n+            privateCopyPrefixes.addAll(asList(privatePrefixes));\n+            return this;\n         }\n-    }\n \n-    public ClassLoader build() {\n-        return new LocalIsolatedURLClassLoader(\n-                codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),\n-                privateCopyPrefixes\n-        );\n+        public IsolatedURLClassLoaderBuilder withCodeSourceUrls(String... urls) {\n+            codeSourceUrls.addAll(pathsToURLs(urls));\n+            return this;\n+        }\n+\n+        public IsolatedURLClassLoaderBuilder withCurrentCodeSourceUrls() {\n+            codeSourceUrls.add(obtainClassPathOf(ClassLoaders.class.getName()));\n+            return this;\n+        }\n+\n+        public ClassLoader build() {\n+            return new LocalIsolatedURLClassLoader(\n+                    codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),\n+                    privateCopyPrefixes\n+            );\n+        }\n     }\n \n     static class LocalIsolatedURLClassLoader extends URLClassLoader {\n         }\n     }\n \n-    private List<URL> pathsToURLs(String... codeSourceUrls) {\n+    public static class InMemoryClassLoaderBuilder extends ClassLoaders {\n+        private Map<String , byte[]> inMemoryClassObjects = new HashMap<String , byte[]>();\n+\n+        public InMemoryClassLoaderBuilder withClassDefinition(String name, byte[] classDefinition) {\n+            inMemoryClassObjects.put(name, classDefinition);\n+            return this;\n+        }\n+\n+        public ClassLoader build() {\n+            return new InMemoryClassLoader(inMemoryClassObjects);\n+        }\n+    }\n+\n+    static class InMemoryClassLoader extends ClassLoader {\n+        private Map<String , byte[]> inMemoryClassObjects = new HashMap<String , byte[]>();\n+\n+        public InMemoryClassLoader(Map<String, byte[]> inMemoryClassObjects) {\n+            this.inMemoryClassObjects = inMemoryClassObjects;\n+        }\n+\n+        protected Class findClass(String name) throws ClassNotFoundException {\n+            byte[] classDefinition = inMemoryClassObjects.get(name);\n+            if (classDefinition != null) {\n+                return defineClass(name, classDefinition, 0, classDefinition.length);\n+            }\n+            throw new ClassNotFoundException(name);\n+        }\n+\n+\n+    }\n+\n+    protected URL obtainClassPathOf(String className) {\n+        String path = className.replace('.', '/') + \".class\";\n+        String url = ClassLoaders.class.getClassLoader().getResource(path).toExternalForm();\n+\n+        try {\n+            return new URL(url.substring(0, url.length() - path.length()));\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(\"Classloader couldn't obtain a proper classpath URL\", e);\n+        }\n+    }\n+\n+    protected List<URL> pathsToURLs(String... codeSourceUrls) {\n         return pathsToURLs(Arrays.asList(codeSourceUrls));\n     }\n     private List<URL> pathsToURLs(List<String> codeSourceUrls) {\n--- a/test/org/mockitoutil/ClassLoadersTest.java\n+++ b/test/org/mockitoutil/ClassLoadersTest.java\n import org.junit.Test;\n \n public class ClassLoadersTest {\n+\n+    public static final String CLASS_NAME_USING_INTERFACE = \"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\";\n+    public static final String INTERFACE_NAME = \"org.mockitoutil.ClassLoadersTest$Interface1\";\n \n     @Test(expected = ClassNotFoundException.class)\n     public void isolated_class_loader_cannot_load_classes_when_no_given_prefix() throws Exception {\n     }\n \n     @Test\n-    public void isolated_class_loader_cannot_load_classes_If_no_code_source_path() throws Exception {\n+    public void isolated_class_loader_cannot_load_classes_if_no_code_source_path() throws Exception {\n         // given\n         ClassLoader cl = isolatedClassLoader()\n-                .withPrivateCopyOf(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\")\n+                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n                 .build();\n \n         // when\n         try {\n-            cl.loadClass(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\");\n+            cl.loadClass(CLASS_NAME_USING_INTERFACE);\n         } catch (ClassNotFoundException e) {\n             // then\n-            assertThat(e.getMessage()).contains(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\");\n+            assertThat(e.getMessage()).contains(CLASS_NAME_USING_INTERFACE);\n         }\n     }\n \n     @Test\n-    public void isolated_class_loader_cannot_load_classes_that_require_other_non_declared_classes() throws Exception {\n+    public void isolated_class_loader_cannot_load_classes_not_matching_the_prefix() throws Exception {\n         // given\n         ClassLoader cl = isolatedClassLoader()\n                 .withCurrentCodeSourceUrls()\n-                .withPrivateCopyOf(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\")\n+                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n                 .build();\n \n         // when\n         try {\n-            cl.loadClass(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\");\n+            cl.loadClass(CLASS_NAME_USING_INTERFACE);\n         } catch (NoClassDefFoundError e) {\n             // then\n             assertThat(e.getMessage()).contains(\"org/mockitoutil/ClassLoadersTest$Interface1\");\n     }\n \n     @Test\n-    public void isolated_class_loader_can_load_all_classes_if_all_prefixes_are_correct() throws Exception {\n+    public void isolated_class_loader_can_load_all_classes_unless_all_classes_mathch_the_prefixes() throws Exception {\n         // given\n         ClassLoader cl = isolatedClassLoader()\n                 .withCurrentCodeSourceUrls()\n-                .withPrivateCopyOf(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\")\n-                .withPrivateCopyOf(\"org.mockitoutil.ClassLoadersTest$Interface1\")\n+                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n+                .withPrivateCopyOf(INTERFACE_NAME)\n                 .build();\n \n         // when\n-        Class<?> aClass = cl.loadClass(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\");\n+        Class<?> aClass = cl.loadClass(CLASS_NAME_USING_INTERFACE);\n \n         // then\n         assertThat(aClass).isNotNull();\n     public void isolated_class_loader_has_no_parent() throws Exception {\n         ClassLoader cl = isolatedClassLoader()\n                 .withCurrentCodeSourceUrls()\n-                .withPrivateCopyOf(\"org.mockitoutil.ClassLoadersTest$ClassUsingInterface1\")\n-                .withPrivateCopyOf(\"org.mockitoutil.ClassLoadersTest$Interface1\")\n+                .withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)\n+                .withPrivateCopyOf(INTERFACE_NAME)\n                 .build();\n \n         assertThat(cl.getParent()).isNull();\n     }\n \n \n+    @Test\n+    public void can_not_load_a_class_not_previously_registered_in_builder() throws Exception {\n+        // given\n+        ClassLoader cl = ClassLoaders\n+                .inMemoryClassLoader()\n+                .withClassDefinition(\"yop.Dude\", SimpleClassGenerator.makeMarkerInterface(\"yop.Dude\"))\n+                .build();\n+\n+        // when\n+        try {\n+            cl.loadClass(\"not.Defined\");\n+        } catch (ClassNotFoundException e) {\n+            // then\n+            assertThat(e.getMessage()).contains(\"not.Defined\");\n+        }\n+    }\n+\n+    @Test\n+    public void can_load_a_class_in_memory_from_bytes() throws Exception {\n+        // given\n+        ClassLoader cl = ClassLoaders\n+                .inMemoryClassLoader()\n+                .withClassDefinition(\"yop.Dude\", SimpleClassGenerator.makeMarkerInterface(\"yop.Dude\"))\n+                .build();\n+\n+        // when\n+        Class<?> aClass = cl.loadClass(\"yop.Dude\");\n+\n+        // then\n+        assertThat(aClass).isNotNull();\n+        assertThat(aClass.getClassLoader()).isEqualTo(cl);\n+        assertThat(aClass.getName()).isEqualTo(\"yop.Dude\");\n+    }\n+\n     static class ClassUsingInterface1 implements Interface1 { }\n     interface Interface1 { }\n }\n--- /dev/null\n+++ b/test/org/mockitoutil/SimpleClassGenerator.java\n+package org.mockitoutil;\n+\n+import static org.mockito.asm.Opcodes.ACC_ABSTRACT;\n+import static org.mockito.asm.Opcodes.ACC_INTERFACE;\n+import static org.mockito.asm.Opcodes.ACC_PUBLIC;\n+import static org.mockito.asm.Opcodes.V1_6;\n+import org.mockito.asm.ClassWriter;\n+\n+public class SimpleClassGenerator {\n+\n+    public static byte[] makeMarkerInterface(String qualifiedName) {\n+        String relativePath = qualifiedName.replace('.', '/');\n+\n+        ClassWriter cw = new ClassWriter(0);\n+        cw.visit(V1_6, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE, relativePath, null, \"java/lang/Object\", null);\n+        cw.visitEnd();\n+\n+        return cw.toByteArray();\n+    }\n+\n+}", "timestamp": 1386154924, "metainfo": ""}