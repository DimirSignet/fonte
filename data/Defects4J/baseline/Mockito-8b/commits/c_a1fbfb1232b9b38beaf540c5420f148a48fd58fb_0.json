{"sha": "a1fbfb1232b9b38beaf540c5420f148a48fd58fb", "log": "Added returnFirstArgument answer.", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/stubbing/answers/ReturnsFirstArgument.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing.answers;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Returns first argument of a method (useful for mocking chains).\n+ * Throws exception if method has no arguments.\n+ * <p>\n+ * <pre class=\"code\"><code class=\"java\">\n+ *   //using constructor:\n+ *   when(mock.foo()).then(new ReturnsFirstArgument());\n+ *   //or static method:\n+ *   when(mock.foo()).then(returnFirstArgument());\n+ * <pre class=\"code\"><code class=\"java\">\n+ */\n+public class ReturnsFirstArgument implements Answer<Object> {\n+\n+\t@Override\n+\tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n+\t\tObject[] arguments = invocation.getArguments();\n+\t\tif (arguments.length == 0) {\n+\t\t\tthrow new MockitoException(\n+\t\t\t\t\t\"Wrong usage of ReturnsFirstArgument. No arguments were passed to the mocked method.\");\n+\t\t}\n+\t\treturn arguments[0];\n+\t}\n+\n+\tpublic static ReturnsFirstArgument returnFirstArgument() {\n+\t\treturn new ReturnsFirstArgument();\n+\t}\n+}\n--- /dev/null\n+++ b/test/org/mockito/stubbing/answers/ReturnsFirstArgumentTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing.answers;\n+\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.stubbing.answers.ReturnsFirstArgument.returnFirstArgument;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitoutil.TestBase;\n+\n+public class ReturnsFirstArgumentTest extends TestBase {\n+\n+\tinterface Chain {\n+\t\tString process();\n+\t\t\n+\t\tString process(String arg);\n+\t\t\n+\t\tString process(String arg1, String arg2, String arg3);\n+\t}\n+\n+\t@Mock\n+\tprivate Chain chain;\n+\n+\t@Test\n+\tpublic void shouldReturnFirstArgumentForOneArgumentMethod() throws Exception {\n+\t\t// given\n+\t\twhen(chain.process(anyString())).then(returnFirstArgument());\n+\n+\t\t// when\n+\t\tString result = chain.process(\"test\");\n+\n+\t\t// then\n+\t\tassertEquals(\"test\", result);\n+\t}\n+\n+\t@Test\n+\tpublic void shouldReturnFirstArgumentForMultipleArgumentsMethod() throws Exception {\n+\t\t// given\n+\t\twhen(chain.process(anyString(), anyString(), anyString())).then(returnFirstArgument());\n+\n+\t\t// when\n+\t\tString result = chain.process(\"test\", \"other\", \"other\");\n+\n+\t\t// then\n+\t\tassertEquals(\"test\", result);\n+\t}\n+\t\n+\t@Test(expected=MockitoException.class)\n+\tpublic void shouldScreamForMethodWithoutArguments() throws Exception {\n+\t\t// given\n+\t\twhen(chain.process()).then(returnFirstArgument());\n+\t\t\n+\t\t// when\n+\t\tchain.process();\n+\t}\n+\n+}", "timestamp": 1323722154, "metainfo": ""}