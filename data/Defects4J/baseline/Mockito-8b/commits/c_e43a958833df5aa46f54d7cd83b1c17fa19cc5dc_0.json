{"sha": "e43a958833df5aa46f54d7cd83b1c17fa19cc5dc", "log": "issue 372 : Working implementation of the Argument Captor for Varargs", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito;\n \n import org.mockito.internal.matchers.CapturingMatcher;\n+import org.mockito.internal.matchers.VarargCapturingMatcher;\n import org.mockito.internal.progress.HandyReturnValues;\n \n import java.util.List;\n     HandyReturnValues handyReturnValues = new HandyReturnValues();\n \n     private final CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();\n+    private final VarargCapturingMatcher<T> varargCapturingMatcher = new VarargCapturingMatcher<T>();\n     private final Class<T> clazz;\n \n     /**\n      * <p>\n      * See examples in javadoc for {@link ArgumentCaptor} class.\n      * \n-     * @return null\n+     * @return null or default values\n      */\n     public T capture() {\n         Mockito.argThat(capturingMatcher);\n     }\n \n     /**\n+     * Use it to capture the variable arguments. This method <b>must be used inside of verification</b>.\n+     * <p>\n+     * Internally, this method registers a special implementation of an {@link ArgumentMatcher}.\n+     * This argument matcher stores the variable arguments values so that you can use it later to perform assertions.\n+     * <p>\n+     * See examples in javadoc for {@link ArgumentCaptor} class.\n+     *\n+     * @return null or default values\n+     */\n+    public T captureVararg() {\n+        Mockito.argThat(varargCapturingMatcher);\n+        return handyReturnValues.returnFor(clazz);\n+    }\n+\n+\n+    /**\n      * Returns the captured value of the argument.\n      * <p>\n-     * If the method was called multiple times then it returns the latest captured value\n+     * If the method was called multiple times then it returns the latest captured value.\n      * <p>\n      * See examples in javadoc for {@link ArgumentCaptor} class.\n      * \n      */\n     public T getValue() {\n         return this.capturingMatcher.getLastValue();\n+    }\n+\n+    /**\n+     * Returns the captured value of the variable arguments.\n+     * <p>\n+     * If the method was called multiple times then it returns the latest captured variable arguments.\n+     * <p>\n+     * See examples in javadoc for {@link ArgumentCaptor} class.\n+     *\n+     * @return captured varargs\n+     */\n+    public List<T> getVarargsValues() {\n+        return this.varargCapturingMatcher.getLastVarargs();\n     }\n \n     /**\n     }\n \n     /**\n+     * Returns all captured variable arguments. Use it in case the verified method was called multiple times.\n+     * <p>\n+     * Example:\n+     * <pre class=\"code\"><code class=\"java\">\n+     *   ArgumentCaptor&lt;Person&gt; peopleFornamesCaptor = ArgumentCaptor.forClass(String.class);\n+     *   verify(mock, times(2)).doSomething(peopleFornamesCaptor.captureVarargs());\n+     *\n+     *   List&lt;String&gt; peopleFornames = peopleFornamesCaptor.getAllVarargs();\n+     *   assertThat(peopleFornames.get(0)).contains(\"John\", \"Carl\");\n+     *   assertThat(peopleFornames.get(1)).contains(\"Janes\", \"Eloise\", \"Lois\");\n+     * </code></pre>\n+     * See more examples in javadoc for {@link ArgumentCaptor} class.\n+     *\n+     * @return all captured varargs\n+     */\n+    public List<List<T>> getAllVarargsValues() {\n+        return this.varargCapturingMatcher.getAllVarargs();\n+    }\n+\n+    /**\n      * Build a new <code>ArgumentCaptor</code>.\n      * <p>\n      * Note that an <code>ArgumentCaptor</code> <b>*don't do any type checks*</b>, it is only there to avoid casting\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n \n import org.hamcrest.Matcher;\n import org.mockito.internal.matchers.CapturesArguments;\n+import org.mockito.internal.matchers.MatcherDecorator;\n+import org.mockito.internal.matchers.VarargMatcher;\n import org.mockito.internal.reporting.PrintSettings;\n import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.Invocation;\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation i) {\n-        int k = 0;\n-        for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments && i.getArguments().length > k) {\n-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments && invocation.getArguments().length > position) {\n+                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArguments()[position]);\n+                }\n             }\n-            k++;\n         }\n+    }\n+\n+    private boolean isVarargMatcher(Matcher matcher) {\n+        Matcher actualMatcher = matcher;\n+        if (actualMatcher instanceof MatcherDecorator) {\n+            actualMatcher = ((MatcherDecorator) actualMatcher).getActualMatcher();\n+        }\n+        return actualMatcher instanceof VarargMatcher;\n+    }\n+\n+    private boolean isVariableArgument(Invocation invocation, int position) {\n+        return invocation.getRawArguments().length - 1 == position\n+                && invocation.getRawArguments()[position] != null\n+                && invocation.getRawArguments()[position].getClass().isArray()\n+                && invocation.getMethod().isVarArgs();\n     }\n \n     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {\n--- /dev/null\n+++ b/src/org/mockito/internal/matchers/VarargCapturingMatcher.java\n+package org.mockito.internal.matchers;\n+\n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.exceptions.Reporter;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+@SuppressWarnings(\"unchecked\")\n+public class VarargCapturingMatcher<T> extends ArgumentMatcher<T> implements CapturesArguments, VarargMatcher, Serializable {\n+    private static final long serialVersionUID = 4057053345838026645L;\n+    private LinkedList<List<T>> arguments = new LinkedList<List<T>>();\n+\n+    public boolean matches(Object argument) {\n+        return true;\n+    }\n+\n+    public void describeTo(Description description) {\n+        description.appendText(\"<Capturing variable argument>\");\n+    }\n+\n+    public List<T> getLastVarargs() {\n+        if (arguments.isEmpty()) {\n+            new Reporter().noArgumentValueWasCaptured();\n+            return null;\n+        } else {\n+            return arguments.getLast();\n+        }\n+    }\n+\n+    public List<List<T>> getAllVarargs() {\n+        return arguments;\n+    }\n+\n+    public void captureFrom(Object varArgArray) {\n+        List<T> vararg = unpackAsList(varArgArray);\n+        this.arguments.add(vararg);\n+    }\n+\n+    private List<T> unpackAsList(Object varArgArray) {\n+        if (varArgArray instanceof Object[]) {\n+            return Arrays.asList((T[]) varArgArray);\n+        } else if (varArgArray.getClass().isArray()) {\n+            Object[] primitiveArray = new Object[Array.getLength(varArgArray)];\n+            for (int i = 0; i < primitiveArray.length; i++) {\n+                primitiveArray[i] = Array.get(varArgArray, i);\n+            }\n+            return Arrays.asList((T[]) primitiveArray);\n+        } else {\n+            return Collections.singletonList((T) varArgArray);\n+        }\n+    }\n+}\n--- a/test/org/mockito/ArgumentCaptorTest.java\n+++ b/test/org/mockito/ArgumentCaptorTest.java\n         //given\n         final Object expected = new Object(); \n         ArgumentCaptor<Object> argumentCaptor = ArgumentCaptor.forClass(Object.class);\n-        argumentCaptor.handyReturnValues = new HandyReturnValues() {\n+        argumentCaptor.handyReturnValues = will_return(expected);\n+        \n+        //when\n+        Object returned = argumentCaptor.capture();\n+        Object returned_for_vararg = argumentCaptor.captureVararg();\n+\n+        //then\n+        assertEquals(expected, returned);\n+        assertEquals(expected, returned_for_vararg);\n+    }\n+\n+    private HandyReturnValues will_return(final Object expected) {\n+        return new HandyReturnValues() {\n             @Override\n             public <T> T returnFor(Class<T> clazz) {\n                 return (T) expected;\n             }\n         };\n-        \n-        //when\n-        Object returned = argumentCaptor.capture();\n-        \n-        //then\n-        assertEquals(expected, returned);\n     }\n-    \n+\n     @After\n     public void yes_I_know_some_matchers_are_misplaced() {\n         resetState();\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n import java.util.List;\n import java.util.Map;\n \n+import org.fest.assertions.Assertions;\n import org.hamcrest.Matcher;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.matchers.AnyVararg;\n-import org.mockito.internal.matchers.CapturingMatcher;\n-import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.LocalizedMatcher;\n-import org.mockito.internal.matchers.NotNull;\n+import org.mockito.internal.matchers.*;\n import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n     }\n \n     @Test\n-    public void should_match_captured_arguments_when_args_count_does_NOT_match() throws Exception {\n+    public void should_capture_varargs_as_vararg() throws Exception {\n+        //given\n+        mock.mixedVarargs(1, \"a\", \"b\");\n+        Invocation invocation = getLastInvocation();\n+        VarargCapturingMatcher varargCapturingMatcher = new VarargCapturingMatcher();\n+        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1), new LocalizedMatcher(varargCapturingMatcher)));\n+\n+        //when\n+        invocationMatcher.captureArgumentsFrom(invocation);\n+\n+        //then\n+        Assertions.assertThat(varargCapturingMatcher.getLastVarargs()).containsExactly(\"a\", \"b\");\n+    }\n+\n+    @Test  // like using several time the captor in the vararg\n+    public void should_capture_arguments_when_args_count_does_NOT_match() throws Exception {\n         //given\n         mock.varargs();\n         Invocation invocation = getLastInvocation();\n--- /dev/null\n+++ b/test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java\n+package org.mockito.internal.matchers;\n+\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+import static java.util.Arrays.asList;\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+\n+public class VarargCapturingMatcherTest {\n+    @Test\n+    public void should_capture_simple_arguments() throws Exception {\n+        //given\n+        VarargCapturingMatcher m = new VarargCapturingMatcher();\n+\n+        //when\n+        m.captureFrom(\"foo\");\n+        m.captureFrom(\"bar\");\n+\n+        //then\n+        assertThat(m.getAllVarargs()).containsSequence(asList(\"foo\"), asList(\"bar\"));\n+    }\n+\n+    @Test\n+    public void should_know_last_captured_vararg() throws Exception {\n+        //given\n+        VarargCapturingMatcher m = new VarargCapturingMatcher();\n+\n+        //when\n+        m.captureFrom(new Object[] { \"foo\", \"bar\" });\n+        m.captureFrom(new Object[] { \"fool\", \"bard\" });\n+\n+        //then\n+        assertThat(m.getLastVarargs()).containsSequence(\"fool\", \"bard\");\n+    }\n+\n+    @Test\n+    public void can_capture_primitive_varargs() throws Exception {\n+        //given\n+        VarargCapturingMatcher m = new VarargCapturingMatcher();\n+\n+        //when\n+        m.captureFrom(new int[] { 1, 2, 3 });\n+\n+        //then\n+        assertThat(m.getLastVarargs()).containsSequence(1, 2, 3);\n+    }\n+\n+    @Test\n+    public void should_scream_when_nothing_yet_captured() throws Exception {\n+        //given\n+        VarargCapturingMatcher m = new VarargCapturingMatcher();\n+\n+        try {\n+            //when\n+            m.getLastVarargs();\n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+}\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage;\n \n import java.io.IOException;\n     void varargsString(int i, String... string);\n \n     Object varargsObject(int i, Object... object);\n-    \n+\n+    void varargsbyte(byte... bytes);\n+\n     int varargs(Object ... object);\n \n     String varargsReturningString(Object ... object);\n     void mixedVarargs(Object i, String ... string);\n \n     List<String> listReturningMethod(Object ... objects);\n-    \n+\n     LinkedList<String> linkedListReturningMethod();\n-    \n+\n     String toString();\n-    \n+\n     String toString(String foo);\n \n     void voidMethod();\n \n     String forList(List<String> list);\n-    \n+\n     String forSet(Set<String> anySet);\n \n     String forMap(Map<String, String> map);\n-    \n+\n     String forCollection(Collection<String> collection);\n \n     Object[] arrayReturningMethod();\n     Object objectArgMethod(Object str);\n \n     Object listArgMethod(List<String> list);\n-    \n+\n     Object collectionArgMethod(Collection<String> collection);\n \n     Object setArgMethod(Set<String> set);\n--- a/test/org/mockitousage/MethodsImpl.java\n+++ b/test/org/mockitousage/MethodsImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage;\n \n import java.io.IOException;\n     public void mixedVarargs(Object i, String... string) {\n     }\n \n+    public void varargsbyte(byte... bytes) {\n+    }\n+\n     public List<String> listReturningMethod(Object... objects) {\n         return null;\n     }\n--- a/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n+++ b/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n         verify(mock).intArgumentMethod(argument.capture());\n         assertEquals(10, (int) argument.getValue());\n     }\n+\n+    @Test\n+    public void should_capture_byte_vararg_by_creating_captor_with_primitive() throws Exception {\n+        // given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);\n+\n+        // when\n+        mock.varargsbyte((byte) 1, (byte) 2);\n+\n+        // then\n+        verify(mock).varargsbyte(argumentCaptor.captureVararg());\n+        Assertions.assertThat(argumentCaptor.getVarargsValues()).containsExactly((byte) 1, (byte) 2);\n+    }\n+\n+    @Test\n+    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper() throws Exception {\n+        // given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);\n+\n+        // when\n+        mock.varargsbyte((byte) 1, (byte) 2);\n+\n+        // then\n+        verify(mock).varargsbyte(argumentCaptor.captureVararg());\n+        Assertions.assertThat(argumentCaptor.getVarargsValues()).containsExactly((byte) 1, (byte) 2);\n+    }\n+\n+    @Test\n+    public void should_capture_vararg() throws Exception {\n+        // given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        // when\n+        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n+\n+        // then\n+        verify(mock).mixedVarargs(any(), argumentCaptor.captureVararg());\n+        Assertions.assertThat(argumentCaptor.getVarargsValues()).containsExactly(\"a\", \"b\", \"c\");\n+    }\n+\n+    @Test\n+    public void should_capture_all_vararg() throws Exception {\n+        // given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        // when\n+        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n+        mock.mixedVarargs(42, \"again ?!\");\n+\n+        // then\n+        verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.captureVararg());\n+        List<List<String>> allVarargsValues = argumentCaptor.getAllVarargsValues();\n+        Assertions.assertThat(allVarargsValues.get(0)).containsExactly(\"a\", \"b\", \"c\");\n+        Assertions.assertThat(allVarargsValues.get(1)).containsExactly(\"again ?!\");\n+    }\n+\n+    @Test\n+    public void should_capture_one_arg_even_when_using_vararg_captor_on_nonvararg_method() throws Exception {\n+        // given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        // when\n+        mock.simpleMethod(\"a\", 2);\n+\n+        // then\n+        verify(mock).simpleMethod(argumentCaptor.captureVararg(), eq(2));\n+        Assertions.assertThat(argumentCaptor.getVarargsValues()).containsExactly(\"a\");\n+    }\n+\n+\n+    @Test\n+    public void can_capture_vararg_using_standard_capturing_API() throws Exception {\n+        // given\n+        IMethods mock = mock(IMethods.class);\n+        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        // when\n+        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n+\n+        // then\n+        verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());\n+        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");\n+    }\n }", "timestamp": 1348851560, "metainfo": ""}