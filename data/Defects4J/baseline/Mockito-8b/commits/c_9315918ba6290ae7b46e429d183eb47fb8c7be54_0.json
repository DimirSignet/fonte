{"sha": "9315918ba6290ae7b46e429d183eb47fb8c7be54", "log": "made mockito configuration thread safe (kind of...) added test that reconfigures return values for stubs  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40496", "commit": "\n--- a/src/org/mockito/MockitoConfiguration.java\n+++ b/src/org/mockito/MockitoConfiguration.java\n \n public class MockitoConfiguration {\n     \n-    private static ReturnValues emptyReturnValues = new DefaultReturnValues();\n+    private static final ReturnValues DEFAULT_RETURN_VALUES = new DefaultReturnValues();\n+    private static final ThreadLocal<ReturnValues> CUSTOM_RETURN_VALUES = new ThreadLocal<ReturnValues>();\n     \n     public static ReturnValues defaultReturnValues() {\n-        return emptyReturnValues;\n+        return CUSTOM_RETURN_VALUES.get() != null ? CUSTOM_RETURN_VALUES.get() : DEFAULT_RETURN_VALUES;\n     }\n \n-    public static void setDefaultReturnValues(ReturnValues emptyReturnValues) {\n-        MockitoConfiguration.emptyReturnValues = emptyReturnValues;\n+    public static void setCustomReturnValues(ReturnValues returnValues) {\n+        MockitoConfiguration.CUSTOM_RETURN_VALUES.set(returnValues);\n+    }\n+\n+    public static void resetCustomReturnValues() {\n+        MockitoConfiguration.CUSTOM_RETURN_VALUES.remove();\n     }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.examples.configure;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoConfiguration;\n+import org.mockito.ReturnValues;\n+import org.mockito.TestBase;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.stubbing.DefaultReturnValues;\n+\n+public class ConfiguringDefaultReturnValuesTest extends TestBase {\n+    \n+    @Test\n+    public void shouldNotReturnNullsAnyMore() throws Exception {\n+        MyObject m = mock(MyObject.class);\n+        MyObject returned = m.foo();\n+        assertNotNull(returned);\n+        assertNotNull(returned.foo());\n+    }\n+\n+    interface MyObject {\n+        MyObject foo();\n+    }\n+    \n+    @Before\n+    public void configureDefaultReturnValues() {\n+        MockitoConfiguration.setCustomReturnValues(new MyDefaultReturnValues());\n+    }\n+    \n+    @After\n+    public void resetDefaultReturnValues() {\n+        MockitoConfiguration.resetCustomReturnValues();\n+        \n+    }\n+    private final class MyDefaultReturnValues implements ReturnValues {\n+        public Object valueFor(Invocation invocation) {\n+            Object value = new DefaultReturnValues().valueFor(invocation);\n+            if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n+                return value;\n+            } else {\n+                return Mockito.mock(invocation.getMethod().getReturnType());\n+            }\n+        }\n+    }\n+}", "timestamp": 1206320775, "metainfo": ""}