{"sha": "f5fddf2b8da63235b412b7746c23bed262bbcde7", "log": "issue 238 : now report only errors thrown by constructor or initialization block  --HG-- branch : issue 238 : constructor injection", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.internal.exceptions.util.ScenarioPrinter;\n import org.mockito.internal.invocation.Invocation;\n \n+import java.lang.reflect.Field;\n import java.util.List;\n \n import static org.mockito.exceptions.Pluralizer.pluralize;\n             \"However, I failed because: \" + details.getMessage(),\n             \"Examples of correct usage of @InjectMocks:\",\n             \"   @InjectMocks Service service = new Service();\",\n-            \"   @InjectMocks Service service; //only if Service has parameterless constructor\",\n+            \"   @InjectMocks Service service;\",\n             \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n             \"   //and... don't forget about some @Mocks for injection :)\",\n                 \"\"), details);\n                 \"If you want to find out more please refer to issue 235\",\n                 \"\"));\n     }\n+\n+    public void fieldInitialisationThrewException(Field field, Throwable details) {\n+        throw new MockitoException(join(\n+                \"Cannot instantiate @InjectMocks field named '\" + field.getName() + \"' of type '\" + field.getType() +  \"'.\",\n+                \"You haven't provided the instance at field declaration so I tried to construct the instance.\",\n+                \"However the constructor or the initialization block threw an exception : \" + details.getMessage(),\n+                \"\"), details);\n+\n+    }\n }\n--- a/src/org/mockito/internal/configuration/injection/ConstructorInjection.java\n+++ b/src/org/mockito/internal/configuration/injection/ConstructorInjection.java\n package org.mockito.internal.configuration.injection;\n \n+import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.reflection.FieldInitializationReport;\n import org.mockito.internal.util.reflection.FieldInitializer;\n import org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver;\n \n import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n \n             return report.fieldWasInitialized();\n         } catch (MockitoException e) {\n+            if(e.getCause() instanceof InvocationTargetException) {\n+                Throwable realCause = e.getCause().getCause();\n+                new Reporter().fieldInitialisationThrewException(field, realCause);\n+            }\n             return false;\n         }\n \n--- a/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java\n+++ b/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java\n import org.mockito.internal.util.reflection.FieldInitializer;\n \n import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.Comparator;\n import java.util.HashSet;\n         try {\n             report = new FieldInitializer(fieldOwner, field).initialize();\n         } catch (MockitoException e) {\n+            if(e.getCause() instanceof InvocationTargetException) {\n+                Throwable realCause = e.getCause().getCause();\n+                new Reporter().fieldInitialisationThrewException(field, realCause);\n+            }\n             new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e);\n         }\n \n--- a/test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java\n+++ b/test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java\n package org.mockitousage.annotation;\n \n-import org.junit.Ignore;\n+import org.fest.assertions.Assertions;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.examples.use.ArticleCalculator;\n     }\n \n     @Test\n-    @Ignore(\"Work should be done on error reporting on this matter\")\n     public void should_report_failure_only_when_object_initialization_throws_exception() throws Exception {\n+        class ATest {\n+            @Mock Set set;\n+            @InjectMocks FailingConstructor failingConstructor;\n+        }\n \n+        try {\n+            MockitoAnnotations.initMocks(new ATest());\n+        } catch (MockitoException e) {\n+            Assertions.assertThat(e.getMessage()).contains(\"failingConstructor\").contains(\"constructor\").contains(\"threw an exception\");\n+            Assertions.assertThat(e.getCause()).isInstanceOf(IllegalStateException.class);\n+        }\n     }\n \n     private static int articleVisitorInstantiationCount = 0;\n         }\n     }\n \n+    private static class FailingConstructor {\n+        FailingConstructor(Set set) {\n+            throw new IllegalStateException(\"always fail\");\n+        }\n+    }\n+\n }\n--- a/test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java\n+++ b/test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java\n  */\n package org.mockitousage.annotation;\n \n+import org.fest.assertions.Assertions;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InjectMocks;\n     @Test\n     public void shouldReportNicely() throws Exception {\n         Object failing = new Object() {\n-            @InjectMocks\n-            ThrowingConstructor c;\n+            @InjectMocks ThrowingConstructor failingConstructor;\n         };\n         try {\n             MockitoAnnotations.initMocks(failing);\n             fail();\n         } catch (MockitoException e) {\n-            assertContains(\"correct usage of @InjectMocks\", e.getMessage());\n+            Assertions.assertThat(e.getMessage()).contains(\"failingConstructor\").contains(\"constructor\").contains(\"threw an exception\");\n+            Assertions.assertThat(e.getCause()).isInstanceOf(RuntimeException.class);\n         }\n     }\n \n     static class ThrowingConstructor {\n-        ThrowingConstructor() { throw new RuntimeException(\"aha\");};\n+        ThrowingConstructor() { throw new RuntimeException(\"aha\"); };\n     }\n \n     static class SuperUnderTesting {", "timestamp": 1301250135, "metainfo": ""}