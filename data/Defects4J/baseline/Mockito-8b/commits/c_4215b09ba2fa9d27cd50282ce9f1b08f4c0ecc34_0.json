{"sha": "4215b09ba2fa9d27cd50282ce9f1b08f4c0ecc34", "log": "Tidied up docs and coverage related to isSpy/isMock", "commit": "\n--- a/src/org/mockito/MockingDetails.java\n+++ b/src/org/mockito/MockingDetails.java\n  */\n package org.mockito;\n \n+import org.mockito.invocation.Invocation;\n+\n import java.util.Collection;\n-\n-import org.mockito.invocation.Invocation;\n \n /**\n  * Provides mocking information.\n public interface MockingDetails {\n     \n     /**\n-     * Informs if the object is a mock.\n+     * Informs if the object is a mock. isMock() for null input returns false.\n      * @return true if the object is a mock or a spy.\n      *\n      * @since 1.9.5\n     boolean isMock();\n \n     /**\n-     * Informs if the object is a spy.\n+     * Informs if the object is a spy. isSpy() for null input returns false.\n      * @return true if the object is a spy.\n      *\n      * @since 1.9.5\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.junit.MockitoJUnitRule;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n-import org.mockito.verification.After;\n-import org.mockito.verification.Timeout;\n-import org.mockito.verification.VerificationAfterDelay;\n-import org.mockito.verification.VerificationMode;\n-import org.mockito.verification.VerificationWithTimeout;\n+import org.mockito.verification.*;\n \n /**\n  * <p align=\"left\"><img src=\"logo.jpg\"/></p>\n      * In future Mockito versions MockingDetails may grow and provide other useful information about the mock,\n      * e.g. invocations, stubbing info, etc.\n      *\n-     * @param toInspect - object to inspect\n+     * @param toInspect - object to inspect. null input is allowed.\n      * @return A {@link org.mockito.MockingDetails} instance.\n      * @since 1.9.5\n      */\n--- a/test/org/mockitousage/basicapi/MockingDetailsTest.java\n+++ b/test/org/mockitousage/basicapi/MockingDetailsTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.basicapi;\n \n-import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.Spy;\n+import org.mockitoutil.TestBase;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.*;\n-import static org.mockito.MockitoAnnotations.initMocks;\n \n-public class MockingDetailsTest {\n+public class MockingDetailsTest extends TestBase {\n     \n-    private static class TestClass{\n-    }\n+    static class TestClass {}\n \n-    @Mock\n-    TestClass mock1;\n-    @Spy\n-    TestClass spy1;\n-    TestClass mock2;\n-    TestClass spy2;\n-    TestClass nonMock;\n-    \n-    @Before\n-    public void setUp(){\n-        initMocks( this );\n-        mock2 = mock( TestClass.class );\n-        spy2 = spy( new TestClass());\n-        nonMock = new TestClass();\n-    }\n-    \n+    @Mock TestClass annotatedMock;\n+    @Spy TestClass annotatedSpy;\n+\n     @Test\n-    public void shouldReturnTrue_FromIsMock_ForAnnotatedMock(){\n-        assertTrue(mockingDetails(mock1).isMock());\n+    public void should_know_spy(){\n+        assertTrue(mockingDetails(annotatedSpy).isMock());\n+        assertTrue(mockingDetails(spy( new TestClass())).isMock());\n+        assertTrue(mockingDetails(spy(TestClass.class)).isMock());\n+        assertTrue(mockingDetails(mock(TestClass.class, withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS))).isMock());\n+\n+        assertTrue(mockingDetails(annotatedSpy).isSpy());\n+        assertTrue(mockingDetails(spy( new TestClass())).isSpy());\n+        assertTrue(mockingDetails(spy(TestClass.class)).isSpy());\n+        assertTrue(mockingDetails(mock(TestClass.class, withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS))).isSpy());\n     }\n \n     @Test\n-    public void shouldReturnTrue_FromIsMock_ForDirectMock(){\n-        assertTrue(mockingDetails(mock2).isMock());\n+    public void should_know_mock(){\n+        assertTrue(mockingDetails(annotatedMock).isMock());\n+        assertTrue(mockingDetails(mock(TestClass.class)).isMock());\n+\n+        assertFalse(mockingDetails(annotatedMock).isSpy());\n+        assertFalse(mockingDetails(mock(TestClass.class)).isSpy());\n     }\n \n     @Test\n-    public void shouldReturnTrue_FromIsMock_ForAnnotatedSpy(){\n-        assertTrue(mockingDetails(spy1).isMock());\n-    }\n+    public void should_handle_non_mocks() {\n+        assertFalse(mockingDetails(\"non mock\").isSpy());\n+        assertFalse(mockingDetails(\"non mock\").isMock());\n \n-    @Test\n-    public void shouldReturnTrue_FromIsMock_ForDirectSpy(){\n-\n-        assertTrue(mockingDetails(spy2).isMock());\n-    }\n-\n-    @Test\n-    public void shouldReturnFalse_FromIsMock_ForNonMock(){\n-        assertFalse(mockingDetails(nonMock).isMock());\n-    }\n-\n-    @Test\n-    public void shouldReturnFalse_FromIsSpy_ForAnnotatedMock(){\n-        assertFalse(mockingDetails(mock1).isSpy());\n-    }\n-\n-    @Test\n-    public void shouldReturnFalse_FromIsSpy_ForDirectMock(){\n-        assertFalse(mockingDetails(mock2).isSpy());\n-    }\n-\n-\n-    @Test\n-    public void shouldReturnTrue_FromIsSpy_ForAnnotatedSpy(){\n-        assertTrue(mockingDetails(spy1).isSpy());\n-    }\n-\n-    @Test\n-    public void shouldReturnTrue_FromIsSpy_ForDirectSpy(){\n-        assertTrue(mockingDetails(spy2).isSpy());\n-    }\n-\n-    @Test\n-    public void shouldReturnFalse_FromIsSpy_ForNonMock(){\n-        assertFalse(mockingDetails(nonMock).isSpy());\n+        assertFalse(mockingDetails(null).isSpy());\n+        assertFalse(mockingDetails(null).isMock());\n     }\n }", "timestamp": 1417513678, "metainfo": ""}