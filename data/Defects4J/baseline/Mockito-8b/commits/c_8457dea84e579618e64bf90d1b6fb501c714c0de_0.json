{"sha": "8457dea84e579618e64bf90d1b6fb501c714c0de", "log": "Propagate exceptions from AdditionalAnswers#delegatesTo  Issue #113", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n /**\n \tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n \t\tMethod method = invocation.getMethod() ;\n \n-        return method.invoke(delegatedObject, invocation.getArguments());\n-\t}\n+        try {\n+            return method.invoke(delegatedObject, invocation.getArguments());\n+        } catch (InvocationTargetException e) {\n+            // propagate the original exception from the delegate\n+            throw e.getCause();\n+        }\n+    }\n }\n--- a/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithDelegate.java\n             assertThat(e.toString()).doesNotContain(\"org.mockito\");\n         }\n     }\n+\n+    @Test\n+    public void exception_should_be_propagated_from_delegate() throws Exception {\n+        final RuntimeException failure = new RuntimeException(\"angry-method\");\n+        IMethods methods = mock(IMethods.class, delegatesTo(new MethodsImpl() {\n+            @Override\n+            public String simpleMethod() {\n+                throw failure;\n+            }\n+        }));\n+\n+        try {\n+            methods.simpleMethod(); // delegate throws an exception\n+            fail();\n+        } catch (RuntimeException e) {\n+            assertThat(e).isEqualTo(failure);\n+        }\n+    }\n }", "timestamp": 1414442656, "metainfo": ""}