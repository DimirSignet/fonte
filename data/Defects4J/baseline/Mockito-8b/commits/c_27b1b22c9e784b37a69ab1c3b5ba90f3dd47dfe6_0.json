{"sha": "27b1b22c9e784b37a69ab1c3b5ba90f3dd47dfe6", "log": "Growing the release plugin  Ensured the author is configured and cleaned up during rollback", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitAuthor.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitAuthor.java\n package org.mockito.release.git;\n+\n+import org.mockito.release.exec.ProcessRunner;\n \n class DefaultGitAuthor implements GitAuthor {\n \n   final String previousUser;\n   final String previousEmail;\n+  private final ProcessRunner runner;\n \n-  DefaultGitAuthor(String previousUser, String previousEmail) {\n+  DefaultGitAuthor(String previousUser, String previousEmail, ProcessRunner runner) {\n     this.previousUser = previousUser;\n     this.previousEmail = previousEmail;\n+    this.runner = runner;\n   }\n \n   public void restoreOriginal() {\n+    if (!previousUser.isEmpty()) {\n+      runner.run(\"git\", \"config\", \"--local\", \"user.name\", previousUser);\n+    } else {\n+      runner.run(\"git\", \"config\", \"--local\", \"--unset\", \"user.name\");\n+    }\n \n+    if (!previousEmail.isEmpty()) {\n+      runner.run(\"git\", \"config\", \"--local\", \"user.email\", previousEmail);\n+    } else {\n+      runner.run(\"git\", \"config\", \"--local\", \"--unset\", \"user.email\");\n+    }\n   }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitTool.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/DefaultGitTool.java\n     runner.run(\"git\", \"config\", \"user.name\", name);\n     runner.run(\"git\", \"config\", \"user.email\", email);\n \n-    return new DefaultGitAuthor(currentLocalUser, currentLocalEmail);\n+    return new DefaultGitAuthor(currentLocalUser, currentLocalEmail, runner);\n   }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/Git.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/Git.java\n \n import org.mockito.release.exec.ProcessRunner;\n \n+/**\n+ * Git utilities\n+ */\n public class Git {\n \n+  /**\n+   * Provides git tool that uses given process runner\n+   */\n   public static GitTool gitTool(ProcessRunner runner) {\n     return new DefaultGitTool(runner);\n   }\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/GitAuthor.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/GitAuthor.java\n package org.mockito.release.git;\n \n+/**\n+ * Operations related to git author\n+ */\n public interface GitAuthor {\n \n+  /**\n+   * Restores the local author / email to the original values\n+   */\n   void restoreOriginal();\n-\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/git/GitTool.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/git/GitTool.java\n package org.mockito.release.git;\n \n+/**\n+ * Git operations\n+ */\n public interface GitTool {\n \n+  /**\n+   * Configures local git author by name and email.\n+   * Returns an object that can be used to restore the author to original value.\n+   */\n   GitAuthor setAuthor(String name, String email);\n-\n }", "timestamp": 1419883581, "metainfo": ""}