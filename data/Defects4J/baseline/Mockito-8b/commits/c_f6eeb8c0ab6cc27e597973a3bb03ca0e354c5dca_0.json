{"sha": "f6eeb8c0ab6cc27e597973a3bb03ca0e354c5dca", "log": "fixed problem with partial mocks/spies (inherited fields are also shallow copied)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401410", "commit": "\n--- a/src/org/mockito/internal/util/ShallowCopyTool.java\n+++ b/src/org/mockito/internal/util/ShallowCopyTool.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n \n+@SuppressWarnings(\"unchecked\")\n public class ShallowCopyTool {\n \n     public <T> void copyToMock(T from, T mock) throws UnableToCopyFieldValue {\n-        Class<? extends Object> classFrom = from.getClass();\n-        Class<?> classTo = mock.getClass().getSuperclass();\n-        assert classTo == classFrom : \"Classes must have the same type: class from: \" + classFrom + \", class to: \" + classTo;\n+        Class clazz = from.getClass();\n+        Class mockSuperClass = mock.getClass().getSuperclass();\n+        assert mockSuperClass == clazz : \"Classes must have the same type: class of the object from: \" + clazz + \", mock super class: \" + mockSuperClass;\n \n-        Field[] fieldsFrom = classFrom.getDeclaredFields();\n-        Field[] fieldsTo = classTo.getDeclaredFields();\n-        assert fieldsFrom.length == fieldsTo.length : \"Objects should be of the same type\";\n+        while (clazz != Object.class) {\n+            copyValues(from, mock, clazz);\n+            clazz = clazz.getSuperclass();\n+        }\n+    }\n \n-        for (int i = 0; i < fieldsFrom.length; i++) {\n-            if (Modifier.isStatic(fieldsFrom[i].getModifiers())) {\n+    private <T> void copyValues(T from, T mock, Class classFrom)\n+            throws UnableToCopyFieldValue {\n+        Field[] fields = classFrom.getDeclaredFields();\n+\n+        for (int i = 0; i < fields.length; i++) {\n+            if (Modifier.isStatic(fields[i].getModifiers())) {\n                 continue;\n             }\n             try {\n-                fieldsFrom[i].setAccessible(true);\n-                fieldsTo[i].setAccessible(true);\n-                Object value = fieldsFrom[i].get(from);\n-                fieldsTo[i].set(mock, value);\n+                //TODO: undo\n+                fields[i].setAccessible(true);\n+                Object value = fields[i].get(from);\n+                fields[i].set(mock, value);\n             } catch (Throwable t) {\n                 //TODO: add missing unit test\n-                throw new UnableToCopyFieldValue(\n-                        \"Unable to copy value from field: \" + fieldsFrom[i] + \n-                        \" to field: \" + fieldsTo[i], t); \n+                throw new UnableToCopyFieldValue(\"Unable to copy value to field: \" + fields[i], t); \n             } \n         }\n     }\n--- a/test/org/mockito/internal/util/ShallowCopyToolTest.java\n+++ b/test/org/mockito/internal/util/ShallowCopyToolTest.java\n \n     private ShallowCopyTool tool = new ShallowCopyTool();\n \n-    // TODO: inherited fields\n+    static class InheritMe {\n+        protected String protectedInherited = \"protected\";\n+        private String privateInherited = \"private\";\n+    }\n+    \n     // TODO: if one field fails - should carry on\n-    static class SomeObject {\n+    static class SomeObject extends InheritMe {\n         @SuppressWarnings(\"unused\") \n         // required because static fields needs to be excluded from copying \n         private static int staticField = -100;\n \n         public SomeObject(int finalField) {\n             this.finalField = finalField;\n-        }\n-        \n-        public int hashCode() {\n-            return 0;\n-        }\n-\n-        public boolean equals(Object obj) {\n-            if (this == obj) {\n-                return true;\n-            }\n-            if (obj == null) {\n-                return false;\n-            }\n-            if (getClass() != obj.getClass()) {\n-                return false;\n-            }\n-            final SomeObject other = (SomeObject) obj;\n-            if (defaultField == null) {\n-                if (other.defaultField != null) {\n-                    return false;\n-                }\n-            } else if (!defaultField.equals(other.defaultField)) {\n-                return false;\n-            }\n-            if (finalField != other.finalField) {\n-                return false;\n-            }\n-            if (instancePublicField == null) {\n-                if (other.instancePublicField != null) {\n-                    return false;\n-                }\n-            } else if (!instancePublicField.equals(other.instancePublicField)) {\n-                return false;\n-            }\n-            if (privateField != other.privateField) {\n-                return false;\n-            }\n-            if (privateTransientField != other.privateTransientField) {\n-                return false;\n-            }\n-            if (protectedField == null) {\n-                if (other.protectedField != null) {\n-                    return false;\n-                }\n-            } else if (!protectedField.equals(other.protectedField)) {\n-                return false;\n-            }\n-            return true;\n         }\n     }\n \n         assertEquals(from.privateTransientField, to.privateTransientField);\n         assertEquals(from.protectedField, to.protectedField);\n     }\n+    \n+    @Test\n+    public void shouldCopyValuesOfInheritedFields() throws Exception {\n+        //given\n+        ((InheritMe) from).privateInherited = \"foo\";\n+        ((InheritMe) from).protectedInherited = \"bar\";\n+    \n+        assertNotEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n+        assertNotEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n+        \n+        //when\n+        tool.copyToMock(from, to);\n+        \n+        //then\n+        assertEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n+        assertEquals(((InheritMe) from).privateInherited, ((InheritMe) to).privateInherited);\n+    }\n }\n--- a/test/org/mockitousage/spies/PartialMockingWithSpiesTest.java\n+++ b/test/org/mockitousage/spies/PartialMockingWithSpiesTest.java\n         Mockito.validateMockitoUsage();\n     }\n     \n-    class Person {\n+    class InheritMe {\n+        private String inherited = \"100$\";\n+        protected String getInherited() {\n+            return inherited;\n+        }\n+    }\n+    \n+    class Person extends InheritMe {\n         private final Name defaultName = new Name(\"Default name\");\n \n         public String getName() {\n \n         Name guessName() {\n             return defaultName;\n+        }\n+        \n+        public String howMuchDidYouInherit() {\n+            return getInherited();\n         }\n     }\n     \n         // then\n         assertEquals(\"John\", name);\n     }\n+    \n+    @Test\n+    public void shouldDealWithPrivateFieldsOfSubclasses() {\n+        assertEquals(\"100$\", spy.howMuchDidYouInherit());\n+    }\n }", "timestamp": 1241467339, "metainfo": ""}