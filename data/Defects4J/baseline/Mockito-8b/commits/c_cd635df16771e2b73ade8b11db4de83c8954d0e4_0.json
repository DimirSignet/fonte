{"sha": "cd635df16771e2b73ade8b11db4de83c8954d0e4", "log": "Removed system out println from the zip comparison", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/comparison/ZipCompare.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/comparison/ZipCompare.java\n package org.mockito.release.comparison;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n \n-//TODO SF - borrowed code, not very nice, should not write to system out and should throw decent exceptions\n+import static java.lang.String.format;\n+\n class ZipCompare {\n+\n+    private final static Logger LOG = LoggerFactory.getLogger(ZipCompare.class);\n \n     boolean compareZips(String filePath1, String filePath2) {\n         ZipFile file1;\n             throw new ZipCompareException(\"Could not open zip file \" + filePath1, e);\n         }\n \n-        System.out.println(\"Comparing \" + filePath1 + \" with \" + filePath2 + \":\");\n+        LOG.info(\"Comparing \" + filePath1 + \" with \" + filePath2);\n \n         Set set1 = new LinkedHashSet();\n         for (Enumeration e = file1.entries(); e.hasMoreElements(); )\n         for (Iterator i = set1.iterator(); i.hasNext(); ) {\n             String name = (String) i.next();\n             if (!set2.contains(name)) {\n-                System.out.println(name + \" not found in \" + filePath2);\n+                LOG.info(name + \" not found in \" + filePath2);\n                 errcount += 1;\n                 continue;\n             }\n                 set2.remove(name);\n                 if (!streamsEqual(file1.getInputStream(file1.getEntry(name)), file2.getInputStream(file2\n                         .getEntry(name)))) {\n-                    System.out.println(name + \" does not match\");\n+                    LOG.info(name + \" does not match\");\n                     errcount += 1;\n                     continue;\n                 }\n             } catch (Exception e) {\n-                System.out.println(name + \": IO Error \" + e);\n-                e.printStackTrace();\n-                errcount += 1;\n-                continue;\n+                throw new ZipCompareException(format(\"Unable to compare zip entry '%s' found in '%s' with '%s'\", name, filePath1, filePath2), e);\n             }\n             filecount += 1;\n         }\n         for (Iterator i = set2.iterator(); i.hasNext(); ) {\n             String name = (String) i.next();\n-            System.out.println(name + \" not found in \" + filePath1);\n+            LOG.info(name + \" not found in \" + filePath1);\n             errcount += 1;\n         }\n-        System.out.println(filecount + \" entries matched\");\n+        LOG.info(filecount + \" entries matched\");\n         if (errcount > 0) {\n-            System.out.println(errcount + \" entries did not match\");\n+            LOG.info(errcount + \" entries did not match\");\n             return false;\n         }\n         return true;", "timestamp": 1417090536, "metainfo": ""}