{"sha": "ae5d0ba2997025d1e8666c886f93097ea1c0a11b", "log": "Fixed atLeast for verification in order.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40865", "commit": "\n--- a/src/org/mockito/InOrderVerifier.java\n+++ b/src/org/mockito/InOrderVerifier.java\n     }\n     \n     public <T> T verify(T mock, VerificationMode mode) {\n+        return verify(mock, (VerificationModeImpl) mode);\n+    }\n+    \n+    public <T> T verify(T mock, VerificationModeImpl mode) {\n         if (!mocksToBeVerifiedInOrder.contains(mock)) {\n             reporter.inOrderRequiresFamiliarMock();\n         }\n-        Integer wantedCount = ((VerificationModeImpl) mode).wantedCount();\n-        return Mockito.verify(mock, VerificationModeImpl.inOrder(wantedCount, mocksToBeVerifiedInOrder));\n+        Integer wantedCount = mode.wantedCount();\n+        if (mode.atLeastMode()) {\n+            return Mockito.verify(mock, VerificationModeImpl.inOrderAtLeast(wantedCount, mocksToBeVerifiedInOrder));\n+        } else {\n+            return Mockito.verify(mock, VerificationModeImpl.inOrder(wantedCount, mocksToBeVerifiedInOrder));            \n+        }\n     }\n }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n             \"Wanted at least \" + pluralize(wantedCount) + \" but was \" + actualCount\n         ), cause);\n     }\n+    \n+    public void tooLittleActualInvocationsInOrderInAtLeastMode(int wantedCount, int actualCount, PrintableInvocation wanted, HasStackTrace lastActualStackTrace) {\n+        TooLittleInvocations cause = createTooLittleInvocationsCause(lastActualStackTrace);\n+\n+        throw new VerifcationInOrderFailure(join(\n+                \"Verification in order failure\",\n+                wanted.toString(),\n+                \"Wanted at least \" + pluralize(wantedCount) + \" but was \" + actualCount\n+        ), cause);\n+    }\n+    \n }\n--- a/src/org/mockito/internal/progress/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/progress/VerificationModeImpl.java\n  */\n public class VerificationModeImpl implements VerificationMode {\n     \n-    enum Verification { EXPLICIT, NO_MORE_WANTED };\n+    enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n     \n-    private final Integer wantedInvocationCount;\n-    //TODO merge with wantedInvocationCount, use enum to preserve atLeast mode\n-    private final Integer minInvocationCount;\n+    private final int wantedInvocationCount;\n     private final List<? extends Object> mocksToBeVerifiedInOrder;\n     private final Verification verification;\n     \n-    private VerificationModeImpl(Integer wantedNumberOfInvocations, Integer minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n-        if (wantedNumberOfInvocations != null && wantedNumberOfInvocations < 0) {\n+    private VerificationModeImpl(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n+        if (verification != Verification.AT_LEAST && wantedNumberOfInvocations < 0) {\n             throw new MockitoException(\"Negative value is not allowed here\");\n         }\n-        if (minNumberOfInvocations != null && minNumberOfInvocations < 1) {\n+        if (verification == Verification.AT_LEAST && wantedNumberOfInvocations < 1) {\n             throw new MockitoException(\"Negative value or zero are not allowed here\");\n         }\n         assert mocksToBeVerifiedInOrder != null;\n         this.wantedInvocationCount = wantedNumberOfInvocations;\n-        this.minInvocationCount = minNumberOfInvocations;\n         this.mocksToBeVerifiedInOrder = mocksToBeVerifiedInOrder;\n         this.verification = verification;\n     }\n     }\n \n     public static VerificationModeImpl atLeast(int minNumberOfInvocations) {\n-        return new VerificationModeImpl(null, minNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n+        return new VerificationModeImpl(minNumberOfInvocations, Collections.emptyList(), Verification.AT_LEAST);\n     }\n \n     public static VerificationModeImpl times(int wantedNumberOfInvocations) {\n-        return new VerificationModeImpl(wantedNumberOfInvocations, null, Collections.emptyList(), Verification.EXPLICIT);\n+        return new VerificationModeImpl(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n-    public static VerificationModeImpl inOrder(Integer wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n+    public static VerificationModeImpl inOrder(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n         assert !mocksToBeVerifiedInOrder.isEmpty();\n-        return new VerificationModeImpl(wantedNumberOfInvocations, null, mocksToBeVerifiedInOrder, Verification.EXPLICIT);\n+        return new VerificationModeImpl(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.EXPLICIT);\n+    }\n+\n+    public static VerificationModeImpl inOrderAtLeast(int minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n+        assert !mocksToBeVerifiedInOrder.isEmpty();\n+        return new VerificationModeImpl(minNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.AT_LEAST);\n     }\n     \n     public static VerificationModeImpl noMoreInteractions() {\n-        return new VerificationModeImpl(null, null, Collections.emptyList(), Verification.NO_MORE_WANTED);\n+        return new VerificationModeImpl(0, Collections.emptyList(), Verification.NO_MORE_WANTED);\n     }\n \n     public Integer wantedCount() {\n         return wantedInvocationCount;\n-    }\n-\n-    public Integer minimumCount() {\n-        return minInvocationCount;\n     }\n \n     public List<? extends Object> getMocksToBeVerifiedInOrder() {\n     }\n \n     public boolean atLeastMode() {\n-        return wantedInvocationCount == null && explicitMode();\n+        return verification == Verification.AT_LEAST;\n     }\n \n     public boolean explicitMode() {\n     }\n     \n     public boolean inOrderMode() {\n-        return !mocksToBeVerifiedInOrder.isEmpty() && explicitMode();\n+        return !mocksToBeVerifiedInOrder.isEmpty() && (explicitMode() || atLeastMode());\n     }\n     \n     public boolean missingMethodMode() {\n-        return explicitMode() && (atLeastMode() || wantedInvocationCount > 0);\n+        return (explicitMode() && wantedInvocationCount > 0) || (atLeastMode() && wantedInvocationCount == 1);\n     }\n     \n     public boolean missingMethodInOrderMode() {\n     }\n     \n     public boolean exactNumberOfInvocationsMode() {\n-        return !inOrderMode() && explicitMode();\n+        return !inOrderMode() && (explicitMode() || atLeastMode());\n     }\n \n     public boolean matchesActualCount(int actualCount) {\n-        boolean atLeast = atLeastMode() && actualCount >= minInvocationCount;\n+        boolean atLeast = atLeastMode() && actualCount >= wantedInvocationCount;\n         boolean actualMatchesWanted = !atLeastMode() && wantedInvocationCount == actualCount;\n         \n         return atLeast || actualMatchesWanted;\n     }\n \n     public boolean tooLittleActualInvocationsInAtLeastMode(int actualCount) {\n-        return atLeastMode() && minInvocationCount > actualCount;\n+        return atLeastMode() && wantedInvocationCount > actualCount;\n     }\n     \n     public boolean tooManyActualInvocations(int actualCount) {\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n-        if (mode.explicitMode()) {\n+        if (mode.explicitMode() || mode.atLeastMode()) {\n             return;\n         }\n \n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n         if (mode.tooLittleActualInvocations(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n             reporter.tooLittleActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, lastInvocation);\n-        }\n-        \n-        if (mode.tooManyActualInvocations(actualCount)) {\n+        } else if (mode.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n+            HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n+            reporter.tooLittleActualInvocationsInOrderInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);\n+        } else if (mode.tooManyActualInvocations(actualCount)) {\n             HasStackTrace firstUndesired = chunk.get(mode.wantedCount()).getStackTrace();\n             reporter.tooManyActualInvocationsInOrder(mode.wantedCount(), actualCount, wanted, firstUndesired);\n         }\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n             reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);\n         } else if (mode.tooLittleActualInvocationsInAtLeastMode(actualCount)) {\n             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n-            reporter.tooLittleActualInvocationsInAtLeastMode(mode.minimumCount(), actualCount, wanted, lastInvocation);        \n+            reporter.tooLittleActualInvocationsInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);        \n         } else if (mode.neverWantedButInvoked(actualCount)) {\n             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();\n             reporter.neverWantedButInvoked(wanted, firstUndesired); \n--- a/test/org/mockito/internal/progress/VerificationModeBuilder.java\n+++ b/test/org/mockito/internal/progress/VerificationModeBuilder.java\n \n public class VerificationModeBuilder {\n \n-    private Integer times;\n+    private Integer times = 1;\n \n     public VerificationModeImpl inOrder() {\n         return VerificationModeImpl.inOrder(times, Arrays.asList(new Object()));\n--- a/test/org/mockito/internal/progress/VerificationModeImplTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeImplTest.java\n         assertTrue(times(1).missingMethodMode());\n         assertTrue(times(10).missingMethodMode());\n         \n+        assertFalse(atLeast(2).missingMethodMode());\n         assertFalse(noMoreInteractions().missingMethodMode());\n         assertFalse(times(0).missingMethodMode());\n     }\n     \n     @Test\n+    public void inOrderAtLeastShouldBeInAtLeastMode() throws Exception {\n+        assertTrue(inOrderAtLeast(5, asList(\"mock\")).atLeastMode());\n+    }\n+    \n+    @Test\n     public void shouldKnowIfIsMissingMethodInOrderMode() throws Exception {\n-        assertTrue(inOrder(null, asList(\"mock\")).missingMethodInOrderMode());\n         assertTrue(inOrder(1, asList(\"mock\")).missingMethodInOrderMode());\n         assertTrue(inOrder(10, asList(\"mock\")).missingMethodInOrderMode());\n         \n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n     \n     @Test\n     public void shouldNeverVerifyWhenVerificationIsExplicit() throws Exception {\n+        verifier.verify(null, null, VerificationModeImpl.times(1));\n+    }\n+\n+    @Test\n+    public void shouldNeverVerifyWhenVerificationIsInAtLeastMode() throws Exception {\n         verifier.verify(null, null, VerificationModeImpl.atLeastOnce());\n     }\n     \n--- a/test/org/mockitousage/verification/AtLeastXVerificationTest.java\n+++ b/test/org/mockitousage/verification/AtLeastXVerificationTest.java\n import java.util.List;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n+import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitoutil.TestBase;\n \n         verifyNoMoreInteractions(mock);\n     }\n     \n-    @Ignore\n     @Test\n     public void shouldFailVerificationInOrder() throws Exception {\n         mock.clear();\n         try {\n             inOrder.verify(mock, atLeast(4)).add(anyString());\n             fail();\n-        } catch (TooLittleActualInvocations e) {}\n+        } catch (VerifcationInOrderFailure e) {}\n     }\n }", "timestamp": 1220286814, "metainfo": ""}