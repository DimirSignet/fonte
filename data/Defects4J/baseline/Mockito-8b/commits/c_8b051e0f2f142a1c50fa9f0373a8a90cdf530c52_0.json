{"sha": "8b051e0f2f142a1c50fa9f0373a8a90cdf530c52", "log": "Fixed issue 180, Nice error message  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401930", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n         ));\n     }\n \n-    public void cannotStubVoidMethodWithAReturnValue() {\n-        throw new MockitoException(join(\n-                \"Cannot stub a void method with a return value!\",\n+    public void cannotStubVoidMethodWithAReturnValue(String methodName) {\n+        throw new MockitoException(join(\n+                \"'\" + methodName + \"' is a *void method* and it *cannot* be stubbed with a *return value*!\",\n                 \"Voids are usually stubbed with Throwables:\",\n-                \"    doThrow(exception).when(mock).someVoidMethod();\"\n+                \"    doThrow(exception).when(mock).someVoidMethod();\",\n+                \"If the method you are trying to stub is *overloaded* then make sure you are calling the right overloaded version.\"\n              ));\n     }\n \n--- a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n \n     private void validateReturnValue(Returns answer, Invocation invocation) {\n         if (invocation.isVoid()) {\n-            reporter.cannotStubVoidMethodWithAReturnValue();\n+            reporter.cannotStubVoidMethodWithAReturnValue(invocation.getMethod().getName());\n         }\n         \n         if (answer.returnsNull() && invocation.returnsPrimitive()) {\n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n             doReturn(\"foo\").when(mock).voidMethod();\n             fail();\n         } catch (MockitoException e) {\n-            assertContains(\"Cannot stub a void method with a return value\", e.getMessage());\n+            assertContains(\"void method\", e.getMessage());\n+            assertContains(\"cannot\", e.getMessage());\n         }\n     }\n     ", "timestamp": 1268850307, "metainfo": ""}