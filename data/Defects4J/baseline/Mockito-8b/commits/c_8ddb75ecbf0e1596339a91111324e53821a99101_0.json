{"sha": "8ddb75ecbf0e1596339a91111324e53821a99101", "log": "reporting matchers is a one-liner also in Matchers.java refactored reporting matchers  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40274", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n  */\n package org.mockito;\n \n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.CompareEqual;\n import org.mockito.internal.matchers.EqualsWithDelta;\n import org.mockito.internal.matchers.LessOrEqual;\n import org.mockito.internal.matchers.LessThan;\n import org.mockito.internal.progress.LastArguments;\n+import org.mockito.internal.progress.ReturnValues;\n \n /**\n  * See {@link Matchers} for general info about matchers.\n      * @return <code>null</code>.\n      */\n     public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<T>(value));\n-        return null;\n+        return reportMatcher(new GreaterOrEqual<T>(value)).returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte geq(byte value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<Byte>(value));\n-        return 0;\n+        return reportMatcher(new GreaterOrEqual<Byte>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double geq(double value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<Double>(value));\n-        return 0;\n+        return reportMatcher(new GreaterOrEqual<Double>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float geq(float value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<Float>(value));\n-        return 0;\n+        return reportMatcher(new GreaterOrEqual<Float>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int geq(int value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<Integer>(value));\n-        return 0;\n+        return reportMatcher(new GreaterOrEqual<Integer>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long geq(long value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<Long>(value));\n-        return 0;\n+        return reportMatcher(new GreaterOrEqual<Long>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short geq(short value) {\n-        LastArguments.instance().reportMatcher(new GreaterOrEqual<Short>(value));\n-        return 0;\n+        return reportMatcher(new GreaterOrEqual<Short>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<T>(value));\n-        return null;\n+        return reportMatcher(new LessOrEqual<T>(value)).<T>returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte leq(byte value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<Byte>(value));\n-        return 0;\n+        return reportMatcher(new LessOrEqual<Byte>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double leq(double value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<Double>(value));\n-        return 0;\n+        return reportMatcher(new LessOrEqual<Double>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float leq(float value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<Float>(value));\n-        return 0;\n+        return reportMatcher(new LessOrEqual<Float>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int leq(int value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<Integer>(value));\n-        return 0;\n+        return reportMatcher(new LessOrEqual<Integer>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long leq(long value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<Long>(value));\n-        return 0;\n+        return reportMatcher(new LessOrEqual<Long>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short leq(short value) {\n-        LastArguments.instance().reportMatcher(new LessOrEqual<Short>(value));\n-        return 0;\n+        return reportMatcher(new LessOrEqual<Short>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<T>(value));\n-        return null;\n+        return reportMatcher(new GreaterThan<T>(value)).returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte gt(byte value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<Byte>(value));\n-        return 0;\n+        return reportMatcher(new GreaterThan<Byte>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double gt(double value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<Double>(value));\n-        return 0;\n+        return reportMatcher(new GreaterThan<Double>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float gt(float value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<Float>(value));\n-        return 0;\n+        return reportMatcher(new GreaterThan<Float>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int gt(int value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<Integer>(value));\n-        return 0;\n+        return reportMatcher(new GreaterThan<Integer>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long gt(long value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<Long>(value));\n-        return 0;\n+        return reportMatcher(new GreaterThan<Long>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short gt(short value) {\n-        LastArguments.instance().reportMatcher(new GreaterThan<Short>(value));\n-        return 0;\n+        return reportMatcher(new GreaterThan<Short>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n-        LastArguments.instance().reportMatcher(new LessThan<T>(value));\n-        return null;\n+        return reportMatcher(new LessThan<T>(value)).returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte lt(byte value) {\n-        LastArguments.instance().reportMatcher(new LessThan<Byte>(value));\n-        return 0;\n+        return reportMatcher(new LessThan<Byte>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double lt(double value) {\n-        LastArguments.instance().reportMatcher(new LessThan<Double>(value));\n-        return 0;\n+        return reportMatcher(new LessThan<Double>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float lt(float value) {\n-        LastArguments.instance().reportMatcher(new LessThan<Float>(value));\n-        return 0;\n+        return reportMatcher(new LessThan<Float>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int lt(int value) {\n-        LastArguments.instance().reportMatcher(new LessThan<Integer>(value));\n-        return 0;\n+        return reportMatcher(new LessThan<Integer>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long lt(long value) {\n-        LastArguments.instance().reportMatcher(new LessThan<Long>(value));\n-        return 0;\n+        return reportMatcher(new LessThan<Long>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short lt(short value) {\n-        LastArguments.instance().reportMatcher(new LessThan<Short>(value));\n-        return 0;\n+        return reportMatcher(new LessThan<Short>(value)).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n-        LastArguments.instance().reportMatcher(new CompareEqual<T>(value));\n-        return null;\n+        return reportMatcher(new CompareEqual<T>(value)).<T>returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String find(String regex) {\n-        LastArguments.instance().reportMatcher(new Find(regex));\n-        return null;\n+        return reportMatcher(new Find(regex)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T[] aryEq(T[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static short[] aryEq(short[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static long[] aryEq(long[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static int[] aryEq(int[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();       \n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static float[] aryEq(float[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static double[] aryEq(double[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static char[] aryEq(char[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static byte[] aryEq(byte[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static boolean[] aryEq(boolean[] value) {\n-        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n-        return null;\n+        return reportMatcher(new ArrayEquals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean and(boolean first, boolean second) {\n-        LastArguments.instance().reportAnd(2);\n-        return false;\n+        return LastArguments.instance().reportAnd(2).returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte and(byte first, byte second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char and(char first, char second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double and(double first, double second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float and(float first, float second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int and(int first, int second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long and(long first, long second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short and(short first, short second) {\n-        LastArguments.instance().reportAnd(2);\n-        return 0;\n+        return LastArguments.instance().reportAnd(2).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T and(T first, T second) {\n-        LastArguments.instance().reportAnd(2);\n-        return null;\n+        return LastArguments.instance().reportAnd(2).returnNull();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean or(boolean first, boolean second) {\n-        LastArguments.instance().reportOr(2);\n-        return false;\n+        return LastArguments.instance().reportOr(2).returnFalse();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T or(T first, T second) {\n-        LastArguments.instance().reportOr(2);\n-        return null;\n+        return LastArguments.instance().reportOr(2).returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short or(short first, short second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n+        return LastArguments.instance().reportOr(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long or(long first, long second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n+        return LastArguments.instance().reportOr(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int or(int first, int second) {\n-        LastArguments.instance().reportOr(2);\n-        return first;\n+        return LastArguments.instance().reportOr(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float or(float first, float second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n+        return LastArguments.instance().reportOr(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double or(double first, double second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n+        return LastArguments.instance().reportOr(2).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char or(char first, char second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n+        return LastArguments.instance().reportOr(2).returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte or(byte first, byte second) {\n-        LastArguments.instance().reportOr(2);\n-        return 0;\n+        return LastArguments.instance().reportOr(2).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T not(T first) {\n-        LastArguments.instance().reportNot();\n-        return null;\n+        return LastArguments.instance().reportNot().returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short not(short first) {\n-        LastArguments.instance().reportNot();\n-        return 0;\n+        return LastArguments.instance().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int not(int first) {\n-        LastArguments.instance().reportNot();\n-        return 0;\n+        return LastArguments.instance().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long not(long first) {\n-        LastArguments.instance().reportNot();\n-        return 0;\n+        return LastArguments.instance().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float not(float first) {\n-        LastArguments.instance().reportNot();\n-        return first;\n+        return LastArguments.instance().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double not(double first) {\n-        LastArguments.instance().reportNot();\n-        return 0;\n+        return LastArguments.instance().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char not(char first) {\n-        LastArguments.instance().reportNot();\n-        return 0;\n+        return LastArguments.instance().reportNot().returnChar();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean not(boolean first) {\n-        LastArguments.instance().reportNot();\n-        return false;\n+        return LastArguments.instance().reportNot().returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte not(byte first) {\n-        LastArguments.instance().reportNot();\n-        return 0;\n+        return LastArguments.instance().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double eq(double value, double delta) {\n-        LastArguments.instance().reportMatcher(new EqualsWithDelta(value, delta));\n-        return 0;\n+        return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float eq(float value, float delta) {\n-        LastArguments.instance().reportMatcher(new EqualsWithDelta(value, delta));\n-        return 0;\n+        return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();\n+    }\n+    \n+    private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n+        return LastArguments.instance().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n      */\n     public static boolean anyBoolean() {\n         //TODO every matcher should have a link to documentation about matchers\n-        return reportMatcher(Any.ANY).booleanValue();\n+        return reportMatcher(Any.ANY).returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte anyByte() {\n-        return reportMatcher(Any.ANY).byteValue();\n+        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char anyChar() {\n-        return reportMatcher(Any.ANY).charValue();\n+        return reportMatcher(Any.ANY).returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int anyInt() {\n-        return reportMatcher(Any.ANY).intValue();\n+        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long anyLong() {\n-        return reportMatcher(Any.ANY).longValue();\n+        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float anyFloat() {\n-        return reportMatcher(Any.ANY).floatValue();\n+        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double anyDouble() {\n-        return reportMatcher(Any.ANY).doubleValue();\n+        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short anyShort() {\n-        return reportMatcher(Any.ANY).shortValue();\n+        return reportMatcher(Any.ANY).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static Object anyObject() {\n-        return reportMatcher(Any.ANY).nullValue();\n+        return reportMatcher(Any.ANY).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T isA(Class<T> clazz) {\n-        return reportMatcher(new InstanceOf(clazz)).nullValue();\n+        return reportMatcher(new InstanceOf(clazz)).returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static boolean eq(boolean value) {\n-        return reportMatcher(new Equals(value)).booleanValue();\n+        return reportMatcher(new Equals(value)).returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte eq(byte value) {\n-        return reportMatcher(new Equals(value)).byteValue();\n+        return reportMatcher(new Equals(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char eq(char value) {\n-        return reportMatcher(new Equals(value)).charValue();\n+        return reportMatcher(new Equals(value)).returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double eq(double value) {\n-        return reportMatcher(new Equals(value)).doubleValue();\n+        return reportMatcher(new Equals(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float eq(float value) {\n-        return reportMatcher(new Equals(value)).floatValue();\n-    }\n-\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+    \n     /**\n      * int argument that is equal to the given value.\n      * \n      * @return <code>0</code>.\n      */\n     public static int eq(int value) {\n-        return reportMatcher(new Equals(value)).intValue();\n+        return reportMatcher(new Equals(value)).returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long eq(long value) {\n-        return reportMatcher(new Equals(value)).longValue();\n-    }\n-\n-    //TODO can I replace those with Number?\n+        return reportMatcher(new Equals(value)).returnZero();\n+    }\n+\n     /**\n      * short argument that is equal to the given value.\n      * \n      * @return <code>0</code>.\n      */\n     public static short eq(short value) {\n-        return reportMatcher(new Equals(value)).shortValue();\n+        return reportMatcher(new Equals(value)).returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T eq(T value) {\n-        return reportMatcher(new Equals(value)).nullValue();\n+        return reportMatcher(new Equals(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T same(T value) {\n-        return reportMatcher(new Same(value)).nullValue();\n+        return reportMatcher(new Same(value)).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static Object isNull() {\n-        return reportMatcher(Null.NULL).nullValue();\n+        return reportMatcher(Null.NULL).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static Object notNull() {\n-        return reportMatcher(NotNull.NOT_NULL).nullValue();\n+        return reportMatcher(NotNull.NOT_NULL).returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String contains(String substring) {\n-        return reportMatcher(new Contains(substring)).<String>nullValue();\n+        return reportMatcher(new Contains(substring)).<String>returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String matches(String regex) {\n-        return reportMatcher(new Matches(regex)).<String>nullValue();\n+        return reportMatcher(new Matches(regex)).<String>returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String endsWith(String suffix) {\n-        return reportMatcher(new EndsWith(suffix)).<String>nullValue();\n+        return reportMatcher(new EndsWith(suffix)).<String>returnNull();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String startsWith(String prefix) {\n-        return reportMatcher(new StartsWith(prefix)).<String>nullValue();\n+        return reportMatcher(new StartsWith(prefix)).<String>returnNull();\n     }\n     \n     public static char charThat(CustomMatcher<Character> matcher) {\n-        return reportMatcher(matcher).charValue();\n+        return reportMatcher(matcher).returnChar();\n     }\n     \n     public static boolean booleanThat(CustomMatcher<Boolean> matcher) {\n-        return reportMatcher(matcher).booleanValue();\n+        return reportMatcher(matcher).returnFalse();\n     }\n     \n     public static byte byteThat(CustomMatcher<Byte> matcher) {\n-        return reportMatcher(matcher).byteValue();\n+        return reportMatcher(matcher).returnZero();\n     }\n     \n     public static short shortThat(CustomMatcher<Short> matcher) {\n-        return reportMatcher(matcher).shortValue();\n+        return reportMatcher(matcher).returnZero();\n     }\n     \n     public static int intThat(CustomMatcher<Integer> matcher) {\n-        return reportMatcher(matcher).intValue();\n+        return reportMatcher(matcher).returnZero();\n     }\n \n     public static long longThat(CustomMatcher<Long> matcher) {\n-        return reportMatcher(matcher).longValue();\n+        return reportMatcher(matcher).returnZero();\n     }\n     \n     public static float floatThat(CustomMatcher<Float> matcher) {\n-        return reportMatcher(matcher).floatValue();\n+        return reportMatcher(matcher).returnZero();\n     }\n     \n     public static double doubleThat(CustomMatcher<Double> matcher) {\n-        return reportMatcher(matcher).doubleValue();\n+        return reportMatcher(matcher).returnZero();\n     }\n \n     public static <T> T argThat(CustomMatcher<T> matcher) {\n-        return reportMatcher(matcher).<T>nullValue();\n+        return reportMatcher(matcher).<T>returnNull();\n     }\n     \n     private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n         return matchers;\n     }\n \n-    public void reportAnd(int count) {\n+    //TODO count here is dodgy \n+    public ReturnValues reportAnd(int count) {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n         matcherStack.push(new And(popLastArgumentMatchers(count)));\n+        return new ReturnValues();\n     }\n \n-    public void reportNot() {\n+    public ReturnValues reportNot() {\n         assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n         matcherStack.push(new Not(popLastArgumentMatchers(1).get(0)));\n+        return new ReturnValues();\n     }\n \n     private List<ArgumentMatcher> popLastArgumentMatchers(int count) {\n         }\n     }\n \n-    public void reportOr(int count) {\n+    public ReturnValues reportOr(int count) {\n         assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n         matcherStack.push(new Or(popLastArgumentMatchers(count)));\n+        return new ReturnValues();\n     }\n }\n--- a/src/org/mockito/internal/progress/ReturnValues.java\n+++ b/src/org/mockito/internal/progress/ReturnValues.java\n \n public class ReturnValues {\n \n-    public byte byteValue() {\n+    public byte returnZero() {\n         return 0;\n     }\n \n-    public short shortValue() {\n+    public char returnChar() {\n         return 0;\n     }\n \n-    public int intValue() {\n-        return 0;\n-    }\n-\n-    public long longValue() {\n-        return 0;\n-    }\n-\n-    public float floatValue() {\n-        return 0;\n-    }\n-\n-    public double doubleValue() {\n-        return 0;\n-    }\n-\n-    public char charValue() {\n-        return 0;\n-    }\n-\n-    public <T> T nullValue() {\n+    public <T> T returnNull() {\n         return null;\n     }\n \n-    public boolean booleanValue() {\n+    public boolean returnFalse() {\n         return false;\n     }\n }", "timestamp": 1199889231, "metainfo": ""}