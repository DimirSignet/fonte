{"sha": "198cefa3a9028e12b1b0432cbdc4f4f4b8e24c35", "log": "merged Brice fixes", "commit": "\n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n  */\n package org.mockito.internal.matchers;\n \n-import java.io.Serializable;\n-\n import org.hamcrest.Description;\n import org.hamcrest.SelfDescribing;\n import org.mockito.ArgumentMatcher;\n+\n+import java.io.Serializable;\n \n public class Equals extends ArgumentMatcher<Object> implements ContainsExtraTypeInformation, Serializable {\n \n \n     public String describe(Object object) {\n         String text = quoting();\n-        if (object == null) {\n-            text+=\"null\";\n-        } else {\n-            text+=object.toString();\n-        }\n+        text+=\"\" + object;\n         text+= quoting();\n         return text;\n     }\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted == null ? \"null\" : wanted.toString());\n+        description.appendText(\"\" + wanted);\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n  *      <a href=\"#21\">21. New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </a><br/>\n- *      <a href=\"#22\">22. (**New**) Verification with timeout (Since 1.8.5) </a><br/>\n+ *      <a href=\"#22\">22. (New) Verification with timeout (Since 1.8.5) </a><br/>\n+ *      <a href=\"#23\">23. (**New**) Automatic instantiation of &#064;Spy, &#064;InjectMocks fields (Since 1.9)</a><br/>\n  * </b>\n  * \n  * <p>\n  *\n  * <p>\n  * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}.\n- * As for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner}.\n+ * Just like for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n  * <h3 id=\"22\">22. (**New**) Verification with timeout (Since 1.8.5)  </h3>\n  * <p>\n  *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n  * </pre>\n  *\n- * <h3 id=\"21\">23. (**New**) Automatic initialisation of &#064;Spy, &#064;InjectMocks fields (Since 1.8.6) </h3>\n- * <p>\n- * Mockito will now try to initialise &#064;{@link Spy} and &#064;{@link InjectMocks} fields if and only if the type has\n- * a zero-arg argument, even private.\n+ * <h3 id=\"23\">23. (**New**) Automatic instantiation of &#064;Spy, &#064;InjectMocks fields (Since 1.9)</h3>\n+ * <p>\n+ * Mockito will now try to instantiate &#064;{@link Spy} and &#064;{@link InjectMocks} fields if you haven't provided instance at declaration\n+ * *and* if the type has a zero-arg argument (even private).\n+ * <p>\n+ * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)} or {@link MockitoJUnitRunner}.\n+ * <p>\n+ * Read more about available {@link MockitoAnnotations}\n+ * <pre>\n+ * //instead:\n+ * &#064;Spy BeerDrinker drinker = new BeerDrinker();\n+ * //you can write:\n+ * &#064;Spy BeerDrinker drinker;\n  *\n- * <p>\n- * This is especially useful if you are testing an object with a Joshua Bloch Builder Pattern (see Effective Java Ed. 2008, &#167;2.Item 2)\n- *\n- * <p>\n- * Example :\n- *\n- * <pre>\n- * // The type to test\n- * public class TooMuchComplicated {\n- *   private List subItems;\n- *   // other collaborators\n- *\n- *   public void someBehaviourToTest() {}\n- *\n- *   // no-argument constructor\n- *   private TooMuchComplicated()\n- *\n- *   private TooMuchComplicated(Builder builder) {}\n- *\n- *   public static class Builder {\n- *     public Builder withSubItems(Object subItems ...) {}\n- *     // other builder methods\n- *     public TooMuchComplicated build() { return new TooMuchComplicated(this); }\n- *   }\n- * }\n- *\n- * // In your test\n- * &#064;RunWith(MockitoJUnitRunner.class)\n- * public class TooMuchComplicatedTest {\n- *   &#064;Mock List subItems;\n- *   // other mocked collaborators\n- *   &#064;InjectMocks TooMuchComplicated tested;\n- *\n- *   // tests\n- * }\n+ * //same applies to &#064;InjectMocks annotation:\n+ * &#064;InjectMocks LocalPub;\n  * </pre>\n  *\n  */\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n \n \n /**\n- * Compatible with <b>JUnit 4.4</b> and higher, this runner adds following behavior:\n+ * Compatible with <b>JUnit 4.4 and higher</b>, this runner adds following behavior:\n  * <ul>\n  *   <li>\n  *      Initializes mocks annotated with {@link Mock},\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/DeepStubGenericTypesIssueTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+//see issue 230\n+public class DeepStubGenericTypesIssueTest extends TestBase {\n+\n+    static interface ListSet extends List<Set> {}\n+\n+    @Test\n+    @Ignore\n+    //TODO\n+    public void testDeepMockWithClass() {\n+        final ListSet mock = Mockito.mock(ListSet.class, Mockito.RETURNS_DEEP_STUBS);\n+        final Set mock2 = mock.get(0);\n+    }\n+}", "timestamp": 1290521981, "metainfo": ""}