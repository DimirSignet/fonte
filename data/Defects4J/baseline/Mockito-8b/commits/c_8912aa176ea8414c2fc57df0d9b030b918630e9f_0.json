{"sha": "8912aa176ea8414c2fc57df0d9b030b918630e9f", "log": "Fixed problem with type testing of outer classes  Issue #92", "commit": "\n--- a/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n+++ b/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java\n         if (outerClassInstance == null) {\n             return noArgConstructor(cls);\n         }\n-        return withOuterClass(cls);\n+        return withParams(cls, outerClassInstance);\n     }\n \n-    private <T> T withOuterClass(Class<T> cls) {\n+    private static <T> T withParams(Class<T> cls, Object... params) {\n         try {\n-            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n-            return c.newInstance(outerClassInstance);\n+            //this is kind of overengineered because we don't need to support more params\n+            //however, I know we will be needing it :)\n+            for (Constructor<?> constructor : cls.getDeclaredConstructors()) {\n+                Class<?>[] types = constructor.getParameterTypes();\n+                if (paramsMatch(types, params)) {\n+                    return (T) constructor.newInstance(params);\n+                }\n+            }\n         } catch (Exception e) {\n-            throw new InstantationException(\"Unable to create mock instance of '\"\n-                    + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n+            throw paramsException(cls, e);\n         }\n+        throw paramsException(cls, null);\n     }\n \n-    private <T> T noArgConstructor(Class<T> cls) {\n+    private static <T> InstantationException paramsException(Class<T> cls, Exception e) {\n+        return new InstantationException(\"Unable to create mock instance of '\"\n+                + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n+    }\n+\n+    private static boolean paramsMatch(Class<?>[] types, Object[] params) {\n+        if (params.length != types.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < params.length; i++) {\n+            if (!types[i].isInstance(params[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static <T> T noArgConstructor(Class<T> cls) {\n         try {\n             return cls.newInstance();\n         } catch (Exception e) {\n--- a/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n+++ b/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java\n \n     static class SomeClass {}\n     class SomeInnerClass {}\n+    class ChildOfThis extends ConstructorInstantiatorTest {}\n     static class SomeClass2 {\n         SomeClass2(String x) {}\n     }\n \n     @Test public void creates_instances_of_inner_classes() {\n         assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);\n+        assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);\n     }\n \n     @Test public void explains_when_constructor_cannot_be_found() {", "timestamp": 1416181323, "metainfo": ""}