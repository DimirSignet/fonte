{"sha": "4377abc02ea89e4c9894d3f30362e1afb784078f", "log": "In order to prepare Mockito for new feature: printing invocations for debugging  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401718", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.debugging.MockitoDebuggerImpl;\n import org.mockito.internal.stubbing.answers.*;\n import org.mockito.internal.stubbing.defaultanswers.*;\n import org.mockito.internal.verification.VerificationModeFactory;\n     public static MockSettings withSettings() {\n         return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n     }\n+\n+    /*\n+     * Helps debugging failing tests.\n+     * <p>\n+     * TODO: add more info & examples.\n+     */\n+    public static MockitoDebugger debug() {\n+        return new MockitoDebuggerImpl();\n+    }\n }\n--- /dev/null\n+++ b/src/org/mockito/MockitoDebugger.java\n+package org.mockito;\n+\n+import org.mockitousage.IMethods;\n+import org.mockitousage.debugging.DebuggingTestCasesTest;\n+\n+public interface MockitoDebugger {\n+    void printInvocations(Object ... mocks);\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+package org.mockito.internal.debugging;\n+\n+import org.mockito.MockitoDebugger;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n+import org.mockito.internal.invocation.Invocation;\n+\n+import java.util.List;\n+\n+import static java.util.Arrays.*;\n+\n+public class MockitoDebuggerImpl implements MockitoDebugger {\n+    public void printInvocations(Object ... mocks) {\n+        AllInvocationsFinder finder = new AllInvocationsFinder();\n+        List<Invocation> invocations = finder.getAllInvocations(asList(mocks));\n+        System.out.println(\"********************************\");\n+        System.out.println(\"*** Mockito interactions log ***\");\n+        System.out.println(\"********************************\");\n+        for(Invocation i:invocations) {\n+            //TODO: this is very ugly\n+            System.out.println(i.toString());\n+            System.out.println(\" invoked: \" + i.getLocation());\n+            if (i.stubInfo() != null) {\n+                System.out.println(\" stubbed: \" + i.stubInfo().stubbingLocation());\n+            }\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n         markVerified();\n         this.verifiedInOrder = true;\n     }\n+\n+    public StubInfo stubInfo() {\n+        return new StubInfo();\n+    }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/StubInfo.java\n+package org.mockito.internal.invocation;\n+\n+public class StubInfo {\n+    public String stubbingLocation() {\n+        return \"foooo!\";\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/debugging/DebuggingTestCasesTest.java\n+package org.mockitousage.debugging;\n+\n+import org.junit.After;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+\n+import static org.mockito.BDDMockito.*;\n+\n+@Ignore\n+public class DebuggingTestCasesTest {\n+\n+    IMethods mock = mock(IMethods.class);\n+    IMethods mockTwo = mock(IMethods.class);\n+\n+    @Test\n+    public void shouldPointOutStubCalledWithDifferentArg() throws Exception {\n+        //given\n+        given(mock.simpleMethod(\"different arg\")).willReturn(\"foo\");\n+        //when\n+        businessLogic(\"arg\");\n+        //then\n+        verify(mockTwo).oneArg(\"foo\");\n+    }\n+\n+    private void businessLogic(String name) {\n+        String out = mock.simpleMethod(name);\n+        mockTwo.oneArg(out);\n+    }\n+\n+    @After\n+    public void checkStubs() {\n+        Mockito.debug().printInvocations(mock, mockTwo);\n+    }\n+}", "timestamp": 1258316208, "metainfo": ""}