{"sha": "c3cbb49a9183fb18310e83997cb75405c9062b04", "log": "In order to make it simpler to make the mock serializable  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401685", "commit": "\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.stubbing.Answer;\n \n+import java.util.Arrays;\n+import java.io.Serializable;\n+\n public class MockSettingsImpl implements MockSettings {\n \n     private static final long serialVersionUID = 4475297236197939568L;\n     private String name;\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n-    private boolean isSerializable;\n \n-    //TODO: serializable() should simply add Serializable interface\n     public MockSettings serializable() {\n-        this.isSerializable = true;\n-        return this;\n+        return this.extraInterfaces(Serializable.class);\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n     }\n \n     public boolean isSerializable() {\n-        return isSerializable;\n+        return\n+                extraInterfaces != null\n+                && Arrays.asList(extraInterfaces).contains(Serializable.class);\n     }\n }\n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Set;\n+import java.io.Serializable;\n \n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockitoutil.TestBase;\n+import org.fest.assertions.Assertions;\n \n public class MockSettingsImplTest extends TestBase {\n \n         assertEquals(List.class, mockSettingsImpl.getExtraInterfaces()[0]);\n         assertEquals(Set.class, mockSettingsImpl.getExtraInterfaces()[1]);\n     }\n+\n+    @Test\n+    public void shouldSetMockToBeSerializable() throws Exception {\n+        //when\n+        mockSettingsImpl.serializable();\n+\n+        //then\n+        Assertions.assertThat(mockSettingsImpl.getExtraInterfaces()).contains(Serializable.class);\n+    }\n+\n+    @Test\n+    public void shouldKnowIfIsSerializable() throws Exception {\n+        //given\n+        assertFalse(mockSettingsImpl.isSerializable());\n+\n+        //when\n+        mockSettingsImpl.serializable();\n+\n+        //then\n+        assertTrue(mockSettingsImpl.isSerializable());\n+    }\n }\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n     @Test\n     public void shouldAllowMockToBeSerializable() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n \n         // when-serialize then-deserialize\n         serializeAndBack(mock);\n     @Test\n     public void shouldAllowMockAndBooleanValueToSerializable() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         when(mock.booleanReturningMethod()).thenReturn(true);\n \n         // when\n     @Test\n     public void shouldAllowMockAndStringValueToBeSerializable() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         String value = \"value\";\n         when(mock.stringReturningMethod()).thenReturn(value);\n \n     @Test\n     public void shouldAllMockAndSerializableValueToBeSerialized() throws Exception {\n         // given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         List<?> value = Collections.emptyList();\n         when(mock.objectReturningMethodNoArgs()).thenReturn(value);\n \n \n     @Test\n     public void shouldSerializeMethodCallWithParametersThatAreSerializable() throws Exception {\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         List<?> value = Collections.emptyList();\n         when(mock.objectArgMethod(value)).thenReturn(value);\n \n \n     @Test\n     public void shouldSerializeMethodCallsUsingAnyStringMatcher() throws Exception {\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         List<?> value = Collections.emptyList();\n         when(mock.objectArgMethod(anyString())).thenReturn(value);\n \n \n     @Test\n     public void shouldVerifyCalledNTimesForSerializedMock() throws Exception {\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         List<?> value = Collections.emptyList();\n         when(mock.objectArgMethod(anyString())).thenReturn(value);\n         mock.objectArgMethod(\"\");\n     @Test\n     public void shouldVerifyEvenIfSomeMethodsCalledAfterSerialization() throws Exception {\n         //given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n \n         // when\n         mock.simpleMethod(1);\n     @Test\n     public void shouldStubEvenIfSomeMethodsCalledAfterSerialization() throws Exception {\n         //given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n \n         // when\n         when(mock.simpleMethod(1)).thenReturn(\"foo\");\n \n     @Test\n     public void shouldVerifyCallOrderForSerializedMock() throws Exception {\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n-        IMethods mock2 = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n+        IMethods mock2 = mock(IMethods.class, withSettings().serializable());\n         mock.arrayReturningMethod();\n         mock2.arrayReturningMethod();\n \n \n     @Test\n     public void shouldRememberInteractionsForSerializedMock() throws Exception {\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         List<?> value = Collections.emptyList();\n         when(mock.objectArgMethod(anyString())).thenReturn(value);\n         mock.objectArgMethod(\"happened\");\n     public void shouldSerializeWithStubbingCallback() throws Exception {\n \n         // given\n-        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class).serializable());\n+        IMethods mock = mock(IMethods.class, withSettings().serializable());\n         final String string = \"return value\";\n         when(mock.objectArgMethod(anyString())).thenAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) {", "timestamp": 1257940918, "metainfo": ""}