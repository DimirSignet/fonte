{"sha": "6b45056c44ef065032c638b57bb9d53acd08501b", "log": "Added casts to supress varargs warnings", "commit": "\n--- a/test/org/mockito/internal/creation/MockSettingsImplTest.java\n+++ b/test/org/mockito/internal/creation/MockSettingsImplTest.java\n     \t//then\n     \tAssertions.assertThat(mockSettingsImpl.getInvocationListeners()).hasSize(1);\n     }\n-    \n+\n+    @SuppressWarnings(\"all\")\n     @Test(expected=MockitoException.class)\n     public void shouldNotAllowNullListener() {\n-    \tmockSettingsImpl.invocationListeners(null);\n+    \tmockSettingsImpl.invocationListeners((InvocationListener[])null);\n     }\n \n     @Test\n--- a/test/org/mockitousage/basicapi/UsingVarargsTest.java\n+++ b/test/org/mockitousage/basicapi/UsingVarargsTest.java\n     //See bug #31\n     public void shouldStubCorrectlyWhenMixedVarargsUsed() {\n         MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n-        when(mixedVarargs.doSomething(\"hello\", null)).thenReturn(\"hello\");\n-        when(mixedVarargs.doSomething(\"goodbye\", null)).thenReturn(\"goodbye\");\n+        when(mixedVarargs.doSomething(\"hello\", (String[])null)).thenReturn(\"hello\");\n+        when(mixedVarargs.doSomething(\"goodbye\", (String[])null)).thenReturn(\"goodbye\");\n \n-        String result = mixedVarargs.doSomething(\"hello\", null);\n+        String result = mixedVarargs.doSomething(\"hello\",(String[]) null);\n         assertEquals(\"hello\", result);\n         \n-        verify(mixedVarargs).doSomething(\"hello\", null);\n+        verify(mixedVarargs).doSomething(\"hello\", (String[])null);\n     }\n     \n     @SuppressWarnings(\"all\")\n     @Test\n     public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed() {\n         MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n-        when(mixedVarargs.doSomething(\"one\", \"two\", null)).thenReturn(\"hello\");\n-        when(mixedVarargs.doSomething(\"1\", \"2\", null)).thenReturn(\"goodbye\");\n+        when(mixedVarargs.doSomething(\"one\", \"two\", (String[])null)).thenReturn(\"hello\");\n+        when(mixedVarargs.doSomething(\"1\", \"2\", (String[])null)).thenReturn(\"goodbye\");\n \n-        String result = mixedVarargs.doSomething(\"one\", \"two\", null);\n+        String result = mixedVarargs.doSomething(\"one\", \"two\", (String[])null);\n         assertEquals(\"hello\", result);\n     }\n     \n--- a/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n+++ b/test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java\n     @SuppressWarnings(\"all\")\n     @Test(expected=MockitoException.class)\n     public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions() {\n-        verifyNoMoreInteractions(null);\n+        verifyNoMoreInteractions((Object[])null);\n     }\n }\n--- a/test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java\n     @SuppressWarnings(\"all\")\n     @Test\n     public void shouldReturnConsecutiveValuesForTwoNulls() throws Exception {\n-        when(mock.simpleMethod()).thenReturn(null, null);\n+        when(mock.simpleMethod()).thenReturn(null, (String[])null);\n         \n         assertNull(mock.simpleMethod());        \n         assertNull(mock.simpleMethod());        \n--- a/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationInOrderTest.java\n     @SuppressWarnings(\"all\")\n     @Test(expected = MockitoException.class)\n     public void shouldScreamWhenNullPassed() {\n-        inOrder(null);\n+        inOrder((Object[])null);\n     }\n }\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n     @SuppressWarnings(\"all\")\n     @Test(expected=MockitoException.class)\n     public void verifyNoMoreInteractionsShouldScreamWhenNullPassed() throws Exception {\n-        verifyNoMoreInteractions(null);\n+        verifyNoMoreInteractions((Object[])null);\n     }\n }", "timestamp": 1404075590, "metainfo": ""}