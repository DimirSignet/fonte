{"sha": "ab87b443d4a5c3d2f1c7f7d02213319380dad54f", "log": "fixed some minor javadoc fixes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40637", "commit": "\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito.internal.stubbing;\n-\n-import org.mockito.Mockito;\n-\n-/**\n- * Stubs void method with an exception. E.g:\n- * \n- * <pre>\n- * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n- * \n- * //you can stub with different behavior for consecutive method calls.\n- * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.   \n- * stub(mock)\n- *  .toThrow(new RuntimeException())\n- *  .toReturn()\n- *  .on().someMethod();\n- * </pre>\n- * \n- * See examples in javadoc for {@link Mockito#stubVoid}\n- */\n-public interface VoidMethodStubbable<T> {\n-\n-    /**\n-     * Stubs void method with an exception. E.g:\n-     * \n-     * <pre>\n-     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n-     * </pre>\n-     * \n-     * If throwable is a checked exception then it has to \n-     * match one of the checked exceptions of method signature.\n-     * \n-     * See examples in javadoc for {@link Mockito#stubVoid}\n-     * \n-     * @param throwable\n-     *            to be thrown on method invocation\n-     * \n-     * @return method selector - to choose void method and finish stubbing \n-     */\n-    VoidMethodStubbable<T> toThrow(Throwable throwable);\n-    \n-    /**\n-     * Stubs void method to 'just return' (e.g. to <b>not</b> to throw any exception)\n-     * <p>\n-     * <b>Only</b> use this method if you're stubbing for consecutive calls.\n-     * <p>\n-     * For example:\n-     * <pre>\n-     * stubVoid(mock)\n-     *   .toReturn()\n-     *   .toThrow(new RuntimeException())\n-     *   .on().foo(10);\n-     * </pre>\n-     * <ol> \n-     * <li>first time foo(10) is called the mock will 'just return' (e.g. don't throw any exception)</li>\n-     * <li>second time foo(10) is called the mock will throw RuntimeException</li>\n-     * <li>every next time foo(10) is called the mock will throw RuntimeException</li>\n-     * </ol> \n-     * \n-     * See examples in javadoc for {@link Mockito#stubVoid}\n-     * \n-     * @param throwable\n-     *            to be thrown on method invocation\n-     * \n-     * @return method selector - to choose void method and finish stubbing \n-     */\n-    VoidMethodStubbable<T> toReturn();\n-    \n-    /**\n-     * Choose void method for stubbing. E.g:\n-     * \n-     * <pre>\n-     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n-     * </pre>\n-     * \n-     * See examples in javadoc for {@link Mockito#stubVoid}\n-     * \n-     * @return mock object itself\n-     */\n-    T on();\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.stubbing;\n+\n+import org.mockito.Mockito;\n+\n+/**\n+ * Stubs void method with an exception. E.g:\n+ * \n+ * <pre>\n+ * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+ * \n+ * //you can stub with different behavior for consecutive method calls.\n+ * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.   \n+ * stub(mock)\n+ *  .toThrow(new RuntimeException())\n+ *  .toReturn()\n+ *  .on().someMethod();\n+ * </pre>\n+ * \n+ * See examples in javadoc for {@link Mockito#stubVoid}\n+ */\n+public interface VoidMethodStubbable<T> {\n+\n+    /**\n+     * Stubs void method with an exception. E.g:\n+     * \n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n+     * </pre>\n+     * \n+     * If throwable is a checked exception then it has to \n+     * match one of the checked exceptions of method signature.\n+     * \n+     * See examples in javadoc for {@link Mockito#stubVoid}\n+     * \n+     * @param throwable\n+     *            to be thrown on method invocation\n+     * \n+     * @return VoidMethodStubbable - typically to choose void method and finish stubbing\n+     */\n+    VoidMethodStubbable<T> toThrow(Throwable throwable);\n+    \n+    /**\n+     * Stubs void method to 'just return' (e.g. to <b>not</b> to throw any exception)\n+     * <p>\n+     * <b>Only use this method if you're stubbing consecutive calls.</b>\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * stubVoid(mock)\n+     *   .toReturn()\n+     *   .toThrow(new RuntimeException())\n+     *   .on().foo(10);\n+     * </pre>\n+     * <ul> \n+     * <li>first time foo(10) is called the mock will 'just return' (e.g. don't throw any exception)</li>\n+     * <li>second time foo(10) is called the mock will throw RuntimeException</li>\n+     * <li>every consecutive time foo(10) is called the mock will throw RuntimeException</li>\n+     * </ul> \n+     * <p>\n+     * See examples in javadoc for {@link Mockito#stubVoid}\n+     * \n+     * @return VoidMethodStubbable - typically to choose void method and finish stubbing \n+     */\n+    VoidMethodStubbable<T> toReturn();\n+    \n+    /**\n+     * Choose void method for stubbing. E.g:\n+     * \n+     * <pre>\n+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n+     * </pre>\n+     * \n+     * See examples in javadoc for {@link Mockito#stubVoid}\n+     * \n+     * @return mock object itself\n+     */\n+    T on();\n }", "timestamp": 1213714783, "metainfo": ""}