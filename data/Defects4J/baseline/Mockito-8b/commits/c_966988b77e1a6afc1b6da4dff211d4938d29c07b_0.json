{"sha": "966988b77e1a6afc1b6da4dff211d4938d29c07b", "log": "made interface of Analyzer more consistent  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40214", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsAnalyzer.java\n+++ b/src/org/mockito/internal/invocation/InvocationsAnalyzer.java\n  */\n public class InvocationsAnalyzer {\n \n+    //TODO add missing tests\n     public int countActual(List<Invocation> invocations, InvocationMatcher wanted) {\n         int actual = 0;\n         for (Invocation registeredInvocation : invocations) {\n         return actual;\n     }\n \n-    //TODO start all with find\n     public Invocation findActualInvocation(List<Invocation> invocations, InvocationMatcher wanted) {\n         Invocation actualbyName = null;\n         for (Invocation registered : invocations) {\n             }\n         }\n         \n-        return actualbyName != null ? actualbyName : getFirstUnverified(invocations);\n+        return actualbyName != null ? actualbyName : findFirstUnverified(invocations);\n     }\n     \n-    public Invocation getFirstUnverified(List<Invocation> invocations) {\n+    public Invocation findFirstUnverified(List<Invocation> invocations) {\n         for (Invocation i : invocations) {\n             if (!i.isVerified()) {\n                 return i;\n         return null;\n     }\n     \n-    public HasStackTrace getLastInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted) {\n+    public HasStackTrace findLastInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted) {\n         Invocation lastMatching = null;\n         for (Invocation registered : invocations) {\n             if (wanted.matches(registered)) {\n         return lastMatching != null ? lastMatching.getStackTrace() : null;\n     }\n \n-    public HasStackTrace getFirstUndesiredInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+    public HasStackTrace findFirstUndesiredInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         int counter = 0;\n         for (Invocation registered : invocations) {\n             if (wanted.matches(registered)) {\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n             return;\n         }\n \n-        Invocation unverified = analyzer.getFirstUnverified(invocations);\n+        Invocation unverified = analyzer.findFirstUnverified(invocations);\n         if (unverified != null) {\n             reporter.noMoreInteractionsWanted(unverified.toString(), unverified.getStackTrace());\n         }\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n         int wantedCount = mode.wantedCount();\n         \n         if (actualCount < wantedCount) {\n-            HasStackTrace lastInvocation = analyzer.getLastInvocationStackTrace(invocations, wanted);\n+            HasStackTrace lastInvocation = analyzer.findLastInvocationStackTrace(invocations, wanted);\n             reporter.tooLittleActualInvocations(wantedCount, actualCount, wanted.toString(), lastInvocation);\n         } else if (actualCount > wantedCount) {\n-            HasStackTrace firstUndesired = analyzer.getFirstUndesiredInvocationStackTrace(invocations, wanted, mode);\n+            HasStackTrace firstUndesired = analyzer.findFirstUndesiredInvocationStackTrace(invocations, wanted, mode);\n             reporter.tooManyActualInvocations(wantedCount, actualCount, wanted.toString(), firstUndesired);\n         }\n     }\n--- a/test/org/mockito/internal/invocation/InvocationsAnalyzerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsAnalyzerTest.java\n     }\n     \n     @Test\n-    public void shouldGetFirstUnverifiedInvocation() throws Exception {\n-        assertSame(simpleMethodInvocation, analyzer.getFirstUnverified(invocations));\n+    public void shouldFindFirstUnverifiedInvocation() throws Exception {\n+        assertSame(simpleMethodInvocation, analyzer.findFirstUnverified(invocations));\n         \n         simpleMethodInvocationTwo.markVerified();\n         simpleMethodInvocation.markVerified();\n         \n-        assertSame(differentMethodInvocation, analyzer.getFirstUnverified(invocations));\n+        assertSame(differentMethodInvocation, analyzer.findFirstUnverified(invocations));\n         \n         differentMethodInvocation.markVerified();\n-        assertNull(analyzer.getFirstUnverified(invocations));\n+        assertNull(analyzer.findFirstUnverified(invocations));\n     }\n     \n     @Test\n-    public void shouldGetFirstUndesiredWhenWantedNumberOfTimesIsZero() throws Exception {\n-        HasStackTrace firstUndesired = analyzer.getFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(0));\n+    public void shouldFindFirstUndesiredWhenWantedNumberOfTimesIsZero() throws Exception {\n+        HasStackTrace firstUndesired = analyzer.findFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(0));\n         HasStackTrace expected = simpleMethodInvocation.getStackTrace();\n         assertSame(firstUndesired, expected);\n     }\n     \n     @Test\n-    public void shouldGetFirstUndesiredWhenWantedNumberOfTimesIsOne() throws Exception {\n-        HasStackTrace firstUndesired = analyzer.getFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(1));\n+    public void shouldFindFirstUndesiredWhenWantedNumberOfTimesIsOne() throws Exception {\n+        HasStackTrace firstUndesired = analyzer.findFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(1));\n         HasStackTrace expected = simpleMethodInvocationTwo.getStackTrace();\n         assertSame(firstUndesired, expected);\n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n     public void shouldBreakWhenThereAreNoUndesiredInvocations() throws Exception {\n-        analyzer.getFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(2));\n+        analyzer.findFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(2));\n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n     public void shouldBreakWhenWantedInvocationsFigureIsBigger() throws Exception {\n-        analyzer.getFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(100));\n+        analyzer.findFirstUndesiredInvocationStackTrace(invocations, new InvocationMatcher(simpleMethodInvocation), VerificationMode.times(100));\n     }\n }\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n     class InvocationsAnalyzerStub extends InvocationsAnalyzer {\n         private List<Invocation> invocations;\n         private Invocation invocationToReturn;\n-        @Override public Invocation getFirstUnverified(List<Invocation> invocations) {\n+        @Override public Invocation findFirstUnverified(List<Invocation> invocations) {\n             this.invocations = invocations;\n             return invocationToReturn;\n         }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n             return actualCountToReturn;\n         }\n         \n-        @Override public HasStackTrace getFirstUndesiredInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+        @Override public HasStackTrace findFirstUndesiredInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n             this.wanted = wanted;\n             this.mode = mode;\n             return invocationTraceToReturn;\n         }\n         \n         @Override\n-        public HasStackTrace getLastInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted) {\n+        public HasStackTrace findLastInvocationStackTrace(List<Invocation> invocations, InvocationMatcher wanted) {\n             this.wanted = wanted;\n             return invocationTraceToReturn;\n         }", "timestamp": 1197735687, "metainfo": ""}