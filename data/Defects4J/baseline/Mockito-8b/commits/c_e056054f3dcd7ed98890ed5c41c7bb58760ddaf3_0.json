{"sha": "e056054f3dcd7ed98890ed5c41c7bb58760ddaf3", "log": "organized imports fixed documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40258", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  * </pre>\n  * <b>Warning:</b>\n  * <p>\n- * When multiple arguments used, all arguments have to be provided by matchers, e.g:\n+ * When multiple arguments are combined with matchers, all arguments have to be provided by matchers, e.g:\n  * <pre>\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n- *   //above is correct - eq() is also an argument matcher (see {@link Matchers#eq(Object)})\n+ *   //above is correct - eq() is also an argument matcher\n  *   \n  *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * \n  * //stubbing\n  * stub(mockedList.get(0)).toReturn(\"first\");\n- * stub(mockedList.get(1)).toReturn(\"second\");\n- * stub(mockedList.get(2)).toThrow(new RuntimeException());\n+ * stub(mockedList.get(1)).toThrow(new RuntimeException());\n  * \n  * //following prints \"first\"\n  * System.out.println(mockedList.get(0));\n  * \n- * //following prints \"second\" three times\n+ * //following throws runtime exception\n  * System.out.println(mockedList.get(1));\n- * System.out.println(mockedList.get(1));\n- * System.out.println(mockedList.get(1));\n- * \n- * //following throws runtime exception\n- * System.out.println(mockedList.get(2));\n  * \n  * //following prints \"null\"\n  * System.out.println(mockedList.get(999));\n  * </pre>\n  * \n  * <p>\n- * Once stubbed, mock object will always return stubbed value regardless of how many times it is called. \n+ * Once stubbed, mocked method will always return stubbed value regardless of how many times it is called. \n  * <p>\n  * By default, for all methods that return value mock object will return null,\n- * appropriate primitive value (0, false, etc.) or empty collection. \n+ * appropriate primitive value (0, false, etc.) or empty collection.\n  * \n  * <h3>Argument matchers</h3>\n  * \n  * <p>\n  * <b>Warning:</b>\n  * <p>\n- * When multiple arguments used, all arguments have to be provided by matchers, e.g:\n+ * When multiple arguments are combined with matchers, all arguments have to be provided by matchers, e.g:\n  * <pre>\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n- *   //above is correct - eq() is also an argument matcher (see {@link Matchers#eq(Object)})\n+ *   //above is correct - eq() is also an argument matcher\n  *   \n  *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n  * </pre>\n  * \n- * <h3>Exact number of invocations verification</h3>\n+ * <h3>Verifying exact number of invocations / at least once</h3>\n  *\n  *<pre>\n  *  //using mock \n  *  mockedList.add(\"three times\");\n  *  mockedList.add(\"three times\");\n  *  \n- *  //following two verifications work exactly the same\n+ *  //following two verifications work exactly the same - times(1) is used by default\n+ *  verify(mockedList).add(\"once\");\n  *  verify(mockedList, times(1)).add(\"once\");\n- *  verify(mockedList).add(\"once\");\n  *  \n  *  //exact number of invocation verification\n  *  verify(mockedList, times(2)).add(\"twice\");\n  * </pre>\n  * \n  * <p>\n- * If times(x) is not given times(1) is assumed. Therefore using times(1) explicitly should be omitted.\n+ * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be omitted.\n  * \n  * <h3>Stubbing void methods with exceptions</h3>\n  * \n      * Creates mock object of given class or interface.\n      * <p>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param classToMock\n      * @return mock object\n      * <p>\n      * Trying to stub void method? Look here: {@link Mockito#stubVoid}\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param methodCallToStub\n      * @return OngoingStubbing object to set stubbed value/exception\n      *   verify(mock).someMethod(\"some arg\");\n      * </pre>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param mock to be verified\n      * @return mock object itself\n      *   verify(mock, atLeastOnce()).someMethod(\"should be called at least once\");\n      * </pre>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param mock to be verified\n      * @param mode times(x) or atLeastOnce()\n      * //oups: 'doSomethingUnexpected()' is unexpected\n      * </pre>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param mocks to be verified\n      */\n      * Instead of verifyZeroInteractions() you can call verifyNoMoreInteractions() but \n      * the first one is more explicit and can read better.\n      * <p>\n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param mocks to be verified\n      */\n      *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n      * </pre>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param mock to stub\n      * @return stubbable object that allows stubbing with throwable\n      *   strictly.verify(secondMock).add(\"should be called second\");\n      * </pre>\n      *\n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param mocks to be verified in strict order\n      * \n      *   verify(mock, atLeastOnce()).someMethod(\"some arg\");\n      * </pre>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @return verification mode\n      */\n      *   verify(mock, times(2)).someMethod(\"some arg\");\n      * </pre>\n      * \n-     * See examples in javadoc for{@link Mockito#stub}\n+     * See examples in javadoc for {@link Mockito#stub}\n      * \n      * @param wantedNumberOfInvocations wanted number of invocations \n      * \n--- a/src/org/mockito/internal/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/AllInvocationsFinder.java\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.mockito.internal.invocation.GlobalInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.invocation.GlobalInvocationsFinder;\n \n public class AllInvocationsFinder implements GlobalInvocationsFinder {\n     \n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.stubbing.StubbedMethodSelector;\n import org.mockito.internal.stubbing.Stubber;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n-import org.mockito.internal.verification.StrictlyMissingInvocationVerifier;\n import org.mockito.internal.verification.MissingInvocationVerifier;\n import org.mockito.internal.verification.NoMoreInvocationsVerifier;\n import org.mockito.internal.verification.NumberOfInvocationsVerifier;\n+import org.mockito.internal.verification.StrictlyMissingInvocationVerifier;\n import org.mockito.internal.verification.StrictlyNumberOfInvocationsVerifier;\n import org.mockito.internal.verification.Verifier;\n import org.mockito.internal.verification.VerifyingRecorder;\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockNamer;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n \n /**\n  * Method call on a mock object. \n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n import java.util.List;\n \n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.progress.LastArguments;\n \n @SuppressWarnings(\"unchecked\")\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.progress;\n+\n+import org.mockito.Mockito;\n \n /**\n  * Stubs with return value or exception. E.g:\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.progress;\n+\n+import org.mockito.Mockito;\n \n /**\n  * Allows verifying that certain behavior happened at least once or exact number of times. E.g:\n--- a/src/org/mockito/internal/stubbing/StubbedMethodSelector.java\n+++ b/src/org/mockito/internal/stubbing/StubbedMethodSelector.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing;\n+\n+import org.mockito.Mockito;\n \n /**\n  * Chooses void method for stubbing with throwable. E.g:\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.stubbing;\n+\n+import org.mockito.Mockito;\n \n /**\n  * Stubs void method with exception. E.g:\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.InvocationsPrinter;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n public class NoMoreInvocationsVerifier implements Verifier {\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n public class NumberOfInvocationsVerifier implements Verifier {\n--- a/src/org/mockito/internal/verification/StrictlyMissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/StrictlyMissingInvocationVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.InvocationsPrinter;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n--- a/src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n public class StrictlyNumberOfInvocationsVerifier implements Verifier {\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.mockito.internal.invocation.GlobalInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.invocation.GlobalInvocationsFinder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n public class VerifyingRecorder {", "timestamp": 1199576762, "metainfo": ""}