{"sha": "462fdfbd58ba83c2d17dd417311c6d24b226b327", "log": "- in order to implement issue 110 -- refactored to move Serializable implementation to the base interfaces so future implementation will be Serializable and get warning for missing serial version id. -- added annotations to ignore serial version id warnings in test classes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401640", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n+\n+import java.io.Serializable;\n \n import org.mockito.stubbing.Answer;\n \n  * Firstly, to make it easy to add another mock setting when the demand comes.\n  * Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.\n  */\n-public interface MockSettings {\n+public interface MockSettings extends Serializable {\n     \n     /**\n      * Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.\n--- a/src/org/mockito/internal/IMockHandler.java\n+++ b/src/org/mockito/internal/IMockHandler.java\n package org.mockito.internal;\n+\n+import java.io.Serializable;\n \n import org.mockito.internal.invocation.Invocation;\n \n-public interface IMockHandler {\n+public interface IMockHandler extends Serializable {\n \n     Object handle(Invocation invocation) throws Throwable;\n }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n  */\n package org.mockito.internal;\n \n+import java.util.List;\n+\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.invocation.MatchersBinder;\n+import org.mockito.internal.invocation.*;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n-import org.mockito.internal.stubbing.MockitoStubber;\n-import org.mockito.internal.stubbing.OngoingStubbingImpl;\n-import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n-import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n+import org.mockito.internal.stubbing.*;\n import org.mockito.internal.util.MockName;\n-import org.mockito.internal.verification.RegisteredInvocations;\n-import org.mockito.internal.verification.VerificationDataImpl;\n-import org.mockito.internal.verification.VerificationModeFactory;\n+import org.mockito.internal.verification.*;\n import org.mockito.internal.verification.api.VerificationMode;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n-\n-import java.io.Serializable;\n-import java.util.List;\n \n /**\n  * Invocation handler set on mock objects.\n  *\n  * @param <T> type of mock object to handle\n  */\n-public class MockHandler<T> implements IMockHandler, Serializable {\n+public class MockHandler<T> implements IMockHandler {\n \n     private static final long serialVersionUID = -2917871070982574165L;\n     \n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n  */\n package org.mockito.internal.creation;\n \n-import java.io.Serializable;\n-\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.stubbing.Answer;\n \n-public class MockSettingsImpl implements MockSettings, Serializable {\n+public class MockSettingsImpl implements MockSettings {\n \n     private static final long serialVersionUID = 4475297236197939568L;\n     private Class<?>[] extraInterfaces;\n--- a/src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java\n+++ b/src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java\n  */\n package org.mockito.internal.invocation;\n \n-public interface CapturesArgumensFromInvocation {\n+import java.io.Serializable;\n+\n+public interface CapturesArgumensFromInvocation extends Serializable {\n     \n     void captureArgumentsFrom(Invocation i);\n     \n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n  */\n package org.mockito.internal.invocation;\n \n+import java.lang.reflect.Method;\n+import java.util.*;\n+\n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n-import org.mockito.internal.matchers.ArrayEquals;\n-import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.MatchersPrinter;\n+import org.mockito.internal.matchers.*;\n import org.mockito.internal.reporting.PrintSettings;\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n-import org.mockito.internal.util.MockUtil;\n-import org.mockito.internal.util.ObjectMethodsGuru;\n-import org.mockito.internal.util.Primitives;\n+import org.mockito.internal.util.*;\n import org.mockito.invocation.InvocationOnMock;\n-\n-import java.io.Serializable;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n \n /**\n  * Method call on a mock object.\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation, Serializable {\n+public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation {\n \n     private static final long serialVersionUID = 8240069639250980199L;\n     private static final int MAX_LINE_LENGTH = 45;\n--- a/src/org/mockito/internal/invocation/realmethod/CGLIBProxyRealMethod.java\n+++ b/src/org/mockito/internal/invocation/realmethod/CGLIBProxyRealMethod.java\n  */\n package org.mockito.internal.invocation.realmethod;\n \n-import java.io.Serializable;\n-\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.internal.creation.MockitoMethodProxy;\n \n \n-public class CGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy, Serializable {\n+public class CGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy {\n \n     private static final long serialVersionUID = -4596470901191501582L;\n     private final MockitoMethodProxy methodProxy;\n--- a/src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java\n+++ b/src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java\n  */\n package org.mockito.internal.invocation.realmethod;\n \n-import java.io.Serializable;\n-\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.internal.creation.MockitoMethodProxy;\n import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;\n \n-public class FilteredCGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy, Serializable {\n+public class FilteredCGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy {\n \n     private static final long serialVersionUID = 3596550785818938496L;\n     private final RealMethod realMethod;\n--- a/src/org/mockito/internal/invocation/realmethod/HasCGLIBMethodProxy.java\n+++ b/src/org/mockito/internal/invocation/realmethod/HasCGLIBMethodProxy.java\n  */\n package org.mockito.internal.invocation.realmethod;\n \n+import java.io.Serializable;\n+\n import org.mockito.cglib.proxy.MethodProxy;\n \n-public interface HasCGLIBMethodProxy {\n+public interface HasCGLIBMethodProxy extends Serializable {\n \n     MethodProxy getMethodProxy();\n }\n--- a/src/org/mockito/internal/invocation/realmethod/RealMethod.java\n+++ b/src/org/mockito/internal/invocation/realmethod/RealMethod.java\n  */\n package org.mockito.internal.invocation.realmethod;\n \n-public interface RealMethod {\n+import java.io.Serializable;\n+\n+public interface RealMethod extends Serializable {\n \n     Object invoke(Object target, Object[] arguments) throws Throwable;\n \n--- a/src/org/mockito/internal/matchers/CapturesArguments.java\n+++ b/src/org/mockito/internal/matchers/CapturesArguments.java\n  */\n package org.mockito.internal.matchers;\n \n-public interface CapturesArguments {\n+import java.io.Serializable;\n+\n+public interface CapturesArguments extends Serializable {\n \n     void captureFrom(Object argument);\n \n--- a/src/org/mockito/internal/matchers/ContainsExtraTypeInformation.java\n+++ b/src/org/mockito/internal/matchers/ContainsExtraTypeInformation.java\n  */\n package org.mockito.internal.matchers;\n \n+import java.io.Serializable;\n+\n import org.hamcrest.SelfDescribing;\n \n-public interface ContainsExtraTypeInformation {\n+public interface ContainsExtraTypeInformation extends Serializable {\n     SelfDescribing withExtraTypeInfo();\n \n     boolean typeMatches(Object object);\n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n  */\n package org.mockito.internal.matchers;\n \n-import java.io.Serializable;\n-\n import org.hamcrest.Description;\n import org.hamcrest.SelfDescribing;\n import org.mockito.ArgumentMatcher;\n \n-public class Equals extends ArgumentMatcher<Object> implements ContainsExtraTypeInformation, Serializable {\n+public class Equals extends ArgumentMatcher<Object> implements ContainsExtraTypeInformation {\n \n     private static final long serialVersionUID = -3395637450058086891L;\n     private final Object wanted;\n--- a/src/org/mockito/internal/matchers/LocalizedMatcher.java\n+++ b/src/org/mockito/internal/matchers/LocalizedMatcher.java\n  */\n package org.mockito.internal.matchers;\n \n-import java.io.Serializable;\n-\n-import org.hamcrest.Description;\n-import org.hamcrest.Matcher;\n-import org.hamcrest.SelfDescribing;\n+import org.hamcrest.*;\n import org.mockito.internal.debugging.Location;\n \n @SuppressWarnings(\"unchecked\")\n-public class LocalizedMatcher implements Matcher, ContainsExtraTypeInformation, CapturesArguments, MatcherDecorator, Serializable {\n+public class LocalizedMatcher implements Matcher, ContainsExtraTypeInformation, CapturesArguments, MatcherDecorator {\n \n     private static final long serialVersionUID = 6748641229659825725L;\n     private final Matcher actualMatcher;\n--- a/src/org/mockito/internal/matchers/MatcherDecorator.java\n+++ b/src/org/mockito/internal/matchers/MatcherDecorator.java\n package org.mockito.internal.matchers;\n+\n+import java.io.Serializable;\n \n import org.hamcrest.Matcher;\n \n-public interface MatcherDecorator {\n+public interface MatcherDecorator extends Serializable {\n     Matcher getActualMatcher();\n }\n--- a/src/org/mockito/internal/matchers/VarargMatcher.java\n+++ b/src/org/mockito/internal/matchers/VarargMatcher.java\n package org.mockito.internal.matchers;\n \n-public interface VarargMatcher {\n+import java.io.Serializable;\n+\n+public interface VarargMatcher extends Serializable {\n }\n--- a/src/org/mockito/invocation/InvocationOnMock.java\n+++ b/src/org/mockito/invocation/InvocationOnMock.java\n  */\n package org.mockito.invocation;\n \n+import java.io.Serializable;\n import java.lang.reflect.Method;\n \n /**\n  * <p>\n  * A placeholder for mock, the method that was called and the arguments that were passed.\n  */\n-public interface InvocationOnMock {\n+public interface InvocationOnMock extends Serializable {\n \n     /**\n      * returns the mock object \n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n @SuppressWarnings(\"unchecked\")\n public class MockHandlerTest extends TestBase {\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n         //given\n--- a/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n+++ b/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n \n public class ReadingConfigurationFromClasspathTest extends TestBase {\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldReadConfigurationClassFromClassPath() {\n         ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n--- a/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n+++ b/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n \n public class MethodProxyBuilder {\n \n+    @SuppressWarnings(\"serial\")\n     public MethodProxy build() {\n         IMethods mock = mock(IMethods.class);\n         when(mock.objectReturningMethodNoArgs()).thenAnswer(new Answer<Object>() {\n--- a/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n         assertTrue(i.isVerified());\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldCaptureArguments() {\n         //given\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldBeAbleToCallRealMethod() throws Throwable {\n         //when\n--- a/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n+++ b/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n         assertEquals(new Integer(1), suspicious[0]);\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {\n         //given\n--- a/test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java\n package org.mockito.internal.verification.checkers;\n \n+import static java.util.Arrays.asList;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.mockito.internal.invocation.*;\n-import org.mockito.Mockito;\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Matchers.any;\n import org.mockitoutil.TestBase;\n-\n-import java.util.List;\n-import java.util.LinkedList;\n-import static java.util.Arrays.asList;\n \n public class AtLeastXNumberOfInvocationsCheckerTest extends TestBase {\n \n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n  */\n package org.mockitousage.basicapi;\n \n-import static org.junit.Assert.*;\n+import static org.mockito.Matchers.anyObject;\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.*;\n \n--- a/test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java\n+++ b/test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java\n  */\n package org.mockitousage.bugs;\n \n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.*;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.Mock;\n import org.mockitoutil.TestBase;\n \n //see bug 116\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n         } catch(RuntimeException e) {}\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldStubWithAnswer() throws Exception {\n         given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {\n         assertEquals(\"foo\", mock.simpleMethod(\"bar\"));\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldStubUsingDoAnswerStyle() throws Exception {\n         willAnswer(new Answer<String>() {\n--- a/test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java\n+++ b/test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {\n         //given\n--- a/test/org/mockitousage/matchers/AssertingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/AssertingMatchersTest.java\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldUseCustomCharMatcher1() {\n         mock.simpleMethod(new Article(12, \"Fabulous article\"));\n--- a/test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java\n+++ b/test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java\n         } catch (ArgumentsAreDifferent e) {}\n     }\n \n+    @SuppressWarnings(\"serial\")\n     private ArgumentMatcher<String> isStringWithTextFoo() {\n         return new ArgumentMatcher<String>() {\n             @Override\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n \n public class CustomMatchersTest extends TestBase {\n     \n+    @SuppressWarnings(\"serial\")\n     private final class ContainsFoo extends ArgumentMatcher<String> {\n         public boolean matches(Object arg) {\n             return ((String) arg).contains(\"foo\");\n         }\n     }\n \n+    @SuppressWarnings(\"serial\")\n     private final class IsAnyBoolean extends ArgumentMatcher<Boolean> {\n         public boolean matches(Object arg) {\n             return true;\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     private final class IsSorZ extends ArgumentMatcher<Character> {\n         public boolean matches(Object arg) {\n             Character character = (Character) arg;\n         }\n     }\n \n+    @SuppressWarnings(\"serial\")\n     private final class IsZeroOrOne<T extends Number> extends ArgumentMatcher<T> {\n         public boolean matches(Object arg) {\n             Number number = (Number) arg;\n         return argThat(new StringThatContainsXxx());\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     private final class StringThatContainsXxx extends ArgumentMatcher<String> {\n         public boolean matches(Object argument) {\n             String arg = (String) argument;\n         }\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldAnonymousCustomMatcherPrintDefaultDescription() {\n         mock.simpleMethod(\"foo\");\n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n     @Mock\n     private IMethods mock;\n \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldAnswer() throws Exception {\n         when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {\n         assertEquals(\"simpleMethod-test\", mock.simpleMethod(\"test\"));\n     }\n \n+    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldAnswerConsecutively() throws Exception {\n         when(mock.simpleMethod())\n \n     }\n \n+    @SuppressWarnings(\"serial\")\n     private static class RecordCall implements Answer {\n         private boolean called = false;\n ", "timestamp": 1256897972, "metainfo": ""}