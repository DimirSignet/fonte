{"sha": "ad34d6ecd5419a58c9348e58dbf237a940e02943", "log": "Fixed issue 172 Stub() has been undeprecated  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401869", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     }\n \n     /**\n+     * Stubs a method call with return value or an exception. E.g:\n+     *\n+     * <pre>\n+     * stub(mock.someMethod()).toReturn(10);\n+     *\n+     * //you can use flexible argument matchers, e.g:\n+     * stub(mock.someMethod(<b>anyString()</b>)).toReturn(10);\n+     *\n+     * //setting exception to be thrown:\n+     * stub(mock.someMethod(\"some arg\")).toThrow(new RuntimeException());\n+     *\n+     * //you can stub with different behavior for consecutive method calls.\n+     * //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.\n+     * stub(mock.someMethod(\"some arg\"))\n+     *  .toThrow(new RuntimeException())\n+     *  .toReturn(\"foo\");\n+     * </pre>\n+     * <p>\n+     * Some users find stub() confusing therefore {@link Mockito#when(Object)} is recommended over stub()\n      * <pre>\n      *   //Instead of:\n      *   stub(mock.count()).toReturn(10);\n      * \n-     *   //Please do:\n+     *   //You can do:\n      *   when(mock.count()).thenReturn(10);\n      * </pre> \n-     * \n-     * Many users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} \n-     * <p>\n-     * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:\n-     * <pre>\n-     *   Mockito.stub;  <i>replace with:</i>  Mockito.when;\n-     *   stub(          <i>replace with:</i>  when(\n-     *   .toReturn(     <i>replace with:</i>  .thenReturn(\n-     *   .toThrow(      <i>replace with:</i>  .thenThrow(\n-     *   .toAnswer(     <i>replace with:</i>  .thenAnswer(\n-     * </pre>\n-     * If you're an existing user then sorry for making your code littered with deprecation warnings. \n-     * This change was required to make Mockito better.\n+     * For stubbing void methods with throwables see: {@link Mockito#doThrow(Throwable)}\n+     * <p>\n+     * Stubbing can be overridden: for example common stubbing can go to fixture\n+     * setup but the test methods can override it.\n+     * Please note that overridding stubbing is a potential code smell that points out too much stubbing.\n+     * <p>\n+     * Once stubbed, the method will always return stubbed value regardless\n+     * of how many times it is called.\n+     * <p>\n+     * Last stubbing is more important - when you stubbed the same method with\n+     * the same arguments many times.\n+     * <p>\n+     * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.\n+     * Let's say you've stubbed foo.bar(). \n+     * If your code cares what foo.bar() returns then something else breaks(often before even verify() gets executed).\n+     * If your code doesn't care what get(0) returns then it should not be stubbed. \n+     * Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>. \n      * \n      * @param methodCall\n      *            method call\n      * @return DeprecatedOngoingStubbing object to set stubbed value/exception\n      */\n-    @Deprecated\n     public static <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {\n         return MOCKITO_CORE.stub(methodCall);\n     }\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n         return stubbing;\n     }\n \n-    @Deprecated\n     public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {\n         mockingProgress.stubbingStarted();\n         return (DeprecatedOngoingStubbing) stub();", "timestamp": 1267054397, "metainfo": ""}