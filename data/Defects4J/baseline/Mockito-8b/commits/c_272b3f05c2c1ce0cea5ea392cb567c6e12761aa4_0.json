{"sha": "272b3f05c2c1ce0cea5ea392cb567c6e12761aa4", "log": "documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40218", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n \n /**\n  * Very rarely used matchers are kept here\n+ * <p>\n+ * Read more about matchers: http://code.google.com/p/mockito/matchers\n  */\n public class AdditionalMatchers {\n \n     }\n \n     /**\n-     * string that contains a substring that matches the given regular\n+     * String argument that contains a substring that matches the given regular\n      * expression.\n      * \n      * @param regex\n     }\n \n     /**\n-     * Object array that is equal to the given array, i.e. it has to have the\n-     * same type, length, and each element has to be equal.\n+     * Object array argument that is equal to the given array, i.e. it has to\n+     * have the same type, length, and each element has to be equal.\n      * \n      * @param <T>\n      *            the type of the array, it is passed through to prevent casts.\n     }\n \n     /**\n-     * short array that is equal to the given array, i.e. it has to have the\n-     * same length, and each element has to be equal.\n+     * short array argument that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * long array that is equal to the given array, i.e. it has to have the same\n-     * length, and each element has to be equal.\n+     * long array argument that is equal to the given array, i.e. it has to have\n+     * the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * int array that is equal to the given array, i.e. it has to have the same\n-     * length, and each element has to be equal.\n+     * int array argument that is equal to the given array, i.e. it has to have\n+     * the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * float array that is equal to the given array, i.e. it has to have the\n-     * same length, and each element has to be equal.\n+     * float array argument that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * double array that is equal to the given array, i.e. it has to have the\n-     * same length, and each element has to be equal.\n+     * double array argument that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * char array that is equal to the given array, i.e. it has to have the same\n-     * length, and each element has to be equal.\n+     * char array argument that is equal to the given array, i.e. it has to have\n+     * the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * byte array that is equal to the given array, i.e. it has to have the same\n-     * length, and each element has to be equal.\n+     * byte array argument that is equal to the given array, i.e. it has to have\n+     * the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * boolean array that is equal to the given array, i.e. it has to have the\n-     * same length, and each element has to be equal.\n+     * boolean array argument that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n      * \n      * @param value\n      *            the given array.\n     }\n \n     /**\n-     * boolean that matches both given matchers.\n+     * boolean argument that matches both given matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * byte that matches both given argument matchers.\n+     * byte argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * char that matches both given argument matchers.\n+     * char argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * double that matches both given argument matchers.\n+     * double argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * float that matches both given argument matchers.\n+     * float argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * int that matches both given argument matchers.\n+     * int argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * long that matches both given argument matchers.\n+     * long argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * short that matches both given argument matchers.\n+     * short argument that matches both given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * Object that matches both given argument matchers.\n+     * Object argument that matches both given argument matchers.\n      * \n      * @param <T>\n      *            the type of the object, it is passed through to prevent casts.\n     }\n \n     /**\n-     * boolean that matches any of the given argument matchers.\n+     * boolean argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * Object that matches any of the given argument matchers.\n+     * Object argument that matches any of the given argument matchers.\n      * \n      * @param <T>\n      *            the type of the object, it is passed through to prevent casts.\n     }\n \n     /**\n-     * short that matches any of the given argument matchers.\n+     * short argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * long that matches any of the given argument matchers.\n+     * long argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * int that matches any of the given argument matchers.\n+     * int argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * float that matches any of the given argument matchers.\n+     * float argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * double that matches any of the given argument matchers.\n+     * double argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * char that matches any of the given argument matchers.\n+     * char argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * byte that matches any of the given argument matchers.\n+     * byte argument that matches any of the given argument matchers.\n      * \n      * @param first\n      *            placeholder for the first argument matcher.\n     }\n \n     /**\n-     * Object that does not match the given argument matcher.\n+     * Object argument that does not match the given argument matcher.\n      * \n      * @param <T>\n      *            the type of the object, it is passed through to prevent casts.\n     }\n \n     /**\n-     * short that does not match the given argument matcher.\n+     * short argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * int that does not match the given argument matcher.\n+     * int argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * long that does not match the given argument matcher.\n+     * long argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * float that does not match the given argument matcher.\n+     * float argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * double that does not match the given argument matcher.\n+     * double argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * char that does not match the given argument matcher.\n+     * char argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * boolean that does not match the given argument matcher.\n+     * boolean argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * byte that does not match the given argument matcher.\n+     * byte argument that does not match the given argument matcher.\n      * \n      * @param first\n      *            placeholder for the argument matcher.\n     }\n \n     /**\n-     * double that has an absolute difference to the given value that is less\n-     * than the given delta details.\n+     * double argument that has an absolute difference to the given value that\n+     * is less than the given delta details.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * float that has an absolute difference to the given value that is less\n-     * than the given delta details.\n+     * float argument that has an absolute difference to the given value that is\n+     * less than the given delta details.\n      * \n      * @param value\n      *            the given value.\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n import org.mockito.internal.matchers.StartsWith;\n import org.mockito.internal.progress.LastArguments;\n \n+/**\n+ * Argument matchers\n+ * <p>\n+ * TODO where is that documentation?\n+ * Read more about matchers: http://code.google.com/p/mockito/matchers\n+ */\n public class Matchers {\n-    /**\n-     * Expects any boolean argument. For details, see the EasyMock\n-     * documentation.\n+\n+    /**\n+     * any boolean argument.\n      * \n      * @return <code>false</code>.\n      */\n     }\n \n     /**\n-     * Expects any byte argument. For details, see the EasyMock documentation.\n+     * any byte argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any char argument. For details, see the EasyMock documentation.\n+     * any char argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any int argument. For details, see the EasyMock documentation.\n+     * any int argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any long argument. For details, see the EasyMock documentation.\n+     * any long argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any float argument. For details, see the EasyMock documentation.\n+     * any float argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any double argument. For details, see the EasyMock documentation.\n+     * any double argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any short argument. For details, see the EasyMock documentation.\n+     * any short argument.\n      * \n      * @return <code>0</code>.\n      */\n     }\n \n     /**\n-     * Expects any Object argument. For details, see the EasyMock documentation.\n+     * any Object argument.\n      * \n      * @return <code>null</code>.\n      */\n         LastArguments.instance().reportMatcher(Any.ANY);\n         return null;\n     }\n-    \n-    /**\n-     * Any String argument.\n+\n+    /**\n+     * any String argument.\n      * \n      * @return <code>null</code>.\n      */\n     }\n \n     /**\n-     * Expects an object implementing the given class. For details, see the\n-     * EasyMock documentation.\n+     * Object argument that implements the given class. \n      * \n      * @param <T>\n      *            the accepted type.\n     }\n \n     /**\n-     * Expects a boolean that is equal to the given value.\n+     * boolean argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects a byte that is equal to the given value.\n+     * byte argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects a char that is equal to the given value.\n+     * char argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects a double that is equal to the given value.\n+     * double argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects a float that is equal to the given value.\n+     * float argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects an int that is equal to the given value.\n+     * int argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects a long that is equal to the given value.\n+     * long argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects a short that is equal to the given value.\n+     * short argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n     }\n \n     /**\n-     * Expects an Object that is equal to the given value.\n+     * Object argument that is equal to the given value.\n      * \n      * @param value\n      *            the given value.\n         LastArguments.instance().reportMatcher(new Equals(value));\n         return null;\n     }\n-    \n-    /**\n-     * Expects an Object that is the same as the given value. For details, see\n-     * the documentation.\n+\n+    /**\n+     * Object argument that is the same as the given value.\n      * \n      * @param <T>\n      *            the type of the object, it is passed through to prevent casts.\n     }\n \n     /**\n-     * Expects null.\n+     * null argument.\n      * \n      * @return <code>null</code>.\n      */\n     }\n \n     /**\n-     * Expects not null.\n+     * not null argument.\n      * \n      * @return <code>null</code>.\n      */\n         LastArguments.instance().reportMatcher(NotNull.NOT_NULL);\n         return null;\n     }\n-    \n-    /**\n-     * string that contains the given substring.\n+\n+    /**\n+     * String argument that contains the given substring.\n      * \n      * @param substring\n      *            the substring.\n     }\n \n     /**\n-     * Expects a string that matches the given regular expression. For details,\n-     * see the EasyMock documentation.\n+     * String argument that matches the given regular expression.\n      * \n      * @param regex\n      *            the regular expression.\n         LastArguments.instance().reportMatcher(new Matches(regex));\n         return null;\n     }\n-    \n-    /**\n-     * Expects a string that ends with the given suffix. For details, see the\n-     * documentation.\n+\n+    /**\n+     * String argument that ends with the given suffix.\n      * \n      * @param suffix\n      *            the suffix.\n     }\n \n     /**\n-     * Expects a string that starts with the given prefix. For details, see the\n-     * documentation.\n+     * String argument that starts with the given prefix.\n      * \n      * @param prefix\n      *            the prefix.", "timestamp": 1197753352, "metainfo": ""}