{"sha": "d5bb08f1fa6831b27b3b283fefd88e18182a11ea", "log": "added cause to no-more-invocations VerificationError. cause contains stack trace to actual/undesired invocation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40142", "commit": "\n--- a/src/org/mockito/exceptions/Exceptions.java\n+++ b/src/org/mockito/exceptions/Exceptions.java\n                 \"Unexpected: \" + unexpected\n         ));\n     }\n+    \n+\n+    public static void noMoreInteractionsWanted(String message, String undesired, String actual, HasStackTrace actualInvocationStackTrace) {\n+        UndesiredInvocation cause = new UndesiredInvocation(join(\n+                \"Undesired invocation:\",\n+                actual\n+            ));\n+            \n+        cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n+            \n+        throw new VerificationError(join(\n+                undesired\n+        ), cause);\n+    }\n \n     public static void unfinishedStubbing() {\n         throw new UnfinishedStubbingException(join(\n                 \"Should be something like that: verify(mock).doSomething()\"\n         ));\n     }\n+\n }\n--- /dev/null\n+++ b/src/org/mockito/exceptions/UndesiredInvocation.java\n+package org.mockito.exceptions;\n+\n+public class UndesiredInvocation extends MockitoException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public UndesiredInvocation(String message) {\n+        super(message);\n+    }\n+}\n--- a/src/org/mockito/internal/MockitoBehavior.java\n+++ b/src/org/mockito/internal/MockitoBehavior.java\n     }\n     \n     public void verifyZeroInteractions() {\n+        //TODO move message to exceptions\n         verifyNoMoreInteractions(\"Zero interactions wanted\");\n     }\n     \n     private void verifyNoMoreInteractions(String message) {\n         Invocation unverified = registeredInvocations.getFirstUnverified();\n         if (unverified != null) {\n-            Exceptions.noMoreInteractionsWanted(unverified.toString(), message);\n+            Exceptions.noMoreInteractionsWanted(unverified.toString(), message, unverified.toString(), unverified.getStackTrace());\n         }\n     }\n \n--- a/test/org/mockito/util/ExtraMatchers.java\n+++ b/test/org/mockito/util/ExtraMatchers.java\n                 return cause == null? false : cause.getMessage().contains(text); \n             }\n             public void describeTo(Description desc) {\n+                desc.appendText(\"exception cause's message is not \" + text);\n+            }\n+        };\n+    }\n+    \n+    public static <T> Matcher<Throwable> messageEquals(final String text) {\n+        return new BaseMatcher<Throwable>() {\n+            public boolean matches(Object throwable) {\n+                return ((Throwable)throwable).getMessage().equals(text); \n+            }\n+            public void describeTo(Description desc) {\n+                desc.appendText(\"exception's message is not \" + text);\n+            }\n+        };\n+    }\n+    \n+    public static <T> Matcher<Throwable> causeMessageEquals(final String text) {\n+        return new BaseMatcher<Throwable>() {\n+            public boolean matches(Object throwable) {\n+                Throwable cause = ((Throwable)throwable).getCause();\n+                return cause == null? false : cause.getMessage().equals(text); \n+            }\n+            public void describeTo(Description desc) {\n                 desc.appendText(\"exception cause's message doesn't contain \" + text);\n             }\n         };\n--- a/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java\n \n import org.junit.*;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.VerificationError;\n+import org.mockito.exceptions.*;\n import org.mockito.util.RequiresValidState;\n import org.mockitousage.IMethods;\n \n                     \"IMethods.twoArgumentMethod(1, 1000)\";\n             \n             assertEquals(expected, e.getMessage());\n+            \n+            assertEquals(e.getCause().getClass(), WantedDiffersFromActual.class);\n             \n             String expectedCause =\n                     \"\\n\" +\n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError expected) {\n-            String actualMessage = expected.getMessage();\n-            String expectedMessage = \n-                    \"\\n\" +\n-            \t\t\"No more interactions wanted\" +\n+        } catch (VerificationError e) {\n+            String expectedMessage = \n+                    \"\\n\" +\n+            \t\t\"No more interactions wanted\";\n+            assertEquals(expectedMessage, e.getMessage());         \n+\n+            assertEquals(e.getCause().getClass(), UndesiredInvocation.class);\n+            \n+            String expectedCause =\n             \t\t\"\\n\" +\n-            \t\t\"Unexpected: IMethods.oneArg(false)\";\n-            assertEquals(expectedMessage, actualMessage);         \n+            \t\t\"Undesired invocation:\" +\n+            \t\t\"\\n\" +\n+            \t\t\"IMethods.oneArg(false)\";\n+            assertEquals(expectedCause, e.getCause().getMessage());\n         }\n     }\n     \n         try {\n             verifyZeroInteractions(mock);\n             fail();\n-        } catch (VerificationError expected) {\n-            String actualMessage = expected.getMessage();\n-            String expectedMessage = \n-                    \"\\n\" +\n-                    \"Zero interactions wanted\" +\n-                    \"\\n\" +\n-                    \"Unexpected: IMethods.twoArgumentMethod(1, 2)\";\n-            assertEquals(expectedMessage, actualMessage);         \n+        } catch (VerificationError e) {\n+            String expected = \n+                    \"\\n\" +\n+                    \"Zero interactions wanted\";\n+\n+            assertEquals(e.getMessage(), expected);\n+            \n+            String expectedCause = \n+                \"\\n\" +\n+                \"Undesired invocation:\" +\n+                \"\\n\" +\n+                \"IMethods.twoArgumentMethod(1, 2)\";\n+            \n+            assertEquals(e.getCause().getMessage(), expectedCause);         \n         }\n     }\n     ", "timestamp": 1197158748, "metainfo": ""}