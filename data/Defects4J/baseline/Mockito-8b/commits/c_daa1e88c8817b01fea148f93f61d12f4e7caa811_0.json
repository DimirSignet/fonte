{"sha": "daa1e88c8817b01fea148f93f61d12f4e7caa811", "log": "Added some missing test added package html to satisfy checkstyle.xml  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401409", "commit": "\n--- a/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n-import org.mockito.internal.stubbing.answers.AnswersValidator;\n-import org.mockito.internal.stubbing.answers.DoesNothing;\n-import org.mockito.internal.stubbing.answers.Returns;\n-import org.mockito.internal.stubbing.answers.ThrowsException;\n import org.mockitoutil.TestBase;\n \n public class AnswersValidatorTest extends TestBase {\n--- a/test/org/mockito/internal/util/ShallowCopyToolTest.java\n+++ b/test/org/mockito/internal/util/ShallowCopyToolTest.java\n public class ShallowCopyToolTest extends TestBase {\n \n     private ShallowCopyTool tool = new ShallowCopyTool();\n-    \n-    //TODO: inherited fields\n-    //TODO: if one field fails - should carry on\n+\n+    // TODO: inherited fields\n+    // TODO: if one field fails - should carry on\n     static class SomeObject {\n-        private static int staticField = 900; \n-        private int privateField = 1;\n-        private transient int privateTransientField = 100;\n-        String defaultField = \"2\";\n+        @SuppressWarnings(\"unused\") \n+        // required because static fields needs to be excluded from copying \n+        private static int staticField = -100;\n+        private int privateField = -100;\n+        private transient int privateTransientField = -100;\n+        String defaultField = \"-100\";\n         protected Object protectedField = new Object();\n         public SomeOtherObject instancePublicField = new SomeOtherObject();\n         final int finalField;\n+\n         public SomeObject(int finalField) {\n             this.finalField = finalField;\n         }\n+        \n+        public int hashCode() {\n+            return 0;\n+        }\n+\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            final SomeObject other = (SomeObject) obj;\n+            if (defaultField == null) {\n+                if (other.defaultField != null) {\n+                    return false;\n+                }\n+            } else if (!defaultField.equals(other.defaultField)) {\n+                return false;\n+            }\n+            if (finalField != other.finalField) {\n+                return false;\n+            }\n+            if (instancePublicField == null) {\n+                if (other.instancePublicField != null) {\n+                    return false;\n+                }\n+            } else if (!instancePublicField.equals(other.instancePublicField)) {\n+                return false;\n+            }\n+            if (privateField != other.privateField) {\n+                return false;\n+            }\n+            if (privateTransientField != other.privateTransientField) {\n+                return false;\n+            }\n+            if (protectedField == null) {\n+                if (other.protectedField != null) {\n+                    return false;\n+                }\n+            } else if (!protectedField.equals(other.protectedField)) {\n+                return false;\n+            }\n+            return true;\n+        }\n     }\n-    \n-    static class SomeOtherObject {}\n \n-    private SomeObject first = new SomeObject(100);\n-    private SomeObject second = mock(SomeObject.class);\n-    \n+    static class SomeOtherObject {\n+    }\n+\n+    private SomeObject from = new SomeObject(100);\n+    private SomeObject to = mock(SomeObject.class);\n+\n     @Test\n-    public void shouldShallowCopyBasicFields() throws Exception {\n-        //given\n-        assertEquals(100, first.finalField);\n-        assertNotEquals(100, second.finalField);\n-        \n-        //when\n-        tool.copyToMock(first, second);\n-        \n-        //then\n-        assertEquals(100, second.finalField);\n+    public void shouldShallowCopyBasicFinalField() throws Exception {\n+        // given\n+        assertEquals(100, from.finalField);\n+        assertNotEquals(100, to.finalField);\n+\n+        // when\n+        tool.copyToMock(from, to);\n+\n+        // then\n+        assertEquals(100, to.finalField);\n     }\n \n     @Test\n     public void shouldShallowCopyTransientPrivateFields() throws Exception {\n-        //given\n-        first.privateTransientField = 1000;\n-        assertNotEquals(1000, second.privateTransientField);\n-        \n-        //when\n-        tool.copyToMock(first, second);\n-        \n-        //then\n-        assertEquals(1000, second.privateTransientField);\n+        // given\n+        from.privateTransientField = 1000;\n+        assertNotEquals(1000, to.privateTransientField);\n+\n+        // when\n+        tool.copyToMock(from, to);\n+\n+        // then\n+        assertEquals(1000, to.privateTransientField);\n     }\n-    \n+\n     @Test\n     public void shouldShallowCopyLinkedListIntoMock() throws Exception {\n-        //given\n-        LinkedList from = new LinkedList();\n-        LinkedList to = mock(LinkedList.class);\n+        // given\n+        LinkedList fromList = new LinkedList();\n+        LinkedList toList = mock(LinkedList.class);\n+\n+        // when\n+        tool.copyToMock(fromList, toList);\n+\n+        // then no exception is thrown\n+    }\n+\n+    @Test\n+    public void shouldShallowCopyFieldValuesIntoMock() throws Exception {\n+        // given\n+        from.defaultField = \"foo\";\n+        from.instancePublicField = new SomeOtherObject();\n+        from.privateField = 1;\n+        from.privateTransientField = 2;\n+        from.protectedField = 3;\n         \n-        //when\n+        assertNotEquals(from.defaultField, to.defaultField);\n+        assertNotEquals(from.instancePublicField, to.instancePublicField);\n+        assertNotEquals(from.privateField, to.privateField);\n+        assertNotEquals(from.privateTransientField, to.privateTransientField);\n+        assertNotEquals(from.protectedField, to.protectedField);\n+\n+        // when\n         tool.copyToMock(from, to);\n-        \n-        //then no exception is thrown\n+\n+        // then\n+        assertEquals(from.defaultField, to.defaultField);\n+        assertEquals(from.instancePublicField, to.instancePublicField);\n+        assertEquals(from.privateField, to.privateField);\n+        assertEquals(from.privateTransientField, to.privateTransientField);\n+        assertEquals(from.protectedField, to.protectedField);\n     }\n }", "timestamp": 1241464073, "metainfo": ""}