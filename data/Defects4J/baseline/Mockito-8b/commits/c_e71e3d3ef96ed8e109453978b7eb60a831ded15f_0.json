{"sha": "e71e3d3ef96ed8e109453978b7eb60a831ded15f", "log": "added handy matcher  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40661", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n import org.mockito.internal.matchers.apachecommons.ReflectionEquals;\n import org.mockito.internal.progress.EmptyReturnValues;\n import org.mockito.internal.progress.LastArguments;\n-\n-//TODO add isNotNull() matcher\n \n /**\n  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n     /**\n      * not null argument.\n      * <p>\n+     * alias to {@link Matchers#isNotNull()}\n+     * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n      * @return <code>null</code>.\n     public static Object notNull() {\n         return reportMatcher(NotNull.NOT_NULL).returnNull();\n     }\n+    \n+    /**\n+     * not null argument.\n+     * <p>\n+     * alias to {@link Matchers#notNull()}\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object isNotNull() {\n+        return notNull();\n+    }\n \n     /**\n      * String argument that contains the given substring.\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n     @Test\n     public void notNullMatcher() {\n         stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).toReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), not(notNull()), eq(\"\"))).toReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), not(isNotNull()), eq(\"\"))).toReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));", "timestamp": 1214780606, "metainfo": ""}