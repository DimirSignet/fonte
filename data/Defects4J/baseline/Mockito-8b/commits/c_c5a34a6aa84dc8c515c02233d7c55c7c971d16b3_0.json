{"sha": "c5a34a6aa84dc8c515c02233d7c55c7c971d16b3", "log": "In order to prepare Mockito for new feature: printing invocations for debugging In the middle of refactoring  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401720", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n         }\n         \n         mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\n-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber, mockitoStubber.getRegisteredInvocations());\n+        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber);\n         mockingProgress.reportOngoingStubbing(ongoingStubbing);\n \n         StubbedInvocationMatcher stubbedInvocation = mockitoStubber.findAnswerFor(invocation);\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n      */\n     public Invocation getLastInvocation() {\n         OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing());\n-        List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations().getAll();\n+        List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations();\n         return allInvocations.get(allInvocations.size()-1);\n     }\n }\n--- a/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n+++ b/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n  */\n package org.mockito.internal.stubbing;\n \n+import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n import org.mockito.stubbing.OngoingStubbing;\n \n+import java.util.List;\n+\n public class OngoingStubbingImpl<T> extends BaseStubbing<T> {\n     \n     private final MockitoStubber mockitoStubber;\n-    private final RegisteredInvocations registeredInvocations;\n \n-    public OngoingStubbingImpl(MockitoStubber mockitoStubber,\n-            RegisteredInvocations registeredInvocations) {\n+    public OngoingStubbingImpl(MockitoStubber mockitoStubber) {\n         this.mockitoStubber = mockitoStubber;\n-        this.registeredInvocations = registeredInvocations;\n     }\n \n     public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n-        registeredInvocations.removeLast();\n+        mockitoStubber.getRegisteredInvocations().removeLast();\n         mockitoStubber.addAnswer(answer);\n         return new ConsecutiveStubbing<T>(mockitoStubber);\n     }\n \n     public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n-        registeredInvocations.removeLast();\n+        mockitoStubber.getRegisteredInvocations().removeLast();\n         mockitoStubber.addAnswer(answer);\n         return new ConsecutiveStubbing<T>(mockitoStubber);\n     }\n \n-    public RegisteredInvocations getRegisteredInvocations() {\n-        return registeredInvocations;\n+    public List<Invocation> getRegisteredInvocations() {\n+        //TODO interface for tests\n+        return mockitoStubber.getInvocations();\n     }\n }", "timestamp": 1258316243, "metainfo": ""}