{"sha": "41b67b3a3d3b693fe20475ffe1ffe15843b4a304", "log": "First hacky and version to retrieve generic types. Will be used for Generic support for deep stubs answer. Much left work to do !  --HG-- branch : issue230", "commit": "\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n+import java.lang.reflect.*;\n \n @SuppressWarnings(\"unchecked\")\n public class GenericMaster {\n         \n         return Object.class;\n     }\n+\n+    public Class<?> identifyGenericReturnType(Method method, Class<?> onClass) {\n+        Type genericReturnType = method.getGenericReturnType();\n+\n+        if (genericReturnType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) genericReturnType;\n+\n+            if (parameterizedType.getActualTypeArguments().length > 0) {\n+                Type type = parameterizedType.getActualTypeArguments()[0];\n+\n+                if (type instanceof Class) {\n+                    return (Class) type;\n+                }\n+                if (type instanceof TypeVariable) {\n+                    return identifyReturnTypeFromClass((TypeVariable) type, onClass);\n+                }\n+            }\n+\n+        }\n+\n+        return null;\n+    }\n+\n+    private Class<?> identifyReturnTypeFromClass(TypeVariable typeVariable, Class<?> onClass) {\n+        Type[] genericInterfaces = onClass.getGenericInterfaces();\n+\n+        for (Type genericInterface : genericInterfaces) {\n+\n+            if (genericInterface instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) genericInterface;\n+                parameterizedType.getActualTypeArguments();\n+\n+                if (parameterizedType.getRawType() instanceof Class) {\n+                    Class rawType = (Class) parameterizedType.getRawType();\n+\n+                    TypeVariable[] typeParameters = rawType.getTypeParameters();\n+\n+                    for (int typeVarPosition = 0; typeVarPosition < typeParameters.length; typeVarPosition++) {\n+                        TypeVariable typeParameter = typeParameters[typeVarPosition];\n+                        if (typeVariable.equals(typeParameter)) {\n+                            Type typeVariableValue = parameterizedType.getActualTypeArguments()[typeVarPosition];\n+                            if (typeVariableValue instanceof Class) {\n+                                return (Class) typeVariableValue;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+            }\n+        }\n+\n+        return null;\n+    }\n }\n--- a/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n+++ b/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util.reflection;\n \n import static org.junit.Assert.*;\n \n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n     String nonGeneric;\n     List<Set<String>> nested;\n     List<Set<Collection<String>>> multiNested;\n-    \n+\n+    public interface ListSet extends List<Set> {}\n+\n+    public List<Number> numberList() { return null; }\n+    public Comparable<Number> numberComparable() { return null; }\n+    public List rawList() { return null; }\n+\n+\n+\n     @Test\n-    public void shouldFindGenericClass() throws Exception {\n+    public void should_find_generic_class() throws Exception {\n         assertEquals(String.class, m.getGenericType(field(\"one\")));\n         assertEquals(Integer.class, m.getGenericType(field(\"two\")));\n         assertEquals(Double.class, m.getGenericType(field(\"map\")));\n     }\n     \n     @Test\n-    public void shouldGetObjectForNonGeneric() throws Exception {\n+    public void should_get_object_for_non_generic() throws Exception {\n         assertEquals(Object.class, m.getGenericType(field(\"nonGeneric\")));\n     }\n     \n     @Test\n-    public void shouldDealWithNestedGenerics() throws Exception {\n+    public void should_deal_with_nested_generics() throws Exception {\n         assertEquals(Set.class, m.getGenericType(field(\"nested\")));\n         assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));\n+    }\n+\n+    @Test\n+    public void can_identify_generic_type_of_returned_collection() throws Exception {\n+        assertEquals(Number.class, m.identifyGenericReturnType(method(\"numberList\"), this.getClass()));\n+    }\n+\n+    @Test\n+    public void can_identify_generic_type_of_returned_user_type() throws Exception {\n+        assertEquals(Number.class, m.identifyGenericReturnType(method(\"numberComparable\"), this.getClass()));\n+    }\n+\n+    @Test\n+    public void can_identify_generic_type_of_returned_type_when_owner_forces_generic_type() throws Exception {\n+        assertEquals(Set.class, m.identifyGenericReturnType(method(ListSet.class, \"iterator\"), ListSet.class));\n+    }\n+\n+    @Test\n+    public void will_return_null_if_return_type_not_generic() throws Exception {\n+        assertEquals(null, m.identifyGenericReturnType(method(\"rawList\"), this.getClass()));\n+    }\n+\n+\n+\n+\n+    private Method method(String noArgMethod) throws NoSuchMethodException {\n+        return method(this.getClass(), noArgMethod);\n+    }\n+\n+    private Method method(Class<?> clazz, String noArgMethod) throws NoSuchMethodException {\n+        return clazz.getMethod(noArgMethod);\n     }\n \n     private Field field(String fieldName) throws SecurityException, NoSuchFieldException {\n         return this.getClass().getDeclaredField(fieldName);\n     }\n+\n+\n }", "timestamp": 1341428931, "metainfo": ""}