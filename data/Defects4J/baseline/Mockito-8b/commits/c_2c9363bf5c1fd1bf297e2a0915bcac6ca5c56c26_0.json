{"sha": "2c9363bf5c1fd1bf297e2a0915bcac6ca5c56c26", "log": "removed unneeded deserialization as it isn't affected by concurrency problems", "commit": "\n--- a/test/org/mockitousage/serialization/ParallelSerializationTest.java\n+++ b/test/org/mockitousage/serialization/ParallelSerializationTest.java\n \n import org.junit.Test;\n import org.mockitousage.IMethods;\n-import org.mockitoutil.SimplePerRealmReloadingClassLoader;\n import org.mockitoutil.SimpleSerializationUtil;\n \n-import java.io.ByteArrayInputStream;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.CyclicBarrier;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n+import java.util.concurrent.*;\n \n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.withSettings;\n                         barrier_that_will_wait_until_threads_are_ready.await();\n                         iMethods.arrayReturningMethod();\n \n-                        byte[] mockBytes = SimpleSerializationUtil.serializeMock(iMethods).toByteArray();\n-                        return read_stream_and_deserialize_it_in_class_loader_B(mockBytes);\n+                        return SimpleSerializationUtil.serializeMock(iMethods).toByteArray();\n                     }\n                 }));\n \n             }\n         }\n     }\n-\n-\n-\n-    private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {\n-        return new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())\n-                .doInRealm(\n-                        \"org.mockitousage.serialization.AcrossClassLoaderSerializationTest$ReadStreamAndDeserializeIt\",\n-                        new Class[]{ byte[].class },\n-                        new Object[]{ bytes }\n-                );\n-    }\n-\n-\n-    private SimplePerRealmReloadingClassLoader.ReloadClassPredicate isolating_test_classes() {\n-        return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {\n-            public boolean acceptReloadOf(String qualifiedName) {\n-                return qualifiedName.contains(\"org.mockitousage\")\n-                        || qualifiedName.contains(\"org.mockitoutil\");\n-            }\n-        };\n-    }\n-\n-\n-    // see read_stream_and_deserialize_it_in_class_loader_B\n-    public static class ReadStreamAndDeserializeIt implements Callable<Object> {\n-        private byte[] bytes;\n-\n-        public ReadStreamAndDeserializeIt(byte[] bytes) {\n-            this.bytes = bytes;\n-        }\n-\n-        public Object call() throws Exception {\n-            ByteArrayInputStream unserialize = new ByteArrayInputStream(bytes);\n-            return SimpleSerializationUtil.deserializeMock(unserialize, IMethods.class);\n-        }\n-    }\n }", "timestamp": 1357203629, "metainfo": ""}