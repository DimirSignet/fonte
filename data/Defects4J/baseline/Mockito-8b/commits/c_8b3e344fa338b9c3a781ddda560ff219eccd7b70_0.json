{"sha": "8b3e344fa338b9c3a781ddda560ff219eccd7b70", "log": "fixing test under gradle", "commit": "\n--- a/subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java\n+++ b/subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java\n import java.util.Map;\n \n import static org.fest.assertions.Assertions.assertThat;\n+import static org.testng.Assert.fail;\n \n public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {\n \n     public void verify_mocks_are_initialized() throws Exception {\n         assertThat(childMockField).isNotNull();\n         assertThat(parentMockField).isNotNull();\n+      fail();\n     }\n }\n--- a/test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java\n+++ b/test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java\n \n package org.mockitousage.annotation;\n \n-import org.fest.assertions.Assertions;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.internal.TextListener;\n+import org.junit.runner.JUnitCore;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockitousage.examples.use.ArticleDatabase;\n import org.mockitousage.examples.use.ArticleManager;\n \n-import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n \n+import static org.fest.assertions.Assertions.assertThat;\n import static org.junit.Assert.*;\n import static org.mockito.Mockito.when;\n \n     @Spy @InjectMocks private ArticleManager spiedArticleManager;\n \n \n-    @InjectMocks private ArticleVisitor should_be_initialized_several_times;\n+//    @InjectMocks private ArticleVisitor should_be_initialized_3_times;\n \n     @Test\n     public void shouldNotFailWhenNotInitialized() {\n     }\n \n     @Test\n-    public void constructor_is_called_for_each_test() throws Exception {\n-        int minimum_number_of_test_before = 3;\n-        Assertions.assertThat(articleVisitorInstantiationCount).isGreaterThan(minimum_number_of_test_before);\n-        Assertions.assertThat(articleVisitorMockInjectedInstances.size()).isGreaterThan(minimum_number_of_test_before);\n+    public void constructor_is_called_for_each_test_in_test_class() throws Exception {\n+        // given\n+        JUnitCore jUnitCore = new JUnitCore();\n+        jUnitCore.addListener(new TextListener(System.out));\n+\n+        // when\n+        jUnitCore.run(junit_test_with_3_tests_methods.class);\n+\n+        // then\n+        assertThat(junit_test_with_3_tests_methods.constructor_instantiation).isEqualTo(3);\n     }\n \n     @Test\n             MockitoAnnotations.initMocks(new ATest());\n             fail();\n         } catch (MockitoException e) {\n-            Assertions.assertThat(e.getMessage()).contains(\"failingConstructor\").contains(\"constructor\").contains(\"threw an exception\");\n-            Assertions.assertThat(e.getCause()).isInstanceOf(IllegalStateException.class);\n+            assertThat(e.getMessage()).contains(\"failingConstructor\").contains(\"constructor\").contains(\"threw an exception\");\n+            assertThat(e.getCause()).isInstanceOf(IllegalStateException.class);\n         }\n     }\n \n-    private static int articleVisitorInstantiationCount = 0;\n-    private static Set<Object> articleVisitorMockInjectedInstances = new HashSet<Object>();\n \n-    private static class ArticleVisitor {\n-        public ArticleVisitor(ArticleCalculator calculator) {\n-            articleVisitorInstantiationCount++;\n-            articleVisitorMockInjectedInstances.add(calculator);\n+    @RunWith(MockitoJUnitRunner.class)\n+    public static class junit_test_with_3_tests_methods {\n+        private static int constructor_instantiation = 0;\n+\n+        @Mock List some_collaborator;\n+        @InjectMocks some_class_with_parametered_constructor should_be_initialized_3_times;\n+\n+        @Test public void test_1() { }\n+        @Test public void test_2() { }\n+        @Test public void test_3() { }\n+\n+        private static class some_class_with_parametered_constructor {\n+            public some_class_with_parametered_constructor(List collaborator) {\n+                constructor_instantiation++;\n+            }\n         }\n     }\n ", "timestamp": 1350069428, "metainfo": ""}