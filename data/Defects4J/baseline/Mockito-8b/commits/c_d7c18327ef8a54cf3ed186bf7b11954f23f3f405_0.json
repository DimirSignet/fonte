{"sha": "d7c18327ef8a54cf3ed186bf7b11954f23f3f405", "log": "better test names", "commit": "\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java\n     }\n \n     @Test\n-    public void returning_deep_stubs_1() throws Exception {\n+    public void generic_deep_mock_frenzy__look_at_these_chained_calls() throws Exception {\n         GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n \n         Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();\n     }\n \n     @Test\n-    public void returning_deep_stubs_2() throws Exception {\n+    public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class() throws Exception {\n         GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n \n-        Cloneable cloneable1 = mock.paramTypeWithTypeParams().get(0);\n-        Comparable<?> comparable1 = mock.paramTypeWithTypeParams().get(0);\n-        Cloneable cloneable2 = mock.returningK();\n-        Comparable<?> comparable2 = mock.returningK();\n-        Cloneable cloneable3 = (Cloneable) mock.typeVarWithTypeParams();\n+        Cloneable cloneable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =\n+                mock.paramTypeWithTypeParams().get(0);\n+        Comparable<?> comparable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =\n+                mock.paramTypeWithTypeParams().get(0);\n     }\n \n     @Test\n-    public void returning_deep_stubs_3() throws Exception {\n+    public void can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class() throws Exception {\n+        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+\n+        Cloneable cloneable_bound_of_typevar_K = mock.returningK();\n+        Comparable<?> comparable_bound_of_typevar_K = mock.returningK();\n+    }\n+\n+    @Test\n+    public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class() throws Exception {\n+        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+\n+        Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();\n+        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = mock.typeVarWithTypeParams();\n+    }\n+\n+    @Test\n+    public void can_create_mock_from_return_types_declared_with_a_bounded_wildcard() throws Exception {\n         GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n \n         List<? super Integer> objects = mock.returningWildcard();\n-        Number n = (Number) mock.returningWildcard().get(45);\n-        n.floatValue();\n+        Number type_that_is_the_upper_bound_of_the_wildcard = (Number) mock.returningWildcard().get(45);\n+        type_that_is_the_upper_bound_of_the_wildcard.floatValue();\n     }\n \n     @Test\n-    public void returning_deep_stubs_4() throws Exception {\n+    public void can_still_work_with_raw_type_in_the_return_type() throws Exception {\n         GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n \n-        Number n = mock.returnsNormalType();\n-        n.floatValue();\n+        Number the_raw_type_that_should_be_returned = mock.returnsNormalType();\n+        the_raw_type_that_should_be_returned.floatValue();\n     }\n \n     @Test\n-    public void return_default_value_on_non_mockable_nested_generic() throws Exception {\n+    public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {\n         GenericsNest<?> genericsNest = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n         ListOfInteger listOfInteger = mock(ListOfInteger.class, new ReturnsGenericDeepStubs());\n \n     }\n \n     @Test(expected = ClassCastException.class)\n-    public void returning_deep_stub_dont_work_because_StringBuilder_is_subject_to_erasure() throws Exception {\n+    public void as_expected_fail_with_a_CCE_on_callsite_when_erasure_takes_place_for_example___StringBuilder_is_subject_to_erasure() throws Exception {\n         GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n \n-        StringBuilder stringBuilder = mock.twoTypeParams(new StringBuilder()).append(2).append(3); // ClassCastException\n+        // following assignment needed to create a ClassCastException on the call site (i.e. : here)\n+        StringBuilder stringBuilder_assignment_that_should_throw_a_CCE =\n+                mock.twoTypeParams(new StringBuilder()).append(2).append(3);\n     }\n }", "timestamp": 1351121614, "metainfo": ""}