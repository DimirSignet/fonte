{"sha": "b776917092cdc23385818340dc0903e1fe4b0245", "log": "extracted InvocationOnMock interface  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40508", "commit": "\n--- a/src/org/mockito/configuration/DefaultReturnValues.java\n+++ b/src/org/mockito/configuration/DefaultReturnValues.java\n \n import org.mockito.internal.creation.MockNamer;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationOnMock;\n \n public class DefaultReturnValues implements ReturnValues {\n     \n-    public Object valueFor(Invocation invocation) {\n+    public Object valueFor(InvocationOnMock invocation) {\n         if (Invocation.isToString(invocation)) {\n             Object mock = invocation.getMock();\n             String mockDescription = \"Mock for \" + MockNamer.nameForMock(mock) + \", hashCode: \" + mock.hashCode();\n--- a/src/org/mockito/configuration/ReturnValues.java\n+++ b/src/org/mockito/configuration/ReturnValues.java\n package org.mockito.configuration;\n \n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationOnMock;\n \n public interface ReturnValues {\n \n-    Object valueFor(Invocation invocation);\n+    Object valueFor(InvocationOnMock invocation);\n \n }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class Invocation implements PrintableInvocation {\n+public class Invocation implements PrintableInvocation, InvocationOnMock {\n \n     private static final int MAX_LINE_LENGTH = 45;\n     private final int sequenceNumber;\n         return matchers;\n     }\n \n-    public static boolean isToString(Invocation invocation) {\n+    public static boolean isToString(InvocationOnMock invocation) {\n         return invocation.getMethod().getReturnType() == String.class \n             && invocation.getMethod().getParameterTypes().length == 0 \n             && invocation.getMethod().getName().equals(\"toString\");\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n import org.mockito.configuration.DefaultReturnValues;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationOnMock;\n \n public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {\n     \n     private final class MyDefaultReturnValues implements ReturnValues {\n         private List<Object> smartMocks = new LinkedList<Object>();\n \n-        public Object valueFor(Invocation invocation) {\n+        public Object valueFor(InvocationOnMock invocation) {\n             Object value = new DefaultReturnValues().valueFor(invocation);\n             Class<?> returnType = invocation.getMethod().getReturnType();\n             if (value != null || returnType == Void.TYPE) {\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n import org.mockito.configuration.DefaultReturnValues;\n import org.mockito.configuration.MockitoConfiguration;\n import org.mockito.configuration.ReturnValues;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationOnMock;\n \n public class ConfiguringDefaultReturnValuesTest extends TestBase {\n     \n     }\n     \n     private final class MyDefaultReturnValues implements ReturnValues {\n-        public Object valueFor(Invocation invocation) {\n+        public Object valueFor(InvocationOnMock invocation) {\n             Object value = new DefaultReturnValues().valueFor(invocation);\n             if (value != null || invocation.getMethod().getReturnType() == Void.TYPE) {\n                 return value;", "timestamp": 1206389144, "metainfo": ""}