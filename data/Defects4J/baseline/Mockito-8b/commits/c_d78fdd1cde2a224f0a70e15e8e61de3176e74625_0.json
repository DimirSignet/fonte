{"sha": "d78fdd1cde2a224f0a70e15e8e61de3176e74625", "log": "In order to prepare Mockito for new feature: printing invocations for debugging In the middle of refactoring  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401723", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     public void setAnswersForStubbing(List<Answer> answers) {\n         mockitoStubber.setAnswersForStubbing(answers);\n     }\n+\n+    public List<StubbedInvocationMatcher> getStubbedInvocations() {\n+        return mockitoStubber.getStubbedInvocations();\n+    }\n }\n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n                 System.out.println(\" stubbed: \" + i.stubInfo().stubbingLocation());\n             }\n         }\n-//        System.out.println(\"********************************\");\n-//        System.out.println(\"***       Unused stubs       ***\");\n-//        System.out.println(\"********************************\");        \n-//        List<Invocation> invocations = finder.getAllUnusedStubs(asList(mocks));\n+        invocations = finder.getAllUnusedStubs(asList(mocks));\n+        if (invocations.isEmpty()) {\n+            return;\n+        }\n+        System.out.println(\"********************************\");\n+        System.out.println(\"***       Unused stubs       ***\");\n+        System.out.println(\"********************************\");\n+        invocations = finder.getAllUnusedStubs(asList(mocks));\n+        for(Invocation i:invocations) {\n+            System.out.println(i.toString());\n+            System.out.println(\" stubbed: \" + i.getLocation());\n+        }\n     }\n }\n--- a/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.internal.util.ListUtil;\n import org.mockito.internal.util.MockUtil;\n \n public class AllInvocationsFinder {\n         return new LinkedList<Invocation>(invocationsInOrder);\n     }\n \n+    public List<Invocation> getAllUnusedStubs(List<?> mocks) {\n+        List<Invocation> unused = new LinkedList<Invocation>();\n+        for (Object mock : mocks) {\n+            List<StubbedInvocationMatcher> fromSingleMock = new MockUtil().getMockHandler(mock).getStubbedInvocations();\n+            for(StubbedInvocationMatcher s : fromSingleMock) {\n+                if (!s.wasUsed()) {\n+                     unused.add(s.getInvocation());\n+                }\n+            }\n+        }\n+        return unused;\n+    }\n+\n     private final class SequenceNumberComparator implements Comparator<Invocation> {\n         public int compare(Invocation o1, Invocation o2) {\n             return o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n--- a/src/org/mockito/internal/stubbing/MockitoStubber.java\n+++ b/src/org/mockito/internal/stubbing/MockitoStubber.java\n     public List<Invocation> getInvocations() {\n         return registeredInvocations.getAll();\n     }\n+\n+    public List<StubbedInvocationMatcher> getStubbedInvocations() {\n+        return stubbed;\n+    }\n }\n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n \n     private static final long serialVersionUID = 4919105134123672727L;\n     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();\n+    private Invocation stubUsedHere;\n \n     public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\n         super(invocation.getInvocation(), invocation.getMatchers());\n     }\n \n     public void markStubUsed(Invocation where) {\n-        //TODO\n+        this.stubUsedHere = where;\n     }\n \n     @Override\n     public String toString() {\n         return super.toString() + \" stubbed with: \" + answers;\n     }\n+\n+    public boolean wasUsed() {\n+        return stubUsedHere != null;\n+    }\n }", "timestamp": 1258316294, "metainfo": ""}