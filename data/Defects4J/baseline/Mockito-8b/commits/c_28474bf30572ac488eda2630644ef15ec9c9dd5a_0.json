{"sha": "28474bf30572ac488eda2630644ef15ec9c9dd5a", "log": "fixed some minor javadoc issues  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40634", "commit": "\n--- a/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n+++ b/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito.configuration.experimental;\n-\n-import java.lang.reflect.Modifier;\n-\n-import org.mockito.internal.configuration.MockitoConfiguration;\n-import org.mockito.internal.configuration.Configuration;\n-import org.mockito.internal.configuration.MockitoProperties;\n-import org.mockito.invocation.InvocationOnMock;\n-\n-/**\n- * Allows configuring Mockito to enable custom 'mocking style'. \n- * It can be useful when working with legacy code, etc.\n- * <p>\n- * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n- * You may want to check out the project from svn repository to easily browse Mockito's test code.\n- * <p>\n- * Basic example:\n- * <pre>\n- *   //create an implementation of ReturnValues interface\n- *   \n- *   public class FriendlyReturnValues implements ReturnValues {\n- *\n- *   public Object valueFor(InvocationOnMock invocation) {\n- *       \n- *       Class<?> returnType = invocation.getMethod().getReturnType();\n- *       \n- *       Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n- *       \n- *       if (defaultReturnValue != null || !ConfigurationSupport.isMockable(returnType)) {\n- *           return defaultReturnValue;\n- *       } else { \n- *           return Mockito.mock(returnType);\n- *       }\n- *   }\n- *   \n- *   //finally, change the configuration: \n- *   \n- *   ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());\n- * </pre>\n- * <p>\n- * Configuring Mockito is a new concept that we evaluate. Please let us know if you find it useful/harmful. \n- */\n-public class ConfigurationSupport {\n-    \n-    /**\n-     * this is what Mockito returns by default for given invocation \n-     * <p>\n-     * See examples in javadoc for {@link ConfigurationSupport}\n-     * \n-     * @param invocation\n-     * @return default return value\n-     */\n-    public static Object defaultValueFor(InvocationOnMock invocation) {\n-        return MockitoProperties.DEFAULT_RETURN_VALUES.valueFor(invocation);\n-    }\n-\n-    /**\n-     * returns true if Mockito CAN create mocks of the clazz\n-     * <p>\n-     * See examples in javadoc for {@link ConfigurationSupport}\n-     * \n-     * @param clazz\n-     * @return \n-     */\n-    public static boolean isMockable(Class<?> clazz) {\n-        return !Modifier.isFinal(clazz.getModifiers());\n-    }\n-    \n-    /**\n-     * returns a configuration object\n-     * <p>\n-     * See examples in javadoc for {@link ConfigurationSupport}\n-     * \n-     * @return\n-     */\n-    public static MockitoConfiguration getConfiguration() {\n-        return Configuration.instance();\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.configuration.experimental;\n+\n+import java.lang.reflect.Modifier;\n+\n+import org.mockito.internal.configuration.MockitoConfiguration;\n+import org.mockito.internal.configuration.Configuration;\n+import org.mockito.internal.configuration.MockitoProperties;\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Allows configuring Mockito to enable custom 'mocking style'. \n+ * It can be useful when working with legacy code, etc.\n+ * <p>\n+ * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n+ * You may want to check out the project from svn repository to easily browse Mockito's test code.\n+ * <p>\n+ * Basic example:\n+ * <pre>\n+ *   //create an implementation of ReturnValues interface\n+ *   \n+ *   public class FriendlyReturnValues implements ReturnValues {\n+ *\n+ *   public Object valueFor(InvocationOnMock invocation) {\n+ *       \n+ *       Class<?> returnType = invocation.getMethod().getReturnType();\n+ *       \n+ *       Object defaultReturnValue = ConfigurationSupport.defaultValueFor(invocation);\n+ *       \n+ *       if (defaultReturnValue != null || !ConfigurationSupport.isMockable(returnType)) {\n+ *           return defaultReturnValue;\n+ *       } else { \n+ *           return Mockito.mock(returnType);\n+ *       }\n+ *   }\n+ *   \n+ *   //finally, change the configuration: \n+ *   \n+ *   ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());\n+ * </pre>\n+ * <p>\n+ * Configuring Mockito is a new concept that we evaluate. Please let us know if you find it useful/harmful. \n+ */\n+public class ConfigurationSupport {\n+    \n+    /**\n+     * this is what Mockito returns by default for given invocation \n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n+     * \n+     * @param invocation\n+     * @return default return value\n+     */\n+    public static Object defaultValueFor(InvocationOnMock invocation) {\n+        return MockitoProperties.DEFAULT_RETURN_VALUES.valueFor(invocation);\n+    }\n+\n+    /**\n+     * returns true if Mockito CAN create mocks of the clazz\n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n+     * \n+     * @param clazz\n+     * @return clazz is mockable  \n+     */\n+    public static boolean isMockable(Class<?> clazz) {\n+        return !Modifier.isFinal(clazz.getModifiers());\n+    }\n+    \n+    /**\n+     * returns a configuration object\n+     * <p>\n+     * See examples in javadoc for {@link ConfigurationSupport}\n+     * \n+     * @return MockitoConfiguration\n+     */\n+    public static MockitoConfiguration getConfiguration() {\n+        return Configuration.instance();\n+    }\n }", "timestamp": 1213714595, "metainfo": ""}