{"sha": "774dcce413bf08a5866dc7c31b4c477dea2516c3", "log": "moved some exceptions to Exceptions class, tuned some exception messages  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4089", "commit": "\n--- a/src/org/mockito/exceptions/Exceptions.java\n+++ b/src/org/mockito/exceptions/Exceptions.java\n                 \"\\n\" +\n                 \"Method requires arguments.\" +\n                 \"\\n\" +\n-                \"Pass mocks that should be verified.\");\n+                \"Pass mocks that should be verified, e.g:\" +\n+                \"\\n\" +\n+                \"verifyNoMoreInteractions(mockOne, mockTwo)\");\n     }\n \n     public static void strictlyRequiresFamiliarMock() {\n                 \"\\n\" +\n                 \"strictly = createStrictOrderVerifier(mockOne)\" +\n                 \"\\n\" +\n-                \"so strictly can only verify mockOne\");\n+                \"strictly.verify(mockOne).doStuff()\");\n     }\n \n     public static void mocksHaveToBePassedWhenCreatingStrictly() {\n                 \"\\n\" +\n                 \"Method requires arguments.\" +\n                 \"\\n\" +\n-                \"Pass mocks that require strict order verification.\");\n+                \"Pass mocks that require strict order verification, e.g:\" +\n+                \"\\n\" +\n+                \"createStrictOrderVerifier(mockOne, mockTwo)\");\n+    }\n+\n+    public static void checkedExceptionInvalid(Throwable t) {\n+        throw new MockitoException(\n+                \"\\n\" +\n+        \t\t\"Checked exception is invalid for this method\" +\n+        \t\t\"\\n\" +\n+        \t\t\"Invalid: \" + t);\n+    }\n+\n+    public static void cannotStubWithNullThrowable() {\n+        throw new MockitoException(\n+                \"\\n\" +\n+                \"Cannot stub with null throwable\"                \n+                );\n+        \n     }\n }\n--- a/src/org/mockito/exceptions/MockitoStackTraceFilter.java\n+++ b/src/org/mockito/exceptions/MockitoStackTraceFilter.java\n public class MockitoStackTraceFilter {\n     \n     public boolean isLastStackElementToRemove(StackTraceElement e) {\n+        //TODO change this logic so it filters everything from org.mockito and move org.mockito.usage to org.usingmockito\n         boolean firstOnStackIsMockitoClass = e.getClassName().equals(\"org.mockito.Mockito\");\n         boolean firstOnStackIsMockObject = e.getClassName().contains(\"$$EnhancerByCGLIB$$\");\n         return firstOnStackIsMockitoClass || firstOnStackIsMockObject;\n--- a/src/org/mockito/internal/MockControl.java\n+++ b/src/org/mockito/internal/MockControl.java\n     \n     private void validateThrowable(Throwable throwable) {\n         if (throwable == null) {\n-            throw new MockitoException(\"Cannot set null throwable\");\n+            Exceptions.cannotStubWithNullThrowable();\n         }\n \n         if (throwable instanceof RuntimeException || throwable instanceof Error) {\n         }\n     \n         if (!isValidCheckedException(throwable)) {\n-            throw new MockitoException(\"Given checked exception is invalid for this method\"); \n+            Exceptions.checkedExceptionInvalid(throwable);\n         }\n     }\n \n--- a/test/org/mockito/usage/InvalidUsageExceptionsTest.java\n+++ b/test/org/mockito/usage/InvalidUsageExceptionsTest.java\n  */\n package org.mockito.usage;\n \n-import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n \n-import java.util.List;\n+import java.util.LinkedList;\n \n-import org.junit.Test;\n+import org.junit.*;\n import org.mockito.Strictly;\n import org.mockito.exceptions.MockitoException;\n \n @SuppressWarnings(\"unchecked\")\n public class InvalidUsageExceptionsTest {\n     \n-    @Test\n-    public void shouldRequireArgumentsWhenVerifyingNoMoreInteractions() {\n-        try {\n-            verifyNoMoreInteractions();\n-            fail();\n-        }\n-        catch (MockitoException e) {}\n+    private LinkedList mock;\n+    private LinkedList mockTwo;\n+\n+    @Before public void setup() {\n+        mock = mock(LinkedList.class);\n+        mockTwo = mock(LinkedList.class);\n     }\n     \n-    @Test\n-    public void shouldRequireArgumentsWhenVerifyingZeroInteractions() {\n-        try {\n-            verifyZeroInteractions();\n-            fail();\n-        }\n-        catch (MockitoException e) {}\n+    @Test(expected=MockitoException.class)\n+    public void shouldRequireArgumentsWhenVerifyingNoMoreInteractions() {\n+        verifyNoMoreInteractions();\n     }\n     \n-    @Test\n-    public void shouldNotCreateStrictlyWithoutMocks() {\n-        try {\n-            createStrictOrderVerifier();\n-            fail();\n-        } catch (MockitoException e) {}\n+    @Test(expected=MockitoException.class)\n+    public void shouldRequireArgumentsWhenVerifyingZeroInteractions() {\n+        verifyZeroInteractions();\n     }\n     \n-    @Test\n-    public void shouldNotStrictlyVerifyUnfamilarMocks() {\n-        List mockOne = mock(List.class);\n-        List mockTwo = mock(List.class);\n-        Strictly strictly = createStrictOrderVerifier(mockOne);\n-        try {\n-            strictly.verify(mockTwo).clear();\n-            fail();\n-        } catch (MockitoException e) {}\n+    @Test(expected=MockitoException.class)\n+    public void shouldNotCreateStrictlyWithoutMocks() {\n+        createStrictOrderVerifier();\n     }\n-}\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotVerifyStrictlyUnfamilarMocks() {\n+        Strictly strictly = createStrictOrderVerifier(mock);\n+        strictly.verify(mockTwo).clear();\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n+        stub(mock.add(\"monkey island\")).andThrows(new Exception());\n+    }\n+    \n+    @Test(expected=MockitoException.class)\n+    public void shouldNotAllowSettingNullThrowable() throws Exception {\n+        stub(mock.add(\"monkey island\")).andThrows(null);\n+    }\n+}\n--- a/test/org/mockito/usage/StackTrackeFilteringTest.java\n+++ b/test/org/mockito/usage/StackTrackeFilteringTest.java\n         } catch (VerificationAssertionError expected) {\n             assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStackTraceOnVerify\"));\n             \n+            //TODO get rid of following test: and move that testing to MockitoStackTraceFilterTest\n             StackTraceElement[] unfilteredStackTrace = expected.getUnfilteredStackTrace();\n             assertEquals(\"reportMissingInvocationError\", unfilteredStackTrace[0].getMethodName());\n         }\n             assertEquals(\"checkOrderOfInvocations\", unfilteredStackTrace[0].getMethodName());\n         }\n     }\n+    \n+    @Test\n+    public void shouldFilterStacktraceWhenStrictlyThrowsMockitoException() {\n+        try {\n+            createStrictOrderVerifier();\n+            fail();\n+        } catch (MockitoException expected) {\n+            assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStacktraceWhenStrictlyThrowsMockitoException\"));\n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldFilterStacktraceWhenStrictlyVerifies() {\n+        try {\n+            Strictly strictly = createStrictOrderVerifier(mock);\n+            strictly.verify(null);\n+            fail();\n+        } catch (MockitoException expected) {\n+            assertThat(expected, firstMethodOnStackEqualsTo(\"shouldFilterStacktraceWhenStrictlyVerifies\"));\n+        }\n+    }\n+    \n+    @Ignore\n+    @Test\n+    public void shouldNotAllowSettingInvalidCheckedException() {\n+        try {\n+            stub(mock.oneArg(true)).andThrows(new Exception());\n+            fail();\n+        } catch (MockitoException expected) {\n+            assertThat(expected, firstMethodOnStackEqualsTo(\"shouldNotAllowSettingInvalidCheckedException\"));\n+        }\n+    }\n }\n--- a/test/org/mockito/usage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockito/usage/stubbing/StubbingWithThrowablesTest.java\n @SuppressWarnings(\"unchecked\")\n public class StubbingWithThrowablesTest {\n \n+    private LinkedList mock;\n+\n+    @Before public void setup() {\n+        mock = mock(LinkedList.class);\n+    }\n+    \n     @Test\n     public void shouldStubWithThrowable() throws Exception {\n-        LinkedList mock = mock(LinkedList.class);\n-\n         IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n         stub(mock.add(\"throw\")).andThrows(expected);\n         \n     \n     @Test\n     public void shouldSetThrowableToVoidMethod() throws Exception {\n-        LinkedList mock = mock(LinkedList.class);\n-\n         IllegalArgumentException expected = new IllegalArgumentException(\"thrown by mock\");\n         \n         stubVoid(mock).toThrow(expected).on().clear();\n     \n     @Test\n     public void shouldAllowSettingError() throws Exception {\n-        LinkedList mock = mock(LinkedList.class);\n         Error error = new Error();\n         \n         stub(mock.add(\"quake\")).andThrows(error);\n         }\n     }    \n     \n-    @Test\n+    @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingInvalidCheckedException() throws Exception {\n-        LinkedList list = mock(LinkedList.class);\n-        Exception checkedException = new Exception();\n-        \n-        try {\n-            stub(list.add(\"monkey island\")).andThrows(checkedException);\n-            fail();\n-        } catch (MockitoException e) {\n-            assertEquals(\"Given checked exception is invalid for this method\", e.getMessage());\n-        }\n+        stub(mock.add(\"monkey island\")).andThrows(new Exception());\n     }\n     \n-    @Test\n+    @Test(expected=MockitoException.class)\n     public void shouldNotAllowSettingNullThrowable() throws Exception {\n-        LinkedList list = mock(LinkedList.class);\n-        \n-        try {\n-            stub(list.add(\"monkey island\")).andThrows(null);\n-            fail();\n-        } catch (MockitoException e) {\n-            assertEquals(\"Cannot set null throwable\", e.getMessage());\n-        }\n+        stub(mock.add(\"monkey island\")).andThrows(null);\n     }    \n     \n     @Ignore", "timestamp": 1196287365, "metainfo": ""}