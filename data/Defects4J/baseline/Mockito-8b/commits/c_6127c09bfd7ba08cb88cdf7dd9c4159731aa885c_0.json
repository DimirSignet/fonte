{"sha": "6127c09bfd7ba08cb88cdf7dd9c4159731aa885c", "log": "small changes to documentation  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40278", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n     public static double eq(double value, double delta) {\n         return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();\n     }\n-\n+    \n     /**\n      * float argument that has an absolute difference to the given value that is\n      * less than the given delta details.\n--- a/src/org/mockito/CustomMatcher.java\n+++ b/src/org/mockito/CustomMatcher.java\n import org.mockito.internal.matchers.ArgumentMatcher;\n \n /**\n- * TODO document\n+ * Allows creating customized argument matchers.\n+ * <p>\n+ * See {@link Matchers}\n+ * \n+ * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods and implement your own {@link CustomMatcher}, e.g:\n+ * \n+ * <pre>\n+ *   class IsListOfTwoElements extends CustomMatcher&lt;List&gt; {\n+ *      public boolean matches(List list) {\n+ *          return list.size() == 2;\n+ *      }\n+ *   }\n+ *   \n+ *   List mock = mock(List.class);\n+ *   \n+ *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   \n+ *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n+ *   \n+ *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n+ * </pre>\n+ * \n+ * Custom matchers are generally used very rarely. \n+ * <p>\n+ * To keep it readable you may want to extract method, e.g:\n+ * <pre>\n+ *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   //becomes\n+ *   stub(mock.addAll(listOfTwoElements()).toReturn(true);\n+ * </pre>\n+ * \n  * @param <T>\n  */\n public abstract class CustomMatcher<T> implements ArgumentMatcher<T> {\n+    \n     /* \n-     * @see org.mockito.internal.matchers.ArgumentMatcher#appendTo(java.lang.StringBuilder)\n+     * Usually not necessary but you might want to override this method to provide specific argument description \n+     * (useful when errors are reported). \n      */\n     public void appendTo(StringBuilder builder) {\n         builder.append(\"<custom argument matcher>\");\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n  * </pre>\n+ * \n+ * <h3>Custom Matchers</h3>\n+ * \n+ * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods and implement your own {@link CustomMatcher}, e.g:\n+ * \n+ * <pre>\n+ *   class IsListOfTwoElements extends CustomMatcher&lt;List&gt; {\n+ *      public boolean matches(List list) {\n+ *          return list.size() == 2;\n+ *      }\n+ *   }\n+ *   \n+ *   List mock = mock(List.class);\n+ *   \n+ *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   \n+ *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n+ *   \n+ *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n+ * </pre>\n+ * \n+ * Custom matchers are generally used very rarely. \n+ * <p>\n+ * To keep it readable you may want to extract method, e.g:\n+ * <pre>\n+ *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   //becomes\n+ *   stub(mock.addAll(listOfTwoElements()).toReturn(true);\n+ * </pre>\n+ * \n  */\n public class Matchers {\n \n     public static String startsWith(String prefix) {\n         return reportMatcher(new StartsWith(prefix)).<String>returnNull();\n     }\n-    \n+\n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T argThat(CustomMatcher<T> matcher) {\n+        return reportMatcher(matcher).<T>returnNull();\n+    }\n+    \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static char charThat(CustomMatcher<Character> matcher) {\n         return reportMatcher(matcher).returnChar();\n     }\n     \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>false</code>.\n+     */\n     public static boolean booleanThat(CustomMatcher<Boolean> matcher) {\n         return reportMatcher(matcher).returnFalse();\n     }\n     \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static byte byteThat(CustomMatcher<Byte> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static short shortThat(CustomMatcher<Short> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static int intThat(CustomMatcher<Integer> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static long longThat(CustomMatcher<Long> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static float floatThat(CustomMatcher<Float> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n+    /**\n+     * Allows creating custom argument matchers.\n+     * <p>\n+     * See examples in javadoc for {@link Matchers}\n+     * \n+     * @param matcher decides whether argument matches\n+     * @return <code>0</code>.\n+     */\n     public static double doubleThat(CustomMatcher<Double> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n \n-    public static <T> T argThat(CustomMatcher<T> matcher) {\n-        return reportMatcher(matcher).<T>returnNull();\n-    }\n-    \n     private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n         return LastArguments.instance().reportMatcher(matcher);\n     }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * </pre>\n  * \n  * <p>\n- * Argument matchers allow less constrained verification or stubbing. See all {@link Matchers}.\n+ * Argument matchers allow less constrained verification or stubbing. \n+ * See all {@link Matchers} including examples of custom matchers. \n  * <p>\n  * <b>Warning:</b>\n  * <p>\n  *   firstMock.add(\"one\");\n  *   secondMock.add(\"two\");\n  *   \n- *   //create strict verifier \n+ *   //create strictly \n  *   Strictly strictly = strictly(firstMock, secondMock);\n  *   \n  *   //following will make sure that firstMock was called before secondMock\n     }\n \n     /**\n-     * Creates strict verifier that allows verifying mocks in order.\n+     * Creates strictly that allows verifying mocks in order.\n      * \n      * <pre>\n      *   Strictly strictly = strictly(firstMock, secondMock);\n--- a/src/org/mockito/StrictOrderVerifier.java\n+++ b/src/org/mockito/StrictOrderVerifier.java\n import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n+/**\n+ * Allows verifying strictly. This class should not be exposed, hence default access.\n+ */\n class StrictOrderVerifier implements Strictly {\n     \n     private final Reporter reporter = new Reporter();\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n         \n         assertEquals(null, mock.oneArg(2));\n     }\n-    \n+         \n     @Test\n     public void shouldUseCustomObjectMatcher() {\n         stub(mock.oneArg(argThat(new ContainsFoo()))).toReturn(\"foo\");", "timestamp": 1199920121, "metainfo": ""}