{"sha": "df41fbe00b1300cfe5076bb4e9242214fbe677f9", "log": "Added new Javadoc point (23) and precisions on point 21", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * <li>&#064;{@link Captor} simplifies creation of {@link ArgumentCaptor} \n  * - useful when the argument to capture is a nasty generic class and you want to avoid compiler warnings\n  * <li>&#064;{@link Spy} - you can use it instead {@link Mockito#spy(Object)}. \n- * <li>&#064;{@link InjectMocks} - injects mocks into tested object automatically.\n+ * <li>&#064;{@link InjectMocks} - injects mock or spy fields into tested object automatically.\n  * </ul>\n- * <p>\n- * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}\n+ *\n+ * <p>\n+ * Note that &#064;{@link InjectMocks} can only be used in combination with the &#064;{@link Spy} annotation, it means\n+ * that Mockito will inject mocks in a partial mock under testing. As a remainder, please read point 16 about partial mocks.\n+ *\n+ * <p>\n+ * All new annotations are *only* processed on {@link MockitoAnnotations#initMocks(Object)}.\n+ * As for &#064;{@link Mock} annotation you can use the built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n  * <h3 id=\"22\">22. (**New**) Verification with timeout (Since 1.8.5)  </h3>\n  * <p>\n  *   //useful only if you have your own custom verification modes.\n  *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n  * </pre>\n+ *\n+ * <h3 id=\"21\">23. (**New**) Automatic initialisation of &#064;Spy, &#064;InjectMocks fields (Since 1.8.6) </h3>\n+ * <p>\n+ * Mockito will now try to initialise &#064;{@link Spy} and &#064;{@link InjectMocks} fields if and only if the type has\n+ * a zero-arg argument, even private.\n+ *\n+ * <p>\n+ * This is especially useful if you are testing an object with a Joshua Bloch Builder Pattern (see Effective Java Ed. 2008, &#167;2.Item 2)\n+ *\n+ * <p>\n+ * Example :\n+ *\n+ * <pre>\n+ * // The type to test\n+ * public class TooMuchComplicated {\n+ *   private List subItems;\n+ *   // other collaborators\n+ *\n+ *   public void someBehaviourToTest() {}\n+ *\n+ *   // no-argument constructor\n+ *   private TooMuchComplicated()\n+ *\n+ *   private TooMuchComplicated(Builder builder) {}\n+ *\n+ *   public static class Builder {\n+ *     public Builder withSubItems(Object subItems ...) {}\n+ *     // other builder methods\n+ *     public TooMuchComplicated build() { return new TooMuchComplicated(this); }\n+ *   }\n+ * }\n+ *\n+ * // In your test\n+ * &#064;RunWith(MockitoJUnitRunner.class)\n+ * public class TooMuchComplicatedTest {\n+ *   &#064;Mock List subItems;\n+ *   // other mocked collaborators\n+ *   &#064;InjectMocks TooMuchComplicated tested;\n+ *\n+ *   // tests\n+ * }\n+ * </pre>\n+ *\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {", "timestamp": 1290092009, "metainfo": ""}