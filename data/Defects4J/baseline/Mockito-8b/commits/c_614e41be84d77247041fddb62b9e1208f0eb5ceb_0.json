{"sha": "614e41be84d77247041fddb62b9e1208f0eb5ceb", "log": "added private constructor  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40632", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * <h3> 10. (**New**) Stubbing consecutive calls (iterator-style stubbing)</h3>\n  * \n  * Sometimes we need to stub with different return value/exception for the same method call. \n- * Typical use case could be mocking iterators. However, this feature was not included in original version of Mockito to promote simple mocking.\n+ * Typical use case could be mocking iterators. Initially this feature was not included in original version of Mockito to promote simple mocking.\n  * Instead of iterators we strongly recommend using Iterable or simply collections. Those offer natural ways of stubbing (e.g. using real collections).\n- * In rare scenarios stubbing consecutive calls could useful, though.\n- * <p>\n- *\n- * Example:\n+ * In rare scenarios stubbing consecutive calls could useful, though:\n+ * <p>\n  * <pre>\n  *   stub(mock.someMethod(\"some arg\"))\n  *    .toThrow(new RuntimeException())\n  *   //Second call: prints \"foo\"\n  *   System.out.println(mock.someMethod(\"some arg\"));\n  *   \n- *   //Any consecutive call: prints \"foo\" as well because it is the last stubbed behaviour. \n+ *   //Any consecutive call: prints \"foo\" as well (last stubbing wins). \n  *   System.out.println(mock.someMethod(\"some arg\"));\n  * </pre>\n  */\n public class Mockito extends Matchers {\n+    \n+    private Mockito() {}\n \n     private static final Reporter REPORTER = new Reporter();\n     static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();\n      *   //setting exception to be thrown:\n      *   stub(mock.someMethod(&quot;some arg&quot;)).toThrow(new RuntimeException());\n      *   \n-     *   //you can stub with different behavior for consecutive method calls.\n+     *   //you can stub with different behavior for consecutive calls.\n      *   //Last stubbing (e.g: toReturn(\"foo\")) determines the behavior for further consecutive calls.   \n      *   stub(mock.someMethod(\"some arg\"))\n      *    .toThrow(new RuntimeException())\n      * <pre>\n      * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n      * \n-     * //you can stub with different behavior for consecutive method calls.\n+     * //you can stub with different behavior for consecutive calls.\n      * //Last stubbing (e.g. toReturn()) determines the behavior for further consecutive calls.   \n      * stub(mock)\n      *   .toThrow(new RuntimeException())", "timestamp": 1213710647, "metainfo": ""}