{"sha": "8470c5051f88eecf4a6b02ca10b2d68380d9f09a", "log": "Refactoring  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401841", "commit": "\n--- a/src/org/mockito/internal/debugging/FindingsListener.java\n+++ b/src/org/mockito/internal/debugging/FindingsListener.java\n \n     void foundUnusedStub(Invocation unused);\n \n-    void foundUstubbed(InvocationMatcher unstubbed);\n+    void foundUnstubbed(InvocationMatcher unstubbed);\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/debugging/LoggingListener.java\n+package org.mockito.internal.debugging;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.util.MockitoLogger;\n+\n+import static org.mockito.internal.util.StringJoiner.join;\n+\n+public class LoggingListener implements FindingsListener {\n+    private boolean warnAboutUnstubbed;\n+    private final MockitoLogger logger;\n+\n+    public LoggingListener(boolean warnAboutUnstubbed, MockitoLogger logger) {\n+        this.warnAboutUnstubbed = warnAboutUnstubbed;\n+        this.logger = logger;\n+    }\n+\n+    public void foundStubCalledWithDifferentArgs(Invocation unused, InvocationMatcher unstubbed) {\n+        logger.log(join(\n+                \" *** Stubbing warnings from Mockito: *** \",\n+                \"\",\n+                \"stubbed with those args here:   \" + unused.getLocation(),\n+                \"BUT called with different args: \" + unstubbed.getInvocation().getLocation(),\n+                \"\"));\n+    }\n+\n+    public void foundUnusedStub(Invocation unused) {\n+        logger.log(\"This stubbing was never used:   \" + unused.getLocation() + \"\\n\");\n+    }\n+\n+    public void foundUnstubbed(InvocationMatcher unstubbed) {\n+        if (warnAboutUnstubbed) {\n+            logger.log(join(\n+                    \"This method was not stubbed:\",\n+                    unstubbed,\n+                    unstubbed.getInvocation().getLocation(),\n+                    \"\"));\n+        }\n+    }\n+\n+    public boolean isWarnAboutUnstubbed() {\n+        return warnAboutUnstubbed;\n+    }\n+\n+    public MockitoLogger getLogger() {\n+        return logger;\n+    }\n+}\n--- a/src/org/mockito/internal/debugging/WarningsFinder.java\n+++ b/src/org/mockito/internal/debugging/WarningsFinder.java\n         }\n \n         for (InvocationMatcher i : allInvocations) {\n-            findingsListener.foundUstubbed(i);\n+            findingsListener.foundUnstubbed(i);\n         }\n     }\n }\n--- a/src/org/mockito/internal/debugging/WarningsPrinterImpl.java\n+++ b/src/org/mockito/internal/debugging/WarningsPrinterImpl.java\n  */\n package org.mockito.internal.debugging;\n \n-import static org.mockito.internal.util.StringJoiner.*;\n-\n-import java.util.Iterator;\n-import java.util.LinkedList;\n import java.util.List;\n \n import org.mockito.internal.invocation.Invocation;\n \n public class WarningsPrinterImpl {\n \n-    private final List<Invocation> unusedStubs;\n-    private List<InvocationMatcher> allInvocations;\n     private final boolean warnAboutUnstubbed;\n+    private WarningsFinder finder;\n \n     public WarningsPrinterImpl(List<Invocation> unusedStubs, List<InvocationMatcher> unstubbedInvocations) {\n         this(unusedStubs, unstubbedInvocations, false);\n     }\n \n     public WarningsPrinterImpl(List<Invocation> unusedStubs, List<InvocationMatcher> allInvocations, boolean warnAboutUnstubbed) {\n-        this.allInvocations = allInvocations;\n-        this.unusedStubs = unusedStubs;\n+        this(warnAboutUnstubbed, new WarningsFinder(unusedStubs, allInvocations));\n+    }\n+\n+    WarningsPrinterImpl(boolean warnAboutUnstubbed, WarningsFinder finder) {\n         this.warnAboutUnstubbed = warnAboutUnstubbed;\n+        this.finder = finder;\n     }\n     \n     public void print(final MockitoLogger logger) {\n-        WarningsFinder finder = new WarningsFinder(unusedStubs, allInvocations);\n-        finder.find(new FindingsListener() {\n-            public void foundStubCalledWithDifferentArgs(Invocation unused, InvocationMatcher unstubbed) {\n-                logger.log(stubbedMethodCalledWithDifferentArguments(unused, unstubbed));\n-            }\n-\n-            public void foundUnusedStub(Invocation unused) {\n-                logger.log(thisStubWasNotUsed(unused));\n-            }\n-\n-            public void foundUstubbed(InvocationMatcher unstubbed) {\n-                if (warnAboutUnstubbed) {\n-                    logger.log(thisMethodWasNotStubbed(unstubbed));\n-                }\n-            }\n-        });       \n-    }\n-\n-    private String thisStubWasNotUsed(Invocation i) {\n-        return \"This stubbing was never used:   \" + i.getLocation() + \"\\n\";\n-    }\n-\n-    private String thisMethodWasNotStubbed(InvocationMatcher i) {\n-        return join(\n-            \"[Mockito hint] This method was not stubbed:\",\n-            i,\n-            i.getInvocation().getLocation(),\n-            \"\");\n-    }\n-\n-    private String stubbedMethodCalledWithDifferentArguments(Invocation unused, InvocationMatcher unstubbed) {\n-        return join(\n-                \" *** Stubbing warnings from Mockito: *** \",\n-                \"\",\n-                \"stubbed with those args here:   \" + unused.getLocation(),\n-                \"BUT called with different args: \" + unstubbed.getInvocation().getLocation(),\n-                \"\");\n+        finder.find(new LoggingListener(warnAboutUnstubbed, logger));\n     }\n \n     public String print() {\n--- /dev/null\n+++ b/test/org/mockito/internal/debugging/LoggingListenerTest.java\n+package org.mockito.internal.debugging;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.util.MockitoLogger;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Matchers.notNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+public class LoggingListenerTest extends TestBase {\n+\n+    @Mock private MockitoLogger logger;\n+\n+    @Test\n+    public void shouldLogUnusedStub() {\n+        //given\n+        LoggingListener listener = new LoggingListener(false, logger);\n+\n+        //when\n+        listener.foundUnusedStub(new InvocationBuilder().toInvocation());\n+\n+        //then\n+        verify(logger).log(notNull());\n+    }\n+\n+    @Test\n+    public void shouldLogUnstubbed() {\n+        //given\n+        LoggingListener listener = new LoggingListener(true, logger);\n+\n+        //when\n+        listener.foundUnstubbed(new InvocationBuilder().toInvocationMatcher());\n+\n+        //then\n+        verify(logger).log(notNull());\n+    }\n+\n+    @Test\n+    public void shouldNotLogUnstubbed() {\n+        //given\n+        LoggingListener listener = new LoggingListener(false, logger);\n+\n+        //when\n+        listener.foundUnstubbed(new InvocationBuilder().toInvocationMatcher());\n+\n+        //then\n+        verify(logger, never()).log(notNull());\n+    }\n+\n+    @Test\n+    public void shouldLogDifferentArgs() {\n+        //given\n+        LoggingListener listener = new LoggingListener(true, logger);\n+\n+        //when\n+        listener.foundStubCalledWithDifferentArgs(new InvocationBuilder().toInvocation(), new InvocationBuilder().toInvocationMatcher());\n+\n+        //then\n+        verify(logger).log(notNull());\n+    }\n+}\n--- a/test/org/mockito/internal/debugging/WarningsFinderTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsFinderTest.java\n import static java.util.Arrays.asList;\n import static org.mockito.Mockito.only;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n \n public class WarningsFinderTest extends TestBase {\n \n         finder.find(listener);\n \n         // then\n-        verify(listener, only()).foundUstubbed(unstubbedInvocation);\n+        verify(listener, only()).foundUnstubbed(unstubbedInvocation);\n     }\n \n     @Test\n--- a/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n package org.mockito.internal.debugging;\n \n import static java.util.Arrays.*;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n \n import java.util.Arrays;\n \n+import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.util.MockitoLogger;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n import org.mockito.util.MockitoLoggerStub;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class WarningsPrinterImplTest extends TestBase {\n \n-    @Mock\n-    private IMethods mock;\n-    private MockitoLoggerStub logger = new MockitoLoggerStub();\n+    @Mock private MockitoLogger logger;\n+    @Mock private WarningsFinder finder;\n \n-    //TODO those tests should only deal with mocks\n+    @Test\n+    public void shouldUseFinderCorrectly() {\n+        // given\n+        WarningsPrinterImpl printer = new WarningsPrinterImpl(false, finder);\n+\n+        // when\n+        printer.print(logger);\n+\n+        // then\n+        ArgumentCaptor<LoggingListener> arg = ArgumentCaptor.forClass(LoggingListener.class);\n+        verify(finder).find(arg.capture());\n+        assertEquals(logger, arg.getValue().getLogger());\n+        assertEquals(false, arg.getValue().isWarnAboutUnstubbed());\n+    }\n \n     @Test\n     public void shouldPrintUnusedStub() {\n         // given\n-        Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n-        WarningsPrinterImpl p = new WarningsPrinterImpl(asList(unusedStub), Arrays.<InvocationMatcher> asList());\n+        WarningsPrinterImpl printer = new WarningsPrinterImpl(true, finder);\n \n         // when\n-        p.print(logger);\n+        printer.print(logger);\n \n         // then\n-        assertContains(\"never used\", logger.getLoggedInfo());\n-    }\n-\n-    @Test\n-    public void shouldPrintUnstubbedInvocation() {\n-        // given\n-        InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n-        WarningsPrinterImpl p = new WarningsPrinterImpl(Arrays.<Invocation> asList(), Arrays.<InvocationMatcher> asList(unstubbedInvocation), true);\n-\n-        // when\n-        p.print(logger);\n-\n-        // then\n-        assertContains(\"was not stubbed\", logger.getLoggedInfo());\n-        assertContains(\"differentMethod()\", logger.getLoggedInfo());\n-    }\n-\n-    @Test\n-    public void shouldPrintStubWasUsedWithDifferentArgs() {\n-        // given\n-        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n-        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n-\n-        WarningsPrinterImpl p = new WarningsPrinterImpl(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n-\n-        // when\n-        p.print(logger);\n-\n-        // then\n-        assertContains(\"different arg\", logger.getLoggedInfo());\n-    }\n-\n-    @Test\n-    public void shouldNotPrintRedundantInformation() {\n-        // given\n-        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n-        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n-\n-        WarningsPrinterImpl p = new WarningsPrinterImpl(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n-\n-        // when\n-        p.print(logger);\n-\n-        // then\n-        assertNotContains(\"stub was not used\", logger.getLoggedInfo());\n-        assertNotContains(\"was not stubbed\", logger.getLoggedInfo());\n+        ArgumentCaptor<LoggingListener> arg = ArgumentCaptor.forClass(LoggingListener.class);\n+        verify(finder).find(arg.capture());\n+        assertEquals(true, arg.getValue().isWarnAboutUnstubbed());\n     }\n }", "timestamp": 1266178969, "metainfo": ""}