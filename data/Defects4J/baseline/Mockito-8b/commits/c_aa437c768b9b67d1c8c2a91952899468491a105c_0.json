{"sha": "aa437c768b9b67d1c8c2a91952899468491a105c", "log": "Added correct treatment of exceptions occurring during the callback to an InvocationListener.  --HG-- branch : issue148 extra : transplant_source : r%A3yk%BD%D9%C8xM%D6%A3l9%D4u%D6R%0C%28%F5", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n \n import java.util.List;\n \n+import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n+import org.mockito.internal.util.StringJoiner;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.invocation.InvocationListener;\n     }\n \n     public Object handle(Invocation invocation) throws Throwable {\n-    \tnotifyInvocationListener(invocation);\n+    \tnotifyAllInvocationListener(invocation);\n     \t\n         if (invocationContainerImpl.hasAnswersForStubbing()) {\n             // stubbing voids with stubVoid() or doAnswer() style\n         return invocationContainerImpl;\n     }\n     \n-\tprivate void notifyInvocationListener(Invocation invocation) {\n+\tprivate void notifyAllInvocationListener(Invocation invocation) {\n \t\tfor (InvocationListener listener : mockSettings.getInvocationListener()) {\n-    \t\tlistener.invoking(invocation);\n-    \t}\n+\t\t\tnotifyInvocationListener(invocation, listener);\n+    \t} \n+\t}\n+\n+\tprivate void notifyInvocationListener(Invocation invocation, InvocationListener listener) {\n+\t\ttry {\n+\t\tlistener.invoking(invocation);\n+\t\t} catch(RuntimeException e) {\n+\t\t\tthrow new MockitoException(StringJoiner.join(\"An invocation listener threw an exception.\",\n+\t\t\t\t\t\"The listener has the class \" + listener.getClass().getName()),e);\n+\t\t}\n \t}\n }\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n  */\n package org.mockito.internal;\n \n-import static org.mockito.BDDMockito.*;\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n-import org.junit.*;\n-import org.mockito.*;\n-import org.mockito.exceptions.misusing.*;\n-import org.mockito.internal.creation.*;\n-import org.mockito.internal.invocation.*;\n-import org.mockito.internal.progress.*;\n-import org.mockito.internal.stubbing.*;\n-import org.mockito.internal.stubbing.answers.*;\n-import org.mockito.internal.verification.*;\n-import org.mockito.invocation.*;\n-import org.mockito.stubbing.*;\n-import org.mockito.verification.*;\n-import org.mockitoutil.*;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.MatchersBinder;\n+import org.mockito.internal.progress.ArgumentMatcherStorage;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.stubbing.InvocationContainerImpl;\n+import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n+import org.mockito.internal.stubbing.answers.DoesNothing;\n+import org.mockito.internal.verification.MockAwareVerificationMode;\n+import org.mockito.internal.verification.VerificationModeFactory;\n+import org.mockito.invocation.InvocationListener;\n+import org.mockito.stubbing.Answer;\n+import org.mockito.verification.VerificationMode;\n+import org.mockitoutil.TestBase;\n @SuppressWarnings({\"unchecked\",\"serial\"})\n public class MockHandlerTest extends TestBase {\n     \n \t\tverify(listener2).invoking(SOME_INVOCATION);\n \t}\n \t\n+\t@Test(expected=MockitoException.class)\n+    public void shouldThrowMockitoExceptionWhenInvocationHandlerThrowsAnything() throws Throwable {\n+    \t// given\n+\t\tInvocationListener throwingListener = mock(InvocationListener.class);\n+\t\tdoThrow(new RuntimeException()).when(throwingListener).invoking(SOME_INVOCATION);\n+    \tMockHandler<?> handler = createCorrectlyStubbedHandler(throwingListener);\n+    \t\n+    \t// when\n+\t\thandler.handle(SOME_INVOCATION);\n+    }\n+\n+\tprivate MockHandler<?> createCorrectlyStubbedHandler(\n+\t\t\tInvocationListener throwingListener) {\n+\t\tMockHandler<?> handler = createHandlerWithListeners(throwingListener);\n+    \tstubOrdinaryInvocationWithGivenReturnValue(handler);\n+\t\treturn handler;\n+\t}\n+\n \tprivate void stubOrdinaryInvocationWithGivenReturnValue(MockHandler<?> handler) {\n \t\tstubOrdinaryInvocationWithReturnValue(handler, SOME_RETURN_VALUE);\n \t}", "timestamp": 1297971540, "metainfo": ""}