{"sha": "8b2091365a2abc15281e8ed9b2e2f559fe9abd77", "log": "Moved the MockitoInvocationHandler to public space. Added a new annotation to mark the 'incubating' apis. Refactored ReturnsSmartNulls a bit so that it uses the interface rather than the implementation.  --HG-- rename : src/org/mockito/internal/MockitoInvocationHandler.java => src/org/mockito/plugins/MockitoInvocationHandler.java", "commit": "\n--- a/src/org/mockito/internal/IMockMaker.java\n+++ b/src/org/mockito/internal/IMockMaker.java\n package org.mockito.internal;\n \n import org.mockito.plugins.MockSettingsInfo;\n+import org.mockito.plugins.MockitoInvocationHandler;\n \n public interface IMockMaker {\n \n      * Returns the handler for the {@code mock}, or null if {@code mock} was not\n      * a mock object created by {@link #createMock}.\n      */\n-    public MockitoInvocationHandler getHandler(Object mock);\n+    MockitoInvocationHandler getHandler(Object mock);\n \n     /**\n      * Replaces the existing handler on {@code mock} with {@code newHandler}.\n      */\n-    public void resetMock(Object mock, MockitoInvocationHandler newHandler,\n+    void resetMock(Object mock, MockitoInvocationHandler newHandler,\n                           MockSettingsInfo settings);\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/Incubating.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Indicates the type or method is work in progress and might chagnge.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Incubating {\n+}\n--- a/src/org/mockito/internal/InvocationNotifierHandler.java\n+++ b/src/org/mockito/internal/InvocationNotifierHandler.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal;\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.listeners.InvocationListener;\n+import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal;\n \n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.stubbing.*;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n+import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n import org.mockito.verification.VerificationMode;\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Callback;\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.internal.IMockMaker;\n-import org.mockito.internal.MockitoInvocationHandler;\n+import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.plugins.MockSettingsInfo;\n \n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n \n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.MockitoInvocationHandler;\n+import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.*;\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n package org.mockito.internal.stubbing.defaultanswers;\n \n import java.io.Serializable;\n-import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n-import java.util.Arrays;\n \n import org.mockito.Mockito;\n-import org.mockito.cglib.proxy.MethodInterceptor;\n-import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.IMockMaker;\n-import org.mockito.internal.MockHandler;\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n \n /**\n     private static final long serialVersionUID = 7618312406617949441L;\n     private static IMockMaker mockMaker = ClassPathLoader.getMockMaker();\n \n-    private final class ThrowingInterceptor extends MockHandler<Object> {\n+    private final class ThrowingInterceptor implements MockitoInvocationHandler {\n         private final InvocationOnMock invocation;\n         private final Location location = new Location();\n \n         private ThrowingInterceptor(InvocationOnMock invocation) {\n-            super(new MockSettingsImpl());\n             this.invocation = invocation;\n         }\n \n         Class<?> type = invocation.getMethod().getReturnType();\n         if (!type.isPrimitive() && !Modifier.isFinal(type.getModifiers())) {\n             ThrowingInterceptor handler = new ThrowingInterceptor(invocation);\n-            return mockMaker.createMock(type, new Class[0], handler, handler.getMockSettings());\n+            return mockMaker.createMock(type, new Class[0], handler, new MockSettingsImpl());\n         }\n         return null;\n     }\n--- a/src/org/mockito/plugins/MockSettingsInfo.java\n+++ b/src/org/mockito/plugins/MockSettingsInfo.java\n \n package org.mockito.plugins;\n \n+import org.mockito.internal.Incubating;\n+\n /**\n- * This API is incubating. It may change.\n- * <p>\n  * Informs about the mock settings\n  */\n+@Incubating\n public interface MockSettingsInfo {\n \n     /**\n--- /dev/null\n+++ b/src/org/mockito/plugins/MockitoInvocationHandler.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.plugins;\n+\n+import java.io.Serializable;\n+\n+import org.mockito.internal.Incubating;\n+import org.mockito.internal.invocation.Invocation;\n+\n+/**\n+ * Handles the invocation on a mock\n+ *\n+ * TODO - should it extend serializable?\n+ */\n+@Incubating\n+public interface MockitoInvocationHandler extends Serializable {\n+\n+    @Incubating\n+    Object handle(Invocation invocation) throws Throwable;\n+\n+}\n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation;\n \n import static org.hamcrest.core.IsInstanceOf.*;\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.internal.MockitoInvocationHandler;\n+import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;", "timestamp": 1327851047, "metainfo": ""}