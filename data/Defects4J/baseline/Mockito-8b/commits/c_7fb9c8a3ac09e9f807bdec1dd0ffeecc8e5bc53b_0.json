{"sha": "7fb9c8a3ac09e9f807bdec1dd0ffeecc8e5bc53b", "log": "File comparison is based on file hashes now.", "commit": "\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/comparison/FileHasher.java\n+package org.mockito.release.comparison;\n+\n+import org.gradle.internal.UncheckedException;\n+import org.mockito.release.util.InputOutput;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class FileHasher {\n+\n+    byte[] hash(File file) {\n+        FileInputStream is = null;\n+        try {\n+            is = new FileInputStream(file);\n+            return hash(is);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Problems creating hash for file: \" + file);\n+        } finally {\n+            InputOutput.closeStream(is);\n+        }\n+    }\n+\n+    private static byte[] hash(InputStream instr) throws IOException {\n+        MessageDigest messageDigest = createMessageDigest(\"MD5\");\n+        byte[] buffer = new byte[4096];\n+        try {\n+            while (true) {\n+                int nread = instr.read(buffer);\n+                if (nread < 0) {\n+                    break;\n+                }\n+                messageDigest.update(buffer, 0, nread);\n+            }\n+        } finally {\n+            instr.close();\n+        }\n+        return messageDigest.digest();\n+    }\n+\n+    private static MessageDigest createMessageDigest(String algorithm) {\n+        try {\n+            return MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+}\n--- a/buildSrc/src/main/groovy/org/mockito/release/comparison/SourceJarComparator.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/comparison/SourceJarComparator.java\n import groovy.lang.Closure;\n \n import java.io.File;\n+import java.util.Arrays;\n \n import static org.mockito.release.util.ArgumentValidation.notNull;\n \n         File left = this.left.call();\n         File right = this.right.call();\n         notNull(left, \"source jar file to compare\", right, \"source jar file to compare\");\n-        return left.length() == right.length();\n+\n+        FileHasher hasher = new FileHasher();\n+        byte[] leftHash = hasher.hash(left);\n+        byte[] rightHash = hasher.hash(right);\n+        return Arrays.equals(leftHash, rightHash);\n     }\n }\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/util/InputOutput.java\n+package org.mockito.release.util;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+/**\n+ * Utility for input/output\n+ */\n+public class InputOutput {\n+\n+    /**\n+     * Closes input, does nothing when input is null\n+     */\n+    public static void closeStream(Closeable closable) {\n+        if (closable != null) {\n+            try {\n+                closable.close();\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"Problems closing stream.\", e);\n+            }\n+        }\n+    }\n+}", "timestamp": 1416072549, "metainfo": ""}