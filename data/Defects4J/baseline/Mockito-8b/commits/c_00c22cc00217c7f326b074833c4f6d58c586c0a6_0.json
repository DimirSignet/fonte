{"sha": "00c22cc00217c7f326b074833c4f6d58c586c0a6", "log": "Moved Answer interface to external package Removed @Override that broke the build  --HG-- rename : src/org/mockito/internal/stubbing/Answer.java => src/org/mockito/stubbing/Answer.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40664", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeImpl;\n-import org.mockito.internal.stubbing.Answer;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Enables mocks creation, verification and stubbing.\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.OngoingStubbing;\n import org.mockito.internal.progress.VerificationModeImpl;\n-import org.mockito.internal.stubbing.Answer;\n import org.mockito.internal.stubbing.Stubber;\n import org.mockito.internal.stubbing.Returns;\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.verification.NumberOfInvocationsVerifier;\n import org.mockito.internal.verification.Verifier;\n import org.mockito.internal.verification.VerifyingRecorder;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Invocation handler set on mock objects.\n--- a/src/org/mockito/internal/progress/OngoingStubbing.java\n+++ b/src/org/mockito/internal/progress/OngoingStubbing.java\n package org.mockito.internal.progress;\n \n import org.mockito.Mockito;\n-import org.mockito.internal.stubbing.Answer;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Stubs with return value or exception. E.g:\n--- a/src/org/mockito/internal/stubbing/DontThrow.java\n+++ b/src/org/mockito/internal/stubbing/DontThrow.java\n package org.mockito.internal.stubbing;\n \n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n @SuppressWarnings(\"unchecked\")\n public class DontThrow extends RuntimeException {\n--- a/src/org/mockito/internal/stubbing/Returns.java\n+++ b/src/org/mockito/internal/stubbing/Returns.java\n package org.mockito.internal.stubbing;\n \n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n public class Returns implements Answer<Object> {\n \n         this(null);\n     }\n \n-    @Override\n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         return value;\n     }\n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n \n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.stubbing.Answer;\n \n @SuppressWarnings(\"unchecked\")\n public class StubbedInvocationMatcher extends InvocationMatcher {\n--- a/src/org/mockito/internal/stubbing/Stubber.java\n+++ b/src/org/mockito/internal/stubbing/Stubber.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.stubbing.Answer;\n \n @SuppressWarnings(\"unchecked\")\n public class Stubber {\n--- a/src/org/mockito/internal/stubbing/ThrowsException.java\n+++ b/src/org/mockito/internal/stubbing/ThrowsException.java\n import org.mockito.exceptions.base.HasStackTraceThrowableWrapper;\n import org.mockito.exceptions.base.StackTraceFilter;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n \n public class ThrowsException implements Answer<Object> {\n \n         this.throwable = throwable;\n     }\n \n-    @Override\n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         Throwable filtered = throwable.fillInStackTrace();\n         filter.filterStackTrace(new HasStackTraceThrowableWrapper(filtered));\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n package org.mockito.internal.stubbing;\n \n import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n \n /**\n  * Stubs void method with an exception. E.g:\n--- /dev/null\n+++ b/src/org/mockito/stubbing/Answer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.stubbing;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Used to answer expected calls.\n+ *\n+ * @param <T> the type to return.\n+ */\n+public interface Answer<T> {\n+    /**\n+     * @param invocation the invocation on the mock.\n+     *\n+     * @return the value to be returned\n+     *\n+     * @throws Throwable the throwable to be thrown\n+     */\n+    T answer(InvocationOnMock invocation) throws Throwable;\n+}\n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n import static org.mockito.Mockito.*;\n import org.mockito.MockitoAnnotations.Mock;\n import org.mockito.TestBase;\n-import org.mockito.internal.stubbing.Answer;\n import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")", "timestamp": 1214822452, "metainfo": ""}