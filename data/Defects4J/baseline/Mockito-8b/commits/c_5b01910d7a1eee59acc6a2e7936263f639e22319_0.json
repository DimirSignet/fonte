{"sha": "5b01910d7a1eee59acc6a2e7936263f639e22319", "log": "Tidied up coverage", "commit": "\n--- a/test/org/mockito/internal/configuration/plugins/PluginFinderTest.java\n+++ b/test/org/mockito/internal/configuration/plugins/PluginFinderTest.java\n import java.io.File;\n \n import static java.util.Arrays.asList;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.when;\n \n public class PluginFinderTest extends TestBase {\n \n \n     @Test public void single_implementation() throws Exception {\n         File f = tmp.newFile();\n+        when(switcher.isEnabled(\"foo.Foo\")).thenReturn(true);\n \n         //when\n         IOUtil.writeText(\"  foo.Foo  \", f);\n         assertEquals(\"foo.Foo\", finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n     }\n \n-    @Test public void multiple_implementations() {\n-        fail();\n+    @Test public void single_implementation_disabled() throws Exception {\n+        File f = tmp.newFile();\n+        when(switcher.isEnabled(\"foo.Foo\")).thenReturn(false);\n+\n+        //when\n+        IOUtil.writeText(\"  foo.Foo  \", f);\n+\n+        //then\n+        assertEquals(null, finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n     }\n \n-    @Test public void multiple_empty_implementations() {\n-        fail();\n+    @Test public void multiple_implementations_only_one_enabled() throws Exception {\n+        File f1 = tmp.newFile(); File f2 = tmp.newFile();\n+\n+        when(switcher.isEnabled(\"Bar\")).thenReturn(true);\n+\n+        //when\n+        IOUtil.writeText(\"Foo\", f1); IOUtil.writeText(\"Bar\", f2);\n+\n+        //then\n+        assertEquals(\"Bar\", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));\n     }\n \n-    @Test public void single_usable_impl() {\n-        fail();\n+    @Test public void multiple_implementations_only_one_useful() throws Exception {\n+        File f1 = tmp.newFile(); File f2 = tmp.newFile();\n+\n+        when(switcher.isEnabled(anyString())).thenReturn(true);\n+\n+        //when\n+        IOUtil.writeText(\"   \", f1); IOUtil.writeText(\"X\", f2);\n+\n+        //then\n+        assertEquals(\"X\", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));\n     }\n \n-    @Test public void problems_loading_impl() {\n-        fail();\n+    @Test public void multiple_empty_implementations() throws Exception {\n+        File f1 = tmp.newFile(); File f2 = tmp.newFile();\n+\n+        when(switcher.isEnabled(anyString())).thenReturn(true);\n+\n+        //when\n+        IOUtil.writeText(\"   \", f1); IOUtil.writeText(\"\\n\", f2);\n+\n+        //then\n+        assertEquals(null, finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));\n+    }\n+\n+    @Test public void problems_loading_impl() throws Exception {\n+        when(switcher.isEnabled(anyString())).thenThrow(new RuntimeException(\"Boo!\"));\n+\n+        try {\n+            //when\n+            finder.findPluginClass((Iterable) asList(new File(\"xxx\").toURI().toURL()));\n+            //then\n+            fail();\n+        } catch(Exception e) {\n+            assertContains(\"xxx\", e.getMessage());\n+            e.getCause().getMessage().equals(\"Boo!\");\n+        }\n     }\n }", "timestamp": 1418426972, "metainfo": ""}