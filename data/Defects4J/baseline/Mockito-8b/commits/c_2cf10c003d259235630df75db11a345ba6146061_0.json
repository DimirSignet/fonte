{"sha": "2cf10c003d259235630df75db11a345ba6146061", "log": "fixed issue #31 (varargs stubbing was incorrect when vararg was just a part of argument list and null was passed as vararg argument.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401076", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n                 && !args[args.length - 1].getClass().isArray()) {\n             return args == null ? new Object[0] : args;\n         }\n-        \n-        //in case someone deliberately passed null varArg array\n-        if (args[args.length - 1] == null) {\n-            return new Object[] {null};\n-        }\n             \n         final int nonVarArgsCount = args.length - 1;\n-        Object[] varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n+        Object[] varArgs;  \n+        if (args[nonVarArgsCount] == null) {\n+            //in case someone deliberately passed null varArg array\n+            varArgs = new Object[] {null};\n+        } else {\n+            varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n+        }\n         final int varArgsCount = varArgs.length;\n         Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];\n         System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n     \n     @Test\n     public void shouldVerifyWithAnyObject() {\n-        Foo myClass = Mockito.mock(Foo.class);\n-        myClass.varArgs(\"\");        \n-        Mockito.verify(myClass).varArgs((String[]) Mockito.anyObject());\n-        Mockito.verify(myClass).varArgs((String) Mockito.anyObject());\n+        Foo foo = Mockito.mock(Foo.class);\n+        foo.varArgs(\"\");        \n+        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n+        Mockito.verify(foo).varArgs((String) Mockito.anyObject());\n     }   \n     \n     @Test\n     public void shouldVerifyWithNullVarArgArray() {\n-        Foo myClass = Mockito.mock(Foo.class);\n-        myClass.varArgs((String[]) null);    \n-        Mockito.verify(myClass).varArgs((String[]) Mockito.anyObject());\n-        Mockito.verify(myClass).varArgs((String[]) null);\n+        Foo foo = Mockito.mock(Foo.class);\n+        foo.varArgs((String[]) null);    \n+        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());\n+        Mockito.verify(foo).varArgs((String[]) null);\n     }  \n     \n     public class Foo {      \n         public void varArgs(String... args) {}       \n     }\n+    \n+    interface MixedVarargs {\n+        String doSomething(String one, String... varargs);\n+        String doSomething(String one, String two, String... varargs);\n+    }\n+\n+    @SuppressWarnings(\"all\")\n+    @Test\n+    //See bug #31\n+    public void shouldStubCorrectlyWhenMixedVarargsUsed() {\n+        MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n+        when(mixedVarargs.doSomething(\"hello\", null)).thenReturn(\"hello\");\n+        when(mixedVarargs.doSomething(\"goodbye\", null)).thenReturn(\"goodbye\");\n+\n+        String result = mixedVarargs.doSomething(\"hello\", null);\n+        assertEquals(\"hello\", result);\n+        \n+        verify(mixedVarargs).doSomething(\"hello\", null);\n+    }\n+    \n+    @SuppressWarnings(\"all\")\n+    @Test\n+    public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed() {\n+        MixedVarargs mixedVarargs = mock(MixedVarargs.class);\n+        when(mixedVarargs.doSomething(\"one\", \"two\", null)).thenReturn(\"hello\");\n+        when(mixedVarargs.doSomething(\"1\", \"2\", null)).thenReturn(\"goodbye\");\n+\n+        String result = mixedVarargs.doSomething(\"one\", \"two\", null);\n+        assertEquals(\"hello\", result);\n+    }\n }", "timestamp": 1225756623, "metainfo": ""}