{"sha": "4436484074d00b49a13f8caca20e5c991850c6a6", "log": "Added argument capturing code into the api  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401367", "commit": "\n--- /dev/null\n+++ b/test/org/mockito/Argument.java\n+/**\n+ * \n+ */\n+package org.mockito;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.Reporter;\n+\n+public class Argument<T> extends ArgumentMatcher<T> {\n+    private LinkedList<Object> arguments = new LinkedList<Object>();\n+\n+    public boolean matches(Object argument) {\n+        this.arguments.add(argument);\n+        return true;\n+    }\n+    \n+    public T capture() {\n+        Mockito.argThat(this);\n+        return null;\n+    }\n+\n+    public T value() {\n+        if (arguments.isEmpty()) {\n+            new Reporter().argumentValueNotYetCaptured();\n+        } else {\n+            //TODO: after 1.7 nice instanceof check here?\n+            return (T) arguments.getLast();\n+        }\n+        return (T) arguments;\n+    }\n+    \n+    public List<T> allValues() {\n+        return (List) arguments;\n+    }\n+}\n--- a/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n+++ b/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n \n import static org.mockito.Mockito.*;\n \n-import java.util.LinkedList;\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.ArgumentMatcher;\n-import org.mockito.Mockito;\n+import org.mockito.Argument;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n public class ArgumentCaptorTest extends TestBase {\n-\n-    public class Argument<T> extends ArgumentMatcher<T> {\n-        private LinkedList<Object> arguments = new LinkedList<Object>();\n-\n-        public boolean matches(Object argument) {\n-            this.arguments.add(argument);\n-            return true;\n-        }\n-        \n-        public T capture() {\n-            Mockito.argThat(this);\n-            return null;\n-        }\n-\n-        public T value() {\n-            if (arguments.isEmpty()) {\n-                assert false;\n-            } else {\n-                //TODO: after 1.7 nice instanceof check here?\n-                return (T) arguments.getLast();\n-            }\n-            return (T) arguments;\n-        }\n-        \n-        public T getLastValue() {\n-            return value();\n-        }\n-\n-        public List<T> allValues() {\n-            return (List) arguments;\n-        }\n-    }\n \n     class Person {\n \n         verify(emailService).sendEmailTo(argument.capture());\n         assertEquals(null, argument.value());\n     }\n+    \n+    @Test\n+    public void shouldSaySomethingSmartWhenMisused() {\n+        Argument<Person> argument = new Argument<Person>();\n+        try {\n+            argument.value();\n+            fail();\n+        } catch (MockitoException e) {\n+            assertContains(\"Argument value has not yet been captured\", e.getMessage());\n+        }\n+    }\n }\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.mockito.Argument;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockitousage.IMethods;\n     public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher() {\n         when(mock.equals(anyObject())).thenReturn(false);\n     }\n+    \n+    @Test\n+    public void shouldShowExampleOfCorrectArgumentCapturing() {\n+        Argument<String> argument = new Argument<String>();\n+        argument.capture();\n+        argument.value();\n+    }\n }", "timestamp": 1241120379, "metainfo": ""}