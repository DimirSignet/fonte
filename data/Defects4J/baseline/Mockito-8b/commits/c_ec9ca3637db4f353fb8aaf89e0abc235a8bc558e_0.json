{"sha": "ec9ca3637db4f353fb8aaf89e0abc235a8bc558e", "log": "Refactoring, new interface to document the capability of containing invocations  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401728", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n-import org.mockito.internal.stubbing.MockitoStubber;\n-import org.mockito.internal.stubbing.OngoingStubbingImpl;\n-import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n-import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n+import org.mockito.internal.stubbing.*;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n         return new VoidMethodStubbableImpl<T>(mock, mockitoStubber);\n     }\n \n-    public List<Invocation> getRegisteredInvocations() {\n-        return mockitoStubber.getInvocations();\n-    }\n-\n-    public List<StubbedInvocationMatcher> getStubbedInvocations() {\n-        return mockitoStubber.getStubbedInvocations();\n-    }\n-\n     public MockSettingsImpl getMockSettings() {\n         return mockSettings;\n     }\n     public void setAnswersForStubbing(List<Answer> answers) {\n         mockitoStubber.setAnswersForStubbing(answers);\n     }\n+\n+    public InvocationContainer getInvocationContainer() {\n+        return mockitoStubber;\n+    }\n }\n--- a/src/org/mockito/internal/MockHandlerInterface.java\n+++ b/src/org/mockito/internal/MockHandlerInterface.java\n \n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n     void setAnswersForStubbing(List<Answer> answers);\n \n-    List<Invocation> getRegisteredInvocations();\n-\n-    List<StubbedInvocationMatcher> getStubbedInvocations();\n+    InvocationContainer getInvocationContainer();\n }\n--- a/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.mockito.internal.MockHandlerInterface;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.ListUtil;\n import org.mockito.internal.util.MockUtil;\n     public List<Invocation> getAllInvocations(List<?> mocks) {\n         Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n         for (Object mock : mocks) {\n-            List<Invocation> fromSingleMock = new MockUtil().getMockHandler(mock).getRegisteredInvocations();\n+            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n+            List<Invocation> fromSingleMock = handler.getInvocationContainer().getInvocations();\n             invocationsInOrder.addAll(fromSingleMock);\n         }\n         \n     public List<Invocation> getAllUnusedStubs(List<?> mocks) {\n         List<Invocation> unused = new LinkedList<Invocation>();\n         for (Object mock : mocks) {\n-            List<StubbedInvocationMatcher> fromSingleMock = new MockUtil().getMockHandler(mock).getStubbedInvocations();\n+            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n+            List<StubbedInvocationMatcher> fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();\n             for(StubbedInvocationMatcher s : fromSingleMock) {\n                 if (!s.wasUsed()) {\n                      unused.add(s.getInvocation());\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/InvocationContainer.java\n+package org.mockito.internal.stubbing;\n+\n+import org.mockito.internal.invocation.Invocation;\n+\n+import java.util.List;\n+\n+//TODO move to different package\n+public interface InvocationContainer {\n+    List<Invocation> getInvocations();\n+\n+    List<StubbedInvocationMatcher> getStubbedInvocations();\n+}\n--- a/src/org/mockito/internal/stubbing/MockitoStubber.java\n+++ b/src/org/mockito/internal/stubbing/MockitoStubber.java\n import org.mockito.stubbing.Answer;\n \n @SuppressWarnings(\"unchecked\")\n-public class MockitoStubber implements Serializable {\n+public class MockitoStubber implements InvocationContainer, Serializable {\n \n     private static final long serialVersionUID = -5334301962749537176L;\n     private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();", "timestamp": 1258316380, "metainfo": ""}