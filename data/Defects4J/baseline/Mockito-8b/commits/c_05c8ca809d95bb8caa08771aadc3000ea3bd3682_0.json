{"sha": "05c8ca809d95bb8caa08771aadc3000ea3bd3682", "log": "javadoc, javadoc, javadoc, javadoc.......  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40400", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n  * To keep it readable you may want to extract method, e.g:\n  * \n  * <pre>\n- *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n+ *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n  *   //becomes\n- *   verify(mock).addAll(listOfTwoElements());\n+ *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n  * </pre>\n  *\n  * Custom argument matchers can make the test less readable. \n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  * \n  * To keep it readable you may want to extract method, e.g:\n  * <pre>\n- *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n+ *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n  *   //becomes\n- *   verify(mock).addAll(listOfTwoElements());\n+ *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n  * </pre>\n  *\n  * Custom argument matchers can make the test less readable. \n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * </li>\n  * <li>\n  * Stubbing can be overridden: for example common stubbing can go to fixture setup\n- * but test methods can override it anyway\n+ * but test methods can override it.\n  * </li>\n  * <li>\n  * Once stubbed, mocked method will always return stubbed value regardless of how many times it is called.\n  * <p>\n  * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be omitted.\n  * \n- * <h3>Stubbing void methods with exceptions</h3>\n+ * <h3>Stubbing void methods with an exceptions</h3>\n  * \n  * <pre>\n  *   stubVoid(mockedList).toThrow(new RuntimeException()).on().clear();\n      * For stubbing void methods with throwables see: {@link Mockito#stubVoid}\n      * <p>\n      * Stubbing can be overridden: for example common stubbing can go to fixture setup\n-     * but test methods can override it anyway \n+     * but test methods can override it.\n      * <p>\n      * Once stubbed, mocked method will always return stubbed value regardless of how many times it is called.\n      * <p>\n     }\n \n     /**\n-     * Verifies certain behavior happened at least once or exact number of times. E.g:\n+     * Verifies certain behavior happened at least once / exact number of times / never. E.g:\n      * <pre>\n      *   verify(mock, times(5)).someMethod(\"was called five times\");\n      *   \n     }\n \n     /**\n-     * Stubs void method with exception. E.g:\n+     * Stubs void method with an exception. E.g:\n      * <pre>\n      *   stubVoid(mock).toThrow(new RuntimeException()).on().someMethod(\"some arg\");\n      * </pre>\n     }\n \n     /**\n-     * Allows exact number of invocations verification. E.g:\n+     * Allows verifying exact number of invocations. E.g:\n      * <pre>\n      *   verify(mock, times(2)).someMethod(\"some arg\");\n      * </pre>\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n import org.mockito.Mockito;\n \n /**\n- * Allows verifying that certain behavior happened at least once or exact number of times. E.g:\n+ * Allows verifying that certain behavior happened at least once / exact number of times / never. E.g:\n  * <pre>\n  *   verify(mock, times(5)).someMethod(\"was called five times\");\n  *   \n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n import org.mockito.Mockito;\n \n /**\n- * Stubs void method with exception. E.g:\n+ * Stubs void method with an exception. E.g:\n  * \n  * <pre>\n  * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();\n public interface VoidMethodStubbable<T> {\n \n     /**\n-     * Stubs void method with exception. E.g:\n+     * Stubs void method with an exception. E.g:\n      * \n      * <pre>\n      * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();", "timestamp": 1204049718, "metainfo": ""}