{"sha": "68a59a0fac18b4cc2879a64d537845a6676b315c", "log": "pulled up VerificationMode interface  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40928", "commit": "\n--- a/src/org/mockito/InOrderVerifier.java\n+++ b/src/org/mockito/InOrderVerifier.java\n     }\n     \n     public <T> T verify(T mock, VerificationMode mode) {\n-        return verify(mock, (VerificationModeImpl) mode);\n-    }\n-    \n-    public <T> T verify(T mock, VerificationModeImpl mode) {\n         if (!mocksToBeVerifiedInOrder.contains(mock)) {\n             reporter.inOrderRequiresFamiliarMock();\n         }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n import org.mockito.internal.progress.DeprecatedOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.NewOngoingStubbing;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockito.internal.stubbing.DoesNothing;\n import org.mockito.internal.stubbing.MockitoStubber;\n             return null;\n         }\n         \n-        VerificationModeImpl verificationMode = mockingProgress.pullVerificationMode();\n+        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n         mockingProgress.validateState();\n \n         Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n import java.util.List;\n \n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.util.ListUtil;\n import org.mockito.internal.util.ListUtil.Filter;\n import org.mockito.internal.verification.VerificationModeDecoder;\n \n public class InvocationsFinder {\n \n-    public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         return ListUtil.filter(invocations, new RemoveNotMatching(wanted));\n     }\n \n      * if wanted is 1 and mode is times(x), where x != 2 then returns\n      * 1,1,1\n      */\n-    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> unverified = removeVerifiedInOrder(invocations);\n         List<Invocation> firstChunk = getFirstMatchingChunk(wanted, unverified);\n         \n         return firstChunk;\n     }\n     \n-    public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         Invocation firstSimilar = null;\n         for (Invocation invocation : invocations) {\n             if (!wanted.hasSimilarMethod(invocation)) {\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n \n     void verificationStarted(VerificationMode verificationMode);\n \n-    VerificationModeImpl pullVerificationMode();\n+    VerificationMode pullVerificationMode();\n \n     void stubbingStarted();\n \n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n     private final Reporter reporter = new Reporter();\n     \n     private OngoingStubbing ongoingStubbing;\n-    private VerificationModeImpl verificationMode;\n+    private VerificationMode verificationMode;\n     private int invocationSequenceNumber = 1;\n     private boolean stubbingInProgress = false;\n \n     \n     public void verificationStarted(VerificationMode verify) {\n         validateState();\n-        verificationMode = (VerificationModeImpl) verify;\n+        verificationMode = (VerificationMode) verify;\n     }\n \n-    public VerificationModeImpl pullVerificationMode() {\n-        VerificationModeImpl temp = verificationMode;\n+    public VerificationMode pullVerificationMode() {\n+        VerificationMode temp = verificationMode;\n         verificationMode = null;\n         return temp;\n     }\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n         threadSafely().verificationStarted(verify);\n     }\n \n-    public VerificationModeImpl pullVerificationMode() {\n+    public VerificationMode pullVerificationMode() {\n         return threadSafely().pullVerificationMode();\n     }\n \n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n  */\n package org.mockito.internal.progress;\n \n+import java.util.List;\n+\n import org.mockito.Mockito;\n+import org.mockito.internal.progress.VerificationModeImpl.Verification;\n \n /**\n- * Allows verifying that certain behavior happened at least once / exact number of times / never. E.g:\n+ * Allows verifying that certain behavior happened at least once / exact number\n+ * of times / never. E.g:\n+ * \n  * <pre>\n- *   verify(mock, times(5)).someMethod(\"was called five times\");\n- *   \n- *   verify(mock, never()).someMethod(\"was never called\");\n-\n- *   verify(mock, atLeastOnce()).someMethod(\"was called at least once\");\n- *   \n- *   verify(mock, atLeast(2)).someMethod(\"was called at least twice\");\n- *   \n+ * verify(mock, times(5)).someMethod(&quot;was called five times&quot;);\n+ * \n+ * verify(mock, never()).someMethod(&quot;was never called&quot;);\n+ * \n+ * verify(mock, atLeastOnce()).someMethod(&quot;was called at least once&quot;);\n+ * \n+ * verify(mock, atLeast(2)).someMethod(&quot;was called at least twice&quot;);\n+ * \n  * </pre>\n  * \n  * <b>times(1) is the default</b> and can be omitted\n  * <p>\n  * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}\n  */\n-public interface VerificationMode {}\n+public interface VerificationMode {\n+\n+    Integer wantedCount();\n+\n+    List<? extends Object> getMocksToBeVerifiedInOrder();\n+\n+    Verification getVerification();\n+}\n--- a/src/org/mockito/internal/progress/VerificationModeImpl.java\n+++ b/src/org/mockito/internal/progress/VerificationModeImpl.java\n     \n     public enum Verification { EXPLICIT, NO_MORE_WANTED, AT_LEAST };\n     \n-    private final int wantedInvocationCount;\n-    private final List<? extends Object> mocksToBeVerifiedInOrder;\n-    private final Verification verification;\n+    final int wantedInvocationCount;\n+    final List<? extends Object> mocksToBeVerifiedInOrder;\n+    final Verification verification;\n     \n     private VerificationModeImpl(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder, Verification verification) {\n         if (verification != Verification.AT_LEAST && wantedNumberOfInvocations < 0) {\n         this.verification = verification;\n     }\n     \n-    public static VerificationModeImpl atLeastOnce() {\n+    public static VerificationMode atLeastOnce() {\n         return atLeast(1);\n     }\n \n-    public static VerificationModeImpl atLeast(int minNumberOfInvocations) {\n+    public static VerificationMode atLeast(int minNumberOfInvocations) {\n         return new VerificationModeImpl(minNumberOfInvocations, Collections.emptyList(), Verification.AT_LEAST);\n     }\n \n-    public static VerificationModeImpl times(int wantedNumberOfInvocations) {\n+    public static VerificationMode times(int wantedNumberOfInvocations) {\n         return new VerificationModeImpl(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n-    public static VerificationModeImpl inOrder(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n+    public static VerificationMode inOrder(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n         assert !mocksToBeVerifiedInOrder.isEmpty();\n         return new VerificationModeImpl(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.EXPLICIT);\n     }\n \n-    public static VerificationModeImpl inOrderAtLeast(int minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n+    public static VerificationMode inOrderAtLeast(int minNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder) {\n         assert !mocksToBeVerifiedInOrder.isEmpty();\n         return new VerificationModeImpl(minNumberOfInvocations, mocksToBeVerifiedInOrder, Verification.AT_LEAST);\n     }\n     \n-    public static VerificationModeImpl noMoreInteractions() {\n+    public static VerificationMode noMoreInteractions() {\n         return new VerificationModeImpl(0, Collections.emptyList(), Verification.NO_MORE_WANTED);\n     }\n \n--- a/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationInOrderVerifier.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class MissingInvocationInOrderVerifier implements Verifier {\n     \n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationModeImpl mode) {\n+    public boolean appliesTo(VerificationMode mode) {\n         return new VerificationModeDecoder(mode).missingMethodInOrderMode();\n     }\n \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n         \n         if (!chunk.isEmpty()) {\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class MissingInvocationVerifier implements Verifier {\n     \n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationModeImpl mode) {\n+    public boolean appliesTo(VerificationMode mode) {\n         return new VerificationModeDecoder(mode).missingMethodMode();\n     }\n \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n         if (actualInvocations.isEmpty()) {\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class NoMoreInvocationsVerifier implements Verifier {\n \n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationModeImpl mode) {\n+    public boolean appliesTo(VerificationMode mode) {\n         VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n         return !decoder.explicitMode() && !decoder.atLeastMode();\n     }\n \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         Invocation unverified = finder.findFirstUnverified(invocations);\n         if (unverified != null) {\n             reporter.noMoreInteractionsWanted(unverified, unverified.getStackTrace());\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class NumberOfInvocationsInOrderVerifier implements Verifier {\n     \n         this.reporter = reporter;\n     }\n     \n-    public boolean appliesTo(VerificationModeImpl mode) {\n+    public boolean appliesTo(VerificationMode mode) {\n         return new VerificationModeDecoder(mode).inOrderMode();\n     }\n \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode);\n         \n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class NumberOfInvocationsVerifier implements Verifier {\n     \n         this.finder = finder;\n     }\n     \n-    public boolean appliesTo(VerificationModeImpl mode) {\n+    public boolean appliesTo(VerificationMode mode) {\n         return new VerificationModeDecoder(mode).exactNumberOfInvocationsMode();\n     }\n     \n-    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted, mode);\n         \n--- a/src/org/mockito/internal/verification/VerificationModeDecoder.java\n+++ b/src/org/mockito/internal/verification/VerificationModeDecoder.java\n package org.mockito.internal.verification;\n \n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeImpl.Verification;\n \n public class VerificationModeDecoder {\n \n-    private final VerificationModeImpl mode;\n+    private final VerificationMode mode;\n \n-    public VerificationModeDecoder(VerificationModeImpl mode) {\n+    public VerificationModeDecoder(VerificationMode mode) {\n         this.mode = mode;\n     }\n \n--- a/src/org/mockito/internal/verification/Verifier.java\n+++ b/src/org/mockito/internal/verification/Verifier.java\n \n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public interface Verifier {\n-    void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode);\n+    void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode);\n \n-    boolean appliesTo(VerificationModeImpl mode);\n+    boolean appliesTo(VerificationMode mode);\n }\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class VerifyingRecorder {\n \n         return registeredInvocations.getVerifiableInvocations();\n     }\n \n-    public void verify(VerificationModeImpl mode) {\n+    public void verify(VerificationMode mode) {\n         verify(null, mode);\n     }\n \n-    public void verify(InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public void verify(InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> invocations;\n         if (new VerificationModeDecoder(mode).inOrderMode()) {\n             invocations = invocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedInOrder());\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeBuilder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Test\n     public void shouldFindMatchingChunk() throws Exception {\n-        VerificationModeImpl inOrderMode = new VerificationModeBuilder().times(2).inOrder();\n+        VerificationMode inOrderMode = new VerificationModeBuilder().times(2).inOrder();\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), inOrderMode);\n         assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n     }\n         Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n         invocations.add(simpleMethodInvocationThree);\n         \n-        VerificationModeImpl atLeastOnceInOrder = new VerificationModeBuilder().inOrder();\n+        VerificationMode atLeastOnceInOrder = new VerificationModeBuilder().inOrder();\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnceInOrder);\n         assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n     }\n         Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n         invocations.add(simpleMethodInvocationThree);\n         \n-        VerificationModeImpl atLeastOnceInOrder = new VerificationModeBuilder().times(100).inOrder();\n+        VerificationMode atLeastOnceInOrder = new VerificationModeBuilder().times(100).inOrder();\n         List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnceInOrder);\n         assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n     }\n--- a/test/org/mockito/internal/progress/MockingProgressImplTest.java\n+++ b/test/org/mockito/internal/progress/MockingProgressImplTest.java\n     public void shouldStartVerificationAndPullVerificationMode() throws Exception {\n         assertNull(mockingProgress.pullVerificationMode());\n         \n-        VerificationModeImpl mode = VerificationModeImpl.times(19);\n+        VerificationMode mode = VerificationModeImpl.times(19);\n         \n         mockingProgress.verificationStarted(mode);\n         \n--- a/test/org/mockito/internal/progress/VerificationModeBuilder.java\n+++ b/test/org/mockito/internal/progress/VerificationModeBuilder.java\n \n     private Integer times = 1;\n \n-    public VerificationModeImpl inOrder() {\n+    public VerificationMode inOrder() {\n         return VerificationModeImpl.inOrder(times, Arrays.asList(new Object()));\n     }\n \n--- a/test/org/mockito/internal/verification/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/InvocationsFinderStub.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n \n class InvocationsFinderStub extends InvocationsFinder {\n     \n     }\n     \n     @Override\n-    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         return validMatchingChunkToReturn;\n     }\n \n     @Override public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted,\n-            VerificationModeImpl mode) {\n+            VerificationMode mode) {\n         this.invocations = invocations;\n         return actualToReturn;\n     }\n     \n-    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         this.invocations = invocations;\n         return similarToReturn;\n     }\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockitoutil.TestBase;\n \n     @Test\n     public void shouldAskFinderForActualInvocations() {\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n-        VerificationModeImpl mode = atLeastOnce();\n+        VerificationMode mode = atLeastOnce();\n         verifier.verify(invocations, wanted, mode);\n         \n         assertSame(invocations, finderStub.invocations);\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeBuilder;\n-import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsVerifierTest extends TestBase {\n     \n     @Test\n     public void shouldReportTooLittleActual() throws Exception {\n-        VerificationModeImpl mode = times(100);\n+        VerificationMode mode = times(100);\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n         verifier.verify(invocations, wanted, mode);\n \n     @Test\n     public void shouldReportWithLastInvocationStackTrace() throws Exception {\n-        VerificationModeImpl mode = times(100);\n+        VerificationMode mode = times(100);\n         Invocation first = new InvocationBuilder().toInvocation();\n         Invocation second = new InvocationBuilder().toInvocation();\n         \n     \n     @Test\n     public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound() throws Exception {\n-        VerificationModeImpl mode = times(100);\n+        VerificationMode mode = times(100);\n         \n         assertTrue(finderStub.actualToReturn.isEmpty());\n         \n     \n     @Test\n     public void shouldReportWithFirstUndesiredInvocationStackTrace() throws Exception {\n-        VerificationModeImpl mode = times(2);\n+        VerificationMode mode = times(2);\n \n         Invocation first = new InvocationBuilder().toInvocation();\n         Invocation second = new InvocationBuilder().toInvocation();\n     \n     @Test\n     public void shouldReportTooManyActual() throws Exception {\n-        VerificationModeImpl mode = times(1);\n+        VerificationMode mode = times(1);\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());\n         \n     \n     @Test\n     public void shouldReportNeverWantedButInvoked() throws Exception {\n-        VerificationModeImpl mode = times(0);\n+        VerificationMode mode = times(0);\n         Invocation invocation = new InvocationBuilder().toInvocation();\n         finderStub.actualToReturn.add(invocation);\n         \n--- a/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n+++ b/test/org/mockito/internal/verification/VerificationModeDecoderTest.java\n import static org.mockito.internal.progress.VerificationModeImpl.*;\n \n import org.junit.Test;\n-import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockitoutil.TestBase;\n \n \n public class VerificationModeDecoderTest extends TestBase {\n     \n-    private VerificationModeDecoder decode(VerificationModeImpl mode) {\n+    private VerificationModeDecoder decode(VerificationMode mode) {\n         return new VerificationModeDecoder(mode);\n     }\n     \n     \n     @Test\n     public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {\n-        VerificationModeImpl mode = atLeastOnce();\n+        VerificationMode mode = atLeastOnce();\n         assertTrue(decode(mode).atLeastMode());\n         \n         mode = times(50);\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.VerificationMode;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n import org.mockitoutil.TestBase;\n     public void shouldVerify() {\n         recorder.recordInvocation(simpleMethod);\n         \n-        VerificationModeImpl mode = VerificationModeImpl.atLeastOnce();\n+        VerificationMode mode = VerificationModeImpl.atLeastOnce();\n         recorder.verify(differentMethod, mode);\n         \n         assertSame(verifierStub.mode, mode);\n     \n     @Test\n     public void shouldVerifyInOrder() {\n-        VerificationModeImpl inOrderMode = new VerificationModeBuilder().inOrder();\n+        VerificationMode inOrderMode = new VerificationModeBuilder().inOrder();\n         recorder.verify(differentMethod, inOrderMode);\n         \n         assertThat(verifierStub.invocations, hasExactlyInOrder(simpleMethod, differentMethod.getInvocation()));\n     class VerifierStub implements Verifier {\n         private List<Invocation> invocations;\n         private CanPrintInMultilines wanted;\n-        private VerificationModeImpl mode;\n-        public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+        private VerificationMode mode;\n+        public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n             this.invocations = invocations;\n             this.wanted = wanted;\n             this.mode = mode;\n         }\n-        public boolean appliesTo(VerificationModeImpl mode) {\n+        public boolean appliesTo(VerificationMode mode) {\n             return true;\n         }\n     }", "timestamp": 1223542208, "metainfo": ""}