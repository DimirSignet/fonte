{"sha": "df409c31b55097c761eb0d844ea1e217cd1e5402", "log": "Added new test for new functionality  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401106", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/ArgumentCaptorTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentCaptorTest extends TestBase {\n+\n+    public class Capture<T> extends ArgumentMatcher<T> {\n+        private Object argument;\n+\n+        public boolean matches(Object argument) {\n+            this.argument = argument;\n+            return true;\n+        }\n+\n+        public T getValue() {\n+            //TODO nice instanceof check ?\n+            return (T) argument;\n+        }\n+    }\n+\n+    class Person {\n+\n+        private final int age;\n+\n+        public Person(int age) {\n+            this.age = age;\n+        }\n+\n+        public int getAge() {\n+            return age;\n+        }\n+    }\n+    \n+    class Foo {\n+     \n+        private IMethods methods;\n+        \n+        public Foo(IMethods methods) {\n+            this.methods = methods;\n+        }\n+\n+        public void bar() {\n+            Person person = new Person(12);\n+            methods.simpleMethod(person);\n+        }\n+    }\n+\n+    private Object capture(Capture<Person> capturedArgument) {\n+        Mockito.argThat(capturedArgument);\n+        return null;\n+    }\n+\n+    @Mock IMethods mock;\n+\n+    //TODO decide on getting capture matcher into Mockito\n+    @Test\n+    public void shouldUseArgumentCaptorInEasyMockStyle() {\n+        Foo foo = new Foo(mock);\n+        foo.bar();\n+        Capture<Person> capturedArgument = new Capture<Person>();\n+        verify(mock).simpleMethod(capture(capturedArgument));\n+        assertEquals(12, capturedArgument.getValue().getAge());\n+    }\n+    \n+    @Ignore(\"assertion idea is not for current release I guess\")\n+    @Test\n+    public void shouldUseAssertor() {\n+        Foo foo = new Foo(mock);\n+        foo.bar();\n+        verify(mock).simpleMethod(argThat(new Assertion<Person>() {\n+            public void asserts(Person person) {\n+                assertEquals(12, person.getAge());\n+            }\n+        }));\n+    }\n+    \n+    public static <T> T argThat(Assertion<T> assertion) {\n+        return null;\n+    }\n+    \n+    public interface Assertion<T> {\n+        void asserts(T object);\n+    }\n+}", "timestamp": 1230480106, "metainfo": ""}