{"sha": "449db8621dd7300993d523faae31e0688fa2f6c9", "log": "names refactoring  --HG-- rename : src/org/mockito/internal/invocation/InvocationsFinder.java => src/org/mockito/internal/invocation/GlobalInvocationsFinder.java rename : src/org/mockito/internal/invocation/ActualInvocationsFinder.java => src/org/mockito/internal/invocation/InvocationsFinder.java rename : test/org/mockito/internal/invocation/ActualInvocationsFinderTest.java => test/org/mockito/internal/invocation/InvocationsFinderTest.java rename : test/org/mockito/internal/verification/ActualInvocationsFinderStub.java => test/org/mockito/internal/verification/InvocationsFinderStub.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40241", "commit": "\n--- a/src/org/mockito/internal/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/AllInvocationsFinder.java\n import java.util.TreeSet;\n \n import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.invocation.GlobalInvocationsFinder;\n \n-public class AllInvocationsFinder implements InvocationsFinder {\n+public class AllInvocationsFinder implements GlobalInvocationsFinder {\n     \n     public List<Invocation> getAllInvocations(List<? extends Object> mocks) {\n         Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/GlobalInvocationsFinder.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.invocation;\n+\n+import java.util.List;\n+\n+public interface GlobalInvocationsFinder {\n+\n+    /**\n+     * gets all invocations from mocks. Invocations are ordered earlier first. \n+     * \n+     * @param mocks\n+     * @return\n+     */\n+    List<Invocation> getAllInvocations(List<? extends Object> mocks);\n+}\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n  */\n package org.mockito.internal.invocation;\n \n+import java.util.LinkedList;\n import java.util.List;\n \n-public interface InvocationsFinder {\n+import org.mockito.internal.progress.VerificationModeImpl;\n+import org.mockito.internal.util.ListUtil;\n+import org.mockito.internal.util.ListUtil.Filter;\n \n-    /**\n-     * gets all invocations from mocks. Invocations are ordered earlier first. \n-     * \n-     * @param mocks\n-     * @return\n-     */\n-    List<Invocation> getAllInvocations(List<? extends Object> mocks);\n+public class InvocationsFinder {\n+\n+    public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+        return ListUtil.filter(invocations, new RemoveNotMatching(wanted));\n+    }\n+\n+    public List<Invocation> findFirstUnverifiedChunk(List<Invocation> invocations, InvocationMatcher wanted) {\n+        List<Invocation> unverified = ListUtil.filter(invocations, new RemoveVerifiedStrictly());\n+        List<Invocation> firstChunk = new LinkedList<Invocation>();\n+        for (Invocation invocation : unverified) {\n+            if (wanted.matches(invocation)) {\n+                firstChunk.add(invocation);\n+            } else if (firstChunk.isEmpty()) {\n+                firstChunk.add(invocation);\n+                break;\n+            } else {\n+                break;\n+            }\n+        }\n+        return firstChunk;\n+    }\n+    \n+    public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+        for (Invocation invocation : invocations) {\n+            String wantedMethodName = wanted.getMethod().getName();\n+            String currentMethodName = invocation.getMethod().getName();\n+            \n+            boolean methodNameEquals = wantedMethodName.equals(currentMethodName);\n+            boolean isUnverified = !invocation.isVerified();\n+            boolean mockIsTheSame = wanted.getInvocation().getMock() == invocation.getMock();\n+            \n+            if (methodNameEquals && isUnverified && mockIsTheSame ) {\n+                return invocation;\n+            }\n+        }\n+        \n+        return findFirstUnverified(invocations, wanted.getInvocation().getMock());\n+    }\n+    \n+    public Invocation findFirstUnverified(List<Invocation> invocations) {\n+        return findFirstUnverified(invocations, null);\n+    }\n+    \n+    Invocation findFirstUnverified(List<Invocation> invocations, Object mock) {\n+        for (Invocation i : invocations) {\n+            boolean mockIsValid = mock == null || mock == i.getMock();\n+            if (!i.isVerified() && mockIsValid) {\n+                return i;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    private class RemoveNotMatching implements Filter<Invocation> {\n+        private final InvocationMatcher wanted;\n+\n+        private RemoveNotMatching(InvocationMatcher wanted) {\n+            this.wanted = wanted;\n+        }\n+\n+        public boolean isOut(Invocation invocation) {\n+            return !wanted.matches(invocation);\n+        }\n+    }\n+\n+    private final class RemoveVerifiedStrictly implements Filter<Invocation> {\n+        public boolean isOut(Invocation invocation) {\n+            return invocation.isVerifiedStrictly();\n+        }\n+    }\n }\n--- a/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/MissingInvocationVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.ActualInvocationsFinder;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsPrinter;\n public class MissingInvocationVerifier implements Verifier {\n     \n     private final Reporter reporter;\n-    private final ActualInvocationsFinder finder;\n+    private final InvocationsFinder finder;\n     \n     public MissingInvocationVerifier() {\n-        this(new ActualInvocationsFinder(), new Reporter());\n+        this(new InvocationsFinder(), new Reporter());\n     }\n     \n-    public MissingInvocationVerifier(ActualInvocationsFinder finder, Reporter reporter) {\n+    public MissingInvocationVerifier(InvocationsFinder finder, Reporter reporter) {\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.ActualInvocationsFinder;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n public class NoMoreInvocationsVerifier implements Verifier {\n \n     private final Reporter reporter;\n-    private final ActualInvocationsFinder finder;\n+    private final InvocationsFinder finder;\n \n     public NoMoreInvocationsVerifier() {\n-        this(new ActualInvocationsFinder(), new Reporter());\n+        this(new InvocationsFinder(), new Reporter());\n     }\n     \n-    public NoMoreInvocationsVerifier(ActualInvocationsFinder finder, Reporter reporter) {\n+    public NoMoreInvocationsVerifier(InvocationsFinder finder, Reporter reporter) {\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.internal.invocation.ActualInvocationsFinder;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n public class NumberOfInvocationsVerifier implements Verifier {\n     \n     private final Reporter reporter;\n-    private final ActualInvocationsFinder finder;\n+    private final InvocationsFinder finder;\n \n     public NumberOfInvocationsVerifier() {\n-        this(new Reporter(), new ActualInvocationsFinder());\n+        this(new Reporter(), new InvocationsFinder());\n     }\n     \n-    NumberOfInvocationsVerifier(Reporter reporter, ActualInvocationsFinder finder) {\n+    NumberOfInvocationsVerifier(Reporter reporter, InvocationsFinder finder) {\n         this.reporter = reporter;\n         this.finder = finder;\n     }\n--- a/src/org/mockito/internal/verification/StrictlyMissingInvocationVerifier.java\n+++ b/src/org/mockito/internal/verification/StrictlyMissingInvocationVerifier.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.ActualInvocationsFinder;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsPrinter;\n public class StrictlyMissingInvocationVerifier implements Verifier {\n     \n     private final Reporter reporter;\n-    private final ActualInvocationsFinder finder;\n+    private final InvocationsFinder finder;\n     \n     public StrictlyMissingInvocationVerifier() {\n-        this(new ActualInvocationsFinder(), new Reporter());\n+        this(new InvocationsFinder(), new Reporter());\n     }\n     \n-    public StrictlyMissingInvocationVerifier(ActualInvocationsFinder finder, Reporter reporter) {\n+    public StrictlyMissingInvocationVerifier(InvocationsFinder finder, Reporter reporter) {\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n \n-    //TODO tests! - do you like the message?\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n         //TODO push to mode\n         if (!mode.strictMode() || mode.wantedCountIsZero()) {\n--- a/src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.internal.invocation.ActualInvocationsFinder;\n+import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeImpl;\n public class StrictlyNumberOfInvocationsVerifier implements Verifier {\n     \n     private final Reporter reporter;\n-    private final ActualInvocationsFinder finder;\n+    private final InvocationsFinder finder;\n     \n     public StrictlyNumberOfInvocationsVerifier() {\n-        this(new ActualInvocationsFinder(), new Reporter());\n+        this(new InvocationsFinder(), new Reporter());\n     }\n     \n-    public StrictlyNumberOfInvocationsVerifier(ActualInvocationsFinder finder, Reporter reporter) {\n+    public StrictlyNumberOfInvocationsVerifier(InvocationsFinder finder, Reporter reporter) {\n         this.finder = finder;\n         this.reporter = reporter;\n     }\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n \n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.invocation.GlobalInvocationsFinder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n public class VerifyingRecorder {\n     private LinkedList<Invocation> registeredInvocations = new LinkedList<Invocation>();\n \n     private final List<? extends Verifier> verifiers;\n-    private final InvocationsFinder invocationsFinder;\n+    private final GlobalInvocationsFinder globalInvocationsFinder;\n \n-    public VerifyingRecorder(InvocationsFinder invocationsFinder, List<? extends Verifier> verifiers) {\n-        this.invocationsFinder = invocationsFinder;\n+    public VerifyingRecorder(GlobalInvocationsFinder globalInvocationsFinder, List<? extends Verifier> verifiers) {\n+        this.globalInvocationsFinder = globalInvocationsFinder;\n         this.verifiers = verifiers;\n     }\n \n     public void verify(InvocationMatcher wanted, VerificationModeImpl mode) {\n         List<Invocation> invocations;\n         if (mode.strictMode()) {\n-            invocations = invocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedStrictly());\n+            invocations = globalInvocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedStrictly());\n         } else {\n             invocations = registeredInvocations;\n         }\n--- /dev/null\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+package org.mockito.internal.invocation;\n+\n+import static java.util.Arrays.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.internal.progress.VerificationModeImpl.*;\n+import static org.mockito.util.ExtraMatchers.*;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.RequiresValidState;\n+\n+\n+public class InvocationsFinderTest extends RequiresValidState {\n+    \n+    private LinkedList<Invocation> invocations = new LinkedList<Invocation>();\n+    private Invocation simpleMethodInvocation;\n+    private Invocation simpleMethodInvocationTwo;\n+    private Invocation differentMethodInvocation;\n+    private InvocationsFinder finder;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        simpleMethodInvocation = new InvocationBuilder().simpleMethod().seq(1).toInvocation();\n+        simpleMethodInvocationTwo = new InvocationBuilder().simpleMethod().seq(2).toInvocation();\n+        differentMethodInvocation = new InvocationBuilder().differentMethod().seq(3).toInvocation();\n+        invocations.addAll(Arrays.asList(simpleMethodInvocation, simpleMethodInvocationTwo, differentMethodInvocation));\n+        finder = new InvocationsFinder();\n+    }\n+\n+    @Test\n+    public void shouldFindActualInvocations() throws Exception {\n+        List<Invocation> actual = finder.findInvocations(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertThat(actual, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n+        \n+        actual = finder.findInvocations(invocations, new InvocationMatcher(differentMethodInvocation), atLeastOnce());\n+        assertThat(actual, collectionHasExactlyInOrder(differentMethodInvocation));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstUnverifiedChunk() throws Exception {\n+        List<Invocation> unverified = finder.findFirstUnverifiedChunk(invocations, new InvocationMatcher(simpleMethodInvocation));\n+        \n+        assertThat(unverified, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstChunkAndSkipVerifiedInvocations() throws Exception {\n+        simpleMethodInvocation.markVerifiedStrictly();\n+        simpleMethodInvocationTwo.markVerifiedStrictly();\n+        \n+        List<Invocation> unverified = finder.findFirstUnverifiedChunk(invocations, new InvocationMatcher(simpleMethodInvocation));\n+        \n+        assertThat(unverified, collectionHasExactlyInOrder(differentMethodInvocation));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstChunkAndSkipAllInvocations() throws Exception {\n+        simpleMethodInvocation.markVerifiedStrictly();\n+        simpleMethodInvocationTwo.markVerifiedStrictly();\n+        differentMethodInvocation.markVerifiedStrictly();\n+        \n+        List<Invocation> unverified = finder.findFirstUnverifiedChunk(invocations, new InvocationMatcher(simpleMethodInvocation));\n+        \n+        assertTrue(unverified.isEmpty());\n+    }\n+    \n+    @Test\n+    public void shouldFindAllInvocationsBecauseAllMatch() throws Exception {\n+        List<Invocation> unverified = finder.findFirstUnverifiedChunk(\n+                asList(simpleMethodInvocation, simpleMethodInvocationTwo), new InvocationMatcher(simpleMethodInvocation));\n+        \n+        assertThat(unverified, collectionHasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n+    }\n+    \n+    @Test\n+    public void shouldReturnFirstUnverifiedInvocationIfNoMatchesFound() throws Exception {\n+        List<Invocation> unverified = finder.findFirstUnverifiedChunk(\n+                asList(differentMethodInvocation), new InvocationMatcher(simpleMethodInvocation));\n+        \n+        assertThat(unverified, collectionHasExactlyInOrder(differentMethodInvocation));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstUnverifiedInvocation() throws Exception {\n+        assertSame(simpleMethodInvocation, finder.findFirstUnverified(invocations));\n+        \n+        simpleMethodInvocationTwo.markVerified();\n+        simpleMethodInvocation.markVerified();\n+        \n+        assertSame(differentMethodInvocation, finder.findFirstUnverified(invocations));\n+        \n+        differentMethodInvocation.markVerified();\n+        assertNull(finder.findFirstUnverified(invocations));\n+    }\n+    \n+    @Test\n+    public void shouldFindFirstUnverifiedInvocationOnMock() throws Exception {\n+        assertSame(simpleMethodInvocation, finder.findFirstUnverified(invocations, simpleMethodInvocation.getMock()));\n+        assertNull(finder.findFirstUnverified(invocations, \"different mock\"));\n+    }\n+    \n+    @Test\n+    public void shouldFindSimilarInvocationByName() throws Exception {\n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertSame(found, simpleMethodInvocation);\n+    }\n+    \n+    @Test\n+    public void shouldFindSimilarUnverifiedInvocationByName() throws Exception {\n+        simpleMethodInvocation.markVerified();\n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertSame(found, simpleMethodInvocationTwo);\n+    }\n+    \n+    @Test\n+    public void shouldFindSimilarInvocationByGettingFirstUnverified() throws Exception {\n+        simpleMethodInvocation.markVerified();\n+        simpleMethodInvocationTwo.markVerified();\n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertSame(found, differentMethodInvocation);\n+    }\n+    \n+    @Test\n+    public void shouldNotFindSimilarInvocationBecauseAllAreVerified() throws Exception {\n+        simpleMethodInvocation.markVerified();\n+        simpleMethodInvocationTwo.markVerified();\n+        differentMethodInvocation.markVerified();\n+        \n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertNull(found);\n+    }\n+    \n+    @Test\n+    public void shouldLookForSimilarInvocationsOnlyOnTheSameMock() throws Exception {\n+        Invocation onDifferentMock = new InvocationBuilder().simpleMethod().mock(\"different mock\").toInvocation();\n+        invocations.addFirst(onDifferentMock);\n+        \n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertNotSame(onDifferentMock, found);\n+    }    \n+    \n+    @Test\n+    public void shouldReturnLastUnverifiedFromTheSameMockOnly() throws Exception {\n+        Invocation onDifferentMock = new InvocationBuilder().simpleMethod().mock(\"different mock\").toInvocation();\n+        invocations.addFirst(onDifferentMock);\n+\n+        simpleMethodInvocation.markVerified();\n+        simpleMethodInvocationTwo.markVerified();\n+        \n+        Invocation found = finder.findSimilarInvocation(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnce());\n+        assertNotSame(onDifferentMock, found);\n+    }  \n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/verification/InvocationsFinderStub.java\n+/*\n+ * Copyright (c) 2007, Szczepan Faber. \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.progress.VerificationModeImpl;\n+\n+class InvocationsFinderStub extends InvocationsFinder {\n+    \n+    Invocation similarToReturn;\n+    final List<Invocation> actualToReturn = new LinkedList<Invocation>();\n+    List<Invocation> invocations;\n+    Invocation firstUnverifiedToReturn;\n+\n+    @Override public List<Invocation> findInvocations(List<Invocation> invocations, InvocationMatcher wanted,\n+            VerificationModeImpl mode) {\n+        this.invocations = invocations;\n+        return actualToReturn;\n+    }\n+    \n+    @Override public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {\n+        this.invocations = invocations;\n+        return similarToReturn;\n+    }\n+    \n+    @Override public Invocation findFirstUnverified(List<Invocation> invocations) {\n+        this.invocations = invocations;\n+        return firstUnverifiedToReturn;\n+    }\n+}\n--- a/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationVerifierTest.java\n \n     private MissingInvocationVerifier verifier;\n     \n-    private ActualInvocationsFinderStub finderStub;\n+    private InvocationsFinderStub finderStub;\n     private ReporterStub reporterStub;\n     \n     private InvocationMatcher wanted;\n     @Before\n     public void setup() {\n         reporterStub = new ReporterStub();\n-        finderStub = new ActualInvocationsFinderStub();\n+        finderStub = new InvocationsFinderStub();\n         verifier = new MissingInvocationVerifier(finderStub, reporterStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n public class NoMoreInvocationsVerifierTest extends RequiresValidState {\n \n     private NoMoreInvocationsVerifier verifier;\n-    private ActualInvocationsFinderStub finder;\n+    private InvocationsFinderStub finder;\n     private ReporterStub reporterStub;\n \n     @Before\n     public void setup() {\n-        finder = new ActualInvocationsFinderStub();\n+        finder = new InvocationsFinderStub();\n         reporterStub = new ReporterStub();\n         verifier = new NoMoreInvocationsVerifier(finder, reporterStub);\n     }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n     private ReporterStub reporterStub;\n     private InvocationMatcher wanted;\n     private LinkedList<Invocation> invocations;\n-    private ActualInvocationsFinderStub finderStub;\n+    private InvocationsFinderStub finderStub;\n     \n     @Before\n     public void setup() {\n         reporterStub = new ReporterStub();\n-        finderStub = new ActualInvocationsFinderStub();\n+        finderStub = new InvocationsFinderStub();\n         verifier = new NumberOfInvocationsVerifier(reporterStub, finderStub);\n         \n         wanted = new InvocationBuilder().toInvocationMatcher();\n--- a/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n+++ b/test/org/mockito/internal/verification/VerifyingRecorderTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.invocation.GlobalInvocationsFinder;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.progress.VerificationModeImpl;\n \n     @Before\n     public void setup() {\n         verifierStub = new VerifierStub();\n-        recorder = new VerifyingRecorder(new InvocationsFinder() {\n+        recorder = new VerifyingRecorder(new GlobalInvocationsFinder() {\n             public List<Invocation> getAllInvocations(List<? extends Object> mocks) {\n                 return asList(simpleMethod, differentMethod.getInvocation());\n             }}, asList(verifierStub));", "timestamp": 1198704229, "metainfo": ""}