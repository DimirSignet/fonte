{"sha": "383bbee7be6d5e79fae8afc0eacc5eba2f274105", "log": "Tuned the javadocs around Serialization  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401688", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n     @SuppressWarnings(\"unchecked\")\n     MockSettings defaultAnswer(Answer defaultAnswer);\n \n-    //TODO: javadoc\n+    /**\n+     * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n+     * <p>\n+     * WARNING: This should be rarely used in unit testing.\n+     * <p>\n+     * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n+     * was in a web environment and the objects from the external dependency were being serialized to pass between layers.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     *   List serializableMock = mock(List.class, withSettings().serializable());\n+     * </pre>\n+     *\n+     * @return settings instance so that you can fluently specify other settings\n+     */\n     MockSettings serializable();\n-    \n }\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * \n  * <h3 id=\"20\">20. (**New**) Serializable mocks</h3>\n  * \n- * With this feature you can use a mock in a place that requires dependencies to be serializable.\n- * <p>\n- * TODO: tune\n- * WARNING: This should rarely be used.  If you are unit testing it should be rare that you need this behaviour. \n+ * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n+ * <p>\n+ * WARNING: This should be rarely used in unit testing. \n  * <p>\n  * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n  * was in a web environment and the objects from the external dependency were being serialized to pass between layers. \n  * <p>\n- * To create a mock that can be serialized the interface or class must implement the Serializable interface OR use the\n- * {@link #withSettings().extraInterfaces(Serializable.class)}.  When creating the mock for the interface or class use the\n- * withSettings().serializable() {@link org.mockito.MockSettings}.  \n- * \n- * <pre>\n- * YourClass mock = mock(YourClass.class, withSettings().extraInterfaces(Serializable.class).serializable());\n- * </pre>\n- * \n- * In the above example the first MockSettings that is added is the Serialiable interface.  If your class or interface\n- * implements Serializable this is not needed.  The second MockSettings, .serializable(), tells mockito to use internal\n- * classes that can be serialized.\n- * <p>\n- * The above mock can be serialized assuming all the normal <a href='http://www.uni-muenster.de/ZIV.BennoSueselbeck/java/jdk1.5.0_01/docs/api/java/io/Serializable.html'>\n- * serialization requirements</a> are met by the interface or class.\n+ * To create serializable mock use {@link #withSettings().serializable()}:\n+ * <pre>\n+ *   List serializableMock = mock(List.class, withSettings().serializable());\n+ * </pre>\n+ * <p>\n+ * The mock can be serialized assuming all the normal <a href='http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html'>\n+ * serialization requirements</a> are met by the class.\n  * <p>\n  * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version \n- * which accepts MockSettings.  But no worries you simply use the same MockSettings that the spy(...) method uses plus the \n- * serializable setting.\n+ * which accepts MockSettings. No worries, you will hardly ever use it.\n  * \n  * <pre>\n  * List<Object> list = new ArrayList<Object>();\n  *                 .defaultAnswer(CALLS_REAL_METHODS)\n  *                 .serializable());\n  * </pre>\n- * \n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {", "timestamp": 1257942678, "metainfo": ""}