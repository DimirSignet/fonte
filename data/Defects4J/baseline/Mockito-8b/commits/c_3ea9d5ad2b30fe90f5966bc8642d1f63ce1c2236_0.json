{"sha": "3ea9d5ad2b30fe90f5966bc8642d1f63ce1c2236", "log": "fixed warnings (removed dead code, etc)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401102", "commit": "\n--- a/src/org/mockito/exceptions/base/StackTraceFilter.java\n+++ b/src/org/mockito/exceptions/base/StackTraceFilter.java\n         boolean fromMockObject = e.getClassName().contains(\"$$EnhancerByMockitoWithCGLIB$$\");\n         boolean fromOrgMockito = e.getClassName().startsWith(\"org.mockito.\");\n         //boolean isRunner = e.getClassName().startsWith(\"org.mockito.runners.\");\n-        return fromMockObject || fromOrgMockito;//) && !isRunner;\n+        //) && !isRunner;\n+        return fromMockObject || fromOrgMockito;\n     }\n \n     public void filterStackTrace(HasStackTrace hasStackTrace) {\n--- a/src/org/mockito/internal/debugging/DebuggingInfo.java\n+++ b/src/org/mockito/internal/debugging/DebuggingInfo.java\n public class DebuggingInfo {\n \n     private final List<Invocation> unusedStubs = new LinkedList<Invocation>();\n-    private final String test;\n+    private final String testName;\n \n-    public DebuggingInfo(String test) {\n-        this.test = test;\n+    public DebuggingInfo(String testName) {\n+        this.testName = testName;\n     }\n \n     public void addUnusedStub(Invocation invocation) {\n--- a/src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java\n         @Override\n         public void testFailure(Failure failure) throws Exception {\n             DebuggingInfo debuggingInfo = new DebuggingInfo(failure.getTestHeader());\n-            Throwable e = failure.getException();\n             List<Invocation> stubbedInvocations = progress.pullStubbedInvocations();\n             for (Invocation invocation : stubbedInvocations) {\n                 if (!invocation.isVerified()) {\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n \n import static org.mockito.Mockito.*;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n     public void testSomething() {\n     }\n \n+    @Ignore\n     @Test\n     public void shouldFailButOnlyWhenIAssertReturnValueAndIWantToKnowWhy() throws Throwable {\n         ReadFromSomeFileSystem reader = mock(ReadFromSomeFileSystem.class);\n         byte[] bytes = controller.naughtyMethodUnderTestWhichDoesNotFailBecauseItReturnsAValue(filename);\n \n //        try {\n-//        assertNotNull(\"Should have returned some bytes, i am HUNGRY!\", bytes);\n+        assertNotNull(\"Should have returned some bytes, i am HUNGRY!\", bytes);\n //        } catch (Error ex) {\n //            verify(reader).readFromFile(filename);\n //            // i want to replace this bit with something like \"verifyAllTheThingsIStubbed(mock)\"", "timestamp": 1229864981, "metainfo": ""}