{"sha": "f6188a60e3ead959d02416c83756524db5842b48", "log": "cosmetic changes, added some initial code to work on one weird bug  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401365", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/ThreadReuseTest.java\n+package org.mockitousage;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockitoutil.TestBase;\n+\n+@RunWith(org.mockito.runners.MockitoJUnit44Runner.class)\n+@SuppressWarnings(\"unchecked\")\n+@Ignore(\"this issue is a little bit unclear to me. Let's wait until we have some more data\")\n+public class ThreadReuseTest extends TestBase {\n+    \n+    private static ThreadLocal<Class> l = new ThreadLocal<Class>();\n+    @Mock IMethods mock;\n+\n+    @Test(timeout = 100)\n+    public void test1() throws Exception {\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+        assertNull(l.get());\n+        l.set(getClass());\n+    }\n+\n+    @Test\n+    public void test2() throws Exception {\n+        System.out.println(mock.simpleMethod());\n+        assertNull(l.get());\n+        l.set(getClass());\n+    }\n+\n+    @Test(timeout = 100)\n+    public void test3() throws Exception {\n+        doThrow(new RuntimeException()).when(mock).voidMethod();\n+        assertNull(l.get());\n+        l.set(getClass());\n+    }\n+\n+    @Test(timeout = 100)\n+    public void test4() throws Exception {\n+        mock.voidMethod();\n+        assertNull(l.get());\n+        l.set(getClass());\n+    }\n+\n+//    @Test\n+//    public void test5() throws Exception {\n+//        when(mock.simpleMethod()).thenReturn(\"bar\");\n+//        assertNull(l.get());\n+//        l.set(getClass());\n+//    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.matchers;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentMatchingWithFancyAssertionsTest extends TestBase {\n+\n+    class Person {\n+\n+        private final int age;\n+\n+        public Person(int age) {\n+            this.age = age;\n+        }\n+\n+        public int getAge() {\n+            return age;\n+        }\n+    }\n+    \n+    class Foo {\n+     \n+        private IMethods methods;\n+        \n+        public Foo(IMethods methods) {\n+            this.methods = methods;\n+        }\n+\n+        public void bar() {\n+            Person person = new Person(12);\n+            methods.simpleMethod(person);\n+        }\n+    }\n+\n+    @Mock IMethods mock;\n+\n+    @Ignore(\"assertion idea is not for current release I guess\")\n+    @Test\n+    public void shouldUseAssertor() {\n+        Foo foo = new Foo(mock);\n+        foo.bar();\n+        verify(mock).simpleMethod(argThat(new Assertion<Person>() {\n+            public void asserts(Person person) {\n+                assertEquals(12, person.getAge());\n+            }\n+        }));\n+    }\n+    \n+    public static <T> T argThat(Assertion<T> assertion) {\n+        return null;\n+    }\n+    \n+    public interface Assertion<T> {\n+        void asserts(T object);\n+    }\n+}", "timestamp": 1241113522, "metainfo": ""}