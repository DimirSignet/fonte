{"sha": "3b1f415288dbf1489ee00c8e883feb24bfac4a24", "log": "Added some functional tests Renames  --HG-- rename : test/org/mockitousage/debugging/DebuggingTestCasesTest.java => test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java rename : test/org/mockitousage/debugging/DebuggingTestCasesTest.java => test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401735", "commit": "\n--- a/src/org/mockito/MockitoDebugger.java\n+++ b/src/org/mockito/MockitoDebugger.java\n package org.mockito;\n \n public interface MockitoDebugger {\n-    void printInvocations(Object ... mocks);\n+    String printInvocations(Object ... mocks);\n }\n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n package org.mockito.internal.debugging;\n \n-    import org.mockito.MockitoDebugger;\n-    import org.mockito.internal.invocation.AllInvocationsFinder;\n-    import org.mockito.internal.invocation.Invocation;\n+import org.mockito.MockitoDebugger;\n+import org.mockito.internal.invocation.AllInvocationsFinder;\n+import org.mockito.internal.invocation.Invocation;\n \n-    import java.util.List;\n+import java.util.List;\n \n-    import static java.util.Arrays.*;\n+import static java.util.Arrays.*;\n \n-    public class MockitoDebuggerImpl implements MockitoDebugger {\n-        public void printInvocations(Object ... mocks) {\n-            AllInvocationsFinder finder = new AllInvocationsFinder();\n-            List<Invocation> invocations = finder.getAllInvocations(asList(mocks));\n-            System.out.println(\"********************************\");\n-            System.out.println(\"*** Mockito interactions log ***\");\n-            System.out.println(\"********************************\");\n-            for(Invocation i:invocations) {\n-                System.out.println(i.toString());\n-                System.out.println(\" invoked: \" + i.getLocation());\n-                if (i.stubInfo() != null) {\n-                    System.out.println(\" stubbed: \" + i.stubInfo().stubbedAt());\n-                }\n-            }\n-            invocations = finder.getAllUnusedStubs(asList(mocks));\n-            if (invocations.isEmpty()) {\n-                return;\n-            }\n-            System.out.println(\"********************************\");\n-            System.out.println(\"***       Unused stubs       ***\");\n-            System.out.println(\"********************************\");\n-            invocations = finder.getAllUnusedStubs(asList(mocks));\n-            for(Invocation i:invocations) {\n-                System.out.println(i.toString());\n-                System.out.println(\" stubbed: \" + i.getLocation());\n+public class MockitoDebuggerImpl implements MockitoDebugger {\n+    public String printInvocations(Object ... mocks) {\n+        String out = \"\";\n+        AllInvocationsFinder finder = new AllInvocationsFinder();\n+        List<Invocation> invocations = finder.getAllInvocations(asList(mocks));\n+        out += line(\"********************************\");\n+        out += line(\"*** Mockito interactions log ***\");\n+        out += line(\"********************************\");\n+        for(Invocation i:invocations) {\n+            out += line(i.toString());\n+            out += line(\" invoked: \" + i.getLocation());\n+            if (i.stubInfo() != null) {\n+                out += line(\" stubbed: \" + i.stubInfo().stubbedAt());\n             }\n         }\n+        invocations = finder.getAllUnusedStubs(asList(mocks));\n+        if (invocations.isEmpty()) {\n+            return print(out);\n+        }\n+        out += line(\"********************************\");\n+        out += line(\"***       Unused stubs       ***\");\n+        out += line(\"********************************\");\n+        invocations = finder.getAllUnusedStubs(asList(mocks));\n+        for(Invocation i:invocations) {\n+            out += line(i.toString());\n+            out += line(\" stubbed: \" + i.getLocation());\n+        }\n+        return print(out);\n+    }\n+\n+    private String line(String text) {\n+        return text + \"\\n\";\n+    }\n+\n+    private String print(String out) {\n+        System.out.println(out);\n+        return out;\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/debugging/Foo.java\n+package org.mockitousage.debugging;\n+\n+interface Foo {\n+    String giveMeSomeString(String param);\n+    void doSomething(String param);\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java\n+package org.mockitousage.debugging;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.BDDMockito.*;\n+\n+public class PrintingInvocationsWhenEverythingOkTest extends TestBase {\n+\n+    @Mock Foo mock;\n+    @Mock Foo mockTwo;\n+\n+    @Test\n+    public void shouldPrintInvocationsWhenStubbingNotUsed() throws Exception {\n+        //given\n+        performStubbing();\n+        //when\n+        businessLogicWithAsking(\"arg\");\n+        //then\n+        verify(mockTwo).doSomething(\"foo\");\n+    }\n+\n+    private void performStubbing() {\n+        given(mock.giveMeSomeString(\"arg\")).willReturn(\"foo\");\n+    }\n+\n+    private void businessLogicWithAsking(String name) {\n+        String out = mock.giveMeSomeString(name);\n+        businessLogicWithTelling(out);\n+    }\n+\n+    private void businessLogicWithTelling(String out) {\n+        mockTwo.doSomething(out);\n+    }\n+\n+    @After\n+    public void printInvocations() {\n+        String log = Mockito.debug().printInvocations(mock, mockTwo);\n+        //asking\n+        assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n+        assertContains(\".businessLogicWithAsking(\", log);\n+        //telling\n+        assertContains(\"doSomething(\\\"foo\\\")\", log);\n+        assertContains(\".businessLogicWithTelling(\", log);\n+        //stubbing\n+        assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n+        assertContains(\".performStubbing(\", log);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java\n+package org.mockitousage.debugging;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.BDDMockito.*;\n+\n+public class PrintingInvocationsWhenStubNotUsedTest extends TestBase {\n+\n+    Foo mock = mock(Foo.class);\n+    Foo mockTwo = mock(Foo.class);\n+\n+    @Test(expected = ArgumentsAreDifferent.class)\n+    public void shouldPrintInvocationsWhenStubbingNotUsed() throws Exception {\n+        //given\n+        performStubbing();\n+        //when\n+        businessLogicWithAsking(\"arg\");\n+        //then\n+        verify(mockTwo).doSomething(\"foo\");\n+    }\n+\n+    private void performStubbing() {\n+        given(mock.giveMeSomeString(\"different arg\")).willReturn(\"foo\");\n+    }\n+\n+    private void businessLogicWithAsking(String name) {\n+        String out = mock.giveMeSomeString(name);\n+        businessLogicWithTelling(out);\n+    }\n+\n+    private void businessLogicWithTelling(String out) {\n+        mockTwo.doSomething(out);\n+    }\n+\n+    @After\n+    public void printInvocations() {\n+        String log = Mockito.debug().printInvocations(mock, mockTwo);\n+        //asking\n+        assertContains(\"giveMeSomeString(\\\"arg\\\")\", log);\n+        assertContains(\".businessLogicWithAsking(\", log);\n+        //telling\n+        assertContains(\"doSomething(null)\", log);\n+        assertContains(\".businessLogicWithTelling(\", log);\n+        //stubbing\n+        assertContains(\"giveMeSomeString(\\\"different arg\\\")\", log);\n+        assertContains(\".performStubbing(\", log);\n+    }\n+}", "timestamp": 1258316484, "metainfo": ""}