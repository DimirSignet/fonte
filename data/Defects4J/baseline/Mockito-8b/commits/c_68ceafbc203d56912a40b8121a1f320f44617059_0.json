{"sha": "68ceafbc203d56912a40b8121a1f320f44617059", "log": "Added some javadocs Made BDDMockito a part of main package  --HG-- rename : test/org/mockitousage/customization/BDDMockito.java => src/org/mockito/BDDMockito.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401460", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/BDDMockito.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.mockito.internal.progress.NewOngoingStubbing;\n+import org.mockito.internal.stubbing.Stubber;\n+import org.mockito.stubbing.Answer;\n+\n+/**\n+ * Behavior Driven Development style of stubbing that integrates nicely with //given //when //then comments.\n+ * Start learning about BDD here: <link href=\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\">http://en.wikipedia.org/wiki/Behavior_Driven_Development</link>\n+ * <p>\n+ * The entire test can look like:  \n+ * <pre>\n+ * public void shouldBuyBread() throws Exception {\n+ *   //given\n+ *   given(seller.askForBread()).willReturn(new Bread());\n+ *   \n+ *   //when\n+ *   Goods goods = shopping.shopForBread();\n+ *   \n+ *   //then\n+ *   assertThat(goods, containBread());\n+ * }  \n+ * </pre>\n+ * \n+ * Stubbing voids with throwables:\n+ * <pre>\n+ *   //given\n+ *   willThrow(new RuntimeException(\"boo\")).given(mock).foo();\n+ *   \n+ *   //when\n+ *   Result result = systemUnderTest.perform();\n+ *   \n+ *   //then\n+ *   assertEquals(failure, result);\n+ * </pre>\n+ * <p>\n+ * BDDMockito also shows how you can adjust the mocking syntax if you feel like \n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class BDDMockito extends Mockito {\n+    \n+    /**\n+     * See original {@link NewOngoingStubbing}\n+     */\n+    public static interface BDDMyOngoingStubbing<T> {\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenAnswer(Answer)}\n+         */\n+        BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer);\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenReturn(Object)}\n+         */\n+        BDDMyOngoingStubbing<T> willReturn(T value);\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenReturn(Object, Object...)}\n+         */\n+        BDDMyOngoingStubbing<T> willReturn(T value, T... values);\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenThrow(Throwable...)}\n+         */\n+        BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);\n+    }\n+    \n+    public static class BDDOngoingStubbingImpl<T> implements BDDMyOngoingStubbing<T> {\n+\n+        private final NewOngoingStubbing<T> mockitoOngoingStubbing;\n+\n+        public BDDOngoingStubbingImpl(NewOngoingStubbing<T> ongoingStubbing) {\n+            this.mockitoOngoingStubbing = ongoingStubbing;\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willAnswer(org.mockito.stubbing.Answer)\n+         */\n+        public BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenAnswer(answer));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object)\n+         */\n+        public BDDMyOngoingStubbing<T> willReturn(T value) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object, T[])\n+         */\n+        public BDDMyOngoingStubbing<T> willReturn(T value, T... values) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value, values));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Throwable[])\n+         */\n+        public BDDMyOngoingStubbing<T> willThrow(Throwable... throwables) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwables));\n+        }\n+    }\n+    \n+    /**\n+     * see original {@link Mockito#when(Object)}\n+     */\n+    public static <T> BDDMyOngoingStubbing<T> given(T methodCall) {\n+        return new BDDOngoingStubbingImpl<T>(Mockito.when(methodCall));\n+    }\n+    \n+    /**\n+     * See original {@link Stubber}\n+     */\n+    public static interface BDDStubber {\n+        /**\n+         * See original {@link Stubber#doAnswer(Answer)}\n+         */\n+        BDDStubber willAnswer(Answer answer);\n+        \n+        /**\n+         * See original {@link Stubber#doNothing()}\n+         */\n+        BDDStubber willNothing();\n+        \n+        /**\n+         * See original {@link Stubber#doReturn(Object)}\n+         */\n+        BDDStubber willReturn(Object toBeReturned);\n+        \n+        /**\n+         * See original {@link Stubber#doThrow(Throwable)}\n+         */\n+        BDDStubber willThrow(Throwable toBeThrown);\n+        \n+        /**\n+         * See original {@link Stubber#when(Object)}\n+         */\n+        <T> T given(T mock);\n+    }\n+    \n+    public static class BDDStubberImpl implements BDDStubber {\n+\n+        private final Stubber mockitoStubber;\n+\n+        public BDDStubberImpl(Stubber mockitoStubber) {\n+            this.mockitoStubber = mockitoStubber;\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#given(java.lang.Object)\n+         */\n+        public <T> T given(T mock) {\n+            return mockitoStubber.when(mock);\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willAnswer(org.mockito.stubbing.Answer)\n+         */\n+        public BDDStubber willAnswer(Answer answer) {\n+            return new BDDStubberImpl(mockitoStubber.doAnswer(answer));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willNothing()\n+         */\n+        public BDDStubber willNothing() {\n+            return new BDDStubberImpl(mockitoStubber.doNothing());\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willReturn(java.lang.Object)\n+         */\n+        public BDDStubber willReturn(Object toBeReturned) {\n+            return new BDDStubberImpl(mockitoStubber.doReturn(toBeReturned));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willThrow(java.lang.Throwable)\n+         */\n+        public BDDStubber willThrow(Throwable toBeThrown) {\n+            return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n+        }\n+    }\n+    \n+    /**\n+     * see original {@link Mockito#doThrow(Throwable)}\n+     */\n+    public static BDDStubber willThrow(Throwable toBeThrown) {\n+        return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n+    }\n+    \n+    /**\n+     * see original {@link Mockito#doAnswer(Answer)}\n+     */\n+    public static BDDStubber willAnswer(Answer answer) {\n+        return new BDDStubberImpl(Mockito.doAnswer(answer));\n+    }  \n+    \n+    /**\n+     * see original {@link Mockito#doNothing()}\n+     */\n+    public static BDDStubber willDoNothing() {\n+        return new BDDStubberImpl(Mockito.doNothing());\n+    }    \n+    \n+    /**\n+     * see original {@link Mockito#doReturn(Object)}\n+     */\n+    public static BDDStubber willReturn(Object toBeReturned) {\n+        return new BDDStubberImpl(Mockito.doReturn(toBeReturned));\n+    }\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();\n \n     /**\n-     * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8 - decide whether to hide it or not?\n-     * TODO: mention partial mocks warning\n-     * \n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * <p>\n      * {@link Answer} can be used to define the return values of unstubbed invocations.\n      * Hence {@link MockSettings}.\n      * <pre>\n      *   Listener mock = mock(Listener.class, withSettings()\n-     *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS);\n+     *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\n      *   );  \n      * </pre>\n      * <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks? \n--- a/src/org/mockito/invocation/InvocationOnMock.java\n+++ b/src/org/mockito/invocation/InvocationOnMock.java\n \n     /**\n      * calls real method\n+     * <p>\n+     * <b>Warning:</b> depending on the real implementation it might throw exceptions  \n      *\n-     * @return whatever the real method returns\n+     * @return whatever the real method returns / throws\n      * @throws Throwable in case real method throws \n      */\n     Object callRealMethod() throws Throwable;\n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n  */\n package org.mockitousage.customization;\n \n+import static org.mockito.BDDMockito.*;\n import static org.mockito.Matchers.*;\n-import static org.mockitousage.customization.BDDMockito.*;\n \n import org.junit.Test;\n import org.mockito.Mock;", "timestamp": 1244065214, "metainfo": ""}