{"sha": "a2b040e0c4c6a753535d74d6b28be75adf60792b", "log": "added TODOs tiny rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40503", "commit": "\n--- a/test/org/mockito/MockitoTest.java\n+++ b/test/org/mockito/MockitoTest.java\n  */\n package org.mockito;\n \n-import static org.junit.Assert.assertNull;\n-import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.*;\n \n import java.util.List;\n \n     // Or better. Write examples as unit tests, annotate them in the way so that javadoc can be generated out of it.\n     \n     //TODO check if performace can be tweaked (e.g: LL -> AL)\n+    \n+    //TODO names for @Mock - take field names\n+    //TODO return 0 for Integer, etc\n     \n     @Test\n     public void shouldRemoveStubbableFromProgressAfterStubbing() {\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java\n \n public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {\n     \n-    private MyDefaultReturnValues myDefaultReturnValues;\n-\n     @Test\n     public void shouldAllowConfiguringReturnValuesForSelectedMocks() throws Exception {\n-        MyObject smartStub = mock(MyObject.class);\n-        beSmartStub(smartStub);\n-        MyObject mock = mock(MyObject.class);\n+        MyObject smartMock = mock(MyObject.class);\n+        beSmart(smartMock);\n+        MyObject ordinaryMock = mock(MyObject.class);\n         \n-        assertNotNull(smartStub.returnMyObject());\n-        assertEquals(\"\", smartStub.returnString());\n-        assertTrue(smartStub.returnBoolean());\n+        //returns mock instead of null\n+        assertNotNull(smartMock.returnMyObject());\n+        //returns empty string instead of null\n+        assertEquals(\"\", smartMock.returnString());\n+        //returns true instead of false\n+        assertTrue(smartMock.returnBoolean());\n         \n-        assertNull(mock.returnMyObject());\n-        assertNull(mock.returnString());\n-        assertFalse(mock.returnBoolean());\n+        //returns defaults\n+        assertNull(ordinaryMock.returnMyObject());\n+        assertNull(ordinaryMock.returnString());\n+        assertFalse(ordinaryMock.returnBoolean());\n     }\n+    \n+    //Configuration code below is typically hidden in a base class/test runner/some kind of static utility\n+    \n+    private MyDefaultReturnValues myDefaultReturnValues;\n \n     interface MyObject {\n         MyObject returnMyObject();\n         boolean returnBoolean();\n     }\n     \n-    private void beSmartStub(Object mock) {\n-        myDefaultReturnValues.addSmartStub(mock);\n+    private void beSmart(Object mock) {\n+        myDefaultReturnValues.addSmartMock(mock);\n     }\n     \n     @Before\n     }\n     \n     private final class MyDefaultReturnValues implements ReturnValues {\n-        private List<Object> smartStubs = new LinkedList<Object>();\n+        private List<Object> smartMocks = new LinkedList<Object>();\n \n         public Object valueFor(Invocation invocation) {\n             Object value = new DefaultReturnValues().valueFor(invocation);\n             Class<?> returnType = invocation.getMethod().getReturnType();\n             if (value != null || returnType == Void.TYPE) {\n                 return value;\n-            } else if (smartStubs.contains(invocation.getMock())) {\n-                return returnValueForSmartStub(returnType);\n+            } else if (smartMocks.contains(invocation.getMock())) {\n+                return returnValueForSmartMock(returnType);\n             } else {\n                 return null;\n             }\n         }\n \n-        private Object returnValueForSmartStub(Class<?> returnType) {\n+        private Object returnValueForSmartMock(Class<?> returnType) {\n             if (returnType == String.class) {\n                 return \"\";\n             } else if (returnType == Boolean.TYPE) {\n             }\n         }\n \n-        public void addSmartStub(Object mock) {\n-            smartStubs.add(mock);\n+        public void addSmartMock(Object mock) {\n+            smartMocks.add(mock);\n         }\n     }\n }\n--- a/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n+++ b/test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java\n         MyObject foo();\n     }\n     \n+    //Configuration code below is typically hidden in a base class/test runner/some kind of static utility\n+    \n     @Before\n     public void configureDefaultReturnValues() {\n         MockitoConfiguration.setCustomReturnValues(new MyDefaultReturnValues());\n         MockitoConfiguration.resetCustomReturnValues();\n         \n     }\n+    \n     private final class MyDefaultReturnValues implements ReturnValues {\n         public Object valueFor(Invocation invocation) {\n             Object value = new DefaultReturnValues().valueFor(invocation);", "timestamp": 1206383267, "metainfo": ""}