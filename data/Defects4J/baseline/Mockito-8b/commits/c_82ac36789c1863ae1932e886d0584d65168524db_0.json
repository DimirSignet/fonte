{"sha": "82ac36789c1863ae1932e886d0584d65168524db", "log": "added test case + fix for issue #35  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401080", "commit": "\n--- a/src/org/mockito/internal/verification/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n     }\n \n     public List<Invocation> getAll() {\n-        return ListUtil.filter(invocations, new RemoveToString());\n+        return ListUtil.filter(new LinkedList<Invocation>(invocations), new RemoveToString());\n     }\n     \n     private static class RemoveToString implements Filter<Invocation> {\n--- /dev/null\n+++ b/test/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.concurrentmockito;\n+\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+//this test exposes the problem most of the time\n+public class ThreadVerifiesContinuoslyInteractingMockTest extends TestBase {\n+\n+    @Mock private IMethods mock;\n+\n+    @Test\n+    public void testShouldAllowVerifyingInThreads() throws Exception {\n+        for(int i = 0; i < 100; i++) {\n+            performTest();\n+        }\n+    }\n+\n+    private void performTest() throws InterruptedException {\n+        mock.simpleMethod();\n+        final Thread[] listeners = new Thread[2];\n+        for (int i = 0; i < listeners.length; i++) {\n+            final int x = i;\n+            listeners[i] = new Thread() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        Thread.sleep(x * 10);\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                    mock.simpleMethod();\n+                }\n+            };\n+            listeners[i].start();\n+        }\n+        \n+        verify(mock, atLeastOnce()).simpleMethod();\n+        \n+        for (int i = 0; i < listeners.length; i++) {\n+            listeners[i].join();\n+        }\n+    }\n+}", "timestamp": 1226437633, "metainfo": ""}