{"sha": "7a6d0db8dcac2f92753049d1a9f567b44f7b0230", "log": "Added some testing around configurable annotations  --HG-- rename : src/org/mockito/internal/configuration/DefaultAnntotationEngine.java => src/org/mockito/internal/configuration/DefaultAnnotationEngine.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401189", "commit": "\n--- a/src/org/mockito/AnnotationEngine.java\n+++ b/src/org/mockito/AnnotationEngine.java\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n \n-import org.mockito.internal.configuration.DefaultAnntotationEngine;\n+import org.mockito.internal.configuration.DefaultAnnotationEngine;\n \n /**\n  * Configures mock creation logic behind &#064;Mock annotations\n  * <p>\n- * See how it is implemented in {@link DefaultAnntotationEngine} and {@link MockitoAnnotations#initMocks(Object)}\n+ * See how it is implemented in {@link DefaultAnnotationEngine} and {@link MockitoAnnotations#initMocks(Object)}\n  */\n public interface AnnotationEngine {\n \n--- a/src/org/mockito/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/DefaultMockitoConfiguration.java\n package org.mockito;\n \n-import org.mockito.internal.configuration.DefaultAnntotationEngine;\n+import org.mockito.internal.configuration.DefaultAnnotationEngine;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n \n /**\n      * @see org.mockito.IMockitoConfiguration#getAnnotationEngine()\n      */\n     public AnnotationEngine getAnnotationEngine() {\n-        return new DefaultAnntotationEngine();\n+        return new DefaultAnnotationEngine();\n     }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+package org.mockito.internal.configuration;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+\n+import org.mockito.AnnotationEngine;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+public class DefaultAnnotationEngine implements AnnotationEngine {\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public Object createMockFor(Annotation annotation, Field field) {\n+        if (annotation instanceof Mock || annotation instanceof org.mockito.MockitoAnnotations.Mock) {\n+            return Mockito.mock(field.getType(), field.getName());\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n--- a/test/org/mockito/MockitoConfiguration.java\n+++ b/test/org/mockito/MockitoConfiguration.java\n package org.mockito;\n \n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+\n import org.mockito.internal.configuration.Configuration;\n+import org.mockito.internal.configuration.DefaultAnnotationEngine;\n+import org.mockitousage.configuration.SmartMock;\n \n @SuppressWarnings(\"deprecation\")\n public class MockitoConfiguration extends DefaultMockitoConfiguration implements IMockitoConfiguration {\n \n-    private static ReturnValues overridden = null;\n+    private static ReturnValues overriddenReturnValues = null;\n \n     //for testing purposes, allow to override the configuration\n     public static void overrideReturnValues(ReturnValues returnValues) {\n-        MockitoConfiguration.overridden = returnValues;\n+        MockitoConfiguration.overriddenReturnValues = returnValues;\n+    }\n+\n+    @Override\n+    public ReturnValues getReturnValues() {\n+        if (overriddenReturnValues == null) {\n+            return Configuration.instance().getReturnValues();\n+        } else {\n+            return overriddenReturnValues;\n+        }\n     }\n     \n-    public ReturnValues getReturnValues() {\n-        if (overridden == null) {\n-            return Configuration.instance().getReturnValues();\n-        } else {\n-            return overridden;\n-        }\n+    @Override\n+    public AnnotationEngine getAnnotationEngine() {\n+        return new DefaultAnnotationEngine() {\n+            @Override\n+            public Object createMockFor(Annotation annotation, Field field) {\n+                if (annotation instanceof SmartMock) {\n+                    return Mockito.mock(field.getType(), Mockito.RETURNS_SMART_NULLS);\n+                } else {\n+                    return super.createMockFor(annotation, field);\n+                }\n+            }\n+        };\n     }\n }\n--- a/test/org/mockitousage/configuration/MockitoConfigurationTest.java\n+++ b/test/org/mockitousage/configuration/MockitoConfigurationTest.java\n         IMethods mock = mock(IMethods.class); \n         assertEquals(\"foo\", mock.simpleMethod());\n     }\n+    \n+    @SmartMock IMethods smartMock;\n+\n+    @Test\n+    public void shouldUseCustomAnnotation() {\n+        assertEquals(\"SmartMock should return empty String by default\", \"\", smartMock.simpleMethod(1));\n+        verify(smartMock).simpleMethod(1);\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/configuration/SmartMock.java\n+package org.mockitousage.configuration;\n+\n+import static java.lang.annotation.ElementType.*;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target( { FIELD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface SmartMock {}", "timestamp": 1231943155, "metainfo": ""}