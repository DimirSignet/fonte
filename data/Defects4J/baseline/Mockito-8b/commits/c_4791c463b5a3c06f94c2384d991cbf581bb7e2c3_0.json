{"sha": "4791c463b5a3c06f94c2384d991cbf581bb7e2c3", "log": "added yet another test and moved the testCase to better place  --HG-- rename : test/org/mockitousage/bugs/EqWithIntsDoesntCopeWithLongsTest.java => test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401475", "commit": "\n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n \n import java.util.List;\n \n-import org.hamcrest.Matcher;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n--- a/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n+++ b/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n package org.mockito.internal.verification.argumentmatching;\n-\n-import static org.junit.Assert.*;\n \n import java.util.Arrays;\n import java.util.List;\n--- /dev/null\n+++ b/test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.verification;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockitoutil.TestBase;\n+\n+public class PrintingVerboseTypesWithArgumentsTest extends TestBase {\n+\n+    class Boo {\n+        public void withLong(long x) {\n+        }\n+        \n+        public void withLongAndInt(long x, int y) {\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotReportArgumentTypesWhenToStringIsTheSame() throws Exception {\n+        //given\n+        Boo boo = mock(Boo.class);\n+        boo.withLong(100);\n+        \n+        try {\n+            //when\n+            verify(boo).withLong(eq(100));\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            //then\n+            assertContains(\"withLong((Integer) 100);\", e.getMessage());\n+            assertContains(\"withLong((Long) 100);\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch() throws Exception {\n+        //given\n+        Boo boo = mock(Boo.class);\n+        boo.withLongAndInt(100, 200);\n+        \n+        try {\n+            //when\n+            verify(boo).withLongAndInt(eq(100), eq(200));\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            //then\n+            assertContains(\"withLongAndInt((Integer) 100, 200)\", e.getMessage());\n+            assertContains(\"withLongAndInt((Long) 100, 200)\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent() throws Exception {\n+        //given\n+        Boo boo = mock(Boo.class);\n+        boo.withLongAndInt(100, 200);\n+        \n+        try {\n+            //when\n+            verify(boo).withLongAndInt(eq(100), anyInt());\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            //then\n+            assertContains(\"withLongAndInt((Long) 100, 200)\", e.getMessage());\n+            assertContains(\"withLongAndInt((Integer) 100, <any>)\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotShowTypesWhenArgumentValueIsDifferent() throws Exception {\n+        //given\n+        Boo boo = mock(Boo.class);\n+        boo.withLongAndInt(100, 200);\n+        \n+        try {\n+            //when\n+            verify(boo).withLongAndInt(eq(100L), eq(230));\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            //then\n+            assertContains(\"withLongAndInt(100, 200)\", e.getMessage());\n+            assertContains(\"withLongAndInt(100, 230)\", e.getMessage());\n+        }\n+    }\n+}", "timestamp": 1244239059, "metainfo": ""}