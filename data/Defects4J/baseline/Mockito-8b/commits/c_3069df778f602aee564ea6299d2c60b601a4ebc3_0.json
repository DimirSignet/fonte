{"sha": "3069df778f602aee564ea6299d2c60b601a4ebc3", "log": "Put some creation complexity into a separate class.", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/MockHandlerFactory.java\n+package org.mockito.internal;\n+\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+/**\n+ * by Szczepan Faber, created at: 5/21/12\n+ */\n+public class MockHandlerFactory {\n+\n+    public MockHandler create(MockCreationSettings settings) {\n+        return new InvocationNotifierHandler(\n+                new MockHandlerImpl(settings), settings);\n+    }\n+}\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util;\n \n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.InternalMockHandler;\n-import org.mockito.internal.InvocationNotifierHandler;\n-import org.mockito.internal.MockHandlerImpl;\n+import org.mockito.internal.MockHandlerFactory;\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n+import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n import org.mockito.plugins.MockMaker;\n     private static final MockMaker mockMaker = ClassPathLoader.getMockMaker();\n \n     public <T> T createMock(MockCreationSettings<T> settings) {\n-        InvocationNotifierHandler<T> mockHandler = new InvocationNotifierHandler<T>(\n-                new MockHandlerImpl<T>(settings), settings);\n+        MockHandler mockHandler = new MockHandlerFactory().create(settings);\n+\n         T mock = mockMaker.createMock(settings, mockHandler);\n \n         Object spiedInstance = settings.getSpiedInstance();\n     }\n \n     public <T> void resetMock(T mock) {\n-        InvocationNotifierHandler oldHandler = (InvocationNotifierHandler) getMockHandler(mock);\n+        InternalMockHandler oldHandler = (InternalMockHandler) getMockHandler(mock);\n         MockCreationSettings settings = oldHandler.getMockSettings();\n-        InvocationNotifierHandler<T> newHandler = new InvocationNotifierHandler<T>(\n-                new MockHandlerImpl<T>(settings), settings);\n+        MockHandler newHandler = new MockHandlerFactory().create(settings);\n+\n         mockMaker.resetMock(mock, newHandler, settings);\n     }\n ", "timestamp": 1337630164, "metainfo": ""}