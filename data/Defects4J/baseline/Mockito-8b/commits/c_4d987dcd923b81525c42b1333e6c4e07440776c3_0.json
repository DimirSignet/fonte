{"sha": "4d987dcd923b81525c42b1333e6c4e07440776c3", "log": "Moved the new MockitoJUnitRule to 'junit' package.", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;\n import org.mockito.internal.verification.VerificationModeFactory;\n-import org.mockito.rules.MockitoJUnitRule;\n+import org.mockito.junit.MockitoJUnitRule;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.*;\n import org.mockito.verification.After;\n--- /dev/null\n+++ b/src/org/mockito/junit/MockitoJUnitRule.java\n+package org.mockito.junit;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import org.mockito.internal.rules.JUnitRule;\n+\n+import static org.mockito.internal.util.Checks.checkNotNull;\n+\n+/**\n+ * The MockitoJUnitRule Rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}.\n+ *\n+ * This rule adds following behavior:\n+ * <ul>\n+ *   <li>\n+ *      Initializes mocks annotated with {@link org.mockito.Mock},\n+ *      so that explicit usage of {@link org.mockito.MockitoAnnotations#initMocks(Object)} is not necessary.\n+ *      Mocks are initialized before each test method.\n+ *   <li>\n+ *      validates framework usage after each test method. See javadoc for {@link org.mockito.Mockito#validateMockitoUsage()}.\n+ * </ul>\n+ * Example use:\n+ * <pre class=\"code\"><code class=\"java\">\n+ * public class ExampleTest {\n+ *\n+ *     &#064;Rule\n+ *     public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);</b>\n+ *\n+ *     &#064;Mock\n+ *     private List list;\n+ *\n+ *     &#064;Test\n+ *     public void shouldDoSomething() {\n+ *         list.add(100);\n+ *     }\n+ * }\n+ * </code></pre>\n+ */\n+public class MockitoJUnitRule implements TestRule {\n+\n+    private JUnitRule jUnitRule;\n+\n+    public MockitoJUnitRule(Object object) {\n+        checkNotNull(object, \"Rule target\");\n+        this.jUnitRule = new JUnitRule(object);\n+    }\n+\n+    public Statement apply(final Statement base, Description description) {\n+        return jUnitRule.apply(base, description);\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/mockito/junit/MockitoJUnitRuleTest.java\n+package org.mockito.junit;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.*;\n+\n+public class MockitoJUnitRuleTest {\n+\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInjectMocks() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Object created\", injectInto);\n+        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n+\n+    }\n+\n+    @Test\n+    public void testThrowExceptionWhenNullTarget() throws Exception {\n+        try {\n+            new MockitoJUnitRule(null);\n+            fail();\n+        } catch (NullPointerException e) {\n+            assertEquals(\"valid message\", \"Rule target should not be null\", e.getMessage());\n+        }\n+    }\n+\n+    private static class Injected {\n+    }\n+\n+    private static class InjectInto {\n+\n+        private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+    }\n+}", "timestamp": 1412622213, "metainfo": ""}