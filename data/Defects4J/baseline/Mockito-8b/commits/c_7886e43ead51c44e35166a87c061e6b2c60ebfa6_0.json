{"sha": "7886e43ead51c44e35166a87c061e6b2c60ebfa6", "log": "Basic support for creating mocks using constructor  Issue #92", "commit": "\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n      * @return settings instance so that you can fluently specify other settings\n      */\n     MockSettings stubOnly();\n+\n+    /**\n+     * Mockito attempts to use constructor when creating instance of the mock.\n+     */\n+    MockSettings useConstructor();\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n public class MockSettingsImpl<T> extends CreationSettings<T> implements MockSettings, MockCreationSettings<T> {\n \n     private static final long serialVersionUID = 4475297236197939569L;\n+    private boolean useConstructor;\n \n     public MockSettings serializable() {\n         return serializable(SerializableMode.BASIC);\n     public MockSettingsImpl stubOnly() {\n         this.stubOnly = true;\n         return this;\n+    }\n+\n+    public MockSettings useConstructor() {\n+        this.useConstructor = true;\n+        return this;\n+    }\n+\n+    public boolean isUsingConstructor() {\n+        return useConstructor;\n     }\n \n     public boolean isStubOnly() {\n--- a/src/org/mockito/internal/creation/cglib/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/cglib/AcrossJVMSerializationFeature.java\n import org.mockito.Incubating;\n import org.mockito.exceptions.base.MockitoSerializationIssue;\n import org.mockito.internal.creation.instance.InstantiatorProvider;\n+import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.FieldSetter;\n import org.mockito.mock.MockCreationSettings;\n             // ClassImposterizer.INSTANCE.canImposterise(typeToMock);\n \n             // create the Mockito mock class before it can even be deserialized\n-            //TODO SF unify creation of imposterizer, constructor code duplicated\n-            ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator());\n+            //TODO SF unify creation of imposterizer, constructor code duplicated, pulling in CreationSettings internal class\n+            ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator(new CreationSettings()));\n             imposterizer.setConstructorsAccessible(typeToMock, true);\n             Class<?> proxyClass = imposterizer.createProxyClass(\n                     typeToMock,\n--- a/src/org/mockito/internal/creation/cglib/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/cglib/CglibMockMaker.java\n     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n         InternalMockHandler mockitoHandler = cast(handler);\n         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\n-        return new ClassImposterizer(new InstantiatorProvider().getInstantiator()).imposterise(\n+        return new ClassImposterizer(new InstantiatorProvider().getInstantiator(settings)).imposterise(\n                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());\n     }\n \n--- a/src/org/mockito/internal/creation/instance/InstantiatorProvider.java\n+++ b/src/org/mockito/internal/creation/instance/InstantiatorProvider.java\n package org.mockito.internal.creation.instance;\n+\n+import org.mockito.mock.MockCreationSettings;\n \n public class InstantiatorProvider {\n \n     private final static Instantiator INSTANCE = new ObjenesisInstantiator();\n \n-    public Instantiator getInstantiator() {\n-        return INSTANCE;\n+    public Instantiator getInstantiator(MockCreationSettings settings) {\n+        if (settings.isUsingConstructor()) {\n+            return new ConstructorInstantiator();\n+        } else {\n+            return INSTANCE;\n+        }\n     }\n-}\n+}\n--- a/src/org/mockito/internal/creation/settings/CreationSettings.java\n+++ b/src/org/mockito/internal/creation/settings/CreationSettings.java\n     protected SerializableMode serializableMode = SerializableMode.NONE;\n     protected List<InvocationListener> invocationListeners = new ArrayList<InvocationListener>();\n     protected boolean stubOnly;\n+    private boolean useConstructor;\n \n     public CreationSettings() {}\n \n         this.serializableMode = copy.serializableMode;\n         this.invocationListeners = copy.invocationListeners;\n         this.stubOnly = copy.stubOnly;\n+        this.useConstructor = copy.isUsingConstructor();\n     }\n \n     public Class<T> getTypeToMock() {\n         return invocationListeners;\n     }\n \n+    public boolean isUsingConstructor() {\n+        return useConstructor;\n+    }\n+\n     public boolean isStubOnly() {\n         return stubOnly;\n     }\n--- a/src/org/mockito/mock/MockCreationSettings.java\n+++ b/src/org/mockito/mock/MockCreationSettings.java\n      * the invocation listeners attached to this mock, see {@link org.mockito.MockSettings#invocationListeners}.\n      */\n     List<InvocationListener> getInvocationListeners();\n+\n+    /**\n+     * informs whether the mock instance should be created via constructor\n+     */\n+    boolean isUsingConstructor();\n }\n--- a/test/org/mockito/internal/creation/cglib/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/cglib/ClassImposterizerTest.java\n import org.mockito.cglib.proxy.MethodProxy;\n import org.mockito.internal.creation.instance.ConstructorInstantiator;\n import org.mockito.internal.creation.instance.InstantiatorProvider;\n+import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockitoutil.TestBase;\n \n import java.lang.reflect.Method;\n @SuppressWarnings(\"unchecked\")\n public class ClassImposterizerTest extends TestBase {\n \n-    ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator());\n+    ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator(new CreationSettings()));\n \n     @Test\n     public void shouldCreateMockFromInterface() throws Exception {\n--- /dev/null\n+++ b/test/org/mockitousage/constructor/CreatingMocksWithConstructor.java\n+package org.mockitousage.constructor;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.withSettings;\n+\n+public class CreatingMocksWithConstructor extends TestBase {\n+\n+    static abstract class AbstractMessage {\n+        String message = \"hey!\";\n+        String getMessage() {\n+            return message;\n+        }\n+    }\n+\n+    static class Message extends AbstractMessage {}\n+\n+    @Test\n+    public void can_create_mock_with_constructor() {\n+        Message mock = mock(Message.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+        //the message is a part of state of the mocked type that gets initialized in constructor\n+        assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    public void can_mock_abstract_classes() {\n+        AbstractMessage mock = mock(AbstractMessage.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));\n+        //the message is a part of state of the mocked type that gets initialized in constructor\n+        assertEquals(\"hey!\", mock.getMessage());\n+    }\n+\n+    @Test\n+    @Ignore //TODO SF\n+    public void prevents_mocking_interfaces_with_constructor() {\n+        try {\n+            //when\n+            mock(IMethods.class, withSettings().useConstructor());\n+            //then\n+            fail();\n+        } catch (MockitoException e) {}\n+    }\n+\n+    @Test\n+    @Ignore //TODO SF\n+    public void prevents_across_jvm_serialization_with_constructor() {\n+        fail();\n+    }\n+}", "timestamp": 1416164902, "metainfo": ""}