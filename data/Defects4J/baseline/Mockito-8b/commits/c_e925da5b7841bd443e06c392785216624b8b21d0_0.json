{"sha": "e925da5b7841bd443e06c392785216624b8b21d0", "log": "got rid of some duplication  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401331", "commit": "\n--- a/test/org/mockitousage/stacktrace/ClickableStackTracesTest.java\n+++ b/test/org/mockitousage/stacktrace/ClickableStackTracesTest.java\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n \n     @Before\n     public void setup() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n     }\n \n     private void callMethodOnMock(String param) {\n--- a/test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java\n+++ b/test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n \n     @Before\n     public void setupCleanStackTraces() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n     }\n     \n     @After\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Before\n     public void cleanStackTrace() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n     }\n \n     @Test\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java\n import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n     @Before\n     public void setup() {\n         inOrder = inOrder(mock, mockTwo);\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n         \n         firstChunk();\n         secondChunk();\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java\n import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     @Before\n     public void setup() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n         \n         inOrder = inOrder(mock, mockTwo);\n         \n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     @Before\n     public void setup() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n         \n         first();\n         second();\n--- a/test/org/mockitousage/stacktrace/StackTraceFilteringTest.java\n+++ b/test/org/mockitousage/stacktrace/StackTraceFilteringTest.java\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Before\n     public void setup() {\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n     }\n     \n     @Test\n--- a/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n-import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     @Before\n     public void setup() {\n         mock = mock(IMethods.class, Mockito.RETURNS_SMART_NULLS);\n-        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+        super.makeStackTracesClean();\n     }\n     \n     public IMethods unstubbedMethodInvokedHere(IMethods mock) {\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n         };\n     }\n     \n-    public static <T> Assertor<String> notContains(final String substring) {\n-        return new Assertor<String>() {\n-            public void assertValue(String value) {\n-                assertFalse(\"This substring: \\n\" + substring + \n-                        \"\\nshould NOT be inside of:\\n\" + value\n-                        , value.contains(substring));\n-            }\n-        };\n-    }\n-    \n-    \n-    //Assertors will never be matchers...\n-//    public static <T> Assertor<T> not(final Assertor<T> assertor) {\n-//        return new Assertor<T>() {\n-//            public void assertValue(T value) {\n-//                boolean failed = false;\n-//                try {\n-//                    assertor.assertValue(value);\n-//                } catch (AssertionError e) {\n-//                    failed = true;\n-//                }\n-//                \n-//                assertTrue(\"Assertion failed\", failed);\n-//            }\n-//        };\n-//    }\n-    \n     public static <T> Assertor<String> endsWith(final String substring) {\n         return new Assertor<String>() {\n             public void assertValue(String value) {\n             }\n         };\n     }\n-    \n-    public static <T> Assertor<Throwable> causeMessageContains(final String text) {\n-        return new Assertor<Throwable>() {\n-            public void assertValue(Throwable value) {\n-                Throwable cause = ((Throwable) value).getCause();\n-                assertNotNull(\"Exception cause should not be null\", cause);\n-                assertTrue(\"\\nException message >>>\" + cause.getMessage() + \"\\n>>> should contain: \" + text,\n-                        cause.getMessage().contains(text));\n-            }\n-        };\n-    }\n \n     public static void assertContains(String sub, String string) {\n         assertTrue(\"\\n\" +", "timestamp": 1239809006, "metainfo": ""}