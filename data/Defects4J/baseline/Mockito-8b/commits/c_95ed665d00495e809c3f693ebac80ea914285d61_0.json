{"sha": "95ed665d00495e809c3f693ebac80ea914285d61", "log": "added decent message when cusom matcher is used  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40443", "commit": "\n--- a/src/org/mockito/ArgumentMatcher.java\n+++ b/src/org/mockito/ArgumentMatcher.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito;\n+\n+import java.util.regex.Pattern;\n \n import org.hamcrest.BaseMatcher;\n import org.hamcrest.Description;\n  */\n public abstract class ArgumentMatcher<T> extends BaseMatcher<T> {\n \n+    private static final Pattern CAPS = Pattern.compile(\"([A-Z][^A-Z]*)\");\n+    \n     /**\n      * Returns whether this matcher accepts the given argument.\n      * <p>\n     public abstract boolean matches(Object argument);\n \n     /* \n-     * Usually not necessary but you might want to override this method to\n+     * You might want to override this method to\n      * provide more specific description of the matcher (useful when\n      * verification failures are reported).\n      * \n      * appended.\n      */\n     public void describeTo(Description description) {\n-        description.appendText(\"<custom argument matcher>\");\n+        description.appendText(deCamelCase());\n+    }\n+    \n+    private String deCamelCase() {\n+        String className = getClass().getSimpleName();\n+        if (className.length() == 0) {\n+            return \"<custom argument matcher>\";\n+        }\n+        \n+        java.util.regex.Matcher match = CAPS.matcher(className);\n+        \n+        StringBuilder deCameled = new StringBuilder();\n+        while(match.find()) {\n+            if (deCameled.length() == 0) {\n+                deCameled.append(match.group());\n+            } else {\n+                deCameled.append(\" \");\n+                deCameled.append(match.group().toLowerCase());\n+            }\n+        }\n+        \n+        if (deCameled.length() == 0) {\n+            return className;\n+        }\n+        \n+        return deCameled.toString();\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/ArgumentMatcherTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import static org.junit.Assert.*;\n+\n+import org.hamcrest.Matcher;\n+import org.hamcrest.StringDescription;\n+import org.junit.Test;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentMatcherTest {\n+    \n+    private class StringWithDirtyWords extends ArgumentMatcher<Object> {\n+        public boolean matches(Object argument) {\n+            return false;\n+        }\n+    }\n+    \n+    private class WEIRDO1 extends ArgumentMatcher<Object> {\n+        public boolean matches(Object argument) {\n+            return false;\n+        }\n+    }\n+    \n+    private class _ extends ArgumentMatcher<Object> {\n+        public boolean matches(Object argument) {\n+            return false;\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldDeCamelCaseTheName() throws Exception {\n+        Matcher matcher = new StringWithDirtyWords();\n+        StringDescription d = new StringDescription();\n+        matcher.describeTo(d);\n+        assertEquals(\"String with dirty words\", d.toString());\n+    }\n+    \n+    @Test\n+    public void shouldDeCamelCaseWeirdName() throws Exception {\n+        Matcher matcher = new WEIRDO1();\n+        StringDescription d = new StringDescription();\n+        matcher.describeTo(d);\n+        assertEquals(\"W e i r d o1\", d.toString());\n+    }\n+    \n+    @Test\n+    public void shouldNotDeCamelCaseVeryWeirdName() throws Exception {\n+        Matcher matcher = new _();\n+        StringDescription d = new StringDescription();\n+        matcher.describeTo(d);\n+        assertEquals(\"_\", d.toString());\n+    }\n+    \n+    @Test\n+    public void shouldNotDeCamelCaseAnnonymousClass() throws Exception {\n+        Matcher matcher = new ArgumentMatcher() {\n+            @Override\n+            public boolean matches(Object argument) {\n+                return false;\n+            }\n+        };\n+        StringDescription d = new StringDescription();\n+        matcher.describeTo(d);\n+        assertEquals(\"<custom argument matcher>\", d.toString());\n+    }\n+}\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import static org.mockito.Mockito.*;\n import static org.mockito.util.ExtraMatchers.*;\n \n-import org.hamcrest.Description;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentMatcher;\n     }\n     \n     @Test\n-    public void shouldCustomMatcherPrintDecentMessage() {\n+    public void shouldCustomMatcherPrintMessageBasedOnName() {\n         mock.simpleMethod(\"foo\");\n \n         try {\n             verify(mock).simpleMethod(containsTest());\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n-//            e.printStackTrace();\n-            assertThat(e, messageContains(\"1st: String that contains 'xxx'\"));\n+            //TODO add documentation that names are cool\n+            assertThat(e, messageContains(\"1st: String that contains xxx\"));\n             assertThat(e, causeMessageContains(\"1st: \\\"foo\\\"\"));\n         }\n     }\n \n     private String containsTest() {\n-        return argThat(new IsStringThatContainsXxx());\n+        return argThat(new StringThatContainsXxx());\n     }\n     \n-    private final class IsStringThatContainsXxx extends ArgumentMatcher<String> {\n+    private final class StringThatContainsXxx extends ArgumentMatcher<String> {\n         public boolean matches(Object argument) {\n             String arg = (String) argument;\n             return arg.contains(\"xxx\");\n         }\n-\n-        @Override\n-        public void describeTo(Description description) {\n-            description.appendText(\"String that contains 'xxx'\");\n-        }\n     }\n }", "timestamp": 1204591450, "metainfo": ""}