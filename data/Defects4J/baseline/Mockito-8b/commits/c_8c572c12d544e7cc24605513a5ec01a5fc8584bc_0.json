{"sha": "8c572c12d544e7cc24605513a5ec01a5fc8584bc", "log": "made reporting more consistent  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4052", "commit": "\n--- a/src/org/mockito/internal/InvocationWithMatchers.java\n+++ b/src/org/mockito/internal/InvocationWithMatchers.java\n     }\n \n     public boolean matches(Invocation actual) {\n-        boolean methodsAreEqual = areMethodsEqual(actual.getMethod());\n         return this.invocation.getMock().equals(\n                 actual.getMock())\n-                && methodsAreEqual\n+                && this.invocation.getMethod().equals(actual.getMethod())\n                 && matches(actual.getArguments());\n-    }\n-\n-    private boolean areMethodsEqual(Method method) {\n-        Method thisMethod = this.invocation.getMethod();\n-        if (thisMethod.getDeclaringClass() != method.getDeclaringClass()\n-            || thisMethod.getName() != method.getName() \n-            || !thisMethod.getReturnType().equals(method.getReturnType())) { \n-                return false;\n-        }\n-        \n-        Class[] params1 = thisMethod.getParameterTypes();\n-        Class[] params2 = method.getParameterTypes();\n-        if (params1.length == params2.length) {\n-            for (int i = 0; i < params1.length; i++) {\n-            if (params1[i] != params2[i])\n-                return false;\n-            }\n-            return true;\n-        }\n-    \n-        return false;\n-//        return this.invocation.getMethod().equals(actual.getMethod());\n     }\n \n     private boolean matches(Object[] arguments) {\n--- a/src/org/mockito/internal/MockitoBehavior.java\n+++ b/src/org/mockito/internal/MockitoBehavior.java\n                             \"\\n\" +\n                     \t\t\"Actual: \" + actual;\n                 } else {\n-                    message += \"Not invoked: \" + expected;\n+                    message += \n+                            \"Expected: \" + expected +\n+                            \"\\n\" +\n+                            \"Actual: none\";\n                 }\n                 \n                 throw new VerificationAssertionError(message);\n--- a/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockito/usage/binding/IncorectBindingPuzzleFixedTest.java\n         print(message);\n         try {\n             Mockito.verify(derivedMock).print(message);\n+            fail();\n         } catch (VerificationAssertionError error) {\n             String expected = \n                 \"\\n\" +\n--- a/test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java\n                     \"\\n\" +\n             \t\t\"Failure on verify:\" +\n             \t\t\"\\n\" +\n-            \t\t\"Not invoked: IMethods.simpleMethod()\";\n+            \t\t\"Expected: IMethods.simpleMethod()\" +\n+                    \"\\n\" +\n+                    \"Actual: none\";\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }\n                     \"\\n\" +\n                     \"Failure on verify:\" +\n                     \"\\n\" +\n-            \t\t\"Not invoked: IMethods.threeArgumentMethod(12, SomeClass instance, \\\"some string\\\")\";\n+            \t\t\"Expected: IMethods.threeArgumentMethod(12, SomeClass instance, \\\"some string\\\")\" +\n+            \t\t\"\\n\" +\n+            \t\t\"Actual: none\";\n             assertEquals(expectedMessage, actualMessage);         \n         }\n     }", "timestamp": 1195779392, "metainfo": ""}