{"sha": "c59f75c4ff3e69ebc52cf30c9fc8d2a11ac10a81", "log": "some refactoring to cover final classes scenario  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40563", "commit": "\n--- a/src/org/mockito/configuration/BaseReturnValues.java\n+++ b/src/org/mockito/configuration/BaseReturnValues.java\n  */\n package org.mockito.configuration;\n \n+import java.lang.reflect.Modifier;\n+\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n- * Handy implementation of {@link ReturnValues} that already deals with void types and default return values.\n+ * Handy implementation of {@link ReturnValues} that already deals with void types and provides some useful methods.\n  * <p>\n- * Intended for subclassing and providing implementation for {@link BaseReturnValues#returnValueFor(InvocationOnMock)}.\n+ * Intended for subclassing and providing the implementation for {@link BaseReturnValues#returnValueFor(InvocationOnMock)}.\n  * <p>\n  * See examples from mockito/test/org/mockitousage/examples/configure subpackage. \n  * You may want to check out the project from svn repository to easily browse Mockito's test code.\n  */\n public abstract class BaseReturnValues implements ReturnValues {\n     \n-    private DefaultReturnValues defaultReturnValues = new DefaultReturnValues();\n-    \n     /* (non-Javadoc)\n      * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)\n      */\n     public Object valueFor(InvocationOnMock invocation) {\n-        Object returnByDefault = defaultReturnValues.valueFor(invocation);\n         Class<?> returnType = invocation.getMethod().getReturnType();\n-        if (returnByDefault != null || returnType == Void.TYPE) {\n-            return returnByDefault;\n+        if (isVoid(returnType)) {\n+            return null;\n         }\n         return returnValueFor(invocation);\n     }\n \n     /**\n-     * The default implementation already evaluated invocation and decided to return null.\n-     * Override this method to return different value than null. \n+     * Override this method to return different value for given invocation.\n      * \n      * @param invocation\n      * @return return value for an invocation\n      */\n     protected abstract Object returnValueFor(InvocationOnMock invocation);\n+    \n+    /**\n+     * what Mockito returns by default for given invocation \n+     * \n+     * @param invocation\n+     * @return default return value\n+     */\n+    protected Object defaultValueFor(InvocationOnMock invocation) {\n+        return MockitoProperties.DEFAULT_RETURN_VALUES.valueFor(invocation);\n+    }\n+\n+    /**\n+     * @param clazz\n+     * @return returns true if clazz is final\n+     */\n+    protected boolean isFinalClass(Class<?> clazz) {\n+        return Modifier.isFinal(clazz.getModifiers());\n+    }\n+    \n+    /**\n+     * @param clazz\n+     * @return true if clazz is void (primitive class)\n+     */    \n+    protected boolean isVoid(Class<?> returnType) {\n+        return returnType == Void.TYPE;\n+    }\n }\n--- a/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n+++ b/test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java\n     }\n     \n     private final class MyDefaultReturnValues extends BaseReturnValues implements ReturnValues {\n-        public Object returnValueFor(InvocationOnMock invocation) {\n-            return Mockito.mock(invocation.getMethod().getReturnType());\n+        public Object returnValueFor(InvocationOnMock invocation) {\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n+            if (isFinalClass(returnType)) {\n+                return null;\n+            } else {\n+                return Mockito.mock(returnType);\n+            }\n         }\n     }\n }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n         private Set<Object> mocksReturningFakes = new HashSet<Object>();\n \n         public Object returnValueFor(InvocationOnMock invocation) {\n-            Class<?> returnType = invocation.getMethod().getReturnType();\n             if (mocksReturningFakes.contains(invocation.getMock())) {\n-                return returnFake(returnType);\n+                return returnFake(invocation);\n             } else {\n-                return null;\n+                return defaultValueFor(invocation);\n             }\n         }\n \n             mocksReturningFakes.addAll(Arrays.asList(mocks));\n         }\n \n-        private Object returnFake(Class<?> returnType) {\n+        private Object returnFake(InvocationOnMock invocation) {\n+            Class<?> returnType = invocation.getMethod().getReturnType();\n             if (returnType == String.class) {\n                 return \"\";\n             } else if (returnType == Boolean.TYPE) {\n-                return true;\n+                return true;\n+            } else if (isFinalClass(returnType)) {\n+                //cannot mock final class :(\n+                return null;\n             } else {\n                 return mock(returnType);\n             }\n--- a/test/org/mockitousage/examples/configure/withstaticutility/ConfiguringSelectedMocksToReturnFakesTest.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/ConfiguringSelectedMocksToReturnFakesTest.java\n         assertNotNull(fakeReturningMock.returnMyObject());\n         //returns empty string instead of null\n         assertEquals(\"\", fakeReturningMock.returnString());\n+        //returns null because we cannot mock final classes :(\n+        assertNull(fakeReturningMock.returnFinalClass());\n+        //returns true not false\n+        assertTrue(fakeReturningMock.returnBoolean());\n         \n         //returns defaults\n         assertNull(ordinaryMock.returnMyObject());\n         MyObject returnMyObject();\n         String returnString();\n         boolean returnBoolean();\n+        StringBuilder returnFinalClass();\n     }\n }", "timestamp": 1207695368, "metainfo": ""}