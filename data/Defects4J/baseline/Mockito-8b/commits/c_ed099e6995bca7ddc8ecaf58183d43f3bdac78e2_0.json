{"sha": "ed099e6995bca7ddc8ecaf58183d43f3bdac78e2", "log": "First stab at fixing enhancement 171 verifyNoMoreInteractions() shows entire scenario in the message  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401989", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockito.exceptions.verification.junit.JUnitTool;\n import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.exceptions.VerificationAwareInvocation;\n+import org.mockito.internal.exceptions.util.ScenarioPrinter;\n import org.mockito.internal.invocation.Invocation;\n \n /**\n                 \"Verification in order failure:\" + message\n                 ));\n     }\n-    \n-    public void noMoreInteractionsWanted(PrintableInvocation undesired) {\n+\n+    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n+        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n+        String scenario = scenarioPrinter.print(invocations);\n+        \n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new Location(),\n                 \"But found this interaction:\",\n                 undesired.getLocation(),\n-                \"\"\n-                ));\n+                \"***\",\n+                \"For your reference, here is the list of all invocations ([?] - means unverified).\",\n+                scenario,\n+                \"\"\n+        ));\n     }\n     \n     public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/VerificationAwareInvocation.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.exceptions;\n+\n+import org.mockito.exceptions.PrintableInvocation;\n+\n+\n+public interface VerificationAwareInvocation extends PrintableInvocation {\n+    \n+    boolean isVerified();\n+    \n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/exceptions/util/ScenarioPrinter.java\n+package org.mockito.internal.exceptions.util;\n+\n+import java.util.List;\n+\n+import org.mockito.internal.exceptions.VerificationAwareInvocation;\n+\n+public class ScenarioPrinter {\n+\n+    public String print(List<VerificationAwareInvocation> invocations) {\n+        StringBuilder sb = new StringBuilder();\n+        int counter = 0;\n+        for (VerificationAwareInvocation i : invocations) {\n+            sb.append(++counter + \". \");\n+            if (!i.isVerified()) {\n+                sb.append(\"[?]\");\n+            }\n+            sb.append(i.getLocation() + \"\\n\");\n+        }\n+        String scenario = sb.toString();\n+        return scenario;\n+    }\n+\n+}\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation {\n+public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation, VerificationAwareInvocation {\n \n     private static final long serialVersionUID = 8240069639250980199L;\n     private static final int MAX_LINE_LENGTH = 45;\n--- a/src/org/mockito/internal/verification/NoMoreInteractions.java\n+++ b/src/org/mockito/internal/verification/NoMoreInteractions.java\n \n public class NoMoreInteractions implements VerificationMode, VerificationInOrderMode {\n \n+    @SuppressWarnings(\"unchecked\")\n     public void verify(VerificationData data) {\n-        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());\n-        \n+        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());                       \n         if (unverified != null) {\n-            new Reporter().noMoreInteractionsWanted(unverified);\n+            new Reporter().noMoreInteractionsWanted(unverified, (List) data.getAllInvocations());\n         }\n     }\n \n--- a/src/org/mockito/internal/verification/Only.java\n+++ b/src/org/mockito/internal/verification/Only.java\n \tprivate final InvocationMarker marker = new InvocationMarker();\n \tprivate final Reporter reporter = new Reporter();\n \n-\tpublic void verify(VerificationData data) {\n+\t@SuppressWarnings(\"unchecked\")\n+    public void verify(VerificationData data) {\n \t\tInvocationMatcher wantedMatcher = data.getWanted();\n \t\tList<Invocation> invocations = data.getAllInvocations();\n \t\tList<Invocation> chunk = finder.findInvocations(invocations,wantedMatcher);\n \t\tif (invocations.size() != 1 && chunk.size() > 0) {\n \t\t\tmarker.markVerified(chunk.get(0), wantedMatcher);\n \t\t\tInvocation unverified = finder.findFirstUnverified(invocations);\n-\t\t\treporter.noMoreInteractionsWanted(unverified);\n+\t\t\treporter.noMoreInteractionsWanted(unverified, (List) invocations);\n \t\t} else if (invocations.size() != 1 || chunk.size() == 0) {\n \t\t\treporter.wantedButNotInvoked(wantedMatcher);\n \t\t}\n--- /dev/null\n+++ b/test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java\n+package org.mockito.internal.exceptions.util;\n+\n+import static java.util.Arrays.*;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ScenarioPrinterTest extends TestBase {\n+\n+    ScenarioPrinter sp = new ScenarioPrinter();\n+    \n+    @Test\n+    public void shouldPrintInvocations() {\n+        //given\n+        Invocation verified = new InvocationBuilder().simpleMethod().verified().toInvocation();\n+        Invocation unverified = new InvocationBuilder().differentMethod().toInvocation();\n+        \n+        //when\n+        String out = sp.print((List) asList(verified, unverified));\n+        \n+        //then\n+        assertContains(\"1. -> at\", out);\n+        assertContains(\"2. [?]-> at\", out);\n+        //TODO add more tests and scenarios that print decent stuff when nothing is verified or there are no verifications at all\n+    }\n+}\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n     }\n     \n     @Test\n+    public void shouldPrintAllInvocationsWhenVerifyingNoMoreInvocations() throws Exception {\n+        mock.add(1);\n+        mock.add(2);\n+        mock.clear();\n+        \n+        verify(mock).add(2);\n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (NoInteractionsWanted e) {\n+            assertContains(\"list of all invocations\", e.getMessage());\n+        }\n+    }\n+    \n+    @Test\n     public void shouldVerifyOneMockButFailOnOther() throws Exception {\n         List list = mock(List.class);\n         Map map = mock(Map.class);", "timestamp": 1274130336, "metainfo": ""}