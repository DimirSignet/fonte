{"sha": "fba1d8925d9b5f08eeeb3d47dbf7d26920e7f942", "log": "moved classes around  --HG-- rename : src/org/mockito/internal/verification/AtLeastXNumberOfInvocationsChecker.java => src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java rename : src/org/mockito/internal/verification/AtLeastXNumberOfInvocationsInOrderChecker.java => src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java rename : src/org/mockito/internal/verification/MissingInvocationChecker.java => src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java rename : src/org/mockito/internal/verification/MissingInvocationInOrderChecker.java => src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java rename : src/org/mockito/internal/verification/NumberOfInvocationsChecker.java => src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java rename : src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java => src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40982", "commit": "\n--- a/src/org/mockito/internal/verification/AtLeast.java\n+++ b/src/org/mockito/internal/verification/AtLeast.java\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n import org.mockito.internal.verification.api.VerificationMode;\n+import org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsChecker;\n+import org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsInOrderChecker;\n+import org.mockito.internal.verification.checkers.MissingInvocationChecker;\n+import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;\n \n public class AtLeast implements VerificationInOrderMode, VerificationMode {\n     \n--- a/src/org/mockito/internal/verification/Times.java\n+++ b/src/org/mockito/internal/verification/Times.java\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n import org.mockito.internal.verification.api.VerificationMode;\n+import org.mockito.internal.verification.checkers.MissingInvocationChecker;\n+import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;\n+import org.mockito.internal.verification.checkers.NumberOfInvocationsChecker;\n+import org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker;\n \n public class Times implements VerificationInOrderMode, VerificationMode {\n     \n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification.checkers;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+\n+public class AtLeastXNumberOfInvocationsChecker {\n+    \n+    private final Reporter reporter;\n+    private final InvocationsFinder finder;\n+\n+    //TODO remove constructors if unit test not necessary\n+    public AtLeastXNumberOfInvocationsChecker() {\n+        this(new Reporter(), new InvocationsFinder());\n+    }\n+    \n+    AtLeastXNumberOfInvocationsChecker(Reporter reporter, InvocationsFinder finder) {\n+        this.reporter = reporter;\n+        this.finder = finder;\n+    }\n+    \n+    //TODO check coverage\n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n+        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n+        \n+        int actualCount = actualInvocations.size();\n+        if (wantedCount > actualCount) {\n+            HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n+            reporter.tooLittleActualInvocationsInAtLeastMode(wantedCount, actualCount, wanted, lastInvocation);        \n+        }\n+        \n+        for (Invocation i : actualInvocations) {\n+            i.markVerified();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification.checkers;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+\n+public class AtLeastXNumberOfInvocationsInOrderChecker {\n+    \n+    private final Reporter reporter;\n+    private final InvocationsFinder finder;\n+    \n+    public AtLeastXNumberOfInvocationsInOrderChecker() {\n+        this(new InvocationsFinder(), new Reporter());\n+    }\n+    \n+    public AtLeastXNumberOfInvocationsInOrderChecker(InvocationsFinder finder, Reporter reporter) {\n+        this.finder = finder;\n+        this.reporter = reporter;\n+    }\n+    \n+    public void verify(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n+        List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n+        \n+        int actualCount = chunk.size();\n+        \n+        if (wantedCount > actualCount) {\n+            HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n+            reporter.tooLittleActualInvocationsInOrderInAtLeastMode(wantedCount, actualCount, wanted, lastInvocation);\n+        }\n+        \n+        for (Invocation i : chunk) {\n+            i.markVerifiedInOrder();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification.checkers;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.verification.SyncingPrinter;\n+\n+public class MissingInvocationChecker {\n+    \n+    private final Reporter reporter;\n+    private final InvocationsFinder finder;\n+    \n+    public MissingInvocationChecker() {\n+        this(new InvocationsFinder(), new Reporter());\n+    }\n+    \n+    public MissingInvocationChecker(InvocationsFinder finder, Reporter reporter) {\n+        this.finder = finder;\n+        this.reporter = reporter;\n+    }\n+    \n+    public void check(List<Invocation> invocations, InvocationMatcher wanted) {\n+        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n+        \n+        if (actualInvocations.isEmpty()) {\n+            Invocation similar = finder.findSimilarInvocation(invocations, wanted);\n+            reportMissingInvocationError(wanted, similar);\n+        }\n+    }\n+\n+    private void reportMissingInvocationError(InvocationMatcher wanted, Invocation similar) {\n+        if (similar != null) {\n+            SyncingPrinter syncingPrinter = new SyncingPrinter(wanted, similar);\n+            reporter.argumentsAreDifferent(syncingPrinter.getWanted(), syncingPrinter.getActual(), similar.getStackTrace());\n+        } else {\n+            reporter.wantedButNotInvoked(wanted);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification.checkers;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.verification.api.VerificationMode;\n+\n+public class MissingInvocationInOrderChecker {\n+    \n+    private final Reporter reporter;\n+    private final InvocationsFinder finder;\n+    \n+    public MissingInvocationInOrderChecker() {\n+        this(new InvocationsFinder(), new Reporter());\n+    }\n+    \n+    public MissingInvocationInOrderChecker(InvocationsFinder finder, Reporter reporter) {\n+        this.finder = finder;\n+        this.reporter = reporter;\n+    }\n+    \n+    public void check(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n+        List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);\n+        \n+        if (!chunk.isEmpty()) {\n+            return;\n+        }\n+        \n+        Invocation previousInOrder = finder.findPreviousVerifiedInOrder(invocations);\n+        if (previousInOrder == null) {\n+            reporter.wantedButNotInvoked(wanted);\n+        } else {\n+            reporter.wantedButNotInvokedInOrder(wanted, previousInOrder, previousInOrder.getStackTrace());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification.checkers;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+\n+public class NumberOfInvocationsChecker {\n+    \n+    private final Reporter reporter;\n+    private final InvocationsFinder finder;\n+\n+    public NumberOfInvocationsChecker() {\n+        this(new Reporter(), new InvocationsFinder());\n+    }\n+    \n+    public NumberOfInvocationsChecker(Reporter reporter, InvocationsFinder finder) {\n+        this.reporter = reporter;\n+        this.finder = finder;\n+    }\n+    \n+    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n+        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n+        \n+        int actualCount = actualInvocations.size();\n+        if (wantedCount > actualCount) {\n+            HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);\n+            reporter.tooLittleActualInvocations(wantedCount, actualCount, wanted, lastInvocation);\n+        } else if (wantedCount == 0 && actualCount > 0) {\n+            HasStackTrace firstUndesired = actualInvocations.get(wantedCount).getStackTrace();\n+            reporter.neverWantedButInvoked(wanted, firstUndesired); \n+        } else if (wantedCount < actualCount) {\n+            HasStackTrace firstUndesired = actualInvocations.get(wantedCount).getStackTrace();\n+            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n+        }\n+        \n+        for (Invocation i : actualInvocations) {\n+            i.markVerified();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.verification.checkers;\n+\n+import java.util.List;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.base.HasStackTrace;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.invocation.InvocationsFinder;\n+\n+public class NumberOfInvocationsInOrderChecker {\n+    \n+    private final Reporter reporter;\n+    private final InvocationsFinder finder;\n+    \n+    public NumberOfInvocationsInOrderChecker() {\n+        this(new InvocationsFinder(), new Reporter());\n+    }\n+    \n+    public NumberOfInvocationsInOrderChecker(InvocationsFinder finder, Reporter reporter) {\n+        this.finder = finder;\n+        this.reporter = reporter;\n+    }\n+    \n+    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount);\n+        \n+        boolean noMatchFound = chunk.size() == 0;\n+        if (wantedCount == 0 && noMatchFound) {\n+            return;\n+        }\n+        \n+        int actualCount = chunk.size();\n+        \n+        if (wantedCount > actualCount) {\n+            HasStackTrace lastInvocation = finder.getLastStackTrace(chunk);\n+            reporter.tooLittleActualInvocationsInOrder(wantedCount, actualCount, wanted, lastInvocation);\n+        } else if (wantedCount < actualCount) {\n+            HasStackTrace firstUndesired = chunk.get(wantedCount).getStackTrace();\n+            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n+        }\n+        \n+        for (Invocation i : chunk) {\n+            i.markVerifiedInOrder();\n+        }\n+    }\n+}\n--- a/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationCheckerTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.checkers.MissingInvocationChecker;\n import org.mockitoutil.TestBase;\n \n public class MissingInvocationCheckerTest extends TestBase {\n--- a/test/org/mockito/internal/verification/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/MissingInvocationInOrderCheckerTest.java\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n+import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;\n import org.mockitoutil.TestBase;\n \n public class MissingInvocationInOrderCheckerTest extends TestBase {\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsCheckerTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.checkers.NumberOfInvocationsChecker;\n import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsCheckerTest extends TestBase {\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsInOrderCheckerTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker;\n import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsInOrderCheckerTest extends TestBase {", "timestamp": 1223983290, "metainfo": ""}