{"sha": "c079f2bf882b32f8ad6a6cd03ad118d69c74f367", "log": "tiny javadoc enhancements :)", "commit": "\n--- a/src/org/mockito/InjectMocks.java\n+++ b/src/org/mockito/InjectMocks.java\n  *\n  *     <li><strong>Property setter injection</strong>; mocks will first be resolved by type,\n  *     then (using name if there is several property of the same type).\n- *     <p><u>Note:</u> If type wasn't initialized before and have a no-arg constructor,\n+ *     <p><u>Note:</u> If &#064;InjectMocks instance wasn't initialized before and have a no-arg constructor,\n  *     then it will be initialized with this constructor.</p></li>\n  *\n  *     <li><strong>Field injection</strong>; mocks will first be resolved by type,\n  *     then (using name if there is several property of the same type).\n- *     <p><u>Note:</u> If type wasn't initialized before and have a no-arg constructor,\n+ *     <p><u>Note:</u> If &#064;InjectMocks instance wasn't initialized before and have a no-arg constructor,\n  *     then it will be initialized with this constructor.</p></li>\n  * </ol>\n  * </p>\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#20\">20. Serializable mocks (Since 1.8.1) </a><br/>\n  *      <a href=\"#21\">21. New annotations: &#064;Captor, &#064;Spy, &#064;InjectMocks (Since 1.8.3) </a><br/>\n  *      <a href=\"#22\">22. (New) Verification with timeout (Since 1.8.5) </a><br/>\n- *      <a href=\"#23\">23. (**New**) Automatic instantiation of &#064;Spy, &#064;InjectMocks fields (Since 1.9)</a><br/>\n- *      <a href=\"#24\">24. (**New**) Inline mock creation and stubbing (Since 1.9)</a><br/>\n+ *      <a href=\"#23\">23. (**New**) Automatic instantiation of &#064;Spies, &#064;InjectMocks and constructor injection goodness (Since 1.9)</a><br/>\n+ *      <a href=\"#24\">24. (**New**) One-liner stubs (Since 1.9)</a><br/>\n  * </b>\n  * \n  * <p>\n  *   verify(mock, new Timeout(100, yourOwnVerificationMode)).someMethod();\n  * </pre>\n  *\n- * <h3 id=\"23\">23. (**New**) Automatic instantiation of &#064;Spy, &#064;InjectMocks fields (Since 1.9)</h3>\n+ * <h3 id=\"23\">23. (**New**) Automatic instantiation of &#064;Spies, &#064;InjectMocks and constructor injection goodness (Since 1.9)</h3>\n  * <p>\n  * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields\n- * using constructor injection, setter injection, or field injection.\n+ * using <b>constructor</b> injection, <b>setter</b> injection, or <b>field</b> injection.\n  * <p>\n  * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)} or {@link MockitoJUnitRunner}.\n  * <p>\n- * Read more about available tricks {@link InjectMocks}\n+ * Read more about available tricks and the rules of injection in the javadoc for {@link InjectMocks}\n  * <pre>\n  * //instead:\n  * &#064;Spy BeerDrinker drinker = new BeerDrinker();\n  * &#064;InjectMocks LocalPub;\n  * </pre>\n  *\n- * <h3> id=\"24\">24. (**New**) Inline mock creation and stubbing (Since 1.9)\n- * <p>\n- * Mockito will now allow you to create mocks when stubbing. Example :\n+ * <h3 id=\"24\">24. (**New**) One-liner stubs (Since 1.9)\n+ * <p>\n+ * Mockito will now allow you to create mocks when stubbing.\n+ * Basically, it allows to create a stub in one line of code.\n+ * Example :\n  * <pre>\n  * Car car = when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();\n  * </pre>\n--- a/src/org/mockito/stubbing/OngoingStubbing.java\n+++ b/src/org/mockito/stubbing/OngoingStubbing.java\n     /**\n      * Sets a generic Answer for the method.\n      *\n-     * This method is an alias of {@link #thenAnswer(Answer)}.\n+     * This method is an alias of {@link #thenAnswer(Answer)}. This alias allows\n+     * more readable tests on occasion, for example:\n+     * <pre>\n+     * //using 'then' alias:\n+     * when(mock.foo()).then(returnCoolValue());\n+     *\n+     * //versus good old 'thenAnswer:\n+     * when(mock.foo()).thenAnswer(byReturningCoolValue());\n+     * </pre>\n      *\n      * @param answer the custom answer to execute.\n      * @return iOngoingStubbing object that allows stubbing consecutive calls", "timestamp": 1301818310, "metainfo": ""}