{"sha": "7a0247a321451f9f80b37f0e7edcaa521385be09", "log": "Remove @Override annotation for implementing interface methods.  Mockito is configured with 1.5 source/target compatibility (according to build.gradle). In Java 5 it's illegal to specify the @Override annotation on method implementations based on interface. This change removes those in order to have the Mockito compile on 1.5 without compilation errors.  Signed-off-by: Gunnar Wagenknecht <gunnar@wagenknecht.org>", "commit": "\n--- a/src/org/mockito/internal/creation/DelegatingMethod.java\n+++ b/src/org/mockito/internal/creation/DelegatingMethod.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n-package org.mockito.internal.creation;\n-\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-\n-import org.mockito.internal.invocation.MockitoMethod;\n-\n-public class DelegatingMethod implements MockitoMethod {\n-\n-    private final Method method;\n-\n-    public DelegatingMethod(Method method) {\n-        assert method != null : \"Method cannot be null\";\n-        this.method = method;\n-    }\n-\n-    public Class<?>[] getExceptionTypes() {\n-        return method.getExceptionTypes();\n-    }\n-\n-    public Method getJavaMethod() {\n-        return method;\n-    }\n-\n-    public String getName() {\n-        return method.getName();\n-    }\n-\n-    public Class<?>[] getParameterTypes() {\n-        return method.getParameterTypes();\n-    }\n-\n-    public Class<?> getReturnType() {\n-        return method.getReturnType();\n-    }\n-\n-    public boolean isVarArgs() {\n-        return method.isVarArgs();\n-    }\n-\n-    @Override\n-    public boolean isAbstract() {\n-        return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n-    }\n-    \n-    @Override\n-    public int hashCode() {\n-        return 1;\n-    }\n-    \n-    @Override\n-    public boolean equals(Object obj) {\n-        return method.equals(obj);\n-    }\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.creation;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+import org.mockito.internal.invocation.MockitoMethod;\n+\n+public class DelegatingMethod implements MockitoMethod {\n+\n+    private final Method method;\n+\n+    public DelegatingMethod(Method method) {\n+        assert method != null : \"Method cannot be null\";\n+        this.method = method;\n+    }\n+\n+    public Class<?>[] getExceptionTypes() {\n+        return method.getExceptionTypes();\n+    }\n+\n+    public Method getJavaMethod() {\n+        return method;\n+    }\n+\n+    public String getName() {\n+        return method.getName();\n+    }\n+\n+    public Class<?>[] getParameterTypes() {\n+        return method.getParameterTypes();\n+    }\n+\n+    public Class<?> getReturnType() {\n+        return method.getReturnType();\n+    }\n+\n+    public boolean isVarArgs() {\n+        return method.isVarArgs();\n+    }\n+\n+    public boolean isAbstract() {\n+        return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return 1;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        return method.equals(obj);\n+    }\n }\n--- a/src/org/mockito/internal/invocation/InvocationImpl.java\n+++ b/src/org/mockito/internal/invocation/InvocationImpl.java\n     public Object[] getArguments() {\n         return arguments;\n     }\n-    \n-    @Override\n+\n     public <T> T getArgumentAt(int index, Class<T> clazz) {\n         return (T) arguments[index];\n     }\n--- a/test/org/mockitousage/serialization/DeepStubsSerializableTest.java\n+++ b/test/org/mockitousage/serialization/DeepStubsSerializableTest.java\n         public Container(E e) { this.e = e; }\n         public E get() { return e; }\n \n-        @Override\n         public Iterator<E> iterator() {\n             return new Iterator<E>() {\n-                @Override public boolean hasNext() { return true; }\n-                @Override public E next() { return e; }\n-                @Override public void remove() { }\n+                public boolean hasNext() { return true; }\n+                public E next() { return e; }\n+                public void remove() { }\n             };\n         }\n     }", "timestamp": 1406514710, "metainfo": ""}