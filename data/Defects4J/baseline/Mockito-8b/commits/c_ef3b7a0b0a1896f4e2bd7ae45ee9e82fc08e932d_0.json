{"sha": "ef3b7a0b0a1896f4e2bd7ae45ee9e82fc08e932d", "log": "Last touches to the work on exception messages more descriptive", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n             \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n                 \"\"), details);\n     }\n+\n+    public void cannotInitializeForInjectMocksAnnotation(String fieldName, Exception details) {\n+        throw new MockitoException(join(\"Cannot instianate @InjectMocks field named '\" + fieldName + \"'.\",\n+            \"You haven't provided the instance for spying at field declaration so I tried to construct the instance.\",\n+            \"However, I failed because: \" + details.getMessage(),\n+            \"Examples of correct usage of @InjectMocks:\",\n+            \"   @InjectMocks Service service = new Service();\",\n+            \"   @InjectMocks Service service; //only if Service has parameterless constructor\",\n+            \"   //also, don't forget about MockitoAnnotations.initMocks();\",\n+            \"   //and... don't forget about some @Mocks for injection :)\",\n+                \"\"), details);\n+    }\n }\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n  */\n package org.mockito.internal.configuration;\n \n+import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.FieldInitializer;\n     //   - else don't fail, user will then provide dependencies\n \tpublic void injectMocksOnFields(Set<Field> testClassFields, Set<Object> mocks, Object testClass) {\n         for (Field field : testClassFields) {\n-            Object fieldInstance = new FieldInitializer(testClass, field).initialize();\n+            Object fieldInstance = null;\n+            try {\n+                fieldInstance = new FieldInitializer(testClass, field).initialize();\n+            } catch (MockitoException e) {\n+                new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e);\n+            }\n \n             // for each field in the class hierarchy\n             Class<?> fieldClass = fieldInstance.getClass();\n--- a/test/org/mockitousage/annotation/MockInjectionTest.java\n+++ b/test/org/mockitousage/annotation/MockInjectionTest.java\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.Spy;\n+import org.mockito.exceptions.base.MockitoException;\n import org.mockitoutil.TestBase;\n \n import java.util.List;\n         assertSame(baseUnderTestingInstance, initializedBase);\n     }\n \n+    @Test\n+    public void shouldReportNicely() throws Exception {\n+        Object failing = new Object() {\n+            @InjectMocks\n+            ThrowingConstructor c;\n+        };\n+        try {\n+            MockitoAnnotations.initMocks(failing);\n+            fail();\n+        } catch (MockitoException e) {\n+            assertContains(\"correct usage of @InjectMocks\", e.getMessage());\n+        }\n+    }\n+\n+    static class ThrowingConstructor {\n+        ThrowingConstructor() { throw new RuntimeException(\"aha\");};\n+    }\n+\n     static class SuperUnderTesting {\n \n \t\tprivate List aList;", "timestamp": 1288381822, "metainfo": ""}