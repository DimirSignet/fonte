{"sha": "76507068ae1bb20962278437f1ff30c743b0655f", "log": "reformatted a bit", "commit": "\n--- a/test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java\n         \tMockitoAnnotations.initMocks(new FailTestClass());\n             fail();\n         } catch (MockitoException e) {\n-            Assertions.assertThat(e.getMessage()).contains(Observable.class.getSimpleName()).contains(\"serializable()\").contains(\"implement Serializable\");\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(Observable.class.getSimpleName())\n+                    .contains(\"serializable()\")\n+                    .contains(\"implement Serializable\");\n         }\n     }\n }\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n         IMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());\n \n         //then\n-        Assertions.assertThat((Object) serializeAndBack((List) mock)).isInstanceOf(List.class).isInstanceOf(IMethods.class);\n-        Assertions.assertThat((Object) serializeAndBack((List) mockTwo)).isInstanceOf(List.class).isInstanceOf(IMethods.class);\n+        Assertions.assertThat((Object) serializeAndBack((List) mock))\n+                .isInstanceOf(List.class)\n+                .isInstanceOf(IMethods.class);\n+        Assertions.assertThat((Object) serializeAndBack((List) mockTwo))\n+                .isInstanceOf(List.class)\n+                .isInstanceOf(IMethods.class);\n     }\n \n     @Test\n             serializeMock(mock(Observable.class, withSettings().serializable()));\n             fail();\n         } catch (MockitoException e) {\n-            Assertions.assertThat(e.getMessage()).contains(Observable.class.getSimpleName()).contains(\"serializable()\").contains(\"implement Serializable\");\n+            Assertions.assertThat(e.getMessage())\n+                    .contains(Observable.class.getSimpleName())\n+                    .contains(\"serializable()\")\n+                    .contains(\"implement Serializable\");\n         }\n     }\n \n     @Test\n     public void try_some_mocks_with_current_answers() throws Exception {\n-        IMethods iMethods = mock(IMethods.class, RETURNS_DEEP_STUBS);\n+        IMethods iMethods = mock(IMethods.class, withSettings().serializable().defaultAnswer(RETURNS_DEEP_STUBS));\n+\n+        when(iMethods.iMethodsReturningMethod().linkedListReturningMethod().contains(anyString())).thenReturn(false);\n \n         serializeAndBack(iMethods);\n-\n-\n     }\n }", "timestamp": 1353868472, "metainfo": ""}