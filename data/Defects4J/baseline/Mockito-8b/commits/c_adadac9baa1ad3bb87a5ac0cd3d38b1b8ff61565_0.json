{"sha": "adadac9baa1ad3bb87a5ac0cd3d38b1b8ff61565", "log": "cleaning up GenericMaster.java  --HG-- branch : issue230", "commit": "\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n  */\n package org.mockito.internal.util.reflection;\n \n-import java.lang.reflect.*;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n \n @SuppressWarnings(\"unchecked\")\n public class GenericMaster {\n         return Object.class;\n     }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    /////////////////////////////\n-    /////////////////////////////\n-    ////////// O  L  D //////////\n-    /////////////////////////////\n-    /////////////////////////////\n-\n-\n-\n-\n-    /**\n-     * Identify the returned generic type value of the given method from the given class.\n-     *\n-     * @param method Method whose generic part of the returned type must be identified.\n-     * @param onClass Owner class from which the resolution of generic type value must be identified.\n-     * @return Generic type value if found, <code>null</code> otherwise.\n-     */\n-    public Class<?> identifyGenericReturnType(Method method, Class<?> onClass) {\n-        Type genericReturnType = method.getGenericReturnType();\n-\n-        // if method has return type like List<Number>\n-        if (genericReturnType instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType) genericReturnType;\n-\n-            // number of type argument of List for example\n-            if (parameterizedType.getActualTypeArguments().length <= 0) {\n-                return null; // not supported yet, see #getActualTypeArguments javadoc\n-            }\n-            Type type = parameterizedType.getActualTypeArguments()[0];\n-\n-            // if type argument is a simple class, for example Number in List<Number>\n-            if (type instanceof Class) {\n-                return (Class) type;\n-            }\n-            if (type instanceof TypeVariable) {\n-                throw new IllegalStateException();\n-//                return identifyReturnTypeFromClass((TypeVariable) type, onClass);\n-            }\n-            if (type instanceof ParameterizedType) {\n-                throw new IllegalStateException();\n-//                ParameterizedType subParameterizedType = (ParameterizedType) type;\n-//                return (Class<?>) subParameterizedType.getRawType();\n-            }\n-            return null;\n-        }\n-\n-//        if (genericReturnType instanceof TypeVariable) {\n-//            TypeVariable typeVariable = (TypeVariable) genericReturnType;\n-//            return identifyReturnTypeFromClass(typeVariable, onClass);\n-//        }\n-\n-        return null;\n-    }\n-\n-    private Class<?> identifyReturnTypeFromClass(TypeVariable typeVariable, Class<?> onClass) {\n-        List<Type> genericInterfaces = new ArrayList<Type>(Arrays.asList(onClass.getGenericInterfaces()));\n-        genericInterfaces.add(onClass.getGenericSuperclass());\n-\n-        for (Type genericInterface : genericInterfaces) {\n-\n-            if (genericInterface instanceof ParameterizedType) {\n-                ParameterizedType parameterizedType = (ParameterizedType) genericInterface;\n-                parameterizedType.getActualTypeArguments();\n-\n-                if (parameterizedType.getRawType() instanceof Class) {\n-                    Class rawType = (Class) parameterizedType.getRawType();\n-\n-                    TypeVariable[] typeParameters = rawType.getTypeParameters();\n-\n-                    for (int typeVarPosition = 0; typeVarPosition < typeParameters.length; typeVarPosition++) {\n-                        TypeVariable typeParameter = typeParameters[typeVarPosition];\n-                        if (typeVariable.equals(typeParameter)) {\n-                            Type typeVariableValue = parameterizedType.getActualTypeArguments()[typeVarPosition];\n-                            if (typeVariableValue instanceof Class) {\n-                                return (Class) typeVariableValue;\n-                            }\n-\n-                            if (typeVariableValue instanceof TypeVariable) {\n-                                TypeVariable variableValue = (TypeVariable) typeVariableValue;\n-\n-                                throw new IllegalStateException(\"type var :\" + variableValue);\n-                            }\n-\n-//                            if (typeVariableValue instanceof ParameterizedType) {\n-//                                return (Class<?>) ((ParameterizedType) typeVariableValue).getRawType();\n-//                            }\n-                        }\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return null;\n-    }\n }\n--- a/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n+++ b/test/org/mockito/internal/util/reflection/GenericMasterTest.java\n  */\n package org.mockito.internal.util.reflection;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n import java.util.*;\n \n         assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));\n     }\n \n-    @Test\n-    public void can_identify_generic_type_of_returned_collection() throws Exception {\n-        assertEquals(Number.class, m.identifyGenericReturnType(method(\"numberList\"), this.getClass()));\n-    }\n-\n-    @Test\n-    public void can_identify_generic_type_of_returned_user_type() throws Exception {\n-        assertEquals(Number.class, m.identifyGenericReturnType(method(\"numberComparable\"), this.getClass()));\n-    }\n-\n-    @Test\n-    public void can_identify_generic_type_of_returned_type_when_owner_type_forces_generic_type() throws Exception {\n-        assertEquals(Set.class, m.identifyGenericReturnType(method(ListSet.class, \"iterator\"), ListSet.class));\n-        assertEquals(Number.class, m.identifyGenericReturnType(method(MapNumberString.class, \"keySet\"), MapNumberString.class));\n-        assertEquals(String.class, m.identifyGenericReturnType(method(MapNumberString.class, \"values\"), MapNumberString.class));\n-        assertEquals(String.class, m.identifyGenericReturnType(method(MapNumberString.class, \"remove\"), MapNumberString.class));\n-        assertEquals(Map.Entry.class, m.identifyGenericReturnType(method(MapNumberString.class, \"entrySet\"), MapNumberString.class));\n-    }\n-\n-    @Test\n-    public void can_identify_type_variable_upper_bound() throws Exception {\n-        assertEquals(Number.class, m.identifyGenericReturnType(method(HashMapNumberString.class, \"keySet\"), HashMapNumberString.class));\n-        assertEquals(Type.class, m.identifyGenericReturnType(method(\"typeList\"), this.getClass()));\n-    }\n-\n-    @Test\n-    @Ignore(\"Internal API not ready for nested generics, doesn't work\")\n-    public void can_identify_nested_generic_type_of_returned_type_when_owner_forces_generic_type() throws Exception {\n-    }\n-\n-    @Test\n-    public void will_return_null_if_return_type_not_generic() throws Exception {\n-        assertEquals(null, m.identifyGenericReturnType(method(\"rawList\"), this.getClass()));\n-    }\n-\n-\n-\n-\n-    private Method method(String noArgMethod) throws NoSuchMethodException {\n-        return method(this.getClass(), noArgMethod);\n-    }\n-\n-    private Method method(Class<?> clazz, String noArgMethod) throws NoSuchMethodException {\n-        for (Method method : clazz.getMethods()) {\n-            if (method.getName().contains(noArgMethod)) {\n-                return method;\n-            }\n-        }\n-        throw new NoSuchMethodException(\"method \" + noArgMethod + \" do not exist in \" + clazz.getSimpleName());\n-    }\n-\n     private Field field(String fieldName) throws SecurityException, NoSuchFieldException {\n         return this.getClass().getDeclaredField(fieldName);\n     }\n \n-\n }", "timestamp": 1343148852, "metainfo": ""}