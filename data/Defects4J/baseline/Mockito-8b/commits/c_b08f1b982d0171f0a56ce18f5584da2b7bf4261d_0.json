{"sha": "b08f1b982d0171f0a56ce18f5584da2b7bf4261d", "log": "-killed/refactored some tests  --HG-- rename : test/org/easymock/tests2/CallbackAndArgumentsTest.java => test/org/easymock/tests/CallbackAndArgumentsTest.java rename : test/org/easymock/tests2/NameTest.java => test/org/easymock/tests/NameTest.java rename : test/org/easymock/tests2/UsageMatchersTest.java => test/org/easymock/tests/UsageMatchersTest.java rename : test/org/easymock/tests2/UsageStrictMockTest.java => test/org/easymock/tests/UsageStrictMockTest.java rename : test/org/easymock/tests2/UsageTest.java => test/org/easymock/tests/UsageTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4014", "commit": "\n--- a/src/org/mockito/MockitoControl.java\n+++ b/src/org/mockito/MockitoControl.java\n             return ToTypeMappings.emptyReturnValueFor(method.getReturnType());\n         }\n         \n-        MockitoOperations.reportControlForStubbing(this);\n+        MockitoOperations.reportLastControlForStubbing(this);\n         \n         behavior.addInvocation(invocation);\n         \n--- a/src/org/mockito/MockitoOperations.java\n+++ b/src/org/mockito/MockitoOperations.java\n     private final static ThreadLocal<VerifyingMode> verifyingModeLocal = new ThreadLocal<VerifyingMode>();\n     private final static ThreadLocal<Throwable> throwableToBeSetOnVoidMethod = new ThreadLocal<Throwable>();\n \n-    public static synchronized void reportControlForStubbing(MockitoControl mockitoControl) {\n+    public static synchronized void reportLastControlForStubbing(MockitoControl mockitoControl) {\n         controlForStubbing.set(mockitoControl);\n     }\n \n--- a/src/org/mockito/exceptions/MockVerificationAssertionError.java\n+++ b/src/org/mockito/exceptions/MockVerificationAssertionError.java\n package org.mockito.exceptions;\n \n-import java.util.*;\n \n public class MockVerificationAssertionError extends AssertionError {\n \n     public MockVerificationAssertionError() {\n         super(\"Mock verification failed\");\n-        \n-        List<StackTraceElement> filteredStackTrace = new LinkedList<StackTraceElement>();\n-        for(StackTraceElement trace : getStackTrace()) {\n-            \n-//            filteredStackTrace\n-        }\n     }\n }\n--- /dev/null\n+++ b/test/org/easymock/tests/AnswerTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+import org.easymock.IAnswer;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AnswerTest {\n+\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = createMock(IMethods.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void answer() {\n+        IAnswer firstAnswer = new IAnswer() {\n+            public Object answer() {\n+                assertEquals(new Object[] { 1, \"2\", \"3\" },\n+                        getCurrentArguments());\n+                return \"Call answered\";\n+            }\n+        };\n+\n+        IAnswer secondAnswer = new IAnswer() {\n+            public Object answer() {\n+                assertEquals(new Object[] { 1, \"2\", \"3\" },\n+                        getCurrentArguments());\n+                throw new IllegalStateException(\"Call answered\");\n+            }\n+        };\n+\n+        expect(mock.threeArgumentMethod(1, \"2\", \"3\")).andAnswer(firstAnswer)\n+                .andReturn(\"Second call\").andAnswer(secondAnswer).andReturn(\n+                        \"Fourth call\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"Call answered\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n+        assertEquals(\"Second call\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n+        try {\n+            mock.threeArgumentMethod(1, \"2\", \"3\");\n+            fail();\n+        } catch (IllegalStateException expected) {\n+            assertEquals(\"Call answered\", expected.getMessage());\n+        }\n+        assertEquals(\"Fourth call\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n+\n+        verify(mock);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void stubAnswer() {\n+        IAnswer firstAnswer = new IAnswer() {\n+            public Object answer() {\n+                assertEquals(new Object[] { 1, \"2\", \"3\" },\n+                        getCurrentArguments());\n+                return \"Call answered\";\n+            }\n+        };\n+\n+        IAnswer secondAnswer = new IAnswer() {\n+            public Object answer() {\n+                assertEquals(new Object[] { 1, \"2\", \"4\" },\n+                        getCurrentArguments());\n+                return \"Call answered\";\n+            }\n+        };\n+\n+        expect(mock.threeArgumentMethod(1, \"2\", \"3\")).andReturn(42)\n+                .andStubAnswer(firstAnswer);\n+        expect(mock.threeArgumentMethod(1, \"2\", \"4\")).andStubAnswer(\n+                secondAnswer);\n+\n+        replay(mock);\n+\n+        assertEquals(42, mock.threeArgumentMethod(1, \"2\", \"3\"));\n+        assertEquals(\"Call answered\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n+        assertEquals(\"Call answered\", mock.threeArgumentMethod(1, \"2\", \"4\"));\n+        assertEquals(\"Call answered\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n+        assertEquals(\"Call answered\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void nullAnswerNotAllowed() {\n+        try {\n+            expect(mock.threeArgumentMethod(1, \"2\", \"3\")).andAnswer(null);\n+            fail();\n+        } catch (NullPointerException expected) {\n+            assertEquals(\"answer object must not be null\", expected\n+                    .getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void nullStubAnswerNotAllowed() {\n+        try {\n+            expect(mock.threeArgumentMethod(1, \"2\", \"3\")).andStubAnswer(null);\n+            fail();\n+        } catch (NullPointerException expected) {\n+            assertEquals(\"answer object must not be null\", expected\n+                    .getMessage());\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/CallbackAndArgumentsTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+import org.easymock.IAnswer;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CallbackAndArgumentsTest {\n+\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = createStrictMock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void callbackGetsArguments() {\n+\n+        final StringBuffer buffer = new StringBuffer();\n+\n+        mock.simpleMethodWithArgument((String) notNull());\n+        expectLastCall().andAnswer(new IAnswer<Object>() {\n+            public Object answer() {\n+                buffer.append((String) getCurrentArguments()[0]);\n+                return null;\n+            }\n+        }).times(2);\n+\n+        replay(mock);\n+\n+        mock.simpleMethodWithArgument(\"1\");\n+        mock.simpleMethodWithArgument(\"2\");\n+\n+        verify(mock);\n+\n+        assertEquals(\"12\", buffer.toString());\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void currentArgumentsFailsOutsideCallbacks() {\n+        getCurrentArguments();\n+    }\n+\n+    @Test\n+    public void callbackGetsArgumentsEvenIfAMockCallsAnother() {\n+\n+        final StringBuffer buffer = new StringBuffer();\n+\n+        final IMethods mock2 = createStrictMock(IMethods.class);\n+        mock2.simpleMethod();\n+        expectLastCall().andAnswer(new IAnswer<Object>() {\n+            public Object answer() {\n+                // empty, only needed to force deletion of arguments\n+                return null;\n+            }\n+        }).times(2);\n+\n+        mock.simpleMethodWithArgument((String) notNull());\n+        expectLastCall().andAnswer(new IAnswer<Object>() {\n+            public Object answer() {\n+                mock2.simpleMethod();\n+                buffer.append((String) getCurrentArguments()[0]);\n+                return null;\n+            }\n+        }).times(2);\n+\n+        replay(mock);\n+        replay(mock2);\n+\n+        mock.simpleMethodWithArgument(\"1\");\n+        mock.simpleMethodWithArgument(\"2\");\n+\n+        verify(mock);\n+        verify(mock2);\n+\n+        assertEquals(\"12\", buffer.toString());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/CallbackTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+import org.easymock.IAnswer;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CallbackTest {\n+\n+    private IMethods mock;\n+\n+    private static class Callback<T> implements IAnswer<T> {\n+        private int callCount;\n+\n+        private T result;\n+\n+        public Callback(T result) {\n+            this.result = result;\n+        }\n+\n+        public void run() {\n+        }\n+\n+        public int getCallCount() {\n+            return callCount;\n+        }\n+\n+        public T answer() throws Throwable {\n+            callCount++;\n+            return result;\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        mock = createStrictMock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void callback() {\n+        Callback<String> c1 = new Callback<String>(\"1\");\n+        Callback<Object> c2 = new Callback<Object>(null);\n+        Callback<Object> c3 = new Callback<Object>(null);\n+\n+        expect(mock.oneArg(\"2\")).andAnswer(c1).times(2);\n+        mock.simpleMethodWithArgument(\"One\");\n+        expectLastCall().andAnswer(c2);\n+        mock.simpleMethodWithArgument(\"Two\");\n+        expectLastCall().andAnswer(c3).times(2);\n+\n+        replay(mock);\n+\n+        mock.oneArg(\"2\");\n+        mock.oneArg(\"2\");\n+        try {\n+            mock.oneArg(\"2\");\n+        } catch (AssertionError ignored) {\n+        }\n+        try {\n+            mock.simpleMethodWithArgument(\"Two\");\n+        } catch (AssertionError ignored) {\n+        }\n+        mock.simpleMethodWithArgument(\"One\");\n+        try {\n+            mock.simpleMethodWithArgument(\"One\");\n+        } catch (AssertionError ignored) {\n+        }\n+        mock.simpleMethodWithArgument(\"Two\");\n+        mock.simpleMethodWithArgument(\"Two\");\n+        try {\n+            mock.simpleMethodWithArgument(\"Two\");\n+        } catch (AssertionError ignored) {\n+        }\n+        verify(mock);\n+\n+        assertEquals(2, c1.getCallCount());\n+        assertEquals(1, c2.getCallCount());\n+        assertEquals(2, c3.getCallCount());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/CompareToTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.junit.Assert.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.easymock.internal.matchers.*;\n+import org.junit.Test;\n+\n+public class CompareToTest {\n+\n+    @Test\n+    public void testNotComparable() {\n+        CompareTo<Long> cmpTo = new CompareTo<Long>(5L) {\n+\n+            @Override\n+            protected String getName() {\n+                return null;\n+            }\n+\n+            @Override\n+            protected boolean matchResult(int result) {\n+                fail(\"Shouldn't be called since the passed argument is not Comparable\");\n+                return true;\n+            }\n+            \n+        };\n+        \n+        assertFalse(cmpTo.matches(new Object()));\n+    }\n+    @Test\n+    public void testLessThan() {\n+        test(new LessThan<String>(\"b\"), true, false, false, \"lt\");\n+    }\n+\n+    @Test\n+    public void testGreateThan() {\n+        test(new GreaterThan<String>(\"b\"), false, true, false, \"gt\");\n+    }\n+\n+    @Test\n+    public void testLessOrEqual() {\n+        test(new LessOrEqual<String>(\"b\"), true, false, true, \"leq\");\n+    }\n+\n+    @Test\n+    public void testGreateOrEqual() {\n+        test(new GreaterOrEqual<String>(\"b\"), false, true, true, \"geq\");\n+    }\n+\n+    @Test\n+    public void testCompareEqual() {\n+        test(new CompareEqual<String>(\"b\"), false, false, true, \"cmpEq\");\n+\n+        // Make sure it works when equals provide a different result than\n+        // compare\n+        CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(\n+                new BigDecimal(\"5.00\"));\n+        assertTrue(cmpEq.matches(new BigDecimal(\"5\")));\n+    }\n+\n+    private void test(CompareTo<String> cmpTo, boolean lower, boolean higher,\n+            boolean equals, String name) {\n+\n+        assertEquals(lower, cmpTo.matches(\"a\"));\n+        assertEquals(equals, cmpTo.matches(\"b\"));\n+        assertEquals(higher, cmpTo.matches(\"c\"));\n+\n+        StringBuffer sb = new StringBuffer();\n+        cmpTo.appendTo(sb);\n+        assertEquals(name + \"(b)\", sb.toString());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/ConstraintsToStringTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.easymock.IArgumentMatcher;\n+import org.easymock.internal.matchers.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ConstraintsToStringTest {\n+    private StringBuffer buffer;\n+\n+    @Before\n+    public void setup() {\n+        buffer = new StringBuffer();\n+    }\n+\n+    @Test\n+    public void sameToStringWithString() {\n+        new Same(\"X\").appendTo(buffer);\n+        assertEquals(\"same(\\\"X\\\")\", buffer.toString());\n+\n+    }\n+\n+    @Test\n+    public void nullToString() {\n+        Null.NULL.appendTo(buffer);\n+        assertEquals(\"isNull()\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void notNullToString() {\n+        NotNull.NOT_NULL.appendTo(buffer);\n+        assertEquals(\"notNull()\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void anyToString() {\n+        Any.ANY.appendTo(buffer);\n+        assertEquals(\"<any>\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void sameToStringWithChar() {\n+        new Same('x').appendTo(buffer);\n+        assertEquals(\"same('x')\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void sameToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        new Same(o).appendTo(buffer);\n+        assertEquals(\"same(X)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void equalsToStringWithString() {\n+        new Equals(\"X\").appendTo(buffer);\n+        assertEquals(\"\\\"X\\\"\", buffer.toString());\n+\n+    }\n+\n+    @Test\n+    public void equalsToStringWithChar() {\n+        new Equals('x').appendTo(buffer);\n+        assertEquals(\"'x'\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void equalsToStringWithObject() {\n+        Object o = new Object() {\n+            @Override\n+            public String toString() {\n+                return \"X\";\n+            }\n+        };\n+        new Equals(o).appendTo(buffer);\n+        assertEquals(\"X\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void orToString() {\n+        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        new Or(matchers).appendTo(buffer);\n+        assertEquals(\"or(1, 2)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void notToString() {\n+        new Not(new Equals(1)).appendTo(buffer);\n+        assertEquals(\"not(1)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void andToString() {\n+        List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();\n+        matchers.add(new Equals(1));\n+        matchers.add(new Equals(2));\n+        new And(matchers).appendTo(buffer);\n+        assertEquals(\"and(1, 2)\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void startsWithToString() {\n+        new StartsWith(\"AB\").appendTo(buffer);\n+        assertEquals(\"startsWith(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void endsWithToString() {\n+        new EndsWith(\"AB\").appendTo(buffer);\n+        assertEquals(\"endsWith(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void containsToString() {\n+        new Contains(\"AB\").appendTo(buffer);\n+        assertEquals(\"contains(\\\"AB\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void findToString() {\n+        new Find(\"\\\\s+\").appendTo(buffer);\n+        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void matchesToString() {\n+        new Matches(\"\\\\s+\").appendTo(buffer);\n+        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/NameTest.java\n+package org.easymock.tests;\n+\n+import org.easymock.IMocksControl;\n+import org.junit.Test;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+public class NameTest {\n+    @Test\n+    public void nameForMock() {\n+        IMethods mock = createMock(\"mock\", IMethods.class);\n+        mock.simpleMethod();\n+        replay(mock);\n+        try {\n+            verify(mock);\n+        } catch (AssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Expectation failure on verify:\\n    mock.simpleMethod(): expected: 1, actual: 0\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    @Test\n+    public void nameForStrictMock() {\n+        IMethods mock = createStrictMock(\"mock\", IMethods.class);\n+        mock.simpleMethod();\n+        replay(mock);\n+        try {\n+            verify(mock);\n+        } catch (AssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Expectation failure on verify:\\n    mock.simpleMethod(): expected: 1, actual: 0\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    @Test\n+    public void nameForNiceMock() {\n+        IMethods mock = createNiceMock(\"mock\", IMethods.class);\n+        mock.simpleMethod();\n+        replay(mock);\n+        try {\n+            verify(mock);\n+        } catch (AssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Expectation failure on verify:\\n    mock.simpleMethod(): expected: 1, actual: 0\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    @Test\n+    public void nameForMocksControl() {\n+        IMocksControl control = createControl();\n+        IMethods mock = control.createMock(\"mock\", IMethods.class);\n+        mock.simpleMethod();\n+        replay(mock);\n+        try {\n+            verify(mock);\n+        } catch (AssertionError expected) {\n+            String actualMessage = expected.getMessage();\n+            String expectedMessage = \"\\n  Expectation failure on verify:\\n    mock.simpleMethod(): expected: 1, actual: 0\";\n+            assertEquals(expectedMessage, actualMessage);         \n+        }\n+    }\n+    \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier() {\n+        try {\n+            createMock(\"no-valid-java-identifier\", IMethods.class);\n+            throw new AssertionError();\n+        } catch (IllegalArgumentException expected) {\n+            assertEquals(\"'no-valid-java-identifier' is not a valid Java identifier.\", expected.getMessage());\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/StubTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StubTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = createStrictMock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void stub() {\n+        mock.simpleMethodWithArgument(\"1\");\n+        expectLastCall().anyTimes();\n+        mock.simpleMethodWithArgument(\"2\");\n+        expectLastCall().anyTimes();\n+        mock.simpleMethodWithArgument(\"3\");\n+        expectLastCall().asStub();\n+\n+        replay(mock);\n+\n+        mock.simpleMethodWithArgument(\"3\");\n+        mock.simpleMethodWithArgument(\"3\");\n+        mock.simpleMethodWithArgument(\"1\");\n+        mock.simpleMethodWithArgument(\"2\");\n+        mock.simpleMethodWithArgument(\"3\");\n+        mock.simpleMethodWithArgument(\"3\");\n+\n+        verify(mock);\n+\n+    }\n+\n+    @Test\n+    public void stubWithReturnValue() {\n+        expect(mock.oneArg(\"1\")).andReturn(\"A\").andStubReturn(\"B\");\n+        expect(mock.oneArg(\"2\")).andThrow(new IllegalArgumentException())\n+                .andStubThrow(new IllegalStateException());\n+\n+        replay(mock);\n+\n+        assertEquals(\"A\", mock.oneArg(\"1\"));\n+        assertEquals(\"B\", mock.oneArg(\"1\"));\n+        assertEquals(\"B\", mock.oneArg(\"1\"));\n+        try {\n+            mock.oneArg(\"2\");\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+        assertEquals(\"B\", mock.oneArg(\"1\"));\n+        try {\n+            mock.oneArg(\"2\");\n+        } catch (IllegalStateException ignored) {\n+        }\n+        assertEquals(\"B\", mock.oneArg(\"1\"));\n+        try {\n+            mock.oneArg(\"2\");\n+        } catch (IllegalStateException ignored) {\n+        }\n+        verify(mock);\n+    }\n+\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/UsageConstraintsTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.junit.Assert.*;\n+import static org.easymock.EasyMock.*;\n+\n+import java.math.*;\n+import java.util.*;\n+\n+import org.easymock.*;\n+import org.easymock.internal.matchers.*;\n+import org.easymock.tests.*;\n+import org.junit.*;\n+\n+public class UsageConstraintsTest {\n+    private IMethods mock;\n+\n+    @Before\n+    public void setUp() {\n+        mock = createMock(IMethods.class);\n+    }\n+\n+    @Test\n+    public void equalsMissing() {\n+        mock.simpleMethodWithArgument(not(eq(\"asd\")));\n+        try {\n+            mock.simpleMethodWithArgument(not(\"jkl\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"no matchers found.\", e.getMessage());\n+        }\n+        try {\n+            mock.simpleMethodWithArgument(or(eq(\"jkl\"), \"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"2 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+        try {\n+            mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n+            fail();\n+        } catch (IllegalStateException e) {\n+            assertEquals(\"3 matchers expected, 1 recorded.\", e.getMessage());\n+        }\n+\n+    }\n+\n+    @Test\n+    public void differentConstraintsOnSameCall() {\n+        mock.simpleMethodWithArgument((String) isNull());\n+        mock.simpleMethodWithArgument((String) notNull());\n+        replay(mock);\n+        mock.simpleMethodWithArgument(null);\n+        mock.simpleMethodWithArgument(\"2\");\n+    }\n+\n+    @Test\n+    public void equals() {\n+        assertEquals(new Equals(null), new Equals(null));\n+        assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));\n+        assertFalse(new Equals(null).equals(null));\n+        assertFalse(new Equals(null).equals(\"Test\"));\n+        try {\n+            new Equals(null).hashCode();\n+            fail();\n+        } catch (UnsupportedOperationException expected) {\n+        }\n+    }\n+\n+    @Test\n+    public void constraints() {\n+        expect(\n+                mock.threeArgumentMethod(and(geq(7), leq(10)),\n+                        isA(String.class), contains(\"123\"))).andReturn(\"456\")\n+                .atLeastOnce();\n+        replay(mock);\n+        boolean failed = false;\n+        try {\n+            mock.threeArgumentMethod(11, \"\", \"01234\");\n+        } catch (AssertionError expected) {\n+            failed = true;\n+        }\n+        if (!failed) {\n+            fail();\n+        }\n+        failed = false;\n+        try {\n+            mock.threeArgumentMethod(8, new Object(), \"01234\");\n+        } catch (AssertionError expected) {\n+            failed = true;\n+        }\n+        if (!failed) {\n+            fail();\n+        }\n+        failed = false;\n+        try {\n+            mock.threeArgumentMethod(8, \"\", \"no match\");\n+        } catch (AssertionError expected) {\n+            failed = true;\n+        }\n+        if (!failed) {\n+            fail();\n+        }\n+        assertEquals(\"456\", mock.threeArgumentMethod(8, \"\", \"01234\"));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void andOverloaded() {\n+        expect(mock.oneArg(and(eq(false), eq(false)))).andReturn(\"0\");\n+        expect(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(\"1\");\n+        expect(mock.oneArg(and(eq('a'), eq('a')))).andReturn(\"2\");\n+        expect(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(\"3\");\n+        expect(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(\"4\");\n+        expect(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(\"5\");\n+        expect(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(\"6\");\n+        expect(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(\"7\");\n+        expect(mock.oneArg(and(contains(\"a\"), contains(\"d\")))).andReturn(\"8\");\n+        expect(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn(\n+                \"9\");\n+        replay(mock);\n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        assertEquals(\"0\", mock.oneArg(false));\n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg('a'));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        assertEquals(\"8\", mock.oneArg(\"abcde\"));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void orOverloaded() {\n+        expect(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n+        expect(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n+        expect(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n+        expect(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n+        expect(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n+        expect(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n+        expect(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n+        expect(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n+        expect(mock.oneArg(or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n+        expect(mock.oneArg(or(eq(this.getClass()), eq(Object.class))))\n+                .andReturn(\"9\");\n+        replay(mock);\n+        assertEquals(\"9\", mock.oneArg(Object.class));\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        assertEquals(\"8\", mock.oneArg(\"jkl\"));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void notOverloaded() {\n+        expect(mock.oneArg(not(eq(false)))).andReturn(\"0\");\n+        expect(mock.oneArg(not(eq((byte) 1)))).andReturn(\"1\");\n+        expect(mock.oneArg(not(eq('a')))).andReturn(\"2\");\n+        expect(mock.oneArg(not(eq((double) 1)))).andReturn(\"3\");\n+        expect(mock.oneArg(not(eq((float) 1)))).andReturn(\"4\");\n+        expect(mock.oneArg(not(eq((int) 1)))).andReturn(\"5\");\n+        expect(mock.oneArg(not(eq((long) 1)))).andReturn(\"6\");\n+        expect(mock.oneArg(not(eq((short) 1)))).andReturn(\"7\");\n+        expect(mock.oneArg(not(contains(\"a\")))).andReturn(\"8\");\n+        expect(mock.oneArg(not(isA(Class.class)))).andReturn(\"9\");\n+        replay(mock);\n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"2\", mock.oneArg('b'));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"8\", mock.oneArg(\"bcde\"));\n+        assertEquals(\"4\", mock.oneArg((float) 2));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 2));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void lessOrEqualOverloaded() {\n+        expect(mock.oneArg(leq((byte) 1))).andReturn(\"1\");\n+        expect(mock.oneArg(leq((double) 1))).andReturn(\"3\");\n+        expect(mock.oneArg(leq((float) 1))).andReturn(\"4\");\n+        expect(mock.oneArg(leq((int) 1))).andReturn(\"5\");\n+        expect(mock.oneArg(leq((long) 1))).andReturn(\"6\");\n+        expect(mock.oneArg(leq((short) 1))).andReturn(\"7\");\n+        expect(mock.oneArg(leq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        replay(mock);\n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -5));\n+        assertEquals(\"5\", mock.oneArg((int) -2));\n+        assertEquals(\"6\", mock.oneArg((long) -3));\n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void lessThanOverloaded() {\n+        expect(mock.oneArg(lt((byte) 1))).andReturn(\"1\");\n+        expect(mock.oneArg(lt((double) 1))).andReturn(\"3\");\n+        expect(mock.oneArg(lt((float) 1))).andReturn(\"4\");\n+        expect(mock.oneArg(lt((int) 1))).andReturn(\"5\");\n+        expect(mock.oneArg(lt((long) 1))).andReturn(\"6\");\n+        expect(mock.oneArg(lt((short) 1))).andReturn(\"7\");\n+        expect(mock.oneArg(lt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        replay(mock);\n+        assertEquals(\"1\", mock.oneArg((byte) 0));\n+        assertEquals(\"3\", mock.oneArg((double) 0));\n+        assertEquals(\"7\", mock.oneArg((short) 0));\n+        assertEquals(\"4\", mock.oneArg((float) -4));\n+        assertEquals(\"5\", mock.oneArg((int) -34));\n+        assertEquals(\"6\", mock.oneArg((long) -6));\n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"0.5\")));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void greaterOrEqualOverloaded() {\n+        expect(mock.oneArg(geq((byte) 1))).andReturn(\"1\");\n+        expect(mock.oneArg(geq((double) 1))).andReturn(\"3\");\n+        expect(mock.oneArg(geq((float) 1))).andReturn(\"4\");\n+        expect(mock.oneArg(geq((int) 1))).andReturn(\"5\");\n+        expect(mock.oneArg(geq((long) 1))).andReturn(\"6\");\n+        expect(mock.oneArg(geq((short) 1))).andReturn(\"7\");\n+        expect(mock.oneArg(geq(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        replay(mock);\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 4));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void greaterThanOverloaded() {\n+        expect(mock.oneArg(gt((byte) 1))).andReturn(\"1\");\n+        expect(mock.oneArg(gt((double) 1))).andReturn(\"3\");\n+        expect(mock.oneArg(gt((float) 1))).andReturn(\"4\");\n+        expect(mock.oneArg(gt((int) 1))).andReturn(\"5\");\n+        expect(mock.oneArg(gt((long) 1))).andReturn(\"6\");\n+        expect(mock.oneArg(gt((short) 1))).andReturn(\"7\");\n+        expect(mock.oneArg(gt(new BigDecimal(\"1\")))).andReturn(\"8\");\n+        replay(mock);\n+        assertEquals(\"1\", mock.oneArg((byte) 2));\n+        assertEquals(\"3\", mock.oneArg((double) 2));\n+        assertEquals(\"7\", mock.oneArg((short) 2));\n+        assertEquals(\"4\", mock.oneArg((float) 3));\n+        assertEquals(\"5\", mock.oneArg((int) 2));\n+        assertEquals(\"6\", mock.oneArg((long) 5));\n+        assertEquals(\"8\", mock.oneArg(new BigDecimal(\"1.5\")));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void cmpTo() {\n+        expect(mock.oneArg(cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+        replay(mock);\n+        assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n+        verify(mock);\n+    }\n+\n+    public static class A {\n+        private int value;\n+\n+        public A(int value) {\n+            this.value = value;\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+    }\n+\n+    @Test\n+    public void compareWithComparator() {\n+        Comparator<A> comparator = new Comparator<A>() {\n+            public int compare(A a1, A a2) {\n+                return a1.getValue() - a2.getValue();\n+            }\n+        };\n+\n+        // Check my comparator works\n+        assertTrue(comparator.compare(new A(1), new A(2)) < 0);\n+        assertTrue(comparator.compare(new A(2), new A(1)) > 0);\n+        assertTrue(comparator.compare(new A(1), new A(1)) == 0);\n+\n+        // Now test EasyMock.cmp\n+        checkOrder(mock, true);\n+        \n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.EQUAL))).andReturn(\"0\");\n+        \n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.GREATER))).andReturn(\"1\");\n+        \n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.GREATER_OR_EQUAL))).andReturn(\"2\");\n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.GREATER_OR_EQUAL))).andReturn(\"2\");\n+        \n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.LESS_OR_EQUAL))).andReturn(\"3\");\n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.LESS_OR_EQUAL))).andReturn(\"3\");\n+        \n+        expect(mock.oneArg(cmp(new A(5), comparator, \n+                LogicalOperator.LESS_THAN))).andReturn(\"4\");\n+                \n+        replay(mock);\n+        \n+        checkItFails(null); // null is not comparable so always return false\n+        try {\n+            mock.oneArg(\"\");\n+            fail();\n+        }\n+        catch(AssertionError e) {} // different type isn't either\n+        \n+        checkItFails(new A(4));\n+        checkItFails(new A(6));\n+        assertEquals(\"0\", mock.oneArg(new A(5)));\n+\n+        checkItFails(new A(4));\n+        checkItFails(new A(5));        \n+        assertEquals(\"1\", mock.oneArg(new A(6)));\n+        \n+        checkItFails(new A(4));\n+        assertEquals(\"2\", mock.oneArg(new A(6)));\n+        assertEquals(\"2\", mock.oneArg(new A(5)));\n+        \n+        checkItFails(new A(6));\n+        assertEquals(\"3\", mock.oneArg(new A(4)));\n+        assertEquals(\"3\", mock.oneArg(new A(5)));\n+\n+        checkItFails(new A(5));\n+        checkItFails(new A(6));\n+        assertEquals(\"4\", mock.oneArg(new A(4)));\n+        \n+        verify(mock);\n+    }\n+\n+    private void checkItFails(A a) {\n+        try {\n+            mock.oneArg(a);\n+            fail();\n+        }\n+        catch(AssertionError e) {}\n+    }\n+\n+    @Test\n+    public void any() {\n+        expect(mock.oneArg(anyBoolean())).andReturn(\"0\");\n+        expect(mock.oneArg(anyByte())).andReturn(\"1\");\n+        expect(mock.oneArg(anyChar())).andReturn(\"2\");\n+        expect(mock.oneArg(anyDouble())).andReturn(\"3\");\n+        expect(mock.oneArg(anyFloat())).andReturn(\"4\");\n+        expect(mock.oneArg(anyInt())).andReturn(\"5\");\n+        expect(mock.oneArg(anyLong())).andReturn(\"6\");\n+        expect(mock.oneArg(anyShort())).andReturn(\"7\");\n+        expect(mock.oneArg((String) anyObject())).andReturn(\"8\");\n+        expect(mock.oneArg(anyObject())).andReturn(\"9\");\n+        replay(mock);\n+        assertEquals(\"9\", mock.oneArg(new Object()));\n+        assertEquals(\"0\", mock.oneArg(true));\n+        assertEquals(\"1\", mock.oneArg((byte) 1));\n+        assertEquals(\"2\", mock.oneArg((char) 1));\n+        assertEquals(\"3\", mock.oneArg((double) 1));\n+        assertEquals(\"7\", mock.oneArg((short) 1));\n+        assertEquals(\"8\", mock.oneArg(\"Test\"));\n+        assertEquals(\"4\", mock.oneArg((float) 1));\n+        assertEquals(\"5\", mock.oneArg((int) 1));\n+        assertEquals(\"6\", mock.oneArg((long) 1));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void arrayEquals() {\n+        expect(mock.oneArray(aryEq(new boolean[] { true }))).andReturn(\"0\");\n+        expect(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(\"1\");\n+        expect(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(\"2\");\n+        expect(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(\"3\");\n+        expect(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(\"4\");\n+        expect(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(\"5\");\n+        expect(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(\"6\");\n+        expect(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(\"7\");\n+        expect(mock.oneArray(aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n+        expect(mock.oneArray(aryEq(new Object[] { \"Test\" }))).andReturn(\"9\");\n+        replay(mock);\n+        assertEquals(\"9\", mock.oneArray(new Object[] { \"Test\" }));\n+        assertEquals(\"0\", mock.oneArray(new boolean[] { true }));\n+        assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n+        assertEquals(\"2\", mock.oneArray(new char[] { 1 }));\n+        assertEquals(\"3\", mock.oneArray(new double[] { 1 }));\n+        assertEquals(\"7\", mock.oneArray(new short[] { 1 }));\n+        assertEquals(\"8\", mock.oneArray(new String[] { \"Test\" }));\n+        assertEquals(\"4\", mock.oneArray(new float[] { 1 }));\n+        assertEquals(\"5\", mock.oneArray(new int[] { 1 }));\n+        assertEquals(\"6\", mock.oneArray(new long[] { 1 }));\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void greaterOrEqual() {\n+        expect(mock.oneArg(geq(7))).andReturn(\"1\").times(3);\n+        expect(mock.oneArg(lt(7))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(7));\n+        assertEquals(\"2\", mock.oneArg(6));\n+        assertEquals(\"1\", mock.oneArg(8));\n+        assertEquals(\"2\", mock.oneArg(6));\n+        assertEquals(\"1\", mock.oneArg(9));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void greaterThan() {\n+        expect(mock.oneArg(gt(7))).andReturn(\"1\").times(3);\n+        expect(mock.oneArg(leq(7))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(8));\n+        assertEquals(\"2\", mock.oneArg(7));\n+        assertEquals(\"1\", mock.oneArg(9));\n+        assertEquals(\"2\", mock.oneArg(6));\n+        assertEquals(\"1\", mock.oneArg(10));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void lessOrEqual() {\n+        expect(mock.oneArg(leq(7))).andReturn(\"1\").times(3);\n+        expect(mock.oneArg(gt(7))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(7));\n+        assertEquals(\"2\", mock.oneArg(8));\n+        assertEquals(\"1\", mock.oneArg(6));\n+        assertEquals(\"2\", mock.oneArg(9));\n+        assertEquals(\"1\", mock.oneArg(5));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void lessThan() {\n+        expect(mock.oneArg(lt(7))).andReturn(\"1\").times(3);\n+        expect(mock.oneArg(geq(7))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(5));\n+        assertEquals(\"2\", mock.oneArg(7));\n+        assertEquals(\"1\", mock.oneArg(6));\n+        assertEquals(\"2\", mock.oneArg(8));\n+        assertEquals(\"1\", mock.oneArg(4));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testOr() {\n+        expect(mock.oneArg(or(eq(7), eq(9)))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(anyInt())).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(7));\n+        assertEquals(\"1\", mock.oneArg(9));\n+        assertEquals(\"2\", mock.oneArg(10));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        expect(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\")))\n+                .andReturn(\"1\").atLeastOnce();\n+        expect(mock.threeArgumentMethod(eq(1), not(isNull()), eq(\"\")))\n+                .andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testNotNull() {\n+        expect(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\n+                \"1\").atLeastOnce();\n+        expect(mock.threeArgumentMethod(eq(1), not(notNull()), eq(\"\")))\n+                .andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n+        assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testFind() {\n+        expect(mock.oneArg(find(\"[a-z]+\\\\d\"))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(find(\"\\\\d\\\\d\"))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(\"1ab12\"));\n+        assertEquals(\"2\", mock.oneArg(\"312xx\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testMatches() {\n+        expect(mock.oneArg(matches(\"[a-z]+\\\\d\\\\d\"))).andReturn(\"1\")\n+                .atLeastOnce();\n+        expect(mock.oneArg(matches(\"\\\\d\\\\d\\\\d\"))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(\"a12\"));\n+        assertEquals(\"2\", mock.oneArg(\"131\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testContains() {\n+        expect(mock.oneArg(contains(\"ab\"))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(contains(\"bc\"))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(\"xabcx\"));\n+        assertEquals(\"2\", mock.oneArg(\"xdbcx\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testStartsWith() {\n+        expect(mock.oneArg(startsWith(\"ab\"))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(startsWith(\"bc\"))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(\"abcx\"));\n+        assertEquals(\"2\", mock.oneArg(\"bcxe\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testEndsWith() {\n+        expect(mock.oneArg(endsWith(\"ab\"))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(endsWith(\"bc\"))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(\"xab\"));\n+        assertEquals(\"2\", mock.oneArg(\"xbc\"));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void equalsWithDelta() {\n+        expect(mock.oneArg(eq(1.0D, 0.1D))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(eq(2.0D, 0.1D))).andStubReturn(\"2\");\n+        expect(mock.oneArg(eq(1.0F, 0.1F))).andReturn(\"3\").atLeastOnce();\n+        expect(mock.oneArg(eq(2.0F, 0.1F))).andStubReturn(\"4\");\n+        expect(mock.oneArg(eq(2.0F, 0.1F))).andStubReturn(\"4\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(1.0));\n+        assertEquals(\"1\", mock.oneArg(0.91));\n+        assertEquals(\"1\", mock.oneArg(1.09));\n+        assertEquals(\"2\", mock.oneArg(2.0));\n+\n+        assertEquals(\"3\", mock.oneArg(1.0F));\n+        assertEquals(\"3\", mock.oneArg(0.91F));\n+        assertEquals(\"3\", mock.oneArg(1.09F));\n+        assertEquals(\"4\", mock.oneArg(2.0F));\n+\n+        verify(mock);\n+    }\n+\n+    @Test\n+    public void testSame() {\n+        Object one = new String(\"1243\");\n+        Object two = new String(\"1243\");\n+\n+        assertNotSame(one, two);\n+        assertEquals(one, two);\n+\n+        expect(mock.oneArg(same(one))).andReturn(\"1\").atLeastOnce();\n+        expect(mock.oneArg(same(two))).andStubReturn(\"2\");\n+\n+        replay(mock);\n+\n+        assertEquals(\"1\", mock.oneArg(one));\n+        assertEquals(\"2\", mock.oneArg(two));\n+\n+        verify(mock);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/easymock/tests/UsageMatchersTest.java\n+/*\n+ * Copyright (c) 2001-2007 OFFIS, Tammo Freese.\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.easymock.EasyMock.*;\n+\n+import org.junit.Test;\n+\n+public class UsageMatchersTest {\n+    @Test(expected = IllegalStateException.class)\n+    public void additionalMatchersFailAtReplay() {\n+\n+        IMethods mock = createMock(IMethods.class);\n+        lt(5);\n+\n+        replay(mock);\n+    }\n+\n+}\n--- a/test/org/easymock/tests/UsageStrictMockTest.java\n+++ b/test/org/easymock/tests/UsageStrictMockTest.java\n  */\n package org.easymock.tests;\n \n+import static org.easymock.EasyMock.*;\n import static org.junit.Assert.*;\n \n-import org.easymock.MockControl;\n import org.easymock.internal.ReplayState;\n import org.junit.Before;\n import org.junit.Test;\n \n public class UsageStrictMockTest {\n-    private MockControl<IMethods> control;\n-\n     private IMethods mock;\n \n     @Before\n     public void setup() {\n-        control = MockControl.createStrictControl(IMethods.class);\n-        mock = control.getMock();\n-\n+        mock = createStrictMock(IMethods.class);\n         mock.simpleMethodWithArgument(\"1\");\n         mock.simpleMethodWithArgument(\"2\");\n-\n-        control.replay();\n-    }\n-\n-    @Test\n-    public void verify() {\n-        control.reset();\n-        control.replay();\n-        control.verify();\n+        replay(mock);\n     }\n \n     @Test\n     public void orderedCallsSucces() {\n         mock.simpleMethodWithArgument(\"1\");\n         mock.simpleMethodWithArgument(\"2\");\n-\n-        control.verify();\n+        verify(mock);\n     }\n \n     @Test\n         mock.simpleMethodWithArgument(\"1\");\n         boolean failed = false;\n         try {\n-            control.verify();\n+            verify(mock);\n         } catch (AssertionError expected) {\n             failed = true;\n             assertTrue(\"stack trace must be filled in\", Util.getStackTrace(\n     @Test\n     public void differentMethods() {\n \n-        control.reset();\n+        reset(mock);\n \n         mock.booleanReturningMethod(0);\n-        control.setReturnValue(true);\n+        expectLastCall().andReturn(true);\n         mock.simpleMethod();\n         mock.booleanReturningMethod(1);\n-        control.setReturnValue(false, 2, 3);\n+        expectLastCall().andReturn(false).times(2, 3);\n         mock.simpleMethod();\n-        control.setVoidCallable(MockControl.ONE_OR_MORE);\n+        expectLastCall().atLeastOnce();\n \n-        control.replay();\n+        replay(mock);\n         assertEquals(true, mock.booleanReturningMethod(0));\n         mock.simpleMethod();\n \n         boolean failed = false;\n         try {\n-            control.verify();\n+            verify(mock);\n         } catch (AssertionError expected) {\n             failed = true;\n             assertEquals(\n     @Test\n     public void range() {\n \n-        control.reset();\n+        reset(mock);\n \n         mock.booleanReturningMethod(0);\n-        control.setReturnValue(true);\n+        expectLastCall().andReturn(true);\n         mock.simpleMethod();\n         mock.booleanReturningMethod(1);\n-        control.setReturnValue(false, 2, 3);\n+        expectLastCall().andReturn(false).times(2, 3);\n         mock.simpleMethod();\n-        control.setVoidCallable(MockControl.ONE_OR_MORE);\n-        mock.booleanReturningMethod(1);\n-        control.setReturnValue(false);\n+        expectLastCall().atLeastOnce();\n+        expect(mock.booleanReturningMethod(1)).andReturn(false);\n \n-        control.replay();\n+        replay(mock);\n \n         mock.booleanReturningMethod(0);\n         mock.simpleMethod();\n     }\n \n     @Test\n-    public void defaultBehavior() {\n-        control.reset();\n+    public void stubBehavior() {\n+        reset(mock);\n \n         mock.booleanReturningMethod(1);\n-        control.setReturnValue(true);\n-        control.setReturnValue(false);\n-        control.setReturnValue(true);\n-        control.setDefaultReturnValue(true);\n+        expectLastCall().andReturn(true).andReturn(false).andReturn(true);\n+        mock.booleanReturningMethod(anyInt());\n+        expectLastCall().andStubReturn(true);\n \n-        control.replay();\n+        replay(mock);\n \n         assertEquals(true, mock.booleanReturningMethod(2));\n         assertEquals(true, mock.booleanReturningMethod(3));\n \n         boolean failed = false;\n         try {\n-            control.verify();\n+            verify(mock);\n         } catch (AssertionError expected) {\n             failed = true;\n             assertEquals(\n             fail(\"too few calls accepted\");\n         }\n     }\n-\n-    @Test\n-    public void unexpectedCallWithArray() {\n-        control.reset();\n-        control.setDefaultMatcher(MockControl.ARRAY_MATCHER);\n-        mock.arrayMethod(new String[] { \"Test\", \"Test 2\" });\n-        control.replay();\n-        boolean failed = false;\n-        String[] strings = new String[] { \"Test\" };\n-        try {\n-            mock.arrayMethod(strings);\n-        } catch (AssertionError expected) {\n-            failed = true;\n-            assertEquals(\n-                    \"\\n  Unexpected method call arrayMethod(\"\n-                            + strings.toString()\n-                            + \"):\"\n-                            + \"\\n    arrayMethod([\\\"Test\\\", \\\"Test 2\\\"]): expected: 1, actual: 0\",\n-                    expected.getMessage());\n-        }\n-        if (!failed) {\n-            fail(\"exception expected\");\n-        }\n-\n-    }\n }\n--- a/test/org/easymock/tests/UsageTest.java\n+++ b/test/org/easymock/tests/UsageTest.java\n  */\n package org.easymock.tests;\n \n+import static org.easymock.EasyMock.*;\n import static org.junit.Assert.*;\n \n-import org.easymock.MockControl;\n import org.junit.Before;\n import org.junit.Test;\n \n public class UsageTest {\n \n-    MockControl<IMethods> control;\n-\n     IMethods mock;\n \n     @Before\n     public void setup() {\n-        control = MockControl.createControl(IMethods.class);\n-        mock = control.getMock();\n+        mock = createMock(IMethods.class);\n     }\n \n     @Test\n     public void exactCallCountByLastCall() {\n-        mock.oneArg(false);\n-        control.setReturnValue(\"Test\");\n-        control.setReturnValue(\"Test2\");\n-\n-        control.replay();\n+        expect(mock.oneArg(false)).andReturn(\"Test\").andReturn(\"Test2\");\n+        replay(mock);\n \n         assertEquals(\"Test\", mock.oneArg(false));\n         assertEquals(\"Test2\", mock.oneArg(false));\n \n     @Test\n     public void openCallCountByLastCall() {\n-        mock.oneArg(false);\n-        control.setReturnValue(\"Test\");\n-        control.setReturnValue(\"Test2\", MockControl.ONE_OR_MORE);\n-\n-        control.replay();\n+        expect(mock.oneArg(false)).andReturn(\"Test\").andReturn(\"Test2\")\n+                .atLeastOnce();\n+\n+        replay(mock);\n \n         assertEquals(\"Test\", mock.oneArg(false));\n         assertEquals(\"Test2\", mock.oneArg(false));\n \n     @Test\n     public void exactCallCountByLastThrowable() {\n-        mock.oneArg(false);\n-        control.setReturnValue(\"Test\");\n-        control.setReturnValue(\"Test2\");\n-        control.setThrowable(new IndexOutOfBoundsException(), 1);\n-\n-        control.replay();\n-\n-        assertEquals(\"Test\", mock.oneArg(false));\n-        assertEquals(\"Test2\", mock.oneArg(false));\n-\n-        try {\n-            mock.oneArg(false);\n+        expect(mock.oneArg(false)).andReturn(\"Test\").andReturn(\"Test2\")\n+                .andThrow(new IndexOutOfBoundsException());\n+\n+        replay(mock);\n+\n+        assertEquals(\"Test\", mock.oneArg(false));\n+        assertEquals(\"Test2\", mock.oneArg(false));\n+\n+        try {\n+            mock.oneArg(false);\n+            fail();\n         } catch (IndexOutOfBoundsException expected) {\n         }\n \n         boolean failed = true;\n         try {\n-            try {\n-                mock.oneArg(false);\n-            } catch (IndexOutOfBoundsException expected) {\n-            }\n+            mock.oneArg(false);\n             failed = false;\n         } catch (AssertionError expected) {\n         }\n \n     @Test\n     public void openCallCountByLastThrowable() {\n-        mock.oneArg(false);\n-        control.setReturnValue(\"Test\");\n-        control.setReturnValue(\"Test2\");\n-        control.setThrowable(new IndexOutOfBoundsException(),\n-                MockControl.ONE_OR_MORE);\n-\n-        control.replay();\n+        expect(mock.oneArg(false)).andReturn(\"Test\").andReturn(\"Test2\")\n+                .andThrow(new IndexOutOfBoundsException()).atLeastOnce();\n+\n+        replay(mock);\n \n         assertEquals(\"Test\", mock.oneArg(false));\n         assertEquals(\"Test2\", mock.oneArg(false));\n \n     @Test\n     public void moreThanOneArgument() {\n-        mock.threeArgumentMethod(1, \"2\", \"3\");\n-        control.setReturnValue(\"Test\", 2);\n-\n-        control.replay();\n+        expect(mock.threeArgumentMethod(1, \"2\", \"3\")).andReturn(\"Test\")\n+                .times(2);\n+\n+        replay(mock);\n \n         assertEquals(\"Test\", mock.threeArgumentMethod(1, \"2\", \"3\"));\n \n         boolean failed = true;\n         try {\n-            control.verify();\n+            verify(mock);\n             failed = false;\n         } catch (AssertionError expected) {\n             assertEquals(\n     }\n \n     @Test\n-    public void unexpectedCallWithArray() {\n-        control.reset();\n-        control.setDefaultMatcher(MockControl.ARRAY_MATCHER);\n-        control.replay();\n-        boolean failed = false;\n-        String[] strings = new String[] { \"Test\" };\n-        try {\n-            mock.arrayMethod(strings);\n-        } catch (AssertionError expected) {\n-            failed = true;\n-            assertEquals(\"\\n  Unexpected method call arrayMethod(\"\n-                    + strings.toString() + \"):\", expected.getMessage());\n-        }\n-        if (!failed) {\n-            fail(\"exception expected\");\n-        }\n-\n-    }\n-\n-    @Test\n     public void wrongArguments() {\n         mock.simpleMethodWithArgument(\"3\");\n-        control.replay();\n+        replay(mock);\n \n         try {\n             mock.simpleMethodWithArgument(\"5\");\n     public void summarizeSameObjectArguments() {\n         mock.simpleMethodWithArgument(\"3\");\n         mock.simpleMethodWithArgument(\"3\");\n-        control.replay();\n+        replay(mock);\n \n         try {\n             mock.simpleMethodWithArgument(\"5\");\n         mock.simpleMethodWithArgument(\"2\");\n         mock.simpleMethodWithArgument(\"0\");\n         mock.simpleMethodWithArgument(\"1\");\n-        control.replay();\n+        replay(mock);\n \n         try {\n             mock.simpleMethodWithArgument(\"5\");\n-            fail();\n+            fail(\"exception expected\");\n         } catch (AssertionError expected) {\n             assertEquals(\n                     \"\\n  Unexpected method call simpleMethodWithArgument(\\\"5\\\"):\"\n \n     }\n \n+    @Test\n+    public void mixingOrderedAndUnordered() {\n+        mock.simpleMethodWithArgument(\"2\");\n+        mock.simpleMethodWithArgument(\"1\");\n+        checkOrder(mock, true);\n+        mock.simpleMethodWithArgument(\"3\");\n+        mock.simpleMethodWithArgument(\"4\");\n+        checkOrder(mock, false);\n+        mock.simpleMethodWithArgument(\"6\");\n+        mock.simpleMethodWithArgument(\"7\");\n+        mock.simpleMethodWithArgument(\"5\");\n+\n+        replay(mock);\n+\n+        mock.simpleMethodWithArgument(\"1\");\n+        mock.simpleMethodWithArgument(\"2\");\n+\n+        boolean failed = false;\n+        try {\n+            mock.simpleMethodWithArgument(\"4\");\n+        } catch (AssertionError e) {\n+            failed = true;\n+        }\n+        if (!failed) {\n+            fail();\n+        }\n+\n+        mock.simpleMethodWithArgument(\"3\");\n+        mock.simpleMethodWithArgument(\"4\");\n+        mock.simpleMethodWithArgument(\"5\");\n+        mock.simpleMethodWithArgument(\"6\");\n+        mock.simpleMethodWithArgument(\"7\");\n+\n+        verify(mock);\n+\n+    }\n+\n }\n--- /dev/null\n+++ b/test/org/easymock/tests/UsingVarargsTest.java\n+/*\n+ * Copyright (c) 2007 Szczepan Faber \n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.easymock.tests;\n+\n+import static org.mockito.Mockito.*;\n+import static org.junit.Assert.*;\n+\n+import java.util.ArrayList;\n+\n+import org.junit.*;\n+import org.mockito.Mockito;\n+import org.mockito.exceptions.MockVerificationAssertionError;\n+\n+public class UsingVarargsTest {\n+\n+    private interface IVarArgs {\n+        public void withStringVarargs(int value, String... s);\n+        public void withObjectVarargs(int value, Object... o);\n+        public void withBooleanVarargs(int value, boolean... b);\n+    }\n+    \n+    IVarArgs mock;\n+\n+    @Before\n+    public void setup() {\n+        mock = Mockito.mock(IVarArgs.class);\n+    }\n+    \n+    @Test\n+    public void shouldVerifyStringVarargs() {\n+        mock.withStringVarargs(1);\n+        mock.withStringVarargs(2, \"1\", \"2\", \"3\");\n+        mock.withStringVarargs(3, \"1\", \"2\", \"3\", \"4\");\n+\n+        verify(mock).withStringVarargs(1);\n+        verify(mock).withStringVarargs(2, \"1\", \"2\", \"3\");\n+        try {\n+            verify(mock).withStringVarargs(2, \"1\", \"2\", \"79\", \"4\");\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }\n+\n+    @Test\n+    public void shouldVerifyObjectVarargs() {\n+        mock.withObjectVarargs(1);\n+        mock.withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n+        mock.withObjectVarargs(3, new Integer(1));\n+\n+        verify(mock).withObjectVarargs(1);\n+        verify(mock).withObjectVarargs(2, \"1\", new ArrayList<Object>(), new Integer(1));\n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }\n+\n+    @Test\n+    public void shouldVerifyBooleanVarargs() {\n+        mock.withBooleanVarargs(1);\n+        mock.withBooleanVarargs(2, true, false, true);\n+        mock.withBooleanVarargs(3, true, true, true);\n+\n+        verify(mock).withBooleanVarargs(1);\n+        verify(mock).withBooleanVarargs(2, true, false, true);\n+        try {\n+            verify(mock).withBooleanVarargs(3, true, true, true, true);\n+            fail();\n+        } catch (MockVerificationAssertionError e) {}\n+    }\n+}\n--- a/test/org/mockito/usage/MockitoExploitsTest.java\n+++ b/test/org/mockito/usage/MockitoExploitsTest.java\n     \n     @Test\n     public void rubbishPassedToStubMethod1() {\n-        MockitoOperations.reportControlForStubbing(null);\n+        MockitoOperations.reportLastControlForStubbing(null);\n         try {\n             stub(\"blah\".contains(\"blah\")).andReturn(Boolean.TRUE);\n             fail();\n--- a/test/org/mockito/usage/ReturningDefaultValuesTest.java\n+++ b/test/org/mockito/usage/ReturningDefaultValuesTest.java\n \n import static org.junit.Assert.*;\n \n+import java.lang.reflect.*;\n import java.util.*;\n \n import org.easymock.tests.IMethods;\n public class ReturningDefaultValuesTest {\n \n     @Test\n-    public void shouldReturnAllKindsOfPrimitives() {\n+    public void shouldReturnAllKindsOfPrimitives() throws Exception {\n         IMethods mock = Mockito.mock(IMethods.class);\n \n-        //this is mainly to prove that cglib enchanted thing works properly \n+        //this is mainly to prove that cglib-enchanted-thing works properly \n+        //and returns primitive value rather than throw NullPointerException\n+        //If we used java.lang.reflect.Proxy NullPointerException will bang\n         assertEquals((byte)0, mock.byteReturningMethod(12));\n         assertEquals((short)0, mock.shortReturningMethod(12));\n         assertEquals(0, mock.intReturningMethod(12));", "timestamp": 1195214484, "metainfo": ""}