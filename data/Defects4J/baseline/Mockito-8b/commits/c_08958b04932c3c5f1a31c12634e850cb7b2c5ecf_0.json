{"sha": "08958b04932c3c5f1a31c12634e850cb7b2c5ecf", "log": "New test that demos little problem with Mockito  --HG-- rename : test/org/mockitousage/PlaygroundTest.java => test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401739", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockitoutil.TestBase;\n+\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import static org.mockito.BDDMockito.*;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.verify;\n+\n+public class PlaygroundWithDemoOfUnclonedParametersProblemTest extends TestBase {\n+\n+    ImportManager importManager;\n+    ImportLogDao importLogDao;\n+    IImportHandler importHandler;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        importLogDao = Mockito.mock(ImportLogDao.class);\n+        importHandler = Mockito.mock(IImportHandler.class);\n+        importManager = new ImportManager(importLogDao);\n+    }\n+\n+    @Test\n+    public void shouldIncludeInitialLog() {\n+        //given\n+        int importType = 0;\n+        Date currentDate = new GregorianCalendar(2009, 10, 12).getTime();\n+\n+        ImportLogBean initialLog = new ImportLogBean(currentDate, importType);\n+        initialLog.setStatus(1);\n+\n+        given(importLogDao.anyImportRunningOrRunnedToday(importType, currentDate)).willReturn(false);\n+        willAnswer(byCheckingLogEquals(initialLog)).given(importLogDao).include(any(ImportLogBean.class));\n+\n+        //when\n+        importManager.startImportProcess(importType, currentDate);\n+\n+        //then\n+        verify(importLogDao).include(any(ImportLogBean.class));\n+    }\n+\n+    @Test\n+    public void shouldAlterFinalLog() {\n+        //given\n+        int importType = 0;\n+        Date currentDate = new GregorianCalendar(2009, 10, 12).getTime();\n+\n+        ImportLogBean finalLog = new ImportLogBean(currentDate, importType);\n+        finalLog.setStatus(9);\n+\n+        given(importLogDao.anyImportRunningOrRunnedToday(importType, currentDate)).willReturn(false);\n+        willAnswer(byCheckingLogEquals(finalLog)).given(importLogDao).alter(any(ImportLogBean.class));\n+\n+        //when\n+        importManager.startImportProcess(importType, currentDate);\n+\n+        //then\n+        verify(importLogDao).alter(any(ImportLogBean.class));\n+    }\n+\n+    private Answer byCheckingLogEquals(final ImportLogBean status) {\n+        return new Answer() {\n+            public Object answer(InvocationOnMock invocation) throws Throwable {\n+                ImportLogBean bean = (ImportLogBean) invocation.getArguments()[0];\n+                assertEquals(status, bean);\n+                return null;\n+            }\n+        };\n+    }\n+\n+    public class ImportManager {\n+\n+        public ImportManager(ImportLogDao pImportLogDao) {\n+            super();\n+            importLogDao = pImportLogDao;\n+        }\n+\n+        private ImportLogDao importLogDao = null;\n+\n+        public void startImportProcess(int importType, Date date) {\n+            ImportLogBean importLogBean = null;\n+\n+            try {\n+                importLogBean = createResume(importType, date);\n+                if (isOkToImport(importType, date)) {\n+                    // get the right handler\n+                    //importLogBean = ImportHandlerFactory.singleton().getImportHandler(importType).processImport(importLogBean);\n+                    // 2 = ok\n+                    importLogBean.setStatus(2);\n+                } else {\n+                    // 5 = failed - is there a running process\n+                    importLogBean.setStatus(9);\n+                }\n+            } catch (Exception e) {\n+                // 9 = failed - exception\n+                if (importLogBean != null)\n+                    importLogBean.setStatus(9);\n+            } finally {\n+                if (importLogBean != null)\n+                    finalizeResume(importLogBean);\n+            }\n+        }\n+\n+        private boolean isOkToImport(int importType, Date date) {\n+            return importLogDao.anyImportRunningOrRunnedToday(importType, date);\n+        }\n+\n+        private ImportLogBean createResume(int importType, Date date) {\n+            ImportLogBean importLogBean = new ImportLogBean(date,\n+                    importType);\n+            // 1 = running\n+            importLogBean.setStatus(1);\n+            importLogDao.include(importLogBean);\n+            return importLogBean;\n+        }\n+\n+        private void finalizeResume(ImportLogBean importLogBean) {\n+            importLogDao.alter(importLogBean);\n+        }\n+    }\n+\n+    private interface ImportLogDao {\n+        public boolean anyImportRunningOrRunnedToday(int importType, Date currentDate);\n+\n+        void include(ImportLogBean importLogBean);\n+\n+        void alter(ImportLogBean importLogBean);\n+    }\n+\n+    private class IImportHandler {\n+    }\n+\n+    private class ImportLogBean {\n+        private Date currentDate;\n+        private int importType;\n+        private int status;\n+\n+        public ImportLogBean(Date currentDate, int importType) {\n+            this.currentDate = currentDate;\n+            this.importType = importType;\n+        }\n+\n+        public void setStatus(int status) {\n+            this.status = status;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (!(o instanceof ImportLogBean)) return false;\n+\n+            ImportLogBean that = (ImportLogBean) o;\n+\n+            if (importType != that.importType) return false;\n+            if (status != that.status) return false;\n+            if (currentDate != null ? !currentDate.equals(that.currentDate) : that.currentDate != null) return false;\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int result = currentDate != null ? currentDate.hashCode() : 0;\n+            result = 31 * result + importType;\n+            result = 31 * result + status;\n+            return result;\n+        }\n+    }\n+}", "timestamp": 1258316535, "metainfo": ""}