{"sha": "63fbcc7bb454b1228697a3e14b2199dfe216b9d7", "log": "fixed issue 25. When test spies are used then it's better matchers not return nulls. Real implementation is called so NPE might happen  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40949", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n      * @return <code>null</code>.\n      */\n     public static String anyString() {\n-        return (String) anyObject();\n+        return reportMatcher(Any.ANY).returnString();\n     }\n     \n     /**\n      * @return <code>null</code>.\n      */\n     public static List anyList() {\n-        return (List) anyObject();\n+        return reportMatcher(Any.ANY).returnList();\n     }    \n     \n     /**\n      * @return <code>null</code>.\n      */\n     public static Map anyMap() {\n-        return (Map) anyObject();\n+        return reportMatcher(Any.ANY).returnMap();\n     }    \n     \n     /**\n      * @return <code>null</code>.\n      */\n     public static Collection anyCollection() {\n-        return (Collection) anyObject();\n+        return reportMatcher(Any.ANY).returnList();\n     }    \n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String contains(String substring) {\n-        return reportMatcher(new Contains(substring)).<String>returnNull();\n+        return reportMatcher(new Contains(substring)).returnString();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String matches(String regex) {\n-        return reportMatcher(new Matches(regex)).<String>returnNull();\n+        return reportMatcher(new Matches(regex)).returnString();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String endsWith(String suffix) {\n-        return reportMatcher(new EndsWith(suffix)).<String>returnNull();\n+        return reportMatcher(new EndsWith(suffix)).returnString();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static String startsWith(String prefix) {\n-        return reportMatcher(new StartsWith(prefix)).<String>returnNull();\n+        return reportMatcher(new StartsWith(prefix)).returnString();\n     }\n \n     /**\n--- a/src/org/mockito/internal/progress/EmptyReturnValues.java\n+++ b/src/org/mockito/internal/progress/EmptyReturnValues.java\n  */\n package org.mockito.internal.progress;\n \n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@SuppressWarnings(\"unchecked\")\n public class EmptyReturnValues {\n \n     public byte returnZero() {\n     public boolean returnFalse() {\n         return false;\n     }\n-}\n+\n+    public String returnString() {\n+        return \"\";\n+    }\n+\n+    public Map returnMap() {\n+        return new HashMap();\n+    }\n+\n+    public List returnList() {\n+        return new LinkedList();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/spies/StubbingSpiesTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.spies;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class StubbingSpiesTest extends TestBase {\n+    \n+    class Foo {\n+        public int len(String text) {\n+            return text.length();\n+        }\n+        \n+        public int size(Map map) {\n+            return map.size();\n+        }\n+        \n+        public int size(Collection collection) {\n+            return collection.size();\n+        }\n+    }\n+    \n+    @Test\n+    public void shouldNotThrowNPE() throws Exception {\n+        Foo foo = new Foo();\n+        Foo spy = spy(foo);\n+        \n+        spy.len(anyString());\n+        spy.size(anyMap());\n+        spy.size(anyList());\n+        spy.size(anyCollection());\n+    }\n+}", "timestamp": 1223841422, "metainfo": ""}