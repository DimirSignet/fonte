{"sha": "d38ab9796062c3e1b8f7ca2c08414df2d1c879d9", "log": "Added TODOs and started working on the runners  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401847", "commit": "\n--- a/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n public class VerboseMockitoJUnitRunner extends Runner implements Filterable {\n \n     private RunnerImpl runner;\n-    \n+\n+    //TODO: all runners have an issue: they don't filter the stack trace correctly\n     public VerboseMockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {\n         this(new RunnerFactory().create(klass));\n     }\n--- a/test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java\n+++ b/test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java\n \n import static org.mockito.Mockito.*;\n \n-import org.junit.After;\n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n-import org.mockito.runners.ConsoleSpammingMockitoJUnitRunner;\n import org.mockito.runners.VerboseMockitoJUnitRunner;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n @Ignore\n public class ModellingVerboseMockitoTest extends TestBase {\n     \n-    @Mock private IMethods mock;\n+    @Mock private IMethods mock;     \n     \n+    @Before\n     public void cleanStackTraces() {\n         super.makeStackTracesClean();\n     }\n         when(mock.otherMethod()).thenReturn(\"foo\");\n         when(mock.booleanObjectReturningMethod()).thenReturn(false);\n \n+        //TODO: stubbed with those args here -> stubbed with certain args here \n         String ret = mock.simpleMethod(2);\n \n         assertEquals(\"foo\", ret);\n+        //TODO: should show message from actual failure not at the bottom but at least below 'the actual failure is ...'\n     }\n+       \n \n     @Test\n     public void shouldNotLogAnythingWhenNoWarnings() throws Exception {\n-        String ret = mock.simpleMethod(2);\n-\n-        assertEquals(\"foo\", ret);\n+        //stub\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+        //use stub:\n+        mock.simpleMethod();\n+        //verify:\n+        verify(mock).simpleMethod();\n+        //should be no warnings:\n+        fail();\n     }\n \n //    @After\n--- /dev/null\n+++ b/test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.junitrunner;\n+\n+import static org.mockito.Mockito.*;\n+import junit.framework.TestCase;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.junit.runner.Result;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;\n+import org.mockito.runners.VerboseMockitoJUnitRunner;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+//@RunWith(ConsoleSpammingMockitoJUnitRunner.class)\n+@RunWith(VerboseMockitoJUnitRunner.class)\n+@Ignore\n+//TODO\n+public class VerboseMockitoRunnerTest extends TestBase {\n+    \n+    @Mock private IMethods mock;\n+    \n+    protected static class NoWarnings {       \n+        \n+        @Test\n+        public void test() {\n+            IMethods mock = mock(IMethods.class);\n+            mock.simpleMethod(1);\n+            mock.otherMethod();\n+            \n+            verify(mock).simpleMethod(1);\n+            throw new RuntimeException(\"boo\");\n+        }\n+    }\n+    \n+    protected static class ContainsWarnings extends TestCase {\n+        \n+        public ContainsWarnings() {\n+            super(\"test\");\n+        }\n+        \n+        @Test\n+        public void test() {\n+            IMethods mock = mock(IMethods.class);\n+            \n+            //some stubbing\n+            when(mock.simpleMethod(1)).thenReturn(\"foo\");\n+            when(mock.otherMethod()).thenReturn(\"foo\");\n+            when(mock.booleanObjectReturningMethod()).thenReturn(false);\n+\n+            //stub called with different args:\n+            String ret = mock.simpleMethod(2);\n+\n+            //assertion fails due to stub called with different args\n+            assertEquals(\"foo\", ret);\n+        }\n+    }    \n+    \n+    public void cleanStackTraces() {\n+        super.makeStackTracesClean();\n+    }\n+    \n+    @Test\n+    public void shouldContainWarnings() throws Exception {\n+        //when\n+        Result result = new JUnitCore().run(new ContainsWarnings());\n+        //then\n+        assertEquals(1, result.getFailures().size());\n+        Throwable exception = result.getFailures().get(0).getException();\n+        assertTrue(exception instanceof ExceptionIncludingMockitoWarnings);        \n+    }\n+\n+    @Test\n+    public void shouldNotContainWarnings() throws Exception {\n+        Result result = new JUnitCore().run(NoWarnings.class);\n+        assertEquals(1, result.getFailures().size());\n+        assertEquals(\"boo\", result.getFailures().get(0).getException().getMessage());\n+    }\n+}", "timestamp": 1266179065, "metainfo": ""}