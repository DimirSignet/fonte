{"sha": "1a1e0aa1b8a98ee6f2e4bb7766f0a44266924836", "log": "Merge pull request #15 from pimterry/timeout-sleep-handling  Fix timeout sleep handling to track time more accurately, and tidy timeout impl variable names", "commit": "\n--- a/src/org/mockito/internal/verification/VerificationWithTimeoutImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationWithTimeoutImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.verification.VerificationMode;\n \n+/**\n+ * Verifies that another verification mode (the delegate) becomes true within a certain timeframe\n+ * (before timeoutMillis has passed, measured from the call to verify()).\n+ */\n public class VerificationWithTimeoutImpl {\n     \n     VerificationMode delegate;\n-    int timeout;\n-    int treshhold;\n+    int timeoutMillis;\n+    int pollingPeriod;\n \n-    public VerificationWithTimeoutImpl(int treshhold, int millis, VerificationMode delegate) {\n-        this.treshhold = treshhold;\n-        this.timeout = millis;\n+    /**\n+     * Create this verification mode, to be used to verify invocation ongoing data later.\n+     *\n+     * @param pollingPeriod The frequency to poll delegate.verify(), to check whether the delegate has been satisfied\n+     * @param timeoutMillis The time to wait (in millis) for the delegate verification mode to be satisfied\n+     * @param delegate The verification mode to delegate overall success or failure to\n+     */\n+    public VerificationWithTimeoutImpl(int pollingPeriod, int timeoutMillis, VerificationMode delegate) {\n+        this.pollingPeriod = pollingPeriod;\n+        this.timeoutMillis = timeoutMillis;\n         this.delegate = delegate;\n     }\n \n+    /**\n+     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n+     * before the timeout has passed.\n+     *\n+     * In practice, this polls the delegate verification mode, and returns successfully as soon as\n+     * the delegate is satisfied. If the delegate is not satisfied before the timeout has passed, the last\n+     * error returned by the delegate verification mode will be thrown here in turn.\n+     *\n+     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n+     */\n     public void verify(VerificationData data) {\n-        int soFar = 0;\n         MockitoAssertionError error = null;\n-        while (soFar <= timeout) {\n+        \n+        long startTime = System.currentTimeMillis();\n+        while (System.currentTimeMillis() - startTime <= timeoutMillis) {\n             try {\n                 delegate.verify(data);\n                 return;\n             } catch (MockitoAssertionError e) {\n                 error = e;\n-                soFar += treshhold;\n-                sleep(treshhold);\n+                sleep(pollingPeriod);\n             }\n         }\n         if (error != null) {\n     }\n \n     public int getTimeout() {\n-        return timeout;\n+        return timeoutMillis;\n     }\n \n     public int getTreshhold() {\n-        return treshhold;\n+        return pollingPeriod;\n     }    \n }\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.verification;\n \n import static org.mockito.Mockito.*;\n     \n     @Test\n     public void shouldPassEvenIfFirstVerificationFails() {\n-        Timeout t = new Timeout(1, 2, mode);\n+        Timeout t = new Timeout(1, 5, mode);\n         \n         doThrow(error).\n         doThrow(error).\n--- a/test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java\n+++ b/test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java\n public class ConcurrentModificationExceptionOnMultiThreadedVerificationTest {\n \n \tint nThreads = 1;\n-\tstatic final int TEST_MILLIS = 1000;\n+\t\n+\tstatic final int TIMES = 100;\n \tstatic final int INTERVAL_MILLIS = 10;\n-\tstatic final int TIMES = TEST_MILLIS / INTERVAL_MILLIS;\n \n \tITarget target = Mockito.mock(ITarget.class);\n \tExecutorService fixedThreadPool;\n \t}\n \n \t@Test\n-\tpublic void testInvocationConcurrently() throws Exception {\n+\tpublic void shouldSuccessfullyVerifyConcurrentInvocationsWithTimeout() throws Exception {\n+        int potentialOverhead = 1000; // Leave 1000ms extra before timing out as leeway for test overheads\n+        int expectedMaxTestLength = TIMES * INTERVAL_MILLIS + potentialOverhead;\n+\n \t\treset(target);\n \t\tstartInvocations();\n-\t\tverify(target, timeout(TEST_MILLIS).times(TIMES*nThreads)).targetMethod(\"arg\");\n+\t\t\n+\t\tverify(target, timeout(expectedMaxTestLength).times(TIMES * nThreads)).targetMethod(\"arg\");\n \t\tverifyNoMoreInteractions(target);\n \t}\n \n \t\t}\n \n \t}\n-\n \t\n \tpublic class TargetInvoker implements Callable<Object> {\n \n--- /dev/null\n+++ b/test/org/mockitousage/bugs/TimeoutWithAtMostOrNeverShouldBeDisabledTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockitousage.bugs;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.misusing.FriendlyReminderException;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Mockito.*;\n+\n+//see issue 235\n+@SuppressWarnings(\"deprecation\")\n+public class TimeoutWithAtMostOrNeverShouldBeDisabledTest extends TestBase {\n+\n+    @Mock IMethods mock;\n+\n+    @Test\n+    public void shouldDisableTimeoutForAtMost() {\n+        try {\n+            verify(mock, timeout(30000).atMost(1)).simpleMethod();\n+            fail();\n+        } catch (FriendlyReminderException e) {}\n+    }\n+\n+    @Test\n+    public void shouldDisableTimeoutForNever() {\n+        try {\n+            verify(mock, timeout(30000).never()).simpleMethod();\n+            fail();\n+        } catch (FriendlyReminderException e) {}\n+    }\n+}\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 \"\"), details);\n     }\n \n-    public void atMostShouldNotBeUsedWithTimeout() {\n+    public void atMostAndNeverShouldNotBeUsedWithTimeout() {\n         throw new FriendlyReminderException(join(\"\",\n                 \"Don't panic! I'm just a friendly reminder!\",\n-                \"timeout() should not be used with atMost() because...\",\n+                \"timeout() should not be used with atMost() or never() because...\",\n                 \"...it does not make much sense - the test would have passed immediately in concurency\",\n                 \"We kept this method only to avoid compilation errors when upgrading Mockito.\",\n                 \"In future release we will remove timeout(x).atMost(y) from the API.\",\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.verification;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.misusing.FriendlyReminderException;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.VerificationWithTimeoutImpl;\n import org.mockito.internal.verification.api.VerificationData;\n      * See the javadoc for {@link VerificationWithTimeout}\n      */\n     public VerificationMode atMost(int maxNumberOfInvocations) {\n-        new Reporter().atMostShouldNotBeUsedWithTimeout();\n+        new Reporter().atMostAndNeverShouldNotBeUsedWithTimeout();\n         return null;\n     }\n \n      * See the javadoc for {@link VerificationWithTimeout}\n      */\n     public VerificationMode never() {\n-        return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(0));\n+        new Reporter().atMostAndNeverShouldNotBeUsedWithTimeout();\n+        return null;\n     }\n \n     /**\n--- a/src/org/mockito/verification/VerificationWithTimeout.java\n+++ b/src/org/mockito/verification/VerificationWithTimeout.java\n     public VerificationMode times(int wantedNumberOfInvocations);\n     \n     /**\n-     * Alias to times(0), see {@link #times(int)}\n+     * @deprecated\n+     * Validation with timeout combined with never simply does not make sense...\n+     * The test would have passed immediately in the concurrent environment\n      * <p>\n-     * Verifies that interaction did not happen within given timeout. E.g:\n-     * <pre class=\"code\"><code class=\"java\">\n-     *   verify(mock, timeout(100).never()).someMethod();\n-     * </code></pre>\n-     * \n+     * To avoid compilation errors upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n      * <p>\n-     * If you want to verify there were NO interactions with the mock \n-     * check out {@link Mockito#verifyNoMoreInteractions(Object...)}\n+     * In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.\n      * <p>\n-     * See examples in javadoc for {@link Mockito} class\n+     * Do you want to find out more? See <a href=\"http://code.google.com/p/mockito/issues/detail?id=235\">issue 235</a>\n      * \n      * @return verification mode\n      */\n+    @Deprecated    \n     public VerificationMode never();\n     \n     /**\n-     * Allows at-least-once verification withing given timeout. E.g:\n+     * Allows at-least-once verification within given timeout. E.g:\n      * <pre class=\"code\"><code class=\"java\">\n      *   verify(mock, timeout(100).atLeastOnce()).someMethod(\"some arg\");\n      * </code></pre>\n     public VerificationMode atLeastOnce();\n \n     /**\n-     * Allows at-least-x verification withing given timeout. E.g:\n+     * Allows at-least-x verification within given timeout. E.g:\n      * <pre class=\"code\"><code class=\"java\">\n      *   verify(mock, timeout(100).atLeast(3)).someMethod(\"some arg\");\n      * </code></pre>\n      * @deprecated\n      *\n      * <b>Deprecated</b>\n-     * validation with timeout combined with atMost simply does not make sense...\n+     * Validation with timeout combined with atMost simply does not make sense...\n      * The test would have passed immediately in the concurrent environment\n      * <p>\n-     * To avoid compilation erros upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n+     * To avoid compilation errors upon upgrade the method is deprecated and it throws a \"friendly reminder\" exception.\n      * <p>\n-     * In future release we will remove timeout(x).atMost(y) from the API.\n+     * In a future release we will remove timeout(x).atMost(y) and timeout(x).never() from the API.\n      * <p>\n      * Do you want to find out more? See <a href=\"http://code.google.com/p/mockito/issues/detail?id=235\">issue 235</a>\n      *\n--- a/test/org/mockito/verification/TimeoutTest.java\n+++ b/test/org/mockito/verification/TimeoutTest.java\n         assertCorrectMode(t.atLeastOnce(), Timeout.class, 50, 25, AtLeast.class);\n         assertCorrectMode(t.atLeast(5), Timeout.class, 50, 25, AtLeast.class);\n         assertCorrectMode(t.times(5), Timeout.class, 50, 25, Times.class);\n-        assertCorrectMode(t.never(), Timeout.class, 50, 25, Times.class);\n         assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);\n     }\n     \n--- a/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n+++ b/test/org/mockitousage/verification/VerificationWithTimeoutTest.java\n         t2.start();\n         \n         //then\n-        verify(mock, timeout(1).never()).clear();\n-        verify(mock, timeout(100).times(2)).clear();\n+        verify(mock, timeout(50).atLeast(1)).clear();\n+        verify(mock, timeout(50).times(2)).clear();\n         verifyNoMoreInteractions(mock);\n     }\n     \n         t2.start();\n         \n         //then\n-        verify(mock, timeout(1).never()).clear();\n+        verify(mock, timeout(50).atLeast(1)).clear();\n         try {\n             verify(mock, timeout(100).times(3)).clear();\n             fail();\n     @Test\n     public void shouldAllowMixingOnlyWithTimeoutAndFail() throws Exception {\n         //given\n-        Thread t1 = waitAndExerciseMock(20);        \n+        Thread t1 = waitAndExerciseMock(20);\n         \n         //when\n         t1.start();\n     @Test\n     public void shouldAllowTimeoutVerificationInOrder() throws Exception {\n         //given\n-        Thread t1 = waitAndExerciseMock(20);        \n+        Thread t1 = waitAndExerciseMock(20);\n         \n         //when\n         t1.start();\n         InOrder inOrder = inOrder(mock);\n         inOrder.verify(mock).add(anyString());\n         inOrder.verify(mock, never()).clear();\n-        inOrder.verify(mock, timeout(40)).clear();                             \n+        inOrder.verify(mock, timeout(40)).clear();\n     }\n \n     private Thread waitAndExerciseMock(final int sleep) {", "timestamp": 1381489901, "metainfo": ""}