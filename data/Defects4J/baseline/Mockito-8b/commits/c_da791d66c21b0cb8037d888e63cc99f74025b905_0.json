{"sha": "da791d66c21b0cb8037d888e63cc99f74025b905", "log": "-ant doesn't work yet :( -refactored some names  --HG-- rename : src/org/mockito/Matchers.java => src/org/mockito/CrazyMatchers.java rename : src/org/mockito/CoolMatchers.java => src/org/mockito/Matchers.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%4028", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/CrazyMatchers.java\n+package org.mockito;\n+\n+import org.mockito.internal.LastArguments;\n+import org.mockito.internal.matchers.*;\n+import org.mockito.matchers.*;\n+\n+public class CrazyMatchers {\n+    \n+    /**\n+     * Expects a comparable argument greater than or equal the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a byte argument greater than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte geq(byte value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument greater than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double geq(double value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument greater than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float geq(float value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument greater than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int geq(int value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument greater than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long geq(long value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument greater than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short geq(short value) {\n+        LastArguments.reportMatcher(new GreaterOrEqual<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a comparable argument less than or equal the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n+        LastArguments.reportMatcher(new LessOrEqual<T>(value));\n+        return null;\n+    }\n+     \n+    /**\n+     * Expects a byte argument less than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte leq(byte value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument less than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double leq(double value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument less than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float leq(float value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument less than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int leq(int value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument less than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long leq(long value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument less than or equal to the given value. For\n+     * details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short leq(short value) {\n+        LastArguments.reportMatcher(new LessOrEqual<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a comparable argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n+        LastArguments.reportMatcher(new GreaterThan<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a byte argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte gt(byte value) {\n+        LastArguments.reportMatcher(new GreaterThan<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double gt(double value) {\n+        LastArguments.reportMatcher(new GreaterThan<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float gt(float value) {\n+        LastArguments.reportMatcher(new GreaterThan<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int gt(int value) {\n+        LastArguments.reportMatcher(new GreaterThan<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long gt(long value) {\n+        LastArguments.reportMatcher(new GreaterThan<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument greater than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short gt(short value) {\n+        LastArguments.reportMatcher(new GreaterThan<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a comparable argument less than the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n+        LastArguments.reportMatcher(new LessThan<T>(value));\n+        return null;\n+    }\n+    \n+    /**\n+     * Expects a byte argument less than the given value. For details, see the\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte lt(byte value) {\n+        LastArguments.reportMatcher(new LessThan<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double argument less than the given value. For details, see the\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double lt(double value) {\n+        LastArguments.reportMatcher(new LessThan<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float argument less than the given value. For details, see the\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float lt(float value) {\n+        LastArguments.reportMatcher(new LessThan<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int argument less than the given value. For details, see the\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int lt(int value) {\n+        LastArguments.reportMatcher(new LessThan<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long argument less than the given value. For details, see the\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long lt(long value) {\n+        LastArguments.reportMatcher(new LessThan<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short argument less than the given value. For details, see the\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short lt(short value) {\n+        LastArguments.reportMatcher(new LessThan<Short>(value));\n+        return 0;\n+    }\n+    \n+    /**\n+     * Expects a string that contains the given substring. For details, see the\n+     * documentation.\n+     * \n+     * @param substring\n+     *            the substring.\n+     * @return <code>null</code>.\n+     */\n+    public static String contains(String substring) {\n+        LastArguments.reportMatcher(new Contains(substring));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean and(boolean first, boolean second) {\n+        LastArguments.reportAnd(2);\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a byte that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte and(byte first, byte second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char and(char first, char second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double and(double first, double second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float and(float first, float second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int and(int first, int second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long and(long first, long second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short that matches both given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short and(short first, short second) {\n+        LastArguments.reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an Object that matches both given expectations.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T and(T first, T second) {\n+        LastArguments.reportAnd(2);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean or(boolean first, boolean second) {\n+        LastArguments.reportOr(2);\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a comparable argument equals to the given value according to their\n+     * compareTo method. For details, see the documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n+        LastArguments.reportMatcher(new CompareEqual<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object that is the same as the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T same(T value) {\n+        LastArguments.reportMatcher(new Same(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that ends with the given suffix. For details, see the\n+     * documentation.\n+     * \n+     * @param suffix\n+     *            the suffix.\n+     * @return <code>null</code>.\n+     */\n+    public static String endsWith(String suffix) {\n+        LastArguments.reportMatcher(new EndsWith(suffix));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that starts with the given prefix. For details, see the\n+     * documentation.\n+     * \n+     * @param prefix\n+     *            the prefix.\n+     * @return <code>null</code>.\n+     */\n+    public static String startsWith(String prefix) {\n+        LastArguments.reportMatcher(new StartsWith(prefix));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that contains a substring that matches the given regular\n+     * expression. For details, see the documentation.\n+     * \n+     * @param regex\n+     *            the regular expression.\n+     * @return <code>null</code>.\n+     */\n+    public static String find(String regex) {\n+        LastArguments.reportMatcher(new Find(regex));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object array that is equal to the given array, i.e. it has to\n+     * have the same type, length, and each element has to be equal.\n+     * \n+     * @param <T>\n+     *            the type of the array, it is passed through to prevent casts.\n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T[] aryEq(T[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static short[] aryEq(short[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a long array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static long[] aryEq(long[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an int array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static int[] aryEq(int[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a float array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static float[] aryEq(float[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a double array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static double[] aryEq(double[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a char array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static char[] aryEq(char[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a byte array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static byte[] aryEq(byte[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean array that is equal to the given array, i.e. it has to\n+     * have the same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given arry.\n+     * @return <code>null</code>.\n+     */\n+    public static boolean[] aryEq(boolean[] value) {\n+        LastArguments.reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an Object that does not match the given expectation.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T not(T first) {\n+        LastArguments.reportNot();\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short not(short first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int not(int first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long not(long first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float not(float first) {\n+        LastArguments.reportNot();\n+        return first;\n+    }\n+\n+    /**\n+     * Expects a double that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double not(double first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char not(char first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a boolean that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean not(boolean first) {\n+        LastArguments.reportNot();\n+        return false;\n+    }\n+\n+    /**\n+     * Expects a byte that does not match the given expectation.\n+     * \n+     * @param first\n+     *            placeholder for the expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte not(byte first) {\n+        LastArguments.reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an Object that matches one of the given expectations.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T or(T first, T second) {\n+        LastArguments.reportOr(2);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a short that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static short or(short first, short second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static long or(long first, long second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static int or(int first, int second) {\n+        LastArguments.reportOr(2);\n+        return first;\n+    }\n+\n+    /**\n+     * Expects a float that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static float or(float first, float second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static double or(double first, double second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static char or(char first, char second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a byte that matches one of the given expectations.\n+     * \n+     * @param first\n+     *            placeholder for the first expectation.\n+     * @param second\n+     *            placeholder for the second expectation.\n+     * @return <code>0</code>.\n+     */\n+    public static byte or(byte first, byte second) {\n+        LastArguments.reportOr(2);\n+        return 0;\n+    }\n+}\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n \n import org.mockito.internal.LastArguments;\n import org.mockito.internal.matchers.*;\n-import org.mockito.matchers.*;\n \n public class Matchers {\n-    \n-    /**\n-     * Expects a comparable argument greater than or equal the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects a byte argument greater than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte geq(byte value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument greater than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double geq(double value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument greater than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float geq(float value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument greater than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int geq(int value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument greater than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long geq(long value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument greater than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short geq(short value) {\n-        LastArguments.reportMatcher(new GreaterOrEqual<Short>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a comparable argument less than or equal the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n-        LastArguments.reportMatcher(new LessOrEqual<T>(value));\n-        return null;\n-    }\n-     \n-    /**\n-     * Expects a byte argument less than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte leq(byte value) {\n-        LastArguments.reportMatcher(new LessOrEqual<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument less than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double leq(double value) {\n-        LastArguments.reportMatcher(new LessOrEqual<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument less than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float leq(float value) {\n-        LastArguments.reportMatcher(new LessOrEqual<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument less than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int leq(int value) {\n-        LastArguments.reportMatcher(new LessOrEqual<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument less than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long leq(long value) {\n-        LastArguments.reportMatcher(new LessOrEqual<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument less than or equal to the given value. For\n-     * details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short leq(short value) {\n-        LastArguments.reportMatcher(new LessOrEqual<Short>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a comparable argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n-        LastArguments.reportMatcher(new GreaterThan<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects a byte argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte gt(byte value) {\n-        LastArguments.reportMatcher(new GreaterThan<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double gt(double value) {\n-        LastArguments.reportMatcher(new GreaterThan<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float gt(float value) {\n-        LastArguments.reportMatcher(new GreaterThan<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int gt(int value) {\n-        LastArguments.reportMatcher(new GreaterThan<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long gt(long value) {\n-        LastArguments.reportMatcher(new GreaterThan<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument greater than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short gt(short value) {\n-        LastArguments.reportMatcher(new GreaterThan<Short>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a comparable argument less than the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n-        LastArguments.reportMatcher(new LessThan<T>(value));\n-        return null;\n-    }\n-    \n-    /**\n-     * Expects a byte argument less than the given value. For details, see the\n+    /**\n+     * Expects any boolean argument. For details, see the EasyMock\n      * documentation.\n      * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static byte lt(byte value) {\n-        LastArguments.reportMatcher(new LessThan<Byte>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double argument less than the given value. For details, see the\n-     * documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static double lt(double value) {\n-        LastArguments.reportMatcher(new LessThan<Double>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float argument less than the given value. For details, see the\n-     * documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static float lt(float value) {\n-        LastArguments.reportMatcher(new LessThan<Float>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int argument less than the given value. For details, see the\n-     * documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static int lt(int value) {\n-        LastArguments.reportMatcher(new LessThan<Integer>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long argument less than the given value. For details, see the\n-     * documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static long lt(long value) {\n-        LastArguments.reportMatcher(new LessThan<Long>(value));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short argument less than the given value. For details, see the\n-     * documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>0</code>.\n-     */\n-    public static short lt(short value) {\n-        LastArguments.reportMatcher(new LessThan<Short>(value));\n-        return 0;\n-    }\n-    \n-    /**\n-     * Expects a string that contains the given substring. For details, see the\n-     * documentation.\n-     * \n-     * @param substring\n-     *            the substring.\n-     * @return <code>null</code>.\n-     */\n-    public static String contains(String substring) {\n-        LastArguments.reportMatcher(new Contains(substring));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n      * @return <code>false</code>.\n      */\n-    public static boolean and(boolean first, boolean second) {\n-        LastArguments.reportAnd(2);\n+    public static boolean anyBoolean() {\n+        LastArguments.reportMatcher(Any.ANY);\n         return false;\n     }\n \n     /**\n-     * Expects a byte that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte and(byte first, byte second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char and(char first, char second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double and(double first, double second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float and(float first, float second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int and(int first, int second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long and(long first, long second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a short that matches both given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short and(short first, short second) {\n-        LastArguments.reportAnd(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an Object that matches both given expectations.\n+     * Expects any byte argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static byte anyByte() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any char argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static char anyChar() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any int argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static int anyInt() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any long argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static long anyLong() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any float argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static float anyFloat() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any double argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static double anyDouble() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any short argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>0</code>.\n+     */\n+    public static short anyShort() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects any Object argument. For details, see the EasyMock documentation.\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object anyObject() {\n+        LastArguments.reportMatcher(Any.ANY);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects an object implementing the given class. For details, see the\n+     * EasyMock documentation.\n      * \n      * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T and(T first, T second) {\n-        LastArguments.reportAnd(2);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>false</code>.\n-     */\n-    public static boolean or(boolean first, boolean second) {\n-        LastArguments.reportOr(2);\n+     *            the accepted type.\n+     * @param clazz\n+     *            the class of the accepted type.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T isA(Class<T> clazz) {\n+        LastArguments.reportMatcher(new InstanceOf(clazz));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a boolean that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static boolean eq(boolean value) {\n+        LastArguments.reportMatcher(new Equals(value));\n         return false;\n     }\n \n     /**\n-     * Expects a comparable argument equals to the given value according to their\n-     * compareTo method. For details, see the documentation.\n-     * \n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n-        LastArguments.reportMatcher(new CompareEqual<T>(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an Object that is the same as the given value. For details, see\n-     * the documentation.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param value\n-     *            the given value.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T same(T value) {\n-        LastArguments.reportMatcher(new Same(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that ends with the given suffix. For details, see the\n-     * documentation.\n-     * \n-     * @param suffix\n-     *            the suffix.\n-     * @return <code>null</code>.\n-     */\n-    public static String endsWith(String suffix) {\n-        LastArguments.reportMatcher(new EndsWith(suffix));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that starts with the given prefix. For details, see the\n-     * documentation.\n-     * \n-     * @param prefix\n-     *            the prefix.\n-     * @return <code>null</code>.\n-     */\n-    public static String startsWith(String prefix) {\n-        LastArguments.reportMatcher(new StartsWith(prefix));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a string that contains a substring that matches the given regular\n-     * expression. For details, see the documentation.\n+     * Expects a byte that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte eq(byte value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a char that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static char eq(char value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a double that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double eq(double value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float eq(float value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an int that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int eq(int value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a long that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long eq(long value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a short that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short eq(short value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects an Object that is equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T eq(T value) {\n+        LastArguments.reportMatcher(new Equals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects null.\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object isNull() {\n+        LastArguments.reportMatcher(Null.NULL);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects not null.\n+     * \n+     * @return <code>null</code>.\n+     */\n+    public static Object notNull() {\n+        LastArguments.reportMatcher(NotNull.NOT_NULL);\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that matches the given regular expression. For details,\n+     * see the EasyMock documentation.\n      * \n      * @param regex\n      *            the regular expression.\n      * @return <code>null</code>.\n      */\n-    public static String find(String regex) {\n-        LastArguments.reportMatcher(new Find(regex));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an Object array that is equal to the given array, i.e. it has to\n-     * have the same type, length, and each element has to be equal.\n-     * \n-     * @param <T>\n-     *            the type of the array, it is passed through to prevent casts.\n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T[] aryEq(T[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a short array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static short[] aryEq(short[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a long array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static long[] aryEq(long[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an int array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static int[] aryEq(int[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a float array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static float[] aryEq(float[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a double array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static double[] aryEq(double[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a char array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static char[] aryEq(char[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a byte array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static byte[] aryEq(byte[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a boolean array that is equal to the given array, i.e. it has to\n-     * have the same length, and each element has to be equal.\n-     * \n-     * @param value\n-     *            the given arry.\n-     * @return <code>null</code>.\n-     */\n-    public static boolean[] aryEq(boolean[] value) {\n-        LastArguments.reportMatcher(new ArrayEquals(value));\n-        return null;\n-    }\n-\n-    /**\n-     * Expects an Object that does not match the given expectation.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T not(T first) {\n-        LastArguments.reportNot();\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a short that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short not(short first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int not(int first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long not(long first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float not(float first) {\n-        LastArguments.reportNot();\n-        return first;\n-    }\n-\n-    /**\n-     * Expects a double that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double not(double first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char not(char first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a boolean that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>false</code>.\n-     */\n-    public static boolean not(boolean first) {\n-        LastArguments.reportNot();\n-        return false;\n-    }\n-\n-    /**\n-     * Expects a byte that does not match the given expectation.\n-     * \n-     * @param first\n-     *            placeholder for the expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte not(byte first) {\n-        LastArguments.reportNot();\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an Object that matches one of the given expectations.\n-     * \n-     * @param <T>\n-     *            the type of the object, it is passed through to prevent casts.\n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T or(T first, T second) {\n-        LastArguments.reportOr(2);\n-        return null;\n-    }\n-\n-    /**\n-     * Expects a short that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static short or(short first, short second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a long that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static long or(long first, long second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects an int that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static int or(int first, int second) {\n-        LastArguments.reportOr(2);\n-        return first;\n-    }\n-\n-    /**\n-     * Expects a float that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static float or(float first, float second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a double that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static double or(double first, double second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a char that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static char or(char first, char second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a byte that matches one of the given expectations.\n-     * \n-     * @param first\n-     *            placeholder for the first expectation.\n-     * @param second\n-     *            placeholder for the second expectation.\n-     * @return <code>0</code>.\n-     */\n-    public static byte or(byte first, byte second) {\n-        LastArguments.reportOr(2);\n-        return 0;\n-    }\n-}\n+    public static String matches(String regex) {\n+        LastArguments.reportMatcher(new Matches(regex));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a double that has an absolute difference to the given value that\n+     * is less than the given delta. For details, see the EasyMock\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param delta\n+     *            the given delta.\n+     * @return <code>0</code>.\n+     */\n+    public static double eq(double value, double delta) {\n+        LastArguments.reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n+    }\n+\n+    /**\n+     * Expects a float that has an absolute difference to the given value that\n+     * is less than the given delta. For details, see the EasyMock\n+     * documentation.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param delta\n+     *            the given delta.\n+     * @return <code>0</code>.\n+     */\n+    public static float eq(float value, float delta) {\n+        LastArguments.reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n+    }\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.hamcrest.*;\n import org.mockito.internal.*;\n \n-public class Mockito extends CoolMatchers {\n+public class Mockito extends Matchers {\n \n     public static <T> T mock(Class<T> classToMock) {\n         try {\n--- a/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java\n     \n     @Test\n     public void shouldScreamWhenMatchersAreInvalid() {\n-        mock.simpleMethodWithArgument(Matchers.not(eq(\"asd\")));\n+        mock.simpleMethodWithArgument(CrazyMatchers.not(eq(\"asd\")));\n         try {\n-            mock.simpleMethodWithArgument(Matchers.not(\"jkl\"));\n+            mock.simpleMethodWithArgument(CrazyMatchers.not(\"jkl\"));\n             fail();\n         } catch (IllegalStateException e) {\n             assertEquals(\"no matchers found.\", e.getMessage());\n         }\n         \n         try {\n-            mock.simpleMethodWithArgument(Matchers.or(eq(\"jkl\"), \"asd\"));\n+            mock.simpleMethodWithArgument(CrazyMatchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (IllegalStateException e) {\n             assertEquals(\"2 matchers expected, 1 recorded.\", e.getMessage());\n--- a/test/org/mockito/usage/matchers/MatchersTest.java\n+++ b/test/org/mockito/usage/matchers/MatchersTest.java\n import org.mockito.*;\n import org.mockito.usage.IMethods;\n \n-import static org.mockito.Matchers.*;\n+import static org.mockito.CrazyMatchers.*;\n \n @SuppressWarnings(\"unchecked\")  \n public class MatchersTest {\n     @Test\n     public void orOverloaded() {\n         stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n-        stub(mock.oneArg(Matchers.or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n-        stub(mock.oneArg(Matchers.or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n-        stub(mock.oneArg(Matchers.or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n-        stub(mock.oneArg(Matchers.or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n-        stub(mock.oneArg(Matchers.or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n-        stub(mock.oneArg(Matchers.or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n-        stub(mock.oneArg(Matchers.or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n-        stub(mock.oneArg(Matchers.or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n-        stub(mock.oneArg(Matchers.or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((byte) 1), eq((byte) 2)))).andReturn(\"1\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((char) 1), eq((char) 2)))).andReturn(\"2\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((double) 1), eq((double) 2)))).andReturn(\"3\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((float) 1), eq((float) 2)))).andReturn(\"4\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((int) 1), eq((int) 2)))).andReturn(\"5\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((long) 1), eq((long) 2)))).andReturn(\"6\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq((short) 1), eq((short) 2)))).andReturn(\"7\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq(\"asd\"), eq(\"jkl\")))).andReturn(\"8\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq(this.getClass()), eq(Object.class)))).andReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(\"0\", mock.oneArg(false));\n \n     @Test\n     public void notOverloaded() {\n-        stub(mock.oneArg(Matchers.not(eq(false)))).andReturn(\"0\");\n-        stub(mock.oneArg(Matchers.not(eq((byte) 1)))).andReturn(\"1\");\n-        stub(mock.oneArg(Matchers.not(eq('a')))).andReturn(\"2\");\n-        stub(mock.oneArg(Matchers.not(eq((double) 1)))).andReturn(\"3\");\n-        stub(mock.oneArg(Matchers.not(eq((float) 1)))).andReturn(\"4\");\n-        stub(mock.oneArg(Matchers.not(eq((int) 1)))).andReturn(\"5\");\n-        stub(mock.oneArg(Matchers.not(eq((long) 1)))).andReturn(\"6\");\n-        stub(mock.oneArg(Matchers.not(eq((short) 1)))).andReturn(\"7\");\n-        stub(mock.oneArg(Matchers.not(contains(\"a\")))).andReturn(\"8\");\n-        stub(mock.oneArg(Matchers.not(isA(Class.class)))).andReturn(\"9\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq(false)))).andReturn(\"0\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq((byte) 1)))).andReturn(\"1\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq('a')))).andReturn(\"2\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq((double) 1)))).andReturn(\"3\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq((float) 1)))).andReturn(\"4\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq((int) 1)))).andReturn(\"5\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq((long) 1)))).andReturn(\"6\");\n+        stub(mock.oneArg(CrazyMatchers.not(eq((short) 1)))).andReturn(\"7\");\n+        stub(mock.oneArg(CrazyMatchers.not(contains(\"a\")))).andReturn(\"8\");\n+        stub(mock.oneArg(CrazyMatchers.not(isA(Class.class)))).andReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArg(true));\n         assertEquals(null, mock.oneArg(false));\n \n     @Test\n     public void compareToMatcher() {\n-        stub(mock.oneArg(Matchers.cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n+        stub(mock.oneArg(CrazyMatchers.cmpEq(new BigDecimal(\"1.5\")))).andReturn(\"0\");\n \n         assertEquals(\"0\", mock.oneArg(new BigDecimal(\"1.50\")));\n         assertEquals(null, mock.oneArg(new BigDecimal(\"1.51\")));\n \n     @Test\n     public void arrayEqualsMatcher() {\n-        stub(mock.oneArray(Matchers.aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n-        stub(mock.oneArray(Matchers.aryEq(new byte[] { 1 }))).andReturn(\"1\");\n-        stub(mock.oneArray(Matchers.aryEq(new char[] { 1 }))).andReturn(\"2\");\n-        stub(mock.oneArray(Matchers.aryEq(new double[] { 1 }))).andReturn(\"3\");\n-        stub(mock.oneArray(Matchers.aryEq(new float[] { 1 }))).andReturn(\"4\");\n-        stub(mock.oneArray(Matchers.aryEq(new int[] { 1 }))).andReturn(\"5\");\n-        stub(mock.oneArray(Matchers.aryEq(new long[] { 1 }))).andReturn(\"6\");\n-        stub(mock.oneArray(Matchers.aryEq(new short[] { 1 }))).andReturn(\"7\");\n-        stub(mock.oneArray(Matchers.aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n-        stub(mock.oneArray(Matchers.aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new boolean[] { true, false, false }))).andReturn(\"0\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new byte[] { 1 }))).andReturn(\"1\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new char[] { 1 }))).andReturn(\"2\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new double[] { 1 }))).andReturn(\"3\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new float[] { 1 }))).andReturn(\"4\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new int[] { 1 }))).andReturn(\"5\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new long[] { 1 }))).andReturn(\"6\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new short[] { 1 }))).andReturn(\"7\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new String[] { \"Test\" }))).andReturn(\"8\");\n+        stub(mock.oneArray(CrazyMatchers.aryEq(new Object[] { \"Test\", new Integer(4) }))).andReturn(\"9\");\n \n         assertEquals(\"0\", mock.oneArray(new boolean[] { true, false, false }));\n         assertEquals(\"1\", mock.oneArray(new byte[] { 1 }));\n     @Test\n     public void orMatcher() {\n         stub(mock.oneArg(anyInt())).andReturn(\"other\");\n-        stub(mock.oneArg(Matchers.or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n+        stub(mock.oneArg(CrazyMatchers.or(eq(7), eq(9)))).andReturn(\"7 or 9\");\n \n         assertEquals(\"other\", mock.oneArg(10));\n         assertEquals(\"7 or 9\", mock.oneArg(7));\n     @Test\n     public void nullMatcher() {\n         stub(mock.threeArgumentMethod(eq(1), isNull(), eq(\"\"))).andReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), Matchers.not(isNull()), eq(\"\"))).andReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), CrazyMatchers.not(isNull()), eq(\"\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, null, \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, new Object(), \"\"));\n     @Test\n     public void notNullMatcher() {\n         stub(mock.threeArgumentMethod(eq(1), notNull(), eq(\"\"))).andReturn(\"1\");\n-        stub(mock.threeArgumentMethod(eq(1), Matchers.not(notNull()), eq(\"\"))).andReturn(\"2\");\n+        stub(mock.threeArgumentMethod(eq(1), CrazyMatchers.not(notNull()), eq(\"\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.threeArgumentMethod(1, new Object(), \"\"));\n         assertEquals(\"2\", mock.threeArgumentMethod(1, null, \"\"));\n     @Test\n     //TODO how different is this one from matchesMatcher?\n     public void findMatcher() {\n-        stub(mock.oneArg(Matchers.find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n+        stub(mock.oneArg(CrazyMatchers.find(\"([a-z]+)\\\\d\"))).andReturn(\"1\");\n \n         assertEquals(\"1\", mock.oneArg(\"ab12\"));\n         assertEquals(null, mock.oneArg(\"12345\"));\n \n     @Test\n     public void startsWithMatcher() {\n-        stub(mock.oneArg(Matchers.startsWith(\"ab\"))).andReturn(\"1\");\n-        stub(mock.oneArg(Matchers.startsWith(\"bc\"))).andReturn(\"2\");\n+        stub(mock.oneArg(CrazyMatchers.startsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(CrazyMatchers.startsWith(\"bc\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"ab quake\"));\n         assertEquals(\"2\", mock.oneArg(\"bc quake\"));\n \n     @Test\n     public void endsWithMatcher() {\n-        stub(mock.oneArg(Matchers.endsWith(\"ab\"))).andReturn(\"1\");\n-        stub(mock.oneArg(Matchers.endsWith(\"bc\"))).andReturn(\"2\");\n+        stub(mock.oneArg(CrazyMatchers.endsWith(\"ab\"))).andReturn(\"1\");\n+        stub(mock.oneArg(CrazyMatchers.endsWith(\"bc\"))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(\"xab\"));\n         assertEquals(\"2\", mock.oneArg(\"xbc\"));\n         assertEquals(one, two);\n         assertEquals(two, three);\n \n-        stub(mock.oneArg(Matchers.same(one))).andReturn(\"1\");\n-        stub(mock.oneArg(Matchers.same(two))).andReturn(\"2\");\n+        stub(mock.oneArg(CrazyMatchers.same(one))).andReturn(\"1\");\n+        stub(mock.oneArg(CrazyMatchers.same(two))).andReturn(\"2\");\n \n         assertEquals(\"1\", mock.oneArg(one));\n         assertEquals(\"2\", mock.oneArg(two));\n--- a/test/org/mockito/usage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockito/usage/verification/VerificationUsingMatchersTest.java\n  */\n package org.mockito.usage.verification;\n \n-import static org.mockito.Matchers.*;\n+import static org.mockito.CrazyMatchers.*;\n import static org.junit.Assert.*;\n import static org.mockito.Mockito.*;\n \n         mock.oneArg(one);\n         mock.oneArg(two);\n         \n-        verify(mock).oneArg(Matchers.same(one));\n+        verify(mock).oneArg(CrazyMatchers.same(one));\n         verify(mock).oneArg(two);\n         \n         try {\n-            verify(mock).oneArg(Matchers.same(three));\n+            verify(mock).oneArg(CrazyMatchers.same(three));\n             fail();\n         } catch (MockVerificationAssertionError e) {}\n     }  ", "timestamp": 1195320871, "metainfo": ""}