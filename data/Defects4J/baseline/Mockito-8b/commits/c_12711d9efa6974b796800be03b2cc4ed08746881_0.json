{"sha": "12711d9efa6974b796800be03b2cc4ed08746881", "log": "Fixed the isSpy() behavior", "commit": "\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n  */\n package org.mockito.internal.util;\n \n+import org.mockito.Mockito;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.InternalMockHandler;\n import org.mockito.internal.configuration.ClassPathLoader;\n     }\n \n     public boolean isSpy(Object mock) {\n-        //TODO SF, spy is determined by default answer\n-        return isMockitoMock(mock) &&\n-        \t\t(getMockSettings(mock).getSpiedInstance() != null\n-        \t\t    || getMockSettings(mock).isUsingConstructor());\n+        return isMockitoMock(mock) && getMockSettings(mock).getDefaultAnswer() == Mockito.CALLS_REAL_METHODS;\n     }\n \n     private <T> boolean isMockitoMock(T mock) {\n--- a/test/org/mockito/internal/util/MockUtilTest.java\n+++ b/test/org/mockito/internal/util/MockUtilTest.java\n \n import java.util.ArrayList;\n import java.util.List;\n+\n+import static org.mockito.Mockito.withSettings;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtilTest extends TestBase {\n     public void should_validate_spy() {\n         assertFalse(mockUtil.isSpy(\"i mock a mock\"));\n         assertFalse(mockUtil.isSpy(Mockito.mock(List.class)));\n+        assertFalse(mockUtil.isSpy((Class) null));\n+\n         assertTrue(mockUtil.isSpy(Mockito.spy(new ArrayList())));\n-        assertFalse(mockUtil.isSpy((Class) null));\n+        assertTrue(mockUtil.isSpy(Mockito.spy(ArrayList.class)));\n+        assertTrue(mockUtil.isSpy(Mockito.mock(ArrayList.class, withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS))));\n     }\n \n     @Test\n     interface SomeInterface {}\n \n     @Test\n-    public void shouldKnowIfTypeIsMockable() throws Exception {\n+    public void should_konw_if_type_is_mockable() throws Exception {\n         assertFalse(mockUtil.isTypeMockable(FinalClass.class));\n         assertFalse(mockUtil.isTypeMockable(int.class));\n ", "timestamp": 1417513678, "metainfo": ""}