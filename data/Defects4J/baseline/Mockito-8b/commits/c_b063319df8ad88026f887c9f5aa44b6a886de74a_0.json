{"sha": "b063319df8ad88026f887c9f5aa44b6a886de74a", "log": "Added basic implementation of PluginSwitcher plugin", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/plugins/DefaultPluginSwitcher.java\n+package org.mockito.internal.configuration.plugins;\n+\n+import org.mockito.plugins.PluginSwitcher;\n+\n+class DefaultPluginSwitcher implements PluginSwitcher {\n+    public boolean isEnabled(String pluginClassName) {\n+        return true;\n+    }\n+}\n--- a/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.MockitoConfigurationException;\n+import org.mockito.plugins.PluginSwitcher;\n \n import java.io.*;\n import java.net.URL;\n import java.util.List;\n \n class PluginLoader {\n+\n+    private final PluginSwitcher pluginSwitcher;\n+\n+    public PluginLoader(PluginSwitcher pluginSwitcher) {\n+        this.pluginSwitcher = pluginSwitcher;\n+    }\n \n     /**\n      * Scans the classpath for given pluginType. If not found, default class is used.\n                     //If the resource does not have plugin class name we're ignoring it\n                     continue;\n                 }\n+                if (!pluginSwitcher.isEnabled(className)) {\n+                    continue;\n+                }\n                 Class<?> pluginClass = loader.loadClass(className);\n                 Object plugin = pluginClass.newInstance();\n                 result.add(service.cast(plugin));\n--- a/src/org/mockito/internal/configuration/plugins/PluginRegistry.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginRegistry.java\n package org.mockito.internal.configuration.plugins;\n \n import org.mockito.plugins.MockMaker;\n+import org.mockito.plugins.PluginSwitcher;\n import org.mockito.plugins.StackTraceCleanerProvider;\n \n /**\n  */\n public class PluginRegistry {\n \n+    private static final PluginSwitcher pluginSwitcher\n+            = new PluginLoader(new DefaultPluginSwitcher()).loadPlugin(PluginSwitcher.class, DefaultPluginSwitcher.class.getName());\n+\n     private static final MockMaker mockMaker\n-            = new PluginLoader().loadPlugin(MockMaker.class, \"org.mockito.internal.creation.cglib.CglibMockMaker\");\n+            = new PluginLoader(pluginSwitcher).loadPlugin(MockMaker.class, \"org.mockito.internal.creation.cglib.CglibMockMaker\");\n \n     private static final StackTraceCleanerProvider stackTraceCleanerProvider\n-            = new PluginLoader().loadPlugin(StackTraceCleanerProvider.class, \"org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider\");\n+            = new PluginLoader(pluginSwitcher).loadPlugin(StackTraceCleanerProvider.class, \"org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider\");\n \n     /**\n      * The implementation of the stack trace cleaner\n--- a/src/org/mockito/plugins/PluginSwitcher.java\n+++ b/src/org/mockito/plugins/PluginSwitcher.java\n     /**\n      * Mockito invokes this method for every plugin found in the classpath\n      * (except from the {@code PluginSwitcher} implementation itself).\n-     * If no custom plugins are discovered this method is not invoked at all.\n+     * If no custom plugins are discovered this method is not invoked.\n      */\n-    boolean isEnabled(Class pluginClass);\n+    boolean isEnabled(String pluginClassName);\n }\n--- a/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyPluginSwitcher.java\n+++ b/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyPluginSwitcher.java\n \n public class MyPluginSwitcher implements PluginSwitcher {\n \n-    static List<Class> invokedFor = new LinkedList<Class>();\n+    static List<String> invokedFor = new LinkedList<String>();\n \n-    public boolean isEnabled(Class pluginClass) {\n-        invokedFor.add(pluginClass);\n+    public boolean isEnabled(String pluginClassName) {\n+        invokedFor.add(pluginClassName);\n         return true;\n     }\n }\n--- a/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitcherTest.java\n+++ b/subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitcherTest.java\n import org.junit.Test;\n import org.mockitousage.plugins.stacktrace.MyStackTraceCleanerProvider;\n \n+import java.util.List;\n+\n import static java.util.Arrays.asList;\n import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n \n //TODO consider adding a separate source set or project\n //that validates that switcher can disable a plugin\n     \n     @Test\n     public void plugin_switcher_is_used() {\n-        assertEquals(MyPluginSwitcher.invokedFor, asList(MyStackTraceCleanerProvider.class));\n+        mock(List.class);\n+        assertEquals(MyPluginSwitcher.invokedFor, asList(MyStackTraceCleanerProvider.class.getName()));\n     }\n }", "timestamp": 1418426971, "metainfo": ""}