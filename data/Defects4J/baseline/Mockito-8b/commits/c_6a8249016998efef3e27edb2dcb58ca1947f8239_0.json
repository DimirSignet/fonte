{"sha": "6a8249016998efef3e27edb2dcb58ca1947f8239", "log": "In order to add some more tests for my sanity & understanding of serialization / deserialization of mocks  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401646", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/basicapi/ObjectsSerializationTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.basicapi;\n+\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+import org.mockito.internal.matchers.Any;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class ObjectsSerializationTest extends TestBase implements Serializable {\n+\n+    //Ok, this test has nothing to do with mocks but it shows fundamental feature of java serialization that\n+    //plays important role in mocking:\n+    //Serialization/deserialization actually replaces all instances of serialized object in the object graph (if there are any)\n+    //thanks to that mechanizm, stubbing & verification can correctly match method invocations because\n+    //one of the parts of invocation matching is checking if mock object is the same\n+\n+    class Bar implements Serializable {\n+        Foo foo;\n+    }\n+\n+    class Foo implements Serializable {\n+        Bar bar;\n+        Foo() {\n+            bar = new Bar();\n+            bar.foo = this;\n+        }\n+    }\n+\n+    @Test\n+    public void shouldSerializationWork() throws Exception {\n+        //given\n+        Foo foo = new Foo();\n+        //when\n+        foo = serializeAndBack(foo);\n+        //then\n+        assertSame(foo, foo.bar.foo);\n+    }\n+}", "timestamp": 1257159881, "metainfo": ""}