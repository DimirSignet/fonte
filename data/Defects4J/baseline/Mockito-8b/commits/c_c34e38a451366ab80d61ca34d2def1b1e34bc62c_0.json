{"sha": "c34e38a451366ab80d61ca34d2def1b1e34bc62c", "log": "Improved fetching GitHub issues.  We're using a single rest call to acquire the issues.", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n package org.mockito.release.notes.improvements;\n \n import com.jcabi.github.*;\n+import org.json.simple.JSONObject;\n+import org.json.simple.JSONValue;\n+import org.mockito.release.notes.util.IOUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n \n class GitHubTicketFetcher {\n         if (ticketIds.isEmpty()) {\n             return;\n         }\n+        LOG.info(\"Querying GitHub API for {} tickets\", ticketIds.size());\n+        String url = \"https://api.github.com/repos/mockito/mockito/issues?access_token=\" + gitHubAuthToken;\n+        url += \"&state=closed\";\n+\n+        Set<Long> tickets = new HashSet<Long>();\n+        for (String id : ticketIds) {\n+            tickets.add(Long.parseLong(id));\n+        }\n+\n         try {\n-            //TODO if possible we should query for all tickets via one REST call and perhaps stop using jcapi\n-            LOG.info(\"Querying GitHub API for {} tickets\", ticketIds.size());\n-            RtGithub github = new RtGithub(gitHubAuthToken);\n-            Repo repo = github.repos().get(new Coordinates.Simple(\"mockito/mockito\"));\n-            Issues issues = repo.issues();\n-            for (String ticketId : ticketIds) {\n-                LOG.info(\" #{}\", ticketId);\n-                //TODO make ticked id an int\n-                Issue i = issues.get(Integer.parseInt(ticketId));\n-                Issue.Smart issue = new Issue.Smart(i);\n-                if (issue.exists() && !issue.isOpen()) {\n-                    improvements.add(new Improvement(issue.number(), issue.title(), issue.htmlUrl().toString(),\n-                            labels(issue.labels())));\n-                }\n-            }\n+            fetch(tickets, improvements, url);\n         } catch (Exception e) {\n             throw new RuntimeException(\"Problems fetching \" + ticketIds.size() + \" from GitHub\", e);\n         }\n     }\n \n-    private static Set<String> labels(IssueLabels labels) {\n-        Set<String> out = new HashSet<String>();\n-        for (Label label : labels.iterate()) {\n-            out.add(label.name());\n+    private void fetch(Set<Long> tickets, DefaultImprovements improvements, String url) throws IOException {\n+        InputStream response = new URL(url).openStream();\n+        String content = IOUtil.readStream(response);\n+        List<JSONObject> issues = (List) JSONValue.parse(content);\n+\n+        for (JSONObject issue : issues) {\n+            long id = (Long) issue.get(\"number\");\n+            if (tickets.remove(id)) {\n+                String issueUrl = (String) issue.get(\"html_url\");\n+                String title = (String) issue.get(\"title\");\n+                improvements.add(new Improvement(id, title, issueUrl, new HashSet()));\n+\n+                if (tickets.isEmpty()) {\n+                    return;\n+                }\n+            }\n         }\n-        return out;\n     }\n }\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java\n \n class Improvement {\n \n-    private final int id;\n+    private final long id;\n     private final String title;\n     private final String url;\n     private final Collection<String> labels;\n \n-    public Improvement(int id, String title, String url, Collection<String> labels) {\n+    public Improvement(long id, String title, String url, Collection<String> labels) {\n         this.id = id;\n         this.title = title;\n         this.url = url;\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java\n+package org.mockito.release.notes.util;\n+\n+import java.io.*;\n+\n+//TODO SF document and cover\n+public class IOUtil {\n+\n+    public static String readStream(InputStream is) {\n+        BufferedReader r = null;\n+        try {\n+            r = new BufferedReader(new InputStreamReader(is));\n+            return readNow(is);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Problems reading stream\", e);\n+        } finally {\n+            close(r);\n+        }\n+    }\n+\n+    public static void close(Closeable closeable) {\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"Problems closing stream\", e);\n+            }\n+        }\n+    }\n+\n+    private static String readNow(InputStream is) throws IOException {\n+        BufferedReader r = new BufferedReader(new InputStreamReader(is));\n+        StringBuilder sb = new StringBuilder();\n+\n+        String line;\n+        while(null != (line = r.readLine())) {\n+            sb.append(line).append(\"\\n\");\n+        }\n+\n+        return sb.toString();\n+    }\n+}", "timestamp": 1416674238, "metainfo": ""}