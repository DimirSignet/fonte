{"sha": "71450e563fb547a0c3a0fccced3f533dd994ffa8", "log": "replaced existing CustomMatcher with hamcrest-type.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40353", "commit": "\n--- a/src/org/mockito/CustomMatcher.java\n+++ b/src/org/mockito/CustomMatcher.java\n  */\n package org.mockito;\n \n-import org.mockito.internal.matchers.ArgumentMatcher;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n \n /**\n  * Allows creating customized argument matchers.\n  * \n  * @param <T>\n  */\n-public abstract class CustomMatcher<T> implements ArgumentMatcher<T> {\n+public abstract class CustomMatcher<T> extends BaseMatcher<T> {\n+\n+    public abstract boolean matches(Object argument);\n     \n     /* \n      * Usually not necessary but you might want to override this method to provide specific argument description \n      * (useful when errors are reported). \n      */\n-    public void appendTo(StringBuilder builder) {\n-        builder.append(\"<custom argument matcher>\");\n+    public void describeTo(Description d) {\n+        d.appendText(\"<custom argument matcher>\");\n     }\n-\n-    public abstract boolean matches(T argument);\n }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  */\n package org.mockito;\n \n+import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n+import org.hamcrest.SelfDescribing;\n import org.mockito.internal.matchers.Any;\n import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Contains;\n      * @param matcher decides whether argument matches\n      * @return <code>null</code>.\n      */\n-    public static <T> T argThat(CustomMatcher<T> matcher) {\n+    public static <T> T argThat(Matcher<T> matcher) {\n         return reportMatcher(matcher).<T>returnNull();\n     }\n-    \n-    /**\n-     * Allows creating custom argument matchers.\n-     * <p>\n-     * See examples in javadoc for {@link Matchers}\n-     * \n-     * @param matcher decides whether argument matches\n-     * @return <code>null</code>.\n-     */\n-    public static <T> T argThat(final Matcher<T> matcher) {\n-        return reportMatcher(\n-            new CustomMatcher<T>() {\n-                public boolean matches(T argument) {\n-                    return matcher.matches(argument);\n-                }\n-                public void appendTo(StringBuilder builder) {\n-                    builder.append(matcher.toString());\n-                }\n-            }\n-        ).<T>returnNull();\n-    }    \n     \n     /**\n      * Allows creating custom argument matchers.\n     private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n         return LastArguments.instance().reportMatcher(matcher);\n     }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    private static ReturnValues reportMatcher(final Matcher<?> matcher) {\n+        return LastArguments.instance().reportMatcher(new ArgumentMatcher() {\n+\n+            public void appendTo(final StringBuilder builder) {\n+                matcher.describeTo(new Description() {\n+\n+                    public Description appendDescriptionOf(SelfDescribing arg0) {\n+                        throw new RuntimeException(\"not implemented\");\n+                    }\n+\n+                    public Description appendList(String arg0, String arg1, String arg2,\n+                            Iterable<? extends SelfDescribing> arg3) {\n+                        throw new RuntimeException(\"not implemented\");\n+                    }\n+\n+                    public Description appendText(String arg0) {\n+                        builder.append(arg0);\n+                        return this;\n+                    }\n+\n+                    public Description appendValue(Object arg0) {\n+                        throw new RuntimeException(\"not implemented\");\n+                    }\n+\n+                    public <T> Description appendValueList(String arg0, String arg1, String arg2, T... arg3) {\n+                        throw new RuntimeException(\"not implemented\");\n+                    }\n+\n+                    public <T> Description appendValueList(String arg0, String arg1, String arg2, Iterable<T> arg3) {\n+                        throw new RuntimeException(\"not implemented\");\n+                    }} );\n+            }\n+\n+            public boolean matches(Object argument){\n+                return matcher.matches(argument);\n+            }\n+        });\n+    }\n }\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n public class CustomMatchersTest extends TestBase {\n     \n     private final class ContainsFoo extends CustomMatcher<String> {\n-        public boolean matches(String arg) {\n-            return arg.contains(\"foo\");\n+        public boolean matches(Object arg) {\n+            return ((String) arg).contains(\"foo\");\n         }\n     }\n \n     private final class IsAnyBoolean extends CustomMatcher<Boolean> {\n-        public boolean matches(Boolean argument) {\n+        public boolean matches(Object arg) {\n             return true;\n         }\n     }\n     \n     private final class IsSorZ extends CustomMatcher<Character> {\n-        public boolean matches(Character argument) {\n-            return argument.equals('s') || argument.equals('z');\n+        public boolean matches(Object arg) {\n+            Character character = (Character) arg;\n+            return character.equals('s') || character.equals('z');\n         }\n     }\n \n     private final class IsZeroOrOne<T extends Number> extends CustomMatcher<T> {\n-        public boolean matches(T argument) {\n-            if (argument.intValue() == 0 || argument.intValue() == 1) {\n+        public boolean matches(Object arg) {\n+            Number number = (Number) arg;\n+            if (number.intValue() == 0 || number.intValue() == 1) {\n                 return true;\n             }\n             return false;", "timestamp": 1202584987, "metainfo": ""}