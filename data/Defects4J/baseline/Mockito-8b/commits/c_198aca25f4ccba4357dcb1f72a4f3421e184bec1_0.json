{"sha": "198aca25f4ccba4357dcb1f72a4f3421e184bec1", "log": "Cleaning up the code incrementally  Refactored for better testability (in progress).", "commit": "\n--- a/src/org/mockito/internal/configuration/plugins/PluginFileReader.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginFileReader.java\n import org.mockito.internal.util.io.IOUtil;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Reader;\n \n class PluginFileReader {\n \n-    String readPluginClass(Reader reader) throws IOException {\n-        for(String line: IOUtil.readLines(reader)) {\n+    String readPluginClass(InputStream input) throws IOException {\n+        for(String line: IOUtil.readLines(input)) {\n             String stripped = stripCommentAndWhitespace(line);\n             if (stripped.length() > 0) {\n                 return stripped;\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/plugins/PluginFinder.java\n+package org.mockito.internal.configuration.plugins;\n+\n+import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.util.io.IOUtil;\n+import org.mockito.plugins.PluginSwitcher;\n+\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+class PluginFinder {\n+\n+    private final PluginSwitcher pluginSwitcher;\n+\n+    public PluginFinder(PluginSwitcher pluginSwitcher) {\n+        this.pluginSwitcher = pluginSwitcher;\n+    }\n+\n+    String findPluginClass(Iterable<URL> resources) {\n+        for (URL resource : resources) {\n+            InputStream s = null;\n+            try {\n+                s = resource.openStream();\n+                String pluginClassName = new PluginFileReader().readPluginClass(s);\n+                if (pluginClassName == null) {\n+                    //For backwards compatibility\n+                    //If the resource does not have plugin class name we're ignoring it\n+                    continue;\n+                }\n+                if (!pluginSwitcher.isEnabled(pluginClassName)) {\n+                    continue;\n+                }\n+                return pluginClassName;\n+            } catch(Exception e) {\n+                throw new MockitoException(\"Problems reading plugin implementation from: \" + resource, e);\n+            } finally {\n+                IOUtil.closeQuietly(s);\n+            }\n+        }\n+        return null;\n+    }\n+}\n--- a/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n \n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.MockitoConfigurationException;\n+import org.mockito.internal.util.collections.Iterables;\n import org.mockito.plugins.PluginSwitcher;\n \n-import java.io.*;\n+import java.io.IOException;\n import java.net.URL;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Enumeration;\n import java.util.List;\n \n             throw new MockitoException(\"Failed to load \" + service, e);\n         }\n \n+        //TODO SF refactor\n         List<T> result = new ArrayList<T>();\n-        for (URL resource : Collections.list(resources)) {\n-            try {\n-                InputStream in = resource.openStream();\n-                InputStreamReader reader = new InputStreamReader(in, \"UTF-8\");\n-                String className = new PluginFileReader().readPluginClass(reader);\n-                if (className == null) {\n-                    //For backwards compatibility\n-                    //If the resource does not have plugin class name we're ignoring it\n-                    continue;\n-                }\n-                if (!pluginSwitcher.isEnabled(className)) {\n-                    continue;\n-                }\n-                Class<?> pluginClass = loader.loadClass(className);\n+        try {\n+            String foundPluginClass = new PluginFinder(pluginSwitcher).findPluginClass(Iterables.toIterable(resources));\n+            if (foundPluginClass != null) {\n+                Class<?> pluginClass = loader.loadClass(foundPluginClass);\n                 Object plugin = pluginClass.newInstance();\n                 result.add(service.cast(plugin));\n-            } catch (Exception e) {\n-                throw new MockitoConfigurationException(\n-                        \"Failed to load \" + service + \" using \" + resource, e);\n             }\n+            return result;\n+        } catch (Exception e) {\n+            throw new MockitoConfigurationException(\n+                    \"Failed to load \" + service + \" implementation declared in \" + resources, e);\n         }\n-        return result;\n     }\n }\n--- a/src/org/mockito/internal/util/io/IOUtil.java\n+++ b/src/org/mockito/internal/util/io/IOUtil.java\n         }\n     }\n \n-    public static Collection<String> readLines(Reader reader) {\n+    public static Collection<String> readLines(InputStream is) {\n         List<String> out = new LinkedList<String>();\n-        BufferedReader r = new BufferedReader(reader);\n+        BufferedReader r = new BufferedReader(new InputStreamReader(is));\n         String line;\n         try {\n             while((line = r.readLine()) != null) {\n                 out.add(line);\n             }\n         } catch (IOException e) {\n-            throw new MockitoException(\"Problems reading from: \" + reader, e);\n+            throw new MockitoException(\"Problems reading from: \" + is, e);\n         }\n         return out;\n     }\n--- a/test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java\n+++ b/test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java\n  */\n package org.mockito.internal.configuration.plugins;\n \n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.StringReader;\n import java.util.Arrays;\n import java.util.Collections;\n     @Test\n     public void no_class_in_resource() throws IOException {\n         //no class\n-        assertNull(reader.readPluginClass(new StringReader(\"\")));\n-        assertNull(reader.readPluginClass(new StringReader(\"  \")));\n-        assertNull(reader.readPluginClass(new StringReader(\" \\n \")));\n+        assertNull(reader.readPluginClass(impl(\"\")));\n+        assertNull(reader.readPluginClass(impl(\"  \")));\n+        assertNull(reader.readPluginClass(impl(\" \\n \")));\n \n         //commented out\n-        assertNull(reader.readPluginClass(new StringReader(\"#foo\")));\n-        assertNull(reader.readPluginClass(new StringReader(\"  # foo  \")));\n-        assertNull(reader.readPluginClass(new StringReader(\"  # # # java.langString # \")));\n-        assertNull(reader.readPluginClass(new StringReader(\"  \\n # foo \\n # foo \\n \")));\n+        assertNull(reader.readPluginClass(impl(\"#foo\")));\n+        assertNull(reader.readPluginClass(impl(\"  # foo  \")));\n+        assertNull(reader.readPluginClass(impl(\"  # # # java.langString # \")));\n+        assertNull(reader.readPluginClass(impl(\"  \\n # foo \\n # foo \\n \")));\n+    }\n+\n+    private InputStream impl(String s) {\n+        return new ByteArrayInputStream(s.getBytes());\n     }\n \n     @Test\n     public void reads_class_name() throws IOException {\n-        assertEquals(\"java.lang.String\", reader.readPluginClass(new StringReader(\"java.lang.String\")));\n-        assertEquals(\"x\", reader.readPluginClass(new StringReader(\"x\")));\n-        assertEquals(\"x y z\", reader.readPluginClass(new StringReader(\" x y z \")));\n-        assertEquals(\"foo.Foo\", reader.readPluginClass(new StringReader(\" #my class\\n  foo.Foo \\n #other class \")));\n-        assertEquals(\"foo.Foo\", reader.readPluginClass(new StringReader(\"foo.Foo  # cool class\")));\n+        assertEquals(\"java.lang.String\", reader.readPluginClass(impl(\"java.lang.String\")));\n+        assertEquals(\"x\", reader.readPluginClass(impl(\"x\")));\n+        assertEquals(\"x y z\", reader.readPluginClass(impl(\" x y z \")));\n+        assertEquals(\"foo.Foo\", reader.readPluginClass(impl(\" #my class\\n  foo.Foo \\n #other class \")));\n+        assertEquals(\"foo.Foo\", reader.readPluginClass(impl(\"foo.Foo  # cool class\")));\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/configuration/plugins/PluginFinderTest.java\n+package org.mockito.internal.configuration.plugins;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.internal.util.io.IOUtil;\n+import org.mockito.plugins.PluginSwitcher;\n+import org.mockitoutil.TestBase;\n+\n+import java.io.File;\n+\n+import static java.util.Arrays.asList;\n+\n+public class PluginFinderTest extends TestBase {\n+\n+    @Mock PluginSwitcher switcher;\n+    @InjectMocks PluginFinder finder;\n+    public @Rule TemporaryFolder tmp = new TemporaryFolder();\n+\n+    @Test public void empty_resources() {\n+        assertNull(finder.findPluginClass((Iterable) asList()));\n+    }\n+\n+    @Test public void no_valid_impl() throws Exception {\n+        File f = tmp.newFile();\n+\n+        //when\n+        IOUtil.writeText(\"  \\n  \", f);\n+\n+        //then\n+        assertNull(finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n+    }\n+\n+    @Test public void single_implementation() throws Exception {\n+        File f = tmp.newFile();\n+\n+        //when\n+        IOUtil.writeText(\"  foo.Foo  \", f);\n+\n+        //then\n+        assertEquals(\"foo.Foo\", finder.findPluginClass((Iterable) asList(f.toURI().toURL())));\n+    }\n+\n+    @Test public void multiple_implementations() {\n+        fail();\n+    }\n+\n+    @Test public void multiple_empty_implementations() {\n+        fail();\n+    }\n+\n+    @Test public void single_usable_impl() {\n+        fail();\n+    }\n+\n+    @Test public void problems_loading_impl() {\n+        fail();\n+    }\n+}\n--- a/test/org/mockito/internal/util/io/IOUtilTest.java\n+++ b/test/org/mockito/internal/util/io/IOUtilTest.java\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.io.FileReader;\n+import java.io.FileInputStream;\n \n import static java.util.Arrays.asList;\n import static org.junit.Assert.assertEquals;\n     public void writes_reads_files() throws Exception {\n         File file = tmp.newFile();\n         IOUtil.writeText(\"foo\\n\\nbar\", file);\n-        assertEquals(asList(\"foo\", \"\", \"bar\"), IOUtil.readLines(new FileReader(file)));\n+        assertEquals(asList(\"foo\", \"\", \"bar\"), IOUtil.readLines(new FileInputStream(file)));\n     }\n }", "timestamp": 1418426972, "metainfo": ""}