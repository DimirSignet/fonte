{"sha": "83a3551da62066150bce38e63f67ce1a2aff8f32", "log": "added missing test  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40119", "commit": "\n--- a/test/org/mockitousage/IMethods.java\n+++ b/test/org/mockitousage/IMethods.java\n \n     double doubleReturningMethod(int index);\n \n-    Object objectReturningMethod(int index);\n+    Object objectReturningMethod(Object ... objects);\n \n     String oneArg(boolean value);\n \n     \n     void differentMethod();\n \n-    void simpleMethod(String argument);\n+    boolean simpleMethod(String argument);\n     \n     void simpleMethod(int argument);\n     \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n  */\n package org.mockitousage.stubbing;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n import static org.junit.Assert.*;\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.*;\n import static org.mockito.util.ExtraMatchers.collectionContaining;\n \n-import java.util.*;\n+import java.util.Arrays;\n \n import org.junit.*;\n-import org.mockito.Mockito;\n+import org.mockito.exceptions.VerificationError;\n+import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n public class BasicStubbingTest {\n \n-    private DummyInterface mock;\n+    private IMethods mock;\n \n     @Before\n     public void setup() {\n-        mock = Mockito.mock(DummyInterface.class);\n-    }\n-    \n-    private interface DummyInterface {\n-        int getInt(String value);\n-        String getString(int argumentOne, String argumentTwo);\n-        List<String> getList();\n+        mock = mock(IMethods.class);\n     }\n     \n     @Test\n     public void shouldStubAllMethodsByDefault() throws Exception {\n-        assertEquals(0, mock.getInt(\"test\"));\n-        assertEquals(0, mock.getInt(\"testTwo\"));\n+        assertEquals(0, mock.intReturningMethod(1));\n+        assertEquals(0, mock.intReturningMethod(100));\n         \n-        assertNull(mock.getString(0, null));\n-        assertNull(mock.getString(100, null));\n+        assertNull(mock.objectReturningMethod(1));\n+        assertNull(mock.objectReturningMethod(100));\n         \n-        assertEquals(0, mock.getList().size());\n-        assertEquals(0, mock.getList().size());\n+        assertTrue(mock.listReturningMethod(1, 100).isEmpty());\n+        assertTrue(mock.listReturningMethod().isEmpty());\n     }\n     \n     @Test\n     public void shouldStubAndLetBeCalledAnyTimes() throws Exception {\n-        Mockito.stub(mock.getInt(\"14\")).andReturn(14);\n+        stub(mock.intReturningMethod(14)).andReturn(14);\n         \n-        assertThat(mock.getInt(\"14\"), equalTo(14));\n-        assertThat(mock.getInt(\"14\"), equalTo(14));\n+        assertEquals(14, mock.intReturningMethod(14));\n+        assertEquals(14, mock.intReturningMethod(14));\n         \n-        Mockito.stub(mock.getList()).andReturn(Arrays.asList(\"elementOne\", \"elementTwo\"));\n+        stub(mock.listReturningMethod()).andReturn(Arrays.asList(\"elementOne\", \"elementTwo\"));\n         \n-        assertThat(mock.getList(), collectionContaining(\"elementOne\", \"elementTwo\"));\n-        assertThat(mock.getList(), collectionContaining(\"elementOne\", \"elementTwo\"));\n+        assertThat(mock.listReturningMethod(), collectionContaining(\"elementOne\", \"elementTwo\"));\n+        assertThat(mock.listReturningMethod(), collectionContaining(\"elementOne\", \"elementTwo\"));\n         \n-        Mockito.stub(mock.getString(10, \"test\")).andReturn(\"test\");\n+        stub(mock.objectReturningMethod(10)).andReturn(\"test\");\n         \n-        assertThat(mock.getString(10, \"test\"), equalTo(\"test\"));\n-        assertThat(mock.getString(10, \"test\"), equalTo(\"test\"));\n+        assertEquals(\"test\", mock.objectReturningMethod(10));\n+        assertEquals(\"test\", mock.objectReturningMethod(10));\n     }\n     \n     @Test\n     public void shouldEvaluateLatestStubbingFirst() throws Exception {\n-        Mockito.stub(mock.getInt(Mockito.anyString())).andReturn(100);\n-        Mockito.stub(mock.getInt(\"200 please\")).andReturn(200);\n+        stub(mock.objectReturningMethod(isA(Integer.class))).andReturn(100);\n+        stub(mock.objectReturningMethod(200)).andReturn(200);\n         \n-        assertEquals(200, mock.getInt(\"200 please\"));\n-        assertEquals(100, mock.getInt(\"any\"));\n-        assertEquals(\"default behavior should return 0\", 0, mock.getInt(null));\n+        assertEquals(200, mock.objectReturningMethod(200));\n+        assertEquals(100, mock.objectReturningMethod(666));\n+        assertEquals(\"default behavior should return null\", null, mock.objectReturningMethod(\"blah\"));\n+    }\n+    \n+    @Test\n+    public void shouldStubbingWithThrowableFailVerification() {\n+        stub(mock.simpleMethod(\"one\")).andThrows(new RuntimeException());\n+        stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(\"two\");\n+        \n+        verifyZeroInteractions(mock);\n+        \n+        mock.simpleMethod(\"foo\");\n+        \n+        try {\n+            verify(mock).simpleMethod(\"one\");\n+            fail();\n+        } catch (VerificationError e) {}\n+        \n+        try {\n+            verify(mock).simpleMethod(\"two\");\n+            fail();\n+        } catch (VerificationError e) {}\n+        \n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (VerificationError e) {}\n     }\n }\n--- a/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java\n import java.util.*;\n \n import org.junit.*;\n-import org.mockito.exceptions.MockitoException;\n+import org.mockito.exceptions.*;\n \n @SuppressWarnings({\"serial\", \"unchecked\"})\n public class StubbingWithThrowablesTest {\n         } catch (ExceptionTwo e) {}\n     }\n     \n-    @Ignore\n     @Test\n-    public void shouldVerifyWhenStubbedWithThrowable() throws Exception {\n+    public void shouldStubbingWithThrowableBeVerifiable() {\n+        stub(mock.size()).andThrows(new RuntimeException());\n+        stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n         \n+        try {\n+            mock.size();\n+            fail();\n+        } catch (RuntimeException e) {}\n+        \n+        try {\n+            mock.clone();\n+            fail();\n+        } catch (RuntimeException e) {}\n+        \n+        verify(mock).size();\n+        verify(mock).clone();\n+        verifyNoMoreInteractions(mock);\n+    }\n+    \n+    @Test\n+    public void shouldStubbingWithThrowableFailVerification() {\n+        stub(mock.size()).andThrows(new RuntimeException());\n+        stubVoid(mock).toThrow(new RuntimeException()).on().clone();\n+        \n+        verifyZeroInteractions(mock);\n+        \n+        mock.add(\"test\");\n+        \n+        try {\n+            verify(mock).size();\n+            fail();\n+        } catch (VerificationError e) {}\n+        \n+        try {\n+            verify(mock).clone();\n+            fail();\n+        } catch (VerificationError e) {}\n+        \n+        try {\n+            verifyNoMoreInteractions(mock);\n+            fail();\n+        } catch (VerificationError e) {}\n     }\n     \n     private class ExceptionOne extends RuntimeException {};\n--- a/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java\n \n import java.util.*;\n \n-import org.junit.Test;\n+import org.junit.*;\n import org.mockito.exceptions.VerificationError;\n \n @SuppressWarnings(\"unchecked\")\n public class NoMoreInteractionsVerificationTest {\n \n+    private LinkedList mock;\n+    \n+    @Before\n+    public void setup() {\n+        mock = mock(LinkedList.class);\n+    }\n+\n     @Test\n     public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {\n-        List mock = mock(List.class);\n         stub(mock.add(\"one\")).andReturn(true);\n         stub(mock.add(\"two\")).andReturn(true);\n \n     \n     @Test\n     public void shouldVerifyWhenWantedNumberOfInvocationsUsed() throws Exception {\n-        List mock = mock(List.class);\n-\n         mock.add(\"one\");\n         mock.add(\"one\");\n         mock.add(\"one\");\n     \n     @Test\n     public void shouldVerifyNoInteractionsAsManyTimesAsYouWant() throws Exception {\n-        List mock = mock(List.class);\n-\n         verifyNoMoreInteractions(mock);\n         verifyNoMoreInteractions(mock);\n         \n     \n     @Test\n     public void shouldFailZeroInteractionsVerification() throws Exception {\n-        List mock = mock(List.class);\n-\n         mock.clear();\n         \n         try {\n             verifyZeroInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {\n-            //cool\n-        }\n+        } catch (VerificationError e) {}\n     }\n     \n     @Test\n     public void shouldFailNoMoreInteractionsVerification() throws Exception {\n-        List mock = mock(List.class);\n-\n         mock.clear();\n         \n         try {\n             verifyNoMoreInteractions(mock);\n             fail();\n-        } catch (VerificationError e) {\n-            //cool\n-        }\n+        } catch (VerificationError e) {}\n     }\n     \n     @Test\n         try {\n             verifyZeroInteractions(map);\n             fail();\n-        } catch (VerificationError e) {\n-            //cool\n-        }\n+        } catch (VerificationError e) {}\n     }\n }", "timestamp": 1196625977, "metainfo": ""}