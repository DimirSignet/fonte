{"sha": "e69d84032de5300c60b0081330ebd34664ea8114", "log": "Removed the MockitoSpy and MockitoMock interfaces. See issue 429.", "commit": "\n--- a/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n+++ b/src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java\n          * @return The marker if this is a Mockito proxy class, otherwise returns a void marker.\n          */\n         private String mockitoProxyClassMarker(Class<?> cl) {\n-            if (mockUtil.isMock(cl)) {\n+            if (AcrossJVMMockitoMockSerializable.class.isAssignableFrom(cl)) {\n                 return MOCKITO_PROXY_MARKER;\n             } else {\n                 return NOTHING;\n      *\n      * @see #enableSerializationAcrossJVM(org.mockito.mock.MockCreationSettings)\n      */\n-    public interface AcrossJVMMockitoMockSerializable {\n+    public static interface AcrossJVMMockitoMockSerializable {\n         public Object writeReplace() throws java.io.ObjectStreamException;\n     }\n }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.internal.debugging.VerboseMockInvocationLogger;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockNameImpl;\n-import org.mockito.internal.util.MockitoMock;\n-import org.mockito.internal.util.MockitoSpy;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n \n     private static Set<Class> prepareExtraInterfaces(CreationSettings settings) {\n         Set<Class> interfaces = new HashSet<Class>(settings.getExtraInterfaces());\n-        interfaces.add(MockitoMock.class);\n         if(settings.isSerializable()) {\n             interfaces.add(Serializable.class);\n-        }\n-        if (settings.getSpiedInstance() != null) {\n-            interfaces.add(MockitoSpy.class);\n         }\n         return interfaces;\n     }\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.mock.MockName;\n import org.mockito.plugins.MockMaker;\n-\n-import java.lang.reflect.Modifier;\n+\n+import java.lang.reflect.Modifier;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n \n     private static final MockMaker mockMaker = ClassPathLoader.getMockMaker();\n-\n-    public boolean isTypeMockable(Class<?> type) {\n-      return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n-    }\n+\n+    public boolean isTypeMockable(Class<?> type) {\n+      return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n+    }\n \n     public <T> T createMock(MockCreationSettings<T> settings) {\n         MockHandler mockHandler = new MockHandlerFactory().create(settings);\n         }\n \n         if (isMockitoMock(mock)) {\n-            return (InternalMockHandler) mockMaker.getHandler(mock);\n+            MockHandler handler = mockMaker.getHandler(mock);\n+            return (InternalMockHandler) handler;\n         } else {\n             throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());\n         }\n \n     public boolean isMock(Object mock) {\n         // double check to avoid classes that have the same interfaces, could be great to have a custom mockito field in the proxy instead of relying on instance fields\n-        return mock instanceof MockitoMock && isMockitoMock(mock);\n+        return isMockitoMock(mock);\n     }\n \n     public boolean isSpy(Object mock) {\n-        return mock instanceof MockitoSpy;\n-    }\n-\n-    public boolean isMock(Class mockClass) {\n-        return mockClass != null && MockitoMock.class.isAssignableFrom(mockClass);\n-    }\n-\n-    public boolean isSpy(Class mockClass) {\n-        return mockClass != null && MockitoSpy.class.isAssignableFrom(mockClass);\n+        return isMockitoMock(mock) && getMockSettings(mock).getSpiedInstance() != null;\n     }\n \n     private <T> boolean isMockitoMock(T mock) {\n--- a/test/org/mockito/internal/util/MockUtilTest.java\n+++ b/test/org/mockito/internal/util/MockUtilTest.java\n     public void should_validate_mock() {\n         assertFalse(mockUtil.isMock(\"i mock a mock\"));\n         assertTrue(mockUtil.isMock(Mockito.mock(List.class)));\n-        assertFalse(mockUtil.isMock((Class) null));\n-        assertFalse(mockUtil.isMock(String.class));\n-        assertTrue(mockUtil.isMock(Mockito.mock(List.class).getClass()));\n     }\n \n     @Test\n         assertFalse(mockUtil.isSpy(Mockito.mock(List.class)));\n         assertTrue(mockUtil.isSpy(Mockito.spy(new ArrayList())));\n         assertFalse(mockUtil.isSpy((Class) null));\n-        assertFalse(mockUtil.isSpy(String.class));\n-        assertFalse(mockUtil.isSpy(Mockito.mock(List.class).getClass()));\n-        assertTrue(mockUtil.isSpy(Mockito.spy(new ArrayList()).getClass()));\n     }\n \n     @Test", "timestamp": 1365345192, "metainfo": ""}