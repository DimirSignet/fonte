{"sha": "f2b938d32f111984dddb54e35d6243143691d1a9", "log": "Fixed issue 109 Unrooted tests no longer show up in Eclipse when running single test Thanks for the patch & great job!!!  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401826", "commit": "\n--- a/src/org/mockito/internal/runners/JUnit44RunnerImpl.java\n+++ b/src/org/mockito/internal/runners/JUnit44RunnerImpl.java\n import org.junit.internal.runners.JUnit4ClassRunner;\n import org.junit.runner.Description;\n import org.junit.runner.Runner;\n+import org.junit.runner.manipulation.Filter;\n+import org.junit.runner.manipulation.NoTestsRemainException;\n import org.junit.runner.notification.RunNotifier;\n import org.mockito.MockitoAnnotations;\n import org.mockito.internal.runners.util.FrameworkUsageValidator;\n @SuppressWarnings(\"deprecation\")\n public class JUnit44RunnerImpl implements RunnerImpl {\n \n-    Runner runner;\n+\tJUnit4ClassRunner runner;\n \n     public JUnit44RunnerImpl(Class<?> klass) throws InitializationError {\n         this.runner = new JUnit4ClassRunner(klass) {\n     public Description getDescription() {\n         return runner.getDescription();\n     }\n+\n+\tpublic void filter(Filter filter) throws NoTestsRemainException {\n+\t\trunner.filter(filter);\n+\t}\n }\n--- a/src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java\n+++ b/src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java\n package org.mockito.internal.runners;\n \n import org.junit.runner.Description;\n-import org.junit.runner.Runner;\n+import org.junit.runner.manipulation.Filter;\n+import org.junit.runner.manipulation.NoTestsRemainException;\n import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n import org.junit.runners.model.FrameworkMethod;\n \n public class JUnit45AndHigherRunnerImpl implements RunnerImpl {\n \n-    private Runner runner;\n+    private BlockJUnit4ClassRunner runner;\n \n     public JUnit45AndHigherRunnerImpl(Class<?> klass) throws InitializationError {\n         runner = new BlockJUnit4ClassRunner(klass) {\n     public Description getDescription() {\n         return runner.getDescription();\n     }\n+\n+\t@Override\n+\tpublic void filter(Filter filter) throws NoTestsRemainException {\n+\t\trunner.filter(filter);\n+\t}\n+\n+\t\n }\n--- a/src/org/mockito/internal/runners/RunnerImpl.java\n+++ b/src/org/mockito/internal/runners/RunnerImpl.java\n package org.mockito.internal.runners;\n \n import org.junit.runner.Description;\n+import org.junit.runner.manipulation.Filter;\n+import org.junit.runner.manipulation.Filterable;\n import org.junit.runner.notification.RunNotifier;\n \n /**\n  * I'm using this surrogate interface to hide internal Runner implementations.\n  * Surrogate cannot be used with &#064;RunWith therefore it is less likely clients will use interal runners.\n  */\n-public interface RunnerImpl {\n+public interface RunnerImpl extends Filterable{\n \n     void run(RunNotifier notifier);\n \n     Description getDescription();\n-\n+    \n }\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n \n import org.junit.runner.Description;\n import org.junit.runner.Runner;\n+import org.junit.runner.manipulation.Filter;\n+import org.junit.runner.manipulation.Filterable;\n+import org.junit.runner.manipulation.NoTestsRemainException;\n import org.junit.runner.notification.RunNotifier;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n  * }\n  * </pre>\n  */\n-public class MockitoJUnitRunner extends Runner {\n+public class MockitoJUnitRunner extends Runner implements Filterable {\n \n     private final RunnerImpl runner;\n \n     public Description getDescription() {\n         return runner.getDescription();\n     }\n+\n+\tpublic void filter(Filter filter) throws NoTestsRemainException {\n+        //filter is required because without it UnrootedTests show up in Eclipse\n+\t\trunner.filter(filter);\n+\t}\n }\n--- a/test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java\n import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.Description;\n+import org.junit.runner.manipulation.Filter;\n+import org.junit.runner.manipulation.NoTestsRemainException;\n import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.model.InitializationError;\n import org.mockito.Mock;\n \n         public void run(RunNotifier notifier) {}\n \n+\t\tpublic void filter(Filter filter) throws NoTestsRemainException {}\n+\n     }\n }\n--- /dev/null\n+++ b/test/org/mockitousage/junitrunner/Filters.java\n+package org.mockitousage.junitrunner;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.manipulation.Filter;\n+\n+public class Filters {\n+    public static Filter methodNameContains(final String substring) {\n+        return new Filter() {\n+            @Override\n+            public boolean shouldRun(Description description) {\n+                return description.getDisplayName().contains(substring);\n+            }\n+\n+            @Override\n+            public String describe() {\n+                return null;\n+            }\n+        };\n+    }\n+}\n--- a/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n+++ b/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n  */\n package org.mockitousage.junitrunner;\n \n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+import static org.mockitousage.junitrunner.Filters.methodNameContains;\n \n import java.util.List;\n \n import org.junit.Test;\n+import org.junit.runner.Description;\n import org.junit.runner.RunWith;\n+import org.junit.runner.manipulation.Filter;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockitoutil.TestBase;\n \n @RunWith(MockitoJUnit44Runner.class)\n-@SuppressWarnings({\"unchecked\", \"deprecation\"})\n+@SuppressWarnings( { \"unchecked\", \"deprecation\" })\n public class JUnit44RunnerTest extends TestBase {\n-    \n-    @Mock private List list;\n-    \n-    @Test\n-    public void shouldInitMocksUsingRunner() {\n-        list.add(\"test\");\n-        verify(list).add(\"test\");\n+\n+\t@Mock\n+\tprivate List list;\n+\n+\t@Test\n+\tpublic void shouldInitMocksUsingRunner() {\n+\t\tlist.add(\"test\");\n+\t\tverify(list).add(\"test\");\n+\t}\n+\t\n+\t@Test\n+    public void shouldFilterTestMethodsCorrectly() throws Exception{\n+\t\tMockitoJUnit44Runner runner = new MockitoJUnit44Runner(this.getClass());\n+    \t\n+    \trunner.filter(methodNameContains(\"shouldInitMocksUsingRunner\"));\n+    \t\n+    \tassertEquals(1, runner.testCount());\n     }\n }\n--- a/test/org/mockitousage/junitrunner/JUnit45RunnerTest.java\n+++ b/test/org/mockitousage/junitrunner/JUnit45RunnerTest.java\n  */\n package org.mockitousage.junitrunner;\n \n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+import static org.mockitousage.junitrunner.Filters.methodNameContains;\n \n import java.util.List;\n \n         list.add(\"test\");\n         verify(list).add(\"test\");\n     }\n+    \n+    @Test\n+    public void shouldFilterTestMethodsCorrectly() throws Exception{\n+    \tMockitoJUnitRunner runner = new MockitoJUnitRunner(this.getClass());\n+    \t\n+    \trunner.filter(methodNameContains(\"shouldInitMocksUsingRunner\"));\n+    \t\n+    \tassertEquals(1, runner.testCount());\n+    }\n }", "timestamp": 1264026816, "metainfo": ""}