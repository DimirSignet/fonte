{"sha": "1dfc3e3a2cd42a1b890596038b9c1fdd8f9391c2", "log": "Adding more appropriate .equals() method to DelegatingMethod", "commit": "\n--- a/src/org/mockito/internal/creation/DelegatingMethod.java\n+++ b/src/org/mockito/internal/creation/DelegatingMethod.java\n  */\n package org.mockito.internal.creation;\n \n+import org.mockito.internal.invocation.MockitoMethod;\n+\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n-\n-import org.mockito.internal.invocation.MockitoMethod;\n \n public class DelegatingMethod implements MockitoMethod {\n \n     public boolean isAbstract() {\n         return (method.getModifiers() & Modifier.ABSTRACT) != 0;\n     }\n-    \n+\n+    /**\n+     * @return True if the input object is a DelegatingMethod which has an internal Method which is equal to the internal Method of this DelegatingMethod,\n+     * or if the input object is a Method which is equal to the internal Method of this DelegatingMethod.\n+     */\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof DelegatingMethod)) {\n+            if (o instanceof Method) {\n+                if (method != null ? !method.equals(o) : o != null) {\n+                    return false;\n+                }\n+                return true;\n+            }\n+        }\n+\n+        DelegatingMethod that = (DelegatingMethod) o;\n+\n+        if (method != null ? !method.equals(that.method) : that.method != null) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     @Override\n     public int hashCode() {\n-        return 1;\n-    }\n-    \n-    @Override\n-    public boolean equals(Object obj) {\n-        return method.equals(obj);\n+        return method != null ? method.hashCode() : 0;\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/creation/DelegatingMethodTest.java\n+package org.mockito.internal.creation;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+import java.lang.reflect.Method;\n+\n+public class DelegatingMethodTest extends TestBase {\n+\n+    private Method someMethod, otherMethod;\n+    private DelegatingMethod delegatingMethod;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        someMethod = Something.class.getMethod(\"someMethod\", Object.class);\n+        otherMethod = Something.class.getMethod(\"otherMethod\", Object.class);\n+        delegatingMethod = new DelegatingMethod(someMethod);\n+    }\n+\n+    @Test\n+    public void equals_should_return_false_when_not_equal() throws Exception {\n+        DelegatingMethod notEqual = new DelegatingMethod(otherMethod);\n+        assertFalse(delegatingMethod.equals(notEqual));\n+    }\n+\n+    @Test\n+    public void equals_should_return_true_when_equal() throws Exception {\n+        DelegatingMethod equal = new DelegatingMethod(someMethod);\n+        assertTrue(delegatingMethod.equals(equal));\n+    }\n+\n+    @Test\n+    public void equals_should_return_true_when_self() throws Exception {\n+        assertTrue(delegatingMethod.equals(delegatingMethod));\n+    }\n+\n+    @Test\n+    public void equals_should_return_false_when_not_equal_to_method() throws Exception {\n+        assertFalse(delegatingMethod.equals(otherMethod));\n+    }\n+\n+    @Test\n+    public void equals_should_return_true_when_equal_to_method() throws Exception {\n+        assertTrue(delegatingMethod.equals(someMethod));\n+    }\n+\n+    private interface Something {\n+\n+        public Object someMethod(Object param);\n+\n+        public Object otherMethod(Object param);\n+    }\n+}", "timestamp": 1411729162, "metainfo": ""}