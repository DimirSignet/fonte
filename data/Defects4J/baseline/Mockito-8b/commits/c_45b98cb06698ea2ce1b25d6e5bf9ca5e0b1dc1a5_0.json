{"sha": "45b98cb06698ea2ce1b25d6e5bf9ca5e0b1dc1a5", "log": "sorted out argument matchers javadoc and order  --HG-- rename : src/org/mockito/CrazyMatchers.java => src/org/mockito/AdditionalMatchers.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40217", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/AdditionalMatchers.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.mockito.internal.matchers.ArrayEquals;\n+import org.mockito.internal.matchers.CompareEqual;\n+import org.mockito.internal.matchers.EqualsWithDelta;\n+import org.mockito.internal.matchers.Find;\n+import org.mockito.internal.matchers.GreaterOrEqual;\n+import org.mockito.internal.matchers.GreaterThan;\n+import org.mockito.internal.matchers.LessOrEqual;\n+import org.mockito.internal.matchers.LessThan;\n+import org.mockito.internal.progress.LastArguments;\n+\n+/**\n+ * Very rarely used matchers are kept here\n+ */\n+public class AdditionalMatchers {\n+\n+    /**\n+     * argument greater than or equal the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T geq(Comparable<T> value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * byte argument greater than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte geq(byte value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * double argument greater than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double geq(double value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * float argument greater than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float geq(float value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * int argument greater than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int geq(int value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * long argument greater than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long geq(long value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * short argument greater than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short geq(short value) {\n+        LastArguments.instance().reportMatcher(new GreaterOrEqual<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * comparable argument less than or equal the given value details.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T leq(Comparable<T> value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * byte argument less than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte leq(byte value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * double argument less than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double leq(double value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * float argument less than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float leq(float value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * int argument less than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int leq(int value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * long argument less than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long leq(long value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * short argument less than or equal to the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short leq(short value) {\n+        LastArguments.instance().reportMatcher(new LessOrEqual<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * comparable argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T gt(Comparable<T> value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * byte argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte gt(byte value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * double argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double gt(double value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * float argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float gt(float value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * int argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int gt(int value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * long argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long gt(long value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * short argument greater than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short gt(short value) {\n+        LastArguments.instance().reportMatcher(new GreaterThan<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * comparable argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T lt(Comparable<T> value) {\n+        LastArguments.instance().reportMatcher(new LessThan<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * byte argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static byte lt(byte value) {\n+        LastArguments.instance().reportMatcher(new LessThan<Byte>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * double argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static double lt(double value) {\n+        LastArguments.instance().reportMatcher(new LessThan<Double>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * float argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static float lt(float value) {\n+        LastArguments.instance().reportMatcher(new LessThan<Float>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * int argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static int lt(int value) {\n+        LastArguments.instance().reportMatcher(new LessThan<Integer>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * long argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static long lt(long value) {\n+        LastArguments.instance().reportMatcher(new LessThan<Long>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * short argument less than the given value.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>0</code>.\n+     */\n+    public static short lt(short value) {\n+        LastArguments.instance().reportMatcher(new LessThan<Short>(value));\n+        return 0;\n+    }\n+\n+    /**\n+     * comparable argument equals to the given value according to their\n+     * compareTo method.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {\n+        LastArguments.instance().reportMatcher(new CompareEqual<T>(value));\n+        return null;\n+    }\n+\n+    /**\n+     * string that contains a substring that matches the given regular\n+     * expression.\n+     * \n+     * @param regex\n+     *            the regular expression.\n+     * @return <code>null</code>.\n+     */\n+    public static String find(String regex) {\n+        LastArguments.instance().reportMatcher(new Find(regex));\n+        return null;\n+    }\n+\n+    /**\n+     * Object array that is equal to the given array, i.e. it has to have the\n+     * same type, length, and each element has to be equal.\n+     * \n+     * @param <T>\n+     *            the type of the array, it is passed through to prevent casts.\n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T[] aryEq(T[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * short array that is equal to the given array, i.e. it has to have the\n+     * same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static short[] aryEq(short[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * long array that is equal to the given array, i.e. it has to have the same\n+     * length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static long[] aryEq(long[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * int array that is equal to the given array, i.e. it has to have the same\n+     * length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static int[] aryEq(int[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * float array that is equal to the given array, i.e. it has to have the\n+     * same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static float[] aryEq(float[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * double array that is equal to the given array, i.e. it has to have the\n+     * same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static double[] aryEq(double[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * char array that is equal to the given array, i.e. it has to have the same\n+     * length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static char[] aryEq(char[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * byte array that is equal to the given array, i.e. it has to have the same\n+     * length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static byte[] aryEq(byte[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * boolean array that is equal to the given array, i.e. it has to have the\n+     * same length, and each element has to be equal.\n+     * \n+     * @param value\n+     *            the given array.\n+     * @return <code>null</code>.\n+     */\n+    public static boolean[] aryEq(boolean[] value) {\n+        LastArguments.instance().reportMatcher(new ArrayEquals(value));\n+        return null;\n+    }\n+\n+    /**\n+     * boolean that matches both given matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean and(boolean first, boolean second) {\n+        LastArguments.instance().reportAnd(2);\n+        return false;\n+    }\n+\n+    /**\n+     * byte that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static byte and(byte first, byte second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * char that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static char and(char first, char second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * double that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static double and(double first, double second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * float that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static float and(float first, float second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * int that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static int and(int first, int second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * long that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static long and(long first, long second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * short that matches both given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static short and(short first, short second) {\n+        LastArguments.instance().reportAnd(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Object that matches both given argument matchers.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T and(T first, T second) {\n+        LastArguments.instance().reportAnd(2);\n+        return null;\n+    }\n+\n+    /**\n+     * boolean that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean or(boolean first, boolean second) {\n+        LastArguments.instance().reportOr(2);\n+        return false;\n+    }\n+\n+    /**\n+     * Object that matches any of the given argument matchers.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T or(T first, T second) {\n+        LastArguments.instance().reportOr(2);\n+        return null;\n+    }\n+\n+    /**\n+     * short that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static short or(short first, short second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * long that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static long or(long first, long second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * int that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static int or(int first, int second) {\n+        LastArguments.instance().reportOr(2);\n+        return first;\n+    }\n+\n+    /**\n+     * float that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static float or(float first, float second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * double that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static double or(double first, double second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * char that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static char or(char first, char second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * byte that matches any of the given argument matchers.\n+     * \n+     * @param first\n+     *            placeholder for the first argument matcher.\n+     * @param second\n+     *            placeholder for the second argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static byte or(byte first, byte second) {\n+        LastArguments.instance().reportOr(2);\n+        return 0;\n+    }\n+\n+    /**\n+     * Object that does not match the given argument matcher.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T not(T first) {\n+        LastArguments.instance().reportNot();\n+        return null;\n+    }\n+\n+    /**\n+     * short that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static short not(short first) {\n+        LastArguments.instance().reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * int that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static int not(int first) {\n+        LastArguments.instance().reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * long that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static long not(long first) {\n+        LastArguments.instance().reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * float that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static float not(float first) {\n+        LastArguments.instance().reportNot();\n+        return first;\n+    }\n+\n+    /**\n+     * double that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static double not(double first) {\n+        LastArguments.instance().reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * char that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static char not(char first) {\n+        LastArguments.instance().reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * boolean that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>false</code>.\n+     */\n+    public static boolean not(boolean first) {\n+        LastArguments.instance().reportNot();\n+        return false;\n+    }\n+\n+    /**\n+     * byte that does not match the given argument matcher.\n+     * \n+     * @param first\n+     *            placeholder for the argument matcher.\n+     * @return <code>0</code>.\n+     */\n+    public static byte not(byte first) {\n+        LastArguments.instance().reportNot();\n+        return 0;\n+    }\n+\n+    /**\n+     * double that has an absolute difference to the given value that is less\n+     * than the given delta details.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param delta\n+     *            the given delta.\n+     * @return <code>0</code>.\n+     */\n+    public static double eq(double value, double delta) {\n+        LastArguments.instance().reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n+    }\n+\n+    /**\n+     * float that has an absolute difference to the given value that is less\n+     * than the given delta details.\n+     * \n+     * @param value\n+     *            the given value.\n+     * @param delta\n+     *            the given delta.\n+     * @return <code>0</code>.\n+     */\n+    public static float eq(float value, float delta) {\n+        LastArguments.instance().reportMatcher(new EqualsWithDelta(value, delta));\n+        return 0;\n+    }\n+}\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n package org.mockito;\n \n import org.mockito.internal.matchers.Any;\n+import org.mockito.internal.matchers.Contains;\n+import org.mockito.internal.matchers.EndsWith;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.EqualsWithDelta;\n import org.mockito.internal.matchers.InstanceOf;\n import org.mockito.internal.matchers.Matches;\n import org.mockito.internal.matchers.NotNull;\n import org.mockito.internal.matchers.Null;\n+import org.mockito.internal.matchers.Same;\n+import org.mockito.internal.matchers.StartsWith;\n import org.mockito.internal.progress.LastArguments;\n \n public class Matchers {\n     }\n     \n     /**\n-     * Argument should be any String.\n+     * Any String argument.\n      * \n      * @return <code>null</code>.\n      */\n         LastArguments.instance().reportMatcher(new Equals(value));\n         return null;\n     }\n+    \n+    /**\n+     * Expects an Object that is the same as the given value. For details, see\n+     * the documentation.\n+     * \n+     * @param <T>\n+     *            the type of the object, it is passed through to prevent casts.\n+     * @param value\n+     *            the given value.\n+     * @return <code>null</code>.\n+     */\n+    public static <T> T same(T value) {\n+        LastArguments.instance().reportMatcher(new Same(value));\n+        return null;\n+    }\n \n     /**\n      * Expects null.\n         LastArguments.instance().reportMatcher(NotNull.NOT_NULL);\n         return null;\n     }\n+    \n+    /**\n+     * string that contains the given substring.\n+     * \n+     * @param substring\n+     *            the substring.\n+     * @return <code>null</code>.\n+     */\n+    public static String contains(String substring) {\n+        LastArguments.instance().reportMatcher(new Contains(substring));\n+        return null;\n+    }\n \n     /**\n      * Expects a string that matches the given regular expression. For details,\n         LastArguments.instance().reportMatcher(new Matches(regex));\n         return null;\n     }\n-\n-    /**\n-     * Expects a double that has an absolute difference to the given value that\n-     * is less than the given delta. For details, see the EasyMock\n+    \n+    /**\n+     * Expects a string that ends with the given suffix. For details, see the\n      * documentation.\n      * \n-     * @param value\n-     *            the given value.\n-     * @param delta\n-     *            the given delta.\n-     * @return <code>0</code>.\n-     */\n-    public static double eq(double value, double delta) {\n-        LastArguments.instance().reportMatcher(new EqualsWithDelta(value, delta));\n-        return 0;\n-    }\n-\n-    /**\n-     * Expects a float that has an absolute difference to the given value that\n-     * is less than the given delta. For details, see the EasyMock\n+     * @param suffix\n+     *            the suffix.\n+     * @return <code>null</code>.\n+     */\n+    public static String endsWith(String suffix) {\n+        LastArguments.instance().reportMatcher(new EndsWith(suffix));\n+        return null;\n+    }\n+\n+    /**\n+     * Expects a string that starts with the given prefix. For details, see the\n      * documentation.\n      * \n-     * @param value\n-     *            the given value.\n-     * @param delta\n-     *            the given delta.\n-     * @return <code>0</code>.\n-     */\n-    public static float eq(float value, float delta) {\n-        LastArguments.instance().reportMatcher(new EqualsWithDelta(value, delta));\n-        return 0;\n+     * @param prefix\n+     *            the prefix.\n+     * @return <code>null</code>.\n+     */\n+    public static String startsWith(String prefix) {\n+        LastArguments.instance().reportMatcher(new StartsWith(prefix));\n+        return null;\n     }\n }\n--- a/test/org/mockito/internal/invocation/InvocationsAnalyzerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsAnalyzerTest.java\n  */\n package org.mockito.internal.invocation;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n \n import java.util.Arrays;\n--- a/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n+++ b/test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java\n  */\n package org.mockitousage.binding;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.fail;\n-import static org.mockito.Mockito.createStrictOrderVerifier;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.util.ExtraMatchers.causeMessageContains;\n-import static org.mockito.util.ExtraMatchers.messageContains;\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.util.ExtraMatchers.*;\n \n import org.junit.Test;\n-import org.mockito.CrazyMatchers;\n import org.mockito.RequiresValidState;\n import org.mockito.Strictly;\n import org.mockito.exceptions.verification.VerificationError;\n         setMockWithDowncast(sub);\n         say(\"Hello world\");\n         try {\n-            verify(sub).say(CrazyMatchers.contains(\"world\"));\n+            verify(sub).say(contains(\"world\"));\n             fail();\n         } catch (VerificationError e) {\n             assertThat(e, messageContains(\"Sub.say(class java.lang.String)\"));\n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.CrazyMatchers;\n+import org.mockito.AdditionalMatchers;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n import org.mockito.StateResetter;\n \n     @Test\n     public void shouldScreamWhenMatchersAreInvalid() {\n-        mock.simpleMethod(CrazyMatchers.not(eq(\"asd\")));\n+        mock.simpleMethod(AdditionalMatchers.not(eq(\"asd\")));\n         try {\n-            mock.simpleMethod(CrazyMatchers.not(\"jkl\"));\n+            mock.simpleMethod(AdditionalMatchers.not(\"jkl\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n             assertEquals(\n         }\n \n         try {\n-            mock.simpleMethod(CrazyMatchers.or(eq(\"jkl\"), \"asd\"));\n+            mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n             assertEquals(\n--- a/test/org/mockitousage/matchers/MatchersTest.java\n+++ b/test/org/mockitousage/matchers/MatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.fail;\n-import static org.mockito.CrazyMatchers.and;\n-import static org.mockito.CrazyMatchers.aryEq;\n-import static org.mockito.CrazyMatchers.cmpEq;\n-import static org.mockito.CrazyMatchers.contains;\n-import static org.mockito.CrazyMatchers.endsWith;\n-import static org.mockito.CrazyMatchers.find;\n-import static org.mockito.CrazyMatchers.geq;\n-import static org.mockito.CrazyMatchers.gt;\n-import static org.mockito.CrazyMatchers.leq;\n-import static org.mockito.CrazyMatchers.lt;\n-import static org.mockito.CrazyMatchers.not;\n-import static org.mockito.CrazyMatchers.or;\n-import static org.mockito.CrazyMatchers.same;\n-import static org.mockito.CrazyMatchers.startsWith;\n-import static org.mockito.Matchers.anyBoolean;\n-import static org.mockito.Matchers.anyByte;\n-import static org.mockito.Matchers.anyChar;\n-import static org.mockito.Matchers.anyDouble;\n-import static org.mockito.Matchers.anyFloat;\n-import static org.mockito.Matchers.anyInt;\n-import static org.mockito.Matchers.anyLong;\n-import static org.mockito.Matchers.anyObject;\n-import static org.mockito.Matchers.anyShort;\n-import static org.mockito.Matchers.anyString;\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Matchers.isA;\n-import static org.mockito.Matchers.isNull;\n-import static org.mockito.Matchers.matches;\n-import static org.mockito.Matchers.notNull;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.stub;\n-import static org.mockito.Mockito.verify;\n+import static org.junit.Assert.*;\n+import static org.mockito.AdditionalMatchers.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n \n import java.math.BigDecimal;\n import java.util.HashMap;\n         assertEquals(null, mock.oneArg(\"aaaaa\"));\n \n         assertEquals(\"9\", mock.oneArg(Object.class));\n-\n-    }\n-\n+    }\n+    \n     @Test\n     public void orOverloaded() {\n         stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(\"0\");\n--- a/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-import static org.mockito.CrazyMatchers.startsWith;\n-import static org.mockito.Matchers.anyInt;\n-import static org.mockito.Matchers.anyString;\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.stub;\n-import static org.mockito.Mockito.stubVoid;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n \n import org.junit.Before;\n import org.junit.Test;\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.fail;\n-import static org.mockito.CrazyMatchers.aryEq;\n+import static org.mockito.AdditionalMatchers.aryEq;\n import static org.mockito.Matchers.anyInt;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Matchers.matches;\n--- a/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n  */\n package org.mockitousage.verification;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.fail;\n-import static org.mockito.CrazyMatchers.and;\n-import static org.mockito.CrazyMatchers.contains;\n-import static org.mockito.CrazyMatchers.geq;\n-import static org.mockito.CrazyMatchers.leq;\n-import static org.mockito.Matchers.isA;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n+import static org.junit.Assert.*;\n+import static org.mockito.AdditionalMatchers.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.CrazyMatchers;\n import org.mockito.Mockito;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.verification.VerificationError;\n         mock.oneArg(one);\n         mock.oneArg(two);\n         \n-        verify(mock).oneArg(CrazyMatchers.same(one));\n+        verify(mock).oneArg(same(one));\n         verify(mock, times(2)).oneArg(two);\n         \n         try {\n-            verify(mock).oneArg(CrazyMatchers.same(three));\n+            verify(mock).oneArg(same(three));\n             fail();\n         } catch (VerificationError e) {}\n     }  ", "timestamp": 1197748005, "metainfo": ""}