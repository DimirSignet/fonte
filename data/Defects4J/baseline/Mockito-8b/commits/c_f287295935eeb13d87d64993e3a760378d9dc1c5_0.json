{"sha": "f287295935eeb13d87d64993e3a760378d9dc1c5", "log": "In order to fix issue 134. Location should never break in case there's something wrong with stack traces (for example: filter returns empty stack trace).  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401634", "commit": "\n--- a/src/org/mockito/internal/debugging/Location.java\n+++ b/src/org/mockito/internal/debugging/Location.java\n \n public class Location  {\n \n-    private final StackTraceElement firstTraceElement;\n+    private final String where;\n \n     public Location() {\n+        this(new StackTraceFilter());\n+    }\n+\n+    public Location(StackTraceFilter filter) {\n         StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-        StackTraceFilter filter = new StackTraceFilter();\n-        this.firstTraceElement = filter.filter(stackTrace, false)[0];\n+        StackTraceElement[] filtered = filter.filter(stackTrace, false);\n+        if (filtered.length == 0) {\n+            where = \"-> at <<unknown line>>\";   \n+        } else {\n+            where = \"-> at \" + filtered[0].toString();\n+        }\n     }\n \n     @Override\n     public String toString() {\n-        return \"-> at \" + this.firstTraceElement.toString();\n+        return where;\n     }\n }\n--- a/test/org/mockitousage/internal/debugging/LocationTest.java\n+++ b/test/org/mockitousage/internal/debugging/LocationTest.java\n \n import org.junit.Test;\n import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.exceptions.base.StackTraceFilter;\n import org.mockitoutil.TestBase;\n \n public class LocationTest extends TestBase {\n     public void shouldLocationNotContainGetStackTraceMethod() {\n         assertContains(\"shouldLocationNotContainGetStackTraceMethod\", new Location().toString());\n     }\n+\n+    @Test\n+    public void shouldBeSafeInCaseForSomeReasonFilteredStackTraceIsEmpty() {\n+        //given\n+        StackTraceFilter filterReturningEmptyArray = new StackTraceFilter() {\n+            @Override\n+            public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {\n+                return new StackTraceElement[0];\n+            }\n+        };\n+\n+        //when\n+        String loc = new Location(filterReturningEmptyArray).toString();\n+\n+        //then\n+        assertEquals(\"-> at <<unknown line>>\", loc);\n+    }\n }", "timestamp": 1256760525, "metainfo": ""}