{"sha": "46205bb3deb807f945b2c361989493ce648211a5", "log": "got rid of some duplication  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401484", "commit": "\n--- a/test/org/mockito/internal/matchers/EqualsTest.java\n+++ b/test/org/mockito/internal/matchers/EqualsTest.java\n  */\n package org.mockito.internal.matchers;\n \n-import org.hamcrest.SelfDescribing;\n-import org.hamcrest.StringDescription;\n import org.junit.Test;\n import org.mockitoutil.TestBase;\n \n         assertTrue(equals.typeMatches(10));\n         assertFalse(equals.typeMatches(10L));\n     }\n-    \n-    private String describe(SelfDescribing m) {\n-        StringDescription desc = new StringDescription();\n-        m.describeTo(desc);\n-        String descStr = desc.toString();\n-        return descStr;\n-    }\n }\n--- a/test/org/mockito/internal/matchers/LocalizedMatcherTest.java\n+++ b/test/org/mockito/internal/matchers/LocalizedMatcherTest.java\n package org.mockito.internal.matchers;\n \n import org.hamcrest.Matcher;\n-import org.hamcrest.StringDescription;\n import org.junit.Test;\n import org.mockitoutil.TestBase;\n \n         LocalizedMatcher m = new LocalizedMatcher((Matcher) equals10);\n         \n         //then\n-        //TODO: find usages of StringDescription and use static method\n-        assertEquals(\"(Integer) 10\", StringDescription.toString(m.withExtraTypeInfo()));\n+        assertEquals(\"(Integer) 10\", describe(m.withExtraTypeInfo()));\n     }\n     \n     @Test\n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n \n import java.math.BigDecimal;\n \n-import org.hamcrest.Description;\n-import org.hamcrest.StringDescription;\n import org.junit.Test;\n import org.mockito.internal.matchers.CompareEqual;\n import org.mockito.internal.matchers.CompareTo;\n         assertEquals(equals, compareTo.matches(\"b\"));\n         assertEquals(higher, compareTo.matches(\"c\"));\n \n-        Description d = new StringDescription();\n-        compareTo.describeTo(d);\n-        assertEquals(name + \"(b)\", d.toString());\n+        assertEquals(name + \"(b)\", describe(compareTo));\n     }\n }\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n-import org.hamcrest.StringDescription;\n-import org.junit.Before;\n import org.junit.Test;\n import org.mockito.internal.matchers.And;\n import org.mockito.internal.matchers.Any;\n \n @SuppressWarnings(\"unchecked\")\n public class MatchersToStringTest extends TestBase {\n-    private Description description;\n-\n-    @Before\n-    public void setup() {\n-        description = new StringDescription();\n-    }\n \n     @Test\n     public void sameToStringWithString() {\n-        new Same(\"X\").describeTo(description);\n-        assertEquals(\"same(\\\"X\\\")\", description.toString());\n+        assertEquals(\"same(\\\"X\\\")\", describe(new Same(\"X\")));\n \n     }\n \n     @Test\n     public void nullToString() {\n-        Null.NULL.describeTo(description);\n-        assertEquals(\"isNull()\", description.toString());\n+        assertEquals(\"isNull()\", describe(Null.NULL));\n     }\n \n     @Test\n     public void notNullToString() {\n-        NotNull.NOT_NULL.describeTo(description);\n-        assertEquals(\"notNull()\", description.toString());\n+        assertEquals(\"notNull()\", describe(NotNull.NOT_NULL));\n     }\n \n     @Test\n     public void anyToString() {\n-        Any.ANY.describeTo(description);\n-        assertEquals(\"<any>\", description.toString());\n+        assertEquals(\"<any>\", describe(Any.ANY));\n     }\n \n     @Test\n     public void sameToStringWithChar() {\n-        new Same('x').describeTo(description);\n-        assertEquals(\"same('x')\", description.toString());\n+        assertEquals(\"same('x')\", describe(new Same('x')));\n     }\n \n     @Test\n                 return \"X\";\n             }\n         };\n-        new Same(o).describeTo(description);\n-        assertEquals(\"same(X)\", description.toString());\n+        assertEquals(\"same(X)\", describe(new Same(o)));\n     }\n \n     @Test\n     public void equalsToStringWithString() {\n-        new Equals(\"X\").describeTo(description);\n-        assertEquals(\"\\\"X\\\"\", description.toString());\n+        assertEquals(\"\\\"X\\\"\", describe(new Equals(\"X\")));\n \n     }\n \n     @Test\n     public void equalsToStringWithChar() {\n-        new Equals('x').describeTo(description);\n-        assertEquals(\"'x'\", description.toString());\n+        assertEquals(\"'x'\", describe(new Equals('x')));\n     }\n \n     @Test\n                 return \"X\";\n             }\n         };\n-        new Equals(o).describeTo(description);\n-        assertEquals(\"X\", description.toString());\n+        assertEquals(\"X\", describe(new Equals(o)));\n     }\n \n     @Test\n         List<Matcher> matchers = new ArrayList<Matcher>();\n         matchers.add(new Equals(1));\n         matchers.add(new Equals(2));\n-        new Or(matchers).describeTo(description);\n-        assertEquals(\"or(1, 2)\", description.toString());\n+        assertEquals(\"or(1, 2)\", describe(new Or(matchers)));\n     }\n \n     @Test\n     public void notToString() {\n-        new Not(new Equals(1)).describeTo(description);\n-        assertEquals(\"not(1)\", description.toString());\n+        assertEquals(\"not(1)\", describe(new Not(new Equals(1))));\n     }\n \n     @Test\n         List<Matcher> matchers = new ArrayList<Matcher>();\n         matchers.add(new Equals(1));\n         matchers.add(new Equals(2));\n-        new And(matchers).describeTo(description);\n-        assertEquals(\"and(1, 2)\", description.toString());\n+        assertEquals(\"and(1, 2)\", describe(new And(matchers)));\n     }\n \n     @Test\n     public void startsWithToString() {\n-        new StartsWith(\"AB\").describeTo(description);\n-        assertEquals(\"startsWith(\\\"AB\\\")\", description.toString());\n+        assertEquals(\"startsWith(\\\"AB\\\")\", describe(new StartsWith(\"AB\")));\n     }\n \n     @Test\n     public void endsWithToString() {\n-        new EndsWith(\"AB\").describeTo(description);\n-        assertEquals(\"endsWith(\\\"AB\\\")\", description.toString());\n+        assertEquals(\"endsWith(\\\"AB\\\")\", describe(new EndsWith(\"AB\")));\n     }\n \n     @Test\n     public void containsToString() {\n-        new Contains(\"AB\").describeTo(description);\n-        assertEquals(\"contains(\\\"AB\\\")\", description.toString());\n+        assertEquals(\"contains(\\\"AB\\\")\", describe(new Contains(\"AB\")));\n     }\n \n     @Test\n     public void findToString() {\n-        new Find(\"\\\\s+\").describeTo(description);\n-        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", description.toString());\n+        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", describe(new Find(\"\\\\s+\")));\n     }\n \n     @Test\n     public void matchesToString() {\n-        new Matches(\"\\\\s+\").describeTo(description);\n-        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", description.toString());\n+        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", describe(new Matches(\"\\\\s+\")));\n     }\n \n }\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n import junit.framework.Assert;\n \n import org.hamcrest.Matcher;\n+import org.hamcrest.SelfDescribing;\n+import org.hamcrest.StringDescription;\n import org.junit.After;\n import org.junit.Before;\n import org.mockito.MockitoAnnotations;\n         return new Invocation(new Object(), type.getMethod(methodName,\n                 new Class[0]), new Object[0], 1, realMethod);\n     }\n+\n+    protected static String describe(SelfDescribing m) {\n+        return StringDescription.toString(m);\n+    }\n }", "timestamp": 1244409277, "metainfo": ""}