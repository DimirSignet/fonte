{"sha": "419bdfb4ecbbbd76ee888d3b10179ba24c61ddff", "log": "Fixed warnings and stuff  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401866", "commit": "\n--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n  * <p/>\n  * See {@link MockitoAnnotations}\n  */\n+@SuppressWarnings(\"deprecation\")\n public class DefaultAnnotationEngine implements AnnotationEngine {\n \n     /* (non-Javadoc)\n     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)\n     */\n-    @SuppressWarnings(\"deprecation\")\n     public Object createMockFor(Annotation annotation, Field field) {\n         if (annotation instanceof Mock) {\n             return processAnnotationOn((Mock) annotation, field);\n         mockSettings.defaultAnswer(annotation.answer().get());\n         return Mockito.mock(field.getType(), mockSettings);\n     }\n-\n+    \n     private Object processAnnotationOn(org.mockito.MockitoAnnotations.Mock annotation, Field field) {\n         return Mockito.mock(field.getType(), field.getName());\n     }\n--- a/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n         Field[] fields = clazz.getDeclaredFields();\n         for (Field field : fields) {\n             if (null != field.getAnnotation(InjectMock.class)) {\n-                InjectMock injectMockAnnotation = (InjectMock) field.getAnnotation(InjectMock.class);\n                 testedFields.add(field);\n             }\n         }\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n import org.mockito.internal.util.MockName;\n import org.mockito.stubbing.Answer;\n \n+@SuppressWarnings(\"unchecked\")\n public class MockSettingsImpl implements MockSettings {\n \n     private static final long serialVersionUID = 4475297236197939568L;\n         return this;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public MockSettings defaultAnswer(Answer defaultAnswer) {\n         this.defaultAnswer = defaultAnswer;\n         return this;\n     public boolean isSerializable() {\n         return serializable;\n     }\n-\n+    \n     public void initiateMockName(Class classToMock) {\n         mockName = new MockName(name, classToMock);\n     }\n--- a/src/org/mockito/internal/debugging/WarningsFinder.java\n+++ b/src/org/mockito/internal/debugging/WarningsFinder.java\n import java.util.LinkedList;\n import java.util.List;\n \n+@SuppressWarnings(\"unchecked\")\n public class WarningsFinder {\n     private final List<Invocation> baseUnusedStubs;\n     private final List<InvocationMatcher> baseAllInvocations;\n         this.baseUnusedStubs = unusedStubs;\n         this.baseAllInvocations = allInvocations;\n     }\n-\n+    \n     public void find(FindingsListener findingsListener) {\n         List<Invocation> unusedStubs = new LinkedList(this.baseUnusedStubs);\n         List<InvocationMatcher> allInvocations = new LinkedList(this.baseAllInvocations);\n--- a/src/org/mockito/internal/exceptions/ExceptionIncludingMockitoWarnings.java\n+++ b/src/org/mockito/internal/exceptions/ExceptionIncludingMockitoWarnings.java\n package org.mockito.internal.exceptions;\n \n public class ExceptionIncludingMockitoWarnings extends RuntimeException {\n+    private static final long serialVersionUID = -5925150219446765679L;\n+\n     public ExceptionIncludingMockitoWarnings(String message, Throwable throwable) {\n         super(message, throwable);\n     }\n--- a/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/AllInvocationsFinder.java\n  */\n package org.mockito.internal.invocation;\n \n-import java.util.*;\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n \n import org.mockito.internal.MockHandlerInterface;\n-import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockUtil;\n \n public class AllInvocationsFinder {\n--- a/src/org/mockito/internal/listeners/CollectCreatedMocks.java\n+++ b/src/org/mockito/internal/listeners/CollectCreatedMocks.java\n \n import java.util.List;\n \n+@SuppressWarnings(\"unchecked\")\n public class CollectCreatedMocks implements MockingStartedListener {\n+    \n     private List toBeFilled;\n \n     public CollectCreatedMocks(List toBeFilled) {\n--- a/src/org/mockito/internal/listeners/MockingStartedListener.java\n+++ b/src/org/mockito/internal/listeners/MockingStartedListener.java\n \n import org.mockito.MockSettings;\n \n+@SuppressWarnings(\"unchecked\")\n public interface MockingStartedListener extends MockingProgressListener {\n+    \n     void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings);\n }\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n import org.mockito.internal.listeners.MockingProgressListener;\n import org.mockito.verification.VerificationMode;\n \n+@SuppressWarnings(\"unchecked\")\n public interface MockingProgress {\n     \n     void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing);\n     void resetOngoingStubbing();\n \n     ArgumentMatcherStorage getArgumentMatcherStorage();\n-\n+    \n     void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings);\n \n     void setListener(MockingProgressListener listener);\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n import org.mockito.internal.listeners.MockingProgressListener;\n import org.mockito.verification.VerificationMode;\n \n+@SuppressWarnings(\"unchecked\")\n public class ThreadSafeMockingProgress implements MockingProgress, Serializable {\n     \n     private static final long serialVersionUID = 6839454041642082618L;\n     public ArgumentMatcherStorage getArgumentMatcherStorage() {\n         return threadSafely().getArgumentMatcherStorage();\n     }\n-\n+    \n     public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {\n         threadSafely().mockingStarted(mock, classToMock, mockSettings);\n     }\n--- a/src/org/mockito/internal/runners/JUnit44RunnerImpl.java\n+++ b/src/org/mockito/internal/runners/JUnit44RunnerImpl.java\n import org.junit.internal.runners.InitializationError;\n import org.junit.internal.runners.JUnit4ClassRunner;\n import org.junit.runner.Description;\n-import org.junit.runner.Runner;\n import org.junit.runner.manipulation.Filter;\n import org.junit.runner.manipulation.NoTestsRemainException;\n import org.junit.runner.notification.RunNotifier;\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n         return returnValueFor(invocation.getMethod().getReturnType());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     Object returnValueFor(Class<?> clazz) {\n         if (!ClassImposterizer.INSTANCE.canImposterise(clazz)) {\n             return null;\n--- a/src/org/mockito/internal/util/ArrayUtils.java\n+++ b/src/org/mockito/internal/util/ArrayUtils.java\n package org.mockito.internal.util;\n \n+@SuppressWarnings(\"unchecked\")\n public class ArrayUtils {\n     public Class<?>[] concat(Class<?>[] interfaces, Class<?> clazz) {\n         int length = interfaces.length;\n--- a/test/org/mockito/internal/debugging/LoggingListenerTest.java\n+++ b/test/org/mockito/internal/debugging/LoggingListenerTest.java\n package org.mockito.internal.debugging;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.util.MockitoLogger;\n import org.mockitoutil.TestBase;\n-\n-import static org.mockito.Matchers.notNull;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.verify;\n \n public class LoggingListenerTest extends TestBase {\n \n--- a/test/org/mockito/internal/debugging/WarningsFinderTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsFinderTest.java\n  */\n package org.mockito.internal.debugging;\n \n+import static java.util.Arrays.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.Arrays;\n+\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.util.SimpleMockitoLogger;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n-\n-import java.util.Arrays;\n-\n-import static java.util.Arrays.asList;\n-import static org.mockito.Mockito.only;\n-import static org.mockito.Mockito.verify;\n \n public class WarningsFinderTest extends TestBase {\n \n     @Mock private IMethods mock;\n     @Mock private FindingsListener listener;\n-    private SimpleMockitoLogger logger = new SimpleMockitoLogger();\n \n     @Test\n     public void shouldPrintUnusedStub() {\n--- a/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterImplTest.java\n  */\n package org.mockito.internal.debugging;\n \n-import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n  */\n package org.mockito.internal.invocation;\n \n-import org.fest.assertions.Assertions;\n+import static java.util.Arrays.*;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import org.hamcrest.Matcher;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.matchers.*;\n+import org.mockito.internal.matchers.AnyVararg;\n+import org.mockito.internal.matchers.CapturingMatcher;\n+import org.mockito.internal.matchers.Equals;\n+import org.mockito.internal.matchers.LocalizedMatcher;\n+import org.mockito.internal.matchers.NotNull;\n import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockitousage.IMethods;\n-\n-import static org.mockito.Matchers.anyVararg;\n-import static org.mockitoutil.ExtraMatchers.hasExactlyInOrder;\n import org.mockitoutil.TestBase;\n-\n-import java.lang.reflect.Method;\n-import static java.util.Arrays.asList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationMatcherTest extends TestBase {\n--- a/test/org/mockito/internal/verification/VerificationDataImplTest.java\n+++ b/test/org/mockito/internal/verification/VerificationDataImplTest.java\n package org.mockito.internal.verification;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockitoutil.TestBase;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n \n public class VerificationDataImplTest extends TestBase {\n \n--- a/test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java\n+++ b/test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java\n import org.junit.runners.model.InitializationError;\n import org.mockito.internal.runners.RunnerImpl;\n import org.mockito.internal.util.ConsoleMockitoLogger;\n-import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class ConsoleSpammingMockitoJUnitRunnerTest extends TestBase {\n     \n-    private IMethods mock;\n-\n     private ConsoleSpammingMockitoJUnitRunner runner;\n     private MockitoLoggerStub loggerStub;\n     private RunNotifier notifier;\n--- a/test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java\n+++ b/test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java\n import org.mockito.stubbing.Answer;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"unchecked\")\n public class PlaygroundWithDemoOfUnclonedParametersProblemTest extends TestBase {\n \n     ImportManager importManager;\n--- a/test/org/mockitousage/basicapi/AnnotationsTest.java\n+++ b/test/org/mockitousage/basicapi/AnnotationsTest.java\n import org.junit.Test;\n import org.mockito.*;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.stubbing.defaultanswers.Answers;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n--- a/test/org/mockitousage/basicapi/MockInjectionTest.java\n+++ b/test/org/mockitousage/basicapi/MockInjectionTest.java\n \n import java.util.*;\n \n+@SuppressWarnings(\"unchecked\")\n public class MockInjectionTest extends TestBase {\n \n \tprivate SuperUnderTesting superUnderTestWithoutInjection = new SuperUnderTesting();\n \t@InjectMock private BaseUnderTesting baseUnderTest = new BaseUnderTesting();\n \t@InjectMock private SubUnderTesting subUnderTest = new SubUnderTesting();\n \t@InjectMock private OtherBaseUnderTesting otherBaseUnderTest = new OtherBaseUnderTesting();\n-\t@Mock private Map map;\n-\t@Mock private List list;\n-\t@Mock private Set set;\n+\t@Mock private Map map;\t\n+    @Mock private List list;\n \t@Mock private Set histogram1;\n \t@Mock private Set histogram2;\n \t@Spy private TreeSet searchTree = new TreeSet();\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"serial\")\n+@SuppressWarnings({\"unchecked\", \"serial\"})\n public class MocksSerializationTest extends TestBase implements Serializable {\n \n     private static final long serialVersionUID = 6160482220413048624L;\n         }\n     }\n   \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void shouldSerializeWithRealObjectSpy() throws Exception {\n         // given\n--- a/test/org/mockitousage/basicapi/SpyAnnotationTest.java\n+++ b/test/org/mockitousage/basicapi/SpyAnnotationTest.java\n import java.util.ArrayList;\n import java.util.List;\n \n+@SuppressWarnings(\"unchecked\")\n public class SpyAnnotationTest extends TestBase {\n     //TODO check if works when base class has initMocks()\n-\t@Spy\n+\t\n+    @Spy\n \tfinal List spiedList = new ArrayList();\n \n \t@Test\n \t\tclass FailingSpy {\n \t\t\t@Spy private List mySpy;\n \n-\t\t\tpublic List getMySpy() {\n+\t\t\t@SuppressWarnings(\"unused\")\n+            public List getMySpy() {\n \t\t\t\treturn mySpy;\n \t\t\t}\n \t\t}\n--- a/test/org/mockitousage/basicapi/UsingVarargsTest.java\n+++ b/test/org/mockitousage/basicapi/UsingVarargsTest.java\n  */\n package org.mockitousage.basicapi;\n \n+import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n \n import java.util.ArrayList;\n \n-import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.Matchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n-import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class UsingVarargsTest extends TestBase {\n--- a/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n+++ b/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n  */\n package org.mockitousage.junitrunner;\n \n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.Mockito.verify;\n-import static org.mockitousage.junitrunner.Filters.methodNameContains;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+import static org.mockitousage.junitrunner.Filters.*;\n \n import java.util.List;\n \n import org.junit.Test;\n-import org.junit.runner.Description;\n import org.junit.runner.RunWith;\n-import org.junit.runner.manipulation.Filter;\n import org.mockito.InjectMock;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnit44Runner;\n-import org.mockitoutil.TestBase;\n \n @RunWith(MockitoJUnit44Runner.class)\n @SuppressWarnings( { \"unchecked\", \"deprecation\" })\n--- a/test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java\n+++ b/test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java\n \n import static org.mockito.Mockito.*;\n \n+import java.util.List;\n+\n import org.junit.After;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.progress.ThreadSafeMockingProgress;\n-import org.mockito.internal.verification.DummyVerificationMode;\n-import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-import java.util.List;\n-\n+@SuppressWarnings(\"unchecked\")\n public class RestrictedObjectMethodsTest extends TestBase {\n \n     @Mock List mock;\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n  * the easiest way to make sure that tests clean up invalid state is to require\n  * valid state for all tests.\n  */\n+@SuppressWarnings(\"unchecked\")\n public class TestBase extends Assert {\n \n     @After\n                 \"\\n\"\n                 , string.contains(sub));\n     }\n-\n+    \n     protected static Invocation invocationOf(Class<?> type, String methodName, Object ... args) throws NoSuchMethodException {\n         Class[] types = new Class[args.length];\n         for (int i = 0; i < args.length; i++) {\n         return StringDescription.toString(m);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     //TODO use widely\n     protected <T> T serializeAndBack(T obj) throws Exception {\n         ByteArrayOutputStream os = this.serializeMock(obj);", "timestamp": 1267054354, "metainfo": ""}