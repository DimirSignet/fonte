{"sha": "620f8faed0ad132961aae3a8671120e0929ce828", "log": "Fixed issue 151. Merged from trunk. Mockito should not be so defensive and clear potential stubbed call on creation of new mock  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401773", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * @return mock object\n      */\n     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n-        return MOCKITO_CORE.mock(classToMock, mockSettings);\n+        return MOCKITO_CORE.mock(classToMock, mockSettings, true);\n     }\n     \n     /**\n     public static <T> T spy(T object) {\n         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                 .spiedInstance(object)\n-                .defaultAnswer(CALLS_REAL_METHODS)); \n+                .defaultAnswer(CALLS_REAL_METHODS), true); \n     }\n \n     /**\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n     private final MockUtil mockUtil = new MockUtil();\n     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n     \n-    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n+    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {\n         mockingProgress.validateState();\n-        mockingProgress.resetOngoingStubbing();\n+        if (shouldResetOngoingStubbing) {\n+            mockingProgress.resetOngoingStubbing();\n+        }\n         return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n     }\n     \n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java\n             return null;\n         }\n         \n-        return mockitoCore.mock((Class) clazz, new MockSettingsImpl().defaultAnswer(this));\n+        return mockitoCore.mock(clazz, new MockSettingsImpl().defaultAnswer(this), false);\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/MockitoCoreTest.java\n+package org.mockito.internal;\n+\n+import org.junit.Test;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockitoutil.TestBase;\n+\n+public class MockitoCoreTest extends TestBase {\n+\n+    MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n+    MockitoCore core = new MockitoCore();\n+\n+    @Test\n+    public void shouldResetOngoingStubbingWhenAsked() throws Exception {\n+        //when\n+        core.mock(Object.class, new MockSettingsImpl(), true);\n+\n+        //then\n+        assertNull(mockingProgress.pullOngoingStubbing());\n+    }\n+\n+    @Test\n+    public void shouldNOTResetOngoingStubbingWhenAsked() throws Exception {\n+        //when\n+        core.mock(Object.class, new MockSettingsImpl(), false);\n+\n+        //then\n+        assertNull(mockingProgress.pullOngoingStubbing());\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.bugs;\n+\n+import org.junit.Test;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Mockito.*;\n+\n+//issue 151\n+public class StubbingMocksThatAreConfiguredToReturnMocksTest extends TestBase {\n+\n+    @Test\n+    public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS() {\n+        IMethods mock = mock(IMethods.class, RETURNS_MOCKS);\n+        when(mock.objectReturningMethodNoArgs()).thenReturn(null);\n+    }\n+\n+    @Test\n+    public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKSWithDoApi() {\n+        IMethods mock = mock(IMethods.class, RETURNS_MOCKS);\n+        doReturn(null).when(mock).objectReturningMethodNoArgs();\n+    }\n+}", "timestamp": 1258900532, "metainfo": ""}