{"sha": "b206310cf5960419b96d69ce5baba3a02446729a", "log": "Added tests for the new extension point. It's easiest if they live in a separate subprojects so that we're sure the plugin is only loaded for those tests.", "commit": "\n--- a/src/org/mockito/internal/configuration/ClassPathLoader.java\n+++ b/src/org/mockito/internal/configuration/ClassPathLoader.java\n     }\n \n     public static StackTraceCleanerProvider getStackTraceCleanerProvider() {\n+        //TODO we should throw some sensible exception if this is null.\n         return stackTraceCleanerProvider;\n     }\n \n--- /dev/null\n+++ b/subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/MyStackTraceCleanerProvider.java\n+package org.mockitousage.plugins.stacktrace;\n+\n+import org.mockito.exceptions.stacktrace.StackTraceCleaner;\n+import org.mockito.plugins.StackTraceCleanerProvider;\n+\n+/**\n+ * By Szczepan Faber on 9/15/12\n+ */\n+public class MyStackTraceCleanerProvider implements StackTraceCleanerProvider {\n+\n+    public static boolean ENABLED = true;\n+\n+    public StackTraceCleaner getStackTraceCleaner(final StackTraceCleaner defaultCleaner) {\n+        return new StackTraceCleaner() {\n+            public boolean isOut(StackTraceElement candidate) {\n+                if (ENABLED && candidate.getMethodName().contains(\"excludeMe\")) {\n+                    return true;\n+                }\n+                return defaultCleaner.isOut(candidate);\n+            }\n+        };\n+    }\n+}\n--- /dev/null\n+++ b/subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockitousage.plugins.stacktrace;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+import static org.mockito.Mockito.verify;\n+\n+public class PluginStackTraceFilteringTest extends TestBase {\n+    \n+    @Mock private IMethods mock;\n+\n+    @After\n+    public void resetState() {\n+        super.resetState();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        super.makeStackTracesClean();\n+    }\n+\n+    @Test\n+    public void pluginFiltersOutStackTraceElement() {\n+        try {\n+            MyStackTraceCleanerProvider.ENABLED = true;\n+            verifyMock_x();\n+            fail();\n+        } catch (WantedButNotInvoked e) {\n+            String trace = getStackTrace(e);\n+            assertContains(\"verifyMock_x\", trace);\n+            assertNotContains(\"verify_excludeMe_x\", trace);\n+        }\n+    }\n+\n+    @Test\n+    public void pluginDoesNotFilterOutStackTraceElement() {\n+        try {\n+            MyStackTraceCleanerProvider.ENABLED = false;\n+            verifyMock_x();\n+            fail();\n+        } catch (WantedButNotInvoked e) {\n+            String trace = getStackTrace(e);\n+            assertContains(\"verifyMock_x\", trace);\n+            assertContains(\"verify_excludeMe_x\", trace);\n+        }\n+    }\n+\n+    private void verify_excludeMe_x() {\n+        verify(mock).simpleMethod();\n+    }\n+\n+    private void verifyMock_x() {\n+        verify_excludeMe_x();\n+    }\n+}\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n             }\n         });\n     }\n+\n+    protected String getStackTrace(Throwable e) {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        e.printStackTrace(new PrintStream(out));\n+        try {\n+            out.close();\n+        } catch (IOException ex) {}\n+        return out.toString();\n+    }\n }", "timestamp": 1347739472, "metainfo": ""}