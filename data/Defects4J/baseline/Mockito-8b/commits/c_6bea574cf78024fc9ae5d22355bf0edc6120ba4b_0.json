{"sha": "6bea574cf78024fc9ae5d22355bf0edc6120ba4b", "log": "Enhancement 162. Made it possible to ignore stubs for verification in order. Unfortunately, I had to put some extra fields on our core domain object: Invocation. Moved finders to a better package.  --HG-- rename : src/org/mockito/internal/invocation/AllInvocationsFinder.java => src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java", "commit": "\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n  */\n package org.mockito.internal;\n \n-import java.util.Arrays;\n-import java.util.List;\n-\n import org.mockito.InOrder;\n import org.mockito.MockSettings;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.verification.api.InOrderContext;\n import org.mockito.internal.verification.api.VerificationDataInOrder;\n import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n-import org.mockito.stubbing.Answer;\n-import org.mockito.stubbing.DeprecatedOngoingStubbing;\n-import org.mockito.stubbing.OngoingStubbing;\n-import org.mockito.stubbing.Stubber;\n-import org.mockito.stubbing.VoidMethodStubbable;\n+import org.mockito.stubbing.*;\n import org.mockito.verification.VerificationMode;\n+\n+import java.util.Arrays;\n+import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MockitoCore {\n \n     public void verifyNoMoreInteractionsInOrder(List<Object> mocks, InOrderContext inOrderContext) {\n         mockingProgress.validateState();\n-        AllInvocationsFinder finder = new AllInvocationsFinder();\n+        VerifiableInvocationsFinder finder = new VerifiableInvocationsFinder();\n         VerificationDataInOrder data = new VerificationDataInOrderImpl(inOrderContext, finder.find(mocks), null);\n         VerificationModeFactory.noMoreInteractions().verifyInOrder(data);\n     }    \n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n package org.mockito.internal.debugging;\n \n import org.mockito.MockitoDebugger;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.UnusedStubsFinder;\n+import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n \n import java.util.List;\n \n-import static java.util.Arrays.*;\n+import static java.util.Arrays.asList;\n \n public class MockitoDebuggerImpl implements MockitoDebugger {\n \n--- a/src/org/mockito/internal/debugging/WarningsCollector.java\n+++ b/src/org/mockito/internal/debugging/WarningsCollector.java\n  */\n package org.mockito.internal.debugging;\n \n-import java.util.LinkedList;\n-import java.util.List;\n-\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.UnusedStubsFinder;\n+import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n import org.mockito.internal.listeners.CollectCreatedMocks;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class WarningsCollector {\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n  * This program is made available under the terms of the MIT License.\n  */\n package org.mockito.internal.invocation;\n-\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.InvocationOnMock;\n \n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n /**\n  * Method call on a mock object.\n  * <p>\n \n     private final Location location;\n     private boolean verified;\n+    private boolean isIgnoredForVerification;\n \n     final RealMethod realMethod;\n     private StubInfo stubInfo;\n     }\n \n     public boolean isVerified() {\n-        return verified;\n+        return verified || isIgnoredForVerification;\n     }\n \n     public Integer getSequenceNumber() {\n     public void markStubbed(StubInfo stubInfo) {\n         this.stubInfo = stubInfo;\n     }\n+\n+    public boolean isIgnoredForVerification() {\n+        return isIgnoredForVerification;\n+    }\n+\n+    public void ignoreForVerification() {\n+        isIgnoredForVerification = true;\n+    }\n }\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.invocation.finder;\n+\n+import org.mockito.internal.MockHandlerInterface;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.MockUtil;\n+\n+import java.util.*;\n+\n+public class AllInvocationsFinder {\n+    \n+    /**\n+     * gets all invocations from mocks. Invocations are ordered earlier first. \n+     * \n+     * @param mocks mocks\n+     * @return invocations\n+     */\n+    public List<Invocation> find(List<?> mocks) {\n+        Set<Invocation> invocationsInOrder = new TreeSet<Invocation>(new SequenceNumberComparator());\n+        for (Object mock : mocks) {\n+            MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);\n+            List<Invocation> fromSingleMock = handler.getInvocationContainer().getInvocations();\n+            invocationsInOrder.addAll(fromSingleMock);\n+        }\n+        \n+        return new LinkedList<Invocation>(invocationsInOrder);\n+    }\n+\n+    private final class SequenceNumberComparator implements Comparator<Invocation> {\n+        public int compare(Invocation o1, Invocation o2) {\n+            return o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java\n+package org.mockito.internal.invocation.finder;\n+\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.util.ListUtil;\n+\n+import java.util.List;\n+\n+/**\n+ * Author: Szczepan Faber, created at: 4/3/11\n+ */\n+public class VerifiableInvocationsFinder {\n+\n+    public List<Invocation> find(List<?> mocks) {\n+        List<Invocation> invocations = new AllInvocationsFinder().find(mocks);\n+        return ListUtil.filter(invocations, new RemoveIgnoredForVerification());\n+    }\n+\n+    static class RemoveIgnoredForVerification implements ListUtil.Filter<Invocation>{\n+        public boolean isOut(Invocation i) {\n+            return i.isIgnoredForVerification();\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/verification/InOrderWrapper.java\n+++ b/src/org/mockito/internal/verification/InOrderWrapper.java\n  */\n package org.mockito.internal.verification;\n \n-import java.util.List;\n-\n import org.mockito.internal.InOrderImpl;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n import org.mockito.verification.VerificationMode;\n+\n+import java.util.List;\n \n public class InOrderWrapper implements VerificationMode {\n \n     }\n \n     public void verify(VerificationData data) {\n-        List<Invocation> allInvocations = new AllInvocationsFinder().find(inOrder.getMocksToBeVerifiedInOrder());\n-        VerificationDataInOrderImpl dataInOrder = new VerificationDataInOrderImpl(inOrder, allInvocations, data.getWanted());\n+        List<Invocation> invocations = new VerifiableInvocationsFinder().find(inOrder.getMocksToBeVerifiedInOrder());\n+        VerificationDataInOrderImpl dataInOrder = new VerificationDataInOrderImpl(inOrder, invocations, data.getWanted());\n         mode.verifyInOrder(dataInOrder);\n     }\n }\n--- a/test/org/mockito/internal/AllInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/AllInvocationsFinderTest.java\n  */\n package org.mockito.internal;\n \n-import static java.util.Arrays.*;\n-import static org.mockito.Mockito.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n \n import java.util.List;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.internal.invocation.AllInvocationsFinder;\n-import org.mockito.internal.invocation.Invocation;\n-import org.mockitousage.IMethods;\n-import org.mockitoutil.TestBase;\n+import static java.util.Arrays.asList;\n+import static org.mockito.Mockito.mock;\n \n public class AllInvocationsFinderTest extends TestBase {\n     \n--- a/test/org/mockitousage/verification/NoMoreInteractionsExcludingStubsTest.java\n+++ b/test/org/mockitousage/verification/NoMoreInteractionsExcludingStubsTest.java\n package org.mockitousage.verification;\n \n import org.junit.Test;\n+import org.mockito.InOrder;\n import org.mockito.Mock;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.internal.invocation.CapturesArgumensFromInvocation;\n import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.internal.util.MockUtil;\n import org.mockitousage.IMethods;\n         verifyNoMoreInteractions(mock);\n     }\n \n+    @Test\n+    public void shouldExcludeFromVerificationInOrder() throws Exception {\n+        //given\n+        when(mock.simpleMethod()).thenReturn(\"foo\");\n+\n+        //when\n+        mock.objectArgMethod(\"1\");\n+        mock.objectArgMethod(\"2\");\n+        mock.simpleMethod(); //calling the stub\n+\n+        //then\n+        InOrder inOrder = inOrder(ignoreStubs(mock));\n+        inOrder.verify(mock).objectArgMethod(\"1\");\n+        inOrder.verify(mock).objectArgMethod(\"2\");\n+        inOrder.verifyNoMoreInteractions();\n+        verifyNoMoreInteractions(mock);\n+    }\n+\n     @Test(expected = NotAMockException.class)\n     public void shouldIgnoringStubsDetectNulls() throws Exception {\n         ignoreStubs(mock, null);\n      * <pre>\n      *  //mocking lists for the sake of the example (if you mock List in real you will burn in hell)\n      *  List mock1 = mock(List.class), mock2 = mock(List.class);\n-     * \n+     *\n      *  //stubbing mocks:\n      *  when(mock1.get(0)).thenReturn(10);\n      *  when(mock2.get(0)).thenReturn(20);\n             InvocationContainer invocationContainer = new MockUtil().getMockHandler(m).getInvocationContainer();\n             List<Invocation> ins = invocationContainer.getInvocations();\n             for (Invocation in : ins) {\n-                InvocationMarker invocationMarker = new InvocationMarker();\n                 if (in.stubInfo() != null) {\n-                    invocationMarker.markVerified(in, new CapturesArgumensFromInvocation() {\n-                        public void captureArgumentsFrom(Invocation i) {\n-                            //don't capture\n-                        }\n-                    });\n+                    in.ignoreForVerification();\n                 }\n             }\n         }\n         return mocks;\n     }\n-\n }", "timestamp": 1301823864, "metainfo": ""}