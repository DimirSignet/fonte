{"sha": "af44738c7de74f24e37ea0c1242e73b07c3f4362", "log": "issue 352 : With answer ReturnsEmptyValues, Mockito-mocked methods returning primitive types other than \"int\" throw ClassCastException: java.lang.Integer. Thanks to Jesse Wilson for spotting that one and providing a patch. I changed a few things however  especially:  - used Primitives utility class instead  - applied underscored names for test cases, as decided internally", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n     \n     Object returnValueFor(Class<?> type) {\n         if (type.isPrimitive()) {\n-            return primitiveOf(type);\n+            return Primitives.primitiveValueOrNullFor(type);\n         } else if (Primitives.isPrimitiveWrapper(type)) {\n             return Primitives.primitiveWrapperOf(type);\n         //new instances are used instead of Collections.emptyList(), etc.\n         return null;\n     }\n \n-    private Object primitiveOf(Class<?> type) {\n-        if (type == Boolean.TYPE) {\n-            return false;\n-        } else if (type == Character.TYPE) {\n-            return (char) 0;\n-        } else {\n-            return 0;\n-        } \n-    }\n }\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.util;\n \n import java.util.HashMap;\n     }\n \n     static {\n-        wrapperReturnValues.put(Boolean.class, Boolean.FALSE);\n-        wrapperReturnValues.put(Character.class, new Character((char) 0));\n-        wrapperReturnValues.put(Byte.class, new Byte((byte) 0));\n-        wrapperReturnValues.put(Short.class, new Short((short) 0));\n-        wrapperReturnValues.put(Integer.class, new Integer(0));\n-        wrapperReturnValues.put(Long.class, new Long(0));\n-        wrapperReturnValues.put(Float.class, new Float(0));\n-        wrapperReturnValues.put(Double.class, new Double(0));\n+        wrapperReturnValues.put(Boolean.class, false);\n+        wrapperReturnValues.put(Character.class, '\\u0000');\n+        wrapperReturnValues.put(Byte.class, (byte) 0);\n+        wrapperReturnValues.put(Short.class, (short) 0);\n+        wrapperReturnValues.put(Integer.class, 0);\n+        wrapperReturnValues.put(Long.class, 0L);\n+        wrapperReturnValues.put(Float.class, 0F);\n+        wrapperReturnValues.put(Double.class, 0D);\n     }\n \n     static {\n         primitiveValues.put(boolean.class, false);\n-        primitiveValues.put(char.class, 0);\n-        primitiveValues.put(byte.class, 0);\n-        primitiveValues.put(short.class, 0);\n+        primitiveValues.put(char.class, '\\u0000');\n+        primitiveValues.put(byte.class, (byte) 0);\n+        primitiveValues.put(short.class, (short) 0);\n         primitiveValues.put(int.class, 0);\n-        primitiveValues.put(long.class, 0);\n-        primitiveValues.put(float.class, 0);\n-        primitiveValues.put(double.class, 0);\n+        primitiveValues.put(long.class, 0L);\n+        primitiveValues.put(float.class, 0F);\n+        primitiveValues.put(double.class, 0D);\n     }\n }\n--- a/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n+++ b/test/org/mockito/internal/progress/HandyReturnValuesTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.progress;\n \n import org.junit.Test;\n-import org.mockitoutil.TestBase;\n+\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n \n-public class HandyReturnValuesTest extends TestBase {\n+public class HandyReturnValuesTest {\n \n     private HandyReturnValues h = new HandyReturnValues();\n \n     @Test\n-    public void shouldNotReturnNullForPrimitivesWprappers() throws Exception {\n+    public void should_not_return_null_for_primitives_wrappers() throws Exception {\n         assertNotNull(h.returnFor(Boolean.class));\n         assertNotNull(h.returnFor(Character.class));\n         assertNotNull(h.returnFor(Byte.class));\n         assertNotNull(h.returnFor(Integer.class));\n         assertNotNull(h.returnFor(Long.class));\n         assertNotNull(h.returnFor(Float.class));\n-        assertNotNull(h.returnFor(Double.class));        \n+        assertNotNull(h.returnFor(Double.class));\n     }\n \n     @Test\n-    public void shouldNotReturnNullForPrimitives() throws Exception {\n+    public void should_not_return_null_for_primitives() throws Exception {\n         assertNotNull(h.returnFor(boolean.class));\n         assertNotNull(h.returnFor(char.class));\n         assertNotNull(h.returnFor(byte.class));\n         assertNotNull(h.returnFor(double.class));\n     }\n \n+    @Test public void should_default_values_for_primitive() {\n+        assertThat(h.returnFor(boolean.class)).isFalse();\n+        assertThat(h.returnFor(char.class)).isEqualTo('\\u0000');\n+        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);\n+        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);\n+        assertThat(h.returnFor(int.class)).isEqualTo(0);\n+        assertThat(h.returnFor(long.class)).isEqualTo(0L);\n+        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);\n+        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);\n+    }\n+\n     @Test\n-    public void shouldReturnNullForEverythingElse() throws Exception {\n+    public void should_return_null_for_everything_else() throws Exception {\n         assertNull(h.returnFor(Object.class));\n         assertNull(h.returnFor(String.class));\n         assertNull(h.returnFor(null));\n     }\n \n     @Test\n-    public void shouldReturnHandyValueForInstances() throws Exception {\n+    public void should_return_handy_value_for_instances() throws Exception {\n         assertNull(h.returnFor(new Object()));\n         assertNull(h.returnFor((Object) null));\n         \n--- a/test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.defaultanswers;\n \n+@SuppressWarnings(\"unused\")\n interface HasPrimitiveMethods {\n     boolean booleanMethod();\n     char charMethod();\n+    byte byteMethod();\n+    short shortMethod();\n     int intMethod();\n     long longMethod();\n     float floatMethod();\n     double doubleMethod();\n-}\n+}\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n \n     ReturnsEmptyValues values = new ReturnsEmptyValues();\n \n-    @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {\n+    @Test public void should_return_empty_collections_or_null_for_non_collections() {\n         assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());\n \n         assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());\n         assertNull(values.returnValueFor(String.class));\n     }\n \n-    @Test public void shouldReturnPrimitive() {\n+    @Test public void should_return_primitive() {\n         assertEquals(false, values.returnValueFor(Boolean.TYPE));\n         assertEquals((char) 0, values.returnValueFor(Character.TYPE));\n-        assertEquals(0, values.returnValueFor(Byte.TYPE));\n-        assertEquals(0, values.returnValueFor(Short.TYPE));\n+        assertEquals((byte) 0, values.returnValueFor(Byte.TYPE));\n+        assertEquals((short) 0, values.returnValueFor(Short.TYPE));\n         assertEquals(0, values.returnValueFor(Integer.TYPE));\n-        assertEquals(0, values.returnValueFor(Long.TYPE));\n-        assertEquals(0, values.returnValueFor(Float.TYPE));\n-        assertEquals(0, values.returnValueFor(Double.TYPE));\n+        assertEquals(0L, values.returnValueFor(Long.TYPE));\n+        assertEquals(0F, values.returnValueFor(Float.TYPE));\n+        assertEquals(0D, values.returnValueFor(Double.TYPE));\n     }\n \n-    @Test public void shouldReturnNonZeroForCompareToMethod() {\n+    @Test public void should_return_non_zero_for_compareTo_method() {\n         //given\n         Date d = mock(Date.class);\n         d.compareTo(new Date());\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.junit.Test;\n \n     @Test\n     //TODO split into separate\n-    public void shouldReturnMockValueForInterface() throws Exception {\n+    public void should_return_mock_value_for_interface() throws Exception {\n         Object interfaceMock = values.returnValueFor(FooInterface.class);\n         assertTrue(new MockUtil().isMock(interfaceMock));\n     }\n \n-    public void shouldReturnMockValueForClass() throws Exception {\n+    @Test\n+    public void should_return_mock_value_for_class() throws Exception {\n         Object classMock = values.returnValueFor(BarClass.class);\n         assertTrue(new MockUtil().isMock(classMock));\n     }\n \n     @Test\n-    public void shouldReturnNullForFinalClass() throws Exception {\n+    public void should_return_null_for_final_class() throws Exception {\n         assertNull(values.returnValueFor(Baz.class));\n     }\n \n     @Test\n-    public void shouldReturnTheUsualDefaultValuesForPrimitives()\n-            throws Throwable {\n+    public void should_return_the_usual_default_values_for_primitives() throws Throwable {\n         ReturnsMocks answer = new ReturnsMocks();\n         assertEquals(false, answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n         assertEquals((char) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals((byte) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"byteMethod\")));\n+        assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"shortMethod\")));\n         assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n-        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n-        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n-        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+        assertEquals(0L, answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0f, answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0d, answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n     }\n-    \n+\n+    @SuppressWarnings(\"unused\")\n     interface StringMethods {\n         String stringMethod();\n         String[] stringArrayMethod();\n     }\n     \n     @Test\n-    public void shouldReturnEmptyArray() throws Throwable {\n+    public void should_return_empty_array() throws Throwable {\n         String[] ret = (String[]) values.answer(invocationOf(StringMethods.class, \"stringArrayMethod\"));\n         \n         assertTrue(ret.getClass().isArray());\n     }\n     \n     @Test\n-    public void shouldReturnEmptyString() throws Throwable {\n+    public void should_return_empty_string() throws Throwable {\n         assertEquals(\"\", values.answer(invocationOf(StringMethods.class, \"stringMethod\")));\n     }\n-}\n+}\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.defaultanswers;\n \n import org.junit.Test;\n public class ReturnsSmartNullsTest extends TestBase {\n \n     @Test\n-    public void shouldReturnTheUsualDefaultValuesForPrimitives() throws Throwable {\n+    public void should_return_the_usual_default_values_for_primitives() throws Throwable {\n         Answer<Object> answer = new ReturnsSmartNulls();\n         assertEquals(false  ,   answer.answer(invocationOf(HasPrimitiveMethods.class, \"booleanMethod\")));\n         assertEquals((char) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, \"charMethod\")));\n+        assertEquals((byte) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, \"byteMethod\")));\n+        assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, \"shortMethod\")));\n         assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"intMethod\")));\n-        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n-        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n-        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n+        assertEquals(0L,        answer.answer(invocationOf(HasPrimitiveMethods.class, \"longMethod\")));\n+        assertEquals(0f,        answer.answer(invocationOf(HasPrimitiveMethods.class, \"floatMethod\")));\n+        assertEquals(0d,        answer.answer(invocationOf(HasPrimitiveMethods.class, \"doubleMethod\")));\n     }\n \n+    @SuppressWarnings(\"unused\")\n     interface Foo {\n         Foo get();\n         Foo withArgs(String oneArg, String otherArg);\n     }\n \n     @Test\n-    public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives() throws Throwable {\n+    public void should_return_an_object_that_fails_on_any_method_invocation_for_non_primitives() throws Throwable {\n         Answer<Object> answer = new ReturnsSmartNulls();\n \n         Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n     }\n \n     @Test\n-    public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {\n+    public void should_return_an_object_that_allows_object_methods() throws Throwable {\n         Answer<Object> answer = new ReturnsSmartNulls();\n \n         Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"get\"));\n     }\n \n     @Test\n-    public void shouldPrintTheParametersWhenCallingAMethodWithArgs() throws Throwable {\n+    public void should_print_the_parameters_when_calling_a_method_with_args() throws Throwable {\n     \tAnswer<Object> answer = new ReturnsSmartNulls();\n \n     \tFoo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"withArgs\", \"oompa\", \"lumpa\"));\n     }\n \n     @Test\n-\tpublic void shouldPrintTheParametersOnSmartNullPointerExceptionMessage() throws Throwable {\n+\tpublic void should_print_the_parameters_on_SmartNullPointerException_message() throws Throwable {\n     \tAnswer<Object> answer = new ReturnsSmartNulls();\n \n         Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, \"withArgs\", \"oompa\", \"lumpa\"));", "timestamp": 1341061591, "metainfo": ""}