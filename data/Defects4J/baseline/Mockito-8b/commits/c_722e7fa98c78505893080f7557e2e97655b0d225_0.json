{"sha": "722e7fa98c78505893080f7557e2e97655b0d225", "log": "Tidy-up in code and coverage  Wrote tests on a higher level for the file reading capability. This change introduces a potential breaking change as we now ignore multiple class names supplied in the plugin file. However, I doubt that anyone puts multiple class implementations in the plugin configuration file. This would be rather awkward.", "commit": "\n--- a/src/org/mockito/internal/configuration/plugins/PluginFileReader.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginFileReader.java\n package org.mockito.internal.configuration.plugins;\n \n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.Reader;\n+import java.io.*;\n import java.util.ArrayList;\n import java.util.List;\n \n class PluginFileReader {\n \n-    List<String> readerToLines(Reader reader) throws IOException {\n+    String readPluginClass(Reader reader) throws IOException {\n+        List<String> lines = readerToLines(reader);\n+        for (String line : lines) {\n+            String stripped = stripCommentAndWhitespace(line);\n+            if (stripped.length() > 0) {\n+                return stripped;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static List<String> readerToLines(Reader reader) throws IOException {\n         List<String> result = new ArrayList<String>();\n         BufferedReader lineReader = new BufferedReader(reader);\n-        String line;\n-        while ((line = lineReader.readLine()) != null) {\n-            result.add(line);\n+        try {\n+            String line;\n+            while ((line = lineReader.readLine()) != null) {\n+                result.add(line);\n+            }\n+            return result;\n+        } finally {\n+            closeQuietly(lineReader);\n         }\n-        return result;\n     }\n \n-    String stripCommentAndWhitespace(String line) {\n+    private static String stripCommentAndWhitespace(String line) {\n         int hash = line.indexOf('#');\n         if (hash != -1) {\n             line = line.substring(0, hash);\n         return line.trim();\n     }\n \n-    void closeQuietly(InputStream in) {\n-        if (in != null) {\n+    private static void closeQuietly(Closeable c) {\n+        if (c != null) {\n             try {\n-                in.close();\n+                c.close();\n             } catch (IOException ignored) {\n             }\n         }\n--- a/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n+++ b/src/org/mockito/internal/configuration/plugins/PluginLoader.java\n import java.util.List;\n \n class PluginLoader {\n-\n-    private final PluginFileReader reader = new PluginFileReader();\n \n     /**\n      * Scans the classpath for given pluginType. If not found, default class is used.\n \n         List<T> result = new ArrayList<T>();\n         for (URL resource : Collections.list(resources)) {\n-            InputStream in = null;\n             try {\n-                in = resource.openStream();\n-                for (String line : reader.readerToLines(new InputStreamReader(in, \"UTF-8\"))) {\n-                    String name = reader.stripCommentAndWhitespace(line);\n-                    if (name.length() != 0) {\n-                        result.add(service.cast(loader.loadClass(name).newInstance()));\n-                    }\n+                InputStream in = resource.openStream();\n+                InputStreamReader reader = new InputStreamReader(in, \"UTF-8\");\n+                String className = new PluginFileReader().readPluginClass(reader);\n+                if (className == null) {\n+                    //For backwards compatibility\n+                    //If the resource does not have plugin class name we're ignoring it\n+                    continue;\n                 }\n+                Class<?> pluginClass = loader.loadClass(className);\n+                Object plugin = pluginClass.newInstance();\n+                result.add(service.cast(plugin));\n             } catch (Exception e) {\n                 throw new MockitoConfigurationException(\n                         \"Failed to load \" + service + \" using \" + resource, e);\n-            } finally {\n-                reader.closeQuietly(in);\n             }\n         }\n         return result;\n--- a/test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java\n+++ b/test/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java\n     PluginFileReader reader = new PluginFileReader();\n \n     @Test\n-    public void readerToLinesEmptyString() throws IOException {\n-        assertEquals(Collections.emptyList(), reader.readerToLines(new StringReader(\"\")));\n+    public void no_class_in_resource() throws IOException {\n+        //no class\n+        assertNull(reader.readPluginClass(new StringReader(\"\")));\n+        assertNull(reader.readPluginClass(new StringReader(\"  \")));\n+        assertNull(reader.readPluginClass(new StringReader(\" \\n \")));\n+\n+        //commented out\n+        assertNull(reader.readPluginClass(new StringReader(\"#foo\")));\n+        assertNull(reader.readPluginClass(new StringReader(\"  # foo  \")));\n+        assertNull(reader.readPluginClass(new StringReader(\"  # # # java.langString # \")));\n+        assertNull(reader.readPluginClass(new StringReader(\"  \\n # foo \\n # foo \\n \")));\n     }\n \n     @Test\n-    public void readerToLinesNoLineBreaks() throws IOException {\n-        assertEquals(Arrays.asList(\"a\"), reader.readerToLines(new StringReader(\"a\")));\n-    }\n-\n-    @Test\n-    public void readerToLinesWithLineBreaks() throws IOException {\n-        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"),\n-                reader.readerToLines(new StringReader(\"a\\nb\\nc\")));\n-    }\n-\n-    @Test\n-    public void readerToLinesWithEmptyLines() throws IOException {\n-        assertEquals(Arrays.asList(\"a\", \"\", \"c\"),\n-                reader.readerToLines(new StringReader(\"a\\n\\nc\")));\n-    }\n-\n-    @Test\n-    public void stripCommentsAndWhitespaceEmptyInput() throws IOException {\n-        assertEquals(\"\", reader.stripCommentAndWhitespace(\"\"));\n-    }\n-\n-    @Test\n-    public void stripCommentsAndWhitespaceWhitespaceInput() throws IOException {\n-        assertEquals(\"\", reader.stripCommentAndWhitespace(\" \"));\n-    }\n-\n-    @Test\n-    public void stripCommentsAndWhitespaceCommentInInput() throws IOException {\n-        assertEquals(\"a\", reader.stripCommentAndWhitespace(\"a#b\"));\n-    }\n-\n-    @Test\n-    public void stripCommentsAndWhitespaceMultipleHashes() throws IOException {\n-        assertEquals(\"a\", reader.stripCommentAndWhitespace(\"a#b#c\"));\n-    }\n-\n-    @Test\n-    public void stripCommentsAndWhitespaceWithWhitespaceAndComments() throws IOException {\n-        assertEquals(\"a\", reader.stripCommentAndWhitespace(\" a #b\"));\n+    public void reads_class_name() throws IOException {\n+        assertEquals(\"java.lang.String\", reader.readPluginClass(new StringReader(\"java.lang.String\")));\n+        assertEquals(\"x\", reader.readPluginClass(new StringReader(\"x\")));\n+        assertEquals(\"x y z\", reader.readPluginClass(new StringReader(\" x y z \")));\n+        assertEquals(\"foo.Foo\", reader.readPluginClass(new StringReader(\" #my class\\n  foo.Foo \\n #other class \")));\n+        assertEquals(\"foo.Foo\", reader.readPluginClass(new StringReader(\"foo.Foo  # cool class\")));\n     }\n }", "timestamp": 1418426971, "metainfo": ""}