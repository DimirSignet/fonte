{"sha": "8747d950be955c908a78912d16062dd75c37d3d4", "log": "Tweaked the tests so that Gradle test does not run some of the ignored tests.", "commit": "\n--- a/test/org/mockito/internal/runners/util/TestMethodsFinderTest.java\n+++ b/test/org/mockito/internal/runners/util/TestMethodsFinderTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.runners.util;\n \n import org.junit.Test;\n \n public class TestMethodsFinderTest extends TestBase {\n \n-    static class HasTests {\n+    public static class HasTests {\n         @Test public void someTest() {}\n     }\n \n--- a/test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java\n+++ b/test/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.junitrunner;\n \n-import static org.mockito.Mockito.*;\n import junit.framework.TestCase;\n-\n import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.JUnitCore;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+import static org.mockito.Mockito.*;\n+\n //@RunWith(ConsoleSpammingMockitoJUnitRunner.class)\n @RunWith(VerboseMockitoJUnitRunner.class)\n-@Ignore\n //TODO\n public class VerboseMockitoRunnerTest extends TestBase {\n     \n     @Mock private IMethods mock;\n     \n-    protected static class NoWarnings {       \n+    public static class NoWarnings {\n         \n         @Test\n+        @Ignore\n         public void test() {\n             IMethods mock = mock(IMethods.class);\n             mock.simpleMethod(1);\n             throw new RuntimeException(\"boo\");\n         }\n     }\n-    \n-    protected static class ContainsWarnings extends TestCase {\n+\n+    public static class ContainsWarnings extends TestCase {\n         \n         public ContainsWarnings() {\n             super(\"test\");\n         }\n-        \n-        @Test\n-        public void test() {\n+\n+        public void testIgnored() {}\n+\n+        public void _test() {\n             IMethods mock = mock(IMethods.class);\n             \n             //some stubbing\n     }\n     \n     @Test\n+    @Ignore\n     public void shouldContainWarnings() throws Exception {\n         //when\n         Result result = new JUnitCore().run(new ContainsWarnings());\n     }\n \n     @Test\n+    @Ignore\n     public void shouldNotContainWarnings() throws Exception {\n         Result result = new JUnitCore().run(NoWarnings.class);\n         assertEquals(1, result.getFailures().size());", "timestamp": 1343994954, "metainfo": ""}