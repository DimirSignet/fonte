{"sha": "0bd952981dfd9ca00254c6e181b653a6c11a43b2", "log": "fixed some dodgy names  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40691", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n     }\n     \n     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n-        if (mockitoStubber.hasAnswerForVoidMethod()) {\n-            //stubbing voids\n+        if (mockitoStubber.hasAnswersForStubbing()) {\n+            //stubbing voids in the old-school way: stubVoid()\n             Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());\n             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);\n-            mockitoStubber.addVoidMethodForStubbing(invocationMatcher);\n+            mockitoStubber.setMethodForStubbing(invocationMatcher);\n             return null;\n         }\n         \n \n     @SuppressWarnings(\"unchecked\")\n     public void setAnswersForStubbing(List<Answer> answers) {\n-        mockitoStubber.addAnswersForVoidMethod(answers);\n+        mockitoStubber.setAnswersForStubbing(answers);\n     }\n }\n--- a/src/org/mockito/internal/stubbing/MockitoStubber.java\n+++ b/src/org/mockito/internal/stubbing/MockitoStubber.java\n \n     private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();\n     private final MockingProgress mockingProgress;\n-    private final List<Answer> answersForVoidMethod = new ArrayList<Answer>();\n+    private final List<Answer> answersForStubbing = new ArrayList<Answer>();\n \n     private InvocationMatcher invocationForStubbing;\n \n         return null;\n     }\n \n-    //TODO it's not for void method any more\n     public void addAnswerForVoidMethod(Answer answer) {\n-        answersForVoidMethod.add(answer);\n+        answersForStubbing.add(answer);\n     }\n     \n-    //TODO dodgy name\n-    public void addAnswersForVoidMethod(List<Answer> answers) {\n-        answersForVoidMethod.addAll(answers);\n+    public void setAnswersForStubbing(List<Answer> answers) {\n+        answersForStubbing.addAll(answers);\n     }\n \n-    public boolean hasAnswerForVoidMethod() {\n-        return !answersForVoidMethod.isEmpty();\n+    public boolean hasAnswersForStubbing() {\n+        return !answersForStubbing.isEmpty();\n     }\n \n-    //TODO it's not for void method any more\n-    public void addVoidMethodForStubbing(InvocationMatcher voidMethodInvocationMatcher) {\n-        invocationForStubbing = voidMethodInvocationMatcher;\n-        assert hasAnswerForVoidMethod();\n-        for (int i = 0; i < answersForVoidMethod.size(); i++) {\n-            addAnswer(answersForVoidMethod.get(i), i != 0);\n+    public void setMethodForStubbing(InvocationMatcher invocation) {\n+        invocationForStubbing = invocation;\n+        assert hasAnswersForStubbing();\n+        for (int i = 0; i < answersForStubbing.size(); i++) {\n+            addAnswer(answersForStubbing.get(i), i != 0);\n         }\n-        answersForVoidMethod.clear();\n+        answersForStubbing.clear();\n     }\n }\n--- a/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n+++ b/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n     @Test\n     public void shouldAddThrowableForVoidMethod() throws Throwable {\n         mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new MyException()));\n-        mockitoStubber.addVoidMethodForStubbing(new InvocationMatcher(simpleMethod));\n+        mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n         \n         try {\n             mockitoStubber.getResultFor(simpleMethod);\n         mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new Exception()));\n         \n         try {\n-            mockitoStubber.addVoidMethodForStubbing(new InvocationMatcher(simpleMethod));\n+            mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n             fail();\n         } catch (MockitoException e) {}\n     }", "timestamp": 1216302524, "metainfo": ""}