{"sha": "97cdedf0c461d5745c1562e6c4c134d7a3ad0c0c", "log": "Tidy up and refactoring", "commit": "\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java\n \n     private void fetch(Set<Long> tickets, DefaultImprovements improvements, String url) throws IOException {\n         InputStream response = new URL(url).openStream();\n-        String content = IOUtil.readStream(response);\n+        String content = IOUtil.readFully(response);\n         LOG.info(\"GitHub API responded successfully.\");\n         List<JSONObject> issues = (List) JSONValue.parse(content);\n         LOG.info(\"GitHub API returned {} issues.\", issues.size());\n--- a/buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java\n \n import java.io.*;\n \n-//TODO SF document and cover\n+/**\n+ * IO utils. A bit of reinventing the wheel but we don't want extra dependencies at this stage and we want to be java.\n+ */\n public class IOUtil {\n \n-    public static String readStream(InputStream is) {\n+    /**\n+     * Reads string from the stream and closes it\n+     */\n+    public static String readFully(InputStream stream) {\n         BufferedReader r = null;\n         try {\n-            r = new BufferedReader(new InputStreamReader(is));\n-            return readNow(is);\n+            r = new BufferedReader(new InputStreamReader(stream));\n+            return readNow(stream);\n         } catch (Exception e) {\n             throw new RuntimeException(\"Problems reading stream\", e);\n         } finally {\n         }\n     }\n \n+    /**\n+     * Closes the target. Does nothing when target is null. Is not silent, throws exception on IOException.\n+     *\n+     * @param closeable the target, may be null\n+     */\n     public static void close(Closeable closeable) {\n         if (closeable != null) {\n             try {\n     }\n \n     private static String readNow(InputStream is) throws IOException {\n-        BufferedReader r = new BufferedReader(new InputStreamReader(is));\n-        StringBuilder sb = new StringBuilder();\n-\n-        String line;\n-        while(null != (line = r.readLine())) {\n-            sb.append(line).append(\"\\n\");\n-        }\n-\n-        return sb.toString();\n+        java.util.Scanner s = new java.util.Scanner(is).useDelimiter(\"\\\\A\");\n+        return s.hasNext() ? s.next() : \"\";\n     }\n }", "timestamp": 1416869146, "metainfo": ""}