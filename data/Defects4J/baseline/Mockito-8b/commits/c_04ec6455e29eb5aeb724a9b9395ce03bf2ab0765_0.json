{"sha": "04ec6455e29eb5aeb724a9b9395ce03bf2ab0765", "log": "Fixed some TODOs (and removed some code that didn't put anything interesting to the game)  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401423", "commit": "\n--- a/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n+++ b/src/org/mockito/internal/creation/jmock/ClassImposterizer.java\n         }\n         \n         try {\n-            //TODO this can throw IllegalStateException if interfaces is a bad parameter\n-            //1. validate it and throw early\n-            //2. catch and rethrow as MockitoException\n             return enhancer.createClass(); \n         } catch (CodeGenerationException e) {\n             if (Modifier.isPrivate(mockedType.getModifiers())) {\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n         MockName mockName = new MockName(settings.getMockName(), classToMock);\n         MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);\n         MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);\n-        Class<?>[] ancillaryTypes = settings.getExtraInterfaces();\n-        Class<?>[] interfaces = ancillaryTypes == null ? new Class<?>[0] : ancillaryTypes;\n+        Class<?>[] interfaces = settings.getExtraInterfaces();\n+        Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n         Object optionalInstance = settings.getSpiedInstance();\n         \n-        T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, interfaces);\n+        T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);\n         \n         if (optionalInstance != null) {\n             new LenientCopyTool().copyToMock(optionalInstance, mock);\n--- a/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n+++ b/test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java\n         assertNotSame(cglibFactoryOne.getCallback(0), cglibFactoryTwo.getCallback(0));\n     }\n     \n-    //TODO: try with 2 the same / different interfaces\n     @Test\n-    public void ensureMockIsAllTypes() {\n+    public void shouldUseAnicilliaryTypes() {\n         SomeClass mock = ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class, SomeInterface.class);\n         \n         assertThat(mock, is(instanceOf(SomeInterface.class)));\n-    }\n-    \n-    @Test(expected = IllegalStateException.class)\n-    public void shouldThrowWhenClassPassedAsInterface() {\n-        ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeInterface.class, SomeClass.class);\n-    }\n-    \n-    //TODO: different exception\n-    @Test(expected = IllegalStateException.class)\n-    public void shouldThrowWhenNullType() {\n-        ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class, (Class<?>) null);\n-    }\n-    \n-    //TODO: why nulls are ok?\n-    @Test\n-    public void ensureNoProblemsWithNullTypes() {\n-        ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(), SomeClass.class, (Class<?>[]) null);\n     }\n     \n     private interface SomeInterface {};\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n     \n     @Test\n     public void partialMockInAction() {\n-//        mock = mock(Foo.class, configuration() \n-//            .name(\"foo\").defaultBehavior(RETURNS_SMART_NULLS).extraInterfaces()\n+//        mock = mock(Foo.class, withSettings() \n+//            .defaultBehavior(CALLS_REAL_METHODS)\n+//            .constructor(constructor, 1, \"foo\");\n+//        \n+//        mock = mock(Foo.class, withSettings() \n+//            .defaultBehavior(CALLS_REAL_METHODS)\n+//            .constructorArgs(\"some arg\", 1);\n+//\n+//        spy = spy(Foo.class, \"some arg\", 1);\n+//        \n //            .\n //            .withName(\"foo\")\n //            .withDefaultBehavior(RETURNS_SMART_NULLS)", "timestamp": 1242160843, "metainfo": ""}