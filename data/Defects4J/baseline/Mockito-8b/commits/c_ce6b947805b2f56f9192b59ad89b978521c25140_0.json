{"sha": "ce6b947805b2f56f9192b59ad89b978521c25140", "log": "Moved MockMaker to the public packages. Added tiny bit of docs.  --HG-- rename : src/org/mockito/internal/IMockMaker.java => src/org/mockito/plugins/MockMaker.java", "commit": "\n--- a/src/org/mockito/internal/configuration/ClassPathLoader.java\n+++ b/src/org/mockito/internal/configuration/ClassPathLoader.java\n import java.util.ServiceLoader;\n import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.exceptions.misusing.MockitoConfigurationException;\n-import org.mockito.internal.IMockMaker;\n+import org.mockito.plugins.MockMaker;\n import org.mockito.internal.creation.CglibMockMaker;\n \n public class ClassPathLoader {\n      * the classpath to find a mock maker plugin if one is available, allowing\n      * mockito to run on alternative platforms like Android.\n      */\n-    public static IMockMaker getMockMaker() {\n-        for (IMockMaker mockMaker : ServiceLoader.load(IMockMaker.class)) {\n+    public static MockMaker getMockMaker() {\n+        for (MockMaker mockMaker : ServiceLoader.load(MockMaker.class)) {\n             return mockMaker; // return the first one service loader finds (if any)\n         }\n         return new CglibMockMaker(); // default implementation\n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n \n import org.mockito.cglib.proxy.Callback;\n import org.mockito.cglib.proxy.Factory;\n-import org.mockito.internal.IMockMaker;\n+import org.mockito.plugins.MockMaker;\n import org.mockito.plugins.MockitoInvocationHandler;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.plugins.MockSettingsInfo;\n /**\n  * A MockMaker that uses cglib to generate mocks on a JVM.\n  */\n-public final class CglibMockMaker implements IMockMaker {\n+public final class CglibMockMaker implements MockMaker {\n \n     public <T> T createMock(Class<T> typeToMock, Class<?>[] extraInterfaces,\n             MockitoInvocationHandler handler, MockSettingsInfo settings) {\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n \n import org.mockito.Mockito;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.IMockMaker;\n+import org.mockito.plugins.MockMaker;\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.debugging.Location;\n public class ReturnsSmartNulls implements Answer<Object>, Serializable {\n \n     private static final long serialVersionUID = 7618312406617949441L;\n-    private static IMockMaker mockMaker = ClassPathLoader.getMockMaker();\n+    private static MockMaker mockMaker = ClassPathLoader.getMockMaker();\n \n     private final class ThrowingInterceptor implements MockitoInvocationHandler {\n         private final InvocationOnMock invocation;\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n \n import java.io.Serializable;\n import org.mockito.exceptions.misusing.NotAMockException;\n-import org.mockito.internal.IMockMaker;\n+import org.mockito.plugins.MockMaker;\n import org.mockito.internal.InvocationNotifierHandler;\n import org.mockito.internal.MockHandler;\n import org.mockito.internal.MockHandlerInterface;\n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n \n-    private static final IMockMaker mockMaker = ClassPathLoader.getMockMaker();\n+    private static final MockMaker mockMaker = ClassPathLoader.getMockMaker();\n     private final MockCreationValidator creationValidator;\n \n     public MockUtil(MockCreationValidator creationValidator) {\n--- /dev/null\n+++ b/src/org/mockito/plugins/MockMaker.java\n+/*\n+ * Copyright (c) 2012 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.plugins;\n+\n+import org.mockito.internal.Incubating;\n+\n+/**\n+ * The facility to create mocks. By default, a cglib/asm based implementation is used.\n+ * It is possible to configure your own mock maker so that dynamic proxies are created without cglib/asm.\n+ * For example, the android users can use a MockMaker that can work with Dalvik virtual machine\n+ * and hence bring Mockito to android apps developers.\n+ *\n+ * TODO: way more documentation and examples.\n+ */\n+@Incubating\n+public interface MockMaker {\n+\n+    /**\n+     * Returns a new instance of {@code typeToMock} that implements the\n+     * interfaces of {@code extraInterfaces}. Invocations to the methods of the\n+     * returned instance will be delegated to {@code handler}.\n+     */\n+    <T> T createMock(Class<T> typeToMock, Class<?>[] extraInterfaces,\n+            MockitoInvocationHandler handler, MockSettingsInfo settings);\n+\n+    /**\n+     * Returns the handler for the {@code mock}, or null if {@code mock} was not\n+     * a mock object created by {@link #createMock}.\n+     */\n+    MockitoInvocationHandler getHandler(Object mock);\n+\n+    /**\n+     * Replaces the existing handler on {@code mock} with {@code newHandler}.\n+     */\n+    void resetMock(Object mock, MockitoInvocationHandler newHandler,\n+                          MockSettingsInfo settings);\n+}", "timestamp": 1327851599, "metainfo": ""}