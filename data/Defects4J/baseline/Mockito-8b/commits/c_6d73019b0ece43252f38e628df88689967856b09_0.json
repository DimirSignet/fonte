{"sha": "6d73019b0ece43252f38e628df88689967856b09", "log": "rename job  --HG-- rename : src/org/mockito/internal/progress/LastArguments.java => src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401111", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n      * @return <code>false</code>.\n      */\n     public static boolean and(boolean first, boolean second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnFalse();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte and(byte first, byte second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char and(char first, char second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnChar();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double and(double first, double second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float and(float first, float second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int and(int first, int second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long and(long first, long second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short and(short first, short second) {\n-        return mockingProgress.getLastArguments().reportAnd().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T and(T first, T second) {\n-        return mockingProgress.getLastArguments().reportAnd().<T>returnNull();\n+        return mockingProgress.getArgumentMatcherStorage().reportAnd().<T>returnNull();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean or(boolean first, boolean second) {\n-        return mockingProgress.getLastArguments().reportOr().returnFalse();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnFalse();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T or(T first, T second) {\n-        return mockingProgress.getLastArguments().reportOr().<T>returnNull();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().<T>returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short or(short first, short second) {\n-        return mockingProgress.getLastArguments().reportOr().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long or(long first, long second) {\n-        return mockingProgress.getLastArguments().reportOr().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int or(int first, int second) {\n-        return mockingProgress.getLastArguments().reportOr().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float or(float first, float second) {\n-        return mockingProgress.getLastArguments().reportOr().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double or(double first, double second) {\n-        return mockingProgress.getLastArguments().reportOr().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char or(char first, char second) {\n-        return mockingProgress.getLastArguments().reportOr().returnChar();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnChar();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte or(byte first, byte second) {\n-        return mockingProgress.getLastArguments().reportOr().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportOr().returnZero();\n     }\n \n     /**\n      * @return <code>null</code>.\n      */\n     public static <T> T not(T first) {\n-        return mockingProgress.getLastArguments().reportNot().<T>returnNull();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().<T>returnNull();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static short not(short first) {\n-        return mockingProgress.getLastArguments().reportNot().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static int not(int first) {\n-        return mockingProgress.getLastArguments().reportNot().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static long not(long first) {\n-        return mockingProgress.getLastArguments().reportNot().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static float not(float first) {\n-        return mockingProgress.getLastArguments().reportNot().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static double not(double first) {\n-        return mockingProgress.getLastArguments().reportNot().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static char not(char first) {\n-        return mockingProgress.getLastArguments().reportNot().returnChar();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnChar();\n     }\n \n     /**\n      * @return <code>false</code>.\n      */\n     public static boolean not(boolean first) {\n-        return mockingProgress.getLastArguments().reportNot().returnFalse();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnFalse();\n     }\n \n     /**\n      * @return <code>0</code>.\n      */\n     public static byte not(byte first) {\n-        return mockingProgress.getLastArguments().reportNot().returnZero();\n+        return mockingProgress.getArgumentMatcherStorage().reportNot().returnZero();\n     }\n \n     /**\n     }\n     \n     private static EmptyReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n-        return mockingProgress.getLastArguments().reportMatcher(matcher);\n+        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n     }\n \n     private static EmptyReturnValues reportMatcher(Matcher<?> matcher) {\n-        return mockingProgress.getLastArguments().reportMatcher(matcher);\n+        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);\n     }\n }\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n         if (mockitoStubber.hasAnswersForStubbing()) {\n             //stubbing voids with stubVoid() or doAnswer() style\n             Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());\n-            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getLastArguments(), invocation);\n+            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n             mockitoStubber.setMethodForStubbing(invocationMatcher);\n             return null;\n         }\n         VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n \n         Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());\n-        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getLastArguments(), invocation);\n+        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n         \n         mockingProgress.validateState();\n \n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.progress.LastArguments;\n+import org.mockito.internal.progress.ArgumentMatcherStorage;\n \n @SuppressWarnings(\"unchecked\")\n public class MatchersBinder {\n \n-    public InvocationMatcher bindMatchers(LastArguments lastArguments, Invocation invocation) {\n-        List<Matcher> lastMatchers = lastArguments.pullMatchers();\n+    public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n+        List<Matcher> lastMatchers = argumentMatcherStorage.pullMatchers();\n         validateMatchers(invocation, lastMatchers);\n \n         InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, lastMatchers);\n--- /dev/null\n+++ b/src/org/mockito/internal/progress/ArgumentMatcherStorage.java\n+package org.mockito.internal.progress;\n+\n+import java.util.List;\n+\n+import org.hamcrest.Matcher;\n+\n+public interface ArgumentMatcherStorage {\n+\n+    EmptyReturnValues reportMatcher(Matcher matcher);\n+\n+    List<Matcher> pullMatchers();\n+\n+    EmptyReturnValues reportAnd();\n+\n+    EmptyReturnValues reportNot();\n+\n+    EmptyReturnValues reportOr();\n+\n+    void validateState();\n+\n+    void reset();\n+\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.progress;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+import org.hamcrest.Matcher;\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.internal.matchers.And;\n+import org.mockito.internal.matchers.Not;\n+import org.mockito.internal.matchers.Or;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class ArgumentMatcherStorageImpl implements ArgumentMatcherStorage {\n+    \n+    private Stack<Matcher> matcherStack = new Stack<Matcher>();\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportMatcher(org.hamcrest.Matcher)\n+     */\n+    public EmptyReturnValues reportMatcher(Matcher matcher) {\n+        matcherStack.push(matcher);\n+        return new EmptyReturnValues();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#pullMatchers()\n+     */\n+    public List<Matcher> pullMatchers() {\n+        if (matcherStack.isEmpty()) {\n+            return null;\n+        }\n+        \n+        ArrayList<Matcher> matchers = new ArrayList<Matcher>(matcherStack);\n+        matcherStack.clear();\n+        return matchers;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportAnd()\n+     */\n+    public EmptyReturnValues reportAnd() {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n+        matcherStack.push(new And(popLastArgumentMatchers(2)));\n+        return new EmptyReturnValues();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportNot()\n+     */\n+    public EmptyReturnValues reportNot() {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n+        matcherStack.push(new Not(popLastArgumentMatchers(1).get(0)));\n+        return new EmptyReturnValues();\n+    }\n+\n+    private List<Matcher> popLastArgumentMatchers(int count) {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n+        assertState(matcherStack.size() >= count,\n+                \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n+        List<Matcher> result = new LinkedList<Matcher>();\n+        result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n+        for (int i = 0; i < count; i++) {\n+            matcherStack.pop();\n+        }\n+        return result;\n+    }\n+\n+    private void assertState(boolean toAssert, String message) {\n+        if (!toAssert) {\n+            matcherStack.clear();\n+            throw new InvalidUseOfMatchersException(message);\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportOr()\n+     */\n+    public EmptyReturnValues reportOr() {\n+        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n+        matcherStack.push(new Or(popLastArgumentMatchers(2)));\n+        return new EmptyReturnValues();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#validateState()\n+     */\n+    public void validateState() {\n+        if (!matcherStack.isEmpty()) {\n+            matcherStack.clear();\n+            new Reporter().misplacedArgumentMatcher();\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reset()\n+     */\n+    public void reset() {\n+        matcherStack.clear();\n+    }\n+}\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n \n     List<Invocation> pullStubbedInvocations();\n \n-    LastArguments getLastArguments();\n+    ArgumentMatcherStorage getArgumentMatcherStorage();\n }\n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n public class MockingProgressImpl implements MockingProgress {\n     \n     private final Reporter reporter = new Reporter();\n-    private final LastArguments lastArguments = new LastArguments();\n+    private final ArgumentMatcherStorage argumentMatcherStorage = new ArgumentMatcherStorageImpl();\n     \n     OngoingStubbing ongoingStubbing;\n     private VerificationMode verificationMode;\n             reporter.unfinishedStubbing();\n         }\n       \n-        //TODO LastArguments should be somewhere here...\n-        getLastArguments().validateState();\n+        getArgumentMatcherStorage().validateState();\n     }\n \n     public void stubbingCompleted(Invocation invocation) {\n     public void reset() {\n         stubbingInProgress = false;\n         verificationMode = null;\n-        //TODO LastArguments should be somewhere here...\n-        getLastArguments().reset();\n+        getArgumentMatcherStorage().reset();\n     }\n \n     public List<Invocation> pullStubbedInvocations() {\n         return ret;\n     }\n \n-    public LastArguments getLastArguments() {\n-        return lastArguments;\n+    public ArgumentMatcherStorage getArgumentMatcherStorage() {\n+        return argumentMatcherStorage;\n     }\n }\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n         return threadSafely().pullStubbedInvocations();\n     }\n \n-    public LastArguments getLastArguments() {\n-        return threadSafely().getLastArguments();\n+    public ArgumentMatcherStorage getArgumentMatcherStorage() {\n+        return threadSafely().getArgumentMatcherStorage();\n     }\n }\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n-import org.mockito.internal.progress.LastArguments;\n+import org.mockito.internal.progress.ArgumentMatcherStorage;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.MockingProgressImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n     \n     private class ExceptionThrowingBinder extends MatchersBinder {\n         @Override\n-        public InvocationMatcher bindMatchers(LastArguments lastArguments, Invocation invocation) {\n+        public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {\n             throw new InvalidUseOfMatchersException(\"\");\n         }\n     }", "timestamp": 1230496306, "metainfo": ""}