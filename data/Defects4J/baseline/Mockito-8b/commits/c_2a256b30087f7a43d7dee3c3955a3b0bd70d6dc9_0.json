{"sha": "2a256b30087f7a43d7dee3c3955a3b0bd70d6dc9", "log": "Made annotations configurable  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401188", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/AnnotationEngine.java\n+package org.mockito;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+\n+import org.mockito.internal.configuration.DefaultAnntotationEngine;\n+\n+/**\n+ * Configures mock creation logic behind &#064;Mock annotations\n+ * <p>\n+ * See how it is implemented in {@link DefaultAnntotationEngine} and {@link MockitoAnnotations#initMocks(Object)}\n+ */\n+public interface AnnotationEngine {\n+\n+    /**\n+     * @param annotation\n+     * @param field\n+     * @return\n+     */\n+    Object createMockFor(Annotation annotation, Field field);\n+\n+}\n--- a/src/org/mockito/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/DefaultMockitoConfiguration.java\n package org.mockito;\n \n+import org.mockito.internal.configuration.DefaultAnntotationEngine;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n \n /**\n  */\n public class DefaultMockitoConfiguration implements IMockitoConfiguration {\n \n+    /* (non-Javadoc)\n+     * @see org.mockito.IMockitoConfiguration#getReturnValues()\n+     */\n     public ReturnValues getReturnValues() {\n         return new EmptyReturnValues();\n     }\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.IMockitoConfiguration#getAnnotationEngine()\n+     */\n+    public AnnotationEngine getAnnotationEngine() {\n+        return new DefaultAnntotationEngine();\n+    }\n }\n--- a/src/org/mockito/IMockitoConfiguration.java\n+++ b/src/org/mockito/IMockitoConfiguration.java\n  */\n public interface IMockitoConfiguration {\n \n+    /**\n+     * Allows configuring the default return values of unstubbed invocations\n+     * <p>\n+     * See javadoc for {@link IMockitoConfiguration}\n+     */\n     ReturnValues getReturnValues();\n \n+    /**\n+     * Configures annotations for mocks\n+     * <p>\n+     * See javadoc for {@link IMockitoConfiguration}\n+     */\n+    AnnotationEngine getAnnotationEngine();\n }\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n \n import static java.lang.annotation.ElementType.*;\n \n+import java.lang.annotation.Annotation;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import java.lang.reflect.Field;\n \n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockito.runners.MockitoJUnitRunner;\n \n     }\n \n     private static void scan(Object testClass, Class<?> clazz) {\n+        AnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();\n         Field[] fields = clazz.getDeclaredFields();\n-        for (Field f : fields) {\n-            if (f.isAnnotationPresent(org.mockito.Mock.class) || f.isAnnotationPresent(Mock.class)) {\n-                boolean wasAccessible = f.isAccessible();\n-                f.setAccessible(true);\n-                try {\n-                    f.set(testClass, Mockito.mock(f.getType(), f.getName()));\n-                } catch (IllegalAccessException e) {\n-                    throw new MockitoException(\"Problems initiating mocks annotated with @Mock\", e);\n-                } finally {\n-                    f.setAccessible(wasAccessible);\n+        for (Field field : fields) {\n+            for(Annotation annotation : field.getAnnotations()) {\n+                Object mock = annotationEngine.createMockFor(annotation, field);\n+                if (mock != null) {\n+                    boolean wasAccessible = field.isAccessible();\n+                    field.setAccessible(true);\n+                    try {\n+                        field.set(testClass, mock);\n+                    } catch (IllegalAccessException e) {\n+                        throw new MockitoException(\"Problems initiating mocks annotated with \" + annotation, e);\n+                    } finally {\n+                        field.setAccessible(wasAccessible);\n+                    }    \n                 }\n             }\n         }\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/DefaultAnntotationEngine.java\n+package org.mockito.internal.configuration;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+\n+import org.mockito.AnnotationEngine;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+public class DefaultAnntotationEngine implements AnnotationEngine {\n+    \n+    /* (non-Javadoc)\n+     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public Object createMockFor(Annotation annotation, Field field) {\n+        if (annotation instanceof Mock || annotation instanceof org.mockito.MockitoAnnotations.Mock) {\n+            return Mockito.mock(field.getType(), field.getName());\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n package org.mockito.internal.configuration;\n \n+import org.mockito.AnnotationEngine;\n+import org.mockito.DefaultMockitoConfiguration;\n import org.mockito.IMockitoConfiguration;\n import org.mockito.ReturnValues;\n \n     \n     @SuppressWarnings(\"deprecation\")\n     IMockitoConfiguration getConfig() {\n-        IMockitoConfiguration defaultConfiguration = new IMockitoConfiguration() {\n-            public ReturnValues getReturnValues() {\n+        IMockitoConfiguration defaultConfiguration = new DefaultMockitoConfiguration() {\n+            @Override public ReturnValues getReturnValues() {\n                 //For now, let's leave the deprecated way of getting return values, \n                 //it will go away, replaced simply by return new DefaultReturnValues()\n                 return Configuration.instance().getReturnValues();\n         }\n     }\n \n+    public static void validate() {\n+        new GlobalConfiguration();\n+    }\n+    \n     public ReturnValues getReturnValues() {\n         return globalConfiguration.get().getReturnValues();\n     }\n \n-    public static void validate() {\n-        new GlobalConfiguration();\n+    public AnnotationEngine getAnnotationEngine() {\n+        return globalConfiguration.get().getAnnotationEngine();\n     }\n }\n--- a/test/org/mockito/MockitoConfiguration.java\n+++ b/test/org/mockito/MockitoConfiguration.java\n import org.mockito.internal.configuration.Configuration;\n \n @SuppressWarnings(\"deprecation\")\n-public class MockitoConfiguration implements IMockitoConfiguration {\n+public class MockitoConfiguration extends DefaultMockitoConfiguration implements IMockitoConfiguration {\n \n     private static ReturnValues overridden = null;\n ", "timestamp": 1231941882, "metainfo": ""}