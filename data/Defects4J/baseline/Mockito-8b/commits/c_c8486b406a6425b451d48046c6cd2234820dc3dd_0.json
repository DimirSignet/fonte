{"sha": "c8486b406a6425b451d48046c6cd2234820dc3dd", "log": "fixed issue 24 MockFactory now does not use static state on Enhancer to set handler for mock objects  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40914", "commit": "\n--- a/src/org/mockito/internal/creation/MockFactory.java\n+++ b/src/org/mockito/internal/creation/MockFactory.java\n \n         Class mockClass = enhancer.createClass();\n         \n-        Enhancer.registerCallbacks(mockClass, new Callback[] { filter });\n-\n         Factory mock = createMock(mockClass);\n-\n+        \n+        mock.setCallbacks(new Callback[] { filter });\n+        \n         filter.setInstance(optionalInstance != null ? optionalInstance : mock);\n         return (T) mock;\n     }\n                     + \" on \" + System.getProperty(\"java.vm.vendor\") + \" JVM\");\n         }\n \n-        // This call is required. Cglib has some \"magic code\" making sure a\n-        // callback is used by only one instance of a given class. So only the\n-        // instance created right after registering the callback will get it.\n-        // However, this is done in the construtor which I'm bypassing to\n-        // allow class instantiation without calling a constructor.\n-        // Fortunatly, the \"magic code\" is also called in getCallback which is\n-        // why I'm calling it here mock.getCallback(0);\n-\n-        mock.getCallback(0);\n         return mock;\n     }\n     ", "timestamp": 1222700051, "metainfo": ""}