{"sha": "90db4f05fb37fe59f3c443e31e6607989d7ec056", "log": "fixed javadocs Made MoreEmptyReturnValues not return new Object() because it feels better  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401166", "commit": "\n--- a/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n     Object returnValueFor(Class<?> type) {\n         if (type == String.class) {\n             return \"\";\n-        } else if (type == Object.class) {\n-            return new Object();\n-        } else if (type.isArray()) {\n+        }  else if (type.isArray()) {\n             Class<?> componenetType = type.getComponentType();\n             return Array.newInstance(componenetType, 0);\n         }\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n  * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.\n  * <p>\n  * SmartNullReturnValues first tries to return ordinary return values (see {@link MoreEmptyReturnValues})\n- * then it tries to return SmartNull. If the return type is final then plain null is returned.\n+ * then it tries to return SmartNull. If the return type is not mockable (e.g. final) then ordinary null is returned.\n  * <p>\n  * If you would like to apply this return values strategy globally have a look at {@link IMockitoConfiguration} class\n  * <p>\n--- a/test/org/mockito/internal/returnvalues/MoreEmptyReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/MoreEmptyReturnValuesTest.java\n     public void shouldReturnEmptyString() {\n         assertEquals(\"\", rv.returnValueFor(String.class));\n     }\n-\n-    @Test\n-    public void shouldReturnObjectInstance() {\n-        assertNotNull(rv.returnValueFor(Object.class));\n-    }\n }", "timestamp": 1231617857, "metainfo": ""}