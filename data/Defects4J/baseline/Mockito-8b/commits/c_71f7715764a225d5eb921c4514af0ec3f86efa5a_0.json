{"sha": "71f7715764a225d5eb921c4514af0ec3f86efa5a", "log": "Added warning on spy stubbing misuse on WrongTypeOfReturnValue", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 actualType + \" cannot be returned by \" + methodName + \"()\",\n                 methodName + \"() should return \" + expectedType,\n                 \"***\",\n-                \"This exception *might* occur in wrongly written multi-threaded tests.\",\n-                \"Please refer to Mockito FAQ on limitations of concurrency testing.\",\n+                \"If you're unsure why you're getting above error read on.\",\n+                \"Due to the nature of the syntax above problem might occur because:\",\n+                \"1. This exception *might* occur in wrongly written multi-threaded tests.\",\n+                \"   Please refer to Mockito FAQ on limitations of concurrency testing.\",\n+                \"2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - \",\n+                \"   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.\",\n                 \"\"\n                 ));\n     }\n--- /dev/null\n+++ b/test/org/mockitousage/misuse/SpyStubbingMisuseTest.java\n+package org.mockitousage.misuse;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;\n+\n+import static org.junit.Assert.fail;\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class SpyStubbingMisuseTest {\n+\n+    @Test\n+    public void nestedWhenTest() {\n+        Strategy mfoo = mock(Strategy.class);\n+        Sampler mpoo = mock(Sampler.class);\n+        Producer out = spy(new Producer(mfoo));\n+\n+        try {\n+            when(out.produce()).thenReturn(mpoo);\n+            fail();\n+        } catch (WrongTypeOfReturnValue e) {\n+            assertThat(e.getMessage()).contains(\"spy\").contains(\"syntax\").contains(\"doReturn|Throw\");\n+        }\n+    }\n+\n+    public class Sample { }\n+\n+    public class Strategy {\n+        Sample getSample() {\n+            return new Sample();\n+        }\n+    }\n+\n+    public class Sampler {\n+        Sample sample;\n+        Sampler(Strategy f) {\n+            sample = f.getSample();\n+        }\n+    }\n+\n+    public class Producer {\n+        Strategy strategy;\n+        Producer(Strategy f) {\n+            strategy = f;\n+        }\n+        Sampler produce() {\n+            return new Sampler(strategy);\n+        }\n+    }\n+}", "timestamp": 1317480276, "metainfo": ""}