{"sha": "c82d6e5a0a0c5692f7d2a7f8484c2dfa63c03755", "log": "added some tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40186", "commit": "\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n  */\n package org.mockito.internal.verification;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n import static org.mockito.internal.progress.VerificationMode.atLeastOnce;\n import static org.mockito.internal.progress.VerificationMode.times;\n \n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.exceptions.parents.MockitoException;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsCalculator;\n+import org.mockito.internal.progress.VerificationMode;\n \n public class NumberOfInvocationsVerifierTest extends RequiresValidState {\n \n     private NumberOfInvocationsVerifier verifier;\n     private InvocationsCalculatorStub calculatorStub;\n-    private InvocationMatcher wanted;\n+    private ReporterStub reporterStub;\n     \n     @Before\n     public void setup() {\n-        verifier = new NumberOfInvocationsVerifier(new Reporter());\n+        reporterStub = new ReporterStub();\n+        verifier = new NumberOfInvocationsVerifier(reporterStub);\n         calculatorStub = new InvocationsCalculatorStub();\n-        wanted = new InvocationBuilder().toInvocationMatcher();\n     }\n \n     @Test\n         verifier.verify(null, null, atLeastOnce());\n     }\n \n-    @Ignore\n+    @Test\n+    public void shouldCountActualInvocations() throws Exception {\n+        InvocationMatcher wanted = new InvocationBuilder().toInvocationMatcher();\n+        verifier.verify(calculatorStub, wanted, times(4));\n+        assertSame(wanted, calculatorStub.wantedForCountingActual);\n+    }\n+    \n     @Test\n     public void shouldReportTooLittleInvocations() throws Exception {\n-        verifier.verify(calculatorStub, wanted, times(4));\n+        InvocationMatcher wanted = new InvocationBuilder().toInvocationMatcher();\n+        VerificationMode mode = times(10);\n+        verifier.verify(calculatorStub, wanted, mode);\n         \n+        assertSame(wanted, calculatorStub.wantedForGettingTrace);\n+        \n+        assertEquals(5, reporterStub.actualCount);\n+        assertEquals(10, reporterStub.wantedCount);\n+        assertEquals(wanted.toString(), reporterStub.wanted);\n+        \n+        assertSame(calculatorStub.lastInvocation, reporterStub.stackTrace);\n+    }\n+    \n+    @Test\n+    public void shouldReportTooManyInvocations() throws Exception {\n+        InvocationMatcher wanted = new InvocationBuilder().toInvocationMatcher();\n+        VerificationMode mode = times(0);\n+        verifier.verify(calculatorStub, wanted, mode);\n+        \n+        assertSame(wanted, calculatorStub.wantedForGettingTrace);\n+        assertSame(mode, calculatorStub.mode);\n+        \n+        assertEquals(5, reporterStub.actualCount);\n+        assertEquals(0, reporterStub.wantedCount);\n+        assertEquals(wanted.toString(), reporterStub.wanted);\n+        \n+        assertSame(calculatorStub.firstUndesired, reporterStub.stackTrace);\n     }\n     \n     class InvocationsCalculatorStub extends InvocationsCalculator {\n-        private InvocationMatcher wanted;\n+        private final HasStackTrace firstUndesired = new MockitoException(\"\");\n+        private final HasStackTrace lastInvocation = new MockitoException(\"\");\n+\n+        private InvocationMatcher wantedForCountingActual;\n+        private InvocationMatcher wantedForGettingTrace;\n+        private VerificationMode mode;\n         @Override\n         public int countActual(InvocationMatcher wanted) {\n-            this.wanted = wanted;\n+            this.wantedForCountingActual = wanted;\n             return 5;\n+        }\n+        \n+        @Override public HasStackTrace getFirstUndesiredInvocationStackTrace(InvocationMatcher wanted, VerificationMode mode) {\n+            wantedForGettingTrace = wanted;\n+            this.mode = mode;\n+            return firstUndesired;\n+        }\n+        \n+        @Override\n+        public HasStackTrace getLastInvocationStackTrace(InvocationMatcher wanted) {\n+            wantedForGettingTrace = wanted;\n+            return lastInvocation;\n+        }\n+    }\n+    \n+    class ReporterStub extends Reporter {\n+        private int wantedCount;\n+        private int actualCount;\n+        private String wanted;\n+        private HasStackTrace stackTrace;\n+        @Override public void tooLittleActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace lastActualInvocationStackTrace) {\n+                    this.wantedCount = wantedCount;\n+                    this.actualCount = actualCount;\n+                    this.wanted = wanted;\n+                    this.stackTrace = lastActualInvocationStackTrace;\n+        }\n+        \n+        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, String wanted, HasStackTrace firstUndesired) {\n+                    this.wantedCount = wantedCount;\n+                    this.actualCount = actualCount;\n+                    this.wanted = wanted;\n+                    this.stackTrace = firstUndesired;\n         }\n     }\n }", "timestamp": 1197644872, "metainfo": ""}