{"sha": "85c8af49920baa762605a6d6c0a57090f96c9558", "log": "added some missing tests  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40197", "commit": "\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n \n public class NoMoreInvocationsVerifier implements Verifier {\n \n-    private final Reporter reporter = new Reporter();\n-    private final InvocationsCalculator calculator = new InvocationsCalculator();\n+    private final Reporter reporter;\n+    private final InvocationsCalculator calculator;\n+\n+    public NoMoreInvocationsVerifier() {\n+        this(new InvocationsCalculator(), new Reporter());\n+    }\n     \n+    public NoMoreInvocationsVerifier(InvocationsCalculator calculator, Reporter reporter) {\n+        this.calculator = calculator;\n+        this.reporter = reporter;\n+    }\n+\n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n         if (mode.isExplicit()) {\n             return;\n--- a/src/org/mockito/internal/verification/Verifier.java\n+++ b/src/org/mockito/internal/verification/Verifier.java\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationMode;\n \n-\n public interface Verifier {\n \n-    void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode);\n+    abstract void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode);\n     \n }\n--- a/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java\n package org.mockito.internal.verification;\n \n+import static java.util.Arrays.asList;\n+\n+import java.util.List;\n+\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.RequiresValidState;\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.exceptions.parents.HasStackTrace;\n+import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.invocation.InvocationsCalculator;\n import org.mockito.internal.progress.VerificationMode;\n-\n+import static org.junit.Assert.*;\n \n public class NoMoreInvocationsVerifierTest extends RequiresValidState {\n \n-    //TODO tests\n+    private NoMoreInvocationsVerifier verifier;\n+    private InvocationsCalculatorStub calculator;\n+    private ReporterStub reporterStub;\n+    private Invocation returnedByCalculator;\n+\n+    @Before\n+    public void setup() {\n+        calculator = new InvocationsCalculatorStub();\n+        reporterStub = new ReporterStub();\n+        verifier = new NoMoreInvocationsVerifier(calculator, reporterStub);\n+        returnedByCalculator = new InvocationBuilder().toInvocation();\n+    }\n+    \n     @Test\n     public void shouldNeverVerifyWhenVerificationIsExplicit() throws Exception {\n-        NoMoreInvocationsVerifier verifier = new NoMoreInvocationsVerifier();\n         verifier.verify(null, null, VerificationMode.atLeastOnce());\n     }\n+    \n+    @Test\n+    public void shouldPassVerification() throws Exception {\n+        returnedByCalculator = null;\n+        verifier.verify(null, null, VerificationMode.noMoreInteractions());\n+    }\n+    \n+    @Test\n+    public void shouldReportError() throws Exception {\n+        List<Invocation> invocations = asList(new InvocationBuilder().toInvocation());\n+        returnedByCalculator = new InvocationBuilder().toInvocation();\n+        \n+        verifier.verify(invocations, null, VerificationMode.noMoreInteractions());\n+        \n+        assertSame(invocations, calculator.invocations);\n+        assertEquals(returnedByCalculator.toString(), reporterStub.undesired);\n+        assertSame(returnedByCalculator.getStackTrace(), reporterStub.actualInvocationStackTrace);\n+    }\n+    \n+    class InvocationsCalculatorStub extends InvocationsCalculator {\n+        private List<Invocation> invocations;\n+        @Override public Invocation getFirstUnverified(List<Invocation> invocations) {\n+            this.invocations = invocations;\n+            return returnedByCalculator;\n+        }\n+    }\n+    \n+    class ReporterStub extends Reporter {\n+        private String undesired;\n+        private HasStackTrace actualInvocationStackTrace;\n+        @Override public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n+            this.undesired = undesired;\n+            this.actualInvocationStackTrace = actualInvocationStackTrace;\n+        }\n+    }\n }\n--- a/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n+++ b/test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java\n         assertEquals(10, reporterStub.wantedCount);\n         assertEquals(wanted.toString(), reporterStub.wanted);\n         \n-        assertSame(calculatorStub.lastInvocation, reporterStub.stackTrace);\n+        HasStackTrace fromCalculator = calculatorStub.lastInvocation;\n+        assertSame(fromCalculator, reporterStub.stackTrace);\n     }\n     \n     @Test\n         assertEquals(0, reporterStub.wantedCount);\n         assertEquals(wanted.toString(), reporterStub.wanted);\n         \n-        assertSame(calculatorStub.firstUndesired, reporterStub.stackTrace);\n+        HasStackTrace fromCalculator = calculatorStub.firstUndesired;\n+        assertSame(fromCalculator, reporterStub.stackTrace);\n     }\n     \n     class InvocationsCalculatorStub extends InvocationsCalculator {", "timestamp": 1197666718, "metainfo": ""}