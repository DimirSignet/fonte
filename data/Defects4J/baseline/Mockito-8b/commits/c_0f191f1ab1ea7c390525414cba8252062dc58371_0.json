{"sha": "0f191f1ab1ea7c390525414cba8252062dc58371", "log": "Fixed some javadoc stuff Implemented runners so that they validate framework usage in tearDown() Made MockitoJUnitRunner working with JUnit 4.4 so that MockitoJUnit44Runner is no longer needed Some refactoring around Runners  --HG-- rename : src/org/mockito/internal/runners/LegacyJUnitRunner.java => src/org/mockito/internal/runners/MockitoJUnit44RunnerImpl.java rename : test/org/mockitousage/junitrunner/JUnit4RunnerTest.java => test/org/mockitousage/junitrunner/JUnit44RunnerTest.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401391", "commit": "\n--- a/src/org/mockito/Mock.java\n+++ b/src/org/mockito/Mock.java\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n- * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}\n+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnitRunner}\n  */\n @Target( { FIELD })\n @Retention(RetentionPolicy.RUNTIME)\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n import org.mockito.internal.stubbing.VoidMethodStubbable;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.VerificationMode;\n-import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockito.runners.MockitoJUnitRunner;\n import org.mockito.stubbing.Answer;\n \n  * MockitoAnnotations.initMocks(testClass);\n  * </pre>\n  * \n- * You can use built-in runners {@link MockitoJUnitRunner}, {@link MockitoJUnit44Runner}.\n+ * You can use built-in runner: {@link MockitoJUnitRunner}.\n  * <p>\n  * Read more here: {@link MockitoAnnotations}\n  * \n      * First of all, in case of any trouble, I encourage you to read the Mockito FAQ: <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n      * <p>\n      * In case of questions you may also post to mockito mailing list: <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a> \n-     * <p>  \n-     * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>. However, there's a gotcha so read on.\n-     * <p>\n-     * <b>{@link Mockito#validateMockitoUsage()} explicitly validates the framework state to detect invalid use of Mockito.</b>\n+     * <p>\n+     * {@link Mockito#validateMockitoUsage()} <b>explicitly validates</b> the framework state to detect invalid use of Mockito.\n+     * However, this feature is optional <b>because Mockito validates the usage all the time...</b> but there is a gotcha so read on.\n      * <p>\n      * Examples of incorrect use:\n      * <pre>\n      * Sometimes though, you might want to validate the framework usage explicitly. \n      * For example, one of the users wanted to put {@link Mockito#validateMockitoUsage()} in his &#064;After method\n      * so that he knows immediately when he misused Mockito. \n-     * Without it, he would have known about it not sooner than <b>next time</b> he used the framework.  \n-     * <p>\n-     * Bear in mind that <b>usually you shouldn't need to validateMockitoUsage()</b> \n-     * and framework validation triggered on next-time basis is just enough,\n+     * Without it, he would have known about it not sooner than <b>next time</b> he used the framework.\n+     * One more benefit of having validateMockitoUsage() in &#064;After is that jUnit runner will always fail in the test method with defect\n+     * whereas ordinary 'next-time' validation might fail the <b>next</b> test method. \n+     * But even though JUnit might report next test as red, don't worry about it \n+     * and just click at navigable stack trace element in the exception message to instantly locate the place where you misused mockito.   \n+     * <p>\n+     * <b>Built-in runner: {@link MockitoJUnitRunner}</b> does validateMockitoUsage() after each test method.\n+     * <p>\n+     * Bear in mind that <b>usually you don't have to validateMockitoUsage()</b> \n+     * and framework validation triggered on next-time basis should be just enough,\n      * mainly because of enhanced exception message with clickable location of defect.\n+     * However, I would recommend validateMockitoUsage() if you already have sufficient test infrastructure\n+     * (like your own runner or base class for all tests) because adding a special action to &#064;After has zero cost.\n      * <p>\n      * See examples in javadoc for {@link Mockito} class\n      */\n--- a/src/org/mockito/MockitoAnnotations.java\n+++ b/src/org/mockito/MockitoAnnotations.java\n import org.mockito.configuration.AnnotationEngine;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.configuration.GlobalConfiguration;\n-import org.mockito.runners.MockitoJUnit44Runner;\n import org.mockito.runners.MockitoJUnitRunner;\n \n /**\n  * <p>\n  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. \n  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.\n- * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}\n+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runner: {@link MockitoJUnitRunner}\n  */\n public class MockitoAnnotations {\n \n--- /dev/null\n+++ b/src/org/mockito/internal/runners/MockitoJUnit44RunnerImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.runners;\n+\n+import org.junit.internal.runners.InitializationError;\n+import org.junit.internal.runners.JUnit4ClassRunner;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.util.FrameworkUsageValidator;\n+\n+@SuppressWarnings(\"deprecation\")\n+public class MockitoJUnit44RunnerImpl extends JUnit4ClassRunner {\n+\n+    public MockitoJUnit44RunnerImpl(Class<?> klass) throws InitializationError {\n+        super(klass);\n+    }\n+\n+    @Override\n+    protected Object createTest() throws Exception {\n+        Object test = super.createTest();\n+        MockitoAnnotations.initMocks(test);\n+        return test;\n+    }\n+\n+    @Override\n+    public void run(RunNotifier notifier) {\n+        // add listener that validates framework usage at the end of each test\n+        notifier.addListener(new FrameworkUsageValidator(notifier));\n+\n+        super.run(notifier);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/MockitoJUnit45AndUpRunner.java\n+package org.mockito.internal.runners;\n+\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n+import org.junit.runners.model.Statement;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.util.FrameworkUsageValidator;\n+\n+//TODO: check out if this runner is still recommended in jUnit 4.6\n+public class MockitoJUnit45AndUpRunner extends BlockJUnit4ClassRunner {\n+\n+    public MockitoJUnit45AndUpRunner(Class<?> klass)\n+            throws InitializationError {\n+        super(klass);\n+    }\n+\n+    @Override\n+    protected Statement withBefores(FrameworkMethod method, Object target, Statement statement) {\n+        //init annotated mocks before tests\n+        MockitoAnnotations.initMocks(target);\n+        return super.withBefores(method, target, statement);\n+    }\n+    \n+    @Override\n+    public void run(final RunNotifier notifier) {\n+        //add listener that validates framework usage at the end of each test\n+        notifier.addListener(new FrameworkUsageValidator(notifier));\n+        \n+        super.run(notifier);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/RunnerFactory.java\n+package org.mockito.internal.runners;\n+\n+import java.lang.reflect.Constructor;\n+\n+import org.junit.runner.Runner;\n+import org.mockito.exceptions.base.MockitoException;\n+\n+public class RunnerFactory {\n+\n+    public Runner create(Class<?> klass) {\n+        Class<?> runnerClass;\n+        try {\n+            runnerClass = Class.forName(\"org.mockito.internal.runners.MockitoJUnit45AndUpRunner\");\n+        } catch (Throwable t) {\n+            try {\n+                runnerClass = Class.forName(\"org.mockito.internal.runners.MockitoJUnit44RunnerImpl\");\n+            } catch (Throwable t2) {\n+                throw new MockitoException(\n+                        \"\\n\" +\n+                        \"MockitoRunner can only be used with JUnit 4.4 or higher.\\n\" +\n+                        \"You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\\n\" +\n+                        \"Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\\n\" +\n+                        \"If you get this error despite using JUnit 4.4 or higher then please report this error to the mockito mailing list.\\n\"\n+                        , t);\n+            }\n+        }\n+        \n+        try {\n+            Constructor<?> constructor = runnerClass.getConstructor(Class.class.getClass());\n+            return (Runner) constructor.newInstance(klass);\n+        } catch (Exception e) {\n+            //TODO: same exception as above\n+            throw new MockitoException(\"foo\", e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/runners/util/FrameworkUsageValidator.java\n+/**\n+ * \n+ */\n+package org.mockito.internal.runners.util;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.Mockito;\n+\n+public class FrameworkUsageValidator extends RunListener {\n+    \n+    private final RunNotifier notifier;\n+\n+    public FrameworkUsageValidator(RunNotifier notifier) {\n+        this.notifier = notifier;\n+    }\n+\n+    @Override\n+    public void testFinished(Description description) throws Exception {\n+        super.testFinished(description);\n+        try {\n+            Mockito.validateMockitoUsage();\n+        } catch(Throwable t) {\n+            notifier.fireTestFailure(new Failure(description, t));\n+        }\n+    }\n+}\n--- a/src/org/mockito/runners/MockitoJUnit44Runner.java\n+++ b/src/org/mockito/runners/MockitoJUnit44Runner.java\n  */\n package org.mockito.runners;\n \n-import org.junit.internal.runners.*;\n-import org.junit.runner.*;\n-import org.junit.runner.notification.*;\n-import org.mockito.*;\n-import org.mockito.internal.runners.*;\n+import org.junit.internal.runners.InitializationError;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.internal.runners.MockitoJUnit44RunnerImpl;\n \n \n /**\n- * <b>JUnit 4.4</b> runner initializes mocks annotated with {@link Mock},\n- * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n- * Mocks are initialized before each test method. \n+ * <b>Deprecated: Simply use {@link MockitoJUnitRunner}</b>\n  * <p>\n+ * Compatible only with <b>JUnit 4.4</b>, this runner adds following behavior:\n+ * <ul>\n+ *   <li>\n+ *      Initializes mocks annotated with {@link Mock},\n+ *      so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n+ *      Mocks are initialized before each test method.\n+ *   <li>\n+ *      validates framework usage after each test method. See javadoc for {@link Mockito#validateMockitoUsage()}.\n+ * </ul>\n+ * \n  * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n+ * Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.\n+ * See javadoc for {@link Mockito#validateMockitoUsage()}.\n  * <p>\n- * Read more in javadoc for {@link MockitoAnnotations}\n+ * Read more about &#064;Mock annotation in javadoc for {@link MockitoAnnotations}\n  * <p>\n  * Example:\n  * <pre>\n  * </pre>\n  */\n @SuppressWarnings(\"deprecation\")\n-public class MockitoJUnit44Runner extends Runner {\n-\n-    private LegacyJUnitRunner legacyRunner;\n+@Deprecated\n+public class MockitoJUnit44Runner extends MockitoJUnit44RunnerImpl {\n \n     public MockitoJUnit44Runner(Class<?> klass) throws InitializationError {\n-        legacyRunner = new LegacyJUnitRunner(klass, new TestCreationListener() {\n-            public void testCreated(Object test) {\n-                MockitoAnnotations.initMocks(test);\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public void run(final RunNotifier notifier) {\n-        // add listener that validates framework usage at the end of each test\n-        notifier.addListener(new FrameworkUsageValidator(notifier));\n-\n-        legacyRunner.run(notifier);\n-    }\n-\n-    @Override\n-    public Description getDescription() {\n-        return legacyRunner.getDescription();\n-    }\n-}\n+        super(klass);\n+    }}\n--- a/src/org/mockito/runners/MockitoJUnitRunner.java\n+++ b/src/org/mockito/runners/MockitoJUnitRunner.java\n  */\n package org.mockito.runners;\n \n+import org.junit.runner.Description;\n+import org.junit.runner.Runner;\n import org.junit.runner.notification.RunNotifier;\n-import org.junit.runners.BlockJUnit4ClassRunner;\n-import org.junit.runners.model.FrameworkMethod;\n-import org.junit.runners.model.InitializationError;\n-import org.junit.runners.model.Statement;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n-import org.mockito.internal.runners.FrameworkUsageValidator;\n+import org.mockito.internal.runners.RunnerFactory;\n+\n \n /**\n- * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.\n+ * Compatible with <b>JUnit 4.4</b> and higher, this runner adds following behavior:\n+ * <ul>\n+ *   <li>\n+ *      Initializes mocks annotated with {@link Mock},\n+ *      so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n+ *      Mocks are initialized before each test method.\n+ *   <li>\n+ *      validates framework usage after each test method. See javadoc for {@link Mockito#validateMockitoUsage()}.\n+ * </ul>\n+ * \n+ * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n+ * Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.\n+ * See javadoc for {@link Mockito#validateMockitoUsage()}.\n  * <p>\n- * JUnit 4.5 runner initializes mocks annotated with {@link Mock},\n- * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. \n- * Mocks are initialized before each test method. \n- * <p>\n- * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n- * <p>\n- * Read more in javadoc for {@link MockitoAnnotations}\n- * <p>\n- * Example:\n+ * Read more about &#064;Mock annotation in javadoc for {@link MockitoAnnotations}\n  * <pre>\n  * <b>&#064;RunWith(MockitoJUnit44Runner.class)</b>\n  * public class ExampleTest {\n  * }\n  * </pre>\n  */\n-public class MockitoJUnitRunner extends BlockJUnit4ClassRunner {\n+public class MockitoJUnitRunner extends Runner {\n \n-    public MockitoJUnitRunner(Class<?> klass) throws InitializationError {\n-        super(klass);\n+    private final Runner runner;\n+\n+    public MockitoJUnitRunner(Class<?> klass) {\n+        runner = new RunnerFactory().create(klass);\n     }\n \n     @Override\n-    protected Statement withBefores(FrameworkMethod method, Object target, Statement statement) {\n-        //init annotated mocks before tests\n-        MockitoAnnotations.initMocks(target);\n-        return super.withBefores(method, target, statement);\n+    public void run(final RunNotifier notifier) {           \n+        runner.run(notifier);\n     }\n-    \n+\n     @Override\n-    public void run(final RunNotifier notifier) {\n-        //add listener that validates framework usage at the end of each test\n-        notifier.addListener(new FrameworkUsageValidator(notifier));\n-        \n-        super.run(notifier);\n+    public Description getDescription() {\n+        return runner.getDescription();\n     }\n }\n--- a/test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java\n+++ b/test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java\n import org.junit.runner.Runner;\n import org.junit.runner.notification.RunListener;\n import org.junit.runner.notification.RunNotifier;\n-import org.mockito.internal.runners.FrameworkUsageValidator;\n+import org.mockito.internal.runners.util.FrameworkUsageValidator;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\", \"deprecation\"})\n public class RunnersValidateFrameworkUsageTest extends TestBase {\n     \n     private Runner runner;\n--- a/test/org/mockitousage/PlaygroundTest.java\n+++ b/test/org/mockitousage/PlaygroundTest.java\n  */\n package org.mockitousage;\n \n+import static org.mockito.Mockito.*;\n+\n import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockitoutil.TestBase;\n \n-@Ignore\n public class PlaygroundTest extends TestBase {\n+    static class Foo {\n+        \n+        int doSomeThing() {\n+            System.out.println(getStuff());\n+            return 0;\n+        }\n \n-    @Mock IMethods mock;\n+        protected String getStuff() {\n+            return \"foo\";\n+        }\n+    }\n \n+    Foo mock;\n+    @Mock IMethods mockTwo;\n+    \n+    @Ignore\n     @Test\n-    public void testGetLastUpdates() {\n-        mock.simpleMethod();\n+    public void spyInAction() {\n+        mock = spy(new Foo());\n+// mock = spy(Foo.class, new Konstructor() {} );\n+// mock = spy(Foo.class, Konstructor.guess());\n+// mock = spy(Foo.class, Konstructor.withArguments(\"1\", \"2\"));\n+        \n+        when(mock.getStuff()).thenReturn(\"aha!\");\n+        \n+        mock.doSomeThing();\n     }\n+    \n+    @Test\n+    public void partialMockInAction() {\n+//        mock = mock(Foo.class)\n+//            .withName(\"foo\")\n+//            .withDefaultBehavior(RETURNS_SMART_NULLS)\n+//            .withInterfaces(Bar.class);\n+//        \n+//        mock = mock(Foo.class)\n+//            .name(\"foo\")\n+//            .defaultBehavior(RETURNS_SMART_NULLS)\n+//            .interfaces(Bar.class);\n+//        \n+//        mock = mock(Foo.class)\n+//            .named(\"foo\")\n+//            .byDefault(RETURNS_SMART_NULLS)\n+//            .alsoImplements(Bar.class, Bar2.class);\n+//        \n+//        mock = mock(Foo.class)\n+//            hasName(\"foo\");\n+        \n+//        when(mock.getStuff()).thenReturn(\"aha!\");\n+//        when(mock.doSomeThing()).thenCallRealMethod();\n+//        \n+//        mock.doSomeThing();\n+    }\n+    \n+//    interface Colored {\n+//        \n+//    }\n+//    \n+//    interface Bar {\n+//        <T extends Foo & Colored> T getColoredPoint();\n+//    }\n+//    \n+//    @Test\n+//    public void testname() throws Exception {\n+//        when(mock.get()).then(returnArgument());\n+//        \n+//        Bar mock = mock(Bar.class);\n+//        when(mock.getColoredPoint()).thenReturn(new Foo());\n+//    }\n }\n--- a/test/org/mockitousage/ThreadReuseTest.java\n+++ b/test/org/mockitousage/ThreadReuseTest.java\n import org.mockito.Mock;\n import org.mockitoutil.TestBase;\n \n-@RunWith(org.mockito.runners.MockitoJUnit44Runner.class)\n+@RunWith(org.mockito.runners.MockitoJUnitRunner.class)\n @SuppressWarnings(\"unchecked\")\n @Ignore(\"this issue is a little bit unclear to me. Let's wait until we have some more data\")\n public class ThreadReuseTest extends TestBase {\n--- a/test/org/mockitousage/examples/use/ExampleTest.java\n+++ b/test/org/mockitousage/examples/use/ExampleTest.java\n import org.junit.runner.RunWith;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnit44Runner;\n+import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitoutil.TestBase;\n \n-@RunWith(MockitoJUnit44Runner.class)\n+@RunWith(MockitoJUnitRunner.class)\n public class ExampleTest extends TestBase {\n     \n     @Mock private ArticleCalculator mockCalculator;\n--- /dev/null\n+++ b/test/org/mockitousage/junitrunner/JUnit44RunnerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.junitrunner;\n+\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnit44Runner;\n+import org.mockitoutil.TestBase;\n+\n+@RunWith(MockitoJUnit44Runner.class)\n+@SuppressWarnings({\"unchecked\", \"deprecation\"})\n+public class JUnit44RunnerTest extends TestBase {\n+    \n+    @Mock private List list;\n+    \n+    @Test\n+    public void shouldInitMocksUsingRunner() {\n+        list.add(\"test\");\n+        verify(list).add(\"test\");\n+    }\n+}\n--- a/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java\n import org.mockitoutil.TestBase;\n \n //This is required to make sure stack trace is well filtered when runner is ON\n+@SuppressWarnings(\"deprecation\")\n @RunWith(MockitoJUnit44Runner.class)\n public class PointingStackTraceToActualInvocationTest extends TestBase {\n     ", "timestamp": 1241281512, "metainfo": ""}