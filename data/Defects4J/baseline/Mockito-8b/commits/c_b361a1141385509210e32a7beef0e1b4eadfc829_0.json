{"sha": "b361a1141385509210e32a7beef0e1b4eadfc829", "log": "refactoring, rename job  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401730", "commit": "\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n \n     private static final long serialVersionUID = -2917871070982574165L;\n \n-    MockitoStubber mockitoStubber;\n+    InvocationContainerImpl invocationContainerImpl;\n     MatchersBinder matchersBinder = new MatchersBinder();\n     MockingProgress mockingProgress = new ThreadSafeMockingProgress();\n \n         this.mockSettings = mockSettings;\n         this.mockingProgress = new ThreadSafeMockingProgress();\n         this.matchersBinder = new MatchersBinder();\n-        this.mockitoStubber = new MockitoStubber(mockingProgress);\n+        this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n     }\n \n     // for tests\n     }\n \n     public Object handle(Invocation invocation) throws Throwable {\n-        if (mockitoStubber.hasAnswersForStubbing()) {\n+        if (invocationContainerImpl.hasAnswersForStubbing()) {\n             // stubbing voids with stubVoid() or doAnswer() style\n             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                             .getArgumentMatcherStorage(), invocation);\n-            mockitoStubber.setMethodForStubbing(invocationMatcher);\n+            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n             return null;\n         }\n         VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n         mockingProgress.validateState();\n \n         if (verificationMode != null) {\n-            VerificationDataImpl data = new VerificationDataImpl(mockitoStubber.getInvocations(), invocationMatcher);\n+            VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);\n             verificationMode.verify(data);\n             return null;\n         }\n         \n-        mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);\n-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber);\n+        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n+        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n         mockingProgress.reportOngoingStubbing(ongoingStubbing);\n \n-        StubbedInvocationMatcher stubbedInvocation = mockitoStubber.findAnswerFor(invocation);\n+        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n         if (!invocation.isVoid() && stubbedInvocation == null) {\n             // it is a return-value interaction but not stubbed. This *might* be\n             // a problem\n             // Without it, the real method inside 'when' might have delegated\n             // to other self method and overwrite the intended stubbed method\n             // with a different one.\n-            mockitoStubber.resetInvocationForPotentialStubbing(invocationMatcher);\n+            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n             return ret;\n         }\n     }\n \n     public void verifyNoMoreInteractions() {\n-        VerificationDataImpl data = new VerificationDataImpl(mockitoStubber.getInvocations(), null);\n+        VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), null);\n         VerificationModeFactory.noMoreInteractions().verify(data);\n     }\n \n     public VoidMethodStubbable<T> voidMethodStubbable(T mock) {\n-        return new VoidMethodStubbableImpl<T>(mock, mockitoStubber);\n+        return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl);\n     }\n \n     public MockSettingsImpl getMockSettings() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void setAnswersForStubbing(List<Answer> answers) {\n-        mockitoStubber.setAnswersForStubbing(answers);\n+        invocationContainerImpl.setAnswersForStubbing(answers);\n     }\n \n     public InvocationContainer getInvocationContainer() {\n-        return mockitoStubber;\n+        return invocationContainerImpl;\n     }\n }\n--- a/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n+++ b/src/org/mockito/internal/stubbing/ConsecutiveStubbing.java\n import org.mockito.stubbing.OngoingStubbing;\n \n public class ConsecutiveStubbing<T> extends BaseStubbing<T> {\n-    private final MockitoStubber mockitoStubber;\n+    private final InvocationContainerImpl invocationContainerImpl;\n \n-    public ConsecutiveStubbing(MockitoStubber mockitoStubber) {\n-        this.mockitoStubber = mockitoStubber;\n+    public ConsecutiveStubbing(InvocationContainerImpl invocationContainerImpl) {\n+        this.invocationContainerImpl = invocationContainerImpl;\n     }\n \n     public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n-        mockitoStubber.addConsecutiveAnswer(answer);\n+        invocationContainerImpl.addConsecutiveAnswer(answer);\n         return this;\n     }\n     \n     public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n-        mockitoStubber.addConsecutiveAnswer(answer);\n+        invocationContainerImpl.addConsecutiveAnswer(answer);\n         return this;\n     }\n }\n--- a/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n+++ b/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n package org.mockito.internal.stubbing;\n \n import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.verification.RegisteredInvocations;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n import org.mockito.stubbing.OngoingStubbing;\n \n public class OngoingStubbingImpl<T> extends BaseStubbing<T> {\n     \n-    private final MockitoStubber mockitoStubber;\n+    private final InvocationContainerImpl invocationContainerImpl;\n \n-    public OngoingStubbingImpl(MockitoStubber mockitoStubber) {\n-        this.mockitoStubber = mockitoStubber;\n+    public OngoingStubbingImpl(InvocationContainerImpl invocationContainerImpl) {\n+        this.invocationContainerImpl = invocationContainerImpl;\n     }\n \n     public OngoingStubbing<T> thenAnswer(Answer<?> answer) {\n-        mockitoStubber.addAnswer(answer);\n-        return new ConsecutiveStubbing<T>(mockitoStubber);\n+        invocationContainerImpl.addAnswer(answer);\n+        return new ConsecutiveStubbing<T>(invocationContainerImpl);\n     }\n \n     public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {\n-        mockitoStubber.addAnswer(answer);\n-        return new ConsecutiveStubbing<T>(mockitoStubber);\n+        invocationContainerImpl.addAnswer(answer);\n+        return new ConsecutiveStubbing<T>(invocationContainerImpl);\n     }\n \n     public List<Invocation> getRegisteredInvocations() {\n         //TODO interface for tests\n-        return mockitoStubber.getInvocations();\n+        return invocationContainerImpl.getInvocations();\n     }\n }\n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbableImpl.java\n \n public class VoidMethodStubbableImpl<T> implements VoidMethodStubbable<T> {\n     private final T mock;\n-    private MockitoStubber mockitoStubber;\n+    private InvocationContainerImpl invocationContainerImpl;\n \n-    public VoidMethodStubbableImpl(T mock, MockitoStubber mockitoStubber) {\n+    public VoidMethodStubbableImpl(T mock, InvocationContainerImpl invocationContainerImpl) {\n         this.mock = mock;\n-        this.mockitoStubber = mockitoStubber;\n+        this.invocationContainerImpl = invocationContainerImpl;\n     }\n \n     public VoidMethodStubbable<T> toThrow(Throwable throwable) {\n-        mockitoStubber.addAnswerForVoidMethod(new ThrowsException(throwable));\n+        invocationContainerImpl.addAnswerForVoidMethod(new ThrowsException(throwable));\n         return this;\n     }\n \n     public VoidMethodStubbable<T> toReturn() {\n-        mockitoStubber.addAnswerForVoidMethod(new DoesNothing());\n+        invocationContainerImpl.addAnswerForVoidMethod(new DoesNothing());\n         return this;\n     }\n \n     public VoidMethodStubbable<T> toAnswer(Answer<?> answer) {\n-        mockitoStubber.addAnswerForVoidMethod(answer);\n+        invocationContainerImpl.addAnswerForVoidMethod(answer);\n         return this;\n     }\n \n--- a/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n+++ b/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n \n public class MockitoStubberTest extends TestBase{\n \n-    private MockitoStubber mockitoStubber;\n+    private InvocationContainerImpl invocationContainerImpl;\n     private MockingProgress state;\n     private Invocation simpleMethod;\n-    \n+\n     @Before\n     public void setup() {\n         state = new MockingProgressImpl();\n         \n-        mockitoStubber = new MockitoStubber(state);\n-        mockitoStubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n+        invocationContainerImpl = new InvocationContainerImpl(state);\n+        invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());\n         \n         simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();\n     }\n     public void shouldFinishStubbingWhenWrongThrowableIsSet() throws Exception {\n         state.stubbingStarted();\n         try {\n-            mockitoStubber.addAnswer(new ThrowsException(new Exception()));\n+            invocationContainerImpl.addAnswer(new ThrowsException(new Exception()));\n             fail();\n         } catch (MockitoException e) {\n             state.validateState();\n     @Test\n     public void shouldFinishStubbingOnAddingReturnValue() throws Exception {\n         state.stubbingStarted();\n-        mockitoStubber.addAnswer(new Returns(\"test\"));\n+        invocationContainerImpl.addAnswer(new Returns(\"test\"));\n         state.validateState();\n     }\n     \n     @Test\n     public void shouldGetResultsForMethods() throws Throwable {\n-        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n-        mockitoStubber.addAnswer(new Returns(\"simpleMethod\"));\n+        invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));\n+        invocationContainerImpl.addAnswer(new Returns(\"simpleMethod\"));\n         \n         Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();\n-        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n-        mockitoStubber.addAnswer(new ThrowsException(new MyException()));\n+        invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));\n+        invocationContainerImpl.addAnswer(new ThrowsException(new MyException()));\n         \n-        assertEquals(\"simpleMethod\", mockitoStubber.answerTo(simpleMethod));\n+        assertEquals(\"simpleMethod\", invocationContainerImpl.answerTo(simpleMethod));\n         \n         try {\n-            mockitoStubber.answerTo(differentMethod);\n+            invocationContainerImpl.answerTo(differentMethod);\n             fail();\n         } catch (MyException e) {}\n     }\n     \n     @Test\n     public void shouldAddThrowableForVoidMethod() throws Throwable {\n-        mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new MyException()));\n-        mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n+        invocationContainerImpl.addAnswerForVoidMethod(new ThrowsException(new MyException()));\n+        invocationContainerImpl.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n         \n         try {\n-            mockitoStubber.answerTo(simpleMethod);\n+            invocationContainerImpl.answerTo(simpleMethod);\n             fail();\n         } catch (MyException e) {}\n     }\n     \n     @Test\n     public void shouldValidateThrowableForVoidMethod() throws Throwable {\n-        mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new Exception()));\n+        invocationContainerImpl.addAnswerForVoidMethod(new ThrowsException(new Exception()));\n         \n         try {\n-            mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n+            invocationContainerImpl.setMethodForStubbing(new InvocationMatcher(simpleMethod));\n             fail();\n         } catch (MockitoException e) {}\n     }\n     @Test\n     public void shouldValidateThrowable() throws Throwable {\n         try {\n-            mockitoStubber.addAnswer(new ThrowsException(null));\n+            invocationContainerImpl.addAnswer(new ThrowsException(null));\n             fail();\n         } catch (MockitoException e) {}\n     }", "timestamp": 1258316411, "metainfo": ""}