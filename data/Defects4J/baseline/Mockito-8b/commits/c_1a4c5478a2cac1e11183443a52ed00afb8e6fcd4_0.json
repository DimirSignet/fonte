{"sha": "1a4c5478a2cac1e11183443a52ed00afb8e6fcd4", "log": "Javadoc tweaks.", "commit": "\n--- a/src/org/mockito/AdditionalAnswers.java\n+++ b/src/org/mockito/AdditionalAnswers.java\n  */\n package org.mockito;\n \n+import org.mockito.internal.stubbing.answers.ReturnsArgumentAt;\n import org.mockito.internal.stubbing.answers.ReturnsElementsOf;\n import org.mockito.internal.stubbing.defaultanswers.ForwardsInvocations;\n import org.mockito.stubbing.Answer;\n-import org.mockito.internal.stubbing.answers.ReturnsArgumentAt;\n \n import java.util.Collection;\n \n      * The difference with the regular spy:\n      * <ul>\n      *   <li>\n-     *     The regular spy ({@link Mockito#spy(Object)} contains <strong>all</strong> state from the spied instance\n+     *     The regular spy ({@link Mockito#spy(Object)}) contains <strong>all</strong> state from the spied instance\n      *     and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.\n+     *     If you call a method on a regular spy and it internally calls other methods on this spy, those calls are remembered\n+     *     for verifications, and they can be effectively stubbed.\n      *   </li>\n      *   <li>\n      *     The mock that delegates simply delegates all methods to the delegate.\n      *     The delegate is used all the time as methods are delegated onto it.\n+     *     If you call a method on a mock that delegates and it internally calls other methods on this mock,\n+     *     those calls are <strong>not</strong> remembered for verifications, stubbing does not have effect on them, too.\n+     *     Mock that delegates is less powerful than the regular spy but it is useful when the regular spy cannot be created.\n      *   </li>\n      * </ul>\n      * An example with a final class that we want to delegate to:\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *      <a href=\"#25\">25. (New) Verification ignoring stubs (Since 1.9.0)</a><br/>\n  *      <a href=\"#26\">26. (**New**) Mocking details (Since 1.9.5)</a><br/>\n  *      <a href=\"#27\">27. (**New**) Delegate calls to real instance (Since 1.9.5)</a><br/>\n- *      <a href=\"#28\">28. (**New**) Introduction of the internal <code>MockMaker</code> API (Since 1.9.5)</a><br/>\n+ *      <a href=\"#28\">28. (**New**) <code>MockMaker</code> API (Since 1.9.5)</a><br/>\n  * </b>\n  * \n  * <p>\n  *   <li>\n  *     The regular spy ({@link #spy(Object)}) contains <strong>all</strong> state from the spied instance\n  *     and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.\n+ *     If you call a method on a regular spy and it internally calls other methods on this spy, those calls are remembered\n+ *     for verifications, and they can be effectively stubbed.\n  *   </li>\n  *   <li>\n  *     The mock that delegates simply delegates all methods to the delegate.\n  *     The delegate is used all the time as methods are delegated onto it.\n+ *     If you call a method on a mock that delegates and it internally calls other methods on this mock,\n+ *     those calls are <strong>not</strong> remembered for verifications, stubbing does not have effect on them, too.\n+ *     Mock that delegates is less powerful than the regular spy but it is useful when the regular spy cannot be created.\n  *   </li>\n  * </ul>\n  *\n  *\n  *\n  *\n- * <h3 id=\"28\">28. (**New**) <a class=\"meaningful_link\" href=\"#mock_maker_plugin\">Introduction of the internal <code>MockMaker</code> API</a> (Since 1.9.5)</h3>\n- * <p>Thanks to Google Android guys, we now have a brand new extension that allows anyone to write his own mock maker engine.\n- *\n- * <p>How does that work ?\n- * <ul>\n- *     <li>For a Mockito user : Just put the alternate MockMaker plugin, say mockito-dex-maker.jar</li>\n- *     <li>For a Mockito developer :\n- *         <ol style=\"list-style-type: lower-alpha\">\n- *             <li>Write the implementation itself, for example <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n- *             <li>Place a file named <code>org.mockito.plugins.MockMaker</code> in a folder named\n- *             <code>mockito-extensions</code>, the content of this file need to have <strong>one</strong> line with\n- *             the qualified name <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n- *         </ol>\n- *     </li>\n- * </ul>\n- *\n- * <p>Note that if several <code>mockito-extensions/org.mockito.plugins.MockMaker</code> files exists in the classpath\n- * Mockito will only use the first returned by the standard {@link ClassLoader#getResource} mechanism.\n- *\n- * Take a look at the API : {@link org.mockito.plugins.MockMaker}\n+ * <h3 id=\"28\">28. (**New**) <a class=\"meaningful_link\" href=\"#mock_maker_plugin\"><code>MockMaker</code> API</a> (Since 1.9.5)</h3>\n+ * <p>Driven by requirements and patches from Google Android guys Mockito now offers an extension point\n+ *   that allows replacing the proxy generation engine. By default, Mockito uses cglib to create dynamic proxies.\n+ * <p>The extension point is for advanced users that want to extend Mockito. For example, it is now possible\n+ *   to use Mockito for Android testing with a help of dexmaker.\n+ * <p>For more details, motivations and examples please refer to\n+ * the docs for {@link org.mockito.plugins.MockMaker}.\n  *\n  */\n @SuppressWarnings(\"unchecked\")", "timestamp": 1337804896, "metainfo": ""}