{"sha": "529a0ee120874f5ddcaaef0ea5970d7a069bf277", "log": "Enhancement 162. Moved the ignoreStubs() method to the public api.", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     public static InOrder inOrder(Object... mocks) {\n         return MOCKITO_CORE.inOrder(mocks);\n     }\n-  \n+\n+    /**\n+     * Ignores stubbed methods of given mocks for the sake of verification.\n+     * <p>\n+     * Other words: all *stubbed* methods of given mocks are marked *verfied* so that they don't get in a way during verifyNoMoreInteractions().\n+     * <p>\n+     * This method <b>changes the input mocks</b>! This method returns input mocks just for convenience.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     *  //mocking lists for the sake of the example (if you mock List in real you will burn in hell)\n+     *  List mock1 = mock(List.class), mock2 = mock(List.class);\n+     *\n+     *  //stubbing mocks:\n+     *  when(mock1.get(0)).thenReturn(10);\n+     *  when(mock2.get(0)).thenReturn(20);\n+     *\n+     *  //using mocks by calling stubbed get(0) methods:\n+     *  System.out.println(mock1.get(0)); //prints 10\n+     *  System.out.println(mock2.get(0)); //prints 20\n+     *\n+     *  //using mocks by calling clear() methods:\n+     *  mock1.clear();\n+     *  mock2.clear();\n+     *\n+     *  //verification:\n+     *  verify(mock1).clear();\n+     *  verify(mock2).clear();\n+     *\n+     *  //verifyNoMoreInteractions() fails because get() methods were not accounted for.\n+     *  try { verifyNoMoreInteractions(mock1, mock2); } catch (NoInteractionsWanted e);\n+     *\n+     *  //However, if we ignore stubbed methods then we can verifyNoMoreInteractions()\n+     *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));\n+     *\n+     *  //Remember that ignoreStubs() *changes* the input mocks and returns them for convenience.\n+     * <pre>\n+     *\n+     * @param mocks input mocks that will be changed\n+     * @return the same mocks that were passed in as parameters\n+     */\n+    public static Object[] ignoreStubs(Object... mocks) {\n+        return MOCKITO_CORE.ignoreStubs(mocks);\n+    }\n+\n     /**\n      * Allows verifying exact number of invocations. E.g:\n      * <pre>\n     }\n \n     /*\n-     * Helps debugging failing tests. Experimental - use at your own risk. \n+     * Helps debugging failing tests. Experimental - use at your own risk. We're not sure if this method will stay in public api.\n      */\n     @Deprecated\n     static MockitoDebugger debug() {\n         return new MockitoDebuggerImpl();\n     }\n-\n }\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n         List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations();\n         return allInvocations.get(allInvocations.size()-1);\n     }\n+\n+    public Object[] ignoreStubs(Object... mocks) {\n+        for (Object m : mocks) {\n+            InvocationContainer invocationContainer = new MockUtil().getMockHandler(m).getInvocationContainer();\n+            List<Invocation> ins = invocationContainer.getInvocations();\n+            for (Invocation in : ins) {\n+                if (in.stubInfo() != null) {\n+                    in.ignoreForVerification();\n+                }\n+            }\n+        }\n+        return mocks;\n+    }\n }\n--- a/test/org/mockitousage/verification/VerificationExcludingStubsTest.java\n+++ b/test/org/mockitousage/verification/VerificationExcludingStubsTest.java\n import org.mockito.Mock;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.internal.invocation.Invocation;\n-import org.mockito.internal.stubbing.InvocationContainer;\n-import org.mockito.internal.util.MockUtil;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n-\n-import java.util.List;\n \n import static org.mockito.Mockito.*;\n \n         ignoreStubs(mock, new Object());\n     }\n \n-    /**\n-     * Ignores stubbed methods of given mocks for the sake of verification.\n-     * <p>\n-     * Other words: all *stubbed* methods of given mocks are marked *verfied* so that they don't get in a way during verifyNoMoreInteractions().\n-     * <p>\n-     * This method <b>changes the input mocks</b>! This method returns input mocks just for convenience.\n-     * <p>\n-     * Example:\n-     * <pre>\n-     *  //mocking lists for the sake of the example (if you mock List in real you will burn in hell)\n-     *  List mock1 = mock(List.class), mock2 = mock(List.class);\n-     *\n-     *  //stubbing mocks:\n-     *  when(mock1.get(0)).thenReturn(10);\n-     *  when(mock2.get(0)).thenReturn(20);\n-     *\n-     *  //using mocks by calling stubbed get(0) methods:\n-     *  System.out.println(mock1.get(0)); //prints 10\n-     *  System.out.println(mock2.get(0)); //prints 20\n-     *\n-     *  //using mocks by calling clear() methods:\n-     *  mock1.clear();\n-     *  mock2.clear();\n-     *\n-     *  //verification:\n-     *  verify(mock1).clear();\n-     *  verify(mock2).clear();\n-     *\n-     *  //verifyNoMoreInteractions() fails because get() methods were not accounted for.\n-     *  try { verifyNoMoreInteractions(mock1, mock2); } catch (NoInteractionsWanted e);\n-     *\n-     *  //However, if we ignore stubbed methods then we can verifyNoMoreInteractions()\n-     *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));\n-     *\n-     *  //Remember that ignoreStubs() *changes* the input mocks and returns them for convenience.\n-     * <pre>\n-     *\n-     * @param mocks input mocks that will be changed\n-     * @return the same mocks that were passed in as parameters\n-     */\n-    public static Object[] ignoreStubs(Object... mocks) {\n-        for (Object m : mocks) {\n-            InvocationContainer invocationContainer = new MockUtil().getMockHandler(m).getInvocationContainer();\n-            List<Invocation> ins = invocationContainer.getInvocations();\n-            for (Invocation in : ins) {\n-                if (in.stubInfo() != null) {\n-                    in.ignoreForVerification();\n-                }\n-            }\n-        }\n-        return mocks;\n-    }\n }", "timestamp": 1301824256, "metainfo": ""}