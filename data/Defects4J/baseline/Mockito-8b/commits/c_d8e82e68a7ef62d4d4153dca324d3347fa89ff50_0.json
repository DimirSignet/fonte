{"sha": "d8e82e68a7ef62d4d4153dca324d3347fa89ff50", "log": "killing down the verificationModeDecoder  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40976", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.internal.util.ListUtil;\n import org.mockito.internal.util.ListUtil.Filter;\n-import org.mockito.internal.verification.Times;\n-import org.mockito.internal.verification.VerificationModeDecoder;\n \n public class InvocationsFinder {\n \n      * if wanted is 1 and mode is times(x), where x != 2 then returns\n      * 1,1,1\n      */\n-    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, Times mode) {\n+    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n         List<Invocation> unverified = removeVerifiedInOrder(invocations);\n         List<Invocation> firstChunk = getFirstMatchingChunk(wanted, unverified);\n         \n-        VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n-        if (!decoder.matchesActualCount(firstChunk.size())) {\n+        if (wantedCount != firstChunk.size()) {\n             return this.findAllMatchingUnverifiedChunks(invocations, wanted);\n         } else {\n             return firstChunk;\n--- a/src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/NumberOfInvocationsInOrderChecker.java\n     \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, Times mode) {\n         VerificationModeDecoder decoder = new VerificationModeDecoder(mode);\n-        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode);\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode.wantedCount());\n         \n         boolean noMatchFound = chunk.size() == 0;\n         if (decoder.neverWanted() && noMatchFound) {\n--- a/src/org/mockito/internal/verification/Times.java\n+++ b/src/org/mockito/internal/verification/Times.java\n     }\n     \n     public void verify(VerificationData data) {\n-        MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n-        NumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\n-        \n         if (wantedInvocationCount > 0) {\n+            MissingInvocationChecker missingInvocation = new MissingInvocationChecker();\n             missingInvocation.verify(data.getAllInvocations(), data.getWanted());\n         }\n+        NumberOfInvocationsChecker numberOfInvocations = new NumberOfInvocationsChecker();\n         numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), this);\n     }\n     \n         List<Invocation> allInvocations = data.getAllInvocations();\n         InvocationMatcher wanted = data.getWanted();\n         \n-        MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n-        NumberOfInvocationsInOrderChecker numberOfCalls = new NumberOfInvocationsInOrderChecker();\n-        \n         if (wantedCount() > 0) {\n+            MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();\n             missingInvocation.verify(allInvocations, wanted, this);\n         }\n-        \n+        NumberOfInvocationsInOrderChecker numberOfCalls = new NumberOfInvocationsInOrderChecker();\n         numberOfCalls.verify(allInvocations, wanted, this);\n     }\n     \n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.exceptions.base.HasStackTrace;\n-import org.mockito.internal.progress.VerificationModeBuilder;\n-import org.mockito.internal.verification.Times;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Test\n     public void shouldFindMatchingChunk() throws Exception {\n-        Times inOrderMode = new VerificationModeBuilder().times(2).inOrder();\n-        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), inOrderMode);\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 2);\n         assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo));\n     }\n     \n         Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n         invocations.add(simpleMethodInvocationThree);\n         \n-        Times atLeastOnceInOrder = new VerificationModeBuilder().inOrder();\n-        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnceInOrder);\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 1);\n         assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n     }\n     \n         Invocation simpleMethodInvocationThree = new InvocationBuilder().mock(mock).toInvocation();\n         invocations.add(simpleMethodInvocationThree);\n         \n-        Times atLeastOnceInOrder = new VerificationModeBuilder().times(100).inOrder();\n-        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), atLeastOnceInOrder);\n+        List<Invocation> chunk = finder.findMatchingChunk(invocations, new InvocationMatcher(simpleMethodInvocation), 1);\n         assertThat(chunk, hasExactlyInOrder(simpleMethodInvocation, simpleMethodInvocationTwo, simpleMethodInvocationThree));\n     }\n     \n--- a/test/org/mockito/internal/verification/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/InvocationsFinderStub.java\n     }\n     \n     @Override\n-    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, Times mode) {\n+    public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n         return validMatchingChunkToReturn;\n     }\n ", "timestamp": 1223982102, "metainfo": ""}