{"sha": "d883cda4d1e73664c623042d283b637990f6cc0d", "log": "Started pulling up methods to the MockHandler.", "commit": "\n--- a/src/org/mockito/internal/InternalMockHandler.java\n+++ b/src/org/mockito/internal/InternalMockHandler.java\n \n import java.util.List;\n \n-import org.mockito.Incubating;\n import org.mockito.internal.stubbing.InvocationContainer;\n-import org.mockito.invocation.Invocation;\n import org.mockito.invocation.MockHandler;\n import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n     InvocationContainer getInvocationContainer();\n \n-    /**\n-     * Takes an invocation object and handles it.\n-     * <p>\n-     * The default implementation provided by Mockito handles invocations by recording\n-     * method calls on mocks for further verification, captures the stubbing information when mock is stubbed,\n-     * returns the stubbed values for invocations that have been stubbed, and much more.\n-     *\n-     * @param invocation The invocation to handle\n-     * @return Result\n-     * @throws Throwable Throwable\n-     */\n-    @Incubating\n-    Object handle(Invocation invocation) throws Throwable;\n }\n--- a/src/org/mockito/invocation/MockHandler.java\n+++ b/src/org/mockito/invocation/MockHandler.java\n  * Mockito handler of an invocation on a mock. This is a core part of the API, the heart of Mockito.\n  * See also the {@link org.mockito.plugins.MockMaker}.\n  * <p>\n- * This api is work in progress, hence a marker interface. Do not provide your own implementations.\n+ * This api is work in progress. Do not provide your own implementations.\n  * Mockito will provide you with the implementation via other {@link org.mockito.plugins.MockMaker} methods.\n  */\n @Incubating\n-public interface MockHandler extends Serializable {}\n+public interface MockHandler extends Serializable {\n+    /**\n+     * Takes an invocation object and handles it.\n+     * <p>\n+     * The default implementation provided by Mockito handles invocations by recording\n+     * method calls on mocks for further verification, captures the stubbing information when mock is stubbed,\n+     * returns the stubbed values for invocations that have been stubbed, and much more.\n+     *\n+     * @param invocation The invocation to handle\n+     * @return Result\n+     * @throws Throwable Throwable\n+     */\n+    @Incubating\n+    Object handle(Invocation invocation) throws Throwable;\n+}\n--- a/src/org/mockito/plugins/MockMaker.java\n+++ b/src/org/mockito/plugins/MockMaker.java\n     );\n \n     /**\n-     * Returns the handler for the {@code mock}.\n+     * Returns the handler for the {@code mock}. <b>Do not</b> provide your own implementations at this time\n+     * because the work on the {@link MockHandler} api is not completed.\n+     * Use the instance provided to you by Mockito at {@link #createMock} or {@link #resetMock}.\n      *\n      * @param mock The mock instance.\n      * @return may return null - it means that there is no handler attached to provided object.", "timestamp": 1334524598, "metainfo": ""}