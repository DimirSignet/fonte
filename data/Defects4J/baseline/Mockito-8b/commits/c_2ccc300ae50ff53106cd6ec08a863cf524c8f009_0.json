{"sha": "2ccc300ae50ff53106cd6ec08a863cf524c8f009", "log": "issue 208 : added anyMapOf", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n+     * @param clazz The type to avoid casting\n      * @return <code>null</code>.\n      */\n     public static <T> T any(Class<T> clazz) {\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n+     * @param clazz Type owned by the list to avoid casting\n      * @return empty List.\n      */\n     public static <T> List<T> anyListOf(Class<T> clazz) {\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n+     * @param clazz Type owned by the Set to avoid casting\n      * @return empty Set\n      */\n     public static <T> Set<T> anySetOf(Class<T> clazz) {\n      */\n     public static Map anyMap() {\n         return reportMatcher(Any.ANY).returnMap();\n-    }    \n+    }\n+\n+    /**\n+     * generic friendly alias to {@link Matchers#anyMap()}.\n+     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n+     * <p>\n+     * any Map or null\n+     * <p>\n+     * See examples in javadoc for {@link Matchers} class\n+     *\n+     * @param keyClazz Type of the map key to avoid casting\n+     * @param valueClazz Type of the value to avoid casting\n+     * @return empty Map.\n+     */\n+    public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n+        return reportMatcher(Any.ANY).returnMap();\n+    }\n     \n     /**\n      * any Collection or null.\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      * \n+     * @param clazz Type owned by the collection to avoid casting\n      * @return empty Collection.\n      */\n     public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n+     * @param clazz Type to avoid casting\n      * @return <code>null</code>.\n      */\n     public static <T> T isNull(Class<T> clazz) {\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n+     * @param clazz Type to avoid casting\n      * @return <code>null</code>.\n      */\n     public static <T> T notNull(Class<T> clazz) {\n      * <p>\n      * See examples in javadoc for {@link Matchers} class\n      *\n+     * @param clazz Type to avoid casting\n      * @return <code>null</code>.\n      */\n     public static <T> T isNotNull(Class<T> clazz) {\n--- a/test/org/mockitousage/matchers/MoreMatchersTest.java\n+++ b/test/org/mockitousage/matchers/MoreMatchersTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n+import java.util.*;\n \n import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.verify;\n     }\n \n     @Test\n+    public void shouldHelpOutWithUnnecessaryCastingOfMaps() {\n+        //Below yields compiler warning:\n+        //when(mock.setArgMethod(anySet())).thenReturn(\"set\");\n+        when(mock.forMap(anyMapOf(String.class, String.class))).thenReturn(\"map\");\n+\n+        assertEquals(\"map\", mock.forMap(new HashMap<String, String>()));\n+        assertEquals(\"map\", mock.forMap(Collections.<String, String>emptyMap()));\n+    }\n+\n+    @Test\n     public void shouldHelpOutWithUnnecessaryCastingOfCollections() {\n         //Below yields compiler warning:\n         //when(mock.setArgMethod(anySet())).thenReturn(\"set\");", "timestamp": 1302289933, "metainfo": ""}