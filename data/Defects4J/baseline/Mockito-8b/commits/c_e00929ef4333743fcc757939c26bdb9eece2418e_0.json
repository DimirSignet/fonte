{"sha": "e00929ef4333743fcc757939c26bdb9eece2418e", "log": "Pushed out the complexity around building the release notes into the buildSrc. In future I want to extract it into a completely separate library / gradle plugin.", "commit": "\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilder.java\n+package org.mockito.release.notes;\n+\n+import java.io.File;\n+\n+public interface ReleaseNotesBuilder {\n+\n+    /**\n+     * Updates release notes in specified file. The 'from' revision is extracted from the file. The 'to' revision needs to be supplied\n+     *\n+     * @param notesFile the file to update\n+     * @param toRevision git revision (can be tag name or HEAD)\n+     */\n+    void updateNotes(File notesFile, String toRevision);\n+\n+    /**\n+     * Returns contributions between two revisions. Revisions can also be tag names or HEAD, etc.\n+     *\n+     * @param fromRevision start revision\n+     * @param toRevision end revision\n+     * @return the contribution set, never null\n+     */\n+    ContributionSet getContributionsBetween(String fromRevision, String toRevision);\n+}\n--- /dev/null\n+++ b/buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilderFactory.java\n+package org.mockito.release.notes;\n+\n+import org.gradle.api.Project;\n+import org.mockito.release.notes.internal.DefaultReleaseNotesBuilder;\n+\n+class ReleaseNotesBuilderFactory {\n+    ReleaseNotesBuilder createBuilder(Project project, String gitHubToken) {\n+        return new DefaultReleaseNotesBuilder(project, gitHubToken);\n+    }\n+}", "timestamp": 1408888953, "metainfo": ""}