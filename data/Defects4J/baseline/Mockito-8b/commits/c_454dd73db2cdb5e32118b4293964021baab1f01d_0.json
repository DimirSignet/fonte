{"sha": "454dd73db2cdb5e32118b4293964021baab1f01d", "log": "more javadocs & refactorings  --HG-- rename : src/org/mockito/configuration/IMockitoConfiguration.java => src/org/mockito/IMockitoConfiguration.java rename : src/org/mockito/configuration/ReturnValues.java => src/org/mockito/ReturnValues.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401137", "commit": "\n--- a/src/org/mockito/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/DefaultMockitoConfiguration.java\n package org.mockito;\n \n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n \n //TODO javadocs\n--- /dev/null\n+++ b/src/org/mockito/IMockitoConfiguration.java\n+package org.mockito;\n+\n+/**\n+ * Use it to configure Mockito. For now there are not many configuration options but it may change in future.\n+ * <p>\n+ * Currently, configuring Mockito can help you changing {@link ReturnValues} for all mocks. ReturnValues determines the return values for unstubbed invocations.\n+ * <p>\n+ * To configure Mockito create exactly <b>org.mockito.MockitoConfiguration</b> class that implements this interface.\n+ * <p>\n+ * Configuring Mockito is completely <b>optional</b> - nothing happens if there isn't any <b>org.mockito.MockitoConfiguration</b> on the classpath. \n+ * <p>\n+ * <b>org.mockito.MockitoConfiguration</b> must implement IMockitoConfiguration or extend {@link DefaultMockitoConfiguration}\n+ * <p>\n+ *  \n+ * \n+ */\n+public interface IMockitoConfiguration {\n+\n+    ReturnValues getReturnValues();\n+\n+}\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \n import java.util.Arrays;\n \n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n--- /dev/null\n+++ b/src/org/mockito/ReturnValues.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+\n+/**\n+ * Configures return values for an unstubbed invocation\n+ */\n+public interface ReturnValues {\n+\n+    /**\n+     * returns value for an unstubbed invocation\n+     * \n+     * @param invocation placeholder for mock and a method\n+     * @return the return value\n+     */\n+    Object valueFor(InvocationOnMock invocation);\n+}\n--- a/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n+++ b/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n \n import java.lang.reflect.Modifier;\n \n+import org.mockito.DefaultMockitoConfiguration;\n+import org.mockito.IMockitoConfiguration;\n import org.mockito.Mockito;\n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.configuration.MockitoConfiguration;\n import org.mockito.internal.returnvalues.EmptyReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n+ * @deprecated\n+ * \n+ * Please see {@link IMockitoConfiguration} for info on configuring Mockito\n+ * <p>\n+ * \n  * Allows configuring Mockito to enable custom 'mocking style'. \n  * It can be useful when working with legacy code, etc.\n  * <p>\n  * <p>\n  * Configuring Mockito is a new concept that we evaluate. Please let us know if you find it useful/harmful. \n  */\n+@Deprecated\n @SuppressWarnings(\"deprecation\")\n public class ConfigurationSupport {\n     \n     private static final ReturnValues DEFAULT_RETURN_VALUES = new EmptyReturnValues();\n     \n     /**\n+     * @deprecated\n+     * \n+     * Please use {@link DefaultMockitoConfiguration} if you need default return values for mocks.\n+     * <p>\n      * this is what Mockito returns by default for given invocation \n      * <p>\n      * See examples in javadoc for {@link ConfigurationSupport}\n      * @param invocation\n      * @return default return value\n      */\n+    @Deprecated\n     public static Object defaultValueFor(InvocationOnMock invocation) {\n         return DEFAULT_RETURN_VALUES.valueFor(invocation);\n     }\n      * \n      * Please implement IMockitoConfiguration to configure Mockito globally. {@link IMockitoConfiguration}\n      * <p>\n-     * Please use {@link Mockito#mock(Class, org.mockito.configuration.ReturnValues)} to configure return values 'per mock'\n+     * Please use {@link Mockito#mock(Class, org.mockito.ReturnValues)} to configure return values 'per mock'\n      * <p>\n      * \n      * This method returns a configuration object\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n \n import net.sf.cglib.proxy.MethodProxy;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.internal.creation.MockAwareInterceptor;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n--- a/src/org/mockito/internal/configuration/Configuration.java\n+++ b/src/org/mockito/internal/configuration/Configuration.java\n package org.mockito.internal.configuration;\n \n import org.mockito.DefaultMockitoConfiguration;\n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.IMockitoConfiguration;\n+import org.mockito.ReturnValues;\n import org.mockito.exceptions.base.MockitoException;\n \n /**\n--- a/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n package org.mockito.internal.configuration;\n \n-import org.mockito.configuration.IMockitoConfiguration;\n+import org.mockito.IMockitoConfiguration;\n import org.mockito.exceptions.misusing.MockitoConfigurationException;\n \n public class GlobalConfiguration {\n--- a/src/org/mockito/internal/configuration/MockitoConfiguration.java\n+++ b/src/org/mockito/internal/configuration/MockitoConfiguration.java\n  */\n package org.mockito.internal.configuration;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.configuration.experimental.ConfigurationSupport;\n \n /**\n--- a/src/org/mockito/internal/returnvalues/EmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/EmptyReturnValues.java\n import java.util.TreeMap;\n import java.util.TreeSet;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.internal.creation.ClassNameFinder;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.Primitives;\n--- a/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n  */\n package org.mockito.internal.returnvalues;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.invocation.InvocationOnMock;\n--- a/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java\n  */\n package org.mockito.internal.returnvalues;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n--- a/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/SmartNullReturnValues.java\n import net.sf.cglib.proxy.MethodInterceptor;\n import net.sf.cglib.proxy.MethodProxy;\n \n+import org.mockito.IMockitoConfiguration;\n import org.mockito.Mockito;\n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.exceptions.cause.BecauseThisMethodWasNotStubbed;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.Factory;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.MockHandler;\n--- a/test/org/mockito/MockitoConfiguration.java\n+++ b/test/org/mockito/MockitoConfiguration.java\n package org.mockito;\n \n-import org.mockito.configuration.IMockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n import org.mockito.internal.configuration.Configuration;\n \n @SuppressWarnings(\"deprecation\")\n--- a/test/org/mockito/configuration/experimental/ConfigurationTest.java\n+++ b/test/org/mockito/configuration/experimental/ConfigurationTest.java\n import org.junit.After;\n import org.junit.Test;\n import org.mockito.MockitoConfiguration;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockitousage.IMethods;\n--- a/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n+++ b/test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java\n package org.mockito.internal.returnvalues;\n \n import org.junit.Test;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.exceptions.verification.SmartNullPointerException;\n import org.mockito.internal.invocation.Invocation;\n import org.mockitoutil.TestBase;\n--- a/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/FriendlyReturnValues.java\n package org.mockitousage.examples.configure;\n \n import org.mockito.Mockito;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockito.invocation.InvocationOnMock;\n \n /**\n  * tries to return mocks instead of nulls\n  */\n+@SuppressWarnings(\"deprecation\")\n public class FriendlyReturnValues implements ReturnValues {\n \n+    @SuppressWarnings(\"deprecation\")\n     public Object valueFor(InvocationOnMock invocation) {\n \n         Class<?> returnType = invocation.getMethod().getReturnType();\n--- a/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n+++ b/test/org/mockitousage/examples/configure/withstaticutility/AllowsFakingReturnValues.java\n import java.util.HashSet;\n import java.util.Set;\n \n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockito.internal.configuration.MockitoConfiguration;\n import org.mockito.invocation.InvocationOnMock;\n--- a/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n import org.junit.After;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.mockito.configuration.ReturnValues;\n+import org.mockito.ReturnValues;\n import org.mockito.configuration.experimental.ConfigurationSupport;\n import org.mockito.internal.returnvalues.GloballyConfiguredReturnValues;\n import org.mockito.invocation.InvocationOnMock;", "timestamp": 1231547599, "metainfo": ""}