{"sha": "6f0861dfc8b22d5819104f3a2dd53e237126e69c", "log": "Cleanly the use the reporter in ArgumentMatcherStorage + use of defensive copy for the reporting", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n import org.mockito.exceptions.base.MockitoAssertionError;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.exceptions.misusing.*;\n-import org.mockito.exceptions.verification.*;\n+import org.mockito.exceptions.misusing.FriendlyReminderException;\n+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.exceptions.misusing.MissingMethodInvocationException;\n+import org.mockito.exceptions.misusing.NotAMockException;\n+import org.mockito.exceptions.misusing.NullInsteadOfMockException;\n+import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n+import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n+import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n+import org.mockito.exceptions.verification.NeverWantedButInvoked;\n+import org.mockito.exceptions.verification.NoInteractionsWanted;\n+import org.mockito.exceptions.verification.SmartNullPointerException;\n+import org.mockito.exceptions.verification.TooLittleActualInvocations;\n+import org.mockito.exceptions.verification.TooManyActualInvocations;\n+import org.mockito.exceptions.verification.VerificationInOrderFailure;\n+import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockito.exceptions.verification.junit.JUnitTool;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n                 \"    //correct:\",\n                 \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n                 \"\",\n-                \"For more info see javadoc for Matchers class.\"\n-        ));\n-    }\n+                \"For more info see javadoc for Matchers class.\",\n+                \"\"\n+        ));\n+    }\n+\n+    public void incorrectUseOfAdditionalMatchers(String additionalMatcherName, int expectedSubMatchersCount, Collection<LocalizedMatcher> matcherStack) {\n+        throw new InvalidUseOfMatchersException(join(\n+                \"Invalid use of argument matchers inside additional matcher \" + additionalMatcherName + \" !\",\n+                new Location(),\n+                \"\",\n+                expectedSubMatchersCount + \" sub matchers expected, \" + matcherStack.size() + \" recorded:\",\n+                locationsOf(matcherStack),\n+                \"\",\n+                \"This exception may occur if matchers are combined with raw values:\",\n+                \"    //incorrect:\",\n+                \"    someMethod(AdditionalMatchers.and(isNotNull(), \\\"raw String\\\");\",\n+                \"When using matchers, all arguments have to be provided by matchers.\",\n+                \"For example:\",\n+                \"    //correct:\",\n+                \"    someMethod(AdditionalMatchers.and(isNotNull(), eq(\\\"raw String\\\"));\",\n+                \"\",\n+                \"For more info see javadoc for Matchers and AdditionalMatchers classes.\",\n+                \"\"\n+        ));\n+    }\n+\n+    public void reportNoSubMatchersFound(String additionalMatcherName) {\n+        throw new InvalidUseOfMatchersException(join(\n+                \"No matchers found for additional matcher \" + additionalMatcherName,\n+                new Location(),\n+                \"\"\n+        ));\n+    }\n+\n \n     private Object locationsOf(Collection<LocalizedMatcher> matchers) {\n         List<String> description = new ArrayList<String>();\n         throw new MockitoAssertionError(join(\"Wanted at most \" + pluralize(maxNumberOfInvocations) + \" but was \" + foundSize));\n     }\n \n-    public void misplacedArgumentMatcher(Location location) {\n+    public void misplacedArgumentMatcher(List<LocalizedMatcher> lastMatchers) {\n         throw new InvalidUseOfMatchersException(join(\n                 \"Misplaced argument matcher detected here:\",\n-                location,\n+                locationsOf(lastMatchers),\n                 \"\",\n                 \"You cannot use argument matchers outside of verification or stubbing.\",\n                 \"Examples of correct usage of argument matchers:\",\n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n \n package org.mockito.internal.invocation;\n \n-import java.io.Serializable;\n-import java.util.List;\n-\n import org.hamcrest.Matcher;\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.progress.ArgumentMatcherStorage;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n \n @SuppressWarnings(\"unchecked\")\n public class MatchersBinder implements Serializable {\n             int recordedMatchersSize = matchers.size();\n             int expectedMatchersSize = invocation.getArgumentsCount();\n             if (expectedMatchersSize != recordedMatchersSize) {\n-                new Reporter().invalidUseOfMatchers(expectedMatchersSize, (List<LocalizedMatcher>)matchers);\n+                List<LocalizedMatcher> lastMatchers = new ArrayList<LocalizedMatcher>((List<LocalizedMatcher>) matchers);\n+                new Reporter().invalidUseOfMatchers(expectedMatchersSize, lastMatchers);\n             }\n         }\n     }\n--- a/src/org/mockito/internal/progress/ArgumentMatcherStorage.java\n+++ b/src/org/mockito/internal/progress/ArgumentMatcherStorage.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.progress;\n \n+import org.hamcrest.Matcher;\n+\n import java.util.List;\n-\n-import org.hamcrest.Matcher;\n \n @SuppressWarnings(\"unchecked\")\n public interface ArgumentMatcherStorage {\n--- a/src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java\n+++ b/src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java\n \n package org.mockito.internal.progress;\n \n+import org.hamcrest.Matcher;\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.matchers.And;\n+import org.mockito.internal.matchers.LocalizedMatcher;\n+import org.mockito.internal.matchers.Not;\n+import org.mockito.internal.matchers.Or;\n+\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Stack;\n \n-import org.hamcrest.Matcher;\n-import org.mockito.exceptions.Reporter;\n-import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n-import org.mockito.internal.matchers.And;\n-import org.mockito.internal.matchers.LocalizedMatcher;\n-import org.mockito.internal.matchers.Not;\n-import org.mockito.internal.matchers.Or;\n-\n @SuppressWarnings(\"unchecked\")\n public class ArgumentMatcherStorageImpl implements ArgumentMatcherStorage {\n-    \n+\n+    public static final int TWO_SUB_MATCHERS = 2;\n+    public static final int ONE_SUB_MATCHER = 1;\n     private Stack<LocalizedMatcher> matcherStack = new Stack<LocalizedMatcher>();\n     \n     /* (non-Javadoc)\n      * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportAnd()\n      */\n     public HandyReturnValues reportAnd() {\n-        assertState(!matcherStack.isEmpty(), \"No matchers found for And(?).\");\n-        And and = new And(popLastArgumentMatchers(2));\n+        assertStateFor(\"And(?)\", TWO_SUB_MATCHERS);\n+        And and = new And(popLastArgumentMatchers(TWO_SUB_MATCHERS));\n         matcherStack.push(new LocalizedMatcher(and));\n+        return new HandyReturnValues();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportOr()\n+     */\n+    public HandyReturnValues reportOr() {\n+        assertStateFor(\"Or(?)\", TWO_SUB_MATCHERS);\n+        Or or = new Or(popLastArgumentMatchers(TWO_SUB_MATCHERS));\n+        matcherStack.push(new LocalizedMatcher(or));\n         return new HandyReturnValues();\n     }\n \n      * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportNot()\n      */\n     public HandyReturnValues reportNot() {\n-        assertState(!matcherStack.isEmpty(), \"No matchers found for Not(?).\");\n-        Not not = new Not(popLastArgumentMatchers(1).get(0));\n+        assertStateFor(\"Not(?)\", ONE_SUB_MATCHER);\n+        Not not = new Not(popLastArgumentMatchers(ONE_SUB_MATCHER).get(0));\n         matcherStack.push(new LocalizedMatcher(not));\n         return new HandyReturnValues();\n     }\n \n+    private void assertStateFor(String additionalMatcherName, int subMatchersCount) {\n+        assertMatchersFoundFor(additionalMatcherName);\n+        assertIncorrectUseOfAdditionalMatchers(additionalMatcherName, subMatchersCount);\n+    }\n+\n     private List<Matcher> popLastArgumentMatchers(int count) {\n-        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n-        assertState(matcherStack.size() >= count,\n-                \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n         List<Matcher> result = new LinkedList<Matcher>();\n         result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n         for (int i = 0; i < count; i++) {\n         return result;\n     }\n \n-    private void assertState(boolean toAssert, String message) {\n-        if (!toAssert) {\n+    private void assertMatchersFoundFor(String additionalMatcherName) {\n+        if (matcherStack.isEmpty()) {\n             matcherStack.clear();\n-            throw new InvalidUseOfMatchersException(message);\n+            new Reporter().reportNoSubMatchersFound(additionalMatcherName);\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportOr()\n-     */\n-    public HandyReturnValues reportOr() {\n-        assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n-        Or or = new Or(popLastArgumentMatchers(2));\n-        matcherStack.push(new LocalizedMatcher(or));\n-        return new HandyReturnValues();\n+    private void assertIncorrectUseOfAdditionalMatchers(String additionalMatcherName, int count) {\n+        if(matcherStack.size() < count) {\n+            ArrayList<LocalizedMatcher> lastMatchers = new ArrayList<LocalizedMatcher>(matcherStack);\n+            matcherStack.clear();\n+            new Reporter().incorrectUseOfAdditionalMatchers(additionalMatcherName, count, lastMatchers);\n+        }\n     }\n \n     /* (non-Javadoc)\n      */\n     public void validateState() {\n         if (!matcherStack.isEmpty()) {\n-            LocalizedMatcher lastMatcher = matcherStack.lastElement();\n+            ArrayList lastMatchers = new ArrayList<LocalizedMatcher>(matcherStack);\n             matcherStack.clear();\n-            new Reporter().misplacedArgumentMatcher(lastMatcher.getLocation());\n+            new Reporter().misplacedArgumentMatcher(lastMatchers);\n         }\n     }\n \n--- a/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n+++ b/test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java\n \n package org.mockitousage.matchers;\n \n-import static org.mockito.Matchers.*;\n-\n-import org.junit.After;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.mockito.AdditionalMatchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n+import org.mockito.runners.MockitoJUnitRunner;\n import org.mockitousage.IMethods;\n-import org.mockitoutil.TestBase;\n \n-public class InvalidUseOfMatchersTest extends TestBase {\n+import static org.fest.assertions.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class InvalidUseOfMatchersTest {\n \n     @Mock private IMethods mock;\n \n-    @After\n-    public void resetState() {\n-        super.resetState();\n+    @Test\n+    public void should_detect_wrong_number_of_matchers_when_stubbing() {\n+        when(mock.threeArgumentMethod(1, \"2\", \"3\")).thenReturn(null);\n+        try {\n+            when(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).thenReturn(null);\n+            fail();\n+        } catch (InvalidUseOfMatchersException e) {\n+            assertThat(e.getMessage())\n+                      .contains(\"3 matchers expected\")\n+                      .contains(\"1 recorded\");\n+        }\n     }\n \n     @Test\n-    public void shouldDetectWrongNumberOfMatchersWhenStubbing() {\n-        Mockito.when(mock.threeArgumentMethod(1, \"2\", \"3\")).thenReturn(null);\n-        try {\n-            Mockito.when(mock.threeArgumentMethod(1, eq(\"2\"), \"3\")).thenReturn(null);\n-            fail();\n-        } catch (InvalidUseOfMatchersException e) {}\n-    }\n-\n-    @Test\n-    public void shouldDetectStupidUseOfMatchersWhenVerifying() {\n+    public void should_detect_stupid_use_of_matchers_when_verifying() {\n         mock.oneArg(true);\n         eq(\"that's the stupid way\");\n         eq(\"of using matchers\");\n         try {\n             Mockito.verify(mock).oneArg(true);\n             fail();\n-        } catch (InvalidUseOfMatchersException e) {}\n+        } catch (InvalidUseOfMatchersException e) {\n+            assertThat(e.getMessage())\n+                      .contains(\"Misplaced argument matcher detected here\");\n+            e.printStackTrace();\n+        }\n     }\n \n     @Test\n-    public void shouldScreamWhenMatchersAreInvalid() {\n+    public void should_not_scream_on_correct_usage() throws Exception {\n         mock.simpleMethod(AdditionalMatchers.not(eq(\"asd\")));\n+        mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), eq(\"asd\")));\n+    }\n+\n+    @Test\n+    public void should_scream_when_no_matchers_inside_not() {\n         try {\n             mock.simpleMethod(AdditionalMatchers.not(\"jkl\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertContains(\"No matchers found for Not(?).\", e.getMessage());\n+            assertThat(e.getMessage())\n+                    .contains(\"No matchers found for\")\n+                    .containsIgnoringCase(\"Not(?)\");\n         }\n+    }\n \n+    @Test\n+    public void should_scream_when_not_enough_matchers_inside_or_AddtionalMatcher() {\n         try {\n             mock.simpleMethod(AdditionalMatchers.or(eq(\"jkl\"), \"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertContains(\"2 matchers expected, 1 recorded.\", e.getMessage());\n+            assertThat(e.getMessage())\n+                    .containsIgnoringCase(\"inside additional matcher Or(?)\")\n+                    .contains(\"2 sub matchers expected\")\n+                    .contains(\"1 recorded\");\n         }\n+    }\n \n+    @Test\n+    public void should_scream_when_Matchers_count_dont_match_parameter_count() {\n         try {\n             mock.threeArgumentMethod(1, \"asd\", eq(\"asd\"));\n             fail();\n         } catch (InvalidUseOfMatchersException e) {\n-            assertContains(\"3 matchers expected, 1 recorded.\", e.getMessage());\n+            assertThat(e.getMessage())\n+                      .contains(\"3 matchers expected\")\n+                      .contains(\"1 recorded\");\n         }\n     }\n }", "timestamp": 1331322559, "metainfo": ""}