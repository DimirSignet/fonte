{"sha": "d4c2e817d969ace204a9e93dccc23edf4c53c500", "log": "Fixed issue 99 In order to avoid NPEs when vm autounboxes primitives I made the dummy return values for parameters not nulls for primitive wrapper types  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401566", "commit": "\n--- a/src/org/mockito/ArgumentCaptor.java\n+++ b/src/org/mockito/ArgumentCaptor.java\n import java.util.List;\n \n import org.mockito.internal.matchers.CapturingMatcher;\n+import org.mockito.internal.progress.HandyReturnValues;\n \n /**\n  * Use it to capture argument values for further assertions.\n  * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n  * For example:\n  * <pre>\n- *   ArgumentCaptor&lt;Person&gt; argument = new ArgumentCaptor&lt;Person&gt;();\n+ *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n  *   verify(mock).doSomething(argument.capture());\n  *   assertEquals(\"John\", argument.getValue().getName());\n  * </pre>\n  */\n public class ArgumentCaptor<T> {\n     \n-    private CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();\n+    private final CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();\n+    private final Class<T> clazz;\n+\n+    /**\n+     * @deprecated\n+     * \n+     * <b>Please use factory method {@link ArgumentCaptor#forClass(Class)} to create captors</b>\n+     * <p>\n+     * This is required to avoid NullPointerExceptions when autoUnboxing primitive types.\n+     * See issue 99.\n+     * <p>\n+     * Example:\n+     * <pre>\n+     *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n+     *   verify(mock).doSomething(argument.capture());\n+     *   assertEquals(\"John\", argument.getValue().getName());\n+     * </pre>\n+     */\n+    @Deprecated\n+    public ArgumentCaptor() {\n+        this.clazz = null;\n+    }\n+\n+    ArgumentCaptor(Class<T> clazz) {\n+        this.clazz = clazz;\n+    }\n \n     /**\n      * Use it to capture the argument. This method <b>must be used inside of verification</b>.\n      */\n     public T capture() {\n         Mockito.argThat(capturingMatcher);\n-        return null;\n+        return new HandyReturnValues().returnFor(clazz);\n     }\n \n     /**\n      * <p>\n      * Example: \n      * <pre>\n-     *   ArgumentCaptor&lt;Person&gt; peopleCaptor = new ArgumentCaptor&lt;Person&gt;();\n+     *   ArgumentCaptor&lt;Person&gt; peopleCaptor = ArgumentCaptor.forClass(Person.class);\n      *   verify(mock, times(2)).doSomething(peopleCaptor.capture());\n      *   \n      *   List&lt;Person&gt; capturedPeople = peopleCaptor.getAllValues();\n     public List<T> getAllValues() {\n         return this.capturingMatcher.getAllValues();\n     }\n+\n+    public static <T> ArgumentCaptor<T> forClass(Class<T> clazz) {\n+        return new ArgumentCaptor<T>(clazz);\n+    }\n }\n--- a/src/org/mockito/internal/progress/HandyReturnValues.java\n+++ b/src/org/mockito/internal/progress/HandyReturnValues.java\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+\n+import org.mockito.internal.util.Primitives;\n \n @SuppressWarnings(\"unchecked\")\n public class HandyReturnValues {\n         return \"\";\n     }\n \n+    public <T> T returnFor(Class<T> clazz) {\n+        if (Primitives.isPrimitiveWrapper(clazz)) {\n+            return Primitives.primitiveWrapperOf(clazz);\n+        }\n+        return null;\n+    }\n+\n     public Map returnMap() {\n         return new HashMap();\n     }\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n import java.util.HashMap;\n import java.util.Map;\n \n+@SuppressWarnings(\"unchecked\")\n public class Primitives {\n     \n     public static boolean isPrimitiveWrapper(Class<?> type) {\n         return wrapperReturnValues.containsKey(type);\n     }\n     \n-    public static Object primitiveWrapperOf(Class<?> type) {\n-        return wrapperReturnValues.get(type);\n+    public static <T> T primitiveWrapperOf(Class<T> type) {\n+        return (T) wrapperReturnValues.get(type);\n     }\n     \n     public static Class<?> primitiveTypeOf(Class<?> clazz) {\n--- /dev/null\n+++ b/test/org/mockito/TestArgumentCaptorTest.java\n+package org.mockito;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+import static org.mockito.ArgumentCaptor.*;\n+\n+\n+public class TestArgumentCaptorTest extends TestBase {\n+    \n+    @Test\n+    public void shouldReturnDummyValueThatDoesntCauseNPE() throws Exception {\n+        assertNotNull(forClass(Boolean.class).capture());\n+        assertNotNull(forClass(Character.class).capture());\n+        assertNotNull(forClass(Byte.class).capture());\n+        assertNotNull(forClass(Short.class).capture());\n+        assertNotNull(forClass(Integer.class).capture());\n+        assertNotNull(forClass(Long.class).capture());\n+        assertNotNull(forClass(Float.class).capture());\n+        assertNotNull(forClass(Double.class).capture());\n+    }\n+}\n--- a/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n+++ b/test/org/mockitousage/matchers/CapturingArgumentsTest.java\n         assertEquals(\"foo\", captor.getValue());\n     }\n     \n-    //TODO: not yet implemented\n-    @Ignore\n     @Test\n     public void shouldCaptureInt() {\n         //given\n         IMethods mock = mock(IMethods.class);\n-        ArgumentCaptor<Integer> argument = new ArgumentCaptor<Integer>();\n+        ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(Integer.class);\n \n         //when\n         mock.intArgumentMethod(10);", "timestamp": 1248037385, "metainfo": ""}