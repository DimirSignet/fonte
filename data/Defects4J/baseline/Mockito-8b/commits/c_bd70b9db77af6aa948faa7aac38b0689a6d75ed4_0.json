{"sha": "bd70b9db77af6aa948faa7aac38b0689a6d75ed4", "log": "tuned javadocs made things easier with the generics - less warnings on the client side  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401453", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n      * This implementation first tries the global configuration. \n      * If there is no global configuration then it uses {@link ReturnsEmptyValues} (returns zeros, empty collections, nulls, etc.)\n      */\n-    public static final Answer RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n+    public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer();\n     \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      *   //Exception's cause links to unstubbed <i>mock.getStuff()</i> - just click on the stack trace.  \n      * </pre>\n      */\n-    public static final Answer RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n+    public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls();\n     \n     /**\n      * Optional Answer to be used with {@link Mockito#mock(Class, Answer)}\n      * then it tries to return mocks. If the return type cannot be mocked (e.g. is final) then plain null is returned.\n      * <p>\n      */\n-    public static final Answer RETURNS_MOCKS = new ReturnsMocks();\n+    public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();\n \n     /**\n      * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8 - decide whether to hide it or not?\n      * value = mock.getSomething();\n      * </pre>\n      */\n-    public static final Answer CALLS_REAL_METHODS = new CallsRealMethods();\n+    public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods();\n     \n     /**\n      * Creates mock object of given class or interface.\n      * <p>\n      * Why it is deprecated? ReturnValues is being replaced by Answer\n      * for better consistency & interoperability of the framework. \n-     * Answer interface has been in Mockito for a while and it's the same as ReturnValues.\n+     * Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.\n      * There's no point in mainting exactly the same interfaces.\n      * <p>\n      * Creates mock with a specified strategy for its return values. \n--- a/src/org/mockito/ReturnValues.java\n+++ b/src/org/mockito/ReturnValues.java\n \n /**\n  * @deprecated\n- * <b>Just use {@link Answer} interface</b>\n+ * <b>Instead, please use {@link Answer} interface</b>\n+ * <p>\n+ * In rare cases your code might not compile with recent deprecation & changes.\n+ * Very sorry for inconvenience but it had to be done in order to keep framework consistent.  \n  * <p>\n  * Why it is deprecated? ReturnValues is being replaced by Answer\n  * for better consistency & interoperability of the framework. \n- * Answer interface has been in Mockito for a while and it's the same as ReturnValues.\n+ * Answer interface has been in Mockito for a while and it has the same responsibility as ReturnValues.\n  * There's no point in mainting exactly the same interfaces.\n  * <p>\n  * Configures return values for an unstubbed invocation\n--- a/src/org/mockito/configuration/DefaultMockitoConfiguration.java\n+++ b/src/org/mockito/configuration/DefaultMockitoConfiguration.java\n     /* (non-Javadoc)\n      * @see org.mockito.IMockitoConfiguration#getReturnValues()\n      */\n+    @Deprecated\n     public ReturnValues getReturnValues() {\n         throw new RuntimeException(\"\\n\" + \"This method should not be used by the framework because it was deprecated\"\n                 + \"\\n\" + \"Please report the failure to the Mockito mailing list\");\n--- a/src/org/mockito/configuration/IMockitoConfiguration.java\n+++ b/src/org/mockito/configuration/IMockitoConfiguration.java\n     /**\n      * @deprecated\n      * <b>Please use {@link IMockitoConfiguration#getDefaultAnswer()}</b>\n-     * Leave the implementation of this method empty - it's not going to be used anyway.\n+     * <p>\n+     * Steps: \n+     * <p>\n+     * 1. Leave the implementation of getReturnValues() method empty - it's not going to be used anyway.\n+     * <p>\n+     * 2. Implement getDefaultAnswer() instead.\n+     * <p>\n+     * In rare cases your code might not compile with recent deprecation & changes.\n+     * Very sorry for inconvenience but it had to be done in order to keep framework consistent.\n      * <p>\n      * See javadoc {@link ReturnValues} for info why this method was deprecated\n      * <p>", "timestamp": 1243032093, "metainfo": ""}