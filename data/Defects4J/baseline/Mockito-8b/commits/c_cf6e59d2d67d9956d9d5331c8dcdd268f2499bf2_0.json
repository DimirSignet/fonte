{"sha": "cf6e59d2d67d9956d9d5331c8dcdd268f2499bf2", "log": "now replacing completely ReturnsDeepStub", "commit": "\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n  */\n package org.mockito.internal.stubbing.defaultanswers;\n \n-import org.mockito.Mockito;\n import org.mockito.internal.InternalMockHandler;\n+import org.mockito.internal.creation.settings.CreationSettings;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockCreationValidator;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n  *\n  * Will return previously created mock if the invocation matches.\n  *\n- * @see Mockito#RETURNS_DEEP_STUBS\n+ * <p>Supports nested generic information, with this answer you can write code like this :\n+ *\n+ * <pre class=\"code\"><code class=\"java\">\n+ *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n+ *\n+ *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+ *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n+ * </code></pre>\n+ * </p>\n+ *\n+ * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n  * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n  */\n public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n-    private static final long serialVersionUID = -6926328908792880098L;\n-    \n-    private Answer<Object> delegate = new ReturnsEmptyValues();\n+    private static final long serialVersionUID = -7105341425736035847L;\n+\n+    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n-        Class<?> clz = invocation.getMethod().getReturnType();\n+        GenericMetadataSupport returnTypeGenericMetadata =\n+                actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n-        if (!new MockCreationValidator().isTypeMockable(clz)) {\n-            return delegate.answer(invocation);\n+        Class<?> rawType = returnTypeGenericMetadata.rawType();\n+        if (!new MockCreationValidator().isTypeMockable(rawType)) {\n+            return delegate.returnValueFor(rawType);\n         }\n \n-        return getMock(invocation);\n+        return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n-    private Object getMock(InvocationOnMock invocation) throws Throwable {\n+    private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n     \tInvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();\n \n \t\t}\n \n         // deep stub\n-        return recordDeepStubMock(invocation, container);\n+        return recordDeepStubMock(returnTypeGenericMetadata.toMock(this), container);\n     }\n \n-    private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {\n-        Class<?> clz = invocation.getMethod().getReturnType();\n-        final Object mock = Mockito.mock(clz, this);\n+    private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n         container.addAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n \n         return mock;\n     }\n+\n+    private GenericMetadataSupport actualParameterizedType(Object mock) {\n+        CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();\n+        return mockSettings.getMockitoGenericMetadata();\n+    }\n }\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java\n import java.util.Set;\n \n import static org.fest.assertions.Assertions.assertThat;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n import static org.mockito.Mockito.mock;\n \n @SuppressWarnings(\"unused\")\n \n     @Test\n     public void generic_deep_mock_frenzy__look_at_these_chained_calls() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();\n         Iterator<? extends Map.Entry<? extends Cloneable,Set<Number>>> entriesIterator = mock.entrySet().iterator();\n \n     @Test\n     public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         Cloneable cloneable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =\n                 mock.paramTypeWithTypeParams().get(0);\n \n     @Test\n     public void can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         Cloneable cloneable_bound_of_typevar_K = mock.returningK();\n         Comparable<?> comparable_bound_of_typevar_K = mock.returningK();\n \n     @Test\n     public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();\n-        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = mock.typeVarWithTypeParams();\n+        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable) mock.typeVarWithTypeParams();\n     }\n \n     @Test\n     public void can_create_mock_from_return_types_declared_with_a_bounded_wildcard() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         List<? super Integer> objects = mock.returningWildcard();\n         Number type_that_is_the_upper_bound_of_the_wildcard = (Number) mock.returningWildcard().get(45);\n \n     @Test\n     public void can_still_work_with_raw_type_in_the_return_type() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         Number the_raw_type_that_should_be_returned = mock.returnsNormalType();\n         the_raw_type_that_should_be_returned.floatValue();\n \n     @Test\n     public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {\n-        GenericsNest<?> genericsNest = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n-        ListOfInteger listOfInteger = mock(ListOfInteger.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n+        ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);\n \n         assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();\n         assertThat(listOfInteger.get(25)).isEqualTo(0);\n \n     @Test(expected = ClassCastException.class)\n     public void as_expected_fail_with_a_CCE_on_callsite_when_erasure_takes_place_for_example___StringBuilder_is_subject_to_erasure() throws Exception {\n-        GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n+        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);\n \n         // following assignment needed to create a ClassCastException on the call site (i.e. : here)\n         StringBuilder stringBuilder_assignment_that_should_throw_a_CCE =", "timestamp": 1351122488, "metainfo": ""}