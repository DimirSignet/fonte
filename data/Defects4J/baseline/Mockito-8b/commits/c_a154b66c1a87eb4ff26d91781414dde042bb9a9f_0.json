{"sha": "a154b66c1a87eb4ff26d91781414dde042bb9a9f", "log": "Made it compatible with java1.5 target compilation compatibility  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401983", "commit": "\n--- a/src/org/mockito/internal/InOrderImpl.java\n+++ b/src/org/mockito/internal/InOrderImpl.java\n         return mockitoCore.verify(mock, new InOrderWrapper((VerificationInOrderMode) mode, this));\n     }\n \n-    @Override\n     public boolean isVerified(Invocation i) {\n         return inOrderContext.isVerified(i);\n     }\n \n-    @Override\n     public void markVerified(Invocation i) {        \n         inOrderContext.markVerified(i);\n     }\n \n-    @Override\n     public void verifyNoMoreInteractions() {\n         mockitoCore.verifyNoMoreInteractionsInOrder(mocksToBeVerifiedInOrder, this);\n     }\n--- a/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultAnnotationEngine.java\n         return ArgumentCaptor.forClass(cls);    \n     }           \n \n-    @Override\n     public void process(Class<?> clazz, Object testClass) {\n         Field[] fields = clazz.getDeclaredFields();\n         for (Field field : fields) {\n--- a/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/InjectingAnnotationEngine.java\n         return delegate.createMockFor(annotation, field);\n     }\n     \n-    @Override\n     public void process(Class<?> context, Object testClass) {\n         //this will create @Mocks, @Captors, etc:\n         delegate.process(context, testClass);\n--- a/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n+++ b/src/org/mockito/internal/configuration/SpyAnnotationEngine.java\n @SuppressWarnings({\"unchecked\"})\n public class SpyAnnotationEngine implements AnnotationEngine {\n \n-    @Override\n     public Object createMockFor(Annotation annotation, Field field) {\n         return null;\n     }\n     \n     @SuppressWarnings(\"deprecation\")\n-    @Override\n     public void process(Class<?> context, Object testClass) {\n         Field[] fields = context.getDeclaredFields();\n         for (Field field : fields) {\n--- a/src/org/mockito/internal/verification/InOrderContextImpl.java\n+++ b/src/org/mockito/internal/verification/InOrderContextImpl.java\n     \n     final IdentitySet verified = new IdentitySet();\n \n-    @Override\n     public boolean isVerified(Invocation invocation) {\n         return verified.contains(invocation);\n     }\n \n-    @Override\n     public void markVerified(Invocation i) {\n         verified.add(i);\n     }\n--- a/src/org/mockito/internal/verification/MockAwareVerificationMode.java\n+++ b/src/org/mockito/internal/verification/MockAwareVerificationMode.java\n         this.mode = mode;\n     }\n \n-    @Override\n     public void verify(VerificationData data) {\n         mode.verify(data);\n     }\n--- a/src/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java\n+++ b/src/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java\n         this.wanted = wanted;        \n     }\n \n-    @Override\n     public List<Invocation> getAllInvocations() {\n         return allInvocations;\n     }\n \n-    @Override\n     public InOrderContext getOrderingContext() {\n         return inOrder;\n     }\n \n-    @Override\n     public InvocationMatcher getWanted() {\n         return wanted;\n     }\n-\n-}\n+}\n--- a/src/org/mockito/stubbing/answers/ReturnsElementsOf.java\n+++ b/src/org/mockito/stubbing/answers/ReturnsElementsOf.java\n         this.elements = new LinkedList(elements);\n     }\n \n-    @Override\n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         if (elements.size() == 1)\n             return elements.get(0);\n--- a/src/org/mockito/verification/Timeout.java\n+++ b/src/org/mockito/verification/Timeout.java\n         this.impl = new VerificationWithTimeoutImpl(treshhold, millis, delegate);\n     }\n \n-    @Override\n     public void verify(VerificationData data) {\n         impl.verify(data);\n     }\n \n-    @Override\n     public VerificationMode atLeast(int minNumberOfInvocations) {\n         return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeast(minNumberOfInvocations));\n     }\n \n-    @Override\n     public VerificationMode atLeastOnce() {\n         return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atLeastOnce());\n     }\n \n-    @Override\n     public VerificationMode atMost(int maxNumberOfInvocations) {\n         return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.atMost(maxNumberOfInvocations));\n     }\n \n-    @Override\n     public VerificationMode never() {\n         return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(0));\n     }\n \n-    @Override\n     public VerificationMode only() {\n         return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.only());\n     }\n \n-    @Override\n     public VerificationMode times(int wantedNumberOfInvocations) {\n         return new Timeout(impl.getTreshhold(), impl.getTimeout(), VerificationModeFactory.times(wantedNumberOfInvocations));\n     }", "timestamp": 1274026845, "metainfo": ""}