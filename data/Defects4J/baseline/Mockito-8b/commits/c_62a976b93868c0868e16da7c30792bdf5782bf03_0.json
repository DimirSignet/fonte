{"sha": "62a976b93868c0868e16da7c30792bdf5782bf03", "log": "Converted manual serialization/deserialization to use SimpleSerializationUtil", "commit": "\n--- a/test/org/mockitousage/stubbing/DeepStubsSerializableTest.java\n+++ b/test/org/mockitousage/stubbing/DeepStubsSerializableTest.java\n import static org.fest.assertions.Assertions.*;\n import static org.mockito.Mockito.*;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n import java.io.Serializable;\n \n import org.junit.Test;\n import org.mockito.Mockito;\n+import org.mockitoutil.SimpleSerializationUtil;\n \n public class DeepStubsSerializableTest {\n \n-\tpublic static final boolean STUBBED_VALUE = true;\n+    public static final boolean STUBBED_VALUE = true;\n \n-\t@Test\n-\tpublic void should_serialize_and_deserialize_mock_created_by_deep_stubs() throws Exception {\n-\t\t// given\n-\t\tSampleClass sampleClass = Mockito.mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());\n-\t\tMockito.when(sampleClass.getSample().isSth()).thenReturn(STUBBED_VALUE);\n+    @Test\n+    public void should_serialize_and_deserialize_mock_created_by_deep_stubs() throws Exception {\n+        // given\n+        SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());\n+        when(sampleClass.getSample().isSth()).thenReturn(STUBBED_VALUE);\n \n-\t\t// when\n-\t\tByteArrayOutputStream serializationStream = serialize(sampleClass);\n+        // when\n+        Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);\n \n-\t\t// then\n-\t\tObject o = deserialize(serializationStream);\n-\t\tassertThat(o).isInstanceOf(SampleClass.class);\n-\t\tSampleClass deserializedSample = (SampleClass) o;\n-\t\tassertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_VALUE);\n-\t}\n+        // then\n+        assertThat(o).isInstanceOf(SampleClass.class);\n+        SampleClass deserializedSample = (SampleClass) o;\n+        assertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_VALUE);\n+    }\n \n-\tprivate ByteArrayOutputStream serialize(SampleClass sampleClass) throws IOException {\n-\t\tByteArrayOutputStream serializationStream = new ByteArrayOutputStream();\n-\t\tObjectOutputStream objectOutputStream = new ObjectOutputStream(serializationStream);\n-\t\tobjectOutputStream.writeObject(sampleClass);\n-\t\tobjectOutputStream.close();\n-\t\treturn serializationStream;\n-\t}\n \n-\tprivate Object deserialize(ByteArrayOutputStream serializationStream) throws IOException, ClassNotFoundException {\n-\t\tByteArrayInputStream deserializationStream = new ByteArrayInputStream(serializationStream.toByteArray());\n-\t\tObjectInputStream is = new ObjectInputStream(deserializationStream);\n-\t\treturn is.readObject();\n-\t}\n+    class SampleClass implements Serializable {\n+        SampleClass2 getSample() {\n+            return new SampleClass2();\n+        }\n+    }\n \n-\tclass SampleClass implements Serializable {\n-\t\tSampleClass2 getSample(){\n-\t\t\treturn new SampleClass2();\n-\t\t}\n-\t}\n+    class SampleClass2 implements Serializable {\n+        boolean isSth() {\n+            return false;\n+        }\n+    }\n \n-\tclass SampleClass2 implements Serializable {\n-\t\tboolean isSth(){\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\t\n }", "timestamp": 1389051248, "metainfo": ""}