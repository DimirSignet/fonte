{"sha": "31fec00e6f3db5458d6dfb6266811dd498f3ada5", "log": "In order implement issue 110 - in order to correct item in the review by szczeiq - refactored to remove duplicate SupressWarning entries  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401642", "commit": "\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\",\"serial\"})\n public class MockHandlerTest extends TestBase {\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {\n         //given\n--- a/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n+++ b/test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class ReadingConfigurationFromClasspathTest extends TestBase {\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldReadConfigurationClassFromClassPath() {\n         ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {\n--- a/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n+++ b/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n \n+@SuppressWarnings(\"serial\")\n public class MethodProxyBuilder {\n \n-    @SuppressWarnings(\"serial\")\n     public MethodProxy build() {\n         IMethods mock = mock(IMethods.class);\n         when(mock.objectReturningMethodNoArgs()).thenAnswer(new Answer<Object>() {\n--- a/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n import org.mockito.internal.util.ObjectBox;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class InvocationMarkerTest extends TestBase {\n \n     @Test\n         assertTrue(i.isVerified());\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldCaptureArguments() {\n         //given\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\",\"serial\"})\n public class InvocationTest extends TestBase {\n \n     private Invocation invocation;\n         }\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldBeAbleToCallRealMethod() throws Throwable {\n         //when\n--- a/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n+++ b/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n         } catch (MockitoException e) {}\n     }\n     \n-    @SuppressWarnings(\"serial\") class MyException extends RuntimeException {};\n+    @SuppressWarnings(\"serial\") \n+    class MyException extends RuntimeException {};\n }\n--- a/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n+++ b/test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java\n import org.mockito.internal.matchers.Equals;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({\"unchecked\",\"serial\"})\n public class ArgumentMatchingToolTest extends TestBase {\n \n     private ArgumentMatchingTool tool = new ArgumentMatchingTool();\n         assertEquals(new Integer(1), suspicious[0]);\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {\n         //given\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class MocksSerializationTest extends TestBase implements Serializable {\n \n     private static final long serialVersionUID = 6160482220413048624L;\n         // given\n         IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class));\n \n-        // when\n-        //TODO simplify with serializeAndBack method\n-        ByteArrayOutputStream serialized = serializeMock(mock);\n-\n-        // then\n-        deserializeMock(serialized, IMethods.class);\n+        // when-serialize then-deserialize\n+        serializeAndBack(mock);\n     }\n \n     @Test\n         verify(readObject, never()).objectArgMethod(\"never happened\");\n     }\n \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldSerializeWithStubbingCallback() throws Exception {\n \n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class BDDMockitoTest extends TestBase {\n     \n     @Mock IMethods mock;\n         } catch(RuntimeException e) {}\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldStubWithAnswer() throws Exception {\n         given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {\n         assertEquals(\"foo\", mock.simpleMethod(\"bar\"));\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldStubUsingDoAnswerStyle() throws Exception {\n         willAnswer(new Answer<String>() {\n--- a/test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java\n+++ b/test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class FilteredCGLIBProxyRealMethodTest extends TestBase {\n \n     @Before\n         }\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {\n         //given\n--- a/test/org/mockitousage/matchers/AssertingMatchersTest.java\n+++ b/test/org/mockitousage/matchers/AssertingMatchersTest.java\n import org.mockitoutil.TestBase;\n \n @Ignore(\"that's just prototyping\")\n+@SuppressWarnings(\"serial\")\n public class AssertingMatchersTest extends TestBase {\n     \n     private IMethods mock;\n         }\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldUseCustomCharMatcher1() {\n         mock.simpleMethod(new Article(12, \"Fabulous article\"));\n--- a/test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java\n+++ b/test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class CustomMatcherDoesYieldCCETest extends TestBase {\n \n     @Mock private IMethods mock;\n         } catch (ArgumentsAreDifferent e) {}\n     }\n \n-    @SuppressWarnings(\"serial\")\n     private ArgumentMatcher<String> isStringWithTextFoo() {\n         return new ArgumentMatcher<String>() {\n             @Override\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n+@SuppressWarnings(\"serial\")\n public class CustomMatchersTest extends TestBase {\n     \n-    @SuppressWarnings(\"serial\")\n     private final class ContainsFoo extends ArgumentMatcher<String> {\n         public boolean matches(Object arg) {\n             return ((String) arg).contains(\"foo\");\n         }\n     }\n \n-    @SuppressWarnings(\"serial\")\n     private final class IsAnyBoolean extends ArgumentMatcher<Boolean> {\n         public boolean matches(Object arg) {\n             return true;\n         }\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     private final class IsSorZ extends ArgumentMatcher<Character> {\n         public boolean matches(Object arg) {\n             Character character = (Character) arg;\n         }\n     }\n \n-    @SuppressWarnings(\"serial\")\n     private final class IsZeroOrOne<T extends Number> extends ArgumentMatcher<T> {\n         public boolean matches(Object arg) {\n             Number number = (Number) arg;\n         return argThat(new StringThatContainsXxx());\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     private final class StringThatContainsXxx extends ArgumentMatcher<String> {\n         public boolean matches(Object argument) {\n             String arg = (String) argument;\n         }\n     }\n     \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldAnonymousCustomMatcherPrintDefaultDescription() {\n         mock.simpleMethod(\"foo\");\n--- a/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n-@SuppressWarnings({\"unchecked\", \"deprecation\"})\n+@SuppressWarnings({\"unchecked\", \"deprecation\", \"serial\"})\n public class StubbingWithCustomAnswerTest extends TestBase {\n     @Mock\n     private IMethods mock;\n \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldAnswer() throws Exception {\n         when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {\n         assertEquals(\"simpleMethod-test\", mock.simpleMethod(\"test\"));\n     }\n \n-    @SuppressWarnings(\"serial\")\n     @Test\n     public void shouldAnswerConsecutively() throws Exception {\n         when(mock.simpleMethod())\n \n     }\n \n-    @SuppressWarnings(\"serial\")\n     private static class RecordCall implements Answer {\n         private boolean called = false;\n ", "timestamp": 1257044588, "metainfo": ""}