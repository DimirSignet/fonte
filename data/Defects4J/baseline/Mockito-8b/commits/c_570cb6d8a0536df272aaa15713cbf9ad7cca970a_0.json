{"sha": "570cb6d8a0536df272aaa15713cbf9ad7cca970a", "log": "Made MockingDetails abstract", "commit": "\n--- a/src/org/mockito/MockingDetails.java\n+++ b/src/org/mockito/MockingDetails.java\n package org.mockito;\n \n+import org.mockito.internal.util.DefaultMockingDetails;\n import org.mockito.internal.util.MockUtil;\n \n /**\n- * Class to inspect any object, and identify whether a particular object is either a mock or a spy.  This is\n- * effectively a &ldquo;public&rdquo; version of {@link MockUtil}.\n+ * Class to inspect any object, and identify whether a particular object is either a mock or a spy.\n  */\n-public class MockingDetails {\n+public abstract class MockingDetails {\n     \n-    private Object toInspect;\n-    private MockUtil delegate;\n-\n-    MockingDetails( Object toInspect, MockUtil delegate ){\n-        this.toInspect = toInspect;\n-        this.delegate = delegate;\n-    }\n \n     /**\n      * Create a MockingDetails to inspect a particular Object.\n      * @return\n      */\n     public static MockingDetails of( Object toInspect ){\n-        return new MockingDetails( toInspect, new MockUtil());\n+        return new DefaultMockingDetails( toInspect, new MockUtil());\n     }\n \n     /**\n      * Find out whether the object is a mock.\n-     * @return whether the object is a mock.\n+     * @return true if the object is a mock or a spy.\n      */\n-    public boolean isMock(){\n-        return delegate.isMock( toInspect );\n-    }\n+    public abstract boolean isMock();\n \n     /**\n      * Find out whether the object is a spy.\n-     * @return whether the object is a spy.\n+     * @return true if the object is a spy.\n      */\n-    public boolean isSpy(){\n-        return delegate.isSpy( toInspect );\n-    }\n-\n-\n+    public abstract boolean isSpy();\n }\n \n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  *     MockingDetails.of( someObject ).isMock();\n  *     MockingDetails.of( someObject ).isSpy();\n  * </code></pre>\n- * Both the <code>isMock()</code> and <code>isSpy()</code> methods return <code>boolean</code>.\n+ * Both the <code>isMock()</code> and <code>isSpy()</code> methods return <code>boolean</code>.  As a spy\n+ * is considered a special kind of mock, <code>isMock()</code> returns true if the object is a spy.\n  */\n @SuppressWarnings(\"unchecked\")\n public class Mockito extends Matchers {\n--- /dev/null\n+++ b/src/org/mockito/internal/util/DefaultMockingDetails.java\n+package org.mockito.internal.util;\n+\n+import org.mockito.MockingDetails;\n+\n+/**\n+ * Class to inspect any object, and identify whether a particular object is either a mock or a spy.  This is\n+ * a wrapper for {@link org.mockito.internal.util.MockUtil}.\n+ */\n+public class DefaultMockingDetails extends MockingDetails {\n+\n+    private Object toInspect;\n+    private MockUtil delegate;\n+\n+    public DefaultMockingDetails(Object toInspect, MockUtil delegate){\n+        this.toInspect = toInspect;\n+        this.delegate = delegate;\n+    }\n+    /**\n+     * Find out whether the object is a mock.\n+     * @return true if the object is a mock or a spy.\n+     */\n+    public boolean isMock(){\n+        return delegate.isMock( toInspect );\n+    }\n+\n+    /**\n+     * Find out whether the object is a spy.\n+     * @return true if the object is a spy.\n+     */\n+    public boolean isSpy(){\n+        return delegate.isSpy( toInspect );\n+    }\n+}\n+\n--- a/test/org/mockito/MockingDetailsTest.java\n+++ b/test/org/mockito/MockingDetailsTest.java\n \n     @Mock TestClass mock1;\n     @Spy TestClass spy1;\n+    TestClass mock2;\n+    TestClass spy2;\n+    TestClass nonMock;\n     \n     @Before\n     public void setUp(){\n         initMocks( this );\n+        mock2 = mock( TestClass.class );\n+        spy2 = spy( new TestClass());\n+        nonMock = new TestClass();\n     }\n     \n     @Test\n \n     @Test\n     public void shouldReturnTrue_FromIsMock_ForDirectMock(){\n-        TestClass mock2 = mock( TestClass.class );\n         assertTrue(MockingDetails.of(mock2).isMock());\n     }\n \n     @Test\n+    public void shouldReturnTrue_FromIsMock_ForAnnotatedSpy(){\n+        assertTrue(MockingDetails.of(spy1).isMock());\n+    }\n+\n+    @Test\n+    public void shouldReturnTrue_FromIsMock_ForDirectSpy(){\n+\n+        assertTrue(MockingDetails.of(spy2).isMock());\n+    }\n+\n+    @Test\n     public void shouldReturnFalse_FromIsMock_ForNonMock(){\n-        TestClass nonMock = new TestClass();\n         assertFalse(MockingDetails.of(nonMock).isMock());\n     }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsSpy_ForAnnotatedMock(){\n+        assertFalse(MockingDetails.of(mock1).isSpy());\n+    }\n+\n+    @Test\n+    public void shouldReturnFalse_FromIsSpy_ForDirectMock(){\n+        assertFalse(MockingDetails.of(mock2).isSpy());\n+    }\n+\n \n     @Test\n     public void shouldReturnTrue_FromIsSpy_ForAnnotatedSpy(){\n \n     @Test\n     public void shouldReturnTrue_FromIsSpy_ForDirectSpy(){\n-        TestClass spy2 = spy( new TestClass());\n         assertTrue(MockingDetails.of(spy2).isSpy());\n     }\n \n     @Test\n-    public void shouldReturnFalse_FromIsSpy_ForNonSpy(){\n-        TestClass nonSpy = new TestClass();\n-        assertFalse(MockingDetails.of(nonSpy).isSpy());\n+    public void shouldReturnFalse_FromIsSpy_ForNonMock(){\n+        assertFalse(MockingDetails.of(nonMock).isSpy());\n     }\n }\n--- a/src/org/mockito/MockSettings.java\n+++ b/src/org/mockito/MockSettings.java\n package org.mockito;\n \n import org.mockito.listeners.InvocationListener;\n-import org.mockito.plugins.MockSettingsInfo;\n+import org.mockito.mock.MockSettingsInfo;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n--- a/src/org/mockito/exceptions/Discrepancy.java\n+++ b/src/org/mockito/exceptions/Discrepancy.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions;\n \n-public class Discrepancy {\n-\n-    private final int wantedCount;\n-    private final int actualCount;\n-\n+@Deprecated\n+/**\n+ * @Deprecated. This class has been moved to internal packages because it was never meant to be public.\n+ * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.reporting.Discrepancy}.\n+ * However, the package clearly states that the class in a part of a public API so it can change.\n+ */\n+public class Discrepancy extends org.mockito.internal.reporting.Discrepancy {\n     public Discrepancy(int wantedCount, int actualCount) {\n-        this.wantedCount = wantedCount;\n-        this.actualCount = actualCount;\n-    }\n-\n-    public int getWantedCount() {\n-        return wantedCount;\n-    }\n-    \n-    public String getPluralizedWantedCount() {\n-        return Pluralizer.pluralize(wantedCount);\n-    }\n-\n-    public int getActualCount() {\n-        return actualCount;\n-    }\n-\n-    public String getPluralizedActualCount() {\n-        return Pluralizer.pluralize(actualCount);\n+        super(wantedCount, actualCount);\n     }\n }\n--- a/src/org/mockito/exceptions/Pluralizer.java\n+++ b/src/org/mockito/exceptions/Pluralizer.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions;\n \n-public class Pluralizer {\n-\n-    public static String pluralize(int number) {\n-        return number == 1 ? \"1 time\" : number + \" times\";\n-    }\n-}\n+@Deprecated\n+/**\n+ * @Deprecated. This class has been moved to internal packages because it was never meant to be public.\n+ * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.reporting.Pluralizer}.\n+ * However, the package clearly states that the class in a part of a public API so it can change.\n+ */\n+public class Pluralizer extends org.mockito.internal.reporting.Pluralizer {}\n--- a/src/org/mockito/exceptions/PrintableInvocation.java\n+++ b/src/org/mockito/exceptions/PrintableInvocation.java\n \n package org.mockito.exceptions;\n \n-import org.mockito.internal.debugging.Location;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Location;\n \n+@Deprecated\n+/**\n+ * @Deprecated. We needed to move this class to a better place to keep consistency of the API.\n+ * Please use {@link DescribedInvocation} instead.\n+ */\n public interface PrintableInvocation {\n-    \n+\n     String toString();\n-    \n+\n     Location getLocation();\n-    \n+\n }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n-import org.mockito.exceptions.verification.junit.JUnitTool;\n-import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.debugging.LocationImpl;\n import org.mockito.internal.exceptions.VerificationAwareInvocation;\n import org.mockito.internal.exceptions.util.ScenarioPrinter;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.junit.JUnitTool;\n import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.StringJoiner;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockito.listeners.InvocationListener;\n \n import java.lang.reflect.Field;\n import java.util.Collection;\n import java.util.List;\n \n-import static org.mockito.exceptions.Pluralizer.pluralize;\n+import static org.mockito.internal.reporting.Pluralizer.pluralize;\n import static org.mockito.internal.util.StringJoiner.join;\n \n /**\n     public void incorrectUseOfApi() {\n         throw new MockitoException(join(\n                 \"Incorrect use of API detected here:\",\n-                new Location(),\n+                new LocationImpl(),\n                 \"\",\n                 \"You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.\",\n                 \"Examples of correct usage:\",\n     public void incorrectUseOfAdditionalMatchers(String additionalMatcherName, int expectedSubMatchersCount, Collection<LocalizedMatcher> matcherStack) {\n         throw new InvalidUseOfMatchersException(join(\n                 \"Invalid use of argument matchers inside additional matcher \" + additionalMatcherName + \" !\",\n-                new Location(),\n+                new LocationImpl(),\n                 \"\",\n                 expectedSubMatchersCount + \" sub matchers expected, \" + matcherStack.size() + \" recorded:\",\n                 locationsOf(matcherStack),\n     public void reportNoSubMatchersFound(String additionalMatcherName) {\n         throw new InvalidUseOfMatchersException(join(\n                 \"No matchers found for additional matcher \" + additionalMatcherName,\n-                new Location(),\n+                new LocationImpl(),\n                 \"\"\n         ));\n     }\n     public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n         String message = join(\"Argument(s) are different! Wanted:\",\n                 wanted,\n-                new Location(),\n+                new LocationImpl(),\n                 \"Actual invocation has different arguments:\",\n                 actual,\n                 actualLocation,\n         }\n     }\n \n-    public void wantedButNotInvoked(PrintableInvocation wanted) {\n+    public void wantedButNotInvoked(DescribedInvocation wanted) {\n         throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));\n     }\n \n-    public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n+    public void wantedButNotInvoked(DescribedInvocation wanted, List<? extends DescribedInvocation> invocations) {\n         String allInvocations;\n         if (invocations.isEmpty()) {\n             allInvocations = \"Actually, there were zero interactions with this mock.\\n\";\n         } else {\n             StringBuilder sb = new StringBuilder(\"\\nHowever, there were other interactions with this mock:\\n\");\n-            for (PrintableInvocation i : invocations) {\n+            for (DescribedInvocation i : invocations) {\n                  sb.append(i.getLocation());\n                  sb.append(\"\\n\");\n             }\n         throw new WantedButNotInvoked(message + allInvocations);\n     }\n \n-    private String createWantedButNotInvokedMessage(PrintableInvocation wanted) {\n+    private String createWantedButNotInvokedMessage(DescribedInvocation wanted) {\n         return join(\n                 \"Wanted but not invoked:\",\n                 wanted.toString(),\n-                new Location(),\n+                new LocationImpl(),\n                 \"\"\n         );\n     }\n \n-    public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n+    public void wantedButNotInvokedInOrder(DescribedInvocation wanted, DescribedInvocation previous) {\n         throw new VerificationInOrderFailure(join(\n                     \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n                     wanted.toString(),\n-                    new Location(),\n+                    new LocationImpl(),\n                     \"Wanted anywhere AFTER following interaction:\",\n                     previous.toString(),\n                     previous.getLocation(),\n         ));\n     }\n \n-    public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n+    public void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n         String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n         throw new TooManyActualInvocations(message);\n     }\n \n-    private String createTooManyInvocationsMessage(int wantedCount, int actualCount, PrintableInvocation wanted,\n+    private String createTooManyInvocationsMessage(int wantedCount, int actualCount, DescribedInvocation wanted,\n             Location firstUndesired) {\n         return join(\n                 wanted.toString(),\n-                \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n-                new Location(),\n+                \"Wanted \" + pluralize(wantedCount) + \":\",\n+                new LocationImpl(),\n                 \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n                 firstUndesired,\n                 \"\"\n         );\n     }\n \n-    public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n+    public void neverWantedButInvoked(DescribedInvocation wanted, Location firstUndesired) {\n         throw new NeverWantedButInvoked(join(\n                 wanted.toString(),\n                 \"Never wanted here:\",\n-                new Location(),\n+                new LocationImpl(),\n                 \"But invoked here:\",\n                 firstUndesired,\n                 \"\"\n         ));\n     }\n \n-    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n+    public void tooManyActualInvocationsInOrder(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n         String message = createTooManyInvocationsMessage(wantedCount, actualCount, wanted, firstUndesired);\n         throw new VerificationInOrderFailure(join(\n                 \"Verification in order failure:\" + message\n                 ));\n     }\n \n-    private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n+    private String createTooLittleInvocationsMessage(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted,\n             Location lastActualInvocation) {\n         String ending =\n             (lastActualInvocation != null)? lastActualInvocation + \"\\n\" : \"\\n\";\n             String message = join(\n                     wanted.toString(),\n                     \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n-                    new Location(),\n+                    new LocationImpl(),\n                     \"But was \" + discrepancy.getPluralizedActualCount() + \":\",\n                     ending\n             );\n             return message;\n     }\n \n-    public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n+    public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n         String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n \n         throw new TooLittleActualInvocations(message);\n     }\n \n-    public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n+    public void tooLittleActualInvocationsInOrder(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n         String message = createTooLittleInvocationsMessage(discrepancy, wanted, lastActualLocation);\n \n         throw new VerificationInOrderFailure(join(\n \n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n-                new Location(),\n+                new LocationImpl(),\n                 \"But found this interaction:\",\n                 undesired.getLocation(),\n                 scenario\n     public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n-                new Location(),\n+                new LocationImpl(),\n                 \"But found this interaction:\",\n                 undesired.getLocation(),\n                 \"\"\n     public void smartNullPointerException(String invocation, Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n-                new Location(),\n+                new LocationImpl(),\n                 \"because this method call was *not* stubbed correctly:\",\n                 location,\n                 invocation,\n--- a/src/org/mockito/exceptions/verification/junit/JUnitTool.java\n+++ b/src/org/mockito/exceptions/verification/junit/JUnitTool.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.exceptions.verification.junit;\n \n-import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n-\n+@Deprecated\n+/**\n+ * @Deprecated. This class has been moved to internal packages because it was never meant to be public.\n+ * If you need it for extending Mockito please let us know. You can still use {@link org.mockito.internal.junit.JUnitTool}.\n+ * However, the package clearly states that the class in a part of a public API so it can change.\n+ */\n public class JUnitTool {\n-\n-    private static boolean hasJUnit;\n-\n-    static {\n-        try {\n-            Class.forName(\"junit.framework.ComparisonFailure\");\n-            hasJUnit = true;\n-        } catch (Throwable t) {\n-            hasJUnit = false;\n-        }\n-    }\n     \n     public static boolean hasJUnit() {\n-        return hasJUnit;\n+        return org.mockito.internal.junit.JUnitTool.hasJUnit();\n     }\n \n     public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n-        try {\n-            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n-            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n-            return throwable;\n-        } catch (Throwable t) {\n-//            throw the default exception in case of problems\n-            return new ArgumentsAreDifferent(message);\n-        }\n+        return org.mockito.internal.junit.JUnitTool.createArgumentsAreDifferentException(message, wanted, actual);\n     }\n }\n--- a/src/org/mockito/internal/InOrderImpl.java\n+++ b/src/org/mockito/internal/InOrderImpl.java\n import org.mockito.InOrder;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.verification.InOrderContextImpl;\n import org.mockito.internal.verification.InOrderWrapper;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n /**\n         return inOrderContext.isVerified(i);\n     }\n \n-    public void markVerified(Invocation i) {        \n+    public void markVerified(Invocation i) {\n         inOrderContext.markVerified(i);\n     }\n \n--- a/src/org/mockito/internal/Incubating.java\n+++ b/src/org/mockito/internal/Incubating.java\n import java.lang.annotation.RetentionPolicy;\n \n /**\n- * Indicates the type or method is <strong>work in progress</strong> and might change.\n+ * The annotation conveys following information:\n+ * <ul>\n+ * <li>The API is fairly new and we would appreciate your feedback. For example, what are you missing from the API\n+ * to solve your use case (yes, please, real use cases).</li>\n+ * <li>For types or methods that are already released this annotation means that that the API might change.\n+ * The chance for that is small and we will always try to make any changes in a backwards compatible way.\n+ * The only reason we would want to change it is to provide better support for using and extending Mockito.\n+ * </li>\n+ * <li>\n+ * For types or methods that are not yet released it means the API is <strong>work in progress</strong>\n+ * and can change before release.\n+ * </li>\n+ * </ul>\n  */\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Incubating {\n--- a/src/org/mockito/internal/InvocationNotifierHandler.java\n+++ b/src/org/mockito/internal/InvocationNotifierHandler.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n import org.mockito.internal.stubbing.InvocationContainer;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.InvocationListener;\n-import org.mockito.plugins.MockitoInvocationHandler;\n+import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n \n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n package org.mockito.internal;\n \n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.stubbing.*;\n import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n-import org.mockito.plugins.MockitoInvocationHandler;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n import org.mockito.verification.VerificationMode;\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal;\n \n import org.mockito.InOrder;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;\n import org.mockito.internal.progress.IOngoingStubbing;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.verification.api.InOrderContext;\n import org.mockito.internal.verification.api.VerificationDataInOrder;\n import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n+import org.mockito.invocation.Invocation;\n import org.mockito.stubbing.*;\n import org.mockito.verification.VerificationMode;\n \n--- a/src/org/mockito/internal/creation/CglibMockMaker.java\n+++ b/src/org/mockito/internal/creation/CglibMockMaker.java\n import org.mockito.cglib.proxy.Callback;\n import org.mockito.cglib.proxy.Factory;\n import org.mockito.plugins.MockMaker;\n-import org.mockito.plugins.MockitoInvocationHandler;\n+import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n-import org.mockito.plugins.MockSettingsInfo;\n+import org.mockito.mock.MockSettingsInfo;\n \n /**\n  * A MockMaker that uses cglib to generate mocks on a JVM.\n--- a/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n+++ b/src/org/mockito/internal/creation/MethodInterceptorFilter.java\n \n import org.mockito.cglib.proxy.MethodInterceptor;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.plugins.MockitoInvocationHandler;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n import org.mockito.internal.invocation.*;\n import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;\n import org.mockito.internal.progress.SequenceNumber;\n import org.mockito.internal.util.ObjectMethodsGuru;\n-import org.mockito.plugins.MockSettingsInfo;\n+import org.mockito.mock.MockSettingsInfo;\n \n public class MethodInterceptorFilter implements MethodInterceptor, Serializable {\n \n         MockitoMethod mockitoMethod = createMockitoMethod(method);\n         \n         FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);\n-        Invocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\n+        Invocation invocation = new InvocationImpl(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\n         return handler.handle(invocation);\n     }\n    \n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n     private Class<?>[] extraInterfaces;\n     private String name;\n     private Object spiedInstance;\n-    private Object delegatedInstance ;\n+    private Object delegatedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n     private boolean serializable;\n--- a/src/org/mockito/internal/debugging/FindingsListener.java\n+++ b/src/org/mockito/internal/debugging/FindingsListener.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n \n public interface FindingsListener {\n     void foundStubCalledWithDifferentArgs(Invocation unused, InvocationMatcher unstubbed);\n--- a/src/org/mockito/internal/debugging/Localized.java\n+++ b/src/org/mockito/internal/debugging/Localized.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n+\n+import org.mockito.invocation.Location;\n \n public class Localized<T> {\n \n \n     public Localized(T object) {\n         this.object = object;\n-        location = new Location();\n+        location = new LocationImpl();\n     }\n \n     public T getObject() {\n--- /dev/null\n+++ b/src/org/mockito/internal/debugging/LocationImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.debugging;\n+\n+import java.io.Serializable;\n+\n+import org.mockito.internal.exceptions.base.StackTraceFilter;\n+import org.mockito.invocation.Location;\n+\n+public class LocationImpl implements Location, Serializable {\n+\n+    private static final long serialVersionUID = -9054861157390980624L;\n+    private final Throwable stackTraceHolder;\n+    private final StackTraceFilter stackTraceFilter;\n+\n+    public LocationImpl() {\n+        this(new StackTraceFilter());\n+    }\n+\n+    public LocationImpl(StackTraceFilter stackTraceFilter) {\n+        this.stackTraceFilter = stackTraceFilter;\n+        stackTraceHolder = new Throwable();\n+    }\n+\t\n+    @Override\n+    public String toString() {\n+        StackTraceElement[] filtered = stackTraceFilter.filter(stackTraceHolder.getStackTrace(), false);\n+        if (filtered.length == 0) {\n+            return \"-> at <<unknown line>>\";\n+        }\n+        return \"-> at \" + filtered[0].toString();\n+    }\n+}\n--- a/src/org/mockito/internal/debugging/LoggingListener.java\n+++ b/src/org/mockito/internal/debugging/LoggingListener.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.util.MockitoLogger;\n+import org.mockito.invocation.Invocation;\n \n import static org.mockito.internal.util.StringJoiner.join;\n \n--- a/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n+++ b/src/org/mockito/internal/debugging/MockitoDebuggerImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n import org.mockito.MockitoDebugger;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.UnusedStubsFinder;\n import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n+import org.mockito.invocation.Invocation;\n \n import java.util.List;\n \n             out += line(i.toString());\n             out += line(\" invoked: \" + i.getLocation());\n             if (i.stubInfo() != null) {\n-                out += line(\" stubbed: \" + i.stubInfo().stubbedAt());\n+                out += line(\" stubbed: \" + i.stubInfo().stubbedAt().toString());\n             }\n         }\n \n--- a/src/org/mockito/internal/debugging/VerboseMockInvocationLogger.java\n+++ b/src/org/mockito/internal/debugging/VerboseMockInvocationLogger.java\n \n package org.mockito.internal.debugging;\n \n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n \n \t\tprintStream.println(\"############ Logging method invocation #\" + mockInvocationsCounter + \" on mock/spy ########\");\n \t}\n \n-    private void printInvocation(PrintableInvocation invocation) {\n+    private void printInvocation(DescribedInvocation invocation) {\n \t\tprintStream.println(invocation.toString());\n //\t\tprintStream.println(\"Handling method call on a mock/spy.\");\n \t\tprintlnIndented(\"invoked: \" + invocation.getLocation().toString());\n--- a/src/org/mockito/internal/debugging/WarningsCollector.java\n+++ b/src/org/mockito/internal/debugging/WarningsCollector.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.UnusedStubsFinder;\n import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n import org.mockito.internal.listeners.CollectCreatedMocks;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.invocation.Invocation;\n \n import java.util.LinkedList;\n import java.util.List;\n--- a/src/org/mockito/internal/debugging/WarningsFinder.java\n+++ b/src/org/mockito/internal/debugging/WarningsFinder.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n \n import java.util.Iterator;\n import java.util.LinkedList;\n--- a/src/org/mockito/internal/debugging/WarningsPrinterImpl.java\n+++ b/src/org/mockito/internal/debugging/WarningsPrinterImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n import java.util.List;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.util.MockitoLogger;\n import org.mockito.internal.util.SimpleMockitoLogger;\n+import org.mockito.invocation.Invocation;\n \n public class WarningsPrinterImpl {\n \n--- a/src/org/mockito/internal/exceptions/VerificationAwareInvocation.java\n+++ b/src/org/mockito/internal/exceptions/VerificationAwareInvocation.java\n \n package org.mockito.internal.exceptions;\n \n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n \n-\n-public interface VerificationAwareInvocation extends PrintableInvocation {\n+public interface VerificationAwareInvocation extends DescribedInvocation {\n     \n     boolean isVerified();\n     \n--- a/src/org/mockito/internal/invocation/ArgumentsComparator.java\n+++ b/src/org/mockito/internal/invocation/ArgumentsComparator.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import org.hamcrest.Matcher;\n import org.mockito.internal.matchers.MatcherDecorator;\n import org.mockito.internal.matchers.VarargMatcher;\n+import org.mockito.invocation.Invocation;\n \n import java.util.List;\n \n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/ArgumentsProcessor.java\n+package org.mockito.internal.invocation;\n+\n+import org.hamcrest.Matcher;\n+import org.mockito.internal.matchers.ArrayEquals;\n+import org.mockito.internal.matchers.Equals;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * by Szczepan Faber, created at: 3/31/12\n+ */\n+public class ArgumentsProcessor {\n+    // expands array varArgs that are given by runtime (1, [a, b]) into true\n+    // varArgs (1, a, b);\n+    static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\n+        if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\n+            return args == null ? new Object[0] : args;\n+        }\n+\n+        final int nonVarArgsCount = args.length - 1;\n+        Object[] varArgs;\n+        if (args[nonVarArgsCount] == null) {\n+            // in case someone deliberately passed null varArg array\n+            varArgs = new Object[] { null };\n+        } else {\n+            varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);\n+        }\n+        final int varArgsCount = varArgs.length;\n+        Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];\n+        System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);\n+        System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);\n+        return newArgs;\n+    }\n+\n+    public static List<Matcher> argumentsToMatchers(Object[] arguments) {\n+        List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);\n+        for (Object arg : arguments) {\n+            if (arg != null && arg.getClass().isArray()) {\n+                matchers.add(new ArrayEquals(arg));\n+            } else {\n+                matchers.add(new Equals(arg));\n+            }\n+        }\n+        return matchers;\n+    }\n+}\n--- a/src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java\n+++ b/src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n+\n+import org.mockito.invocation.Invocation;\n \n public interface CapturesArgumensFromInvocation {\n     \n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/InvocationImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.internal.invocation;\n+\n+import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.debugging.LocationImpl;\n+import org.mockito.internal.exceptions.VerificationAwareInvocation;\n+import org.mockito.internal.invocation.realmethod.RealMethod;\n+import org.mockito.internal.reporting.PrintSettings;\n+import org.mockito.invocation.*;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+/**\n+ * Method call on a mock object.\n+ * <p>\n+ * Contains sequence number which should be globally unique and is used for\n+ * verification in order.\n+ * <p>\n+ * Contains stack trace of invocation\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class InvocationImpl implements Invocation, DescribedInvocation, InvocationOnMock, VerificationAwareInvocation {\n+\n+    private static final long serialVersionUID = 8240069639250980199L;\n+    private final int sequenceNumber;\n+    private final Object mock;\n+    private final MockitoMethod method;\n+    private final Object[] arguments;\n+    private final Object[] rawArguments;\n+\n+    private final Location location;\n+    private boolean verified;\n+    private boolean isIgnoredForVerification;\n+\n+    final RealMethod realMethod;\n+    private StubInfo stubInfo;\n+\n+    public InvocationImpl(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {\n+        this.method = mockitoMethod;\n+        this.mock = mock;\n+        this.realMethod = realMethod;\n+        this.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), args);\n+        this.rawArguments = args;\n+        this.sequenceNumber = sequenceNumber;\n+        this.location = new LocationImpl();\n+    }\n+\n+    public Object getMock() {\n+        return mock;\n+    }\n+\n+    public Method getMethod() {\n+        return method.getJavaMethod();\n+    }\n+\n+    public Object[] getArguments() {\n+        return arguments;\n+    }\n+\n+    public boolean isVerified() {\n+        return verified || isIgnoredForVerification;\n+    }\n+\n+    public int getSequenceNumber() {\n+        return sequenceNumber;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (o == null || !o.getClass().equals(this.getClass())) {\n+            return false;\n+        }\n+\n+        InvocationImpl other = (InvocationImpl) o;\n+\n+        return this.mock.equals(other.mock) && this.method.equals(other.method) && this.equalArguments(other.arguments);\n+    }\n+\n+    private boolean equalArguments(Object[] arguments) {\n+        return Arrays.equals(arguments, this.arguments);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 1;\n+    }\n+\n+    public String toString() {\n+        return new PrintSettings().print(ArgumentsProcessor.argumentsToMatchers(getArguments()), this);\n+    }\n+\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    public Object[] getRawArguments() {\n+        return this.rawArguments;\n+    }\n+\n+    public Object callRealMethod() throws Throwable {\n+        if (this.getMethod().getDeclaringClass().isInterface()) {\n+            new Reporter().cannotCallRealMethodOnInterface();\n+        }\n+        return realMethod.invoke(mock, rawArguments);\n+    }\n+\n+    public void markVerified() {\n+        this.verified = true;\n+    }\n+\n+    public StubInfo stubInfo() {\n+        return stubInfo;\n+    }\n+\n+    public void markStubbed(StubInfo stubInfo) {\n+        this.stubInfo = stubInfo;\n+    }\n+\n+    public boolean isIgnoredForVerification() {\n+        return isIgnoredForVerification;\n+    }\n+\n+    public void ignoreForVerification() {\n+        isIgnoredForVerification = true;\n+    }\n+}\n--- a/src/org/mockito/internal/invocation/InvocationMarker.java\n+++ b/src/org/mockito/internal/invocation/InvocationMarker.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import java.util.List;\n \n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n \n public class InvocationMarker {\n \n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n import java.util.List;\n \n import org.hamcrest.Matcher;\n-import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.internal.debugging.Location;\n import org.mockito.internal.matchers.CapturesArguments;\n import org.mockito.internal.reporting.PrintSettings;\n-import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInvocation, CapturesArgumensFromInvocation, Serializable {\n+public class InvocationMatcher implements DescribedInvocation, CapturesArgumensFromInvocation, Serializable {\n \n     private static final long serialVersionUID = -3047126096857467610L;\n     private final Invocation invocation;\n     public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\n         this.invocation = invocation;\n         if (matchers.isEmpty()) {\n-            this.matchers = invocation.argumentsToMatchers();\n+            this.matchers = ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());\n         } else {\n             this.matchers = matchers;\n         }\n     }\n     \n     public String toString() {\n-        return invocation.toString(matchers, new PrintSettings());\n+        return new PrintSettings().print(matchers, invocation);\n     }\n \n     public boolean matches(Invocation actual) {\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n+    public boolean hasSameMethod(Invocation candidate) {\n         //not using method.equals() for 1 good reason:\n         //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n         Method m1 = invocation.getMethod();\n         return invocation.getLocation();\n     }\n \n-    public String toString(PrintSettings printSettings) {\n-        return invocation.toString(matchers, printSettings);\n-    }\n-\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n--- a/src/org/mockito/internal/invocation/InvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/InvocationsFinder.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.internal.debugging.Location;\n import org.mockito.internal.util.collections.ListUtil;\n import org.mockito.internal.util.collections.ListUtil.Filter;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n public class InvocationsFinder {\n \n      * @param context\n      * @param orderedInvocations\n      */\n-    public Invocation findFirstUnverifiedInOrder(InOrderContext context, List<Invocation> orderedInvocations) {        \n+    public Invocation findFirstUnverifiedInOrder(InOrderContext context, List<Invocation> orderedInvocations) {\n         Invocation candidate = null;\n         for(Invocation i : orderedInvocations) {\n             if (!context.isVerified(i)) {\n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.progress.ArgumentMatcherStorage;\n+import org.mockito.invocation.Invocation;\n \n import java.io.Serializable;\n import java.util.List;\n     private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {\n         if (!lastMatchers.isEmpty()) {\n             int recordedMatchersSize = lastMatchers.size();\n-            int expectedMatchersSize = invocation.getArgumentsCount();\n+            int expectedMatchersSize = invocation.getArguments().length;\n             if (expectedMatchersSize != recordedMatchersSize) {\n                 new Reporter().invalidUseOfMatchers(expectedMatchersSize, lastMatchers);\n             }\n--- /dev/null\n+++ b/src/org/mockito/internal/invocation/StubInfoImpl.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.invocation;\n+\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Location;\n+import org.mockito.invocation.StubInfo;\n+\n+import java.io.Serializable;\n+\n+public class StubInfoImpl implements StubInfo, Serializable {\n+    private static final long serialVersionUID = 2125827349332068867L;\n+    private DescribedInvocation stubbedAt;\n+\n+    public StubInfoImpl(DescribedInvocation stubbedAt) {\n+        this.stubbedAt = stubbedAt;\n+    }\n+\n+    public Location stubbedAt() {\n+        return stubbedAt.getLocation();\n+    }\n+}\n--- a/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n+++ b/src/org/mockito/internal/invocation/UnusedStubsFinder.java\n import org.mockito.internal.MockHandlerInterface;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n \n import java.util.*;\n \n--- a/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/finder/AllInvocationsFinder.java\n package org.mockito.internal.invocation.finder;\n \n import org.mockito.internal.MockHandlerInterface;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n \n import java.util.*;\n \n \n     private final class SequenceNumberComparator implements Comparator<Invocation> {\n         public int compare(Invocation o1, Invocation o2) {\n-            return o1.getSequenceNumber().compareTo(o2.getSequenceNumber());\n+            return Integer.valueOf(o1.getSequenceNumber()).compareTo(o2.getSequenceNumber());\n         }\n     }\n }\n--- a/src/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java\n+++ b/src/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java\n \n package org.mockito.internal.invocation.finder;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.collections.ListUtil;\n+import org.mockito.invocation.Invocation;\n \n import java.util.List;\n \n--- /dev/null\n+++ b/src/org/mockito/internal/junit/JUnitTool.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.junit;\n+\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n+\n+public class JUnitTool {\n+\n+    private static boolean hasJUnit;\n+\n+    static {\n+        try {\n+            Class.forName(\"junit.framework.ComparisonFailure\");\n+            hasJUnit = true;\n+        } catch (Throwable t) {\n+            hasJUnit = false;\n+        }\n+    }\n+    \n+    public static boolean hasJUnit() {\n+        return hasJUnit;\n+    }\n+\n+    public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {\n+        try {\n+            Class<?> clazz = Class.forName(\"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\");\n+            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);\n+            return throwable;\n+        } catch (Throwable t) {\n+//            throw the default exception in case of problems\n+            return new ArgumentsAreDifferent(message);\n+        }\n+    }\n+}\n--- a/src/org/mockito/internal/listeners/NotifiedMethodInvocationReport.java\n+++ b/src/org/mockito/internal/listeners/NotifiedMethodInvocationReport.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.listeners;\n \n-import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.MethodInvocationReport;\n \n /**\n  * Report on a method call\n  */\n public class NotifiedMethodInvocationReport implements MethodInvocationReport {\n-        private final Invocation invocation;\n-        private Object returnedValue;\n-        private Throwable throwable;\n+    private final Invocation invocation;\n+    private Object returnedValue;\n+    private Throwable throwable;\n \n \n-        /**\n-         * Build a new {@link org.mockito.listeners.MethodInvocationReport} with a return value.\n-         *\n-         *\n-         * @param invocation Information on the method call\n-         * @param returnedValue The value returned by the method invocation\n-         */\n-        public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue) {\n-            this.invocation = invocation;\n-            this.returnedValue = returnedValue;\n-        }\n+    /**\n+     * Build a new {@link org.mockito.listeners.MethodInvocationReport} with a return value.\n+     *\n+     *\n+     * @param invocation Information on the method call\n+     * @param returnedValue The value returned by the method invocation\n+     */\n+    public NotifiedMethodInvocationReport(Invocation invocation, Object returnedValue) {\n+        this.invocation = invocation;\n+        this.returnedValue = returnedValue;\n+    }\n \n-        /**\n-         * Build a new {@link org.mockito.listeners.MethodInvocationReport} with a return value.\n-         *\n-         *\n-         * @param invocation Information on the method call\n-         * @param throwable Tha throwable raised by the method invocation\n-         */\n-        public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable) {\n-            this.invocation = invocation;\n-            this.throwable = throwable;\n-        }\n+    /**\n+     * Build a new {@link org.mockito.listeners.MethodInvocationReport} with a return value.\n+     *\n+     *\n+     * @param invocation Information on the method call\n+     * @param throwable Tha throwable raised by the method invocation\n+     */\n+    public NotifiedMethodInvocationReport(Invocation invocation, Throwable throwable) {\n+        this.invocation = invocation;\n+        this.throwable = throwable;\n+    }\n \n-        public PrintableInvocation getInvocation() {\n-            return invocation;\n-        }\n+    public DescribedInvocation getInvocation() {\n+        return invocation;\n+    }\n \n-        public Object getReturnedValue() {\n-            return returnedValue;\n-        }\n+    public Object getReturnedValue() {\n+        return returnedValue;\n+    }\n \n-        public Throwable getThrowable() {\n-            return throwable;\n-        }\n+    public Throwable getThrowable() {\n+        return throwable;\n+    }\n \n-        public boolean threwException() {\n-            return throwable != null;\n-        }\n+    public boolean threwException() {\n+        return throwable != null;\n+    }\n \n-        public String getLocationOfStubbing() {\n-            return (invocation.stubInfo() == null) ? null : invocation.stubInfo().stubbedAt();\n-        }\n+    public String getLocationOfStubbing() {\n+        return (invocation.stubInfo() == null) ? null : invocation.stubInfo().stubbedAt().toString();\n+    }\n \n \n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n \n-            NotifiedMethodInvocationReport that = (NotifiedMethodInvocationReport) o;\n+        NotifiedMethodInvocationReport that = (NotifiedMethodInvocationReport) o;\n \n-            if (invocation != null ? !invocation.equals(that.invocation) : that.invocation != null) return false;\n-            if (returnedValue != null ? !returnedValue.equals(that.returnedValue) : that.returnedValue != null)\n-                return false;\n-            if (throwable != null ? !throwable.equals(that.throwable) : that.throwable != null) return false;\n+        if (invocation != null ? !invocation.equals(that.invocation) : that.invocation != null) return false;\n+        if (returnedValue != null ? !returnedValue.equals(that.returnedValue) : that.returnedValue != null)\n+            return false;\n+        if (throwable != null ? !throwable.equals(that.throwable) : that.throwable != null) return false;\n \n-            return true;\n-        }\n+        return true;\n+    }\n \n-        public int hashCode() {\n-            int result = invocation != null ? invocation.hashCode() : 0;\n-            result = 31 * result + (returnedValue != null ? returnedValue.hashCode() : 0);\n-            result = 31 * result + (throwable != null ? throwable.hashCode() : 0);\n-            return result;\n-        }\n+    public int hashCode() {\n+        int result = invocation != null ? invocation.hashCode() : 0;\n+        result = 31 * result + (returnedValue != null ? returnedValue.hashCode() : 0);\n+        result = 31 * result + (throwable != null ? throwable.hashCode() : 0);\n+        return result;\n     }\n+}\n--- a/src/org/mockito/internal/matchers/LocalizedMatcher.java\n+++ b/src/org/mockito/internal/matchers/LocalizedMatcher.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.matchers;\n \n import java.io.Serializable;\n \n import org.hamcrest.*;\n-import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.debugging.LocationImpl;\n+import org.mockito.invocation.Location;\n \n @SuppressWarnings(\"unchecked\")\n public class LocalizedMatcher implements Matcher, ContainsExtraTypeInformation, CapturesArguments, MatcherDecorator, Serializable {\n \n     public LocalizedMatcher(Matcher actualMatcher) {\n         this.actualMatcher = actualMatcher;\n-        this.location = new Location();\n+        this.location = new LocationImpl();\n     }\n \n     public void _dont_implement_Matcher___instead_extend_BaseMatcher_() {\n--- a/src/org/mockito/internal/progress/MockingProgress.java\n+++ b/src/org/mockito/internal/progress/MockingProgress.java\n package org.mockito.internal.progress;\n \n import org.mockito.MockSettings;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.listeners.MockingProgressListener;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n @SuppressWarnings(\"unchecked\")\n--- a/src/org/mockito/internal/progress/MockingProgressImpl.java\n+++ b/src/org/mockito/internal/progress/MockingProgressImpl.java\n import org.mockito.exceptions.Reporter;\n import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.internal.debugging.Localized;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.debugging.LocationImpl;\n import org.mockito.internal.listeners.MockingProgressListener;\n import org.mockito.internal.listeners.MockingStartedListener;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockito.verification.VerificationMode;\n \n @SuppressWarnings(\"unchecked\")\n \n     public void stubbingStarted() {\n         validateState();\n-        stubbingInProgress = new Location();\n+        stubbingInProgress = new LocationImpl();\n     }\n \n     public void validateState() {\n--- a/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n+++ b/src/org/mockito/internal/progress/ThreadSafeMockingProgress.java\n import java.io.Serializable;\n \n import org.mockito.MockSettings;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.listeners.MockingProgressListener;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n @SuppressWarnings(\"unchecked\")\n--- /dev/null\n+++ b/src/org/mockito/internal/reporting/Discrepancy.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.reporting;\n+\n+public class Discrepancy {\n+\n+    private final int wantedCount;\n+    private final int actualCount;\n+\n+    public Discrepancy(int wantedCount, int actualCount) {\n+        this.wantedCount = wantedCount;\n+        this.actualCount = actualCount;\n+    }\n+\n+    public int getWantedCount() {\n+        return wantedCount;\n+    }\n+    \n+    public String getPluralizedWantedCount() {\n+        return Pluralizer.pluralize(wantedCount);\n+    }\n+\n+    public int getActualCount() {\n+        return actualCount;\n+    }\n+\n+    public String getPluralizedActualCount() {\n+        return Pluralizer.pluralize(actualCount);\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/internal/reporting/Pluralizer.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.reporting;\n+\n+public class Pluralizer {\n+\n+    public static String pluralize(int number) {\n+        return number == 1 ? \"1 time\" : number + \" times\";\n+    }\n+}\n--- a/src/org/mockito/internal/reporting/PrintSettings.java\n+++ b/src/org/mockito/internal/reporting/PrintSettings.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.reporting;\n+\n+import org.hamcrest.Matcher;\n+import org.mockito.internal.invocation.ArgumentsProcessor;\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.internal.matchers.MatchersPrinter;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n \n import java.util.Arrays;\n import java.util.LinkedList;\n \n public class PrintSettings {\n \n+    public static final int MAX_LINE_LENGTH = 45;\n     private boolean multiline;\n     private List<Integer> withTypeInfo = new LinkedList<Integer>();\n \n     public void setMatchersToBeDescribedWithExtraTypeInfo(Integer[] indexesOfMatchers) {\n         this.withTypeInfo = Arrays.asList(indexesOfMatchers);\n     }\n+\n+    public String print(List<Matcher> matchers, Invocation invocation) {\n+        MatchersPrinter matchersPrinter = new MatchersPrinter();\n+        String qualifiedName = new MockUtil().getMockName(invocation.getMock()) + \".\" + invocation.getMethod().getName();\n+        String invocationString = qualifiedName + matchersPrinter.getArgumentsLine(matchers, this);\n+        if (isMultiline() || (!matchers.isEmpty() && invocationString.length() > MAX_LINE_LENGTH)) {\n+            return qualifiedName + matchersPrinter.getArgumentsBlock(matchers, this);\n+        } else {\n+            return invocationString;\n+        }\n+    }\n+\n+    public String print(Invocation invocation) {\n+        return print(ArgumentsProcessor.argumentsToMatchers(invocation.getArguments()), invocation);\n+    }\n+\n+    public String print(InvocationMatcher invocationMatcher) {\n+        return print(invocationMatcher.getMatchers(), invocationMatcher.getInvocation());\n+    }\n }\n--- a/src/org/mockito/internal/reporting/SmartPrinter.java\n+++ b/src/org/mockito/internal/reporting/SmartPrinter.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.reporting;\n \n+\n+import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n \n /**\n  * Makes sure both wanted and actual are printed consistently (single line or multiline)\n     private final String wanted;\n     private final String actual;\n \n-    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {\n+    public SmartPrinter(InvocationMatcher wanted, Invocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {\n         PrintSettings printSettings = new PrintSettings();\n         printSettings.setMultiline(wanted.toString().contains(\"\\n\") || actual.toString().contains(\"\\n\"));\n         printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);\n         \n-        this.wanted = wanted.toString(printSettings);\n-        this.actual = actual.toString(printSettings);\n+        this.wanted = printSettings.print(wanted);\n+        this.actual = printSettings.print(actual);\n     }\n \n     public String getWanted() {\n--- a/src/org/mockito/internal/stubbing/InvocationContainer.java\n+++ b/src/org/mockito/internal/stubbing/InvocationContainer.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.Invocation;\n \n import java.util.List;\n \n--- a/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n+++ b/src/org/mockito/internal/stubbing/InvocationContainerImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n-import org.mockito.internal.invocation.StubInfo;\n+import org.mockito.internal.invocation.StubInfoImpl;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.stubbing.answers.AnswersValidator;\n import org.mockito.internal.verification.RegisteredInvocations;\n+import org.mockito.invocation.Invocation;\n import org.mockito.stubbing.Answer;\n \n import java.io.Serializable;\n             for (StubbedInvocationMatcher s : stubbed) {\n                 if (s.matches(invocation)) {\n                     s.markStubUsed(invocation);\n-                    invocation.markStubbed(new StubInfo(s));\n+                    invocation.markStubbed(new StubInfoImpl(s));\n                     return s;\n                 }\n             }\n--- a/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n+++ b/src/org/mockito/internal/stubbing/OngoingStubbingImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.Invocation;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.DeprecatedOngoingStubbing;\n import org.mockito.stubbing.OngoingStubbing;\n--- a/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n+++ b/src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n import java.io.Serializable;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n \n     private static final long serialVersionUID = 4919105134123672727L;\n     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();\n-    private PrintableInvocation usedAt;\n+    private DescribedInvocation usedAt;\n \n     public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {\n         super(invocation.getInvocation(), invocation.getMatchers());\n         answers.add(answer);\n     }\n \n-    public void markStubUsed(PrintableInvocation usedAt) {\n+    public void markStubUsed(DescribedInvocation usedAt) {\n         this.usedAt = usedAt;\n     }\n \n--- a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.answers;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.Invocation;\n import org.mockito.stubbing.Answer;\n \n public class AnswersValidator {\n \n     private Reporter reporter = new Reporter();\n     \n-    public void validate(Answer<?> answer, Invocation invocation) {\n+    public void validate(Answer<?> answer, Invocation theInvocation) {\n+        MethodInfo invocation = new MethodInfo(theInvocation);\n         if (answer instanceof ThrowsException) {\n             validateException((ThrowsException) answer, invocation);\n         }\n         }\n     }\n \n-    private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {\n-        if (invocation.isDeclaredOnInterface()) {\n+    private void validateMockingConcreteClass(CallsRealMethods answer, MethodInfo methodInfo) {\n+        if (methodInfo.isDeclaredOnInterface()) {\n             reporter.cannotCallRealMethodOnInterface();\n         }\n     }\n \n-    private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n-        if (!invocation.isVoid()) {\n+    private void validateDoNothing(DoesNothing answer, MethodInfo methodInfo) {\n+        if (!methodInfo.isVoid()) {\n             reporter.onlyVoidMethodsCanBeSetToDoNothing();\n         }\n     }\n \n-    private void validateReturnValue(Returns answer, Invocation invocation) {\n-        if (invocation.isVoid()) {\n-            reporter.cannotStubVoidMethodWithAReturnValue(invocation.getMethod().getName());\n+    private void validateReturnValue(Returns answer, MethodInfo methodInfo) {\n+        if (methodInfo.isVoid()) {\n+            reporter.cannotStubVoidMethodWithAReturnValue(methodInfo.getMethodName());\n         }\n         \n-        if (answer.returnsNull() && invocation.returnsPrimitive()) {\n-            reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), \"null\", invocation.getMethodName());\n+        if (answer.returnsNull() && methodInfo.returnsPrimitive()) {\n+            reporter.wrongTypeOfReturnValue(methodInfo.printMethodReturnType(), \"null\", methodInfo.getMethodName());\n         } \n \n-        if (!answer.returnsNull() && !invocation.isValidReturnType(answer.getReturnType())) {\n-            reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), answer.printReturnType(), invocation.getMethodName());\n+        if (!answer.returnsNull() && !methodInfo.isValidReturnType(answer.getReturnType())) {\n+            reporter.wrongTypeOfReturnValue(methodInfo.printMethodReturnType(), answer.printReturnType(), methodInfo.getMethodName());\n         }\n     }\n \n-    private void validateException(ThrowsException answer, Invocation invocation) {\n+    private void validateException(ThrowsException answer, MethodInfo methodInfo) {\n         Throwable throwable = answer.getThrowable();\n         if (throwable == null) {\n             reporter.cannotStubWithNullThrowable();\n             return;\n         }\n         \n-        if (!invocation.isValidException(throwable)) {\n+        if (!methodInfo.isValidException(throwable)) {\n             reporter.checkedExceptionInvalid(throwable);\n         }\n     }\n--- /dev/null\n+++ b/src/org/mockito/internal/stubbing/answers/MethodInfo.java\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.mockito.internal.util.Primitives;\n+import org.mockito.invocation.Invocation;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * by Szczepan Faber, created at: 3/31/12\n+ */\n+public class MethodInfo {\n+\n+    private Method method;\n+\n+    public MethodInfo(Invocation theInvocation) {\n+        this.method = theInvocation.getMethod();\n+    }\n+\n+    public boolean isValidException(Throwable throwable) {\n+        Class<?>[] exceptions = method.getExceptionTypes();\n+        Class<?> throwableClass = throwable.getClass();\n+        for (Class<?> exception : exceptions) {\n+            if (exception.isAssignableFrom(throwableClass)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean isValidReturnType(Class clazz) {\n+        if (method.getReturnType().isPrimitive()) {\n+            return Primitives.primitiveTypeOf(clazz) == method.getReturnType();\n+        } else {\n+            return method.getReturnType().isAssignableFrom(clazz);\n+        }\n+    }\n+\n+    public boolean isVoid() {\n+        return this.method.getReturnType() == Void.TYPE;\n+    }\n+\n+    public String printMethodReturnType() {\n+        return method.getReturnType().getSimpleName();\n+    }\n+\n+    public String getMethodName() {\n+        return method.getName();\n+    }\n+\n+    public boolean returnsPrimitive() {\n+        return method.getReturnType().isPrimitive();\n+    }\n+\n+    public Method getMethod() {\n+        return method;\n+    }\n+\n+    public boolean isDeclaredOnInterface() {\n+        return method.getDeclaringClass().isInterface();\n+    }\n+}\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n import java.util.TreeSet;\n \n import org.mockito.internal.creation.ClassNameFinder;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.MockName;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.ObjectMethodsGuru;\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n \n import org.mockito.Mockito;\n import org.mockito.exceptions.Reporter;\n+import org.mockito.internal.debugging.LocationImpl;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockito.plugins.MockMaker;\n import org.mockito.internal.configuration.ClassPathLoader;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.plugins.MockitoInvocationHandler;\n+import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.stubbing.Answer;\n \n /**\n \n     private final class ThrowingInterceptor implements MockitoInvocationHandler {\n         private final InvocationOnMock invocation;\n-        private final Location location = new Location();\n+        private final Location location = new LocationImpl();\n \n         private ThrowingInterceptor(InvocationOnMock invocation) {\n             this.invocation = invocation;\n--- a/src/org/mockito/internal/verification/AtLeast.java\n+++ b/src/org/mockito/internal/verification/AtLeast.java\n import java.util.List;\n \n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationDataInOrder;\n import org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsInOrderChecker;\n import org.mockito.internal.verification.checkers.MissingInvocationChecker;\n import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n public class AtLeast implements VerificationInOrderMode, VerificationMode {\n--- a/src/org/mockito/internal/verification/AtMost.java\n+++ b/src/org/mockito/internal/verification/AtMost.java\n \n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n public class AtMost implements VerificationMode {\n--- a/src/org/mockito/internal/verification/Calls.java\n+++ b/src/org/mockito/internal/verification/Calls.java\n package org.mockito.internal.verification;\n \n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationDataInOrder;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n import org.mockito.internal.verification.checkers.*;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n import java.util.List;\n--- a/src/org/mockito/internal/verification/InOrderContextImpl.java\n+++ b/src/org/mockito/internal/verification/InOrderContextImpl.java\n  */\n package org.mockito.internal.verification;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.util.collections.IdentitySet;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n \n public class InOrderContextImpl implements InOrderContext {\n     \n--- a/src/org/mockito/internal/verification/InOrderWrapper.java\n+++ b/src/org/mockito/internal/verification/InOrderWrapper.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import org.mockito.internal.InOrderImpl;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n import java.util.List;\n--- a/src/org/mockito/internal/verification/NoMoreInteractions.java\n+++ b/src/org/mockito/internal/verification/NoMoreInteractions.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationDataInOrder;\n import org.mockito.internal.verification.api.VerificationInOrderMode;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n public class NoMoreInteractions implements VerificationMode, VerificationInOrderMode {\n \n     @SuppressWarnings(\"unchecked\")\n     public void verify(VerificationData data) {\n-        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());                       \n+        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());\n         if (unverified != null) {\n             new Reporter().noMoreInteractionsWanted(unverified, (List) data.getAllInvocations());\n         }\n--- a/src/org/mockito/internal/verification/Only.java\n+++ b/src/org/mockito/internal/verification/Only.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n public class Only implements VerificationMode {\n--- a/src/org/mockito/internal/verification/RegisteredInvocations.java\n+++ b/src/org/mockito/internal/verification/RegisteredInvocations.java\n \n package org.mockito.internal.verification;\n \n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n+import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.util.collections.ListUtil;\n import org.mockito.internal.util.collections.ListUtil.Filter;\n+import org.mockito.invocation.Invocation;\n \n import java.io.Serializable;\n import java.util.Collections;\n \n     private static class RemoveToString implements Filter<Invocation> {\n         public boolean isOut(Invocation invocation) {\n-            return invocation.isToString();\n+            return new ObjectMethodsGuru().isToString(invocation.getMethod());\n         }\n     }\n }\n--- a/src/org/mockito/internal/verification/Times.java\n+++ b/src/org/mockito/internal/verification/Times.java\n import java.util.List;\n \n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.verification.api.VerificationData;\n import org.mockito.internal.verification.api.VerificationDataInOrder;\n import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;\n import org.mockito.internal.verification.checkers.NumberOfInvocationsChecker;\n import org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n public class Times implements VerificationInOrderMode, VerificationMode {\n--- a/src/org/mockito/internal/verification/VerificationDataImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationDataImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.stubbing.InvocationContainer;\n import org.mockito.internal.util.ObjectMethodsGuru;\n import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.invocation.Invocation;\n \n public class VerificationDataImpl implements VerificationData {\n \n--- a/src/org/mockito/internal/verification/api/InOrderContext.java\n+++ b/src/org/mockito/internal/verification/api/InOrderContext.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.api;\n \n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.Invocation;\n \n public interface InOrderContext {\n \n--- a/src/org/mockito/internal/verification/api/VerificationData.java\n+++ b/src/org/mockito/internal/verification/api/VerificationData.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.api;\n \n import java.util.List;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n \n public interface VerificationData {\n \n--- a/src/org/mockito/internal/verification/api/VerificationDataInOrder.java\n+++ b/src/org/mockito/internal/verification/api/VerificationDataInOrder.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.api;\n \n import java.util.List;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n \n public interface VerificationDataInOrder {\n \n--- a/src/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java\n+++ b/src/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.api;\n \n import java.util.List;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n \n public class VerificationDataInOrderImpl implements VerificationDataInOrder {\n \n--- a/src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.checkers;\n \n-import org.mockito.exceptions.Discrepancy;\n+import org.mockito.internal.reporting.Discrepancy;\n \n public class AtLeastDiscrepancy extends Discrepancy {\n \n--- a/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n public class AtLeastXNumberOfInvocationsChecker {\n     \n--- a/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n public class AtLeastXNumberOfInvocationsInOrderChecker {\n     \n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool;\n+import org.mockito.invocation.Invocation;\n \n public class MissingInvocationChecker {\n     \n--- a/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockito.internal.verification.api.InOrderContext;\n import org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool;\n+import org.mockito.invocation.Invocation;\n import org.mockito.verification.VerificationMode;\n \n public class MissingInvocationInOrderChecker {\n--- a/src/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java\n \n package org.mockito.internal.verification.checkers;\n \n-import org.mockito.exceptions.Discrepancy;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.reporting.Discrepancy;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n import java.util.List;\n \n--- a/src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java\n \n import java.util.List;\n \n-import org.mockito.exceptions.Discrepancy;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.reporting.Discrepancy;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n public class NumberOfInvocationsChecker {\n     \n--- a/src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java\n+++ b/src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java\n \n import java.util.List;\n \n-import org.mockito.exceptions.Discrepancy;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMarker;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n+import org.mockito.internal.reporting.Discrepancy;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n \n public class NumberOfInvocationsInOrderChecker {\n     \n--- /dev/null\n+++ b/src/org/mockito/invocation/DescribedInvocation.java\n+package org.mockito.invocation;\n+\n+import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.internal.Incubating;\n+\n+/**\n+ * Provides information about the invocation, specifically a human readable description and the location.\n+ */\n+@Incubating\n+public interface DescribedInvocation extends PrintableInvocation {\n+\n+    /**\n+     * Describes the invocation in the human friendly way.\n+     *\n+     * @return the description of this invocation.\n+     */\n+    String toString();\n+\n+    /**\n+     * The place in the code where the invocation happened.\n+     *\n+     * @return the location of the invocation.\n+     */\n+    Location getLocation();\n+}\n--- /dev/null\n+++ b/src/org/mockito/invocation/Invocation.java\n+package org.mockito.invocation;\n+\n+import org.mockito.internal.Incubating;\n+\n+/**\n+ * A method call on a mock object. Contains all information and state needed for the Mockito framework to operate.\n+ * This API might be useful for developers who extend Mockito.\n+ * <p>\n+ * The javadoc does not have lots of examples or documentation because its audience is different.\n+ * Vast majority of users don't need to use the Invocation. It's mostly useful for other framework authors\n+ * that extend Mockito.\n+ */\n+@Incubating\n+public interface Invocation extends InvocationOnMock, DescribedInvocation {\n+\n+    /**\n+     * @return whether the invocation has been already verified.\n+     * Needed for {@link org.mockito.Mockito#verifyNoMoreInteractions(Object...)}\n+     */\n+    boolean isVerified();\n+\n+    /**\n+     * @return the sequence number of the Invocation. Useful to determine the order of invocations.\n+     * Used by verification in order.\n+     */\n+    int getSequenceNumber();\n+\n+    /**\n+     * @return the location in code of this invocation.\n+     */\n+    Location getLocation();\n+\n+    /**\n+     * Returns unprocessed arguments whereas {@link #getArguments()} returns\n+     * arguments already processed (e.g. varargs expended, etc.).\n+     *\n+     * @return unprocessed arguments, exactly as provided to this invocation.\n+     */\n+    Object[] getRawArguments();\n+\n+    /**\n+     * Marks this invocation as verified so that it will not cause verification error at\n+     * {@link org.mockito.Mockito#verifyNoMoreInteractions(Object...)}\n+     */\n+    void markVerified();\n+\n+    /**\n+     * @return the stubbing information for this invocation. May return null - this means\n+     * the invocation was not stubbed.\n+     */\n+    StubInfo stubInfo();\n+\n+    /**\n+     * Marks this invocation as stubbed.\n+     *\n+     * @param stubInfo the information about stubbing.\n+     */\n+    void markStubbed(StubInfo stubInfo);\n+\n+    /**\n+     * Informs if the invocation participates in verify-no-more-invocations or verification in order.\n+     *\n+     * @return whether this invocation should be ignored for the purposes of\n+     * verify-no-more-invocations or verification in order.\n+     */\n+    boolean isIgnoredForVerification();\n+\n+    /**\n+     * Configures this invocation to be ignored for verify-no-more-invocations or verification in order.\n+     * See also {@link #isIgnoredForVerification()}\n+     */\n+    void ignoreForVerification();\n+}\n--- /dev/null\n+++ b/src/org/mockito/invocation/Location.java\n+package org.mockito.invocation;\n+\n+import org.mockito.internal.Incubating;\n+\n+/**\n+ * Describes the location of something in the source code.\n+ */\n+@Incubating\n+public interface Location {\n+\n+    /**\n+     * @return the location\n+     */\n+    String toString();\n+\n+}\n--- /dev/null\n+++ b/src/org/mockito/invocation/MockitoInvocationHandler.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.invocation;\n+\n+import org.mockito.internal.Incubating;\n+import org.mockito.invocation.Invocation;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Mockito handler of an invocation on a mock. This is a core part of the API, the heart of Mockito.\n+ * This type might be interesting for developers wishing to extend Mockito.\n+ * See also the {@link org.mockito.plugins.MockMaker}.\n+ * <p>\n+ * Takes an invocation object and handles it.\n+ * The Invocation instance should be created by the {@link org.mockito.plugins.MockMaker}.\n+ * <p>\n+ * The default implementation provided by Mockito handles invocations by recording\n+ * method calls on mocks for further verification, captures the stubbing information when mock is stubbed,\n+ * returns the stubbed values for invocations that have been stubbed, and much more.\n+ */\n+@Incubating\n+public interface MockitoInvocationHandler extends Serializable {\n+\n+    /**\n+     * Handles the invocation.\n+     *\n+     * @param invocation The invocation to handle\n+     * @return Result\n+     * @throws Throwable Throwable\n+     */\n+    @Incubating\n+    Object handle(Invocation invocation) throws Throwable;\n+\n+}\n--- /dev/null\n+++ b/src/org/mockito/invocation/StubInfo.java\n+package org.mockito.invocation;\n+\n+import org.mockito.internal.Incubating;\n+\n+/**\n+ * The information about stubbing, for example the location of stubbing.\n+ */\n+@Incubating\n+public interface StubInfo {\n+\n+    /**\n+     * @return the location where the invocation was stubbed.\n+     */\n+    Location stubbedAt();\n+}\n--- a/src/org/mockito/listeners/MethodInvocationReport.java\n+++ b/src/org/mockito/listeners/MethodInvocationReport.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.listeners;\n \n import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n \n /**\n  * Represent a method call on a mock.\n  */\n public interface MethodInvocationReport {\n     /**\n+     * The return type is deprecated, please assign the return value from this method\n+     * to the {@link DescribedInvocation} type. Sorry for inconvenience but we had to move\n+     * {@link PrintableInvocation} to better place to keep the API consistency.\n+     *\n      * @return Information on the method call, never {@code null}\n      */\n-    PrintableInvocation getInvocation();\n+    DescribedInvocation getInvocation();\n \n     /**\n      * @return The resulting value of the method invocation, may be <code>null</code>\n--- /dev/null\n+++ b/src/org/mockito/mock/MockSettingsInfo.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+\n+package org.mockito.mock;\n+\n+import org.mockito.internal.Incubating;\n+\n+/**\n+ * Informs about the mock settings\n+ */\n+@Incubating\n+public interface MockSettingsInfo {\n+\n+    /**\n+     * if the mock is serializable\n+     */\n+    boolean isSerializable();\n+}\n--- a/src/org/mockito/plugins/MockMaker.java\n+++ b/src/org/mockito/plugins/MockMaker.java\n package org.mockito.plugins;\n \n import org.mockito.internal.Incubating;\n+import org.mockito.invocation.MockitoInvocationHandler;\n+import org.mockito.mock.MockSettingsInfo;\n \n /**\n  * The facility to create mocks.\n  *     the qualified name <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>\n  * </ol></p>\n  *\n- * @see MockSettingsInfo\n- * @see MockitoInvocationHandler\n+ * @see org.mockito.mock.MockSettingsInfo\n+ * @see org.mockito.invocation.MockitoInvocationHandler\n  * @see org.mockito.internal.configuration.ClassPathLoader\n  */\n @Incubating\n--- a/test/org/mockito/exceptions/ReporterTest.java\n+++ b/test/org/mockito/exceptions/ReporterTest.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.internal.reporting.*;\n import org.mockitoutil.TestBase;\n \n public class ReporterTest extends TestBase {\n \n     @Test(expected=TooLittleActualInvocations.class)\n     public void shouldLetPassingNullLastActualStackTrace() throws Exception {\n-        new Reporter().tooLittleActualInvocations(new Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);\n+        new Reporter().tooLittleActualInvocations(new org.mockito.internal.reporting.Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);\n     }\n     \n     @Test(expected=MockitoException.class)\n--- a/test/org/mockito/internal/AllInvocationsFinderTest.java\n+++ b/test/org/mockito/internal/AllInvocationsFinderTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.finder.AllInvocationsFinder;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n--- a/test/org/mockito/internal/InOrderImplTest.java\n+++ b/test/org/mockito/internal/InOrderImplTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal;\n \n import static java.util.Arrays.*;\n \n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n--- a/test/org/mockito/internal/InvocationNotifierHandlerTest.java\n+++ b/test/org/mockito/internal/InvocationNotifierHandlerTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal;\n \n import org.junit.Before;\n import org.mockito.Spy;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n import org.mockito.runners.MockitoJUnitRunner;\n--- a/test/org/mockito/internal/MockHandlerTest.java\n+++ b/test/org/mockito/internal/MockHandlerTest.java\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.creation.MockSettingsImpl;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.MatchersBinder;\n import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.verification.VerificationModeFactory;\n+import org.mockito.invocation.Invocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n import org.mockitoutil.TestBase;\n public class MockHandlerTest extends TestBase {\n \n \tprivate StubbedInvocationMatcher stubbedInvocationMatcher = mock(StubbedInvocationMatcher.class);\n-\tprivate Invocation invocation = mock(Invocation.class);\n+\tprivate Invocation invocation = mock(InvocationImpl.class);\n \n \n \t@Test\n \n \tprivate void stubOrdinaryInvocationWithInvocationMatcher(MockHandler<?> handler, StubbedInvocationMatcher value) {\n \t\thandler.invocationContainerImpl = mock(InvocationContainerImpl.class);\n-\t\tgiven(handler.invocationContainerImpl.findAnswerFor(any(Invocation.class))).willReturn(value);\n+\t\tgiven(handler.invocationContainerImpl.findAnswerFor(any(InvocationImpl.class))).willReturn(value);\n \t}\n \n \n--- a/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n+++ b/test/org/mockito/internal/creation/MethodInterceptorFilterTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodProxy;\n-import org.mockito.plugins.MockitoInvocationHandler;\n+import org.mockito.internal.invocation.InvocationImpl;\n+import org.mockito.invocation.MockitoInvocationHandler;\n import org.mockito.internal.creation.cglib.CGLIBHacker;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.MockitoMethod;\n import org.mockito.internal.invocation.SerializableMethod;\n \n         //then\n         assertTrue((Integer) ret != 0);\n-        Mockito.verify(handler, never()).handle(any(Invocation.class));\n+        Mockito.verify(handler, never()).handle(any(InvocationImpl.class));\n     }\n \n     @Test\n \n         //then\n         assertTrue((Boolean) ret);\n-        Mockito.verify(handler, never()).handle(any(Invocation.class));\n+        Mockito.verify(handler, never()).handle(any(InvocationImpl.class));\n     }\n     \n     //TODO: move to separate factory\n--- a/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n+++ b/test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.creation.cglib;\n \n import static org.mockito.Mockito.mock;\n \n import org.mockito.internal.creation.MockitoMethodProxy;\n import org.mockito.internal.invocation.ExposedInvocation;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.mockitousage.IMethods;\n                 return invocation;\n             }});\n         \n-        Invocation i = (Invocation) mock.objectReturningMethodNoArgs();\n+        InvocationImpl i = (InvocationImpl) mock.objectReturningMethodNoArgs();\n         return new ExposedInvocation(i).getMethodProxy();\n     }\n }\n--- a/test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java\n+++ b/test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n-import org.mockito.internal.invocation.StubInfo;\n+import org.mockito.internal.invocation.StubInfoImpl;\n import org.mockito.internal.listeners.NotifiedMethodInvocationReport;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n \n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n \n     private ByteArrayOutputStream output;\n     private Invocation invocation = new InvocationBuilder().toInvocation();\n-    private PrintableInvocation stubbedInvocation = new InvocationBuilder().toInvocation();\n+    private DescribedInvocation stubbedInvocation = new InvocationBuilder().toInvocation();\n \n     @Before\n     public void init_Listener() throws Exception {\n \n     @Test\n     public void should_print_stubbed_info_if_availbable() throws Exception {\n-        invocation.markStubbed(new StubInfo(stubbedInvocation));\n+        invocation.markStubbed(new StubInfoImpl(stubbedInvocation));\n \n         listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, \"whatever\"));\n \n--- a/test/org/mockito/internal/debugging/WarningsFinderTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsFinderTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.debugging;\n \n import static java.util.Arrays.*;\n \n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n--- a/test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java\n+++ b/test/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.exceptions.util;\n \n import static java.util.Arrays.*;\n import java.util.List;\n \n import org.junit.Test;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n--- a/test/org/mockito/internal/invocation/ArgumentsComparatorTest.java\n+++ b/test/org/mockito/internal/invocation/ArgumentsComparatorTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n import org.junit.Test;\n import org.mockito.internal.matchers.*;\n--- a/test/org/mockito/internal/invocation/ExposedInvocation.java\n+++ b/test/org/mockito/internal/invocation/ExposedInvocation.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import org.mockito.internal.creation.MockitoMethodProxy;\n \n     private final MockitoMethodProxy methodProxy;\n \n-    public ExposedInvocation(Invocation toBeExposed) {\n+    public ExposedInvocation(InvocationImpl toBeExposed) {\n          methodProxy = ((HasCGLIBMethodProxy) toBeExposed.realMethod).getMethodProxy();\n     }\n \n--- a/test/org/mockito/internal/invocation/InvocationBuilder.java\n+++ b/test/org/mockito/internal/invocation/InvocationBuilder.java\n package org.mockito.internal.invocation;\n \n import org.mockito.Mockito;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n \n import java.lang.reflect.Method;\n             }\n         }\n         \n-        Invocation i = new Invocation(mock, new SerializableMethod(method), args, sequenceNumber, null);\n+        Invocation i = new InvocationImpl(mock, new SerializableMethod(method), args, sequenceNumber, null);\n         if (verified) {\n             i.markVerified();\n         }\n--- a/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMarkerTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.invocation;\n \n import java.util.Arrays;\n import org.junit.Test;\n import org.mockito.internal.util.ObjectBox;\n import org.mockito.internal.verification.InOrderContextImpl;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class InvocationMarkerTest extends TestBase {\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.LocalizedMatcher;\n import org.mockito.internal.matchers.NotNull;\n-import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Test\n     public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {\n-        PrintingFriendlyInvocation withOneArg = new InvocationMatcher(new InvocationBuilder().args(\"test\").toInvocation());\n-        PrintingFriendlyInvocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args(\"test\", 100).toInvocation());\n+        InvocationMatcher withOneArg = new InvocationMatcher(new InvocationBuilder().args(\"test\").toInvocation());\n+        InvocationMatcher withTwoArgs = new InvocationMatcher(new InvocationBuilder().args(\"test\", 100).toInvocation());\n \n         assertFalse(withOneArg.equals(null));\n         assertFalse(withOneArg.equals(withTwoArgs));\n--- a/test/org/mockito/internal/invocation/InvocationTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationTest.java\n package org.mockito.internal.invocation;\n \n import java.lang.reflect.Method;\n-import java.nio.charset.CharacterCodingException;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n+import org.mockito.invocation.Invocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     @Test\n     public void shouldPrintArgumentsInMultilinesWhenGetsTooBig() {\n         invocation = new InvocationBuilder().args(\"veeeeery long string that makes it ugly in one line\", 1).toInvocation();\n-        assertThat(invocation.toString(), endsWith( \n+        assertThat(invocation.toString(), endsWith(\n                 \"simpleMethod(\" +\n-                \"\\n\" +\n-                \"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n-                \"\\n\" +\n-                \"    1\" +\n-                \"\\n\" +\n-                \");\"));\n+                        \"\\n\" +\n+                        \"    \\\"veeeeery long string that makes it ugly in one line\\\",\" +\n+                        \"\\n\" +\n+                        \"    1\" +\n+                        \"\\n\" +\n+                        \");\"));\n     }\n     \n     @Test\n     public void shouldTransformArgumentsToMatchers() throws Exception {\n-        Invocation i = new InvocationBuilder().args(\"foo\", new String[] {\"bar\"}).toInvocation();\n-        List matchers = i.argumentsToMatchers();\n+        Invocation i = new InvocationBuilder().args(\"foo\", new String[]{\"bar\"}).toInvocation();\n+        List matchers = ArgumentsProcessor.argumentsToMatchers(i.getArguments());\n \n         assertEquals(2, matchers.size());\n         assertEquals(Equals.class, matchers.get(0).getClass());\n         assertEquals(ArrayEquals.class, matchers.get(1).getClass());\n-    }\n-    \n-    @Test\n-    public void shouldKnowIfIsToString() throws Exception {\n-        Invocation toString = new InvocationBuilder().method(\"toString\").toInvocation();\n-        assertTrue(toString.isToString());\n-        \n-        Invocation notToString = new InvocationBuilder().method(\"toString\").arg(\"foo\").toInvocation();\n-        assertFalse(notToString.isToString());\n-    }\n-    \n-    @Test\n-    public void shouldKnowValidThrowables() throws Exception {\n-        Invocation invocation = new InvocationBuilder().method(\"canThrowException\").toInvocation();\n-        assertFalse(invocation.isValidException(new Exception()));\n-        assertTrue(invocation.isValidException(new CharacterCodingException()));\n     }\n     \n     class Foo {\n--- a/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsFinderTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.debugging.Location;\n import org.mockito.internal.verification.InOrderContextImpl;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n--- /dev/null\n+++ b/test/org/mockito/internal/reporting/PluralizerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.reporting;\n+\n+import org.junit.Test;\n+import org.mockitoutil.TestBase;\n+\n+public class PluralizerTest extends TestBase {\n+\n+    @Test\n+    public void shouldGetPluralizedNumber() {\n+        new Pluralizer();\n+        assertEquals(\"0 times\", Pluralizer.pluralize(0));\n+        assertEquals(\"1 time\", Pluralizer.pluralize(1));\n+        assertEquals(\"2 times\", Pluralizer.pluralize(2));\n+        assertEquals(\"20 times\", Pluralizer.pluralize(20));\n+    }\n+}\n--- a/test/org/mockito/internal/stubbing/InvocationContainerImplTest.java\n+++ b/test/org/mockito/internal/stubbing/InvocationContainerImplTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing;\n \n import org.junit.Test;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;\n+import org.mockito.invocation.Invocation;\n \n import java.util.LinkedList;\n \n--- a/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n+++ b/test/org/mockito/internal/stubbing/MockitoStubberTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.MockingProgress;\n import org.mockito.internal.progress.MockingProgressImpl;\n import org.mockito.internal.stubbing.answers.Returns;\n import org.mockito.internal.stubbing.answers.ThrowsException;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class MockitoStubberTest extends TestBase{\n--- a/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.stubbing.answers;\n \n import static org.mockito.Mockito.*;\n \n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n @SuppressWarnings(\"unchecked\")\n     @Test\n     public void shouldValidateNullThrowable() throws Throwable {\n         try {\n-            validator.validate(new ThrowsException(null), null);\n+            validator.validate(new ThrowsException(null), new InvocationBuilder().toInvocation());\n             fail();\n         } catch (MockitoException e) {}\n     }\n--- /dev/null\n+++ b/test/org/mockito/internal/stubbing/answers/MethodInfoTest.java\n+package org.mockito.internal.stubbing.answers;\n+\n+import org.junit.Test;\n+import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.invocation.Invocation;\n+\n+import java.nio.charset.CharacterCodingException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * by Szczepan Faber, created at: 3/31/12\n+ */\n+public class MethodInfoTest {\n+\n+    @Test\n+    public void shouldKnowValidThrowables() throws Exception {\n+        //when\n+        Invocation invocation = new InvocationBuilder().method(\"canThrowException\").toInvocation();\n+        MethodInfo info = new MethodInfo(invocation);\n+\n+        //then\n+        assertFalse(info.isValidException(new Exception()));\n+        assertTrue(info.isValidException(new CharacterCodingException()));\n+    }\n+}\n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java\n import java.util.*;\n \n import org.junit.Test;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n import static org.mockito.Mockito.mock;\n--- a/test/org/mockito/internal/verification/NoMoreInteractionsTest.java\n+++ b/test/org/mockito/internal/verification/NoMoreInteractionsTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import static java.util.Arrays.*;\n \n import org.junit.Test;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.verification.api.VerificationDataInOrderImpl;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class NoMoreInteractionsTest extends TestBase {\n--- a/test/org/mockito/internal/verification/OnlyTest.java\n+++ b/test/org/mockito/internal/verification/OnlyTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import static org.junit.Assert.*;\n \n import org.junit.Test;\n import org.mockito.exceptions.base.MockitoAssertionError;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.verification.api.VerificationData;\n+import org.mockito.invocation.Invocation;\n \n public class OnlyTest {\n \n--- a/test/org/mockito/internal/verification/RegisteredInvocationsTest.java\n+++ b/test/org/mockito/internal/verification/RegisteredInvocationsTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class RegisteredInvocationsTest extends TestBase {\n--- a/test/org/mockito/internal/verification/SmartPrinterTest.java\n+++ b/test/org/mockito/internal/verification/SmartPrinterTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n+import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class SmartPrinterTest extends TestBase {\n \n-    private PrintingFriendlyInvocation multi;\n-    private PrintingFriendlyInvocation shortie;\n+    private InvocationMatcher multi;\n+    private InvocationMatcher shortie;\n     @Mock private IMethods mock;\n \n     @Before\n     public void setup() throws Exception {\n         mock.varargs(\"first very long argument\", \"second very long argument\", \"another very long argument\");\n-        multi = getLastInvocation();\n-        multi.toString();\n-        \n+        multi = new InvocationMatcher(getLastInvocation());\n+\n         mock.varargs(\"short arg\");\n-        shortie = getLastInvocation();\n+        shortie = new InvocationMatcher(getLastInvocation());\n     }\n \n     @Test\n     public void shouldPrintBothInMultilinesWhenFirstIsMulti() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(multi, shortie);\n+        SmartPrinter printer = new SmartPrinter(multi, shortie.getInvocation());\n         \n         //then\n         assertContains(\"\\n\", printer.getWanted().toString());\n     @Test\n     public void shouldPrintBothInMultilinesWhenSecondIsMulti() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(shortie, multi);\n+        SmartPrinter printer = new SmartPrinter(shortie, multi.getInvocation());\n         \n         //then\n         assertContains(\"\\n\", printer.getWanted().toString());\n     @Test\n     public void shouldPrintBothInMultilinesWhenBothAreMulti() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(multi, multi);\n+        SmartPrinter printer = new SmartPrinter(multi, multi.getInvocation());\n         \n         //then\n         assertContains(\"\\n\", printer.getWanted().toString());\n     @Test\n     public void shouldPrintBothInSingleLineWhenBothAreShort() {\n         //when\n-        SmartPrinter printer = new SmartPrinter(shortie, shortie);\n+        SmartPrinter printer = new SmartPrinter(shortie, shortie.getInvocation());\n         \n         //then\n         assertNotContains(\"\\n\", printer.getWanted().toString());\n--- a/test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockito.internal.verification.checkers;\n \n import static java.util.Arrays.asList;\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.internal.invocation.*;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class AtLeastXNumberOfInvocationsCheckerTest extends TestBase {\n--- a/test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java\n+++ b/test/org/mockito/internal/verification/checkers/InvocationsFinderStub.java\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.invocation.InvocationsFinder;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n \n class InvocationsFinderStub extends InvocationsFinder {\n     \n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockitoutil.TestBase;\n \n public class MissingInvocationCheckerTest extends TestBase {\n         private Location actualLocation;\n         \n         @Override\n-        public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {\n+        public void wantedButNotInvoked(DescribedInvocation wanted, List<? extends DescribedInvocation> invocations) {\n             this.wanted = wanted;\n         }\n         \n--- a/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.progress.VerificationModeBuilder;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockito.internal.verification.InOrderContextImpl;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockitoutil.TestBase;\n \n public class MissingInvocationInOrderCheckerTest extends TestBase {\n     }\n     \n     class ReporterStub extends Reporter {\n-        private PrintableInvocation wanted;\n-        private PrintableInvocation previous;\n+        private DescribedInvocation wanted;\n+        private DescribedInvocation previous;\n         private String wantedString;\n         private String actual;\n         private Location actualLocation;\n         \n-        @Override public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {\n+        @Override public void wantedButNotInvokedInOrder(DescribedInvocation wanted, DescribedInvocation previous) {\n             this.wanted = wanted;\n             this.previous = previous;\n         }\n         \n-        @Override public void wantedButNotInvoked(PrintableInvocation wanted) {\n+        @Override public void wantedButNotInvoked(DescribedInvocation wanted) {\n             this.wanted = wanted;\n         }\n \n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.exceptions.Discrepancy;\n-import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.debugging.Location;\n-import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n+import org.mockito.invocation.DescribedInvocation;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.Location;\n import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsCheckerTest extends TestBase {\n     class ReporterStub extends Reporter {\n         private int wantedCount;\n         private int actualCount;\n-        private PrintableInvocation wanted;\n+        private DescribedInvocation wanted;\n         private Location location;\n-        @Override public void tooLittleActualInvocations(Discrepancy discrepancy, PrintableInvocation wanted, Location lastActualLocation) {\n+        @Override public void tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy discrepancy, DescribedInvocation wanted, Location lastActualLocation) {\n                     this.wantedCount = discrepancy.getWantedCount();\n                     this.actualCount = discrepancy.getActualCount();\n                     this.wanted = wanted;\n                     this.location = lastActualLocation;\n         }\n         \n-        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, PrintableInvocation wanted, Location firstUndesired) {\n+        @Override public void tooManyActualInvocations(int wantedCount, int actualCount, DescribedInvocation wanted, Location firstUndesired) {\n                     this.wantedCount = wantedCount;\n                     this.actualCount = actualCount;\n                     this.wanted = wanted;\n         }\n         \n         @Override\n-        public void neverWantedButInvoked(PrintableInvocation wanted, Location firstUndesired) {\n+        public void neverWantedButInvoked(DescribedInvocation wanted, Location firstUndesired) {\n             this.wanted = wanted;\n             this.location = firstUndesired;\n         }\n--- a/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n+++ b/test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java\n import org.junit.Test;\n import org.mockito.exceptions.Reporter;\n import org.mockito.exceptions.verification.VerificationInOrderFailure;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.internal.verification.InOrderContextImpl;\n import org.mockito.internal.verification.api.InOrderContext;\n+import org.mockito.invocation.Invocation;\n import org.mockitoutil.TestBase;\n \n public class NumberOfInvocationsInOrderCheckerTest extends TestBase {\n--- a/test/org/mockitousage/debugging/InvocationListenerCallbackTest.java\n+++ b/test/org/mockitousage/debugging/InvocationListenerCallbackTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.debugging;\n \n import org.junit.Test;\n import org.mockito.InOrder;\n-import org.mockito.exceptions.PrintableInvocation;\n+import org.mockito.invocation.DescribedInvocation;\n import org.mockito.listeners.InvocationListener;\n import org.mockito.listeners.MethodInvocationReport;\n \n     }\n \n     private static class RememberingListener implements InvocationListener {\n-        PrintableInvocation invocation;\n+        DescribedInvocation invocation;\n         Object returnValue;\n         String locationOfStubbing;\n \n--- a/test/org/mockitousage/internal/debugging/LocationTest.java\n+++ b/test/org/mockitousage/internal/debugging/LocationTest.java\n-/*\n- * Copyright (c) 2007 Mockito contributors\n- * This program is made available under the terms of the MIT License.\n- */\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n package org.mockitousage.internal.debugging;\n \n import org.junit.Test;\n-import org.mockito.internal.debugging.Location;\n+import org.mockito.internal.debugging.LocationImpl;\n import org.mockito.internal.exceptions.base.StackTraceFilter;\n import org.mockitoutil.TestBase;\n \n \n     @Test\n     public void shouldLocationNotContainGetStackTraceMethod() {\n-        assertContains(\"shouldLocationNotContainGetStackTraceMethod\", new Location().toString());\n+        assertContains(\"shouldLocationNotContainGetStackTraceMethod\", new LocationImpl().toString());\n     }\n \n     @Test\n         };\n \n         //when\n-        String loc = new Location(filterReturningEmptyArray).toString();\n+        String loc = new LocationImpl(filterReturningEmptyArray).toString();\n \n         //then\n         assertEquals(\"-> at <<unknown line>>\", loc);\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n import org.mockito.StateMaster;\n import org.mockito.internal.MockitoCore;\n import org.mockito.internal.configuration.ConfigurationAccess;\n-import org.mockito.internal.invocation.Invocation;\n+import org.mockito.internal.invocation.InvocationImpl;\n import org.mockito.internal.invocation.SerializableMethod;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n \n import java.io.*;\n import java.util.Collection;\n         for (int i = 0; i < args.length; i++) {\n             types[i] = args[i].getClass();\n         }\n-        return new Invocation(mock(type), new SerializableMethod(type.getMethod(methodName,\n+        return new InvocationImpl(mock(type), new SerializableMethod(type.getMethod(methodName,\n                 types)), args, 1, null);\n     }\n \n     protected static Invocation invocationOf(Class<?> type, String methodName, RealMethod realMethod) throws NoSuchMethodException {\n-        return new Invocation(new Object(), new SerializableMethod(type.getMethod(methodName,\n+        return new InvocationImpl(new Object(), new SerializableMethod(type.getMethod(methodName,\n                 new Class[0])), new Object[0], 1, realMethod);\n     }\n ", "timestamp": 1333332391, "metainfo": ""}