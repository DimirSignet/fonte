{"sha": "bf4eec3e73c82a3eff75acce0921f766a33f535f", "log": "Refactored matchers to use hamcrest internally  --HG-- rename : src/org/mockito/CustomMatcher.java => src/org/mockito/ArgumentMatcher.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40355", "commit": "\n--- a/src/org/mockito/AdditionalMatchers.java\n+++ b/src/org/mockito/AdditionalMatchers.java\n  */\n package org.mockito;\n \n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.CompareEqual;\n import org.mockito.internal.matchers.EqualsWithDelta;\n--- /dev/null\n+++ b/src/org/mockito/ArgumentMatcher.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito;\n+\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+\n+/**\n+ * Allows creating customized argument matchers.\n+ * <p>\n+ * See {@link Matchers}\n+ * \n+ * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc.\n+ * methods and implement your own {@link ArgumentMatcher}, e.g:\n+ * \n+ * <pre>\n+ * class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n+ *     public boolean matches(Object list) {\n+ *         return ((List) list).size() == 2;\n+ *     }\n+ * }\n+ * \n+ * List mock = mock(List.class);\n+ * \n+ * stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ * \n+ * mock.addAll(Arrays.asList(&quot;one&quot;, &quot;two&quot;));\n+ * \n+ * verify(mock).addAll(argThat(new IsListOfTwoElements()));\n+ * </pre>\n+ * \n+ * Custom matchers are generally used very rarely.\n+ * <p>\n+ * To keep it readable you may want to extract method, e.g:\n+ * \n+ * <pre>\n+ *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);\n+ *   //becomes\n+ *   stub(mock.addAll(listOfTwoElements()).toReturn(true);\n+ * </pre>\n+ * \n+ * @param <T>\n+ */\n+public abstract class ArgumentMatcher<T> extends BaseMatcher<T> {\n+\n+    /**\n+     * Returns whether this matcher accepts the given argument.\n+     * <p>\n+     * The method should <b>never</b> assert if the argument doesn't match. It\n+     * should only return false.\n+     * \n+     * @param argument\n+     *            the argument\n+     * @return whether this matcher accepts the given argument.\n+     */\n+    public abstract boolean matches(Object argument);\n+\n+    /* \n+     * Usually not necessary but you might want to override this method to\n+     * provide more specific description of the matcher (useful when\n+     * verification failures are reported).\n+     * \n+     * @param description the description to which the matcher description is\n+     * appended.\n+     */\n+    public void describeTo(Description description) {\n+        description.appendText(\"<custom argument matcher>\");\n+    }\n+}\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  */\n package org.mockito;\n \n-import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n-import org.hamcrest.SelfDescribing;\n import org.mockito.internal.matchers.Any;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Contains;\n import org.mockito.internal.matchers.EndsWith;\n import org.mockito.internal.matchers.Equals;\n  * \n  * <h3>Custom Matchers</h3>\n  * \n- * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods and implement your own {@link CustomMatcher}, e.g:\n+ * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods \n+ * and implement your own {@link ArgumentMatcher}, e.g:\n  * \n  * <pre>\n- *   class IsListOfTwoElements extends CustomMatcher&lt;List&gt; {\n+ *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n  *      public boolean matches(List list) {\n  *          return list.size() == 2;\n  *      }\n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static char charThat(CustomMatcher<Character> matcher) {\n+    public static char charThat(Matcher<Character> matcher) {\n         return reportMatcher(matcher).returnChar();\n     }\n     \n      * @param matcher decides whether argument matches\n      * @return <code>false</code>.\n      */\n-    public static boolean booleanThat(CustomMatcher<Boolean> matcher) {\n+    public static boolean booleanThat(Matcher<Boolean> matcher) {\n         return reportMatcher(matcher).returnFalse();\n     }\n     \n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static byte byteThat(CustomMatcher<Byte> matcher) {\n+    public static byte byteThat(Matcher<Byte> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static short shortThat(CustomMatcher<Short> matcher) {\n+    public static short shortThat(Matcher<Short> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static int intThat(CustomMatcher<Integer> matcher) {\n+    public static int intThat(Matcher<Integer> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n \n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static long longThat(CustomMatcher<Long> matcher) {\n+    public static long longThat(Matcher<Long> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static float floatThat(CustomMatcher<Float> matcher) {\n+    public static float floatThat(Matcher<Float> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n     \n      * @param matcher decides whether argument matches\n      * @return <code>0</code>.\n      */\n-    public static double doubleThat(CustomMatcher<Double> matcher) {\n+    public static double doubleThat(Matcher<Double> matcher) {\n         return reportMatcher(matcher).returnZero();\n     }\n \n-    private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {\n+    private static ReturnValues reportMatcher(Matcher<?> matcher) {\n         return LastArguments.instance().reportMatcher(matcher);\n     }\n-    \n-    @SuppressWarnings(\"unchecked\")\n-    private static ReturnValues reportMatcher(final Matcher<?> matcher) {\n-        return LastArguments.instance().reportMatcher(new ArgumentMatcher() {\n-\n-            public void appendTo(final StringBuilder builder) {\n-                matcher.describeTo(new Description() {\n-\n-                    public Description appendDescriptionOf(SelfDescribing arg0) {\n-                        throw new RuntimeException(\"not implemented\");\n-                    }\n-\n-                    public Description appendList(String arg0, String arg1, String arg2,\n-                            Iterable<? extends SelfDescribing> arg3) {\n-                        throw new RuntimeException(\"not implemented\");\n-                    }\n-\n-                    public Description appendText(String arg0) {\n-                        builder.append(arg0);\n-                        return this;\n-                    }\n-\n-                    public Description appendValue(Object arg0) {\n-                        throw new RuntimeException(\"not implemented\");\n-                    }\n-\n-                    public <T> Description appendValueList(String arg0, String arg1, String arg2, T... arg3) {\n-                        throw new RuntimeException(\"not implemented\");\n-                    }\n-\n-                    public <T> Description appendValueList(String arg0, String arg1, String arg2, Iterable<T> arg3) {\n-                        throw new RuntimeException(\"not implemented\");\n-                    }} );\n-            }\n-\n-            public boolean matches(Object argument){\n-                return matcher.matches(argument);\n-            }\n-        });\n-    }\n }\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.StringDescription;\n import org.mockito.exceptions.Printable;\n import org.mockito.exceptions.base.HasStackTrace;\n import org.mockito.exceptions.base.MockitoException;\n import org.mockito.internal.creation.MockNamer;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.ArrayEquals;\n import org.mockito.internal.matchers.Equals;\n \n         return toString(argumentsToMatchers());\n     }\n \n-    public String toString(List<ArgumentMatcher> matchers) {\n+    public String toString(List<Matcher> matchers) {\n         String mockName = MockNamer.nameForMock(mock);\n         String methodName = method.getName();\n         String arguments = getArgumentsString(matchers);\n         return result.toString().replaceFirst(\", $\", \"\").concat(\")\");\n     }\n     \n-    private String getArgumentsString(List<ArgumentMatcher> matchers) {\n-        StringBuilder result = new StringBuilder();\n-        result.append(\"(\");\n-        for (ArgumentMatcher matcher : matchers) {\n-            matcher.appendTo(result);\n-            result.append(\", \");\n-        }\n-        return result.toString().replaceFirst(\", $\", \"\").concat(\")\");\n+    private String getArgumentsString(List<Matcher> matchers) {\n+        Description result = new StringDescription();\n+        result.appendList(\"(\", \", \", \")\", matchers);\n+        return result.toString();\n     }\n     \n-    private List<ArgumentMatcher> argumentsToMatchers() {\n-        List<ArgumentMatcher> matchers = new LinkedList<ArgumentMatcher>();\n+    private List<Matcher> argumentsToMatchers() {\n+        List<Matcher> matchers = new LinkedList<Matcher>();\n         for (Object arg : this.arguments) {\n             if (arg != null && arg.getClass().isArray()) {\n                 matchers.add(new ArrayEquals(arg));\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n import java.util.Collections;\n import java.util.List;\n \n+import org.hamcrest.Matcher;\n import org.mockito.exceptions.Printable;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n \n @SuppressWarnings(\"unchecked\")\n public class InvocationMatcher implements Printable {\n \n     private final Invocation invocation;\n-    private final List<ArgumentMatcher> matchers;\n+    private final List<Matcher> matchers;\n \n-    public InvocationMatcher(Invocation invocation, List<ArgumentMatcher> matchers) {\n+    public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {\n         if (matchers == null) {\n             throw new IllegalArgumentException(\"matchers cannot be null\");\n         }\n     }\n     \n     public InvocationMatcher(Invocation invocation) {\n-        this(invocation, Collections.<ArgumentMatcher>emptyList());\n+        this(invocation, Collections.<Matcher>emptyList());\n     }\n     \n     public Method getMethod() {\n         return this.invocation;\n     }\n     \n-    public List<ArgumentMatcher> getMatchers() {\n+    public List<Matcher> getMatchers() {\n         return this.matchers;\n     }\n \n--- a/src/org/mockito/internal/invocation/MatchersBinder.java\n+++ b/src/org/mockito/internal/invocation/MatchersBinder.java\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.hamcrest.Matcher;\n import org.mockito.exceptions.Reporter;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.progress.LastArguments;\n \n public class MatchersBinder {\n \n     public InvocationMatcher bindMatchers(Invocation invocation) {\n-        List<ArgumentMatcher> lastMatchers = LastArguments.instance().pullMatchers();\n+        List<Matcher> lastMatchers = LastArguments.instance().pullMatchers();\n         validateMatchers(invocation, lastMatchers);\n \n-        List<ArgumentMatcher> processedMatchers = createEqualsMatchers(invocation, lastMatchers);\n+        List<Matcher> processedMatchers = createEqualsMatchers(invocation, lastMatchers);\n         \n         InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, processedMatchers);\n         return invocationWithMatchers;\n     }\n \n-    private void validateMatchers(Invocation invocation, List<ArgumentMatcher> matchers) {\n+    private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\n         if (matchers != null) {\n             int recordedMatchersSize = matchers.size();\n             int expectedMatchersSize = invocation.getArguments().length;\n     /**\n      * if user passed bare arguments then create EqualsMatcher for every argument.\n      */\n-    private List<ArgumentMatcher> createEqualsMatchers(Invocation invocation,\n-            List<ArgumentMatcher> matchers) {\n+    private List<Matcher> createEqualsMatchers(Invocation invocation,\n+            List<Matcher> matchers) {\n         if (matchers != null) {\n             return matchers;\n         }\n-        List<ArgumentMatcher> result = new ArrayList<ArgumentMatcher>();\n+        List<Matcher> result = new ArrayList<Matcher>();\n         for (Object argument : invocation.getArguments()) {\n             result.add(new Equals(argument));\n         }\n--- a/src/org/mockito/internal/matchers/And.java\n+++ b/src/org/mockito/internal/matchers/And.java\n import java.util.Iterator;\n import java.util.List;\n \n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.mockito.ArgumentMatcher;\n+\n @SuppressWarnings(\"unchecked\")\n-public class And implements ArgumentMatcher {\n+public class And extends ArgumentMatcher {\n \n-    private final List<ArgumentMatcher> matchers;\n+    private final List<Matcher> matchers;\n \n-    public And(List<ArgumentMatcher> matchers) {\n+    public And(List<Matcher> matchers) {\n         this.matchers = matchers;\n     }\n \n     public boolean matches(Object actual) {\n-        for (ArgumentMatcher matcher : matchers) {\n+        for (Matcher matcher : matchers) {\n             if (!matcher.matches(actual)) {\n                 return false;\n             }\n         return true;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"and(\");\n-        for (Iterator<ArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n-            it.next().appendTo(buffer);\n+    public void describeTo(Description description) {\n+        description.appendText(\"and(\");\n+        for (Iterator<Matcher> it = matchers.iterator(); it.hasNext();) {\n+            it.next().describeTo(description);\n             if (it.hasNext()) {\n-                buffer.append(\", \");\n+                description.appendText(\", \");\n             }\n         }\n-        buffer.append(\")\");\n+        description.appendText(\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Any.java\n+++ b/src/org/mockito/internal/matchers/Any.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n+\n @SuppressWarnings(\"unchecked\")\n-public class Any implements ArgumentMatcher {\n+public class Any extends ArgumentMatcher {\n \n     public static final Any ANY = new Any();    \n     \n         return true;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"<any>\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"<any>\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/ArrayEquals.java\n+++ b/src/org/mockito/internal/matchers/ArrayEquals.java\n import java.lang.reflect.Array;\n import java.util.Arrays;\n \n+import org.hamcrest.Description;\n+\n public class ArrayEquals extends Equals {\n \n     public ArrayEquals(Object wanted) {\n \n     public boolean matches(Object actual) {\n         Object wanted = getWanted();\n+        //TODO can I use Arrays.x ?\n         if (wanted == null) {\n             return super.matches(actual);\n         } else if (wanted instanceof boolean[]\n         }\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n+    public void describeTo(Description description) {\n         if (getWanted() != null && getWanted().getClass().isArray()) {\n-            appendArray(createObjectArray(getWanted()), buffer);\n+            appendArray(createObjectArray(getWanted()), description);\n         } else {\n-            super.appendTo(buffer);\n+            super.describeTo(description);\n         }\n     }\n \n-    private void appendArray(Object[] array, StringBuilder buffer) {\n-        buffer.append(\"[\");\n+    private void appendArray(Object[] array, Description description) {\n+        description.appendText(\"[\");\n         for (int i = 0; i < array.length; i++) {\n-            new Equals(array[i]).appendTo(buffer);\n+            new Equals(array[i]).describeTo(description);\n             if (i != array.length - 1) {\n-                buffer.append(\", \");\n+                description.appendText(\", \");\n             }\n         }\n-        buffer.append(\"]\");\n+        description.appendText(\"]\");\n     }\n \n     public static Object[] createObjectArray(Object array) {\n--- a/src/org/mockito/internal/matchers/Compare.java\n+++ b/src/org/mockito/internal/matchers/Compare.java\n \n import java.util.Comparator;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n+\n @SuppressWarnings(\"unchecked\")\n-public class Compare<T> implements ArgumentMatcher {\n+public class Compare<T> extends ArgumentMatcher {\n \n     private T wanted;\n \n         this.operator = result;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(comparator + \"(\" + wanted + \") \" + operator.getSymbol()\n+    public void describeTo(Description description) {\n+        description.appendText(comparator + \"(\" + wanted + \") \" + operator.getSymbol()\n                 + \" 0\");\n     }\n \n--- a/src/org/mockito/internal/matchers/CompareTo.java\n+++ b/src/org/mockito/internal/matchers/CompareTo.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public abstract class CompareTo<T extends Comparable<T>> implements ArgumentMatcher<T> {\n+\n+public abstract class CompareTo<T extends Comparable<T>> extends ArgumentMatcher<T> {\n     private final Comparable<T> wanted;\n \n     public CompareTo(Comparable<T> value) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public boolean matches(T actual) {\n+    public boolean matches(Object actual) {\n         \n         if(!(actual instanceof Comparable)) {\n             return false;\n         return matchResult(((Comparable) actual).compareTo(wanted));\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(getName() + \"(\" + wanted + \")\");\n+    public void describeTo(Description description) {\n+        description.appendText(getName() + \"(\" + wanted + \")\");\n     }\n     \n     protected abstract String getName();\n--- a/src/org/mockito/internal/matchers/Contains.java\n+++ b/src/org/mockito/internal/matchers/Contains.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class Contains implements ArgumentMatcher<String> {\n+\n+public class Contains extends ArgumentMatcher<String> {\n \n     private final String substring;\n \n         this.substring = substring;\n     }\n \n-    public boolean matches(String actual) {\n-        return actual != null && actual.contains(substring);\n+    public boolean matches(Object actual) {\n+        return actual != null && ((String) actual).contains(substring);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"contains(\\\"\" + substring + \"\\\")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"contains(\\\"\" + substring + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/EndsWith.java\n+++ b/src/org/mockito/internal/matchers/EndsWith.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class EndsWith implements ArgumentMatcher<String> {\n+\n+public class EndsWith extends ArgumentMatcher<String> {\n \n     private final String suffix;\n \n         this.suffix = suffix;\n     }\n \n-    public boolean matches(String actual) {\n-        return actual != null && actual.endsWith(suffix);\n+    public boolean matches(Object actual) {\n+        return actual != null && ((String) actual).endsWith(suffix);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"endsWith(\\\"\" + suffix + \"\\\")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"endsWith(\\\"\" + suffix + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Equals.java\n+++ b/src/org/mockito/internal/matchers/Equals.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class Equals implements ArgumentMatcher<Object> {\n+\n+public class Equals extends ArgumentMatcher<Object> {\n \n     private final Object wanted;\n \n         return wanted.equals(actual);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        appendQuoting(buffer);\n-        buffer.append(wanted);\n-        appendQuoting(buffer);\n+    public void describeTo(Description description) {\n+        appendQuoting(description);\n+        description.appendText(wanted.toString());\n+        appendQuoting(description);\n+        //TODO use appendValue from description to print values\n     }\n \n-    private void appendQuoting(StringBuilder buffer) {\n+    private void appendQuoting(Description description) {\n         if (wanted instanceof String) {\n-            buffer.append(\"\\\"\");\n+            description.appendText(\"\\\"\");\n         } else if (wanted instanceof Character) {\n-            buffer.append(\"'\");\n+            description.appendText(\"'\");\n         }\n     }\n \n--- a/src/org/mockito/internal/matchers/EqualsWithDelta.java\n+++ b/src/org/mockito/internal/matchers/EqualsWithDelta.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class EqualsWithDelta implements ArgumentMatcher<Number>{\n+\n+public class EqualsWithDelta extends ArgumentMatcher<Number>{\n     private final Number wanted;\n \n     private final Number delta;\n         this.delta = delta;\n     }\n \n-    public boolean matches(Number actual) {\n-        return wanted.doubleValue() - delta.doubleValue() <= actual.doubleValue()\n-                && actual.doubleValue() <= wanted.doubleValue()\n+    public boolean matches(Object actual) {\n+        Number actualNumber = (Number) actual;\n+        return wanted.doubleValue() - delta.doubleValue() <= actualNumber.doubleValue()\n+                && actualNumber.doubleValue() <= wanted.doubleValue()\n                         + delta.doubleValue();\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"eq(\" + wanted + \", \" + delta + \")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"eq(\" + wanted + \", \" + delta + \")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Find.java\n+++ b/src/org/mockito/internal/matchers/Find.java\n \n import java.util.regex.Pattern;\n \n-public class Find implements ArgumentMatcher<String> {\n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n+\n+public class Find extends ArgumentMatcher<String> {\n \n     private final String regex;\n \n         this.regex = regex;\n     }\n \n-    public boolean matches(String actual) {\n-        return actual != null && Pattern.compile(regex).matcher(actual).find();\n+    public boolean matches(Object actual) {\n+        return actual != null && Pattern.compile(regex).matcher((String) actual).find();\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"find(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") + \"\\\")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"find(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/InstanceOf.java\n+++ b/src/org/mockito/internal/matchers/InstanceOf.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class InstanceOf implements ArgumentMatcher<Object> {\n+\n+public class InstanceOf extends ArgumentMatcher<Object> {\n \n     private final Class<?> clazz;\n \n         return (actual != null) && clazz.isAssignableFrom(actual.getClass());\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"isA(\" + clazz.getName() + \")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"isA(\" + clazz.getName() + \")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Matches.java\n+++ b/src/org/mockito/internal/matchers/Matches.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class Matches implements ArgumentMatcher<Object> {\n+\n+public class Matches extends ArgumentMatcher<Object> {\n \n     private final String regex;\n \n         return (actual instanceof String) && ((String) actual).matches(regex);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"matches(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")\n+    public void describeTo(Description description) {\n+        description.appendText(\"matches(\\\"\" + regex.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")\n                 + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Not.java\n+++ b/src/org/mockito/internal/matchers/Not.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.mockito.ArgumentMatcher;\n+\n @SuppressWarnings(\"unchecked\")\n-public class Not implements ArgumentMatcher {\n+public class Not extends ArgumentMatcher {\n \n-    private final ArgumentMatcher first;\n+    private final Matcher first;\n \n-    public Not(ArgumentMatcher first) {\n+    public Not(Matcher first) {\n         this.first = first;\n     }\n \n         return !first.matches(actual);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"not(\");\n-        first.appendTo(buffer);\n-        buffer.append(\")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"not(\");\n+        first.describeTo(description);\n+        description.appendText(\")\");\n     }\n-}\n+}\n--- a/src/org/mockito/internal/matchers/NotNull.java\n+++ b/src/org/mockito/internal/matchers/NotNull.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class NotNull implements ArgumentMatcher<Object> {\n+\n+public class NotNull extends ArgumentMatcher<Object> {\n \n     public static final NotNull NOT_NULL = new NotNull();\n     \n         return actual != null;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"notNull()\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"notNull()\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Null.java\n+++ b/src/org/mockito/internal/matchers/Null.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class Null implements ArgumentMatcher<Object> {\n+\n+public class Null extends ArgumentMatcher<Object> {\n \n     public static final Null NULL = new Null();\n \n         return actual == null;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"isNull()\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"isNull()\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Or.java\n+++ b/src/org/mockito/internal/matchers/Or.java\n import java.util.Iterator;\n import java.util.List;\n \n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.mockito.ArgumentMatcher;\n+\n @SuppressWarnings(\"unchecked\")\n-public class Or implements ArgumentMatcher {\n+public class Or extends ArgumentMatcher {\n \n-    private final List<ArgumentMatcher> matchers;\n+    private final List<Matcher> matchers;\n \n-    public Or(List<ArgumentMatcher> matchers) {\n+    public Or(List<Matcher> matchers) {\n         this.matchers = matchers;\n     }\n \n     public boolean matches(Object actual) {\n-        for (ArgumentMatcher matcher : matchers) {\n+        for (Matcher matcher : matchers) {\n             if (matcher.matches(actual)) {\n                 return true;\n             }\n         return false;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"or(\");\n-        for (Iterator<ArgumentMatcher> it = matchers.iterator(); it.hasNext();) {\n-            it.next().appendTo(buffer);\n+    public void describeTo(Description description) {\n+        description.appendText(\"or(\");\n+        for (Iterator<Matcher> it = matchers.iterator(); it.hasNext();) {\n+            it.next().describeTo(description);\n             if (it.hasNext()) {\n-                buffer.append(\", \");\n+                description.appendText(\", \");\n             }\n         }\n-        buffer.append(\")\");\n+        description.appendText(\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class Same implements ArgumentMatcher<Object> {\n+\n+public class Same extends ArgumentMatcher<Object> {\n \n     private final Object wanted;\n \n         return wanted == actual;\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"same(\");\n-        appendQuoting(buffer);\n-        buffer.append(wanted);\n-        appendQuoting(buffer);\n-        buffer.append(\")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"same(\");\n+        appendQuoting(description);\n+        description.appendText(wanted.toString());\n+        appendQuoting(description);\n+        description.appendText(\")\");\n     }\n \n-    private void appendQuoting(StringBuilder buffer) {\n+    private void appendQuoting(Description description) {\n         if (wanted instanceof String) {\n-            buffer.append(\"\\\"\");\n+            description.appendText(\"\\\"\");\n         } else if (wanted instanceof Character) {\n-            buffer.append(\"'\");\n+            description.appendText(\"'\");\n         }\n     }\n }\n--- a/src/org/mockito/internal/matchers/StartsWith.java\n+++ b/src/org/mockito/internal/matchers/StartsWith.java\n  */\n package org.mockito.internal.matchers;\n \n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n-public class StartsWith implements ArgumentMatcher<String> {\n+\n+public class StartsWith extends ArgumentMatcher<String> {\n \n     private final String prefix;\n \n         this.prefix = prefix;\n     }\n \n-    public boolean matches(String actual) {\n-        return actual != null && actual.startsWith(prefix);\n+    public boolean matches(Object actual) {\n+        return actual != null && ((String) actual).startsWith(prefix);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"startsWith(\\\"\" + prefix + \"\\\")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"startsWith(\\\"\" + prefix + \"\\\")\");\n     }\n }\n--- a/src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java\n+++ b/src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java\n  */\n package org.mockito.internal.matchers.apachecommons;\n \n-import org.mockito.internal.matchers.ArgumentMatcher;\n+import org.hamcrest.Description;\n+import org.mockito.ArgumentMatcher;\n \n \n-public class ReflectionEquals implements ArgumentMatcher<Object>{\n+public class ReflectionEquals extends ArgumentMatcher<Object>{\n     private final Object wanted;\n \n     public ReflectionEquals(Object wanted) {\n         return EqualsBuilder.reflectionEquals(wanted, actual);\n     }\n \n-    public void appendTo(StringBuilder buffer) {\n-        buffer.append(\"refEq(\" + wanted + \")\");\n+    public void describeTo(Description description) {\n+        description.appendText(\"refEq(\" + wanted + \")\");\n     }\n }\n--- a/src/org/mockito/internal/progress/LastArguments.java\n+++ b/src/org/mockito/internal/progress/LastArguments.java\n import java.util.List;\n import java.util.Stack;\n \n+import org.hamcrest.Matcher;\n import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\n import org.mockito.internal.matchers.And;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Not;\n import org.mockito.internal.matchers.Or;\n \n     \n     private static final ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();\n     \n-    private Stack<ArgumentMatcher> matcherStack = new Stack<ArgumentMatcher>();\n+    private Stack<Matcher> matcherStack = new Stack<Matcher>();\n \n     public static LastArguments instance() {\n         if (INSTANCE.get() == null) {\n         return INSTANCE.get();\n     }\n     \n-    public ReturnValues reportMatcher(ArgumentMatcher matcher) {\n+    public ReturnValues reportMatcher(Matcher matcher) {\n         matcherStack.push(matcher);\n         return new ReturnValues();\n     }\n \n-    public List<ArgumentMatcher> pullMatchers() {\n+    public List<Matcher> pullMatchers() {\n         if (matcherStack.isEmpty()) {\n             return null;\n         }\n         \n-        ArrayList<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>(matcherStack);\n+        ArrayList<Matcher> matchers = new ArrayList<Matcher>(matcherStack);\n         matcherStack.clear();\n         return matchers;\n     }\n         return new ReturnValues();\n     }\n \n-    private List<ArgumentMatcher> popLastArgumentMatchers(int count) {\n+    private List<Matcher> popLastArgumentMatchers(int count) {\n         assertState(!matcherStack.isEmpty(), \"No matchers found.\");\n         assertState(matcherStack.size() >= count,\n                 \"\" + count + \" matchers expected, \" + matcherStack.size() + \" recorded.\");\n-        List<ArgumentMatcher> result = new LinkedList<ArgumentMatcher>();\n+        List<Matcher> result = new LinkedList<Matcher>();\n         result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));\n         for (int i = 0; i < count; i++) {\n             matcherStack.pop();\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n  */\n package org.mockito.internal.invocation;\n \n-import static java.util.Arrays.asList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n+import static java.util.Arrays.*;\n+import static org.junit.Assert.*;\n \n import java.util.HashMap;\n import java.util.Map;\n \n+import org.hamcrest.Matcher;\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.internal.matchers.Equals;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.NotNull;\n \n @SuppressWarnings(\"unchecked\")\n     \n     @Test\n     public void shouldToStringWithMatchers() throws Exception {\n-        ArgumentMatcher m = NotNull.NOT_NULL;\n+        Matcher m = NotNull.NOT_NULL;\n         InvocationMatcher notNull = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(m));\n-        ArgumentMatcher mTwo = new Equals('x');\n+        Matcher mTwo = new Equals('x');\n         InvocationMatcher equals = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(mTwo));\n \n         assertEquals(\"Object.simpleMethod(notNull())\", notNull.toString());\n--- a/test/org/mockitousage/matchers/ComparableMatchersTest.java\n+++ b/test/org/mockitousage/matchers/ComparableMatchersTest.java\n \n import java.math.BigDecimal;\n \n+import org.hamcrest.Description;\n+import org.hamcrest.StringDescription;\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.internal.matchers.CompareEqual;\n         assertEquals(equals, compareTo.matches(\"b\"));\n         assertEquals(higher, compareTo.matches(\"c\"));\n \n-        StringBuilder sb = new StringBuilder();\n-        compareTo.appendTo(sb);\n-        assertEquals(name + \"(b)\", sb.toString());\n+        Description d = new StringDescription();\n+        compareTo.describeTo(d);\n+        assertEquals(name + \"(b)\", d.toString());\n     }\n }\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.CustomMatcher;\n+import org.mockito.ArgumentMatcher;\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n import org.mockitousage.IMethods;\n \n public class CustomMatchersTest extends TestBase {\n     \n-    private final class ContainsFoo extends CustomMatcher<String> {\n+    private final class ContainsFoo extends ArgumentMatcher<String> {\n         public boolean matches(Object arg) {\n             return ((String) arg).contains(\"foo\");\n         }\n     }\n \n-    private final class IsAnyBoolean extends CustomMatcher<Boolean> {\n+    private final class IsAnyBoolean extends ArgumentMatcher<Boolean> {\n         public boolean matches(Object arg) {\n             return true;\n         }\n     }\n     \n-    private final class IsSorZ extends CustomMatcher<Character> {\n+    private final class IsSorZ extends ArgumentMatcher<Character> {\n         public boolean matches(Object arg) {\n             Character character = (Character) arg;\n             return character.equals('s') || character.equals('z');\n         }\n     }\n \n-    private final class IsZeroOrOne<T extends Number> extends CustomMatcher<T> {\n+    private final class IsZeroOrOne<T extends Number> extends ArgumentMatcher<T> {\n         public boolean matches(Object arg) {\n             Number number = (Number) arg;\n             if (number.intValue() == 0 || number.intValue() == 1) {\n--- a/test/org/mockitousage/matchers/MatchersToStringTest.java\n+++ b/test/org/mockitousage/matchers/MatchersToStringTest.java\n  */\n package org.mockitousage.matchers;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.List;\n \n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.StringDescription;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.internal.matchers.EndsWith;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.Find;\n-import org.mockito.internal.matchers.ArgumentMatcher;\n import org.mockito.internal.matchers.Matches;\n import org.mockito.internal.matchers.Not;\n import org.mockito.internal.matchers.NotNull;\n \n @SuppressWarnings(\"unchecked\")\n public class MatchersToStringTest extends TestBase {\n-    private StringBuilder buffer;\n+    private Description description;\n \n     @Before\n     public void setup() {\n-        buffer = new StringBuilder();\n+        description = new StringDescription();\n     }\n \n     @Test\n     public void sameToStringWithString() {\n-        new Same(\"X\").appendTo(buffer);\n-        assertEquals(\"same(\\\"X\\\")\", buffer.toString());\n+        new Same(\"X\").describeTo(description);\n+        assertEquals(\"same(\\\"X\\\")\", description.toString());\n \n     }\n \n     @Test\n     public void nullToString() {\n-        Null.NULL.appendTo(buffer);\n-        assertEquals(\"isNull()\", buffer.toString());\n+        Null.NULL.describeTo(description);\n+        assertEquals(\"isNull()\", description.toString());\n     }\n \n     @Test\n     public void notNullToString() {\n-        NotNull.NOT_NULL.appendTo(buffer);\n-        assertEquals(\"notNull()\", buffer.toString());\n+        NotNull.NOT_NULL.describeTo(description);\n+        assertEquals(\"notNull()\", description.toString());\n     }\n \n     @Test\n     public void anyToString() {\n-        Any.ANY.appendTo(buffer);\n-        assertEquals(\"<any>\", buffer.toString());\n+        Any.ANY.describeTo(description);\n+        assertEquals(\"<any>\", description.toString());\n     }\n \n     @Test\n     public void sameToStringWithChar() {\n-        new Same('x').appendTo(buffer);\n-        assertEquals(\"same('x')\", buffer.toString());\n+        new Same('x').describeTo(description);\n+        assertEquals(\"same('x')\", description.toString());\n     }\n \n     @Test\n                 return \"X\";\n             }\n         };\n-        new Same(o).appendTo(buffer);\n-        assertEquals(\"same(X)\", buffer.toString());\n+        new Same(o).describeTo(description);\n+        assertEquals(\"same(X)\", description.toString());\n     }\n \n     @Test\n     public void equalsToStringWithString() {\n-        new Equals(\"X\").appendTo(buffer);\n-        assertEquals(\"\\\"X\\\"\", buffer.toString());\n+        new Equals(\"X\").describeTo(description);\n+        assertEquals(\"\\\"X\\\"\", description.toString());\n \n     }\n \n     @Test\n     public void equalsToStringWithChar() {\n-        new Equals('x').appendTo(buffer);\n-        assertEquals(\"'x'\", buffer.toString());\n+        new Equals('x').describeTo(description);\n+        assertEquals(\"'x'\", description.toString());\n     }\n \n     @Test\n                 return \"X\";\n             }\n         };\n-        new Equals(o).appendTo(buffer);\n-        assertEquals(\"X\", buffer.toString());\n+        new Equals(o).describeTo(description);\n+        assertEquals(\"X\", description.toString());\n     }\n \n     @Test\n     public void orToString() {\n-        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>();\n+        List<Matcher> matchers = new ArrayList<Matcher>();\n         matchers.add(new Equals(1));\n         matchers.add(new Equals(2));\n-        new Or(matchers).appendTo(buffer);\n-        assertEquals(\"or(1, 2)\", buffer.toString());\n+        new Or(matchers).describeTo(description);\n+        assertEquals(\"or(1, 2)\", description.toString());\n     }\n \n     @Test\n     public void notToString() {\n-        new Not(new Equals(1)).appendTo(buffer);\n-        assertEquals(\"not(1)\", buffer.toString());\n+        new Not(new Equals(1)).describeTo(description);\n+        assertEquals(\"not(1)\", description.toString());\n     }\n \n     @Test\n     public void andToString() {\n-        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>();\n+        List<Matcher> matchers = new ArrayList<Matcher>();\n         matchers.add(new Equals(1));\n         matchers.add(new Equals(2));\n-        new And(matchers).appendTo(buffer);\n-        assertEquals(\"and(1, 2)\", buffer.toString());\n+        new And(matchers).describeTo(description);\n+        assertEquals(\"and(1, 2)\", description.toString());\n     }\n \n     @Test\n     public void startsWithToString() {\n-        new StartsWith(\"AB\").appendTo(buffer);\n-        assertEquals(\"startsWith(\\\"AB\\\")\", buffer.toString());\n+        new StartsWith(\"AB\").describeTo(description);\n+        assertEquals(\"startsWith(\\\"AB\\\")\", description.toString());\n     }\n \n     @Test\n     public void endsWithToString() {\n-        new EndsWith(\"AB\").appendTo(buffer);\n-        assertEquals(\"endsWith(\\\"AB\\\")\", buffer.toString());\n+        new EndsWith(\"AB\").describeTo(description);\n+        assertEquals(\"endsWith(\\\"AB\\\")\", description.toString());\n     }\n \n     @Test\n     public void containsToString() {\n-        new Contains(\"AB\").appendTo(buffer);\n-        assertEquals(\"contains(\\\"AB\\\")\", buffer.toString());\n+        new Contains(\"AB\").describeTo(description);\n+        assertEquals(\"contains(\\\"AB\\\")\", description.toString());\n     }\n \n     @Test\n     public void findToString() {\n-        new Find(\"\\\\s+\").appendTo(buffer);\n-        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+        new Find(\"\\\\s+\").describeTo(description);\n+        assertEquals(\"find(\\\"\\\\\\\\s+\\\")\", description.toString());\n     }\n \n     @Test\n     public void matchesToString() {\n-        new Matches(\"\\\\s+\").appendTo(buffer);\n-        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", buffer.toString());\n+        new Matches(\"\\\\s+\").describeTo(description);\n+        assertEquals(\"matches(\\\"\\\\\\\\s+\\\")\", description.toString());\n     }\n \n }", "timestamp": 1202659637, "metainfo": ""}