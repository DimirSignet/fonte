{"sha": "d56f3a548c619e05accb6c37e27225f0b9df0c15", "log": "changed the way global configuration is done currently, you can specify ReturnValues per mock instance or set the global configuration by providing a class: org.mockito.MockitoConfiguration implements org.mockito.configuration.IMockitoConfiguration  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401132", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/configuration/IMockitoConfiguration.java\n+package org.mockito.configuration;\n+\n+public interface IMockitoConfiguration {\n+\n+    ReturnValues getReturnValues();\n+\n+}\n--- a/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n+++ b/src/org/mockito/configuration/experimental/ConfigurationSupport.java\n \n import java.lang.reflect.Modifier;\n \n+import org.mockito.Mockito;\n+import org.mockito.configuration.IMockitoConfiguration;\n import org.mockito.internal.configuration.Configuration;\n import org.mockito.internal.configuration.MockitoConfiguration;\n import org.mockito.internal.configuration.MockitoProperties;\n     }\n     \n     /**\n-     * returns a configuration object\n+     * @deprecated\n+     * \n+     * Please implement IMockitoConfiguration to configure Mockito globally. {@link IMockitoConfiguration}\n+     * <p>\n+     * Please use {@link Mockito#mock(Class, org.mockito.configuration.ReturnValues)} to configure return values 'per mock'\n+     * <p>\n+     * \n+     * This method returns a configuration object\n      * <p>\n      * See examples in javadoc for {@link ConfigurationSupport}\n      * \n      * @return MockitoConfiguration\n      */\n+    @Deprecated\n     public static MockitoConfiguration getConfiguration() {\n         return Configuration.instance();\n     }\n--- a/src/org/mockito/internal/configuration/Configuration.java\n+++ b/src/org/mockito/internal/configuration/Configuration.java\n /**\n  * Singleton implementation of MockitoConfiguration\n  */\n+@Deprecated\n public class Configuration implements MockitoConfiguration {\n     \n     public static final ThreadLocal<Configuration> CONFIG = new ThreadLocal<Configuration>();\n--- /dev/null\n+++ b/src/org/mockito/internal/configuration/GlobalConfiguration.java\n+package org.mockito.internal.configuration;\n+\n+import org.mockito.configuration.IMockitoConfiguration;\n+\n+public class GlobalConfiguration {\n+    \n+    private static IMockitoConfiguration globalConfiguration;\n+    private static boolean loaded = false;\n+\n+    static {\n+        //TODO how bad is it? What happens if some exception is thrown?\n+        if (!loaded) {\n+            globalConfiguration = readFromClasspath();\n+            loaded = true;\n+        }\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    private static IMockitoConfiguration readFromClasspath() {\n+        //Trying to get config from classpath\n+        Class configClass = null;\n+        try {\n+            configClass = (Class) Class.forName(\"org.mockito.MockitoConfiguration\");\n+        } catch (ClassNotFoundException e) {\n+            //that's ok, it means there is no global config, \n+            return null;\n+        }\n+        \n+        try {\n+            return (IMockitoConfiguration) configClass.newInstance();\n+        } catch (ClassCastException e) {\n+            throw new RuntimeException(\"MockitoConfiguration class should implement org.mockito.configuration.IMockitoConfiguration interface.\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to instantianate MockitoConfiguration class. Does it have a public, no-arg constructor?\", e);\n+        }\n+    }\n+\n+    public static IMockitoConfiguration getConfig() {\n+        return globalConfiguration;\n+    }\n+}\n--- a/src/org/mockito/internal/configuration/MockitoConfiguration.java\n+++ b/src/org/mockito/internal/configuration/MockitoConfiguration.java\n  * <p>\n  * See examples in javadoc for {@link ConfigurationSupport}\n  */\n+@Deprecated\n public interface MockitoConfiguration {\n \n     /**\n--- a/src/org/mockito/internal/configuration/MockitoProperties.java\n+++ b/src/org/mockito/internal/configuration/MockitoProperties.java\n /**\n  * Configuration properties \n  */\n+@Deprecated\n public class MockitoProperties {\n \n     /**\n--- a/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n+++ b/src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java\n \n import org.mockito.configuration.ReturnValues;\n import org.mockito.internal.configuration.Configuration;\n+import org.mockito.internal.configuration.GlobalConfiguration;\n import org.mockito.invocation.InvocationOnMock;\n \n-public final class GloballyConfiguredReturnValues implements ReturnValues {\n+@SuppressWarnings(\"deprecation\")\n+public class GloballyConfiguredReturnValues implements ReturnValues {\n+    \n     public Object valueFor(InvocationOnMock invocation) {\n+        if (GlobalConfiguration.getConfig() != null) {\n+            return GlobalConfiguration.getConfig().getReturnValues().valueFor(invocation);\n+        }\n+        \n+        //For now, let's leave the deprecated way of getting return values, \n+        //it will go away, though\n         return Configuration.instance().getReturnValues().valueFor(invocation);\n     }\n }\n--- /dev/null\n+++ b/test/org/mockito/MockitoConfiguration.java\n+package org.mockito;\n+\n+import org.mockito.configuration.IMockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n+import org.mockito.internal.configuration.Configuration;\n+\n+@SuppressWarnings(\"deprecation\")\n+public class MockitoConfiguration implements IMockitoConfiguration {\n+\n+    private static ReturnValues overridden = null;\n+\n+    //for testing purposes, allow to override the configuration\n+    public static void overrideReturnValues(ReturnValues returnValues) {\n+        MockitoConfiguration.overridden = returnValues;\n+    }\n+\n+    public ReturnValues getReturnValues() {\n+        if (overridden == null) {\n+            return Configuration.instance().getReturnValues();\n+        } else {\n+            return overridden;\n+        }\n+    }\n+}\n--- a/test/org/mockito/configuration/experimental/ConfigurationTest.java\n+++ b/test/org/mockito/configuration/experimental/ConfigurationTest.java\n  */\n package org.mockito.configuration.experimental;\n \n+import static org.mockito.Mockito.*;\n+\n+import org.junit.After;\n import org.junit.Test;\n+import org.mockito.MockitoConfiguration;\n+import org.mockito.configuration.ReturnValues;\n import org.mockito.exceptions.base.MockitoException;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class ConfigurationTest extends TestBase {\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Test\n     public void shouldNotAllowConfiguringWithNullReturnValues() {\n         try {\n             assertThat(e, messageContains(\"Cannot set null ReturnValues!\"));\n         }\n     }\n-}\n+   \n+    @Test\n+    public void shouldReadConfigurationClassFromClassPath() {\n+        MockitoConfiguration.overrideReturnValues(new ReturnValues() {\n+            public Object valueFor(InvocationOnMock invocation) {\n+                return \"foo\";\n+            }});\n+\n+        IMethods mock = mock(IMethods.class); \n+        assertEquals(\"foo\", mock.simpleMethod());\n+    }\n+    \n+    @After\n+    public void cleanUpConfig() {\n+        MockitoConfiguration.overrideReturnValues(null);\n+    }\n+}\n--- a/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n+++ b/test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java\n         \n         ConfigurationSupport.getConfiguration().setReturnValues(returnsEdam);\n         \n+        ConfigurationSupport.getConfiguration().getReturnValues();\n+        \n         assertEquals(\"edam\", mock.simpleMethod());\n         \n         ConfigurationSupport.getConfiguration().setReturnValues(returnsCheddar);", "timestamp": 1231280884, "metainfo": ""}