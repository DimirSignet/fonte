{"sha": "5ca1475ffd380d1747170f2aefde8fe8bc57ad9f", "log": "refactored stubVoid into Stubber  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40154", "commit": "\n--- a/src/org/mockito/internal/MockControl.java\n+++ b/src/org/mockito/internal/MockControl.java\n \n     private final MockitoBehavior<T> behavior = new MockitoBehavior<T>();\n     private final Stubber stubber = new Stubber();\n-    private Throwable throwableToBeSetOnVoidMethod;\n     \n     /**\n      * if user passed bare arguments then create EqualsMatcher for every argument\n     }\n \n     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-        if (throwableToBeSetOnVoidMethod != null) {\n+        if (stubber.hasThrowableForVoidMethod()) {\n             ExpectedInvocation invocationWithMatchers = expectedInvocation(proxy, method, args);\n-            //TODO this is a bit dodgy, we should set result directly on behavior and behavior should validate exception\n-            behavior.addInvocation(invocationWithMatchers);\n-            stubber.setInvocationForPotentialStubbing(invocationWithMatchers);\n-            andThrows(throwableToBeSetOnVoidMethod);\n-            throwableToBeSetOnVoidMethod = null;\n+            stubber.addVoidMethodForThrowable(invocationWithMatchers);\n             return null;\n         }\n         \n     }\n \n     public void andReturn(T value) {\n-        MockitoState.instance().stubbingCompleted();\n         behavior.lastInvocationWasStubbed();\n         stubber.addReturnValue(value);\n     }\n \n     public void andThrows(Throwable throwable) {\n-        MockitoState.instance().stubbingCompleted();\n         behavior.lastInvocationWasStubbed();\n         stubber.addThrowable(throwable);\n     }\n     \n     public MethodSelector<T> toThrow(Throwable throwable) {\n-        throwableToBeSetOnVoidMethod = throwable;\n+        stubber.addThrowableForVoidMethod(throwable);\n         return this;\n     }\n \n--- a/src/org/mockito/internal/Stubber.java\n+++ b/src/org/mockito/internal/Stubber.java\n \n     private ExpectedInvocation invocationForStubbing;\n     private LinkedList<StubbedInvocation> stubbed = new LinkedList<StubbedInvocation>();\n+    private Throwable throwableForVoidMethod;\n     \n     public void addReturnValue(Object value) {\n+        MockitoState.instance().stubbingCompleted();\n         addResult(Result.createReturnResult(value));\n     }\n     \n     public void addThrowable(Throwable throwable) {\n+        MockitoState.instance().stubbingCompleted();\n         validateThrowable(throwable);\n         addResult(Result.createThrowResult(throwable));\n+    }\n+\n+    public void addVoidMethodForThrowable(ExpectedInvocation invocationWithMatchers) {\n+        this.invocationForStubbing = invocationWithMatchers;\n+        this.addThrowable(throwableForVoidMethod);\n+        throwableForVoidMethod = null;\n     }\n     \n     private void addResult(Result result) {\n     public void setInvocationForPotentialStubbing(ExpectedInvocation invocation) {\n         this.invocationForStubbing = invocation;\n     }\n+\n+    public void addThrowableForVoidMethod(Throwable throwable) {\n+        throwableForVoidMethod = throwable;\n+    }\n+\n+    public boolean hasThrowableForVoidMethod() {\n+        return throwableForVoidMethod != null;\n+    }\n }\n--- a/test/org/mockito/internal/InvocationBuilder.java\n+++ b/test/org/mockito/internal/InvocationBuilder.java\n         this.method = method;\n         return this;\n     }\n+\n+    public ExpectedInvocation toExpecteInvocation() {\n+        return new ExpectedInvocation(toInvocation());\n+    }\n }\n--- /dev/null\n+++ b/test/org/mockito/internal/StubberTest.java\n+package org.mockito.internal;\n+\n+import org.junit.Test;\n+import org.mockito.exceptions.parents.MockitoException;\n+import org.mockito.util.RequiresValidState;\n+\n+import static org.junit.Assert.*;\n+\n+public class StubberTest extends RequiresValidState{\n+\n+    @Test\n+    public void shouldFinishStubbingBeforeValidatingThrowable() throws Exception {\n+        Stubber s = new Stubber();\n+        s.setInvocationForPotentialStubbing(new InvocationBuilder().toExpecteInvocation());\n+        \n+        MockitoState.instance().stubbingStarted();\n+        try {\n+            s.addThrowable(new Exception());\n+            fail();\n+        } catch (MockitoException e) {\n+            MockitoState.instance().validateState();\n+        }\n+    }\n+}", "timestamp": 1197245703, "metainfo": ""}