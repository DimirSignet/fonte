{"sha": "e585de1f90d3dcd79fa9eef7b769d7ad269cf4cb", "log": "Merge pull request #44 from lpandzic/master  removed then-verify", "commit": "\n--- a/src/org/mockito/BDDMockito.java\n+++ b/src/org/mockito/BDDMockito.java\n  * }\n  * </code></pre>\n  *\n- * Syntax alternative to the last example:\n- * <pre class=\"code\"><code class=\"java\">\n- * public void shouldRideBikeTwice() {\n- *\n- *     person.ride(bike);\n- *     person.ride(bike);\n- *\n- *     then(person).verify(times(2)).ride(bike);\n- * }\n- * </code></pre>\n- *\n  * One of the purposes of BDDMockito is also to show how to tailor the mocking syntax to a different programming style.\n  *\n  * @since 1.8.0\n          * @see #verify(Object)\n          */\n         public T should() {\n-            return Mockito.verify(mock);\n+            return verify(mock);\n         }\n \n         /**\n          * @see #verify(Object, VerificationMode)\n          */\n         public T should(VerificationMode mode) {\n-            return Mockito.verify(mock, mode);\n-        }\n-\n-        /**\n-         * @see #verify(Object)\n-         */\n-        public T verify() {\n-            return Mockito.verify(mock);\n-        }\n-\n-        /**\n-         * @see #verify(Object, VerificationMode)\n-         */\n-        public T verify(VerificationMode mode) {\n-            return Mockito.verify(mock, mode);\n+            return verify(mock, mode);\n         }\n     }\n     \n--- a/test/org/mockitousage/customization/BDDMockitoTest.java\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n         then(mock).should().booleanObjectReturningMethod();\n     }\n \n-    @Test(expected = WantedButNotInvoked.class)\n-    public void shouldFailForExpectedBehaviorThatDidNotHappenWithVerify() {\n-\n-        then(mock).verify().booleanObjectReturningMethod();\n-    }\n-\n-    @Test\n-    public void shouldPassForExpectedBehaviorThatHappenedWithVerify() {\n-\n-        mock.booleanObjectReturningMethod();\n-\n-        then(mock).verify().booleanObjectReturningMethod();\n-    }\n-\n     @Test\n     public void shouldPassFluentBddScenario() {\n \n         then(person).should(times(2)).ride(bike);\n     }\n \n-    @Test\n-    public void shouldPassFluentBddScenarioWithVerify() {\n-\n-        Bike bike = new Bike();\n-        Person person = mock(Person.class);\n-\n-        person.ride(bike);\n-        person.ride(bike);\n-\n-        then(person).verify(times(2)).ride(bike);\n-    }\n-\n     static class Person {\n \n         void ride(Bike bike) {}", "timestamp": 1395948592, "metainfo": ""}