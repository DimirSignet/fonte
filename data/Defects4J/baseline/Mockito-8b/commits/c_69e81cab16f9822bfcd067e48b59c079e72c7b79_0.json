{"sha": "69e81cab16f9822bfcd067e48b59c079e72c7b79", "log": "In order to provide hardcore mockers some tools that give better feedback, similar to expect-run-verify libraries I implemented highly experimental VerboseMockitoRunner  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401558", "commit": "\n--- /dev/null\n+++ b/src/org/mockito/internal/util/reflection/Whitebox.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.util.reflection;\n+\n+import java.lang.reflect.Field;\n+\n+public class Whitebox {\n+\n+    public static Object getInternalState(Object target, String field) {\n+        Class<?> c = target.getClass();\n+        try {\n+            Field f = getFieldFromHierarchy(c, field);\n+            f.setAccessible(true);\n+            return f.get(target);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to set internal state on a private field. Please report to mockito mailing list.\", e);\n+        }\n+    }\n+\n+    public static void setInternalState(Object target, String field, Object value) {\n+        Class<?> c = target.getClass();\n+        try {\n+            Field f = getFieldFromHierarchy(c, field);\n+            f.setAccessible(true);\n+            f.set(target, value);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to set internal state on a private field. Please report to mockito mailing list.\", e);\n+        }\n+    }\n+\n+    private static Field getFieldFromHierarchy(Class<?> clazz, String field) {\n+        Field f = getField(clazz, field);\n+        while (f == null && clazz != Object.class) {\n+            clazz = clazz.getSuperclass();\n+            f = getField(clazz, field);\n+        }\n+        if (f == null) {\n+            throw new RuntimeException(\n+                    \"You want me to set value to this field: '\" + field + \n+                    \"' on this class: '\" + clazz.getSimpleName() + \n+                    \"' but this field is not declared withing hierarchy of this class!\");\n+        }\n+        return f;\n+    }\n+\n+    private static Field getField(Class<?> clazz, String field) {\n+        try {\n+            return clazz.getDeclaredField(field);\n+        } catch (NoSuchFieldException e) {\n+            return null;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/org/mockito/runners/VerboseMockitoJUnitRunner.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.runners;\n+\n+import org.junit.runner.Description;\n+import org.junit.runner.Runner;\n+import org.junit.runner.notification.Failure;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.mockito.internal.debugging.DebuggingInfo;\n+import org.mockito.internal.progress.MockingProgress;\n+import org.mockito.internal.progress.ThreadSafeMockingProgress;\n+import org.mockito.internal.runners.RunnerFactory;\n+import org.mockito.internal.runners.RunnerImpl;\n+import org.mockito.internal.util.reflection.Whitebox;\n+\n+/**\n+ * Experimental implementation that suppose to improve tdd/testing experience. \n+ * Don't hesitate to send feedback to mockito@googlegroups.com\n+ * <b>It is very likely it will change in the next version!</b>\n+ * <p>\n+ * This runner does exactly what {@link MockitoJUnitRunner} does but also  \n+ * adds extra Mocktio hints to the exception message. \n+ * The point is that Mockito should help the tdd developer to quickly figure out if the test fails for the right reason and track the reason. \n+ * <p>\n+ * The implemntation is pretty hacky - it uses brute force of reflection to modify the exception message and add extra mockito hints.\n+ * You've been warned. \n+ * <p>\n+ * Do you think it is useful or not? Drop us an email at mockito@googlegroups.com\n+ */\n+public class VerboseMockitoJUnitRunner extends Runner {\n+\n+    private RunnerImpl runner;\n+    \n+    public VerboseMockitoJUnitRunner(Class<?> klass) {\n+        this(klass, new RunnerFactory().create(klass));\n+    }\n+    \n+    VerboseMockitoJUnitRunner(Class<?> klass, RunnerImpl runnerImpl) {\n+        this.runner = runnerImpl;\n+    }\n+    \n+    @Override\n+    public void run(RunNotifier notifier) {\n+        MockingProgress progress = new ThreadSafeMockingProgress();\n+        DebuggingInfo debuggingInfo = progress.getDebuggingInfo();\n+        \n+        beforeRun(notifier, debuggingInfo);\n+        \n+        runner.run(notifier);\n+        \n+        afterRun(debuggingInfo);\n+    }\n+\n+    private void afterRun(final DebuggingInfo debuggingInfo) {\n+        debuggingInfo.clearData();\n+    }\n+\n+    private void beforeRun(RunNotifier notifier, final DebuggingInfo debuggingInfo) {\n+        debuggingInfo.collectData();\n+\n+        //a listener that changes the failure's exception in a very hacky way...\n+        RunListener listener = new RunListener() {\n+            @Override public void testFailure(final Failure failure) throws Exception {\n+                Throwable throwable = (Throwable) Whitebox.getInternalState(failure, \"fThrownException\");\n+                \n+                String newMessage = throwable.getMessage();\n+                newMessage += \"\\n\" + debuggingInfo.getWarnings();\n+                \n+                Whitebox.setInternalState(throwable, \"detailMessage\", newMessage);\n+            }\n+        };\n+        \n+        notifier.addFirstListener(listener);\n+    }\n+\n+    @Override\n+    public Description getDescription() {\n+        return runner.getDescription();\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/reflection/DummyClassForTests.java\n+package org.mockito.internal.util.reflection;\n+\n+public class DummyClassForTests extends DummyParentClassForTests {\n+\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/reflection/DummyParentClassForTests.java\n+package org.mockito.internal.util.reflection;\n+\n+public class DummyParentClassForTests {\n+\n+    @SuppressWarnings(\"unused\")//I know, I know. We're doing nasty reflection hacks here...\n+    private String somePrivateField;\n+}\n--- /dev/null\n+++ b/test/org/mockito/internal/util/reflection/WhiteboxTest.java\n+package org.mockito.internal.util.reflection;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+public class WhiteboxTest {\n+\n+    @Test\n+    public void shouldSetInternalStateOnHierarchy() {\n+        //given\n+        DummyClassForTests dummy = new DummyClassForTests();\n+        //when\n+        Whitebox.setInternalState(dummy, \"somePrivateField\", \"cool!\");\n+        //then\n+        Object internalState = org.powermock.reflect.Whitebox.getInternalState(dummy, \"somePrivateField\");\n+        assertEquals(\"cool!\", internalState);\n+    }\n+\n+    @Test\n+    public void shouldGetInternalStateFromHierarchy() {\n+        //given\n+        DummyClassForTests dummy = new DummyClassForTests();\n+        org.powermock.reflect.Whitebox.setInternalState(dummy, \"somePrivateField\", \"boo!\");\n+        //when\n+        Object internalState = Whitebox.getInternalState(dummy, \"somePrivateField\");\n+        //then\n+        assertEquals(\"boo!\", internalState);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/junitrunner/VerboseJUnitRunnerTest.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockitousage.junitrunner;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.VerboseMockitoJUnitRunner;\n+import org.mockitoutil.TestBase;\n+\n+@RunWith(VerboseMockitoJUnitRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public class VerboseJUnitRunnerTest extends TestBase {\n+    \n+    @Mock private List list;\n+    @Mock private List listTwo;\n+    \n+    @Test\n+    public void shouldInitMocksUsingRunner() {\n+        //given\n+//        when(list.get(0)).thenReturn(\"Igor\");\n+        \n+//        assertEquals(\"Igor\", list.get(1));\n+        \n+        //when\n+//        executeSystem(0);\n+        \n+        //then\n+//        verify(listTwo).add(\"Igor\");\n+    }\n+\n+    private void executeSystem(int idx) {\n+        Object first = list.get(idx + 1);\n+        listTwo.add(first);\n+    }\n+}", "timestamp": 1247142290, "metainfo": ""}