{"sha": "ad9c6357a47bfb3e0fa73574d9973f5bbd3a08dd", "log": "added some tests to VM  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40200", "commit": "\n--- a/src/org/mockito/internal/invocation/InvocationsMarker.java\n+++ b/src/org/mockito/internal/invocation/InvocationsMarker.java\n             return;\n         }\n \n-        if (mode.isStrict()) {\n+        if (mode.strictMode()) {\n             markVerifiedStrictly(invocations);\n         } else {\n             markVerified(wanted, invocations);\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n         if (wantedNumberOfInvocations != null && wantedNumberOfInvocations.intValue() < 0) {\n             throw new MockitoException(\"Negative value is not allowed here\");\n         }\n+        assert mocksToBeVerifiedInSequence != null;\n         this.wantedInvocationCount = wantedNumberOfInvocations;\n         this.mocksToBeVerifiedInSequence = mocksToBeVerifiedInSequence;\n         this.verification = verification;\n     }\n+    \n+    /**\n+     * Don't use VerificationMode class directly. \n+     * <p>\n+     * Use Mockito.atLeastOnce() and Mockito.times()\n+     */\n+    public static void dont_use_this_class_directly_instead_use_static_methods_on_Mockito() {}\n     \n     public static VerificationMode atLeastOnce() {\n         return new VerificationMode(null, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n     public static VerificationMode strict(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedStrictly) {\n+        assert !mocksToBeVerifiedStrictly.isEmpty();\n         return new VerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedStrictly, Verification.EXPLICIT);\n     }\n     \n     public static VerificationMode noMoreInteractions() {\n         return new VerificationMode(null, Collections.emptyList(), Verification.NO_MORE_WANTED);\n-    }\n-\n-    /**\n-     * Don't use VerificationMode class directly. \n-     * <p>\n-     * Use Mockito.atLeastOnce() and Mockito.times()\n-     */\n-    public static void dont_use_this_class_directly_instead_use_static_methods_on_Mockito() {}\n-    \n-    public boolean atLeastOnceMode() {\n-        return wantedInvocationCount == null;\n     }\n \n     public Integer wantedCount() {\n         return mocksToBeVerifiedInSequence;\n     }\n \n-    public boolean isStrict() {\n+    public boolean wantedCountIsZero() {\n+        return wantedInvocationCount != null && wantedInvocationCount == 0;\n+    }\n+\n+    public boolean atLeastOnceMode() {\n+        return wantedInvocationCount == null && verification == Verification.EXPLICIT;\n+    }\n+\n+    public boolean strictMode() {\n         return !mocksToBeVerifiedInSequence.isEmpty();\n     }\n \n-    public boolean wantedCountIsZero() {\n-        return wantedInvocationCount != null && wantedInvocationCount == 0;\n-    }\n-    \n-    public boolean isExplicit() {\n+    public boolean explicitMode() {\n         return verification == Verification.EXPLICIT;\n     }\n     \n     public boolean missingMethodMode() {\n-        return isExplicit() && (atLeastOnceMode() || wantedInvocationCount == 1);\n+        return explicitMode() && (atLeastOnceMode() || wantedInvocationCount == 1);\n     }\n \n     public boolean exactNumberOfInvocationsMode() {\n-        return !atLeastOnceMode() && isExplicit();\n+        return !atLeastOnceMode() && explicitMode();\n     }\n     \n     @Override\n--- a/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n+++ b/src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java\n     }\n \n     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode) {\n-        if (mode.isExplicit()) {\n+        if (mode.explicitMode()) {\n             return;\n         }\n \n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n             verifier.verify(invocations, wanted, mode);\n         }\n         \n-        if (mode.isExplicit()) {\n+        if (mode.explicitMode()) {\n             marker.markInvocationsAsVerified(invocations, wanted, mode);\n         }\n     }\n     \n     private List<Invocation> getInvocationsForEvaluation(VerificationMode mode) {\n-        if (mode.isStrict()) {\n+        if (mode.strictMode()) {\n             return chunker.getFirstUnverifiedInvocationChunk(mode.getAllMocksToBeVerifiedInSequence());\n         } else {\n             return registeredInvocations;\n--- a/test/org/mockito/internal/progress/VerificationModeTest.java\n+++ b/test/org/mockito/internal/progress/VerificationModeTest.java\n package org.mockito.internal.progress;\n \n import static org.junit.Assert.assertEquals;\n+import static java.util.Arrays.*;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n import static org.mockito.internal.progress.VerificationMode.atLeastOnce;\n import static org.mockito.internal.progress.VerificationMode.noMoreInteractions;\n-import static org.mockito.internal.progress.VerificationMode.times;\n+import static org.mockito.internal.progress.VerificationMode.*;\n \n import org.junit.Test;\n import org.mockito.RequiresValidState;\n \n public class VerificationModeTest extends RequiresValidState {\n \n-    //TODO add non trivial tests\n     @Test\n     public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {\n         VerificationMode mode = atLeastOnce();\n         assertFalse(noMoreInteractions().exactNumberOfInvocationsMode());\n         assertFalse(atLeastOnce().exactNumberOfInvocationsMode());\n     }\n+    \n+    @Test\n+    public void shouldKnowIfWantedCountIsZero() throws Exception {\n+        assertTrue(times(0).wantedCountIsZero());\n+        \n+        assertFalse(times(1).wantedCountIsZero());\n+        assertFalse(times(2).wantedCountIsZero());\n+        assertFalse(atLeastOnce().wantedCountIsZero());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfIsStrict() throws Exception {\n+        assertTrue(strict(1, asList(new Object())).strictMode());\n+        \n+        assertFalse(times(0).strictMode());\n+        assertFalse(times(2).strictMode());\n+        assertFalse(atLeastOnce().strictMode());\n+        assertFalse(noMoreInteractions().strictMode());\n+    }\n+    \n+    @Test\n+    public void shouldKnowIfIsAtLeastOnceMode() throws Exception {\n+        assertTrue(atLeastOnce().atLeastOnceMode());\n+        \n+        assertFalse(times(0).atLeastOnceMode());\n+        assertFalse(times(2).atLeastOnceMode());\n+        assertFalse(noMoreInteractions().atLeastOnceMode());\n+    }\n }", "timestamp": 1197671666, "metainfo": ""}