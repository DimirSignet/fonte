{"sha": "ff496c197962285914ae45e2bca1042b216b8e1e", "log": "Added a class + test that shows how to customize Mockito syntax  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401103", "commit": "\n--- /dev/null\n+++ b/test/org/mockitousage/customization/BDDMockito.java\n+package org.mockitousage.customization;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.progress.NewOngoingStubbing;\n+import org.mockito.internal.stubbing.Stubber;\n+import org.mockito.stubbing.Answer;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class BDDMockito extends Mockito {\n+    \n+    /**\n+     * See original {@link NewOngoingStubbing}\n+     */\n+    public static interface BDDMyOngoingStubbing<T> {\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenAnswer(Answer)}\n+         */\n+        BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer);\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenReturn(Object)}\n+         */\n+        BDDMyOngoingStubbing<T> willReturn(T value);\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenReturn(Object, Object...)}\n+         */\n+        BDDMyOngoingStubbing<T> willReturn(T value, T... values);\n+        \n+        /**\n+         * See original {@link NewOngoingStubbing#thenThrow(Throwable...)}\n+         */\n+        BDDMyOngoingStubbing<T> willThrow(Throwable... throwables);\n+    }\n+    \n+    public static class BDDOngoingStubbingImpl<T> implements BDDMyOngoingStubbing<T> {\n+\n+        private final NewOngoingStubbing<T> mockitoOngoingStubbing;\n+\n+        public BDDOngoingStubbingImpl(NewOngoingStubbing<T> ongoingStubbing) {\n+            this.mockitoOngoingStubbing = ongoingStubbing;\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willAnswer(org.mockito.stubbing.Answer)\n+         */\n+        public BDDMyOngoingStubbing<T> willAnswer(Answer<?> answer) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenAnswer(answer));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object)\n+         */\n+        public BDDMyOngoingStubbing<T> willReturn(T value) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willReturn(java.lang.Object, T[])\n+         */\n+        public BDDMyOngoingStubbing<T> willReturn(T value, T... values) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenReturn(value, values));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDMyOngoingStubbing#willThrow(java.lang.Throwable[])\n+         */\n+        public BDDMyOngoingStubbing<T> willThrow(Throwable... throwables) {\n+            return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenThrow(throwables));\n+        }\n+    }\n+    \n+    /**\n+     * see original {@link Mockito#when(Object)}\n+     */\n+    public static <T> BDDMyOngoingStubbing<T> given(T methodCall) {\n+        return new BDDOngoingStubbingImpl<T>(Mockito.when(methodCall));\n+    }\n+    \n+    /**\n+     * See original {@link Stubber}\n+     */\n+    public static interface BDDStubber {\n+        /**\n+         * See original {@link Stubber#doAnswer(Answer)}\n+         */\n+        BDDStubber willAnswer(Answer answer);\n+        \n+        /**\n+         * See original {@link Stubber#doNothing()}\n+         */\n+        BDDStubber willNothing();\n+        \n+        /**\n+         * See original {@link Stubber#doReturn(Object)}\n+         */\n+        BDDStubber willReturn(Object toBeReturned);\n+        \n+        /**\n+         * See original {@link Stubber#doThrow(Throwable)}\n+         */\n+        BDDStubber willThrow(Throwable toBeThrown);\n+        \n+        /**\n+         * See original {@link Stubber#when(Object)}\n+         */\n+        <T> T given(T mock);\n+    }\n+    \n+    public static class BDDStubberImpl implements BDDStubber {\n+\n+        private final Stubber mockitoStubber;\n+\n+        public BDDStubberImpl(Stubber mockitoStubber) {\n+            this.mockitoStubber = mockitoStubber;\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#given(java.lang.Object)\n+         */\n+        public <T> T given(T mock) {\n+            return mockitoStubber.when(mock);\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willAnswer(org.mockito.stubbing.Answer)\n+         */\n+        public BDDStubber willAnswer(Answer answer) {\n+            return new BDDStubberImpl(mockitoStubber.doAnswer(answer));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willNothing()\n+         */\n+        public BDDStubber willNothing() {\n+            return new BDDStubberImpl(mockitoStubber.doNothing());\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willReturn(java.lang.Object)\n+         */\n+        public BDDStubber willReturn(Object toBeReturned) {\n+            return new BDDStubberImpl(mockitoStubber.doReturn(toBeReturned));\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.mockitousage.customization.BDDMockito.BDDStubber#willThrow(java.lang.Throwable)\n+         */\n+        public BDDStubber willThrow(Throwable toBeThrown) {\n+            return new BDDStubberImpl(mockitoStubber.doThrow(toBeThrown));\n+        }\n+    }\n+    \n+    /**\n+     * see original {@link Mockito#doThrow(Throwable)}\n+     */\n+    public static BDDStubber willThrow(Throwable toBeThrown) {\n+        return new BDDStubberImpl(Mockito.doThrow(toBeThrown));\n+    }\n+    \n+    /**\n+     * see original {@link Mockito#doAnswer(Answer)}\n+     */\n+    public static BDDStubber willAnswer(Answer answer) {\n+        return new BDDStubberImpl(Mockito.doAnswer(answer));\n+    }  \n+    \n+    /**\n+     * see original {@link Mockito#doNothing()}\n+     */\n+    public static BDDStubber willDoNothing() {\n+        return new BDDStubberImpl(Mockito.doNothing());\n+    }    \n+    \n+    /**\n+     * see original {@link Mockito#doReturn(Object)}\n+     */\n+    public static BDDStubber willReturn(Object toBeReturned) {\n+        return new BDDStubberImpl(Mockito.doReturn(toBeReturned));\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/customization/BDDMockitoTest.java\n+package org.mockitousage.customization;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockitousage.customization.BDDMockito.*;\n+\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.mockitousage.IMethods;\n+import org.mockitoutil.TestBase;\n+\n+public class BDDMockitoTest extends TestBase {\n+    \n+    @Mock IMethods mock;\n+    \n+    @Test\n+    public void shouldStub() throws Exception {\n+        given(mock.simpleMethod(\"foo\")).willReturn(\"bar\");\n+        \n+        assertEquals(\"bar\", mock.simpleMethod(\"foo\"));\n+        assertEquals(null, mock.simpleMethod(\"whatever\"));\n+    }\n+    \n+    @Test\n+    public void shouldStubWithThrowable() throws Exception {\n+        given(mock.simpleMethod(\"foo\")).willThrow(new RuntimeException());\n+\n+        try {\n+            assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n+            fail();\n+        } catch(RuntimeException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldStubWithAnswer() throws Exception {\n+        given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {\n+            public String answer(InvocationOnMock invocation) throws Throwable {\n+                return (String) invocation.getArguments()[0];\n+            }});\n+        \n+        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n+    }\n+\n+    @Test\n+    public void shouldStubConsecutively() throws Exception {\n+       given(mock.simpleMethod(anyString()))\n+           .willReturn(\"foo\")\n+           .willReturn(\"bar\");\n+       \n+       assertEquals(\"foo\", mock.simpleMethod(\"whatever\"));\n+       assertEquals(\"bar\", mock.simpleMethod(\"whatever\"));\n+    }\n+    \n+    @Test\n+    public void shouldStubVoid() throws Exception {\n+        willThrow(new RuntimeException()).given(mock).voidMethod();\n+        \n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch(RuntimeException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldStubVoidConsecutively() throws Exception {\n+        willDoNothing()\n+        .willThrow(new RuntimeException())\n+        .given(mock).voidMethod();\n+        \n+        mock.voidMethod();\n+        try {\n+            mock.voidMethod();\n+            fail();\n+        } catch(RuntimeException e) {}\n+    }\n+    \n+    @Test\n+    public void shouldStubUsingDoReturnStyle() throws Exception {\n+        willReturn(\"foo\").given(mock).simpleMethod(\"bar\");\n+        \n+        assertEquals(null, mock.simpleMethod(\"boooo\"));\n+        assertEquals(\"foo\", mock.simpleMethod(\"bar\"));\n+    }\n+    \n+    @Test\n+    public void shouldStubUsingDoAnswerStyle() throws Exception {\n+        willAnswer(new Answer<String>() {\n+            public String answer(InvocationOnMock invocation) throws Throwable {\n+                return (String) invocation.getArguments()[0];\n+            }})\n+        .given(mock).simpleMethod(anyString());\n+        \n+        assertEquals(\"foo\", mock.simpleMethod(\"foo\"));\n+    }\n+}", "timestamp": 1229870451, "metainfo": ""}