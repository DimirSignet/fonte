{"sha": "fc445b83e813b28f99364587fdaa5d92de4e54ba", "log": "javadoc fixes  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40708", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n     }\n     \n     /**\n-     * Sometimes you cannot stub using {@link Mockito#stub(Object)}. \n-     * <p>\n-     * When should you use doReturn() for stubbing?\n-     * <p>\n-     * 1. Overriding a previous exception-stubbing:\n-     * \n-     * <pre>\n-     *   stub(mock.foo()).toThrow(new RuntimeException());\n-     *   \n-     *   //Impossible: real method is called so mock.foo() throws RuntimeException\n-     *   stub(mock.foo()).toReturn(\"bar\");\n-     *   \n-     *   //You have to use doReturn() for stubbing\n-     *   doReturn(\"bar\").when(mock).foo();\n-     * </pre>\n-     * \n-     * 2. When spying real objects but calling real methods on a spy brings side effects  \n-     * \n-     * <pre>\n-     *   List list = new LinkedList();\n-     *   List spy = Mockito.spy(list);\n-     *   \n-     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n-     *   stub(spy.get(0)).toReturn(\"foo\");\n-     *   \n-     *   //You have to use doReturn() for stubbing\n-     *   doReturn(\"foo\").when(spy).get(0);\n-     * </pre>\n-     * \n-     * @param toBeReturned\n-     * @return\n-     */\n-    public static Stubber doReturn(Object toBeReturned) {\n-        return doAnswer(new Returns(toBeReturned));\n-    }\n-    \n-    public static Stubber doNothing() {\n-        return doAnswer(new DoesNothing());\n-    }\n-    \n+     * Use doThrow() when you want the void method to throw an exception.\n+     * <p>\n+     * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because void is not a decent type.\n+     * <p>\n+     * Example:\n+     * \n+     * <pre>\n+     *   doThrow(new RuntimeException()).when(mock).someVoidMethod();\n+     * </pre>\n+     * \n+     * @param toBeThrown\n+     * @return stubber - to select a method \n+     */\n     public static Stubber doThrow(Throwable toBeThrown) {\n         return doAnswer(new ThrowsException(toBeThrown));\n     }\n     \n+    /**\n+     * Use doAnswer() when you want to stub a void method with generic {@link Answer}.\n+     * <p>\n+     * Stubbing voids requires different approach from {@link Mockito#stub(Object)} because void is not a decent type.\n+     * <p>\n+     * Example:\n+     * \n+     * <pre>\n+     *   doAnswer(new Answer() {\n+     *      public Object answer(InvocationOnMock invocation) {\n+     *          Object[] args = invocation.getArguments();\n+     *          Mock mock = invocation.getMock();\n+                return null;\n+     *      }})\n+     *    .when(mock).someMethod();\n+     * </pre>\n+     * \n+     * @param answer\n+     * @return stubber - to select a method\n+     */\n     public static Stubber doAnswer(Answer answer) {\n         MOCKING_PROGRESS.stubbingStarted();\n         return new StubberImpl().doAnswer(answer);\n+    }    \n+    \n+    /**\n+     * {@link Mockito#stub(Object)} is always recommended for stubbing because it is argument type-safe \n+     * and more readable (especially when stubbing consecutive calls).\n+     * <p> \n+     * In rare cases you cannot use {@link Mockito#stub(Object)} for stubbing. Here are those situations: \n+     * <p>\n+     * 1. Overriding a previous exception-stubbing:\n+     * \n+     * <pre>\n+     *   stub(mock.foo()).toThrow(new RuntimeException());\n+     *   \n+     *   //Impossible: real method is called so mock.foo() throws RuntimeException\n+     *   stub(mock.foo()).toReturn(\"bar\");\n+     *   \n+     *   //You have to use doReturn() for stubbing\n+     *   doReturn(\"bar\").when(mock).foo();\n+     * </pre>\n+     * \n+     * 2. When spying real objects and calling real methods on a spy brings side effects  \n+     * \n+     * <pre>\n+     *   List list = new LinkedList();\n+     *   List spy = Mockito.spy(list);\n+     *   \n+     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n+     *   stub(spy.get(0)).toReturn(\"foo\");\n+     *   \n+     *   //You have to use doReturn() for stubbing\n+     *   doReturn(\"foo\").when(spy).get(0);\n+     * </pre>\n+     * \n+     * @param toBeReturned\n+     * @return stubber - to select a method\n+     */\n+    public static Stubber doReturn(Object toBeReturned) {\n+        return doAnswer(new Returns(toBeReturned));\n+    }\n+ \n+    /**\n+     * Mockito mocks' void methods do nothing by default. However, there are situations when doNothing() comes handy:  \n+     * <p>\n+     * 1. Stubbing consecutive calls on void method:\n+     * <pre>\n+     *   doNothing().\n+     *   doThrow(new RuntimeException()).\n+     *   when(mock).someVoidMethod();\n+     *   \n+     *   //does nothing the first time:\n+     *   mock.someVoidMethod();\n+     *   \n+     *   //throws RuntimeException the next time:\n+     *   mock.someVoidMethod();\n+     * </pre>\n+     * \n+     * 2. When you spy real objects and you want the void method to do nothing:\n+     * <pre>\n+     *   List list = new LinkedList();\n+     *   List spy = spy(list);\n+     *   \n+     *   //let's make clear() do nothing\n+     *   doNothing().when(spy).clear();\n+     *   \n+     *   spy.add(\"one\");\n+     *   \n+     *   //clear does nothing, so the list still contains \"one\"\n+     *   spy.clear();\n+     * </pre>\n+     *   \n+     * @return stubber - to select a method\n+     */\n+    public static Stubber doNothing() {\n+        return doAnswer(new DoesNothing());\n     }\n     \n     /**\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n              ));\n     }\n \n-    public void cannotStubNonVoidMethodWithAVoidReturn() {\n-        throw new MockitoException(join(\n-                \"Cannot stub a non-void method with a void return!\",\n-                \"Void return is only used for stubbing consecutive calls on void methods.\",\n-                \"Example:\",\n+    public void onlyVoidMethodsCanBeSetToDoNothing() {\n+        throw new MockitoException(join(\n+                \"Only void methods can doNothing()!\",\n+                \"Example of correct use of doNothing():\",\n                 \"    doNothing().\",\n                 \"    doThrow(new RuntimeException()).\",\n                 \"    when(mock).someVoidMethod();\",\n                 \"Above means:\",\n-                \"someVoidMethod() does nothing the 1st time but throws an exception 2nd time is called\"\n+                \"someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called\"\n              ));\n     }\n }\n--- a/src/org/mockito/internal/stubbing/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/AnswersValidator.java\n         }\n         \n         if (answer instanceof DoesNothing) {\n-            validateVoidReturn((DoesNothing) answer, invocation);\n+            validateDoNothing((DoesNothing) answer, invocation);\n         }\n     }\n \n-    private void validateVoidReturn(DoesNothing answer, Invocation invocation) {\n+    private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n         if (!invocation.isVoid()) {\n-            reporter.cannotStubNonVoidMethodWithAVoidReturn();\n+            reporter.onlyVoidMethodsCanBeSetToDoNothing();\n         }\n     }\n \n--- a/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n+++ b/src/org/mockito/internal/stubbing/VoidMethodStubbable.java\n     VoidMethodStubbable<T> toReturn();\n \n     /**\n-     * Stubs void method to execute a custom answer.\n+     * Stubs a void method with generic {@link Answer}\n      * <p>\n      * For Example:\n      * <pre>\n--- a/test/org/mockito/internal/stubbing/AnswersValidatorTest.java\n+++ b/test/org/mockito/internal/stubbing/AnswersValidatorTest.java\n     }\n     \n     @Test(expected = MockitoException.class)\n-    public void shouldFailWhenVoidReturnSetOnNonVoidMethod() throws Throwable {\n+    public void shouldFailWhenNonVoidMethodDoesNothing() throws Throwable {\n         validator.validate(new DoesNothing(), new InvocationBuilder().simpleMethod().toInvocation());\n     }\n     \n     public void shouldAllowVoidReturnForVoidMethod() throws Throwable {\n         validator.validate(new DoesNothing(), new InvocationBuilder().method(\"voidMethod\").toInvocation());\n     }\n-}\n+}\n--- a/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n+++ b/test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java\n             doNothing().when(mock).simpleMethod();\n             fail();\n         } catch (MockitoException e) {\n-            assertThat(e.getMessage(), contains(\"Cannot stub a non-void method\"));\n+            assertThat(e.getMessage(), contains(\"Only void methods can doNothing()\"));\n         }\n     }\n     ", "timestamp": 1216582917, "metainfo": ""}