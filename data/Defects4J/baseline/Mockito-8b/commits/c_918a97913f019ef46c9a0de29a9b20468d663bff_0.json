{"sha": "918a97913f019ef46c9a0de29a9b20468d663bff", "log": "made arguments print a bit nicer  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40418", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n         \n         for(int i = 0; i<matchers.size(); i++) {\n             d.appendText(TAB);\n-            d.appendText(String.valueOf(i+1));\n-            d.appendText(\": \");\n+            String argNumber = argNumber(i);\n+            d.appendText(argNumber);\n             d.appendDescriptionOf(matchers.get(i));\n             if (i != matchers.size()-1) {\n                 d.appendText(\"\\n\");\n \n         return d.toString();\n     }\n+\n+    private String argNumber(int zeroBasedIndex) {\n+        String no = String.valueOf(zeroBasedIndex+1);\n+        if (no.endsWith(\"1\")) {\n+            return no.concat(\"st: \");\n+        } else if (no.endsWith(\"2\")) {\n+            return no.concat(\"nd: \");\n+        } else if (no.endsWith(\"3\")) {\n+            return no.concat(\"rd: \");\n+        }\n+        \n+        return no.concat(\"th: \");\n+    }\n }\n--- a/test/org/mockito/internal/invocation/InvocationsPrinterTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationsPrinterTest.java\n         InvocationsPrinter printer = new InvocationsPrinter(simpleMethod, differentMethod);\n         \n         assertEquals(\"Object.simpleMethod(...)\", printer.getWanted().toString());\n-        assertEquals(\"    1: \\\"test\\\"\", printer.getWantedArgs().toString());\n-        assertEquals(\"    1: \\\"foo\\\"\", printer.getActualArgs().toString());\n+        assertEquals(\"    1st: \\\"test\\\"\", printer.getWantedArgs().toString());\n+        assertEquals(\"    1st: \\\"foo\\\"\", printer.getActualArgs().toString());\n     }\n     \n     class Super {\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n //            e.printStackTrace();\n-            assertThat(e, messageContains(\"1: String that contains 'xxx'\"));\n-            assertThat(e, causeMessageContains(\"1: \\\"foo\\\"\"));\n+            assertThat(e, messageContains(\"1st: String that contains 'xxx'\"));\n+            assertThat(e, causeMessageContains(\"1st: \\\"foo\\\"\"));\n         }\n     }\n \n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n                     \"\\n\" +\n                     \"All wanted arguments:\" +\n                     \"\\n\" +\n-                    \"    1: 1\" +\n-                    \"\\n\" +\n-                    \"    2: 1000\";\n+                    \"    1st: 1\" +\n+                    \"\\n\" +\n+                    \"    2nd: 1000\";\n \n             assertEquals(expected, e.getMessage());\n \n                     \"\\n\" +\n                     \"All actual arguments:\" +\n                     \"\\n\" +\n-                    \"    1: 1\" +\n-                    \"\\n\" +\n-                    \"    2: 2\";\n+                    \"    1st: 1\" +\n+                    \"\\n\" +\n+                    \"    2nd: 2\";\n \n             assertEquals(expectedCause, e.getCause().getMessage());\n         }\n             verify(mock).simpleMethod(\"test\");\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n-            assertThat(e, messageContains(\"    1: \\\"test\\\"\"));\n+            assertThat(e, messageContains(\"    1st: \\\"test\\\"\"));\n             assertThat(e, causeMessageContains(\"    <no arguments>\"));\n         }\n     }\n             verify(mock).twoArgumentMethod(3, 1000);\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n-            assertThat(e, messageContains(\"1: 3\"));\n-            assertThat(e, messageContains(\"2: 1000\"));\n-            assertThat(e, causeMessageContains(\"1: 3\"));\n-            assertThat(e, causeMessageContains(\"2: 3\"));\n+            assertThat(e, messageContains(\"1st: 3\"));\n+            assertThat(e, messageContains(\"2nd: 1000\"));\n+            assertThat(e, causeMessageContains(\"1st: 3\"));\n+            assertThat(e, causeMessageContains(\"2nd: 3\"));\n         }\n     }\n \n             verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n-            assertThat(e, messageContains(\"1: [false, false, false]\"));\n-            assertThat(e, causeMessageContains(\"1: [true, false, false]\"));\n+            assertThat(e, messageContains(\"[false, false, false]\"));\n+            assertThat(e, causeMessageContains(\"[true, false, false]\"));\n         }\n     }\n \n     @Test\n     public void shouldPrintMethodWhenMissingInvocationWithVarargMatcher() {\n-        mock.varargsString(10, \"one\", \"two\");\n-\n-        try {\n-            verify(mock).varargsString(10, \"two\", \"one\");\n-            fail();\n-        } catch (ArgumentsAreDifferentException e) {\n-            assertThat(e, messageContains(\"1: 10\"));\n-            assertThat(e, messageContains(\"2: \\\"two\\\"\"));\n-            assertThat(e, messageContains(\"3: \\\"one\\\"\"));\n+        mock.varargsString(10, \"one\", \"two\", \"three\");\n+\n+        try {\n+            verify(mock).varargsString(10, \"two\", \"one\", \"three\");\n+            fail();\n+        } catch (ArgumentsAreDifferentException e) {\n+            assertThat(e, messageContains(\"1st: 10\"));\n+            assertThat(e, messageContains(\"2nd: \\\"two\\\"\"));\n+            assertThat(e, messageContains(\"3rd: \\\"one\\\"\"));\n+            assertThat(e, messageContains(\"4th: \\\"three\\\"\"));\n             \n-            assertThat(e, causeMessageContains(\"1: 10\"));\n-            assertThat(e, causeMessageContains(\"2: \\\"one\\\"\"));\n-            assertThat(e, causeMessageContains(\"3: \\\"two\\\"\"));\n+            assertThat(e, causeMessageContains(\"1st: 10\"));\n+            assertThat(e, causeMessageContains(\"2nd: \\\"one\\\"\"));\n+            assertThat(e, causeMessageContains(\"3rd: \\\"two\\\"\"));\n+            assertThat(e, causeMessageContains(\"4th: \\\"three\\\"\"));\n         }\n     }\n \n             verify(mock).simpleMethod(matches(\"burrito from Exmouth\"));\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n-            assertThat(e, messageContains(\"1: matches(\\\"burrito from Exmouth\\\")\"));\n-            assertThat(e, causeMessageContains(\"1: \\\"foo\\\"\"));\n+            assertThat(e, messageContains(\"matches(\\\"burrito from Exmouth\\\")\"));\n+            assertThat(e, causeMessageContains(\"\\\"foo\\\"\"));\n         }\n     }\n \n             verify(mock).simpleMethod(\"test\");\n             fail();\n         } catch (ArgumentsAreDifferentException e) {\n-            assertThat(e, causeMessageContains(\"1: null\"));\n-            assertThat(e, causeMessageContains(\"2: null\"));\n+            assertThat(e, causeMessageContains(\"1st: null\"));\n+            assertThat(e, causeMessageContains(\"2nd: null\"));\n         }\n     }\n ", "timestamp": 1204421928, "metainfo": ""}