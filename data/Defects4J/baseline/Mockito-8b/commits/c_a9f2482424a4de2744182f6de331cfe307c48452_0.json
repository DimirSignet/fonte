{"sha": "a9f2482424a4de2744182f6de331cfe307c48452", "log": "Some refactorings Made the exception message better for SmartNull", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n                 ));\n     }\n \n-    public void smartNullPointerException(Object obj, Location location) {\n+    public void smartNullPointerException(String invocation, Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n                 new Location(),\n-                obj,\n-                \"Because this method was *not* stubbed correctly:\",\n+                \"because this method call was *not* stubbed correctly:\",\n                 location,\n+                invocation,\n                 \"\"\n                 ));\n     }\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n                 return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n \n-            new Reporter().smartNullPointerException(obj, location);\n+            new Reporter().smartNullPointerException(invocation.toString(), location);\n             return null;\n         }\n \n--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java\n         try {\n             smartNull.get();\n             fail();\n-        } catch (SmartNullPointerException ex) {\n-        \tString message = ex.getMessage();\n-        \tassertTrue(\"Exception message should include oompa and lumpa, but was: \" + message,\n-        \t\t\tmessage.contains(\"oompa, lumpa\"));\n+        } catch (SmartNullPointerException e) {\n+        \tassertContains(\"oompa\", e.getMessage());\n+        \tassertContains(\"lumpa\", e.getMessage());\n         }\n \t}\n }\n--- a/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/SmartNullsStubbingTest.java\n         Bar smartNull = foo.getBarWithParams(10, \"yes sir\");\n \n         try {\n-            //TODO: make sure the message is clear\n             smartNull.boo();\n             fail();\n         } catch (Exception e) {\n             assertContains(\"yes sir\", e.getMessage());\n         }\n     }\n+\n+    @Test\n+    public void shouldShowParametersWhenParamsAreHuge() {\n+        Foo foo = mock(Foo.class, RETURNS_SMART_NULLS);\n+        String longStr = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";\n+        Bar smartNull = foo.getBarWithParams(10, longStr);\n+\n+        try {\n+            smartNull.boo();\n+            fail();\n+        } catch (Exception e) {\n+            assertContains(\"Lorem Ipsum\", e.getMessage());\n+        }\n+    }\n }\n--- a/test/org/mockitoutil/TestBase.java\n+++ b/test/org/mockitoutil/TestBase.java\n import org.mockito.internal.util.MockUtil;\n \n import java.io.*;\n+\n+import static org.mockito.Mockito.mock;\n \n /**\n  * the easiest way to make sure that tests clean up invalid state is to require\n         for (int i = 0; i < args.length; i++) {\n             types[i] = args[i].getClass();\n         }\n-        return new Invocation(new Object(), new SerializableMethod(type.getMethod(methodName,\n+        return new Invocation(mock(type), new SerializableMethod(type.getMethod(methodName,\n                 types)), args, 1, null);\n     }\n ", "timestamp": 1289132454, "metainfo": ""}