{"sha": "55a48ec612d7c09ae70a696ffac132a519bec142", "log": "Refactoring. Got rid of some duplicated code.  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401321", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     public void unfinishedStubbing(Location location) {\n         throw new UnfinishedStubbingException(join(\n                 \"Unfinished stubbing detected here:\",\n-                \"-> at \" + location,\n+                location,\n                 \"\",\n                 \"E.g. thenReturn() may be missing.\",\n                 \"Examples of correct stubbing:\",\n     public void unfinishedVerificationException(Location location) {\n         UnfinishedVerificationException exception = new UnfinishedVerificationException(join(\n                 \"Missing method call for verify(mock) here:\",\n-                \"-> at \" + location,\n+                location,\n                 \"\",\n                 \"Example of correct verification:\",\n                 \"    verify(mock).doSomething()\",\n     public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {\n         String message = join(\"Argument(s) are different! Wanted:\", \n                 wanted,\n-                \"-> at \" + new Location(),\n+                new Location(),\n                 \"Actual invocation has different arguments:\",\n                 actual,\n-                \"-> at \" + actualLocation,\n+                actualLocation,\n                 \"\"\n                 );\n         \n         throw new WantedButNotInvoked(join(\n                     \"Wanted but not invoked:\",\n                     wanted.toString(),\n-                    \"-> at \" + new Location(),\n+                    new Location(),\n                     \"\"\n         ));\n     }\n                     \"Verification in order failure\",\n                     \"Wanted but not invoked:\",\n                     wanted.toString(),\n-                    \"-> at \" + new Location(),\n+                    new Location(),\n                     \"Wanted anywhere AFTER following interaction:\",\n                     previous.toString(),\n-                    \"-> at \" + previous.getLocation(),\n+                    previous.getLocation(),\n                     \"\"\n         ));\n     }\n         return join(\n                 wanted.toString(),\n                 \"Wanted \" + Pluralizer.pluralize(wantedCount) + \":\",\n-                \"-> at \" + new Location(),\n+                new Location(),\n                 \"But was \" + pluralize(actualCount) + \". Undesired invocation:\",\n-                \"-> at \" + firstUndesired,\n+                firstUndesired,\n                 \"\"\n         );\n     }\n         throw new NeverWantedButInvoked(join(\n                 wanted.toString(),\n                 \"Never wanted here:\",\n-                \"-> at \" + new Location(),\n+                new Location(),\n                 \"But invoked here:\",\n-                \"-> at \" + firstUndesired,\n+                firstUndesired,\n                 \"\"\n         ));\n     }    \n     private String createTooLittleInvocationsMessage(Discrepancy discrepancy, PrintableInvocation wanted,\n             Location lastActualInvocation) {\n         String ending = \n-            (lastActualInvocation != null)? \"-> at \" + lastActualInvocation + \"\\n\" : \"\\n\";\n+            (lastActualInvocation != null)? lastActualInvocation + \"\\n\" : \"\\n\";\n             \n             String message = join(\n                     wanted.toString(),\n                     \"Wanted \" + discrepancy.getPluralizedWantedCount() + \":\",\n-                    \"-> at \" + new Location(),\n+                    new Location(),\n                     \"But was \" + discrepancy.getPluralizedActualCount() + \":\", \n                     ending\n             );\n     public void noMoreInteractionsWanted(PrintableInvocation undesired) {\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n-                \"-> at \" + new Location(),\n+                new Location(),\n                 \"But found this interaction:\",\n-                \"-> at \" + undesired.getLocation(),\n+                undesired.getLocation(),\n                 \"\"\n                 ));\n     }\n     public void misplacedArgumentMatcher(Location location) {\n         throw new InvalidUseOfMatchersException(join(\n                 \"Misplaced argument matcher detected here:\",\n-                \"-> at \" + location,\n+                location,\n                 \"\",\n                 \"You cannot use argument matchers outside of verification or stubbing.\",\n                 \"Also make sure you're *not* stubbing/verifying a final method with an argument matcher.\",\n     public void smartNullPointerException(Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n-                \"-> at \" + new Location(),\n+                new Location(),\n                 \"Because this method was *not* stubbed correctly:\",\n-                \"-> at \" + location,\n+                location,\n                 \"\"\n                 ));\n     }\n--- a/src/org/mockito/internal/debugging/Location.java\n+++ b/src/org/mockito/internal/debugging/Location.java\n \n     @Override\n     public String toString() {\n-        return this.firstTraceElement.toString();\n+        return \"-> at \" + this.firstTraceElement.toString();\n     }\n }\n--- a/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n+++ b/test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java\n \n import static org.mockito.Mockito.*;\n \n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.InOrder;\n import org.mockito.Mock;\n+import org.mockito.internal.configuration.ConfigurationAccess;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n public class ModellingDescriptiveMessagesTest extends TestBase {\n     \n     @Mock private IMethods mock;\n+    \n+    @Before\n+    public void cleanStackTrace() {\n+        ConfigurationAccess.getConfig().overrideCleansStackTrace(true);\n+    }\n \n     @Test\n     public void shouldSayWantedButNotInvoked() {", "timestamp": 1239797926, "metainfo": ""}