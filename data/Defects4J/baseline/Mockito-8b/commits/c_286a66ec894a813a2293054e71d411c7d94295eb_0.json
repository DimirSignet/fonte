{"sha": "286a66ec894a813a2293054e71d411c7d94295eb", "log": "Fixed typo in the class name removed a dead method  --HG-- rename : src/org/mockito/internal/reporting/PrintingFriendlyInocation.java => src/org/mockito/internal/reporting/PrintingFriendlyInvocation.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401476", "commit": "\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.MatchersPrinter;\n import org.mockito.internal.reporting.PrintSettings;\n-import org.mockito.internal.reporting.PrintingFriendlyInocation;\n+import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.Primitives;\n import org.mockito.invocation.InvocationOnMock;\n  * Contains stack trace of invocation\n  */\n @SuppressWarnings(\"unchecked\")\n-public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInocation {\n+public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation {\n \n     private static final int MAX_LINE_LENGTH = 45;\n     private final int sequenceNumber;\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n import org.mockito.exceptions.PrintableInvocation;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.reporting.PrintSettings;\n-import org.mockito.internal.reporting.PrintingFriendlyInocation;\n+import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n \n @SuppressWarnings(\"unchecked\")\n-public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInocation {\n+public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInvocation {\n \n     private final Invocation invocation;\n     private final List<Matcher> matchers;\n         return this.matchers;\n     }\n     \n-    /* (non-Javadoc)\n-     * @see org.mockito.internal.invocation.PrintingFriendlyInocation#toString()\n-     */\n     public String toString() {\n         return invocation.toString(matchers, new PrintSettings());\n-    }\n-\n-    /* (non-Javadoc)\n-     * @see org.mockito.internal.invocation.PrintingFriendlyInocation#hasMultilinePrint()\n-     */\n-    public boolean printsInMultilines() {        \n-        return toString().contains(\"\\n\");\n     }\n \n     public boolean matches(Invocation actual) {\n--- /dev/null\n+++ b/src/org/mockito/internal/reporting/PrintingFriendlyInvocation.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.internal.reporting;\n+\n+public interface PrintingFriendlyInvocation {\n+\n+    String toString(PrintSettings printSettings);\n+\n+}\n--- a/src/org/mockito/internal/reporting/SmartPrinter.java\n+++ b/src/org/mockito/internal/reporting/SmartPrinter.java\n     private final String wanted;\n     private final String actual;\n \n-    public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual, Integer ... toBePrintedVerbosely) {\n+    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... toBePrintedVerbosely) {\n         PrintSettings printSettings = new PrintSettings();\n         printSettings.setMultiline(wanted.toString().contains(\"\\n\") || actual.toString().contains(\"\\n\"));\n         printSettings.setMatchersToBePrintedVerbosely(toBePrintedVerbosely);\n--- a/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n+++ b/test/org/mockito/internal/invocation/InvocationMatcherTest.java\n import org.mockito.Mock;\n import org.mockito.internal.matchers.Equals;\n import org.mockito.internal.matchers.NotNull;\n-import org.mockito.internal.reporting.PrintingFriendlyInocation;\n+import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n     \n     @Test\n     public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {\n-        PrintingFriendlyInocation withOneArg = new InvocationMatcher(new InvocationBuilder().args(\"test\").toInvocation());\n-        PrintingFriendlyInocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args(\"test\", 100).toInvocation());\n+        PrintingFriendlyInvocation withOneArg = new InvocationMatcher(new InvocationBuilder().args(\"test\").toInvocation());\n+        PrintingFriendlyInvocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args(\"test\", 100).toInvocation());\n \n         assertFalse(withOneArg.equals(null));\n         assertFalse(withOneArg.equals(withTwoArgs));\n--- a/test/org/mockito/internal/verification/SmartPrinterTest.java\n+++ b/test/org/mockito/internal/verification/SmartPrinterTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n-import org.mockito.internal.reporting.PrintingFriendlyInocation;\n+import org.mockito.internal.reporting.PrintingFriendlyInvocation;\n import org.mockito.internal.reporting.SmartPrinter;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n @SuppressWarnings(\"unchecked\")\n public class SmartPrinterTest extends TestBase {\n \n-    private PrintingFriendlyInocation multi;\n-    private PrintingFriendlyInocation shortie;\n+    private PrintingFriendlyInvocation multi;\n+    private PrintingFriendlyInvocation shortie;\n     @Mock private IMethods mock;\n \n     @Before", "timestamp": 1244282290, "metainfo": ""}