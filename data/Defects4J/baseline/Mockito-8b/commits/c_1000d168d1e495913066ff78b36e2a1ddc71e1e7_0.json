{"sha": "1000d168d1e495913066ff78b36e2a1ddc71e1e7", "log": "Got rid of a TODO  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%401345", "commit": "\n--- a/src/org/mockito/internal/debugging/WarningsPrinter.java\n+++ b/src/org/mockito/internal/debugging/WarningsPrinter.java\n     }\n \n     public void print(MockitoLogger logger) {\n-        //TODO refactor after 1.7, it should be visible that this method changes the state\n-        warnAboutStubsUsedWithDifferentArgs(logger);\n-        \n-        warnAboutUnusedStubs(logger);\n-        warnAboutUnstubbedInvocations(logger);\n-    }\n-\n-    private void warnAboutUnstubbedInvocations(MockitoLogger logger) {\n-        for (InvocationMatcher i : unstubbedInvocations) {\n-            logger.log(join(\n-                \"[Mockito] Warning - this method was not stubbed:\",\n-                i,\n-                i.getInvocation().getLocation(),\n-                \"\"));\n-        }\n-    }\n-\n-    private void warnAboutUnusedStubs(MockitoLogger logger) {\n-        for (Invocation i : unusedStubs) {\n-            logger.log(join(\n-                \"[Mockito] Warning - this stub was not used:\",\n-                i,\n-                i.getLocation(),\n-                \"\"));\n-        }\n-    }\n-\n-    private void warnAboutStubsUsedWithDifferentArgs(MockitoLogger logger) {\n         Iterator<Invocation> unusedIterator = unusedStubs.iterator();\n         while(unusedIterator.hasNext()) {\n             Invocation unused = unusedIterator.next();\n             while(unstubbedIterator.hasNext()) {\n                 InvocationMatcher unstubbed = unstubbedIterator.next();\n                 if(unstubbed.hasSimilarMethod(unused)) { \n-                    logger.log(join(\n-                            \"[Mockito] Warning - stubbed method called with different arguments.\",\n-                            \"Stubbed this way:\",\n-                            unused,\n-                            unused.getLocation(),\n-                            \"\",\n-                            \"But called with different arguments:\",\n-                            unstubbed,\n-                            unstubbed.getInvocation().getLocation(),\n-                            \"\"));\n-                    \n+                    logger.log(stubbedMethodCalledWithDifferentArguments(unused, unstubbed));\n                     unusedIterator.remove();\n                     unstubbedIterator.remove();\n-                }\n+                } \n             }\n         }\n+        \n+        for (Invocation i : unusedStubs) {\n+            logger.log(thisStubWasNotUsed(i));\n+        }\n+\n+        for (InvocationMatcher i1 : unstubbedInvocations) {\n+            logger.log(thisMethodWasNotStubbed(i1));\n+        }\n+    }\n+\n+    private String thisStubWasNotUsed(Invocation i) {\n+        return join(\n+            \"[Mockito] Warning - this stub was not used:\",\n+            i,\n+            i.getLocation(),\n+            \"\");\n+    }\n+\n+    private String thisMethodWasNotStubbed(InvocationMatcher i) {\n+        return join(\n+            \"[Mockito] Warning - this method was not stubbed:\",\n+            i,\n+            i.getInvocation().getLocation(),\n+            \"\");\n+    }\n+\n+    private String stubbedMethodCalledWithDifferentArguments(Invocation unused, InvocationMatcher unstubbed) {\n+        return join(\n+                \"[Mockito] Warning - stubbed method called with different arguments.\",\n+                \"Stubbed this way:\",\n+                unused,\n+                unused.getLocation(),\n+                \"\",\n+                \"But called with different arguments:\",\n+                unstubbed,\n+                unstubbed.getInvocation().getLocation(),\n+                \"\");\n     }\n }\n--- a/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n+++ b/test/org/mockito/internal/debugging/WarningsPrinterTest.java\n import java.util.Arrays;\n \n import org.junit.Test;\n+import org.mockito.Mock;\n import org.mockito.internal.invocation.Invocation;\n import org.mockito.internal.invocation.InvocationBuilder;\n import org.mockito.internal.invocation.InvocationMatcher;\n import org.mockito.util.MockitoLoggerStub;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n-import static org.mockito.Mockito.*;\n \n public class WarningsPrinterTest extends TestBase {\n \n+    @Mock\n+    private IMethods mock;\n     private MockitoLoggerStub logger = new MockitoLoggerStub();\n \n     @Test\n-    public void testPrintUnusedStub() {\n+    public void shouldPrintUnusedStub() {\n+        // given\n         Invocation unusedStub = new InvocationBuilder().simpleMethod().toInvocation();\n-        WarningsPrinter p = new WarningsPrinter(asList(unusedStub), Arrays.<InvocationMatcher>asList());\n-        \n+        WarningsPrinter p = new WarningsPrinter(asList(unusedStub), Arrays.<InvocationMatcher> asList());\n+\n+        // when\n         p.print(logger);\n-        \n+\n+        // then\n         assertThat(logger.getLoggedInfo(), contains(\"stub was not used\"));\n         assertThat(logger.getLoggedInfo(), contains(\"simpleMethod()\"));\n     }\n-    \n+\n     @Test\n-    public void testPrintUnstubbedInvocation() {\n+    public void shouldPrintUnstubbedInvocation() {\n+        // given\n         InvocationMatcher unstubbedInvocation = new InvocationBuilder().differentMethod().toInvocationMatcher();\n-        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation>asList(), Arrays.<InvocationMatcher>asList(unstubbedInvocation));\n-        \n+        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation> asList(), Arrays.<InvocationMatcher> asList(unstubbedInvocation));\n+\n+        // when\n         p.print(logger);\n-        \n+\n+        // then\n         assertThat(logger.getLoggedInfo(), contains(\"was not stubbed\"));\n         assertThat(logger.getLoggedInfo(), contains(\"differentMethod()\"));\n     }\n-    \n+\n     @Test\n-    public void testPrintStubWasUsedWithDifferentArgs() {\n-        IMethods mock = mock(IMethods.class);\n+    public void shouldPrintStubWasUsedWithDifferentArgs() {\n+        // given\n         Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n         InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n- \n-        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation>asList(stub), Arrays.<InvocationMatcher>asList(wrongArg));\n-        \n+\n+        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n+\n+        // when\n         p.print(logger);\n-        \n+\n+        // then\n         assertThat(logger.getLoggedInfo(), contains(\"Stubbed this way\"));\n         assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"foo\\\")\"));\n         assertThat(logger.getLoggedInfo(), contains(\"called with different arguments\"));\n         assertThat(logger.getLoggedInfo(), contains(\"simpleMethod(\\\"bar\\\")\"));\n     }\n-    \n-    //TODO after 1.7 consider writing a warning when someone tries to mock a class that has any final methods\n+\n+    @Test\n+    public void shouldNotPrintRedundantInformation() {\n+        // given\n+        Invocation stub = new InvocationBuilder().arg(\"foo\").mock(mock).toInvocation();\n+        InvocationMatcher wrongArg = new InvocationBuilder().arg(\"bar\").mock(mock).toInvocationMatcher();\n+\n+        WarningsPrinter p = new WarningsPrinter(Arrays.<Invocation> asList(stub), Arrays.<InvocationMatcher> asList(wrongArg));\n+\n+        // when\n+        p.print(logger);\n+\n+        // then\n+        assertNotContains(\"stub was not used\", logger.getLoggedInfo());\n+        assertNotContains(\"was not stubbed\", logger.getLoggedInfo());\n+    }\n+\n+    // TODO after 1.7 consider writing a warning when someone tries to mock a\n+    // class that has any final methods\n }", "timestamp": 1240167827, "metainfo": ""}