{"sha": "d9c83f3c125f42df75e587d65d91fc786335e8e3", "log": "review notes applied", "commit": "\n--- a/src/org/mockito/junit/MockitoJUnitRule.java\n+++ b/src/org/mockito/junit/MockitoJUnitRule.java\n import org.junit.runners.model.FrameworkMethod;\n import org.junit.runners.model.Statement;\n import org.mockito.internal.rules.JUnitRule;\n+import org.mockito.rules.MockitoJUnit;\n+\n \n /**\n- * The MockitoJUnitRule Rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}.\n- * Requires JUnit 4.9 (at least).\n+ * Please use {@link MockitoJUnit#rule()} instead of direct use.\n  *\n- * This rule adds following behavior:\n- * <ul>\n- *   <li>\n- *      Initializes mocks annotated with {@link org.mockito.Mock},\n- *      so that explicit usage of {@link org.mockito.MockitoAnnotations#initMocks(Object)} is not necessary.\n- *      Mocks are initialized before each test method.\n- *   <li>\n- *      validates framework usage after each test method. See javadoc for {@link org.mockito.Mockito#validateMockitoUsage()}.\n- * </ul>\n- * Example use:\n- * <pre class=\"code\"><code class=\"java\">\n- * public class ExampleTest {\n- *\n- *     &#064;Rule\n- *     public MockitoJUnitRule mockitoJUnitRule = MockitoJUnitRule.rule();</b>\n- *\n- *     &#064;Mock\n- *     private List list;\n- *\n- *     &#064;Test\n- *     public void shouldDoSomething() {\n- *         list.add(100);\n- *     }\n- * }\n- * </code></pre>\n+ * @see MockitoJUnit\n  */\n+@Deprecated\n public class MockitoJUnitRule implements MethodRule {\n \n     private final JUnitRule jUnitRule;\n \n     /**\n+     * Please use {@link MockitoJUnit#rule()}.\n      */\n+    @Deprecated\n     public MockitoJUnitRule() {\n         this.jUnitRule = new JUnitRule();\n     }\n \n     /**\n-     * Please use {@link MockitoJUnitRule#MockitoJUnitRule()}.\n-     * @param targetTest the test class instance where the rule is declared. Cannot be null.\n+     * Please use {@link MockitoJUnit#rule()}.\n      */\n     @Deprecated\n     public MockitoJUnitRule(Object targetTest) {\n         this();\n     }\n \n-    /**\n-     * @return new default MockitoJUnitRule.\n-     */\n-    public static MockitoJUnitRule rule() {\n-        return new MockitoJUnitRule();\n-    }\n-\n     public Statement apply(Statement base, FrameworkMethod method, Object target) {\n         return jUnitRule.apply(base, target);\n     }\n--- /dev/null\n+++ b/src/org/mockito/rules/MockitoJUnit.java\n+package org.mockito.rules;\n+\n+import org.junit.rules.MethodRule;\n+import org.mockito.junit.MockitoJUnitRule;\n+\n+/**\n+ * The MockitoJUnit rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}.\n+ *\n+ * This rule adds following behavior:\n+ * <ul>\n+ *   <li>\n+ *      Initializes mocks annotated with {@link org.mockito.Mock},\n+ *      so that explicit usage of {@link org.mockito.MockitoAnnotations#initMocks(Object)} is not necessary.\n+ *      Mocks are initialized before each test method.\n+ *   <li>\n+ *      validates framework usage after each test method. See javadoc for {@link org.mockito.Mockito#validateMockitoUsage()}.\n+ * </ul>\n+ * Example use:\n+ * <pre class=\"code\"><code class=\"java\">\n+ * public class ExampleTest {\n+ *\n+ *     &#064;Rule\n+ *     public MethodRule mockitoJUnitRule = MockitoJUnit.rule();</b>\n+ *\n+ *     &#064;Mock\n+ *     private List list;\n+ *\n+ *     &#064;Test\n+ *     public void shouldDoSomething() {\n+ *         list.add(100);\n+ *     }\n+ * }\n+ * </code></pre>\n+ */\n+public class MockitoJUnit {\n+\n+    /**\n+     * @return new MockitoJUnitRule.\n+     */\n+    public static MethodRule rule() {\n+        return new MockitoJUnitRule();\n+    }\n+}\n--- a/test/org/mockito/internal/rules/JUnitRuleTest.java\n+++ b/test/org/mockito/internal/rules/JUnitRuleTest.java\n package org.mockito.internal.rules;\n \n-import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runners.model.Statement;\n import org.mockito.InjectMocks;\n \n public class JUnitRuleTest {\n \n-    private JUnitRule jUnitRule;\n-    private InjectTestCase injectTestCase;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        injectTestCase = new InjectTestCase();\n-        jUnitRule = new JUnitRule();\n-    }\n+    private JUnitRule jUnitRule = new JUnitRule();\n+    private InjectTestCase injectTestCase = new InjectTestCase();\n \n     @Test\n-    public void testInject() throws Throwable {\n+    public void shouldInjectIntoTestCase() throws Throwable {\n         jUnitRule.apply(new DummyStatement(), injectTestCase).evaluate();\n         assertNotNull(\"@Mock mock object created\", injectTestCase.getInjected());\n         assertNotNull(\"@InjectMocks object created\", injectTestCase.getInjectInto());\n     }\n \n     @Test\n-    public void testThrowAnException() throws Throwable {\n+    public void shouldRethrowException() throws Throwable {\n         try {\n             jUnitRule.apply(new ExceptionStatement(), injectTestCase).evaluate();\n             fail(\"Should throw exception\");\n     }\n \n     @Test\n-    public void testMockitoValidation() throws Throwable {\n+    public void shouldDetectUnfinishedStubbing() throws Throwable {\n         try {\n             jUnitRule.apply(new UnfinishedStubbingStatement(), injectTestCase).evaluate();\n             fail(\"Should detect invalid Mockito usage\");\n--- /dev/null\n+++ b/test/org/mockitousage/junitrule/InvalidTargetMockitoJUnitRuleTest.java\n+package org.mockitousage.junitrule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRule;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockitousage.junitrule.MockitoJUnitRuleTest.InjectInto;\n+import static org.mockitousage.junitrule.MockitoJUnitRuleTest.Injected;\n+\n+public class InvalidTargetMockitoJUnitRuleTest {\n+\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(\"asdf\");\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void shouldInjectWithInvalidReference() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Test object created\", injectInto);\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/junitrule/MockitoJUnitRuleTest.java\n+package org.mockitousage.junitrule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRule;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MockitoJUnitRuleTest {\n+\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule();\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInjectMocks() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Object created\", injectInto);\n+        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n+\n+    }\n+\n+    public static class Injected {\n+    }\n+\n+    public static class InjectInto {\n+\n+        private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/junitrule/RuleTestWithFactoryMethodTest.java\n+package org.mockitousage.junitrule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.MethodRule;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.rules.MockitoJUnit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleTestWithFactoryMethodTest {\n+\n+    @Rule\n+    public MethodRule mockitoJUnitRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInjectMocks() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Object created\", injectInto);\n+        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n+\n+    }\n+\n+    public static class Injected {\n+    }\n+\n+    public static class InjectInto {\n+\n+        private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/test/org/mockitousage/junitrule/RuleTestWithParameterConstructorTest.java\n+package org.mockitousage.junitrule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRule;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class RuleTestWithParameterConstructorTest {\n+\n+    @Rule\n+    public MockitoJUnitRule mockitoJUnitRule = new MockitoJUnitRule(this);\n+\n+    @Mock\n+    private Injected injected;\n+\n+    @InjectMocks\n+    private InjectInto injectInto;\n+\n+    @Test\n+    public void testInjectMocks() throws Exception {\n+        assertNotNull(\"Mock created\", injected);\n+        assertNotNull(\"Object created\", injectInto);\n+        assertEquals(\"A injected into B\", injected, injectInto.getInjected());\n+\n+    }\n+\n+    public static class Injected {\n+    }\n+\n+    public static class InjectInto {\n+\n+        private Injected injected;\n+\n+        public Injected getInjected() {\n+            return injected;\n+        }\n+    }\n+}", "timestamp": 1418685930, "metainfo": ""}