{"sha": "56d884cc6bc422b699d5d2a24cb6fa4f10611a17", "log": "Updated javadoc, added never() alias  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40392", "commit": "\n--- a/src/org/mockito/Matchers.java\n+++ b/src/org/mockito/Matchers.java\n  * </pre>\n  * <b>Warning:</b>\n  * <p>\n- * When multiple arguments are combined with matchers, all arguments have to be provided by matchers, e.g:\n+ * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n+ * <p>\n+ * E.g: (example shows verification but the same applies to stubbing):\n  * <pre>\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n  *   //above is correct - eq() is also an argument matcher\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n  * <p>\n  * <b>Warning:</b>\n  * <p>\n- * When multiple arguments are combined with matchers, all arguments have to be provided by matchers, e.g:\n+ * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n+ * <p>\n+ * E.g: (example shows verification but the same applies to stubbing):\n  * <pre>\n  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n  *   //above is correct - eq() is also an argument matcher\n     public static VerificationMode times(int wantedNumberOfInvocations) {\n         return VerificationModeImpl.times(wantedNumberOfInvocations);\n     }\n+    \n+    /**\n+     * Alias to times(0)\n+     * <p>\n+     * See {@link Mockito#times(int)}\n+     * <p>\n+     * See examples in javadoc for {@link Mockito} class\n+     * \n+     * @return verification mode\n+     */\n+    public static VerificationMode never() {\n+        return times(0);\n+    }\n }\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n     \n     public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchersCount) {\n         throw new InvalidUseOfMatchersException(join(\n-                \"Invalid use of matchers! - see javadoc for Matchers class.\",\n+                \"Invalid use of argument matchers!\",\n                 expectedMatchersCount + \" matchers expected, \" + recordedMatchersCount + \" recorded.\",\n                 \"Typically this exception occurs when matchers are combined with raw values:\",        \n                 \"    //incorrect:\",\n-                \"    verify(mock).someMethod(anyObject(), \\\"raw String\\\");\",\n+                \"    someMethod(anyObject(), \\\"raw String\\\");\",\n                 \"When using matchers, all arguments have to be provided by matchers.\",\n                 \"For example:\",\n                 \"    //correct:\",\n-                \"    verify(mock).someMethod(anyObject(), eq(\\\"String by matcher\\\"));\"\n+                \"    someMethod(anyObject(), eq(\\\"String by matcher\\\"));\",\n+                \"\",\n+                \"For more info see javadoc for Matchers class.\"\n         ));\n     }    \n \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n  */\n package org.mockitousage.stubbing;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-import static org.mockito.Matchers.isA;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.stub;\n-import static org.mockito.Mockito.stubVoid;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyNoMoreInteractions;\n-import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n+import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.InvocationDiffersFromActual;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n         } catch (NoInteractionsWanted e) {}\n     }\n     \n+    class Base {}\n+    class Sub extends Base {}\n+\n+    interface Generic {\n+        List<Base> getList();\n+    }\n+    \n+    @Test\n+    public void shouldAllowStubbingWithSubtypes() throws Exception {\n+        Generic mockTwo = mock(Generic.class);\n+        \n+        List<Sub> subs = null;\n+        //TODO can I somehow avoid a cast here:\n+        stub(mockTwo.getList()).toReturn((List) subs);\n+    }\n+    \n     @Test\n     public void shouldStubbingWithThrowableFailVerification() {\n         stub(mock.simpleMethod(\"one\")).toThrow(new RuntimeException());\n--- a/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n+++ b/test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java\n \n         verify(mock, times(2)).add(\"test\");\n     }\n+    \n+    @Test\n+    public void shouldAllowVerifyingInteractionNeverHappened() throws Exception {\n+        mock.add(\"one\");\n+\n+        verify(mock, never()).add(\"two\");\n+        verify(mock, never()).clear();\n+        \n+        try {\n+            verify(mock, never()).add(\"one\");\n+            fail();\n+        } catch (TooManyActualInvocations e) {\n+            e.printStackTrace();\n+            assertThat(e, messageContains(\"Wanted 0 times but was 1\"));\n+        }\n+    }\n }", "timestamp": 1203632377, "metainfo": ""}