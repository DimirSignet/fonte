{"sha": "470659bb04a2837628dba1616bd1a14640e4967a", "log": "simplified zeroInteractionsWanted and noMoreInteractionsWanted  --HG-- extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40194", "commit": "\n--- a/src/org/mockito/Mockito.java\n+++ b/src/org/mockito/Mockito.java\n \t}\n \n     public static void verifyZeroInteractions(Object ... mocks) {\n-        assertMocksNotEmpty(mocks);\n-        mockingProgress.validateState();\n-        for (Object mock : mocks) {\n-            MockUtil.getControl(mock).verifyZeroInteractions();\n-        }\n+        verifyNoMoreInteractions(mocks);\n     }\n     \n     private static void assertMocksNotEmpty(Object[] mocks) {\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n \n     public void noMoreInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n         UndesiredInvocation cause = buildUndesiredInvocationCause(actualInvocationStackTrace, \"Undesired invocation:\", undesired);\n-        throw new VerificationError(join(\"No more interactions wanted\"), cause);\n+        throw new VerificationError(join(\"No interactions wanted\"), cause);\n     }\n     \n-    public void zeroInteractionsWanted(String undesired, HasStackTrace actualInvocationStackTrace) {\n-        UndesiredInvocation cause = buildUndesiredInvocationCause(actualInvocationStackTrace, \"Undesired invocation:\", undesired);\n-        throw new VerificationError(join(\"Zero interactions wanted\"), cause);\n-    }\n-\n     private UndesiredInvocation buildUndesiredInvocationCause(HasStackTrace actualInvocationStackTrace, String ... messageLines) {\n         UndesiredInvocation cause = new UndesiredInvocation(join(messageLines));\n         cause.setStackTrace(actualInvocationStackTrace.getStackTrace());\n--- a/src/org/mockito/internal/MockControl.java\n+++ b/src/org/mockito/internal/MockControl.java\n         verifyingRecorder.verifyNoMoreInteractions();\n     }\n     \n-    public void verifyZeroInteractions() {\n-        verifyingRecorder.verifyZeroInteractions();\n-    }\n-\n     public void andReturn(T value) {\n         verifyingRecorder.eraseLastInvocation();\n         stubber.addReturnValue(value);\n--- a/src/org/mockito/internal/progress/VerificationMode.java\n+++ b/src/org/mockito/internal/progress/VerificationMode.java\n import org.mockito.exceptions.parents.MockitoException;\n \n public class VerificationMode {\n-\n+    \n+    enum Verification { EXPLICIT, NO_MORE_WANTED };\n+    \n     private final Integer wantedInvocationCount;\n     private final List<Object> mocksToBeVerifiedInSequence;\n+    private final Verification verification;\n     \n-    //TODO messy\n-\n-    private VerificationMode(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedInSequence) {\n+    private VerificationMode(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedInSequence, Verification verification) {\n         if (wantedNumberOfInvocations != null && wantedNumberOfInvocations.intValue() < 0) {\n             throw new MockitoException(\"Negative value is not allowed here\");\n         }\n         this.wantedInvocationCount = wantedNumberOfInvocations;\n         this.mocksToBeVerifiedInSequence = mocksToBeVerifiedInSequence;\n+        this.verification = verification;\n     }\n     \n     public static VerificationMode atLeastOnce() {\n-        return new VerificationMode(null, Collections.emptyList());\n+        return new VerificationMode(null, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n     public static VerificationMode times(int wantedNumberOfInvocations) {\n-        return new VerificationMode(wantedNumberOfInvocations, Collections.emptyList());\n+        return new VerificationMode(wantedNumberOfInvocations, Collections.emptyList(), Verification.EXPLICIT);\n     }\n \n     public static VerificationMode strict(Integer wantedNumberOfInvocations, List<Object> mocksToBeVerifiedStrictly) {\n-        return new VerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedStrictly);\n+        return new VerificationMode(wantedNumberOfInvocations, mocksToBeVerifiedStrictly, Verification.EXPLICIT);\n     }\n     \n+    public static VerificationMode noMoreInteractions() {\n+        return new VerificationMode(null, null, Verification.NO_MORE_WANTED);\n+    }\n+\n     /**\n      * Don't use VerificationMode class directly. \n      * <p>\n--- a/src/org/mockito/internal/verification/VerifyingRecorder.java\n+++ b/src/org/mockito/internal/verification/VerifyingRecorder.java\n package org.mockito.internal.verification;\n \n import java.util.LinkedList;\n-import static org.mockito.internal.progress.VerificationMode.*;\n import java.util.List;\n \n import org.mockito.exceptions.Reporter;\n     public List<Invocation> getRegisteredInvocations() {\n         return registeredInvocations;\n     }\n-\n+    \n     public void verify(InvocationMatcher wanted, VerificationMode mode) {\n         List<Invocation> invocations = getInvocationsForEvaluation(mode);\n+        //TODO should not construct calculator\n         InvocationsCalculator calculator = new InvocationsCalculator(invocations);\n         \n         for (Verifier verifier : verifiers) {\n     }\n     \n     public void verifyNoMoreInteractions() {\n-        //TODO refactor to have single verify method\n-        InvocationsCalculator calculator1 = new InvocationsCalculator(getInvocationsForEvaluation(times(0)));\n-        InvocationsCalculator calculator = calculator1;\n+        InvocationsCalculator calculator = new InvocationsCalculator(registeredInvocations);\n         Invocation unverified = calculator.getFirstUnverified();\n         if (unverified != null) {\n             reporter.noMoreInteractionsWanted(unverified.toString(), unverified.getStackTrace());\n         }\n     }\n-    \n-    public void verifyZeroInteractions() {\n-        //TODO VerificationMode.times(0) should be explicit\n-        InvocationsCalculator calculator1 = new InvocationsCalculator(getInvocationsForEvaluation(times(0)));\n-        InvocationsCalculator calculator = calculator1;\n-        Invocation unverified = calculator.getFirstUnverified();\n-        if (unverified != null) {\n-            reporter.zeroInteractionsWanted(unverified.toString(), unverified.getStackTrace());\n-        }\n-    }\n }\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n         } catch (VerificationError e) {\n             String expectedMessage = \n                     \"\\n\" +\n-            \t\t\"No more interactions wanted\";\n+            \t\t\"No interactions wanted\";\n             assertEquals(expectedMessage, e.getMessage());         \n \n             assertEquals(e.getCause().getClass(), UndesiredInvocation.class);\n         } catch (VerificationError e) {\n             String expected = \n                     \"\\n\" +\n-                    \"Zero interactions wanted\";\n+                    \"No interactions wanted\";\n \n             assertEquals(e.getMessage(), expected);\n             ", "timestamp": 1197661543, "metainfo": ""}