{"sha": "c2177203edea98f9d6a1de5df5a6a3c86419c681", "log": "changed the name of the exception to be more consistent  --HG-- rename : src/org/mockito/exceptions/verification/ArgumentsAreDifferentException.java => src/org/mockito/exceptions/verification/ArgumentsAreDifferent.java extra : convert_revision : svn%3Aaa2aecf3-ea3e-0410-9d70-716747e7c967/trunk%40465", "commit": "\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n import org.mockito.exceptions.misusing.NotAMockException;\n import org.mockito.exceptions.misusing.UnfinishedStubbingException;\n import org.mockito.exceptions.misusing.UnfinishedVerificationException;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n         \n         cause.setStackTrace(actualStackTrace.getStackTrace());\n         \n-        throw new ArgumentsAreDifferentException(join(\n+        throw new ArgumentsAreDifferent(join(\n                 \"Argument(s) are different!\",\n                 \"    \" + wanted.getMethodName(),\n                 \"All wanted arguments:\",\n--- /dev/null\n+++ b/src/org/mockito/exceptions/verification/ArgumentsAreDifferent.java\n+/*\n+ * Copyright (c) 2007 Mockito contributors\n+ * This program is made available under the terms of the MIT License.\n+ */\n+package org.mockito.exceptions.verification;\n+\n+import org.mockito.exceptions.base.MockitoAssertionError;\n+\n+public class ArgumentsAreDifferent extends MockitoAssertionError {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public ArgumentsAreDifferent(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n--- a/test/org/mockito/DecamelizerTest.java\n+++ b/test/org/mockito/DecamelizerTest.java\n public class DecamelizerTest extends TestBase {\n     \n     @Test\n-    public void shouldDecamelize() throws Exception {\n+    public void shouldProduceDecentDescription() throws Exception {\n         assertEquals(\"Sentence with strong language\", decamelizeMatcher(\"SentenceWithStrongLanguage\"));\n         assertEquals(\"W e i r d o 1\", decamelizeMatcher(\"WEIRDO1\"));\n         assertEquals(\"_\", decamelizeMatcher(\"_\"));\n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n \n         try {\n             verify(mock).simpleMethod(999);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"firstChunk\"));\n         }\n     }\n         try {\n             verify(mock, atLeastOnce()).simpleMethod(999);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"thirdChunk\"));\n         }\n     }   \n--- a/test/org/mockitousage/PointingStackTraceToActualInvocationTest.java\n+++ b/test/org/mockitousage/PointingStackTraceToActualInvocationTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.TooLittleActualInvocations;\n \n         try {\n             verify(mock).simpleMethod(999);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"first\"));\n         }\n     }\n         try {\n             verify(mock, atLeastOnce()).simpleMethod(999);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e.getCause(), hasFirstMethodInStackTrace(\"third\"));\n         }\n     }   \n--- a/test/org/mockitousage/ReflectionMatchersTest.java\n+++ b/test/org/mockitousage/ReflectionMatchersTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n \n @SuppressWarnings(\"all\")\n public class ReflectionMatchersTest extends TestBase {\n         verify(mock).run(refEq(wanted));\n     }\n     \n-    @Test(expected=ArgumentsAreDifferentException.class)\n+    @Test(expected=ArgumentsAreDifferent.class)\n     public void shouldNotMatchWhenFieldValuesDiffer() throws Exception {\n         Child wanted = new Child(1, \"foo\", 2, \"bar XXX\");\n         verify(mock).run(refEq(wanted));\n     }\n     \n-    @Test(expected=ArgumentsAreDifferentException.class)\n+    @Test(expected=ArgumentsAreDifferent.class)\n     public void shouldNotMatchAgain() throws Exception {\n         Child wanted = new Child(1, \"foo\", 999, \"bar\");\n         verify(mock).run(refEq(wanted));\n     }\n     \n-    @Test(expected=ArgumentsAreDifferentException.class)\n+    @Test(expected=ArgumentsAreDifferent.class)\n     public void shouldNotMatchYetAgain() throws Exception {\n         Child wanted = new Child(1, \"XXXXX\", 2, \"bar\");\n         verify(mock).run(refEq(wanted));\n     }\n     \n-    @Test(expected=ArgumentsAreDifferentException.class)\n+    @Test(expected=ArgumentsAreDifferent.class)\n     public void shouldNotMatch() throws Exception {\n         Child wanted = new Child(234234, \"foo\", 2, \"bar\");\n         verify(mock).run(refEq(wanted));\n--- a/test/org/mockitousage/StackTrackeChangingTest.java\n+++ b/test/org/mockitousage/StackTrackeChangingTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n \n public class StackTrackeChangingTest extends TestBase {\n     \n         try {\n             verifySimpleMethodOnAMock();\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, hasMethodInStackTraceAt(0, \"verifySimpleMethodOnAMock\"));\n             assertThat(e, hasMethodInStackTraceAt(1, \"shouldShowActualInvocationAsExceptionCause\"));\n             assertThat(e.getCause(), hasMethodInStackTraceAt(0, \"simpleMethodOnAMock\"));\n--- a/test/org/mockitousage/UsingVarargsTest.java\n+++ b/test/org/mockitousage/UsingVarargsTest.java\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n \n public class UsingVarargsTest extends TestBase {\n \n         try {\n             verify(mock).withStringVarargs(2, \"1\", \"2\", \"79\", \"4\");\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n     }\n \n     @Test\n         try {\n             verify(mock).withBooleanVarargs(3, true, true, true, true);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n     }\n }\n--- a/test/org/mockitousage/matchers/CustomMatchersTest.java\n+++ b/test/org/mockitousage/matchers/CustomMatchersTest.java\n import org.mockito.ArgumentMatcher;\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockitousage.IMethods;\n \n public class CustomMatchersTest extends TestBase {\n     }\n     \n     @Test\n-    public void shouldCustomMatcherPrintMessageBasedOnName() {\n+    public void shouldCustomMatcherPrintDescriptionBasedOnName() {\n         mock.simpleMethod(\"foo\");\n \n         try {\n             verify(mock).simpleMethod(containsTest());\n             fail();\n-            //TODO it should be ArgumentsAreDifferent not ArgumentsAreDifferentException !!!!!!!!!!\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"1st: String that contains xxx\"));\n             assertThat(e, causeMessageContains(\"1st: \\\"foo\\\"\"));\n         }\n             return arg.contains(\"xxx\");\n         }\n     }\n+    \n+    @Test\n+    public void shouldAnonymousCustomMatcherPrintDefaultDescription() {\n+        mock.simpleMethod(\"foo\");\n+\n+        try {\n+            verify(mock).simpleMethod(argThat(new ArgumentMatcher<Object>() {\n+                @Override public boolean matches(Object argument) {\n+                    return false;\n+                }}));\n+            fail();\n+        } catch (ArgumentsAreDifferent e) {\n+            assertThat(e, messageContains(\"1st: <custom argument matcher>\"));\n+            assertThat(e, causeMessageContains(\"1st: \\\"foo\\\"\"));\n+        }\n+    }\n }\n--- a/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n+++ b/test/org/mockitousage/matchers/HamcrestMatchersTest.java\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockitousage.IMethods;\n \n @SuppressWarnings(\"unchecked\")\n         try {\n             verify(mock).simpleMethod(argThat(new ContainsX()));\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"contains 'X'\"));\n         }\n     }\n--- a/test/org/mockitousage/sample/MockitoSampleTest.java\n+++ b/test/org/mockitousage/sample/MockitoSampleTest.java\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.ArgumentMatcher;\n import org.mockito.InOrder;\n import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n     \n     @Mock private ArticleCalculator mockCalculator;\n     @Mock private ArticleDatabase mockDatabase;\n+    \n     \n     private ArticleManager articleManager;\n     \n--- a/test/org/mockitousage/stubbing/BasicStubbingTest.java\n+++ b/test/org/mockitousage/stubbing/BasicStubbingTest.java\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockitousage.IMethods;\n \n         try {\n             verify(mock).simpleMethod(\"one\");\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n         \n         try {\n             verify(mock).simpleMethod(\"two\");\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n         \n         try {\n             verifyNoMoreInteractions(mock);\n--- a/test/org/mockitousage/verification/BasicVerificationTest.java\n+++ b/test/org/mockitousage/verification/BasicVerificationTest.java\n import org.junit.Test;\n import org.mockito.TestBase;\n import org.mockito.MockitoAnnotations.Mock;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n import org.mockito.exceptions.verification.TooManyActualInvocations;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n         try {\n             verify(mock).add(\"bar\");\n             fail();\n-        } catch (ArgumentsAreDifferentException expected) {}\n+        } catch (ArgumentsAreDifferent expected) {}\n     }\n \n     @Test\n--- a/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java\n import org.mockito.exceptions.cause.TooLittleInvocations;\n import org.mockito.exceptions.cause.UndesiredInvocation;\n import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.VerifcationInOrderFailure;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n         try {\n             inOrder.verify(one).simpleMethod(999);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             String expected = \n                     \"\\n\" +\n                     \"Arguments are different!\" +\n--- a/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n+++ b/test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java\n import org.mockito.exceptions.cause.ActualArgumentsAreDifferent;\n import org.mockito.exceptions.verification.NeverWantedButInvoked;\n import org.mockito.exceptions.verification.NoInteractionsWanted;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n         try {\n             verify(mock).twoArgumentMethod(1, 1000);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             String expected =\n                     \"\\n\" +\n                     \"Argument(s) are different!\" +\n         try {\n             verify(mock).simpleMethod(\"test\");\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"    1st: \\\"test\\\"\"));\n             assertThat(e, causeMessageContains(\"    <NO ARGUMENTS>\"));\n         }\n         try {\n             verify(mock).twoArgumentMethod(3, 1000);\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"1st: 3\"));\n             assertThat(e, messageContains(\"2nd: 1000\"));\n             assertThat(e, causeMessageContains(\"1st: 3\"));\n         try {\n             verify(mock).oneArray(aryEq(new boolean[] { false, false, false }));\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"[false, false, false]\"));\n             assertThat(e, causeMessageContains(\"[true, false, false]\"));\n         }\n         try {\n             verify(mock).varargsString(10, \"two\", \"one\", \"three\");\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"1st: 10\"));\n             assertThat(e, messageContains(\"2nd: \\\"two\\\"\"));\n             assertThat(e, messageContains(\"3rd: \\\"one\\\"\"));\n         try {\n             verify(mock).simpleMethod(matches(\"burrito from Exmouth\"));\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, messageContains(\"matches(\\\"burrito from Exmouth\\\")\"));\n             assertThat(e, causeMessageContains(\"\\\"foo\\\"\"));\n         }\n         try {\n             verify(mock).simpleMethod(\"test\");\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {\n+        } catch (ArgumentsAreDifferent e) {\n             assertThat(e, causeMessageContains(\"1st: null\"));\n             assertThat(e, causeMessageContains(\"2nd: null\"));\n         }\n--- a/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n+++ b/test/org/mockitousage/verification/VerificationUsingMatchersTest.java\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.mockito.TestBase;\n-import org.mockito.exceptions.verification.ArgumentsAreDifferentException;\n+import org.mockito.exceptions.verification.ArgumentsAreDifferent;\n import org.mockito.exceptions.verification.WantedButNotInvoked;\n import org.mockitousage.IMethods;\n \n         try {\n             verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n \n         mock.threeArgumentMethod(8, new Object(), \"01234\");\n         \n         try {\n             verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n         \n         mock.threeArgumentMethod(8, \"\", \"no match\");\n \n         try {\n             verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(\"123\"));\n             fail();\n-        } catch (ArgumentsAreDifferentException e) {}\n+        } catch (ArgumentsAreDifferent e) {}\n         \n         mock.threeArgumentMethod(8, \"\", \"123\");\n         ", "timestamp": 1205696440, "metainfo": ""}