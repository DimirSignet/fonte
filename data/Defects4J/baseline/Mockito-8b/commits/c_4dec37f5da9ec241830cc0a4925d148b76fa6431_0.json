{"sha": "4dec37f5da9ec241830cc0a4925d148b76fa6431", "log": "issue 304 : preliminary implementation of the MockitoTestNGListener, tests where lost in the transfer process  --HG-- branch : issue 304 : TestNG integration", "commit": "\n--- /dev/null\n+++ b/subprojects/testng/src/main/java/MockitoTestNGListener.java\n+package org.mockito.testng;\n+\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n+import org.mockito.exceptions.base.MockitoException;\n+import org.testng.IInvokedMethod;\n+import org.testng.IInvokedMethodListener;\n+import org.testng.ITestContext;\n+import org.testng.ITestListener;\n+import org.testng.ITestNGListener;\n+import org.testng.ITestNGMethod;\n+import org.testng.ITestResult;\n+import org.testng.annotations.Listeners;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Mockito TestNG Listener, this listener adds the following behavior to your test :\n+ * <ul>\n+ *   <li>\n+ *      Initializes mocks annotated with {@link Mock},\n+ *      so that <strong>explicit usage of {@link org.mockito.MockitoAnnotations#initMocks(Object)} is not necessary</strong>.\n+ *      Mocks are initialized before each test method.\n+ *   <li>\n+ *      validates framework usage after each test method. See javadoc for {@link Mockito#validateMockitoUsage()}.\n+ * </ul>\n+ *\n+ * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.\n+ * Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.\n+ * See javadoc for {@link Mockito#validateMockitoUsage()}.\n+ * <p>\n+ * Read more about &#064;Mock annotation in javadoc for {@link MockitoAnnotations}\n+ * <pre class=\"code\"><code class=\"java\">\n+ * <b>&#064;Listeners(org.mockito.testng.MockitoTestNGListener.class)</b>\n+ * public class ExampleTest {\n+ *\n+ *     &#064;Mock\n+ *     private List list;\n+ *\n+ *     &#064;Test\n+ *     public void shouldDoSomething() {\n+ *         list.add(100);\n+ *     }\n+ * }\n+ * </code></pre>\n+ */\n+public class MockitoTestNGListener implements ITestListener, IInvokedMethodListener {\n+\n+    /**\n+     * Init fields with annotated fields for instances that are annotated with the TestNG listener\n+     * {@link MockitoTestNGListener}.\n+     *\n+     * @param context TestContext\n+     */\n+    public void onStart(ITestContext context) {\n+        if(context.getAllTestMethods() == null) {\n+            return;\n+        }\n+\n+        for (Object instance : allTestInstancesWithMockitoListener(context.getAllTestMethods())) {\n+            MockitoAnnotations.initMocks(instance);\n+        }\n+    }\n+\n+    public void beforeInvocation(IInvokedMethod method, ITestResult testResult) { }\n+\n+\n+    /**\n+     * Validate Mockito's state then reset the mocks.\n+     *\n+     * @param method The test method.\n+     * @param testResult TestNG result.\n+     */\n+    public void afterInvocation(IInvokedMethod method, ITestResult testResult) {\n+        resetMocks(testResult.getInstance());\n+        Mockito.validateMockitoUsage();\n+    }\n+\n+    private void resetMocks(Object instance) {\n+        Mockito.reset(instanceMocksOf(instance).toArray());\n+    }\n+\n+    private Set<Object> instanceMocksOf(Object instance) {\n+        Set<Object> instanceMocks = new HashSet<Object>();\n+        Field[] declaredFields = instance.getClass().getDeclaredFields();\n+        for (Field declaredField : declaredFields) {\n+            if(declaredField.isAnnotationPresent(Mock.class) || declaredField.isAnnotationPresent(Spy.class)) {\n+                declaredField.setAccessible(true);\n+                try {\n+                    Object fieldValue = declaredField.get(instance);\n+                    if (fieldValue != null) {\n+                        instanceMocks.add(fieldValue);\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new MockitoException(\"Could not access field \" + declaredField.getName());\n+                }\n+            }\n+        }\n+        return instanceMocks;\n+    }\n+\n+    private Set<Object> allTestInstancesWithMockitoListener(ITestNGMethod[] testMethods) {\n+        Set<Object> testInstancesWithMockitoListener = new HashSet<Object>();\n+        for (Object testInstance : allTestInstances(testMethods)) {\n+            if(hasMockitoTestNGListener(testInstance)) {\n+                testInstancesWithMockitoListener.add(testInstance);\n+            }\n+        }\n+        return testInstancesWithMockitoListener;\n+    }\n+\n+    private boolean hasMockitoTestNGListener(Object testInstance) {\n+        Listeners listeners = testInstance.getClass().getAnnotation(Listeners.class);\n+        if (listeners == null) {\n+            return false;\n+        }\n+\n+        for (Class<? extends ITestNGListener> listenerClass : listeners.value()) {\n+            if (MockitoTestNGListener.class == listenerClass) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private Set<Object> allTestInstances(ITestNGMethod[] testMethods) {\n+        Set<Object> allTestInstances = new HashSet<Object>();\n+        for (ITestNGMethod testMethod : testMethods) {\n+            allTestInstances.add(testMethod.getInstance());\n+        }\n+        return allTestInstances;\n+    }\n+\n+    public void onTestStart(ITestResult result) { }\n+    public void onTestSuccess(ITestResult result) { }\n+    public void onTestFailure(ITestResult result) { }\n+    public void onTestSkipped(ITestResult result) { }\n+    public void onTestFailedButWithinSuccessPercentage(ITestResult result) { }\n+    public void onFinish(ITestContext context) { }\n+}", "timestamp": 1331136793, "metainfo": ""}