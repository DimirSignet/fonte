{"sha": "fc76f162a3395f5443d369e3d75996167cea3b43", "log": "Add ReadableInstant.Property.toInterval() method   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DurationField;\n+import org.joda.time.Interval;\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadablePartial;\n \n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n+ * @author Mike Schrag\n  * @since 1.0\n  */\n public abstract class AbstractReadableInstantFieldProperty implements Serializable {\n      */\n     public long remainder() {\n         return getField().remainder(getMillis());\n+    }\n+\n+    /**\n+     * Returns the interval that represents the range of the minimum\n+     * and maximum values of this field.\n+     * <p>\n+     * For example, <code>datetime.monthOfYear().toInterval()</code>\n+     * will return an interval over the whole month.\n+     *\n+     * @return the interval of this field\n+     * @since 1.2\n+     */\n+    public Interval toInterval() {\n+        DateTimeField field = getField();\n+        long start = field.roundFloor(getMillis());\n+        long end = field.add(start, 1);\n+        Interval interval = new Interval(start, end);\n+        return interval;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n  * This class is a Junit unit test for DateTime.\n  *\n  * @author Stephen Colebourne\n+ * @author Mike Schrag\n  */\n public class TestDateMidnight_Properties extends TestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n         assertEquals(null, test.dayOfWeek().getLeapDurationField());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testPropertyToIntervalYearOfEra() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.yearOfEra().toInterval();\n+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYearOfCentury() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.yearOfCentury().toInterval();\n+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYear() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.year().toInterval();\n+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMonthOfYear() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.monthOfYear().toInterval();\n+      assertEquals(new DateMidnight(2004, 6, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2004, 7, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalDayOfMonth() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.dayOfMonth().toInterval();\n+      assertEquals(new DateMidnight(2004, 6, 9), testInterval.getStart());\n+      assertEquals(new DateMidnight(2004, 6, 10), testInterval.getEnd());\n+\n+      DateMidnight febTest = new DateMidnight(2004, 2, 29);\n+      Interval febTestInterval = febTest.dayOfMonth().toInterval();\n+      assertEquals(new DateMidnight(2004, 2, 29), febTestInterval.getStart());\n+      assertEquals(new DateMidnight(2004, 3, 1), febTestInterval.getEnd());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n  * This class is a Junit unit test for DateTime.\n  *\n  * @author Stephen Colebourne\n+ * @author Mike Schrag\n  */\n public class TestDateTime_Properties extends TestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n         assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testPropertyToIntervalYearOfEra() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfEra().toInterval();\n+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYearOfCentury() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfCentury().toInterval();\n+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYear() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.year().toInterval();\n+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMonthOfYear() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.monthOfYear().toInterval();\n+      assertEquals(new DateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalDayOfMonth() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.dayOfMonth().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd());\n+\n+      DateTime febTest = new DateTime(2004, 2, 29, 13, 23, 43, 53);\n+      Interval febTestInterval = febTest.dayOfMonth().toInterval();\n+      assertEquals(new DateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart());\n+      assertEquals(new DateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalHourOfDay() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.hourOfDay().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd());\n+\n+      DateTime midnightTest = new DateTime(2004, 6, 9, 23, 23, 43, 53);\n+      Interval midnightTestInterval = midnightTest.hourOfDay().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMinuteOfHour() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.minuteOfHour().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalSecondOfMinute() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.secondOfMinute().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMillisOfSecond() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.millisOfSecond().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java\n  * This class is a Junit unit test for DateTime.\n  *\n  * @author Stephen Colebourne\n+ * @author Mike Schrag\n  */\n public class TestMutableDateTime_Properties extends TestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n         assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testPropertyToIntervalYearOfEra() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfEra().toInterval();\n+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalYearOfCentury() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfCentury().toInterval();\n+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalYear() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.year().toInterval();\n+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalMonthOfYear() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.monthOfYear().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalDayOfMonth() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.dayOfMonth().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+\n+      MutableDateTime febTest = new MutableDateTime(2004, 2, 29, 13, 23, 43, 53);\n+      Interval febTestInterval = febTest.dayOfMonth().toInterval();\n+      assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 2, 29, 13, 23, 43, 53), febTest);\n+    }\n+\n+    public void testPropertyToIntervalHourOfDay() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.hourOfDay().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+\n+      MutableDateTime midnightTest = new MutableDateTime(2004, 6, 9, 23, 23, 43, 53);\n+      Interval midnightTestInterval = midnightTest.hourOfDay().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 23, 23, 43, 53), midnightTest);\n+    }\n+\n+    public void testPropertyToIntervalMinuteOfHour() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.minuteOfHour().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalSecondOfMinute() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.secondOfMinute().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalMillisOfSecond() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.millisOfSecond().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n }", "timestamp": 1125860398, "metainfo": ""}