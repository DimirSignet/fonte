{"sha": "ad19bbd57bbe17da2d9bb23ad119b75583ede79a", "log": "Javadoc   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n \n /**\n  * Identifies a field, such as year or minuteOfHour, in a chronology-neutral way.\n+ * <p>\n+ * A field type defines the type of the field, such as hourOfDay.\n+ * If does not directly enable any calculations, however it does provide a\n+ * {@link #getField(Chronology)} method that returns the actual calculation engine\n+ * for a particular chronology.\n+ * It also provides access to the related {@link DurationFieldType}s.\n+ * <p>\n+ * Instances of <code>DateTimeFieldType</code> are singletons.\n+ * They can be compared using <code>==</code>.\n+ * <p>\n+ * If required, you can create your own field, for example a quarterOfYear.\n+ * You must create a subclass of <code>DateTimeFieldType</code> that defines the field type.\n+ * This class returns the actual calculation engine from {@link #getField(Chronology)}.\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n--- a/JodaTime/src/java/org/joda/time/DurationFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationFieldType.java\n import java.io.Serializable;\n \n /**\n- * Identifies a field, such as year or minutes, in a chronology-neutral way.\n+ * Identifies a duration field, such as years or minutes, in a chronology-neutral way.\n+ * <p>\n+ * A duration field type defines the type of the field, such as hours.\n+ * If does not directly enable any calculations, however it does provide a\n+ * {@link #getField(Chronology)} method that returns the actual calculation engine\n+ * for a particular chronology.\n+ * <p>\n+ * Instances of <code>DurationFieldType</code> are singletons.\n+ * They can be compared using <code>==</code>.\n+ * <p>\n+ * If required, you can create your own field, for example a quarters.\n+ * You must create a subclass of <code>DurationFieldType</code> that defines the field type.\n+ * This class returns the actual calculation engine from {@link #getField(Chronology)}.\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n      * Milliseconds are not output.\n      * Note that the ISO8601 standard actually indicates weeks should not\n      * be shown if any other field is present and vice versa.\n+     * \n+     * @return the formatter\n      */\n     public PeriodFormatter standard() {\n         if (iStandard == null) {\n     }\n \n     /**\n-     * PyyyymmddThhmmss\n+     * The alternate ISO format, PyyyymmddThhmmss, which excludes weeks.\n+     * <p>\n+     * Even if weeks are present in the period, they are not output.\n+     * Fractional seconds (milliseconds) will appear if required.\n+     * \n+     * @return the formatter\n      */\n     public PeriodFormatter alternate() {\n         if (iAlternate == null) {\n     }\n \n     /**\n-     * Pyyyy-mm-ddThh:mm:ss\n+     * The alternate ISO format, Pyyyy-mm-ddThh:mm:ss, which excludes weeks.\n+     * <p>\n+     * Even if weeks are present in the period, they are not output.\n+     * Fractional seconds (milliseconds) will appear if required.\n+     * \n+     * @return the formatter\n      */\n     public PeriodFormatter alternateExtended() {\n         if (iAlternateExtended == null) {\n     }\n \n     /**\n-     * PyyyyWwwddThhmmss\n+     * The alternate ISO format, PyyyyWwwddThhmmss, which excludes months.\n+     * <p>\n+     * Even if months are present in the period, they are not output.\n+     * Fractional seconds (milliseconds) will appear if required.\n+     * \n+     * @return the formatter\n      */\n     public PeriodFormatter alternateWithWeeks() {\n         if (iAlternateWithWeeks == null) {\n     }\n \n     /**\n-     * Pyyyy-Www-ddThh:mm:ss\n+     * The alternate ISO format, Pyyyy-Www-ddThh:mm:ss, which excludes months.\n+     * <p>\n+     * Even if months are present in the period, they are not output.\n+     * Fractional seconds (milliseconds) will appear if required.\n+     * \n+     * @return the formatter\n      */\n     public PeriodFormatter alternateExtendedWithWeeks() {\n         if (iAlternateExtendedWihWeeks == null) {", "timestamp": 1094248232, "metainfo": ""}