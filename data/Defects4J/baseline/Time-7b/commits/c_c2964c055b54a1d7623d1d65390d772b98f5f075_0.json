{"sha": "c2964c055b54a1d7623d1d65390d772b98f5f075", "log": "Test parsing long fractions  ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testFormat_fractionOfSecondLong() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"SSSSSS\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"040000\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"040000\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"040000\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFormat_zoneText() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         DateTimeFormatter f = DateTimeFormat.forPattern(\"z\").withLocale(Locale.UK);\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(expect, result);\n     }\n \n+    public void testParseMillis_fractionOfSecondLong() {\n+        DateTimeFormatter f = new DateTimeFormatterBuilder()\n+            .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)\n+                .toFormatter().withZone(DateTimeZone.UTC);\n+        assertEquals(10512, f.parseMillis(\"10.5123456\"));\n+        assertEquals(10512, f.parseMillis(\"10.512999\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     // Ensure time zone name switches properly at the zone DST transition.\n     public void testZoneNameNearTransition() {\n         DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);", "timestamp": 1153945049, "metainfo": ""}