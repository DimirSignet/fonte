{"sha": "034147af280e4f033c078b6feb0a5669830cb564", "log": "Add withXxx methods to DateTime/DateMidnight  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return new Interval(start, end, chrono);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the era field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * era changed.\n+     *\n+     * @param era  the era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withEra(int era) {\n+        return withMillis(getChronology().era().set(getMillis(), era));\n+    }\n+\n+    /**\n+     * Sets the century of era field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * century of era changed.\n+     *\n+     * @param centuryOfEra  the centurey of era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withCenturyOfEra(int centuryOfEra) {\n+        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));\n+    }\n+\n+    /**\n+     * Sets the year of era field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year of era changed.\n+     *\n+     * @param yearOfEra  the year of era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withYearOfEra(int yearOfEra) {\n+        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));\n+    }\n+\n+    /**\n+     * Sets the year of century field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year of century changed.\n+     *\n+     * @param yearOfCentury  the year of century to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withYearOfCentury(int yearOfCentury) {\n+        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));\n+    }\n+\n+    /**\n+     * Sets the year field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year changed.\n+     *\n+     * @param year  the year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withYear(int year) {\n+        return withMillis(getChronology().year().set(getMillis(), year));\n+    }\n+\n+    /**\n+     * Sets the weekyear field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * weekyear changed.\n+     *\n+     * @param weekyear  the weekyear to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withWeekyear(int weekyear) {\n+        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));\n+    }\n+\n+    /**\n+     * Sets the month of year field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * month of year changed.\n+     *\n+     * @param monthOfYear  the month of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withMonthOfYear(int monthOfYear) {\n+        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));\n+    }\n+\n+    /**\n+     * Sets the week of weekyear field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * week of weekyear changed.\n+     *\n+     * @param weekOfWeekyear  the week of weekyear to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withWeekOfWeekyear(int weekOfWeekyear) {\n+        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));\n+    }\n+\n+    /**\n+     * Sets the day of year field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of year changed.\n+     *\n+     * @param dayOfYear  the day of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withDayOfYear(int dayOfYear) {\n+        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));\n+    }\n+\n+    /**\n+     * Sets the day of month field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of month changed.\n+     *\n+     * @param dayOfMonth  the day of month to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withDayOfMonth(int dayOfMonth) {\n+        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));\n+    }\n+\n+    /**\n+     * Sets the day of week field in a copy of this DateMidnight, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateMidnight is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of week changed.\n+     *\n+     * @param dayOfWeek  the day of week to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateMidnight withDayOfWeek(int dayOfWeek) {\n+        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));\n+    }\n+\n     // Date properties\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return new TimeOfDay(getMillis(), getChronology());\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the era field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * era changed.\n+     *\n+     * @param era  the era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withEra(int era) {\n+        return withMillis(getChronology().era().set(getMillis(), era));\n+    }\n+\n+    /**\n+     * Sets the century of era field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * century of era changed.\n+     *\n+     * @param centuryOfEra  the centurey of era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withCenturyOfEra(int centuryOfEra) {\n+        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));\n+    }\n+\n+    /**\n+     * Sets the year of era field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year of era changed.\n+     *\n+     * @param yearOfEra  the year of era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withYearOfEra(int yearOfEra) {\n+        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));\n+    }\n+\n+    /**\n+     * Sets the year of century field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year of century changed.\n+     *\n+     * @param yearOfCentury  the year of century to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withYearOfCentury(int yearOfCentury) {\n+        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));\n+    }\n+\n+    /**\n+     * Sets the year field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year changed.\n+     *\n+     * @param year  the year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withYear(int year) {\n+        return withMillis(getChronology().year().set(getMillis(), year));\n+    }\n+\n+    /**\n+     * Sets the weekyear field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * weekyear changed.\n+     *\n+     * @param weekyear  the weekyear to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withWeekyear(int weekyear) {\n+        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));\n+    }\n+\n+    /**\n+     * Sets the month of year field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * month of year changed.\n+     *\n+     * @param monthOfYear  the month of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withMonthOfYear(int monthOfYear) {\n+        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));\n+    }\n+\n+    /**\n+     * Sets the week of weekyear field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * week of weekyear changed.\n+     *\n+     * @param weekOfWeekyear  the week of weekyear to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withWeekOfWeekyear(int weekOfWeekyear) {\n+        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));\n+    }\n+\n+    /**\n+     * Sets the day of year field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of year changed.\n+     *\n+     * @param dayOfYear  the day of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withDayOfYear(int dayOfYear) {\n+        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));\n+    }\n+\n+    /**\n+     * Sets the day of month field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of month changed.\n+     *\n+     * @param dayOfMonth  the day of month to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withDayOfMonth(int dayOfMonth) {\n+        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));\n+    }\n+\n+    /**\n+     * Sets the day of week field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of week changed.\n+     *\n+     * @param dayOfWeek  the day of week to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withDayOfWeek(int dayOfWeek) {\n+        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the hour of day field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * hour of day changed.\n+     *\n+     * @param hour  the hour of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withHourOfDay(int hour) {\n+        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n+    }\n+\n+    /**\n+     * Sets the minute of hour field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * minute of hour changed.\n+     *\n+     * @param minute  the minute of hour to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withMinuteOfHour(int minute) {\n+        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n+    }\n+\n+    /**\n+     * Sets the second of minute field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * second of minute changed.\n+     *\n+     * @param second  the second of minute to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withSecondOfMinute(int second) {\n+        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));\n+    }\n+\n+    /**\n+     * Sets the millis of second field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of second changed.\n+     *\n+     * @param millis  the millis of second to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withMillisOfSecond(int millis) {\n+        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n+    }\n+\n+    /**\n+     * Sets the millis of day field in a copy of this DateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * DateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of day changed.\n+     *\n+     * @param millis  the millis of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public DateTime withMillisOfDay(int millis) {\n+        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));\n+    }\n+\n     // Date properties\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testGetMethods() {\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n         DateMidnight test = new DateMidnight();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n         assertEquals(0, test.getMillisOfDay());\n     }\n \n+    public void testWithers() {\n+        DateMidnight test = new DateMidnight(1970, 6, 9, GJChronology.getInstance());\n+        check(test.withYear(2000), 2000, 6, 9);\n+        check(test.withMonthOfYear(2), 1970, 2, 9);\n+        check(test.withDayOfMonth(2), 1970, 6, 2);\n+        check(test.withDayOfYear(6), 1970, 1, 6);\n+        check(test.withDayOfWeek(6), 1970, 6, 13);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3);\n+        check(test.withWeekyear(1971), 1971, 6, 15);\n+        check(test.withYearOfCentury(60), 1960, 6, 9);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9);\n+        check(test.withYearOfEra(1066), 1066, 6, 9);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9);\n+        \n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testEqualsHashCode() {\n         DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);\n         DateMidnight test2 = new DateMidnight(TEST_TIME1_UTC);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n+    private void check(DateMidnight test, int year, int month, int day) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n         assertEquals(false, test.isSupported(null));\n     }\n \n-    public void testGetMethods() {\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n         DateTime test = new DateTime();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n         assertEquals(60 * 60 * 1000, test.getMillisOfDay());\n     }\n \n+    public void testWithers() {\n+        DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJChronology.getInstance());\n+        check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);\n+        check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);\n+        check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);\n+        check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40);\n+        check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40);\n+        check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40);\n+        check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40);\n+        check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);\n+        check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234);\n+        \n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testEqualsHashCode() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test2 = new DateTime(TEST_TIME1);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n+    private void check(DateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(mil, test.getMillisOfSecond());\n+    }\n+\n }", "timestamp": 1144188379, "metainfo": ""}