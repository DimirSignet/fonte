{"sha": "e148b58e708c4f8bf450100a75df071406123bcd", "log": "Javadoc and fixes from testing   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n         }\n     }\n \n-    /**\n-     * Checks whether the field is precise.\n-     */\n-    private static void checkPrecise(DurationField field, String name) {\n-        if (!field.isPrecise()) {\n-            throw new UnsupportedOperationException\n-                (\"The field \\\"\" + name + \"\\\" is imprecise\");\n-        }\n-    }\n-\n+    /** The duration type that allocates the duration to fields */\n     private final DurationType iType;\n-\n+    /** The total milliseconds, if known */\n     private long iTotalMillis;\n-    // 0=unknown, 1=imprecise, 2=precise\n+    /** The milliseoond status, 0=unknown, 1=imprecise, 2=precise */\n     private int iTotalMillisState;\n \n     private int iYears;\n      * empty implementation that is protected and final. This also ensures that\n      * all lower subclasses are also immutable.\n      * \n-     * @param duration  the duration to set\n-     * @throws IllegalArgumentException if duration is invalid\n+     * @param duration  the duration to set, null means zero length duration\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected void setDuration(ReadableDuration duration) {\n-        setDuration(iType, duration);\n+        if (duration == null) {\n+            setTotalMillis(iType, 0L);\n+        } else {\n+            setDuration(iType, duration);\n+        }\n     }\n \n     /**\n      * This method is private to prevent subclasses from overriding.\n      */\n     private void setDuration(DurationType type, ReadableDuration duration) {\n-        if (duration == null) {\n-            throw new IllegalArgumentException(\"The duration must not be null\");\n-        }\n         setDuration(type,\n                     duration.getYears(), duration.getMonths(),\n                     duration.getWeeks(), duration.getDays(),\n     private void setDuration(DurationType type,\n                              int years, int months, int weeks, int days,\n                              int hours, int minutes, int seconds, int millis) {\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"The type must not be null\");\n-        }\n-\n         if (years != 0) {\n             checkArgument(type.years(), \"years\");\n         }\n      * \n      * @param startInstant  interval start, in milliseconds\n      * @param endInstant  interval end, in milliseconds\n-     * @throws IllegalArgumentException if the type is null\n      */\n     protected void setTotalMillis(long startInstant, long endInstant) {\n         setTotalMillis(iType, startInstant, endInstant);\n      *\n      * @param startInstant  interval start, in milliseconds\n      * @param endInstant  interval end, in milliseconds\n-     * @throws IllegalArgumentException if the type is null\n      */\n     private void setTotalMillis(DurationType type, long startInstant, long endInstant) {\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"The type must not be null\");\n-        }\n-        \n         long baseTotalMillis = (endInstant - startInstant);\n         int years = 0, months = 0, weeks = 0, days = 0;\n         int hours = 0, minutes = 0, seconds = 0, millis = 0;\n      * all lower subclasses are also immutable.\n      * \n      * @param duration  the duration, in milliseconds\n-     * @throws IllegalArgumentException if the type is null\n      */\n     protected void setTotalMillis(long duration) {\n         setTotalMillis(iType, duration);\n      * This method is private to prevent subclasses from overriding.\n      *\n      * @param duration  the duration, in milliseconds\n-     * @throws IllegalArgumentException if the type is null\n-     */\n-    private void setTotalMillis(DurationType type, final long duration) {\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"The type must not be null\");\n-        }\n-        \n+     */\n+    private void setTotalMillis(DurationType type, long duration) {\n         if (duration == 0) {\n             iTotalMillis = duration;\n             iTotalMillisState = 2;\n     /**\n      * Adds a duration to this one.\n      * \n-     * @param duration  the duration to add\n-     * @throws IllegalArgumentException if the duration is null\n+     * @param duration  the duration to add, mulls means add nothing\n      * @throws IllegalStateException if the duration is imprecise\n      */\n     protected void add(ReadableDuration duration) {\n-        if (duration == null) {\n-            throw new IllegalArgumentException(\"The duration must not be null\");\n-        }\n-        add(duration.getTotalMillis());\n+        if (duration != null) {\n+            add(duration.getTotalMillis());\n+        }\n     }\n     \n     /**\n--- a/JodaTime/src/java/org/joda/time/MutableDuration.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDuration.java\n     /**\n      * Sets all the fields in one go from another ReadableDuration.\n      * \n-     * @param duration  the duration to set\n-     * @throws IllegalArgumentException if duration is null\n-     * @throws UnsupportedOperationException if an unsupported field's value is\n-     * non-zero\n+     * @param duration  the duration to set, null means zero length duration\n+     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     public void setDuration(ReadableDuration duration) {\n         super.setDuration(duration);\n      * @param minutes  amount of minutes in this duration, which must be zero if unsupported\n      * @param seconds  amount of seconds in this duration, which must be zero if unsupported\n      * @param millis  amount of milliseconds in this duration, which must be zero if unsupported\n-     * @throws UnsupportedOperationException if an unsupported field's value is\n-     * non-zero\n+     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     public void setDuration(int years, int months, int weeks, int days,\n                             int hours, int minutes, int seconds, int millis) {\n     /**\n      * Sets all the fields in one go from a millisecond interval.\n      * \n-     * @param startInstant interval start, in milliseconds\n-     * @param endInstant interval end, in milliseconds\n+     * @param startInstant  interval start, in milliseconds\n+     * @param endInstant  interval end, in milliseconds\n      */\n     public void setTotalMillis(long startInstant, long endInstant) {\n         super.setTotalMillis(startInstant, endInstant);\n     }\n \n     /**\n-     * Sets all the fields in one go from a millisecond duration. If any\n-     * supported fields are imprecise, an UnsupportedOperationException is\n-     * thrown. The exception to this is when the specified duration is zero.\n+     * Sets all the fields in one go from a millisecond duration.\n+     * Only fields that are supported and precise will be set.\n      * \n      * @param duration  the duration, in milliseconds\n-     * @throws UnsupportedOperationException if any fields are imprecise\n      */\n     public void setTotalMillis(long duration) {\n         super.setTotalMillis(duration);\n     /**\n      * Adds a duration to this one.\n      * \n-     * @param duration  the duration to add\n-     * @throws IllegalArgumentException if the duration is null\n+     * @param duration  the duration to add, mulls means add nothing\n      * @throws IllegalStateException if the duration is imprecise\n      */\n     public void add(ReadableDuration duration) {", "timestamp": 1090714780, "metainfo": ""}