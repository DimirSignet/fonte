{"sha": "5ba9aa47f2836e195512bf89fcf68c51b6bedc16", "log": "Add ChronologyType methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n     }\n \n     /**\n+     * Gets a copy of this instant with a different chronology, potentially\n+     * changing the day in unexpected ways.\n+     * <p>\n+     * This method creates a new DateMidnight using the midnight millisecond value\n+     * and the new chronology. If the same or similar chronology is specified, but\n+     * with a different time zone, the day may change. This occurs because the new\n+     * DateMidnight rounds down the millisecond value to get to midnight, and the\n+     * time zone change may result in a rounding down to a different day.\n+     * <p>\n+     * For example, changing time zone from London (+00:00) to Paris (+01:00) will\n+     * retain the same day, but changing from Paris to London will change the day.\n+     * (When its midnight in London its the same day in Paris, but when its midnight\n+     * in Paris its still the previous day in London)\n+     * <p>\n+     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}\n+     * to change time zones.\n+     *\n+     * @param newChronologyType  the new chronology type, null means ISO\n+     * @return a copy of this datetime with a different chronology\n+     */\n+    public DateMidnight withChronologyType(ChronologyType newChronologyType) {\n+        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);\n+        return (newChronologyType == getChronologyType() ? this :\n+            new DateMidnight(getMillis(), newChronologyType.getChronology(getZone())));\n+    }\n+\n+    /**\n      * Gets a copy of this instant with a different time zone, preserving the day\n      * The returned object will have a local time of midnight in the new zone on\n      * the same day as the original instant.\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n     /**\n      * Gets a copy of this datetime with different millis.\n      * <p>\n-     * The returned object will be a new instance of the same implementation type.\n+     * The returned object will be either be a new instance or <code>this</code>.\n      * Only the millis will change, the chronology and time zone are kept.\n-     * The returned object will be either be a new instance or <code>this</code>.\n      *\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this datetime with different millis\n     /**\n      * Gets a copy of this datetime with a different chronology.\n      * <p>\n-     * The returned object will be a new instance of the same implementation type.\n+     * The returned object will be either be a new instance or <code>this</code>.\n      * Only the chronology will change, the millis are kept.\n-     * The returned object will be either be a new instance or <code>this</code>.\n      *\n      * @param newChronology  the new chronology, null means ISO default\n      * @return a copy of this datetime with a different chronology\n     public DateTime withChronology(Chronology newChronology) {\n         newChronology = DateTimeUtils.getChronology(newChronology);\n         return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with a different chronology.\n+     * <p>\n+     * The returned object will be either be a new instance or <code>this</code>.\n+     * Only the chronology will change, the millis and time zone are kept.\n+     *\n+     * @param newChronologyType  the new chronology type, null means ISO\n+     * @return a copy of this datetime with a different chronology\n+     */\n+    public DateTime withChronologyType(ChronologyType newChronologyType) {\n+        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);\n+        return (newChronologyType == getChronologyType() ? this :\n+            new DateTime(getMillis(), newChronologyType.getChronology(getZone())));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the chronology type handling null.\n+     * <p>\n+     * If the chronology type is <code>null</code>, {@link ChronologyType#iso()}\n+     * will be returned. Otherwise, the chronology type is returned.\n+     * \n+     * @param type  the chronology type to use, null means ISO\n+     * @return the chronology type, never null\n+     */\n+    public static final ChronologyType getChronologyType(ChronologyType type) {\n+        if (type == null) {\n+            return ChronologyType.iso();\n+        }\n+        return type;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets the zone handling null.\n      * <p>\n      * If the zone is <code>null</code>, {@link DateTimeZone#getDefault()}\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n         super.setChronology(chronology);\n     }\n \n+    /**\n+     * Set the chronology of the datetime.\n+     * <p>\n+     * This method does not affect the millis or the zone.\n+     * The chronology is only changed if the type is different.\n+     *\n+     * @param type  the type to use, null means ISO\n+     */\n+    public void setChronologyType(ChronologyType type) {\n+        type = DateTimeUtils.getChronologyType(type);\n+        if (type != getChronologyType()) {\n+            setChronology(type.getChronology(getZone()));\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the time zone of the datetime, changing the chronology and field values.\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.ReadableDateTime;\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the type of the chronology.\n+     *\n+     * @return the type of the chronology\n+     */\n+    public ChronologyType getChronologyType() {\n+        return getChronology().getType();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the value of one of the fields of a datetime.\n      * <p>\n      * This method uses the chronology of the datetime to obtain the value.\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n             (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n     private long TEST_TIME_NOW_LONDON =\n             TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_HOUR;\n-    private long TEST_TIME_NOW_PARIS =\n-            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+//    private long TEST_TIME_NOW_PARIS =\n+//            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;\n             \n     // 2002-04-05\n     private long TEST_TIME1_UTC =\n         DateMidnight test = new DateMidnight();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(ChronologyType.iso(), test.getChronologyType());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n         \n         \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.withChronology(ISOChronology.getInstance());\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithChronologyType_ChronologyType() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight result = test.withChronologyType(ChronologyType.gregorian());\n+        assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n+        result = test.withChronologyType(null);\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withChronologyType(ChronologyType.iso());\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetChronologyType_ChronologyType() {\n+        assertEquals(ChronologyType.buddhist(), DateTimeUtils.getChronologyType(ChronologyType.buddhist()));\n+        assertEquals(ChronologyType.iso(), DateTimeUtils.getChronologyType(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGetZone_Zone() {\n         assertEquals(PARIS, DateTimeUtils.getZone(PARIS));\n         assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null));\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n         DateTime test = new DateTime();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(ChronologyType.iso(), test.getChronologyType());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         \n         \n         test = new DateTime(TEST_TIME1);\n         result = test.withChronology(ISOChronology.getInstance());\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithChronologyType_ChronologyType() {\n+        DateTime test = new DateTime(TEST_TIME1, PARIS);\n+        DateTime result = test.withChronologyType(ChronologyType.gregorian());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.withChronologyType(null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withChronologyType(ChronologyType.iso());\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n         MutableDateTime test = new MutableDateTime();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(ChronologyType.iso(), test.getChronologyType());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testSetChronologyType_ChronologyType1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        test.setChronologyType(ChronologyType.gregorian());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetChronologyType_ChronologyType2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        test.setChronologyType(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testSetZone_DateTimeZone1() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         test.setZone(PARIS);", "timestamp": 1130018309, "metainfo": ""}