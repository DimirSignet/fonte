{"sha": "369388fcda06e845e28911926d82cb8f634b4bba", "log": "Prevent OutOfMemoryErrors with extreme values   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n             try {\n                 start = startRecurrence.next\n                     (instant, standardOffset, endRecurrence.getSaveMillis());\n+                if (instant > 0 && start < 0) {\n+                    // Overflowed.\n+                    start = instant;\n+                }\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 start = instant;\n             try {\n                 end = endRecurrence.next\n                     (instant, standardOffset, startRecurrence.getSaveMillis());\n+                if (instant > 0 && end < 0) {\n+                    // Overflowed.\n+                    end = instant;\n+                }\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 end = instant;\n             try {\n                 start = startRecurrence.previous\n                     (instant, standardOffset, endRecurrence.getSaveMillis());\n+                if (instant < 0 && start > 0) {\n+                    // Overflowed.\n+                    start = instant;\n+                }\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 start = instant;\n             try {\n                 end = endRecurrence.previous\n                     (instant, standardOffset, startRecurrence.getSaveMillis());\n+                if (instant < 0 && end > 0) {\n+                    // Overflowed.\n+                    end = instant;\n+                }\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 end = instant;", "timestamp": 1098930922, "metainfo": ""}