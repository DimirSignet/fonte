{"sha": "a9f1ae91311276c5321e23f880aa3b0078e1d191", "log": "Fix to avoid exception for times before 1970 with non-zero milli-of-second", "commit": "\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n             date.getHours(),\n             date.getMinutes(),\n             date.getSeconds(),\n-            (int) (date.getTime() % 1000)\n+            (((int) (date.getTime() % 1000)) + 1000) % 1000\n         );\n     }\n \n--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_FromDateFields() throws Exception {\n+    public void testFactory_FromDateFields_after1970() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);\n+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n+        try {\n+            LocalDateTime.fromDateFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactory_FromDateFields_before1970() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);\n         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n         try {\n             LocalDateTime.fromDateFields((Date) null);", "timestamp": 1347540202, "metainfo": ""}