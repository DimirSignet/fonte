{"sha": "7d5d0a3b57123abe30f23326a93dfdf13fcdf1e5", "log": "Fix Interval.overlaps when comparing against empty interval  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         long otherEnd = interval.getEndMillis();\n         long thisStart = getStartMillis();\n         long thisEnd = getEndMillis();\n-        return (thisStart < otherEnd && otherStart < thisEnd);\n+        \n+        return (thisStart < otherEnd && otherStart < thisEnd) ||\n+            (thisStart == otherStart &&\n+                    (thisStart == thisEnd || otherStart == otherEnd));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     public void testContains_RInterval() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n         \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n+        \n         assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));\n         assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n         assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n     public void testOverlaps_RInterval() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n         \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n+        \n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));\n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n         \n         assertEquals(true, test.overlaps((ReadableInterval) null));\n+        \n+        Interval empty = new Interval(TEST_TIME1, TEST_TIME1);\n+        assertEquals(true, empty.overlaps(empty));\n+        assertEquals(true, empty.overlaps(test));\n+        assertEquals(true, test.overlaps(empty));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testOverlap_RInterval() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME1),\n+                test.overlap(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME1),\n+                new Interval(TEST_TIME1, TEST_TIME1).overlap(test));\n         \n         assertEquals(\n                 new Interval(TEST_TIME1, TEST_TIME2),\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     public void testContains_RInterval() {\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n+        \n         assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));\n         assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n         assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n     public void testOverlaps_RInterval() {\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n+        \n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));\n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n         \n         assertEquals(true, test.overlaps((ReadableInterval) null));\n+        \n+        MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1);\n+        assertEquals(true, empty.overlaps(empty));\n+        assertEquals(true, empty.overlaps(test));\n+        assertEquals(true, test.overlaps(empty));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1142369585, "metainfo": ""}