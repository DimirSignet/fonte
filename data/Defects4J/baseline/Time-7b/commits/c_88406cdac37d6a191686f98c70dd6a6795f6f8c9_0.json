{"sha": "88406cdac37d6a191686f98c70dd6a6795f6f8c9", "log": "Add Interval(long,long,DateTimeZone) constructor, emphasising that intervals include a time zone  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n import java.io.Serializable;\n \n import org.joda.time.base.BaseInterval;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * Interval is the standard implementation of an immutable time interval.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs an interval from a start and end instant with the ISO default chronology.\n+     * Constructs an interval from a start and end instant with the ISO\n+     * default chronology in the default time zone.\n      * \n      * @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z.\n      * @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z.\n     }\n \n     /**\n-     * Constructs an interval from a start and end instant with a chronology.\n+     * Constructs an interval from a start and end instant with the ISO\n+     * default chronology in the specified time zone.\n+     * \n+     * @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z.\n+     * @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z.\n+     * @param zone  the time zone to use, null means default zone\n+     * @throws IllegalArgumentException if the end is before the start\n+     * @since 1.5\n+     */\n+    public Interval(long startInstant, long endInstant, DateTimeZone zone) {\n+        super(startInstant, endInstant, ISOChronology.getInstance(zone));\n+    }\n+\n+    /**\n+     * Constructs an interval from a start and end instant with the\n+     * specified chronology.\n      * \n      * @param chronology  the chronology to use, null is ISO default\n      * @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z.\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testConstructor_long_long_Chronology1() throws Throwable {\n+    public void testConstructor_long_long_Zone() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), LONDON);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long_nullZone() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n         Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());\n         assertEquals(GJChronology.getInstance(), test.getChronology());\n     }\n \n-    public void testConstructor_long_long_Chronology2() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), null);\n+    public void testConstructor_long_long_nullChronology() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n         assertEquals(ISOChronology.getInstance(), test.getChronology());", "timestamp": 1187825784, "metainfo": ""}