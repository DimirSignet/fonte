{"sha": "db2191ad089d5ed74d31bf3bf1cb7ab18612434d", "log": "Added a few new types and dropped ISOYearMonth.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DurationType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationType.java\n \n import java.io.Serializable;\n import org.joda.time.chrono.MillisDurationField;\n+import org.joda.time.chrono.PreciseDurationField;\n import org.joda.time.chrono.ScaledDurationField;\n import org.joda.time.chrono.UnsupportedDurationField;\n import org.joda.time.chrono.iso.ISOChronology;\n  * <li>DayHour - the duration is expressed in terms of days, hours, minutes, seconds\n  *  and milliseconds\n  * <li>YearMonth - the duration is expressed using all fields except weeks\n- * <li>ISOYearMonth - as YearMonth, but with the month fixed at 30 days\n  * <li>YearWeek - the duration is expressed using all fields except months\n+ * <li>AverageYearMonth - as YearMonth, but years and months have fixed average lengths\n+ * <li>PreciseYearMonth - as YearMonth, but years are fixed at 365 days,\n+ *  and months are fixed at 30 days\n+ * <li>PreciseYearWeek - as YearWeek, but years are fixed at 365 days\n  * </ul>\n  *\n  * <p>\n      * Returns a DurationType of:\n      *\n      * <ul>\n-     * <li>years\n-     * <li>months (fixed at 30 days)\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     */\n-    public static DurationType getISOYearMonthType() {\n-        return getISOYearMonthType(null);\n+     * <li>years (weekyears)\n+     * <li>weeks\n+     * <li>days\n+     * <li>hours\n+     * <li>minutes\n+     * <li>seconds\n+     * <li>milliseconds\n+     * </ul>\n+     */\n+    public static DurationType getYearWeekType() {\n+        return getYearWeekType(null);\n     }\n \n     /**\n      * Returns a DurationType of:\n      *\n      * <ul>\n-     * <li>years\n-     * <li>months (fixed at 30 days)\n+     * <li>years (weekyears)\n+     * <li>weeks\n      * <li>days\n      * <li>hours\n      * <li>minutes\n      *\n      * @param chrono Chronology to use for calculations.\n      */\n-    public static DurationType getISOYearMonthType(Chronology chrono) {\n+    public static DurationType getYearWeekType(Chronology chrono) {\n         if (chrono == null) {\n             chrono = ISOChronology.getInstanceUTC();\n         }\n-        return new ISOYearMonthType(chrono);\n-    }\n-\n-    /**\n-     * Returns a DurationType of:\n-     *\n-     * <ul>\n-     * <li>years (weekyears)\n-     * <li>weeks\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     */\n-    public static DurationType getYearWeekType() {\n-        return getYearWeekType(null);\n-    }\n-\n-    /**\n-     * Returns a DurationType of:\n-     *\n-     * <ul>\n-     * <li>years (weekyears)\n-     * <li>weeks\n+        return new YearWeekType(chrono);\n+    }\n+\n+    /**\n+     * Returns a precise DurationType of:\n+     *\n+     * <ul>\n+     * <li>years (fixed at 365.2425 days)\n+     * <li>months (fixed at 30.436875 days)\n+     * <li>days\n+     * <li>hours\n+     * <li>minutes\n+     * <li>seconds\n+     * <li>milliseconds\n+     * </ul>\n+     */\n+    public static DurationType getAverageYearMonthType() {\n+        return new AverageYearMonthType(ISOChronology.getInstanceUTC());\n+    }\n+\n+    /**\n+     * Returns a precise DurationType of:\n+     *\n+     * <ul>\n+     * <li>years (fixed to chronology's average year)\n+     * <li>months (fixed to chronology's average month)\n      * <li>days\n      * <li>hours\n      * <li>minutes\n      * be UTC or have fixed offsets.\n      *\n      * @param chrono Chronology to use for calculations.\n-     */\n-    public static DurationType getYearWeekType(Chronology chrono) {\n-        if (chrono == null) {\n-            chrono = ISOChronology.getInstanceUTC();\n-        }\n-        return new YearWeekType(chrono);\n+     * @throws IllegalArgumentException if chronology produces an imprecise duration type\n+     */\n+    public static DurationType getAverageYearMonthType(Chronology chrono) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+            return getAverageYearMonthType();\n+        }\n+        DurationType type = new AverageYearMonthType(chrono);\n+        if (!type.isPrecise()) {\n+            throw new IllegalArgumentException\n+                (\"Chronology produced an imprecise duration type\");\n+        }\n+        return type;\n+    }\n+\n+    /**\n+     * Returns a precise DurationType of:\n+     *\n+     * <ul>\n+     * <li>years (fixed at 365 days)\n+     * <li>months (fixed at 30 days)\n+     * <li>days\n+     * <li>hours\n+     * <li>minutes\n+     * <li>seconds\n+     * <li>milliseconds\n+     * </ul>\n+     */\n+    public static DurationType getPreciseYearMonthType() {\n+        return new PreciseYearMonthType(ISOChronology.getInstanceUTC());\n+    }\n+\n+    /**\n+     * Returns a precise DurationType of:\n+     *\n+     * <ul>\n+     * <li>years (fixed at 365 days)\n+     * <li>weeks\n+     * <li>days\n+     * <li>hours\n+     * <li>minutes\n+     * <li>seconds\n+     * <li>milliseconds\n+     * </ul>\n+     */\n+    public static DurationType getPreciseYearWeekType() {\n+        return new PreciseYearWeekType(ISOChronology.getInstanceUTC());\n     }\n \n     protected DurationType() {\n         }\n     }\n \n-    private static final class ISOYearMonthType extends DayHourType {\n-        static final long serialVersionUID = 1203161678926193794L;\n-\n-        private final DurationField iMonths;\n-        \n-        public ISOYearMonthType(Chronology chrono) {\n+    private static final class YearWeekType extends DayHourType {\n+        static final long serialVersionUID = 1347170237843447098L;\n+\n+        public YearWeekType(Chronology chrono) {\n             super(chrono);\n-            iMonths = new ScaledDurationField(chrono.days(), \"ISOMonths\", 30);\n         }\n \n         public DurationType withChronology(Chronology chrono) {\n             if (chrono == iChronology) {\n                 return this;\n             }\n-            return new ISOYearMonthType(iChronology);\n+            return new YearWeekType(iChronology);\n+        }\n+\n+        public boolean isPrecise() {\n+            return years().isPrecise()\n+                && weeks().isPrecise()\n+                && super.isPrecise();\n+        }\n+\n+        public DurationField years() {\n+            return iChronology.weekyears();\n+        }\n+\n+        public DurationField weeks() {\n+            return iChronology.weeks();\n+        }\n+\n+        private Object readResolve() {\n+            return getYearWeekType(iChronology);\n+        }\n+    }\n+\n+    private static final class AverageYearMonthType extends DayHourType {\n+        static final long serialVersionUID = -1629017135050918461L;\n+\n+        private final DurationField iYears;\n+        private final DurationField iMonths;\n+        \n+        public AverageYearMonthType(Chronology chrono) {\n+            super(chrono);\n+            iYears = new PreciseDurationField(\"AverageYears\", chrono.years().getUnitMillis());\n+            iMonths = new PreciseDurationField(\"AverageMonths\", chrono.months().getUnitMillis());\n+        }\n+\n+        public DurationType withChronology(Chronology chrono) {\n+            if (chrono == iChronology) {\n+                return this;\n+            }\n+            return getAverageYearMonthType(chrono);\n+        }\n+\n+        public DurationField years() {\n+            return iYears;\n+        }\n+\n+        public DurationField months() {\n+            return iMonths;\n+        }\n+\n+        private Object readResolve() {\n+            return getAverageYearMonthType(iChronology);\n+        }\n+    }\n+\n+    private static final class PreciseYearMonthType extends DayHourType {\n+        static final long serialVersionUID = 1203161678926193794L;\n+\n+        private final DurationField iYears;\n+        private final DurationField iMonths;\n+        \n+        public PreciseYearMonthType(Chronology chrono) {\n+            super(chrono);\n+            iYears = new ScaledDurationField(chrono.days(), \"PreciseYears\", 365);\n+            iMonths = new ScaledDurationField(chrono.days(), \"PreciseMonths\", 30);\n+        }\n+\n+        public DurationType withChronology(Chronology chrono) {\n+            return this;\n         }\n \n         public boolean isPrecise() {\n         }\n \n         public DurationField years() {\n-            return iChronology.years();\n+            return iYears;\n         }\n \n         public DurationField months() {\n         }\n \n         private Object readResolve() {\n-            return getISOYearMonthType(iChronology);\n-        }\n-    }\n-\n-    private static final class YearWeekType extends DayHourType {\n-        static final long serialVersionUID = 1347170237843447098L;\n-\n-        public YearWeekType(Chronology chrono) {\n+            return getPreciseYearMonthType();\n+        }\n+    }\n+\n+    private static final class PreciseYearWeekType extends DayHourType {\n+        static final long serialVersionUID = -2040324323318740267L;\n+\n+        private final DurationField iYears;\n+        \n+        public PreciseYearWeekType(Chronology chrono) {\n             super(chrono);\n+            iYears = new ScaledDurationField(chrono.days(), \"PreciseYears\", 365);\n         }\n \n         public DurationType withChronology(Chronology chrono) {\n-            if (chrono == iChronology) {\n-                return this;\n-            }\n-            return new YearWeekType(iChronology);\n+            return this;\n         }\n \n         public boolean isPrecise() {\n         }\n \n         public DurationField years() {\n-            return iChronology.weekyears();\n+            return iYears;\n         }\n \n         public DurationField weeks() {\n         }\n \n         private Object readResolve() {\n-            return getYearWeekType(iChronology);\n+            return getPreciseYearWeekType();\n         }\n     }\n ", "timestamp": 1072051253, "metainfo": ""}