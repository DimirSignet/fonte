{"sha": "30b2fdd187456c29b9e411e801c178d84331a0de", "log": "Added basic tests for text field formatting.   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n         suite.addTest(TestISOPeriodFormatParsing.suite());\n         suite.addTest(TestPeriodFormatParsing.suite());\n         suite.addTest(TestPeriodFormatterBuilder.suite());\n-        \n+\n+        suite.addTest(TestTextFields.suite());\n+\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestTextFields.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally\n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableDateTime;\n+\n+/**\n+ * Makes sure that text fields are correct for English.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestTextFields extends TestCase {\n+\n+    private static final DateTimeZone[] ZONES = {\n+        DateTimeZone.UTC,\n+        DateTimeZone.getInstance(\"Europe/Paris\"),\n+        DateTimeZone.getInstance(\"Europe/London\"),\n+        DateTimeZone.getInstance(\"Asia/Tokyo\"),\n+        DateTimeZone.getInstance(\"America/Los_Angeles\"),\n+    };\n+\n+    private static final String[] MONTHS = {\n+        null,\n+        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n+        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n+    };\n+\n+    private static final String[] WEEKDAYS = {\n+        null,\n+        \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"\n+    };\n+\n+    private static final String[] HALFDAYS = {\n+        \"AM\", \"PM\"\n+    };\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestTextFields.class);\n+    }\n+\n+    public TestTextFields(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(ZONES[0]);\n+        Locale.setDefault(Locale.ENGLISH);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMonthNames_monthStart() {\n+        DateTimePrinter printer = DateTimeFormat.getInstance().forPattern(\"MMMM\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            for (int month=1; month<=12; month++) {\n+                DateTime dt = new DateTime(2004, month, 1, 1, 20, 30, 40, ZONES[i]);\n+                String monthText = printer.print(dt);\n+                assertEquals(MONTHS[month], monthText);\n+            }\n+        }\n+    }\n+\n+    public void testMonthNames_monthMiddle() {\n+        DateTimePrinter printer = DateTimeFormat.getInstance().forPattern(\"MMMM\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            for (int month=1; month<=12; month++) {\n+                DateTime dt = new DateTime(2004, month, 15, 12, 20, 30, 40, ZONES[i]);\n+                String monthText = printer.print(dt);\n+                assertEquals(MONTHS[month], monthText);\n+            }\n+        }\n+    }\n+\n+    public void testMonthNames_monthEnd() {\n+        DateTimePrinter printer = DateTimeFormat.getInstance().forPattern(\"MMMM\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            Chronology chrono = Chronology.getISO(ZONES[i]);\n+            for (int month=1; month<=12; month++) {\n+                DateTime dt = new DateTime(2004, month, 1, 23, 20, 30, 40, chrono);\n+                int lastDay = chrono.dayOfMonth().getMaximumValue(dt.getMillis());\n+                dt = new DateTime(2004, month, lastDay, 23, 20, 30, 40, chrono);\n+                String monthText = printer.print(dt);\n+                assertEquals(MONTHS[month], monthText);\n+            }\n+        }\n+    }\n+\n+    public void testWeekdayNames() {\n+        DateTimePrinter printer = DateTimeFormat.getInstance().forPattern(\"EEEE\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            MutableDateTime mdt = new MutableDateTime(2004, 1, 1, 1, 20, 30, 40, ZONES[i]);\n+            for (int day=1; day<=366; day++) {\n+                mdt.setDayOfYear(day);\n+                int weekday = mdt.getDayOfWeek();\n+                String weekdayText = printer.print(mdt);\n+                assertEquals(WEEKDAYS[weekday], weekdayText);\n+            }\n+        }\n+    }\n+\n+    public void testHalfdayNames() {\n+        DateTimePrinter printer = DateTimeFormat.getInstance().forPattern(\"a\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            Chronology chrono = Chronology.getISO(ZONES[i]);\n+            MutableDateTime mdt = new MutableDateTime(2004, 5, 30, 0, 20, 30, 40, chrono);\n+            for (int hour=0; hour<24; hour++) {\n+                mdt.setHourOfDay(hour);\n+                int halfday = mdt.get(chrono.halfdayOfDay());\n+                String halfdayText = printer.print(mdt);\n+                assertEquals(HALFDAYS[halfday], halfdayText);\n+            }\n+        }\n+    }\n+}", "timestamp": 1102795916, "metainfo": ""}