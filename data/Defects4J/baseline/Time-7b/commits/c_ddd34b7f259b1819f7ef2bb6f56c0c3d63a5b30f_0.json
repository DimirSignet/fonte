{"sha": "ddd34b7f259b1819f7ef2bb6f56c0c3d63a5b30f", "log": "Add methods to Duration to get standard minutes, hours and days [2862884]  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the length of this duration in seconds assuming 1000 milliseconds\n-     * in a second.\n+     * Gets the length of this duration in days assuming that there are the\n+     * standard number of milliseconds in a day.\n+     * <p>\n+     * This method assumes that there are 24 hours in a day,\n+     * 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in\n+     * a second. This will be true for most days, however days with Daylight\n+     * Savings changes will not have 24 hours, so use this method with care.\n+     * <p>\n+     * This returns <code>getMillis() / MILLIS_PER_DAY</code>.\n+     * The result is an integer division, thus excess milliseconds are truncated.\n+     *\n+     * @return the length of the duration in standard seconds\n+     * @since 2.0\n+     */\n+    public long getStandardDays() {\n+        return getMillis() / DateTimeConstants.MILLIS_PER_DAY;\n+    }\n+\n+    /**\n+     * Gets the length of this duration in hours assuming that there are the\n+     * standard number of milliseconds in an hour.\n+     * <p>\n+     * This method assumes that there are 60 minutes in an hour,\n+     * 60 seconds in a minute and 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * <p>\n+     * This returns <code>getMillis() / MILLIS_PER_HOUR</code>.\n+     * The result is an integer division, thus excess milliseconds are truncated.\n+     *\n+     * @return the length of the duration in standard seconds\n+     * @since 2.0\n+     */\n+    public long getStandardHours() {\n+        return getMillis() / DateTimeConstants.MILLIS_PER_HOUR;\n+    }\n+\n+    /**\n+     * Gets the length of this duration in minutes assuming that there are the\n+     * standard number of milliseconds in a minute.\n+     * <p>\n+     * This method assumes that there are 60 seconds in a minute and\n+     * 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * <p>\n+     * This returns <code>getMillis() / 60000</code>.\n+     * The result is an integer division, thus excess milliseconds are truncated.\n+     *\n+     * @return the length of the duration in standard seconds\n+     * @since 2.0\n+     */\n+    public long getStandardMinutes() {\n+        return getMillis() / DateTimeConstants.MILLIS_PER_MINUTE;\n+    }\n+\n+    /**\n+     * Gets the length of this duration in seconds assuming that there are the\n+     * standard number of milliseconds in a second.\n+     * <p>\n+     * This method assumes that there are 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n      * <p>\n      * This returns <code>getMillis() / 1000</code>.\n      * The result is an integer division, so 2999 millis returns 2 seconds.\n     }\n \n     /**\n-     * Converts this duration to a period in seconds assuming 1000 milliseconds\n-     * in a second.\n-     * <p>\n-     * This method allows you to convert between a duration and a period.\n+     * Converts this duration to a period in days assuming that there are the\n+     * standard number of milliseconds in a day.\n+     * <p>\n+     * This method assumes that there are 24 hours in a day,\n+     * 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in\n+     * a second. This will be true for most days, however days with Daylight\n+     * Savings changes will not have 24 hours, so use this method with care.\n+     * \n+     * @return a period representing the number of standard days in this period, never null\n+     * @throws ArithmeticException if the number of days is too large to be represented\n+     * @since 2.0\n+     */\n+    public Days toStandardDays() {\n+        long days = getStandardDays();\n+        return Days.days(FieldUtils.safeToInt(days));\n+    }\n+\n+    /**\n+     * Converts this duration to a period in hours assuming that there are the\n+     * standard number of milliseconds in an hour.\n+     * <p>\n+     * This method assumes that there are 60 minutes in an hour,\n+     * 60 seconds in a minute and 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * \n+     * @return a period representing the number of standard hours in this period, never null\n+     * @throws ArithmeticException if the number of hours is too large to be represented\n+     * @since 2.0\n+     */\n+    public Hours toStandardHours() {\n+        long hours = getStandardHours();\n+        return Hours.hours(FieldUtils.safeToInt(hours));\n+    }\n+\n+    /**\n+     * Converts this duration to a period in minutes assuming that there are the\n+     * standard number of milliseconds in a minute.\n+     * <p>\n+     * This method assumes that there are 60 seconds in a minute and\n+     * 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * \n+     * @return a period representing the number of standard minutes in this period, never null\n+     * @throws ArithmeticException if the number of minutes is too large to be represented\n+     * @since 2.0\n+     */\n+    public Minutes toStandardMinutes() {\n+        long minutes = getStandardMinutes();\n+        return Minutes.minutes(FieldUtils.safeToInt(minutes));\n+    }\n+\n+    /**\n+     * Converts this duration to a period in seconds assuming that there are the\n+     * standard number of milliseconds in a second.\n+     * <p>\n+     * This method assumes that there are 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n      * \n      * @return a period representing the number of standard seconds in this period, never null\n      * @throws ArithmeticException if the number of seconds is too large to be represented\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToStandardDays() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(1L);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(24 * 60 * 60000L - 1);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(24 * 60 * 60000L);\n+        assertEquals(Days.days(1), test.toStandardDays());\n+        test = new Duration(24 * 60 * 60000L + 1);\n+        assertEquals(Days.days(1), test.toStandardDays());\n+        test = new Duration(2 * 24 * 60 * 60000L - 1);\n+        assertEquals(Days.days(1), test.toStandardDays());\n+        test = new Duration(2 * 24 * 60 * 60000L);\n+        assertEquals(Days.days(2), test.toStandardDays());\n+        test = new Duration(-1L);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(-24 * 60 * 60000L + 1);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(-24 * 60 * 60000L);\n+        assertEquals(Days.days(-1), test.toStandardDays());\n+    }\n+\n+    public void testToStandardDays_overflow() {\n+        Duration test = new Duration((((long) Integer.MAX_VALUE) + 1) * 24L * 60L * 60000L);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardHours() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(1L);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(3600000L - 1);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(3600000L);\n+        assertEquals(Hours.hours(1), test.toStandardHours());\n+        test = new Duration(3600000L + 1);\n+        assertEquals(Hours.hours(1), test.toStandardHours());\n+        test = new Duration(2 * 3600000L - 1);\n+        assertEquals(Hours.hours(1), test.toStandardHours());\n+        test = new Duration(2 * 3600000L);\n+        assertEquals(Hours.hours(2), test.toStandardHours());\n+        test = new Duration(-1L);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(-3600000L + 1);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(-3600000L);\n+        assertEquals(Hours.hours(-1), test.toStandardHours());\n+    }\n+\n+    public void testToStandardHours_overflow() {\n+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 3600000L + 3600000L);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardMinutes() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(1L);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(60000L - 1);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(60000L);\n+        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n+        test = new Duration(60000L + 1);\n+        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n+        test = new Duration(2 * 60000L - 1);\n+        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n+        test = new Duration(2 * 60000L);\n+        assertEquals(Minutes.minutes(2), test.toStandardMinutes());\n+        test = new Duration(-1L);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(-60000L + 1);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(-60000L);\n+        assertEquals(Minutes.minutes(-1), test.toStandardMinutes());\n+    }\n+\n+    public void testToStandardMinutes_overflow() {\n+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 60000L + 60000L);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToStandardSeconds() {\n         Duration test = new Duration(0L);\n         assertEquals(Seconds.seconds(0), test.toStandardSeconds());", "timestamp": 1257611680, "metainfo": ""}