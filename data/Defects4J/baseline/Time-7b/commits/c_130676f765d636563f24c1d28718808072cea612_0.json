{"sha": "130676f765d636563f24c1d28718808072cea612", "log": "Improve test coverage   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n     /**\n      * Constructor.\n      */\n-    private DateTimeFormat() {\n+    protected DateTimeFormat() {\n         super();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n      * \n      * @param chrono  the chronology to use, must not be null\n      */\n-    private ISODateTimeFormat() {\n+    protected ISODateTimeFormat() {\n+        super();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n     /**\n      * Constructor.\n      */\n-    private ISOPeriodFormat() {\n+    protected ISOPeriodFormat() {\n+        super();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java\n     /**\n      * Constructor.\n      */\n-    private PeriodFormat() {\n+    protected PeriodFormat() {\n+        super();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the default PeriodFormatter.\n      * <p>\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n             test1.compareTo(new Date());\n             fail();\n         } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new TimeOfDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new YearMonthDay(1970, 6, 9).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n         suite.addTest(TestDateTimeFormatStyle.suite());\n         suite.addTest(TestISODateTimeFormat.suite());\n         suite.addTest(TestISODateTimeFormat_Fields.suite());\n+        suite.addTest(TestDateTimeFormatterBuilder.suite());\n         \n         suite.addTest(TestPeriodFormatter.suite());\n+        suite.addTest(TestPeriodFormat.suite());\n         suite.addTest(TestISOPeriodFormat.suite());\n         suite.addTest(TestISOPeriodFormatParsing.suite());\n         suite.addTest(TestPeriodFormatParsing.suite());\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        DateTimeFormat f = new DateTimeFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFormat_era() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         DateTimeFormatter f = DateTimeFormat.forPattern(\"G\").withLocale(Locale.UK);\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for DateTimeFormatterBuilder.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeFormatterBuilder extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFormatterBuilder.class);\n+    }\n+\n+    public TestDateTimeFormatterBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toFormatter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        try {\n+            bld.toFormatter();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        bld.appendLiteral('X');\n+        assertNotNull(bld.toFormatter());\n+    }\n+\n+    public void test_toPrinter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        try {\n+            bld.toPrinter();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        bld.appendLiteral('X');\n+        assertNotNull(bld.toPrinter());\n+    }\n+\n+    public void test_toParser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        try {\n+            bld.toParser();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        bld.appendLiteral('X');\n+        assertNotNull(bld.toParser());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_canBuildFormatter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        assertEquals(false, bld.canBuildFormatter());\n+        bld.appendLiteral('X');\n+        assertEquals(true, bld.canBuildFormatter());\n+    }\n+\n+    public void test_canBuildPrinter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        assertEquals(false, bld.canBuildPrinter());\n+        bld.appendLiteral('X');\n+        assertEquals(true, bld.canBuildPrinter());\n+    }\n+\n+    public void test_canBuildParser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        assertEquals(false, bld.canBuildParser());\n+        bld.appendLiteral('X');\n+        assertEquals(true, bld.canBuildParser());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_append_Formatter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimeFormatter f = bld.toFormatter();\n+        \n+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+        bld2.appendLiteral('X');\n+        bld2.append(f);\n+        bld2.appendLiteral('Z');\n+        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_append_Printer() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimePrinter p = bld.toPrinter();\n+        \n+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+        bld2.appendLiteral('X');\n+        bld2.append(p);\n+        bld2.appendLiteral('Z');\n+        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        ISODateTimeFormat f = new ISODateTimeFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFormat_date() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n import org.joda.time.PeriodType;\n \n /**\n- * This class is a Junit unit test for PeriodFormatterBuilder.\n+ * This class is a Junit unit test for ISOPeriodFormat.\n  *\n  * @author Stephen Colebourne\n  */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        ISOPeriodFormat f = new ISOPeriodFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n     }\n \n     //-----------------------------------------------------------------------\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormat extends TestCase {\n+    \n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormat.class);\n+    }\n+\n+    public TestPeriodFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        PeriodFormat f = new PeriodFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds\", PeriodFormat.getDefault().print(p));\n+    }\n+\n+}", "timestamp": 1119831192, "metainfo": ""}