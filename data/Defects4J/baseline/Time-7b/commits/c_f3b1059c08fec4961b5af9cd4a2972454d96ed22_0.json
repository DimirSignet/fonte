{"sha": "f3b1059c08fec4961b5af9cd4a2972454d96ed22", "log": "Start Chrono package tests   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAllPackages.java\n+++ b/JodaTime/src/test/org/joda/time/TestAllPackages.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(org.joda.time.TestAll.suite());\n+        suite.addTest(org.joda.time.chrono.TestAll.suite());\n         suite.addTest(org.joda.time.chrono.gj.TestAll.suite());\n         suite.addTest(org.joda.time.convert.TestAll.suite());\n         suite.addTest(org.joda.time.tz.TestAll.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestAll.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.chrono;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(TestISOChronology.suite());\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISOChronology extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISOChronology.class);\n+    }\n+\n+    public TestISOChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, ISOChronology.getInstanceUTC().getZone());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, ISOChronology.getInstance().getZone());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, ISOChronology.getInstance(null).getZone());\n+    }\n+\n+    public void testEquality() {\n+        assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO));\n+        assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(LONDON));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(PARIS));\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC());\n+        assertSame(ISOChronology.getInstance(), ISOChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(LONDON).withUTC());\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(TOKYO).withUTC());\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().withUTC());\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"ISOChronology[Europe/London]\", ISOChronology.getInstance(LONDON).toString());\n+        assertEquals(\"ISOChronology[Asia/Tokyo]\", ISOChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"ISOChronology[Europe/London]\", ISOChronology.getInstance().toString());\n+        assertEquals(\"ISOChronology[UTC]\", ISOChronology.getInstanceUTC().toString());\n+    }\n+\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", ISOChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", ISOChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", ISOChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", ISOChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", ISOChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", ISOChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", ISOChronology.getInstance().days().getName());\n+        assertEquals(\"hours\", ISOChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", ISOChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", ISOChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", ISOChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, ISOChronology.getInstance().eras().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().years().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().months().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().days().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().hours().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, ISOChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().months().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, ISOChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", ISOChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", ISOChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", ISOChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", ISOChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", ISOChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", ISOChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyear\", ISOChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", ISOChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", ISOChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", ISOChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", ISOChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, ISOChronology.getInstance().era().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().year().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", ISOChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", ISOChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", ISOChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", ISOChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", ISOChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", ISOChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", ISOChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", ISOChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", ISOChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", ISOChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", ISOChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, ISOChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+}", "timestamp": 1092696915, "metainfo": ""}