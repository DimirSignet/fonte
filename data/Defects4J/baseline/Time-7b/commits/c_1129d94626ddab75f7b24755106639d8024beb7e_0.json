{"sha": "1129d94626ddab75f7b24755106639d8024beb7e", "log": "Fix generics implementation to retain binary compatibility  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/ReadableDuration.java\n+++ b/JodaTime/src/main/java/org/joda/time/ReadableDuration.java\n  * <p>\n  * Methods that are passed a duration as a parameter will treat <code>null</code>\n  * as a zero length duration.\n+ * <p>\n+ * The {@code compareTo} method is no longer defined in this class in version 2.0.\n+ * Instead, the definition is simply inherited from the {@code Comparable} interface.\n+ * This approach is necessary to preserve binary compatibility.\n+ * The definition of the comparison is ascending order by millisecond duration.\n+ * Implementors are recommended to extend {@code AbstractInstant} instead of this interface.\n  *\n  * @see ReadableInterval\n  * @see ReadablePeriod\n     Period toPeriod();\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Compares this duration with the specified duration based on length.\n-     *\n-     * @param obj  a duration to check against\n-     * @return negative value if this is less, 0 if equal, or positive value if greater\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the given object is not supported\n-     */\n-    int compareTo(ReadableDuration obj);\n+    // Method is no longer defined here as that would break generic backwards compatibility\n+//    /**\n+//     * Compares this duration with the specified duration based on length.\n+//     *\n+//     * @param obj  a duration to check against\n+//     * @return negative value if this is less, 0 if equal, or positive value if greater\n+//     * @throws NullPointerException if the object is null\n+//     * @throws ClassCastException if the given object is not supported\n+//     */\n+//    int compareTo(ReadableDuration obj);\n \n     /**\n      * Is the length of this duration equal to the duration passed in.\n--- a/JodaTime/src/main/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/main/java/org/joda/time/ReadableInstant.java\n  * Methods in your application should be defined using <code>ReadableInstant</code>\n  * as a parameter if the method only wants to read the instant without needing to know\n  * the specific datetime fields.\n+ * <p>\n+ * The {@code compareTo} method is no longer defined in this class in version 2.0.\n+ * Instead, the definition is simply inherited from the {@code Comparable} interface.\n+ * This approach is necessary to preserve binary compatibility.\n+ * The definition of the comparison is ascending order by millisecond instant.\n+ * Implementors are recommended to extend {@code AbstractInstant} instead of this interface.\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n     Instant toInstant();\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Compares this object with the specified object for ascending\n-     * millisecond instant order. This ordering is inconsistent with\n-     * equals, as it ignores the Chronology.\n-     * <p>\n-     * All ReadableInstant instances are accepted.\n-     *\n-     * @param readableInstant  a readable instant to check against\n-     * @return negative value if this is less, 0 if equal, or positive value if greater\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the object type is not supported\n-     */\n-    int compareTo(ReadableInstant readableInstant);\n+    // Method is no longer defined here as that would break generic backwards compatibility\n+//    /**\n+//     * Compares this object with the specified object for ascending\n+//     * millisecond instant order. This ordering is inconsistent with\n+//     * equals, as it ignores the Chronology.\n+//     * <p>\n+//     * All ReadableInstant instances are accepted.\n+//     *\n+//     * @param readableInstant  a readable instant to check against\n+//     * @return negative value if this is less, 0 if equal, or positive value if greater\n+//     * @throws NullPointerException if the object is null\n+//     * @throws ClassCastException if the object type is not supported\n+//     */\n+//    int compareTo(ReadableInstant readableInstant);\n \n     //-----------------------------------------------------------------------\n     /**", "timestamp": 1282092197, "metainfo": ""}