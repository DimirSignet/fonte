{"sha": "b6d1739d6b962bc662e24b9a35e3dc0b6d9dc0ee", "log": "Add deprecated methods for previous users   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n      * <p>\n      * When parsing, this chronology will be set on the parsed datetime.\n      * <p>\n-     * A null chronology means of no-override.\n+     * A null chronology means no-override.\n      * If both an override chronology and an override zone are set, the\n      * override zone will take precedence over the zone in the chronology.\n      * \n         if (iPrinter == null) {\n             throw new UnsupportedOperationException(\"Printing not supported\");\n         }\n+    }\n+\n+    /**\n+     * Deprecated, use withZone(zone).printTo(buf, millis).\n+     * \n+     * @deprecated use withZone(zone).printTo(buf, millis)\n+     */\n+    public void print(StringBuffer buf, long millis, DateTimeZone zone) {\n+        withChronology(null).withZone(zone).printTo(buf, millis);\n+    }\n+\n+    /**\n+     * Deprecated, use withChronology(chrono).printTo(buf, millis).\n+     * \n+     * @deprecated use withChronology(chrono).printTo(buf, millis)\n+     */\n+    public void print(StringBuffer buf, long millis, Chronology chrono) {\n+        withZone(null).withChronology(chrono).printTo(buf, millis);\n+    }\n+\n+    /**\n+     * Deprecated, use withZone(zone).printTo(out, millis).\n+     * \n+     * @deprecated use withZone(zone).printTo(out, millis)\n+     */\n+    public void print(Writer out, long millis, DateTimeZone zone) throws IOException {\n+        withChronology(null).withZone(zone).printTo(out, millis);\n+    }\n+\n+    /**\n+     * Deprecated, use withChronology(chrono).printTo(out, millis).\n+     * \n+     * @deprecated use withChronology(chrono).printTo(out, millis)\n+     */\n+    public void print(Writer out, long millis, Chronology chrono) throws IOException {\n+        withZone(null).withChronology(chrono).printTo(out, millis);\n+    }\n+\n+    /**\n+     * Deprecated, use withZone(zone).print(millis).\n+     * \n+     * @deprecated use withZone(zone).print(millis)\n+     */\n+    public String print(long millis, DateTimeZone zone) {\n+        return withChronology(null).withZone(zone).print(millis);\n+    }\n+\n+    /**\n+     * Deprecated, use withChronology(chrono).print(millis).\n+     * \n+     * @deprecated use withChronology(chrono).print(millis)\n+     */\n+    public String print(long millis, Chronology chrono) {\n+        return withZone(null).withChronology(chrono).print(millis);\n     }\n \n     //-----------------------------------------------------------------------\n         }\n     }\n \n+    /**\n+     * Deprecated, use withChronology(chrono).parseMillis(str).\n+     * \n+     * @deprecated use withChronology(chrono).parseMillis(str)\n+     */\n+    public long parseMillis(String text, Chronology chrono) {\n+        return withZone(null).withChronology(chrono).parseMillis(text);\n+    }\n+\n+    /**\n+     * Deprecated, use withChronology(chrono).parseDateTime(str).\n+     * \n+     * @deprecated use withChronology(chrono).parseDateTime(str)\n+     */\n+    public DateTime parseDateTime(String text, Chronology chrono) {\n+        return withZone(null).withChronology(chrono).parseDateTime(text);\n+    }\n+\n+    /**\n+     * Deprecated, use withChronology(chrono).parseMutableDateTime(str).\n+     * \n+     * @deprecated use withChronology(chrono).parseMutableDateTime(str)\n+     */\n+    public MutableDateTime parseMutableDateTime(String text, Chronology chrono) {\n+        return withZone(null).withChronology(chrono).parseMutableDateTime(text);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Determines the correct chronology to use.", "timestamp": 1108298272, "metainfo": ""}