{"sha": "4eebf636dd3f32f25f4f6335844ddffee631d131", "log": "Improve fraction parsing accuracy.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n         private final int iMinDigits;\n         private final int iMaxDigits;\n \n-        private final long iScaler;\n+        private final long iScalar;\n \n         private transient DateTimeField iParseField;\n \n \n             iMinDigits = minDigits;\n \n-            long scaler;\n+            long scalar;\n             while (true) {\n                 switch (maxDigits) {\n-                default: scaler = 1L; break;\n-                case 1:  scaler = 10L; break;\n-                case 2:  scaler = 100L; break;\n-                case 3:  scaler = 1000L; break;\n-                case 4:  scaler = 10000L; break;\n-                case 5:  scaler = 100000L; break;\n-                case 6:  scaler = 1000000L; break;\n-                case 7:  scaler = 10000000L; break;\n-                case 8:  scaler = 100000000L; break;\n-                case 9:  scaler = 1000000000L; break;\n-                case 10: scaler = 10000000000L; break;\n-                case 11: scaler = 100000000000L; break;\n-                case 12: scaler = 1000000000000L; break;\n-                case 13: scaler = 10000000000000L; break;\n-                case 14: scaler = 100000000000000L; break;\n-                case 15: scaler = 1000000000000000L; break;\n-                case 16: scaler = 10000000000000000L; break;\n-                case 17: scaler = 100000000000000000L; break;\n-                case 18: scaler = 1000000000000000000L; break;\n-                }\n-                if (((iRangeMillis * scaler) / scaler) == iRangeMillis) {\n+                default: scalar = 1L; break;\n+                case 1:  scalar = 10L; break;\n+                case 2:  scalar = 100L; break;\n+                case 3:  scalar = 1000L; break;\n+                case 4:  scalar = 10000L; break;\n+                case 5:  scalar = 100000L; break;\n+                case 6:  scalar = 1000000L; break;\n+                case 7:  scalar = 10000000L; break;\n+                case 8:  scalar = 100000000L; break;\n+                case 9:  scalar = 1000000000L; break;\n+                case 10: scalar = 10000000000L; break;\n+                case 11: scalar = 100000000000L; break;\n+                case 12: scalar = 1000000000000L; break;\n+                case 13: scalar = 10000000000000L; break;\n+                case 14: scalar = 100000000000000L; break;\n+                case 15: scalar = 1000000000000000L; break;\n+                case 16: scalar = 10000000000000000L; break;\n+                case 17: scalar = 100000000000000000L; break;\n+                case 18: scalar = 1000000000000000000L; break;\n+                }\n+                if (((iRangeMillis * scalar) / scalar) == iRangeMillis) {\n                     break;\n                 }\n                 // Overflowed: scale down.\n             }\n \n             iMaxDigits = maxDigits;\n-            iScaler = scaler;\n+            iScalar = scalar;\n         }\n \n         public int estimatePrintedLength() {\n             }\n \n             String str;\n-            long scaled = fraction * iScaler / iRangeMillis;\n+            long scaled = fraction * iScalar / iRangeMillis;\n             if ((scaled & 0x7fffffff) == scaled) {\n                 str = Integer.toString((int)scaled);\n             } else {\n             int limit = Math.min(iMaxDigits, text.length() - position);\n \n             long value = 0;\n-            long n = iRangeMillis;\n+            long n = iRangeMillis * 10;\n             int length = 0;\n             while (length < limit) {\n                 char c = text.charAt(position + length);\n                     break;\n                 }\n                 length++;\n-                if (c != '0') {\n-                    value += (c - '0') * n / 10;\n-                }\n-                n /= 10;\n-            }\n+                long nn = n / 10;\n+                value += (c - '0') * nn;\n+                n = nn;\n+            }\n+\n+            value /= 10;\n \n             if (length == 0) {\n                 return ~position;", "timestamp": 1073152206, "metainfo": ""}