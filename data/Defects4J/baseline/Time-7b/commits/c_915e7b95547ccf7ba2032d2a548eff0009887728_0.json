{"sha": "915e7b95547ccf7ba2032d2a548eff0009887728", "log": "Tidy zone changing functionality   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n      * zone alters the millisecond value of this instant such that it is\n      * relative to the new time zone.\n      *\n-     * @param zone  the time zone to use, null means default zone\n+     * @param newZone  the time zone to use, null means default zone\n      * @see #setZone\n      */\n-    protected void setZoneRetainFields(DateTimeZone zone) {\n-        if (zone == null) {\n-            zone = DateTimeZone.getDefault();\n+    protected void setZoneRetainFields(DateTimeZone newZone) {\n+        newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);\n+        DateTimeZone originalZone = getZone();\n+        originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n+        if (newZone == originalZone) {\n+            return;\n         }\n-        DateTimeZone currentZone = iChronology.getZone();\n-        if (currentZone != zone) {\n-            long millis = iMillis;\n-            millis += currentZone.getOffset(millis);\n-            millis -= zone.getOffsetFromLocal(millis);\n-            // Don't set iChronology and iMillis directly, as it may provide a\n-            // backdoor to immutable subclasses.\n-            setChronology(iChronology.withZone(zone));\n-            setMillis(millis);\n-        }\n+        \n+        long millis = getMillis();\n+        millis += originalZone.getOffset(millis);\n+        millis -= newZone.getOffsetFromLocal(millis);\n+        \n+        setChronology(iChronology.withZone(newZone));\n+        setMillis(millis);\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * the field values the same.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n-     * @param newDateTimeZone  the new time zone, null means default\n+     * @param newZone  the new time zone, null means default\n      * @return a copy of this instant with a different time zone\n      * @see #withZone\n      */\n-    public final DateTime withZoneRetainFields(DateTimeZone newDateTimeZone) {\n-        newDateTimeZone = (newDateTimeZone == null ? DateTimeZone.getDefault() : newDateTimeZone);\n+    public final DateTime withZoneRetainFields(DateTimeZone newZone) {\n+        newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);\n         DateTimeZone originalZone = getZone();\n         originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n-        if (newDateTimeZone == originalZone) {\n+        if (newZone == originalZone) {\n             return this;\n         }\n         \n-        long originalMillis = getMillis();\n-        long newMillis = originalMillis + originalZone.getOffset(originalMillis);\n-        newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);\n-\n-        return new DateTime(newMillis, getChronology().withZone(newDateTimeZone));\n+        long millis = getMillis();\n+        millis += originalZone.getOffset(millis);\n+        millis -= newZone.getOffsetFromLocal(millis);\n+\n+        return new DateTime(millis, getChronology().withZone(newZone));\n     }\n \n     // Date properties", "timestamp": 1090074193, "metainfo": ""}