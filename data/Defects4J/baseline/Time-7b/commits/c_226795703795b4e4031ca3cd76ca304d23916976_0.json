{"sha": "226795703795b4e4031ca3cd76ca304d23916976", "log": "Fix serialization of DateTime/DateMidnight property classes   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n  */\n package org.joda.time;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Locale;\n \n         private static final long serialVersionUID = 257629620L;\n         \n         /** The instant this property is working against */\n-        private final DateMidnight iInstant;\n+        private DateMidnight iInstant;\n         /** The field this property is working against */\n-        private final DateTimeField iField;\n-\n+        private DateTimeField iField;\n+        \n         /**\n          * Constructor.\n          * \n             super();\n             iInstant = instant;\n             iField = field;\n+        }\n+\n+        /**\n+         * Writes the property in a safe serialization format.\n+         */\n+        private void writeObject(ObjectOutputStream oos) throws IOException {\n+            oos.writeObject(iInstant);\n+            oos.writeObject(iField.getType());\n+        }\n+\n+        /**\n+         * Reads the property from a safe serialization format.\n+         */\n+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {\n+            iInstant = (DateMidnight) oos.readObject();\n+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();\n+            iField = type.getField(iInstant.getChronology());\n         }\n \n         //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n  */\n package org.joda.time;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Locale;\n \n         private static final long serialVersionUID = -6983323811635733510L;\n         \n         /** The instant this property is working against */\n-        private final DateTime iInstant;\n+        private DateTime iInstant;\n         /** The field this property is working against */\n-        private final DateTimeField iField;\n+        private DateTimeField iField;\n         \n         /**\n          * Constructor.\n             iField = field;\n         }\n         \n+        /**\n+         * Writes the property in a safe serialization format.\n+         */\n+        private void writeObject(ObjectOutputStream oos) throws IOException {\n+            oos.writeObject(iInstant);\n+            oos.writeObject(iField.getType());\n+        }\n+\n+        /**\n+         * Reads the property from a safe serialization format.\n+         */\n+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {\n+            iInstant = (DateTime) oos.readObject();\n+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();\n+            iField = type.getField(iInstant.getChronology());\n+        }\n+\n         //-----------------------------------------------------------------------\n         /**\n          * Gets the field being used.\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n  */\n package org.joda.time;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Locale;\n \n         private static final long serialVersionUID = -4481126543819298617L;\n         \n         /** The instant this property is working against */\n-        private final MutableDateTime iInstant;\n+        private MutableDateTime iInstant;\n         /** The field this property is working against */\n-        private final DateTimeField iField;\n+        private DateTimeField iField;\n         \n         /**\n          * Constructor.\n             iField = field;\n         }\n         \n+        /**\n+         * Writes the property in a safe serialization format.\n+         */\n+        private void writeObject(ObjectOutputStream oos) throws IOException {\n+            oos.writeObject(iInstant);\n+            oos.writeObject(iField.getType());\n+        }\n+\n+        /**\n+         * Reads the property from a safe serialization format.\n+         */\n+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {\n+            iInstant = (MutableDateTime) oos.readObject();\n+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();\n+            iField = type.getField(iInstant.getChronology());\n+        }\n+\n         //-----------------------------------------------------------------------\n         /**\n          * Gets the field being used.\n--- a/JodaTime/src/test/org/joda/time/TestSerialization.java\n+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.field.DelegatedDurationField;\n+import org.joda.time.field.MillisDurationField;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n \n /**\n  * This class is a Junit unit test for serialization.\n             (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n             + 14L * DateTimeConstants.MILLIS_PER_HOUR\n             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n+\n+    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {\n+        private static final long serialVersionUID = 1878496002811998493L;        \n+        public MockDelegatedDurationField() {\n+            super(MillisDurationField.INSTANCE);\n+        }\n+    }\n+\n     private DateTimeZone originalDateTimeZone = null;\n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n     //-----------------------------------------------------------------------\n     public void testSerializedInstant() throws Exception {\n         Instant test = new Instant();\n-        loadAndCompare(test, \"Instant.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"Instant.dat\", false);\n+        inlineCompare(test, false);\n     }\n \n     public void testSerializedDateTime() throws Exception {\n         DateTime test = new DateTime();\n-        loadAndCompare(test, \"DateTime.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"DateTime.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateTimeProperty() throws Exception {\n+        DateTime.Property test = new DateTime().hourOfDay();\n+        loadAndCompare(test, \"DateTimeProperty.dat\", false);\n+        inlineCompare(test, false);\n     }\n \n     public void testSerializedMutableDateTime() throws Exception {\n         MutableDateTime test = new MutableDateTime();\n-        loadAndCompare(test, \"MutableDateTime.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"MutableDateTime.dat\", false);\n+        inlineCompare(test, false);\n     }\n \n     public void testSerializedDateMidnight() throws Exception {\n         DateMidnight test = new DateMidnight();\n-        loadAndCompare(test, \"DateMidnight.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"DateMidnight.dat\", false);\n+        inlineCompare(test, false);\n     }\n \n     public void testSerializedYearMonthDay() throws Exception {\n         YearMonthDay test = new YearMonthDay();\n-        loadAndCompare(test, \"YearMonthDay.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"YearMonthDay.dat\", false);\n+        inlineCompare(test, false);\n     }\n \n     public void testSerializedTimeOfDay() throws Exception {\n         TimeOfDay test = new TimeOfDay();\n-        loadAndCompare(test, \"TimeOfDay.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"TimeOfDay.dat\", false);\n+        inlineCompare(test, false);\n     }\n \n     public void testSerializedDateTimeZoneUTC() throws Exception {\n         DateTimeZone test = DateTimeZone.UTC;\n-        loadAndCompare(test, \"DateTimeZoneUTC.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"DateTimeZoneUTC.dat\", true);\n+        inlineCompare(test, true);\n     }\n \n     public void testSerializedDateTimeZone() throws Exception {\n         DateTimeZone test = PARIS;\n-        loadAndCompare(test, \"DateTimeZone.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"DateTimeZone.dat\", true);\n+        inlineCompare(test, true);\n     }\n \n     public void testSerializedCopticChronology() throws Exception {\n         CopticChronology test = CopticChronology.getInstance(LONDON);\n-        loadAndCompare(test, \"CopticChronology.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"CopticChronology.dat\", true);\n+        inlineCompare(test, true);\n     }\n \n     public void testSerializedISOChronology() throws Exception {\n         ISOChronology test = ISOChronology.getInstance(PARIS);\n-        loadAndCompare(test, \"ISOChronology.dat\");\n-        inlineCompare(test);\n+        loadAndCompare(test, \"ISOChronology.dat\", true);\n+        inlineCompare(test, true);\n     }\n \n     public void testSerializedGJChronology() throws Exception {\n         GJChronology test = GJChronology.getInstance(TOKYO);\n-        loadAndCompare(test, \"GJChronology.dat\");\n-        inlineCompare(test);\n-    }\n-\n-    private void loadAndCompare(Serializable test, String filename) throws Exception {\n+        loadAndCompare(test, \"GJChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedGregorianChronology() throws Exception {\n+        GregorianChronology test = GregorianChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"GregorianChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedJulianChronology() throws Exception {\n+        JulianChronology test = JulianChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"JulianChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedBuddhistChronology() throws Exception {\n+        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"BuddhistChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedPeriodType() throws Exception {\n+        PeriodType test = PeriodType.dayTime();\n+        loadAndCompare(test, \"PeriodType.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateTimeFieldType() throws Exception {\n+        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();\n+        loadAndCompare(test, \"DateTimeFieldType.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedUnsupportedDateTimeField() throws Exception {\n+        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(\n+                DateTimeFieldType.year(),\n+                UnsupportedDurationField.getInstance(DurationFieldType.years()));\n+        loadAndCompare(test, \"UnsupportedDateTimeField.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    private void loadAndCompare(Serializable test, String filename, boolean same) throws Exception {\n         FileInputStream fis = new FileInputStream(\"src/testdata/\" + filename);\n         ObjectInputStream ois = new ObjectInputStream(fis);\n         Object obj = ois.readObject();\n         ois.close();\n-        assertEquals(test, obj);\n-    }\n-\n-    public void inlineCompare(Serializable test) throws Exception {\n+        if (same) {\n+            assertSame(test, obj);\n+        } else {\n+            assertEquals(test, obj);\n+        }\n+    }\n+\n+    public void inlineCompare(Serializable test, boolean same) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(test);\n         Object obj = ois.readObject();\n         ois.close();\n         \n-        assertEquals(test, obj);\n+        if (same) {\n+            assertSame(test, obj);\n+        } else {\n+            assertEquals(test, obj);\n+        }\n     }\n \n //    //-----------------------------------------------------------------------\n //        store(test, \"YearMonthDay.dat\");\n //    }\n //\n+//    public void testStoreSerializedYearMonthDayProperty() throws Exception {\n+//        YearMonthDay.Property test = new YearMonthDay().monthOfYear();\n+//        store(test, \"YearMonthDayProperty.dat\");\n+//    }\n+//\n //    public void testStoreSerializedTimeOfDay() throws Exception {\n //        TimeOfDay test = new TimeOfDay();\n //        store(test, \"TimeOfDay.dat\");\n //    }\n //\n+//    public void testStoreSerializedTimeOfDayProperty() throws Exception {\n+//        TimeOfDay.Property test = new TimeOfDay().hourOfDay();\n+//        store(test, \"TimeOfDayProperty.dat\");\n+//    }\n+//\n //    public void testStoreSerializedDateTimeZoneUTC() throws Exception {\n //        DateTimeZone test = DateTimeZone.UTC;\n //        store(test, \"DateTimeZoneUTC.dat\");\n //        store(test, \"GJChronology.dat\");\n //    }\n //\n+//    public void testStoreSerializedGregorianChronology() throws Exception {\n+//        GregorianChronology test = GregorianChronology.getInstance(PARIS);\n+//        store(test, \"GregorianChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedJulianChronology() throws Exception {\n+//        JulianChronology test = JulianChronology.getInstance(PARIS);\n+//        store(test, \"JulianChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedBuddhistChronology() throws Exception {\n+//        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);\n+//        store(test, \"BuddhistChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedPeriodType() throws Exception {\n+//        PeriodType test = PeriodType.dayTime();\n+//        store(test, \"PeriodType.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTimeFieldType() throws Exception {\n+//        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();\n+//        store(test, \"DateTimeFieldType.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedUnsupportedDateTimeField() throws Exception {\n+//        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(\n+//                DateTimeFieldType.year(),\n+//                UnsupportedDurationField.getInstance(DurationFieldType.years()));\n+//        store(test, \"UnsupportedDateTimeField.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDurationFieldType() throws Exception {\n+//        DurationFieldType test = DurationFieldType.MINUTES_TYPE;\n+//        store(test, \"DurationFieldType.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedMillisDurationField() throws Exception {\n+//        MillisDurationField test = (MillisDurationField) MillisDurationField.INSTANCE;\n+//        store(test, \"MillisDurationField.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDelegatedDurationField() throws Exception {\n+//        DelegatedDurationField test = new MockDelegatedDurationField();\n+//        store(test, \"DelegatedDurationField.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedUnsupportedDurationField() throws Exception {\n+//        UnsupportedDurationField test = UnsupportedDurationField.getInstance(DurationFieldType.eras());\n+//        store(test, \"UnsupportedDurationField.dat\");\n+//    }\n+//\n+    // format changed (properly defined) in v1.1\n+//    public void testStoreSerializedDateTimeProperty() throws Exception {\n+//        DateTime.Property test = new DateTime().hourOfDay();\n+//        store(test, \"DateTimeProperty.dat\");\n+//    }\n+//\n //    private void store(Serializable test, String filename) throws Exception {\n //        FileOutputStream fos = new FileOutputStream(\"src/testdata/\" + filename);\n //        ObjectOutputStream oos = new ObjectOutputStream(fos);\n-//        oos.writeObject(test);\n+//        try {\n+//            oos.writeObject(test);\n+//        } finally {\n+//            oos.close();\n+//        }\n //        oos.close();\n //    }\n //", "timestamp": 1118445481, "metainfo": ""}