{"sha": "3c10f161032b22649a70a6edc3514b2a40f220e7", "log": "renaming for consistency  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java\n+package org.joda.time.contrib.hibernate;\n+\n+import org.joda.time.Duration;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.DurationConverter;\n+\n+/**\n+ * Converts a org.joda.time.Duration to and from Sql for Hibernate.\n+ * It simply stores the value as a varchar (using Duration.toString),\n+ * and retrieves it using a DurationConverter.\n+ * TODO : are we persisting Chronologies ? is it any relevant ?\n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class PersistentDuration extends AbstractStringBasedJodaType {\n+\n+    public Class returnedClass() {\n+        return Duration.class;\n+    }\n+\n+    protected Object fromNonNullString(String s) {\n+        final DurationConverter converter = ConverterManager.getInstance().getDurationConverter(s);\n+        final long durationMillis = converter.getDurationMillis(s);\n+        return new Duration(durationMillis);\n+    }\n+\n+    protected String toNonNullString(Object value) {\n+        return value.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java\n+package org.joda.time.contrib.hibernate;\n+\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+\n+/**\n+ * Converts a org.joda.time.Period to and from Sql for Hibernate.\n+ * It simply stores and retrieves the value as a varchar, using\n+ * PeriodFormat.\n+ *\n+ * TODO : are we persisting Chronologies ? is it any relevant ?\n+ * TODO : how are we handling conversions that might end up too long for the column ? \n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class PersistentPeriod extends AbstractStringBasedJodaType {\n+\n+    public Class returnedClass() {\n+        return Period.class;\n+    }\n+\n+    protected Object fromNonNullString(String s) {\n+        return PeriodFormat.getDefault().parsePeriod(s);\n+    }\n+\n+    protected String toNonNullString(Object value) {\n+        return PeriodFormat.getDefault().print((Period) value);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDuration.java\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.Assert;\n+import org.hibernate.Session;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.DateTime;\n+import org.joda.time.Duration;\n+import org.joda.time.Period;\n+import org.joda.time.contrib.hibernate.testmodel.SomethingThatLasts;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class TestPersistentDuration extends HibernateTestCase {\n+    protected void setupConfiguration(Configuration cfg) {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml\"));\n+    }\n+\n+    private Duration[] durations = new Duration[]{\n+            Duration.ZERO, new Duration(30), Period.seconds(30).toDurationTo(new DateTime()), Period.months(3).toDurationFrom(new DateTime())\n+    };\n+\n+    public void testSimpleStore() throws SQLException, IOException {\n+        Session session = getSessionFactory().openSession();\n+\n+        for (int i = 0; i < durations.length; i++) {\n+            SomethingThatLasts thing = new SomethingThatLasts();\n+            thing.setId(i);\n+            thing.setName(\"test_\" + i);\n+            thing.setTheDuration(durations[i]);\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i < durations.length; i++) {\n+            session = getSessionFactory().openSession();\n+            SomethingThatLasts lastingThing = (SomethingThatLasts) session.get(SomethingThatLasts.class, new Long(i));\n+\n+            Assert.assertNotNull(lastingThing);\n+            Assert.assertEquals(i, lastingThing.getId());\n+            Assert.assertEquals(\"test_\" + i, lastingThing.getName());\n+            Assert.assertEquals(durations[i], lastingThing.getTheDuration());\n+\n+            session.close();\n+        }\n+\n+        // printSqlQueryResults(\"SELECT * FROM lasting\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentPeriod.java\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.Assert;\n+import org.hibernate.Session;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Period;\n+import org.joda.time.contrib.hibernate.testmodel.SomethingThatHappens;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class TestPersistentPeriod extends HibernateTestCase {\n+    protected void setupConfiguration(Configuration cfg) {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml\"));\n+    }\n+\n+    private Period[] periods = new Period[]{\n+            Period.days(2), Period.seconds(30), Period.months(3),\n+            new Period(30), new Period(4, 35, 40, 141),\n+            new Period(28, 10, 2, 2, 4, 35, 40, 141), new Period(28, 10, 0, 16, 4, 35, 40, 141),\n+            // new Period(new DateTime()),\n+            // new Period(new YearMonthDay()),\n+            // new Period(new YearMonthDay(2005, 12, 25)),\n+            // new Period(new YearMonthDay(2005, 0, 25)), new Period(new YearMonthDay(2005, 13, 25)),\n+            // new Period(new DateTime(CopticChronology.getInstance())            )\n+    };\n+\n+    public void testSimpleStore() throws SQLException, IOException {\n+        Session session = getSessionFactory().openSession();\n+\n+        for (int i = 0; i < periods.length; i++) {\n+            SomethingThatHappens thing = new SomethingThatHappens();\n+            thing.setId(i);\n+            thing.setName(\"test_\" + i);\n+            thing.setThePeriod(periods[i]);\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i < periods.length; i++) {\n+            session = getSessionFactory().openSession();\n+            SomethingThatHappens happeningThing = (SomethingThatHappens) session.get(SomethingThatHappens.class, new Long(i));\n+\n+            Assert.assertNotNull(happeningThing);\n+            Assert.assertEquals(i, happeningThing.getId());\n+            Assert.assertEquals(\"test_\" + i, happeningThing.getName());\n+            Assert.assertEquals(periods[i], happeningThing.getThePeriod());\n+\n+            session.close();\n+        }\n+\n+        // printSqlQueryResults(\"SELECT * FROM happening\");\n+    }\n+\n+}", "timestamp": 1178536592, "metainfo": ""}