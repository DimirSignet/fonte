{"sha": "5d784a86bb1be3be98cdca42740c3096768a18ec", "log": "Add support for changing the current time   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n     protected AbstractDateTime() {\n         super();\n         iChronology = ISOChronology.getInstance();\n-        iMillis = System.currentTimeMillis();\n+        iMillis = DateTimeUtils.currentTimeMillis();\n     }\n \n     /**\n     protected AbstractDateTime(final DateTimeZone zone) {\n         super();\n         iChronology = ISOChronology.getInstance(zone);\n-        iMillis = System.currentTimeMillis();\n+        iMillis = DateTimeUtils.currentTimeMillis();\n     }\n \n     /**\n     protected AbstractDateTime(final Chronology chronology) {\n         super();\n         iChronology = selectChronology(chronology);\n-        iMillis = System.currentTimeMillis();\n+        iMillis = DateTimeUtils.currentTimeMillis();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/AbstractPartialInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractPartialInstant.java\n     protected AbstractPartialInstant(final Chronology chronology) {\n         iChronology = selectChronologyUTC(chronology);\n         iMillis = resetUnsupportedFields\n-            (toLocalTime(System.currentTimeMillis(), chronology, iChronology));\n+            (toLocalTime(DateTimeUtils.currentTimeMillis(), chronology, iChronology));\n     }\n \n     /**\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+/**\n+ * DateTimeUtils provide public utility methods for the datetime library.\n+ * <p>\n+ * DateTimeUtils is thread-safe although shared static variables are used.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public final class DateTimeUtils {\n+\n+    /** The singleton instance of the system millisecond provider */\n+    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();\n+    \n+    /** The millisecond provider currently in use */\n+    private static MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n+\n+    /**\n+     * Restrictive constructor\n+     */\n+    protected DateTimeUtils() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the current time in milliseconds.\n+     * <p>\n+     * By default this returns <code>System.currentTimeMillis()</code>.\n+     * This may be changed using other methods in this class.\n+     * \n+     * @return the current time in milliseconds from 1970-01-01T00:00:00Z\n+     */\n+    public static long currentTimeMillis() {\n+        return cMillisProvider.getMillis();\n+    }\n+\n+    /**\n+     * Resets the current time to return the system time.\n+     * <p>\n+     * This method changes the behaviour of {@link #currentTimeMillis()}.\n+     * Whenever the current time is queried, {@link System#currentTimeMillis()} is used.\n+     */\n+    public static void setCurrentMillisSystem() {\n+        cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n+    }\n+\n+    /**\n+     * Sets the current time to return a fixed millisecond time.\n+     * <p>\n+     * This method changes the behaviour of {@link #currentTimeMillis()}.\n+     * Whenever the current time is queried, the same millisecond time will be returned.\n+     * \n+     * @param fixedMillis  the fixed millisecond time to use\n+     */\n+    public static void setCurrentMillisFixed(long fixedMillis) {\n+        cMillisProvider = new FixedMillisProvider(fixedMillis);\n+    }\n+\n+    /**\n+     * Sets the current time to return the system time plus an offset.\n+     * <p>\n+     * This method changes the behaviour of {@link #currentTimeMillis()}.\n+     * Whenever the current time is queried, {@link System#currentTimeMillis()} is used\n+     * and then offset by adding the millisecond value specified here.\n+     * \n+     * @param offsetMillis  the fixed millisecond time to use\n+     */\n+    public static void setCurrentMillisOffset(long offsetMillis) {\n+        cMillisProvider = new OffsetMillisProvider(offsetMillis);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Base class defining a millisecond provider.\n+     */\n+    static abstract class MillisProvider {\n+        abstract long getMillis();\n+    }\n+\n+    /**\n+     * System millis provider.\n+     */\n+    static class SystemMillisProvider extends MillisProvider {\n+        long getMillis() {\n+            return System.currentTimeMillis();\n+        }\n+    }\n+\n+    /**\n+     * Fixed millisecond provider.\n+     */\n+    static class FixedMillisProvider extends MillisProvider {\n+        private final long iMillis;\n+        FixedMillisProvider(long fixedMillis) {\n+            iMillis = fixedMillis;\n+        }\n+        long getMillis() {\n+            return iMillis;\n+        }\n+    }\n+\n+    /**\n+     * Offset from system millis provider.\n+     */\n+    static class OffsetMillisProvider extends MillisProvider {\n+        private final long iMillis;\n+        OffsetMillisProvider(long offsetMillis) {\n+            iMillis = offsetMillis;\n+        }\n+        long getMillis() {\n+            return System.currentTimeMillis() + iMillis;\n+        }\n+    }\n+\n+}\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n      */\n     public Instant() {\n         super();\n-        iMillis = System.currentTimeMillis();\n+        iMillis = DateTimeUtils.currentTimeMillis();\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n import java.util.Set;\n \n import org.joda.time.Chronology;\n+import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.ISOChronology;\n \n             // simple DST cycle is detected or the last rule is a fixed\n             // offset. If a zone has a fixed offset set more than 100 years\n             // into the future, then it won't be observed.\n-            long now = System.currentTimeMillis();\n+            long now = DateTimeUtils.currentTimeMillis();\n             YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;\n         }\n ", "timestamp": 1081777788, "metainfo": ""}