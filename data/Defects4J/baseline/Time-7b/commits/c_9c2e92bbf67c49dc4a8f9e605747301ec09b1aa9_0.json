{"sha": "9c2e92bbf67c49dc4a8f9e605747301ec09b1aa9", "log": "DateTimeFormatter convenience methods taking an Appendable [2607923]  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n     /**\n      * Prints a ReadableInstant, using the chronology supplied by the instant.\n      *\n-     * @param buf  formatted instant is appended to this buffer\n+     * @param buf  the destination to format to, not null\n      * @param instant  instant to format, null means now\n      */\n     public void printTo(StringBuffer buf, ReadableInstant instant) {\n     /**\n      * Prints a ReadableInstant, using the chronology supplied by the instant.\n      *\n-     * @param out  formatted instant is written out\n+     * @param out  the destination to format to, not null\n      * @param instant  instant to format, null means now\n      */\n     public void printTo(Writer out, ReadableInstant instant) throws IOException {\n         printTo(out, millis, chrono);\n     }\n \n+    /**\n+     * Prints a ReadableInstant, using the chronology supplied by the instant.\n+     *\n+     * @param appendable  the destination to format to, not null\n+     * @param instant  instant to format, null means now\n+     * @since 2.0\n+     */\n+    public void printTo(Appendable appendable, ReadableInstant instant) throws IOException {\n+        appendable.append(print(instant));\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Prints an instant from milliseconds since 1970-01-01T00:00:00Z,\n      * using ISO chronology in the default DateTimeZone.\n      *\n-     * @param buf  formatted instant is appended to this buffer\n+     * @param buf  the destination to format to, not null\n      * @param instant  millis since 1970-01-01T00:00:00Z\n      */\n     public void printTo(StringBuffer buf, long instant) {\n      * Prints an instant from milliseconds since 1970-01-01T00:00:00Z,\n      * using ISO chronology in the default DateTimeZone.\n      *\n-     * @param out  formatted instant is written out\n+     * @param out  the destination to format to, not null\n      * @param instant  millis since 1970-01-01T00:00:00Z\n      */\n     public void printTo(Writer out, long instant) throws IOException {\n         printTo(out, instant, null);\n     }\n \n+    /**\n+     * Prints an instant from milliseconds since 1970-01-01T00:00:00Z,\n+     * using ISO chronology in the default DateTimeZone.\n+     *\n+     * @param appendable  the destination to format to, not null\n+     * @param instant  millis since 1970-01-01T00:00:00Z\n+     * @since 2.0\n+     */\n+    public void printTo(Appendable appendable, long instant) throws IOException {\n+        appendable.append(print(instant));\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Prints a ReadablePartial.\n      * Neither the override chronology nor the override zone are used\n      * by this method.\n      *\n-     * @param buf  formatted partial is appended to this buffer\n+     * @param buf  the destination to format to, not null\n      * @param partial  partial to format\n      */\n     public void printTo(StringBuffer buf, ReadablePartial partial) {\n      * Neither the override chronology nor the override zone are used\n      * by this method.\n      *\n-     * @param out  formatted partial is written out\n+     * @param out  the destination to format to, not null\n      * @param partial  partial to format\n      */\n     public void printTo(Writer out, ReadablePartial partial) throws IOException {\n             throw new IllegalArgumentException(\"The partial must not be null\");\n         }\n         printer.printTo(out, partial, iLocale);\n+    }\n+\n+    /**\n+     * Prints a ReadablePartial.\n+     * <p>\n+     * Neither the override chronology nor the override zone are used\n+     * by this method.\n+     *\n+     * @param appendable  the destination to format to, not null\n+     * @param partial  partial to format\n+     * @since 2.0\n+     */\n+    public void printTo(Appendable appendable, ReadablePartial partial) throws IOException {\n+        appendable.append(print(partial));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testPrint_appendableMethods() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        StringBuilder buf = new StringBuilder();\n+        f.printTo(buf, dt);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", buf.toString());\n+        \n+        buf = new StringBuilder();\n+        f.printTo(buf, dt.getMillis());\n+        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", buf.toString());\n+        \n+        buf = new StringBuilder();\n+        ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate());\n+        assertEquals(\"2004-06-09\", buf.toString());\n+        \n+        buf = new StringBuilder();\n+        try {\n+            ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPrint_chrono_and_zone() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T10:20:30Z\",", "timestamp": 1272799762, "metainfo": ""}