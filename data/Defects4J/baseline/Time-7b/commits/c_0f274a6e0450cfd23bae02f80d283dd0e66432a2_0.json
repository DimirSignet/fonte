{"sha": "0f274a6e0450cfd23bae02f80d283dd0e66432a2", "log": "Fix chronology cache synchronization  Fixes #44", "commit": "\n--- a/src/main/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/src/main/java/org/joda/time/chrono/BuddhistChronology.java\n         if (zone == null) {\n             zone = DateTimeZone.getDefault();\n         }\n-        BuddhistChronology chrono = cCache.get(zone);\n-        if (chrono == null) {\n-            // First create without a lower limit.\n-            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n-            // Impose lower limit and make another BuddhistChronology.\n-            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n-            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n-            cCache.put(zone, chrono);\n+        BuddhistChronology chrono;\n+        synchronized (cCache) {\n+            chrono = cCache.get(zone);\n+            if (chrono == null) {\n+                // First create without a lower limit.\n+                chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);\n+                // Impose lower limit and make another BuddhistChronology.\n+                DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);\n+                chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), \"\");\n+                cCache.put(zone, chrono);\n+            }\n         }\n         return chrono;\n     }\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n         }\n \n         GJChronology chrono;\n-\n-        ArrayList<GJChronology> chronos = cCache.get(zone);\n-        if (chronos == null) {\n-            chronos = new ArrayList<GJChronology>(2);\n-            cCache.put(zone, chronos);\n-        } else {\n-            for (int i=chronos.size(); --i>=0; ) {\n-                chrono = chronos.get(i);\n-                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n-                    cutoverInstant.equals(chrono.getGregorianCutover())) {\n-                    \n-                    return chrono;\n-                }\n-            }\n-        }\n-\n-        if (zone == DateTimeZone.UTC) {\n-            chrono = new GJChronology\n-                (JulianChronology.getInstance(zone, minDaysInFirstWeek),\n-                 GregorianChronology.getInstance(zone, minDaysInFirstWeek),\n-                 cutoverInstant);\n-        } else {\n-            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n-            chrono = new GJChronology\n-                (ZonedChronology.getInstance(chrono, zone),\n-                 chrono.iJulianChronology,\n-                 chrono.iGregorianChronology,\n-                 chrono.iCutoverInstant);\n-        }\n-\n-        chronos.add(chrono);\n-\n+        synchronized (cCache) {\n+            ArrayList<GJChronology> chronos = cCache.get(zone);\n+            if (chronos == null) {\n+                chronos = new ArrayList<GJChronology>(2);\n+                cCache.put(zone, chronos);\n+            } else {\n+                for (int i = chronos.size(); --i >= 0;) {\n+                    chrono = chronos.get(i);\n+                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n+                        cutoverInstant.equals(chrono.getGregorianCutover())) {\n+                        \n+                        return chrono;\n+                    }\n+                }\n+            }\n+            if (zone == DateTimeZone.UTC) {\n+                chrono = new GJChronology\n+                    (JulianChronology.getInstance(zone, minDaysInFirstWeek),\n+                     GregorianChronology.getInstance(zone, minDaysInFirstWeek),\n+                     cutoverInstant);\n+            } else {\n+                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n+                chrono = new GJChronology\n+                    (ZonedChronology.getInstance(chrono, zone),\n+                     chrono.iJulianChronology,\n+                     chrono.iGregorianChronology,\n+                     chrono.iCutoverInstant);\n+            }\n+            chronos.add(chrono);\n+        }\n         return chrono;\n     }\n ", "timestamp": 1374321550, "metainfo": ""}