{"sha": "3b04236d210aa333c49e657c7027128753c7f4b8", "log": "Update tests for isXxx methods   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n         \n         assertEquals(false, test2.isEqual(new MockInstant()));\n         assertEquals(true, test1.isEqual(new MockInstant()));\n-        assertEquals(false, test1.isEqual(null));\n+        \n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + 1).isEqual(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC).isEqual(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - 1).isEqual(null));\n     }\n     \n     public void testIsBefore() {\n         \n         assertEquals(false, test2.isBefore(new MockInstant()));\n         assertEquals(false, test1.isBefore(new MockInstant()));\n-        assertEquals(false, test1.isBefore(null));\n+        \n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + 1).isBefore(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC).isBefore(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC - 1).isBefore(null));\n     }\n     \n     public void testIsAfter() {\n         \n         assertEquals(true, test2.isAfter(new MockInstant()));\n         assertEquals(false, test1.isAfter(new MockInstant()));\n-        assertEquals(false, test1.isAfter(null));\n+        \n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC + 1).isAfter(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC).isAfter(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - 1).isAfter(null));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n         } catch (ClassCastException ex) {}\n     }\n     \n-    public void testIsEqual() {\n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_long() {\n+        assertEquals(false, new DateTime(TEST_TIME1).isEqual(TEST_TIME2));\n+        assertEquals(true, new DateTime(TEST_TIME1).isEqual(TEST_TIME1));\n+        assertEquals(false, new DateTime(TEST_TIME2).isEqual(TEST_TIME1));\n+    }\n+    \n+    public void testIsEqualNow() {\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isEqualNow());\n+        assertEquals(true, new DateTime(TEST_TIME_NOW).isEqualNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isEqualNow());\n+    }\n+    \n+    public void testIsEqual_RI() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test1a = new DateTime(TEST_TIME1);\n         assertEquals(true, test1.isEqual(test1a));\n         \n         assertEquals(false, test2.isEqual(new MockInstant()));\n         assertEquals(true, test1.isEqual(new MockInstant()));\n-        assertEquals(false, test1.isEqual(null));\n-    }\n-    \n-    public void testIsBefore() {\n+        \n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isEqual(null));\n+        assertEquals(true, new DateTime(TEST_TIME_NOW).isEqual(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isEqual(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        assertEquals(true, new DateTime(TEST_TIME1).isBefore(TEST_TIME2));\n+        assertEquals(false, new DateTime(TEST_TIME1).isBefore(TEST_TIME1));\n+        assertEquals(false, new DateTime(TEST_TIME2).isBefore(TEST_TIME1));\n+    }\n+    \n+    public void testIsBeforeNow() {\n+        assertEquals(true, new DateTime(TEST_TIME_NOW - 1).isBeforeNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isBeforeNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isBeforeNow());\n+    }\n+    \n+    public void testIsBefore_RI() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test1a = new DateTime(TEST_TIME1);\n         assertEquals(false, test1.isBefore(test1a));\n         \n         assertEquals(false, test2.isBefore(new MockInstant()));\n         assertEquals(false, test1.isBefore(new MockInstant()));\n-        assertEquals(false, test1.isBefore(null));\n-    }\n-    \n-    public void testIsAfter() {\n+        \n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isBefore(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isBefore(null));\n+        assertEquals(true, new DateTime(TEST_TIME_NOW - 1).isBefore(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        assertEquals(false, new DateTime(TEST_TIME1).isAfter(TEST_TIME2));\n+        assertEquals(false, new DateTime(TEST_TIME1).isAfter(TEST_TIME1));\n+        assertEquals(true, new DateTime(TEST_TIME2).isAfter(TEST_TIME1));\n+    }\n+    \n+    public void testIsAfterNow() {\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfterNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isAfterNow());\n+        assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfterNow());\n+    }\n+    \n+    public void testIsAfter_RI() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test1a = new DateTime(TEST_TIME1);\n         assertEquals(false, test1.isAfter(test1a));\n         \n         assertEquals(true, test2.isAfter(new MockInstant()));\n         assertEquals(false, test1.isAfter(new MockInstant()));\n-        assertEquals(false, test1.isAfter(null));\n+        \n+        assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n         } catch (ClassCastException ex) {}\n     }\n     \n-    public void testIsEqual() {\n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_long() {\n+        assertEquals(false, new Instant(TEST_TIME1).isEqual(TEST_TIME2));\n+        assertEquals(true, new Instant(TEST_TIME1).isEqual(TEST_TIME1));\n+        assertEquals(false, new Instant(TEST_TIME2).isEqual(TEST_TIME1));\n+    }\n+    \n+    public void testIsEqualNow() {\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqualNow());\n+        assertEquals(true, new Instant(TEST_TIME_NOW).isEqualNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqualNow());\n+    }\n+    \n+    public void testIsEqual_RI() {\n         Instant test1 = new Instant(TEST_TIME1);\n         Instant test1a = new Instant(TEST_TIME1);\n         assertEquals(true, test1.isEqual(test1a));\n         \n         assertEquals(false, test2.isEqual(new MockInstant()));\n         assertEquals(true, test1.isEqual(new MockInstant()));\n-        assertEquals(false, test1.isEqual(null));\n-    }\n-    \n-    public void testIsBefore() {\n+        \n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqual(null));\n+        assertEquals(true, new Instant(TEST_TIME_NOW).isEqual(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqual(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        assertEquals(true, new Instant(TEST_TIME1).isBefore(TEST_TIME2));\n+        assertEquals(false, new Instant(TEST_TIME1).isBefore(TEST_TIME1));\n+        assertEquals(false, new Instant(TEST_TIME2).isBefore(TEST_TIME1));\n+    }\n+    \n+    public void testIsBeforeNow() {\n+        assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBeforeNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isBeforeNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBeforeNow());\n+    }\n+    \n+    public void testIsBefore_RI() {\n         Instant test1 = new Instant(TEST_TIME1);\n         Instant test1a = new Instant(TEST_TIME1);\n         assertEquals(false, test1.isBefore(test1a));\n         \n         assertEquals(false, test2.isBefore(new MockInstant()));\n         assertEquals(false, test1.isBefore(new MockInstant()));\n-        assertEquals(false, test1.isBefore(null));\n-    }\n-    \n-    public void testIsAfter() {\n+        \n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBefore(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isBefore(null));\n+        assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBefore(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        assertEquals(false, new Instant(TEST_TIME1).isAfter(TEST_TIME2));\n+        assertEquals(false, new Instant(TEST_TIME1).isAfter(TEST_TIME1));\n+        assertEquals(true, new Instant(TEST_TIME2).isAfter(TEST_TIME1));\n+    }\n+    \n+    public void testIsAfterNow() {\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isAfterNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isAfterNow());\n+        assertEquals(true, new Instant(TEST_TIME_NOW + 1).isAfterNow());\n+    }\n+    \n+    public void testIsAfter_RI() {\n         Instant test1 = new Instant(TEST_TIME1);\n         Instant test1a = new Instant(TEST_TIME1);\n         assertEquals(false, test1.isAfter(test1a));\n         \n         assertEquals(true, test2.isAfter(new MockInstant()));\n         assertEquals(false, test1.isAfter(new MockInstant()));\n-        assertEquals(false, test1.isAfter(null));\n+        \n+        assertEquals(true, new Instant(TEST_TIME_NOW + 1).isAfter(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isAfter(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isAfter(null));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n         \n         assertEquals(false, test2.isEqual(new MockInstant()));\n         assertEquals(true, test1.isEqual(new MockInstant()));\n-        assertEquals(false, test1.isEqual(null));\n+        \n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW + 1).isEqual(null));\n+        assertEquals(true, new MutableDateTime(TEST_TIME_NOW).isEqual(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW - 1).isEqual(null));\n     }\n     \n     public void testIsBefore() {\n         \n         assertEquals(false, test2.isBefore(new MockInstant()));\n         assertEquals(false, test1.isBefore(new MockInstant()));\n-        assertEquals(false, test1.isBefore(null));\n+        \n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW + 1).isBefore(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW).isBefore(null));\n+        assertEquals(true, new MutableDateTime(TEST_TIME_NOW - 1).isBefore(null));\n     }\n     \n     public void testIsAfter() {\n         \n         assertEquals(true, test2.isAfter(new MockInstant()));\n         assertEquals(false, test1.isAfter(new MockInstant()));\n-        assertEquals(false, test1.isAfter(null));\n+        \n+        assertEquals(true, new MutableDateTime(TEST_TIME_NOW + 1).isAfter(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW).isAfter(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW - 1).isAfter(null));\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1093040809, "metainfo": ""}