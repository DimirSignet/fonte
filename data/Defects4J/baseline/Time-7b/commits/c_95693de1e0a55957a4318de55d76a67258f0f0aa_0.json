{"sha": "95693de1e0a55957a4318de55d76a67258f0f0aa", "log": "Detail of Interval implementation derived from testing   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInterval.java\n                 iDuration = ri.iDuration;\n             }\n         }\n+        checkInterval(iStartMillis, iEndMillis);\n     }\n \n     /**\n      */\n     public AbstractInterval(long startInstant, long endInstant) {\n         super();\n+        checkInterval(startInstant, endInstant);\n         iStartMillis = startInstant;\n         iEndMillis = endInstant;\n     }\n                 }\n             }\n         }\n+        checkInterval(iStartMillis, iEndMillis);\n     }\n \n     /**\n             iEndMillis = iStartMillis;\n         } else {\n             iEndMillis = FieldUtils.safeAdd(iStartMillis, duration.getMillis());\n-            iDuration = duration.toDuration();\n-        }\n+            if (duration instanceof Duration) {\n+                iDuration = (Duration) duration;\n+            }\n+        }\n+        checkInterval(iStartMillis, iEndMillis);\n     }\n \n     /**\n             iStartMillis = iEndMillis;\n         } else {\n             iStartMillis = FieldUtils.safeAdd(iEndMillis, -duration.getMillis());\n-            iDuration = duration.toDuration();\n-        }\n+            if (duration instanceof Duration) {\n+                iDuration = (Duration) duration;\n+            }\n+        }\n+        checkInterval(iStartMillis, iEndMillis);\n     }\n \n     /**\n         } else {\n             iEndMillis = period.addTo(iStartMillis, 1, chrono);\n         }\n+        checkInterval(iStartMillis, iEndMillis);\n     }\n \n     /**\n         } else {\n             iStartMillis = period.addTo(iEndMillis, -1, chrono);\n         }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets the start of this interval as the number of milliseconds elapsed\n-     * since 1970-01-01T00:00:00Z.\n-     *\n-     * @return the start of the interval\n+        checkInterval(iStartMillis, iEndMillis);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Validates an interval.\n+     * \n+     * @param start  the start instant in milliseconds\n+     * @param end  the end instant in milliseconds\n+     * @throws IllegalArgumentException if the interval is invalid\n+     */\n+    private void checkInterval(long start, long end) {\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"The end instant must be greater or equal to the start\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the start of this time interval which is inclusive.\n+     *\n+     * @return the start of the time interval,\n+     *  millisecond instant from 1970-01-01T00:00:00Z\n      */\n     public final long getStartMillis() {\n         return iStartMillis;\n     }\n \n     /**\n-     * Gets the start of this time interval as an Instant.\n+     * Gets the start of this time interval, which is inclusive, as an Instant.\n      *\n      * @return the start of the time interval\n      */\n         return iStartInstant;\n     }\n \n-    /**\n-     * Gets the end of this interval as the number of milliseconds elapsed\n-     * since 1970-01-01T00:00:00Z.\n-     *\n-     * @return the start of the interval\n+    /** \n+     * Gets the end of this time interval which is exclusive.\n+     *\n+     * @return the end of the time interval,\n+     *  millisecond instant from 1970-01-01T00:00:00Z\n      */\n     public final long getEndMillis() {\n         return iEndMillis;\n     }\n \n-    /**\n-     * Gets the end of this time interval as an Instant.\n+    /** \n+     * Gets the end of this time interval, which is exclusive, as an Instant.\n      *\n      * @return the end of the time interval\n      */\n     /**\n      * Gets the duration of this time interval in milliseconds.\n      * <p>\n-     * The duration returned will always be precise because it is relative to\n-     * a known date.\n+     * The duration is equal to the end millis minus the start millis.\n      *\n      * @return the duration of the time interval in milliseconds\n      * @throws ArithmeticException if the duration exceeds the capacity of a long\n     /**\n      * Gets the millisecond duration of this time interval.\n      * <p>\n-     * If this interval was constructed using a precise duration then that object will\n-     * be returned. Otherwise a new Duration instance using the MillisType is returned.\n-     *\n-     * @return the precise duration of the time interval\n+     * If this interval was constructed using a Duration then that object will\n+     * be returned. Otherwise a new Duration instance is returned.\n+     *\n+     * @return the millisecond duration of the time interval\n      * @throws ArithmeticException if the duration exceeds the capacity of a long\n      */\n     public final Duration getDuration() {\n         if (iDuration == null) {\n-            if (iStartMillis == iEndMillis) {\n+            long durMillis = getDurationMillis();\n+            if (durMillis == 0) {\n                 iDuration = Duration.ZERO;\n             } else {\n-                iDuration = new Duration(iStartMillis, iEndMillis);\n+                iDuration = new Duration(durMillis);\n             }\n         }\n         return iDuration;\n     //-----------------------------------------------------------------------\n     /**\n      * Does this time interval contain the specified millisecond instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval contains the millisecond\n      */\n     public final boolean contains(long millisInstant) {\n-        return (millisInstant >= getStartMillis() && millisInstant <= getEndMillis());\n-    }\n-    \n+        long thisStart = getStartMillis();\n+        long thisEnd = getEndMillis();\n+        return (millisInstant >= thisStart && millisInstant < thisEnd);\n+    }\n+\n+    /**\n+     * Does this time interval contain the current instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * \n+     * @return true if this time interval contains the current instant\n+     */\n+    public final boolean containsNow() {\n+        return contains(DateTimeUtils.currentTimeMillis());\n+    }\n+\n     /**\n      * Does this time interval contain the specified instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param instant  the instant, null means now\n      * @return true if this time interval contains the instant\n         }\n         return contains(instant.getMillis());\n     }\n-    \n+\n     /**\n      * Does this time interval contain the specified time interval completely.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param interval  the time interval to compare to\n-     * @return true if this interval contains the time interval\n+     * @return true if this time interval contains the time interval\n      * @throws IllegalArgumentException if the interval is null\n      */\n     public final boolean contains(ReadableInterval interval) {\n         }\n         long otherStart = interval.getStartMillis();\n         long otherEnd = interval.getEndMillis();\n-        return \n-            (otherStart >= getStartMillis() && otherStart <= getEndMillis())\n-            && (otherEnd >= getStartMillis() && otherEnd <= getEndMillis());\n-    }\n-    \n+        long thisStart = getStartMillis();\n+        long thisEnd = getEndMillis();\n+        return (otherStart >= thisStart && otherStart < thisEnd && otherEnd <= thisEnd);\n+    }\n+\n     /**\n      * Does this time interval overlap the specified time interval.\n      * <p>\n      * The intervals overlap if at least some of the time interval is in common.\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param interval  the time interval to compare to\n      * @return true if the time intervals overlap\n         }\n         long otherStart = interval.getStartMillis();\n         long otherEnd = interval.getEndMillis();\n-        return \n-            (otherStart >= getStartMillis() && otherStart <= getEndMillis())\n-            || (otherEnd >= getStartMillis() && otherEnd <= getEndMillis());\n-    }\n-    \n+        long thisStart = getStartMillis();\n+        long thisEnd = getEndMillis();\n+        return (thisStart < otherEnd && otherStart < thisEnd);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Is this time interval before the specified millisecond instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval is before the instant\n      */\n     public final boolean isBefore(long millisInstant) {\n-        return (getStartMillis() < millisInstant && getEndMillis() < millisInstant);\n-    }\n-    \n+        return (getEndMillis() <= millisInstant);\n+    }\n+\n+    /**\n+     * Is this time interval before the current instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * \n+     * @return true if this time interval is before the current instant\n+     */\n+    public final boolean isBeforeNow() {\n+        return isBefore(DateTimeUtils.currentTimeMillis());\n+    }\n+\n     /**\n      * Is this time interval before the specified instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param instant  the instant to compare to, null means now\n      * @return true if this time interval is before the instant\n         }\n         return isBefore(instant.getMillis());\n     }\n-    \n+\n     /**\n      * Is this time interval after the specified millisecond instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval is after the instant\n      */\n     public final boolean isAfter(long millisInstant) {\n-        return (getStartMillis() > millisInstant && getEndMillis() > millisInstant);\n-    }\n-    \n+        return (getStartMillis() > millisInstant);\n+    }\n+\n+    /**\n+     * Is this time interval after the current instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * \n+     * @return true if this time interval is after the current instant\n+     */\n+    public final boolean isAfterNow() {\n+        return isAfter(DateTimeUtils.currentTimeMillis());\n+    }\n+\n     /**\n      * Is this time interval after the specified instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param instant  the instant to compare to, null means now\n      * @return true if this time interval is after the instant\n         }\n         return isAfter(instant.getMillis());\n     }\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Get the object as an Interval.\n-     * \n-     * @return an immutable interval object\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get this interval as an <code>Interval</code> object.\n+     * <p>\n+     * This will either typecast this instance, or create a new <code>Interval</code>.\n+     *\n+     * @return the interval as an Interval object\n      */\n     public final Interval toInterval() {\n         if (this instanceof Interval) {\n     }\n \n     /**\n-     * Get the object as a MutableInterval always returning a new instance.\n-     * \n-     * @return a mutable interval object\n+     * Get this time interval as a <code>MutableInterval</code> object.\n+     * <p>\n+     * This will always return a new <code>MutableInterval</code> with the same interval.\n+     *\n+     * @return the time interval as a MutableInterval object\n      */\n     public final MutableInterval toMutableInterval() {\n         return new MutableInterval(this);\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Converts the duration of the interval to a time period using the\n+     * Converts the duration of the interval to a <code>Period</code> using the\n      * All period type.\n      * <p>\n      * This method should be used to exract the field values describing the\n     }\n \n     /**\n-     * Converts the duration of the interval to a time period using the\n+     * Converts the duration of the interval to a <code>Period</code> using the\n      * specified period type.\n      * <p>\n      * This method should be used to exract the field values describing the\n      * The time period may not be precise - if you want the millisecond duration\n      * then you should use {@link #getDuration()}.\n      *\n-     * @param type  the requested type of the period, null means AllType\n+     * @param type  the requested type of the duration, null means AllType\n      * @return a time period derived from the interval\n      */\n     public final Period toPeriod(PeriodType type) {\n      * @return suitable hashcode\n      */\n     public final int hashCode() {\n+        long start = getStartMillis();\n+        long end = getEndMillis();\n         int result = 97;\n-        result = 31 * result + ((int) (getStartMillis() ^ (getStartMillis() >>> 32)));\n-        result = 31 * result + ((int) (getEndMillis() ^ (getEndMillis() >>> 32)));\n+        result = 31 * result + ((int) (start ^ (start >>> 32)));\n+        result = 31 * result + ((int) (end ^ (end >>> 32)));\n         return result;\n     }\n \n         }\n     }\n \n-    /**\n-     * Stores the duration of this time interval.\n-     * <p>\n-     * Subclasses that wish to be immutable should override this method with an\n-     * empty implementation that is protected and final. This also ensures that\n-     * all lower subclasses are also immutable.\n-     *\n-     * @param duration  new duration for interval, null means zero length\n-     */\n-    protected void storeDuration(Duration duration) {\n-        // this method exists so that subclasses can block it\n-        iDuration = duration;\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the duration of this time interval, preserving the start instant.\n             setEndMillis(getStartMillis());\n         } else {\n             setEndMillis(FieldUtils.safeAdd(getStartMillis(), duration.getMillis()));\n-            storeDuration(duration.toDuration());\n+            if (duration instanceof Duration) {\n+                iDuration = (Duration) duration;\n+            }\n         }\n     }\n \n             setStartMillis(getEndMillis());\n         } else {\n             setStartMillis(FieldUtils.safeAdd(getEndMillis(), -duration.getMillis()));\n-            storeDuration(duration.toDuration());\n+            if (duration instanceof Duration) {\n+                iDuration = (Duration) duration;\n+            }\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n /**\n  * Interval is the standard implementation of an immutable time interval.\n  * <p>\n- * The duration of the time interval is always a precise amount of milliseconds\n- * even if a variable length duration was passed into the constructor.\n+ * A time interval represents a period of time between two instants.\n+ * Intervals are inclusive of the start instant and exclusive of the end.\n+ * <p>\n+ * Intervals have a fixed millisecond duration.\n+ * This is the difference between the start and end instants.\n+ * The duration is represented separately by {@link ReadableDuration}.\n+ * As a result, intervals are not comparable.\n+ * To compare the length of two intervals, you should compare their durations.\n+ * <p>\n+ * An interval can also be converted to a {@link ReadablePeriod}.\n+ * This represents the difference between the start and end points in terms of fields\n+ * such as years and days.\n  * <p>\n  * Interval is thread-safe and immutable.\n  *\n     /**\n      * Overridden to do nothing, ensuring this class and all subclasses are immutable.\n      */\n-    protected final void storeDuration(Duration duration) {\n+    protected void setDurationAfterStart(ReadableDuration duration) {\n+    }\n+\n+    /**\n+     * Overridden to do nothing, ensuring this class and all subclasses are immutable.\n+     */\n+    protected void setDurationBeforeEnd(ReadableDuration duration) {\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/MutableInterval.java\n /**\n  * MutableInterval is the standard implementation of a mutable time interval.\n  * <p>\n+ * A time interval represents a period of time between two instants.\n+ * Intervals are inclusive of the start instant and exclusive of the end.\n+ * <p>\n+ * Intervals have a fixed millisecond duration.\n+ * This is the difference between the start and end instants.\n+ * The duration is represented separately by {@link ReadableDuration}.\n+ * As a result, intervals are not comparable.\n+ * To compare the length of two intervals, you should compare their durations.\n+ * <p>\n+ * An interval can also be converted to a {@link ReadablePeriod}.\n+ * This represents the difference between the start and end points in terms of fields\n+ * such as years and days.\n+ * <p>\n  * If performing significant calculations on an interval, it may be faster to\n  * convert an Interval object to a MutableInterval one.\n  * <p>\n--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java\n package org.joda.time;\n \n /** \n- * Readable interface for a time interval.\n+ * Readable interface for an interval of time between two instants.\n  * <p>\n  * A time interval represents a period of time between two instants.\n- * This interval has a duration, represented separately by ReadableDuration.\n+ * Intervals are inclusive of the start instant and exclusive of the end.\n+ * <p>\n+ * Intervals have a fixed millisecond duration.\n+ * This is the difference between the start and end instants.\n+ * The duration is represented separately by {@link ReadableDuration}.\n+ * As a result, intervals are not comparable.\n+ * To compare the length of two intervals, you should compare their durations.\n+ * <p>\n+ * An interval can also be converted to a {@link ReadablePeriod}.\n+ * This represents the difference between the start and end points in terms of fields\n+ * such as years and days.\n  *\n  * @author Sean Geoghegan\n  * @author Brian S O'Neill\n public interface ReadableInterval {\n \n     /**\n-     * Gets the start of this time interval.\n+     * Gets the start of this time interval which is inclusive.\n      *\n      * @return the start of the time interval,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n     long getStartMillis();\n \n     /**\n-     * Gets the start of this time interval as an Instant.\n+     * Gets the start of this time interval, which is inclusive, as an Instant.\n      *\n      * @return the start of the time interval\n      */\n     Instant getStartInstant();\n \n     /** \n-     * Gets the end of this time interval.\n+     * Gets the end of this time interval which is exclusive.\n      *\n      * @return the end of the time interval,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n     long getEndMillis();\n \n     /** \n-     * Gets the end of this time interval as an Instant.\n+     * Gets the end of this time interval, which is exclusive, as an Instant.\n      *\n      * @return the end of the time interval\n      */\n     /**\n      * Gets the duration of this time interval in milliseconds.\n      * <p>\n-     * The duration returned will always be precise because it is relative to\n-     * a known date.\n+     * The duration is equal to the end millis minus the start millis.\n      *\n      * @return the duration of the time interval in milliseconds\n      * @throws ArithmeticException if the duration exceeds the capacity of a long\n     /**\n      * Gets the millisecond duration of this time interval.\n      * <p>\n-     * If this interval was constructed using a precise duration then that object will\n-     * be returned. Otherwise a new Duration instance using the MillisType is returned.\n-     *\n-     * @return the precise duration of the time interval\n+     * If this interval was constructed using a Duration then that object will\n+     * be returned. Otherwise a new Duration instance is returned.\n+     *\n+     * @return the millisecond duration of the time interval\n      * @throws ArithmeticException if the duration exceeds the capacity of a long\n      */\n     Duration getDuration();\n     //-----------------------------------------------------------------------\n     /**\n      * Does this time interval contain the specified millisecond instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval contains the millisecond\n      */\n-    public boolean contains(long millisInstant);\n+    boolean contains(long millisInstant);\n+    \n+    /**\n+     * Does this time interval contain the current instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * \n+     * @return true if this time interval contains the current instant\n+     */\n+    boolean containsNow();\n     \n     /**\n      * Does this time interval contain the specified instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param instant  the instant, null means now\n      * @return true if this time interval contains the instant\n      */\n-    public boolean contains(ReadableInstant instant);\n+    boolean contains(ReadableInstant instant);\n     \n     /**\n      * Does this time interval contain the specified time interval completely.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param interval  the time interval to compare to\n      * @return true if this time interval contains the time interval\n      * @throws IllegalArgumentException if the interval is null\n      */\n-    public boolean contains(ReadableInterval interval);\n+    boolean contains(ReadableInterval interval);\n     \n     /**\n      * Does this time interval overlap the specified time interval.\n      * <p>\n      * The intervals overlap if at least some of the time interval is in common.\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param interval  the time interval to compare to\n      * @return true if the time intervals overlap\n      * @throws IllegalArgumentException if the interval is null\n      */\n-    public boolean overlaps(ReadableInterval interval);\n+    boolean overlaps(ReadableInterval interval);\n     \n     //-----------------------------------------------------------------------\n     /**\n      * Is this time interval before the specified millisecond instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval is before the instant\n      */\n-    public boolean isBefore(long millisInstant);\n+    boolean isBefore(long millisInstant);\n+    \n+    /**\n+     * Is this time interval before the current instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * \n+     * @return true if this time interval is before the current instant\n+     */\n+    boolean isBeforeNow();\n     \n     /**\n      * Is this time interval before the specified instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param instant  the instant to compare to, null means now\n      * @return true if this time interval is before the instant\n      */\n-    public boolean isBefore(ReadableInstant instant);\n+    boolean isBefore(ReadableInstant instant);\n     \n     /**\n      * Is this time interval after the specified millisecond instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval is after the instant\n      */\n-    public boolean isAfter(long millisInstant);\n+    boolean isAfter(long millisInstant);\n+    \n+    /**\n+     * Is this time interval after the current instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * \n+     * @return true if this time interval is after the current instant\n+     */\n+    boolean isAfterNow();\n     \n     /**\n      * Is this time interval after the specified instant.\n+     * <p>\n+     * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n      * @param instant  the instant to compare to, null means now\n      * @return true if this time interval is after the instant\n      */\n-    public boolean isAfter(ReadableInstant instant);\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Get the value as a simple immutable object. This can be useful if you\n-     * don't trust the implementation of the interface to be well-behaved, or\n-     * to get a guaranteed immutable object.\n-     *\n-     * @return the value as an Interval object\n+    boolean isAfter(ReadableInstant instant);\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get this interval as an <code>Interval</code> object.\n+     * <p>\n+     * This will either typecast this instance, or create a new <code>Interval</code>.\n+     *\n+     * @return the interval as an Interval object\n      */\n     Interval toInterval();\n \n     /**\n-     * Get this time interval as a MutableInterval object.\n+     * Get this time interval as a <code>MutableInterval</code> object.\n+     * <p>\n+     * This will always return a new <code>MutableInterval</code> with the same interval.\n      *\n      * @return the time interval as a MutableInterval object\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Converts the duration of the interval to a time period using the\n+     * Converts the duration of the interval to a <code>Period</code> using the\n      * All period type.\n      * <p>\n      * This method should be used to exract the field values describing the\n     Period toPeriod();\n \n     /**\n-     * Converts the duration of the interval to a time period using the\n+     * Converts the duration of the interval to a <code>Period</code> using the\n      * specified period type.\n      * <p>\n      * This method should be used to exract the field values describing the\n      * The time period may not be precise - if you want the millisecond duration\n      * then you should use {@link #getDuration()}.\n      *\n-     * @param type  the requested type of the period, null means AllType\n+     * @param type  the requested type of the duration, null means AllType\n      * @return a time period derived from the interval\n      */\n     Period toPeriod(PeriodType type);\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDuration_Basics.suite());\n         \n         suite.addTest(TestInterval_Constructors.suite());\n-//        suite.addTest(TestInterval_Basics.suite());\n+        suite.addTest(TestInterval_Basics.suite());\n         \n         suite.addTest(TestPeriod_Constructors.suite());\n         suite.addTest(TestPeriod_Basics.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestInterval_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestInterval_Basics.class);\n+    }\n+\n+    public TestInterval_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMillis() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1, test.getStartInstant().getMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+        assertEquals(TEST_TIME2, test.getEndInstant().getMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n+    }\n+\n+    public void testGetDuration() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Interval test1 = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval test2 = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Interval test3 = new Interval(TEST_TIME_NOW, TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test4));\n+        assertEquals(true, test2.equals(test4));\n+        assertEquals(false, test3.equals(test4));\n+        assertEquals(true, test4.equals(test1));\n+        assertEquals(true, test4.equals(test2));\n+        assertEquals(false, test4.equals(test3));\n+        assertEquals(true, test1.hashCode() == test4.hashCode());\n+        assertEquals(true, test2.hashCode() == test4.hashCode());\n+        assertEquals(false, test3.hashCode() == test4.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInterval()));\n+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));\n+    }\n+    \n+    class MockInterval extends AbstractInterval {\n+        public MockInterval() {\n+            super(TEST_TIME1, TEST_TIME2);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_long() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test.contains(TEST_TIME1));\n+        assertEquals(false, test.contains(TEST_TIME1 - 1));\n+        assertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));\n+        assertEquals(false, test.contains(TEST_TIME2));\n+        assertEquals(true, test.contains(TEST_TIME2 - 1));\n+    }\n+\n+    public void testContainsNow() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        assertEquals(true, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n+        assertEquals(false, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);\n+        assertEquals(true, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        assertEquals(false, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n+        assertEquals(true, test.containsNow());\n+    }\n+\n+    public void testContains_RI() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test.contains(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));\n+        assertEquals(false, test.contains(new Instant(TEST_TIME2)));\n+        assertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains((ReadableInstant) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_RInterval() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));\n+        \n+        assertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));\n+        \n+        try {\n+            test.contains((ReadableInterval) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testOverlaps_RInterval() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        \n+        try {\n+            test.overlaps((ReadableInterval) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(TEST_TIME1 - 1));\n+        assertEquals(false, test.isBefore(TEST_TIME1));\n+        assertEquals(false, test.isBefore(TEST_TIME1 + 1));\n+        \n+        assertEquals(false, test.isBefore(TEST_TIME2 - 1));\n+        assertEquals(true, test.isBefore(TEST_TIME2));\n+        assertEquals(true, test.isBefore(TEST_TIME2 + 1));\n+    }\n+\n+    public void testIsBeforeNow() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n+        assertEquals(false, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        assertEquals(true, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);\n+        assertEquals(true, test.isBeforeNow());\n+    }\n+\n+    public void testIsBefore_RI() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(true, test.isBefore(new Instant(TEST_TIME2)));\n+        assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.isBefore(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(TEST_TIME1 - 1));\n+        assertEquals(false, test.isAfter(TEST_TIME1));\n+        assertEquals(false, test.isAfter(TEST_TIME1 + 1));\n+        \n+        assertEquals(false, test.isAfter(TEST_TIME2 - 1));\n+        assertEquals(false, test.isAfter(TEST_TIME2));\n+        assertEquals(false, test.isAfter(TEST_TIME2 + 1));\n+    }\n+\n+    public void testIsAfterNow() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n+        assertEquals(true, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        assertEquals(false, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);\n+        assertEquals(false, test.isAfterNow());\n+    }\n+\n+    public void testIsAfter_RI() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.isAfter(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.toInterval();\n+        assertSame(test, result);\n+    }\n+\n+    public void testToInterval2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.toInterval();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToMutableInterval1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval result = test.toMutableInterval();\n+        assertEquals(test, result);\n+    }\n+\n+    public void testToMutableInterval2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval result = test.toMutableInterval();\n+        assertEquals(test, result);\n+        assertNotSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod();\n+        assertEquals(PeriodType.getAllType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_PeriodType1() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod(null);\n+        assertEquals(PeriodType.getAllType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    public void testToPeriod_PeriodType2() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod(PeriodType.getYearWeekType());\n+        System.err.println(result);\n+        assertEquals(PeriodType.getYearWeekType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(0, result.getMonths());\n+        assertEquals(9, result.getWeeks());\n+        assertEquals(2, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(\"2004-06-09T07:08:09.010/2005-08-13T12:14:16.018\", test.toString());\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n     }\n \n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval test = new Interval(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_long_long3() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new Interval(dt1.getMillis(), dt2.getMillis());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RI_RI1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n     }\n \n     public void testConstructor_RI_RI4() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0);\n         Interval test = new Interval(dt1, (ReadableInstant) null);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(TEST_TIME_NOW, test.getEndMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n     }\n \n+    public void testConstructor_RI_RI6() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval test = new Interval(dt1, dt1);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI7() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new Interval(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RI_RP1() throws Throwable {\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         assertEquals(result, test.getEndMillis());\n     }\n \n+    public void testConstructor_RI_RP8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new Interval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RP_RI1() throws Throwable {\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         assertEquals(TEST_TIME_NOW, test.getEndMillis());\n     }\n \n+    public void testConstructor_RP_RI8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new Interval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RI_RD1() throws Throwable {\n         long result = TEST_TIME_NOW;\n         assertEquals(result, test.getEndMillis());\n     }\n \n+    public void testConstructor_RI_RD5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new Interval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RD_RI1() throws Throwable {\n         long result = TEST_TIME_NOW;\n         Interval test = new Interval(dur, (ReadableInstant) null);\n         assertEquals(result, test.getStartMillis());\n         assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new Interval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n         public boolean contains(long millisInstant) {\n             return false;\n         }\n+        public boolean containsNow() {\n+            return false;\n+        }\n         public boolean contains(ReadableInstant instant) {\n             return false;\n         }\n         public boolean isBefore(long millisInstant) {\n             return false;\n         }\n+        public boolean isBeforeNow() {\n+            return false;\n+        }\n         public boolean isBefore(ReadableInstant instant) {\n             return false;\n         }\n         public boolean isAfter(long millisInstant) {\n+            return false;\n+        }\n+        public boolean isAfterNow() {\n             return false;\n         }\n         public boolean isAfter(ReadableInstant instant) {", "timestamp": 1092212210, "metainfo": ""}