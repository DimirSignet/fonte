{"sha": "89eb4601cadbd1a821510fca05d5d6eb6377c50b", "log": "Fix equals hashcode contract, move and rework rounding code from interface   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n  */\n public class MutableDateTime extends AbstractDateTime\n         implements ReadWritableDateTime, Cloneable, Serializable {\n-    \n-    static final long serialVersionUID = 2852608688135209575L;\n-\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 2852608688135209575L;\n+\n+    /** Rounding is disabled */\n+    public static final int ROUND_NONE = 0;\n+    /** Rounding mode as described by {@link DateTimeField#roundFloor} */\n+    public static final int ROUND_FLOOR = 1;\n+    /** Rounding mode as described by {@link DateTimeField#roundCeiling} */\n+    public static final int ROUND_CEILING = 2;\n+    /** Rounding mode as described by {@link DateTimeField#roundHalfFloor} */\n+    public static final int ROUND_HALF_FLOOR = 3;\n+    /** Rounding mode as described by {@link DateTimeField#roundHalfCeiling} */\n+    public static final int ROUND_HALF_CEILING = 4;\n+    /** Rounding mode as described by {@link DateTimeField#roundHalfEven} */\n+    public static final int ROUND_HALF_EVEN = 5;\n+\n+    /** The field to round on */\n     private DateTimeField iRoundingField;\n+    /** The mode of rounding */\n     private int iRoundingMode;\n \n     // Constructors\n               hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);\n     }\n     \n+    /**\n+     * Gets the field used for rounding this instant, returning null if rounding\n+     * is not enabled.\n+     * \n+     * @param the rounding field\n+     */\n     public DateTimeField getRoundingField() {\n         return iRoundingField;\n     }\n \n+    /**\n+     * Gets the rounding mode for this instant, returning ROUND_NONE if rounding\n+     * is not enabled.\n+     * \n+     * @return the rounding mode constant\n+     */\n     public int getRoundingMode() {\n         return iRoundingMode;\n     }\n \n-    public void setRoundingField(DateTimeField field) {\n-        iRoundingField = field;\n-        if (field != null) {\n-            if (iRoundingMode == ROUND_NONE) {\n-                iRoundingMode = ROUND_FLOOR;\n-            }\n-            setMillis(getMillis());\n-        }\n-    }\n-\n-    public void setRoundingField(DateTimeField field, int mode) {\n-        if (mode < ROUND_NONE || mode > ROUND_HALF_EVEN) {\n+    /**\n+     * Sets the status of rounding to use the specified field and ROUND_FLOOR mode.\n+     * A null field will disable rounding.\n+     * Once set, the instant is then rounded using the new field and mode.\n+     * <p>\n+     * Enabling rounding will cause all subsequent calls to {@link #setMillis(long)}\n+     * to be rounded. This can be used to control the precision of the instant,\n+     * for example by setting a rounding field of minuteOfDay, the seconds and\n+     * milliseconds will always be zero.\n+     *\n+     * @param field rounding field or null to disable\n+     */\n+    public void setRounding(DateTimeField field) {\n+        setRounding(field, MutableDateTime.ROUND_FLOOR);\n+    }\n+\n+    /**\n+     * Sets the status of rounding to use the specified field and mode.\n+     * A null field or mode of ROUND_NONE will disable rounding.\n+     * Once set, the instant is then rounded using the new field and mode.\n+     * <p>\n+     * Enabling rounding will cause all subsequent calls to {@link #setMillis(long)}\n+     * to be rounded. This can be used to control the precision of the instant,\n+     * for example by setting a rounding field of minuteOfDay, the seconds and\n+     * milliseconds will always be zero.\n+     *\n+     * @param field  rounding field or null to disable\n+     * @param mode  rounding mode or ROUND_NONE to disable\n+     * @throws IllegalArgumentException if mode is unknown, no exception if field is null\n+     */\n+    public void setRounding(DateTimeField field, int mode) {\n+        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {\n             throw new IllegalArgumentException(\"Illegal rounding mode: \" + mode);\n         }\n-        iRoundingField = field;\n-        iRoundingMode = mode;\n-        if (field != null && mode != ROUND_NONE) {\n-            setMillis(getMillis());\n-        }\n+        iRoundingField = (mode == ROUND_NONE ? null : field);\n+        iRoundingMode = (field == null ? ROUND_NONE : mode);\n+        setMillis(getMillis());\n     }\n \n     // Millis\n     // Basics\n     //-----------------------------------------------------------------------\n     /**\n-     * Compares this object with the specified object for equality based on the\n-     * millisecond instant, the Chronology, and known rounding behavior.\n-     * <p>\n-     * All ReadableInstant instances are accepted.\n-     * <p>\n-     * See {@link #isEqual(ReadableInstant)} for an equals method that\n-     * ignores the Chronology and rounding behavior.\n-     *\n-     * @param readableInstant  a readable instant to check against\n-     * @return true if millisecond, Chronology, and known rounding behavior are\n-     * equal, false if not or the instant is null or of an incorrect type\n-     */\n-    public boolean equals(Object readableInstant) {\n-        if (this == readableInstant) {\n-            return true;\n-        }\n-        if (super.equals(readableInstant)) {\n-            if (readableInstant instanceof ReadWritableInstant) {\n-                ReadWritableInstant other = (ReadWritableInstant) readableInstant;\n-                if (getRoundingMode() == other.getRoundingMode()) {\n-                    DateTimeField field = getRoundingField();\n-                    if (field == other.getRoundingField() ||\n-                        field != null && field.equals(other.getRoundingField())) {\n-                        \n-                        return true;\n-                    }\n-                }\n-            } else {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n      * Clone this object.\n      *\n      * @return a clone of this object.", "timestamp": 1090110137, "metainfo": ""}