{"sha": "6872249f5cc1eb2afbd4c161ba29428fbd0b1372", "log": "Test add methods to simplify common addition and subtraction of periods Test add method to simplify formatting a datetime   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n import org.joda.time.field.UnsupportedDurationField;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n     public void testToString_String() {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n         assertEquals(\"2002 00\", test.toString(\"yyyy HH\"));\n-        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString(null));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((String) null));\n     }\n \n     public void testToString_String_String() {\n         assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString(null, null));\n     }\n \n+    public void testToString_DTFormatter() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n+        assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((DateTimeFormatter) null));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToInstant() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n         assertSame(test, result);\n     }\n \n+    public void testPlusYears_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plusYears(1);\n+        DateMidnight expected = new DateMidnight(2003, 5, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plusMonths(1);\n+        DateMidnight expected = new DateMidnight(2002, 6, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plusWeeks(1);\n+        DateMidnight expected = new DateMidnight(2002, 5, 10, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plusDays(1);\n+        DateMidnight expected = new DateMidnight(2002, 5, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n     //-----------------------------------------------------------------------    \n     public void testMinus_long() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n         assertEquals(expected, result);\n         \n         result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minusYears(1);\n+        DateMidnight expected = new DateMidnight(2001, 5, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minusMonths(1);\n+        DateMidnight expected = new DateMidnight(2002, 4, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minusWeeks(1);\n+        DateMidnight expected = new DateMidnight(2002, 4, 26, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minusDays(1);\n+        DateMidnight expected = new DateMidnight(2002, 5, 2, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n import org.joda.time.field.UnsupportedDurationField;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for DateTime.\n     public void testToString_String() {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n         assertEquals(\"2002 01\", test.toString(\"yyyy HH\"));\n-        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n     }\n \n     public void testToString_String_Locale() {\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n     }\n \n+    public void testToString_DTFormatter() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW);\n+        assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((DateTimeFormatter) null));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToInstant() {\n         DateTime test = new DateTime(TEST_TIME1);\n         result = test.plus((ReadablePeriod) null);\n         assertSame(test, result);\n     }\n-    \n+\n+    public void testPlusYears_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusYears(1);\n+        DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusMonths(1);\n+        DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusWeeks(1);\n+        DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusDays(1);\n+        DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusHours(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusMinutes(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusSeconds(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.plusMillis(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n     //-----------------------------------------------------------------------    \n     public void testMinus_long() {\n         DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n         assertEquals(expected, result);\n         \n         result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusYears(1);\n+        DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusMonths(1);\n+        DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusWeeks(1);\n+        DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusDays(1);\n+        DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusHours(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusMinutes(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusSeconds(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.minusMillis(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n     public void testToString_String() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n         assertEquals(\"2002 01\", test.toString(\"yyyy HH\"));\n-        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n     }\n \n     public void testToString_String_String() {\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n     }\n \n+    public void testToString_DTFormatter() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW);\n+        assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((DateTimeFormatter) null));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToInstant() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n         assertEquals(new TimeOfDay(23, 0, 0, 0), result);\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testPlus_RP() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());\n         TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n         assertSame(test, result);\n     }\n \n+    public void testPlusHours_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusHours(1);\n+        TimeOfDay expected = new TimeOfDay(2, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusMinutes(1);\n+        TimeOfDay expected = new TimeOfDay(1, 3, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusSeconds(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 4, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusMillis(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 3, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testMinus_RP() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());\n         TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n         assertEquals(expected, result);\n         \n         result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusHours(1);\n+        TimeOfDay expected = new TimeOfDay(0, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusMinutes(1);\n+        TimeOfDay expected = new TimeOfDay(1, 1, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusSeconds(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 2, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusMillis(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n         assertSame(test, result);\n     }\n \n     public void testToString_String() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n         assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(\"yyyy HH\"));\n-        assertEquals(\"T10:20:30.040\", test.toString(null));\n+        assertEquals(\"T10:20:30.040\", test.toString((String) null));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"T10:20:30.040\", test.toString(null, Locale.ENGLISH));\n         assertEquals(\"10 20\", test.toString(\"H m\", null));\n         assertEquals(\"T10:20:30.040\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"T10:20:30.040\", test.toString((DateTimeFormatter) null));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testPlus_RP() {\n         YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n         YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n         assertSame(test, result);\n     }\n \n+    public void testPlusYears_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plusYears(1);\n+        YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plusMonths(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plusDays(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testMinus_RP() {\n         YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n         YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n         assertSame(test, result);\n     }\n \n+    public void testMinusYears_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minusYears(1);\n+        YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minusMonths(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minusDays(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 5, 2, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToDateTimeAtMidnight() {\n         YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n     public void testToString_String() {\n         YearMonthDay test = new YearMonthDay(2002, 6, 9);\n         assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(\"yyyy HH\"));\n-        assertEquals(\"2002-06-09\", test.toString(null));\n+        assertEquals(\"2002-06-09\", test.toString((String) null));\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        YearMonthDay test = new YearMonthDay(2002, 6, 9);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     private void check(YearMonthDay test, int hour, int min, int sec) {\n         assertEquals(hour, test.getYear());\n         assertEquals(min, test.getMonthOfYear());", "timestamp": 1118185462, "metainfo": ""}