{"sha": "0748504f40e397c69d857db3b9ecbeee4c705fc7", "log": "Javadoc API clarifications   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n      * \n      * @param object  the object to convert, must not be null\n      * @return the millisecond instant\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n      */\n     public long getInstantMillis(Object object) {\n         return ((Long) object).longValue();\n      * \n      * @param object  the object to convert, must not be null\n      * @return the millisecond duration\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n      */\n     public long getDurationMillis(Object object) {\n         return ((Long) object).longValue();\n      * @param duration duration to get modified\n      * @param object  the object to convert, must not be null\n      * @return the millisecond duration\n+     * @throws NullPointerException if the duration or object is null\n+     * @throws ClassCastException if the object is an invalid type\n      * @throws IllegalArgumentException if the object is invalid\n      */\n     public void setInto(ReadWritableDuration duration, Object object) {\n     }\n \n     /**\n-     * Selects a suitable duration type for the given object.\n+     * Returns the millis duration type.\n      *\n      * @param object  the object to examine, must not be null\n-     * @return the duration type, never null\n-     * @throws ClassCastException if the object is invalid\n+     * @return the millis duration type\n      */\n     public DurationType getDurationType(Object object) {\n         return DurationType.getMillisType();\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n      * Returns true if the given support object represents a precice\n      * duration. If so, getDurationMillis can be called.\n      *\n-     * @throws ClassCastException if the object is invalid\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n      */\n     public boolean isPrecise(Object object) {\n         return ((ReadableDuration) object).isPrecise();\n      * \n      * @param object  the object to convert, must not be null\n      * @return the millisecond value\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n+     * @throws IllegalArgumentException if the object is invalid\n      */\n     public long getDurationMillis(Object object) {\n         return ((ReadableDuration) object).getTotalMillis();\n      * @param duration duration to get modified\n      * @param object  the object to convert, must not be null\n      * @return the millisecond duration\n-     * @throws ClassCastException if the object is invalid\n+     * @throws NullPointerException if the duration or object is null\n+     * @throws ClassCastException if the object is an invalid type\n+     * @throws IllegalArgumentException if the object is invalid\n      */\n     public void setInto(ReadWritableDuration duration, Object object) {\n         duration.setDuration((ReadableDuration) object);\n      * Selects a suitable duration type for the given object.\n      *\n      * @param object  the object to examine, must not be null\n-     * @return the duration type, never null\n-     * @throws ClassCastException if the object is invalid\n+     * @return the duration type from the readable duration\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n      */\n     public DurationType getDurationType(Object object) {\n         return ((ReadableDuration) object).getDurationType();", "timestamp": 1089155558, "metainfo": ""}