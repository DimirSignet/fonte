{"sha": "7483b2a1c8bb83302eca392a76bfc4503f9fd232", "log": "Add millisOfDay methods  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n         return getChronology().millisOfSecond().get(getLocalMillis());\n     }\n \n+    /**\n+     * Get the millis of day field value.\n+     *\n+     * @return the millis of day\n+     */\n+    public int getMillisOfDay() {\n+        return getChronology().millisOfDay().get(getLocalMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the era field in a copy of this LocalDateTime, leaving this\n         return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));\n     }\n \n+    /**\n+     * Sets the millis of day field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of day changed.\n+     *\n+     * @param millis  the millis of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withMillisOfDay(int millis) {\n+        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Get the era property.\n      */\n     public Property millisOfSecond() {\n         return new Property(this, getChronology().millisOfSecond());\n+    }\n+\n+    /**\n+     * Get the millis of day property\n+     * \n+     * @return the millis of day property\n+     */\n+    public Property millisOfDay() {\n+        return new Property(this, getChronology().millisOfDay());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n         return getChronology().millisOfSecond().get(getLocalMillis());\n     }\n \n+    /**\n+     * Get the millis of day field value.\n+     *\n+     * @return the millis of day\n+     */\n+    public int getMillisOfDay() {\n+        return getChronology().millisOfDay().get(getLocalMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the hour of day field in a copy of this LocalTime, leaving this\n         return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));\n     }\n \n+    /**\n+     * Sets the millis of day field in a copy of this LocalTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of day changed.\n+     *\n+     * @param millis  the millis of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalTime withMillisOfDay(int millis) {\n+        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Get the hour of day field property\n      */\n     public Property millisOfSecond() {\n         return new Property(this, getChronology().millisOfSecond());\n+    }\n+\n+    /**\n+     * Get the millis of day property\n+     * \n+     * @return the millis of day property\n+     */\n+    public Property millisOfDay() {\n+        return new Property(this, getChronology().millisOfDay());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay());\n     }\n \n     //-----------------------------------------------------------------------\n         check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);\n         check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);\n         check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);\n+        check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234);\n         try {\n             test.withMonthOfYear(0);\n             fail();\n         assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay()));\n         \n         try {\n             test.property(null);\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(TEST_TIME_NOW, test.getMillisOfDay());\n     }\n \n     //-----------------------------------------------------------------------\n         check(test.withMinuteOfHour(6), 10, 6, 30, 40);\n         check(test.withSecondOfMinute(6), 10, 20, 6, 40);\n         check(test.withMillisOfSecond(6), 10, 20, 30, 6);\n+        check(test.withMillisOfDay(61234), 0, 1, 1, 234);\n         try {\n             test.withHourOfDay(-1);\n             fail();\n         assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay()));\n         \n         assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime());\n         assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime());", "timestamp": 1144186160, "metainfo": ""}