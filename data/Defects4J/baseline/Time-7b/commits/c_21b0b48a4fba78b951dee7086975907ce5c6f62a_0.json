{"sha": "21b0b48a4fba78b951dee7086975907ce5c6f62a", "log": "Add ordinal date formats to ISODateFormat   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n         wdt, // week date time\n         wdtx, // week date time no millis\n \n+        od,  // ordinal date (same as yd)\n+        odt, // ordinal date time\n+        odtx, // ordinal date time no millis\n+\n         bd,  // basic date\n         bt,  // basic time\n         btx,  // basic time no millis\n         bttx, // basic Ttime no millis\n         bdt, // basic date time\n         bdtx, // basic date time no millis\n+\n+        bod,  // basic ordinal date\n+        bodt, // basic ordinal date time\n+        bodtx, // basic ordinal date time no millis\n \n         bwd,  // basic week date\n         bwdt, // basic week date time\n     }\n \n     /**\n+     * Returns a formatter for a full ordinal date, using a four\n+     * digit year and three digit dayOfYear (yyyy-DDD).\n+     * \n+     * @return a formatter for yyyy-DDD\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter ordinalDate() {\n+        if (od == null) {\n+            od = new DateTimeFormatterBuilder()\n+                .append(yearElement())\n+                .append(dayOfYearElement())\n+                .toFormatter();\n+        }\n+        return od;\n+    }\n+\n+    /**\n+     * Returns a formatter for a full ordinal date and time, using a four\n+     * digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZ\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter ordinalDateTime() {\n+        if (odt == null) {\n+            odt = new DateTimeFormatterBuilder()\n+                .append(ordinalDate())\n+                .append(tTime())\n+                .toFormatter();\n+        }\n+        return odt;\n+    }\n+\n+    /**\n+     * Returns a formatter for a full ordinal date and time without millis,\n+     * using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyy-DDD'T'HH:mm:ssZ\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter ordinalDateTimeNoMillis() {\n+        if (odtx == null) {\n+            odtx = new DateTimeFormatterBuilder()\n+                .append(ordinalDate())\n+                .append(tTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return odtx;\n+    }\n+\n+    /**\n      * Returns a formatter for a full date as four digit weekyear, two digit\n      * week of weekyear, and one digit day of week (xxxx-'W'ww-e).\n      * \n     }\n \n     /**\n+     * Returns a formatter for a full ordinal date, using a four\n+     * digit year and three digit dayOfYear (yyyyDDD).\n+     * \n+     * @return a formatter for yyyyDDD\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter basicOrdinalDate() {\n+        if (bod == null) {\n+            bod = new DateTimeFormatterBuilder()\n+                .appendYear(4, 4)\n+                .appendDayOfYear(3)\n+                .toFormatter();\n+        }\n+        return bod;\n+    }\n+\n+    /**\n+     * Returns a formatter for a full ordinal date and time, using a four\n+     * digit year and three digit dayOfYear (yyyyDDD'T'HHmmss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyyDDD'T'HHmmss.SSSZ\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter basicOrdinalDateTime() {\n+        if (bodt == null) {\n+            bodt = new DateTimeFormatterBuilder()\n+                .append(basicOrdinalDate())\n+                .append(basicTTime())\n+                .toFormatter();\n+        }\n+        return bodt;\n+    }\n+\n+    /**\n+     * Returns a formatter for a full ordinal date and time without millis,\n+     * using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyyDDD'T'HHmmssZ\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter basicOrdinalDateTimeNoMillis() {\n+        if (bodtx == null) {\n+            bodtx = new DateTimeFormatterBuilder()\n+                .append(basicOrdinalDate())\n+                .append(basicTTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return bodtx;\n+    }\n+\n+    /**\n      * Returns a basic formatter for a full date as four digit weekyear, two\n      * digit week of weekyear, and one digit day of week (xxxx'W'wwe).\n      * \n--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n         assertEquals(\"2004-06-09T12:20:30+02:00\", ISODateTimeFormat.dateTimeNoMillis().print(dt));\n     }\n \n+    public void testFormat_ordinalDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-161\", ISODateTimeFormat.ordinalDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-161\", ISODateTimeFormat.ordinalDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-161\", ISODateTimeFormat.ordinalDate().print(dt));\n+    }\n+\n+    public void testFormat_ordinalDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-161T10:20:30.040Z\", ISODateTimeFormat.ordinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-161T11:20:30.040+01:00\", ISODateTimeFormat.ordinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-161T12:20:30.040+02:00\", ISODateTimeFormat.ordinalDateTime().print(dt));\n+    }\n+\n+    public void testFormat_ordinalDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-161T10:20:30Z\", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-161T11:20:30+01:00\", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-161T12:20:30+02:00\", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));\n+    }\n+\n     public void testFormat_weekDate() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekDate().print(dt));\n         assertEquals(\"20040609T122030+0200\", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));\n     }\n \n+    public void testFormat_basicOrdinalDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004161\", ISODateTimeFormat.basicOrdinalDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004161\", ISODateTimeFormat.basicOrdinalDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004161\", ISODateTimeFormat.basicOrdinalDate().print(dt));\n+    }\n+\n+    public void testFormat_basicOrdinalDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004161T102030.040Z\", ISODateTimeFormat.basicOrdinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004161T112030.040+0100\", ISODateTimeFormat.basicOrdinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004161T122030.040+0200\", ISODateTimeFormat.basicOrdinalDateTime().print(dt));\n+    }\n+\n+    public void testFormat_basicOrdinalDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004161T102030Z\", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004161T112030+0100\", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004161T122030+0200\", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));\n+    }\n+\n     public void testFormat_basicWeekDate() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"2004W243\", ISODateTimeFormat.basicWeekDate().print(dt));", "timestamp": 1119914093, "metainfo": ""}