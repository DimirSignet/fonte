{"sha": "ae7e8d97e8b3df62a40927fbbaf799b5ba9c144b", "log": "Remove methods to handle time zone differences   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n-import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.BuddhistChronology;\n  */\n public class TestCalendarConverter extends TestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n-    \n-    private DateTimeZone zone = null;\n \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     public void testGetInstantMillis_Object_Chronology() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar();\n         cal.setTime(new Date(123L));\n-        long millis = CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN);\n-        long expected = 123L + cal.get(Calendar.DST_OFFSET) + cal.get(Calendar.ZONE_OFFSET);\n-        expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);\n-        assertEquals(expected, millis);\n-        assertEquals(cal.get(Calendar.DAY_OF_MONTH), new DateTime(millis).getDayOfMonth());\n-        assertEquals(cal.get(Calendar.HOUR_OF_DAY), new DateTime(millis).getHourOfDay());\n-        assertEquals(cal.get(Calendar.MINUTE), new DateTime(millis).getMinuteOfHour());\n-        \n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN));\n         assertEquals(123L, cal.getTime().getTime());\n     }\n \n     //-----------------------------------------------------------------------\n     public void testGetPartialValues() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar();\n-        cal.setTime(new Date(70, 2, 3, 4, 5, 6));\n+        cal.setTime(new Date(12345678L));\n         TimeOfDay tod = new TimeOfDay();\n-        int[] expected = new int[] {4, 5, 6, 0};\n-        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISOChronology.getInstance());\n+        int[] expected = ISO.get(tod, 12345678L);\n+        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISO);\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Date;\n-import java.util.GregorianCalendar;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n-import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.CopticChronology;\n  */\n public class TestDateConverter extends TestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology ISO;\n     private static Chronology JULIAN;\n+    private static Chronology COPTIC;\n     \n-    private DateTimeZone zone = null;\n-\n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     }\n \n     protected void setUp() throws Exception {\n         JULIAN = JulianChronology.getInstance();\n+        COPTIC = CopticChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     public void testGetInstantMillis_Object_Chronology() throws Exception {\n         Date date = new Date(123L);\n         long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN);\n-        long expected = 123L - date.getTimezoneOffset() * 60000;\n-        expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);\n-        assertEquals(expected, millis);\n-        assertEquals(date.getDate(), new DateTime(millis).getDayOfMonth());\n-        assertEquals(date.getHours(), new DateTime(millis).getHourOfDay());\n-        assertEquals(date.getMinutes(), new DateTime(millis).getMinuteOfHour());\n-        \n-        assertEquals(expected, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));\n+        assertEquals(123L, millis);\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testGetPartialValues() throws Exception {\n-        Date date = new Date(70, 2, 3, 4, 5, 6);\n         TimeOfDay tod = new TimeOfDay();\n-        int[] expected = new int[] {4, 5, 6, 0};\n-        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, date, ISOChronology.getInstance());\n+        int[] expected = COPTIC.get(tod, 12345678L);\n+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), COPTIC);\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n ", "timestamp": 1133744130, "metainfo": ""}