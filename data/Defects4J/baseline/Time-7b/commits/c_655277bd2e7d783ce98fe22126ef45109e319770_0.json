{"sha": "655277bd2e7d783ce98fe22126ef45109e319770", "log": "Adjust smaller fields after a set/add   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n      * @throws IllegalArgumentException if the value is invalid or the maximum instant is reached\n      */\n     public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {\n+        if (valueToAdd == 0) {\n+            return values;\n+        }\n         // there are more efficient algorithms than this (especially for time only fields)\n         // trouble is when dealing with days and months, so we use this technique of\n         // adding/removing one from the larger field at a time\n             long proposed = values[fieldIndex] + valueToAdd;\n             if (proposed <= max) {\n                 values[fieldIndex] = (int) proposed;\n-                return values;\n+                break;\n             }\n             if (nextField == null) {\n                 if (fieldIndex == 0) {\n             long proposed = values[fieldIndex] + valueToAdd;\n             if (proposed >= min) {\n                 values[fieldIndex] = (int) proposed;\n-                return values;\n+                break;\n             }\n             if (nextField == null) {\n                 if (fieldIndex == 0) {\n             values = nextField.add(instant, fieldIndex - 1, values, -1);\n             values[fieldIndex] = getMaximumValue(instant, values);\n         }\n-        return values;\n+        \n+        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields\n     }\n \n     /**\n         int current = values[fieldIndex];\n         int wrapped = FieldUtils.getWrappedValue\n             (current, valueToAdd, getMinimumValue(instant), getMaximumValue(instant));\n-        return set(instant, fieldIndex, values, wrapped);\n+        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public int[] set(PartialInstant instant, int fieldIndex, int[] values, int newValue) {\n-        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(instant), getMaximumValue(instant));\n+        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(instant, values), getMaximumValue(instant, values));\n         values[fieldIndex] = newValue;\n+        \n+        // may need to adjust smaller fields\n+        if (fieldIndex < instant.getFieldSize()) {\n+            for (int i = fieldIndex + 1; i < instant.getFieldSize(); i++) {\n+                DateTimeField field = instant.getField(i);\n+                if (values[i] > field.getMaximumValue(instant, values)) {\n+                    values[i] = field.getMaximumValue(instant, values);\n+                }\n+                if (values[i] < field.getMinimumValue(instant, values)) {\n+                    values[i] = field.getMinimumValue(instant, values);\n+                }\n+            }\n+        }\n         return values;\n     }\n ", "timestamp": 1088292633, "metainfo": ""}