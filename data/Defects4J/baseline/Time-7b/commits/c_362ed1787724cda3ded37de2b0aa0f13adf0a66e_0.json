{"sha": "362ed1787724cda3ded37de2b0aa0f13adf0a66e", "log": "Fix to allow offsets from -00:01 to -00:59  Fixes #42", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n      * This method assumes 60 minutes in an hour, and standard length minutes.\n      * <p>\n      * This factory is a convenient way of constructing zones with a fixed offset.\n-     * The minutes value is always positive and in the range 0 to 59.\n-     * If constructed with the values (-2, 30), the resulting zone is '-02:30'.\n+     * The hours value must be in the range -23 to +23.\n+     * The minutes value must be in the range -59 to +59.\n+     * The following combinations of sign for the hour and minute are possible:\n+     * <pre>\n+     *  Hour    Minute    Example    Result\n+     * \n+     *  +ve     +ve       (2, 15)    +02:15\n+     *  +ve     zero      (2, 0)     +02:00\n+     *  +ve     -ve       (2, -15)   IllegalArgumentException\n+     * \n+     *  zero    +ve       (0, 15)    +00:15\n+     *  zero    zero      (0, 0)     +00:00\n+     *  zero    -ve       (0, -15)   -00:15\n+     * \n+     *  -ve     +ve       (-2, 15)   -02:15\n+     *  -ve     zero      (-2, 0)    -02:00\n+     *  -ve     -ve       (-2, -15)  -02:15\n+     * </pre>\n+     * Note that in versions before 2.3, the minutes had to be zero or positive.\n      * \n      * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n-     * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive\n+     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n      * @return the DateTimeZone object for the offset\n-     * @throws IllegalArgumentException if the offset or minute is too large or too small\n+     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n+     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n         if (hoursOffset == 0 && minutesOffset == 0) {\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n+        if (minutesOffset < -59 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+        }\n+        if (hoursOffset > 0 && minutesOffset < 0) {\n+            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n             int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n+                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);\n             } else {\n                 minutesOffset = hoursInMinutes + minutesOffset;\n             }\n--- a/src/test/java/org/joda/time/TestDateTimeZone.java\n+++ b/src/test/java/org/joda/time/TestDateTimeZone.java\n     public void testForOffsetHoursMinutes_int_int() {\n         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n         assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n-        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n+        \n+        assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\n+        assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(2, -15);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\n+        assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\n+        assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n+        \n         assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n-        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n+        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\n+        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n+        \n         assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n         try {\n             DateTimeZone.forOffsetHoursMinutes(2, 60);\n         } catch (IllegalArgumentException ex) {}\n         try {\n             DateTimeZone.forOffsetHoursMinutes(-2, 60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.forOffsetHoursMinutes(2, -1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {", "timestamp": 1374317361, "metainfo": ""}