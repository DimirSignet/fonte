{"sha": "0c7b06d99dc6ac9dad724e9e3951aa0942593a6e", "log": "Fix getOffsetFromLocal DST gap adjustment.  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n         if (offsetLocal != offsetAdjusted) {\n             // we need to ensure that time is always after the DST gap\n             // this happens naturally for positive offsets, but not for negative\n-            if (offsetLocal < 0) {\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n                 // if we just return offsetAdjusted then the time is pushed\n                 // back before the transition, whereas it should be\n                 // on or after the transition\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java\n         doTest_getOffsetFromLocal(11, 4, 8, 0, \"2007-11-04T08:00:00.000-05:00\", ZONE_NEW_YORK);\n     }\n \n-    public void test_DateTime_plusHour_NewYork_Autumm() {\n+    public void test_DateTime_plusHour_NewYork_Autumn() {\n         DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);\n         assertEquals(\"2007-11-03T18:00:00.000-04:00\", dt.toString());\n         \n         assertEquals(\"2007-11-04T02:00:00.000-05:00\", plus9.toString());\n     }\n \n-    public void test_DateTime_minusHour_NewYork_Autumm() {\n+    public void test_DateTime_minusHour_NewYork_Autumn() {\n         DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);\n         assertEquals(\"2007-11-04T08:00:00.000-05:00\", dt.toString());\n         \n //        doTest_getOffsetFromLocal(10, 28, 8, 0, \"2007-10-28T08:00:00.000+03:00\", ZONE_MOSCOW);\n //    }\n \n-    public void test_DateTime_plusHour_Moscow_Autumm() {\n+    public void test_DateTime_plusHour_Moscow_Autumn() {\n         DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);\n         assertEquals(\"2007-10-27T19:00:00.000+04:00\", dt.toString());\n         \n         assertEquals(\"2007-10-28T03:00:00.000+03:00\", plus9.toString());\n     }\n \n-    public void test_DateTime_minusHour_Moscow_Autumm() {\n+    public void test_DateTime_minusHour_Moscow_Autumn() {\n         DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);\n         assertEquals(\"2007-10-28T09:00:00.000+03:00\", dt.toString());\n         \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    /** America/Guatemala cutover from 23:59 to 00:00 on 2006-09-30 to 2006-10-01 */\n+    private static long CUTOVER_GUATEMALA_AUTUMN = 1159682400000L; // 2006-10-01T00:00:00.000-06:00\n+    private static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(\"America/Guatemala\");\n+\n+    //-----------------------------------------------------------------------\n+    public void test_GuatemataIsCorrect_Autumn() {\n+        /*\n+        long millis = new DateTime(\"2006-09-30T20:00:00.000\", ZONE_GUATEMALA).getMillis();\n+        for (int i=0; i<30; i++) {\n+            System.out.println(new DateTime(millis, ZONE_GUATEMALA));\n+            millis += 15 * 60 * 1000;\n+        }\n+        */\n+\n+        DateTime pre = new DateTime(CUTOVER_GUATEMALA_AUTUMN - 1L, ZONE_GUATEMALA);\n+        assertEquals(\"2006-09-30T23:59:59.999-06:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_GUATEMALA_AUTUMN, ZONE_GUATEMALA);\n+        assertEquals(\"2006-10-01T00:00:00.000-06:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_GUATEMALA_AUTUMN + 1L, ZONE_GUATEMALA);\n+        assertEquals(\"2006-10-01T00:00:00.001-06:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_Guatemata_Autumn() {\n+        doTest_getOffsetFromLocal( 2006, 9,30,23, 0,\n+                                  \"2006-09-30T23:00:00.000-05:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006, 9,30,23,30,\n+                                  \"2006-09-30T23:30:00.000-05:00\", ZONE_GUATEMALA);\n+        \n+        doTest_getOffsetFromLocal( 2006, 9,30,23, 0,\n+                                  \"2006-09-30T23:00:00.000-05:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006, 9,30,23,30,\n+                                  \"2006-09-30T23:30:00.000-05:00\", ZONE_GUATEMALA);\n+        \n+        doTest_getOffsetFromLocal( 2006,10, 1, 0, 0,\n+                                  \"2006-10-01T00:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 0,30,\n+                                  \"2006-10-01T00:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 1, 0,\n+                                  \"2006-10-01T01:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 1,30,\n+                                  \"2006-10-01T01:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 2, 0,\n+                                  \"2006-10-01T02:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 2,30,\n+                                  \"2006-10-01T02:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 3, 0,\n+                                  \"2006-10-01T03:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 3,30,\n+                                  \"2006-10-01T03:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 4, 0,\n+                                  \"2006-10-01T04:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 4,30,\n+                                  \"2006-10-01T04:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 5, 0,\n+                                  \"2006-10-01T05:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 5,30,\n+                                  \"2006-10-01T05:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 6, 0,\n+                                  \"2006-10-01T06:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 6,30,\n+                                  \"2006-10-01T06:30:00.000-06:00\", ZONE_GUATEMALA);\n+    }\n+\n+    public void test_DateTime_plusHour_Guatemata_Autumn() {\n+        DateTime dt = new DateTime(2006, 9, 30, 20, 0, 0, 0, ZONE_GUATEMALA);\n+        assertEquals(\"2006-09-30T20:00:00.000-05:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.plusHours(1);\n+        assertEquals(\"2006-09-30T21:00:00.000-05:00\", plus1.toString());\n+        DateTime plus2 = dt.plusHours(2);\n+        assertEquals(\"2006-09-30T22:00:00.000-05:00\", plus2.toString());\n+        DateTime plus3 = dt.plusHours(3);\n+        assertEquals(\"2006-09-30T23:00:00.000-05:00\", plus3.toString());\n+        DateTime plus4 = dt.plusHours(4);\n+        assertEquals(\"2006-09-30T23:00:00.000-06:00\", plus4.toString());\n+        DateTime plus5 = dt.plusHours(5);\n+        assertEquals(\"2006-10-01T00:00:00.000-06:00\", plus5.toString());\n+        DateTime plus6 = dt.plusHours(6);\n+        assertEquals(\"2006-10-01T01:00:00.000-06:00\", plus6.toString());\n+        DateTime plus7 = dt.plusHours(7);\n+        assertEquals(\"2006-10-01T02:00:00.000-06:00\", plus7.toString());\n+    }\n+\n+    public void test_DateTime_minusHour_Guatemata_Autumn() {\n+        DateTime dt = new DateTime(2006, 10, 1, 2, 0, 0, 0, ZONE_GUATEMALA);\n+        assertEquals(\"2006-10-01T02:00:00.000-06:00\", dt.toString());\n+        \n+        DateTime minus1 = dt.minusHours(1);\n+        assertEquals(\"2006-10-01T01:00:00.000-06:00\", minus1.toString());\n+        DateTime minus2 = dt.minusHours(2);\n+        assertEquals(\"2006-10-01T00:00:00.000-06:00\", minus2.toString());\n+        DateTime minus3 = dt.minusHours(3);\n+        assertEquals(\"2006-09-30T23:00:00.000-06:00\", minus3.toString());\n+        DateTime minus4 = dt.minusHours(4);\n+        assertEquals(\"2006-09-30T23:00:00.000-05:00\", minus4.toString());\n+        DateTime minus5 = dt.minusHours(5);\n+        assertEquals(\"2006-09-30T22:00:00.000-05:00\", minus5.toString());\n+        DateTime minus6 = dt.minusHours(6);\n+        assertEquals(\"2006-09-30T21:00:00.000-05:00\", minus6.toString());\n+        DateTime minus7 = dt.minusHours(7);\n+        assertEquals(\"2006-09-30T20:00:00.000-05:00\", minus7.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+\n //    public void test_toDateMidnight_SaoPaolo() {\n //        // RFE: 1684259\n //        DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n-    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n-        DateTime dt = new DateTime(2007, month, day, hour, min, 0, 0, DateTimeZone.UTC);\n+    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min,\n+                                           String expected, DateTimeZone zone)\n+    {\n+        doTest_getOffsetFromLocal(2007, month, day, hour, min, expected, zone);\n+    }\n+\n+    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min,\n+                                           String expected, DateTimeZone zone)\n+    {\n+        DateTime dt = new DateTime(year, month, day, hour, min, 0, 0, DateTimeZone.UTC);\n         int offset = zone.getOffsetFromLocal(dt.getMillis());\n         DateTime res = new DateTime(dt.getMillis() - offset, zone);\n         assertEquals(res.toString(), expected, res.toString());", "timestamp": 1200765051, "metainfo": ""}