{"sha": "4db6cb0fc688b11f32b52651a683560d92640d80", "log": "Move zone info load to ZoneInfoProvider (allows ZoneInfoCompiler to be dropped from jar)   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java\n package org.joda.time.tz;\n \n import java.io.BufferedReader;\n-import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n             dout.writeShort(((Short)idToIndex.get(id)).shortValue());\n             id = ((DateTimeZone)entry.getValue()).getID();\n             dout.writeShort(((Short)idToIndex.get(id)).shortValue());\n-        }\n-    }\n-\n-    /**\n-     * @param zimap gets filled with string id to string id mappings\n-     */\n-    static void readZoneInfoMap(DataInputStream din, Map zimap) throws IOException {\n-        // Read the string pool.\n-        int size = din.readUnsignedShort();\n-        String[] pool = new String[size];\n-        for (int i=0; i<size; i++) {\n-            pool[i] = din.readUTF().intern();\n-        }\n-\n-        // Read the mappings.\n-        size = din.readUnsignedShort();\n-        for (int i=0; i<size; i++) {\n-            try {\n-                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);\n-            } catch (ArrayIndexOutOfBoundsException e) {\n-                throw new IOException(\"Corrupt zone info map\");\n-            }\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java\n+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java\n  * @since 1.0\n  */\n public class ZoneInfoProvider implements Provider {\n-    private static Map loadZoneInfoMap(InputStream in) throws IOException {\n-        Map map = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n-        DataInputStream din = new DataInputStream(in);\n-        try {\n-            ZoneInfoCompiler.readZoneInfoMap(din, map);\n-        } finally {\n-            try {\n-                din.close();\n-            } catch (IOException e) {\n-            }\n-        }\n-        map.put(\"UTC\", new SoftReference(DateTimeZone.UTC));\n-        return map;\n-    }\n-\n+\n+    /** The directory where the files are held. */\n     private final File iFileDir;\n+    /** The resource path. */\n     private final String iResourcePath;\n+    /** The class loader to use. */\n     private final ClassLoader iLoader;\n-\n-    // Maps ids to strings or SoftReferences to DateTimeZones.\n+    /** Maps ids to strings or SoftReferences to DateTimeZones. */\n     private final Map iZoneInfoMap;\n \n     /**\n         iZoneInfoMap = loadZoneInfoMap(openResource(\"ZoneInfoMap\"));\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * If an error is thrown while loading zone data, uncaughtException is\n      * called to log the error and null is returned for this and all future\n      * requests.\n+     * \n+     * @param id  the id to load\n+     * @return the loaded zone\n      */\n     public synchronized DateTimeZone getZone(String id) {\n         if (id == null) {\n         return getZone((String)obj);\n     }\n \n+    /**\n+     * Gets a list of all the available zone ids.\n+     * \n+     * @return the zone ids\n+     */\n     public synchronized Set getAvailableIDs() {\n         return Collections.unmodifiableSet(iZoneInfoMap.keySet());\n     }\n \n     /**\n-     * Called if an exception is thrown from getZone while loading zone\n-     * data.\n-     */\n-    protected void uncaughtException(Exception e) {\n+     * Called if an exception is thrown from getZone while loading zone data.\n+     * \n+     * @param ex  the exception\n+     */\n+    protected void uncaughtException(Exception ex) {\n         Thread t = Thread.currentThread();\n-        t.getThreadGroup().uncaughtException(t, e);\n-    }\n-\n+        t.getThreadGroup().uncaughtException(t, ex);\n+    }\n+\n+    /**\n+     * Opens a resource from file or classpath.\n+     * \n+     * @param name  the name to open\n+     * @return the input stream\n+     * @throws IOException if an error occurs\n+     */\n     private InputStream openResource(String name) throws IOException {\n         InputStream in;\n         if (iFileDir != null) {\n                 in = ClassLoader.getSystemResourceAsStream(path);\n             }\n             if (in == null) {\n-                StringBuffer buf = new StringBuffer(40);\n-                buf.append(\"Resource not found: \\\"\");\n-                buf.append(path);\n-                buf.append(\"\\\" ClassLoader: \");\n-                buf.append(iLoader != null ? iLoader.toString() : \"system\");\n+                StringBuffer buf = new StringBuffer(40)\n+                    .append(\"Resource not found: \\\"\")\n+                    .append(path)\n+                    .append(\"\\\" ClassLoader: \")\n+                    .append(iLoader != null ? iLoader.toString() : \"system\");\n                 throw new IOException(buf.toString());\n             }\n         }\n         return in;\n     }\n \n+    /**\n+     * Loads the time zone data for one id.\n+     * \n+     * @param id  the id to load\n+     * @return the zone\n+     */\n     private DateTimeZone loadZoneData(String id) {\n         InputStream in = null;\n         try {\n             }\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Loads the zone info map.\n+     * \n+     * @param in  the input stream\n+     * @return the map\n+     */\n+    private static Map loadZoneInfoMap(InputStream in) throws IOException {\n+        Map map = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n+        DataInputStream din = new DataInputStream(in);\n+        try {\n+            readZoneInfoMap(din, map);\n+        } finally {\n+            try {\n+                din.close();\n+            } catch (IOException e) {\n+            }\n+        }\n+        map.put(\"UTC\", new SoftReference(DateTimeZone.UTC));\n+        return map;\n+    }\n+\n+    /**\n+     * Reads the zone info map from file.\n+     * \n+     * @param din  the input stream\n+     * @param zimap  gets filled with string id to string id mappings\n+     */\n+    private static void readZoneInfoMap(DataInputStream din, Map zimap) throws IOException {\n+        // Read the string pool.\n+        int size = din.readUnsignedShort();\n+        String[] pool = new String[size];\n+        for (int i=0; i<size; i++) {\n+            pool[i] = din.readUTF().intern();\n+        }\n+\n+        // Read the mappings.\n+        size = din.readUnsignedShort();\n+        for (int i=0; i<size; i++) {\n+            try {\n+                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);\n+            } catch (ArrayIndexOutOfBoundsException e) {\n+                throw new IOException(\"Corrupt zone info map\");\n+            }\n+        }\n+    }\n+\n }", "timestamp": 1110043272, "metainfo": ""}