{"sha": "a478fe86d9dc2833cc7a80d8868a596a081d5d41", "log": "ZonedChronology fix to roundFloor/roundCeiling (regression from 1.4) [1887104] Bug affected DST cutover in Autumn for time fields (not date fields)  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n         }\n \n         public long roundFloor(long instant) {\n-            long localInstant = iZone.convertUTCToLocal(instant);\n-            localInstant = iField.roundFloor(localInstant);\n-            return iZone.convertLocalToUTC(localInstant, false);\n+            if (iTimeField) {\n+                int offset = getOffsetToAdd(instant);\n+                instant = iField.roundFloor(instant + offset);\n+                return instant - offset;\n+            } else {\n+                long localInstant = iZone.convertUTCToLocal(instant);\n+                localInstant = iField.roundFloor(localInstant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n+            }\n         }\n \n         public long roundCeiling(long instant) {\n-            long localInstant = iZone.convertUTCToLocal(instant);\n-            localInstant = iField.roundCeiling(localInstant);\n-            return iZone.convertLocalToUTC(localInstant, false);\n+            if (iTimeField) {\n+                int offset = getOffsetToAdd(instant);\n+                instant = iField.roundCeiling(instant + offset);\n+                return instant - offset;\n+            } else {\n+                long localInstant = iZone.convertUTCToLocal(instant);\n+                localInstant = iField.roundCeiling(localInstant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n+            }\n         }\n \n         public long remainder(long instant) {\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-03-11T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-03-11T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-03-11T01:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-03-11T03:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-03-12T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-03-12T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T03:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T04:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T01:31:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T03:31:00.000-04:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */\n     private static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00\n \n         assertEquals(\"2007-11-04T01:00:00.000-04:00\", minus8.toString());\n         DateTime minus9 = dt.minusHours(9);\n         assertEquals(\"2007-11-04T00:00:00.000-04:00\", minus9.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-11-04T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-11-04T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.500-04:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:40.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.500-05:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:40.000-05:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-11-05T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-11-05T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T02:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:31:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:31:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.500-04:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:30:41.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.500-05:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:30:41.000-05:00\", rounded.toString());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1202428803, "metainfo": ""}