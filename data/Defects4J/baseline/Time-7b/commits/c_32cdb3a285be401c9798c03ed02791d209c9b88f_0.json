{"sha": "32cdb3a285be401c9798c03ed02791d209c9b88f", "log": "Remove protected create method.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInstant.java\n         return (chrono != null ? chrono.getDateTimeZone() : null);\n     }\n \n-    /**\n-     * Creates a new instance of this class.\n-     * <p>\n-     * The returned object will be a new instance of the implementation.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n-     *\n-     * @param instant  the new instant, from 1970-01-01T00:00:00Z\n-     * @param chrono  the new chronology\n-     * @return a new instance of this class\n-     */\n-    protected abstract ReadableInstant create(long instant, Chronology chrono);\n-    \n     // Accessors\n     //-----------------------------------------------------------------------\n     /**\n             throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n         }\n         return field.get(getMillis());\n-    }\n-\n-    // Updates\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets a copy of this instant with different millis.\n-     * <p>\n-     * The returned object will be a new instance of this type.\n-     * Only the millis will change, the chronology and time zone are kept.\n-     * If the millis is the same, <code>this</code> will be returned.\n-     *\n-     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n-     * @return a copy of this instant with different millis\n-     */\n-    public final ReadableInstant toCopy(long newMillis) {\n-        return create(newMillis, getChronology());\n-    }\n-    \n-    /**\n-     * Gets a copy of this instant with a different chronology.\n-     * <p>\n-     * The returned object will be a new instance of this type.\n-     * Only the chronology will change, the millis are kept.\n-     * If the chronology is the same, <code>this</code> will be returned.\n-     *\n-     * @param newChronology  the new chronology\n-     * @return a copy of this instant with a different chronology\n-     */\n-    public final ReadableInstant toCopy(Chronology newChronology) {\n-        return create(getMillis(), newChronology);\n     }\n \n     // Conversion\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n // Import for @link support\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.format.ISODateTimeFormat;\n+import org.joda.time.property.DateTimeFieldProperty;\n \n /**\n  * DateTime is the standard implementation of an unmodifiable datetime class.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Creates a new instance of this class.\n-     * <p>\n-     * The returned object will be a new instance of the implementation.\n+     * Gets a copy of this instant with different millis.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * Only the millis will change, the chronology and time zone are kept.\n      * Immutable subclasses may return <code>this</code> if appropriate.\n      *\n-     * @param instant  the new instant, from 1970-01-01T00:00:00Z\n-     * @param chrono  the new chronology\n-     * @return a new instance of this class\n+     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n+     * @return a copy of this instant with different millis\n+     */\n+    public ReadableInstant toCopy(long newMillis) {\n+        return newMillis == getMillis() ? this : new DateTime(newMillis, getChronology());\n+    }\n+    \n+    /**\n+     * Gets a copy of this instant with a different chronology.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * Only the chronology will change, the millis are kept.\n+     * Immutable subclasses may return <code>this</code> if appropriate.\n+     *\n+     * @param newChronology  the new chronology\n+     * @return a copy of this instant with a different chronology\n      * @throws IllegalArgumentException if the chronology is null\n      */\n-    protected final ReadableInstant create(final long instant, final Chronology chrono) {\n-        return createDateTime(instant, chrono);\n-    }\n-    \n-    /**\n-     * Creates a new instance of this class.\n-     * <p>\n-     * The returned object will be a new instance of DateTime, or a subclass.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n-     *\n-     * @param instant  the new instant, from 1970-01-01T00:00:00Z\n-     * @param chrono  the new chronology\n-     * @return a new instance of this class\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    protected DateTime createDateTime(final long instant, final Chronology chrono) {\n-        if (chrono == null) {\n+    public ReadableInstant toCopy(Chronology newChronology) {\n+        if (newChronology == null) {\n             throw new IllegalArgumentException(\"The Chronology must not be null\");\n         }\n-        if (instant == getMillis() && chrono == getChronology()) {\n-            return this;\n-        }\n-        return new DateTime(instant, chrono);\n+        return newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology);\n     }\n     \n     // Date properties\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n     }\n \n     /**\n-     * Creates a new instance of this class.\n-     * <p>\n-     * The returned object will be a new instance of the implementation.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n-     *\n-     * @param instant  the new instant, from 1970-01-01T00:00:00Z\n-     * @param chrono  the new chronology\n-     * @return a new instance of this class\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    protected ReadableInstant create(long instant, Chronology chrono) {\n-        // ignore chrono\n-        if (instant == getMillis()) {\n-            return this;\n-        }\n-        return new Instant(instant);\n+     * Gets a copy of this instant with different millis, as an Instant.\n+     * <p>\n+     * The returned object will be either be a new Instant or\n+     * <code>this</code>.\n+     *\n+     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n+     * @return a copy of this instant with different millis\n+     */\n+    public ReadableInstant toCopy(long newMillis) {\n+        return newMillis == iMillis ? this : new Instant(newMillis);\n+    }\n+    \n+    /**\n+     * Since Instant does not support chronologies, this method always returns\n+     * <code>this</code>.\n+     *\n+     * @param newChronology  ignored\n+     * @return this\n+     */\n+    public ReadableInstant toCopy(Chronology newChronology) {\n+        return this;\n     }\n     \n     // Accessors\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.convert.InstantConverter;\n import org.joda.time.format.ISODateTimeFormat;\n+import org.joda.time.property.MutableDateTimeFieldProperty;\n \n /**\n  * MutableDateTime is the standard implementation of a modifiable datetime class.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Creates a new instance of this class.\n-     * <p>\n-     * The returned object will be a new instance of the implementation.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n-     *\n-     * @param instant  the new instant, from 1970-01-01T00:00:00Z\n-     * @param chrono  the new chronology\n-     * @return a new instance of this class\n+     * Gets a copy of this instant with different millis.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * Only the millis will change, the chronology and time zone are kept.\n+     *\n+     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n+     * @return a copy of this instant with different millis\n+     */\n+    public ReadableInstant toCopy(long newMillis) {\n+        return new MutableDateTime(newMillis, getChronology());\n+    }\n+    \n+    /**\n+     * Gets a copy of this instant with a different chronology.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * Only the chronology will change, the millis are kept.\n+     *\n+     * @param newChronology  the new chronology\n+     * @return a copy of this instant with a different chronology\n      * @throws IllegalArgumentException if the chronology is null\n      */\n-    protected ReadableInstant create(long instant, Chronology chrono) {\n-        if (chrono == null) {\n+    public ReadableInstant toCopy(Chronology newChronology) {\n+        if (newChronology == null) {\n             throw new IllegalArgumentException(\"The Chronology must not be null\");\n         }\n-        return new MutableDateTime(instant, chrono);\n+        return new MutableDateTime(getMillis(), newChronology);\n     }\n     \n     // Millis\n     }\n \n     /**\n-     * Add an amount of time to the date.\n+     * Add an amount of time to the datetime.\n      * \n      * @param duration  duration to add.\n      */\n     }\n \n     /**\n-     * Add an amount of time to the date.\n+     * Add an amount of time to the datetime.\n      * \n      * @param duration  duration to add.\n      * @param scalar  direction and amount to add, which may be negative\n     }\n \n     /**\n-     * Add an amount of time to the date.\n+     * Add an amount of time to the datetime.\n      * <p>\n      * The recognised object types are defined in {@link ConverterManager} and\n      * include ReadableDuration, and Long.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Set the week of the year to the specified value.\n+     * Set the weekyear to the specified value.\n      *\n      * @param weekyear  the weekyear\n      * @throws IllegalArgumentException if the value is invalid", "timestamp": 1073096890, "metainfo": ""}