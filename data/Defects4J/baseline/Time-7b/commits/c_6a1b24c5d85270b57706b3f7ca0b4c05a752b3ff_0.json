{"sha": "6a1b24c5d85270b57706b3f7ca0b4c05a752b3ff", "log": "Add methods to calculate Julian Day", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeUtils.java\n+++ b/src/main/java/org/joda/time/DateTimeUtils.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2012 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));\n     }\n \n+    //-------------------------------------------------------------------------\n+    /**\n+     * Calculates the astronomical Julian Day for an instant.\n+     * <p>\n+     * The <a href=\"http://en.wikipedia.org/wiki/Julian_day\">Julian day</a> is a well-known\n+     * system of time measurement for scientific use by the astronomy community.\n+     * It expresses the interval of time in days and fractions of a day since\n+     * January 1, 4713 BC (Julian) Greenwich noon.\n+     * <p>\n+     * Each day starts at midday (not midnight) and time is expressed as a fraction.\n+     * Thus the fraction 0.25 is 18:00. equal to one quarter of the day from midday to midday.\n+     * <p>\n+     * Note that this method has nothing to do with the day-of-year.\n+     * \n+     * @param epochMillis  the epoch millis from 1970-01-01Z\n+     * @return the astronomical Julian Day represented by the specified instant\n+     * @since 2.2\n+     */\n+    public static final double toJulianDay(long epochMillis) {\n+        // useful links\n+        // http://en.wikipedia.org/wiki/Julian_day#cite_note-13 - Wikipedia\n+        // http://aa.usno.navy.mil/data/docs/JulianDate.php\" - USNO\n+        // http://users.zoominternet.net/~matto/Java/Julian%20Date%20Converter.htm - Julian Date Converter by Matt Oltersdorf\n+        // http://ssd.jpl.nasa.gov/tc.cgi#top - CalTech\n+        double epochDay = epochMillis / 86400000d;\n+        return epochDay + 2440587.5d;\n+    }\n+\n+    /**\n+     * Calculates the astronomical Julian Day Number for an instant.\n+     * <p>\n+     * The {@link #toJulianDay(long)} method calculates the astronomical Julian Day\n+     * with a fraction based on days starting at midday.\n+     * This method calculates the variant where days start at midnight.\n+     * JDN 0 is used for the date equivalent to Monday January 1, 4713 BC (Julian).\n+     * Thus these days start 12 hours before those of the fractional Julian Day.\n+     * <p>\n+     * Note that this method has nothing to do with the day-of-year.\n+     * \n+     * @param epochMillis  the epoch millis from 1970-01-01Z\n+     * @return the astronomical Julian Day represented by the specified instant\n+     * @since 2.2\n+     */\n+    public static final long toJulianDayNumber(long epochMillis) {\n+        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);\n+    }\n+\n+    /**\n+     * Creates a date-time from a Julian Day.\n+     * <p>\n+     * Returns the {@code DateTime} object equal to the specified Julian Day.\n+     * \n+     * @param julianDay  the Julian Day\n+     * @return the epoch millis from 1970-01-01Z\n+     * @since 2.2\n+     */\n+    public static final long fromJulianDay(double julianDay) {\n+        double epochDay = julianDay - 2440587.5d;\n+        return (long) (epochDay * 86400000d);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * A millisecond provider, allowing control of the system clock.\n--- a/src/test/java/org/joda/time/TestDateTimeUtils.java\n+++ b/src/test/java/org/joda/time/TestDateTimeUtils.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2012 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n \n /**\n  * This class is a Junit unit test for DateTimeUtils.\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void test_julianDay() {\n+        DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC);\n+        \n+        assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d));\n+        \n+        base = base.plusHours(6);\n+        assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d));\n+        \n+        base = base.plusHours(6);\n+        assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d));\n+        \n+        base = base.plusHours(6);\n+        assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d));\n+        \n+        base = base.plusHours(6);\n+        assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d));\n+        \n+        base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC);\n+        assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        \n+        base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC());\n+        assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d));\n+        \n+        base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC());\n+        assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);\n+        assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis()));\n+        assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d));\n+    }\n+\n }", "timestamp": 1346454550, "metainfo": ""}