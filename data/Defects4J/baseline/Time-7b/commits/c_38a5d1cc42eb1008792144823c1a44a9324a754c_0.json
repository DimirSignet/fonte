{"sha": "38a5d1cc42eb1008792144823c1a44a9324a754c", "log": "Fewer substrings created during integer parsing, resulting in performance improvements.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n             }\n \n             int value;\n-            if (length == 3 && negative) {\n-                value = -FormatUtils.parseTwoDigits(text, position + 1);\n-            } else if (length == 2) {\n+            if (length >= 9) {\n+                // Since value may exceed max, use stock parser which checks\n+                // for this.\n+                value = Integer.parseInt\n+                    (text.substring(position, position += length));\n+            } else {\n+                int i = position;\n                 if (negative) {\n-                    value = text.charAt(position + 1) - '0';\n+                    i++;\n+                }\n+                value = text.charAt(i++) - '0';\n+                position += length;\n+                while (i < position) {\n+                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n+                }\n+                if (negative) {\n                     value = -value;\n-                } else {\n-                    value = FormatUtils.parseTwoDigits(text, position);\n-                }\n-            } else if (length == 1 && !negative) {\n-                value = text.charAt(position) - '0';\n-            } else {\n-                String sub = text.substring(position, position + length);\n-                try {\n-                    value = Integer.parseInt(sub);\n-                } catch (NumberFormatException e) {\n-                    return ~position;\n                 }\n             }\n \n             bucket.saveField(iField, value);\n-\n-            return position + length;\n+            return position;\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java\n             }\n \n             int value;\n-            if (length == 3 && negative) {\n-                value = -FormatUtils.parseTwoDigits(text, position + 1);\n-            } else if (length == 2) {\n+            if (length >= 9) {\n+                // Since value may exceed max, use stock parser which checks\n+                // for this.\n+                value = Integer.parseInt\n+                    (text.substring(position, position += length));\n+            } else {\n+                int i = position;\n                 if (negative) {\n-                    value = text.charAt(position + 1) - '0';\n+                    i++;\n+                }\n+                value = text.charAt(i++) - '0';\n+                position += length;\n+                while (i < position) {\n+                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n+                }\n+                if (negative) {\n                     value = -value;\n-                } else {\n-                    value = FormatUtils.parseTwoDigits(text, position);\n-                }\n-            } else if (length == 1 && !negative) {\n-                value = text.charAt(position) - '0';\n-            } else {\n-                String sub = text.substring(position, position + length);\n-                try {\n-                    value = Integer.parseInt(sub);\n-                } catch (NumberFormatException e) {\n-                    return ~position;\n-                }\n-            }\n-\n+                }\n+            }\n+            \n             setFieldValue(duration, value);\n-            position += length;\n-\n+                \n             if (position >= 0 && iSuffix != null) {\n                 position = iSuffix.parse(text, position);\n             }\n-\n+                \n             return position;\n         }\n ", "timestamp": 1073285609, "metainfo": ""}