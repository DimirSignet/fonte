{"sha": "0973b46039c4db0be3a969d36c220dee1e1fb4da", "log": "Fix time-zone names in non-English locales on JDK1.6 [3412910]", "commit": "\n--- a/src/main/java/org/joda/time/tz/DefaultNameProvider.java\n+++ b/src/main/java/org/joda/time/tz/DefaultNameProvider.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         Map<String, Object> byNameKeyCache = byIdCache.get(id);\n         if (byNameKeyCache == null) {\n             byIdCache.put(id, byNameKeyCache = createCache());\n-            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n-            for (int i=0; i<zoneStrings.length; i++) {\n-                String[] set = zoneStrings[i];\n-                if (set != null && set.length == 5 && id.equals(set[0])) {\n-                    byNameKeyCache.put(set[2], new String[] {set[2], set[1]});\n-                    // need to handle case where summer and winter have the same\n-                    // abbreviation, such as EST in Australia [1716305]\n-                    // we handle this by appending \"-Summer\", cf ZoneInfoCompiler\n-                    if (set[2].equals(set[4])) {\n-                        byNameKeyCache.put(set[4] + \"-Summer\", new String[] {set[4], set[3]});\n-                    } else {\n-                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});\n-                    }\n-                    break;\n-                }\n+            \n+            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();\n+            String[] setEn = null;\n+            for (String[] strings : zoneStringsEn) {\n+              if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n+                setEn = strings;\n+                break;\n+              }\n+            }\n+            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n+            String[] setLoc = null;\n+            for (String[] strings : zoneStringsLoc) {\n+              if (strings != null && strings.length == 5 && id.equals(strings[0])) {\n+                setLoc = strings;\n+                break;\n+              }\n+            }\n+            \n+            if (setEn != null && setLoc != null) {\n+              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});\n+              // need to handle case where summer and winter have the same\n+              // abbreviation, such as EST in Australia [1716305]\n+              // we handle this by appending \"-Summer\", cf ZoneInfoCompiler\n+              if (setEn[2].equals(setEn[4])) {\n+                  byNameKeyCache.put(setEn[4] + \"-Summer\", new String[] {setLoc[4], setLoc[3]});\n+              } else {\n+                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});\n+              }\n             }\n         }\n-\n-        return (String[])byNameKeyCache.get(nameKey);\n+        return (String[]) byNameKeyCache.get(nameKey);\n     }\n \n     private HashMap createCache() {\n--- a/src/test/java/org/joda/time/TestDateTimeZone.java\n+++ b/src/test/java/org/joda/time/TestDateTimeZone.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.PrintStream;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AllPermission;\n import java.security.CodeSource;\n import java.security.Permissions;\n import java.security.Policy;\n import java.security.ProtectionDomain;\n+import java.text.DateFormatSymbols;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.Locale;\n         assertEquals(\"GMT\", zone.getNameKey(TEST_TIME_WINTER));\n     }\n \n+    static final boolean JDK6;\n+    static {\n+      boolean jdk6 = true;\n+      try {\n+        DateFormatSymbols.class.getMethod(\"getInstance\", new Class[] {Locale.class});\n+      } catch (Exception ex) {\n+        jdk6 = false;\n+      } \n+      JDK6 = jdk6;\n+    }\n+\n     public void testGetShortName() {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"BST\", zone.getShortName(TEST_TIME_SUMMER));\n         assertEquals(\"GMT\", zone.getShortName(TEST_TIME_WINTER));\n         assertEquals(\"BST\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n     }\n-            \n+\n+    public void testGetShortName_berlin() {\n+        DateTimeZone berlin = DateTimeZone.forID(\"Europe/Berlin\");\n+        assertEquals(\"CET\", berlin.getShortName(TEST_TIME_WINTER, Locale.ENGLISH));\n+        assertEquals(\"CEST\", berlin.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n+        if (JDK6) {\n+          assertEquals(\"MEZ\", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));\n+          assertEquals(\"MESZ\", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));\n+        } else {\n+          assertEquals(\"CET\", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));\n+          assertEquals(\"CEST\", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));\n+        }\n+    }\n+\n     public void testGetShortNameProviderName() {\n         assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, \"Europe/London\", \"BST\"));\n         assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, \"BST\"));\n         assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, \"Europe/London\", null));\n         assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null));\n     }\n-    \n+\n     public void testGetShortNameNullKey() {\n         DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n         assertEquals(\"Europe/London\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n     }\n-    \n+\n     public void testGetName() {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER));\n         assertEquals(\"Greenwich Mean Time\", zone.getName(TEST_TIME_WINTER));\n         assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n-        \n-    }\n-    \n+    }\n+\n+    public void testGetName_berlin() {\n+      DateTimeZone berlin = DateTimeZone.forID(\"Europe/Berlin\");\n+      assertEquals(\"Central European Time\", berlin.getName(TEST_TIME_WINTER, Locale.ENGLISH));\n+      assertEquals(\"Central European Summer Time\", berlin.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n+      if (JDK6) {\n+        assertEquals(\"Mitteleurop\\u00e4ische Zeit\", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));\n+        assertEquals(\"Mitteleurop\\u00e4ische Sommerzeit\", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));\n+      } else {\n+        assertEquals(\"Zentraleurop\\u00e4ische Zeit\", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));\n+        assertEquals(\"Zentraleurop\\u00e4ische Sommerzeit\", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));\n+      }\n+  }\n+\n     public void testGetNameProviderName() {\n         assertEquals(null, DateTimeZone.getNameProvider().getName(null, \"Europe/London\", \"BST\"));\n         assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, null, \"BST\"));\n         assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, \"Europe/London\", null));\n         assertEquals(null, DateTimeZone.getNameProvider().getName(null, null, null));\n     }\n-    \n+\n     public void testGetNameNullKey() {\n         DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n         assertEquals(\"Europe/London\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n     }\n-    \n+\n     static class MockDateTimeZone extends DateTimeZone {\n         public MockDateTimeZone(String id) {\n             super(id);", "timestamp": 1317040996, "metainfo": ""}