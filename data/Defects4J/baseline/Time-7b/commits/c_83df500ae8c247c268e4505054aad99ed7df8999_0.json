{"sha": "83df500ae8c247c268e4505054aad99ed7df8999", "log": "If a parsed datetime is illegal due to field range or time zone offset transition, thrown exception includes text of datetime being parsed.  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n     private final String iStringValue;\n     private final Number iLowerBound;\n     private final Number iUpperBound;\n+    private String iMessage;\n \n     /**\n      * Constructor.\n         iStringValue = null;\n         iLowerBound = lowerBound;\n         iUpperBound = upperBound;\n+        iMessage = super.getMessage();\n     }\n \n     /**\n         iStringValue = null;\n         iLowerBound = lowerBound;\n         iUpperBound = upperBound;\n+        iMessage = super.getMessage();\n     }\n \n     /**\n         iStringValue = null;\n         iLowerBound = lowerBound;\n         iUpperBound = upperBound;\n+        iMessage = super.getMessage();\n     }\n \n     /**\n         iNumberValue = null;\n         iLowerBound = null;\n         iUpperBound = null;\n+        iMessage = super.getMessage();\n     }\n \n     /**\n         iNumberValue = null;\n         iLowerBound = null;\n         iUpperBound = null;\n+        iMessage = super.getMessage();\n     }\n \n     /**\n         iNumberValue = null;\n         iLowerBound = null;\n         iUpperBound = null;\n+        iMessage = super.getMessage();\n     }\n \n     //-----------------------------------------------------------------------\n         return iUpperBound;\n     }\n \n+    public String getMessage() {\n+        return iMessage;\n+    }\n+\n+    /**\n+     * Provide additional detail by prepending a message to the existing\n+     * message. A colon is separator is automatically inserted between the\n+     * messages.\n+     */\n+    public void prependMessage(String message) {\n+        if (iMessage == null) {\n+            iMessage = message;\n+        } else if (message != null) {\n+            iMessage = message + \": \" + iMessage;\n+        }\n+    }\n }\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear);\n+        DateTimeParserBucket bucket = new DateTimeParserBucket\n+            (instantLocal, chrono, iLocale, iPivotYear);\n         int newPos = iParser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis());\n+        instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getZone() == null) {\n             int parsedOffset = bucket.getOffset();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n         int newPos = iParser.parseInto(bucket, text, 0);\n         if (newPos >= 0) {\n             if (newPos >= text.length()) {\n-                return bucket.computeMillis(true);\n+                return bucket.computeMillis(true, text);\n             }\n         } else {\n             newPos = ~newPos;\n         int newPos = iParser.parseInto(bucket, text, 0);\n         if (newPos >= 0) {\n             if (newPos >= text.length()) {\n-                long millis = bucket.computeMillis(true);\n+                long millis = bucket.computeMillis(true, text);\n                 if (iOffsetParsed && bucket.getZone() == null) {\n                     int parsedOffset = bucket.getOffset();\n                     DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n         int newPos = iParser.parseInto(bucket, text, 0);\n         if (newPos >= 0) {\n             if (newPos >= text.length()) {\n-                long millis = bucket.computeMillis(true);\n+                long millis = bucket.computeMillis(true, text);\n                 if (iOffsetParsed && bucket.getZone() == null) {\n                     int parsedOffset = bucket.getOffset();\n                     DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n+import org.joda.time.IllegalFieldValueException;\n \n /**\n  * DateTimeParserBucket is an advanced class, intended mainly for parser\n      * @throws IllegalArgumentException if any field is out of range\n      */\n     public long computeMillis() {\n-        return computeMillis(false);\n+        return computeMillis(false, null);\n     }\n     \n     /**\n      * @throws IllegalArgumentException if any field is out of range\n      */\n     public long computeMillis(boolean resetFields) {\n+        return computeMillis(resetFields, null);\n+    }\n+\n+    /**\n+     * Computes the parsed datetime by setting the saved fields.\n+     * This method is idempotent, but it is not thread-safe.\n+     *\n+     * @param resetFields false by default, but when true, unsaved field values are cleared\n+     * @param text optional text being parsed, to be included in any error message\n+     * @return milliseconds since 1970-01-01T00:00:00Z\n+     * @throws IllegalArgumentException if any field is out of range\n+     */\n+    public long computeMillis(boolean resetFields, String text) {\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n         if (iSavedFieldsShared) {\n             iSavedFieldsShared = false;\n         }\n         sort(savedFields, count);\n-        \n+\n         long millis = iMillis;\n-        for (int i=0; i<count; i++) {\n-            millis = savedFields[i].set(millis, resetFields);\n+        try {\n+            for (int i=0; i<count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n         }\n         \n         if (iZone == null) {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                throw new IllegalArgumentException\n-                    (\"Illegal instant due to time zone offset transition\");\n+                String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n             }\n         }\n         ", "timestamp": 1143416478, "metainfo": ""}