{"sha": "736bbfc91494b4c30bcd9d22092dcc2d2b8820d1", "log": "Add Instant persistance by BIGINT and TIMESTAMP  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInstantAsBigInt.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Instant;\n+\n+public class TestPersistentInstantAsBigInt extends HibernateTestCase\n+{\n+    private Instant[] writeReadTimes = new Instant[]\n+    {\n+        new Instant(0),\n+\t\tnew Instant(1000),\n+\t\tnew Instant(1000000)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            ThingWithInstant thing = new ThingWithInstant();\n+            thing.setId(i);\n+            thing.setInstant(writeReadTime);\n+\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            ThingWithInstant thingReread = (ThingWithInstant)session.get(ThingWithInstant.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - thing#'\" + i + \"'not found\", thingReread);\n+            assertNotNull(\"get failed - returned null\", thingReread.getInstant());\n+\n+\t\t\tInstant reReadTime = thingReread.getInstant();\n+\t\t\tif (writeReadTime.getMillis() != reReadTime.getMillis())\n+\t\t\t{\n+\t\t\t\tfail(\"get failed - returned different date. expected \" + writeReadTime + \" was \" + thingReread.getInstant());\n+\t\t\t}\n+\t\t}\n+\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/thingWithInstantAsBigInt.hbm.xml\"));\n+\t}\n+}", "timestamp": 1257638126, "metainfo": ""}