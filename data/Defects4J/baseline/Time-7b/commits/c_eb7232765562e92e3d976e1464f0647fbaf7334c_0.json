{"sha": "eb7232765562e92e3d976e1464f0647fbaf7334c", "log": "initial version usertype for hibernate3 to persist datetime   ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import org.hibernate.Hibernate;\n+import org.hibernate.HibernateException;\n+import org.hibernate.usertype.UserType;\n+import org.joda.time.DateTime;\n+\n+import java.io.Serializable;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+/**\n+ * Persist {@link org.joda.time.DateTime} via hibernate\n+ *\n+ * @author Mario Ivankovits (mario@ops.co.at)\n+ */\n+public class PersistentDateTime implements UserType\n+{\n+    private static final int[] SQL_TYPES = new int[]\n+    {\n+        Types.TIMESTAMP,\n+    };\n+\n+    public int[] sqlTypes()\n+    {\n+        return SQL_TYPES;\n+    }\n+\n+    public Class returnedClass()\n+    {\n+        return DateTime.class;\n+    }\n+\n+    public boolean equals(Object x, Object y) throws HibernateException\n+    {\n+        if (x == y)\n+        {\n+            return true;\n+        }\n+        if (x == null || y == null)\n+        {\n+            return false;\n+        }\n+        DateTime dtx = (DateTime) x;\n+        DateTime dty = (DateTime) y;\n+\n+        return dtx.equals(dty);\n+    }\n+\n+    public int hashCode(Object object) throws HibernateException\n+    {\n+        return object.hashCode();\n+    }\n+\n+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException\n+    {\n+        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, strings[0]);\n+        if (timestamp == null)\n+        {\n+            return null;\n+        }\n+\n+        return new DateTime(timestamp);\n+    }\n+\n+    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n+    {\n+        if (value == null)\n+        {\n+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+        }\n+        else\n+        {\n+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);\n+        }\n+    }\n+\n+    public Object deepCopy(Object value) throws HibernateException\n+    {\n+        if (value == null)\n+        {\n+            return null;\n+        }\n+\n+        return new DateTime(value);\n+    }\n+\n+    public boolean isMutable()\n+    {\n+        return false;\n+    }\n+\n+    public Serializable disassemble(Object value) throws HibernateException\n+    {\n+        return (Serializable) value;\n+    }\n+\n+    public Object assemble(Serializable cached, Object value) throws HibernateException\n+    {\n+        return cached;\n+    }\n+\n+    public Object replace(Object original, Object target, Object owner) throws HibernateException\n+    {\n+        return original;\n+    }\n+}", "timestamp": 1111339789, "metainfo": ""}