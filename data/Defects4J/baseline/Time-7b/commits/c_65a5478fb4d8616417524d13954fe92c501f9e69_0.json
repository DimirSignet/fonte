{"sha": "65a5478fb4d8616417524d13954fe92c501f9e69", "log": "Ensure that Period constructors for partials check for contiguous partials   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n \n     /**\n      * Creates a period from two partially specified times.\n+     * <p>\n      * The two partials must contain the same fields, thus you can\n      * specify two YearMonthDay objects, or two TimeOfDay objects,\n      * but not one of each.\n      * As these are Partial objects, time zones have no effect on\n      * the result.\n+     * <p>\n+     * The two partials must also both be contiguous - see\n+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a\n+     * definition. Both YearMonthDay and TimeOfDay are contiguous.\n+     * <p>\n+     * An alternative way of constructing a Period from two Partials\n+     * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.\n+     * That method handles all kinds of partials.\n      *\n      * @param start  the start of the period, must not be null\n      * @param end  the end of the period, must not be null\n \n     /**\n      * Creates a period from two partially specified times.\n+     * <p>\n      * The two partials must contain the same fields, thus you can\n      * specify two YearMonthDay objects, or two TimeOfDay objects,\n      * but not one of each.\n      * As these are Partial objects, time zones have no effect on\n      * the result.\n+     * <p>\n+     * The two partials must also both be contiguous - see\n+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a\n+     * definition. Both YearMonthDay and TimeOfDay are contiguous.\n+     * <p>\n+     * An alternative way of constructing a Period from two Partials\n+     * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.\n+     * That method handles all kinds of partials.\n      *\n      * @param start  the start of the period, must not be null\n      * @param end  the end of the period, must not be null\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n \n     /**\n      * Creates a period from the given duration and end point.\n+     * <p>\n      * The two partials must contain the same fields, thus you can\n      * specify two YearMonthDay objects, or two TimeOfDay objects,\n      * but not one of each.\n      * As these are Partial objects, time zones have no effect on\n      * the result.\n+     * <p>\n+     * The two partials must also both be contiguous - see\n+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a\n+     * definition. Both YearMonthDay and TimeOfDay are contiguous.\n      *\n      * @param start  the start of the period, must not be null\n      * @param end  the end of the period, must not be null\n             if (start.getFieldType(i) != end.getFieldType(i)) {\n                 throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n             }\n+        }\n+        if (DateTimeUtils.isContiguous(start) == false) {\n+            throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n         }\n         iType = checkPeriodType(type);\n         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testConstructor_RP_RP7() throws Throwable {\n+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);\n+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RP_RP_PeriodType1() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n     public void testConstructor_RP_RP_PeriodType6() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n         TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType7() throws Throwable {\n+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);\n+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n         try {\n             new Period(dt1, dt2, PeriodType.standard());\n             fail();", "timestamp": 1122243611, "metainfo": ""}