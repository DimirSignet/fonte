{"sha": "a0c65ac008610c28f352572816a7c78eb6086807", "log": "LocalDate and LocalTime constructors use correct ISO parser.  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n     public LocalDate(Object instant, DateTimeZone zone) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n         Chronology chronology = converter.getChronology(instant, zone);\n-        long millis = converter.getInstantMillis(instant, chronology);\n+        long millis = converter.getInstantMillis\n+            (instant, chronology, ISODateTimeFormat.dateParser());\n         \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n         chronology = chronology.withUTC();\n      */\n     public LocalDate(Object instant, Chronology chronology) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));\n-        long millis = converter.getInstantMillis(instant, chronology);\n+        Chronology chrono = DateTimeUtils.getChronology\n+            (converter.getChronology(instant, chronology));\n+        long millis = converter.getInstantMillis\n+            (instant, chronology, ISODateTimeFormat.dateParser());\n         \n         long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n         chrono = chrono.withUTC();\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n     public LocalTime(Object instant, DateTimeZone zone) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n         Chronology chronology = converter.getChronology(instant, zone);\n-        long millis = converter.getInstantMillis(instant, chronology);\n+        long millis = converter.getInstantMillis\n+            (instant, chronology, ISODateTimeFormat.timeParser());\n         chronology = DateTimeUtils.getChronology(chronology);\n         \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n      */\n     public LocalTime(Object instant, Chronology chronology) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));\n-        long millis = converter.getInstantMillis(instant, chronology);\n+        Chronology chrono = DateTimeUtils.getChronology\n+            (converter.getChronology(instant, chronology));\n+        long millis = converter.getInstantMillis\n+            (instant, chronology, ISODateTimeFormat.timeParser());\n         \n         long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n         chrono = chrono.withUTC();\n--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n import org.joda.time.PeriodType;\n import org.joda.time.ReadablePartial;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * AbstractConverter simplifies the process of implementing a converter.\n      */\n     public long getInstantMillis(Object object, Chronology chrono) {\n         return DateTimeUtils.currentTimeMillis();\n+    }\n+\n+    /**\n+     * Extracts the millis from an object of this convertor's type.\n+     * <p>\n+     * This implementation returns the current time.\n+     * \n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, which is always non-null\n+     * @param parser  if converting from a String, the given parser is preferred\n+     * @return the millisecond value\n+     * @since 1.3\n+     */\n+    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {\n+        return getInstantMillis(object, chrono);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * InstantConverter defines how an object is converted to milliseconds/chronology.\n      * @param chrono  the chronology to use, which is the non-null result of getChronology()\n      * @return the millisecond instant\n      * @throws ClassCastException if the object is invalid\n+     * @throws IllegalArgumentException if object conversion fails\n      */\n     long getInstantMillis(Object object, Chronology chrono);\n \n+    /**\n+     * Extracts the millis from an object of this converter's type.\n+     * <p>\n+     * The chronology passed in is the result of the call to <code>getChronology</code>.\n+     * \n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, which is the non-null result of getChronology()\n+     * @param parser  if converting from a String, the given parser is preferred\n+     * @return the millisecond instant\n+     * @throws ClassCastException if the object is invalid\n+     * @throws IllegalArgumentException if object conversion fails\n+     * @since 1.3\n+     */\n+    long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser);\n+\n }\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n         String str = (String) object;\n         DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\n         return p.withChronology(chrono).parseMillis(str);\n+    }\n+\n+    /**\n+     * Gets the millis, which is the ISO parsed string value.\n+     * \n+     * @param object  the String to convert, must not be null\n+     * @param chrono  the chronology to use, non-null result of getChronology\n+     * @param parser  the given parser is preferred\n+     * @return the millisecond value\n+     * @throws IllegalArgumentException if the value if invalid\n+     * @since 1.3\n+     */\n+    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {\n+        return parser.withChronology(chrono).parseMillis((String) object);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1145648234, "metainfo": ""}