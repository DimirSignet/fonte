{"sha": "beec594614e14f83c57ca24414179de8f9b564ea", "log": "Remove ChronologyType - it created more issues than it solved   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n  * <p>\n  * Various chronologies are supported by subclasses including ISO\n  * and GregorianJulian. To construct a Chronology you should use the\n- * factory methods on {@link ChronologyType}. If you require full\n- * control of the factory, then you should use the method on each subclass.\n+ * factory methods on the chronology subclass in the chrono package.\n  * <p>\n  * For example, to obtain the current time in the coptic calendar system:\n  * <pre>\n- * DateTime dt = new DateTime(ChronologyType.coptic().getChronology());\n+ * DateTime dt = new DateTime(CopticChronology.getInstance());\n  * </pre>\n  * <p>\n  * The provided chronology implementations are:\n  * <li>Julian - The Julian calendar system used for all time (proleptic)\n  * <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ\n  * <li>Coptic - The Coptic calendar system which defines 30 day months\n+ * <li>Ethiopic - The Ethiopic calendar system which defines 30 day months\n  * </ul>\n  * Hopefully future releases will contain more chronologies.\n  * <p>\n  * @see org.joda.time.chrono.JulianChronology\n  * @see org.joda.time.chrono.CopticChronology\n  * @see org.joda.time.chrono.BuddhistChronology\n+ * @see org.joda.time.chrono.EthiopicChronology\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n      * as it applies the modern Gregorian calendar rules before that date.\n      *\n      * @return the ISO chronology\n-     * @deprecated Use ChronologyType.iso().getChronology()\n+     * @deprecated Use ISOChronology.getInstance()\n      */\n     public static Chronology getISO() {\n         return ISOChronology.getInstance();\n      * as it applies the modern Gregorian calendar rules before that date.\n      *\n      * @return the ISO chronology\n-     * @deprecated Use ChronologyType.iso().getChronologyUTC()\n+     * @deprecated Use ISOChronology.getInstanceUTC()\n      */\n     public static Chronology getISOUTC() {\n         return ISOChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the ISO chronology\n-     * @deprecated Use ChronologyType.iso().getChronology(zone)\n+     * @deprecated Use ISOChronology.getInstance(zone)\n      */\n     public static Chronology getISO(DateTimeZone zone) {\n         return ISOChronology.getInstance(zone);\n      * we recommend using ISOChronology, which is the default.\n      *\n      * @return the GJ chronology\n-     * @deprecated Use ChronologyType.gj().getChronology()\n+     * @deprecated Use GJChronology.getInstance()\n      */\n     public static Chronology getGJ() {\n         return GJChronology.getInstance();\n      * we recommend using ISOChronology, which is the default.\n      *\n      * @return the GJ chronology\n-     * @deprecated Use ChronologyType.gj().getChronologyUTC()\n+     * @deprecated Use GJChronology.getInstanceUTC()\n      */\n     public static Chronology getGJUTC() {\n         return GJChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the GJ chronology\n-     * @deprecated Use ChronologyType.gj().getChronology(zone)\n+     * @deprecated Use GJChronology.getInstance(zone)\n      */\n     public static Chronology getGJ(DateTimeZone zone) {\n         return GJChronology.getInstance(zone);\n      * thus we recommend using ISOChronology instead, which is the default.\n      *\n      * @return the Gregorian chronology\n-     * @deprecated Use ChronologyType.gregorian().getChronology()\n+     * @deprecated Use GregorianChronology.getInstance()\n      */\n     public static Chronology getGregorian() {\n         return GregorianChronology.getInstance();\n      * thus we recommend using ISOChronology instead, which is the default.\n      *\n      * @return the Gregorian chronology\n-     * @deprecated Use ChronologyType.gregorian().getChronologyUTC()\n+     * @deprecated Use GregorianChronology.getInstanceUTC()\n      */\n     public static Chronology getGregorianUTC() {\n         return GregorianChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Gregorian chronology\n-     * @deprecated Use ChronologyType.gregorian().getChronology(zone)\n+     * @deprecated Use GregorianChronology.getInstance(zone)\n      */\n     public static Chronology getGregorian(DateTimeZone zone) {\n         return GregorianChronology.getInstance(zone);\n      * The Julian calendar system defines a leap year every four years.\n      *\n      * @return the Julian chronology\n-     * @deprecated Use ChronologyType.julian().getChronology()\n+     * @deprecated Use JulianChronology.getInstance()\n      */\n     public static Chronology getJulian() {\n         return JulianChronology.getInstance();\n      * The Julian calendar system defines a leap year every four years.\n      *\n      * @return the Julian chronology\n-     * @deprecated Use ChronologyType.julian().getChronologyUTC()\n+     * @deprecated Use JulianChronology.getInstanceUTC()\n      */\n     public static Chronology getJulianUTC() {\n         return JulianChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Julian chronology\n-     * @deprecated Use ChronologyType.julian().getChronology(zone)\n+     * @deprecated Use JulianChronology.getInstance(zone)\n      */\n     public static Chronology getJulian(DateTimeZone zone) {\n         return JulianChronology.getInstance(zone);\n      * year 1 in the Buddhist calendar.\n      *\n      * @return the Buddhist chronology\n-     * @deprecated Use ChronologyType.buddhist().getChronology()\n+     * @deprecated Use BuddhistChronology.getInstance()\n      */\n     public static Chronology getBuddhist() {\n         return BuddhistChronology.getInstance();\n      * year 1 in the Buddhist calendar.\n      *\n      * @return the Buddhist chronology\n-     * @deprecated Use ChronologyType.buddhist().getChronologyUTC()\n+     * @deprecated Use BuddhistChronology.getInstanceUTC()\n      */\n     public static Chronology getBuddhistUTC() {\n         return BuddhistChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Buddhist chronology\n-     * @deprecated Use ChronologyType.buddhist().getChronology(zone)\n+     * @deprecated Use BuddhistChronology.getInstance(zone)\n      */\n     public static Chronology getBuddhist(DateTimeZone zone) {\n         return BuddhistChronology.getInstance(zone);\n      * The chronology cannot be used before the first Coptic year.\n      *\n      * @return the Coptic chronology\n-     * @deprecated Use ChronologyType.coptic().getChronology()\n+     * @deprecated Use CopticChronology.getInstance()\n      */\n     public static Chronology getCoptic() {\n         return CopticChronology.getInstance();\n      * The chronology cannot be used before the first Coptic year.\n      *\n      * @return the Coptic chronology\n-     * @deprecated Use ChronologyType.coptic().getChronologyUTC()\n+     * @deprecated Use CopticChronology.getInstanceUTC()\n      */\n     public static Chronology getCopticUTC() {\n         return CopticChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Coptic chronology\n-     * @deprecated Use ChronologyType.coptic().getChronology(zone)\n+     * @deprecated Use CopticChronology.getInstance(zone)\n      */\n     public static Chronology getCoptic(DateTimeZone zone) {\n         return CopticChronology.getInstance(zone);\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     * <p>\n-     * This method should ideally never return null. However ChronologyType\n-     * was only added in v1.2, and any chronology written before then\n-     * will not correctly override this method to return the type.\n-     *\n-     * @return the chronology type, correct implementations never return null\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        // all subclasses should override this method\n-        return null;\n-    }\n-\n     /**\n      * Returns the DateTimeZone that this Chronology operates in, or null if\n      * unspecified.\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n     }\n \n     /**\n-     * Gets a copy of this instant with a different chronology, potentially\n-     * changing the day in unexpected ways.\n-     * <p>\n-     * This method creates a new DateMidnight using the midnight millisecond value\n-     * and the new chronology. If the same or similar chronology is specified, but\n-     * with a different time zone, the day may change. This occurs because the new\n-     * DateMidnight rounds down the millisecond value to get to midnight, and the\n-     * time zone change may result in a rounding down to a different day.\n-     * <p>\n-     * For example, changing time zone from London (+00:00) to Paris (+01:00) will\n-     * retain the same day, but changing from Paris to London will change the day.\n-     * (When its midnight in London its the same day in Paris, but when its midnight\n-     * in Paris its still the previous day in London)\n-     * <p>\n-     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}\n-     * to change time zones.\n-     *\n-     * @param newChronologyType  the new chronology type, null means ISO\n-     * @return a copy of this datetime with a different chronology\n-     */\n-    public DateMidnight withChronologyType(ChronologyType newChronologyType) {\n-        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);\n-        return (newChronologyType == getChronologyType() ? this :\n-            new DateMidnight(getMillis(), newChronologyType.getChronology(getZone())));\n-    }\n-\n-    /**\n      * Gets a copy of this instant with a different time zone, preserving the day\n      * The returned object will have a local time of midnight in the new zone on\n      * the same day as the original instant.\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n         return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));\n     }\n \n-    /**\n-     * Gets a copy of this datetime with a different chronology.\n-     * <p>\n-     * The returned object will be either be a new instance or <code>this</code>.\n-     * Only the chronology will change, the millis and time zone are kept.\n-     *\n-     * @param newChronologyType  the new chronology type, null means ISO\n-     * @return a copy of this datetime with a different chronology\n-     */\n-    public DateTime withChronologyType(ChronologyType newChronologyType) {\n-        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);\n-        return (newChronologyType == getChronologyType() ? this :\n-            new DateTime(getMillis(), newChronologyType.getChronology(getZone())));\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Gets a copy of this datetime with a different time zone, preserving the\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the chronology type handling null.\n-     * <p>\n-     * If the chronology type is <code>null</code>, {@link ChronologyType#iso()}\n-     * will be returned. Otherwise, the chronology type is returned.\n-     * \n-     * @param type  the chronology type to use, null means ISO\n-     * @return the chronology type, never null\n-     */\n-    public static final ChronologyType getChronologyType(ChronologyType type) {\n-        if (type == null) {\n-            return ChronologyType.iso();\n-        }\n-        return type;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Gets the zone handling null.\n      * <p>\n      * If the zone is <code>null</code>, {@link DateTimeZone#getDefault()}\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n import java.io.Serializable;\n \n import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.InstantConverter;\n \n     public Instant(Object instant) {\n         super();\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        iMillis = converter.getInstantMillis(instant, ChronologyType.iso().getChronologyUTC());\n+        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());\n     }\n \n     //-----------------------------------------------------------------------\n      * @return ISO in the UTC zone\n      */\n     public Chronology getChronology() {\n-        return ChronologyType.iso().getChronologyUTC();\n+        return ISOChronology.getInstanceUTC();\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n         super.setChronology(chronology);\n     }\n \n-    /**\n-     * Set the chronology of the datetime.\n-     * <p>\n-     * This method does not affect the millis or the zone.\n-     * The chronology is only changed if the type is different.\n-     *\n-     * @param type  the type to use, null means ISO\n-     */\n-    public void setChronologyType(ChronologyType type) {\n-        type = DateTimeUtils.getChronologyType(type);\n-        if (type != getChronologyType()) {\n-            setChronology(type.getChronology(getZone()));\n-        }\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the time zone of the datetime, changing the chronology and field values.\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n import java.util.Locale;\n \n import org.joda.time.base.BasePartial;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISODateTimeFormat;\n      * @since 1.1\n      */\n     public TimeOfDay(DateTimeZone zone) {\n-        super(ChronologyType.iso().getChronology(zone));\n+        super(ISOChronology.getInstance(zone));\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n import java.util.Locale;\n \n import org.joda.time.base.BasePartial;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISODateTimeFormat;\n      * @since 1.1\n      */\n     public YearMonthDay(DateTimeZone zone) {\n-        super(ChronologyType.iso().getChronology(zone));\n+        super(ISOChronology.getInstance(zone));\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.ReadableDateTime;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the type of the chronology.\n-     *\n-     * @return the type of the chronology\n-     */\n-    public ChronologyType getChronologyType() {\n-        return getChronology().getType();\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Get the value of one of the fields of a datetime.\n      * <p>\n      * This method uses the chronology of the datetime to obtain the value.\n--- a/JodaTime/src/java/org/joda/time/base/BaseInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/BaseInterval.java\n import java.io.Serializable;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.MutableInterval;\n import org.joda.time.ReadWritableInterval;\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadableInterval;\n import org.joda.time.ReadablePeriod;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n import org.joda.time.field.FieldUtils;\n         super();\n         if (start == null && end == null) {\n             iStartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();\n-            iChronology = ChronologyType.iso().getChronology();\n+            iChronology = ISOChronology.getInstance();\n         } else {\n             iChronology = DateTimeUtils.getInstantChronology(start);\n             iStartMillis = DateTimeUtils.getInstantMillis(start);\n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeField;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.buddhist();\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeField;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.coptic();\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeField;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.ethiopic();\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n         return DateTimeZone.UTC;\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.gj();\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n \n     private Object readResolve() {\n         Chronology base = getBase();\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.gregorian();\n     }\n \n     // Conversion\n--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.field.DividedDateTimeField;\n         super(base, null);\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.iso();\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns the ChronologyType constant for this Chronology.\n-     *\n-     * @return the chronology type\n-     * @since 1.2\n-     */\n-    public ChronologyType getType() {\n-        return ChronologyType.julian();\n-    }\n-\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n package org.joda.time.convert;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.PeriodType;\n import org.joda.time.ReadablePartial;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * AbstractConverter simplifies the process of implementing a converter.\n      * @return the chronology, never null\n      */\n     public Chronology getChronology(Object object, DateTimeZone zone) {\n-        return ChronologyType.iso().getChronology(zone);\n+        return ISOChronology.getInstance(zone);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n import java.util.GregorianCalendar;\n \n import org.joda.time.Chronology;\n-import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n /**\n                 return GJChronology.getInstance(zone, cutover, 4);\n             }\n         } else {\n-            return ChronologyType.iso().getChronology(zone);\n+            return ISOChronology.getInstance(zone);\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestChronology.suite());\n-        suite.addTest(TestChronologyType.suite());\n         suite.addTest(TestDateTimeFieldType.suite());\n         suite.addTest(TestDurationFieldType.suite());\n         \n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n         DateMidnight test = new DateMidnight();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n-        assertEquals(ChronologyType.iso(), test.getChronologyType());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n         \n         \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.withChronology(ISOChronology.getInstance());\n-        assertSame(test, result);\n-    }\n-\n-    public void testWithChronologyType_ChronologyType() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n-        DateMidnight result = test.withChronologyType(ChronologyType.gregorian());\n-        assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());\n-        \n-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n-        result = test.withChronologyType(null);\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-        \n-        test = new DateMidnight(TEST_TIME1_UTC);\n-        result = test.withChronologyType(ChronologyType.iso());\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testGetChronologyType_ChronologyType() {\n-        assertEquals(ChronologyType.buddhist(), DateTimeUtils.getChronologyType(ChronologyType.buddhist()));\n-        assertEquals(ChronologyType.iso(), DateTimeUtils.getChronologyType(null));\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testGetZone_Zone() {\n         assertEquals(PARIS, DateTimeUtils.getZone(PARIS));\n         assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null));\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n         DateTime test = new DateTime();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n-        assertEquals(ChronologyType.iso(), test.getChronologyType());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         \n         \n         test = new DateTime(TEST_TIME1);\n         result = test.withChronology(ISOChronology.getInstance());\n-        assertSame(test, result);\n-    }\n-\n-    public void testWithChronologyType_ChronologyType() {\n-        DateTime test = new DateTime(TEST_TIME1, PARIS);\n-        DateTime result = test.withChronologyType(ChronologyType.gregorian());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n-        \n-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n-        result = test.withChronologyType(null);\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-        \n-        test = new DateTime(TEST_TIME1);\n-        result = test.withChronologyType(ChronologyType.iso());\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n         MutableDateTime test = new MutableDateTime();\n         \n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n-        assertEquals(ChronologyType.iso(), test.getChronologyType());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSetChronologyType_ChronologyType1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n-        test.setChronologyType(ChronologyType.gregorian());\n-        assertEquals(TEST_TIME1, test.getMillis());\n-        assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());\n-    }        \n-\n-    public void testSetChronologyType_ChronologyType2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n-        test.setChronologyType(null);\n-        assertEquals(TEST_TIME1, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testSetZone_DateTimeZone1() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         test.setZone(PARIS);", "timestamp": 1130952397, "metainfo": ""}