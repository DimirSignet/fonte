{"sha": "0edd032e3628d452523bca9df56643b4b462fdb6", "log": "Add withXxx methods to YearMonthDay/TimeOfDay  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Sets the hour of day field in a copy of this TimeOfDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * TimeOfDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * hour of day changed.\n+     *\n+     * @param hour  the hour of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public TimeOfDay withHourOfDay(int hour) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().hourOfDay().set(this, HOUR_OF_DAY, newValues, hour);\n+        return new TimeOfDay(this, newValues);\n+    }\n+\n+    /**\n+     * Sets the minute of hour field in a copy of this TimeOfDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * TimeOfDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * minute of hour changed.\n+     *\n+     * @param minute  the minute of hour to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public TimeOfDay withMinuteOfHour(int minute) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().minuteOfHour().set(this, MINUTE_OF_HOUR, newValues, minute);\n+        return new TimeOfDay(this, newValues);\n+    }\n+\n+    /**\n+     * Sets the second of minute field in a copy of this TimeOfDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * TimeOfDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * second of minute changed.\n+     *\n+     * @param second  the second of minute to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public TimeOfDay withSecondOfMinute(int second) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().secondOfMinute().set(this, SECOND_OF_MINUTE, newValues, second);\n+        return new TimeOfDay(this, newValues);\n+    }\n+\n+    /**\n+     * Sets the millis of second field in a copy of this TimeOfDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * TimeOfDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of second changed.\n+     *\n+     * @param millis  the millis of second to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public TimeOfDay withMillisOfSecond(int millis) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().millisOfSecond().set(this, MILLIS_OF_SECOND, newValues, millis);\n+        return new TimeOfDay(this, newValues);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the hour of day (0-23) field property\n      * \n      * @return the hour of day property\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Sets the year field in a copy of this YearMonthDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * YearMonthDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year changed.\n+     *\n+     * @param year  the year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public YearMonthDay withYear(int year) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().year().set(this, YEAR, newValues, year);\n+        return new YearMonthDay(this, newValues);\n+    }\n+\n+    /**\n+     * Sets the month of year field in a copy of this YearMonthDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * YearMonthDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * month of year changed.\n+     *\n+     * @param monthOfYear  the month of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public YearMonthDay withMonthOfYear(int monthOfYear) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);\n+        return new YearMonthDay(this, newValues);\n+    }\n+\n+    /**\n+     * Sets the day of month field in a copy of this YearMonthDay, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * YearMonthDay is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of month changed.\n+     *\n+     * @param dayOfMonth  the day of month to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n+     */\n+    public YearMonthDay withDayOfMonth(int dayOfMonth) {\n+        int[] newValues = getValues();\n+        newValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);\n+        return new YearMonthDay(this, newValues);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the year field property\n      * \n      * @return the year property\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 10, 20, 30, 6);\n+        try {\n+            test.withHourOfDay(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withHourOfDay(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testProperty() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n         assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9);\n+        check(test.withYear(2000), 2000, 6, 9);\n+        check(test.withMonthOfYear(2), 1970, 2, 9);\n+        check(test.withDayOfMonth(2), 1970, 6, 2);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testProperty() {\n         YearMonthDay test = new YearMonthDay(2005, 6, 9);\n         assertEquals(test.year(), test.property(DateTimeFieldType.year()));", "timestamp": 1144191753, "metainfo": ""}