{"sha": "d10d1575fb2041aaa3fa93333518107969f98841", "log": "Initial import of Persistent Interval support.  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.hibernate.Hibernate;\n+import org.hibernate.HibernateException;\n+import org.hibernate.engine.SessionImplementor;\n+import org.hibernate.type.Type;\n+import org.hibernate.usertype.CompositeUserType;\n+import org.joda.time.DateTime;\n+import org.joda.time.Interval;\n+import org.joda.time.contrib.hibernate.PersistentDateTime;\n+\n+/**\n+ * Persist {@link org.joda.time.Interval} via hibernate. Internally, this class\n+ * collaborates with {@link org.joda.time.contrib.hibernate.PersistentDateTime}\n+ * to convert the start and end components of an Interval to and from the \n+ * database correspondents.  This class allows clients to execute hibernate or\n+ * JPA queries using the attribute names \"start\" and \"end.\"  For example,\n+ * <br />\n+ * <br />\n+ * <blockquote>\n+ * \"from Foo where :date is between barInterval.start and barInterval.end\"\n+ * </blockquote>\n+ *\n+ * @author Christopher R. Gardner (chris_gardner76@yahoo.com)\n+ */\n+public class PersistentInterval implements CompositeUserType\n+{\n+    private static final String[] PROPERTY_NAMES = new String[]\n+    {\n+        \"start\",\n+        \"end\"\n+    };\n+    \n+    private static final Type[] TYPES = new Type[]\n+    { \n+        Hibernate.TIMESTAMP,\n+        Hibernate.TIMESTAMP\n+    };\n+\n+    public Object assemble(Serializable cached, SessionImplementor session,\n+            Object owner) throws HibernateException\n+    {\n+        return cached;\n+    }\n+\n+    public Object deepCopy(Object value) throws HibernateException\n+    {\n+        return value;\n+    }\n+\n+    public Serializable disassemble(Object value, SessionImplementor session)\n+            throws HibernateException\n+    {\n+        return (Serializable) value;\n+    }\n+\n+    public boolean equals(Object x, Object y) throws HibernateException\n+    {\n+        if (x == y) { return true; }\n+        if (x == null || y == null) { return false; }\n+        return x.equals(y);\n+    }\n+\n+    public String[] getPropertyNames()\n+    {\n+        return PROPERTY_NAMES;\n+    }\n+\n+    public Type[] getPropertyTypes()\n+    {\n+        return TYPES;\n+    }\n+\n+    public Object getPropertyValue(Object component, int property)\n+            throws HibernateException\n+    {\n+        Interval interval = (Interval) component;\n+        return (property == 0) ? interval.getStart().toDate() : interval\n+                .getEnd().toDate();\n+    }\n+\n+    public int hashCode(Object x) throws HibernateException\n+    {\n+        return x.hashCode();\n+    }\n+\n+    public boolean isMutable()\n+    {\n+        return false;\n+    }\n+\n+    public Object nullSafeGet(ResultSet resultSet, String[] names,\n+            SessionImplementor session, Object owner)\n+            throws HibernateException, SQLException\n+    {\n+        if (resultSet == null)\n+        {\n+            return null;\n+        }\n+        PersistentDateTime pst = new PersistentDateTime();\n+        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\n+        DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\n+        return new Interval(begin, end);\n+    }\n+\n+    public void nullSafeSet(PreparedStatement statement, Object value,\n+            int index, SessionImplementor session) throws HibernateException,\n+            SQLException\n+    {\n+        if (value == null)\n+        {\n+            statement.setNull(index, Hibernate.TIMESTAMP.sqlType());\n+            statement.setNull(index + 1, Hibernate.TIMESTAMP.sqlType());\n+            return;\n+        }\n+        Interval interval = (Interval) value;\n+        statement.setTimestamp(index, asTimeStamp(interval.getStart()));\n+        statement.setTimestamp(index + 1, asTimeStamp(interval.getEnd()));\n+    }\n+\n+    private Timestamp asTimeStamp(DateTime time) {\n+        return new Timestamp(time.getMillis());\n+    }\n+\n+    public Object replace(Object original, Object target,\n+            SessionImplementor session, Object owner) throws HibernateException\n+    {\n+        return original;\n+    }\n+\n+    public Class returnedClass()\n+    {\n+        return Interval.class;\n+    }\n+\n+    public void setPropertyValue(Object component, int property, Object value)\n+            throws HibernateException\n+    {\n+        throw new UnsupportedOperationException(\"Immutable Interval\");\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java\n+package org.joda.time.contrib.hibernate;\n+\n+import org.joda.time.Interval;\n+\n+public class Plan\n+{\n+    private int id;\n+    private Interval period;\n+\n+    public Plan()\n+    {\n+    }\n+    \n+    public Plan(int id)\n+    {\n+        setId(id);\n+    }\n+\n+    private void setId(int id)\n+    {\n+        this.id = id;\n+    }\n+    \n+    public int getId()\n+    {\n+        return id;\n+    }\n+    \n+    public Interval getPeriod()\n+    {\n+        return period;\n+    }\n+    \n+    public void setPeriod(Interval period)\n+    {\n+        this.period = period;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Transaction;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.DateTime;\n+import org.joda.time.Interval;\n+\n+public class TestPersistentInterval extends HibernateTestCase {\n+\n+    private SessionFactory factory;\n+    private Session session;\n+    private DateTime beginDateTime;\n+    private DateTime endDateTime;\n+    private Transaction transaction;\n+    private String intervalQuery;\n+    \n+    protected void setUp() throws SQLException\n+    {\n+        factory = getSessionFactory();\n+        store();\n+        intervalQuery = \"from Plan where :aDate between period.start and period.end\";\n+    }\n+    \n+    private void store() throws SQLException\n+    {\n+        openAndBegin();\n+        \n+        Plan plan = new Plan(1);\n+        beginDateTime = new DateTime(1980, 3, 11, 2, 3, 45, 0);\n+        endDateTime = new DateTime(2004, 2, 25, 17, 3, 45, 760);\n+        Interval period = new Interval(beginDateTime, endDateTime);\n+        \n+        plan.setPeriod(period);\n+        \n+        session.save(plan);\n+        session.flush();\n+        \n+        commitAndClose();\n+    }\n+\n+    private void openAndBegin()\n+    {\n+        session = factory.openSession();\n+        transaction = session.beginTransaction();\n+    }\n+    \n+    private void commitAndClose()\n+    {\n+        transaction.commit();\n+        session.close();\n+    }\n+    \n+    public void testQueryById() throws SQLException\n+    {\n+        openAndBegin();\n+        Interval persistedPeriod = queryPlan().getPeriod();\n+        commitAndClose();\n+        assertPlanPeriod(persistedPeriod);\n+    }\n+\n+    private void assertPlanPeriod(Interval period)\n+    {\n+        assertEquals(beginDateTime, period.getStart());\n+        assertEquals(endDateTime, period.getEnd());\n+    }\n+\n+    private Plan queryPlan()\n+    {\n+        return (Plan) session.get(Plan.class, new Integer(1));\n+    }\n+    \n+    public void testQueryInsideInterval() throws SQLException\n+    {\n+        openAndBegin();\n+        DateTime includedDateTime = new DateTime(2004, 1, 10, 0, 0, 0, 0);\n+        Query query = session.createQuery(intervalQuery)\n+                             .setParameter(\"aDate\", includedDateTime.toDate());\n+        List queriedPlans = query.list();\n+        commitAndClose();\n+        assertEquals(1, queriedPlans.size());\n+        assertPlanPeriod(((Plan) queriedPlans.get(0)).getPeriod());\n+    }\n+    \n+    public void testQueryOutsideInterval()\n+    {\n+        openAndBegin();\n+        DateTime excludedDateTime = new DateTime(2007, 1, 10, 0, 0, 0, 0);\n+        Query query = session.createQuery(intervalQuery)\n+                             .setParameter(\"aDate\", excludedDateTime.toDate());\n+        List queriedPlans = query.list();\n+        commitAndClose();\n+        assertEquals(0, queriedPlans.size());\n+    }\n+\n+    protected void setupConfiguration(Configuration cfg)\n+    {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/plan.hbm.xml\"));\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        remove();\n+        super.tearDown();\n+    }\n+\n+    private void remove() {\n+        openAndBegin();\n+        session.delete(queryPlan());\n+        commitAndClose();\n+    }\n+}", "timestamp": 1167832735, "metainfo": ""}