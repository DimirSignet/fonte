{"sha": "82e420bb78bebf465f3cc54e3ee2a631f87fe7b2", "log": "Remove get chronology methods as they confuse matters when getting instance on subclass   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n  * information on the Joda project, please see <http://www.joda.org/>.\n  */\n package org.joda.time;\n-\n-import org.joda.time.chrono.GJChronology;\n-import org.joda.time.chrono.ISOChronology;\n \n /**\n  * Chronology provides access to the individual date time fields for a\n public abstract class Chronology {\n \n     /**\n-     * Gets an instance of the ISOChronology in the default zone.\n-     * <p>\n-     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.\n-     * This chronology is the default, and is suitable for all normal datetime processing.\n-     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582\n-     * as it applies the modern Gregorian calendar rules before that date.\n-     *\n-     * @return the ISO chronology\n-     */\n-    public static Chronology getISO() {\n-        return ISOChronology.getInstance();\n-    }\n-\n-    /**\n-     * Gets an instance of the ISOChronology in the UTC zone.\n-     * <p>\n-     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.\n-     * This chronology is the default, and is suitable for all normal datetime processing.\n-     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582\n-     * as it applies the modern Gregorian calendar rules before that date.\n-     *\n-     * @return the ISO chronology\n-     */\n-    public static Chronology getISOUTC() {\n-        return ISOChronology.getInstanceUTC();\n-    }\n-\n-    /**\n-     * Gets an instance of the ISOChronology in the specified zone.\n-     * <p>\n-     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.\n-     * This chronology is the default, and is suitable for all normal datetime processing.\n-     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582\n-     * as it applies the modern Gregorian calendar rules before that date.\n-     *\n-     * @param zone  the zone to use, null means default zone\n-     * @return the ISO chronology\n-     */\n-    public static Chronology getISO(DateTimeZone zone) {\n-        return ISOChronology.getInstance(zone);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets an instance of the GJChronology in the default zone.\n-     * <p>\n-     * {@link GJChronology} defines all fields using standard meanings.\n-     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.\n-     * The Gregorian calendar system is used after October 15, 1582, while the\n-     * Julian calendar system is used before.\n-     * <p>\n-     * When dealing solely with dates in the modern era, from 1600 onwards,\n-     * we recommend using ISOChronology, which is the default.\n-     *\n-     * @return the GJ chronology\n-     */\n-    public static Chronology getGJ() {\n-        return GJChronology.getInstance();\n-    }\n-\n-    /**\n-     * Gets an instance of the GJChronology in the UTC zone.\n-     * <p>\n-     * {@link GJChronology} defines all fields using standard meanings.\n-     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.\n-     * The Gregorian calendar system is used after October 15, 1582, while the\n-     * Julian calendar system is used before.\n-     * <p>\n-     * When dealing solely with dates in the modern era, from 1600 onwards,\n-     * we recommend using ISOChronology, which is the default.\n-     *\n-     * @return the GJ chronology\n-     */\n-    public static Chronology getGJUTC() {\n-        return GJChronology.getInstanceUTC();\n-    }\n-\n-    /**\n-     * Gets an instance of the GJChronology in the specified zone.\n-     * <p>\n-     * {@link GJChronology} defines all fields using standard meanings.\n-     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.\n-     * The Gregorian calendar system is used after October 15, 1582, while the\n-     * Julian calendar system is used before.\n-     * <p>\n-     * When dealing solely with dates in the modern era, from 1600 onwards,\n-     * we recommend using ISOChronology, which is the default.\n-     *\n-     * @param zone  the zone to use, null means default zone\n-     * @return the GJ chronology\n-     */\n-    public static Chronology getGJ(DateTimeZone zone) {\n-        return GJChronology.getInstance(zone);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Returns the DateTimeZone that this Chronology operates in, or null if\n      * unspecified.\n      *\n--- a/JodaTime/src/test/org/joda/time/TestChronology.java\n+++ b/JodaTime/src/test/org/joda/time/TestChronology.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n-\n-import org.joda.time.chrono.GJChronology;\n-import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Chronology.\n         assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n     }\n \n-    //-----------------------------------------------------------------------\n-    public void testGetISO() {\n-        assertEquals(ISOChronology.getInstance(), Chronology.getISO());\n-    }\n-\n-    public void testGetISOUTC() {\n-        assertEquals(ISOChronology.getInstanceUTC(), Chronology.getISOUTC());\n-    }\n-\n-    public void testGetISO_Zone() {\n-        assertEquals(ISOChronology.getInstance(PARIS), Chronology.getISO(PARIS));\n-        assertEquals(ISOChronology.getInstance(), Chronology.getISO(null));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testGetGJ() {\n-        assertEquals(GJChronology.getInstance(), Chronology.getGJ());\n-    }\n-\n-    public void testGetGJUTC() {\n-        assertEquals(GJChronology.getInstanceUTC(), Chronology.getGJUTC());\n-    }\n-\n-    public void testGetGJ_Zone() {\n-        assertEquals(GJChronology.getInstance(PARIS), Chronology.getGJ(PARIS));\n-        assertEquals(GJChronology.getInstance(), Chronology.getGJ(null));\n-    }\n-\n }", "timestamp": 1093193539, "metainfo": ""}