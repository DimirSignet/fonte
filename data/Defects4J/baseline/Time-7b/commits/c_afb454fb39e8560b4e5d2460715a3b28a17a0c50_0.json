{"sha": "afb454fb39e8560b4e5d2460715a3b28a17a0c50", "log": "Define equals/hashcode in Chronology  Previous definition relied on identity from caches Weird cases can circimvent that Fixes #36", "commit": "\n--- a/src/main/java/org/joda/time/chrono/BasicChronology.java\n+++ b/src/main/java/org/joda/time/chrono/BasicChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return iMinDaysInFirstWeek;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Checks if this chronology instance equals another.\n      * \n      * @since 1.6\n      */\n     public boolean equals(Object obj) {\n-        return super.equals(obj);\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj != null && getClass() == obj.getClass()) {\n+            BasicChronology chrono = (BasicChronology) obj;\n+            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&\n+                    getZone().equals(chrono.getZone());\n+        }\n+        return false;\n     }\n \n     /**\n--- a/src/main/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/src/main/java/org/joda/time/chrono/BuddhistChronology.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return getInstance(zone);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Checks if this chronology instance equals another.\n      * \n      * @since 1.6\n      */\n     public boolean equals(Object obj) {\n-        return super.equals(obj);\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof BuddhistChronology) {\n+            BuddhistChronology chrono = (BuddhistChronology) obj;\n+            return getZone().equals(chrono.getZone());\n+        }\n+        return false;\n     }\n \n     /**\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return iGregorianChronology.getMinimumDaysInFirstWeek();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Checks if this chronology instance equals another.\n      * \n      * @since 1.6\n      */\n     public boolean equals(Object obj) {\n-        return super.equals(obj);\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof GJChronology) {\n+            GJChronology chrono = (GJChronology) obj;\n+            return iCutoverMillis == chrono.iCutoverMillis &&\n+                    getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&\n+                    getZone().equals(chrono.getZone());\n+        }\n+        return false;\n     }\n \n     /**\n      * @since 1.6\n      */\n     public int hashCode() {\n-        return \"GJ\".hashCode() * 11 + iJulianChronology.hashCode() +\n-            iGregorianChronology.hashCode() + iCutoverInstant.hashCode();\n+        return \"GJ\".hashCode() * 11 + getZone().hashCode() +\n+                getMinimumDaysInFirstWeek() + iCutoverInstant.hashCode();\n     }\n \n     // Output\n--- a/src/main/java/org/joda/time/chrono/ISOChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ISOChronology.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Checks if this chronology instance equals another.\n      * \n      * @since 1.6\n      */\n     public boolean equals(Object obj) {\n-        return super.equals(obj);\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof ISOChronology) {\n+            ISOChronology chrono = (ISOChronology) obj;\n+            return getZone().equals(chrono.getZone());\n+        }\n+        return false;\n     }\n \n     /**\n         return \"ISO\".hashCode() * 11 + getZone().hashCode();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Serialize ISOChronology instances using a small stub. This reduces the\n      * serialized size, and deserialized instances come from the cache.\n--- a/src/main/java/org/joda/time/chrono/IslamicChronology.java\n+++ b/src/main/java/org/joda/time/chrono/IslamicChronology.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return getInstance(zone);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this chronology instance equals another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     * @since 2.3\n+     */\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof IslamicChronology) {\n+            IslamicChronology chrono = (IslamicChronology) obj;\n+            return getLeapYearPatternType().index == chrono.getLeapYearPatternType().index &&\n+                    super.equals(obj);\n+        }\n+        return false;\n+    }\n+\n     /**\n      * A suitable hash code for the chronology.\n      * \n                     return this;\n             }\n         }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj instanceof LeapYearPatternType) {\n+                return index == ((LeapYearPatternType) obj).index;\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return index;\n+        }\n     }\n }", "timestamp": 1374324143, "metainfo": ""}