{"sha": "70ba0aaaf4da2ab13d76972deec24a4a4d816940", "log": "Rename NonZeroDateTimeField to ZeroIsMaxDateTimeField   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.\n+ * Copyright (c) 2001-2005 Stephen Colebourne.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.joda.time.field.DividedDateTimeField;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.MillisDurationField;\n-import org.joda.time.field.NonZeroDateTimeField;\n+import org.joda.time.field.ZeroIsMaxDateTimeField;\n import org.joda.time.field.OffsetDateTimeField;\n import org.joda.time.field.PreciseDateTimeField;\n import org.joda.time.field.PreciseDurationField;\n         cHourOfHalfdayField = new PreciseDateTimeField\n             (DateTimeFieldType.hourOfHalfday(), cHoursField, cHalfdaysField);\n \n-        cClockhourOfDayField = new NonZeroDateTimeField\n+        cClockhourOfDayField = new ZeroIsMaxDateTimeField\n             (cHourOfDayField, DateTimeFieldType.clockhourOfDay());\n \n-        cClockhourOfHalfdayField = new NonZeroDateTimeField\n+        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField\n             (cHourOfHalfdayField, DateTimeFieldType.clockhourOfHalfday());\n \n         cHalfdayOfDayField = new HalfdayField();\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/field/ZeroIsMaxDateTimeField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.ReadablePartial;\n+\n+/**\n+ * Wraps another field such that zero values are replaced with one more than\n+ * it's maximum. This is particularly useful for implementing an clockhourOfDay\n+ * field, where the midnight value of 0 is replaced with 24.\n+ * <p>\n+ * ZeroIsMaxDateTimeField is thread-safe and immutable.\n+ *\n+ * @author Brian S O'Neill\n+ * @since 1.0\n+ */\n+public final class ZeroIsMaxDateTimeField extends DecoratedDateTimeField {\n+\n+    private static final long serialVersionUID = 961749798233026866L;\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param field  the base field\n+     * @param type  the field type this field will actually use\n+     * @throws IllegalArgumentException if wrapped field's minimum value is not zero\n+     */\n+    public ZeroIsMaxDateTimeField(DateTimeField field, DateTimeFieldType type) {\n+        super(field, type);\n+        if (field.getMinimumValue() != 0) {\n+            throw new IllegalArgumentException(\"Wrapped field's minumum value must be zero\");\n+        }\n+    }\n+\n+    public int get(long instant) {\n+        int value = getWrappedField().get(instant);\n+        if (value == 0) {\n+            value = getMaximumValue();\n+        }\n+        return value;\n+    }\n+\n+    public long add(long instant, int value) {\n+        return getWrappedField().add(instant, value);\n+    }\n+\n+    public long add(long instant, long value) {\n+        return getWrappedField().add(instant, value);\n+    }\n+\n+    public long addWrapField(long instant, int value) {\n+        return getWrappedField().addWrapField(instant, value);\n+    }\n+\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n+        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);\n+    }\n+\n+    public int getDifference(long minuendInstant, long subtrahendInstant) {\n+        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);\n+    }\n+\n+    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);\n+    }\n+\n+    public long set(long instant, int value) {\n+        int max = getMaximumValue();\n+        FieldUtils.verifyValueBounds(this, value, 1, max);\n+        if (value == max) {\n+            value = 0;\n+        }\n+        return getWrappedField().set(instant, value);\n+    }\n+\n+    public boolean isLeap(long instant) {\n+        return getWrappedField().isLeap(instant);\n+    }\n+\n+    public int getLeapAmount(long instant) {\n+        return getWrappedField().getLeapAmount(instant);\n+    }\n+\n+    public DurationField getLeapDurationField() {\n+        return getWrappedField().getLeapDurationField();\n+    }\n+\n+    /**\n+     * Always returns 1.\n+     * \n+     * @return the minimum value of 1\n+     */\n+    public int getMinimumValue() {\n+        return 1;\n+    }\n+\n+    /**\n+     * Always returns 1.\n+     * \n+     * @return the minimum value of 1\n+     */\n+    public int getMinimumValue(long instant) {\n+        return 1;\n+    }\n+\n+    /**\n+     * Always returns 1.\n+     * \n+     * @return the minimum value of 1\n+     */\n+    public int getMinimumValue(ReadablePartial instant) {\n+        return 1;\n+    }\n+\n+    /**\n+     * Always returns 1.\n+     * \n+     * @return the minimum value of 1\n+     */\n+    public int getMinimumValue(ReadablePartial instant, int[] values) {\n+        return 1;\n+    }\n+\n+    /**\n+     * Get the maximum value for the field, which is one more than the wrapped\n+     * field's maximum value.\n+     * \n+     * @return the maximum value\n+     */\n+    public int getMaximumValue() {\n+        return getWrappedField().getMaximumValue() + 1;\n+    }\n+\n+    /**\n+     * Get the maximum value for the field, which is one more than the wrapped\n+     * field's maximum value.\n+     * \n+     * @return the maximum value\n+     */\n+    public int getMaximumValue(long instant) {\n+        return getWrappedField().getMaximumValue(instant) + 1;\n+    }\n+\n+    /**\n+     * Get the maximum value for the field, which is one more than the wrapped\n+     * field's maximum value.\n+     * \n+     * @return the maximum value\n+     */\n+    public int getMaximumValue(ReadablePartial instant) {\n+        return getWrappedField().getMaximumValue(instant) + 1;\n+    }\n+\n+    /**\n+     * Get the maximum value for the field, which is one more than the wrapped\n+     * field's maximum value.\n+     * \n+     * @return the maximum value\n+     */\n+    public int getMaximumValue(ReadablePartial instant, int[] values) {\n+        return getWrappedField().getMaximumValue(instant, values) + 1;\n+    }\n+\n+    public long roundFloor(long instant) {\n+        return getWrappedField().roundFloor(instant);\n+    }\n+\n+    public long roundCeiling(long instant) {\n+        return getWrappedField().roundCeiling(instant);\n+    }\n+\n+    public long roundHalfFloor(long instant) {\n+        return getWrappedField().roundHalfFloor(instant);\n+    }\n+\n+    public long roundHalfCeiling(long instant) {\n+        return getWrappedField().roundHalfCeiling(instant);\n+    }\n+\n+    public long roundHalfEven(long instant) {\n+        return getWrappedField().roundHalfEven(instant);\n+    }\n+\n+    public long remainder(long instant) {\n+        return getWrappedField().remainder(instant);\n+    }\n+\n+}", "timestamp": 1107623026, "metainfo": ""}