{"sha": "226fd68cc77369f5c7cec5195e32c41229a7cac1", "log": "Fix tests after TimePeriod creation   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateMidnight_Basics.suite());\n         suite.addTest(TestDateMidnight_Properties.suite());\n         \n-        suite.addTest(TestDuration_Constructors.suite());\n-        suite.addTest(TestDuration_Basics.suite());\n+        suite.addTest(TestPeriod_Constructors.suite());\n+        suite.addTest(TestPeriod_Basics.suite());\n         \n-        suite.addTest(TestMillisDuration_Constructors.suite());\n-        \n-        suite.addTest(TestMutableDuration_Constructors.suite());\n-        suite.addTest(TestMutableDuration_Basics.suite());\n-        suite.addTest(TestMutableDuration_Updates.suite());\n+        suite.addTest(TestMutablePeriod_Constructors.suite());\n+        suite.addTest(TestMutablePeriod_Basics.suite());\n+        suite.addTest(TestMutablePeriod_Updates.suite());\n         \n         suite.addTest(TestTimeOfDay.suite());\n         suite.addTest(TestYearMonthDay.suite());\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n         assertEquals(DurationType.getAllType(), test.getDurationType());\n     }\n \n-    public void testGetIsTotalMillisBased() {\n-        TimePeriod test = new TimePeriod(123L);\n-        assertEquals(false, test.isTotalMillisBased());\n-        test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        assertEquals(false, test.isTotalMillisBased());\n-    }\n-\n-    public void testGetTotalMillis() {\n-        TimePeriod test = new TimePeriod(123L);\n-        assertEquals(123L, test.getTotalMillis());\n-    }\n-\n     public void testGetIsPrecise() {\n         TimePeriod test = new TimePeriod(123L);\n         assertEquals(true, test.isPrecise());\n     \n     class MockDuration extends AbstractTimePeriod {\n         public MockDuration(long value) {\n-            super(value, null, false);\n+            super(value, null);\n         }\n         protected DurationType checkDurationType(DurationType type) {\n             return DurationType.getAllType();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToDuration() {\n+    public void testToTimePeriod() {\n         TimePeriod test = new TimePeriod(123L);\n-        TimePeriod result = test.toDuration();\n+        TimePeriod result = test.toTimePeriod();\n         assertSame(test, result);\n     }\n \n-    public void testToMutableDuration() {\n+    public void testToMutableTimePeriod() {\n         TimePeriod test = new TimePeriod(123L);\n-        MutableTimePeriod result = test.toMutableDuration();\n-        assertEquals(test.getDurationType(), result.getDurationType());\n-        assertEquals(test.isPrecise(), result.isPrecise());\n-        assertEquals(test.getTotalMillis(), result.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testConstant() {\n-        assertEquals(0L, TimePeriod.ZERO.getTotalMillis());\n-        assertEquals(DurationType.getAllType(), TimePeriod.ZERO.getDurationType());\n+        MutableTimePeriod result = test.toMutableTimePeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDurationMillis() {\n+        TimePeriod test = new TimePeriod(123L);\n+        assertEquals(123L, test.toDurationMillis());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n      * Test constructor ()\n      */\n     public void testZERO() throws Throwable {\n-        TimePeriod test = TimePeriod.ZERO;\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = MillisDuration.ZERO;\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        TimePeriod test = new TimePeriod(length);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(length);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        TimePeriod test = new TimePeriod(length, null);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(length, null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        TimePeriod test = new TimePeriod(length, DurationType.getMillisType());\n+        MillisDuration test = new MillisDuration(length, DurationType.getMillisType());\n         assertEquals(DurationType.getMillisType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        TimePeriod test = new TimePeriod(length, DurationType.getDayHourType());\n-        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(length, DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        TimePeriod test = new TimePeriod(length, DurationType.getAllType().withMillisRemoved());\n-        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(length, DurationType.getPreciseAllType().withMillisRemoved());\n+        assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n      * Test constructor (4ints)\n      */\n     public void testConstructor_4int1() throws Throwable {\n-        TimePeriod test = new TimePeriod(5, 6, 7, 8);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(5, 6, 7, 8);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n      * Test constructor (8ints)\n      */\n     public void testConstructor_8int1() throws Throwable {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(2, test.getMonths());\n         assertEquals(3, test.getWeeks());\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n-        assertEquals(false, test.isPrecise());\n-        try {\n-            test.getTotalMillis();\n-            fail();\n-        } catch (IllegalStateException ex) {}\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n     }\n \n     //-----------------------------------------------------------------------\n      * Test constructor (8ints)\n      */\n     public void testConstructor_8int__DurationType1() throws Throwable {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, null);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(2, test.getMonths());\n         assertEquals(3, test.getWeeks());\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n-        assertEquals(false, test.isPrecise());\n-        try {\n-            test.getTotalMillis();\n-            fail();\n-        } catch (IllegalStateException ex) {}\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n     }\n \n     public void testConstructor_8int__DurationType2() throws Throwable {\n-        TimePeriod test = new TimePeriod(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());\n-        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n \n     public void testConstructor_8int__DurationType3() throws Throwable {\n         try {\n-            new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+            new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n     public void testConstructor_long_long1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis());\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_long_long2() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis());\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(1, test.getWeeks());\n     public void testConstructor_long_long_DurationType1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), null);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_long_long_DurationType2() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());\n-        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_long_long_DurationType3() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());\n-        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getPreciseAllType().withMillisRemoved());\n+        assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(1, test.getWeeks());\n     public void testConstructor_RI_RI1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_RI_RI2() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(1, test.getWeeks());\n     public void testConstructor_RI_RI3() throws Throwable {\n         DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n         DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(3, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n+        assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n         assertEquals(0, test.getHours());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n     public void testConstructor_RI_RI4() throws Throwable {\n         DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n         DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n-        TimePeriod test = new TimePeriod(dt1, dt2);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(-3, test.getYears());\n         assertEquals(-1, test.getMonths());\n         assertEquals(-1, test.getWeeks());\n-        assertEquals(-1, test.getDays());\n+        assertEquals(-2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n         assertEquals(0, test.getHours());\n         assertEquals(-1, test.getMinutes());\n         assertEquals(-1, test.getSeconds());\n     public void testConstructor_RI_RI5() throws Throwable {\n         DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n         DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n-        TimePeriod test = new TimePeriod(dt1, dt2);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_RI_RI_DurationType1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2, null);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2, null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_RI_RI_DurationType2() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getDayHourType());\n-        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_RI_RI_DurationType3() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType().withMillisRemoved());\n-        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType().withMillisRemoved());\n+        assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(1, test.getWeeks());\n     public void testConstructor_RI_RI_DurationType4() throws Throwable {\n         DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n         DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType());\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(3, test.getYears());\n         assertEquals(1, test.getMonths());\n         assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n+        assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n         assertEquals(0, test.getHours());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n     public void testConstructor_RI_RI_DurationType5() throws Throwable {\n         DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n         DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n-        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType());\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n      * Test constructor (Object)\n      */\n     public void testConstructor_Object1() throws Throwable {\n-        TimePeriod test = new TimePeriod(\"P1Y2M3D\");\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(\"P1Y2M3D\");\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(2, test.getMonths());\n         assertEquals(0, test.getWeeks());\n         assertEquals(0, test.getMinutes());\n         assertEquals(0, test.getSeconds());\n         assertEquals(0, test.getMillis());\n-        assertEquals(false, test.isPrecise());\n-        try {\n-            test.getTotalMillis();\n-            fail();\n-        } catch (IllegalStateException ex) {}\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());\n     }\n \n     public void testConstructor_Object2() throws Throwable {\n-        TimePeriod test = new TimePeriod((Object) null);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration((Object) null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     }\n \n     public void testConstructor_Object3() throws Throwable {\n-        TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));\n-        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType());\n+        MillisDuration test = new MillisDuration(base);\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     public void testConstructor_Object4() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        TimePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise\n-        TimePeriod test = new TimePeriod(base);\n-        assertEquals(DurationType.getAllType(), test.getDurationType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+        MillisDuration base = new MillisDuration(dt1, dt2);  // AllType and precise\n+        MillisDuration test = new MillisDuration(base);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object5() throws Throwable {\n+        MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType());\n+        try {\n+            new MillisDuration(base);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n      * Test constructor (Object)\n      */\n     public void testConstructor_Object_DurationType1() throws Throwable {\n-        TimePeriod test = new TimePeriod(\"P1Y2M3D\", DurationType.getYearMonthType());\n-        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(\"P1Y2M3D\", DurationType.getPreciseYearMonthType());\n+        assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(2, test.getMonths());\n         assertEquals(0, test.getWeeks());\n         assertEquals(0, test.getMinutes());\n         assertEquals(0, test.getSeconds());\n         assertEquals(0, test.getMillis());\n-        assertEquals(false, test.isPrecise());\n-        try {\n-            test.getTotalMillis();\n-            fail();\n-        } catch (IllegalStateException ex) {}\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());\n     }\n \n     public void testConstructor_Object_DurationType2() throws Throwable {\n-        TimePeriod test = new TimePeriod((Object) null, DurationType.getYearMonthType());\n-        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration((Object) null, DurationType.getPreciseYearMonthType());\n+        assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     }\n \n     public void testConstructor_Object_DurationType3() throws Throwable {\n-        TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());\n-        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(\n+            new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType()), DurationType.getPreciseYearMonthType());\n+        assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n     }\n \n     public void testConstructor_Object_DurationType4() throws Throwable {\n-        TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);\n-        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        MillisDuration test = new MillisDuration(new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType()), null);\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testConstructor_RI_RD1() throws Throwable {\n+    public void testConstructor_RI_RP1() throws Throwable {\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         TimePeriod dur = new TimePeriod(0, 6, 0, 0, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n         Interval test = new Interval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         assertEquals(result, test.getEndMillis());\n-        assertEquals(false, dur == test.getDuration());\n-    }\n-\n-    public void testConstructor_RI_RD2() throws Throwable {\n+    }\n+\n+    public void testConstructor_RI_RP2() throws Throwable {\n         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n         TimePeriod dur = new TimePeriod(0, 6, 0, 0, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         assertEquals(result, test.getEndMillis());\n         assertEquals(true, dt == test.getStartInstant());\n-        assertEquals(false, dur == test.getDuration());\n-    }\n-\n-    public void testConstructor_RI_RD3() throws Throwable {\n+    }\n+\n+    public void testConstructor_RI_RP3() throws Throwable {\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         TimePeriod dur = new TimePeriod(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n         long result = TEST_TIME_NOW;\n         Interval test = new Interval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         assertEquals(result, test.getEndMillis());\n-        assertEquals(true, dur == test.getDuration());\n-    }\n-\n-    public void testConstructor_RI_RD4() throws Throwable {\n+    }\n+\n+    public void testConstructor_RI_RP4() throws Throwable {\n         Interval test = new Interval((ReadableInstant) null, (ReadableDuration) null);\n         assertEquals(TEST_TIME_NOW, test.getStartMillis());\n         assertEquals(TEST_TIME_NOW, test.getEndMillis());\n     }\n \n-    public void testConstructor_RI_RD5() throws Throwable {\n+    public void testConstructor_RI_RP5() throws Throwable {\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         Interval test = new Interval(dt, (ReadableDuration) null);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         assertEquals(dt.getMillis(), test.getEndMillis());\n     }\n \n-    public void testConstructor_RI_RD6() throws Throwable {\n+    public void testConstructor_RI_RP6() throws Throwable {\n         TimePeriod dur = new TimePeriod(0, 6, 0, 0, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n         result = ISOChronology.getInstanceUTC().monthOfYear().add(result, 6);\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutablePeriod_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutablePeriod_Basics.class);\n+    }\n+\n+    public TestMutablePeriod_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationType() {\n+        MutableTimePeriod test = new MutableTimePeriod();\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+    }\n+\n+    public void testGetIsPrecise() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        assertEquals(true, test.isPrecise());\n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(false, test.isPrecise());\n+    }\n+\n+    public void testGetMethods() {\n+        MutableTimePeriod test = new MutableTimePeriod();\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MutableTimePeriod test1 = new MutableTimePeriod(123L);\n+        MutableTimePeriod test2 = new MutableTimePeriod(123L);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MutableTimePeriod test3 = new MutableTimePeriod(321L);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockMutablePeriod(123L)));\n+        assertEquals(false, test1.equals(new TimePeriod(123L, DurationType.getDayHourType())));\n+    }\n+    \n+    class MockMutablePeriod extends AbstractTimePeriod {\n+        public MockMutablePeriod(long value) {\n+            super(value, null);\n+        }\n+        protected DurationType checkDurationType(DurationType type) {\n+            return DurationType.getAllType();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MutableTimePeriod result = (MutableTimePeriod) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddTo1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo4() {\n+        long expected = TEST_TIME_NOW;\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 0);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo5() {\n+        long expected = TEST_TIME_NOW + 100L;\n+        MutableTimePeriod test = new MutableTimePeriod(100L);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToWithChronology1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToRI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI4() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddIntoRWI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, 1);\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI3() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.addInto(null, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n+        \n+        test = new MutableTimePeriod(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"PT0S\", test.toString());\n+        \n+        test = new MutableTimePeriod(12345L);\n+        assertEquals(\"PT12.345S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToTimePeriod() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        TimePeriod result = test.toTimePeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    public void testToMutableTimePeriod() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        MutableTimePeriod result = test.toMutableTimePeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDurationMillis() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        assertEquals(123L, test.toDurationMillis());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testToDuration() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        assertEquals(new Duration(123L), test.toDuration());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.toDuration();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCopy() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        MutableTimePeriod copy = test.copy();\n+        assertEquals(test.getDurationType(), copy.getDurationType());\n+        assertEquals(test.isPrecise(), copy.isPrecise());\n+        assertEquals(test.toDurationMillis(), copy.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClone() {\n+        MutableTimePeriod test = new MutableTimePeriod(123L);\n+        MutableTimePeriod copy = (MutableTimePeriod) test.clone();\n+        assertEquals(test.getDurationType(), copy.getDurationType());\n+        assertEquals(test.isPrecise(), copy.isPrecise());\n+        assertEquals(test.toDurationMillis(), copy.toDurationMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutablePeriod_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutablePeriod_Constructors.class);\n+    }\n+\n+    public TestMutablePeriod_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod();\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (DurationType)\n+     */\n+    public void testConstructor_DurationType1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_DurationType2() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod((DurationType) null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableTimePeriod test = new MutableTimePeriod(length);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_DurationType1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableTimePeriod test = new MutableTimePeriod(length, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableTimePeriod test = new MutableTimePeriod(length, DurationType.getMillisType());\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableTimePeriod test = new MutableTimePeriod(length, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType4() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableTimePeriod test = new MutableTimePeriod(length, DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length - 8, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (4ints)\n+     */\n+    public void testConstructor_4int1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(5, 6, 7, 8);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int__DurationType1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_8int__DurationType2() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_8int__DurationType3() throws Throwable {\n+        try {\n+            new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis(), null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutableTimePeriod test = new MutableTimePeriod(dt1, dt2, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(\"P1Y2M3D\");\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod((Object) null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        TimePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise\n+        MutableTimePeriod test = new MutableTimePeriod(base);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object_DurationType1() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(\"P1Y2M3D\", DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_Object_DurationType2() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod((Object) null, DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType3() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType4() throws Throwable {\n+        MutableTimePeriod test = new MutableTimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutablePeriod_Updates extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutablePeriod_Updates.class);\n+    }\n+\n+    public TestMutablePeriod_Updates(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(10);\n+        assertEquals(11, test.getYears());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(-10);\n+        assertEquals(-9, test.getYears());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(0);\n+        assertEquals(1, test.getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(10);\n+        assertEquals(12, test.getMonths());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(-10);\n+        assertEquals(-8, test.getMonths());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(0);\n+        assertEquals(2, test.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(10);\n+        assertEquals(13, test.getWeeks());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(-10);\n+        assertEquals(-7, test.getWeeks());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(0);\n+        assertEquals(3, test.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(10);\n+        assertEquals(14, test.getDays());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(-10);\n+        assertEquals(-6, test.getDays());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(0);\n+        assertEquals(4, test.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(10);\n+        assertEquals(15, test.getHours());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(-10);\n+        assertEquals(-5, test.getHours());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(0);\n+        assertEquals(5, test.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(10);\n+        assertEquals(16, test.getMinutes());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(-10);\n+        assertEquals(-4, test.getMinutes());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(0);\n+        assertEquals(6, test.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(10);\n+        assertEquals(17, test.getSeconds());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(-10);\n+        assertEquals(-3, test.getSeconds());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(0);\n+        assertEquals(7, test.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMillis() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(10);\n+        assertEquals(18, test.getMillis());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(-10);\n+        assertEquals(-2, test.getMillis());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(0);\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetYears() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(10);\n+        assertEquals(10, test.getYears());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(-10);\n+        assertEquals(-10, test.getYears());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(0);\n+        assertEquals(0, test.getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMonths() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(10);\n+        assertEquals(10, test.getMonths());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(-10);\n+        assertEquals(-10, test.getMonths());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(0);\n+        assertEquals(0, test.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeeks() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(10);\n+        assertEquals(10, test.getWeeks());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(-10);\n+        assertEquals(-10, test.getWeeks());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(0);\n+        assertEquals(0, test.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDays() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(10);\n+        assertEquals(10, test.getDays());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(-10);\n+        assertEquals(-10, test.getDays());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(0);\n+        assertEquals(0, test.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetHours() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(10);\n+        assertEquals(10, test.getHours());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(-10);\n+        assertEquals(-10, test.getHours());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(0);\n+        assertEquals(0, test.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinutes() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(10);\n+        assertEquals(10, test.getMinutes());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(-10);\n+        assertEquals(-10, test.getMinutes());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(0);\n+        assertEquals(0, test.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSeconds() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(10);\n+        assertEquals(10, test.getSeconds());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(-10);\n+        assertEquals(-10, test.getSeconds());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(0);\n+        assertEquals(0, test.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(10);\n+        assertEquals(10, test.getMillis());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(-10);\n+        assertEquals(-10, test.getMillis());\n+        \n+        test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(0);\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTimePeriod_8ints1() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setTimePeriod(11, 12, 13, 14, 15, 16, 17, 18);\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_8ints2() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());\n+        try {\n+            test.setTimePeriod(11, 12, 13, 14, 15, 16, 17, 18);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_8ints3() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());\n+        test.setTimePeriod(0, 0, 0, 0, 0, 0, 0, 18);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+        assertEquals(18, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_8ints4() {\n+        MutableTimePeriod test = new MutableTimePeriod(0, 0, 0, 0, 5, 6, 7, 8);\n+        assertEquals(true, test.isPrecise());\n+        test.setTimePeriod(11, 12, 13, 14, 15, 16, 17, 18);\n+        assertEquals(false, test.isPrecise());\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTimePeriod_RP1() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setTimePeriod(new MutableTimePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_RP2() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());\n+        try {\n+            test.setTimePeriod(new MutableTimePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_RP3() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getMillisType());\n+        test.setTimePeriod(new MutableTimePeriod(0, 0, 0, 0, 0, 0, 0, 18));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+        assertEquals(18, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_RP4() {\n+        MutableTimePeriod test = new MutableTimePeriod(0, 0, 0, 0, 5, 6, 7, 8);\n+        assertEquals(true, test.isPrecise());\n+        test.setTimePeriod(new MutableTimePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(false, test.isPrecise());\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_RP5() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setTimePeriod((ReadableTimePeriod) null);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTimePeriod_long_long1() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long2() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt2.getMillis(), dt1.getMillis());\n+        assertEquals(-1, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(-1, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long3() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        test.setTimePeriod(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoYears() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withYearsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(0, test.getYears());\n+        assertEquals(13, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoMonths() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withMonthsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(5, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoWeeks() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withWeeksRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoDays() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withDaysRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(25, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoHours() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withHoursRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(61, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoMinutes() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withMinutesRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(61, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoSeconds() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withSecondsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(1001, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_long_NoMillis() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getAllType().withMillisRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTimePeriod_long1() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setTimePeriod(100L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long2() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType());\n+        test.setTimePeriod(\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long3() {\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearWeekType());\n+        test.setTimePeriod(\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(12, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoYears() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withYearsRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(0, test.getYears());\n+        assertEquals(15, test.getMonths()); // totalDays=365+85=450=15*30\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoMonths() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withMonthsRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(85, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoWeeks() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearWeekType().withWeeksRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(85, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoDays() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withDaysRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5 + 25 * 24, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoHours() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withHoursRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(6 + 5 * 60, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoMinutes() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withMinutesRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(7 + 6 * 60, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoSeconds() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withSecondsRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(8 + 7 * 1000, test.getMillis());\n+        assertEquals(ms, test.toDurationMillis());\n+    }\n+\n+    public void testSetTimePeriod_long_NoMillis() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableTimePeriod test = new MutableTimePeriod(DurationType.getPreciseYearMonthType().withMillisRemoved());\n+        test.setTimePeriod(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(ms - 8, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long1() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L);\n+        test.add(100L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+        assertEquals(200L, test.toDurationMillis());\n+    }\n+\n+    public void testAdd_long2() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+        assertEquals(ms + 100L, test.toDurationMillis());\n+    }\n+\n+    public void testAdd_long3() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());\n+        long ms =0L;\n+        test.add(ms);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100L, test.toDurationMillis());\n+    }\n+\n+    public void testAdd_long4() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(100L);\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RP1() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L);\n+        test.add(new TimePeriod(100L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+        assertEquals(200L, test.toDurationMillis());\n+    }\n+\n+    public void testAdd_RP2() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());\n+        test.add(new TimePeriod(1, 0, 12, 1, 5, 6, 7, 8, DurationType.getPreciseYearWeekType()));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_RP3() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());\n+        test.add(new TimePeriod(0L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100L, test.toDurationMillis());\n+    }\n+\n+    public void testAdd_RP4() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(new TimePeriod(100L));\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testAdd_RP5() {\n+        MutableTimePeriod test = new MutableTimePeriod(100L);\n+        try {\n+            test.add(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8));\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testAdd_RP6() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add((ReadableTimePeriod) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNormalize1() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.normalize();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testNormalize2() {\n+        MutableTimePeriod test = new MutableTimePeriod(1, 14, 0, 36, 29, 66, 67, 1008, DurationType.getPreciseYearMonthType());\n+        //   365 + 14*30 + 6 days\n+        // extra year created from 12 months of 30 days plus 5 extra days\n+        // 2*365 +  2*30 + 1 day\n+        test.normalize();\n+        assertEquals(2, test.getYears());\n+        assertEquals(3, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(2, test.getDays());\n+        assertEquals(6, test.getHours());\n+        assertEquals(7, test.getMinutes());\n+        assertEquals(8, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriod_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriod_Basics.class);\n+    }\n+\n+    public TestPeriod_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationType() {\n+        TimePeriod test = new TimePeriod(0L);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+    }\n+\n+    public void testGetIsPrecise() {\n+        TimePeriod test = new TimePeriod(123L);\n+        assertEquals(true, test.isPrecise());\n+        test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(false, test.isPrecise());\n+    }\n+\n+    public void testGetMethods() {\n+        TimePeriod test = new TimePeriod(0L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        TimePeriod test1 = new TimePeriod(123L);\n+        TimePeriod test2 = new TimePeriod(123L);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        TimePeriod test3 = new TimePeriod(321L);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockPeriod(123L)));\n+        assertEquals(false, test1.equals(new TimePeriod(123L, DurationType.getDayHourType())));\n+    }\n+    \n+    class MockPeriod extends AbstractTimePeriod {\n+        public MockPeriod(long value) {\n+            super(value, null);\n+        }\n+        protected DurationType checkDurationType(DurationType type) {\n+            return DurationType.getAllType();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        TimePeriod test = new TimePeriod(123L);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        TimePeriod result = (TimePeriod) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddTo1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo4() {\n+        long expected = TEST_TIME_NOW;\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 0);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo5() {\n+        long expected = TEST_TIME_NOW + 100L;\n+        TimePeriod test = new TimePeriod(100L);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToWithChronology1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToRI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI4() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddIntoRWI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, 1);\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI3() {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.addInto(null, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n+        \n+        test = new TimePeriod(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"PT0S\", test.toString());\n+        \n+        test = new TimePeriod(12345L);\n+        assertEquals(\"PT12.345S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToTimePeriod() {\n+        TimePeriod test = new TimePeriod(123L);\n+        TimePeriod result = test.toTimePeriod();\n+        assertSame(test, result);\n+    }\n+\n+    public void testToMutableTimePeriod() {\n+        TimePeriod test = new TimePeriod(123L);\n+        MutableTimePeriod result = test.toMutableTimePeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDurationMillis() {\n+        TimePeriod test = new TimePeriod(123L);\n+        assertEquals(123L, test.toDurationMillis());\n+        \n+        test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testToDuration() {\n+        TimePeriod test = new TimePeriod(123L);\n+        assertEquals(new Duration(123L), test.toDuration());\n+        \n+        test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.toDuration();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationTypeRetainDuration1() {\n+        TimePeriod test = new TimePeriod(123L);\n+        TimePeriod result = test.withDurationTypeRetainDuration(DurationType.getAllType());\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationTypeRetainDuration2() {\n+        TimePeriod test = new TimePeriod(3123L);\n+        TimePeriod result = test.withDurationTypeRetainDuration(DurationType.getDayHourType());\n+        assertEquals(3, result.getSeconds());\n+        assertEquals(123, result.getMillis());\n+        assertEquals(3123L, result.toDurationMillis());\n+        assertEquals(DurationType.getDayHourType(), result.getDurationType());\n+    }\n+\n+    public void testWithDurationTypeRetainDuration3() {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());\n+        try {\n+            test.withDurationTypeRetainDuration(DurationType.getDayHourType());\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testWithDurationTypeRetainDuration4() {\n+        TimePeriod test = new TimePeriod(3123L);\n+        TimePeriod result = test.withDurationTypeRetainDuration(null);\n+        assertEquals(3, result.getSeconds());\n+        assertEquals(123, result.getMillis());\n+        assertEquals(3123L, result.toDurationMillis());\n+        assertEquals(DurationType.getAllType(), result.getDurationType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationType1() {\n+        TimePeriod test = new TimePeriod(123L);\n+        TimePeriod result = test.withDurationType(DurationType.getAllType());\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationType2() {\n+        TimePeriod test = new TimePeriod(3123L);\n+        TimePeriod result = test.withDurationType(DurationType.getDayHourType());\n+        assertEquals(3, result.getSeconds());\n+        assertEquals(123, result.getMillis());\n+        assertEquals(3123L, result.toDurationMillis());\n+        assertEquals(DurationType.getDayHourType(), result.getDurationType());\n+    }\n+\n+    public void testWithDurationType3() {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());\n+        try {\n+            test.withDurationType(DurationType.getDayHourType());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithDurationType4() {\n+        TimePeriod test = new TimePeriod(3123L);\n+        TimePeriod result = test.withDurationType(null);\n+        assertEquals(3, result.getSeconds());\n+        assertEquals(123, result.getMillis());\n+        assertEquals(3123L, result.toDurationMillis());\n+        assertEquals(DurationType.getAllType(), result.getDurationType());\n+    }\n+\n+    public void testWithDurationType5() {\n+        TimePeriod test = new TimePeriod(1, 2, 0, 4, 5, 6, 7, 8, DurationType.getAllType());\n+        TimePeriod result = test.withDurationType(DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), result.getDurationType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldsNormalized1() {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getPreciseAllType());\n+        TimePeriod result = test.withFieldsNormalized();\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(3, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(7, result.getMinutes());\n+        assertEquals(1, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    public void testWithFieldsNormalized2() {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getAllType());\n+        try {\n+            test.withFieldsNormalized();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testImmutable() {\n+        MockChangeDuration test = new MockChangeDuration(111L);\n+        test.testSetDuration_RD();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetDuration_ints();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetTotalMillis_1();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetTotalMillis_2();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetYears();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetMonths();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetWeeks();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetDays();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetHours();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetMinutes();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetSeconds();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testSetMillis();\n+        assertEquals(111L, test.toDurationMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testNormalize();\n+        assertEquals(111L, test.toDurationMillis());\n+    }\n+    \n+    static class MockChangeDuration extends TimePeriod {\n+        MockChangeDuration(long duration) {\n+            super(duration);\n+        }\n+        public void testSetDuration_RD() {\n+            setTimePeriod((ReadableDuration) null);\n+        }\n+        public void testSetDuration_ints() {\n+            setTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        }\n+        public void testSetTotalMillis_1() {\n+            setTimePeriod(123L);\n+        }\n+        public void testSetTotalMillis_2() {\n+            setTimePeriod(123L, 321L);\n+        }\n+        public void testSetYears() {\n+            setYears(1);\n+        }\n+        public void testSetMonths() {\n+            setMonths(1);\n+        }\n+        public void testSetWeeks() {\n+            setWeeks(1);\n+        }\n+        public void testSetDays() {\n+            setDays(1);\n+        }\n+        public void testSetHours() {\n+            setHours(1);\n+        }\n+        public void testSetMinutes() {\n+            setMinutes(1);\n+        }\n+        public void testSetSeconds() {\n+            setSeconds(1);\n+        }\n+        public void testSetMillis() {\n+            setMillis(1);\n+        }\n+        public void testNormalize() {\n+            super.normalize();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriod_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriod_Constructors.class);\n+    }\n+\n+    public TestPeriod_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        TimePeriod test = new TimePeriod(length);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_DurationType1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        TimePeriod test = new TimePeriod(length, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        TimePeriod test = new TimePeriod(length, DurationType.getMillisType());\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        TimePeriod test = new TimePeriod(length, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType4() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        TimePeriod test = new TimePeriod(length, DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length - 8, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (4ints)\n+     */\n+    public void testConstructor_4int1() throws Throwable {\n+        TimePeriod test = new TimePeriod(5, 6, 7, 8);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int1() throws Throwable {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int__DurationType1() throws Throwable {\n+        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_8int__DurationType2() throws Throwable {\n+        TimePeriod test = new TimePeriod(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_8int__DurationType3() throws Throwable {\n+        try {\n+            new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        TimePeriod test = new TimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(-3, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        TimePeriod test = new TimePeriod(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        TimePeriod test = new TimePeriod(\"P1Y2M3D\");\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        TimePeriod test = new TimePeriod((Object) null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        TimePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise\n+        TimePeriod test = new TimePeriod(base);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object_DurationType1() throws Throwable {\n+        TimePeriod test = new TimePeriod(\"P1Y2M3D\", DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_Object_DurationType2() throws Throwable {\n+        TimePeriod test = new TimePeriod((Object) null, DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType3() throws Throwable {\n+        TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType4() throws Throwable {\n+        TimePeriod test = new TimePeriod(new TimePeriod(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/convert/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestAll.java\n         suite.addTest(TestReadableDurationConverter.suite());\n         suite.addTest(TestReadableIntervalConverter.suite());\n         suite.addTest(TestReadableInstantConverter.suite());\n+        suite.addTest(TestReadablePeriodConverter.suite());\n         suite.addTest(TestStringConverter.suite());\n         return suite;\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.Duration;\n+import org.joda.time.ReadableTimePeriod;\n import org.joda.time.TimePeriod;\n import org.joda.time.DurationType;\n import org.joda.time.Interval;\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    private static int DURATION_SIZE = 6;\n+    \n     public void testGetDurationConverter() {\n         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n         assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(new Duration(123L));\n+        assertEquals(ReadableDuration.class, c.getSupportedType());\n         \n         c = ConverterManager.getInstance().getDurationConverter(new TimePeriod(DurationType.getMillisType()));\n         assertEquals(ReadableDuration.class, c.getSupportedType());\n         } finally {\n             ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE);\n         }\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testGetDurationConverters() {\n         DurationConverter[] array = ConverterManager.getInstance().getDurationConverters();\n-        assertEquals(5, array.length);\n+        assertEquals(DURATION_SIZE, array.length);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testAddDurationConverter1() {\n         DurationConverter c = new DurationConverter() {\n-            public boolean isPrecise(Object object) {return false;}\n             public long getDurationMillis(Object object) {return 0;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getDurationConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(DURATION_SIZE + 1, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeDurationConverter(c);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverter2() {\n+        DurationConverter c = new DurationConverter() {\n+            public long getDurationMillis(Object object) {return 0;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getDurationConverter(\"\").getSupportedType());\n+            assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverter3() {\n+        DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveDurationConverter1() {\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(DURATION_SIZE - 1, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverter2() {\n+        DurationConverter c = new DurationConverter() {\n+            public long getDurationMillis(Object object) {return 0;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverter3() {\n+        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private static int PERIOD_SIZE = 5;\n+    \n+    public void testGetTimePeriodConverter() {\n+        TimePeriodConverter c = ConverterManager.getInstance().getTimePeriodConverter(new TimePeriod(DurationType.getMillisType()));\n+        assertEquals(ReadableTimePeriod.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getTimePeriodConverter(new Duration(123L));\n+        assertEquals(ReadableDuration.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getTimePeriodConverter(new Interval(0L, 1000L));\n+        assertEquals(ReadableInterval.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getTimePeriodConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getTimePeriodConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getTimePeriodConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetTimePeriodConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeTimePeriodConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getTimePeriodConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addTimePeriodConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetTimePeriodConverters() {\n+        TimePeriodConverter[] array = ConverterManager.getInstance().getTimePeriodConverters();\n+        assertEquals(PERIOD_SIZE, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddTimePeriodConverter1() {\n+        TimePeriodConverter c = new TimePeriodConverter() {\n             public void setInto(ReadWritableTimePeriod duration, Object object) {}\n             public DurationType getDurationType(Object object, boolean tmm) {return null;}\n             public Class getSupportedType() {return Boolean.class;}\n         };\n         try {\n-            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            TimePeriodConverter removed = ConverterManager.getInstance().addTimePeriodConverter(c);\n             assertEquals(null, removed);\n-            assertEquals(Boolean.class, ConverterManager.getInstance().getDurationConverter(Boolean.TRUE).getSupportedType());\n-            assertEquals(6, ConverterManager.getInstance().getDurationConverters().length);\n-        } finally {\n-            ConverterManager.getInstance().removeDurationConverter(c);\n-        }\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    public void testAddDurationConverter2() {\n-        DurationConverter c = new DurationConverter() {\n-            public boolean isPrecise(Object object) {return false;}\n-            public long getDurationMillis(Object object) {return 0;}\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getTimePeriodConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(PERIOD_SIZE + 1, ConverterManager.getInstance().getTimePeriodConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeTimePeriodConverter(c);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    public void testAddTimePeriodConverter2() {\n+        TimePeriodConverter c = new TimePeriodConverter() {\n             public void setInto(ReadWritableTimePeriod duration, Object object) {}\n             public DurationType getDurationType(Object object, boolean tmm) {return null;}\n             public Class getSupportedType() {return String.class;}\n         };\n         try {\n-            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            TimePeriodConverter removed = ConverterManager.getInstance().addTimePeriodConverter(c);\n             assertEquals(StringConverter.INSTANCE, removed);\n-            assertEquals(String.class, ConverterManager.getInstance().getDurationConverter(\"\").getSupportedType());\n-            assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-        } finally {\n-            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n-        }\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    public void testAddDurationConverter3() {\n-        DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null);\n-        assertEquals(null, removed);\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    public void testAddDurationConverterSecurity() {\n+            assertEquals(String.class, ConverterManager.getInstance().getTimePeriodConverter(\"\").getSupportedType());\n+            assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addTimePeriodConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    public void testAddTimePeriodConverter3() {\n+        TimePeriodConverter removed = ConverterManager.getInstance().addTimePeriodConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    public void testAddTimePeriodConverterSecurity() {\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n-            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+            ConverterManager.getInstance().addTimePeriodConverter(StringConverter.INSTANCE);\n             fail();\n         } catch (SecurityException ex) {\n             // ok\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testRemoveDurationConverter1() {\n-        try {\n-            DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveTimePeriodConverter1() {\n+        try {\n+            TimePeriodConverter removed = ConverterManager.getInstance().removeTimePeriodConverter(StringConverter.INSTANCE);\n             assertEquals(StringConverter.INSTANCE, removed);\n-            assertEquals(4, ConverterManager.getInstance().getDurationConverters().length);\n-        } finally {\n-            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n-        }\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    public void testRemoveDurationConverter2() {\n-        DurationConverter c = new DurationConverter() {\n-            public boolean isPrecise(Object object) {return false;}\n-            public long getDurationMillis(Object object) {return 0;}\n+            assertEquals(PERIOD_SIZE - 1, ConverterManager.getInstance().getTimePeriodConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addTimePeriodConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    public void testRemoveTimePeriodConverter2() {\n+        TimePeriodConverter c = new TimePeriodConverter() {\n             public void setInto(ReadWritableTimePeriod duration, Object object) {}\n             public DurationType getDurationType(Object object, boolean tmm) {return null;}\n             public Class getSupportedType() {return Boolean.class;}\n         };\n-        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(c);\n-        assertEquals(null, removed);\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    public void testRemoveDurationConverter3() {\n-        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null);\n-        assertEquals(null, removed);\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n-\n-    public void testRemoveDurationConverterSecurity() {\n+        TimePeriodConverter removed = ConverterManager.getInstance().removeTimePeriodConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    public void testRemoveTimePeriodConverter3() {\n+        TimePeriodConverter removed = ConverterManager.getInstance().removeTimePeriodConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n+    }\n+\n+    public void testRemoveTimePeriodConverterSecurity() {\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n-            ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            ConverterManager.getInstance().removeTimePeriodConverter(StringConverter.INSTANCE);\n             fail();\n         } catch (SecurityException ex) {\n             // ok\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getTimePeriodConverters().length);\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n-        assertEquals(\"ConverterManager[6 instant,5 duration,2 interval]\", ConverterManager.getInstance().toString());\n+        assertEquals(\"ConverterManager[6 instant,6 duration,5 period,2 interval]\", ConverterManager.getInstance().toString());\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testGetDurationType_Object() throws Exception {\n         assertEquals(DurationType.getAllType(),\n             LongConverter.INSTANCE.getDurationType(new Long(123L), false));\n             LongConverter.INSTANCE.getDurationType(new Long(123L), true));\n     }\n \n-    public void testIsPrecise_Object() throws Exception {\n-        assertEquals(true, LongConverter.INSTANCE.isPrecise(new Long(123L)));\n-    }\n-\n     public void testSetInto_Object() throws Exception {\n         MutableTimePeriod m = new MutableTimePeriod(DurationType.getMillisType());\n         LongConverter.INSTANCE.setInto(m, new Long(123L));\n-        assertEquals(123L, m.getTotalMillis());\n+        assertEquals(123L, m.toDurationMillis());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n         assertEquals(0L, NullConverter.INSTANCE.getDurationMillis(null));\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testGetDurationType_Object() throws Exception {\n         assertEquals(DurationType.getAllType(),\n             NullConverter.INSTANCE.getDurationType(null, false));\n             NullConverter.INSTANCE.getDurationType(null, true));\n     }\n \n-    public void testIsPrecise_Object() throws Exception {\n-        assertEquals(true, NullConverter.INSTANCE.isPrecise(null));\n-    }\n-\n     public void testSetInto_Object() throws Exception {\n         MutableTimePeriod m = new MutableTimePeriod(DurationType.getMillisType());\n         NullConverter.INSTANCE.setInto(m, null);\n-        assertEquals(0L, m.getTotalMillis());\n+        assertEquals(0L, m.toDurationMillis());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n-import org.joda.time.TimePeriod;\n+import org.joda.time.Duration;\n import org.joda.time.DurationType;\n-import org.joda.time.MillisDuration;\n import org.joda.time.MutableTimePeriod;\n import org.joda.time.ReadableDuration;\n import org.joda.time.chrono.ISOChronology;\n \n     //-----------------------------------------------------------------------\n     public void testGetDurationMillis_Object() throws Exception {\n-        assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new TimePeriod(123L)));\n-        try {\n-            ReadableDurationConverter.INSTANCE.getDurationMillis(new TimePeriod(1, 2, 0, 1, 0, 0, 0, 0));\n-            fail();\n-        } catch (IllegalStateException ex) {}\n+        assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(123L)));\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testGetDurationType_Object() throws Exception {\n-        assertEquals(DurationType.getMillisType(),\n-            ReadableDurationConverter.INSTANCE.getDurationType(\n-                new TimePeriod(123L, DurationType.getMillisType()), false));\n-        assertEquals(DurationType.getAllType(),\n-            ReadableDurationConverter.INSTANCE.getDurationType(\n-                new TimePeriod(1, 2, 0, 1, 0, 0, 0, 0), false));\n         assertEquals(DurationType.getPreciseAllType(),\n-            ReadableDurationConverter.INSTANCE.getDurationType(\n-                new MillisDuration(1, 2, 0, 1, 0, 0, 0, 0), true));\n-    }\n-\n-    public void testIsPrecise_Object() throws Exception {\n-        assertEquals(true, ReadableDurationConverter.INSTANCE.isPrecise(new TimePeriod(123L)));\n-        assertEquals(false, ReadableDurationConverter.INSTANCE.isPrecise(new TimePeriod(1, 2, 0, 1, 0, 0, 0, 0)));\n+            ReadableDurationConverter.INSTANCE.getDurationType(new Duration(123L), false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            ReadableDurationConverter.INSTANCE.getDurationType(new Duration(123L), true));\n     }\n \n     public void testSetInto_Object() throws Exception {\n         MutableTimePeriod m = new MutableTimePeriod(DurationType.getYearMonthType());\n-        ReadableDurationConverter.INSTANCE.setInto(m, new TimePeriod(1, 2, 0, 3, 0, 0, 0, 0));\n-        assertEquals(1, m.getYears());\n-        assertEquals(2, m.getMonths());\n+        ReadableDurationConverter.INSTANCE.setInto(m, new Duration(\n+            3L * DateTimeConstants.MILLIS_PER_DAY +\n+            4L * DateTimeConstants.MILLIS_PER_MINUTE + 5L\n+        ));\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n         assertEquals(0, m.getWeeks());\n         assertEquals(3, m.getDays());\n         assertEquals(0, m.getHours());\n-        assertEquals(0, m.getMinutes());\n+        assertEquals(4, m.getMinutes());\n         assertEquals(0, m.getSeconds());\n-        assertEquals(0, m.getMillis());\n+        assertEquals(5, m.getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n \n     //-----------------------------------------------------------------------\n     public void testGetDurationMillis_Object() throws Exception {\n-        Interval i = new Interval(0L, 123L);\n+        Interval i = new Interval(100L, 223L);\n         assertEquals(123L, ReadableIntervalConverter.INSTANCE.getDurationMillis(i));\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testGetDurationType_Object() throws Exception {\n-        Interval i = new Interval(0L, 123L);\n+        Interval i = new Interval(100L, 223L);\n         assertEquals(DurationType.getAllType(),\n             ReadableIntervalConverter.INSTANCE.getDurationType(i, false));\n         assertEquals(DurationType.getPreciseAllType(),\n             ReadableIntervalConverter.INSTANCE.getDurationType(i, true));\n     }\n \n-    public void testIsPrecise_Object() throws Exception {\n-        Interval i = new Interval(0L, 123L);\n-        assertEquals(true, ReadableIntervalConverter.INSTANCE.isPrecise(i));\n-    }\n-\n     public void testSetInto_Object() throws Exception {\n-        Interval i = new Interval(0L, 123L);\n+        Interval i = new Interval(100L, 223L);\n         MutableTimePeriod m = new MutableTimePeriod(DurationType.getMillisType());\n         ReadableIntervalConverter.INSTANCE.setInto(m, i);\n         assertEquals(0, m.getYears());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationType;\n+import org.joda.time.MutableTimePeriod;\n+import org.joda.time.ReadableTimePeriod;\n+import org.joda.time.TimePeriod;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadableTimePeriodConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadablePeriodConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadablePeriodConverter.class);\n+    }\n+\n+    public TestReadablePeriodConverter(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadableTimePeriodConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadableTimePeriod.class, ReadableTimePeriodConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetTimePeriodMillis_Object() throws Exception {\n+        assertEquals(123L, ReadableTimePeriodConverter.INSTANCE.getDurationMillis(new TimePeriod(123L)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationType_Object() throws Exception {\n+        assertEquals(DurationType.getAllType(),\n+            ReadableTimePeriodConverter.INSTANCE.getDurationType(new TimePeriod(123L), false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            ReadableTimePeriodConverter.INSTANCE.getDurationType(new TimePeriod(123L), true));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            ReadableTimePeriodConverter.INSTANCE.getDurationType(new TimePeriod(123L, DurationType.getAllType()), true));\n+        assertEquals(DurationType.getPreciseYearDayType(),\n+            ReadableTimePeriodConverter.INSTANCE.getDurationType(new TimePeriod(123L, DurationType.getPreciseYearDayType()), true));\n+    }\n+\n+    public void testSetInto_Object() throws Exception {\n+        MutableTimePeriod m = new MutableTimePeriod(DurationType.getYearMonthType());\n+        ReadableTimePeriodConverter.INSTANCE.setInto(m, new TimePeriod(0, 0, 0, 3, 0, 4, 0, 5));\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(4, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(5, m.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadableTimePeriod]\", ReadableTimePeriodConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationType;\n import org.joda.time.MutableTimePeriod;\n \n     //-----------------------------------------------------------------------\n     public void testGetDurationMillis_Object() throws Exception {\n-        try {\n-            StringConverter.INSTANCE.getDurationMillis(\"P2Y6M9D\");\n-            fail();\n-        } catch (UnsupportedOperationException ex) {}\n-    }\n-\n+        long millis = StringConverter.INSTANCE.getDurationMillis(\"P2Y6M9D\");\n+        long len = (2L * 365L + 6L * 30L + 9L) * DateTimeConstants.MILLIS_PER_DAY;\n+        assertEquals(len, millis);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGetDurationType_Object() throws Exception {\n         assertEquals(DurationType.getAllType(),\n             StringConverter.INSTANCE.getDurationType(\"P2Y6M9D\", false));\n         assertEquals(DurationType.getPreciseAllType(),\n             StringConverter.INSTANCE.getDurationType(\"P2Y6M9D\", true));\n-    }\n-\n-    public void testIsPrecise_Object() throws Exception {\n-        assertEquals(false, StringConverter.INSTANCE.isPrecise(\"P2Y6M9D\"));\n     }\n \n     public void testSetInto_Object() throws Exception {", "timestamp": 1091576972, "metainfo": ""}