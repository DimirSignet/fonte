{"sha": "60cd3a8f9107cc1e547bdcfd04c34b67c990eea9", "log": "Added.   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/format/ISODurationFormat.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-03 Stephen Colebourne.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally\n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+/**\n+ * ISODurationFormat provides factory methods for the ISO8601 standard.\n+ * <p>\n+ * ISODurationFormat is thread-safe and immutable, and the formatters it\n+ * returns are as well.\n+ *\n+ * @author Brian S O'Neill\n+ * @see DurationFormat\n+ * @see DurationFormatterBuilder\n+ */\n+public class ISODurationFormat {\n+    private static final ISODurationFormat INSTANCE = new ISODurationFormat();\n+\n+    /**\n+     * Returns a singleton instance of ISODurationFormat.\n+     */\n+    public static ISODurationFormat getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private transient DurationFormatter\n+        iStandard,\n+        iAlternate,\n+        iAlternateExtended,\n+        iAlternateWithWeeks,\n+        iAlternateExtendedWihWeeks;\n+\n+    private ISODurationFormat() {\n+    }\n+\n+    /**\n+     * PyYmMwWdDThHmMsS\n+     */\n+    public DurationFormatter standard() {\n+        if (iStandard == null) {\n+            iStandard = new DurationFormatterBuilder()\n+                .appendLiteral(\"P\")\n+                .printZeroIfSupported()\n+                .appendYears()\n+                .appendSuffix(\"Y\")\n+                .appendMonths()\n+                .appendSuffix(\"M\")\n+                .appendWeeks()\n+                .appendSuffix(\"W\")\n+                .appendDays()\n+                .appendSuffix(\"D\")\n+                .appendSeparator(\"T\")\n+                .appendHours()\n+                .appendSuffix(\"H\")\n+                .appendMinutes()\n+                .appendSuffix(\"M\")\n+                .appendSeconds()\n+                .appendSuffix(\"S\")\n+                .toFormatter();\n+        }\n+        return iStandard;\n+    }\n+\n+    /**\n+     * PyyyymmddThhmmss\n+     */\n+    public DurationFormatter alternate() {\n+        if (iAlternate == null) {\n+            iAlternate = new DurationFormatterBuilder()\n+                .appendLiteral(\"P\")\n+                .printZeroAlways()\n+                .minimumPrintedDigits(4)\n+                .appendYears()\n+                .minimumPrintedDigits(2)\n+                .appendMonths()\n+                .appendDays()\n+                .appendSeparator(\"T\")\n+                .appendHours()\n+                .appendMinutes()\n+                .appendSeconds()\n+                .toFormatter();\n+        }\n+        return iAlternate;\n+    }\n+\n+    /**\n+     * Pyyyy-mm-ddThh:mm:ss\n+     */\n+    public DurationFormatter alternateExtended() {\n+        if (iAlternateExtended == null) {\n+            iAlternateExtended = new DurationFormatterBuilder()\n+                .appendLiteral(\"P\")\n+                .printZeroAlways()\n+                .minimumPrintedDigits(4)\n+                .appendYears()\n+                .appendSeparator(\"-\")\n+                .minimumPrintedDigits(2)\n+                .appendMonths()\n+                .appendSeparator(\"-\")\n+                .appendDays()\n+                .appendSeparator(\"T\")\n+                .appendHours()\n+                .appendSeparator(\":\")\n+                .appendMinutes()\n+                .appendSeparator(\":\")\n+                .appendSeconds()\n+                .toFormatter();\n+        }\n+        return iAlternateExtended;\n+    }\n+\n+    /**\n+     * PyyyyWwwddThhmmss\n+     */\n+    public DurationFormatter alternateWithWeeks() {\n+        if (iAlternateWithWeeks == null) {\n+            iAlternateWithWeeks = new DurationFormatterBuilder()\n+                .appendLiteral(\"P\")\n+                .printZeroAlways()\n+                .minimumPrintedDigits(4)\n+                .appendYears()\n+                .minimumPrintedDigits(2)\n+                .appendPrefix(\"W\")\n+                .appendWeeks()\n+                .appendDays()\n+                .appendSeparator(\"T\")\n+                .appendHours()\n+                .appendMinutes()\n+                .appendSeconds()\n+                .toFormatter();\n+        }\n+        return iAlternateWithWeeks;\n+    }\n+\n+    /**\n+     * Pyyyy-Www-ddThh:mm:ss\n+     */\n+    public DurationFormatter alternateExtendedWithWeeks() {\n+        if (iAlternateExtendedWihWeeks == null) {\n+            iAlternateExtendedWihWeeks = new DurationFormatterBuilder()\n+                .appendLiteral(\"P\")\n+                .printZeroAlways()\n+                .minimumPrintedDigits(4)\n+                .appendYears()\n+                .appendSeparator(\"-\")\n+                .minimumPrintedDigits(2)\n+                .appendPrefix(\"W\")\n+                .appendWeeks()\n+                .appendSeparator(\"-\")\n+                .appendDays()\n+                .appendSeparator(\"T\")\n+                .appendHours()\n+                .appendSeparator(\":\")\n+                .appendMinutes()\n+                .appendSeparator(\":\")\n+                .appendSeconds()\n+                .toFormatter();\n+        }\n+        return iAlternateExtendedWihWeeks;\n+    }\n+\n+}", "timestamp": 1071978564, "metainfo": ""}