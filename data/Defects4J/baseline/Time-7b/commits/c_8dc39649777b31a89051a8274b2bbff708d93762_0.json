{"sha": "8dc39649777b31a89051a8274b2bbff708d93762", "log": "Add DateTime.withTimeAtStartOfDay() [3304757]", "commit": "\n--- a/src/main/java/org/joda/time/DateTime.java\n+++ b/src/main/java/org/joda/time/DateTime.java\n      * <pre>\n      * DateTime set = monthOfYear().setCopy(6);\n      * </pre>\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n      *\n      * @param year  the new year value\n      * @param monthOfYear  the new monthOfYear value\n      * <pre>\n      * DateTime set = dt.hourOfDay().setCopy(6);\n      * </pre>\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n      *\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n         instant = chrono.secondOfMinute().set(instant, secondOfMinute);\n         instant = chrono.millisOfSecond().set(instant, millisOfSecond);\n         return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a copy of this datetime with the time set to the start of the day.\n+     * <p>\n+     * The time will normally be midnight, as that is the earliest time on\n+     * any given day. However, in some time zones when Daylight Savings Time\n+     * starts, there is no midnight because time jumps from 11:59 to 01:00.\n+     * This method handles that situation by returning 01:00 on that date.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @return a copy of this datetime with the time set to the start of the day, not null\n+     */\n+    public DateTime withTimeAtStartOfDay() {\n+        return toLocalDate().toDateTimeAtStartOfDay(getZone());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1306010827, "metainfo": ""}