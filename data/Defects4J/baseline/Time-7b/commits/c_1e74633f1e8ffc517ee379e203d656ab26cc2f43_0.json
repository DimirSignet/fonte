{"sha": "1e74633f1e8ffc517ee379e203d656ab26cc2f43", "log": "Fixed javadoc tags   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * \n-     * @param durationToAdd  the duration to add to this one, null means zero\n+     * @param duration  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the duration added\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n      * @return a copy of this datetime with the duration taken away\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n-    public DateMidnight minus(ReadableDuration durationToAdd) {\n-        return withDurationAdded(durationToAdd, -1);\n+    public DateMidnight minus(ReadableDuration duration) {\n+        return withDurationAdded(duration, -1);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * \n-     * @param durationToAdd  the duration to add to this one, null means zero\n+     * @param duration  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the duration added\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n      * @return a copy of this datetime with the duration taken away\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n-    public DateTime minus(ReadableDuration durationToAdd) {\n-        return withDurationAdded(durationToAdd, -1);\n+    public DateTime minus(ReadableDuration duration) {\n+        return withDurationAdded(duration, -1);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * \n-     * @param durationToAdd  the duration to add to this one, null means zero\n+     * @param duration  the duration to add to this one, null means zero\n      * @return a copy of this instant with the duration added\n      * @throws ArithmeticException if the new instant exceeds the capacity of a long\n      */\n      * @return a copy of this instant with the duration taken away\n      * @throws ArithmeticException if the new instant exceeds the capacity of a long\n      */\n-    public Instant minus(ReadableDuration durationToAdd) {\n-        return withDurationAdded(durationToAdd, -1);\n+    public Instant minus(ReadableDuration duration) {\n+        return withDurationAdded(duration, -1);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n      * @return the new period instance\n      * @throws IllegalArgumentException if the field type is null or unsupported\n      */\n-    public Period withFieldAdded(DurationFieldType field, int valueToAdd) {\n+    public Period withFieldAdded(DurationFieldType field, int value) {\n         if (field == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n-        if (valueToAdd == 0) {\n+        if (value == 0) {\n             return this;\n         }\n         int[] newValues = getValues();  // cloned\n-        super.addFieldInto(newValues, field, valueToAdd);\n+        super.addFieldInto(newValues, field, value);\n         return new Period(newValues, getPeriodType());\n     }\n \n--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java\n      * on start and end millis plus the chronology.\n      * All ReadableInterval instances are accepted.\n      * <p>\n-     * To compare the duration of two time intervals, use {@link #getDuration()}\n+     * To compare the duration of two time intervals, use {@link #toDuration()}\n      * to get the durations and compare those.\n      *\n      * @param readableInterval  a readable interval to check against\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n      * but additional days will be ignored.\n      * This method uses the UTC time zone internally.\n      *\n-     * @param instant  the number of milliseconds into a day to convert\n+     * @param millisOfDay  the number of milliseconds into a day to convert\n      * @param chrono  the chronology, null means ISO chronology\n      */\n     public static TimeOfDay fromMillisOfDay(long millisOfDay, Chronology chrono) {\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n      * <p>\n      * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n-     * @param instant  the instant to compare to, null means now\n+     * @param interval  the interval to compare to, null means now\n      * @return true if this time interval is before the interval specified\n      */\n     public boolean isBefore(ReadableInterval interval) {\n      * <p>\n      * Intervals are inclusive of the start instant and exclusive of the end.\n      * \n-     * @param instant  the instant to compare to, null means now\n+     * @param interval  the interval to compare to, null means now\n      * @return true if this time interval is after the interval specified\n      */\n     public boolean isAfter(ReadableInterval interval) {\n      * on start and end millis plus the chronology.\n      * All ReadableInterval instances are accepted.\n      * <p>\n-     * To compare the duration of two time intervals, use {@link #getDuration()}\n+     * To compare the duration of two time intervals, use {@link #toDuration()}\n      * to get the durations and compare those.\n      *\n      * @param readableInterval  a readable interval to check against\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java\n  * Calculations on are performed using a {@link Chronology}.\n  * This chronology is set to be in the UTC time zone for all calculations.\n  * <p>\n- * The methods on this class uses {@link ReadablePartial#getFieldSize()},\n+ * The methods on this class uses {@link ReadablePartial#size()},\n  * {@link ReadablePartial#getField(int)} and {@link ReadablePartial#getValue(int)}\n  * to calculate their results. Subclasses may have a better implementation.\n  * <p>\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n      * If the field type specified is not supported by the period then zero\n      * is returned.\n      *\n-     * @param field  the field type to query, null returns zero\n+     * @param type  the field type to query, null returns zero\n      * @return the value of that field, zero if field not supported\n      */\n     public int get(DurationFieldType type) {\n      * Compares this object with the specified object for equality based\n      * on the value of each field. All ReadablePeriod instances are accepted.\n      *\n-     * @param readablePeriod  a readable period to check against\n+     * @param period  a readable period to check against\n      * @return true if all the field values are equal, false if\n      *  not or the period is null or of an incorrect type\n      */\n--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java\n      *\n      * @param base  the base partial\n      * @param values  the new set of values, not cloned, null means use base\n-     * @param chrono  the chronology to use, null means use base\n      */\n     protected BasePartial(BasePartial base, int[] values) {\n         super();\n      * This should not be used by mutable subclasses.\n      *\n      * @param base  the base partial\n-     * @param values  the new set of values, not cloned, null means use base\n      * @param chrono  the chronology to use, null means use base\n      */\n     protected BasePartial(BasePartial base, Chronology chrono) {\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n      * Get the human-readable, text value of this field from a partial instant.\n      * If the specified locale is null, the default locale is used.\n      * <p>\n-     * The default implementation calls {@link ReadablePartial#get(DateTimeField)}\n+     * The default implementation calls {@link ReadablePartial#get(DateTimeFieldType)}\n      * and {@link #getAsText(ReadablePartial, int, Locale)}.\n      *\n      * @param partial  the partial instant to query\n      * Get the human-readable, short text value of this field from a partial instant.\n      * If the specified locale is null, the default locale is used.\n      * <p>\n-     * The default implementation calls {@link ReadablePartial#get(DateTimeField)}\n+     * The default implementation calls {@link ReadablePartial#get(DateTimeFieldType)}\n      * and {@link #getAsText(ReadablePartial, int, Locale)}.\n      *\n      * @param partial  the partial instant to query", "timestamp": 1098286983, "metainfo": ""}