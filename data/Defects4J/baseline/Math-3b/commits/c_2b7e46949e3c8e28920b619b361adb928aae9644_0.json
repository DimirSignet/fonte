{"sha": "2b7e46949e3c8e28920b619b361adb928aae9644", "log": "Fixed checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java\n         return compiler.getOrder();\n     }\n \n-    /***/\n+    /** {@inheritDoc} */\n     public double getReal() {\n         return data[0];\n     }\n         }\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n \n     }\n \n         }\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);\n \n     }\n \n         final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(getFreeParameters(), getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n \n     }\n \n         final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(getFreeParameters(), getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n \n     }\n \n         final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(getFreeParameters(), getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n \n     }\n \n         final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(getFreeParameters(), getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n \n     }\n \n         final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(getFreeParameters(), getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n \n     }\n \n         final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n \n         // create a result with accurate value and all derivatives (not necessarily as accurate as the value)\n-        final double[] data = simpleValue.getAllDerivatives();\n-        data[0] = accurateValue;\n-        return new DerivativeStructure(getFreeParameters(), getOrder(), data);\n+        final double[] all = simpleValue.getAllDerivatives();\n+        all[0] = accurateValue;\n+        return new DerivativeStructure(getFreeParameters(), getOrder(), all);\n \n     }\n \n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java\n  * interpolation polynomial for n sample points with value, first and second\n  * derivative for all points all have degree 3n-1.\n  * </p>\n+ *\n+ * @param <T> Type of the field elements.\n  *\n  * @version $Id$\n  * @since 3.2", "timestamp": 1362761819, "metainfo": ""}