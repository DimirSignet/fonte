{"sha": "76c6f5693e129487b5e05d8907a00908873c3a66", "log": "Replaced unit tests.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatorTest.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.analysis.BivariateFunction;\n+import org.apache.commons.math3.distribution.UniformRealDistribution;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well19937c;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.Ignore;\n     }\n \n     /**\n-     * Test of interpolator for a plane.\n+     * Interpolating a plane.\n      * <p>\n      * z = 2 x - 3 y + 5\n      */\n-    @Ignore@Test\n-    public void testPlane() {\n+    @Test\n+    public void testInterpolation1() {\n+        final int sz = 21;\n+        double[] xval = new double[sz];\n+        double[] yval = new double[sz];\n+        // Coordinate values\n+        final double delta = 1d / (sz - 1);\n+        for (int i = 0; i < sz; i++) {\n+            xval[i] = -1 + 15 * i * delta;\n+            yval[i] = -20 + 30 * i * delta;\n+        }\n+\n+        // Function values\n         BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x - 3 * y + 5;\n                 }\n             };\n-\n-        BivariateGridInterpolator interpolator = new BicubicSplineInterpolator();\n-\n-        double[] xval = new double[] {3, 4, 5, 6.5};\n-        double[] yval = new double[] {-4, -3, -1, 2, 2.5};\n         double[][] zval = new double[xval.length][yval.length];\n         for (int i = 0; i < xval.length; i++) {\n             for (int j = 0; j < yval.length; j++) {\n             }\n         }\n \n+        BivariateGridInterpolator interpolator = new BicubicSplineInterpolator();\n         BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         double x, y;\n-        double expected, result;\n-        \n-        x = 4;\n-        y = -3;\n-        expected = f.value(x, y);\n-        result = p.value(x, y);\n-        Assert.assertEquals(\"On sample point\", expected, result, 1e-15);\n \n-        x = 4.5;\n-        y = -1.5;\n-        expected = f.value(x, y);\n-        result = p.value(x, y);\n-        Assert.assertEquals(\"half-way between sample points (middle of the patch)\", expected, result, 0.3);\n+        final RandomGenerator rng = new Well19937c(1234567L); // \"tol\" depends on the seed.\n+        final UniformRealDistribution distX\n+            = new UniformRealDistribution(rng, xval[0], xval[xval.length - 1]);\n+        final UniformRealDistribution distY\n+            = new UniformRealDistribution(rng, yval[0], yval[yval.length - 1]);\n \n-        x = 3.5;\n-        y = -3.5;\n-        expected = f.value(x, y);\n-        result = p.value(x, y);\n-        Assert.assertEquals(\"half-way between sample points (border of the patch)\", expected, result, 0.3);\n+        final int numSamples = 50;\n+        final double tol = 6;\n+        for (int i = 0; i < numSamples; i++) {\n+            x = distX.sample();\n+            for (int j = 0; j < numSamples; j++) {\n+                y = distY.sample();\n+//                 System.out.println(x + \" \" + y + \" \" + f.value(x, y) + \" \" + p.value(x, y));\n+                Assert.assertEquals(f.value(x, y),  p.value(x, y), tol);\n+            }\n+//             System.out.println();\n+        }\n     }\n \n     /**\n-     * Test of interpolator for a paraboloid.\n+     * Interpolating a paraboloid.\n      * <p>\n      * z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5\n      */\n     @Test\n-    public void testParaboloid() {\n+    public void testInterpolation2() {\n+        final int sz = 21;\n+        double[] xval = new double[sz];\n+        double[] yval = new double[sz];\n+        // Coordinate values\n+        final double delta = 1d / (sz - 1);\n+        for (int i = 0; i < sz; i++) {\n+            xval[i] = -1 + 15 * i * delta;\n+            yval[i] = -20 + 30 * i * delta;\n+        }\n+\n+        // Function values\n         BivariateFunction f = new BivariateFunction() {\n                 public double value(double x, double y) {\n                     return 2 * x * x - 3 * y * y + 4 * x * y - 5;\n                 }\n             };\n-\n-        BivariateGridInterpolator interpolator = new BicubicSplineInterpolator();\n-\n-        double[] xval = new double[] {3, 4, 5, 6.5};\n-        double[] yval = new double[] {-4, -3, -2, -1, 0.5, 2.5};\n         double[][] zval = new double[xval.length][yval.length];\n         for (int i = 0; i < xval.length; i++) {\n             for (int j = 0; j < yval.length; j++) {\n             }\n         }\n \n+        BivariateGridInterpolator interpolator = new BicubicSplineInterpolator();\n         BivariateFunction p = interpolator.interpolate(xval, yval, zval);\n         double x, y;\n-        double expected, result;\n-        \n-        x = 5;\n-        y = 0.5;\n-        expected = f.value(x, y);\n-        result = p.value(x, y);\n-        Assert.assertEquals(\"On sample point\", expected, result, 1e-13);\n \n-        x = 4.5;\n-        y = -1.5;\n-        expected = f.value(x, y);\n-        result = p.value(x, y);\n-        Assert.assertEquals(\"half-way between sample points (middle of the patch)\", expected, result, 0.2);\n+        final RandomGenerator rng = new Well19937c(1234567L); // \"tol\" depends on the seed.\n+        final UniformRealDistribution distX\n+            = new UniformRealDistribution(rng, xval[0], xval[xval.length - 1]);\n+        final UniformRealDistribution distY\n+            = new UniformRealDistribution(rng, yval[0], yval[yval.length - 1]);\n \n-        x = 3.5;\n-        y = -3.5;\n-        expected = f.value(x, y);\n-        result = p.value(x, y);\n-        Assert.assertEquals(\"half-way between sample points (border of the patch)\", expected, result, 0.2);\n+        final int numSamples = 50;\n+        final double tol = 251;\n+        for (int i = 0; i < numSamples; i++) {\n+            x = distX.sample();\n+            for (int j = 0; j < numSamples; j++) {\n+                y = distY.sample();\n+//                 System.out.println(x + \" \" + y + \" \" + f.value(x, y) + \" \" + p.value(x, y));\n+                Assert.assertEquals(f.value(x, y),  p.value(x, y), tol);\n+            }\n+//             System.out.println();\n+        }\n     }\n }", "timestamp": 1370038604, "metainfo": ""}