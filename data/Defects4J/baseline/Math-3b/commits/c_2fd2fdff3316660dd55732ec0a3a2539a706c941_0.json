{"sha": "2fd2fdff3316660dd55732ec0a3a2539a706c941", "log": "Fixed wrong first iteration for midpoint integrator.  Thanks to Gilles for spotting the issue.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java\n         final double diff = getMax() - min;\n \n         if (n == 0) {\n-            final double midPoint = 0.5 * diff;\n+            final double midPoint = min + 0.5 * diff;\n             return diff * computeObjectiveValue(midPoint);\n         } else {\n             final long np = 1L << (n - 1);           // number of new points in this stage\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/MidPointIntegratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/MidPointIntegratorTest.java\n  * @version $Id: MidPointIntegratorTest.java 1374632 2012-08-18 18:11:11Z luc $\n  */\n public final class MidPointIntegratorTest {\n+\n+    /**\n+     * Test of integrator for the sine function.\n+     */\n+    @Test\n+    public void testLowAccuracy() {\n+        UnivariateFunction f = new QuinticFunction();\n+        UnivariateIntegrator integrator = new MidPointIntegrator(0.01, 1.0e-10, 2, 4);\n+        \n+        double min = -10;\n+        double max =  -9;\n+        double expected = -3697001.0 / 48.0;\n+        double tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());\n+        double result = integrator.integrate(Integer.MAX_VALUE, f, min, max);\n+        Assert.assertTrue(integrator.getEvaluations() < Integer.MAX_VALUE / 2);\n+        Assert.assertTrue(integrator.getIterations() < MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);\n+        Assert.assertEquals(expected, result, tolerance);\n+\n+    }\n \n     /**\n      * Test of integrator for the sine function.", "timestamp": 1370261436, "metainfo": ""}