{"sha": "a50ec429ece53bbc35b94cdb9ba0861c597d3eb7", "log": "MATH-991 Method to check whether a point is within the interpolation range.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java\n         System.arraycopy(knots, 0, out, 0, n + 1);\n         return out;\n     }\n+\n+    /**\n+     * Indicates whether a point is within the interpolation range.\n+     *\n+     * @param x Point.\n+     * @return {@code true} if {@code x} is a valid point.\n+     */\n+    public boolean isValidPoint(double x) {\n+        if (x < knots[0] ||\n+            x > knots[n]) {\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java\n         }\n     }\n \n+    @Test\n+    public void testIsValidPoint() {\n+        final PolynomialSplineFunction spline =\n+            new PolynomialSplineFunction(knots, polynomials);\n+        final double xMin = knots[0];\n+        final double xMax = knots[knots.length - 1];\n+\n+        double x;\n+\n+        x = xMin;\n+        Assert.assertTrue(spline.isValidPoint(x));\n+        // Ensure that no exception is thrown.\n+        spline.value(x);\n+\n+        x = xMax;\n+        Assert.assertTrue(spline.isValidPoint(x));\n+        // Ensure that no exception is thrown.\n+        spline.value(x);\n+ \n+        final double xRange = xMax - xMin;\n+        x = xMin + xRange / 3.4;\n+        Assert.assertTrue(spline.isValidPoint(x));\n+        // Ensure that no exception is thrown.\n+        spline.value(x);\n+\n+        final double small = 1e-8;\n+        x = xMin - small;\n+        Assert.assertFalse(spline.isValidPoint(x));\n+        // Ensure that an exception would have been thrown.\n+        try {\n+            spline.value(x);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException expected) {}\n+    }\n+\n     /**\n      *  Do linear search to find largest knot point less than or equal to x.\n      *  Implementation does binary search.", "timestamp": 1370902951, "metainfo": ""}