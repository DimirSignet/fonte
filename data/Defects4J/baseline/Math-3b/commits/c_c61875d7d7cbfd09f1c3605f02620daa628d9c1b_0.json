{"sha": "c61875d7d7cbfd09f1c3605f02620daa628d9c1b", "log": "Allow covariance to be computed for one-dimensional variables.  JIRA: MATH-939  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\n package org.apache.commons.math3.stat.correlation;\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.linear.BlockRealMatrix;\n      * <p>The <code>biasCorrected</code> parameter determines whether or not\n      * covariance estimates are bias-corrected.</p>\n      *\n-     * <p>The input array must be rectangular with at least two columns\n+     * <p>The input array must be rectangular with at least one column\n      * and two rows.</p>\n      *\n      * @param data rectangular array with columns representing covariates\n      * @param biasCorrected true means covariances are bias-corrected\n      * @throws MathIllegalArgumentException if the input data array is not\n-     * rectangular with at least two rows and two columns.\n+     * rectangular with at least two rows and one column.\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      */\n     public Covariance(double[][] data, boolean biasCorrected)\n-    throws MathIllegalArgumentException {\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         this(new BlockRealMatrix(data), biasCorrected);\n     }\n \n      * Create a Covariance matrix from a rectangular array\n      * whose columns represent covariates.\n      *\n-     * <p>The input array must be rectangular with at least two columns\n+     * <p>The input array must be rectangular with at least one column\n      * and two rows</p>\n      *\n      * @param data rectangular array with columns representing covariates\n      * @throws MathIllegalArgumentException if the input data array is not\n-     * rectangular with at least two rows and two columns.\n-     */\n-    public Covariance(double[][] data) throws MathIllegalArgumentException {\n+     * rectangular with at least two rows and one column.\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n+     */\n+    public Covariance(double[][] data)\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         this(data, true);\n     }\n \n      * <p>The <code>biasCorrected</code> parameter determines whether or not\n      * covariance estimates are bias-corrected.</p>\n      *\n-     * <p>The matrix must have at least two columns and two rows</p>\n+     * <p>The matrix must have at least one column and two rows</p>\n      *\n      * @param matrix matrix with columns representing covariates\n      * @param biasCorrected true means covariances are bias-corrected\n      * @throws MathIllegalArgumentException if the input matrix does not have\n-     * at least two rows and two columns\n+     * at least two rows and one column\n      */\n     public Covariance(RealMatrix matrix, boolean biasCorrected)\n     throws MathIllegalArgumentException {\n      * Create a covariance matrix from a matrix whose columns\n      * represent covariates.\n      *\n-     * <p>The matrix must have at least two columns and two rows</p>\n+     * <p>The matrix must have at least one column and two rows</p>\n      *\n      * @param matrix matrix with columns representing covariates\n      * @throws MathIllegalArgumentException if the input matrix does not have\n-     * at least two rows and two columns\n+     * at least two rows and one column\n      */\n     public Covariance(RealMatrix matrix) throws MathIllegalArgumentException {\n         this(matrix, true);\n     /**\n      * Compute a covariance matrix from a matrix whose columns represent\n      * covariates.\n-     * @param matrix input matrix (must have at least two columns and two rows)\n+     * @param matrix input matrix (must have at least one column and two rows)\n      * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if the matrix does not contain sufficient data\n     /**\n      * Create a covariance matrix from a matrix whose columns represent\n      * covariates. Covariances are computed using the bias-corrected formula.\n-     * @param matrix input matrix (must have at least two columns and two rows)\n+     * @param matrix input matrix (must have at least one column and two rows)\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if matrix does not contain sufficient data\n      * @see #Covariance\n     /**\n      * Compute a covariance matrix from a rectangular array whose columns represent\n      * covariates.\n-     * @param data input array (must have at least two columns and two rows)\n+     * @param data input array (must have at least one column and two rows)\n      * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if the data array does not contain sufficient\n      * data\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      */\n     protected RealMatrix computeCovarianceMatrix(double[][] data, boolean biasCorrected)\n-    throws MathIllegalArgumentException {\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         return computeCovarianceMatrix(new BlockRealMatrix(data), biasCorrected);\n     }\n \n     /**\n      * Create a covariance matrix from a rectangular array whose columns represent\n      * covariates. Covariances are computed using the bias-corrected formula.\n-     * @param data input array (must have at least two columns and two rows)\n+     * @param data input array (must have at least one column and two rows)\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if the data array does not contain sufficient data\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      * @see #Covariance\n      */\n-    protected RealMatrix computeCovarianceMatrix(double[][] data) throws MathIllegalArgumentException {\n+    protected RealMatrix computeCovarianceMatrix(double[][] data)\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         return computeCovarianceMatrix(data, true);\n     }\n \n \n     /**\n      * Throws MathIllegalArgumentException if the matrix does not have at least\n-     * two columns and two rows.\n+     * one column and two rows.\n      * @param matrix matrix to check\n      * @throws MathIllegalArgumentException if the matrix does not contain sufficient data\n      * to compute covariance\n     private void checkSufficientData(final RealMatrix matrix) throws MathIllegalArgumentException {\n         int nRows = matrix.getRowDimension();\n         int nCols = matrix.getColumnDimension();\n-        if (nRows < 2 || nCols < 2) {\n+        if (nRows < 2 || nCols < 1) {\n             throw new MathIllegalArgumentException(\n                     LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,\n                     nRows, nCols);\n--- a/src/test/java/org/apache/commons/math3/stat/correlation/CovarianceTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/correlation/CovarianceTest.java\n package org.apache.commons.math3.stat.correlation;\n \n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.stat.descriptive.moment.Variance;\n         Assert.assertEquals(0d, new Covariance().covariance(noVariance, noVariance, true), Double.MIN_VALUE);\n     }\n \n+    /**\n+     * One column\n+     */\n+    @Test\n+    public void testOneColumn() {\n+        RealMatrix cov = new Covariance(new double[][] {{1}, {2}}, false).getCovarianceMatrix();\n+        Assert.assertEquals(1, cov.getRowDimension());\n+        Assert.assertEquals(1, cov.getColumnDimension());\n+        Assert.assertEquals(0.25, cov.getEntry(0, 0), 1.0e-15);\n+    }\n \n     /**\n      * Insufficient data\n         } catch (IllegalArgumentException ex) {\n             // Expected\n         }\n-        RealMatrix matrix = new Array2DRowRealMatrix(new double[][] {{0},{1}});\n         try {\n-            new Covariance(matrix);\n-            Assert.fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            new Covariance(new double[][] {{},{}});\n+            Assert.fail(\"Expecting NotStrictlyPositiveException\");\n+        } catch (NotStrictlyPositiveException ex) {\n             // Expected\n         }\n     }", "timestamp": 1362565791, "metainfo": ""}