{"sha": "1cef886c1bc4a121ba0c980db1e71475398c4ec7", "log": "Turn fixed values into constants  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java\n \n public final class StatUtilsTest {\n \n-    private double one = 1;\n-    private float two = 2;\n-    private int three = 3;\n-    private double mean = 2;\n-    private double sumSq = 18;\n-    private double sum = 8;\n-    private double var = 0.666666666666666666667;\n-    private double min = 1;\n-    private double max = 3;\n-    private double tolerance = 10E-15;\n-    private double nan = Double.NaN;\n+    private static final double ONE = 1;\n+    private static final float  TWO = 2;\n+    private static final int    THREE = 3;\n+    private static final double MEAN = 2;\n+    private static final double SUMSQ = 18;\n+    private static final double SUM = 8;\n+    private static final double VAR = 0.666666666666666666667;\n+    private static final double MIN = 1;\n+    private static final double MAX = 3;\n+    private static final double TOLERANCE = 10E-15;\n+    private static final double NAN = Double.NaN;\n \n     /** test stats */\n     @Test\n     public void testStats() {\n-        double[] values = new double[] { one, two, two, three };\n-        Assert.assertEquals(\"sum\", sum, StatUtils.sum(values), tolerance);\n-        Assert.assertEquals(\"sumsq\", sumSq, StatUtils.sumSq(values), tolerance);\n-        Assert.assertEquals(\"var\", var, StatUtils.variance(values), tolerance);\n-        Assert.assertEquals(\"var with mean\", var, StatUtils.variance(values, mean), tolerance);\n-        Assert.assertEquals(\"mean\", mean, StatUtils.mean(values), tolerance);\n-        Assert.assertEquals(\"min\", min, StatUtils.min(values), tolerance);\n-        Assert.assertEquals(\"max\", max, StatUtils.max(values), tolerance);\n+        double[] values = new double[] { ONE, TWO, TWO, THREE };\n+        Assert.assertEquals(\"sum\", SUM, StatUtils.sum(values), TOLERANCE);\n+        Assert.assertEquals(\"sumsq\", SUMSQ, StatUtils.sumSq(values), TOLERANCE);\n+        Assert.assertEquals(\"var\", VAR, StatUtils.variance(values), TOLERANCE);\n+        Assert.assertEquals(\"var with mean\", VAR, StatUtils.variance(values, MEAN), TOLERANCE);\n+        Assert.assertEquals(\"mean\", MEAN, StatUtils.mean(values), TOLERANCE);\n+        Assert.assertEquals(\"min\", MIN, StatUtils.min(values), TOLERANCE);\n+        Assert.assertEquals(\"max\", MAX, StatUtils.max(values), TOLERANCE);\n     }\n \n     @Test\n             \"Variance of n = 0 set should be NaN\",\n             Double.isNaN(StatUtils.variance(values)));\n \n-        values = new double[] { one };\n+        values = new double[] { ONE };\n \n         Assert.assertTrue(\n             \"Mean of n = 1 set should be value of single item n1\",\n-            StatUtils.mean(values) == one);\n+            StatUtils.mean(values) == ONE);\n         Assert.assertTrue(\n             \"Variance of n = 1 set should be zero\",\n             StatUtils.variance(values) == 0);\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(0, StatUtils.sumSq(x), tolerance);\n-        TestUtils.assertEquals(0, StatUtils.sumSq(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(4, StatUtils.sumSq(x), tolerance);\n-        TestUtils.assertEquals(4, StatUtils.sumSq(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(18, StatUtils.sumSq(x), tolerance);\n-        TestUtils.assertEquals(8, StatUtils.sumSq(x, 1, 2), tolerance);\n+        TestUtils.assertEquals(0, StatUtils.sumSq(x), TOLERANCE);\n+        TestUtils.assertEquals(0, StatUtils.sumSq(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(4, StatUtils.sumSq(x), TOLERANCE);\n+        TestUtils.assertEquals(4, StatUtils.sumSq(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(18, StatUtils.sumSq(x), TOLERANCE);\n+        TestUtils.assertEquals(8, StatUtils.sumSq(x, 1, 2), TOLERANCE);\n     }\n \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(1, StatUtils.product(x), tolerance);\n-        TestUtils.assertEquals(1, StatUtils.product(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(two, StatUtils.product(x), tolerance);\n-        TestUtils.assertEquals(two, StatUtils.product(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(12, StatUtils.product(x), tolerance);\n-        TestUtils.assertEquals(4, StatUtils.product(x, 1, 2), tolerance);\n+        TestUtils.assertEquals(1, StatUtils.product(x), TOLERANCE);\n+        TestUtils.assertEquals(1, StatUtils.product(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(TWO, StatUtils.product(x), TOLERANCE);\n+        TestUtils.assertEquals(TWO, StatUtils.product(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(12, StatUtils.product(x), TOLERANCE);\n+        TestUtils.assertEquals(4, StatUtils.product(x, 1, 2), TOLERANCE);\n     }\n \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(0, StatUtils.sumLog(x), tolerance);\n-        TestUtils.assertEquals(0, StatUtils.sumLog(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(FastMath.log(two), StatUtils.sumLog(x), tolerance);\n-        TestUtils.assertEquals(FastMath.log(two), StatUtils.sumLog(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(FastMath.log(one) + 2.0 * FastMath.log(two) + FastMath.log(three), StatUtils.sumLog(x), tolerance);\n-        TestUtils.assertEquals(2.0 * FastMath.log(two), StatUtils.sumLog(x, 1, 2), tolerance);\n+        TestUtils.assertEquals(0, StatUtils.sumLog(x), TOLERANCE);\n+        TestUtils.assertEquals(0, StatUtils.sumLog(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(FastMath.log(TWO), StatUtils.sumLog(x), TOLERANCE);\n+        TestUtils.assertEquals(FastMath.log(TWO), StatUtils.sumLog(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(FastMath.log(ONE) + 2.0 * FastMath.log(TWO) + FastMath.log(THREE), StatUtils.sumLog(x), TOLERANCE);\n+        TestUtils.assertEquals(2.0 * FastMath.log(TWO), StatUtils.sumLog(x, 1, 2), TOLERANCE);\n     }\n \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(Double.NaN, StatUtils.mean(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(two, StatUtils.mean(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(2.5, StatUtils.mean(x, 2, 2), tolerance);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.mean(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(TWO, StatUtils.mean(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(2.5, StatUtils.mean(x, 2, 2), TOLERANCE);\n     }\n \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(Double.NaN, StatUtils.variance(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(0.0, StatUtils.variance(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(0.5, StatUtils.variance(x, 2, 2), tolerance);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.variance(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(0.0, StatUtils.variance(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(0.5, StatUtils.variance(x, 2, 2), TOLERANCE);\n \n         // test precomputed mean\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(0.5, StatUtils.variance(x,2.5, 2, 2), tolerance);\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(0.5, StatUtils.variance(x,2.5, 2, 2), TOLERANCE);\n     }\n     \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(Double.NaN, StatUtils.populationVariance(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(0.0, StatUtils.populationVariance(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 0, 2), tolerance);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.populationVariance(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(0.0, StatUtils.populationVariance(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 0, 2), TOLERANCE);\n \n         // test precomputed mean\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 2.5, 2, 2), tolerance);\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 2.5, 2, 2), TOLERANCE);\n     }\n \n \n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(Double.NaN, StatUtils.max(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(two, StatUtils.max(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(three, StatUtils.max(x, 1, 3), tolerance);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.max(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(TWO, StatUtils.max(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(THREE, StatUtils.max(x, 1, 3), TOLERANCE);\n \n         // test first nan is ignored\n-        x = new double[] {nan, two, three};\n-        TestUtils.assertEquals(three, StatUtils.max(x), tolerance);\n+        x = new double[] {NAN, TWO, THREE};\n+        TestUtils.assertEquals(THREE, StatUtils.max(x), TOLERANCE);\n \n         // test middle nan is ignored\n-        x = new double[] {one, nan, three};\n-        TestUtils.assertEquals(three, StatUtils.max(x), tolerance);\n+        x = new double[] {ONE, NAN, THREE};\n+        TestUtils.assertEquals(THREE, StatUtils.max(x), TOLERANCE);\n \n         // test last nan is ignored\n-        x = new double[] {one, two, nan};\n-        TestUtils.assertEquals(two, StatUtils.max(x), tolerance);\n+        x = new double[] {ONE, TWO, NAN};\n+        TestUtils.assertEquals(TWO, StatUtils.max(x), TOLERANCE);\n \n         // test all nan returns nan\n-        x = new double[] {nan, nan, nan};\n-        TestUtils.assertEquals(nan, StatUtils.max(x), tolerance);\n+        x = new double[] {NAN, NAN, NAN};\n+        TestUtils.assertEquals(NAN, StatUtils.max(x), TOLERANCE);\n     }\n \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(Double.NaN, StatUtils.min(x, 0, 0), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(two, StatUtils.min(x, 0, 1), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(two, StatUtils.min(x, 1, 3), tolerance);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.min(x, 0, 0), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(TWO, StatUtils.min(x, 0, 1), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(TWO, StatUtils.min(x, 1, 3), TOLERANCE);\n \n         // test first nan is ignored\n-        x = new double[] {nan, two, three};\n-        TestUtils.assertEquals(two, StatUtils.min(x), tolerance);\n+        x = new double[] {NAN, TWO, THREE};\n+        TestUtils.assertEquals(TWO, StatUtils.min(x), TOLERANCE);\n \n         // test middle nan is ignored\n-        x = new double[] {one, nan, three};\n-        TestUtils.assertEquals(one, StatUtils.min(x), tolerance);\n+        x = new double[] {ONE, NAN, THREE};\n+        TestUtils.assertEquals(ONE, StatUtils.min(x), TOLERANCE);\n \n         // test last nan is ignored\n-        x = new double[] {one, two, nan};\n-        TestUtils.assertEquals(one, StatUtils.min(x), tolerance);\n+        x = new double[] {ONE, TWO, NAN};\n+        TestUtils.assertEquals(ONE, StatUtils.min(x), TOLERANCE);\n \n         // test all nan returns nan\n-        x = new double[] {nan, nan, nan};\n-        TestUtils.assertEquals(nan, StatUtils.min(x), tolerance);\n+        x = new double[] {NAN, NAN, NAN};\n+        TestUtils.assertEquals(NAN, StatUtils.min(x), TOLERANCE);\n     }\n \n     @Test\n \n         // test empty\n         x = new double[] {};\n-        TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 25), tolerance);\n-        TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 0, 0, 25), tolerance);\n-\n-        // test one\n-        x = new double[] {two};\n-        TestUtils.assertEquals(two, StatUtils.percentile(x, 25), tolerance);\n-        TestUtils.assertEquals(two, StatUtils.percentile(x, 0, 1, 25), tolerance);\n-\n-        // test many\n-        x = new double[] {one, two, two, three};\n-        TestUtils.assertEquals(2.5, StatUtils.percentile(x, 70), tolerance);\n-        TestUtils.assertEquals(2.5, StatUtils.percentile(x, 1, 3, 62.5), tolerance);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 25), TOLERANCE);\n+        TestUtils.assertEquals(Double.NaN, StatUtils.percentile(x, 0, 0, 25), TOLERANCE);\n+\n+        // test one\n+        x = new double[] {TWO};\n+        TestUtils.assertEquals(TWO, StatUtils.percentile(x, 25), TOLERANCE);\n+        TestUtils.assertEquals(TWO, StatUtils.percentile(x, 0, 1, 25), TOLERANCE);\n+\n+        // test many\n+        x = new double[] {ONE, TWO, TWO, THREE};\n+        TestUtils.assertEquals(2.5, StatUtils.percentile(x, 70), TOLERANCE);\n+        TestUtils.assertEquals(2.5, StatUtils.percentile(x, 1, 3, 62.5), TOLERANCE);\n     }\n \n     @Test\n         double diff[] = {0d, -1d, -1d, 2d};\n         double small[] = {1d, 4d};\n         double meanDifference = StatUtils.meanDifference(sample1, sample2);\n-        Assert.assertEquals(StatUtils.sumDifference(sample1, sample2), StatUtils.sum(diff), tolerance);\n-        Assert.assertEquals(meanDifference, StatUtils.mean(diff), tolerance);\n+        Assert.assertEquals(StatUtils.sumDifference(sample1, sample2), StatUtils.sum(diff), TOLERANCE);\n+        Assert.assertEquals(meanDifference, StatUtils.mean(diff), TOLERANCE);\n         Assert.assertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference),\n-                StatUtils.variance(diff), tolerance);\n+                StatUtils.variance(diff), TOLERANCE);\n         try {\n             StatUtils.meanDifference(sample1, small);\n             Assert.fail(\"Expecting MathIllegalArgumentException\");\n         Assert.assertEquals(1.0, stats.getStandardDeviation(), distance);\n \n     }\n-    \n+\n }", "timestamp": 1373217608, "metainfo": ""}