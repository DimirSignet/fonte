{"sha": "8e68755457b9938bcff27f33ecbf30c56ac822d8", "log": "Unit tests.   ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.analysis.BivariateFunction;\n+import org.apache.commons.math3.distribution.UniformRealDistribution;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well19937c;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.Ignore;\n             }\n         }\n     }\n+\n+    /**\n+     * Interpolating a plane.\n+     * <p>\n+     * z = 2 x - 3 y + 5\n+     */\n+    @Test\n+    public void testInterpolation1() {\n+        final int sz = 21;\n+        double[] xval = new double[sz];\n+        double[] yval = new double[sz];\n+        // Coordinate values\n+        final double delta = 1d / (sz - 1);\n+        for (int i = 0; i < sz; i++) {\n+            xval[i] = -1 + 15 * i * delta;\n+            yval[i] = -20 + 30 * i * delta;\n+        }\n+\n+        // Function values\n+        BivariateFunction f = new BivariateFunction() {\n+                public double value(double x, double y) {\n+                    return 2 * x - 3 * y + 5;\n+                }\n+            };\n+        double[][] zval = new double[xval.length][yval.length];\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                zval[i][j] = f.value(xval[i], yval[j]);\n+            }\n+        }\n+        // Partial derivatives with respect to x\n+        double[][] dZdX = new double[xval.length][yval.length];\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                dZdX[i][j] = 2;\n+            }\n+        }\n+        // Partial derivatives with respect to y\n+        double[][] dZdY = new double[xval.length][yval.length];\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                dZdY[i][j] = -3;\n+            }\n+        }\n+        // Partial cross-derivatives\n+        double[][] dZdXdY = new double[xval.length][yval.length];\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                dZdXdY[i][j] = 0;\n+            }\n+        }\n+\n+        final BivariateFunction bcf\n+            = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n+                                                     dZdX, dZdY, dZdXdY);\n+        double x, y;\n+        double expected, result;\n+\n+        final RandomGenerator rng = new Well19937c(1234567L); // \"tol\" depends on the seed.\n+        final UniformRealDistribution distX\n+            = new UniformRealDistribution(xval[0], xval[xval.length - 1]);\n+        final UniformRealDistribution distY\n+            = new UniformRealDistribution(yval[0], yval[yval.length - 1]);\n+\n+        final int numSamples = 50;\n+        final double tol = 6;\n+        for (int i = 0; i < numSamples; i++) {\n+            x = distX.sample();\n+            for (int j = 0; j < numSamples; j++) {\n+                y = distY.sample();\n+//                 System.out.println(x + \" \" + y + \" \" + f.value(x, y) + \" \" + bcf.value(x, y));\n+                Assert.assertEquals(f.value(x, y),  bcf.value(x, y), tol);\n+            }\n+//             System.out.println();\n+        }\n+    }\n+\n+    /**\n+     * Interpolating a paraboloid.\n+     * <p>\n+     * z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5\n+     */\n+    @Test\n+    public void testInterpolation2() {\n+        final int sz = 21;\n+        double[] xval = new double[sz];\n+        double[] yval = new double[sz];\n+        // Coordinate values\n+        final double delta = 1d / (sz - 1);\n+        for (int i = 0; i < sz; i++) {\n+            xval[i] = -1 + 15 * i * delta;\n+            yval[i] = -20 + 30 * i * delta;\n+        }\n+\n+        // Function values\n+        BivariateFunction f = new BivariateFunction() {\n+                public double value(double x, double y) {\n+                    return 2 * x * x - 3 * y * y + 4 * x * y - 5;\n+                }\n+            };\n+        double[][] zval = new double[xval.length][yval.length];\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                zval[i][j] = f.value(xval[i], yval[j]);\n+            }\n+        }\n+        // Partial derivatives with respect to x\n+        double[][] dZdX = new double[xval.length][yval.length];\n+        BivariateFunction dfdX = new BivariateFunction() {\n+                public double value(double x, double y) {\n+                    return 4 * (x + y);\n+                }\n+            };\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                dZdX[i][j] = dfdX.value(xval[i], yval[j]);\n+            }\n+        }\n+        // Partial derivatives with respect to y\n+        double[][] dZdY = new double[xval.length][yval.length];\n+        BivariateFunction dfdY = new BivariateFunction() {\n+                public double value(double x, double y) {\n+                    return 4 * x - 6 * y;\n+                }\n+            };\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                dZdY[i][j] = dfdY.value(xval[i], yval[j]);\n+            }\n+        }\n+        // Partial cross-derivatives\n+        double[][] dZdXdY = new double[xval.length][yval.length];\n+        for (int i = 0; i < xval.length; i++) {\n+            for (int j = 0; j < yval.length; j++) {\n+                dZdXdY[i][j] = 4;\n+            }\n+        }\n+\n+        BivariateFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,\n+                                                                       dZdX, dZdY, dZdXdY);\n+        double x, y;\n+        double expected, result;\n+\n+        final RandomGenerator rng = new Well19937c(1234567L); // \"tol\" depends on the seed.\n+        final UniformRealDistribution distX\n+            = new UniformRealDistribution(rng, xval[0], xval[xval.length - 1]);\n+        final UniformRealDistribution distY\n+            = new UniformRealDistribution(rng, yval[0], yval[yval.length - 1]);\n+\n+        final double tol = 224;\n+        double max = 0;\n+        for (int i = 0; i < sz; i++) {\n+            x = distX.sample();\n+            for (int j = 0; j < sz; j++) {\n+                y = distY.sample();\n+//                 System.out.println(x + \" \" + y + \" \" + f.value(x, y) + \" \" + bcf.value(x, y));\n+                Assert.assertEquals(f.value(x, y),  bcf.value(x, y), tol);\n+            }\n+//             System.out.println();\n+        }\n+    }\n }", "timestamp": 1370011312, "metainfo": ""}