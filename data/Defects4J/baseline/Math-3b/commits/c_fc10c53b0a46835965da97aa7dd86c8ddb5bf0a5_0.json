{"sha": "fc10c53b0a46835965da97aa7dd86c8ddb5bf0a5", "log": "[MATH-898] Add initial tests for fuzzy clusterer.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClustererTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.ml.clustering;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FuzzyKMeansClustererTest {\n+\n+    @Test\n+    public void testCluster() {\n+        List<DoublePoint> points = new ArrayList<DoublePoint>();\n+        \n+        // create 10 data points: [1], ... [10]\n+        for (int i = 1; i <= 10; i++) {\n+            DoublePoint p = new DoublePoint(new double[] { i } );\n+            points.add(p);\n+        }\n+\n+        final FuzzyKMeansClusterer<DoublePoint> transformer =\n+                new FuzzyKMeansClusterer<DoublePoint>(3, 2.0);\n+        final List<CentroidCluster<DoublePoint>> clusters = transformer.cluster(points);\n+\n+        // we expect 3 clusters:\n+        //   [1], [2], [3]\n+        //   [4], [5], [6], [7]\n+        //   [8], [9], [10]\n+        final List<DoublePoint> clusterOne = Arrays.asList(points.get(0), points.get(1), points.get(2));\n+        final List<DoublePoint> clusterTwo = Arrays.asList(points.get(3), points.get(4), points.get(5), points.get(6));\n+        final List<DoublePoint> clusterThree = Arrays.asList(points.get(7), points.get(8), points.get(9));\n+\n+        boolean cluster1Found = false;\n+        boolean cluster2Found = false;\n+        boolean cluster3Found = false;\n+        Assert.assertEquals(3, clusters.size());\n+        for (final Cluster<DoublePoint> cluster : clusters) {\n+            if (cluster.getPoints().containsAll(clusterOne)) {\n+                cluster1Found = true;\n+            }\n+            if (cluster.getPoints().containsAll(clusterTwo)) {\n+                cluster2Found = true;\n+            }\n+            if (cluster.getPoints().containsAll(clusterThree)) {\n+                cluster3Found = true;\n+            }\n+        }\n+        Assert.assertTrue(cluster1Found);\n+        Assert.assertTrue(cluster2Found);\n+        Assert.assertTrue(cluster3Found);\n+    }\n+\n+    @Test(expected = MathIllegalArgumentException.class)\n+    public void testTooSmallFuzzynessFactor() {\n+        new FuzzyKMeansClusterer<DoublePoint>(3, 1.0);\n+    }\n+\n+    @Test(expected = NullArgumentException.class)\n+    public void testNullDataset() {\n+        FuzzyKMeansClusterer<DoublePoint> clusterer = new FuzzyKMeansClusterer<DoublePoint>(3, 2.0);\n+        clusterer.cluster(null);\n+    }\n+\n+}", "timestamp": 1365624774, "metainfo": ""}