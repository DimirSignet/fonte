{"sha": "3348d5166d645654994a8428e82d6376bf773918", "log": "Removed import static.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClustererTest.java\n+++ b/src/test/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClustererTest.java\n  */\n package org.apache.commons.math3.ml.clustering;\n \n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.Assert;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n         boolean cluster1Found = false;\n         boolean cluster2Found = false;\n         boolean cluster3Found = false;\n-        assertEquals(3, clusters.size());\n+        Assert.assertEquals(3, clusters.size());\n         for (final Cluster<DoublePoint> cluster : clusters) {\n             if (cluster.getPoints().containsAll(clusterOne)) {\n                 cluster1Found = true;\n                 cluster3Found = true;\n             }\n         }\n-        assertTrue(cluster1Found);\n-        assertTrue(cluster2Found);\n-        assertTrue(cluster3Found);\n+        Assert.assertTrue(cluster1Found);\n+        Assert.assertTrue(cluster2Found);\n+        Assert.assertTrue(cluster3Found);\n     }\n \n     @Test(expected = MathIllegalArgumentException.class)\n         final FuzzyKMeansClusterer<DoublePoint> clusterer =\n                 new FuzzyKMeansClusterer<DoublePoint>(3, 2.0, 100, measure, 1e-6, random);\n \n-        assertEquals(3, clusterer.getK());\n-        assertEquals(2.0, clusterer.getFuzziness(), 1e-6);\n-        assertEquals(100, clusterer.getMaxIterations());\n-        assertEquals(1e-6, clusterer.getEpsilon(), 1e-12);\n-        assertThat(clusterer.getDistanceMeasure(), is(measure));\n-        assertThat(clusterer.getRandomGenerator(), is(random));\n+        Assert.assertEquals(3, clusterer.getK());\n+        Assert.assertEquals(2.0, clusterer.getFuzziness(), 1e-6);\n+        Assert.assertEquals(100, clusterer.getMaxIterations());\n+        Assert.assertEquals(1e-6, clusterer.getEpsilon(), 1e-12);\n+        Assert.assertThat(clusterer.getDistanceMeasure(), CoreMatchers.is(measure));\n+        Assert.assertThat(clusterer.getRandomGenerator(), CoreMatchers.is(random));\n     }\n \n }\n--- a/src/test/java/org/apache/commons/math3/ode/events/ReappearingEventTest.java\n+++ b/src/test/java/org/apache/commons/math3/ode/events/ReappearingEventTest.java\n  */\n package org.apache.commons.math3.ode.events;\n \n-import static org.junit.Assert.assertEquals;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n \n         throws DimensionMismatchException, NumberIsTooSmallException,\n                MaxCountExceededException, NoBracketingException {\n         double tEnd = test(1);\n-        assertEquals(10.0, tEnd, 1e-7);\n+        Assert.assertEquals(10.0, tEnd, 1e-7);\n     }\n \n     @Test\n         throws DimensionMismatchException, NumberIsTooSmallException,\n                MaxCountExceededException, NoBracketingException {\n         double tEnd = test(2);\n-        assertEquals(10.0, tEnd, 1e-7);\n+        Assert.assertEquals(10.0, tEnd, 1e-7);\n     }\n \n     public double test(int integratorType)\n--- a/src/test/java/org/apache/commons/math3/ode/sampling/StepNormalizerOutputTestBase.java\n+++ b/src/test/java/org/apache/commons/math3/ode/sampling/StepNormalizerOutputTestBase.java\n \n package org.apache.commons.math3.ode.sampling;\n \n-import static org.junit.Assert.assertArrayEquals;\n+import org.junit.Assert;\n \n import java.util.ArrayList;\n import java.util.List;\n         for(int i = 0; i < actual.length; i++) {\n             actual[i] = output.get(i);\n         }\n-        assertArrayEquals(expected, actual, 1e-5);\n+        Assert.assertArrayEquals(expected, actual, 1e-5);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/math3/random/HaltonSequenceGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/HaltonSequenceGeneratorTest.java\n  */\n package org.apache.commons.math3.random;\n \n-import static org.junit.Assert.*;\n+import org.junit.Assert;\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n     public void test3DReference() {\n         for (int i = 0; i < referenceValues.length; i++) {\n             double[] result = generator.nextVector();\n-            assertArrayEquals(referenceValues[i], result, 1e-3);\n-            assertEquals(i + 1, generator.getNextIndex());\n+            Assert.assertArrayEquals(referenceValues[i], result, 1e-3);\n+            Assert.assertEquals(i + 1, generator.getNextIndex());\n         }\n     }\n \n         generator = new HaltonSequenceGenerator(2, new int[] {2, 3}, null);\n         for (int i = 0; i < referenceValuesUnscrambled.length; i++) {\n             double[] result = generator.nextVector();\n-            assertArrayEquals(referenceValuesUnscrambled[i], result, 1e-3);\n-            assertEquals(i + 1, generator.getNextIndex());\n+            Assert.assertArrayEquals(referenceValuesUnscrambled[i], result, 1e-3);\n+            Assert.assertEquals(i + 1, generator.getNextIndex());\n         }\n     }\n \n     public void testConstructor() {\n         try {\n             new HaltonSequenceGenerator(0);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n         \n         try {\n             new HaltonSequenceGenerator(41);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n     public void testConstructor2() throws Exception{\n         try {\n             new HaltonSequenceGenerator(2, new int[] { 1 }, null);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n \n         try {\n             new HaltonSequenceGenerator(2, null, null);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (NullArgumentException e) {\n             // expected\n         }\n \n         try {\n             new HaltonSequenceGenerator(2, new int[] { 1, 1 }, new int[] { 1 });\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (DimensionMismatchException e) {\n             // expected\n         }\n     @Test\n     public void testSkip() {\n         double[] result = generator.skipTo(5);\n-        assertArrayEquals(referenceValues[5], result, 1e-3);\n-        assertEquals(6, generator.getNextIndex());\n+        Assert.assertArrayEquals(referenceValues[5], result, 1e-3);\n+        Assert.assertEquals(6, generator.getNextIndex());\n         \n         for (int i = 6; i < referenceValues.length; i++) {\n             result = generator.nextVector();\n-            assertArrayEquals(referenceValues[i], result, 1e-3);\n-            assertEquals(i + 1, generator.getNextIndex());\n+            Assert.assertArrayEquals(referenceValues[i], result, 1e-3);\n+            Assert.assertEquals(i + 1, generator.getNextIndex());\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java\n  */\n package org.apache.commons.math3.random;\n \n-import static org.junit.Assert.*;\n+import org.junit.Assert;\n \n import java.io.InputStream;\n \n     public void test3DReference() {\n         for (int i = 0; i < referenceValues.length; i++) {\n             double[] result = generator.nextVector();\n-            assertArrayEquals(referenceValues[i], result, 1e-6);\n-            assertEquals(i + 1, generator.getNextIndex());\n+            Assert.assertArrayEquals(referenceValues[i], result, 1e-6);\n+            Assert.assertEquals(i + 1, generator.getNextIndex());\n         }\n     }\n     \n     public void testConstructor() {\n         try {\n             new SobolSequenceGenerator(0);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n         \n         try {\n             new SobolSequenceGenerator(1001);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n             final String RESOURCE_NAME = \"/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000\";\n             final InputStream is = getClass().getResourceAsStream(RESOURCE_NAME);\n             new SobolSequenceGenerator(1001, is);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n         \n         try {\n             new SobolSequenceGenerator(1001);\n-            fail();\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (OutOfRangeException e) {\n             // expected\n         }\n     @Test\n     public void testSkip() {\n         double[] result = generator.skipTo(5);\n-        assertArrayEquals(referenceValues[5], result, 1e-6);\n-        assertEquals(6, generator.getNextIndex());\n+        Assert.assertArrayEquals(referenceValues[5], result, 1e-6);\n+        Assert.assertEquals(6, generator.getNextIndex());\n         \n         for (int i = 6; i < referenceValues.length; i++) {\n             result = generator.nextVector();\n-            assertArrayEquals(referenceValues[i], result, 1e-6);\n-            assertEquals(i + 1, generator.getNextIndex());\n+            Assert.assertArrayEquals(referenceValues[i], result, 1e-6);\n+            Assert.assertEquals(i + 1, generator.getNextIndex());\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n  * governing permissions and limitations under the License.\n  */\n package org.apache.commons.math3.util;\n-\n-import static org.junit.Assert.fail;\n \n import java.util.Arrays;\n \n                 \n         try {\n             MathArrays.convolve(new double[]{1, 2}, null);\n-            fail(\"an exception should have been thrown\");\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (NullArgumentException e) {\n             // expected behavior\n         }\n \n         try {\n             MathArrays.convolve(null, new double[]{1, 2});\n-            fail(\"an exception should have been thrown\");\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (NullArgumentException e) {\n             // expected behavior\n         }\n \n         try {\n             MathArrays.convolve(new double[]{1, 2}, new double[]{});\n-            fail(\"an exception should have been thrown\");\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (NoDataException e) {\n             // expected behavior\n         }\n \n         try {\n             MathArrays.convolve(new double[]{}, new double[]{1, 2});\n-            fail(\"an exception should have been thrown\");\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (NoDataException e) {\n             // expected behavior\n         }\n \n         try {\n             MathArrays.convolve(new double[]{}, new double[]{});\n-            fail(\"an exception should have been thrown\");\n+            Assert.fail(\"an exception should have been thrown\");\n         } catch (NoDataException e) {\n             // expected behavior\n         }", "timestamp": 1370192554, "metainfo": ""}