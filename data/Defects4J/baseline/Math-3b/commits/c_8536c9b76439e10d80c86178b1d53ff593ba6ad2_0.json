{"sha": "8536c9b76439e10d80c86178b1d53ff593ba6ad2", "log": "Add support for creating screenshots.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java\n+++ b/src/test/java/org/apache/commons/math3/userguide/ClusteringExamples.java\n \n import javax.swing.JComponent;\n import javax.swing.JFrame;\n-import javax.swing.JTextArea;\n-import javax.swing.SwingUtilities;\n+import javax.swing.JLabel;\n \n import org.apache.commons.math3.distribution.NormalDistribution;\n import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;\n         return points;\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     public static class Display extends JFrame {\n         \n-        private static final long serialVersionUID = -8846964550416589808L;\n-\n         public Display() {\n             setTitle(\"Clustering examples\");\n             setSize(800, 800);\n-            setLocationRelativeTo(null);\n-            setDefaultCloseOperation(EXIT_ON_CLOSE);\n             \n             setLayout(new GridBagLayout());\n             \n             c.insets = new Insets(2, 2, 2, 2);\n \n             for (Pair<String, Clusterer<DoublePoint>> pair : algorithms) {\n-                JTextArea text = new JTextArea(pair.getFirst());\n-                text.setEditable(false);\n-                text.setOpaque(false);\n+                JLabel text = new JLabel(\"<html><body>\" + pair.getFirst().replace(\"\\n\", \"<br>\"));\n                 add(text, c);\n                 c.gridx++;\n             }\n         }\n     }\n \n+    @SuppressWarnings(\"serial\")\n     public static class ClusterPlot extends JComponent {\n-\n-        private static final long serialVersionUID = 4546352048750419587L;\n \n         private static double PAD = 10;\n \n                 for (DoublePoint point : cluster.getPoints()) {\n                     Clusterable p = transform(point, w, h);\n                     double[] arr = p.getPoint();\n-                    g2.fill(new Ellipse2D.Double(arr[0] - 2, arr[1] - 2, 4, 4));\n+                    g2.fill(new Ellipse2D.Double(arr[0] - 1, arr[1] - 1, 3, 3));\n                 }\n                 \n                 if (cluster instanceof CentroidCluster) {\n     }\n \n     public static void main(String[] args) {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            public void run() {\n-                Display d = new Display();\n-                d.setVisible(true);\n-            }\n-        });\n+        ExampleUtils.showExampleFrame(new Display());\n     }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/userguide/ExampleUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.userguide;\n+\n+import java.awt.Component;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+public class ExampleUtils {\n+\n+    public static void showExampleFrame(final JFrame frame) {\n+        Runnable r = new Runnable() {\n+            public void run() {\n+                JMenuItem screenshot = new JMenuItem(\"Screenshot (png)\");\n+                screenshot.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, InputEvent.CTRL_DOWN_MASK));\n+                screenshot.addActionListener(new ActionListener() {\n+                    public void actionPerformed(ActionEvent ae) {\n+                        JFileChooser fileChooser = new JFileChooser(System.getProperty(\"user.dir\"));\n+                        if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {\n+                          File file = fileChooser.getSelectedFile();\n+                          BufferedImage img = getScreenShot(frame.getContentPane());\n+                          try {\n+                              // write the image as a PNG\n+                              ImageIO.write(img, \"png\", file);\n+                          } catch (Exception e) {\n+                              e.printStackTrace();\n+                          }\n+                        }\n+                    }\n+                });\n+                JMenu menu = new JMenu(\"File\");\n+                menu.add(screenshot);\n+                JMenuBar mb = new JMenuBar();\n+                mb.add(menu);\n+                frame.setJMenuBar(mb);\n+\n+                frame.setLocationRelativeTo(null);\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                frame.setVisible(true);\n+            }\n+        };\n+        SwingUtilities.invokeLater(r);\n+    }\n+\n+    private static BufferedImage getScreenShot(Component component) {\n+        BufferedImage image = new BufferedImage(component.getWidth(), component.getHeight(), BufferedImage.TYPE_INT_RGB);\n+        // call the Component's paint method, using the Graphics object of the image.\n+        component.paint(image.getGraphics());\n+        return image;\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/math3/userguide/RandomVectorGeneratorExamples.java\n+++ b/src/test/java/org/apache/commons/math3/userguide/RandomVectorGeneratorExamples.java\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JTextArea;\n-import javax.swing.SwingUtilities;\n \n import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;\n import org.apache.commons.math3.random.HaltonSequenceGenerator;\n         return points;\n     }\n     \n+    @SuppressWarnings(\"serial\")\n     public static class Display extends JFrame {\n         \n-        private static final long serialVersionUID = -8846964550416589808L;\n-\n         public Display() {\n             setTitle(\"Pseudo/Quasi-random examples\");\n             setSize(800, 800);\n-            setLocationRelativeTo(null);\n-            setDefaultCloseOperation(EXIT_ON_CLOSE);\n             \n             setLayout(new GridBagLayout());\n             \n         }\n     }\n \n+    @SuppressWarnings(\"serial\")\n     public static class Plot extends JComponent {\n-\n-        private static final long serialVersionUID = 4546352048750419587L;\n \n         private static double PAD = 10;\n \n     }\n \n     public static void main(String[] args) {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            public void run() {\n-                Display d = new Display();\n-                d.setVisible(true);\n-            }\n-        });\n+        ExampleUtils.showExampleFrame(new Display());\n     }\n }", "timestamp": 1369258322, "metainfo": ""}