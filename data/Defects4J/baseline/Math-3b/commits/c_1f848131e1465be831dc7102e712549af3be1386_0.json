{"sha": "1f848131e1465be831dc7102e712549af3be1386", "log": "MATH-990 Reduced amount of copying. Moved consistency checks out of the double loop.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n     public static void sortInPlace(double[] x,\n                                    final OrderDirection dir,\n                                    double[] ... yList)\n-        throws NullArgumentException, DimensionMismatchException {\n+        throws NullArgumentException,\n+               DimensionMismatchException {\n+        final int yListLen = yList.length;\n+        final int len = x.length;\n+\n+        // Consistency checks.\n         if (x == null) {\n             throw new NullArgumentException();\n         }\n-\n-        final int len = x.length;\n-        final List<Pair<Double, double[]>> list\n-            = new ArrayList<Pair<Double, double[]>>(len);\n-\n-        final int yListLen = yList.length;\n+        for (int j = 0; j < yListLen; j++) {\n+            final double[] y = yList[j];\n+            if (y == null) {\n+                throw new NullArgumentException();\n+            }\n+            if (y.length != len) {\n+                throw new DimensionMismatchException(y.length, len);\n+            }\n+        }\n+\n+        // Associate each abscissa \"x[i]\" with its index \"i\".\n+        final List<Pair<Double, Integer>> list\n+            = new ArrayList<Pair<Double, Integer>>(len);\n         for (int i = 0; i < len; i++) {\n-            final double[] yValues = new double[yListLen];\n-            for (int j = 0; j < yListLen; j++) {\n-                double[] y = yList[j];\n-                if (y == null) {\n-                    throw new NullArgumentException();\n-                }\n-                if (y.length != len) {\n-                    throw new DimensionMismatchException(y.length, len);\n-                }\n-                yValues[j] = y[i];\n-            }\n-            list.add(new Pair<Double, double[]>(x[i], yValues));\n-        }\n-\n-        final Comparator<Pair<Double, double[]>> comp\n-            = new Comparator<Pair<Double, double[]>>() {\n-            public int compare(Pair<Double, double[]> o1,\n-                               Pair<Double, double[]> o2) {\n-                int val;\n-                switch (dir) {\n-                case INCREASING:\n-                    val = o1.getKey().compareTo(o2.getKey());\n-                break;\n-                case DECREASING:\n-                    val = o2.getKey().compareTo(o1.getKey());\n-                break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n-                return val;\n+            list.add(new Pair<Double, Integer>(x[i], i));\n+        }\n+\n+        // Create comparators for increasing and decreasing orders.\n+        final Comparator<Pair<Double, Integer>> comp\n+            = dir == MathArrays.OrderDirection.INCREASING ?\n+            new Comparator<Pair<Double, Integer>>() {\n+            public int compare(Pair<Double, Integer> o1,\n+                               Pair<Double, Integer> o2) {\n+                return o1.getKey().compareTo(o2.getKey());\n+            }\n+        } : new Comparator<Pair<Double,Integer>>() {\n+            public int compare(Pair<Double, Integer> o1,\n+                               Pair<Double, Integer> o2) {\n+                return o2.getKey().compareTo(o1.getKey());\n             }\n         };\n \n+        // Sort.\n         Collections.sort(list, comp);\n \n+        // Modify the original array so that its elements are in\n+        // the prescribed order.\n+        // Retrieve indices of original locations.\n+        final int[] indices = new int[len];\n         for (int i = 0; i < len; i++) {\n-            final Pair<Double, double[]> e = list.get(i);\n+            final Pair<Double, Integer> e = list.get(i);\n             x[i] = e.getKey();\n-            final double[] yValues = e.getValue();\n-            for (int j = 0; j < yListLen; j++) {\n-                yList[j][i] = yValues[j];\n+            indices[i] = e.getValue();\n+        }\n+\n+        // In each of the associated arrays, move the\n+        // elements to their new location.\n+        for (int j = 0; j < yListLen; j++) {\n+            // Input array will be modified in place.\n+            final double[] yInPlace = yList[j];\n+            final double[] yOrig = yInPlace.clone();\n+\n+            for (int i = 0; i < len; i++) {\n+                yInPlace[i] = yOrig[indices[i]];\n             }\n         }\n     }", "timestamp": 1370440106, "metainfo": ""}