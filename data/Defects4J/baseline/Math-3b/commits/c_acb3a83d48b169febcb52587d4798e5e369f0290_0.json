{"sha": "acb3a83d48b169febcb52587d4798e5e369f0290", "log": "Fixed infinite loop when NaN occurs in singular value decomposition.  JIRA: MATH-947  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java\n                 final double threshold\n                     = TINY + EPS * (FastMath.abs(singularValues[k]) +\n                                     FastMath.abs(singularValues[k + 1]));\n-                if (FastMath.abs(e[k]) <= threshold) {\n+\n+                // the following condition is written this way in order\n+                // to break out of the loop when NaN occurs, writing it\n+                // as \"if (FastMath.abs(e[k]) <= threshold)\" would loop\n+                // indefinitely in case of NaNs because comparison on NaNs\n+                // always return false, regardless of what is checked\n+                // see issue MATH-947\n+                if (!(FastMath.abs(e[k]) > threshold)) {\n                     e[k] = 0;\n                     break;\n                 }\n+\n             }\n \n             if (k == p - 2) {\n--- a/src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java\n         return u.multiply(d).multiply(v);\n     }\n \n+    @Test\n+    public void testIssue947() {\n+        double[][] nans = new double[][] {\n+            { Double.NaN, Double.NaN },\n+            { Double.NaN, Double.NaN }\n+        };\n+        RealMatrix m = new Array2DRowRealMatrix(nans, false);\n+        SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        Assert.assertTrue(Double.isNaN(svd.getSingularValues()[0]));\n+        Assert.assertTrue(Double.isNaN(svd.getSingularValues()[1]));\n+    }\n+\n }", "timestamp": 1363350875, "metainfo": ""}