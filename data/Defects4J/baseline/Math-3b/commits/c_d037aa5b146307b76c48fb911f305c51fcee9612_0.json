{"sha": "d037aa5b146307b76c48fb911f305c51fcee9612", "log": "Allow direct use of SummaryStatistics in one-way ANOVA.  Patch provided by Peter Andrews.  JIRA: MATH-877  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java\n  */\n package org.apache.commons.math3.stat.inference;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n import org.apache.commons.math3.distribution.FDistribution;\n import org.apache.commons.math3.exception.ConvergenceException;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NullArgumentException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n-import org.apache.commons.math3.stat.descriptive.summary.Sum;\n-import org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;\n-\n-import java.util.Collection;\n+import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n+import org.apache.commons.math3.util.MathUtils;\n \n /**\n  * Implements one-way ANOVA (analysis of variance) statistics.\n     }\n \n     /**\n+     * Computes the ANOVA P-value for a collection of {@link SummaryStatistics}.\n+     *\n+     * <p><strong>Preconditions</strong>: <ul>\n+     * <li>The categoryData <code>Collection</code> must contain\n+     * {@link SummaryStatistics}.</li>\n+     * <li> There must be at least two {@link SummaryStatistics} in the\n+     * <code>categoryData</code> collection and each of these statistics must\n+     * contain at least two values.</li></ul></p><p>\n+     * This implementation uses the\n+     * {@link org.apache.commons.math3.distribution.FDistribution\n+     * commons-math F Distribution implementation} to estimate the exact\n+     * p-value, using the formula<pre>\n+     *   p = 1 - cumulativeProbability(F)</pre>\n+     * where <code>F</code> is the F value and <code>cumulativeProbability</code>\n+     * is the commons-math implementation of the F distribution.</p>\n+     *\n+     * @param categoryData <code>Collection</code> of {@link SummaryStatistics}\n+     * each containing data for one category\n+     * @param allowOneElementData if true, allow computation for one catagory\n+     * only or for one data element per category\n+     * @return Pvalue\n+     * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n+     * array is less than 2 or a contained {@link SummaryStatistics} does not have\n+     * at least two values\n+     * @throws ConvergenceException if the p-value can not be computed due to a convergence error\n+     * @throws MaxCountExceededException if the maximum number of iterations is exceeded\n+     */\n+    public double anovaPValue(final Collection<SummaryStatistics> categoryData,\n+                              final boolean allowOneElementData)\n+        throws NullArgumentException, DimensionMismatchException,\n+               ConvergenceException, MaxCountExceededException {\n+\n+        final AnovaStats a = anovaStats(categoryData, allowOneElementData);\n+        final FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);\n+        return 1.0 - fdist.cumulativeProbability(a.F);\n+\n+    }\n+\n+    /**\n+     * This method calls the method that actually does the calculations (except\n+     * P-value).\n+     *\n+     * @param categoryData\n+     *            <code>Collection</code> of <code>double[]</code> arrays each\n+     *            containing data for one category\n+     * @return computed AnovaStats\n+     * @throws NullArgumentException\n+     *             if <code>categoryData</code> is <code>null</code>\n+     * @throws DimensionMismatchException\n+     *             if the length of the <code>categoryData</code> array is less\n+     *             than 2 or a contained <code>double[]</code> array does not\n+     *             contain at least two values\n+     */\n+    private AnovaStats anovaStats(final Collection<double[]> categoryData)\n+        throws NullArgumentException, DimensionMismatchException {\n+\n+        MathUtils.checkNotNull(categoryData);\n+\n+        final Collection<SummaryStatistics> categoryDataSummaryStatistics =\n+                new ArrayList<SummaryStatistics>(categoryData.size());\n+\n+        // convert arrays to SummaryStatistics\n+        for (final double[] data : categoryData) {\n+            final SummaryStatistics dataSummaryStatistics = new SummaryStatistics();\n+            categoryDataSummaryStatistics.add(dataSummaryStatistics);\n+            for (final double val : data) {\n+                dataSummaryStatistics.addValue(val);\n+            }\n+        }\n+\n+        return anovaStats(categoryDataSummaryStatistics, false);\n+\n+    }\n+\n+    /**\n      * Performs an ANOVA test, evaluating the null hypothesis that there\n      * is no difference among the means of the data categories.\n      *\n      *\n      * @param categoryData <code>Collection</code> of <code>double[]</code>\n      * arrays each containing data for one category\n+     * @param allowOneElementData if true, allow computation for one catagory\n+     * only or for one data element per category\n      * @return computed AnovaStats\n      * @throws NullArgumentException if <code>categoryData</code> is <code>null</code>\n-     * @throws DimensionMismatchException if the length of the <code>categoryData</code>\n-     * array is less than 2 or a contained <code>double[]</code> array does not contain\n-     * at least two values\n-     */\n-    private AnovaStats anovaStats(final Collection<double[]> categoryData)\n+     * @throws DimensionMismatchException if <code>allowOneElementData</code> is false and the number of\n+     * categories is less than 2 or a contained SummaryStatistics does not contain\n+     * at least two values\n+     */\n+    private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,\n+                                  final boolean allowOneElementData)\n         throws NullArgumentException, DimensionMismatchException {\n \n-        if (categoryData == null) {\n-            throw new NullArgumentException();\n-        }\n-\n-        // check if we have enough categories\n-        if (categoryData.size() < 2) {\n-            throw new DimensionMismatchException(\n-                    LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n-                    categoryData.size(), 2);\n-        }\n-\n-        // check if each category has enough data and all is double[]\n-        for (double[] array : categoryData) {\n-            if (array.length <= 1) {\n-                throw new DimensionMismatchException(\n-                        LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n-                        array.length, 2);\n+        MathUtils.checkNotNull(categoryData);\n+\n+        if (!allowOneElementData) {\n+            // check if we have enough categories\n+            if (categoryData.size() < 2) {\n+                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,\n+                                                     categoryData.size(), 2);\n+            }\n+\n+            // check if each category has enough data\n+            for (final SummaryStatistics array : categoryData) {\n+                if (array.getN() <= 1) {\n+                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,\n+                                                         (int) array.getN(), 2);\n+                }\n             }\n         }\n \n         int dfwg = 0;\n         double sswg = 0;\n-        Sum totsum = new Sum();\n-        SumOfSquares totsumsq = new SumOfSquares();\n+        double totsum = 0;\n+        double totsumsq = 0;\n         int totnum = 0;\n \n-        for (double[] data : categoryData) {\n-\n-            Sum sum = new Sum();\n-            SumOfSquares sumsq = new SumOfSquares();\n-            int num = 0;\n-\n-            for (int i = 0; i < data.length; i++) {\n-                double val = data[i];\n-\n-                // within category\n-                num++;\n-                sum.increment(val);\n-                sumsq.increment(val);\n-\n-                // for all categories\n-                totnum++;\n-                totsum.increment(val);\n-                totsumsq.increment(val);\n-            }\n+        for (final SummaryStatistics data : categoryData) {\n+\n+            final double sum = data.getSum();\n+            final double sumsq = data.getSumsq();\n+            final int num = (int) data.getN();\n+            totnum += num;\n+            totsum += sum;\n+            totsumsq += sumsq;\n+\n             dfwg += num - 1;\n-            double ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;\n+            final double ss = sumsq - ((sum * sum) / num);\n             sswg += ss;\n         }\n-        double sst = totsumsq.getResult() - totsum.getResult() *\n-            totsum.getResult()/totnum;\n-        double ssbg = sst - sswg;\n-        int dfbg = categoryData.size() - 1;\n-        double msbg = ssbg/dfbg;\n-        double mswg = sswg/dfwg;\n-        double F = msbg/mswg;\n+\n+        final double sst = totsumsq - ((totsum * totsum) / totnum);\n+        final double ssbg = sst - sswg;\n+        final int dfbg = categoryData.size() - 1;\n+        final double msbg = ssbg / dfbg;\n+        final double mswg = sswg / dfwg;\n+        final double F = msbg / mswg;\n \n         return new AnovaStats(dfbg, dfwg, F);\n+\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java\n import java.util.List;\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n import org.junit.Assert;\n import org.junit.Test;\n \n     }\n \n     @Test\n+    public void testAnovaPValueSummaryStatistics() {\n+        // Target comparison values computed using R version 2.6.0 (Linux version)\n+        List<SummaryStatistics> threeClasses = new ArrayList<SummaryStatistics>();\n+        SummaryStatistics statsA = new SummaryStatistics();\n+        for (double a : classA) {\n+            statsA.addValue(a);\n+        }\n+        threeClasses.add(statsA);\n+        SummaryStatistics statsB = new SummaryStatistics();\n+        for (double b : classB) {\n+            statsB.addValue(b);\n+        }\n+        threeClasses.add(statsB);\n+        SummaryStatistics statsC = new SummaryStatistics();\n+        for (double c : classC) {\n+            statsC.addValue(c);\n+        }\n+        threeClasses.add(statsC);\n+\n+        Assert.assertEquals(\"ANOVA P-value\", 6.959446E-06,\n+                 testStatistic.anovaPValue(threeClasses, true), 1E-12);\n+\n+        List<SummaryStatistics> twoClasses = new ArrayList<SummaryStatistics>();\n+        twoClasses.add(statsA);\n+        twoClasses.add(statsB);\n+\n+        Assert.assertEquals(\"ANOVA P-value\",  0.904212960464,\n+                 testStatistic.anovaPValue(twoClasses, false), 1E-12);\n+\n+    }\n+\n+    @Test\n     public void testAnovaTest() {\n         // Target comparison values computed using R version 2.3.1 (Linux version)\n         List<double[]> threeClasses = new ArrayList<double[]>();", "timestamp": 1363355727, "metainfo": ""}