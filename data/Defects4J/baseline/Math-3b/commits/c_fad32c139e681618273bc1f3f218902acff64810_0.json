{"sha": "fad32c139e681618273bc1f3f218902acff64810", "log": "Use binary search for scanning the table of interpolation intervals.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n  */\n package org.apache.commons.math3.analysis.interpolation;\n \n+import java.util.Arrays;\n import org.apache.commons.math3.analysis.BivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NoDataException;\n     public double value(double x, double y)\n         throws OutOfRangeException {\n         final int i = searchIndex(x, xval);\n-        if (i == -1) {\n-            throw new OutOfRangeException(x, xval[0], xval[xval.length - 1]);\n-        }\n         final int j = searchIndex(y, yval);\n-        if (j == -1) {\n-            throw new OutOfRangeException(y, yval[0], yval[yval.length - 1]);\n-        }\n \n         final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]);\n         final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);\n         }\n \n         final int i = searchIndex(x, xval);\n-        if (i == -1) {\n-            throw new OutOfRangeException(x, xval[0], xval[xval.length - 1]);\n-        }\n         final int j = searchIndex(y, yval);\n-        if (j == -1) {\n-            throw new OutOfRangeException(y, yval[0], yval[yval.length - 1]);\n-        }\n \n         final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]);\n         final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);\n      * @param c Coordinate.\n      * @param val Coordinate samples.\n      * @return the index in {@code val} corresponding to the interval\n-     * containing {@code c}, or {@code -1} if {@code c} is out of the\n+     * containing {@code c}.\n+     * @throws OutOfRangeException if {@code c} is out of the\n      * range defined by the boundary values of {@code val}.\n      */\n     private int searchIndex(double c, double[] val) {\n-        if (c < val[0]) {\n-            return -1;\n-        }\n-\n-        final int max = val.length;\n-        for (int i = 1; i < max; i++) {\n-            if (c <= val[i]) {\n-                return i - 1;\n-            }\n-        }\n-\n-        return -1;\n+        final int r = Arrays.binarySearch(val, c);\n+\n+        if (r == -1 ||\n+            r == -val.length) {\n+            throw new OutOfRangeException(c, val[0], val[val.length - 1]);\n+        }\n+\n+        if (r < 0) {\n+            // \"c\" in within an interpolation sub-interval: Return the\n+            // index of the sample at the lower end of the sub-interval.\n+            return -r - 2;\n+        }\n+        final int last = val.length - 1;\n+        if (r == last) {\n+            // \"c\" is the last sample of the range: Return the index\n+            // of the sample at the lower end of the last sub-interval.\n+            return last - 1;\n+        }\n+\n+        // \"c\" is another sample point.\n+        return r;\n     }\n \n     /**", "timestamp": 1369950272, "metainfo": ""}