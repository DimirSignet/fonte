{"sha": "dd7d68a8097d89d452d6db68f9fa4b7b9bc9de4c", "log": "MATH-989 Added method to check whether a point is within the interpolation range.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java\n         final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);\n \n         return splines[i][j].value(xN, yN);\n+    }\n+\n+    /**\n+     * Indicates whether a point is within the interpolation range.\n+     *\n+     * @param x First coordinate.\n+     * @param y Second coordinate.\n+     * @return {@code true} if (x, y) is a valid point.\n+     */\n+    public boolean isValidPoint(double x, double y) {\n+        if (x < xval[0] ||\n+            x > xval[xval.length - 1] ||\n+            y < yval[0] ||\n+            y > yval[yval.length - 1]) {\n+            return false;\n+        } else {\n+            return true;\n+        }\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java\n \n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.analysis.BivariateFunction;\n import org.apache.commons.math3.distribution.UniformRealDistribution;\n import org.apache.commons.math3.random.RandomGenerator;\n //             System.out.println();\n         }\n     }\n+\n+    @Test\n+    public void testIsValidPoint() {\n+        final double xMin = -12;\n+        final double xMax = 34;\n+        final double yMin = 5;\n+        final double yMax = 67;\n+        final double[] xval = new double[] { xMin, xMax };\n+        final double[] yval = new double[] { yMin, yMax };\n+        final double[][] f = new double[][] { { 1, 2 },\n+                                              { 3, 4 } };\n+        final double[][] dFdX = f;\n+        final double[][] dFdY = f;\n+        final double[][] dFdXdY = f;\n+\n+        final BicubicSplineInterpolatingFunction bcf\n+            = new BicubicSplineInterpolatingFunction(xval, yval, f,\n+                                                     dFdX, dFdY, dFdXdY);\n+\n+        double x, y;\n+\n+        x = xMin;\n+        y = yMin;\n+        Assert.assertTrue(bcf.isValidPoint(x, y));\n+        // Ensure that no exception is thrown.\n+        bcf.value(x, y);\n+\n+        x = xMax;\n+        y = yMax;\n+        Assert.assertTrue(bcf.isValidPoint(x, y));\n+        // Ensure that no exception is thrown.\n+        bcf.value(x, y);\n+ \n+        final double xRange = xMax - xMin;\n+        final double yRange = yMax - yMin;\n+        x = xMin + xRange / 3.4;\n+        y = yMin + yRange / 1.2;\n+        Assert.assertTrue(bcf.isValidPoint(x, y));\n+        // Ensure that no exception is thrown.\n+        bcf.value(x, y);\n+\n+        final double small = 1e-8;\n+        x = xMin - small;\n+        y = yMax;\n+        Assert.assertFalse(bcf.isValidPoint(x, y));\n+        // Ensure that an exception would have been thrown.\n+        try {\n+            bcf.value(x, y);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException expected) {}\n+\n+        x = xMin;\n+        y = yMax + small;\n+        Assert.assertFalse(bcf.isValidPoint(x, y));\n+        // Ensure that an exception would have been thrown.\n+        try {\n+            bcf.value(x, y);\n+            Assert.fail(\"OutOfRangeException expected\");\n+        } catch (OutOfRangeException expected) {}\n+    }\n }", "timestamp": 1370899447, "metainfo": ""}