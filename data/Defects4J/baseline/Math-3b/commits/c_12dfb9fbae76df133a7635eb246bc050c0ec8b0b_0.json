{"sha": "12dfb9fbae76df133a7635eb246bc050c0ec8b0b", "log": "Inverse error function and inverse complementary error function.  JIRA: MATH-948  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/special/Erf.java\n+++ b/src/main/java/org/apache/commons/math3/special/Erf.java\n                 erfc(x1) - erfc(x2) :\n                 erf(x2) - erf(x1);\n     }\n+\n+    /**\n+     * Returns the inverse erf.\n+     * <p>\n+     * This implementation is described in the paper:\n+     * <a href=\"http://people.maths.ox.ac.uk/gilesm/files/gems_erfinv.pdf\">Approximating\n+     * the erfinv function</a> by Mike Giles, Oxford-Man Institute of Quantitative Finance,\n+     * which was published in GPU Computing Gems, volume 2, 2010.\n+     * The source code is available <a href=\"http://gpucomputing.net/?q=node/1828\">here</a>.\n+     * </p>\n+     * @param x the value\n+     * @return t such that x = erf(t)\n+     * @since 3.2\n+     */\n+    public static double erfInv(final double x) {\n+\n+        // beware that the logarithm argument must be\n+        // commputed as (1.0 - x) * (1.0 + x),\n+        // it must NOT be simplified as 1.0 - x * x as this\n+        // would induce rounding errors near the boundaries +/-1\n+        double w = - FastMath.log((1.0 - x) * (1.0 + x));\n+        double p;\n+\n+        if (w < 6.25) {\n+            w = w - 3.125;\n+            p =  -3.6444120640178196996e-21;\n+            p =   -1.685059138182016589e-19 + p * w;\n+            p =   1.2858480715256400167e-18 + p * w;\n+            p =    1.115787767802518096e-17 + p * w;\n+            p =   -1.333171662854620906e-16 + p * w;\n+            p =   2.0972767875968561637e-17 + p * w;\n+            p =   6.6376381343583238325e-15 + p * w;\n+            p =  -4.0545662729752068639e-14 + p * w;\n+            p =  -8.1519341976054721522e-14 + p * w;\n+            p =   2.6335093153082322977e-12 + p * w;\n+            p =  -1.2975133253453532498e-11 + p * w;\n+            p =  -5.4154120542946279317e-11 + p * w;\n+            p =    1.051212273321532285e-09 + p * w;\n+            p =  -4.1126339803469836976e-09 + p * w;\n+            p =  -2.9070369957882005086e-08 + p * w;\n+            p =   4.2347877827932403518e-07 + p * w;\n+            p =  -1.3654692000834678645e-06 + p * w;\n+            p =  -1.3882523362786468719e-05 + p * w;\n+            p =    0.0001867342080340571352 + p * w;\n+            p =  -0.00074070253416626697512 + p * w;\n+            p =   -0.0060336708714301490533 + p * w;\n+            p =      0.24015818242558961693 + p * w;\n+            p =       1.6536545626831027356 + p * w;\n+        } else if (w < 16.0) {\n+            w = FastMath.sqrt(w) - 3.25;\n+            p =   2.2137376921775787049e-09;\n+            p =   9.0756561938885390979e-08 + p * w;\n+            p =  -2.7517406297064545428e-07 + p * w;\n+            p =   1.8239629214389227755e-08 + p * w;\n+            p =   1.5027403968909827627e-06 + p * w;\n+            p =   -4.013867526981545969e-06 + p * w;\n+            p =   2.9234449089955446044e-06 + p * w;\n+            p =   1.2475304481671778723e-05 + p * w;\n+            p =  -4.7318229009055733981e-05 + p * w;\n+            p =   6.8284851459573175448e-05 + p * w;\n+            p =   2.4031110387097893999e-05 + p * w;\n+            p =   -0.0003550375203628474796 + p * w;\n+            p =   0.00095328937973738049703 + p * w;\n+            p =   -0.0016882755560235047313 + p * w;\n+            p =    0.0024914420961078508066 + p * w;\n+            p =   -0.0037512085075692412107 + p * w;\n+            p =     0.005370914553590063617 + p * w;\n+            p =       1.0052589676941592334 + p * w;\n+            p =       3.0838856104922207635 + p * w;\n+        } else if (!Double.isInfinite(w)) {\n+            w = FastMath.sqrt(w) - 5.0;\n+            p =  -2.7109920616438573243e-11;\n+            p =  -2.5556418169965252055e-10 + p * w;\n+            p =   1.5076572693500548083e-09 + p * w;\n+            p =  -3.7894654401267369937e-09 + p * w;\n+            p =   7.6157012080783393804e-09 + p * w;\n+            p =  -1.4960026627149240478e-08 + p * w;\n+            p =   2.9147953450901080826e-08 + p * w;\n+            p =  -6.7711997758452339498e-08 + p * w;\n+            p =   2.2900482228026654717e-07 + p * w;\n+            p =  -9.9298272942317002539e-07 + p * w;\n+            p =   4.5260625972231537039e-06 + p * w;\n+            p =  -1.9681778105531670567e-05 + p * w;\n+            p =   7.5995277030017761139e-05 + p * w;\n+            p =  -0.00021503011930044477347 + p * w;\n+            p =  -0.00013871931833623122026 + p * w;\n+            p =       1.0103004648645343977 + p * w;\n+            p =       4.8499064014085844221 + p * w;\n+        } else {\n+            // this branch does not appears in the original code, it\n+            // was added because the previous branch does not handle\n+            // x = +/-1 correctly. In this case, w is positive infinity\n+            // and as the first coefficient (-2.71e-11) is negative.\n+            // Once the first multiplication is done, p becomes negative\n+            // infinity and remains so throughout the polynomial evaluation.\n+            // So the branch above incorrectly returns negative infinity\n+            // instead of the correct positive infinity.\n+            p = Double.POSITIVE_INFINITY;\n+        }\n+\n+        return p * x;\n+\n+    }\n+\n+    /**\n+     * Returns the inverse erfc.\n+     * @param x the value\n+     * @return t such that x = erfc(t)\n+     * @since 3.2\n+     */\n+    public static double erfcInv(final double x) {\n+        return erfInv(1 - x);\n+    }\n+\n }\n \n--- a/src/test/java/org/apache/commons/math3/special/ErfTest.java\n+++ b/src/test/java/org/apache/commons/math3/special/ErfTest.java\n             }\n         }\n     }\n+\n+    @Test\n+    public void testErfInvNaN() {\n+        Assert.assertTrue(Double.isNaN(Erf.erfInv(-1.001)));\n+        Assert.assertTrue(Double.isNaN(Erf.erfInv(+1.001)));\n+    }\n+\n+    @Test\n+    public void testErfInvInfinite() {\n+        Assert.assertTrue(Double.isInfinite(Erf.erfInv(-1)));\n+        Assert.assertTrue(Erf.erfInv(-1) < 0);\n+        Assert.assertTrue(Double.isInfinite(Erf.erfInv(+1)));\n+        Assert.assertTrue(Erf.erfInv(+1) > 0);\n+    }\n+\n+    @Test\n+    public void testErfInv() {\n+        for (double x = -5.9; x < 5.9; x += 0.01) {\n+            final double y = Erf.erf(x);\n+            final double dydx = 2 * FastMath.exp(-x * x) / FastMath.sqrt(FastMath.PI);\n+            Assert.assertEquals(x, Erf.erfInv(y), 1.0e-15 / dydx);\n+        }\n+    }\n+\n+    @Test\n+    public void testErfcInvNaN() {\n+        Assert.assertTrue(Double.isNaN(Erf.erfcInv(-0.001)));\n+        Assert.assertTrue(Double.isNaN(Erf.erfcInv(+2.001)));\n+    }\n+\n+    @Test\n+    public void testErfcInvInfinite() {\n+        Assert.assertTrue(Double.isInfinite(Erf.erfcInv(-0)));\n+        Assert.assertTrue(Erf.erfcInv( 0) > 0);\n+        Assert.assertTrue(Double.isInfinite(Erf.erfcInv(+2)));\n+        Assert.assertTrue(Erf.erfcInv(+2) < 0);\n+    }\n+\n+    @Test\n+    public void testErfcInv() {\n+        for (double x = -5.85; x < 5.9; x += 0.01) {\n+            final double y = Erf.erfc(x);\n+            final double dydxAbs = 2 * FastMath.exp(-x * x) / FastMath.sqrt(FastMath.PI);\n+            Assert.assertEquals(x, Erf.erfcInv(y), 1.0e-15 / dydxAbs);\n+        }\n+    }\n }", "timestamp": 1363347455, "metainfo": ""}