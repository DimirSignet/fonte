{"sha": "bedb4663be2cc126a6a47f924dc730c8f7520ec4", "log": "userguide: add samples for various RandomVectorGenerator implementations (e.g. low discrepancy vs. uniform).  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/userguide/RandomVectorGeneratorExamples.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.userguide;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.RenderingHints;\n+import java.awt.geom.Rectangle2D;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+\n+import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;\n+import org.apache.commons.math3.random.HaltonSequenceGenerator;\n+import org.apache.commons.math3.random.JDKRandomGenerator;\n+import org.apache.commons.math3.random.MersenneTwister;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.RandomVectorGenerator;\n+import org.apache.commons.math3.random.SobolSequenceGenerator;\n+import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;\n+import org.apache.commons.math3.random.UniformRandomGenerator;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Pair;\n+\n+/**\n+ * Plots 2D samples drawn from various pseudo / quasi-random generators.\n+ */\n+public class RandomVectorGeneratorExamples {\n+\n+    public static List<Vector2D> makeCircle(int samples, final RandomVectorGenerator generator) {\n+        List<Vector2D> points = new ArrayList<Vector2D>();\n+        for (double i = 0; i < samples; i++) {\n+            double[] vector = generator.nextVector();\n+            Vector2D point = new Vector2D(vector);\n+            points.add(point);\n+        }\n+\n+        // normalize points first\n+        points = normalize(points);\n+        \n+        // now test if the sample is within the unit circle\n+        List<Vector2D> circlePoints = new ArrayList<Vector2D>();\n+        for (Vector2D p : points) {\n+            double criteria = FastMath.pow(p.getX(), 2) + FastMath.pow(p.getY(), 2);\n+            if (criteria < 1.0) {\n+                circlePoints.add(p);\n+            }\n+        }\n+\n+        return circlePoints;\n+    }\n+\n+    public static List<Vector2D> makeRandom(int samples, RandomVectorGenerator generator) {\n+        List<Vector2D> points = new ArrayList<Vector2D>();\n+        for (double i = 0; i < samples; i++) {\n+            double[] vector = generator.nextVector();\n+            Vector2D point = new Vector2D(vector);\n+            points.add(point);\n+        }\n+        \n+        return normalize(points);\n+    }\n+\n+    public static List<Vector2D> normalize(final List<Vector2D> input) {\n+        // find the mininum and maximum x value in the dataset\n+        double minX = Double.MAX_VALUE;\n+        double maxX = Double.MIN_VALUE;\n+        for (Vector2D p : input) {\n+            minX = FastMath.min(minX, p.getX());\n+            maxX = FastMath.max(maxX, p.getX());\n+        }\n+        \n+        double minY, maxY;\n+        \n+        // use the minimum to detect if we either have input values in the range [0, 1] or [-sqrt(3), sqrt(3)]\n+        if (FastMath.abs(minX) < 0.1) {\n+            minX = minY = 0.0;\n+            maxX = maxY = 1.0;\n+        } else {\n+            minX = minY = -FastMath.sqrt(3);\n+            maxX = maxY = FastMath.sqrt(3);            \n+        }\n+\n+        double rangeX = maxX - minX;\n+        double rangeY = maxY - minY;\n+        List<Vector2D> points = new ArrayList<Vector2D>();\n+        for (Vector2D p : input) {\n+            double[] arr = p.toArray();\n+            // normalize to the range [-1, 1]\n+            arr[0] = (arr[0] - minX) / rangeX * 2 - 1;\n+            arr[1] = (arr[1] - minY) / rangeY * 2 - 1;\n+            points.add(new Vector2D(arr));\n+        }\n+        return points;\n+    }\n+    \n+    public static class Display extends JFrame {\n+        \n+        private static final long serialVersionUID = -8846964550416589808L;\n+\n+        public Display() {\n+            setTitle(\"Pseudo/Quasi-random examples\");\n+            setSize(800, 800);\n+            setLocationRelativeTo(null);\n+            setDefaultCloseOperation(EXIT_ON_CLOSE);\n+            \n+            setLayout(new GridBagLayout());\n+            \n+            int[] datasets = new int[] { 256, 1000, 2500, 1000 };\n+            List<Pair<String, RandomVectorGenerator>> generators = new ArrayList<Pair<String, RandomVectorGenerator>>();\n+\n+            generators.add(new Pair<String, RandomVectorGenerator>(\"Uncorrelated\\nUniform(JDK)\",\n+                    new UncorrelatedRandomVectorGenerator(2, new UniformRandomGenerator(new JDKRandomGenerator()))));\n+            generators.add(new Pair<String, RandomVectorGenerator>(\"Independent\\nRandom(MT)\", new RandomVectorGenerator() {\n+\n+                RandomGenerator[] rngs = new RandomGenerator[] {\n+                    new MersenneTwister(0),\n+                    new MersenneTwister(1)\n+                };\n+                \n+                public double[] nextVector() {\n+                    final double[] vector = new double[2];\n+                    vector[0] = rngs[0].nextDouble();\n+                    vector[1] = rngs[1].nextDouble();\n+                    return vector;\n+                }\n+                \n+            }));            \n+            generators.add(new Pair<String, RandomVectorGenerator>(\"HaltonSequence\", new HaltonSequenceGenerator(2)));            \n+            generators.add(new Pair<String, RandomVectorGenerator>(\"SobolSequence\", new SobolSequenceGenerator(2)));            \n+            \n+            GridBagConstraints c = new GridBagConstraints();\n+            c.fill = GridBagConstraints.VERTICAL;\n+            c.gridx = 1;\n+            c.gridy = 0;\n+            c.insets = new Insets(2, 2, 2, 2);\n+\n+            for (Pair<String, RandomVectorGenerator> pair : generators) {\n+                JTextArea text = new JTextArea(pair.getFirst());\n+                text.setEditable(false);\n+                text.setOpaque(false);\n+                add(text, c);\n+                c.gridx++;\n+            }\n+            int saveY = ++c.gridy;\n+            \n+            c.gridx = 0;\n+            for (int type = 0; type < 4; type++) {\n+                JLabel text = new JLabel(\"n=\" + String.valueOf(datasets[type]));\n+                text.setOpaque(false);\n+                add(text, c);\n+                c.gridy++;\n+            }\n+\n+            c.gridy = saveY;\n+            for (int type = 0; type < 4; type++) {\n+                c.gridx = 1;\n+\n+                for (Pair<String, RandomVectorGenerator> pair : generators) {\n+                    List<Vector2D> points = null;\n+                    int samples = datasets[type];\n+                    switch (type) {\n+                        case 0:\n+                            points = makeRandom(samples, pair.getValue());\n+                            break;\n+                        case 1:\n+                            points = makeRandom(samples, pair.getValue());\n+                            break;\n+                        case 2:\n+                            points = makeRandom(samples, pair.getValue());\n+                            break;\n+                        case 3:\n+                            points = makeCircle(samples, pair.getValue());\n+                            break;\n+                    }\n+                    add(new Plot(points), c);\n+                    c.gridx++;\n+                }\n+\n+                c.gridy++;\n+            }            \n+        }\n+    }\n+\n+    public static class Plot extends JComponent {\n+\n+        private static final long serialVersionUID = 4546352048750419587L;\n+\n+        private static double PAD = 10;\n+\n+        private List<Vector2D> points;\n+\n+        public Plot(final List<Vector2D> points) {\n+            this.points = points;\n+        }\n+        \n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            Graphics2D g2 = (Graphics2D)g;\n+            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                                RenderingHints.VALUE_ANTIALIAS_ON);\n+\n+            int w = getWidth();\n+            int h = getHeight();\n+\n+            g2.clearRect(0, 0, w, h);\n+            \n+            g2.setPaint(Color.black);\n+            g2.drawRect(0, 0, w - 1, h - 1);\n+            \n+            for (Vector2D point : points) {\n+                Vector2D p = transform(point, w, h);\n+                double[] arr = p.toArray();\n+                g2.draw(new Rectangle2D.Double(arr[0] - 1, arr[1] - 1, 2, 2));\n+            }\n+        }        \n+        \n+        @Override\n+        public Dimension getPreferredSize() {\n+            return new Dimension(140, 140);\n+        }\n+\n+        private Vector2D transform(Vector2D point, int width, int height) {\n+            double[] arr = point.toArray();\n+            return new Vector2D(new double[] { PAD + (arr[0] + 1) / 2.0 * (width - 2 * PAD),\n+                                                  height - PAD - (arr[1] + 1) / 2.0 * (height - 2 * PAD) });\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        SwingUtilities.invokeLater(new Runnable() {\n+            public void run() {\n+                Display d = new Display();\n+                d.setVisible(true);\n+            }\n+        });\n+    }\n+}", "timestamp": 1369250087, "metainfo": ""}