{"sha": "96cd02e82c219349086092cdc2c5a450efc8be13", "log": "Replaced tests predating inference package with Chi-square tests. JIRA: MATH-598.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java\n import org.apache.commons.math3.distribution.GammaDistribution;\n import org.apache.commons.math3.distribution.HypergeometricDistribution;\n import org.apache.commons.math3.distribution.HypergeometricDistributionTest;\n+import org.apache.commons.math3.distribution.NormalDistribution;\n import org.apache.commons.math3.distribution.PascalDistribution;\n import org.apache.commons.math3.distribution.PascalDistributionTest;\n import org.apache.commons.math3.distribution.PoissonDistribution;\n     /**\n      * Make sure that empirical distribution of random Poisson(4)'s has P(X <=\n      * 5) close to actual cumulative Poisson probability and that nextPoisson\n-     * fails when mean is non-positive TODO: replace with statistical test,\n-     * adding test stat to TestStatistic\n+     * fails when mean is non-positive.\n      */\n     @Test\n     public void testNextPoisson() {\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n         }\n-        Frequency f = new Frequency();\n-        for (int i = 0; i < largeSampleSize; i++) {\n-            f.addValue(randomData.nextPoisson(4.0d));\n-        }\n-        long cumFreq = f.getCount(0) + f.getCount(1) + f.getCount(2)\n-                + f.getCount(3) + f.getCount(4) + f.getCount(5);\n-        long sumFreq = f.getSumFreq();\n-        double cumPct = Double.valueOf(cumFreq).doubleValue()\n-                / Double.valueOf(sumFreq).doubleValue();\n-        Assert.assertEquals(\"cum Poisson(4)\", cumPct, 0.7851, 0.2);\n         try {\n             randomData.nextPoisson(-1);\n             Assert.fail(\"negative mean supplied -- MathIllegalArgumentException expected\");\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n         }\n-\n+        \n+        final double mean = 4.0d;\n+        final int len = 5;\n+        PoissonDistribution poissonDistribution = new PoissonDistribution(mean);\n+        Frequency f = new Frequency();\n+        randomData.reSeed(1000);\n+        for (int i = 0; i < largeSampleSize; i++) {\n+            f.addValue(randomData.nextPoisson(mean));\n+        }\n+        final long[] observed = new long[len];\n+        for (int i = 0; i < len; i++) {\n+            observed[i] = f.getCount(i + 1);\n+        }\n+        final double[] expected = new double[len];\n+        for (int i = 0; i < len; i++) {\n+            expected[i] = poissonDistribution.probability(i + 1) * largeSampleSize;\n+        }\n+        \n+        TestUtils.assertChiSquareAccept(expected, observed, 0.0001);\n     }\n \n     @Test\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n         }\n-        SummaryStatistics u = new SummaryStatistics();\n-        for (int i = 0; i < largeSampleSize; i++) {\n-            u.addValue(randomData.nextGaussian(0, 1));\n-        }\n-        double xbar = u.getMean();\n-        double s = u.getStandardDeviation();\n-        double n = u.getN();\n-        /*\n-         * t-test at .001-level TODO: replace with externalized t-test, with\n-         * test statistic defined in TestStatistic\n-         */\n-        Assert.assertTrue(FastMath.abs(xbar) / (s / FastMath.sqrt(n)) < 3.29);\n+        double[] quartiles = TestUtils.getDistributionQuartiles(new NormalDistribution(0,1));\n+        long[] counts = new long[4];\n+        randomData.reSeed(1000);\n+        for (int i = 0; i < 1000; i++) {\n+            double value = randomData.nextGaussian(0, 1);\n+            TestUtils.updateCounts(value, counts, quartiles);\n+        }\n+        TestUtils.assertChiSquareAccept(expected, counts, 0.001);\n     }\n \n     /** test failure modes and distribution of nextExponential() */\n         } catch (MathIllegalArgumentException ex) {\n             // ignored\n         }\n-        long cumFreq = 0;\n-        double v = 0;\n-        for (int i = 0; i < largeSampleSize; i++) {\n-            v = randomData.nextExponential(1);\n-            Assert.assertTrue(\"exponential deviate postive\", v > 0);\n-            if (v < 2)\n-                cumFreq++;\n-        }\n-        /*\n-         * TODO: Replace with a statistical test, with statistic added to\n-         * TestStatistic. Check below compares observed cumulative distribution\n-         * evaluated at 2 with exponential CDF\n-         */\n-        Assert.assertEquals(\"exponential cumulative distribution\", (double) cumFreq\n-                / (double) largeSampleSize, 0.8646647167633873, .2);\n-\n-        /**\n-         * Proposal on improving the test of generating exponentials\n-         */\n         double[] quartiles;\n         long[] counts;\n ", "timestamp": 1363540531, "metainfo": ""}