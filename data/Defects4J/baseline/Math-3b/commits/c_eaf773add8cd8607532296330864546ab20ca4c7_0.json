{"sha": "eaf773add8cd8607532296330864546ab20ca4c7", "log": "Fix findbugs warnings: non-serializable field, minor formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\n  *\n  * @version $Id$\n  */\n-public abstract class AbstractIntegerDistribution\n-implements IntegerDistribution, Serializable {\n+public abstract class AbstractIntegerDistribution implements IntegerDistribution, Serializable {\n+\n     /** Serializable version identifier */\n     private static final long serialVersionUID = -1146319659338487221L;\n \n-     /**\n-      * RandomData instance used to generate samples from the distribution.\n-      * @deprecated As of 3.1, to be removed in 4.0. Please use the\n-      * {@link #random} instance variable instead.\n-      */\n+    /**\n+     * RandomData instance used to generate samples from the distribution.\n+     * @deprecated As of 3.1, to be removed in 4.0. Please use the\n+     * {@link #random} instance variable instead.\n+     */\n     @Deprecated\n     protected final RandomDataImpl randomData = new RandomDataImpl();\n \n         // New users are forbidden to use this constructor.\n         random = null;\n     }\n+\n     /**\n      * @param rng Random number generator.\n      * @since 3.1\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n  */\n package org.apache.commons.math3.distribution;\n \n+import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.ArrayList;\n import java.util.List;\n  * @version $Id$\n  * @since 3.2\n  */\n-public class DiscreteDistribution<T> {\n+public class DiscreteDistribution<T> implements Serializable {\n+\n+    /** Serializable UID. */\n+    private static final long serialVersionUID = -6817222602957985244L;\n \n     /**\n      * RNG instance used to generate samples from the distribution.\n      */\n     protected final RandomGenerator random;\n+\n     /**\n      * List of random variable values.\n      */\n     private final List<T> singletons;\n+\n     /**\n      * Normalized array of probabilities of respective random variable values.\n      */\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java\n \n /**\n  * Implementation of the integer-valued discrete distribution.\n+ * <p>\n+ * Note: values with zero-probability are allowed but they do not extend the support.\n  *\n- * Note: values with zero-probability are allowed but they do not extend the\n- * support.\n- *\n- * @see <a href=\"http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution\">Discrete probability distribution (Wikipedia)</a>\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution\">\n+ * Discrete probability distribution (Wikipedia)</a>\n  * @see <a href=\"http://mathworld.wolfram.com/DiscreteDistribution.html\">Discrete Distribution (MathWorld)</a>\n  * @version $Id$\n  * @since 3.2\n      *\n      * @param singletons array of random variable values.\n      * @param probabilities array of probabilities.\n-     * @throws DimensionMismatchException if\n-     * {@code singletons.length != probabilities.length}\n-     * @throws NotPositiveException if probability of at least one value is\n-     * negative.\n+     * @throws DimensionMismatchException if {@code singletons.length != probabilities.length}\n+     * @throws NotPositiveException if probability of at least one value is negative.\n      * @throws MathArithmeticException if the probabilities sum to zero.\n-     * @throws MathIllegalArgumentException if probability of at least one value\n-     * is infinite.\n+     * @throws MathIllegalArgumentException if probability of at least one value is infinite.\n      */\n     public DiscreteIntegerDistribution(final int[] singletons, final double[] probabilities)\n         throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n      * @param rng random number generator.\n      * @param singletons array of random variable values.\n      * @param probabilities array of probabilities.\n-     * @throws DimensionMismatchException if\n-     * {@code singletons.length != probabilities.length}\n-     * @throws NotPositiveException if probability of at least one value is\n-     * negative.\n+     * @throws DimensionMismatchException if {@code singletons.length != probabilities.length}\n+     * @throws NotPositiveException if probability of at least one value is negative.\n      * @throws MathArithmeticException if the probabilities sum to zero.\n-     * @throws MathIllegalArgumentException if probability of at least one value\n-     * is infinite.\n+     * @throws MathIllegalArgumentException if probability of at least one value is infinite.\n      */\n     public DiscreteIntegerDistribution(final RandomGenerator rng,\n                                        final int[] singletons, final double[] probabilities)\n         return true;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public int sample() {\n         return innerDistribution.sample();\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java\n \n /**\n  * Implementation of the discrete distribution on the reals.\n+ * <p>\n+ * Note: values with zero-probability are allowed but they do not extend the support.\n  *\n- * Note: values with zero-probability are allowed but they do not extend the\n- * support.\n- *\n- * @see <a href=\"http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution\">Discrete probability distribution (Wikipedia)</a>\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution\">\n+ * Discrete probability distribution (Wikipedia)</a>\n  * @see <a href=\"http://mathworld.wolfram.com/DiscreteDistribution.html\">Discrete Distribution (MathWorld)</a>\n  * @version $Id$\n  * @since 3.2\n      *\n      * @param singletons array of random variable values.\n      * @param probabilities array of probabilities.\n-     * @throws DimensionMismatchException if\n-     * {@code singletons.length != probabilities.length}\n-     * @throws NotPositiveException if probability of at least one value is\n-     * negative.\n+     * @throws DimensionMismatchException if {@code singletons.length != probabilities.length}\n+     * @throws NotPositiveException if probability of at least one value is negative.\n      * @throws MathArithmeticException if the probabilities sum to zero.\n-     * @throws MathIllegalArgumentException if probability of at least one value\n-     * is infinite.\n+     * @throws MathIllegalArgumentException if probability of at least one value is infinite.\n      */\n     public DiscreteRealDistribution(final double[] singletons, final double[] probabilities)\n-        throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n+            throws DimensionMismatchException, NotPositiveException, MathArithmeticException,\n+            MathIllegalArgumentException {\n         this(new Well19937c(), singletons, probabilities);\n     }\n \n      * @param rng random number generator.\n      * @param singletons array of random variable values.\n      * @param probabilities array of probabilities.\n-     * @throws DimensionMismatchException if\n-     * {@code singletons.length != probabilities.length}\n-     * @throws NotPositiveException if probability of at least one value is\n-     * negative.\n+     * @throws DimensionMismatchException if {@code singletons.length != probabilities.length}\n+     * @throws NotPositiveException if probability of at least one value is negative.\n      * @throws MathArithmeticException if the probabilities sum to zero.\n-     * @throws MathIllegalArgumentException if probability of at least one value\n-     * is infinite.\n+     * @throws MathIllegalArgumentException if probability of at least one value is infinite.\n      */\n     public DiscreteRealDistribution(final RandomGenerator rng,\n                                     final double[] singletons, final double[] probabilities)\n         innerDistribution = new DiscreteDistribution<Double>(rng, samples);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public double probability(final double x) {\n         return innerDistribution.probability(x);\n         return true;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public double sample() {\n         return innerDistribution.sample();", "timestamp": 1363122741, "metainfo": ""}