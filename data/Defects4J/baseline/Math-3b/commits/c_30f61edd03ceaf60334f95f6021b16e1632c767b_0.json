{"sha": "30f61edd03ceaf60334f95f6021b16e1632c767b", "log": "Tab police  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java\n \n     /** {@inheritDoc} */\n     @Override\n-\tprotected double doIntegrate()\n+    protected double doIntegrate()\n         throws MathIllegalArgumentException, TooManyEvaluationsException, MaxCountExceededException {\n \n         final double min = getMin();\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java\n      */\n     public abstract double getExpectedValue(final int n);\n \n-\t/**\n-\t * Checks that the value of the integral of each monomial\n+    /**\n+     * Checks that the value of the integral of each monomial\n      *   <code>x<sup>0</sup>, ... , x<sup>p</sup></code>\n      * returned by the quadrature rule under test conforms with the expected\n      * value.\n                                     \" with a \" +\n                                     integrator.getNumberOfPoints() + \"-point quadrature rule\",\n                                     expected, actual, eps);\n-\t\t\t} else {\n+            } else {\n                 double err = Math.abs(actual - expected) / Math.ulp(expected);\n                 Assert.assertEquals(\"while integrating monomial x**\" + n + \" with a \" +\n                                     + integrator.getNumberOfPoints() + \"-point quadrature rule, \" +\n--- a/src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java\n+++ b/src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java\n         }\n         \n         String[] labels = {\"{0, 1, 2}\", \"{ 0, 2, 1 }\", \"{ 1, 0, 2 }\",\n-        \t\t\"{ 1, 2, 0 }\", \"{ 2, 0, 1 }\", \"{ 2, 1, 0 }\"};\n+                \"{ 1, 2, 0 }\", \"{ 2, 0, 1 }\", \"{ 2, 1, 0 }\"};\n         TestUtils.assertChiSquareAccept(labels, expected, observed, 0.001);\n \n         // Check size = 1 boundary case", "timestamp": 1372958687, "metainfo": ""}