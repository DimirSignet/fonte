{"sha": "7b59404da2454efa0f1fecb47db68fb1a81471ef", "log": "[MATH-973] Added GeometricDistribution. Thanks to Mauro Tortonesi.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/distribution/GeometricDistribution.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.distribution;\n+\n+import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well19937c;\n+\n+/**\n+ * Implementation of the geometric distribution.\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Geometric_distribution\">Geometric distribution (Wikipedia)</a>\n+ * @see <a href=\"http://mathworld.wolfram.com/GeometricDistribution.html\">Geometric Distribution (MathWorld)</a>\n+ * @version $Id$\n+ * @since 4.0\n+ */\n+public class GeometricDistribution extends AbstractIntegerDistribution {\n+\n+    /** Serializable version identifier. */\n+    private static final long serialVersionUID = 20130507L;\n+    /** The probability of success. */\n+    private final double probabilityOfSuccess;\n+\n+    /**\n+     * Create a geometric distribution with the given probability of success.\n+     *\n+     * @param p probability of success.\n+     * @throws OutOfRangeException if {@code p <= 0} or {@code p > 1}.\n+     */\n+    public GeometricDistribution(double p) {\n+        this(new Well19937c(), p);\n+    }\n+\n+    /**\n+     * Creates a geometric distribution.\n+     *\n+     * @param rng Random number generator.\n+     * @param p Probability of success.\n+     * @throws OutOfRangeException if {@code p <= 0} or {@code p > 1}.\n+     */\n+    public GeometricDistribution(RandomGenerator rng, double p) {\n+        super(rng);\n+\n+        if (p <= 0 || p > 1) {\n+            throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+        }\n+\n+        probabilityOfSuccess = p;\n+    }\n+\n+    /**\n+     * Access the probability of success for this distribution.\n+     *\n+     * @return the probability of success.\n+     */\n+    public double getProbabilityOfSuccess() {\n+        return probabilityOfSuccess;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double probability(int x) {\n+        double ret;\n+        if (x < 0) {\n+            ret = 0.0;\n+        } else {\n+            final double p = probabilityOfSuccess;\n+            ret = FastMath.pow(1 - p, x) * p;\n+        }\n+        return ret;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double cumulativeProbability(int x) {\n+        double ret;\n+        if (x < 0) {\n+            ret = 0.0;\n+        } else {\n+            final double p = probabilityOfSuccess;\n+            ret = 1.0 - FastMath.pow(1 - p, x + 1);\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For probability parameter {@code p}, the mean is {@code (1 - p) / p}.\n+     */\n+    public double getNumericalMean() {\n+        final double p = probabilityOfSuccess;\n+        return (1 - p) / p;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * For probability parameter {@code p}, the variance is\n+     * {@code (1 - p) / (p * p)}.\n+     */\n+    public double getNumericalVariance() {\n+        final double p = probabilityOfSuccess;\n+        return (1 - p) / (p * p);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The lower bound of the support is always 0.\n+     *\n+     * @return lower bound of the support (always 0)\n+     */\n+    public int getSupportLowerBound() {\n+        return 0;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The upper bound of the support is infinite (which we approximate as\n+     * {@code Integer.MAX_VALUE}).\n+     *\n+     * @return upper bound of the support (always Integer.MAX_VALUE)\n+     */\n+    public int getSupportUpperBound() {\n+        return Integer.MAX_VALUE;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * The support of this distribution is connected.\n+     *\n+     * @return {@code true}\n+     */\n+    public boolean isSupportConnected() {\n+        return true;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/distribution/GeometricDistributionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.math3.distribution;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for GeometricDistribution.\n+ * <p>\n+ * See class javadoc for IntegerDistributionAbstractTest for details.\n+ *\n+ * @version $Id$\n+ */\n+public class GeometricDistributionTest extends IntegerDistributionAbstractTest {\n+\n+    // -------------- Implementations for abstract methods --------------------\n+\n+    /** Creates the default discrete distribution instance to use in tests. */\n+    @Override\n+    public IntegerDistribution makeDistribution() {\n+        return new GeometricDistribution(0.40);\n+    }\n+\n+    /** Creates the default probability density test input values */\n+    @Override\n+    public int[] makeDensityTestPoints() {\n+        return new int[] { -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,\n+                            9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n+                           29, 20, 21, 22, 23, 24, 25, 26, 27, 28 };\n+    }\n+\n+    /** Creates the default probability density test expected values */\n+    @Override\n+    public double[] makeDensityTestValues() {\n+        return new double[] {\n+            0.000000e+00, 4.000000e-01, 2.400000e-01, 1.440000e-01,\n+            8.640000e-02, 5.184000e-02, 3.110400e-02, 1.866240e-02,\n+            1.119744e-02, 6.718464e-03, 4.031078e-03, 2.418647e-03,\n+            1.451188e-03, 8.707129e-04, 5.224278e-04, 3.134567e-04,\n+            1.880740e-04, 1.128444e-04, 6.770664e-05, 4.062398e-05,\n+            2.437439e-05, 1.462463e-05, 8.774780e-06, 5.264868e-06,\n+            3.158921e-06, 1.895353e-06, 1.137212e-06, 6.823269e-07,\n+            4.093961e-07, 2.456377e-07\n+        };\n+    }\n+\n+    /** Creates the default cumulative probability density test input values */\n+    @Override\n+    public int[] makeCumulativeTestPoints() {\n+        return makeDensityTestPoints();\n+    }\n+\n+    /** Creates the default cumulative probability density test expected values */\n+    @Override\n+    public double[] makeCumulativeTestValues() {\n+        return new double[] {\n+            0.0000000, 0.4000000, 0.6400000, 0.7840000, 0.8704000,\n+            0.9222400, 0.9533440, 0.9720064, 0.9832038, 0.9899223,\n+            0.9939534, 0.9963720, 0.9978232, 0.9986939, 0.9992164,\n+            0.9995298, 0.9997179, 0.9998307, 0.9998984, 0.9999391,\n+            0.9999634, 0.9999781, 0.9999868, 0.9999921, 0.9999953,\n+            0.9999972, 0.9999983, 0.9999990, 0.9999994, 0.9999996\n+        };\n+    }\n+\n+    /** Creates the default inverse cumulative probability test input values */\n+    @Override\n+    public double[] makeInverseCumulativeTestPoints() {\n+        return new double[] {\n+            0.000, 0.005, 0.010, 0.015, 0.020, 0.025, 0.030, 0.035, 0.040,\n+            0.045, 0.050, 0.055, 0.060, 0.065, 0.070, 0.075, 0.080, 0.085,\n+            0.090, 0.095, 0.100, 0.105, 0.110, 0.115, 0.120, 0.125, 0.130,\n+            0.135, 0.140, 0.145, 0.150, 0.155, 0.160, 0.165, 0.170, 0.175,\n+            0.180, 0.185, 0.190, 0.195, 0.200, 0.205, 0.210, 0.215, 0.220,\n+            0.225, 0.230, 0.235, 0.240, 0.245, 0.250, 0.255, 0.260, 0.265,\n+            0.270, 0.275, 0.280, 0.285, 0.290, 0.295, 0.300, 0.305, 0.310,\n+            0.315, 0.320, 0.325, 0.330, 0.335, 0.340, 0.345, 0.350, 0.355,\n+            0.360, 0.365, 0.370, 0.375, 0.380, 0.385, 0.390, 0.395, 0.400,\n+            0.405, 0.410, 0.415, 0.420, 0.425, 0.430, 0.435, 0.440, 0.445,\n+            0.450, 0.455, 0.460, 0.465, 0.470, 0.475, 0.480, 0.485, 0.490,\n+            0.495, 0.500, 0.505, 0.510, 0.515, 0.520, 0.525, 0.530, 0.535,\n+            0.540, 0.545, 0.550, 0.555, 0.560, 0.565, 0.570, 0.575, 0.580,\n+            0.585, 0.590, 0.595, 0.600, 0.605, 0.610, 0.615, 0.620, 0.625,\n+            0.630, 0.635, 0.640, 0.645, 0.650, 0.655, 0.660, 0.665, 0.670,\n+            0.675, 0.680, 0.685, 0.690, 0.695, 0.700, 0.705, 0.710, 0.715,\n+            0.720, 0.725, 0.730, 0.735, 0.740, 0.745, 0.750, 0.755, 0.760,\n+            0.765, 0.770, 0.775, 0.780, 0.785, 0.790, 0.795, 0.800, 0.805,\n+            0.810, 0.815, 0.820, 0.825, 0.830, 0.835, 0.840, 0.845, 0.850,\n+            0.855, 0.860, 0.865, 0.870, 0.875, 0.880, 0.885, 0.890, 0.895,\n+            0.900, 0.905, 0.910, 0.915, 0.920, 0.925, 0.930, 0.935, 0.940,\n+            0.945, 0.950, 0.955, 0.960, 0.965, 0.970, 0.975, 0.980, 0.985,\n+            0.990, 0.995\n+        };\n+    }\n+\n+    /**\n+     * Creates the default inverse cumulative probability density test expected\n+     * values\n+     */\n+    @Override\n+    public int[] makeInverseCumulativeTestValues() {\n+        return new int[] {\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n+            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n+            1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n+            3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,\n+            5, 5, 6, 6, 6, 6, 7, 7, 8, 9, 10\n+        };\n+    }\n+\n+    // ----------------- Additional test cases ---------------------------------\n+\n+    @Test\n+    public void testMoments() {\n+        final double tol = 1e-9;\n+        GeometricDistribution dist;\n+\n+        dist = new GeometricDistribution(0.5);\n+        Assert.assertEquals(dist.getNumericalMean(), (1.0d - 0.5d) / 0.5d, tol);\n+        Assert.assertEquals(dist.getNumericalVariance(), (1.0d - 0.5d) / (0.5d * 0.5d), tol);\n+\n+        dist = new GeometricDistribution(0.3);\n+        Assert.assertEquals(dist.getNumericalMean(), (1.0d - 0.3d) / 0.3d, tol);\n+        Assert.assertEquals(dist.getNumericalVariance(), (1.0d - 0.3d) / (0.3d * 0.3d), tol);\n+    }\n+}", "timestamp": 1367959088, "metainfo": ""}