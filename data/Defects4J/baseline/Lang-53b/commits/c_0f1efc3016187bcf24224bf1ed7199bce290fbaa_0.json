{"sha": "0f1efc3016187bcf24224bf1ed7199bce290fbaa", "log": "Added test case for getDateInstance(int, Locale). Removed whitespaces from lines that was supposed to be empty.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n package org.apache.commons.lang.time;\n \n import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Locale;\n  *\n  * @author Sean Schofield\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Fredrik Westermarck\n  * @since 2.0\n- * @version $Id: FastDateFormatTest.java,v 1.6 2003/08/18 02:22:28 bayard Exp $\n+ * @version $Id: FastDateFormatTest.java,v 1.7 2004/02/04 18:49:10 fredrik Exp $\n  */\n public class FastDateFormatTest extends TestCase {\n \n         FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n         FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n         FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n-        \n+\n         assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n         assertSame(format2, format3);\n         assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n         try {\n             Locale.setDefault(Locale.US);\n             TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n-    \n+\n             FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                     TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n             FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n             FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n             FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n             FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n-    \n+\n             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n             assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n             assertEquals(true, format1.getTimeZoneOverridesCalendar());\n             assertSame(format3, format4);\n             assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n             assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n-            \n+\n         } finally {\n             Locale.setDefault(realDefaultLocale);\n             TimeZone.setDefault(realDefaultZone);\n             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n             assertSame(format1, format3);\n             assertSame(Locale.GERMANY, format1.getLocale());\n-            \n+\n         } finally {\n             Locale.setDefault(realDefaultLocale);\n         }\n         try {\n             Locale.setDefault(Locale.US);\n             TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n-    \n+\n             FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                     TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n             FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n             FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                     TimeZone.getDefault(), Locale.GERMANY);\n-    \n+\n             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n             assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n             assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n             assertEquals(Locale.GERMANY, format1.getLocale());\n             assertEquals(Locale.GERMANY, format2.getLocale());\n             assertEquals(Locale.GERMANY, format3.getLocale());\n-            \n+\n         } finally {\n             Locale.setDefault(realDefaultLocale);\n             TimeZone.setDefault(realDefaultZone);\n         }\n     }\n-    \n+\n     public void testFormat() {\n         Locale realDefaultLocale = Locale.getDefault();\n         TimeZone realDefaultZone = TimeZone.getDefault();\n             TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n             FastDateFormat fdf = null;\n             SimpleDateFormat sdf = null;\n-    \n+\n             GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n             Date date1 = cal1.getTime();\n             Date date2 = cal2.getTime();\n-            \n+\n             fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n             sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n             assertEquals(sdf.format(date1), fdf.format(date1));\n             assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n             assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n             assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n-            \n+\n             fdf = FastDateFormat.getInstance(\"Z\");\n             assertEquals(\"-0500\", fdf.format(date1));\n             assertEquals(\"-0500\", fdf.format(cal1));\n-            \n+\n             fdf = FastDateFormat.getInstance(\"Z\");\n             assertEquals(\"-0400\", fdf.format(date2));\n             assertEquals(\"-0400\", fdf.format(cal2));\n-            \n+\n             fdf = FastDateFormat.getInstance(\"ZZ\");\n             assertEquals(\"-05:00\", fdf.format(date1));\n             assertEquals(\"-05:00\", fdf.format(cal1));\n             fdf = FastDateFormat.getInstance(\"ZZ\");\n             assertEquals(\"-04:00\", fdf.format(date2));\n             assertEquals(\"-04:00\", fdf.format(cal2));\n-            \n+\n             String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                 \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n             fdf = FastDateFormat.getInstance(pattern);\n             TimeZone.setDefault(realDefaultZone);\n         }\n     }\n-    \n+\n+    /**\n+     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n+     */\n+    public void testShortDateStyleWithLocales() {\n+        Locale usLocale = Locale.US;\n+        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2004, 1, 3);\n+        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n+        assertEquals(\"2/3/04\", fdf.format(cal));\n+\n+        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n+        assertEquals(\"2004-02-03\", fdf.format(cal));\n+\n+    }\n }", "timestamp": 1075920550, "metainfo": ""}