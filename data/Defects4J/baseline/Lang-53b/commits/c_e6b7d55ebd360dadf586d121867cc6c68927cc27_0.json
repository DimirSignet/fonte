{"sha": "e6b7d55ebd360dadf586d121867cc6c68927cc27", "log": "A cut at http://issues.apache.org/bugzilla/show_bug.cgi?id=36925: Using ReflectionToStringBuilder and excluding secure fields.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.builder;\n \n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Set;\n \n  * </p>\n  * \n  * <p>\n- * This class uses reflection to determine the fields to append. Because these\n- * fields are usually private, the class uses\n- * {@link java.lang.reflect.AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[], boolean)}\n- * to change the visibility of the fields. This will fail under a security\n- * manager, unless the appropriate permissions are set up correctly.\n+ * This class uses reflection to determine the fields to append. Because these fields are usually private, the class\n+ * uses {@link java.lang.reflect.AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[], boolean)} to\n+ * change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions are\n+ * set up correctly.\n  * </p>\n  * \n  * <p>\n  * </ul>\n  * </p>\n  * <p>\n- * For example, this method does <i>not</i> include the <code>password</code>\n- * field in the returned <code>String</code>:\n+ * For example, this method does <i>not</i> include the <code>password</code> field in the returned\n+ * <code>String</code>:\n  * </p>\n  * \n  * <pre>\n  * \n  * \n  * <p>\n- * The exact format of the <code>toString</code> is determined by the\n- * {@link ToStringStyle} passed into the constructor.\n+ * The exact format of the <code>toString</code> is determined by the {@link ToStringStyle} passed into the\n+ * constructor.\n  * </p>\n  * \n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: ReflectionToStringBuilder.java,v 1.15 2003/12/02 19:11:58\n- *               ggregory Exp $\n+ * @version $Id$\n  */\n public class ReflectionToStringBuilder extends ToStringBuilder {\n     /**\n      * <p>\n-     * A registry of objects used by <code>reflectionToString</code> methods\n-     * to detect cyclical object references and avoid infinite loops.\n+     * A registry of objects used by <code>reflectionToString</code> methods to detect cyclical object references and\n+     * avoid infinite loops.\n      * </p>\n      */\n     private static ThreadLocal registry = new ThreadLocal() {\n \n     /**\n      * <p>\n-     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n-     * methods in the current thread.\n+     * Returns the registry of objects being traversed by the <code>reflectionToString</code> methods in the current\n+     * thread.\n      * </p>\n      * \n      * @return Set the registry of objects being traversed\n \n     /**\n      * <p>\n-     * Returns <code>true</code> if the registry contains the given object.\n-     * Used by the reflection methods to avoid infinite loops.\n+     * Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid\n+     * infinite loops.\n      * </p>\n      * \n      * @param value\n-     *                  The object to lookup in the registry.\n-     * @return boolean <code>true</code> if the registry contains the given\n-     *             object.\n+     *            The object to lookup in the registry.\n+     * @return boolean <code>true</code> if the registry contains the given object.\n      */\n     static boolean isRegistered(Object value) {\n         return getRegistry().contains(value);\n \n     /**\n      * <p>\n-     * Registers the given object. Used by the reflection methods to avoid\n-     * infinite loops.\n+     * Registers the given object. Used by the reflection methods to avoid infinite loops.\n      * </p>\n      * \n      * @param value\n-     *                  The object to register.\n+     *            The object to register.\n      */\n     static void register(Object value) {\n         getRegistry().add(value);\n      * </p>\n      * \n      * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to\n-     * private fields. This means that it will throw a security exception if\n-     * run under a security manager, if the permissions are not set up\n-     * correctly. It is also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * Transient members will be not be included, as they are likely derived.\n-     * Static fields will not be included. Superclass fields will be appended.\n-     * </p>\n-     * \n-     * @param object\n-     *                  the Object to be output\n+     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n+     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.\n+     * </p>\n+     * \n+     * <p>\n+     * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n+     * Superclass fields will be appended.\n+     * </p>\n+     * \n+     * @param object\n+     *            the Object to be output\n      * @return the String result\n      * @throws IllegalArgumentException\n-     *                  if the Object is <code>null</code>\n+     *             if the Object is <code>null</code>\n      */\n     public static String toString(Object object) {\n         return toString(object, null, false, false, null);\n      * </p>\n      * \n      * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to\n-     * private fields. This means that it will throw a security exception if\n-     * run under a security manager, if the permissions are not set up\n-     * correctly. It is also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * Transient members will be not be included, as they are likely derived.\n-     * Static fields will not be included. Superclass fields will be appended.\n-     * </p>\n-     * \n-     * <p>\n-     * If the style is <code>null</code>, the default <code>ToStringStyle</code>\n-     * is used.\n-     * </p>\n-     * \n-     * @param object\n-     *                  the Object to be output\n+     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n+     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.\n+     * </p>\n+     * \n+     * <p>\n+     * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n+     * Superclass fields will be appended.\n+     * </p>\n+     * \n+     * <p>\n+     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n+     * </p>\n+     * \n+     * @param object\n+     *            the Object to be output\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @return the String result\n      * @throws IllegalArgumentException\n-     *                  if the Object or <code>ToStringStyle</code> is <code>null</code>\n+     *             if the Object or <code>ToStringStyle</code> is <code>null</code>\n      */\n     public static String toString(Object object, ToStringStyle style) {\n         return toString(object, style, false, false, null);\n      * </p>\n      * \n      * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to\n-     * private fields. This means that it will throw a security exception if\n-     * run under a security manager, if the permissions are not set up\n-     * correctly. It is also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputTransients</code> is <code>true</code>,\n-     * transient members will be output, otherwise they are ignored, as they\n-     * are likely derived fields, and not part of the value of the Object.\n+     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n+     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.\n+     * </p>\n+     * \n+     * <p>\n+     * If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they\n+     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n      * </p>\n      * \n      * <p>\n      * </p>\n      * \n      * <p>\n-     * If the style is <code>null</code>, the default <code>ToStringStyle</code>\n-     * is used.\n-     * </p>\n-     * \n-     * @param object\n-     *                  the Object to be output\n+     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n+     * </p>\n+     * \n+     * @param object\n+     *            the Object to be output\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param outputTransients\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      * @return the String result\n      * @throws IllegalArgumentException\n-     *                  if the Object is <code>null</code>\n+     *             if the Object is <code>null</code>\n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients) {\n         return toString(object, style, outputTransients, false, null);\n      * </p>\n      * \n      * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to\n-     * private fields. This means that it will throw a security exception if\n-     * run under a security manager, if the permissions are not set up\n-     * correctly. It is also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputTransients</code> is <code>true</code>,\n-     * transient fields will be output, otherwise they are ignored, as they are\n-     * likely derived fields, and not part of the value of the Object.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputStatics</code> is <code>true</code>, static\n-     * fields will be output, otherwise they are ignored.\n+     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n+     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.\n+     * </p>\n+     * \n+     * <p>\n+     * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n+     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n+     * </p>\n+     * \n+     * <p>\n+     * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n+     * ignored.\n      * </p>\n      * \n      * <p>\n      * </p>\n      * \n      * <p>\n-     * If the style is <code>null</code>, the default <code>ToStringStyle</code>\n-     * is used.\n-     * </p>\n-     * \n-     * @param object\n-     *                  the Object to be output\n+     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n+     * </p>\n+     * \n+     * @param object\n+     *            the Object to be output\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param outputTransients\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      * @param outputStatics\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      * @return the String result\n      * @throws IllegalArgumentException\n-     *                  if the Object is <code>null</code>\n+     *             if the Object is <code>null</code>\n      * @since 2.1\n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics) {\n      * </p>\n      * \n      * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to\n-     * private fields. This means that it will throw a security exception if\n-     * run under a security manager, if the permissions are not set up\n-     * correctly. It is also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputTransients</code> is <code>true</code>,\n-     * transient fields will be output, otherwise they are ignored, as they are\n-     * likely derived fields, and not part of the value of the Object.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputStatics</code> is <code>true</code>, static\n-     * fields will be output, otherwise they are ignored.\n-     * </p>\n-     * \n-     * <p>\n-     * Superclass fields will be appended up to and including the specified\n-     * superclass. A null superclass is treated as <code>java.lang.Object</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * If the style is <code>null</code>, the default <code>ToStringStyle</code>\n-     * is used.\n-     * </p>\n-     * \n-     * @param object\n-     *                  the Object to be output\n+     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n+     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.\n+     * </p>\n+     * \n+     * <p>\n+     * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n+     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n+     * </p>\n+     * \n+     * <p>\n+     * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n+     * ignored.\n+     * </p>\n+     * \n+     * <p>\n+     * Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as\n+     * <code>java.lang.Object</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n+     * </p>\n+     * \n+     * @param object\n+     *            the Object to be output\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param outputTransients\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      * @param outputStatics\n-     *                  whether to include static fields\n+     *            whether to include static fields\n      * @param reflectUpToClass\n-     *                  the superclass to reflect up to (inclusive), may be <code>null</code>\n+     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n      * @return the String result\n      * @throws IllegalArgumentException\n-     *                  if the Object is <code>null</code>\n+     *             if the Object is <code>null</code>\n      * @since 2.1\n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics,\n      * </p>\n      * \n      * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to\n-     * private fields. This means that it will throw a security exception if\n-     * run under a security manager, if the permissions are not set up\n-     * correctly. It is also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputTransients</code> is <code>true</code>,\n-     * transient members will be output, otherwise they are ignored, as they\n-     * are likely derived fields, and not part of the value of the Object.\n-     * </p>\n-     * \n-     * <p>\n-     * Static fields will not be included. Superclass fields will be appended\n-     * up to and including the specified superclass. A null superclass is\n-     * treated as <code>java.lang.Object</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * If the style is <code>null</code>, the default <code>ToStringStyle</code>\n-     * is used.\n-     * </p>\n-     * \n-     * @deprecated Use\n-     *                     {@link #toString(Object,ToStringStyle,boolean,boolean,Class)}\n-     * \n-     * @param object\n-     *                  the Object to be output\n+     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n+     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.\n+     * </p>\n+     * \n+     * <p>\n+     * If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they\n+     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n+     * </p>\n+     * \n+     * <p>\n+     * Static fields will not be included. Superclass fields will be appended up to and including the specified\n+     * superclass. A null superclass is treated as <code>java.lang.Object</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n+     * </p>\n+     * \n+     * @deprecated Use {@link #toString(Object,ToStringStyle,boolean,boolean,Class)}\n+     * \n+     * @param object\n+     *            the Object to be output\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param outputTransients\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      * @param reflectUpToClass\n-     *                  the superclass to reflect up to (inclusive), may be <code>null</code>\n+     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n      * @return the String result\n      * @throws IllegalArgumentException\n-     *                  if the Object is <code>null</code>\n+     *             if the Object is <code>null</code>\n      * @since 2.0\n      */\n-    public static String toString(Object object, ToStringStyle style, boolean outputTransients, \n-            Class reflectUpToClass) {\n+    public static String toString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {\n         return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients).toString();\n     }\n \n     /**\n+     * Builds a String for a toString method excluding the given field name.\n+     * \n+     * @param object\n+     *            The object to \"toString\".\n+     * @param excludeFieldName\n+     *            The field name to exclude\n+     * @return The toString value.\n+     */\n+    public static String toStringExclude(Object object, final String excludeFieldName) {\n+        return toStringExclude(object, new String[]{excludeFieldName});\n+    }\n+\n+    /**\n+     * Builds a String for a toString method excluding the given field name.\n+     * \n+     * @param object\n+     *            The object to \"toString\".\n+     * @param excludeFieldNames\n+     *            The field names to exclude\n+     * @return The toString value.\n+     */\n+    public static String toStringExclude(Object object, String[] excludeFieldNames) {\n+        return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();\n+    }\n+\n+    /**\n      * <p>\n      * Unregisters the given object.\n      * </p>\n      * </p>\n      * \n      * @param value\n-     *                  The object to unregister.\n+     *            The object to unregister.\n      */\n     static void unregister(Object value) {\n         getRegistry().remove(value);\n     private boolean appendTransients = false;\n \n     /**\n+     * Which field names to exclude from output. Intended for fields like <code>\"password\"</code>.\n+     */\n+    private String[] excludeFieldNames;\n+\n+    /**\n      * The last super class to stop appending fields for.\n      */\n     private Class upToClass = null;\n      * </p>\n      * \n      * @param object\n-     *                  the Object to build a <code>toString</code> for, must not\n-     *                  be <code>null</code>\n-     * @throws IllegalArgumentException\n-     *                  if the Object passed in is <code>null</code>\n+     *            the Object to build a <code>toString</code> for, must not be <code>null</code>\n+     * @throws IllegalArgumentException\n+     *             if the Object passed in is <code>null</code>\n      */\n     public ReflectionToStringBuilder(Object object) {\n         super(object);\n      * </p>\n      * \n      * @param object\n-     *                  the Object to build a <code>toString</code> for, must not\n-     *                  be <code>null</code>\n+     *            the Object to build a <code>toString</code> for, must not be <code>null</code>\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n-     * @throws IllegalArgumentException\n-     *                  if the Object passed in is <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n+     * @throws IllegalArgumentException\n+     *             if the Object passed in is <code>null</code>\n      */\n     public ReflectionToStringBuilder(Object object, ToStringStyle style) {\n         super(object, style);\n      * </p>\n      * \n      * @param object\n-     *                  the Object to build a <code>toString</code> for\n+     *            the Object to build a <code>toString</code> for\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param buffer\n-     *                  the <code>StringBuffer</code> to populate, may be <code>null</code>\n-     * @throws IllegalArgumentException\n-     *                  if the Object passed in is <code>null</code>\n+     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n+     * @throws IllegalArgumentException\n+     *             if the Object passed in is <code>null</code>\n      */\n     public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n         super(object, style, buffer);\n     /**\n      * Constructor.\n      * \n-     * @deprecated Use\n-     *                     {@link #ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer,Class,boolean,boolean)}.\n-     * \n-     * @param object\n-     *                  the Object to build a <code>toString</code> for\n+     * @deprecated Use {@link #ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer,Class,boolean,boolean)}.\n+     * \n+     * @param object\n+     *            the Object to build a <code>toString</code> for\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param buffer\n-     *                  the <code>StringBuffer</code> to populate, may be <code>null</code>\n+     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n      * @param reflectUpToClass\n-     *                  the superclass to reflect up to (inclusive), may be <code>null</code>\n+     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n      * @param outputTransients\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      */\n     public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class reflectUpToClass,\n             boolean outputTransients) {\n      * Constructor.\n      * \n      * @param object\n-     *                  the Object to build a <code>toString</code> for\n+     *            the Object to build a <code>toString</code> for\n      * @param style\n-     *                  the style of the <code>toString</code> to create, may be\n-     *                  <code>null</code>\n+     *            the style of the <code>toString</code> to create, may be <code>null</code>\n      * @param buffer\n-     *                  the <code>StringBuffer</code> to populate, may be <code>null</code>\n+     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n      * @param reflectUpToClass\n-     *                  the superclass to reflect up to (inclusive), may be <code>null</code>\n+     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n      * @param outputTransients\n-     *                  whether to include transient fields\n+     *            whether to include transient fields\n      * @param outputStatics\n-     *                  whether to include static fields\n+     *            whether to include static fields\n      * @since 2.1\n      */\n     public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class reflectUpToClass,\n     /**\n      * Returns whether or not to append the given <code>Field</code>.\n      * <ul>\n-     * <li>Transient fields are appended only if {@link #isAppendTransients()}\n-     * returns <code>true</code>.\n-     * <li>Static fields are appended only if {@link #isAppendStatics()}\n-     * returns <code>true</code>.\n+     * <li>Transient fields are appended only if {@link #isAppendTransients()} returns <code>true</code>.\n+     * <li>Static fields are appended only if {@link #isAppendStatics()} returns <code>true</code>.\n      * <li>Inner class fields are not appened.</li>\n      * </ul>\n      * \n      * @param field\n-     *                  The Field to test.\n+     *            The Field to test.\n      * @return Whether or not to append the given <code>Field</code>.\n      */\n     protected boolean accept(Field field) {\n             return false;\n         }\n         if (Modifier.isTransient(field.getModifiers()) && !this.isAppendTransients()) {\n-            // transients.\n+            // Reject transient fields.\n             return false;\n         }\n         if (Modifier.isStatic(field.getModifiers()) && !this.isAppendStatics()) {\n-            // transients.\n+            // Rject static fields.\n             return false;\n         }\n+        if (this.getExcludeFieldNames() != null\n+            && Arrays.binarySearch(this.getExcludeFieldNames(), field.getName()) >= 0) {\n+            // Reject fields from the getExcludeFieldNames list.\n+            return false;\n+        }\n         return true;\n     }\n \n     /**\n      * <p>\n-     * Appends the fields and values defined by the given object of the given\n-     * Class.\n-     * </p>\n-     * \n-     * <p>\n-     * If a cycle is detected as an object is &quot;toString()'ed&quot;, such\n-     * an object is rendered as if <code>Object.toString()</code> had been\n-     * called and not implemented by the object.\n+     * Appends the fields and values defined by the given object of the given Class.\n+     * </p>\n+     * \n+     * <p>\n+     * If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if\n+     * <code>Object.toString()</code> had been called and not implemented by the object.\n      * </p>\n      * \n      * @param clazz\n-     *                  The class of object parameter\n+     *            The class of object parameter\n      */\n     protected void appendFieldsIn(Class clazz) {\n         if (isRegistered(this.getObject())) {\n                             this.appendAsObjectToString(fieldValue);\n                             this.getStyle().appendFieldEnd(this.getStringBuffer(), fieldName);\n                             // The recursion out of\n-                            //    builder.append(fieldName, fieldValue);\n+                            // builder.append(fieldName, fieldValue);\n                             // below will append the field\n                             // end marker.\n                         } else {\n                             }\n                         }\n                     } catch (IllegalAccessException ex) {\n-                        //this can't happen. Would get a Security exception\n+                        // this can't happen. Would get a Security exception\n                         // instead\n-                        //throw a runtime exception in case the impossible\n+                        // throw a runtime exception in case the impossible\n                         // happens.\n                         throw new InternalError(\"Unexpected IllegalAccessException: \" + ex.getMessage());\n                     }\n     }\n \n     /**\n+     * @return Returns the excludeFieldNames.\n+     */\n+    public String[] getExcludeFieldNames() {\n+        return this.excludeFieldNames;\n+    }\n+\n+    /**\n      * <p>\n      * Gets the last super class to stop appending fields for.\n      * </p>\n      * </p>\n      * \n      * @param field\n-     *                  The Field to query.\n+     *            The Field to query.\n      * @return The Object from the given Field.\n      * \n      * @throws IllegalArgumentException\n-     *                  see {@link java.lang.reflect.Field#get(Object)}\n+     *             see {@link java.lang.reflect.Field#get(Object)}\n      * @throws IllegalAccessException\n-     *                  see {@link java.lang.reflect.Field#get(Object)}\n+     *             see {@link java.lang.reflect.Field#get(Object)}\n      * \n      * @see java.lang.reflect.Field#get(Object)\n      */\n      * </p>\n      * \n      * @param array\n-     *                  the array to add to the <code>toString</code>\n+     *            the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder reflectionAppendArray(Object array) {\n \n     /**\n      * <p>\n-     * Registers this builder's source object to avoid infinite loops when\n-     * processing circular object references.\n+     * Registers this builder's source object to avoid infinite loops when processing circular object references.\n      * </p>\n      */\n     void registerObject() {\n      * </p>\n      * \n      * @param appendStatics\n-     *                  Whether or not to append static fields.\n+     *            Whether or not to append static fields.\n      * @since 2.1\n      */\n     public void setAppendStatics(boolean appendStatics) {\n      * </p>\n      * \n      * @param appendTransients\n-     *                  Whether or not to append transient fields.\n+     *            Whether or not to append transient fields.\n      */\n     public void setAppendTransients(boolean appendTransients) {\n         this.appendTransients = appendTransients;\n     }\n \n     /**\n+     * Sets the field names to exclude.\n+     * \n+     * @param excludeFieldNamesParam\n+     *            The excludeFieldNames to set.\n+     * @return <code>this</code>\n+     */\n+    public ReflectionToStringBuilder setExcludeFieldNames(String[] excludeFieldNamesParam) {\n+        if (excludeFieldNamesParam == null) {\n+            this.excludeFieldNames = null;\n+        }\n+        this.excludeFieldNames = (String[]) excludeFieldNamesParam.clone();\n+        Arrays.sort(this.excludeFieldNames);\n+        return this;\n+    }\n+\n+    /**\n      * <p>\n      * Sets the last super class to stop appending fields for.\n      * </p>\n      * \n      * @param clazz\n-     *                  The last super class to stop appending fields for.\n+     *            The last super class to stop appending fields for.\n      */\n     public void setUpToClass(Class clazz) {\n         this.upToClass = clazz;\n \n     /**\n      * <p>\n-     * Unregisters this builder's source object to avoid infinite loops when\n-     * processing circular object references.\n+     * Unregisters this builder's source object to avoid infinite loops when processing circular object references.\n      * </p>\n      */\n     void unregisterObject() {\n--- a/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n+++ b/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang-Builder Tests\");\n-        suite.addTest(CompareToBuilderTest.suite());\n-        suite.addTest(EqualsBuilderTest.suite());\n-        suite.addTest(HashCodeBuilderTest.suite());\n-        suite.addTest(HashCodeBuilderAndEqualsBuilderTest.suite());\n-        suite.addTest(ToStringBuilderTest.suite());\n-        suite.addTest(DefaultToStringStyleTest.suite());\n-        suite.addTest(NoFieldNamesToStringStyleTest.suite());\n-        suite.addTest(MultiLineToStringStyleTest.suite());\n-        suite.addTest(SimpleToStringStyleTest.suite());\n-        suite.addTest(StandardToStringStyleTest.suite());\n-        suite.addTest(ToStringStyleTest.suite());\n+        suite.addTestSuite(CompareToBuilderTest.class);\n+        suite.addTestSuite(EqualsBuilderTest.class);\n+        suite.addTestSuite(HashCodeBuilderTest.class);\n+        suite.addTestSuite(HashCodeBuilderAndEqualsBuilderTest.class);\n+        suite.addTestSuite(ToStringBuilderTest.class);\n+        suite.addTestSuite(DefaultToStringStyleTest.class);\n+        suite.addTestSuite(NoFieldNamesToStringStyleTest.class);\n+        suite.addTestSuite(MultiLineToStringStyleTest.class);\n+        suite.addTestSuite(ReflectionToStringBuilderExcludeTest.class);\n+        suite.addTestSuite(SimpleToStringStyleTest.class);\n+        suite.addTestSuite(StandardToStringStyleTest.class);\n+        suite.addTestSuite(ToStringStyleTest.class);\n         return suite;\n     }\n }", "timestamp": 1128470711, "metainfo": ""}