{"sha": "cf07dfe8109eb8d81fc4ad5e3b7dc008546fbcc0", "log": "Minor Javadoc (style.)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Get the time gap as a string.</p>\n+     * <p>Formats the time gap as a string.</p>\n      * \n      * <p>The format used is ISO8601-like:\n      * <i>H</i>:<i>m</i>:<i>s</i>.<i>S</i>.</p>\n     }\n \n     /**\n-     * <p>Get the time gap as a string.</p>\n+     * <p>Formats the time gap as a string.</p>\n      * \n      * <p>The format used is the ISO8601 period format.</p>\n      * \n     }\n \n     /**\n-     * <p>Get the time gap as a string, using the specified format, and padding with zeros and \n+     * <p>Formats the time gap as a string, using the specified format, and padding with zeros and \n      * using the default timezone.</p>\n      * \n      * <p>This method formats durations using the days and lower fields of the\n     }\n \n     /**\n-     * <p>Get the time gap as a string, using the specified format.\n+     * <p>Formats the time gap as a string, using the specified format.\n      * Padding the left hand side of numbers with zeroes is optional and \n      * the timezone may be specified.</p>\n      * \n     }\n \n     /**\n-     * <p>Format an elapsed time into a plurialization correct string.</p>\n+     * <p>Formats an elapsed time into a plurialization correct string.</p>\n      * \n      * <p>This method formats durations using the days and lower fields of the\n      * format pattern. Months and larger are not used.</p>\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Get the time gap as a string.</p>\n+     * <p>Formats the time gap as a string.</p>\n      * \n      * <p>The format used is the ISO8601 period format.</p>\n      * \n     }\n \n     /**\n-     * <p>Get the time gap as a string, using the specified format.\n+     * <p>Formats the time gap as a string, using the specified format.\n      * Padding the left hand side of numbers with zeroes is optional.\n      * \n      * @param startMillis  the start of the duration\n     }\n \n     /**\n-     * <p>Get the time gap as a string, using the specified format.\n+     * <p>Formats the time gap as a string, using the specified format.\n      * Padding the left hand side of numbers with zeroes is optional and \n      * the timezone may be specified. \n      * \n     static final Object S = \"S\";\n     \n     /**\n-     * Parse a classic date format string into Tokens\n+     * Parses a classic date format string into Tokens\n      *\n      * @param format to parse\n      * @return Token[] of tokens\n         private int count;\n \n         /**\n-         * Wrap a token around a value. A value would be something like a 'Y'.\n+         * Wraps a token around a value. A value would be something like a 'Y'.\n          *\n          * @param value to wrap\n          */\n         }\n \n         /**\n-         * Wrap a token around a repeated number of a value, for example it would \n+         * Wraps a token around a repeated number of a value, for example it would \n          * store 'yyyy' as a value for y and a count of 4.\n          *\n          * @param value to wrap\n         }\n \n         /**\n-         * Add another one of the value\n+         * Adds another one of the value\n          */\n         void increment() { \n             count++;\n         }\n \n         /**\n-         * Get the current number of values represented\n+         * Gets the current number of values represented\n          *\n          * @return int number of values represented\n          */\n         }\n \n         /**\n-         * Get the particular value this token represents.\n+         * Gets the particular value this token represents.\n          * \n          * @return Object value\n          */\n         }\n \n         /**\n-         * Represent this token as a String.\n+         * Represents this token as a String.\n          *\n          * @return String representation of the token\n          */", "timestamp": 1130528987, "metainfo": ""}