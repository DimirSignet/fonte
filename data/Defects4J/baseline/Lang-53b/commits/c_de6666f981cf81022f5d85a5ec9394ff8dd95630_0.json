{"sha": "de6666f981cf81022f5d85a5ec9394ff8dd95630", "log": "Added an ISO 8601 formatter for the date time extended format used in durations, with XML Schema durations particularly in mind. Note that this is still a package level class only.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  * @author Stephen Colebourne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DurationFormatUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n+ * @version $Id: DurationFormatUtils.java,v 1.4 2003/07/18 17:04:31 ggregory Exp $\n  */\n class DurationFormatUtils {\n     // TODO: Make class public once methods can fully select which fields to output\n \n     /**\n-     * <p>DurationFormatUtils instances should NOT be constructed in standard programming.</p>\n-     *\n-     * <p>This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.</p>\n-     */\n-    public DurationFormatUtils() {\n+     * <p>Pattern used with <code>FastDateFormat</code> and <code>SimpleDateFormat </code> for the ISO8601 \n+     * date time extended format used in durations.</p>\n+     * \n+     * @see org.apache.commons.lang.time.FastDateFormat\n+     * @see java.text.SimpleDateFormat\n+     */\n+    public static final String ISO_EXTENDED_FORMAT_PATTERN = \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'\";\n+\n+    /**\n+     * <p>ISO8601 formatter for the date time extended format used in durations, \n+     * with XML Schema durations particularly in mind.</p>\n+     * \n+     * <p>This format represents the Gregorian year, month, day, hour, minute, and second components defined \n+     * in  5.5.3.2 of ISO 8601, respectively. These components are ordered in their significance by their order \n+     * of appearance i.e. as year, month, day, hour, minute, and second.</p>\n+     * \n+     * <p>The ISO8601 extended format P<i>n</i>Y<i>n</i>M<i>n</i>DT<i>n</i>H<i>n</i>M<i>n</i>S, where <i>n</i>Y \n+     * represents the number of years, <i>n</i>M the number of months, <i>n</i>D the number of days, \n+     * 'T' is the date/time separator, <i>n</i>H the number of hours, <i>n</i>M the number of minutes and \n+     * <i>n</i>S the number of seconds. The number of seconds can include decimal digits to arbitrary precision.</p>\n+     * \n+     * @see #ISO_EXTENDED_FORMAT_PATTERN\n+     * @see <a href=\"http://www.w3.org/TR/xmlschema-2/#duration\">http://www.w3.org/TR/xmlschema-2/#duration</a>\n+     */\n+    public static final FastDateFormat ISO_EXTENDED_FORMAT =\n+        FastDateFormat.getInstance(ISO_EXTENDED_FORMAT_PATTERN);\n+\n+    /**\n+     * <p>Get the time gap as a string.</p>\n+     * \n+     * <p>The format used is ISO8601-like:\n+     * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n+     * \n+     * @param millis  the duration to format\n+     * @return the time as a String\n+     */\n+    public static String formatISO(long millis) {\n+        int hours, minutes, seconds, milliseconds;\n+        hours = (int) (millis / DateUtils.MILLIS_IN_HOUR);\n+        millis = millis - (hours * DateUtils.MILLIS_IN_HOUR);\n+        minutes = (int) (millis / DateUtils.MILLIS_IN_MINUTE);\n+        millis = millis - (minutes * DateUtils.MILLIS_IN_MINUTE);\n+        seconds = (int) (millis / DateUtils.MILLIS_IN_SECOND);\n+        millis = millis - (seconds * DateUtils.MILLIS_IN_SECOND);\n+        milliseconds = (int) millis;\n+\n+        StringBuffer buf = new StringBuffer(32);\n+        buf.append(hours);\n+        buf.append(':');\n+        buf.append((char) (minutes / 10 + '0'));\n+        buf.append((char) (minutes % 10 + '0'));\n+        buf.append(':');\n+        buf.append((char) (seconds / 10 + '0'));\n+        buf.append((char) (seconds % 10 + '0'));\n+        buf.append('.');\n+        if (milliseconds < 10) {\n+            buf.append('0').append('0');\n+        } else if (milliseconds < 100) {\n+            buf.append('0');\n+        }\n+        buf.append(milliseconds);\n+        return buf.toString();\n     }\n \n     /**\n      * seconds and has the following behavior.</p>\n      *\n      * <ul>\n-     *  <li>minutes are not displayed when <code>0</code>. (ie:\n-     *   &quot;45 seconds&quot;)</li>\n+     *  <li>minutes are not displayed when <code>0</code> (ie:\n+     *   &quot;45 seconds&quot;)</li>.\n      *  <li>seconds are always displayed in plural form (ie\n      *   &quot;0 seconds&quot; or &quot;10 seconds&quot;) except\n      *   for <code>1</code> (ie &quot;1 second&quot;)</li>\n      * @param millis  the elapsed time to report in milliseconds\n      * @return the formatted text in minutes/seconds\n      */\n-    public static String formatWords(long millis, boolean supressLeadingZeroElements, boolean supressTrailingZeroElements) {\n+    public static String formatWords(\n+        long millis,\n+        boolean supressLeadingZeroElements,\n+        boolean supressTrailingZeroElements) {\n         long[] values = new long[4];\n         values[0] = millis / DateUtils.MILLIS_IN_DAY;\n         values[1] = (millis / DateUtils.MILLIS_IN_HOUR) % 24;\n         values[2] = (millis / DateUtils.MILLIS_IN_MINUTE) % 60;\n         values[3] = (millis / DateUtils.MILLIS_IN_SECOND) % 60;\n-        String[] fieldsOne = {\" day \", \" hour \", \" minute \", \" second\"};\n-        String[] fieldsPlural = {\" days \", \" hours \", \" minutes \", \" seconds\"};\n-        \n+        String[] fieldsOne = { \" day \", \" hour \", \" minute \", \" second\" };\n+        String[] fieldsPlural = { \" days \", \" hours \", \" minutes \", \" seconds\" };\n+\n         StringBuffer buf = new StringBuffer(64);\n         boolean valueOutput = false;\n-        \n+\n         for (int i = 0; i < 4; i++) {\n             long value = values[i];\n             if (value == 0) {\n                 buf.append(value).append(fieldsPlural[i]);\n             }\n         }\n-        \n+\n         return buf.toString().trim();\n     }\n \n     /**\n-     * <p>Get the time gap as a string.</p>\n-     * \n-     * <p>The format used is ISO8601-like.\n-     * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n-     * \n-     * @param millis  the duration to format\n-     * @return the time as a String\n-     */\n-    public static String formatISO(long millis) {\n-        int hours, minutes, seconds, milliseconds;\n-        hours = (int) (millis / DateUtils.MILLIS_IN_HOUR);\n-        millis = millis - (hours * DateUtils.MILLIS_IN_HOUR);\n-        minutes = (int) (millis / DateUtils.MILLIS_IN_MINUTE);\n-        millis = millis - (minutes * DateUtils.MILLIS_IN_MINUTE);\n-        seconds = (int) (millis / DateUtils.MILLIS_IN_SECOND);\n-        millis = millis - (seconds * DateUtils.MILLIS_IN_SECOND);\n-        milliseconds = (int) millis;\n-\n-        StringBuffer buf = new StringBuffer(32);\n-        buf.append(hours);\n-        buf.append(':');\n-        buf.append((char)(minutes / 10 + '0'));\n-        buf.append((char)(minutes % 10 + '0'));\n-        buf.append(':');\n-        buf.append((char)(seconds / 10 + '0'));\n-        buf.append((char)(seconds % 10 + '0'));\n-        buf.append('.');\n-        if (milliseconds < 10) {\n-            buf.append('0').append('0');\n-        } else if (milliseconds < 100) {\n-            buf.append('0');\n-        }\n-        buf.append(milliseconds);\n-        return buf.toString();\n+     * <p>DurationFormatUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public DurationFormatUtils() {\n     }\n \n }", "timestamp": 1058547871, "metainfo": ""}