{"sha": "dd2053e555efed3b1d07bc2a2c6a4a1ce60e4819", "log": "Rework Enum JDK1.2 solution to avoid needing to store Class in Serialized object. Added more tests, improved performance bug 19030   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * <h4>Functional Enums</h4>\n  *\n  * <p>The enums can have functionality by defining subclasses and\n- * changing the <code>super()</code> call:</p>\n+ * overriding the <code>getEnumClass()</code> method:</p>\n  * \n  * <pre>\n  *   public static final OperationEnum PLUS = new PlusOperation();\n  *   }\n  *\n  *   private OperationEnum(String color) {\n- *     super(color, OperationEnum.class);   // NOTE: super() changed!\n- *   }\n- * \n+ *     super(color);\n+ *   }\n+ * \n+ *   public final Class getEnumClass() {     // NOTE: new method!\n+ *     return OperationEnum.class;\n+ *   }\n+ *\n  *   public abstract double eval(double a, double b);\n  * \n  *   public static OperationEnum getEnum(String name) {\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.18 2003/08/04 23:52:27 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.19 2003/08/05 00:24:02 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n      * The string representation of the Enum.\n      */\n     private final String iName;\n-    /**\n-     * The Enum class.\n-     */\n-    private final Class iEnumClass;\n     /**\n      * The hashcode representation of the Enum.\n      */\n          */\n         final Map map = new HashMap();\n         /**\n+         * Map of Enum name to Enum.\n+         */\n+        final Map unmodifiableMap = Collections.unmodifiableMap(map);\n+        /**\n          * List of Enums in source code order.\n          */\n         final List list = new ArrayList(25);\n+        /**\n+         * Map of Enum name to Enum.\n+         */\n+        final List unmodifiableList = Collections.unmodifiableList(list);\n \n         /**\n          * <p>Restrictive constructor.</p>\n      *  must not be empty or <code>null</code>\n      * @throws IllegalArgumentException if the name is <code>null</code>\n      *  or an empty string\n+     * @throws IllegalArgumentException if the getEnumClass() method returns\n+     *  a null or invalid Class\n      */\n     protected Enum(String name) {\n         super();\n-        init(name, getClass());\n+        init(name);\n         iName = name;\n-        iEnumClass = getClass();\n-        iHashCode = 7 + iEnumClass.hashCode() + 3 * name.hashCode();\n+        iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();\n         // cannot create toString here as subclasses may want to include other data\n     }\n \n     /**\n-     * <p>Constructor to add a new named item to the enumeration.</p>\n-     * \n-     * <p>This constructor is used when a subclass wants to allow further\n-     * subclasses to add values to the enumeration. The class specifies\n-     * which class they are all to be tied to.</p>\n-     *\n-     * @param name  the name of the enum object,\n-     *  must not be empty or <code>null</code>\n-     * @param enumClass  the enum class,\n-     *  must not be null and must be this class or a superclass\n-     * @throws IllegalArgumentException if the name is <code>null</code>\n-     *  or an empty string\n-     * @throws IllegalArgumentException if the enumClass is <code>null</code>\n-     *  or invalid\n-     */\n-    protected Enum(String name, Class enumClass) {\n-        super();\n-        init(name, enumClass);\n-        iName = name;\n-        iEnumClass = enumClass;\n-        iHashCode = 7 + enumClass.hashCode() + 3 * name.hashCode();\n-        // cannot create toString here as subclasses may want to include other data\n-    }\n-\n-    /**\n      * Initializes the enumeration.\n      * \n      * @param name  the enum name\n-     * @param enumClass  the enum class\n-     * @throws IllegalArgumentException if the name is null or empty\n+     * @throws IllegalArgumentException if the name is null or empty or duplicate\n      * @throws IllegalArgumentException if the enumClass is null or invalid\n      */\n-    private void init(String name, Class enumClass) {\n+    private void init(String name) {\n         if (StringUtils.isEmpty(name)) {\n             throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n         }\n+        \n+        Class enumClass = getEnumClass();\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"getEnumClass() must not be null\");\n+        }\n+        Class cls = getClass();\n+        boolean ok = false;\n+        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n+            if (cls == enumClass) {\n+                ok = true;\n+                break;\n+            }\n+            cls = cls.getSuperclass();\n+        }\n+        if (ok == false) {\n+            throw new IllegalArgumentException(\"getEnumClass() must return a superclass of this class\");\n+        }\n+        \n+        // create entry\n         Entry entry = (Entry) cEnumClasses.get(enumClass);\n         if (entry == null) {\n             entry = createEntry(enumClass);\n      * @return the resolved object\n      */\n     protected Object readResolve() {\n-        Entry entry = (Entry) cEnumClasses.get(iEnumClass);\n+        Entry entry = (Entry) cEnumClasses.get(getEnumClass());\n         if (entry == null) {\n             return null;\n         }\n         if (entry == null) {\n             return EMPTY_MAP;\n         }\n-        return Collections.unmodifiableMap(entry.map);\n+        return entry.unmodifiableMap;\n     }\n \n     /**\n         if (entry == null) {\n             return Collections.EMPTY_LIST;\n         }\n-        return Collections.unmodifiableList(entry.list);\n+        return entry.unmodifiableList;\n     }\n \n     /**\n      * <p>Retrieves the Class of this Enum item, set in the constructor.</p>\n      * \n      * <p>This is normally the same as <code>getClass()</code>, but for\n-     * advanced Enums may be different.</p>\n-     * \n-     * @return the <code>String</code> name of this Enum item\n-     */\n-    public final Class getEnumClass() {\n-        return iEnumClass;\n+     * advanced Enums may be different. If overridden, it must return a\n+     * constant value.</p>\n+     * \n+     * @return the <code>Class</code> of the enum\n+     */\n+    public Class getEnumClass() {\n+        return getClass();\n     }\n \n     /**\n         } else if (other.getClass() == this.getClass()) {\n             // shouldn't happen, but...\n             return iName.equals(((Enum) other).iName);\n-        } else if (((Enum) other).iEnumClass.getName().equals(iEnumClass.getName())) {\n+        } else if (((Enum) other).getEnumClass().getName().equals(getEnumClass().getName())) {\n             // different classloaders\n             try {\n                 // try to avoid reflection\n      */\n     public String toString() {\n         if (iToString == null) {\n-            String shortName = ClassUtils.getShortClassName(iEnumClass);\n+            String shortName = ClassUtils.getShortClassName(getEnumClass());\n             iToString = shortName + \"[\" + getName() + \"]\";\n         }\n         return iToString;\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.11 2003/08/04 23:52:27 scolebourne Exp $\n+ * @version $Id: ValuedEnum.java,v 1.12 2003/08/05 00:24:02 scolebourne Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     \n      */\n     protected ValuedEnum(String name, int value) {\n         super(name);\n-        iValue = value;\n-    }\n-\n-    /**\n-     * Constructor for enum item.\n-     *\n-     * @param name  the name of enum item\n-     * @param enumClass  the enum class\n-     * @param value  the value of enum item\n-     */\n-    protected ValuedEnum(String name, Class enumClass, int value) {\n-        super(name, enumClass);\n         iValue = value;\n     }\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, null class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken1OperationEnum.java,v 1.1 2003/08/05 00:24:02 scolebourne Exp $\n+ */\n+public abstract class Broken1OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken1OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken1OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken1OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken1OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken1OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return null;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken1OperationEnum getEnum(String name) {\n+        return (Broken1OperationEnum) getEnum(Broken1OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken1OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken1OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken1OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() not superclass.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken2OperationEnum.java,v 1.1 2003/08/05 00:24:02 scolebourne Exp $\n+ */\n+public abstract class Broken2OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken2OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken2OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken2OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken2OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken2OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return ColorEnum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken2OperationEnum getEnum(String name) {\n+        return (Broken2OperationEnum) getEnum(Broken2OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken2OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken2OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken2OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() is Enum.class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken3OperationEnum.java,v 1.1 2003/08/05 00:24:02 scolebourne Exp $\n+ */\n+public abstract class Broken3OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken3OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken3OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken3OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken3OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken3OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return Enum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken3OperationEnum getEnum(String name) {\n+        return (Broken3OperationEnum) getEnum(Broken3OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken3OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken3OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken3OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() is ValuedEnum.class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken4OperationEnum.java,v 1.1 2003/08/05 00:24:02 scolebourne Exp $\n+ */\n+public abstract class Broken4OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken4OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken4OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken4OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken4OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken4OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return ValuedEnum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken4OperationEnum getEnum(String name) {\n+        return (Broken4OperationEnum) getEnum(Broken4OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken4OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken4OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken4OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() is not an Enum class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken5OperationEnum.java,v 1.1 2003/08/05 00:24:02 scolebourne Exp $\n+ */\n+public abstract class Broken5OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken5OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken5OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken5OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken5OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken5OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return String.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken5OperationEnum getEnum(String name) {\n+        return (Broken5OperationEnum) getEnum(Broken5OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken5OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken5OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken5OperationEnum.class);\n+    }\n+}\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: EnumTest.java,v 1.9 2003/07/31 22:36:39 scolebourne Exp $\n+ * @version $Id: EnumTest.java,v 1.10 2003/08/05 00:24:02 scolebourne Exp $\n  */\n \n public final class EnumTest extends TestCase {\n     public void testBroken3() {\n         try {\n             Broken3Enum.RED.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken1Operation() {\n+        try {\n+            Broken1OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken2Operation() {\n+        try {\n+            Broken2OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken3Operation() {\n+        try {\n+            Broken3OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken4Operation() {\n+        try {\n+            Broken4OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken5Operation() {\n+        try {\n+            Broken5OperationEnum.PLUS.getName();\n             fail();\n         } catch (ExceptionInInitializerError ex) {\n             assertTrue(ex.getException() instanceof IllegalArgumentException);\n--- a/src/test/org/apache/commons/lang/enum/OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/OperationEnum.java\n  * Operator enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: OperationEnum.java,v 1.4 2003/08/04 23:52:27 scolebourne Exp $\n+ * @version $Id: OperationEnum.java,v 1.5 2003/08/05 00:24:02 scolebourne Exp $\n  */\n public abstract class OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n     }\n \n     private OperationEnum(String name) {\n-        super(name, OperationEnum.class);\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return OperationEnum.class;\n     }\n \n     public abstract int eval(int a, int b);", "timestamp": 1060043042, "metainfo": ""}