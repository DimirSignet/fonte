{"sha": "53657a62d3c95babc2a4e2b7c2e86975a15c949a", "log": "Applying max/min for Comparables as supplied by David Karlsen in LANG-291  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @author Mario Winterer\n+ * @author <a href=\"mailto:david@davidkarlsen.com\">David J. M. Karlsen</a>\n  * @since 1.0\n  * @version $Id$\n  */\n         }\n     }\n     \n+    \n+    /**\n+     * Null safe comparison of Comparables.\n+     * \n+     * @param c1\n+     * @param c2\n+     * @return\n+     *  <ul>\n+     *   <li>If both objects are non-null and unequal, the lesser object.\n+     *   <li>If both objects are non-null and equal, c1.\n+     *   <li>If one of the comparables is null, the non-null object.\n+     *   <li>If both the comparables are null, null is returned.\n+     *  </ul>\n+     */\n+    public static Object min( Comparable c1, Comparable c2 ) {\n+        if ( c1 != null && c2 != null ) {\n+            return c1.compareTo( c2 ) < 1 ? c1 : c2;\n+        }\n+        else {\n+            return c1 != null ? c1 : c2;\n+        }                              \n+    }\n+    \n+    /**\n+     * Null safe comparison of Comparables.\n+     * \n+     * @param c1\n+     * @param c2\n+     * @return\n+     *  <ul>\n+     *   <li>If both objects are non-null and unequal, the greater object.\n+     *   <li>If both objects are non-null and equal, c1.\n+     *   <li>If one of the comparables is null, the non-null object.\n+     *   <li>If both the comparables are null, null is returned.\n+     *  </ul>\n+     */\n+    public static Object max( Comparable c1, Comparable c2 ) {\n+        if ( c1 != null && c2 != null ) {\n+            return c1.compareTo( c2 ) >= 0 ? c1 : c2;\n+        }\n+        else {\n+            return c1 != null ? c1 : c2;\n+        }                              \n+    }\n+    \n+    \n+    \n }\n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.Date;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);\n         assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));\n     }\n-\n+    \n+    \n+    \n+    public void testMax() {\n+        Calendar calendar = Calendar.getInstance();\n+        Comparable nonNullComparable1 = calendar.getTime();\n+        Comparable nonNullComparable2 = calendar.getTime();\n+        \n+        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n+        Comparable minComparable = calendar.getTime();\n+        \n+        assertNotSame( nonNullComparable1, nonNullComparable2 );\n+        \n+        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );\n+    }\n+    \n+    public void testMin() {\n+        Calendar calendar = Calendar.getInstance();\n+        Comparable nonNullComparable1 = calendar.getTime();\n+        Comparable nonNullComparable2 = calendar.getTime();\n+        \n+        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n+        Comparable minComparable = calendar.getTime();\n+        \n+        assertNotSame( nonNullComparable1, nonNullComparable2 );\n+        \n+        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );\n+        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );\n+        assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );\n+        assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );\n+    }\n }", "timestamp": 1163564082, "metainfo": ""}