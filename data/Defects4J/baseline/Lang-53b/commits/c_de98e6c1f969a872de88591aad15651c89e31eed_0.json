{"sha": "de98e6c1f969a872de88591aad15651c89e31eed", "log": "Add support for java.awt.headless (Java 1.4.)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author Tetsuya Kaneuchi\n  * @author Rafal Krupinski\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.32 2004/02/18 22:59:49 ggregory Exp $\n+ * @version $Id: SystemUtils.java,v 1.33 2004/02/25 00:25:29 ggregory Exp $\n  */\n public class SystemUtils {\n \n      * @since 2.1\n      */\n     public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\");\n+\n+    /**\n+     * <p>\n+     * The <code>java.awt.headless</code> System Property.\n+     * The value of this property is the String <code>\"true\"</code> or <code>\"false\"</code>. \n+     * </p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or the property does not exist.</p>\n+     * \n+     * <p>\n+     * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)}\n+     * or {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value\n+     * will be out of sync with that System property.\n+     * </p>\n+     * \n+     * @see #isJavaAwtHeadless()\n+     * @since 2.1\n+     * @since Java 1.4\n+     */\n+    public static final String JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\");\n \n     /**\n      * <p>The <code>java.awt.printerjob</code> System Property.</p>\n     /**\n      * <p>Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).</p>\n      *\n-     * <p>The field will <code>false</code> false if {@link #JAVA_VERSION} is\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n      * <code>null</code>.</p>\n      */\n     public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n             );\n             return null;\n         }\n-    }    \n+    }\n     \n     /**\n      * <p>Is the Java version at least the requested version.</p>\n     public static boolean isJavaVersionAtLeast(int requiredVersion) {\n         return (JAVA_VERSION_INT >= requiredVersion);\n     }\n-    \n+\n+    /**\n+     * Returns whether the {@link #JAVA_AWT_HEADLESS} value is <code>true</code>.\n+     *  \n+     * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>\"true\"</code>,\n+     * <code>false</code> otherwise.\n+     * \n+     * @see #JAVA_AWT_HEADLESS\n+     * @since 2.1\n+     * @since Java 1.4\n+     */\n+    public static boolean isJavaAwtHeadless() {\n+        return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;\n+    }\n     /**\n      * <p>Gets the Java home directory as a <code>File</code>.</p>\n      * \n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang;\n \n import java.io.File;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n-\n import junit.framework.Assert;\n import junit.framework.Test;\n import junit.framework.TestCase;\n  * Unit tests {@link org.apache.commons.lang.SystemUtils}.\n  * \n  * Only limited testing can be performed.\n- *\n+ * \n  * @author Stephen Colebourne\n  * @author Tetsuya Kaneuchi\n  * @author Gary D. Gregory\n- * @version $Id: SystemUtilsTest.java,v 1.9 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id: SystemUtilsTest.java,v 1.10 2004/02/25 00:25:29 ggregory Exp $\n  */\n public class SystemUtilsTest extends TestCase {\n-\n     public static void main(String[] args) {\n         TestRunner.run(suite());\n     }\n         suite.setName(\"SystemUtils Tests\");\n         return suite;\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     // COPIED FROM SystemUtils\n     //-----------------------------------------------------------------------\n     private String JAVA_VERSION;\n+\n     private String OS_NAME;\n+\n     private String OS_VERSION;\n \n     public SystemUtilsTest(String name) {\n     }\n \n     /**\n-     * <p>Get the Java version number as a <code>float</code>.</p>\n-     *\n-     * <p>Example output:</p>\n+     * <p>\n+     * Get the Java version number as a <code>float</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example output:\n+     * </p>\n      * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * <li><code>1.2f</code> for JDK 1.2\n+     * <li><code>1.31f</code> for JDK 1.3.1\n      * </ul>\n      * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * <p>\n+     * Patch releases are not reported. Zero is returned if JAVA_VERSION is <code>null</code>.\n+     * </p>\n      * \n      * @return the version, for example 1.31f for JDK 1.3.1\n      */\n         }\n         return Float.parseFloat(str);\n     }\n-    \n-    /**\n-     * <p>Get the Java version number as an <code>int</code>.</p>\n-     *\n-     * <p>Example output:</p>\n+\n+    /**\n+     * <p>\n+     * Get the Java version number as an <code>int</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * Example output:\n+     * </p>\n      * <ul>\n-     *  <li><code>120</code> for JDK 1.2\n-     *  <li><code>131</code> for JDK 1.3.1\n+     * <li><code>120</code> for JDK 1.2\n+     * <li><code>131</code> for JDK 1.3.1\n      * </ul>\n      * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * <p>\n+     * Patch releases are not reported. Zero is returned if JAVA_VERSION is <code>null</code>.\n+     * </p>\n      * \n      * @return the version, for example 131 for JDK 1.3.1\n      */\n         }\n         return Integer.parseInt(str);\n     }\n-    \n+\n     /**\n      * Decides if the java version matches.\n      * \n-     * @param versionPrefix  the prefix for the java version\n+     * @param versionPrefix\n+     *                  the prefix for the java version\n      * @return true if matches, or false if not or can't determine\n      */\n     private boolean getJavaVersionMatches(String versionPrefix) {\n             return false;\n         }\n         return JAVA_VERSION.startsWith(versionPrefix);\n-    }    \n+    }\n \n     /**\n      * Decides if the operating system matches.\n      * \n-     * @param osNamePrefix  the prefix for the os name\n+     * @param osNamePrefix\n+     *                  the prefix for the os name\n      * @return true if matches, or false if not or can't determine\n      */\n     private boolean getOSMatches(String osNamePrefix) {\n             return false;\n         }\n         return OS_NAME.startsWith(osNamePrefix);\n-    }    \n+    }\n \n     /**\n      * Decides if the operating system matches.\n      * \n-     * @param osNamePrefix  the prefix for the os name\n-     * @param osVersionPrefix  the prefix for the version\n+     * @param osNamePrefix\n+     *                  the prefix for the os name\n+     * @param osVersionPrefix\n+     *                  the prefix for the version\n      * @return true if matches, or false if not or can't determine\n      */\n     private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n             return false;\n         }\n         return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n-    }    \n+    }\n \n     protected void setUp() throws Exception {\n         super.setUp();\n         assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n     }\n-    \n+\n     /**\n      * Assums no security manager exists.\n      */\n     public void testJavaVersion() {\n         assertEquals(SystemUtils.JAVA_VERSION_FLOAT, SystemUtils.getJavaVersion(), 0f);\n     }\n-   \n+\n     public void testJavaVersionAsFloat() {\n         JAVA_VERSION = null;\n         assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.6.0\";\n         assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n     }\n-    \n+\n     public void testJavaVersionAsInt() {\n         JAVA_VERSION = null;\n         assertEquals(0, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.6.0\";\n         assertEquals(160, getJavaVersionAsInt());\n     }\n-    \n+\n     public void testJavaVersionAtLeastFloat() {\n         float version = SystemUtils.JAVA_VERSION_FLOAT;\n         assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n         version += 0.2f;\n         assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n     }\n-    \n+\n     public void testJavaVersionAtLeastInt() {\n         int version = SystemUtils.JAVA_VERSION_INT;\n         assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n         version += 20;\n         assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public void testJavaVersionMatches() {\n         JAVA_VERSION = null;\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n     }\n-    \n+\n     public void testOSMatches() {\n         OS_NAME = null;\n         assertEquals(false, getOSMatches(\"Windows\"));\n         OS_NAME = \"OS/2\";\n         assertEquals(false, getOSMatches(\"Windows\"));\n     }\n-    \n+\n     public void testOSMatches2() {\n         OS_NAME = null;\n         OS_VERSION = null;\n         OS_VERSION = \"4.0\";\n         assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n     }\n+\n+    public void testJavaAwtHeadless() {\n+        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);\n+        String expectedStringValue = System.getProperty(\"java.awt.headless\");\n+        String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\n+        assertNotNull(expectedStringValueWithDefault);\n+        if (atLeastJava14) {\n+            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();\n+            if (expectedStringValue != null) {\n+                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);\n+            }\n+            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());\n+        } else {\n+            assertNull(expectedStringValue);\n+            assertNull(SystemUtils.JAVA_AWT_HEADLESS);\n+            assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n+        }\n+        assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n+    }\n }", "timestamp": 1077668729, "metainfo": ""}