{"sha": "864b2f95a725373b1e4105d3dd129ae01c1625aa", "log": "Javadoc fixes bug 21758, from Pete Gieser   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * <code>equals()</code> and <code>hashCode()</code> are consistent can be\n  * difficult.</p>\n  *\n- * <p>Two Object that compare as equals must generate the same hash code.\n- * But two Objects with the same hash code do not have to be equal.</p>\n+ * <p>Two Objects that compare as equals must generate the same hash code,\n+ * but two Objects with the same hash code do not have to be equal.</p>\n  *\n  * <p>All relevant fields should be included in the calculation of equals.\n  * Derived fields may be ignored. In particular, any field used in\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.16 2003/07/20 15:49:58 scolebourne Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.17 2003/07/21 23:30:42 scolebourne Exp $\n  */\n public class EqualsBuilder {\n     /**\n      * <p>Constructor for EqualsBuilder.</p>\n      *\n      * <p>Starts off assuming that equals is <code>true</code>.</p>\n-     * @see java.lang.Object#Object()\n+     * @see java.lang.Object#equals\n      */\n     public EqualsBuilder() {\n         super();\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is also\n+     * a security manager, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be tested, as they are likely derived\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is also\n+     * a security manager, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n      *\n      * <p>If the TestTransients parameter is set to <code>true</code>, transient\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is also\n+     * a security manager, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n      *\n      * <p>If the testTransients parameter is set to <code>true</code>, transient\n      * <p>Test if two <code>Object</code>s are equal using their\n      * <code>equals</code> method.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand object\n+     * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(Object lhs, Object rhs) {\n     }\n \n     /**\n-     * <p>Test if two <code>long</code>s are equal using ==.</p>\n-     *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * <p>Test if two <code>long</code>s are equal.</p>\n+     *\n+     * @param lhs  the left hand <code>long</code>\n+     * @param rhs  the right hand <code>long</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(long lhs, long rhs) {\n     }\n \n     /**\n-     * <p>Test if two <code>int</code>s are equal using ==.</p>\n-     *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * <p>Test if two <code>int</code>s are equal.</p>\n+     *\n+     * @param lhs  the left hand <code>int</code>\n+     * @param rhs  the right hand <code>int</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(int lhs, int rhs) {\n     }\n \n     /**\n-     * <p>Test if two <code>short</code>s are equal using ==.</p>\n-     *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * <p>Test if two <code>short</code>s are equal.</p>\n+     *\n+     * @param lhs  the left hand <code>short</code>\n+     * @param rhs  the right hand <code>short</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(short lhs, short rhs) {\n     }\n \n     /**\n-     * <p>Test if two <code>char</code>s are equal using ==.</p>\n-     *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * <p>Test if two <code>char</code>s are equal.</p>\n+     *\n+     * @param lhs  the left hand <code>char</code>\n+     * @param rhs  the right hand <code>char</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(char lhs, char rhs) {\n     }\n \n     /**\n-     * <p>Test if two <code>byte</code>s are equal using ==.</p>\n-     *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * <p>Test if two <code>byte</code>s are equal.</p>\n+     *\n+     * @param lhs  the left hand <code>byte</code>\n+     * @param rhs  the right hand <code>byte</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(byte lhs, byte rhs) {\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>double</code>\n+     * @param rhs  the right hand <code>double</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(double lhs, double rhs) {\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>float</code>\n+     * @param rhs  the right hand <code>float</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(float lhs, float rhs) {\n     }\n \n     /**\n-     * <p>Test if two <code>booleans</code>s are equal using ==.</p>\n-     *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * <p>Test if two <code>booleans</code>s are equal.</p>\n+     *\n+     * @param lhs  the left hand <code>boolean</code>\n+     * @param rhs  the right hand <code>boolean</code>\n      * @return EqualsBuilder - used to chain calls.\n       */\n     public EqualsBuilder append(boolean lhs, boolean rhs) {\n      * <p>This also will be called for the top level of\n      * multi-dimensional, ragged, and multi-typed arrays.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>Object[]</code>\n+     * @param rhs  the right hand <code>Object[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n      *\n      * <p>The method {@link #append(long, long)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>long[]</code>\n+     * @param rhs  the right hand <code>long[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(long[] lhs, long[] rhs) {\n      *\n      * <p>The method {@link #append(int, int)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>int[]</code>\n+     * @param rhs  the right hand <code>int[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(int[] lhs, int[] rhs) {\n      *\n      * <p>The method {@link #append(short, short)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>short[]</code>\n+     * @param rhs  the right hand <code>short[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(short[] lhs, short[] rhs) {\n      *\n      * <p>The method {@link #append(char, char)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>char[]</code>\n+     * @param rhs  the right hand <code>char[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(char[] lhs, char[] rhs) {\n      *\n      * <p>The method {@link #append(byte, byte)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>byte[]</code>\n+     * @param rhs  the right hand <code>byte[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n      *\n      * <p>The method {@link #append(double, double)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>double[]</code>\n+     * @param rhs  the right hand <code>double[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(double[] lhs, double[] rhs) {\n      *\n      * <p>The method {@link #append(float, float)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>float[]</code>\n+     * @param rhs  the right hand <code>float[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(float[] lhs, float[] rhs) {\n      *\n      * <p>The method {@link #append(boolean, boolean)} is used.</p>\n      *\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n+     * @param lhs  the left hand <code>boolean[]</code>\n+     * @param rhs  the right hand <code>boolean[]</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n /**\n  * <p><code>HashCode</code> generation routines.</p>\n  *\n- * <p> This class enables a good hashcode to be built for any class. It\n+ * <p> This class enables a good <code>hashCode</code> method to be built for any class. It\n  * follows the rules laid out in the book\n  * <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a>\n- * , by Joshua Bloch. Writing a good <code>hashCode</code> is actually quite\n+ * by Joshua Bloch. Writing a good <code>hashCode</code> method is actually quite\n  * difficult. This class aims to simplify the process.</p>\n  *\n  * <p>All relevant fields from the object should be included in the\n- * <code>hashCode</code>. Derived fields may be excluded. In general, any\n- * field used in the equals method must be used in the <code>hashCode</code>\n+ * <code>hashCode</code> method. Derived fields may be excluded. In general, any\n+ * field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n  * method.</p>\n  *\n  * <p>To use this class write code as follows:</p>\n  * }\n  * </pre>\n  *\n- * <p>If required, the superclass hashCode can be added using {@link #appendSuper}.</p>\n+ * <p>If required, the superclass <code>hashCode()</code> can be added\n+ * using {@link #appendSuper}.</p>\n  *\n  * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method,\n  *\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.15 2003/07/20 15:49:58 scolebourne Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.16 2003/07/21 23:30:42 scolebourne Exp $\n  */\n public class HashCodeBuilder {\n \n     private int iTotal = 0;\n \n     /**\n-     * <p>Constructor for HashCodeBuilder.</p>\n+     * <p>Constructor.</p>\n      *\n      * <p>This constructor uses two hard coded choices for the constants\n      * needed to build a <code>hashCode</code>.</p>\n     }\n \n     /**\n-     * <p>Constructor for <code>HashCodeBuilder</code>.</p>\n+     * <p>Constructor.</p>\n      *\n      * <p>Two randomly chosen, non-zero, odd numbers must be passed in.\n      * Ideally these should be different for each class, however this is\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is\n+     * a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be used, as they are likely derived\n      *\n      * <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is\n+     * a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <P>If the TestTransients parameter is set to <code>true</code>, transient\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is\n+     * a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be used, as they are likely derived\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is also\n+     * a security manager, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n      *\n      * <p>If the TestTransients parameter is set to <code>true</code>, transient\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is also\n+     * a security manager, if the permissions are not set up correctly. It is also\n      * not as efficient as testing explicitly.</p>\n      *\n      * <p>If the TestTransients parameter is set to <code>true</code>, transient\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>long</code>.</p>\n-     *\n-     * @param value  the long to add to the <code>hashCode</code>\n+     * <p>Append a <code>hashCode</code> for a <code>boolean</code>.</p>\n+     *\n+     * @param value  the boolean to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(boolean value) {\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n  *\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Stephen Colebourne\n+ * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: ReflectionToStringBuilder.java,v 1.6 2003/07/20 01:13:14 ggregory Exp $\n+ * @version $Id: ReflectionToStringBuilder.java,v 1.7 2003/07/21 23:30:42 scolebourne Exp $\n  */\n public class ReflectionToStringBuilder extends ToStringBuilder {\n \n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n+     * under a security manager, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be included, as they are likely derived.\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n+     * under a security manager, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be included, as they are likely derived.\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n+     * under a security manager, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly. </p>\n      *\n      * <p>If the <code>outputTransients</code> is <code>true</code>,\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n+     * under a security manager, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly. </p>\n      *\n      * <p>If the <code>outputTransients</code> is <code>true</code>,\n      * @param style  the style of the <code>toString</code> to create,\n      *  may be <code>null</code>\n      * @param outputTransients  whether to include transient fields\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n+     *  may be <code>null</code>\n      * @return the String result\n      * @throws IllegalArgumentException if the Object is <code>null</code>\n      */\n     private Class upToClass = null;\n \n     /**\n-     * <p>Constructs a new instance.</p>\n+     * <p>Constructor.</p>\n      *\n      * <p>This constructor outputs using the default style set with\n      * <code>setDefaultStyle</code>.</p>\n     }\n \n     /**\n-     * <p>Constructor specifying the output style.</p>\n+     * <p>Constructor.</p>\n      *\n      * <p>If the style is <code>null</code>, the default style is used.</p>\n      * \n     }\n \n     /**\n-     * <p>Constructors a new instance.</p>\n+     * <p>Constructor.</p>\n      *\n      * <p>If the style is <code>null</code>, the default style is used.</p>\n      *\n     }\n \n     /**\n-     * Constructs a new instance.\n+     * Constructor.\n      * \n      * @param object  the Object to build a <code>toString</code> for,\n      *  must not be <code>null</code>\n      *  may be <code>null</code>\n      * @param buffer  the <code>StringBuffer</code> to populate, may be\n      *  <code>null</code>\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n+     *  may be <code>null</code>\n+     * @param outputTransients  whether to include transient fields\n      */\n     public ReflectionToStringBuilder(\n         Object object,\n      * <p>Appends the fields and values defined by the given object of the\n      * given Class.</p>\n      *\n-     * <p>If a cycle is detected as an objects is &quot;toString()'ed&quot;,\n+     * <p>If a cycle is detected as an object is &quot;toString()'ed&quot;,\n      * such an object is rendered as if <code>Object.toString()</code> \n      * had been called and not implemented by the object.</p>\n      * \n     }\n \n     /**\n-     * <p>Returns whether or not to append transient fields.</p>\n+     * <p>Gets whether or not to append transient fields.</p>\n      * \n      * @return Whether or not to append transient fields.\n      */\n \n     /**\n      * <p>Registers this builder's source object to avoid infinite\n-     * loops processing circular object references.</p>\n+     * loops when processing circular object references.</p>\n      */\n     void registerObject() {\n         register(this.getObject());\n         this.upToClass = clazz;\n     }\n \n+    /**\n+     * Gets the String built by this builder.\n+     *\n+     * @return the built string\n+     */\n     public String toString() {\n         if (this.getObject() == null) {\n             return this.getStyle().getNullText();\n \n     /**\n      * <p>Unegisters this builder's source object to avoid infinite\n-     * loops processing circular object references.</p>\n+     * loops when processing circular object references.</p>\n      */\n     void unregisterObject() {\n         unregister(this.getObject());\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  * program to access.</p>\n  *\n  * @author Stephen Colebourne\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: StandardToStringStyle.java,v 1.9 2003/07/14 22:25:03 bayard Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.10 2003/07/21 23:30:42 scolebourne Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n     /**\n      * <p>Sets the array start text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empry String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param arrayStart  the new array start text\n      */\n     /**\n      * <p>Sets the array end text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param arrayEnd  the new array end text\n      */\n     /**\n      * <p>Sets the array separator text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param arraySeparator  the new array separator text\n      */\n     /**\n      * <p>Sets the content start text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param contentStart  the new content start text\n      */\n     /**\n      * <p>Sets the content end text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param contentEnd  the new content end text\n      */\n     /**\n      * <p>Sets the field name value separator text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param fieldNameValueSeparator  the new field name value separator text\n      */\n     /**\n      * <p>Sets the field separator text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param fieldSeparator  the new field separator text\n      */\n     /**\n      * <p>Sets the text to output when <code>null</code> found.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param nullText  the new text to output when <code>null</code> found\n      */\n     }\n \n     /**\n-     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <p>Sets the start text to output when a <code>Collection</code>,\n      * <code>Map</code> or <code>Array</code> size is output.</p>\n      *\n      * <p>This is output before the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param sizeStartText  the new start of size text\n      */\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when a <code>Collection</code>,\n+     * Gets the end text to output when a <code>Collection</code>,\n      * <code>Map</code> or <code>Array</code> size is output.</p>\n      *\n      * <p>This is output after the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <p>Sets the end text to output when a <code>Collection</code>,\n      * <code>Map</code> or <code>Array</code> size is output.</p>\n      *\n      * <p>This is output after the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted\n-     * to a Empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted\n+     * to an empty String.</p>\n      *\n      * @param sizeEndText  the new end of size text\n      */\n     //---------------------------------------------------------------------\n     \n     /**\n-     * <p>Gets the text to output when an <code>Object</code> is\n+     * <p>Gets the start text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <P>This is output before the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when an <code>Object</code> is\n+     * <p>Sets the start text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output before the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param summaryObjectStartText  the new start of summary text\n      */\n     //---------------------------------------------------------------------\n     \n     /**\n-     * <p>Gets the text to output when an <code>Object</code> is\n+     * <p>Gets the end text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output after the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when an <code>Object</code> is\n+     * <p>Sets the end text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output after the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param summaryObjectEndText  the new end of summary text\n      */\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n import org.apache.commons.lang.ObjectUtils;\n \n /**\n- * <p>Builds <code>toString()</code> values.</p>\n+ * <p><code>ToString</code> generation routines.</p>\n  *\n  * <p>This class enables a good and consistent <code>toString()</code> to be built for any\n  * class or object. This class aims to simplify the process by:</p>\n  *\n  * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method, \n- * <code>reflectionToString</code>, uses <code>Field.setAccessible</code> to\n+ * <code>reflectionToString</code>, uses <code>AccessibleObject.setAccessible</code> to\n  * change the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set up correctly. It is also\n  * slower than testing explicitly.</p>\n  *\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.25 2003/07/16 01:47:39 ggregory Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.26 2003/07/21 23:30:41 scolebourne Exp $\n  */\n public class ToStringBuilder {\n \n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>boolean</code>\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n      * value.</p>\n      *\n      * @param value  the value to add to the <code>toString</code>\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>byte</code>\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n      * value.</p>\n      *\n      * @param value  the value to add to the <code>toString</code>\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>char</code>\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n      * value.</p>\n      *\n      * @param value  the value to add to the <code>toString</code>\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>double</code>\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n      * value.</p>\n      *\n      * @param value  the value to add to the <code>toString</code>\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>float</code>\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n      * value.</p>\n      *\n      * @param value  the value to add to the <code>toString</code>\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> a <code>int</code>\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n      * array.</p>\n      *\n      * @param array  the array to add to the <code>toString</code>\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>short</code>\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n      * value.</p>\n      *\n      * @param value  the value to add to the <code>toString</code>\n     }\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>boolean</code>\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n      * value.</p>\n      *\n      * @param fieldName  the field name\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>boolean</code>\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n      * array.</p>\n      *\n      * @param fieldName  the field name\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>byte</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> a <code>byte</code> array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, byte[] array) {\n     }\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>char</code>\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n      * value.</p>\n      *\n      * @param fieldName  the field name\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>char</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, char[] array) {\n     }\n \n     /**\n-     * <p>Append to the <code>toString</code> an <code>double</code>\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n      * value.</p>\n      *\n      * @param fieldName  the field name\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>double</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, double[] array) {\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>float</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, float[] array) {\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for an <code>int</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, int[] array) {\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>long</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, long[] array) {\n     }\n \n     /**\n-     * <p>Append a <code>hashCode</code> for a <code>short</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, short[] array) {\n     /**\n      * <p>Append the <code>toString</code> from the superclass.</p>\n      * \n-     * <p>This method asumes that the superclass uses the same <code>ToStringStyle</code>\n+     * <p>This method assumes that the superclass uses the same <code>ToStringStyle</code>\n      * as this one.</p>\n      * \n-     * <p>If the <code>superToString</code> is null, no change is made.</p>\n+     * <p>If <code>superToString</code> is <code>null</code>, no change is made.</p>\n      *\n      * @param superToString  the result of <code>super.toString()</code>\n      * @return this\n      * <p>Append the <code>toString</code> from another object.</p>\n      * \n      * <p>This method is useful where a class delegates most of the implementation of\n-     * it's properties to another class. You can then call <code>toString()</code> on\n+     * its properties to another class. You can then call <code>toString()</code> on\n      * the other class and pass the result into this method.</p>\n      * \n      * <pre>\n      *       toString();\n      *   }</pre>\n      * \n-     * <p>This method asumes that the other object uses the same <code>ToStringStyle</code>\n+     * <p>This method assumes that the other object uses the same <code>ToStringStyle</code>\n      * as this one.</p>\n      * \n      * <p>If the <code>toString</code> is <code>null</code>, no change is made.</p>\n     /**\n      * <p>Returns the built <code>toString</code>.</p>\n      * \n-     * <p>This method appends the end of the buffer, and can only be called once.\n+     * <p>This method appends the end of data indicator, and can only be called once.\n      * Use {@link #getStringBuffer} to get the current string state.</p>\n      * \n      * @return the String <code>toString</code>\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  *\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.19 2003/07/21 23:03:53 scolebourne Exp $\n+ * @version $Id: ToStringStyle.java,v 1.20 2003/07/21 23:30:42 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n \n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append the superclass toString.</p>\n+     * <p>Append to the <code>toString</code> the superclass toString.</p>\n      * \n-     * <p>A <code>null</code> <code>super.toString()</code> is ignored.</p>\n+     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param superToString  the <code>super.toString()</code>\n     }\n \n     /**\n-     * <p>Append a toString.</p>\n+     * <p>Append to the <code>toString</code> another toString.</p>\n      * \n-     * <p>A <code>null</code> <code>toString()</code> is ignored.</p>\n+     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n-     * @param toString  the <code>super.toString()</code>\n+     * @param toString  the additional <code>toString</code>\n      */\n     public void appendToString(StringBuffer buffer, String toString) {\n         if (toString != null) {\n     }\n \n     /**\n-     * <p>Append the start of data indicator.</p>\n+     * <p>Append to the <code>toString</code> the start of data indicator.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param object  the <code>Object</code> to build a\n     }\n \n     /**\n-     * <p>Append the end of data indicator.</p>\n+     * <p>Append to the <code>toString</code> the end of data indicator.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param object  the <code>Object</code> to build a\n \n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>,\n-     * correctly interpretting its type.</p>\n+     * correctly interpreting its type.</p>\n      *\n      * <p>This method performs the main lookup by Class type to correctly\n      * route arrays, <code>Collections</code>, <code>Maps</code> and\n     }\n \n     /**\n-     * <p>Append to the <code>toString</code> the detail of an any array type.</p>\n+     * <p>Append to the <code>toString</code> the detail of an array type.</p>\n      *\n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n     //----------------------------------------------------------------------------\n \n     /**\n-     * <p>Append the class name.</p>\n+     * <p>Append to the <code>toString</code> the class name.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param object  the <code>Object</code> whose name to output\n     }\n \n     /**\n-     * <p>Append the content start to the buffer.</p>\n+     * <p>Append to the <code>toString</code> the content start.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     }\n \n     /**\n-     * <p>Append the content end to the buffer.</p>\n+     * <p>Append to the <code>toString</code> the content end.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     }\n \n     /**\n-     * <p>Append an indicator for <code>null</code> to the buffer.</p>\n+     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\n      *\n      * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\n      * \n     }\n \n     /**\n-     * <p>Append the field separator to the buffer.</p>\n+     * <p>Append to the <code>toString</code> the field separator.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     }\n \n     /**\n-     * <p>Append the field start to the buffer.</p>\n+     * <p>Append to the <code>toString</code> the field start.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n     }\n \n     /**\n-     * <p>Append the field end to the buffer.</p>\n+     * <p>Append to the <code>toString<code> the field end.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n     /**\n      * <p>Sets the array start text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a emptry String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param arrayStart  the new array start text\n      */\n     /**\n      * <p>Sets the array end text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param arrayEnd  the new array end text\n      */\n     /**\n      * <p>Sets the array separator text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param arraySeparator  the new array separator text\n      */\n     /**\n      * <p>Sets the content start text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param contentStart  the new content start text\n      */\n     /**\n      * <p>Sets the content end text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param contentEnd  the new content end text\n      */\n     /**\n      * <p>Sets the field name value separator text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param fieldNameValueSeparator  the new field name value separator text\n      */\n     /**\n      * <p>Sets the field separator text.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param fieldSeparator  the new field separator text\n      */\n     /**\n      * <p>Sets the text to output when <code>null</code> found.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param nullText  the new text to output when null found\n      */\n     //---------------------------------------------------------------------\n \n     /**\n-     * <p>Gets the text to output when a <code>Collection</code>,\n+     * <p>Gets the start text to output when a <code>Collection</code>,\n      * <code>Map</code> or array size is output.</p>\n      *\n      * <p>This is output before the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <p>Sets the start text to output when a <code>Collection</code>,\n      * <code>Map</code> or array size is output.</p>\n      *\n      * <p>This is output before the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param sizeStartText  the new start of size text\n      */\n     //---------------------------------------------------------------------\n \n     /**\n-     * <p>Gets the text to output when a <code>Collection</code>,\n+     * <p>Gets the end text to output when a <code>Collection</code>,\n      * <code>Map</code> or array size is output.</p>\n      *\n      * <p>This is output after the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <p>Sets the end text to output when a <code>Collection</code>,\n      * <code>Map</code> or array size is output.</p>\n      *\n      * <p>This is output after the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param sizeEndText  the new end of size text\n      */\n     //---------------------------------------------------------------------\n \n     /**\n-     * <p>Gets the text to output when an <code>Object</code> is\n+     * <p>Gets the start text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output before the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when an <code>Object</code> is\n+     * <p>Sets the start text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output before the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param summaryObjectStartText  the new start of summary text\n      */\n     //---------------------------------------------------------------------\n \n     /**\n-     * <p>Gets the text to output when an <code>Object</code> is\n+     * <p>Gets the end text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output after the size value.</p>\n     }\n \n     /**\n-     * <p>Sets the text to output when an <code>Object</code> is\n+     * <p>Sets the end text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n      *\n      * <p>This is output after the size value.</p>\n      *\n-     * <p><code>Null</code> is accepted, but will be converted to\n-     * a empty String.</p>\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n      *\n      * @param summaryObjectEndText  the new end of summary text\n      */", "timestamp": 1058830242, "metainfo": ""}