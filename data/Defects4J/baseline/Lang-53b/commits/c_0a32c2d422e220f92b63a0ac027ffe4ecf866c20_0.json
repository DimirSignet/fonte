{"sha": "0a32c2d422e220f92b63a0ac027ffe4ecf866c20", "log": "svn:keywords correction  ", "commit": "\n--- a/src/java/org/apache/commons/lang/BitField.java\n+++ b/src/java/org/apache/commons/lang/BitField.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BitField.java,v 1.6 2004/08/15 02:12:51 bayard Exp $\n+ * @version $Id$\n  */\n public class BitField {\n     \n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * @author Matthew Hawthorne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.19 2004/10/08 21:27:00 scolebourne Exp $\n+ * @version $Id$\n  */\n public class BooleanUtils {\n \n--- a/src/java/org/apache/commons/lang/CharEncoding.java\n+++ b/src/java/org/apache/commons/lang/CharEncoding.java\n  * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character encoding names</a>\n  * @author Apache Software Foundation\n  * @since 2.1\n- * @version $Id: CharEncoding.java,v 1.2 2004/10/06 21:40:09 scolebourne Exp $\n+ * @version $Id$\n  */\n public class CharEncoding {\n \n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n  * @author Chris Feldhacker\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CharRange.java,v 1.17 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id$\n  */\n public final class CharRange implements Serializable {\n \n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.22 2004/02/18 22:59:49 ggregory Exp $\n+ * @version $Id$\n  */\n public class CharSet implements Serializable {\n \n--- a/src/java/org/apache/commons/lang/CharUtils.java\n+++ b/src/java/org/apache/commons/lang/CharUtils.java\n  * \n  * @author Stephen Colebourne\n  * @since 2.1\n- * @version $Id: CharUtils.java,v 1.10 2004/09/05 20:38:36 bayard Exp $\n+ * @version $Id$\n  */\n public class CharUtils {\n     \n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.19 2004/10/16 18:52:21 scolebourne Exp $\n+ * @version $Id$\n  */\n class Entities {\n \n--- a/src/java/org/apache/commons/lang/IllegalClassException.java\n+++ b/src/java/org/apache/commons/lang/IllegalClassException.java\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: IllegalClassException.java,v 1.7 2004/10/15 20:55:01 scolebourne Exp $\n+ * @version $Id$\n  */\n public class IllegalClassException extends IllegalArgumentException {\n \n--- a/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n+++ b/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n  * \n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: IncompleteArgumentException.java,v 1.7 2004/10/15 20:55:01 scolebourne Exp $\n+ * @version $Id$\n  */\n public class IncompleteArgumentException extends IllegalArgumentException {\n \n--- a/src/java/org/apache/commons/lang/IntHashMap.java\n+++ b/src/java/org/apache/commons/lang/IntHashMap.java\n  * @author Alex Chaffee (alex@apache.org)\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Revision: 1.6 $\n+ * @version $Revision$\n  * @see java.util.HashMap\n  */\n class IntHashMap {\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.10 2004/10/21 01:18:33 ggregory Exp $\n+ * @version $Id$\n  */\n public class NotImplementedException\n         extends UnsupportedOperationException implements Nestable {\n--- a/src/java/org/apache/commons/lang/NullArgumentException.java\n+++ b/src/java/org/apache/commons/lang/NullArgumentException.java\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NullArgumentException.java,v 1.8 2004/10/15 20:55:01 scolebourne Exp $\n+ * @version $Id$\n  */\n public class NullArgumentException extends IllegalArgumentException {\n \n--- a/src/java/org/apache/commons/lang/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/NumberRange.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Revision: 1.11 $ $Date: 2004/02/18 22:59:49 $\n+ * @version $Revision$ $Date$\n  * \n  * @deprecated Use one of the Range classes in org.apache.commons.lang.math.\n  *             Class will be removed in Commons Lang 3.0.\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: NumberUtils.java,v 1.17 2004/02/19 21:04:03 fredrik Exp $\n+ * @version $Id$\n  * \n  * @deprecated Moved to org.apache.commons.lang.math.\n  *             Class will be removed in Commons Lang 3.0.\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Gary Gregory\n  * @author Mario Winterer\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.24 2004/06/01 21:08:48 scolebourne Exp $\n+ * @version $Id$\n  */\n public class ObjectUtils {\n     \n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author Gary Gregory\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.27 2004/02/18 22:59:49 ggregory Exp $\n+ * @version $Id$\n  */\n public class RandomStringUtils {\n \n--- a/src/java/org/apache/commons/lang/SerializationException.java\n+++ b/src/java/org/apache/commons/lang/SerializationException.java\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: SerializationException.java,v 1.7 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id$\n  */\n public class SerializationException extends NestableRuntimeException {\n \n--- a/src/java/org/apache/commons/lang/SerializationUtils.java\n+++ b/src/java/org/apache/commons/lang/SerializationUtils.java\n  * @author Jeff Varszegi\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: SerializationUtils.java,v 1.13 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id$\n  */\n public class SerializationUtils {\n     \n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author Phil Steitz\n  * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.30 2004/10/07 22:45:27 scolebourne Exp $\n+ * @version $Id$\n  */\n public class StringEscapeUtils {\n \n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Al Chou\n  * @author Michael Davey\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.137 2004/12/18 02:48:01 bayard Exp $\n+ * @version $Id$\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author Rafal Krupinski\n  * @author Jason Gritman\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.38 2004/11/12 00:48:41 scolebourne Exp $\n+ * @version $Id$\n  */\n public class SystemUtils {\n \n--- a/src/java/org/apache/commons/lang/UnhandledException.java\n+++ b/src/java/org/apache/commons/lang/UnhandledException.java\n  *\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: UnhandledException.java,v 1.6 2004/10/15 20:55:01 scolebourne Exp $\n+ * @version $Id$\n  */\n public class UnhandledException extends NestableRuntimeException {\n \n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.26 2004/07/01 17:52:07 ggregory Exp $\n+ * @version $Id$\n  */\n public class CompareToBuilder {\n     \n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Pete Gieser\n  * @author Arun Mammen Thomas\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.28 2004/10/16 17:27:11 scolebourne Exp $\n+ * @version $Id$\n  */\n public class EqualsBuilder {\n     \n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.24 2004/11/23 19:15:28 ggregory Exp $\n+ * @version $Id$\n  */\n public class HashCodeBuilder {\n \n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: StandardToStringStyle.java,v 1.17 2004/02/18 22:53:24 ggregory Exp $\n+ * @version $Id$\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.35 2004/07/01 17:40:10 ggregory Exp $\n+ * @version $Id$\n  */\n public class ToStringBuilder {\n \n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * @author Pete Gieser\n  * @author Masato Tezuka\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.36 2004/12/28 23:13:03 scolebourne Exp $\n+ * @version $Id$\n  */\n public abstract class ToStringStyle implements Serializable {\n \n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.30 2004/12/12 22:36:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: EnumUtils.java,v 1.13 2004/09/30 17:24:47 ggregory Exp $\n+ * @version $Id$\n  */\n public class EnumUtils {\n \n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.17 2004/09/30 17:24:47 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class ValuedEnum extends Enum {\n     \n--- a/src/java/org/apache/commons/lang/enums/Enum.java\n+++ b/src/java/org/apache/commons/lang/enums/Enum.java\n  * @author Mike Bowler\n  * @author Matthias Eichel\n  * @since 2.1 (class existed in enum package from v1.0)\n- * @version $Id: Enum.java,v 1.4 2004/12/12 22:36:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n--- a/src/java/org/apache/commons/lang/enums/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enums/EnumUtils.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 2.1 (class existed in enum package from v1.0)\n- * @version $Id: EnumUtils.java,v 1.2 2004/06/01 20:56:44 scolebourne Exp $\n+ * @version $Id$\n  */\n public class EnumUtils {\n \n--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 2.1 (class existed in enum package from v1.0)\n- * @version $Id: ValuedEnum.java,v 1.4 2004/10/15 00:43:29 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class ValuedEnum extends Enum {\n     \n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: Nestable.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public interface Nestable {\n     \n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author Sean C. Sullivan\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: NestableDelegate.java,v 1.26 2004/10/09 10:45:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public class NestableDelegate implements Serializable {\n \n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: DoubleRange.java,v 1.6 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id$\n  */\n public final class DoubleRange extends Range implements Serializable {\n     \n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: FloatRange.java,v 1.6 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id$\n  */\n public final class FloatRange extends Range implements Serializable {\n     \n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n  * @author Pete Gieser\n  * @author C. Scott Ananian\n  * @since 2.0\n- * @version $Id: Fraction.java,v 1.14 2004/07/11 23:20:17 psteitz Exp $\n+ * @version $Id$\n  */\n public final class Fraction extends Number implements Serializable, Comparable {\n \n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: IntRange.java,v 1.7 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id$\n  */\n public final class IntRange extends Range implements Serializable {\n     \n--- a/src/java/org/apache/commons/lang/math/JVMRandom.java\n+++ b/src/java/org/apache/commons/lang/math/JVMRandom.java\n  * \n  * @author Henri Yandell\n  * @since 2.0\n- * @version $Id: JVMRandom.java,v 1.11 2004/10/21 01:18:33 ggregory Exp $\n+ * @version $Id$\n  */\n public final class JVMRandom extends Random {\n \n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: LongRange.java,v 1.8 2004/10/21 01:18:33 ggregory Exp $\n+ * @version $Id$\n  */\n public final class LongRange extends Range implements Serializable {\n     \n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author Stephen Colebourne\n  * @since 2.0 (previously in org.apache.commons.lang)\n- * @version $Id: NumberRange.java,v 1.7 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id$\n  */\n public final class NumberRange extends Range implements Serializable {\n     \n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.19 2004/10/08 00:07:59 scolebourne Exp $\n+ * @version $Id$\n  */\n public class NumberUtils {\n     \n--- a/src/java/org/apache/commons/lang/math/RandomUtils.java\n+++ b/src/java/org/apache/commons/lang/math/RandomUtils.java\n  * @author Henri Yandell\n  * @author Gary D. Gregory\n  * @since 2.0\n- * @version $Id: RandomUtils.java,v 1.8 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id$\n  */\n public class RandomUtils {\n \n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: Range.java,v 1.6 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Range {\n \n--- a/src/java/org/apache/commons/lang/mutable/Mutable.java\n+++ b/src/java/org/apache/commons/lang/mutable/Mutable.java\n  * \n  * @author Matthew Hawthorne\n  * @since 2.1\n- * @version $Id: Mutable.java,v 1.3 2004/10/08 19:45:46 ggregory Exp $\n+ * @version $Id$\n  */\n public interface Mutable {\n \n--- a/src/java/org/apache/commons/lang/mutable/MutableObject.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableObject.java\n  * A mutable <code>Object</code> wrapper.\n  * \n  * @since 2.1\n- * @version $Id: MutableObject.java,v 1.5 2004/10/08 22:29:33 ggregory Exp $\n+ * @version $Id$\n  */\n public class MutableObject implements Mutable, Serializable {\n \n--- a/src/java/org/apache/commons/lang/text/Interpolation.java\n+++ b/src/java/org/apache/commons/lang/text/Interpolation.java\n  * @author Ken Fitzpatrick\n  * @author Henri Yandell\n  * @since 2.1\n- * @version $Id: Interpolation.java,v 1.1 2004/09/05 00:56:31 bayard Exp $\n+ * @version $Id$\n  */\n public class Interpolation {\n \n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.1\n- * @version $Id: StrBuilder.java,v 1.1 2004/10/16 15:09:52 scolebourne Exp $\n+ * @version $Id$\n  */\n public class StrBuilder implements Cloneable {\n \n--- a/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DateFormatUtils.java,v 1.9 2004/02/18 22:56:42 ggregory Exp $\n+ * @version $Id$\n  */\n public class DateFormatUtils {\n \n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n  * @author Stephen Colebourne\n  * @author Nikolay Metchev\n  * @since 2.0\n- * @version $Id: FastDateFormat.java,v 1.22 2004/10/08 00:09:01 scolebourne Exp $\n+ * @version $Id$\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: StopWatch.java,v 1.11 2004/10/15 23:11:31 scolebourne Exp $\n+ * @version $Id$\n  */\n public class StopWatch {\n \n--- a/src/test/org/apache/commons/lang/AllLangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/AllLangTestSuite.java\n  * Test suite for [lang].\n  *\n  * @author Stephen Colebourne\n- * @version $Id: AllLangTestSuite.java,v 1.8 2004/09/05 01:42:37 bayard Exp $\n+ * @version $Id$\n  */\n public class AllLangTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n  * Tests ArrayUtils add methods.\n  * \n  * @author Gary D. Gregory\n- * @version $Id: ArrayUtilsAddTest.java,v 1.6 2005/01/27 06:43:20 bayard Exp $\n+ * @version $Id$\n  */\n public class ArrayUtilsAddTest extends TestCase {\n     public static void main(String[] args) {\n--- a/src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java\n-/*\n- * Copyright 2002-2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.lang;\n-\n-import java.util.Arrays;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-import junit.textui.TestRunner;\n-\n-/**\n- * Tests ArrayUtils remove and removeElement methods.\n- * \n- * @author Maarten Coene\n- * @version $Id: ArrayUtilsRemoveTest.java,v 1.1 2004/06/06 03:53:24 bayard Exp $\n- */\n-public class ArrayUtilsRemoveTest extends TestCase {\n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-\n-    public static Test suite() {\n-        TestSuite suite = new TestSuite(ArrayUtilsRemoveTest.class);\n-        suite.setName(\"ArrayUtils remove Tests\");\n-        return suite;\n-    }\n-\n-    public void testRemoveObjectArray() {\n-        Object[] array;\n-        array = ArrayUtils.remove(new Object[] {\"a\"}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 0);\n-        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 1);\n-        assertTrue(Arrays.equals(new Object[] {\"a\"}, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new Object[] {\"a\", \"b\", \"c\"}, 1);\n-        assertTrue(Arrays.equals(new Object[] {\"a\", \"c\"}, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((Object[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveBooleanArray() {\n-        boolean[] array;\n-        array = ArrayUtils.remove(new boolean[] {true}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new boolean[] {true, false}, 0);\n-        assertTrue(Arrays.equals(new boolean[] {false}, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new boolean[] {true, false}, 1);\n-        assertTrue(Arrays.equals(new boolean[] {true}, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);\n-        assertTrue(Arrays.equals(new boolean[] {true, true}, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new boolean[] {true, false}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new boolean[] {true, false}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((boolean[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveByteArray() {\n-        byte[] array;\n-        array = ArrayUtils.remove(new byte[] {1}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new byte[] {1, 2}, 0);\n-        assertTrue(Arrays.equals(new byte[] {2}, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new byte[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new byte[] {1}, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new byte[] {1, 1}, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new byte[] {1, 2}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new byte[] {1, 2}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((byte[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveCharArray() {\n-        char[] array;\n-        array = ArrayUtils.remove(new char[] {'a'}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);\n-        assertTrue(Arrays.equals(new char[] {'b'}, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);\n-        assertTrue(Arrays.equals(new char[] {'a'}, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);\n-        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new char[] {'a', 'b'}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new char[] {'a', 'b'}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((char[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveDoubleArray() {\n-        double[] array;\n-        array = ArrayUtils.remove(new double[] {1}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new double[] {1, 2}, 0);\n-        assertTrue(Arrays.equals(new double[] {2}, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new double[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new double[] {1}, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new double[] {1, 1}, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new double[] {1, 2}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new double[] {1, 2}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((double[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveFloatArray() {\n-        float[] array;\n-        array = ArrayUtils.remove(new float[] {1}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new float[] {1, 2}, 0);\n-        assertTrue(Arrays.equals(new float[] {2}, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new float[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new float[] {1}, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new float[] {1, 1}, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new float[] {1, 2}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new float[] {1, 2}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((float[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveIntArray() {\n-        int[] array;\n-        array = ArrayUtils.remove(new int[] {1}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new int[] {1, 2}, 0);\n-        assertTrue(Arrays.equals(new int[] {2}, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new int[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new int[] {1}, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new int[] {1, 1}, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new int[] {1, 2}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new int[] {1, 2}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((int[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveLongArray() {\n-        long[] array;\n-        array = ArrayUtils.remove(new long[] {1}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new long[] {1, 2}, 0);\n-        assertTrue(Arrays.equals(new long[] {2}, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new long[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new long[] {1}, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new long[] {1, 1}, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new long[] {1, 2}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new long[] {1, 2}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((long[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveShortArray() {\n-        short[] array;\n-        array = ArrayUtils.remove(new short[] {1}, 0);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new short[] {1, 2}, 0);\n-        assertTrue(Arrays.equals(new short[] {2}, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new short[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new short[] {1}, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new short[] {1, 1}, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        try {\n-            ArrayUtils.remove(new short[] {1, 2}, -1);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove(new short[] {1, 2}, 2);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-        try {\n-            ArrayUtils.remove((short[]) null, 0);\n-            fail(\"IndexOutOfBoundsException expected\");\n-        } catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testRemoveElementObjectArray() {\n-        Object[] array;\n-        array = ArrayUtils.removeElement((Object[]) null, \"a\");\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new Object[] {\"a\"}, \"a\");\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\"}, \"a\");\n-        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\", \"a\"}, \"a\");\n-        assertTrue(Arrays.equals(new Object[] {\"b\", \"a\"}, array));\n-        assertEquals(Object.class, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementBooleanArray() {\n-        boolean[] array;\n-        array = ArrayUtils.removeElement((boolean[]) null, true);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new boolean[] {true}, true);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);\n-        assertTrue(Arrays.equals(new boolean[] {false}, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);\n-        assertTrue(Arrays.equals(new boolean[] {false, true}, array));\n-        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementByteArray() {\n-        byte[] array;\n-        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);\n-        assertTrue(Arrays.equals(new byte[] {2}, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);\n-        assertTrue(Arrays.equals(new byte[] {2, 1}, array));\n-        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementCharArray() {\n-        char[] array;\n-        array = ArrayUtils.removeElement((char[]) null, 'a');\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');\n-        assertTrue(Arrays.equals(new char[] {'b'}, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');\n-        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));\n-        assertEquals(Character.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementDoubleArray() {\n-        double[] array;\n-        array = ArrayUtils.removeElement((double[]) null, (double) 1);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);\n-        assertTrue(Arrays.equals(new double[] {2}, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);\n-        assertTrue(Arrays.equals(new double[] {2, 1}, array));\n-        assertEquals(Double.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementFloatArray() {\n-        float[] array;\n-        array = ArrayUtils.removeElement((float[]) null, (float) 1);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);\n-        assertTrue(Arrays.equals(new float[] {2}, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);\n-        assertTrue(Arrays.equals(new float[] {2, 1}, array));\n-        assertEquals(Float.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementIntArray() {\n-        int[] array;\n-        array = ArrayUtils.removeElement((int[]) null, 1);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new int[] {1}, 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);\n-        assertTrue(Arrays.equals(new int[] {2}, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);\n-        assertTrue(Arrays.equals(new int[] {2, 1}, array));\n-        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementLongArray() {\n-        long[] array;\n-        array = ArrayUtils.removeElement((long[]) null, (long) 1);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);\n-        assertTrue(Arrays.equals(new long[] {2}, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);\n-        assertTrue(Arrays.equals(new long[] {2, 1}, array));\n-        assertEquals(Long.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-    public void testRemoveElementShortArray() {\n-        short[] array;\n-        array = ArrayUtils.removeElement((short[]) null, (short) 1);\n-        assertNull(array);\n-        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);\n-        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);\n-        assertTrue(Arrays.equals(new short[] {2}, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);\n-        assertTrue(Arrays.equals(new short[] {2, 1}, array));\n-        assertEquals(Short.TYPE, array.getClass().getComponentType());\n-    }\n-    \n-}\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests ArrayUtils remove and removeElement methods.\n+ * \n+ * @author Maarten Coene\n+ * @version $Id$\n+ */\n+public class ArrayUtilsRemoveTest extends TestCase {\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ArrayUtilsRemoveTest.class);\n+        suite.setName(\"ArrayUtils remove Tests\");\n+        return suite;\n+    }\n+\n+    public void testRemoveObjectArray() {\n+        Object[] array;\n+        array = ArrayUtils.remove(new Object[] {\"a\"}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 0);\n+        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 1);\n+        assertTrue(Arrays.equals(new Object[] {\"a\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new Object[] {\"a\", \"b\", \"c\"}, 1);\n+        assertTrue(Arrays.equals(new Object[] {\"a\", \"c\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((Object[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveBooleanArray() {\n+        boolean[] array;\n+        array = ArrayUtils.remove(new boolean[] {true}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new boolean[] {true, false}, 0);\n+        assertTrue(Arrays.equals(new boolean[] {false}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new boolean[] {true, false}, 1);\n+        assertTrue(Arrays.equals(new boolean[] {true}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);\n+        assertTrue(Arrays.equals(new boolean[] {true, true}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new boolean[] {true, false}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new boolean[] {true, false}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((boolean[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveByteArray() {\n+        byte[] array;\n+        array = ArrayUtils.remove(new byte[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new byte[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new byte[] {2}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new byte[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new byte[] {1}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new byte[] {1, 1}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new byte[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new byte[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((byte[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveCharArray() {\n+        char[] array;\n+        array = ArrayUtils.remove(new char[] {'a'}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);\n+        assertTrue(Arrays.equals(new char[] {'b'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);\n+        assertTrue(Arrays.equals(new char[] {'a'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);\n+        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new char[] {'a', 'b'}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new char[] {'a', 'b'}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((char[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveDoubleArray() {\n+        double[] array;\n+        array = ArrayUtils.remove(new double[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new double[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new double[] {2}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new double[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new double[] {1}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new double[] {1, 1}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new double[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new double[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((double[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveFloatArray() {\n+        float[] array;\n+        array = ArrayUtils.remove(new float[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new float[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new float[] {2}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new float[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new float[] {1}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new float[] {1, 1}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new float[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new float[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((float[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveIntArray() {\n+        int[] array;\n+        array = ArrayUtils.remove(new int[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new int[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new int[] {2}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new int[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new int[] {1}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new int[] {1, 1}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new int[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new int[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((int[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveLongArray() {\n+        long[] array;\n+        array = ArrayUtils.remove(new long[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new long[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new long[] {2}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new long[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new long[] {1}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new long[] {1, 1}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new long[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new long[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((long[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveShortArray() {\n+        short[] array;\n+        array = ArrayUtils.remove(new short[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new short[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new short[] {2}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new short[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new short[] {1}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new short[] {1, 1}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new short[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new short[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((short[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveElementObjectArray() {\n+        Object[] array;\n+        array = ArrayUtils.removeElement((Object[]) null, \"a\");\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new Object[] {\"a\"}, \"a\");\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\"}, \"a\");\n+        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\", \"a\"}, \"a\");\n+        assertTrue(Arrays.equals(new Object[] {\"b\", \"a\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementBooleanArray() {\n+        boolean[] array;\n+        array = ArrayUtils.removeElement((boolean[]) null, true);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new boolean[] {true}, true);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);\n+        assertTrue(Arrays.equals(new boolean[] {false}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);\n+        assertTrue(Arrays.equals(new boolean[] {false, true}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementByteArray() {\n+        byte[] array;\n+        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);\n+        assertTrue(Arrays.equals(new byte[] {2}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);\n+        assertTrue(Arrays.equals(new byte[] {2, 1}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementCharArray() {\n+        char[] array;\n+        array = ArrayUtils.removeElement((char[]) null, 'a');\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');\n+        assertTrue(Arrays.equals(new char[] {'b'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');\n+        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementDoubleArray() {\n+        double[] array;\n+        array = ArrayUtils.removeElement((double[]) null, (double) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);\n+        assertTrue(Arrays.equals(new double[] {2}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);\n+        assertTrue(Arrays.equals(new double[] {2, 1}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementFloatArray() {\n+        float[] array;\n+        array = ArrayUtils.removeElement((float[]) null, (float) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);\n+        assertTrue(Arrays.equals(new float[] {2}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);\n+        assertTrue(Arrays.equals(new float[] {2, 1}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementIntArray() {\n+        int[] array;\n+        array = ArrayUtils.removeElement((int[]) null, 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new int[] {1}, 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new int[] {2}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new int[] {2, 1}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementLongArray() {\n+        long[] array;\n+        array = ArrayUtils.removeElement((long[]) null, (long) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);\n+        assertTrue(Arrays.equals(new long[] {2}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);\n+        assertTrue(Arrays.equals(new long[] {2, 1}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementShortArray() {\n+        short[] array;\n+        array = ArrayUtils.removeElement((short[]) null, (short) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);\n+        assertTrue(Arrays.equals(new short[] {2}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);\n+        assertTrue(Arrays.equals(new short[] {2, 1}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n  * @author Maarten Coene\n- * @version $Id: ArrayUtilsTest.java,v 1.29 2004/10/10 18:56:16 scolebourne Exp $\n+ * @version $Id$\n  */\n public class ArrayUtilsTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/CharEncodingTest.java\n+++ b/src/test/org/apache/commons/lang/CharEncodingTest.java\n  * \n  * @see CharEncoding\n  * @author Gary D. Gregory\n- * @version $Id: CharEncodingTest.java,v 1.1 2004/10/02 01:46:30 bayard Exp $\n+ * @version $Id$\n  */\n public class CharEncodingTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/CharRangeTest.java\n+++ b/src/test/org/apache/commons/lang/CharRangeTest.java\n  * Unit tests {@link org.apache.commons.lang.CharRange}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: CharRangeTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class CharRangeTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/CharSetTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n- * @version $Id: CharSetTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class CharSetTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/CharUtilsPerfTest.java\n+++ b/src/test/org/apache/commons/lang/CharUtilsPerfTest.java\n run_inlined_CharUtils_isAsciiNumeric: 84,420 milliseconds.\n \n \n- * @version $Id: CharUtilsPerfTest.java,v 1.2 2004/03/19 00:29:32 ggregory Exp $\n+ * @version $Id$\n  */\n public class CharUtilsPerfTest {\n-    final static String VERSION = \"$Id: CharUtilsPerfTest.java,v 1.2 2004/03/19 00:29:32 ggregory Exp $\";\n+    final static String VERSION = \"$Id$\";\n \n     final static int WARM_UP = 100;\n \n--- a/src/test/org/apache/commons/lang/EntitiesTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesTest.java\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: EntitiesTest.java,v 1.9 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class EntitiesTest extends TestCase\n {\n--- a/src/test/org/apache/commons/lang/IllegalClassExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/IllegalClassExceptionTest.java\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: IllegalClassExceptionTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  * @see IllegalClassException\n  */\n public class IllegalClassExceptionTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/IncompleteArgumentExceptionTest.java\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: IncompleteArgumentExceptionTest.java,v 1.3 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  * @see IncompleteArgumentException\n  */\n public class IncompleteArgumentExceptionTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.29 2004/10/02 01:46:30 bayard Exp $\n+ * @version $Id$\n  */\n public class LangTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/NotImplementedExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/NotImplementedExceptionTest.java\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: NotImplementedExceptionTest.java,v 1.4 2004/03/04 00:13:38 scolebourne Exp $\n+ * @version $Id$\n  * @see NotImplementedException\n  */\n public class NotImplementedExceptionTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/NullArgumentExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/NullArgumentExceptionTest.java\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n- * @version $Id: NullArgumentExceptionTest.java,v 1.5 2004/10/15 23:10:33 scolebourne Exp $\n+ * @version $Id$\n  * @see NullArgumentException\n  */\n public class NullArgumentExceptionTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/NumberRangeTest.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Tim O'Brien\n- * @version $Revision: 1.8 $ $Date$\n+ * @version $Revision$ $Date$\n  */\n \n public final class NumberRangeTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/NumberUtilsTest.java\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @author Stephen Colebourne\n- * @version $Id: NumberUtilsTest.java,v 1.11 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class NumberUtilsTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: ObjectUtilsTest.java,v 1.13 2004/06/01 21:08:48 scolebourne Exp $\n+ * @version $Id$\n  */\n public class ObjectUtilsTest extends TestCase {\n     private static final String FOO = \"foo\";\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.15 2004/10/16 18:52:21 scolebourne Exp $\n+ * @version $Id$\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  * @author Stephen Colebourne\n  * @author Tetsuya Kaneuchi\n  * @author Gary D. Gregory\n- * @version $Id: SystemUtilsTest.java,v 1.11 2004/11/12 00:48:41 scolebourne Exp $\n+ * @version $Id$\n  */\n public class SystemUtilsTest extends TestCase {\n     public static void main(String[] args) {\n--- a/src/test/org/apache/commons/lang/UnhandledExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/UnhandledExceptionTest.java\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: UnhandledExceptionTest.java,v 1.4 2004/02/18 23:22:29 ggregory Exp $\n+ * @version $Id$\n  * @see UnhandledException\n  */\n public class UnhandledExceptionTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/WordUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n- * @version $Id: WordUtilsTest.java,v 1.8 2004/10/08 22:10:23 scolebourne Exp $\n+ * @version $Id$\n  */\n public class WordUtilsTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n+++ b/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n  * Test suite for the Lang Builder package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: BuilderTestSuite.java,v 1.8 2004/12/28 23:13:03 scolebourne Exp $\n+ * @version $Id$\n  */\n public class BuilderTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.DefaultToStringStyleTest}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: DefaultToStringStyleTest.java,v 1.6 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class DefaultToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Maarten Coene\n- * @version $Id: EqualsBuilderTest.java,v 1.13 2005/01/17 01:59:52 ggregory Exp $\n+ * @version $Id$\n  */\n public class EqualsBuilderTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java\n  * objects must have equal hash codes.\n  * \n  * @author Gary Gregory\n- * @version $Id: HashCodeBuilderAndEqualsBuilderTest.java,v 1.5 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class HashCodeBuilderAndEqualsBuilderTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.HashCodeBuilder}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: HashCodeBuilderTest.java,v 1.7 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class HashCodeBuilderTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.MultiLineToStringStyleTest}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: MultiLineToStringStyleTest.java,v 1.8 2004/02/18 23:22:30 ggregory Exp $\n+ * @version $Id$\n  */\n public class MultiLineToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: NoFieldNamesToStringStyleTest.java,v 1.6 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class NoFieldNamesToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE}.\n  * \n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: ShortPrefixToStringStyleTest.java,v 1.2 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class ShortPrefixToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.SimpleToStringStyleTest}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: SimpleToStringStyleTest.java,v 1.6 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class SimpleToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StandardToStringStyleTest.java,v 1.7 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class StandardToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/builder/ToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringStyleTest.java\n  * Test case for ToStringStyle.\n  * \n  * @author Masato Tezuka\n- * @version $Id: ToStringStyleTest.java,v 1.1 2004/12/28 23:13:03 scolebourne Exp $\n+ * @version $Id$\n  */\n public class ToStringStyleTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/enum/Broken1Enum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken1Enum.java\n  * Broken color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Broken1Enum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public final class Broken1Enum extends Enum {\n     public static final Broken1Enum RED = new Broken1Enum(\"Red\");\n--- a/src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken1OperationEnum.java\n  * Broken Operator enumeration, null class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken1OperationEnum.java,v 1.3 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken1OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enum/Broken2Enum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken2Enum.java\n  * Broken color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Broken2Enum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public final class Broken2Enum extends Enum {\n     public static final Broken2Enum RED = new Broken2Enum(\"Red\");\n--- a/src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken2OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() not superclass.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken2OperationEnum.java,v 1.3 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken2OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enum/Broken3Enum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken3Enum.java\n  * Broken color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Broken3Enum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public final class Broken3Enum extends Enum {\n     public static final Broken3Enum RED = new Broken3Enum(\"Red\");\n--- a/src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken3OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() is Enum.class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken3OperationEnum.java,v 1.3 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken3OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken4OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() is ValuedEnum.class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken4OperationEnum.java,v 1.3 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken4OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/Broken5OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() is not an Enum class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken5OperationEnum.java,v 1.3 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken5OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enum/ColorEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/ColorEnum.java\n  * Color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ColorEnum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class ColorEnum extends Enum {\n--- a/src/test/org/apache/commons/lang/enum/DummyEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/DummyEnum.java\n  * Dummy enumeration - no values.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: DummyEnum.java,v 1.3 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class DummyEnum extends Enum {\n \n--- a/src/test/org/apache/commons/lang/enum/EnumTestSuite.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTestSuite.java\n  * Test suite for the Enum package.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumTestSuite.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class EnumTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumUtilsTest.java,v 1.7 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class EnumUtilsTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/enum/Extended1Enum.java\n+++ b/src/test/org/apache/commons/lang/enum/Extended1Enum.java\n  * Base extended enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Extended1Enum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class Extended1Enum extends Enum {\n     public static final Extended1Enum ALPHA = new Extended1Enum(\"Alpha\");\n--- a/src/test/org/apache/commons/lang/enum/Extended2Enum.java\n+++ b/src/test/org/apache/commons/lang/enum/Extended2Enum.java\n  * Extended enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Extended2Enum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class Extended2Enum extends Extended1Enum {\n     public static final Extended1Enum GAMMA = new Extended2Enum(\"Gamma\");\n--- a/src/test/org/apache/commons/lang/enum/Extended3Enum.java\n+++ b/src/test/org/apache/commons/lang/enum/Extended3Enum.java\n  * Extended enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Extended3Enum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class Extended3Enum extends Extended2Enum {\n     public static final Extended1Enum DELTA = new Extended3Enum(\"Delta\");\n--- a/src/test/org/apache/commons/lang/enum/Nest.java\n+++ b/src/test/org/apache/commons/lang/enum/Nest.java\n  * to any other class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Nest.java,v 1.2 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class Nest {\n--- a/src/test/org/apache/commons/lang/enum/NestBroken.java\n+++ b/src/test/org/apache/commons/lang/enum/NestBroken.java\n  * referenced.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: NestBroken.java,v 1.2 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class NestBroken {\n--- a/src/test/org/apache/commons/lang/enum/NestLinked.java\n+++ b/src/test/org/apache/commons/lang/enum/NestLinked.java\n  * class load of the outer class, which is needed to initialise the enums.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: NestLinked.java,v 1.2 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class NestLinked {\n--- a/src/test/org/apache/commons/lang/enum/NestReferenced.java\n+++ b/src/test/org/apache/commons/lang/enum/NestReferenced.java\n  * See NestedLinked for an alternative.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: NestReferenced.java,v 1.2 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class NestReferenced {\n--- a/src/test/org/apache/commons/lang/enum/OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/OperationEnum.java\n  * Operator enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: OperationEnum.java,v 1.7 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enum/ValuedColorEnum.java\n+++ b/src/test/org/apache/commons/lang/enum/ValuedColorEnum.java\n  * Color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ValuedColorEnum.java,v 1.4 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class ValuedColorEnum extends ValuedEnum {\n--- a/src/test/org/apache/commons/lang/enums/Broken1Enum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken1Enum.java\n  * Broken color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Broken1Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public final class Broken1Enum extends Enum {\n     public static final Broken1Enum RED = new Broken1Enum(\"Red\");\n--- a/src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java\n  * Broken Operator enumeration, null class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken1OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken1OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enums/Broken2Enum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken2Enum.java\n  * Broken color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Broken2Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public final class Broken2Enum extends Enum {\n     public static final Broken2Enum RED = new Broken2Enum(\"Red\");\n--- a/src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() not superclass.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken2OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken2OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enums/Broken3Enum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken3Enum.java\n  * Broken color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: Broken3Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public final class Broken3Enum extends Enum {\n     public static final Broken3Enum RED = new Broken3Enum(\"Red\");\n--- a/src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() is Enum.class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken3OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken3OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() is ValuedEnum.class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken4OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken4OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java\n  * Broken Operator enumeration, getEnumClass() is not an Enum class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Broken5OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class Broken5OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enums/ColorEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/ColorEnum.java\n  * Color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ColorEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class ColorEnum extends Enum {\n--- a/src/test/org/apache/commons/lang/enums/DummyEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/DummyEnum.java\n  * Dummy enumeration - no values.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: DummyEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class DummyEnum extends Enum {\n \n--- a/src/test/org/apache/commons/lang/enums/EnumEqualsTest.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumEqualsTest.java\n  *\n  * @author Matthias Eichel\n  * @author Stephen Colebourne\n- * @version $Id: EnumEqualsTest.java,v 1.1 2004/06/01 20:54:57 scolebourne Exp $\n+ * @version $Id$\n  */\n public final class EnumEqualsTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/enums/EnumTestSuite.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumTestSuite.java\n  * Test suite for the Enum package.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumTestSuite.java,v 1.2 2004/06/01 20:54:57 scolebourne Exp $\n+ * @version $Id$\n  */\n public class EnumTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/enums/EnumUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumUtilsTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumUtilsTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class EnumUtilsTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/enums/Extended1Enum.java\n+++ b/src/test/org/apache/commons/lang/enums/Extended1Enum.java\n  * Base extended enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Extended1Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public class Extended1Enum extends Enum {\n     public static final Extended1Enum ALPHA = new Extended1Enum(\"Alpha\");\n--- a/src/test/org/apache/commons/lang/enums/Extended2Enum.java\n+++ b/src/test/org/apache/commons/lang/enums/Extended2Enum.java\n  * Extended enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Extended2Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public class Extended2Enum extends Extended1Enum {\n     public static final Extended1Enum GAMMA = new Extended2Enum(\"Gamma\");\n--- a/src/test/org/apache/commons/lang/enums/Extended3Enum.java\n+++ b/src/test/org/apache/commons/lang/enums/Extended3Enum.java\n  * Extended enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Extended3Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public class Extended3Enum extends Extended2Enum {\n     public static final Extended1Enum DELTA = new Extended3Enum(\"Delta\");\n--- a/src/test/org/apache/commons/lang/enums/Nest.java\n+++ b/src/test/org/apache/commons/lang/enums/Nest.java\n  * to any other class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: Nest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class Nest {\n--- a/src/test/org/apache/commons/lang/enums/NestBroken.java\n+++ b/src/test/org/apache/commons/lang/enums/NestBroken.java\n  * referenced.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: NestBroken.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class NestBroken {\n--- a/src/test/org/apache/commons/lang/enums/NestLinked.java\n+++ b/src/test/org/apache/commons/lang/enums/NestLinked.java\n  * class load of the outer class, which is needed to initialise the enums.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: NestLinked.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class NestLinked {\n--- a/src/test/org/apache/commons/lang/enums/NestReferenced.java\n+++ b/src/test/org/apache/commons/lang/enums/NestReferenced.java\n  * See NestedLinked for an alternative.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: NestReferenced.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class NestReferenced {\n--- a/src/test/org/apache/commons/lang/enums/OperationEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/OperationEnum.java\n  * Operator enumeration.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class OperationEnum extends Enum {\n     // This syntax works for JDK 1.3 and upwards:\n--- a/src/test/org/apache/commons/lang/enums/ValuedColorEnum.java\n+++ b/src/test/org/apache/commons/lang/enums/ValuedColorEnum.java\n  * Color enumeration.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ValuedColorEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class ValuedColorEnum extends ValuedEnum {\n--- a/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n  * interface.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: AbstractNestableTestCase.java,v 1.7 2004/10/09 10:45:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public abstract class AbstractNestableTestCase extends TestCase\n {\n--- a/src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableError class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableErrorTestCase.java,v 1.7 2004/10/09 10:45:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public class NestableErrorTestCase extends AbstractNestableTestCase {\n     \n--- a/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableRuntimeException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public class NestableRuntimeExceptionTestCase extends AbstractNestableTestCase {\n     \n--- a/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n  * Test cases for the {@link Range} classes.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: AbstractRangeTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public abstract class AbstractRangeTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n  * Test cases for the {@link DoubleRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: DoubleRangeTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public final class DoubleRangeTest extends AbstractRangeTest {\n \n--- a/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n  * Test cases for the {@link FloatRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: FloatRangeTest.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public final class FloatRangeTest extends AbstractRangeTest {\n \n--- a/src/test/org/apache/commons/lang/math/FractionTest.java\n+++ b/src/test/org/apache/commons/lang/math/FractionTest.java\n  *\n  * @author Stephen Colebourne\n  * @author C. Scott Ananian\n- * @version $Id: FractionTest.java,v 1.8 2004/12/25 19:43:51 bayard Exp $\n+ * @version $Id$\n  */\n public class FractionTest extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/math/IntRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/IntRangeTest.java\n  * @author Stephen Colebourne\n  * @author Janek Bogucki\n  * @author Phil Steitz\n- * @version $Id: IntRangeTest.java,v 1.7 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public final class IntRangeTest extends AbstractRangeTest {\n \n--- a/src/test/org/apache/commons/lang/math/LongRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/LongRangeTest.java\n  * Test cases for the {@link LongRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: LongRangeTest.java,v 1.5 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public final class LongRangeTest extends AbstractRangeTest {\n \n--- a/src/test/org/apache/commons/lang/math/MathTestSuite.java\n+++ b/src/test/org/apache/commons/lang/math/MathTestSuite.java\n  * Test suite for the Math package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: MathTestSuite.java,v 1.6 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public class MathTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n- * @version $Id: NumberRangeTest.java,v 1.5 2004/02/18 23:02:38 ggregory Exp $\n+ * @version $Id$\n  */\n public final class NumberRangeTest extends AbstractRangeTest {\n \n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: NumberUtilsTest.java,v 1.12 2004/02/18 23:22:30 ggregory Exp $\n+ * @version $Id$\n  */\n public class NumberUtilsTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n  * Test cases for the {@link RandomUtils} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.8 $ $Date: 2004/12/25 17:52:19 $\n+ * @version $Revision$ $Date$\n  */\n \n public final class RandomUtilsTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableObjectTest.java,v 1.2 2004/12/26 02:35:47 bayard Exp $\n+ * @version $Id$\n  * @see MutableShort\n  */\n public class MutableObjectTest extends TestCase {\n--- a/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n /**\n  * JUnit tests.\n  *\n- * @version $Id: MutableTestSuite.java,v 1.4 2004/07/08 00:02:35 scolebourne Exp $\n+ * @version $Id$\n  */\n public class MutableTestSuite {\n \n--- a/src/test/org/apache/commons/lang/text/TextTestSuite.java\n+++ b/src/test/org/apache/commons/lang/text/TextTestSuite.java\n  * Test suite for the Text package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: TextTestSuite.java,v 1.2 2004/10/06 22:29:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public class TextTestSuite extends TestCase {\n     \n--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Fredrik Westermarck\n  * @since 2.0\n- * @version $Id: FastDateFormatTest.java,v 1.11 2004/09/30 06:12:17 bayard Exp $\n+ * @version $Id$\n  */\n public class FastDateFormatTest extends TestCase {\n \n--- a/src/test/org/apache/commons/lang/time/TimeTestSuite.java\n+++ b/src/test/org/apache/commons/lang/time/TimeTestSuite.java\n  * Test suite for the Time package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: TimeTestSuite.java,v 1.6 2004/02/18 23:03:03 ggregory Exp $\n+ * @version $Id$\n  */\n public class TimeTestSuite extends TestCase {\n     ", "timestamp": 1109423310, "metainfo": ""}