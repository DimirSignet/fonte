{"sha": "fbae4587540b4fe7fec8d95983c231c109b2dd4e", "log": "Remove lastIndex(), which is better done as getLength() - 1   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.48 2004/10/09 11:55:51 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.49 2004/10/10 18:56:16 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n             return Array.getLength(array);\n         }\n     }\n-    \n-    /**\n-     * Returns the last index of the given array or -1 if empty or null.\n-     * This method can deal with <code>Object</code> arrays and with primitive arrays.\n-     * This value is one less than the size since arrays indices are 0-based.</p>\n-     *\n-     * <pre>\n-     * ArrayUtils.lastIndex(null)            = -1\n-     * ArrayUtils.lastIndex([])              = -1\n-     * ArrayUtils.lastIndex([null])          = 0\n-     * ArrayUtils.lastIndex([true, false])   = 1\n-     * ArrayUtils.lastIndex([1, 2, 3])       = 2\n-     * ArrayUtils.lastIndex([\"a\", \"b\", \"c\"]) = 2\n-     * </pre>\n-     *  \n-     * @param array  the array to return the last index for, may be null\n-     * @return the last index, -1 if empty or null\n-     * @throws IllegalArgumentException if the object arguement is not an array.\n-     * @since 2.1\n-     */\n-    public static int lastIndex(Object array) {\n-        return ArrayUtils.getLength(array) - 1;\n-    }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.</p>\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n  * @author Maarten Coene\n- * @version $Id: ArrayUtilsTest.java,v 1.28 2004/08/25 21:20:13 ggregory Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.29 2004/10/10 18:56:16 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n             fail(\"IllegalArgumentException should have been thrown\");\n         } catch (IllegalArgumentException e) {}\n     }\n-    \n-    public void testLastIndex() {\n-        assertEquals(-1, ArrayUtils.lastIndex(null));\n-        \n-        Object[] emptyObjectArray = new Object[0];\n-        Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n-        assertEquals(-1, ArrayUtils.lastIndex((Object[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyObjectArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyObjectArray));\n- \n-        int[] emptyIntArray = new int[] {};\n-        int[] notEmptyIntArray = new int[] { 1 };\n-        assertEquals(-1, ArrayUtils.lastIndex((int[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyIntArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyIntArray));\n-\n-        short[] emptyShortArray = new short[] {};\n-        short[] notEmptyShortArray = new short[] { 1 };\n-        assertEquals(-1, ArrayUtils.lastIndex((short[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyShortArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyShortArray));\n-\n-        char[] emptyCharArray = new char[] {};\n-        char[] notEmptyCharArray = new char[] { 1 };\n-        assertEquals(-1, ArrayUtils.lastIndex((char[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyCharArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyCharArray));\n-\n-        byte[] emptyByteArray = new byte[] {};\n-        byte[] notEmptyByteArray = new byte[] { 1 };\n-        assertEquals(-1, ArrayUtils.lastIndex((byte[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyByteArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyByteArray));\n-\n-        double[] emptyDoubleArray = new double[] {};\n-        double[] notEmptyDoubleArray = new double[] { 1.0 };\n-        assertEquals(-1, ArrayUtils.lastIndex((double[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyDoubleArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyDoubleArray));\n-\n-        float[] emptyFloatArray = new float[] {};\n-        float[] notEmptyFloatArray = new float[] { 1.0F };\n-        assertEquals(-1, ArrayUtils.lastIndex((float[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyFloatArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyFloatArray));\n-\n-        boolean[] emptyBooleanArray = new boolean[] {};\n-        boolean[] notEmptyBooleanArray = new boolean[] { true };\n-        assertEquals(-1, ArrayUtils.lastIndex((boolean[]) null));\n-        assertEquals(-1, ArrayUtils.lastIndex(emptyBooleanArray));\n-        assertEquals(0, ArrayUtils.lastIndex(notEmptyBooleanArray));\n-        \n-        try {\n-            ArrayUtils.lastIndex(\"notAnArray\");\n-            fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (IllegalArgumentException e) {}\n-    }\n-    \n+\n }", "timestamp": 1097434576, "metainfo": ""}