{"sha": "fddba95d4dc85d458ba8c574ab284ced8b8e1e34", "log": "More unit tests and bugfixes. The currently failing test is commented out, so more bugfixes to come.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n \n import java.util.Calendar;\n import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.TimeZone;\n \n /**\n             hours += 24;\n             days -= 1;\n         }\n+        // TODO: Create a test to see if this should be while. ie) one that makes hours above \n+        //       overflow and pushes this above the maximum # of days in a month?\n+        int leapDays = 0;\n         if (days < 0) {\n             days += start.getActualMaximum(Calendar.DAY_OF_MONTH);\n             // It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n             // Also it's contextual - if asked for no M in the format then I should probably \n             // be doing no calculating here.\n             months -= 1;\n+            start.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n+            if (start instanceof GregorianCalendar) {\n+                if ( ((GregorianCalendar) start).isLeapYear(start.get(Calendar.YEAR) + 1) &&\n+                     ( end.get(Calendar.MONTH) > 1) )  \n+                {\n+                    leapDays += 1;\n+                }\n+            }\n+            if (end instanceof GregorianCalendar) {\n+                if ( ((GregorianCalendar) end).isLeapYear(end.get(Calendar.YEAR)) &&\n+                     ( end.get(Calendar.MONTH) < 1) )  \n+                {\n+                    leapDays -= 1;\n+                }\n+            }\n             start.add(Calendar.YEAR, 1);\n         }\n \n         // aren't requested. This allows the user to ask for the \n         // number of months and get the real count and not just 0->11.\n         \n-        if (!Token.containsTokenWithValue(tokens, y)) {\n+        if (!Token.containsTokenWithValue(tokens, y) && years != 0) {\n             if (Token.containsTokenWithValue(tokens, M)) {\n                 months += 12 * years;\n                 years = 0;\n             } else {\n-            \twhile(start.get(Calendar.YEAR) != end.get(Calendar.YEAR)) {\n-            \t\tdays += start.getActualMaximum(Calendar.DAY_OF_YEAR);\n-            \t\tstart.add(Calendar.YEAR, 1);\n+            \twhile ( (start.get(Calendar.YEAR) != end.get(Calendar.YEAR))) {\n+                    days += start.getActualMaximum(Calendar.DAY_OF_YEAR);\n+                    start.add(Calendar.YEAR, 1);\n             \t}\n                 years = 0;\n             }\n         }\n+        start.set(Calendar.YEAR, end.get(Calendar.YEAR));\n                 \n-        if (!Token.containsTokenWithValue(tokens, M) && months != 0) {\n-        \tstart.set(start.get(Calendar.YEAR), start.get(Calendar.MONTH), 0, 0, 0, 0);\n+        if (!Token.containsTokenWithValue(tokens, M) && months != 0) {   \n+            while(start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {\n+        \tString date = start.getTime().toString();\n+        \tdays += start.getActualMaximum(Calendar.DAY_OF_MONTH);\n         \tstart.add(Calendar.MONTH, 1);\n-        \tend.set(end.get(Calendar.YEAR), end.get(Calendar.MONTH), 0, 0, 0, 0);\n-            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);\n-            months = 0;\n-            \n-        \t// WARNING: For performance sake the Calendar instances are not being \n-        \t// cloned but modified inline. They should not be trusted after this point\n-            start = null;\n-            end = null;\n-        }\n+            }\n+            days += leapDays;\n+            months = 0;            \n+        }\n+        start.set(Calendar.MONTH, end.get(Calendar.MONTH));\n+\n         if (!Token.containsTokenWithValue(tokens, d)) {\n             hours += 24 * days;\n             days = 0;\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n         assertEqualDuration( \"365\", new int[] { 2006, 0, 1, 0, 0, 0 },\n                              new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n     \n+        assertEqualDuration( \"31\", new int[] { 2006, 0, 1, 0, 0, 0 },\n+                new int[] { 2006, 1, 1, 0, 0, 0 }, \"dd\"); \n+        \n+        assertEqualDuration( \"92\", new int[] { 2005, 9, 1, 0, 0, 0 },\n+                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n+        assertEqualDuration( \"77\", new int[] { 2005, 9, 16, 0, 0, 0 },\n+                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        // test month larger in start than end\n+        assertEqualDuration( \"136\", new int[] { 2005, 9, 16, 0, 0, 0 },\n+                new int[] { 2006, 2, 1, 0, 0, 0 }, \"dd\"); \n+        // test when start in leap year\n+        assertEqualDuration( \"136\", new int[] { 2004, 9, 16, 0, 0, 0 },\n+                new int[] { 2005, 2, 1, 0, 0, 0 }, \"dd\"); \n+        // test when end in leap year\n+        assertEqualDuration( \"137\", new int[] { 2003, 9, 16, 0, 0, 0 },\n+                new int[] { 2004, 2, 1, 0, 0, 0 }, \"dd\");         \n+        // test when end in leap year but less than end of feb\n+        assertEqualDuration( \"135\", new int[] { 2003, 9, 16, 0, 0, 0 },\n+                new int[] { 2004, 1, 28, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"364\", new int[] { 2007, 0, 2, 0, 0, 0 },\n+                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n+        assertEqualDuration( \"729\", new int[] { 2006, 0, 2, 0, 0, 0 },\n+                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"365\", new int[] { 2007, 2, 2, 0, 0, 0 },\n+                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n+    }\n+    \n+    public void testDurationsByBruteForce() {\n+        bruteForce(2006, 0, 1);\n+        bruteForce(2006, 0, 2);\n+//        bruteForce(2006, 1, 2);\n+    }\n+        \n+    private void bruteForce(int year, int month, int day) {\n+        String msg = year + \"-\" + month + \"-\" + day + \" at \";\n+        Calendar c = Calendar.getInstance();\n+        c.set(year, month, day, 0, 0, 0);\n+        int[] array1 = new int[] { year, month, day, 0, 0, 0 };\n+        int[] array2 = new int[] { year, month, day, 0, 0, 0 };\n+        for (int i=0; i < 1500; i++) {\n+            array2[0] = c.get(Calendar.YEAR);\n+            array2[1] = c.get(Calendar.MONTH);\n+            array2[2] = c.get(Calendar.DAY_OF_MONTH);\n+            assertEqualDuration( msg + i, Integer.toString(i), array1, array2, \"d\" );\n+            c.add(Calendar.DAY_OF_MONTH, 1);\n+        }\n     }\n \n     private void assertEqualDuration(String expected, int[] start, int[] end, String format) {\n+        assertEqualDuration(null, expected, start, end, format);\n+    }\n+    private void assertEqualDuration(String message, String expected, int[] start, int[] end, String format) {\n         Calendar cal1 = Calendar.getInstance();\n         cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);\n         cal1.set(Calendar.MILLISECOND, 0);\n         long milli1 = cal1.getTime().getTime();\n         long milli2 = cal2.getTime().getTime();\n         String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);\n-        assertEquals(expected, result);\n+        if (message == null) {\n+            assertEquals(expected, result);\n+        } else {\n+            assertEquals(message, expected, result);\n+        }\n     }\n \n     private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {", "timestamp": 1165993764, "metainfo": ""}