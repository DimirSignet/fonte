{"sha": "77dfa63dc66aec684e9ef8dc5dee4d110dae16fc", "log": "Javadoc null behaviour   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharRange.java,v 1.6 2003/07/14 22:25:02 bayard Exp $\n+ * @version $Id: CharRange.java,v 1.7 2003/07/16 00:39:05 scolebourne Exp $\n  */\n class CharRange {\n \n      * @param start  String start first character is in this range (inclusive).\n      * @param close  String first character is close character in this\n      *  range (inclusive).\n+     * @throws NullPointerException if either String is <code>null</code>\n      */\n     public CharRange(String start, String close) {\n         this.start = start.charAt(0);\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.12 2003/07/14 22:25:02 bayard Exp $\n+ * @version $Id: CharSetUtils.java,v 1.13 2003/07/16 00:39:05 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n      *\n      * @param str  the string to work from\n      * @param set  the character set to use for manipulation\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static String squeeze(String str, String set) {\n         String[] strs = new String[1];\n      * \n      * @param str  the string to work from\n      * @param set  the character set to use for manipulation\n-     * @throws NullPointerException if <code>str</code> is\n-     *  <code>null</code>\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     *  or any element is <code>null</code>\n      */\n     public static String squeeze(String str, String[] set) {\n         CharSet chars = evaluateSet(set);\n      *\n      * @param str  String target to count characters in\n      * @param set  String set of characters to count\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static int count(String str, String set) {\n         String[] strs = new String[1];\n      *\n      * @param str  String target to count characters in\n      * @param set  String[] set of characters to count\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     *  or any element is <code>null</code>\n      */\n     public static int count(String str, String[] set) {\n         CharSet chars = evaluateSet(set);\n      *\n      * @param str  String target to keep characters from\n      * @param set  String set of characters to keep\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static String keep(String str, String set) {\n         String[] strs = new String[1];\n      *\n      * @param str  String target to keep characters from\n      * @param set  String[] set of characters to keep\n-     * @throws NullPointerException of <code>str</code> is\n-     *  <code>null</code>\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     *  or any element is <code>null</code>\n      */\n     public static String keep(String str, String[] set) {\n         return modify(str, set, true);\n      *\n      * @param str  String target to delete characters from\n      * @param set  String set of characters to delete\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static String delete(String str, String set) {\n         String[] strs = new String[1];\n      *\n      * @param str  String target to delete characters from\n      * @param set  String[] set of characters to delete\n-     * @throws NullPointerException of <code>str</code> is\n-     *  <code>null</code>\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n+     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     *  or any element is <code>null</code>\n      */\n     public static String delete(String str, String[] set) {\n         return modify(str, set, false);\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.13 2003/07/14 22:25:02 bayard Exp $\n+ * @version $Id: ClassUtils.java,v 1.14 2003/07/16 00:39:05 scolebourne Exp $\n  */\n public class ClassUtils {\n \n     /**\n      * <p>Gets the class name minus the package name for an <code>Object</code>.</p>\n      * \n-     * @param object  the class to get the short name for\n+     * @param object  the class to get the short name for, may be null\n      * @param valueIfNull  the value to return if null\n      * @return the class name of the object without the package name, or the null value\n      */\n     /**\n      * <p>Gets the package name of an <code>Object</code>.</p>\n      * \n-     * @param object  the class to get the package name for\n+     * @param object  the class to get the package name for, may be null\n      * @param valueIfNull  the value to return if null\n      * @return the package name of the object, or the null value\n      */\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.9 2003/07/14 22:25:03 bayard Exp $\n+ * @version $Id: ObjectUtils.java,v 1.10 2003/07/16 00:39:05 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n      * <p>Returns a default value if the object passed is\n      * <code>null</code>.</p>\n      *\n-     * @param object  the <code>Object</code> to test\n-     * @param defaultValue  the default value to return\n+     * @param object  the <code>Object</code> to test, may be <code>null</code>\n+     * @param defaultValue  the default value to return, may be <code>null</code>\n      * @return <code>object</code> if it is not <code>null</code>, defaultValue otherwise\n      */\n     public static Object defaultIfNull(Object object, Object defaultValue) {\n      * <p>Compares two objects for equality, where either one or both\n      * objects may be <code>null</code>.</p>\n      *\n-     * @param object1  the first object\n-     * @param object2  the second object\n+     * @param object1  the first object, may be <code>null</code>\n+     * @param object2  the second object, may be <code>null</code>\n      * @return <code>true</code> if the values of both objects are the same\n      */\n     public static boolean equals(Object object1, Object object2) {\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.15 2003/07/08 22:06:35 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.16 2003/07/16 00:39:05 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n      *\n      * <p>Characters will be chosen from the set of all characters.</p>\n      *\n-     * @param count length of random string to create\n+     * @param count  the length of random string to create\n      * @return the random string\n      */\n     public static String random(int count) {\n      * <p>Characters will be chosen from the set of characters whose\n      * ASCII value is between <code>32</code> and <code>126</code> (inclusive).</p>\n      *\n-     * @param count length of random string to create\n+     * @param count  the length of random string to create\n      * @return the random string\n      */\n     public static String randomAscii(int count) {\n      * <p>Characters will be chosen from the set of alphabetic\n      * characters.</p>\n      *\n-     * @param count length of random string to create\n+     * @param count  the length of random string to create\n      * @return the random string\n      */\n     public static String randomAlphabetic(int count) {\n      * <p>Characters will be chosen from the set of alpha-numeric\n      * characters.</p>\n      *\n-     * @param count length of random string to create\n+     * @param count  the length of random string to create\n      * @return the random string\n      */\n     public static String randomAlphanumeric(int count) {\n      * <p>Characters will be chosen from the set of numeric\n      * characters.</p>\n      *\n-     * @param count length of random string to create\n+     * @param count  the length of random string to create\n      * @return the random string\n      */\n     public static String randomNumeric(int count) {\n      * <p>Characters will be chosen from the set of alpha-numeric\n      * characters as indicated by the arguments.</p>\n      *\n-     * @param count length of random string to create\n-     * @param letters if <code>true</code>, generated string will include\n+     * @param count  the length of random string to create\n+     * @param letters  if <code>true</code>, generated string will include\n      *  alphabetic characters\n-     * @param numbers if <code>true</code>, generatd string will include\n+     * @param numbers  if <code>true</code>, generatd string will include\n      *  numeric characters\n      * @return the random string\n      */\n      * <p>Characters will be chosen from the set of alpha-numeric\n      * characters as indicated by the arguments.</p>\n      *\n-     * @param count length of random string to create\n-     * @param start position in set of chars to start at\n-     * @param end  position in set of chars to end before\n-     * @param letters if <code>true</code>, generated string will include\n+     * @param count  the length of random string to create\n+     * @param start  the position in set of chars to start at\n+     * @param end  the position in set of chars to end before\n+     * @param letters  if <code>true</code>, generated string will include\n      *  alphabetic characters\n-     * @param numbers if <code>true</code>, generated string will include\n+     * @param numbers  if <code>true</code>, generated string will include\n      *  numeric characters\n      * @return the random string\n      */\n      * instead of using an externally supplied source of randomness, it uses\n      * the internal static {@link Random} instance ({@link #RANDOM}).</p>\n      *\n-     * @param count length of random string to create\n-     * @param start position in set of chars to start at\n-     * @param end position in set of chars to end before\n-     * @param letters only allow letters?\n-     * @param numbers only allow numbers?\n-     * @param set set of chars to choose randoms from. If <code>null</code>,\n-     *  then it will use the set of all chars.\n+     * @param count  the length of random string to create\n+     * @param start  the position in set of chars to start at\n+     * @param end  the position in set of chars to end before\n+     * @param letters  only allow letters?\n+     * @param numbers  only allow numbers?\n+     * @param set  the set of chars to choose randoms from.\n+     *  If <code>null</code>, then it will use the set of all chars.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  <code>(end - start) + 1</code> characters in the set array.\n      * usage of <code>RandomStringUtils</code> in situations that need\n      * repetitive behaviour.</p>\n      *\n-     * @param count length of random string to create\n-     * @param start position in set of chars to start at\n-     * @param end position in set of chars to end before\n-     * @param letters only allow letters?\n-     * @param numbers only allow numbers?\n-     * @param set set of chars to choose randoms from. If <code>null</code>,\n-     *  then it will use the set of all chars.\n-     * @param random source of randomness.\n+     * @param count  the length of random string to create\n+     * @param start  the position in set of chars to start at\n+     * @param end  the position in set of chars to end before\n+     * @param letters  only allow letters?\n+     * @param numbers  only allow numbers?\n+     * @param set  the set of chars to choose randoms from.\n+     *  If <code>null</code>, then it will use the set of all chars.\n+     * @param random  a source of randomness.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  <code>(end - start) + 1</code> characters in the set array.\n      * <p>Characters will be chosen from the set of characters\n      * specified.</p>\n      *\n-     * @param count length of random string to create\n-     * @param set String containing the set of characters to use\n-     * @return the random string\n+     * @param count  the length of random string to create\n+     * @param set  the String containing the set of characters to use,\n+     *  must not be <code>null</code>\n+     * @return the random string\n+     * @throws NullPointerException if the set is <code>null</code>\n      */\n     public static String random(int count, String set) {\n         return random(count, set.toCharArray());\n      *\n      * <p>Characters will be chosen from the set of characters specified.</p>\n      *\n-     * @param count length of random string to create\n-     * @param set character array containing the set of characters to use\n-     * @return the random string\n+     * @param count  the length of random string to create\n+     * @param set  the character array containing the set of characters to use\n+     *  must not be <code>null</code>\n+     * @return the random string\n+     * @throws NullPointerException if the set is <code>null</code>\n      */\n     public static String random(int count, char[] set) {\n         return random(count, 0, set.length, false, false, set);", "timestamp": 1058315945, "metainfo": ""}