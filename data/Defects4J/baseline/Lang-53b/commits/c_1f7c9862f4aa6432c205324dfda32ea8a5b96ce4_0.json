{"sha": "1f7c9862f4aa6432c205324dfda32ea8a5b96ce4", "log": "Add  substringBetween()  as a replacement for getNestedString()   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.85 2003/08/01 21:02:16 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.86 2003/08/01 22:05:43 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n             return \"\";\n         }\n         return str.substring(pos + separator.length());\n+    }\n+\n+    // Substring between\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the String that is nested in between two instances of the\n+     * same String.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> tag returns <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.substringBetween(null, *)            = null\n+     * StringUtils.substringBetween(\"\", \"\")             = \"\"\n+     * StringUtils.substringBetween(\"\", \"tag\")          = null\n+     * StringUtils.substringBetween(\"tagabctag\", null)  = null\n+     * StringUtils.substringBetween(\"tagabctag\", \"\")    = \"\"\n+     * StringUtils.substringBetween(\"tagabctag\", \"tag\") = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the String containing the substring, may be null\n+     * @param tag  the String before and after the substring, may be null\n+     * @return the substring, <code>null</code> if no match\n+     */\n+    public static String substringBetween(String str, String tag) {\n+        return substringBetween(str, tag, tag);\n+    }\n+    \n+    /**\n+     * <p>Gets the String that is nested in between two Strings.\n+     * Only the first match is returned.</p>\n+     * \n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> open/close returns <code>null</code> (no match).\n+     * An empty (\"\") open/close returns an empty string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.substringBetween(null, *, *)          = null\n+     * StringUtils.substringBetween(\"\", \"\", \"\")          = \"\"\n+     * StringUtils.substringBetween(\"\", \"\", \"tag\")       = null\n+     * StringUtils.substringBetween(\"\", \"tag\", \"tag\")    = null\n+     * StringUtils.substringBetween(\"yabcz\", null, null) = null\n+     * StringUtils.substringBetween(\"yabcz\", \"\", \"\")     = \"\"\n+     * StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   = \"abc\"\n+     * StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the String containing the substring, may be null\n+     * @param open  the String before the substring, may be null\n+     * @param close  the String after the substring, may be null\n+     * @return the substring, <code>null</code> if no match\n+     */\n+    public static String substringBetween(String str, String open, String close) {\n+        if (str == null || open == null || close == null) {\n+            return null;\n+        }\n+        int start = str.indexOf(open);\n+        if (start != -1) {\n+            int end = str.indexOf(close, start + open.length());\n+            if (end != -1) {\n+                return str.substring(start + open.length(), end);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    // Nested extraction\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the String that is nested in between two instances of the\n+     * same String.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> tag returns <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.getNestedString(null, *)            = null\n+     * StringUtils.getNestedString(\"\", \"\")             = \"\"\n+     * StringUtils.getNestedString(\"\", \"tag\")          = null\n+     * StringUtils.getNestedString(\"tagabctag\", null)  = null\n+     * StringUtils.getNestedString(\"tagabctag\", \"\")    = \"\"\n+     * StringUtils.getNestedString(\"tagabctag\", \"tag\") = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the String containing nested-string, may be null\n+     * @param tag  the String before and after nested-string, may be null\n+     * @return the nested String, <code>null</code> if no match\n+     * @deprecated Use the better named {@link #substringBetween(String, String)}.\n+     *             Method will be removed in Commons Lang 3.0.\n+     */\n+    public static String getNestedString(String str, String tag) {\n+        return substringBetween(str, tag, tag);\n+    }\n+    \n+    /**\n+     * <p>Gets the String that is nested in between two Strings.\n+     * Only the first match is returned.</p>\n+     * \n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> open/close returns <code>null</code> (no match).\n+     * An empty (\"\") open/close returns an empty string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.getNestedString(null, *, *)          = null\n+     * StringUtils.getNestedString(\"\", \"\", \"\")          = \"\"\n+     * StringUtils.getNestedString(\"\", \"\", \"tag\")       = null\n+     * StringUtils.getNestedString(\"\", \"tag\", \"tag\")    = null\n+     * StringUtils.getNestedString(\"yabcz\", null, null) = null\n+     * StringUtils.getNestedString(\"yabcz\", \"\", \"\")     = \"\"\n+     * StringUtils.getNestedString(\"yabcz\", \"y\", \"z\")   = \"abc\"\n+     * StringUtils.getNestedString(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the String containing nested-string, may be null\n+     * @param open  the String before nested-string, may be null\n+     * @param close  the String after nested-string, may be null\n+     * @return the nested String, <code>null</code> if no match\n+     * @deprecated Use the better named {@link #substringBetween(String, String, String)}.\n+     *             Method will be removed in Commons Lang 3.0.\n+     */\n+    public static String getNestedString(String str, String open, String close) {\n+        return substringBetween(str, open, close);\n     }\n \n     // Splitting\n         return buffer.toString();\n     }\n \n-    // Nested extraction\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Gets the String that is nested in between two instances of the\n-     * same String.</p>\n-     *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> tag returns <code>null</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.getNestedString(null, *)            = null\n-     * StringUtils.getNestedString(\"\", \"\")             = \"\"\n-     * StringUtils.getNestedString(\"\", \"tag\")          = null\n-     * StringUtils.getNestedString(\"tagabctag\", null)  = null\n-     * StringUtils.getNestedString(\"tagabctag\", \"\")    = \"\"\n-     * StringUtils.getNestedString(\"tagabctag\", \"tag\") = \"abc\"\n-     * </pre>\n-     *\n-     * @param str  the String containing nested-string, may be null\n-     * @param tag  the String before and after nested-string, may be null\n-     * @return the nested String, <code>null</code> if no match\n-     */\n-    public static String getNestedString(String str, String tag) {\n-        return getNestedString(str, tag, tag);\n-    }\n-    \n-    /**\n-     * <p>Gets the String that is nested in between two Strings.\n-     * Only the first match is returned.</p>\n-     * \n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> open/close returns <code>null</code> (no match).\n-     * An empty (\"\") open/close returns an empty string.</p>\n-     *\n-     * <pre>\n-     * StringUtils.getNestedString(null, *, *)          = null\n-     * StringUtils.getNestedString(\"\", \"\", \"\")          = \"\"\n-     * StringUtils.getNestedString(\"\", \"\", \"tag\")       = null\n-     * StringUtils.getNestedString(\"\", \"tag\", \"tag\")    = null\n-     * StringUtils.getNestedString(\"yabcz\", null, null) = null\n-     * StringUtils.getNestedString(\"yabcz\", \"\", \"\")     = \"\"\n-     * StringUtils.getNestedString(\"yabcz\", \"y\", \"z\")   = \"abc\"\n-     * StringUtils.getNestedString(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n-     * </pre>\n-     *\n-     * @param str  the String containing nested-string, may be null\n-     * @param open  the String before nested-string, may be null\n-     * @param close  the String after nested-string, may be null\n-     * @return the nested String, <code>null</code> if no match\n-     */\n-    public static String getNestedString(String str, String open, String close) {\n-        if (str == null || open == null || close == null) {\n-            return null;\n-        }\n-        int start = str.indexOf(open);\n-        if (start != -1) {\n-            int end = str.indexOf(close, start + open.length());\n-            if (end != -1) {\n-                return str.substring(start + open.length(), end);\n-            }\n-        }\n-        return null;\n-    }\n-\n     // Count matches\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsSubstringTest.java,v 1.10 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.11 2003/08/01 22:05:43 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }        \n         \n     //-----------------------------------------------------------------------\n+    public void testSubstringBetween_StringString() {\n+        assertEquals(null, StringUtils.substringBetween(null, \"tag\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"\", \"abc\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \"));\n+        assertEquals(null, StringUtils.substringBetween(\"abc\", null));\n+        assertEquals(\"\", StringUtils.substringBetween(\"abc\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"abc\", \"a\"));\n+        assertEquals(\"bc\", StringUtils.substringBetween(\"abca\", \"a\"));\n+        assertEquals(\"bc\", StringUtils.substringBetween(\"abcabca\", \"a\"));\n+        assertEquals(\"bar\", StringUtils.substringBetween(\"\\nbar\\n\", \"\\n\"));\n+    }\n+            \n+    public void testSubstringBetween_StringStringString() {\n+        assertEquals(null, StringUtils.substringBetween(null, \"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \", \"  \"));\n+        assertEquals(\"bar\", StringUtils.substringBetween(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testCountMatches_String() {\n         assertEquals(0, StringUtils.countMatches(null, null));\n         assertEquals(0, StringUtils.countMatches(\"blah\", null));", "timestamp": 1059775543, "metainfo": ""}