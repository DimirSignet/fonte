{"sha": "bf8041cb432379e3086a1520670da30e1c2b4fe0", "log": "Update Javadoc examples Change mid() to accept invalid startPos   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * <p>A side effect of the <code>null</code> handling is that a \n  * NullPointerException should be considered a bug in <code>StringUtils</code>.\n  * (Except for deprecated methods).</p>\n+ * \n+ * <p>Methods in this class give sample code to explain their operation.\n+ * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n  *\n  * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n  * @author GenerationJavaCore\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.75 2003/07/20 23:57:26 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.76 2003/07/21 00:41:13 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * This is similar to {@link String#trim()} but allows the characters\n      * to be stripped to be controlled.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * An empty string (\"\") input returns the empty string.</p>\n      * \n      * <p>If the stripChars String is <code>null</code>, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.\n      * Alternatively use {@link #strip(String)}.</p>\n      * \n      * <pre>\n-     * StringUtils.strip(null, null)       = null\n-     * StringUtils.strip(\"\", null)         = \"\"\n+     * StringUtils.strip(null, *)          = null\n+     * StringUtils.strip(\"\", *)            = \"\"\n      * StringUtils.strip(\"abc\", null)      = \"abc\"\n      * StringUtils.strip(\"  abc\", null)    = \"abc\"\n      * StringUtils.strip(\"abc  \", null)    = \"abc\"\n     /**\n      * <p>Strips any of a set of characters from the start of a String.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * An empty string (\"\") input returns the empty string.</p>\n      * \n      * <p>If the stripChars String is <code>null</code>, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n      * \n      * <pre>\n-     * StringUtils.stripStart(null, null)       = null\n-     * StringUtils.stripStart(\"\", null)         = \"\"\n+     * StringUtils.stripStart(null, *)          = null\n+     * StringUtils.stripStart(\"\", *)            = \"\"\n      * StringUtils.stripStart(\"abc\", \"\")        = \"abc\"\n      * StringUtils.stripStart(\"abc\", null)      = \"abc\"\n      * StringUtils.stripStart(\"  abc\", null)    = \"abc\"\n     /**\n      * <p>Strips any of a set of characters from the end of a String.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * An empty string (\"\") input returns the empty string.</p>\n      * \n      * <p>If the stripChars String is <code>null</code>, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n      * \n      * <pre>\n-     * StringUtils.stripEnd(null, null)       = null\n-     * StringUtils.stripEnd(\"\", null)         = \"\"\n+     * StringUtils.stripEnd(null, *)          = null\n+     * StringUtils.stripEnd(\"\", *)            = \"\"\n      * StringUtils.stripEnd(\"abc\", \"\")        = \"abc\"\n      * StringUtils.stripEnd(\"abc\", null)      = \"abc\"\n      * StringUtils.stripEnd(\"  abc\", null)    = \"  abc\"\n      * {@link Character#isWhitespace(char)}.</p>\n      * \n      * <pre>\n-     * StringUtils.stripAll(null, null)             = null\n-     * StringUtils.stripAll([], null)               = []\n+     * StringUtils.stripAll(null, *)                = null\n+     * StringUtils.stripAll([], *)                  = []\n      * StringUtils.stripAll([\"abc\", \"  abc\"], null) = [\"abc\", \"abc\"]\n      * StringUtils.stripAll([\"abc  \", null], null)  = [\"abc\", null]\n      * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n      * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOfAnyBut(null, *)                     = -1\n-     * StringUtils.indexOfAnyBut(*, null)                     = -1\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za')           = 3\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')            = 0\n-     * StringUtils.indexOfAnyBut(\"aba\", 'ab')                 = -1\n+     * StringUtils.indexOfAnyBut(null, *)           = -1\n+     * StringUtils.indexOfAnyBut(*, null)           = -1\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n+     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n      * A <code>null</code> search string will return <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOfAnyBut(null, *)                     = -1\n-     * StringUtils.indexOfAnyBut(*, null)                     = -1\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")          = 3\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")            = 0\n-     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")                  = -1\n+     * StringUtils.indexOfAnyBut(null, *)            = -1\n+     * StringUtils.indexOfAnyBut(*, null)            = -1\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n+     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n      * </pre>\n      *  \n      * @param str  the String to check, may be null\n      *\n      * <p>If <code>len</code> characters are not available, or the\n      * String is <code>null</code>, the String will be returned without\n-     * an exception.</p>\n-     *\n-     * <pre>\n-     * StringUtils.left(null, 0)    = null\n-     * StringUtils.left(\"\", 2)      = \"\"\n+     * an exception. An exception is thrown if len is negative.</p>\n+     *\n+     * <pre>\n+     * StringUtils.left(null, *)    = null\n+     * StringUtils.left(*, -ve)     = IllegalArgumentException\n+     * StringUtils.left(\"\", *)      = \"\"\n      * StringUtils.left(\"abc\", 0)   = \"\"\n      * StringUtils.left(\"abc\", 2)   = \"ab\"\n      * StringUtils.left(\"abc\", 4)   = \"abc\"\n-     * StringUtils.left(\"abc\", -2)  = IllegalArgumentException\n      * </pre>\n      * \n      * @param str  the String to get the leftmost characters from, may be null\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String left(String str, int len) {\n+        if (str == null) {\n+            return null;\n+        }\n         if (len < 0) {\n             throw new IllegalArgumentException(\"Requested String length \" + len + \" is less than zero\");\n         }\n-        if ((str == null) || (str.length() <= len)) {\n+        if (str.length() <= len) {\n             return str;\n         } else {\n             return str.substring(0, len);\n      *\n      * <p>If <code>len</code> characters are not available, or the String\n      * is <code>null</code>, the String will be returned without an\n-     * exception.</p>\n-     *\n-     * <pre>\n-     * StringUtils.right(null, 0)    = null\n-     * StringUtils.right(\"\", 2)      = \"\"\n+     * an exception. An exception is thrown if len is negative.</p>\n+     *\n+     * <pre>\n+     * StringUtils.right(null, *)    = null\n+     * StringUtils.right(*, -ve)     = IllegalArgumentException\n+     * StringUtils.right(\"\", *)      = \"\"\n      * StringUtils.right(\"abc\", 0)   = \"\"\n      * StringUtils.right(\"abc\", 2)   = \"bc\"\n      * StringUtils.right(\"abc\", 4)   = \"abc\"\n-     * StringUtils.right(\"abc\", -2)  = IllegalArgumentException\n      * </pre>\n      * \n      * @param str  the String to get the rightmost characters from, may be null\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String right(String str, int len) {\n+        if (str == null) {\n+            return null;\n+        }\n         if (len < 0) {\n             throw new IllegalArgumentException(\"Requested String length \" + len + \" is less than zero\");\n         }\n-        if ((str == null) || (str.length() <= len)) {\n+        if (str.length() <= len) {\n             return str;\n         } else {\n             return str.substring(str.length() - len);\n      *\n      * <p>If <code>len</code> characters are not available, the remainder\n      * of the String will be returned without an exception. If the\n-     * String is <code>null</code>, <code>null</code> will be returned.</p>\n-     *\n-     * <pre>\n-     * StringUtils.mid(null, 0, 0)    = null\n-     * StringUtils.mid(\"\", 0, 4)      = \"\"\n+     * String is <code>null</code>, <code>null</code> will be returned.\n+     * An exception is thrown if len is negative.</p>\n+     *\n+     * <pre>\n+     * StringUtils.mid(null, *, *)    = null\n+     * StringUtils.mid(*, *, -ve)     = IllegalArgumentException\n+     * StringUtils.mid(\"\", 0, *)      = \"\"\n      * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n      * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n      * StringUtils.mid(\"abc\", 2, 4)   = \"c\"\n-     * StringUtils.mid(\"abc\", 4, 2)   = StringIndexOutOfBoundsException\n-     * StringUtils.mid(\"abc\", -2, -2) = StringIndexOutOfBoundsException\n-     * StringUtils.mid(\"abc\", 0, -2)  = IllegalArgumentException\n+     * StringUtils.mid(\"abc\", 4, 2)   = \"\"\n+     * StringUtils.mid(\"abc\", -2, 2)  = \"ab\"\n      * </pre>\n      * \n      * @param str  the String to get the characters from, may be null\n-     * @param pos  the position to start from, must be valid\n+     * @param pos  the position to start from, negative treated as zero\n      * @param len  the length of the required String, must be zero or positive\n      * @return the middle characters, <code>null</code> if null String input\n-     * @throws IndexOutOfBoundsException if pos is out of bounds\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String mid(String str, int pos, int len) {\n-        if ((pos < 0) ||\n-            (str != null && pos > str.length())) {\n-            throw new StringIndexOutOfBoundsException(\"String index \" + pos + \" is out of bounds\");\n+        if (str == null) {\n+            return null;\n+        }\n+        if (pos > str.length()) {\n+            return \"\";\n+        }\n+        if (pos < 0) {\n+            pos = 0;\n         }\n         if (len < 0) {\n             throw new IllegalArgumentException(\"Requested String length \" + len + \" is less than zero\");\n-        }\n-        if (str == null) {\n-            return null;\n         }\n         if (str.length() <= (pos + len)) {\n             return str.substring(pos);\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.split(null, '.')       = null\n-     * StringUtils.split(\"\", '.')         = []\n+     * StringUtils.split(null, *)         = null\n+     * StringUtils.split(\"\", *)           = []\n      * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n      * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n      * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n      * A <code>null</code> separatorChars splits on whitespace.</p>\n      *\n      * <pre>\n-     * StringUtils.split(null, null)      = null\n-     * StringUtils.split(\"\", null)        = []\n+     * StringUtils.split(null, *)         = null\n+     * StringUtils.split(\"\", *)           = []\n      * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n      * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n      * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n      * A <code>null</code> separatorChars splits on whitespace.</p>\n      * \n      * <pre>\n-     * StringUtils.split(null, null, 0)         = null\n-     * StringUtils.split(\"\", null, 0)           = []\n+     * StringUtils.split(null, *, *)            = null\n+     * StringUtils.split(\"\", *, *)              = []\n      * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n      * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n      * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      * \n      * <pre>\n-     * StringUtils.replaceOnce(null, null, null)  = null\n-     * StringUtils.replaceOnce(\"\", null, null)    = \"\"\n+     * StringUtils.replaceOnce(null, *, *)        = null\n+     * StringUtils.replaceOnce(\"\", *, *)          = \"\"\n      * StringUtils.replaceOnce(\"aba\", null, null) = \"aba\"\n      * StringUtils.replaceOnce(\"aba\", null, null) = \"aba\"\n      * StringUtils.replaceOnce(\"aba\", \"a\", null)  = \"aba\"\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      * \n      * <pre>\n-     * StringUtils.replace(null, null, null)  = null\n-     * StringUtils.replace(\"\", null, null)    = \"\"\n+     * StringUtils.replace(null, *, *)        = null\n+     * StringUtils.replace(\"\", *, *)          = \"\"\n      * StringUtils.replace(\"aba\", null, null) = \"aba\"\n      * StringUtils.replace(\"aba\", null, null) = \"aba\"\n      * StringUtils.replace(\"aba\", \"a\", null)  = \"aba\"\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      *\n      * <pre>\n-     * StringUtils.replace(null, null, null, 1)   = null\n-     * StringUtils.replace(\"\", null, null, 1)     = \"\"\n+     * StringUtils.replace(null, *, *, *)         = null\n+     * StringUtils.replace(\"\", *, *, *)           = \"\"\n      * StringUtils.replace(\"abaa\", null, null, 1) = \"abaa\"\n      * StringUtils.replace(\"abaa\", null, null, 1) = \"abaa\"\n      * StringUtils.replace(\"abaa\", \"a\", null, 1)  = \"abaa\"\n      * <p>Overlay a part of a String with another String.</p>\n      *\n      * <pre>\n-     * StringUtils.overlayString(null, null, 2, 4)        = null\n+     * StringUtils.overlayString(null, *, *, *)           = null\n      * StringUtils.overlayString(\"\", \"abc\", 0, 0)         = \"abc\"\n      * StringUtils.overlayString(\"abcdef\", null, 2, 4)    = \"abef\"\n      * StringUtils.overlayString(\"abcdef\", \"\", 2, 4)      = \"abef\"\n      * <p>The String is padded to the size of <code>size</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.rightPad(null, 1)   = null\n+     * StringUtils.rightPad(null, *)   = null\n      * StringUtils.rightPad(\"\", 3)     = \"   \"\n      * StringUtils.rightPad(\"bat\", 3)  = \"bat\"\n      * StringUtils.rightPad(\"bat\", 5)  = \"bat  \"\n      * <p>The String is padded to the size of <code>size</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.rightPad(null, 1, 'z')   = null\n+     * StringUtils.rightPad(null, *, *)     = null\n      * StringUtils.rightPad(\"\", 3, 'z')     = \"zzz\"\n      * StringUtils.rightPad(\"bat\", 3, 'z')  = \"bat\"\n      * StringUtils.rightPad(\"bat\", 5, 'z')  = \"batzz\"\n      * <p>The String is padded to the size of <code>size</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.rightPad(null, 1, \"yz\")   = null\n+     * StringUtils.rightPad(null, *, *)      = null\n      * StringUtils.rightPad(\"\", 3, \"z\")      = \"zzz\"\n      * StringUtils.rightPad(\"bat\", 3, \"yz\")  = \"bat\"\n      * StringUtils.rightPad(\"bat\", 5, \"yz\")  = \"batyz\"\n      * <p>The String is padded to the size of <code>size<code>.</p>\n      *\n      * <pre>\n-     * StringUtils.leftPad(null, 1)   = null\n+     * StringUtils.leftPad(null, *)   = null\n      * StringUtils.leftPad(\"\", 3)     = \"   \"\n      * StringUtils.leftPad(\"bat\", 3)  = \"bat\"\n      * StringUtils.leftPad(\"bat\", 5)  = \"  bat\"\n      * <p>Pad to a size of <code>size</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.leftPad(null, 1, 'z')   = null\n+     * StringUtils.leftPad(null, *, *)     = null\n      * StringUtils.leftPad(\"\", 3, 'z')     = \"zzz\"\n      * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n      * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n      * <p>Pad to a size of <code>size</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.leftPad(null, 1, \"yz\")   = null\n+     * StringUtils.leftPad(null, *, *)      = null\n      * StringUtils.leftPad(\"\", 3, \"z\")      = \"zzz\"\n      * StringUtils.leftPad(\"bat\", 3, \"yz\")  = \"bat\"\n      * StringUtils.leftPad(\"bat\", 5, \"yz\")  = \"yzbat\"\n      * <p>Equivalent to <code>center(str, size, \" \")</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.center(null, -1)  = null\n-     * StringUtils.center(null, 4)   = null\n+     * StringUtils.center(null, *)   = null\n      * StringUtils.center(\"\", 4)     = \"    \"\n      * StringUtils.center(\"ab\", -1)  = \"ab\"\n      * StringUtils.center(\"ab\", 4)   = \" ab \"\n      * A negative size is treated as zero.</p>\n      *\n      * <pre>\n-     * StringUtils.center(null, -1, ' ')  = null\n-     * StringUtils.center(null, 4, ' ')   = null\n+     * StringUtils.center(null, *, *)     = null\n      * StringUtils.center(\"\", 4, ' ')     = \"    \"\n      * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n      * StringUtils.center(\"ab\", 4, ' ')   = \" ab\"\n      * A negative size is treated as zero.</p>\n      *\n      * <pre>\n-     * StringUtils.center(null, -1, \" \")  = null\n-     * StringUtils.center(null, 4, \" \")   = null\n+     * StringUtils.center(null, *, *)     = null\n      * StringUtils.center(\"\", 4, \" \")     = \"    \"\n      * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n      * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n      * A <code>null</code> tag returns <code>null</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.getNestedString(null, \"tag\")        = null\n+     * StringUtils.getNestedString(null, *)            = null\n      * StringUtils.getNestedString(\"\", \"\")             = \"\"\n      * StringUtils.getNestedString(\"\", \"tag\")          = null\n      * StringUtils.getNestedString(\"tagabctag\", null)  = null\n      * An empty (\"\") open/close returns an empty string.</p>\n      *\n      * <pre>\n-     * StringUtils.getNestedString(null, \"y\", \"z\")      = null\n+     * StringUtils.getNestedString(null, *, *)          = null\n      * StringUtils.getNestedString(\"\", \"\", \"\")          = \"\"\n      * StringUtils.getNestedString(\"\", \"\", \"tag\")       = null\n      * StringUtils.getNestedString(\"\", \"tag\", \"tag\")    = null\n      * <p>A <code>null</code> String input returns <code>0</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.countMatches(null, null)    = 0\n-     * StringUtils.countMatches(null, \"\")      = 0\n-     * StringUtils.countMatches(null, \"a\")     = 0\n-     * StringUtils.countMatches(\"\", null)      = 0\n-     * StringUtils.countMatches(\"\", \"\")        = 0\n-     * StringUtils.countMatches(\"\", \"a\")       = 0\n+     * StringUtils.countMatches(null, *)       = 0\n+     * StringUtils.countMatches(\"\", *)         = 0\n      * StringUtils.countMatches(\"abba\", null)  = 0\n      * StringUtils.countMatches(\"abba\", \"\")    = 0\n      * StringUtils.countMatches(\"abba\", \"a\")   = 2\n      * is <code>'.'</code>).</p>\n      * \n      * <pre>\n-     * StringUtils.reverseDelimited(null, '.')    = null\n-     * StringUtils.reverseDelimited(\"\", '.')      = \"\"\n+     * StringUtils.reverseDelimited(null, *)      = null\n+     * StringUtils.reverseDelimited(\"\", *)        = \"\"\n      * StringUtils.reverseDelimited(\"a.b.c\", 'x') = \"a.b.c\"\n      * StringUtils.reverseDelimited(\"a.b.c\", \".\") = \"c.b.a\"\n      * </pre>\n      * is <code>\".\"</code>).</p>\n      * \n      * <pre>\n-     * StringUtils.reverseDelimitedString(null, null)    = null\n-     * StringUtils.reverseDelimitedString(\"\", null)      = \"\"\n+     * StringUtils.reverseDelimitedString(null, *)       = null\n+     * StringUtils.reverseDelimitedString(\"\",*)          = \"\"\n      * StringUtils.reverseDelimitedString(\"a.b.c\", null) = \"a.b.c\"\n      * StringUtils.reverseDelimitedString(\"a.b.c\", \".\")  = \"c.b.a\"\n      * </pre>\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsSubstringTest.java,v 1.7 2003/07/20 23:57:26 scolebourne Exp $\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.8 2003/07/21 00:41:13 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(null, StringUtils.substring(null,1,2));\n     }\n            \n-    public void testLeft() {\n+    public void testLeft_String() {\n+        assertSame(null, StringUtils.left(null, -1));\n         assertSame(null, StringUtils.left(null, 0));\n         assertSame(null, StringUtils.left(null, 2));\n         assertSame(\"\", StringUtils.left(\"\", 0));\n         assertEquals(\"\", StringUtils.left(FOOBAR, 0));\n         assertEquals(FOO, StringUtils.left(FOOBAR, 3));\n         assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\n-    }\n-    \n-    public void testLeftEx() {\n         try {\n             StringUtils.left(FOOBAR, -1);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testRight() {\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testRight_String() {\n+        assertSame(null, StringUtils.right(null, -1));\n         assertSame(null, StringUtils.right(null, 0));\n         assertSame(null, StringUtils.right(null, 2));\n         assertSame(\"\", StringUtils.right(\"\", 0));\n         assertEquals(\"\", StringUtils.right(FOOBAR, 0));\n         assertEquals(BAR, StringUtils.right(FOOBAR, 3));\n         assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\n-    }\n-    \n-    public void testRightEx() {\n         try {\n             StringUtils.right(FOOBAR, -1);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testMid() {\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testMid_String() {\n+        assertSame(null, StringUtils.mid(null, -1, 0));\n+        assertSame(null, StringUtils.mid(null, 0, -1));\n         assertSame(null, StringUtils.mid(null, 3, 0));\n         assertSame(null, StringUtils.mid(null, 3, 2));\n         assertSame(\"\", StringUtils.mid(\"\", 0, 0));\n         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));\n         assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));\n         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));\n-    }\n-    \n-    public void testMidEx1() {\n+        assertEquals(\"\", StringUtils.mid(FOOBAR, 9, 3));\n+        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));\n         try {\n             StringUtils.mid(FOOBAR, 0, -1);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testMidEx2() {\n-        try {\n-            StringUtils.mid(FOOBAR, -1, 3);\n-        } catch (IndexOutOfBoundsException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testMidEx3() {\n-        try {\n-            StringUtils.mid(FOOBAR, 7, 3);\n-        } catch (IndexOutOfBoundsException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testCountMatches() {\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testCountMatches_String() {\n         assertEquals(0, StringUtils.countMatches(null, null));\n         assertEquals(0, StringUtils.countMatches(\"blah\", null));\n         assertEquals(0, StringUtils.countMatches(null, \"DD\"));", "timestamp": 1058748073, "metainfo": ""}