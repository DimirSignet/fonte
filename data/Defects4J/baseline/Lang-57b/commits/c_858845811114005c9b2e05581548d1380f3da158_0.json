{"sha": "858845811114005c9b2e05581548d1380f3da158", "log": "Remove StringPrintWriter (package scoped) as performed no useful purpose  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n package org.apache.commons.lang;\n \n import java.io.IOException;\n+import java.io.StringWriter;\n import java.io.Writer;\n \n import org.apache.commons.lang.exception.NestableRuntimeException;\n             return null;\n         }\n         try {\n-            StringPrintWriter writer = new StringPrintWriter(str.length() * 2);\n+            StringWriter writer = new StringWriter(str.length() * 2);\n             escapeJavaStyleString(writer, str, escapeSingleQuotes);\n-            return writer.getString();\n+            return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n             ioe.printStackTrace();\n             return null;\n         }\n         try {\n-            StringPrintWriter writer = new StringPrintWriter(str.length());\n+            StringWriter writer = new StringWriter(str.length());\n             unescapeJava(writer, str);\n-            return writer.getString();\n+            return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n             ioe.printStackTrace();\n         }\n         \n         try {\n-            StringPrintWriter writer = new StringPrintWriter ((int)(str.length() * 1.5));\n+            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n             escapeHtml(writer, str);\n-            return writer.getString();\n+            return writer.toString();\n         } catch (IOException e) {\n             //assert false;\n             //should be impossible\n         }\n         \n         try {\n-            StringPrintWriter writer = new StringPrintWriter ((int)(str.length() * 1.5));\n+            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n             unescapeHtml(writer, str);\n-            return writer.getString();\n+            return writer.toString();\n         } catch (IOException e) {\n             //assert false;\n             //should be impossible\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n package org.apache.commons.lang;\n \n import java.io.IOException;\n+import java.io.StringWriter;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n         message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n         assertEquals(message, expected, converted);\n \n-        StringPrintWriter writer = new StringPrintWriter();\n+        StringWriter writer = new StringWriter();\n         StringEscapeUtils.escapeJava(writer, original);\n-        assertEquals(expected, writer.getString());\n+        assertEquals(expected, writer.toString());\n     }\n \n     public void testUnescapeJava() throws IOException {\n         } catch (IllegalArgumentException ex) {\n         }\n         try {\n-            String str = StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n+            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n             fail();\n         } catch (RuntimeException ex) {\n         }\n                 \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                 expected, actual);\n \n-        StringPrintWriter writer = new StringPrintWriter();\n+        StringWriter writer = new StringWriter();\n         StringEscapeUtils.unescapeJava(writer, original);\n-        assertEquals(unescaped, writer.getString());\n+        assertEquals(unescaped, writer.toString());\n \n     }\n \n             String expected = htmlEscapes[i][1];\n             String original = htmlEscapes[i][2];\n             assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));\n-            StringPrintWriter sw = new StringPrintWriter();\n+            StringWriter sw = new StringWriter();\n             try {\n             StringEscapeUtils.escapeHtml(sw, original);\n             } catch (IOException e) {\n             }\n-            String actual = original == null ? null : sw.getString();\n+            String actual = original == null ? null : sw.toString();\n             assertEquals(message, expected, actual);\n         }\n     }\n             String original = htmlEscapes[i][1];\n             assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));\n             \n-            StringPrintWriter sw = new StringPrintWriter();\n+            StringWriter sw = new StringWriter();\n             try {\n             StringEscapeUtils.unescapeHtml(sw, original);\n             } catch (IOException e) {\n             }\n-            String actual = original == null ? null : sw.getString();\n+            String actual = original == null ? null : sw.toString();\n             assertEquals(message, expected, actual);\n         }\n         // \\u00E7 is a cedilla (c with wiggle under)", "timestamp": 1124536614, "metainfo": ""}