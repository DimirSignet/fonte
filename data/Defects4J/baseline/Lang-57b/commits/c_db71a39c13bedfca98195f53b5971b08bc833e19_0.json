{"sha": "db71a39c13bedfca98195f53b5971b08bc833e19", "log": "javadoc corrections: - changed <code> tag to <pre> tag around code examples for better formatting - added reflection method explanation text   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * </ul>\n  * <p>\n  * To use this class write code as follows:\n- * <code>\n+ * <pre>\n  * public class Person {\n  *   String name;\n  *   int age;\n  *       toString();\n  *   }\n  * }\n- * </code>\n+ * </pre>\n  * This will produce a toString of the format:\n  * <code>Person@7f54[name=Stephen,age=29,smoker=false]</code>\n+ * <p>\n+ * Alternatively, there is a method that uses reflection to determine\n+ * the fields to test. Because these fields are usually private, the method, \n+ * <code>reflectionToString</code>, uses <code>Field.setAccessible</code> to change\n+ * the visibility of the fields. This will fail under a security manager, \n+ * unless the appropriate permissions are set. It is also slower than testing \n+ * explicitly.\n+ * <p>\n+ * A typical invocation for this method would look like:\n+ * <pre>\n+ * public String toString() {\n+ *   return ToStringBuilder.reflectionToString(this);\n+ * }\n+ * </pre>\n  * <p>\n  * The exact format of the toString is determined by the {@link ToStringStyle}\n  * passed into the constructor.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilder.java,v 1.5 2002/09/29 08:26:05 bayard Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.6 2002/10/01 20:03:04 stevencaswell Exp $\n  */\n public class ToStringBuilder {\n     ", "timestamp": 1033502584, "metainfo": ""}