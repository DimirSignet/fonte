{"sha": "463a65b82d5407907eb384e7107ba42822197af0", "log": "Add @since 2.0 tags based on http://www.apache.org/~bayard/commons-lang-2.0/Commons-Lang-1.0.1-to-2.0/missingSinces.txt   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.19 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: ObjectUtils.java,v 1.20 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class ObjectUtils {\n     \n      * @param object  the object to create a toString for, may be <code>null</code>\n      * @return the default toString text, or <code>null</code> if\n      *  <code>null</code> passed in\n+     * @since 2.0\n      */\n     public static StringBuffer appendIdentityToString(StringBuffer buffer, Object object) {\n         if (object == null) {\n      * @see String#valueOf(Object)\n      * @param obj  the Object to <code>toString</code>, may be null\n      * @return the passed in Object's toString, or nullStr if <code>null</code> input\n+     * @since 2.0\n      */\n     public static String toString(Object obj) {\n         return (obj == null ? \"\" : obj.toString());\n      * @param obj  the Object to <code>toString</code>, may be null\n      * @param nullStr  the String to return if <code>null</code> input, may be null\n      * @return the passed in Object's toString, or nullStr if <code>null</code> input\n+     * @since 2.0\n      */\n     public static String toString(Object obj, String nullStr) {\n         return (obj == null ? nullStr : obj.toString());\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.22 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.23 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class RandomStringUtils {\n \n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  <code>(end - start) + 1</code> characters in the set array.\n      * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n+     * @since 2.0\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n         if (count == 0) {\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author Michael Becke\n  * @author Tetsuya Kaneuchi\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.20 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: SystemUtils.java,v 1.21 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class SystemUtils {\n \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n-     * @since Java version 1.2.\n+     * @since 2.0\n+     * @since Java 1.2.\n      */\n     public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\");\n \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n-     * @since Java version 1.1.\n+     * @since Java 1.1.\n      */\n     public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n-     * @since Java version 1.1.\n+     * @since Java 1.1.\n      */\n     public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n-     * @since Java version 1.1.\n+     * @since Java 1.1.\n      */\n     public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n-     * @since Java version 1.2. Not used in Sun versions after 1.2.\n+     * @since Java 1.2. Not used in Sun versions after 1.2.\n      */\n     public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n+     * @since 2.0\n      * @since Java 1.3\n      */\n     public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\");\n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n+     * @since 2.0\n      * @since Java 1.3\n      */\n     public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\");\n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n+     * @since 2.0\n      * @since Java 1.2\n      */\n     public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n+     * @since 2.0\n      * @since Java 1.2\n      */\n     public static final String USER_COUNTRY = \n      * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n+     * @since 2.0\n      * @since Java 1.2\n      */\n     public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n \n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n     // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n     // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n     // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n     // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n      *\n      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n      * <code>null</code>.</p>\n+     * \n+     * @since 2.0\n      */\n     public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n     // Windows XP returns 'Windows 2000' just for fun...\n      * @param requiredVersion  the required version, for example 131\n      * @return <code>true</code> if the actual version is equal or greater\n      *  than the required version\n+     * @since 2.0\n      */\n     public static boolean isJavaVersionAtLeast(int requiredVersion) {\n         return (JAVA_VERSION_INT >= requiredVersion);\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.18 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.19 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class EqualsBuilder {\n     /**\n      * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n      *  may be <code>null</code>\n      * @return <code>true</code> if the two Objects have tested equals.\n+     * @since 2.0\n      */\n     public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {\n         if (lhs == rhs) {\n      *\n      * @param superEquals  the result of calling <code>super.equals()</code>\n      * @return EqualsBuilder - used to chain calls.\n+     * @since 2.0\n      */\n     public EqualsBuilder appendSuper(boolean superEquals) {\n         if (isEquals == false) {\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.18 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.19 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class HashCodeBuilder {\n \n      * @return int hash code\n      * @throws IllegalArgumentException if the Object is <code>null</code>\n      * @throws IllegalArgumentException if the number is zero or even\n+     * @since 2.0\n      */\n     public static int reflectionHashCode(\n         int initialNonZeroOddNumber,\n      *\n      * @param superHashCode  the result of calling <code>super.hashCode()</code>\n      * @return this HashCodeBuilder, used to chain calls.\n+     * @since 2.0\n      */\n     public HashCodeBuilder appendSuper(int superHashCode) {\n         iTotal = iTotal * iConstant + superHashCode;\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  * @author Stephen Colebourne\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: StandardToStringStyle.java,v 1.13 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.14 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n      * <p>Gets whether to output short or long class names.</p>\n      *\n      * @return the current useShortClassName flag\n+     * @since 2.0\n      */\n     public boolean isUseShortClassName() {\n         return super.isUseShortClassName();\n      * <p>Sets whether to output short or long class names.</p>\n      *\n      * @param useShortClassName  the new useShortClassName flag\n+     * @since 2.0\n      */\n     public void setUseShortClassName(boolean useShortClassName) {\n         super.setUseShortClassName(useShortClassName);\n      * of each buffer.</p>\n      * \n      * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n+     * @since 2.0\n      */\n     public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n         super.setFieldSeparatorAtStart(fieldSeparatorAtStart);\n      * of each buffer.</p>\n      * \n      * @return fieldSeparatorAtEnd flag\n+     * @since 2.0\n      */\n     public boolean isFieldSeparatorAtEnd() {\n         return super.isFieldSeparatorAtEnd();\n      * of each buffer.</p>\n      * \n      * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n+     * @since 2.0\n      */\n     public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n         super.setFieldSeparatorAtEnd(fieldSeparatorAtEnd);\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.27 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.28 2003/08/21 15:52:54 ggregory Exp $\n  */\n public class ToStringBuilder {\n \n      * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n      * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,Class)\n+     * @since 2.0\n      */\n     public static String reflectionToString(\n         Object object,\n      * {@link System#identityHashCode(java.lang.Object)}.</p>\n      * \n      * @param object  the <code>Object</code> whose class name and id to output\n+     * @since 2.0\n      */\n     public ToStringBuilder appendAsObjectToString(Object object) {\n         ObjectUtils.appendIdentityToString(this.getStringBuffer(), object);\n      *\n      * @param superToString  the result of <code>super.toString()</code>\n      * @return this\n+     * @since 2.0\n      */\n     public ToStringBuilder appendSuper(String superToString) {\n         if (superToString != null) {\n      *\n      * @param toString  the result of <code>toString()</code> on another object\n      * @return this\n+     * @since 2.0\n      */\n     public ToStringBuilder appendToString(String toString) {\n         if (toString != null) {\n      * <p>Gets the <code>ToStringStyle</code> being used.</p>\n      * \n      * @return the <code>ToStringStyle</code> being used\n+     * @since 2.0\n      */\n     public ToStringStyle getStyle() {\n         return style;\n      * <p>Returns the <code>Object</code> being output.</p>\n      * \n      * @return The object being output.\n+     * @since 2.0\n      */\n     public Object getObject() {\n         return object;\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.24 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: ToStringStyle.java,v 1.25 2003/08/21 15:52:54 ggregory Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n \n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n      * @param toString  the additional <code>toString</code>\n+     * @since 2.0\n      */\n     public void appendToString(StringBuffer buffer, String toString) {\n         if (toString != null) {\n      * <p>Remove the last field separator from the buffer.</p>\n      * \n      * @param buffer  the <code>StringBuffer</code> to populate\n+     * @since 2.0\n      */\n     protected void removeLastFieldSeparator(StringBuffer buffer) {\n         int len = buffer.length();\n      * @param fieldName  the field name, typically not used as already appended\n      * @param array  the array to add to the <code>toString</code>,\n      *  not <code>null</code>\n+     * @since 2.0\n      */\n     protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\n         buffer.append(arrayStart);\n      * <p>Gets whether to output short or long class names.</p>\n      *\n      * @return the current useShortClassName flag\n+     * @since 2.0\n      */\n     protected boolean isUseShortClassName() {\n         return useShortClassName;\n      * <p>Sets whether to output short or long class names.</p>\n      *\n      * @param useShortClassName  the new useShortClassName flag\n+     * @since 2.0\n      */\n     protected void setUseShortClassName(boolean useShortClassName) {\n         this.useShortClassName = useShortClassName;\n      * of each buffer.</p>\n      * \n      * @return the fieldSeparatorAtStart flag\n+     * @since 2.0\n      */\n     protected boolean isFieldSeparatorAtStart() {\n         return fieldSeparatorAtStart;\n      * of each buffer.</p>\n      * \n      * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n+     * @since 2.0\n      */\n     protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n         this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n      * of each buffer.</p>\n      * \n      * @return fieldSeparatorAtEnd flag\n+     * @since 2.0\n      */\n     protected boolean isFieldSeparatorAtEnd() {\n         return fieldSeparatorAtEnd;\n      * of each buffer.</p>\n      * \n      * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n+     * @since 2.0\n      */\n     protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n         this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.20 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: Enum.java,v 1.21 2003/08/21 15:52:55 ggregory Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n      * An empty <code>Map</code>, as JDK1.2 didn't have an empty map.\n      */\n     private static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(0));\n+    \n     /**\n      * <code>Map</code>, key of class name, value of <code>Entry</code>.\n      */\n     private static final Map cEnumClasses = new HashMap();\n+    \n     /**\n      * The string representation of the Enum.\n      */\n     private final String iName;\n+    \n     /**\n      * The hashcode representation of the Enum.\n      */\n     private transient final int iHashCode;\n+    \n     /**\n      * The toString representation of the Enum.\n+     * @since 2.0\n      */\n     protected transient String iToString = null;\n \n      * constant value.</p>\n      * \n      * @return the <code>Class</code> of the enum\n+     * @since 2.0\n      */\n     public Class getEnumClass() {\n         return getClass();\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.33 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.34 2003/08/21 15:52:55 ggregory Exp $\n  */\n public class ExceptionUtils {\n     \n      * \n      * @param methodName  the methodName to add to the list, <code>null</code>\n      *  and empty strings are ignored\n+     * @since 2.0\n      */\n     public static void addCauseMethodName(String methodName) {\n         if (StringUtils.isNotEmpty(methodName)) {\n      * <p>This is true for JDK 1.4 and above.</p>\n      * \n      * @return true if Throwable is nestable\n+     * @since 2.0\n      */\n     public static boolean isThrowableNested() {\n         return (THROWABLE_CAUSE_METHOD != null);\n      *\n      * @param throwable  the <code>Throwable</code> to examine, may be null\n      * @return boolean <code>true</code> if nested otherwise <code>false</code>\n+     * @since 2.0\n      */\n     public static boolean isNestedThrowable(Throwable throwable) {\n         if (throwable == null) {\n      * that don't have nested causes.</p>\n      * \n      * @param throwable  the throwable to output\n+     * @since 2.0\n      */\n     public static void printRootCauseStackTrace(Throwable throwable) {\n         printRootCauseStackTrace(throwable, System.err);\n      * @param throwable  the throwable to output, may be null\n      * @param stream  the stream to output to, may not be null\n      * @throws IllegalArgumentException if the stream is <code>null</code>\n+     * @since 2.0\n      */\n     public static void printRootCauseStackTrace(Throwable throwable, PrintStream stream) {\n         if (throwable == null) {\n      * @param throwable  the throwable to output, may be null\n      * @param writer  the writer to output to, may not be null\n      * @throws IllegalArgumentException if the writer is <code>null</code>\n+     * @since 2.0\n      */\n     public static void printRootCauseStackTrace(Throwable throwable, PrintWriter writer) {\n         if (throwable == null) {\n      * \n      * @param throwable  the throwable to examine, may be null\n      * @return an array of stack trace frames, never null\n+     * @since 2.0\n      */\n     public static String[] getRootCauseStackTrace(Throwable throwable) {\n         if (throwable == null) {\n      * @param causeFrames  stack trace of a cause throwable\n      * @param wrapperFrames  stack trace of a wrapper throwable\n      * @throws IllegalArgumentException if either argument is null\n+     * @since 2.0\n      */\n     public static void removeCommonFrames(List causeFrames, List wrapperFrames) {\n         if (causeFrames == null || wrapperFrames == null) {\n      *\n      * @param throwable  the <code>Throwable</code> to be examined\n      * @return the nested stack trace, with the root cause first\n+     * @since 2.0\n      */\n     public static String getFullStackTrace(Throwable throwable) {\n         StringWriter sw = new StringWriter();", "timestamp": 1061481175, "metainfo": ""}