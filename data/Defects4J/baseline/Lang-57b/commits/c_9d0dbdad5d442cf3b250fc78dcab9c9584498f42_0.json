{"sha": "9d0dbdad5d442cf3b250fc78dcab9c9584498f42", "log": "Add ToStringStyle.SHORT_PREFIX_STYLE as discussed on commons-dev.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.27 2003/08/23 00:21:49 ggregory Exp $\n+ * @version $Id: ToStringStyle.java,v 1.28 2003/11/25 00:53:55 ggregory Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n \n      * The default toString style.\n      */\n     public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\n+    \n     /**\n      * The multi line toString style.\n      */\n     public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\n+    \n     /**\n      * The no field names toString style.\n      */\n     public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\n+    \n+    /**\n+     * The short prefix toString style.\n+     */\n+    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\n+\n     /**\n      * The simple toString style.\n      */\n     public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\n-\n+    \n     /**\n      * Whether to use the field names, the default is <code>true</code>.\n      */\n     private boolean useFieldNames = true;\n+    \n     /**\n      * Whether to use the class name, the default is <code>true</code>.\n      */\n     private boolean useClassName = true;\n+    \n     /**\n      * Whether to use short class names, the default is <code>false</code>.\n      */\n     private boolean useShortClassName = false;\n+    \n     /**\n      * Whether to use the identity hash code, the default is <code>true</code>.\n      */\n      * The content start <code>'['</code>.\n      */\n     private String contentStart = \"[\";\n+    \n     /**\n      * The content end <code>']'</code>.\n      */\n     private String contentEnd = \"]\";\n+    \n     /**\n      * The field name value separator <code>'='</code>.\n      */\n     private String fieldNameValueSeparator = \"=\";\n+    \n     /**\n      * Whether the field separator should be added before any other fields.\n      */\n     private boolean fieldSeparatorAtStart = false;\n+    \n     /**\n      * Whether the field separator should be added after any other fields.\n      */\n     private boolean fieldSeparatorAtEnd = false;\n+    \n     /**\n      * The field separator <code>','</code>.\n      */\n     private String fieldSeparator = \",\";\n+    \n     /**\n      * The array start <code>'{'</code>.\n      */\n     private String arrayStart = \"{\";\n+    \n     /**\n      * The array separator <code>','</code>.\n      */\n     private String arraySeparator = \",\";\n+    \n     /**\n      * The detail for array content.\n      */\n     private boolean arrayContentDetail = true;\n+    \n     /**\n      * The array end <code>'}'</code>.\n      */\n     private String arrayEnd = \"}\";\n+    \n     /**\n      * The value to use when fullDetail is <code>null</code>,\n      * the default value is <code>true</code>.\n      */\n     private boolean defaultFullDetail = true;\n+    \n     /**\n      * The <code>null</code> text <code>'&lt;null&gt;'</code>.\n      */\n     private String nullText = \"<null>\";\n+    \n     /**\n      * The summary size text start <code>'<size'</code>.\n      */\n     private String sizeStartText = \"<size=\";\n+    \n     /**\n      * The summary size text start <code>'&gt;'</code>.\n      */\n     private String sizeEndText = \">\";\n+    \n     /**\n      * The summary object text start <code>'&lt;'</code>.\n      */\n     private String summaryObjectStartText = \"<\";\n+    \n     /**\n      * The summary object text start <code>'&gt;'</code>.\n      */\n     }\n \n     //----------------------------------------------------------------------------\n+    \n+    /**\n+     * <p><code>ToStringStyle</code> that prints out the short\n+     * class name and no identity hashcode.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class ShortPrefixToStringStyle extends ToStringStyle {\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        private ShortPrefixToStringStyle() {\n+            super();\n+            this.setUseShortClassName(true);\n+            this.setUseIdentityHashCode(false);\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.SHORT_PREFIX_STYLE;\n+        }\n+\n+    }\n \n     /**\n      * <p><code>ToStringStyle</code> that does not print out the\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE}.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: ShortPrefixToStringStyleTest.java,v 1.1 2003/11/25 00:53:55 ggregory Exp $\n+ */\n+public class ShortPrefixToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = \"Integer\";\n+    \n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+    \n+}", "timestamp": 1069721635, "metainfo": ""}