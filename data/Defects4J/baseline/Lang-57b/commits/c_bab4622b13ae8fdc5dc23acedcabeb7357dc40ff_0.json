{"sha": "bab4622b13ae8fdc5dc23acedcabeb7357dc40ff", "log": "Add MutableObject   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableObject.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A mutable <code>Object</code>.\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableObject.java,v 1.1 2004/07/08 00:02:35 scolebourne Exp $\n+ */\n+public class MutableObject\n+        implements Mutable, Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 86241875189L;\n+\n+    /** The mutable value. */\n+    private Object value;\n+\n+    /**\n+     * Constructs a new MutableObject with the default value of null.\n+     */\n+    public MutableObject() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableObject with the specified value.\n+     * \n+     * @param value a value.\n+     */\n+    public MutableObject(Object value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value.\n+     * \n+     * @return the value\n+     */\n+    public Object getValue() {\n+        return this.value;\n+    }\n+\n+    /**\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n+    public void setValue(Object value) {\n+        this.value = value;;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableObject with an equal value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableObject) {\n+            Object other = ((MutableObject) obj).value;\n+            return (value == other || (value != null && value.equals(other)));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (value == null ? 0 : value.hashCode());\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return (value == null ? \"null\" : value.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableObjectTest.java,v 1.1 2004/07/08 00:02:35 scolebourne Exp $\n+ * @see MutableShort\n+ */\n+public class MutableObjectTest extends TestCase {\n+\n+    public MutableObjectTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableObjectTest.class);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(null, new MutableObject().getValue());\n+        \n+        Integer i = new Integer(6);\n+        assertSame(i, new MutableObject(i).getValue());\n+        assertSame(\"HI\", new MutableObject(\"HI\").getValue());\n+        assertSame(null, new MutableObject(null).getValue());\n+    }\n+\n+    public void testGetSet() {\n+        final MutableObject mutNum = new MutableObject();\n+        assertEquals(null, new MutableObject().getValue());\n+        \n+        mutNum.setValue(\"HELLO\");\n+        assertSame(\"HELLO\", mutNum.getValue());\n+        \n+        mutNum.setValue(null);\n+        assertSame(null, mutNum.getValue());\n+    }\n+\n+    public void testEquals() {\n+        final MutableObject mutNumA = new MutableObject(\"ALPHA\");\n+        final MutableObject mutNumB = new MutableObject(\"ALPHA\");\n+        final MutableObject mutNumC = new MutableObject(\"BETA\");\n+        final MutableObject mutNumD = new MutableObject(null);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(mutNumD));\n+        assertEquals(true, mutNumD.equals(mutNumD));\n+        \n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Object()));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableObject mutNumA = new MutableObject(\"ALPHA\");\n+        final MutableObject mutNumB = new MutableObject(\"ALPHA\");\n+        final MutableObject mutNumC = new MutableObject(\"BETA\");\n+        final MutableObject mutNumD = new MutableObject(null);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == \"ALPHA\".hashCode());\n+        assertEquals(0, mutNumD.hashCode());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"HI\", new MutableObject(\"HI\").toString());\n+        assertEquals(\"10.0\", new MutableObject(new Double(10)).toString());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n /**\n  * JUnit tests.\n  *\n- * @version $Id: MutableTestSuite.java,v 1.3 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableTestSuite.java,v 1.4 2004/07/08 00:02:35 scolebourne Exp $\n  */\n public class MutableTestSuite {\n \n         suite.addTest(MutableLongTest.suite());\n         suite.addTest(MutableFloatTest.suite());\n         suite.addTest(MutableDoubleTest.suite());\n+        suite.addTest(MutableObjectTest.suite());\n \n         return suite;\n     }", "timestamp": 1089244955, "metainfo": ""}