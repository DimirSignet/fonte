{"sha": "ac9420eb93f40a6cf1e17a896a9b2de2d39d8669", "log": "Exposing the unescapeXml and escapeXml methods that take Writers - LANG-260. A recent thread did point out that there are problems with the concept of escaping Xml as a single method, and instead it needs to be an xml parser that escapes the body and the attribute content differently - however we're obviously not there yet and I don't think making the existing 80/20 good enough code more usable hurts.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n      * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n      * Does not support DTDs or external entities.</p>\n      *\n+     * @param writer writer receiving the unescaped string\n      * @param str  the <code>String</code> to escape, may be null\n      * @return a new escaped <code>String</code>, <code>null</code> if null string input\n      * @see #unescapeXml(java.lang.String)\n      **/\n+    public static void escapeXml(Writer writer, String str) throws IOException {\n+        if (writer == null ) {\n+            throw new IllegalArgumentException (\"The Writer must not be null.\");\n+        }\n+        \n+        if (str == null) {\n+            return;\n+        }\n+        Entities.XML.escape(writer, str);\n+    }\n+\n+    /**\n+     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n+     *\n+     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n+     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n+     * </p>\n+     *\n+     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n+     * Does not support DTDs or external entities.</p>\n+     *\n+     * @param str  the <code>String</code> to escape, may be null\n+     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n+     * @see #unescapeXml(java.lang.String)\n+     **/\n     public static String escapeXml(String str) {\n         if (str == null) {\n             return null;\n         }\n         return Entities.XML.escape(str);\n+    }\n+\n+    /**\n+     * <p>Unescapes a string containing XML entity escapes to a string\n+     * containing the actual Unicode characters corresponding to the\n+     * escapes.</p>\n+     *\n+     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n+     * Does not support DTDs or external entities.</p>\n+     *\n+     * @param writer writer receiving the unescaped string\n+     * @param str  the <code>String</code> to unescape, may be null\n+     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @see #escapeXml(String)\n+     **/\n+    public static void unescapeXml(Writer writer, String str) throws IOException {\n+        if (writer == null ) {\n+            throw new IllegalArgumentException (\"The Writer must not be null.\");\n+        }\n+        \n+        if (str == null) {\n+            return;\n+        }\n+        Entities.XML.unescape(writer, str);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n         assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n         assertEquals(null, StringEscapeUtils.escapeXml(null));\n         assertEquals(null, StringEscapeUtils.unescapeXml(null));\n+\n+        StringWriter sw = new StringWriter();\n+        try {\n+            StringEscapeUtils.escapeXml(sw, \"<abc>\");\n+        } catch (IOException e) {\n+        }\n+        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n+\n+        sw = new StringWriter();\n+        try {\n+            StringEscapeUtils.unescapeXml(sw, \"&lt;abc&gt;\");\n+        } catch (IOException e) {\n+        }\n+        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n     }\n \n     // SQL", "timestamp": 1149571417, "metainfo": ""}