{"sha": "8de71ae52958ae70fe651b7327319c9beecd9b84", "log": "LANG-259 - Fix compareTo to check the type is the same  ", "commit": "\n--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.enums;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.util.Iterator;\n import java.util.List;\n \n      *\n      * <p>The default ordering is numeric by value, but this\n      * can be overridden by subclasses.</p>\n-     * \n+     *\n+     * <p>NOTE: From v2.2 the enums must be of the same type.\n+     * If the parameter is in a different class loader than this instance,\n+     * reflection is used to compare the values.</p>\n+     *\n      * @see java.lang.Comparable#compareTo(Object)\n      * @param other  the other object to compare to\n      * @return -ve if this is less than the other object, +ve if greater than,\n      * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n+        if (other == this) {\n+            return 0;\n+        }\n+        if (other.getClass() != this.getClass()) {\n+            if (other.getClass().getName().equals(this.getClass().getName())) {\n+                return iValue - getValueInOtherClassLoader(other);\n+            }\n+            throw new ClassCastException(\n+                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n+        }\n         return iValue - ((ValuedEnum) other).iValue;\n+    }\n+\n+    /**\n+     * <p>Use reflection to return an objects value.</p>\n+     *\n+     * @param other  the object to determine the value for\n+     * @return the value\n+     */\n+    private int getValueInOtherClassLoader(Object other) {\n+        try {\n+            Method mth = other.getClass().getMethod(\"getValue\", null);\n+            Integer value = (Integer) mth.invoke(other, null);\n+            return value.intValue();\n+        } catch (NoSuchMethodException e) {\n+            // ignore - should never happen\n+        } catch (IllegalAccessException e) {\n+            // ignore - should never happen\n+        } catch (InvocationTargetException e) {\n+            // ignore - should never happen\n+        }\n+        throw new IllegalStateException(\"This should not happen\");\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/enums/EnumEqualsTest.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumEqualsTest.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * limitations under the License.\n  */\n package org.apache.commons.lang.enums;\n+\n+import java.net.URLClassLoader;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass(\"some\")));\n     }\n \n+    public void testEquals_classloader_equal() throws Exception {\n+        ClassLoader cl = ColorEnum.class.getClassLoader();\n+        if (cl instanceof URLClassLoader) {\n+            URLClassLoader urlCL = (URLClassLoader) cl;\n+            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n+            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n+            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n+            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n+            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n+            Object blue2 = otherEnumClass2.getDeclaredField(\"BLUE\").get(null);\n+            assertEquals(true, blue1.equals(blue2));\n+        }\n+    }\n+\n+    public void testEquals_classloader_different() throws Exception {\n+        ClassLoader cl = ColorEnum.class.getClassLoader();\n+        if (cl instanceof URLClassLoader) {\n+            URLClassLoader urlCL = (URLClassLoader) cl;\n+            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n+            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n+            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n+            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n+            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n+            Object blue2 = otherEnumClass2.getDeclaredField(\"RED\").get(null);\n+            assertEquals(false, blue1.equals(blue2));\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testCompareTo() {\n         try {\n--- a/src/test/org/apache/commons/lang/enums/ValuedEnumTest.java\n+++ b/src/test/org/apache/commons/lang/enums/ValuedEnumTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.enums;\n \n+import java.net.URLClassLoader;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n         assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);\n     }\n \n+    public void testCompareTo_classloader_equal() throws Exception {\n+        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n+        if (cl instanceof URLClassLoader) {\n+            URLClassLoader urlCL = (URLClassLoader) cl;\n+            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n+            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n+            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n+            Object blue2 = otherEnumClass2.getDeclaredField(\"BLUE\").get(null);\n+            assertTrue(((Comparable) blue1).compareTo(blue2) == 0);\n+        }\n+    }\n+\n+    public void testCompareTo_classloader_different() throws Exception {\n+        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n+        if (cl instanceof URLClassLoader) {\n+            URLClassLoader urlCL = (URLClassLoader) cl;\n+            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n+            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n+            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n+            Object blue2 = otherEnumClass2.getDeclaredField(\"RED\").get(null);\n+            assertTrue(((Comparable) blue1).compareTo(blue2) != 0);\n+        }\n+    }\n+\n+    public void testCompareTo_nonEnumType() {\n+        try {\n+            ValuedColorEnum.BLUE.compareTo(new TotallyUnrelatedClass(ValuedColorEnum.BLUE.getValue()));\n+            fail();\n+        } catch (ClassCastException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCompareTo_otherEnumType() {\n+        try {\n+            ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);\n+            fail();\n+        } catch (ClassCastException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCompareTo_otherType() {\n+        try {\n+            ValuedColorEnum.BLUE.compareTo(\"Blue\");\n+            fail();\n+        } catch (ClassCastException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCompareTo_null() {\n+        try {\n+            ValuedColorEnum.BLUE.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+    }\n+\n     public void testEquals() {\n         assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);\n         assertSame(ValuedColorEnum.getEnum(\"Red\"), ValuedColorEnum.RED);\n+    }\n+\n+    public void testEquals_classloader_equal() throws Exception {\n+        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n+        if (cl instanceof URLClassLoader) {\n+            URLClassLoader urlCL = (URLClassLoader) cl;\n+            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n+            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n+            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n+            Object blue2 = otherEnumClass2.getDeclaredField(\"BLUE\").get(null);\n+            assertEquals(true, blue1.equals(blue2));\n+        }\n+    }\n+\n+    public void testEquals_classloader_different() throws Exception {\n+        ClassLoader cl = ValuedColorEnum.class.getClassLoader();\n+        if (cl instanceof URLClassLoader) {\n+            URLClassLoader urlCL = (URLClassLoader) cl;\n+            URLClassLoader urlCL1 = new URLClassLoader(urlCL.getURLs(), null);\n+            URLClassLoader urlCL2 = new URLClassLoader(urlCL.getURLs(), null);\n+            Class otherEnumClass1 = urlCL1.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Class otherEnumClass2 = urlCL2.loadClass(\"org.apache.commons.lang.enums.ValuedColorEnum\");\n+            Object blue1 = otherEnumClass1.getDeclaredField(\"BLUE\").get(null);\n+            Object blue2 = otherEnumClass2.getDeclaredField(\"RED\").get(null);\n+            assertEquals(false, blue1.equals(blue2));\n+        }\n     }\n \n     public void testToString() {\n         assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));\n     }\n \n+    //-----------------------------------------------------------------------s\n+    static class TotallyUnrelatedClass {\n+        private final int value;\n+\n+        public TotallyUnrelatedClass(final int value) {\n+            this.value = value;\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/ValuedLanguageEnum.java\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Language enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValuedColorEnum.java 161244 2005-04-14 06:16:36Z ggregory $\n+ */\n+public final class ValuedLanguageEnum extends ValuedEnum {\n+    public static final ValuedLanguageEnum ENGLISH = new ValuedLanguageEnum(\"English\", 1);\n+    public static final ValuedLanguageEnum FRENCH = new ValuedLanguageEnum(\"French\", 2);\n+    public static final ValuedLanguageEnum GERMAN = new ValuedLanguageEnum(\"German\", 3);\n+\n+    private ValuedLanguageEnum(String color, int value) {\n+        super(color, value);\n+    }\n+\n+    public static ValuedLanguageEnum getEnum(String color) {\n+        return (ValuedLanguageEnum) getEnum(ValuedLanguageEnum.class, color);\n+    }\n+\n+    public static ValuedLanguageEnum getEnum(int value) {\n+        return (ValuedLanguageEnum) getEnum(ValuedLanguageEnum.class, value);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(ValuedLanguageEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(ValuedLanguageEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(ValuedLanguageEnum.class);\n+    }\n+}", "timestamp": 1155939707, "metainfo": ""}