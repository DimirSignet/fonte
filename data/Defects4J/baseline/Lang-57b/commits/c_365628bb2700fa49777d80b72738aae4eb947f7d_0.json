{"sha": "365628bb2700fa49777d80b72738aae4eb947f7d", "log": "Remove extraneous this object references  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n      */\n     private void tokenize() {\n         if (tokens == null) {\n-            this.tokens = readTokens();\n+            tokens = readTokens();\n         }\n     }\n \n      */\n     private void addToken(List list, String tok) {\n         if (tok == null || tok.length() == 0) {\n-            if (this.isIgnoreEmptyTokens()) {\n+            if (isIgnoreEmptyTokens()) {\n                 return;\n             }\n-            if (this.isEmptyTokenAsNull()) {\n+            if (isEmptyTokenAsNull()) {\n                 tok = null;\n             }\n         }\n         // field delimiter or the quote character\n         while (start < len) {\n             int removeLen = Math.max(\n-                    this.getIgnoredMatcher().isMatch(chars, start, start, len),\n-                    this.getTrimmerMatcher().isMatch(chars, start, start, len));\n+                    getIgnoredMatcher().isMatch(chars, start, start, len),\n+                    getTrimmerMatcher().isMatch(chars, start, start, len));\n             if (removeLen == 0 ||\n-                this.getDelimiterMatcher().isMatch(chars, start, start, len) > 0 ||\n-                this.getQuoteMatcher().isMatch(chars, start, start, len) > 0) {\n+                getDelimiterMatcher().isMatch(chars, start, start, len) > 0 ||\n+                getQuoteMatcher().isMatch(chars, start, start, len) > 0) {\n                 break;\n             }\n             start += removeLen;\n         }\n         \n         // handle empty token\n-        int delimLen = this.getDelimiterMatcher().isMatch(chars, start, start, len);\n+        int delimLen = getDelimiterMatcher().isMatch(chars, start, start, len);\n         if (delimLen > 0) {\n             addToken(tokens, \"\");\n             return start + delimLen;\n         }\n         \n         // handle found token\n-        int quoteLen = this.getQuoteMatcher().isMatch(chars, start, start, len);\n+        int quoteLen = getQuoteMatcher().isMatch(chars, start, start, len);\n         if (quoteLen > 0) {\n             return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);\n         }\n                 // Not in quoting mode\n                 \n                 // check for delimiter, and thus end of token\n-                int delimLen = this.getDelimiterMatcher().isMatch(chars, pos, start, len);\n+                int delimLen = getDelimiterMatcher().isMatch(chars, pos, start, len);\n                 if (delimLen > 0) {\n                     // return condition when end of token found\n                     addToken(tokens, workArea.substring(0, trimStart));\n                 }\n                 \n                 // check for ignored (outside quotes), and ignore\n-                int ignoredLen = this.getIgnoredMatcher().isMatch(chars, pos, start, len);\n+                int ignoredLen = getIgnoredMatcher().isMatch(chars, pos, start, len);\n                 if (ignoredLen > 0) {\n                     pos += ignoredLen;\n                     continue;\n                 // check for trimmed character\n                 // don't yet know if its at the end, so copy to workArea\n                 // use trimStart to keep track of trim at the end\n-                int trimmedLen = this.getTrimmerMatcher().isMatch(chars, pos, start, len);\n+                int trimmedLen = getTrimmerMatcher().isMatch(chars, pos, start, len);\n                 if (trimmedLen > 0) {\n                     workArea.append(chars, pos, trimmedLen);\n                     pos += trimmedLen;", "timestamp": 1125138849, "metainfo": ""}