{"sha": "686a1daa30deb8970d5f3d9aa799d84cff92eac2", "log": "Form proper aliases on assignments from external objects, improves name removal in other cases as well.  R=nicksantos DELTA=34  (23 added, 3 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1808   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n               recordDepScope(nameNode, ns);\n             }\n           } else {\n-            recordDepScope(parent, ns);\n+            recordDepScope(n, ns);\n           }\n         }\n       } else if (NodeUtil.isVarDeclaration(n)) {\n       }\n \n       if (parent.getType() == Token.ASSIGN) {\n-        Node gramp = parent.getParent();\n-        if (gramp != null && gramp.getType() == Token.EXPR_RESULT) {\n-          return scopes.get(gramp);\n-        }\n+        return scopes.get(parent);\n       }\n     }\n \n--- a/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n   private static String kExterns =\n       \"var window, top;\" +\n       \"var document;\" +\n-      \"var Function; var externfoo; methods.externfoo;\";\n+      \"var Function;\" +\n+      \"var Array;\" +\n+      \"var externfoo; methods.externfoo;\";\n \n   public NameAnalyzerTest() {\n     super(kExterns);\n   }\n \n   public void testNestedAssigns() {\n-    // TODO(nicksantos): Make NameAnalyzer smarter, so that we can eliminate x.\n-    testSame(\"var x = 0; var y = x = 3; window.alert(y);\");\n+    test(\"var x = 0; var y = x = 3; window.alert(y);\",\n+         \"var y = 3; window.alert(y);\");\n   }\n \n   public void testComplexNestedAssigns1() {\n   }\n \n   public void testNestedAssign2() {\n-    testSame(\"var a, b = a = 1; foo(b)\");\n+    test(\"var a, b = a = 1; foo(b)\",\n+         \"var b = 1; foo(b)\");\n   }\n \n   public void testNestedAssign3() {\n-    testSame(\"var a, b = a = 1; a = b = 2; foo(b)\");\n+    test(\"var a, b = a = 1; a = b = 2; foo(b)\",\n+         \"var b = 1; b = 2; foo(b)\");\n   }\n \n   public void testNestedAssign4() {\n-    testSame(\"var a, b = a = 1; b = a = 2; foo(b)\");\n+    test(\"var a, b = a = 1; b = a = 2; foo(b)\",\n+         \"var b = 1; b = 2; foo(b)\");\n   }\n \n   public void testNestedAssign5() {\n       \"window.Bar = data.Bar;\");\n   }\n \n+  public void testArrayExt() {\n+    testSame(\n+      \"Array.prototype.foo = function() { return 1 };\" +\n+      \"var y = [];\" +\n+      \"switch (y.foo()) {\" +\n+      \"}\");\n+  }\n+\n+  public void testArrayAliasExt() {\n+    testSame(\n+      \"Array$X = Array;\" +\n+      \"Array$X.prototype.foo = function() { return 1 };\" +\n+      \"function Array$X() {}\" +\n+      \"var y = [];\" +\n+      \"switch (y.foo()) {\" +\n+      \"}\");\n+  }\n+\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     return new MarkNoSideEffectCallsAndNameAnalyzerRunner(compiler);", "timestamp": 1305052741, "metainfo": ""}