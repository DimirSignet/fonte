{"sha": "6a94702f5cf769973528adc8b3dc3e9cf56277c8", "log": "Change on 2010/07/07 15:59:31 by johnlenz          Automated g4 rollback.          *** Reason for rollback ***            If an output file is openned, close it to be sure it is flushed.          *** Original change description ***          Automated g4 rollback.          *** Reason for rollback ***            <enter reason for rollback>          *** Original change description ***          Buffer file stream to improve file system performance.          R=acleung         DELTA=36  (26 added, 1 deleted, 9 changed)  Change on 2010/07/07 16:31:41 by nicksantos          Sort and namespace the baked-in externs files, so that         they do not conflict with the user's file names.         Fixes issue 194          R=acleung         DELTA=90  (69 added, 17 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=50002   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.javascript.rhino.TokenStream;\n import com.google.protobuf.CodedOutputStream;\n \n+import java.io.BufferedOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n       options.outputCharset = inputCharset;\n     }\n \n-    if (!options.jsOutputFile.isEmpty()) {\n-      out = new PrintStream(options.jsOutputFile, inputCharset.name());\n+    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    if (writeOutputToFile) {\n+      out = toPrintStream(options.jsOutputFile, inputCharset.name());\n     }\n \n     List<String> jsFiles = config.js;\n       result = compiler.compile(externs, inputs, options);\n     }\n \n-    return processResults(result, modules, options);\n+    int errCode = processResults(result, modules, options);\n+    // Close the output if we are writing to a file.\n+    if (writeOutputToFile) {\n+      out.close();\n+    }\n+    return errCode;\n   }\n \n   /**\n             mapOut = toPrintStream(expandSourceMapPath(options, m));\n           }\n \n-          PrintStream ps =\n-              new PrintStream(new FileOutputStream(moduleFilePrefix\n-                  + m.getName() + \".js\"));\n+          PrintStream ps = toPrintStream(\n+              moduleFilePrefix + m.getName() + \".js\");\n \n           if (options.sourceMapOutputPath != null) {\n             compiler.getSourceMap().reset();\n       exPath = outputFile.getParent() + File.separatorChar + exPath;\n     }\n \n-    return new PrintStream(new FileOutputStream(exPath));\n+    return toPrintStream(exPath);\n   }\n \n   /**\n   }\n \n   /**\n-   * Coverts a file name into a print stream.\n+   * Converts a file name into a print stream.\n    * Returns null if the file name is null.\n    */\n   private PrintStream toPrintStream(String fileName) throws IOException {\n     if (fileName == null) {\n       return null;\n     }\n-    return new PrintStream(new FileOutputStream(fileName));\n+    return new PrintStream(\n+        new BufferedOutputStream(\n+            new FileOutputStream(fileName)), false);\n+  }\n+\n+  /**\n+   * Coverts a file name into a print stream.\n+   * Returns null if the file name is null.\n+   */\n+  private PrintStream toPrintStream(String fileName, String charSet)\n+      throws IOException {\n+    if (fileName == null) {\n+      return null;\n+    }\n+    return new PrintStream(\n+        new BufferedOutputStream(\n+            new FileOutputStream(fileName)), false, charSet);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n import com.google.common.io.LimitInputStream;\n \n import java.io.InputStream;\n import java.io.PrintStream;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.logging.Level;\n import java.util.regex.Matcher;\n     }\n   }\n \n+  // The externs expected in externs.zip, in sorted order.\n+  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n+    // JS externs\n+    \"es3.js\",\n+    \"es5.js\",\n+\n+    // Event APIs\n+    \"w3c_event.js\",\n+    \"w3c_event3.js\",\n+    \"gecko_event.js\",\n+    \"ie_event.js\",\n+    \"webkit_event.js\",\n+\n+    // DOM apis\n+    \"w3c_dom1.js\",\n+    \"w3c_dom2.js\",\n+    \"w3c_dom3.js\",\n+    \"gecko_dom.js\",\n+    \"ie_dom.js\",\n+    \"webkit_dom.js\",\n+\n+    // CSS apis\n+    \"w3c_css.js\",\n+    \"gecko_css.js\",\n+    \"ie_css.js\",\n+    \"webkit_css.js\",\n+\n+    // Top-level namespaces\n+    \"google.js\",\n+\n+    \"deprecated.js\",\n+    \"fileapi.js\",\n+    \"flash.js\",\n+    \"gears_symbols.js\",\n+    \"gears_types.js\",\n+    \"gecko_xml.js\",\n+    \"html5.js\",\n+    \"ie_vml.js\",\n+    \"iphone.js\",\n+    \"webstorage.js\",\n+    \"w3c_elementtraversal.js\",\n+    \"w3c_geolocation.js\",\n+    \"w3c_range.js\",\n+    \"w3c_selectors.js\",\n+    \"w3c_xml.js\",\n+    \"window.js\",\n+    \"webkit_notifications.js\");\n+\n   /**\n    * @return a mutable list\n    * @throws IOException\n     InputStream input = CommandLineRunner.class.getResourceAsStream(\n         \"/externs.zip\");\n     ZipInputStream zip = new ZipInputStream(input);\n-    List<JSSourceFile> externs = Lists.newLinkedList();\n+    Map<String, JSSourceFile> externsMap = Maps.newHashMap();\n     for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null; ) {\n       LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());\n-      externs.add(JSSourceFile.fromInputStream(entry.getName(), entryStream));\n-    }\n+      externsMap.put(entry.getName(),\n+          JSSourceFile.fromInputStream(\n+              // Give the files an odd prefix, so that they do not conflict\n+              // with the user's files.\n+              \"externs.zip//\" + entry.getName(),\n+              entryStream));\n+    }\n+\n+    Preconditions.checkState(\n+        externsMap.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),\n+        \"Externs zip must match our hard-coded list of externs.\");\n+\n+    // Order matters, so the resources must be added to the result list\n+    // in the expected order.\n+    List<JSSourceFile> externs = Lists.newArrayList();\n+    for (String key : DEFAULT_EXTERNS_NAMES) {\n+      externs.add(externsMap.get(key));\n+    }\n+\n     return externs;\n   }\n \n--- a/src/com/google/javascript/jscomp/ant/CompileTask.java\n+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java\n package com.google.javascript.jscomp.ant;\n \n import com.google.common.collect.Lists;\n-import com.google.common.io.LimitInputStream;\n import com.google.javascript.jscomp.CommandLineRunner;\n import com.google.javascript.jscomp.CompilationLevel;\n import com.google.javascript.jscomp.Compiler;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.OutputStreamWriter;\n import java.nio.charset.Charset;\n import java.util.List;\n import java.util.logging.Level;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipInputStream;\n \n /**\n  * This class implements a simple Ant task to do almost the same as\n    */\n   private List<JSSourceFile> getDefaultExterns() {\n     try {\n-      InputStream input = Compiler.class.getResourceAsStream(\n-          \"/externs.zip\");\n-      ZipInputStream zip = new ZipInputStream(input);\n-      List<JSSourceFile> externs = Lists.newLinkedList();\n-\n-      for (ZipEntry entry; (entry = zip.getNextEntry()) != null; ) {\n-        LimitInputStream entryStream =\n-            new LimitInputStream(zip, entry.getSize());\n-        externs.add(\n-            JSSourceFile.fromInputStream(entry.getName(), entryStream));\n-      }\n-\n-      return externs;\n+      return CommandLineRunner.getDefaultExterns();\n     } catch (IOException e) {\n       throw new BuildException(e);\n     }", "timestamp": 1278631717, "metainfo": ""}