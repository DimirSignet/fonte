{"sha": "8229f38dc89b32194fbb06e9d67ed967d604bfd1", "log": "Refine how \"unknown\" types are displayed.  R=nicksantos DELTA=32  (25 added, 5 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4957   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     StringBuilder b = new StringBuilder(32);\n     b.append(\"function (\");\n     int paramNum = call.parameters.getChildCount();\n-    boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();\n+    boolean hasKnownTypeOfThis = !(typeOfThis instanceof UnknownType);\n     if (hasKnownTypeOfThis) {\n       if (isConstructor()) {\n         b.append(\"new:\");\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     String result = super.toStringHelper(forAnnotations);\n-    return parameterType.isUnknownType() ?\n-        result :\n-        (result + \".<\" + parameterType.toStringHelper(forAnnotations) + \">\");\n+    return result + \".<\" + parameterType.toStringHelper(forAnnotations) + \">\";\n   }\n \n   @Override\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n         \" function (...[?]): boolean\",\n         fn.getPropertyType(\"bind\").toString());\n   }\n+\n+  public void testPrint() {\n+    FunctionType fn = new FunctionBuilder(registry)\n+      .withTypeOfThis(new TemplateType(registry, \"T\"))\n+      .withReturnType(BOOLEAN_TYPE).build();\n+    assertEquals(\"function (this:T, ...[?]): boolean\", fn.toString());\n+  }\n }\n--- a/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n import com.google.javascript.rhino.testing.BaseJSTypeTestCase;\n \n public class ParameterizedTypeTest extends BaseJSTypeTestCase {\n-  private NamedType unresolvedNamedType;\n \n   @Override\n   public void setUp() throws Exception {\n     super.setUp();\n-    unresolvedNamedType =\n-        new NamedType(registry, \"not.resolved.named.type\", null, -1, -1);\n   }\n \n   protected ParameterizedType createParameterizedType(\n     assertFalse(arrOfString.isEquivalentTo(arrOfNumber));\n     assertFalse(arrOfNumber.isEquivalentTo(arrOfString));\n   }\n+\n+  public void testPrint1() throws Exception {\n+    ParameterizedType arrOfString = createParameterizedType(\n+        ARRAY_TYPE, STRING_TYPE);\n+    assertEquals(\"Array.<string>\", arrOfString.toString());\n+  }\n+\n+  public void testPrint2() throws Exception {\n+    ParameterizedType arrOfTemplateType = createParameterizedType(\n+        ARRAY_TYPE, new TemplateType(registry, \"T\"));\n+    assertEquals(\"Array.<T>\", arrOfTemplateType.toString());\n+  }\n+\n+  public void testPrint3() throws Exception {\n+    ParameterizedType arrOfUnknown = createParameterizedType(\n+        ARRAY_TYPE, UNKNOWN_TYPE);\n+    assertEquals(\"Array.<?>\", arrOfUnknown.toString());\n+  }\n }", "timestamp": 1339008010, "metainfo": ""}