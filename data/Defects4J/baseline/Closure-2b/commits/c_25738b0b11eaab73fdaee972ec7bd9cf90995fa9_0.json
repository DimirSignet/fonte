{"sha": "25738b0b11eaab73fdaee972ec7bd9cf90995fa9", "log": "Recognise a direct call to Function.prototype.bind as well.  R=nicksantos DELTA=128  (117 added, 10 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2455   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n \n   @Override\n   public Bind describeFunctionBind(Node n) {\n+    Bind result = super.describeFunctionBind(n);\n+    if (result != null) {\n+      return result;\n+    }\n+\n     // It would be nice to be able to identify a fn.bind call\n     // but that requires knowing the type of \"fn\".\n \n     Node callTarget = n.getFirstChild();\n     String name = callTarget.getQualifiedName();\n     if (name != null) {\n-      if (name.equals(\"goog.bind\") || name.equals(\"goog$bind\")) {\n+      if (name.equals(\"goog.bind\")\n+          || name.equals(\"goog$bind\")) {\n         // goog.bind(fn, self, args...);\n         Node fn = callTarget.getNext();\n+        if (fn == null) {\n+          return null;\n+        }\n         Node thisValue = safeNext(fn);\n         Node parameters = safeNext(thisValue);\n         return new Bind(fn, thisValue, parameters);\n       if (name.equals(\"goog.partial\") || name.equals(\"goog$partial\")) {\n         // goog.partial(fn, args...);\n         Node fn = callTarget.getNext();\n+        if (fn == null) {\n+          return null;\n+        }\n         Node thisValue = null;\n         Node parameters = safeNext(fn);\n         return new Bind(fn, thisValue, parameters);\n       }\n     }\n \n-    if (callTarget.getType() == Token.GETPROP\n-        && callTarget.getLastChild().getString().equals(\"bind\")\n-        && callTarget.getFirstChild().getType() == Token.FUNCTION) {\n-      // (function(){}).bind(self, args...);\n-      Node fn = callTarget.getFirstChild();\n-      Node thisValue = callTarget.getNext();\n-      Node parameters = safeNext(thisValue);\n-      return new Bind(fn, thisValue, parameters);\n-    }\n-\n     return null;\n   }\n \n--- a/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n package com.google.javascript.jscomp;\n \n import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.FunctionType;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n \n   @Override\n   public Bind describeFunctionBind(Node n) {\n+    // It would be nice to be able to identify a fn.bind call\n+    // but that requires knowing the type of \"fn\".\n+\n+    if (n.getType() != Token.CALL) {\n+      return null;\n+    }\n+\n+    Node callTarget = n.getFirstChild();\n+    String name = callTarget.getQualifiedName();\n+    if (name != null) {\n+      if (name.equals(\"Function.prototype.bind.call\")) {\n+        // goog.bind(fn, self, args...);\n+        Node fn = callTarget.getNext();\n+        if (fn == null) {\n+          return null;\n+        }\n+        Node thisValue = safeNext(fn);\n+        Node parameters = safeNext(thisValue);\n+        return new Bind(fn, thisValue, parameters);\n+      }\n+    }\n+\n+    if (callTarget.getType() == Token.GETPROP\n+        && callTarget.getLastChild().getString().equals(\"bind\")\n+        && callTarget.getFirstChild().getType() == Token.FUNCTION) {\n+      // (function(){}).bind(self, args...);\n+      Node fn = callTarget.getFirstChild();\n+      Node thisValue = callTarget.getNext();\n+      Node parameters = safeNext(thisValue);\n+      return new Bind(fn, thisValue, parameters);\n+    }\n+\n+    return null;\n+  }\n+\n+  private Node safeNext(Node n) {\n+    if (n != null) {\n+      return n.getNext();\n+    }\n     return null;\n   }\n }\n--- a/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java\n+++ b/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java\n     assertObjectLiteralCast(\"goog.reflect.object(A, {});\");\n   }\n \n+  public void testFunctionBind() {\n+    assertNotFunctionBind(\"goog.bind()\");  // invalid bind\n+    assertFunctionBind(\"goog.bind(f)\");\n+    assertFunctionBind(\"goog.bind(f, obj)\");\n+    assertFunctionBind(\"goog.bind(f, obj, p1)\");\n+\n+    assertNotFunctionBind(\"goog$bind()\");  // invalid bind\n+    assertFunctionBind(\"goog$bind(f)\");\n+    assertFunctionBind(\"goog$bind(f, obj)\");\n+    assertFunctionBind(\"goog$bind(f, obj, p1)\");\n+\n+    assertNotFunctionBind(\"goog.partial()\");  // invalid bind\n+    assertFunctionBind(\"goog.partial(f)\");\n+    assertFunctionBind(\"goog.partial(f, obj)\");\n+    assertFunctionBind(\"goog.partial(f, obj, p1)\");\n+\n+    assertNotFunctionBind(\"goog$partial()\");  // invalid bind\n+    assertFunctionBind(\"goog$partial(f)\");\n+    assertFunctionBind(\"goog$partial(f, obj)\");\n+    assertFunctionBind(\"goog$partial(f, obj, p1)\");\n+\n+    assertFunctionBind(\"(function(){}).bind()\");\n+    assertFunctionBind(\"(function(){}).bind(obj)\");\n+    assertFunctionBind(\"(function(){}).bind(obj, p1)\");\n+\n+    assertNotFunctionBind(\"Function.prototype.bind.call()\");\n+    assertFunctionBind(\"Function.prototype.bind.call(obj)\");\n+    assertFunctionBind(\"Function.prototype.bind.call(obj, p1)\");\n+  }\n+\n+  private void assertFunctionBind(String code) {\n+    Node n = parseTestCode(code);\n+    assertNotNull(conv.describeFunctionBind(n.getFirstChild()));\n+  }\n+\n+  private void assertNotFunctionBind(String code) {\n+    Node n = parseTestCode(code);\n+    assertNull(conv.describeFunctionBind(n.getFirstChild()));\n+  }\n+\n   private void assertNotObjectLiteralCast(String code) {\n     Node n = parseTestCode(code);\n     assertNull(conv.getObjectLiteralCast(null, n.getFirstChild()));\n--- a/test/com/google/javascript/jscomp/DefaultCodingConventionTest.java\n+++ b/test/com/google/javascript/jscomp/DefaultCodingConventionTest.java\n     assertNotClassDefining(\"goog$inherits(A);\");\n   }\n \n+  public void testFunctionBind() {\n+    assertNotFunctionBind(\"goog.bind(f)\");\n+    assertNotFunctionBind(\"goog$bind(f)\");\n+    assertNotFunctionBind(\"goog.partial(f)\");\n+    assertNotFunctionBind(\"goog$partial(f)\");\n+\n+    assertFunctionBind(\"(function(){}).bind()\");\n+    assertFunctionBind(\"(function(){}).bind(obj)\");\n+    assertFunctionBind(\"(function(){}).bind(obj, p1)\");\n+\n+    assertNotFunctionBind(\"Function.prototype.bind.call()\");\n+    assertFunctionBind(\"Function.prototype.bind.call(obj)\");\n+    assertFunctionBind(\"Function.prototype.bind.call(obj, p1)\");\n+  }\n+\n+  private void assertFunctionBind(String code) {\n+    Node n = parseTestCode(code);\n+    assertNotNull(conv.describeFunctionBind(n.getFirstChild()));\n+  }\n+\n+  private void assertNotFunctionBind(String code) {\n+    Node n = parseTestCode(code);\n+    assertNull(conv.describeFunctionBind(n.getFirstChild()));\n+  }\n+\n   private void assertNotClassDefining(String code) {\n     Node n = parseTestCode(code);\n     assertNull(conv.getClassesDefinedByCall(n.getFirstChild()));", "timestamp": 1309376103, "metainfo": ""}