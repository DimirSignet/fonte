{"sha": "c1181ea93889acf67e7fa5721f463802a3a13904", "log": "Strip properties when a namespace is stripped to avoid generating invalid code.  R=nicksantos DELTA=28  (7 added, 5 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5091   ", "commit": "\n--- a/src/com/google/javascript/jscomp/StripCode.java\n+++ b/src/com/google/javascript/jscomp/StripCode.java\n package com.google.javascript.jscomp;\n \n import javax.annotation.Nullable;\n+\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n       //   l-value\n       //   r-value\n       Node lvalue = n.getFirstChild();\n-      if (nameEndsWithFieldNameToStrip(lvalue) ||\n+      if (nameContainsFieldNameToStrip(lvalue) ||\n           qualifiedNameBeginsWithStripType(lvalue)) {\n \n         // Limit to EXPR_RESULT because it is not\n       // EXPR_RESULT\n       //   expression\n       Node expression = n.getFirstChild();\n-      if (nameEndsWithFieldNameToStrip(expression) ||\n+      if (nameContainsFieldNameToStrip(expression) ||\n           qualifiedNameBeginsWithStripType(expression)) {\n         if (parent.isExprResult()) {\n           Node gramps = parent.getParent();\n            n.isNew()) &&\n           n.hasChildren() &&\n           (qualifiedNameBeginsWithStripType(n.getFirstChild()) ||\n-              nameEndsWithFieldNameToStrip(n.getFirstChild()));\n+              nameContainsFieldNameToStrip(n.getFirstChild()));\n     }\n \n     /**\n       }\n \n       Node callee = function.getFirstChild();\n-      return nameEndsWithFieldNameToStrip(callee) ||\n-          nameEndsWithFieldNameToStrip(function) ||\n+      return nameContainsFieldNameToStrip(callee) ||\n+          nameContainsFieldNameToStrip(function) ||\n           qualifiedNameBeginsWithStripType(function) ||\n           actsOnStripType(t, n);\n     }\n \n     /**\n-     * Gets whether a name ends with a field name that should be stripped. For\n-     * example, this function would return true when passed \"this.logger\" or\n-     * \"a.b.c.myLogger\" if \"logger\" is a strip name.\n-     *\n-     * @param n A node (typically a GETPROP node)\n-     * @return Whether the name ends with a field name that should be stripped\n-     */\n-    boolean nameEndsWithFieldNameToStrip(@Nullable Node n) {\n+     * @return Whether the node is a name contains a property that should be\n+     *     stripped\n+     */\n+    boolean nameContainsFieldNameToStrip(@Nullable Node n) {\n       if (n != null && n.isGetProp()) {\n         Node propNode = n.getLastChild();\n-        return propNode != null && propNode.isString() &&\n-               isStripName(propNode.getString());\n+        return isStripName(propNode.getString())\n+            || nameContainsFieldNameToStrip(n.getFirstChild());\n       }\n       return false;\n     }\n--- a/test/com/google/javascript/jscomp/StripCodeTest.java\n+++ b/test/com/google/javascript/jscomp/StripCodeTest.java\n   }\n \n   public void testPublicPropertyAssignment() {\n-    // We don't eliminate property assignments on vars/properties that we\n-    // remove, since the debugging classes should have setter methods instead\n-    // of public properties.\n-    testSame(\"rootLogger.someProperty=3\");\n-    testSame(\"this.blcLogger_.level=x\");\n-    testSame(\"goog.ui.Component.logger.prop=y\");\n+    // Eliminate property assignments on vars/properties that we\n+    // remove as otherwise we create invalid code.\n+    test(\"goog.debug.Logger = 1; goog.debug.Logger.prop=2; \", \"\");\n+    test(\"this.blcLogger_.level=x\", \"\");\n+    test(\"goog.ui.Component.logger.prop=y\", \"\");\n   }\n \n   public void testGlobalCallWithStrippedType() {\n          \"var z = goog.debug.Logger.getLogger(); x(y[z['foo']]);\",\n          \"var x = function() {}; var y = {}; x(y[null]);\");\n   }\n+\n+  public void testNamespace1() {\n+    test(\n+        \"var x = {};x.traceutil = {};x.traceutil.FOO = 1;\",\n+        \"var x = {};\");\n+  }\n }", "timestamp": 1340827985, "metainfo": ""}