{"sha": "d6d733f461ee5ba26e9326c1c7609f1f00d6d2db", "log": "Fixes issue 787.  Removing or replacing a Node is the AST caused any following Function nodes to be skipped in the late peephole folding. To prevent this save off the \"next\" node before visiting a Node.  R=nicksantos DELTA=66  (53 added, 5 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5295   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n \n     int visits = 0;\n     do {\n-      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      Node c = node.getFirstChild();\n+      while(c != null) {\n+        Node next = c.getNext();\n         traverse(c);\n+        c = next;\n       }\n \n       visit(node);\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         + \"}\",\n         \"function someTest() {\\n\"\n         + \"  function Foo() { this.b = 3; }\\n\"\n+        + \"  function Bar() {}\\n\"\n         + \"  Foo.prototype.a = function(a, b) {};\\n\"\n-        + \"  function Bar() {}\\n\"\n         + \"  goog.c(Bar, Foo);\\n\"\n         + \"  var o = new Bar();\\n\"\n         + \"  o.a(o.a, o.b);\\n\"\n     test(options,\n          \"var goog = {}; goog.provide('foo.Bar'); \" +\n          \"var foo = {}; foo.Bar = {};\",\n-         \"var foo = {}; var foo = {}; foo.Bar = {};\");\n+         \"var foo = {}; foo = {}; foo.Bar = {};\");\n   }\n \n   public void testProvidedNamespaceIsConst5() {\n \n   public void testRenameLabels() {\n     CompilerOptions options = createCompilerOptions();\n-    String code = \"longLabel: while (true) { break longLabel; }\";\n-    String expected = \"a: while (true) { break a; }\";\n+    String code = \"longLabel: for(;true;) { break longLabel; }\";\n+    String expected = \"a: for(;true;) { break a; }\";\n     testSame(options, code);\n \n     options.labelRenaming = true;\n \n     testSame(options, code);\n \n-    options.collapseVariableDeclarations = false;\n+    options.collapseVariableDeclarations = true;\n \n     test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n   }\n   public void testSuppressEs5StrictWarning() {\n     CompilerOptions options = createCompilerOptions();\n     options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n-    testSame(options,\n+    test(options,\n         \"/** @suppress{es5Strict} */\\n\" +\n-        \"function f() { var arguments; }\");\n+        \"function f() { var arguments; }\",\n+        \"function f() {}\");\n   }\n \n   public void testCheckProvidesWarning() {\n     testSame(options,\n         \"/** @constructor\\n\" +\n         \" *  @suppress{checkProvides} */\\n\" +\n-        \"function f() { var arguments; }\");\n+        \"function f() {}\");\n   }\n \n   public void testRenamePrefixNamespace() {\n     test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n \n+  public void testIssue787() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n+    level.setOptionsForCompilationLevel(options);\n+    WarningLevel warnings = WarningLevel.DEFAULT;\n+    warnings.setOptionsForWarningLevel(options);\n+\n+    String code = \"\" +\n+        \"function some_function() {\\n\" +\n+        \"  var fn1;\\n\" +\n+        \"  var fn2;\\n\" +\n+        \"\\n\" +\n+        \"  if (any_expression) {\\n\" +\n+        \"    fn2 = external_ref;\\n\" +\n+        \"    fn1 = function (content) {\\n\" +\n+        \"      return fn2();\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"\\n\" +\n+        \"  return {\\n\" +\n+        \"    method1: function () {\\n\" +\n+        \"      if (fn1) fn1();\\n\" +\n+        \"      return true;\\n\" +\n+        \"    },\\n\" +\n+        \"    method2: function () {\\n\" +\n+        \"      return false;\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"}\";\n+\n+    String result = \"\" +\n+        \"function some_function() {\\n\" +\n+        \"  var a, b;\\n\" +\n+        \"  any_expression && (b = external_ref, a = function() {\\n\" +\n+        \"    return b()\\n\" +\n+        \"  });\\n\" +\n+        \"  return{method1:function() {\\n\" +\n+        \"    a && a();\\n\" +\n+        \"    return !0\\n\" +\n+        \"  }, method2:function() {\\n\" +\n+        \"    return !1\\n\" +\n+        \"  }}\\n\" +\n+        \"}\\n\" +\n+        \"\";\n+\n+    test(options, code, result);\n+  }\n+\n   public void testManyAdds() {\n     CompilerOptions options = createCompilerOptions();\n     CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n--- a/test/com/google/javascript/jscomp/IntegrationTestCase.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTestCase.java\n \n     (new CreateSyntheticBlocks(\n         compiler, \"synStart\", \"synEnd\")).process(externs, n);\n-    (new Normalize(compiler, false)).process(externs, n);\n-    (MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(\n-        externs, n);\n-    (new Denormalize(compiler)).process(externs, n);\n     return n;\n   }\n ", "timestamp": 1343929986, "metainfo": ""}