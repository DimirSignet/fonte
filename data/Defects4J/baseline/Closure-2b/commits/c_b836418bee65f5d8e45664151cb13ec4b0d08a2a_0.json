{"sha": "b836418bee65f5d8e45664151cb13ec4b0d08a2a", "log": "fix options serialization the right way, by slapping Serializable on everything :)  R=acleung DELTA=74  (59 added, 9 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1707   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n    */\n   public void initOptions(CompilerOptions options) {\n     this.options = options;\n-    this.options.initDeserializedProperties();\n     if (errorManager == null) {\n       if (outStream == null) {\n         setErrorManager(\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   public String jsOutputFile;\n \n-  private transient ComposeWarningsGuard warningsGuard =\n+  private ComposeWarningsGuard warningsGuard =\n       new ComposeWarningsGuard();\n \n   int summaryDetailLevel = 1;\n     return map;\n   }\n \n-  void initDeserializedProperties() {\n-    // If this object was initialized by deserialization, initialize\n-    // transient fields now. This is a temporary hack.\n-    if (warningsGuard == null) {\n-      warningsGuard = new ComposeWarningsGuard();\n-    }\n-  }\n-\n   /**\n    * Sets the value of the {@code @define} variable in JS\n    * to a boolean literal.\n--- a/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CheckLevel;\n \n+import java.io.Serializable;\n import java.util.*;\n import java.util.Map;\n import java.util.TreeSet;\n  */\n public class ComposeWarningsGuard extends WarningsGuard {\n \n+  private static final long serialVersionUID = 1L;\n+\n   // The order that the guards were added in.\n   private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();\n   private int numberOfAdds = 0;\n \n   private final Comparator<WarningsGuard> guardComparator =\n-      new Comparator<WarningsGuard>() {\n+      new GuardComparator(orderOfAddition);\n+\n+  private static class GuardComparator\n+      implements Comparator<WarningsGuard>, Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    private final Map<WarningsGuard, Integer> orderOfAddition;\n+    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n+      this.orderOfAddition = orderOfAddition;\n+    }\n+\n     @Override\n     public int compare(WarningsGuard a, WarningsGuard b) {\n       int priorityDiff = a.getPriority() - b.getPriority();\n       return orderOfAddition.get(b).intValue() -\n           orderOfAddition.get(a).intValue();\n     }\n-  };\n+  }\n \n   // The order that the guards are applied in.\n   private final TreeSet<WarningsGuard> guards =\n--- a/src/com/google/javascript/jscomp/DiagnosticGroup.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroup.java\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n+import java.io.Serializable;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Map;\n  * be toggled on and off as one unit.\n  * @author nicksantos@google.com (Nick Santos)\n  */\n-public class DiagnosticGroup {\n+public class DiagnosticGroup implements Serializable {\n+  private static final long serialVersionUID = 1;\n \n   // The set of types represented by this group, hashed by key.\n   private final Set<DiagnosticType> types;\n--- a/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n  * @author nicksantos@google.com (Nick Santos)\n  */\n public class DiagnosticGroupWarningsGuard extends WarningsGuard {\n+  private static final long serialVersionUID = 1L;\n+\n   final DiagnosticGroup group;\n   final CheckLevel level;\n \n--- a/src/com/google/javascript/jscomp/DiagnosticType.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticType.java\n \n import com.google.javascript.jscomp.CheckLevel;\n \n+import java.io.Serializable;\n import java.text.MessageFormat;\n \n /**\n  * The type of a compile or analysis error.\n  *\n  */\n-public class DiagnosticType implements Comparable<DiagnosticType> {\n+public class DiagnosticType\n+    implements Comparable<DiagnosticType>, Serializable {\n+  private static final long serialVersionUID = 1;\n+\n   /**\n    * The error type. Used as the BugPattern and BugInstance types by\n    * BugBot's XML\n   }\n \n   @Override\n+  public boolean equals(Object type) {\n+    return type instanceof DiagnosticType &&\n+        ((DiagnosticType) type).key.equals(key);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return key.hashCode();\n+  }\n+\n+  @Override\n   public int compareTo(DiagnosticType diagnosticType) {\n     return key.compareTo(diagnosticType.key);\n   }\n--- a/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n  * @author anatol@google.com (Anatol Pomazau)\n  */\n public class ShowByPathWarningsGuard extends WarningsGuard {\n+  private static final long serialVersionUID = 1L;\n+\n   /**\n    * Controls whether warnings should be restricted to a specified path or\n    * suppressed within the specified path.\n--- a/src/com/google/javascript/jscomp/StrictWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/StrictWarningsGuard.java\n  * @author anatol@google.com (Anatol Pomazau)\n  */\n public class StrictWarningsGuard extends WarningsGuard {\n+  private static final long serialVersionUID = 1L;\n \n   static final DiagnosticType UNRAISABLE_WARNING =\n       DiagnosticType.warning(\"JSC_UNRAISABLE_WARNING\", \"{0}\");\n--- a/src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class SuppressDocWarningsGuard extends WarningsGuard {\n+  private static final long serialVersionUID = 1L;\n+\n   /** Warnings guards for each suppressable warnings group, indexed by name. */\n   private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n       Maps.newHashMap();\n--- a/src/com/google/javascript/jscomp/WarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/WarningsGuard.java\n package com.google.javascript.jscomp;\n \n import com.google.javascript.jscomp.CheckLevel;\n+\n+import java.io.Serializable;\n \n /**\n  * Class that allows to flexibly manage what to do with a reported\n  *\n  * @author anatol@google.com (Anatol Pomazau)\n  */\n-public abstract class WarningsGuard {\n+public abstract class WarningsGuard implements Serializable {\n \n   public static enum Priority {\n     MAX(1),", "timestamp": 1304439251, "metainfo": ""}