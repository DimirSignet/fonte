{"sha": "29a82b8a9868505874fa92d0229908a80a57bde8", "log": "Try out the new IR AST building methods.  R=nicksantos DELTA=39  (10 added, 18 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3749   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AliasExternals.java\n+++ b/src/com/google/javascript/jscomp/AliasExternals.java\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n     // Function arguments\n     String localPropName = getMutatorFor(propName) + \"$a\";\n     String localValueName = getMutatorFor(propName) + \"$b\";\n-    Node hasPropNode = Node.newString(Token.NAME, localPropName);\n-    Node propValueNode = Node.newString(Token.NAME, localValueName);\n-    List<Node> args = Lists.newArrayList(hasPropNode, propValueNode);\n-\n-    // Function body\n-    Node propNameNode = Node.newString(Token.NAME, localPropName);\n-    Node propValue = Node.newString(Token.STRING, propName);\n-    Node getProp = new Node(Token.GETPROP, propNameNode, propValue);\n-    Node assignFrom = Node.newString(Token.NAME, localValueName);\n-    Node assign = new Node(Token.ASSIGN, getProp, assignFrom);\n-    Node returnNode = new Node(Token.RETURN, assign);\n-    Node functionBody = new Node(Token.BLOCK, returnNode);\n-\n     // Create the function and append to front of output tree\n-    Node fnNode = NodeUtil.newFunctionNode(\n-        functionName, args, functionBody, -1, -1);\n+    Node fnNode = IR.function(\n+        IR.name(functionName),\n+        IR.paramList(IR.name(localPropName), IR.name(localValueName)),\n+        IR.block(\n+            IR.returnNode(\n+                IR.assign(\n+                    IR.getprop(IR.name(localPropName), IR.string(propName)),\n+                    IR.name(localValueName)))));\n     root.addChildToFront(fnNode);\n \n     compiler.reportCodeChange();\n--- a/src/com/google/javascript/jscomp/AliasKeywords.java\n+++ b/src/com/google/javascript/jscomp/AliasKeywords.java\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n     private void visitNameNode(Node n) {\n       if (isAliasDefinition(n)) {\n         throw new IllegalStateException(\n-            \"Existing alias definition for \" + Node.tokenToName(n.getType()));\n+            \"Existing alias definition for \" + Token.name(n.getType()));\n       }\n     }\n   }\n    * throw. The function throws the object.\n    */\n   private static Node createAliasFunctionNode(String aliasName) {\n-    Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n-    List<Node> parameters = Lists.newArrayList(parameterName.cloneNode());\n-    Node throwStatement = new Node(Token.THROW, parameterName);\n-    Node body = new Node(Token.BLOCK, throwStatement);\n-    return NodeUtil.newFunctionNode(aliasName, parameters, body, -1, -1);\n+    final String PARAM_NAME = \"jscomp_throw_param\";\n+    return IR.function(\n+        IR.name(aliasName),\n+        IR.paramList(IR.name(PARAM_NAME)),\n+        IR.block(\n+            IR.throwNode(IR.name(PARAM_NAME))));\n   }\n \n   /** Aliases literal keywords (e.g., null) with variable names. */\n--- a/src/com/google/javascript/jscomp/ExternExportsPass.java\n+++ b/src/com/google/javascript/jscomp/ExternExportsPass.java\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n+import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n      * parameter or return types.\n      */\n     private Node createExternFunction(Node exportedFunction) {\n-      List<Node> externParameters = Lists.newLinkedList();\n-      for (Node param :\n-          NodeUtil.getFunctionParameters(exportedFunction).children()) {\n-        externParameters.add(param.cloneNode());\n-      }\n-\n-      Node externFunction = NodeUtil.newFunctionNode(\"\", externParameters,\n-          new Node(Token.BLOCK), -1, -1);\n+      Node paramList = NodeUtil.getFunctionParameters(exportedFunction)\n+          .cloneTree();\n+      Node externFunction = IR.function(IR.name(\"\"), paramList, IR.block());\n \n       checkForFunctionsWithUnknownTypes(exportedFunction);\n       externFunction.setJSType(exportedFunction.getJSType());", "timestamp": 1321489979, "metainfo": ""}