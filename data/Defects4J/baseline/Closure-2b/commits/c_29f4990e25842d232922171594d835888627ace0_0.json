{"sha": "29f4990e25842d232922171594d835888627ace0", "log": "Understand HOOKs in assigments, so that we can reason about functions defined like: var a = x ? function() {} : function() {};  R=johnlenz DELTA=75  (71 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4092   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n       if (parent.isName()) {\n         return getBestJSDocInfo(parent);\n       } else if (parent.isAssign()) {\n-        info = parent.getJSDocInfo();\n+        return parent.getJSDocInfo();\n       } else if (isObjectLitKey(parent, parent.getParent())) {\n-        info = parent.getJSDocInfo();\n+        return parent.getJSDocInfo();\n       } else if (parent.isFunction()) {\n-        info = parent.getJSDocInfo();\n+        return parent.getJSDocInfo();\n       } else if (parent.isVar() && parent.hasOneChild()) {\n-        info = parent.getJSDocInfo();\n+        return parent.getJSDocInfo();\n+      } else if ((parent.isHook() && parent.getFirstChild() != n) ||\n+                 parent.isOr() ||\n+                 parent.isAnd() ||\n+                 (parent.isComma() && parent.getFirstChild() != n)) {\n+        return getBestJSDocInfo(parent);\n       }\n     }\n     return info;\n       return parent.getFirstChild();\n     } else if (isObjectLitKey(parent, parent.getParent())) {\n       return parent;\n+    } else if (\n+        (parent.isHook() && parent.getFirstChild() != n) ||\n+        parent.isOr() ||\n+        parent.isAnd() ||\n+        (parent.isComma() && parent.getFirstChild() != n)) {\n+      return getBestLValue(parent);\n     }\n     return null;\n   }\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     testFunctionName(\"this.a = function a() {}\", \"this.a\");\n   }\n \n+  public void testGetBestLValue() {\n+    assertEquals(\"x\", getFunctionLValue(\"var x = function() {};\"));\n+    assertEquals(\"x\", getFunctionLValue(\"x = function() {};\"));\n+    assertEquals(\"x\", getFunctionLValue(\"function x() {};\"));\n+    assertEquals(\"x\", getFunctionLValue(\"var x = y ? z : function() {};\"));\n+    assertEquals(\"x\", getFunctionLValue(\"var x = y ? function() {} : z;\"));\n+    assertEquals(\"x\", getFunctionLValue(\"var x = y && function() {};\"));\n+    assertEquals(\"x\", getFunctionLValue(\"var x = y || function() {};\"));\n+    assertEquals(\"x\", getFunctionLValue(\"var x = (y, function() {});\"));\n+  }\n+\n+  private String getFunctionLValue(String js) {\n+    Node lVal = NodeUtil.getBestLValue(getFunctionNode(js));\n+    return lVal == null ? null : lVal.getString();\n+  }\n+\n   static void testFunctionName(String js, String expected) {\n     assertEquals(\n         expected,\n--- a/test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java\n         \"function x() { (new Foo).methodA; }\");\n   }\n \n+  public void testHook1() throws Exception {\n+    test(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"Foo.prototype.method1 = Math.random() ?\" +\n+        \"   function() { this.method2(); } : function() { this.method3(); };\" +\n+        \"Foo.prototype.method2 = function() {};\" +\n+        \"Foo.prototype.method3 = function() {};\",\n+        \"\");\n+  }\n+\n+  public void testHook2() throws Exception {\n+    testSame(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"Foo.prototype.method1 = Math.random() ?\" +\n+        \"   function() { this.method2(); } : function() { this.method3(); };\" +\n+        \"Foo.prototype.method2 = function() {};\" +\n+        \"Foo.prototype.method3 = function() {};\" +\n+        \"(new Foo()).method1();\");\n+  }\n+\n }\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     testSame(\"var x = {}; /** @interface */ x.f;\", IFACE_INITIALIZER);\n   }\n \n+  public void testFunctionInHook() throws Exception {\n+    testSame(\"/** @param {number} x */ var f = Math.random() ? \" +\n+        \"function(x) {} : function(x) {};\");\n+    assertEquals(\"number\", lastLocalScope.getVar(\"x\").getType().toString());\n+  }\n+\n+  public void testFunctionInAnd() throws Exception {\n+    testSame(\"/** @param {number} x */ var f = Math.random() && \" +\n+        \"function(x) {};\");\n+    assertEquals(\"number\", lastLocalScope.getVar(\"x\").getType().toString());\n+  }\n+\n+  public void testFunctionInOr() throws Exception {\n+    testSame(\"/** @param {number} x */ var f = Math.random() || \" +\n+        \"function(x) {};\");\n+    assertEquals(\"number\", lastLocalScope.getVar(\"x\").getType().toString());\n+  }\n+\n+  public void testFunctionInComma() throws Exception {\n+    testSame(\"/** @param {number} x */ var f = (Math.random(), \" +\n+        \"function(x) {});\");\n+    assertEquals(\"number\", lastLocalScope.getVar(\"x\").getType().toString());\n+  }\n+\n   private JSType findNameType(final String name, Scope scope) {\n     return findTypeOnMatchedNode(new Predicate<Node>() {\n       @Override public boolean apply(Node n) {", "timestamp": 1326500780, "metainfo": ""}