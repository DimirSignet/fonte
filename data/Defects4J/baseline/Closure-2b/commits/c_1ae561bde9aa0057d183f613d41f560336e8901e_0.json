{"sha": "1ae561bde9aa0057d183f613d41f560336e8901e", "log": "Preserve template keys when building derivative function types for .call, .apply, and .bind  R=nicksantos DELTA=22  (20 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5948   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n             new FunctionBuilder(registry)\n             .withParams(builder)\n             .withReturnType(getReturnType())\n+            .withTemplateKeys(getTemplateKeys())\n             .build(),\n             source);\n       }\n    */\n   public FunctionType getBindReturnType(int argsToBind) {\n     FunctionBuilder builder = new FunctionBuilder(registry)\n-        .withReturnType(getReturnType());\n+        .withReturnType(getReturnType())\n+        .withTemplateKeys(getTemplateKeys());\n     if (argsToBind >= 0) {\n       Node origParams = getParametersNode();\n       if (origParams != null) {\n   private FunctionType getCallOrBindSignature(boolean isCall) {\n     boolean isBind = !isCall;\n     FunctionBuilder builder = new FunctionBuilder(registry)\n-        .withReturnType(isCall ? getReturnType() : getBindReturnType(-1));\n+        .withReturnType(isCall ? getReturnType() : getBindReturnType(-1))\n+        .withTemplateKeys(getTemplateKeys());\n \n     Node origParams = getParametersNode();\n     if (origParams != null) {\n--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n     }\n \n     if (changed) {\n+      // TODO(johnlenz): should we support preserving template keys?\n       FunctionBuilder builder = new FunctionBuilder(registry);\n       builder.withParams(paramBuilder);\n       builder.withReturnType(afterReturn);\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n         \"function ((Date|null|undefined), string=, number=):\" +\n         \" function (...[?]): boolean\",\n         fn.getPropertyType(\"bind\").toString());\n+  }\n+\n+  public void testTemplatedFunctionDerivedFunctions() {\n+    FunctionType fn = new FunctionBuilder(registry)\n+      .withTypeOfThis(new TemplateType(registry, \"T\"))\n+      .withTemplateKeys(ImmutableList.of(\"T\"))\n+      .withReturnType(BOOLEAN_TYPE).build();\n+\n+    assertEquals(\"[T]\",\n+        fn.getPropertyType(\"call\").getTemplateKeys().toString());\n+    assertEquals(\"[T]\",\n+        fn.getPropertyType(\"apply\").getTemplateKeys().toString());\n+    assertEquals(\"[T]\",\n+        fn.getPropertyType(\"bind\").getTemplateKeys().toString());\n+    assertEquals(\"[T]\",\n+        fn.getBindReturnType(0).getTemplateKeys().toString());\n   }\n \n   public void testPrint() {", "timestamp": 1355168868, "metainfo": ""}