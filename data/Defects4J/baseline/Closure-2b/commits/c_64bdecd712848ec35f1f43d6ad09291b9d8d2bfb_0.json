{"sha": "64bdecd712848ec35f1f43d6ad09291b9d8d2bfb", "log": "Fix ExtractPrototypeMembers so that it uses a fixed variable names, so that it doesn't break normalization. As it turns out, JSTestC uses anonymous function naming. those anonymous function names are so long that it starts to blow out the browser's JsVM. They need prototype extraction to make the names shorter. (maybe this anonymous function \"naming\" is part of the cause of gmail's development woes? we should follow up to see how they're using it.)  R=johnlenz DELTA=57  (18 added, 32 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=59001   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java\n+++ b/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java\n \n   // The name of variable that will temporary hold the pointer to the prototype\n   // object. Of cause, we assume that it'll be renamed by RenameVars.\n-  private String prototypeAlias = null;\n+  private String prototypeAlias = \"JSCompiler_prototypeAlias\";\n \n   private final AbstractCompiler compiler;\n \n         return;\n       }\n \n-      if (prototypeAlias == null) {\n-        // Always in global scope\n-        prototypeAlias =\n-          new VariableNameGenerator(t.getScope()).getNameNewName();\n-      }\n-\n       for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext()) {\n         PrototypeMemberDeclaration prototypeMember =\n             PrototypeMemberDeclaration.extractDeclaration(cur);\n--- a/test/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarationsTest.java\n *\n  */\n public class ExtractPrototypeMemberDeclarationsTest extends CompilerTestCase {\n-  private static final String TMP = \"a\";\n+  private static final String TMP = \"JSCompiler_prototypeAlias\";\n \n   @Override\n   protected void setUp() {\n     super.enableLineNumberCheck(true);\n+    enableNormalize();\n   }\n \n   @Override\n         TMP + \".y.g = 1;\");\n   }\n \n-  public void testUsedNameInScope() {\n-    test(\n-        \"var a = 0;\" +\n-        \"x.prototype.y.a = 1;\" +\n-        \"x.prototype.y.b = 1;\" +\n-        \"x.prototype.y.c = 1;\" +\n-        \"x.prototype.y.d = 1;\" +\n-        \"x.prototype.y.e = 1;\" +\n-        \"x.prototype.y.f = 1;\" +\n-        \"x.prototype.y.g = 1;\",\n-        \"var b;\" +\n-        \"var a = 0;\" +\n-        \"b = x.prototype;\" +\n-        \"b.y.a = 1;\" +\n-        \"b.y.b = 1;\" +\n-        \"b.y.c = 1;\" +\n-        \"b.y.d = 1;\" +\n-        \"b.y.e = 1;\" +\n-        \"b.y.f = 1;\" +\n-        \"b.y.g = 1;\");\n-  }\n-\n   public void testWithDevirtualization() {\n     extract(\n         \"x.prototype.a = 1;\" +", "timestamp": 1279729010, "metainfo": ""}