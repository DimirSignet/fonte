{"sha": "59dbb7a28680caad08ddb1658123fe0cbb1ae689", "log": "Lower the cost of true/false/null. Fixes issue 728  R=johnlenz DELTA=35  (27 added, 0 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4778   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n         }\n       }\n       if (exp > 2) {\n-        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+        addConstant(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n       } else {\n-        add(Long.toString(value));\n+        addConstant(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n-    }\n+      addConstant(String.valueOf(x));\n+    }\n+  }\n+\n+  void addConstant(String newcode) {\n+    add(newcode);\n   }\n \n   static boolean isNegativeZero(double x) {\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n       case Token.NULL:\n         Preconditions.checkState(childCount == 0);\n-        add(\"null\");\n+        cc.addConstant(\"null\");\n         break;\n \n       case Token.THIS:\n \n       case Token.FALSE:\n         Preconditions.checkState(childCount == 0);\n-        add(\"false\");\n+        cc.addConstant(\"false\");\n         break;\n \n       case Token.TRUE:\n         Preconditions.checkState(childCount == 0);\n-        add(\"true\");\n+        cc.addConstant(\"true\");\n         break;\n \n       case Token.CONTINUE:\n--- a/src/com/google/javascript/jscomp/InlineCostEstimator.java\n+++ b/src/com/google/javascript/jscomp/InlineCostEstimator.java\n     void addIdentifier(String identifier) {\n       add(ESTIMATED_IDENTIFIER);\n     }\n+\n+    /**\n+     * Constants (true, false, null) are considered basically free,\n+     * because it's likely that they will get folded when we're done.\n+     */\n+    @Override\n+    void addConstant(String newcode) {\n+      add(\"0\");\n+    }\n   }\n }\n--- a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n+++ b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n \n   public void testCost() {\n     checkCost(\"1\", \"1\");\n+    checkCost(\"true\", \"1\");\n+    checkCost(\"false\", \"1\");\n     checkCost(\"a\", \"xx\");\n     checkCost(\"a + b\", \"xx+xx\");\n     checkCost(\"foo()\", \"xx()\");\n     checkCost(\"foo(a,b)\", \"xx(xx,xx)\");\n-    checkCost(\"10 + foo(a,b)\", \"10+xx(xx,xx)\");\n+    checkCost(\"10 + foo(a,b)\", \"0+xx(xx,xx)\");\n     checkCost(\"1 + foo(a,b)\", \"1+xx(xx,xx)\");\n     checkCost(\"a ? 1 : 0\", \"xx?1:0\");\n     checkCost(\"a.b\", \"xx.xx\");\n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n         \"}\");\n   }\n \n+  public void testIssue728() {\n+    String f = \"var f = function() { return false; };\";\n+    StringBuilder calls = new StringBuilder();\n+    StringBuilder folded = new StringBuilder();\n+    for (int i = 0; i < 30; i++) {\n+      calls.append(\"if (!f()) alert('x');\");\n+      folded.append(\"if (!false) alert('x');\");\n+    }\n+\n+    test(f + calls, folded.toString());\n+  }\n+\n   public void testAnonymous1() {\n     assumeMinimumCapture = false;\n     test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",", "timestamp": 1337018540, "metainfo": ""}