{"sha": "a785f51ba5f6451b37c2c13ecd42e9eb108ea674", "log": "Fix up JsMessageExtractor to do dependency management.  R=johnlenz DELTA=158  (124 added, 19 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5593   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n   protected void initOptionsFromFlags(CompilerOptions options) {}\n \n   /**\n+   * A helper function for creating the dependency options object.\n+   */\n+  static DependencyOptions createDependencyOptions(\n+      boolean manageClosureDependencies,\n+      boolean onlyClosureDependencies,\n+      List<String> closureEntryPoints)\n+      throws FlagUsageException {\n+    if (onlyClosureDependencies) {\n+      if (closureEntryPoints.isEmpty()) {\n+        throw new FlagUsageException(\"When only_closure_dependencies is \"\n+          + \"on, you must specify at least one closure_entry_point\");\n+      }\n+\n+      return new DependencyOptions()\n+          .setDependencyPruning(true)\n+          .setDependencySorting(true)\n+          .setMoocherDropping(true)\n+          .setEntryPoints(closureEntryPoints);\n+    } else if (manageClosureDependencies ||\n+        closureEntryPoints.size() > 0) {\n+      return new DependencyOptions()\n+          .setDependencyPruning(true)\n+          .setDependencySorting(true)\n+          .setMoocherDropping(false)\n+          .setEntryPoints(closureEntryPoints);\n+    }\n+    return null;\n+  }\n+\n+  /**\n    * Sets options based on the configurations set flags API.\n    * Called during the run() run() method.\n    * If you want to ignore the flags API, or interpret flags your own way,\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n \n-    // Dependency options\n-    if (config.onlyClosureDependencies) {\n-      if (config.closureEntryPoints.isEmpty()) {\n-        throw new FlagUsageException(\"When only_closure_dependencies is \"\n-          + \"on, you must specify at least one closure_entry_point\");\n-      }\n-\n-      options.setDependencyOptions(new DependencyOptions()\n-          .setDependencyPruning(true)\n-          .setDependencySorting(true)\n-          .setMoocherDropping(true)\n-          .setEntryPoints(config.closureEntryPoints));\n-    } else if (config.manageClosureDependencies ||\n-        config.closureEntryPoints.size() > 0) {\n-      options.setDependencyOptions(new DependencyOptions()\n-          .setDependencyPruning(true)\n-          .setDependencySorting(true)\n-          .setMoocherDropping(false)\n-          .setEntryPoints(config.closureEntryPoints));\n+    DependencyOptions depOptions = createDependencyOptions(\n+        config.manageClosureDependencies,\n+        config.onlyClosureDependencies,\n+        config.closureEntryPoints);\n+    if (depOptions != null) {\n+      options.setDependencyOptions(depOptions);\n     }\n \n     options.devMode = config.jscompDevMode;\n--- a/src/com/google/javascript/jscomp/JsMessageExtractor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageExtractor.java\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n-import com.google.javascript.rhino.Node;\n \n import java.io.IOException;\n import java.util.Collection;\n \n   private final JsMessage.Style style;\n   private final JsMessage.IdGenerator idGenerator;\n+  private final CompilerOptions options;\n \n-  public JsMessageExtractor(JsMessage.IdGenerator idGenerator,\n+  public JsMessageExtractor(\n+      JsMessage.IdGenerator idGenerator,\n       JsMessage.Style style) {\n+    this(idGenerator, style, new CompilerOptions());\n+  }\n+\n+  public JsMessageExtractor(\n+      JsMessage.IdGenerator idGenerator,\n+      JsMessage.Style style,\n+      CompilerOptions options) {\n     this.idGenerator = idGenerator;\n     this.style = style;\n+    this.options = options;\n   }\n \n   /**\n     compiler.init(\n         ImmutableList.<SourceFile>of(),\n         Lists.newArrayList(inputs),\n-        new CompilerOptions());\n+        options);\n+    compiler.parseInputs();\n \n     ExtractMessagesVisitor extractCompilerPass =\n         new ExtractMessagesVisitor(compiler);\n-    for (SourceFile input : inputs) {\n-      // Parse the JS files individually, to prevent out-of-memory\n-      // problems.\n-      Node root = new JsAst(input).getAstRoot(compiler);\n-\n-      // Traverse the returned nodes and extract messages.\n-      extractCompilerPass.process(null, root);\n+    if (compiler.getErrors().length == 0) {\n+      extractCompilerPass.process(null, compiler.getRoot());\n     }\n \n     JSError[] errors = compiler.getErrors();", "timestamp": 1349366970, "metainfo": ""}