{"sha": "5872088329ac563b52fa695994bbcb5e10623870", "log": "also allow @const {type} jsdoc has allowed this for a while  R=johnlenz DELTA=36  (24 added, 8 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5972   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   if (!jsdocBuilder.recordConsistentIdGenerator()) {\n                     parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n                       stream.getLineno(), stream.getCharno());\n-                  }\n-                  token = eatTokensUntilEOL();\n-                  continue retry;\n-\n-                case CONSTANT:\n-                  if (!jsdocBuilder.recordConstancy()) {\n-                    parser.addParserWarning(\"msg.jsdoc.const\",\n-                        stream.getLineno(), stream.getCharno());\n                   }\n                   token = eatTokensUntilEOL();\n                   continue retry;\n                   token = versionInfo.token;\n                   continue retry;\n \n+                case CONSTANT:\n                 case DEFINE:\n                 case RETURN:\n                 case PRIVATE:\n \n                   Node typeNode = null;\n                   boolean hasType = lookAheadForTypeAnnotation();\n-                  boolean isVisibilityAnnotation =\n+                  boolean isAlternateTypeAnnotation =\n                       (annotation == Annotation.PRIVATE ||\n                        annotation == Annotation.PROTECTED ||\n-                       annotation == Annotation.PUBLIC);\n+                       annotation == Annotation.PUBLIC ||\n+                       annotation == Annotation.CONSTANT);\n                   boolean canSkipTypeAnnotation =\n-                      (isVisibilityAnnotation ||\n+                      (isAlternateTypeAnnotation ||\n                        annotation == Annotation.RETURN);\n                   type = null;\n                   if (hasType || !canSkipTypeAnnotation) {\n                     // This will have some weird behavior in some cases\n                     // (for example, @private can now be used as a type-cast),\n                     // but should be mostly OK.\n-                    if ((type != null && isVisibilityAnnotation)\n+                    if ((type != null && isAlternateTypeAnnotation)\n                         || annotation == Annotation.TYPE) {\n                       if (!jsdocBuilder.recordType(type)) {\n                         parser.addTypeWarning(\n                     }\n \n                     switch (annotation) {\n+                      case CONSTANT:\n+                        if (!jsdocBuilder.recordConstancy()) {\n+                          parser.addParserWarning(\"msg.jsdoc.const\",\n+                              stream.getLineno(), stream.getCharno());\n+                        }\n+                        break;\n+\n                       case DEFINE:\n                         if (!jsdocBuilder.recordDefineType(type)) {\n                           parser.addParserWarning(\"msg.jsdoc.define\",\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n           \"type annotation incompatible with other annotations\");\n   }\n \n+  public void testTypeTagConflict24() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @const {string}\\n\" +\n+          \" * @return {string} x\\n\" +\n+          \" */\\n\" +\n+          \"function DictDict() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n+  }\n+\n   public void testPrivateType() throws Exception {\n     JSDocInfo jsdoc = parse(\"@private {string} */\");\n     assertTypeEquals(STRING_TYPE, jsdoc.getType());\n \n   public void testPublicType() throws Exception {\n     JSDocInfo jsdoc = parse(\"@public {string} */\");\n+    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n+  }\n+\n+  public void testConstType() throws Exception {\n+    JSDocInfo jsdoc = parse(\"@const {string} */\");\n     assertTypeEquals(STRING_TYPE, jsdoc.getType());\n   }\n ", "timestamp": 1355423338, "metainfo": ""}