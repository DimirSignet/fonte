{"sha": "c5d7b308ecf260bf6ccf4b20ac256074fc42768f", "log": "Better type inference on object literal properties  R=acleung DELTA=99  (70 added, 6 deleted, 23 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3703   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n       return scope;\n     }\n \n+    String qObjName = NodeUtil.getBestLValueName(\n+        NodeUtil.getBestLValue(n));\n     for (Node name = n.getFirstChild(); name != null;\n          name = name.getNext()) {\n       Node value = name.getFirstChild();\n           valueType = getNativeType(UNKNOWN_TYPE);\n         }\n         objectType.defineInferredProperty(memberName, valueType, name);\n+\n+        // Do normal flow inference if this is a direct property assignment.\n+        if (qObjName != null && name.isString()) {\n+          String qKeyName = qObjName + \".\" + memberName;\n+          Var var = syntacticScope.getVar(qKeyName);\n+          JSType oldType = var == null ? null : var.getType();\n+          if (var != null && var.isTypeInferred()) {\n+            var.setType(oldType == null ?\n+                valueType : oldType.getLeastSupertype(oldType));\n+          }\n+\n+          scope.inferQualifiedSlot(name, qKeyName,\n+              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,\n+              valueType);\n+        }\n       } else {\n         n.setJSType(getNativeType(UNKNOWN_TYPE));\n       }\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n         JSType keyType =  objLitType.isEnumType() ?\n             objLitType.toMaybeEnumType().getElementsType() :\n             NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);\n-        if (keyType != null) {\n-          // Try to declare this property in the current scope if it\n-          // has an authoritative name.\n-          String qualifiedName = NodeUtil.getBestLValueName(keyNode);\n-          if (qualifiedName != null) {\n-            defineSlot(keyNode, objLit, qualifiedName, keyType, false);\n-          } else {\n-            setDeferredType(keyNode, keyType);\n-          }\n-\n-          if (objLitType != null && declareOnOwner) {\n-            // Declare this property on its object literal.\n-            boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n-            objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n-          }\n+\n+        // Try to declare this property in the current scope if it\n+        // has an authoritative name.\n+        String qualifiedName = NodeUtil.getBestLValueName(keyNode);\n+        if (qualifiedName != null) {\n+          defineSlot(keyNode, objLit, qualifiedName, keyType, keyType == null);\n+        } else if (keyType != null) {\n+          setDeferredType(keyNode, keyType);\n+        }\n+\n+        if (keyType != null && objLitType != null && declareOnOwner) {\n+          // Declare this property on its object literal.\n+          boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n+          objLitType.defineDeclaredProperty(memberName, keyType, keyNode);\n         }\n       }\n     }\n         // Determining type for #5\n         valueType = rhsValue.getJSType();\n       }\n+\n       // Function prototypes are special.\n       // It's a common JS idiom to do:\n       // F.prototype = { ... };\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n     testTypes(\n         \"for (var i = 0; i < 10; i++) {\" +\n           \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n-          \"/** @param {boolean} x */ function f(x) {}\" +\n+          \"/** @param {number} x */ function f(x) {}\" +\n           \"f(x.foo);\" +\n           \"f([].foo);\" +\n         \"}\",\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     assertNotNull(toggle);\n   }\n \n+  public void testMethodInAnonObject1() throws Exception {\n+    SymbolTable table = createSymbolTable(\n+        \"var a = {}; a.b = {}; a.b.c = function() {};\");\n+    Symbol a = getGlobalVar(table, \"a\");\n+    Symbol ab = getGlobalVar(table, \"a.b\");\n+    Symbol abc = getGlobalVar(table, \"a.b.c\");\n+\n+    assertNotNull(abc);\n+    assertEquals(1, table.getReferenceList(abc).size());\n+\n+    assertEquals(\"{b: {c: function (): undefined}}\", a.getType().toString());\n+    assertEquals(\"{c: function (): undefined}\", ab.getType().toString());\n+    assertEquals(\"function (): undefined\", abc.getType().toString());\n+  }\n+\n+  public void testMethodInAnonObject2() throws Exception {\n+    SymbolTable table = createSymbolTable(\n+        \"var a = {b: {c: function() {}}};\");\n+    Symbol a = getGlobalVar(table, \"a\");\n+    Symbol ab = getGlobalVar(table, \"a.b\");\n+    Symbol abc = getGlobalVar(table, \"a.b.c\");\n+\n+    assertNotNull(abc);\n+    assertEquals(1, table.getReferenceList(abc).size());\n+\n+    assertEquals(\"{b: {c: function (): undefined}}\", a.getType().toString());\n+    assertEquals(\"{c: function (): undefined}\", ab.getType().toString());\n+    assertEquals(\"function (): undefined\", abc.getType().toString());\n+  }\n+\n   private void assertSymmetricOrdering(\n       Ordering<Symbol> ordering, Symbol first, Symbol second) {\n     assertTrue(ordering.compare(first, first) == 0);\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n     testTypes(\n         \"for (var i = 0; i < 10; i++) {\" +\n           \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n-          \"/** @param {boolean} x */ function f(x) {}\" +\n+          \"/** @param {number} x */ function f(x) {}\" +\n           \"f(x.foo);\" +\n           \"f([].foo);\" +\n         \"}\",\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     inFunction(\"var x = {a:1}; var out = x.a;\");\n     verify(\"out\", NUMBER_TYPE);\n \n+    inFunction(\"var x = {a:1}; var out = x.a; x.a = 'string'; var out2 = x.a;\");\n+    verify(\"out\", NUMBER_TYPE);\n+    verify(\"out2\", STRING_TYPE);\n+\n     inFunction(\"var x = { get a() {return 1} }; var out = x.a;\");\n     verify(\"out\", UNKNOWN_TYPE);\n \n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertEquals(\"number\", yType.toString());\n   }\n \n+  public void testInferredObjectLitProperty1() throws Exception {\n+    testSame(\"var x = {prop: 3};\");\n+    Var prop = globalScope.getVar(\"x.prop\");\n+    JSType propType = prop.getType();\n+    assertEquals(\"number\", propType.toString());\n+    assertTrue(prop.isTypeInferred());\n+  }\n+\n   public void testDeclaredConstType1() throws Exception {\n     testSame(\n         \"/** @const */ var x = 3;\" +", "timestamp": 1321311787, "metainfo": ""}