{"sha": "d80fcc04239ab8c4cf781273c4f9bc54cf06f479", "log": "Special case catch expressions to work around the fact that we don't module catch block as lexical scope for the exception and it doesn't belong in the function scope. Fixes issue 864.  R=nicksantos DELTA=60 (56 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6029   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n-      if (c.canInline()) {\n+      if (c.canInline(t.getScope())) {\n         c.inlineVariable();\n \n         // If definition c has dependencies, then inlining it may have\n       return defMetadata.node;\n     }\n \n-    private boolean canInline() {\n+    private boolean canInline(final Scope scope) {\n       // Cannot inline a parameter.\n       if (getDefCfgNode().isFunction()) {\n         return false;\n         return false;\n       }\n \n-      // We give up inlining stuff with R-Value that has GETPROP, GETELEM,\n-      // or anything that creates a new object.\n+      // We give up inlining stuff with R-Value that has:\n+      // 1) GETPROP, GETELEM,\n+      // 2) anything that creates a new object.\n+      // 3) a direct reference to a catch expression.\n       // Example:\n       // var x = a.b.c; j.c = 1; print(x);\n       // Inlining print(a.b.c) is not safe consider j and be alias to a.b.\n       // TODO(user): We could get more accuracy by looking more in-detail\n       // what j is and what x is trying to into to.\n+      // TODO(johnlenz): rework catch expression handling when we\n+      // have lexical scope support so catch expressions don't\n+      // need to be special cased.\n       if (NodeUtil.has(def.getLastChild(),\n           new Predicate<Node>() {\n               @Override\n                   case Token.REGEXP:\n                   case Token.NEW:\n                     return true;\n+                  case Token.NAME:\n+                    Var var = scope.getOwnSlot(input.getString());\n+                    if (var != null\n+                        && var.getParentNode().isCatch()) {\n+                      return true;\n+                    }\n                 }\n                 return false;\n               }\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n \n   public void testDoNotInlineWithinLoop() {\n     noInline(\"var y = noSFX(); do { var z = y.foo(); } while (true);\");\n+  }\n+\n+  public void testDoNotInlineCatchExpression1() {\n+    noInline(\n+        \"var a;\\n\" +\n+        \"try {\\n\" +\n+        \"  throw Error(\\\"\\\");\\n\" +\n+        \"}catch(err) {\" +\n+        \"   a = err;\\n\" +\n+        \"}\\n\" +\n+        \"return a.stack\\n\");\n+  }\n+\n+  public void testDoNotInlineCatchExpression1a() {\n+    noInline(\n+        \"var a;\\n\" +\n+        \"try {\\n\" +\n+        \"  throw Error(\\\"\\\");\\n\" +\n+        \"}catch(err) {\" +\n+        \"   a = err + 1;\\n\" +\n+        \"}\\n\" +\n+        \"return a.stack\\n\");\n+  }\n+\n+  public void testDoNotInlineCatchExpression2() {\n+    noInline(\n+        \"var a;\\n\" +\n+        \"try {\\n\" +\n+        \"  if (x) {throw Error(\\\"\\\");}\\n\" +\n+        \"}catch(err) {\" +\n+        \"   a = err;\\n\" +\n+        \"}\\n\" +\n+        \"return a.stack\\n\");\n+  }\n+\n+  public void testDoNotInlineCatchExpression3() {\n+    noInline(\n+        \"var a;\\n\" +\n+        \"try {\\n\" +\n+        \"  throw Error(\\\"\\\");\\n\" +\n+        \"} catch(err) {\" +\n+        \"  err = x;\\n\" +\n+        \"  a = err;\\n\" +\n+        \"}\\n\" +\n+        \"return a.stack\\n\");\n   }\n \n   public void testDefinitionAfterUse() {", "timestamp": 1355946944, "metainfo": ""}