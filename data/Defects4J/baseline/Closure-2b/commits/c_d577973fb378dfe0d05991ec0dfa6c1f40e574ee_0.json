{"sha": "d577973fb378dfe0d05991ec0dfa6c1f40e574ee", "log": "print record types better when generating typed code. fixes issue 643  R=acleung DELTA=25  (22 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4168   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n-      return \"{...}\";\n+      return forAnnotations ? \"?\" : \"{...}\";\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n+++ b/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n       assertEquals(0, libraryCompileResult.errors.length);\n   }\n \n+  public void testTypedef() {\n+    compileAndCheck(\n+        \"/** @typedef {{x: number, y: number}} */ var Coord;\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {Coord} a\\n\" +\n+        \" * @export\\n\" +\n+        \" */\\n\" +\n+        \"var fn = function(a) {};\" +\n+        \"goog.exportSymbol('fn', fn);\",\n+        \"/**\\n\" +\n+        \" * @param {{x: number, y: number}} a\\n\" +\n+        \" * @return {undefined}\\n\" +\n+        \" */\\n\" +\n+        \"var fn = function(a) {\\n};\\n\");\n+  }\n+\n   private void compileAndCheck(String js, String expected) {\n     Result result = compileAndExportExterns(js);\n \n--- a/test/com/google/javascript/rhino/jstype/RecordTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/RecordTypeTest.java\n     loop.setReferencedType(record);\n     assertEquals(\"{loop: {...}, number: number, string: string}\",\n         record.toString());\n+    assertEquals(\"{loop: ?, number: number, string: string}\",\n+        record.toAnnotationString());\n \n     Asserts.assertEquivalenceOperations(record, loop);\n   }\n         .build();\n     assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n         record.toString());\n+    assertEquals(\n+        \"{a1: number, a2: number, a3: number, a4: number,\" +\n+        \" a5: number, a6: number}\",\n+        record.toAnnotationString());\n   }\n \n   public void testSupAndInf() {", "timestamp": 1328303028, "metainfo": ""}