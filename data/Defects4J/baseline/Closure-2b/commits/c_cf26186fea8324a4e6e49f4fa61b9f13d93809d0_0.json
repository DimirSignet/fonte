{"sha": "cf26186fea8324a4e6e49f4fa61b9f13d93809d0", "log": "Updates to CompilerInput to allows LineOffset calculations to occur.  R=johnlenz DELTA=125  (121 added, 2 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1772   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n   // The AST.\n   private final SourceAst ast;\n \n+  // Source Line Information\n+  private int[] lineOffsets = null;\n+\n   // Provided and required symbols.\n   private final Set<String> provides = Sets.newHashSet();\n   private final Set<String> requires = Sets.newHashSet();\n   @Override\n   public void setSourceFile(SourceFile file) {\n     ast.setSourceFile(file);\n+    lineOffsets = null;\n   }\n \n   /** Returns the SourceAst object on which this input is based. */\n   void setIsExtern(boolean isExtern) {\n     this.isExtern = isExtern;\n   }\n+\n+  /**\n+   * @param lineno the line of the input to get the absolute offset of.\n+   * @return the absolute offset of the start of the provided line.\n+   * @throws IllegalArgumentException if lineno is less than 1 or greater than\n+   *         the number of lines in the source.\n+   */\n+  public int getLineOffset(int lineno) {\n+    if (lineOffsets == null) {\n+      try {\n+        String[] sourceLines = ast.getSourceFile().getCode().split(\"\\n\");\n+        lineOffsets = new int[sourceLines.length];\n+        for (int ii = 1; ii < sourceLines.length; ++ii) {\n+          lineOffsets[ii] =\n+              lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n+        }\n+      } catch (IOException e) {\n+        return 0;\n+      }\n+    }\n+    if (lineno < 1 || lineno > lineOffsets.length) {\n+      throw new IllegalArgumentException(\n+          \"Expected line number between 1 and \" + lineOffsets.length);\n+    }\n+    return lineOffsets[lineno - 1];\n+  }\n }", "timestamp": 1304616431, "metainfo": ""}