{"sha": "5b7831be5a4330561190a576151699a35113acaa", "log": "dereference arrays appropriately when checking index types   Tested: yes  R=johnlenz DELTA=87  (42 added, 41 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2708   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n       JSType indexType) {\n     if (objType.isUnknownType()) {\n       expectStringOrNumber(t, n, indexType, \"property access\");\n-    } else if (objType.toObjectType() != null &&\n-        objType.toObjectType().getIndexType() != null) {\n-      expectCanAssignTo(t, n, indexType, objType.toObjectType().getIndexType(),\n-          \"restricted index type\");\n-    } else if (objType.isArrayType()) {\n-      expectNumber(t, n, indexType, \"array access\");\n-    } else if (objType.matchesObjectContext()) {\n-      expectString(t, n, indexType, \"property access\");\n     } else {\n-      mismatch(t, n, \"only arrays or objects can be accessed\",\n-          objType, typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));\n+      ObjectType dereferenced = objType.dereference();\n+      if (dereferenced != null && dereferenced.getIndexType() != null) {\n+        expectCanAssignTo(t, n, indexType, dereferenced.getIndexType(),\n+            \"restricted index type\");\n+      } else if (dereferenced != null && dereferenced.isArrayType()) {\n+        expectNumber(t, n, indexType, \"array access\");\n+      } else if (objType.matchesObjectContext()) {\n+        expectString(t, n, indexType, \"property access\");\n+      } else {\n+        mismatch(t, n, \"only arrays or objects can be accessed\",\n+            objType,\n+            typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));\n+      }\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: E.<string>\");\n   }\n \n+  public void testParameterizedObject5() throws Exception {\n+    testTypes(\"/** @constructor */ function F() {\" +\n+        \"  /** @type {Object.<number, string>} */ this.numbers = {};\" +\n+        \"}\" +\n+        \"(new F()).numbers['ten'] = '10';\",\n+        \"restricted index type\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: number\");\n+  }\n+\n   public void testUnionOfFunctionAndType() throws Exception {\n     testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n         \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n         \"only arrays or objects can be accessed\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: Object\");\n+  }\n+\n+  public void testArrayAccess9() throws Exception {\n+    testTypes(\"/** @return {?Array} */ function f() { return []; }\" +\n+        \"f()[{}]\",\n+        \"array access\\n\" +\n+        \"found   : {}\\n\" +\n+        \"required: number\");\n   }\n \n   public void testPropAccess() throws Exception {", "timestamp": 1311617372, "metainfo": ""}