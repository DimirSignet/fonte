{"sha": "d3ed5351517207d9029a140666397d5370ebdf08", "log": "Another fix to type inferrencing around goog.asserts.assertX  R=nicksantos DELTA=26  (13 added, 4 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4616   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     }\n     JSTypeNative assertedType = assertionFunctionSpec.getAssertedType();\n     String assertedNodeName = assertedNode.getQualifiedName();\n+\n+    JSType narrowed;\n     // Handle assertions that enforce expressions evaluate to true.\n     if (assertedType == null) {\n       // Handle arbitrary expressions within the assert.\n       scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n           assertedNode, scope, true);\n       // Build the result of the assertExpression\n-      JSType type = getJSType(assertedNode);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        callNode.setJSType(narrowed);\n-      }\n+      narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();\n     } else {\n       // Handle assertions that enforce expressions are of a certain type.\n       JSType type = getJSType(assertedNode);\n-      JSType narrowed = type.getGreatestSubtype(getNativeType(assertedType));\n-      if (type != narrowed) {\n-        if (assertedNodeName != null) {\n-          scope = narrowScope(scope, assertedNode, narrowed);\n-        }\n-        callNode.setJSType(narrowed);\n-      }\n+      narrowed = type.getGreatestSubtype(getNativeType(assertedType));\n+      if (assertedNodeName != null && type.differsFrom(narrowed)) {\n+        scope = narrowScope(scope, assertedNode, narrowed);\n+      }\n+    }\n+\n+    if (getJSType(callNode).differsFrom(narrowed)) {\n+      callNode.setJSType(narrowed);\n     }\n     return scope;\n   }\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     verify(\"out2\", OBJECT_TYPE);\n   }\n \n-  public void disable_testAssert8() { // Fails, out2 is UNKNOWN\n+  public void testAssert8() {\n     JSType startType = createNullableType(OBJECT_TYPE);\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; out2 = goog.asserts.assert(x != null);\");\n     JSType startType = createNullableType(ARRAY_TYPE);\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; out2 = goog.asserts.assertObject(x);\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", ARRAY_TYPE);\n+  }\n+\n+  public void testAssertObject5() {\n+    JSType startType = createNullableType(ALL_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\n+        \"out1 = x;\" +\n+        \"out2 = /** @type {!Array} */ (goog.asserts.assertObject(x));\");\n     verify(\"out1\", startType);\n     verify(\"out2\", ARRAY_TYPE);\n   }", "timestamp": 1335301319, "metainfo": ""}