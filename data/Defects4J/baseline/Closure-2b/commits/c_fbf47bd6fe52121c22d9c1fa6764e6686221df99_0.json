{"sha": "fbf47bd6fe52121c22d9c1fa6764e6686221df99", "log": "Don't use NAME for label names, introduce LABEL_NAME. This improves the correctness of the compiler as many passes don't distinguish between label names and variable names appropriately. (John) R=robert DELTA=57  (29 added, 12 deleted, 16 changed)  Remove now unneeded checks for label names when inspecting NAME nodes. (John) R=robert DELTA=6  (0 added, 4 deleted, 2 changed)  Better message for the \"arguments\" problem until we can fix it. (John) R=robert DELTA=5  (5 added, 0 deleted, 0 changed)  Revision created by MOE tool push_codebase. MOE_MIGRATION=wdxvlt   ", "commit": "\n--- a/src/com/google/javascript/jscomp/GatherRawExports.java\n+++ b/src/com/google/javascript/jscomp/GatherRawExports.java\n   private boolean isGlobalThisObject(NodeTraversal t, Node n) {\n     if (n.getType() == Token.THIS) {\n       return t.inGlobalScope();\n-    } else if (n.getType() == Token.NAME && !NodeUtil.isLabelName(n)) {\n+    } else if (n.getType() == Token.NAME) {\n       String varName = n.getString();\n       if (varName.equals(GLOBAL_THIS_NAME)) {\n         return true;\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n     while ((lastArg = argList.getLastChild()) != null) {\n       Var var = fnScope.getVar(lastArg.getString());\n       if (!referenced.contains(var)) {\n+        if (var == null) {\n+          throw new IllegalStateException(\n+              \"Function parameter not declared in scope: \"\n+              + lastArg.getString());\n+        }\n         argList.removeChild(lastArg);\n         fnScope.undeclare(var);\n         numRemoved_++;\n--- a/src/com/google/javascript/jscomp/StrictModeCheck.java\n+++ b/src/com/google/javascript/jscomp/StrictModeCheck.java\n     if (n.getType() == Token.WITH) {\n       t.report(n, WITH_DISALLOWED);\n     } else if (n.getType() == Token.NAME) {\n-      if (!NodeUtil.isLabelName(n) && !isDeclaration(n)) {\n+      if (!isDeclaration(n)) {\n         checkNameUse(t, n);\n       }\n     } else if (n.getType() == Token.ASSIGN) {\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n   /** {@inheritDoc} */\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() != Token.NAME) {\n-      return;\n-    }\n-\n-    if (NodeUtil.isLabelName(n)) {\n       return;\n     }\n \n--- a/src/com/google/javascript/jscomp/deps/DependencyInfo.java\n+++ b/src/com/google/javascript/jscomp/deps/DependencyInfo.java\n /**\n  * A data structure for JS dependency information for a single .js file.\n  *\n-*\n+ * @author agrieve@google.com (Andrew Grieve)\n  */\n public interface DependencyInfo {\n \n--- a/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java\n+++ b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java\n /**\n  * A class to hold JS dependency information for a single .js file.\n  *\n-*\n+ * @author agrieve@google.com (Andrew Grieve)\n  */\n public class SimpleDependencyInfo implements DependencyInfo {\n ", "timestamp": 1270071953, "metainfo": ""}