{"sha": "d17262c3b3da6f6839cbba8b87caa0167222981c", "log": "Restrict types when using expressions with-in goog.asserts.assert, such as (x != null), etc.  R=nicksantos DELTA=68  (51 added, 6 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4606   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     String assertedNodeName = assertedNode.getQualifiedName();\n     // Handle assertions that enforce expressions evaluate to true.\n     if (assertedType == null) {\n-      if (assertedNodeName != null) {\n-        JSType type = getJSType(assertedNode);\n-        JSType narrowed = type.restrictByNotNullOrUndefined();\n-        if (type != narrowed) {\n-          scope = narrowScope(scope, assertedNode, narrowed);\n-          callNode.setJSType(narrowed);\n-        }\n-      } else if (assertedNode.isAnd() ||\n-                 assertedNode.isOr()) {\n-        BooleanOutcomePair conditionOutcomes =\n-            traverseWithinShortCircuitingBinOp(assertedNode, scope);\n-        scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n-            assertedNode, conditionOutcomes.getOutcomeFlowScope(\n-                assertedNode.getType(), true), true);\n-      }\n-    } else if (assertedNodeName != null) {\n+      // Handle arbitrary expressions within the assert.\n+      scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n+          assertedNode, scope, true);\n+      // Build the result of the assertExpression\n+      JSType type = getJSType(assertedNode);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (type != narrowed) {\n+        callNode.setJSType(narrowed);\n+      }\n+    } else {\n       // Handle assertions that enforce expressions are of a certain type.\n       JSType type = getJSType(assertedNode);\n       JSType narrowed = type.getGreatestSubtype(getNativeType(assertedType));\n       if (type != narrowed) {\n-        scope = narrowScope(scope, assertedNode, narrowed);\n+        if (assertedNodeName != null) {\n+          scope = narrowScope(scope, assertedNode, narrowed);\n+        }\n         callNode.setJSType(narrowed);\n       }\n     }\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     verifySubtypeOf(\"y\", OBJECT_TYPE);\n   }\n \n+  public void testIf1a() {\n+    assuming(\"x\", createNullableType(OBJECT_TYPE));\n+    inFunction(\"var y = {}; if (x != null) { y = x; }\");\n+    verifySubtypeOf(\"y\", OBJECT_TYPE);\n+  }\n+\n   public void testIf2() {\n     assuming(\"x\", createNullableType(OBJECT_TYPE));\n     inFunction(\"var y = x; if (x) { y = x; } else { y = {}; }\");\n     verify(\"out2\", OBJECT_TYPE);\n   }\n \n+  public void testAssert1a() {\n+    JSType startType = createNullableType(OBJECT_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; goog.asserts.assert(x !== null); out2 = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", OBJECT_TYPE);\n+  }\n+\n   public void testAssert2() {\n     JSType startType = createNullableType(OBJECT_TYPE);\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; out2 = goog.asserts.assert(x);\");\n     verify(\"out1\", startType);\n     verify(\"out2\", OBJECT_TYPE);\n+  }\n+\n+  public void disable_testAssert8() { // Fails, out2 is UNKNOWN\n+    JSType startType = createNullableType(OBJECT_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; out2 = goog.asserts.assert(x != null);\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", BOOLEAN_TYPE);\n+  }\n+\n+  public void testAssert9() {\n+    JSType startType = createNullableType(NUMBER_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; out2 = goog.asserts.assert(y = x);\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", NUMBER_TYPE);\n+  }\n+\n+  public void testAssert10() {\n+    JSType startType = createNullableType(OBJECT_TYPE);\n+    assuming(\"x\", startType);\n+    assuming(\"y\", startType);\n+    inFunction(\"out1 = x; out2 = goog.asserts.assert(x && y); out3 = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", OBJECT_TYPE);\n+    verify(\"out3\", OBJECT_TYPE);\n   }\n \n   public void testAssertNumber() {\n     assuming(\"x\", startType);\n     inFunction(\"goog.asserts.assertNumber(x + x); out1 = x;\");\n     verify(\"out1\", startType);\n+  }\n+\n+  public void testAssertNumber3() {\n+    // Make sure it ignores expressions.\n+    JSType startType = createNullableType(ALL_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; out2 = goog.asserts.assertNumber(x + x);\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", NUMBER_TYPE);\n   }\n \n   public void testAssertString() {", "timestamp": 1335215467, "metainfo": ""}