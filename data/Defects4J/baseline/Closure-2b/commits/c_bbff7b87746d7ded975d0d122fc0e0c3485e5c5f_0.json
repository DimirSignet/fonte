{"sha": "bbff7b87746d7ded975d0d122fc0e0c3485e5c5f", "log": "Add get and set support to the property renaming passes.  R=nicksantos DELTA=70  (58 added, 5 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=122   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RenameProperties.java\n+++ b/src/com/google/javascript/jscomp/RenameProperties.java\n           for (Node child = n.getFirstChild();\n                child != null;\n                child = child.getNext()) {\n-            if (child.getType() == Token.STRING) {\n+            if (child.getType() != Token.NUMBER) { // expect STRING, GET, SET\n               externedNames.add(child.getString());\n             }\n           }\n           }\n           break;\n         case Token.OBJECTLIT:\n-          // The children of an OBJECTLIT node are alternating key/value pairs.\n-          // We skip the values.\n-          for (Node key = n.getFirstChild(); key != null;\n-               key = key.getNext()) {\n+          for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {\n             // We only want keys that are strings (not numbers), and only keys\n             // that were unquoted.\n-            if (key.getType() == Token.STRING) {\n+            if (key.getType() != Token.NUMBER) {\n               if (!key.isQuotedString()) {\n                 maybeMarkCandidate(key);\n               } else {\n--- a/src/com/google/javascript/jscomp/RenamePrototypes.java\n+++ b/src/com/google/javascript/jscomp/RenamePrototypes.java\n                  child != null;\n                  child = child.getNext()) {\n \n-              if (child.getType() == Token.STRING) {\n+              if (child.getType() != Token.NUMBER) {\n                 markObjLitPropertyCandidate(child, t.getInput());\n               }\n             }\n             // the traversal reaches it.\n             prototypeObjLits.add(map);\n \n-            // assumes the object literal is well formed\n-            // (has an even number of children)\n             for (Node key = map.getFirstChild();\n                  key != null; key = key.getNext()) {\n-              if (key.getType() == Token.STRING) {\n+              if (key.getType() != Token.NUMBER) { // May be STRING, GET, or SET\n                 markPrototypePropertyCandidate(key, input);\n               }\n             }\n--- a/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n          \"Bar.prototype.b = function(){}\");\n   }\n \n-  public void testPrototypePropertiesAsObjLitKeys() {\n+  public void testPrototypePropertiesAsObjLitKeys1() {\n     test(\"Bar.prototype = {2: function(){}, getA: function(){}}; bar[2]();\",\n          \"Bar.prototype = {2: function(){}, a: function(){}}; bar[2]();\");\n   }\n \n-  public void testMixedQuotedAndUnquotedObjLitKeys() {\n+  public void testPrototypePropertiesAsObjLitKeys2() {\n+    // TODO(johnlenz): Add tests when Rhino supports numbers and quoted strings\n+    // for get and set.\n+\n+    // testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");\n+\n+    // testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");\n+\n+    test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n+         \"Bar.prototype = {get a(){}}; bar.a;\");\n+  }\n+\n+  public void testPrototypePropertiesAsObjLitKeys3() {\n+    // TODO(johnlenz): Add tests when Rhino supports numbers and quoted strings\n+    // for get and set.\n+\n+    // testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");\n+\n+    // testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");\n+\n+    test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n+         \"Bar.prototype = {set a(x){}}; bar.a;\");\n+  }\n+\n+  public void testMixedQuotedAndUnquotedObjLitKeys1() {\n+    test(\"Bar = {getA: function(){}, 'getB': function(){}}; bar.getA();\",\n+         \"Bar = {a: function(){}, 'getB': function(){}}; bar.a();\");\n+  }\n+\n+  public void testMixedQuotedAndUnquotedObjLitKeys2() {\n     test(\"Bar = {getA: function(){}, 'getB': function(){}}; bar.getA();\",\n          \"Bar = {a: function(){}, 'getB': function(){}}; bar.a();\");\n   }\n--- a/test/com/google/javascript/jscomp/RenamePrototypesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePrototypesTest.java\n          \";bar.b();bar.a\");\n   }\n \n+  public void testRenamePrototypesWithGetOrSet() {\n+    // Simple\n+    // TODO(johnlenz): Enable these for after Rhino support is added.\n+    // test(\"Bar.prototype={get 'getFoo'(){}}\",\n+    //      \"Bar.prototype={get a(){}}\");\n+    // test(\"Bar.prototype={get 2(){}}\",\n+    //      \"Bar.prototype={get 2(){}}\");\n+    test(\"Bar.prototype={get getFoo(){}}\",\n+         \"Bar.prototype={get a(){}}\");\n+    test(\"Bar.prototype={get getFoo(){}}; a.getFoo;\",\n+         \"Bar.prototype={get a(){}}; a.a;\");\n+\n+    // TODO(johnlenz): Enable these for after Rhino support is added.\n+    // test(\"Bar.prototype={set 'getFoo'(x){}}\",\n+    //      \"Bar.prototype={set a(x){}}\");\n+    // test(\"Bar.prototype={set 2(x){}}\",\n+    //      \"Bar.prototype={set 2(x){}}\");\n+    test(\"Bar.prototype={set getFoo(x){}}\",\n+         \"Bar.prototype={set a(x){}}\");\n+    test(\"Bar.prototype={set getFoo(x){}}; a.getFoo;\",\n+         \"Bar.prototype={set a(x){}}; a.a;\");\n+    \n+    // overlap\n+    test(\"Bar.prototype={get a(){},\" +\n+         \"get b(){}};b.b()\",\n+         \"Bar.prototype={get b(){},\" +\n+         \"get a(){}};b.a()\");\n+  }\n+\n   /**\n    * Test renaming private properties (end with underscores) and test to make\n    * sure we don't rename other properties.", "timestamp": 1292265970, "metainfo": ""}