{"sha": "33ab4df84afbdb36216b8a1ea3a526c438615e26", "log": "When declaring @const vars initialized to a type-casted value, prefer the type-cast as the declared type. fixes issue 688  R=johnlenz DELTA=26  (25 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5125   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n           if (info.isConstant()) {\n             JSType knownType = null;\n             if (rValue != null) {\n-              if (rValue.getJSType() != null\n+              JSDocInfo rValueInfo = rValue.getJSDocInfo();\n+              if (rValueInfo != null && rValueInfo.hasType()) {\n+                // If rValue has a type-cast, we use the type in the type-cast.\n+                return rValueInfo.getType().evaluate(scope, typeRegistry);\n+              } else if (rValue.getJSType() != null\n                   && !rValue.getJSType().isUnknownType()) {\n+                // If rValue's type was already computed during scope creation,\n+                // then we can safely use that.\n                 return rValue.getJSType();\n               } else if (rValue.isOr()) {\n                 // Check for a very specific JS idiom:\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n          \"  }\" +\n          \"  return results;\" +\n          \"}\");\n+  }\n+\n+  public void testIssue688() throws Exception {\n+    testTypes(\n+        \"/** @const */ var SOME_DEFAULT =\\n\" +\n+        \"    /** @type {TwoNumbers} */ ({first: 1, second: 2});\\n\" +\n+        \"/**\\n\" +\n+        \"* Class defining an interface with two numbers.\\n\" +\n+        \"* @interface\\n\" +\n+        \"*/\\n\" +\n+        \"function TwoNumbers() {}\\n\" +\n+        \"/** @type number */\\n\" +\n+        \"TwoNumbers.prototype.first;\\n\" +\n+        \"/** @type number */\\n\" +\n+        \"TwoNumbers.prototype.second;\\n\" +\n+        \"/** @return {number} */ function f() { return SOME_DEFAULT; }\",\n+        \"inconsistent return type\\n\" +\n+        \"found   : (TwoNumbers|null)\\n\" +\n+        \"required: number\");\n   }\n \n   public void testIssue700() throws Exception {", "timestamp": 1341849623, "metainfo": ""}