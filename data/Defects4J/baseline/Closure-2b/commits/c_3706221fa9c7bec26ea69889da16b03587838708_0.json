{"sha": "3706221fa9c7bec26ea69889da16b03587838708", "log": "fix a minor type parsing bug Add some tests to ensure that you can use unknown variable argument lists to silence warnings  R=acleung DELTA=83  (83 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4193   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n       // {?=} - equals\n       // {function(?, number)} - comma\n       // {function(number, ?)} - right paren\n+      // {function(number, ...[?])} - right bracket\n       // {function(): ?|number} - pipe\n       // I'm not a big fan of using look-ahead for this, but it makes\n       // the type language a lot nicer.\n       token = next();\n       if (token == JsDocToken.COMMA ||\n           token == JsDocToken.EQUALS ||\n+          token == JsDocToken.RB ||\n           token == JsDocToken.RC ||\n           token == JsDocToken.RP ||\n           token == JsDocToken.PIPE) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n         \"found   : (number|undefined)\\n\" +\n         \"required: string\");\n+  }\n+\n+  public void testOverriddenParams1() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @param {...?} var_args */\" +\n+        \"Foo.prototype.bar = function(var_args) {};\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */ function SubFoo() {}\" +\n+        \"/**\\n\" +\n+        \" * @param {number} x\\n\" +\n+        \" * @override\\n\" +\n+        \" */\" +\n+        \"SubFoo.prototype.bar = function(x) {};\");\n+  }\n+\n+  public void testOverriddenParams2() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @type {function(...[?])} */\" +\n+        \"Foo.prototype.bar = function(var_args) {};\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */ function SubFoo() {}\" +\n+        \"/**\\n\" +\n+        \" * @type {function(number)}\\n\" +\n+        \" * @override\\n\" +\n+        \" */\" +\n+        \"SubFoo.prototype.bar = function(x) {};\");\n+  }\n+\n+  public void testOverriddenParams3() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @param {...number} var_args */\" +\n+        \"Foo.prototype.bar = function(var_args) { };\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */ function SubFoo() {}\" +\n+        \"/**\\n\" +\n+        \" * @param {number} x\\n\" +\n+        \" * @override\\n\" +\n+        \" */\" +\n+        \"SubFoo.prototype.bar = function(x) {};\",\n+        \"mismatch of the bar property type and the type of the \" +\n+        \"property it overrides from superclass Foo\\n\" +\n+        \"original: function (this:Foo, ...[number]): undefined\\n\" +\n+        \"override: function (this:SubFoo, number): undefined\");\n+  }\n+\n+  public void testOverriddenParams4() throws Exception {\n+    // TODO(nicksantos): This should emit a warning.\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @type {function(...[number])} */\" +\n+        \"Foo.prototype.bar = function(var_args) {};\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */ function SubFoo() {}\" +\n+        \"/**\\n\" +\n+        \" * @type {function(number)}\\n\" +\n+        \" * @override\\n\" +\n+        \" */\" +\n+        \"SubFoo.prototype.bar = function(x) {};\");\n+    /*\n+        \"mismatch of the bar property type and the type of the \" +\n+        \"property it overrides from superclass Foo\\n\" +\n+        \"original: function (this:Foo, ...[number]): undefined\\n\" +\n+        \"override: function (this:SubFoo, number): undefined\");\n+        */\n   }\n \n   public void testOverriddenReturn1() throws Exception {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n \n   public void testParseFunctionalType18() throws Exception {\n     testParseType(\"function (?): (?|number)\", \"function (?): ?\");\n+  }\n+\n+  public void testParseFunctionalType19() throws Exception {\n+    testParseType(\n+        \"function(...[?]): void\",\n+        \"function (...[?]): undefined\");\n   }\n \n   public void testStructuralConstructor() throws Exception {", "timestamp": 1328742055, "metainfo": ""}