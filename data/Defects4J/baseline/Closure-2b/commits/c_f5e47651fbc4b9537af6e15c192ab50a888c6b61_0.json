{"sha": "f5e47651fbc4b9537af6e15c192ab50a888c6b61", "log": "Open source the jsonml-caja integration test.  R=nicksantos DELTA=15  (12 added, 2 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=148   ", "commit": "\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java\n+/*\n+ * Copyright 2010 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.jsonml;\n+\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.CompilerPass;\n+import com.google.javascript.jscomp.CompilerTestCase;\n+\n+import com.google.javascript.jscomp.jsonml.Writer;\n+import com.google.javascript.jscomp.jsonml.JsonML;\n+import com.google.javascript.jscomp.jsonml.JsonMLAst;\n+import com.google.javascript.jscomp.jsonml.JsonMLUtil;\n+\n+import com.google.javascript.rhino.Node;\n+\n+import com.google.caja.parser.js.JsonMLParser;\n+\n+/**\n+ * Tests for parsing JsonML to AST and vice versa.\n+ * @author dhans@google.com (Daniel Hans)\n+ *\n+ */\n+public class JsonMLConversionTest extends CompilerTestCase {\n+\n+  @Override\n+  public CompilerPass getProcessor(Compiler compiler) {\n+    return null; // unused\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    enableEcmaScript5(true);\n+  }\n+\n+  private void testConversion(String js, String jsonml) throws Exception {\n+    JsonML jsonMLRoot = JsonMLUtil.parseString(jsonml);\n+    Node astRoot = parseExpectedJs(js);\n+\n+    // test JsonML -> AST conversion\n+    JsonMLAst ast = new JsonMLAst(jsonMLRoot);\n+    Node resultAstRoot = ast.getAstRoot(null);\n+\n+    String explanation = resultAstRoot.checkTreeEquals(astRoot);\n+    assertNull(\"JsonML converter returned an incorrect AST for \" + js + \".\\n\" +\n+        explanation, explanation);\n+\n+    // test AST -> JsonML conversion\n+    jsonMLRoot = JsonMLUtil.parseString(jsonml);\n+    Writer parser = new Writer();\n+    JsonML resultJsonMLRoot = parser.processAst(astRoot);\n+\n+    explanation = JsonMLUtil.compare(resultJsonMLRoot, jsonMLRoot);\n+    assertNull(\"AST converter returned an incorrect JsonML for \" + js + \".\\n\" +\n+        explanation, explanation);\n+  }\n+\n+  private void testJsonMLToAstConversion(String js) throws Exception {\n+    JsonML jsonml = JsonMLParser.parse(js);\n+    Node ast = parseExpectedJs(js);\n+    testJsonMLToAstConversion(ast, jsonml, js);\n+  }\n+\n+  private void testJsonMLToAstConversion(Node astRoot, JsonML jsonmlRoot,\n+      String js) {\n+    Compiler compiler = new Compiler();\n+    JsonMLAst ast = new JsonMLAst(jsonmlRoot);\n+    Node resultAstRoot = ast.getAstRoot(compiler);\n+\n+    String explanation = resultAstRoot.checkTreeEquals(astRoot);\n+    assertNull(\"JsonML -> AST converter returned incorect result for \" + js\n+        + \"\\n\" + explanation, explanation);\n+  }\n+\n+  private void testAstToJsonMLConverstion(Node astRoot, JsonML jsonmlRoot,\n+      String js) {\n+    JsonML resultJsonMLRoot = (new Writer()).processAst(astRoot);\n+    String explanation = JsonMLUtil.compare(resultJsonMLRoot, jsonmlRoot);\n+    assertNull(\"AST -> JsonML converter returned incorrect result for \" + js +\n+        \"\\n\" + explanation, explanation);\n+  }\n+\n+  private void testConversion(String js) throws Exception {\n+    JsonML jsonml = JsonMLParser.parse(js);\n+    Node ast = parseExpectedJs(js);\n+    testJsonMLToAstConversion(ast, jsonml, js);\n+\n+    jsonml = JsonMLParser.parse(js);\n+    testAstToJsonMLConverstion(ast, jsonml, js);\n+  }\n+\n+  public void testArray() throws Exception {\n+    testConversion(\"[]\");\n+    testConversion(\"[function (x) {}]\");\n+    testConversion(\"[[], [a, [], [[[]], 1], f([a])], 1];\");\n+    testConversion(\"x = [1, 2, 3]\");\n+    testConversion(\"var x = [1, 2, 3]\");\n+    testConversion(\"[, 1, Object(), , , 2]\");\n+    testConversion(\"[{x: 'abc', y: 1}]\");\n+  }\n+\n+  public void testAssignOperators() throws Exception {\n+    testConversion(\"x += 1, x -= 1, x *= 1, x /= 1, x %= 1\");\n+    testConversion(\"x |= 1, x ^= x, x &= 0\");\n+    testConversion(\"x <<= 1, x >>= 1, x >>>= 1\");\n+    testConversion(\"y = x += 1\");\n+  }\n+\n+  public void testCalls() throws Exception {\n+    testConversion(\"f()\");\n+    testConversion(\"f(1)\");\n+    testConversion(\"f('a')\");\n+    testConversion(\"f(true)\");\n+    testConversion(\"f(null)\");\n+    testConversion(\"f(undefined)\");\n+\n+    testConversion(\"f(a + b)\");\n+    testConversion(\"f(g(h(a)) * h(g(u(z('a')))))\");\n+\n+    testConversion(\"x = f()\");\n+    testConversion(\"x = f(1)\");\n+    testConversion(\"x = f(a + b)\");\n+    testConversion(\"x = f(g(h(a)) * h(g(u(z('a')))))\");\n+\n+    testConversion(\"String('a')\");\n+    testConversion(\"Number(1)\");\n+    testConversion(\"Boolean(0)\");\n+    testConversion(\"Object()\");\n+    testConversion(\"Array('a', 1, false, null, Object(), String('a'))\");\n+\n+    testConversion(\"(function() {})()\");\n+    testConversion(\"(function(x) {})(x)\");\n+    testConversion(\"(function(x) {var y = x << 1; return y})(x)\");\n+    testConversion(\"(function(x) {y = x << 1; return y})(x)\");\n+    testConversion(\"var x = (function(x) {y = x << 1; return y})(x)\");\n+    testConversion(\"var x = (function(x) {return x << 1})(x)\");\n+\n+    testConversion(\"eval()\");\n+    testConversion(\"eval('x')\");\n+    testConversion(\"x = eval('x')\");\n+    testConversion(\"var x = eval('x')\");\n+    testConversion(\"eval(Template('foo${bar}baz')); var Template;\");\n+\n+    testConversion(\"a.x()\");\n+    testConversion(\"a[x]()\");\n+    testConversion(\"z = a.x()\");\n+    testConversion(\"var z = a.x()\");\n+    testConversion(\"z = a[x]()\");\n+    testConversion(\"z = a['x']()\");\n+    testConversion(\"var z = a[x]()\");\n+    testConversion(\"var z = a['x']()\");\n+    testConversion(\"a.x(y)\");\n+    testConversion(\"a[x](y)\");\n+    testConversion(\"a['x'](y)\");\n+    testConversion(\"a[x](y, z, 'a', null, true, f(y))\");\n+    testConversion(\"a['x'](y, z, 'a', null, true, f(y))\");\n+    testConversion(\"a[b[c[d]]()].x\");\n+\n+    testConversion(\"(f())()\");\n+    testConversion(\"(f(x))(y)\");\n+    testConversion(\"(f = getFn())()\");\n+  }\n+\n+  public void testConditionals() throws Exception {\n+    testConversion(\"x ? y : z\");\n+    testConversion(\"result = x ? y : z\");\n+  }\n+  public void testDecIncOperators() throws Exception {\n+    testConversion(\"x--\");\n+    testConversion(\"--x\");\n+    testConversion(\"x++\");\n+    testConversion(\"++x\");\n+    testConversion(\"var y=x++, z=++x; var s=y--, r=++y;\");\n+  }\n+\n+  public void testDelete() throws Exception {\n+    testConversion(\"delete a\");\n+    testConversion(\"delete a.x\");\n+    testConversion(\"delete f()\");\n+    testConversion(\"delete a[0]\");\n+    testConversion(\"delete a.x()\");\n+    testConversion(\"delete a.x[0]\");\n+    testConversion(\"delete a.x[0]()\");\n+    testConversion(\"delete (a.x[0]())('a', 'b')\");\n+  }\n+\n+  public void testDirectives() throws Exception {\n+    testConversion(\"'use strict'\");\n+    testConversion(\"function foo() {'use strict'}\");\n+    testConversion(\"'use strict'; function foo() {'use strict'}\");\n+  }\n+\n+  public void testDoWhile() throws Exception {\n+  //   testConversion(\"do; while (true)\");\n+     testConversion(\"do {} while (true)\");\n+     testConversion(\"do {;} while (true)\");\n+     testConversion(\"do {} while (f(x, y))\");\n+     testConversion(\"do {} while (f(f(f(x, y))))\");\n+     testConversion(\"do {} while ((f(f(f(x, y))))())\");\n+     testConversion(\"do {2 + 3; q = 2 + 3; var v = y * z;\"\n+         + \"g = function(a) {true; var b = a + 1; return a * a}} while (--x)\");\n+   }\n+\n+  public void testFor() throws Exception {\n+     testConversion(\"for (;true;) {;}\");\n+     testJsonMLToAstConversion(\"for (i = 0; i < 10; ++i) x++\");\n+     testConversion(\"for (i = 0; i < 10; ++i) {x++}\");\n+     testConversion(\"for (i = 0; i < 10; ++i) {2 + 3; q = 2 + 3; \"\n+         + \"var v = y * z; g = function(a) {true; var b = a + 1;\"\n+         + \"return a * a}}\");\n+\n+     testConversion(\"for(;true;) {break}\");\n+     testConversion(\"for(i = 0; i < 10; ++i) {if (i > 5) {break}}\");\n+     testConversion(\"s: for(i = 0; i < 10; ++i) {if (i > 5) {break s}}\");\n+     testConversion(\"for (i = 0;true; ++i) {\"\n+         + \"if (i % 2) {continue} else {var x = i / 3; f(x)}}\");\n+   }\n+\n+  public void testForIn() throws Exception {\n+    testConversion(\"for (var i in x) {}\");\n+    testConversion(\"for (var i in x) {;}\");\n+    testConversion(\"for (var i in x) {f(x)}\");\n+    testConversion(\"s: for(var i in x) {if (i > 5) {break s}}\");\n+    testConversion(\"for (var i in x) {if (i % 2) {\"\n+        + \"continue} else {var x = i / 3; f(x)}}\");\n+    testConversion(\"for (var i in x) {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; return a * a}}\");\n+\n+    testConversion(\"for (i in x) {}\");\n+    testConversion(\"for (i in x) {;}\");\n+    testConversion(\"for (i in x) {f(x)}\");\n+    testConversion(\"s: for (i in x) {if (i > 5) {break s}}\");\n+    testConversion(\"for (i in x) {if (i % 2) {\"\n+        + \"continue} else {var x = i / 3; f(x)}}\");\n+    testConversion(\"for (i in x) {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; return a * a}}\");\n+\n+  }\n+\n+  public void testFunctions() throws Exception {\n+    testConversion(\"(function () {})\");\n+    testConversion(\"(function (x, y) {})\");\n+    testConversion(\"(function () {})()\");\n+    testConversion(\"(function (x, y) {})()\");\n+    testConversion(\"[ function f() {} ]\");\n+    testConversion(\"var f = function f() {};\");\n+    testConversion(\"for (function f() {};true;) {}\");\n+    testConversion(\"x = (function (x, y) {})\");\n+\n+    testConversion(\"function f() {}\");\n+    testConversion(\"for (;true;) { function f() {} }\");\n+\n+    testConversion(\"function f() {;}\");\n+    testConversion(\"function f() {x}\");\n+    testConversion(\"function f() {x;y;z}\");\n+    testConversion(\"function f() {{}}\");\n+  }\n+\n+  public void testIfElse1() throws Exception {\n+    testConversion(\"if (true) {x = 1}\");\n+    testConversion(\"if (true) {x = 1} else {x = 2}\");\n+    testConversion(\"if (f(f(f()))) {x = 1} else {x = 2}\");\n+    testConversion(\"if ((f(f(f())))()) {x = 1} else {x = 2}\");\n+    testConversion(\"if (true) {x = 1}; x = 1;\");\n+  }\n+\n+  public void testLabels() throws Exception {\n+    testConversion(\"s: ;\");\n+    testConversion(\"s: {;}\");\n+    testConversion(\"s: while(true) {;}\");\n+    testConversion(\"s: switch (x) {case 'a': break s;}\");\n+  }\n+\n+  public void testLogicalExpr() throws Exception {\n+    testConversion(\"a && b\");\n+    testConversion(\"a || b\");\n+    testConversion(\"a && b || c\");\n+    testConversion(\"a && (b || c)\");\n+    testConversion(\"f(x) && (function (x) {\"\n+        + \"return x % 2 == 0 })(z) || z % 3 == 0 ? true : false\");\n+  }\n+\n+  public void testMathExpr() throws Exception {\n+    testConversion(\"2 + 3 * 4\");\n+    testConversion(\"(2 + 3) * 4\");\n+    testConversion(\"2 * (3 + 4)\");\n+  }\n+\n+  public void testMember() throws Exception {\n+    testConversion(\"o.x\");\n+    testConversion(\"a.b.c\");\n+    testConversion(\"a.b.c.d\");\n+    testConversion(\"o[x]\");\n+    testConversion(\"o[0]\");\n+    testConversion(\"o[2 + 3 * 4]\");\n+    testConversion(\"o[(function (x){var y = g(x) << 1; return y * x})()]\");\n+    testConversion(\"o[o.x]\");\n+    testConversion(\"o.x[x]\");\n+    testConversion(\"a.b[o.x]\");\n+    testConversion(\"a.b[1]\");\n+    testConversion(\"a[b[c[d]]].x\");\n+  }\n+\n+  public void testNew() throws Exception {\n+    testConversion(\"new A\");\n+    testConversion(\"new A()\");\n+\n+    testConversion(\"new A(x, y, z)\");\n+    testConversion(\"new A(f(x), g(y), h(z))\");\n+    testConversion(\"new A(x, new B(x, y), z)\");\n+    testConversion(\"new A(1), new B()\");\n+    testConversion(\"new A, B\");\n+\n+    testConversion(\"x = new A(a)\");\n+    testConversion(\"var x = new A(a, b)\");\n+    testConversion(\"var x = new A(1), y = new B()\");\n+  }\n+\n+  public void testObject() throws Exception {\n+    testConversion(\"x = {}\");\n+    testConversion(\"var x = {}\");\n+    testConversion(\"x = {x: 1, y: 2}\");\n+    testConversion(\"var x = {'2': 1, 'a': 2}\");\n+    testConversion(\"x = {x: null}\");\n+    testConversion(\"x = {'a': function f() {}}\");\n+    testConversion(\"x = {'1': function f() {}}\");\n+    testConversion(\"x = {'a': f()}\");\n+    testConversion(\"x = {'1': f()}\");\n+    testConversion(\"x = {'a': function f() {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; return a * a}}}\");\n+    testConversion(\"x = {'1': function f() {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; return a * a}}}\");\n+    testConversion(\"x = {get a() {return 1}}\");\n+    testConversion(\"x = {set a(b) {}}\");\n+  }\n+\n+  public void testOperators() throws Exception {\n+    testConversion(\"x instanceof Null\");\n+    testConversion(\"!x instanceof A\");\n+    testConversion(\"!(x instanceof A)\");\n+\n+    testConversion(\"'a' in x\");\n+    testConversion(\"if('a' in x) {f(x)}\");\n+    testConversion(\"undefined in A\");\n+    testConversion(\"!(Number(1) in [2, 3, 4])\");\n+\n+    testConversion(\"true ? x : y\");\n+    testConversion(\"(function() {var y = 2 + 3 * 4; return y >> 1})() ? x : y\");\n+  }\n+\n+  public void testReturnStatement() throws Exception {\n+    testConversion(\"x = function f() {return}\");\n+    testConversion(\"x = function f() {return 1}\");\n+    testConversion(\"x = function f() {return 2 + 3 / 4}\");\n+    testConversion(\"x = function f() {return function() {}}\");\n+    testConversion(\"x = function f() {var y = 2; \"\n+        + \"return function() {return y * 3}}\");\n+    testConversion(\"x = function f() {z = 2 + 3; \"\n+        + \"return (function(z) {return z * y})(z)}\");\n+  }\n+\n+  public void testRegExp() throws Exception {\n+    testConversion(\"/ab/\");\n+    testConversion(\"/ab/g\");\n+    testConversion(\"x = /ab/\");\n+    testConversion(\"x = /ab/g\");\n+    testConversion(\"var x = /ab/\");\n+    testConversion(\"var x = /ab/g\");\n+    testConversion(\"function f() {\"\n+        + \"/ab/; var x = /ab/; (function g() {/ab/; var x = /ab/})()}\");\n+    testConversion(\"var f = function () {return /ab/g;}\");\n+  }\n+\n+  public void testSimplePrograms() throws Exception {\n+    testConversion(\";\");\n+    testConversion(\"1\");\n+    testConversion(\"x\");\n+    testConversion(\"x=1\");\n+    testConversion(\"{}\");\n+    testConversion(\"{;}\");\n+    testConversion(\"{x=1}\");\n+    testConversion(\"x='a'\");\n+\n+    testConversion(\"true\");\n+    testConversion(\"false\");\n+    testConversion(\"x=true\");\n+    testConversion(\"x=false\");\n+\n+    testConversion(\"undefined\");\n+    testConversion(\"x=undefined\");\n+\n+    testConversion(\"null\");\n+    testConversion(\"x = null\");\n+\n+    testConversion(\"this\");\n+    testConversion(\"2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; return a * a}\");\n+\n+    testConversion(\"a; b\");\n+    testConversion(\"a; b; c; d\");\n+\n+    testConversion(\"x = function () {}\");\n+    testConversion(\"x = function f() {}\");\n+\n+    testConversion(\"x = function (arg1, arg2) {}\");\n+    testConversion(\"x = function f(arg1, arg2) {}\");\n+\n+    testConversion(\"x = function f(arg1, arg2) {1}\");\n+    testConversion(\"x = function f(arg1, arg2) {x}\");\n+\n+    testConversion(\"x = function f(arg1, arg2) {x = 1 + 1}\");\n+\n+    testConversion(\"var re = new RegExp(document.a.b.c);\"\n+        + \"var m = re.exec(document.a.b.c);\");\n+\n+  }\n+\n+  public void testSwitch() throws Exception {\n+  testConversion(\"switch (x) {}\");\n+  testConversion(\"switch (x) {case 'a':}\");\n+  testConversion(\"switch (x) {case 'a':case 'b':}\");\n+  testConversion(\"switch (x) {case 'a':case 'b': x}\");\n+  testConversion(\"switch (x) {case 'a':case 'b': {;}}\");\n+  testConversion(\"switch (x) {case 'a':case 'b': f()}\");\n+  testConversion(\"switch (x) {case 'x': case 'y': {;} case 'a':case 'b': f()}\");\n+  testConversion(\"switch (x) {case 'a': f(x)}\");\n+  testConversion(\"switch (x) {case 'a': {f()} {g(x)}}\");\n+  testConversion(\"switch (x) {case 'a': f(); g(x)}\");\n+  testConversion(\"switch (x) {default: ;}\");\n+  testConversion(\"switch (x) {default:case 'a': ;}\");\n+  testConversion(\"switch (x) {case 'a':case'b':default: f()}\");\n+  testConversion(\"switch (x) {default:f(x); g(); case 'a': ; case 'b': g(x)}\");\n+  testConversion(\"switch (x) {case 'a': default: {f(x); g(z)} case 'b': g(x)}\");\n+  testConversion(\"switch (x) {case x: {;}}\");\n+}\n+\n+  public void testType() throws Exception {\n+    testConversion(\"undefined\");\n+    testConversion(\"null\");\n+\n+    testConversion(\"0\");\n+    testConversion(\"+0\");\n+    testConversion(\"0.0\");\n+\n+    testConversion(\"3.14\");\n+    testConversion(\"+3.14\");\n+\n+    testConversion(\"true\");\n+    testConversion(\"false\");\n+  }\n+\n+  public void testThis() throws Exception {\n+    testConversion(\"this\");\n+    testConversion(\"var x = this\");\n+    testConversion(\"this.foo()\");\n+    testConversion(\"var x = this.foo()\");\n+    testConversion(\"this.bar\");\n+    testConversion(\"var x = this.bar()\");\n+    testConversion(\"switch(this) {}\");\n+    testConversion(\"x + this\");\n+  }\n+\n+  public void testThrow() throws Exception {\n+    testConversion(\"throw e\");\n+    testConversion(\"throw 2 + 3 * 4\");\n+    testConversion(\"throw (function () {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; return a * a}})()\");\n+    testConversion(\"throw f(x)\");\n+    testConversion(\"throw f(f(f(x)))\");\n+    testConversion(\"throw (f(f(x), y))()\");\n+  }\n+\n+  public void testTry() throws Exception {\n+    testConversion(\"try {} catch (e) {}\");\n+    testConversion(\"try {;} catch (e) {;}\");\n+    testConversion(\"try {var x = 0; y / x} catch (e) {f(e)}\");\n+    testConversion(\"try {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; h(q); return a * a}; \"\n+        + \"h(q)} catch (e) {f(x)}\");\n+\n+    testConversion(\"try {} finally {}\");\n+    testConversion(\"try {;} finally {;}\");\n+    testConversion(\"try {var x = 0; y / x} finally {f(y)}\");\n+    testConversion(\"try {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; h(q); return a * a}; \"\n+        + \"h(q)} finally {f(x)}\");\n+\n+    testConversion(\"try {} catch (e) {} finally {}\");\n+    testConversion(\"try {;} catch (e) {;} finally {;}\");\n+    testConversion(\"try {var x = 0; y / x} catch (e) {;} finally {;}\");\n+    testConversion(\"try {2 + 3; q = 2 + 3; var v = y * z; \"\n+        + \"g = function(a) {true; var b = a + 1; h(q); return a * a}; h(q)} \"\n+        + \"catch (e) {f(x)} finally {f(x)}\");\n+  }\n+\n+  public void testTypeof() throws Exception {\n+    testConversion(\"typeof undefined\");\n+    testConversion(\"typeof null\");\n+    testConversion(\"typeof 1\");\n+    testConversion(\"typeof 'a'\");\n+    testConversion(\"typeof false\");\n+\n+    testConversion(\"typeof Null()\");\n+    testConversion(\"typeof Number(1)\");\n+    testConversion(\"typeof String('a')\");\n+    testConversion(\"typeof Boolean(0)\");\n+\n+    testConversion(\"typeof x\");\n+    testConversion(\"typeof new A()\");\n+    testConversion(\"typeof new A(x)\");\n+    testConversion(\"typeof f(x)\");\n+    testConversion(\"typeof (function() {})()\");\n+    testConversion(\"typeof 2 + 3 * 4\");\n+\n+    testConversion(\"typeof typeof x\");\n+    testConversion(\"typeof typeof typeof x\");\n+  }\n+\n+  public void testUnaryExpressions() throws Exception {\n+    testConversion(\"!x\");\n+    testConversion(\"!null\");\n+    testConversion(\"!3.14\");\n+    testConversion(\"!true\");\n+\n+    testConversion(\"~x\");\n+    testConversion(\"~null\");\n+    testConversion(\"~3.14\");\n+    testConversion(\"~true\");\n+\n+    testConversion(\"+x\");\n+    testConversion(\"+null\");\n+    testConversion(\"+3.14\");\n+    testConversion(\"+true\");\n+\n+    testConversion(\"-x\");\n+    testConversion(\"-null\");\n+    testConversion(\"-true\");\n+\n+    testConversion(\"!~+-z\");\n+    testConversion(\"void x\");\n+    testConversion(\"void null\");\n+    testConversion(\"void void !x\");\n+    testConversion(\"void (x + 1)\");\n+  }\n+\n+  public void testVarDeclarations() throws Exception {\n+    testConversion(\"var x\");\n+    testConversion(\"var x = 1\");\n+    testConversion(\"var x = 1 + 1\");\n+    testConversion(\"var x = 'a' + 'b'\");\n+\n+    testConversion(\"var x, y, z\");\n+    testConversion(\"var x = 2, y = 2 * x, z\");\n+\n+    testConversion(\"var x = function () {}\");\n+    testConversion(\"var x = function f() {}\");\n+    testConversion(\"var x = function f(arg1, arg2) {}\");\n+\n+    testConversion(\"var x = function f(arg1, arg2) {1}\");\n+    testConversion(\"var x = function f(arg1, arg2) {x}\");\n+    testConversion(\"var x = function f(arg1, arg2) {x = 2 * 3}\");\n+\n+    testConversion(\"var x = function f() {var x}\");\n+    testConversion(\"var x = function f() {var y = (z + 2) * q}\");\n+\n+    testConversion(\"var x = function f(a, b) {\"\n+        + \"var y = function g(a, b) {z = a + b}}\");\n+  }\n+\n+  public void testWhile() throws Exception {\n+     testConversion(\"while (true) {;}\");\n+     testConversion(\"while (true) {f()}\");\n+     testConversion(\"while (f(x, y)) {break;}\");\n+     testConversion(\"while (f(f(f(x, y)))) {}\");\n+     testConversion(\"while ((f(f(f(x, y))))()) {}\");\n+\n+     testConversion(\"while (x--) {2 + 3; q = 2 + 3; var v = y * z; \"\n+         + \"g = function(a) {true; var b = a + 1; return a * a}}\");\n+   }\n+\n+  public void testWith() throws Exception {\n+     testConversion(\"with ({}) {}\");\n+     testConversion(\"with ({}) {;}\");\n+     testConversion(\"with (x) {}\");\n+     testConversion(\"with (x) {f(x)}\");\n+     testConversion(\"with ({'1': function f() {2 + 3; q = 2 + 3; var v = y * z;\"\n+         + \"g = function(a) {true; var b = a + 1; return a * a}}}) {f(1)}\");\n+     testConversion(\"with (x in X) {x++}\");\n+   }\n+}", "timestamp": 1292461152, "metainfo": ""}