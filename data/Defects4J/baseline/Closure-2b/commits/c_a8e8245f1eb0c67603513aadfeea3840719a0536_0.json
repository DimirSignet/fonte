{"sha": "a8e8245f1eb0c67603513aadfeea3840719a0536", "log": "canAssignTo -> isSubtype there's no real reason for this method to exist  R=dimvar DELTA=415  (0 added, 11 deleted, 404 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5872   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       // there is a superclass implementation\n       JSType superClassPropType =\n           superClass.getInstanceType().getPropertyType(propertyName);\n-      if (!propertyType.canAssignTo(superClassPropType)) {\n+      if (!propertyType.isSubtype(superClassPropType)) {\n         compiler.report(\n             t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                 propertyName, topInstanceType.toString(),\n         if (interfaceType.hasProperty(propertyName)) {\n           JSType superPropertyType =\n               interfaceType.getPropertyType(propertyName);\n-          if (!propertyType.canAssignTo(superPropertyType)) {\n+          if (!propertyType.isSubtype(superPropertyType)) {\n             topInstanceType = interfaceType.getConstructor().\n                 getTopMostDefiningType(propertyName);\n             compiler.report(\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n   boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, Node owner, String propName) {\n     // The NoType check is a hack to make typedefs work OK.\n-    if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n+    if (!leftType.isNoType() && !rightType.isSubtype(leftType)) {\n       // Do not type-check interface methods, because we expect that\n       // they will have dummy implementations that do not match the type\n       // annotations.\n    */\n   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, String msg) {\n-    if (!rightType.canAssignTo(leftType)) {\n+    if (!rightType.isSubtype(leftType)) {\n       mismatch(t, n, msg, rightType, leftType);\n       return false;\n     }\n    */\n   void expectArgumentMatchesParameter(NodeTraversal t, Node n, JSType argType,\n       JSType paramType, Node callNode, int ordinal) {\n-    if (!argType.canAssignTo(paramType)) {\n+    if (!argType.isSubtype(paramType)) {\n       mismatch(t, n,\n           String.format(\"actual parameter %d of %s does not match \" +\n               \"formal parameter\", ordinal,\n    */\n   void expectCanOverride(NodeTraversal t, Node n, JSType overridingType,\n       JSType hiddenType, String propertyName, JSType ownerType) {\n-    if (!overridingType.canAssignTo(hiddenType)) {\n+    if (!overridingType.isSubtype(hiddenType)) {\n       registerMismatch(overridingType, hiddenType,\n           report(t.makeError(n, HIDDEN_PROPERTY_MISMATCH, propertyName,\n             ownerType.toString(), hiddenType.toString(),\n     castType = castType.restrictByNotNullOrUndefined();\n     type = type.restrictByNotNullOrUndefined();\n \n-    if (!type.canAssignTo(castType) && !castType.canAssignTo(type)) {\n+    if (!type.isSubtype(castType) && !castType.isSubtype(type)) {\n       registerMismatch(type, castType, report(t.makeError(n, INVALID_CAST,\n           castType.toString(), type.toString())));\n     }\n           = implementedInterface.getImplicitPrototype().getPropertyType(prop);\n       found = found.restrictByNotNullOrUndefined();\n       required = required.restrictByNotNullOrUndefined();\n-      if (!found.canAssignTo(required)) {\n+      if (!found.isSubtype(required)) {\n         // Implemented, but not correctly typed\n         FunctionType constructor =\n             implementedInterface.toObjectType().getConstructor();\n     // code didn't downcast.\n     found = found.restrictByNotNullOrUndefined();\n     required = required.restrictByNotNullOrUndefined();\n-    if (found.canAssignTo(required) || required.canAssignTo(found)) {\n+    if (found.isSubtype(required) || required.isSubtype(found)) {\n       return;\n     }\n \n   private void registerIfMismatch(\n       JSType found, JSType required, JSError error) {\n     if (found != null && required != null &&\n-        !found.canAssignTo(required)) {\n+        !found.isSubtype(required)) {\n       registerMismatch(found, required, error);\n     }\n   }\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n   }\n \n   /**\n-   * Tests whether values of {@code this} type can be safely assigned\n-   * to values of {@code that} type.<p>\n-   *\n-   * The default implementation verifies that {@code this} is a subtype\n-   * of {@code that}.<p>\n-   */\n-  public boolean canAssignTo(JSType that) {\n-    return isSubtype(that);\n-  }\n-\n-  /**\n    * Turn a scalar type to the corresponding object type.\n    *\n    * @return the auto-boxed type or {@code null} if this type is not a scalar.\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n         .withParamsNode(registry.createParameters())\n         .withTypeOfThis(OBJECT_TYPE)\n         .withReturnType(BOOLEAN_TYPE).build();\n-    assertTrue(objReturnBoolean.canAssignTo(ifaceReturnBoolean));\n+    assertTrue(objReturnBoolean.isSubtype(ifaceReturnBoolean));\n   }\n \n   public void testOrdinaryFunctionPrototype() {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     assertTrue(U2U_CONSTRUCTOR_TYPE.isConstructor());\n     assertTrue(U2U_CONSTRUCTOR_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NO_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NO_OBJECT_TYPE));\n+    // isSubtype\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(NO_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(NO_OBJECT_TYPE));\n     assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(ARRAY_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(BOOLEAN_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(ERROR_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n-    assertTrue(U2U_CONSTRUCTOR_TYPE.canAssignTo(functionType));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(recordType));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertTrue(U2U_CONSTRUCTOR_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(URI_ERROR_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(STRING_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n-    assertTrue(U2U_CONSTRUCTOR_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(VOID_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(BOOLEAN_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(ERROR_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(EVAL_ERROR_TYPE));\n+    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(functionType));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(recordType));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(URI_ERROR_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(RANGE_ERROR_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(STRING_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(TYPE_ERROR_TYPE));\n+    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(VOID_TYPE));\n \n     // canTestForEqualityWith\n     assertTrue(U2U_CONSTRUCTOR_TYPE.\n     assertTrue(NO_OBJECT_TYPE.isConstructor());\n     assertFalse(NO_OBJECT_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertFalse(NO_OBJECT_TYPE.canAssignTo(NO_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(NO_OBJECT_TYPE));\n+    // isSubtype\n+    assertFalse(NO_OBJECT_TYPE.isSubtype(NO_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(NO_OBJECT_TYPE));\n     assertTrue(NO_OBJECT_TYPE.isSubtype(ARRAY_TYPE));\n-    assertFalse(NO_OBJECT_TYPE.canAssignTo(BOOLEAN_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(functionType));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(recordType));\n-    assertFalse(NO_OBJECT_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(NO_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(URI_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(NO_OBJECT_TYPE.canAssignTo(STRING_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(NO_OBJECT_TYPE.canAssignTo(VOID_TYPE));\n+    assertFalse(NO_OBJECT_TYPE.isSubtype(BOOLEAN_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(EVAL_ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(functionType));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(recordType));\n+    assertFalse(NO_OBJECT_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(NO_OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(URI_ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(RANGE_ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(NO_OBJECT_TYPE.isSubtype(STRING_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(TYPE_ERROR_TYPE));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(NO_OBJECT_TYPE.isSubtype(VOID_TYPE));\n \n     // canTestForEqualityWith\n     assertCannotTestForEqualityWith(NO_OBJECT_TYPE, NO_TYPE);\n     assertTrue(NO_TYPE.isConstructor());\n     assertFalse(NO_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertTrue(NO_TYPE.canAssignTo(NO_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(NO_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(BOOLEAN_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(functionType));\n-    assertTrue(NO_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(URI_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(STRING_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(ALL_TYPE));\n-    assertTrue(NO_TYPE.canAssignTo(VOID_TYPE));\n+    // isSubtype\n+    assertTrue(NO_TYPE.isSubtype(NO_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(NO_OBJECT_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(ARRAY_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(BOOLEAN_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(EVAL_ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(functionType));\n+    assertTrue(NO_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(NUMBER_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(OBJECT_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(URI_ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(RANGE_ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(REGEXP_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(STRING_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(TYPE_ERROR_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(ALL_TYPE));\n+    assertTrue(NO_TYPE.isSubtype(VOID_TYPE));\n \n     // canTestForEqualityWith\n     assertCannotTestForEqualityWith(NO_TYPE, NO_TYPE);\n     assertTrue(NO_RESOLVED_TYPE.isConstructor());\n     assertFalse(NO_RESOLVED_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NO_RESOLVED_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NO_OBJECT_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(BOOLEAN_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(functionType));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(URI_ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(STRING_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(ALL_TYPE));\n-    assertTrue(NO_RESOLVED_TYPE.canAssignTo(VOID_TYPE));\n+    // isSubtype\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(NO_RESOLVED_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(NO_OBJECT_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(ARRAY_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(BOOLEAN_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(EVAL_ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(functionType));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(NUMBER_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(OBJECT_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(URI_ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(RANGE_ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(REGEXP_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(STRING_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(TYPE_ERROR_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(ALL_TYPE));\n+    assertTrue(NO_RESOLVED_TYPE.isSubtype(VOID_TYPE));\n \n     // canTestForEqualityWith\n     assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n     assertFalse(ARRAY_TYPE.isConstructor());\n     assertTrue(ARRAY_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertFalse(ARRAY_TYPE.canAssignTo(NO_TYPE));\n-    assertFalse(ARRAY_TYPE.canAssignTo(NO_OBJECT_TYPE));\n-    assertTrue(ARRAY_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(ARRAY_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(ARRAY_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(ARRAY_TYPE.canAssignTo(functionType));\n-    assertFalse(ARRAY_TYPE.canAssignTo(recordType));\n-    assertFalse(ARRAY_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(ARRAY_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(ARRAY_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(ARRAY_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(ARRAY_TYPE.canAssignTo(namedGoogBar));\n-    assertFalse(ARRAY_TYPE.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertFalse(ARRAY_TYPE.isSubtype(NO_TYPE));\n+    assertFalse(ARRAY_TYPE.isSubtype(NO_OBJECT_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(ARRAY_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(ARRAY_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(ARRAY_TYPE.isSubtype(functionType));\n+    assertFalse(ARRAY_TYPE.isSubtype(recordType));\n+    assertFalse(ARRAY_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(ARRAY_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(ARRAY_TYPE.isSubtype(namedGoogBar));\n+    assertFalse(ARRAY_TYPE.isSubtype(REGEXP_TYPE));\n \n     // canBeCalled\n     assertFalse(ARRAY_TYPE.canBeCalled());\n     // autoboxesTo\n     assertNull(UNKNOWN_TYPE.autoboxesTo());\n \n-    // canAssignTo\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(UNKNOWN_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(STRING_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(functionType));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(recordType));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(namedGoogBar));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(unresolvedNamedType));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canAssignTo(VOID_TYPE));\n+    // isSubtype\n+    assertTrue(UNKNOWN_TYPE.isSubtype(UNKNOWN_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(STRING_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(NUMBER_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(functionType));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(recordType));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(OBJECT_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(namedGoogBar));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(unresolvedNamedType));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(REGEXP_TYPE));\n+    assertTrue(UNKNOWN_TYPE.isSubtype(VOID_TYPE));\n \n     // canBeCalled\n     assertTrue(UNKNOWN_TYPE.canBeCalled());\n     assertFalse(ALL_TYPE.isConstructor());\n     assertFalse(ALL_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertFalse(ALL_TYPE.canAssignTo(NO_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(NO_OBJECT_TYPE));\n-    assertTrue(ALL_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(functionType));\n-    assertFalse(ALL_TYPE.canAssignTo(recordType));\n-    assertFalse(ALL_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(ALL_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(ALL_TYPE.canAssignTo(namedGoogBar));\n-    assertFalse(ALL_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(ALL_TYPE.canAssignTo(VOID_TYPE));\n-    assertTrue(ALL_TYPE.canAssignTo(UNKNOWN_TYPE));\n+    // isSubtype\n+    assertFalse(ALL_TYPE.isSubtype(NO_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(NO_OBJECT_TYPE));\n+    assertTrue(ALL_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(functionType));\n+    assertFalse(ALL_TYPE.isSubtype(recordType));\n+    assertFalse(ALL_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(ALL_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(ALL_TYPE.isSubtype(namedGoogBar));\n+    assertFalse(ALL_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(ALL_TYPE.isSubtype(VOID_TYPE));\n+    assertTrue(ALL_TYPE.isSubtype(UNKNOWN_TYPE));\n \n     // canBeCalled\n     assertFalse(ALL_TYPE.canBeCalled());\n     assertFalse(OBJECT_TYPE.isConstructor());\n     assertTrue(OBJECT_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertFalse(OBJECT_TYPE.canAssignTo(NO_TYPE));\n-    assertTrue(OBJECT_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(OBJECT_TYPE.canAssignTo(functionType));\n-    assertFalse(OBJECT_TYPE.canAssignTo(recordType));\n-    assertFalse(OBJECT_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(OBJECT_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(OBJECT_TYPE.canAssignTo(namedGoogBar));\n-    assertTrue(OBJECT_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(OBJECT_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertTrue(OBJECT_TYPE.canAssignTo(UNKNOWN_TYPE));\n+    // isSubtype\n+    assertFalse(OBJECT_TYPE.isSubtype(NO_TYPE));\n+    assertTrue(OBJECT_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(OBJECT_TYPE.isSubtype(functionType));\n+    assertFalse(OBJECT_TYPE.isSubtype(recordType));\n+    assertFalse(OBJECT_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(OBJECT_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(OBJECT_TYPE.isSubtype(namedGoogBar));\n+    assertTrue(OBJECT_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(OBJECT_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(OBJECT_TYPE.isSubtype(ARRAY_TYPE));\n+    assertTrue(OBJECT_TYPE.isSubtype(UNKNOWN_TYPE));\n \n     // canBeCalled\n     assertFalse(OBJECT_TYPE.canBeCalled());\n     // unboxesTo\n     assertTypeEquals(NUMBER_TYPE, NUMBER_OBJECT_TYPE.unboxesTo());\n \n-    // canAssignTo\n-    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(functionType));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(namedGoogBar));\n-    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(\n+    // isSubtype\n+    assertTrue(NUMBER_OBJECT_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(functionType));\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(NUMBER_OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(NUMBER_OBJECT_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(namedGoogBar));\n+    assertTrue(NUMBER_OBJECT_TYPE.isSubtype(\n             createUnionType(NUMBER_OBJECT_TYPE, NULL_TYPE)));\n-    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(\n+    assertFalse(NUMBER_OBJECT_TYPE.isSubtype(\n             createUnionType(NUMBER_TYPE, NULL_TYPE)));\n-    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(UNKNOWN_TYPE));\n+    assertTrue(NUMBER_OBJECT_TYPE.isSubtype(UNKNOWN_TYPE));\n \n     // canBeCalled\n     assertFalse(NUMBER_OBJECT_TYPE.canBeCalled());\n     // autoboxesTo\n     assertTypeEquals(NUMBER_OBJECT_TYPE, NUMBER_TYPE.autoboxesTo());\n \n-    // canAssignTo\n-    assertTrue(NUMBER_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(NUMBER_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertTrue(NUMBER_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(NUMBER_TYPE.canAssignTo(functionType));\n-    assertFalse(NUMBER_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(NUMBER_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(NUMBER_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(NUMBER_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(NUMBER_TYPE.canAssignTo(namedGoogBar));\n-    assertTrue(NUMBER_TYPE.canAssignTo(\n+    // isSubtype\n+    assertTrue(NUMBER_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(NUMBER_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertTrue(NUMBER_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(NUMBER_TYPE.isSubtype(functionType));\n+    assertFalse(NUMBER_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(NUMBER_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(NUMBER_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(NUMBER_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(NUMBER_TYPE.isSubtype(namedGoogBar));\n+    assertTrue(NUMBER_TYPE.isSubtype(\n             createUnionType(NUMBER_TYPE, NULL_TYPE)));\n-    assertTrue(NUMBER_TYPE.canAssignTo(UNKNOWN_TYPE));\n+    assertTrue(NUMBER_TYPE.isSubtype(UNKNOWN_TYPE));\n \n     // canBeCalled\n     assertFalse(NUMBER_TYPE.canBeCalled());\n     // autoboxesTo\n     assertNull(NULL_TYPE.autoboxesTo());\n \n-    // canAssignTo\n-    assertFalse(NULL_TYPE.canAssignTo(NO_OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(NO_TYPE));\n-    assertTrue(NULL_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(NULL_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(functionType));\n-    assertFalse(NULL_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(NULL_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertTrue(NULL_TYPE.canAssignTo(UNKNOWN_TYPE));\n-\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NO_OBJECT_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NO_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NULL_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(ALL_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(STRING_OBJECT_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NUMBER_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(functionType)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(OBJECT_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(DATE_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(REGEXP_TYPE)));\n-    assertTrue(NULL_TYPE.canAssignTo(createNullableType(ARRAY_TYPE)));\n+    // isSubtype\n+    assertFalse(NULL_TYPE.isSubtype(NO_OBJECT_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(NO_TYPE));\n+    assertTrue(NULL_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(NULL_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(functionType));\n+    assertFalse(NULL_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(NULL_TYPE.isSubtype(ARRAY_TYPE));\n+    assertTrue(NULL_TYPE.isSubtype(UNKNOWN_TYPE));\n+\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(NO_OBJECT_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(NO_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(NULL_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(ALL_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(STRING_OBJECT_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(NUMBER_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(functionType)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(OBJECT_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(DATE_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(REGEXP_TYPE)));\n+    assertTrue(NULL_TYPE.isSubtype(createNullableType(ARRAY_TYPE)));\n \n     // canBeCalled\n     assertFalse(NULL_TYPE.canBeCalled());\n     // autoboxesTo\n     assertNull(DATE_TYPE.autoboxesTo());\n \n-    // canAssignTo\n-    assertFalse(DATE_TYPE.canAssignTo(NO_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(NO_OBJECT_TYPE));\n+    // isSubtype\n+    assertFalse(DATE_TYPE.isSubtype(NO_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(NO_OBJECT_TYPE));\n     assertFalse(DATE_TYPE.isSubtype(ARRAY_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(BOOLEAN_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(DATE_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(ERROR_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(functionType));\n-    assertFalse(DATE_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertTrue(DATE_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(URI_ERROR_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(STRING_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n-    assertTrue(DATE_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(DATE_TYPE.canAssignTo(VOID_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(BOOLEAN_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertTrue(DATE_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(ERROR_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(EVAL_ERROR_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(functionType));\n+    assertFalse(DATE_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertTrue(DATE_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(URI_ERROR_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(RANGE_ERROR_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(STRING_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(TYPE_ERROR_TYPE));\n+    assertTrue(DATE_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(DATE_TYPE.isSubtype(VOID_TYPE));\n \n     // canBeCalled\n     assertFalse(DATE_TYPE.canBeCalled());\n     // autoboxesTo\n     assertNull(REGEXP_TYPE.autoboxesTo());\n \n-    // canAssignTo\n-    assertFalse(REGEXP_TYPE.canAssignTo(NO_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(NO_OBJECT_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(BOOLEAN_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(ERROR_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(functionType));\n-    assertFalse(REGEXP_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertTrue(REGEXP_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(URI_ERROR_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n-    assertTrue(REGEXP_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(STRING_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n-    assertTrue(REGEXP_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(REGEXP_TYPE.canAssignTo(VOID_TYPE));\n+    // isSubtype\n+    assertFalse(REGEXP_TYPE.isSubtype(NO_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(NO_OBJECT_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(ARRAY_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(BOOLEAN_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(ERROR_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(EVAL_ERROR_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(functionType));\n+    assertFalse(REGEXP_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertTrue(REGEXP_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(URI_ERROR_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(RANGE_ERROR_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n+    assertTrue(REGEXP_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(STRING_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(TYPE_ERROR_TYPE));\n+    assertTrue(REGEXP_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(REGEXP_TYPE.isSubtype(VOID_TYPE));\n \n     // canBeCalled\n     assertTrue(REGEXP_TYPE.canBeCalled());\n     // unboxesTo\n     assertTypeEquals(STRING_TYPE, STRING_OBJECT_TYPE.unboxesTo());\n \n-    // canAssignTo\n-    assertTrue(STRING_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(STRING_OBJECT_TYPE.canAssignTo(STRING_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(STRING_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(STRING_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(STRING_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(STRING_OBJECT_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertFalse(STRING_OBJECT_TYPE.canAssignTo(STRING_TYPE));\n+    // isSubtype\n+    assertTrue(STRING_OBJECT_TYPE.isSubtype(ALL_TYPE));\n+    assertTrue(STRING_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(STRING_OBJECT_TYPE.isSubtype(STRING_TYPE));\n+    assertTrue(STRING_OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(STRING_OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(STRING_OBJECT_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(STRING_OBJECT_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(STRING_OBJECT_TYPE.isSubtype(ARRAY_TYPE));\n+    assertFalse(STRING_OBJECT_TYPE.isSubtype(STRING_TYPE));\n \n     // canBeCalled\n     assertFalse(STRING_OBJECT_TYPE.canBeCalled());\n     // unboxesTo\n     assertTypeEquals(STRING_TYPE, STRING_OBJECT_TYPE.unboxesTo());\n \n-    // canAssignTo\n-    assertTrue(STRING_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(DATE_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(REGEXP_TYPE));\n-    assertFalse(STRING_TYPE.canAssignTo(ARRAY_TYPE));\n-    assertTrue(STRING_TYPE.canAssignTo(STRING_TYPE));\n-    assertTrue(STRING_TYPE.canAssignTo(UNKNOWN_TYPE));\n+    // isSubtype\n+    assertTrue(STRING_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(DATE_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(REGEXP_TYPE));\n+    assertFalse(STRING_TYPE.isSubtype(ARRAY_TYPE));\n+    assertTrue(STRING_TYPE.isSubtype(STRING_TYPE));\n+    assertTrue(STRING_TYPE.isSubtype(UNKNOWN_TYPE));\n \n     // canBeCalled\n     assertFalse(STRING_TYPE.canBeCalled());\n     assertTrue(recordType.isObject());\n     assertFalse(recordType.isFunctionPrototypeType());\n \n-    // canAssignTo\n-    assertTrue(recordType.canAssignTo(ALL_TYPE));\n-    assertFalse(recordType.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(recordType.canAssignTo(NUMBER_TYPE));\n-    assertFalse(recordType.canAssignTo(DATE_TYPE));\n-    assertFalse(recordType.canAssignTo(REGEXP_TYPE));\n-    assertTrue(recordType.canAssignTo(UNKNOWN_TYPE));\n-    assertTrue(recordType.canAssignTo(OBJECT_TYPE));\n-    assertFalse(recordType.canAssignTo(U2U_CONSTRUCTOR_TYPE));\n+    // isSubtype\n+    assertTrue(recordType.isSubtype(ALL_TYPE));\n+    assertFalse(recordType.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(recordType.isSubtype(NUMBER_TYPE));\n+    assertFalse(recordType.isSubtype(DATE_TYPE));\n+    assertFalse(recordType.isSubtype(REGEXP_TYPE));\n+    assertTrue(recordType.isSubtype(UNKNOWN_TYPE));\n+    assertTrue(recordType.isSubtype(OBJECT_TYPE));\n+    assertFalse(recordType.isSubtype(U2U_CONSTRUCTOR_TYPE));\n \n     // autoboxesTo\n     assertNull(recordType.autoboxesTo());\n     assertTrue(functionInst.getImplicitPrototype()\n         .isFunctionPrototypeType());\n \n-    // canAssignTo\n-    assertTrue(functionInst.canAssignTo(ALL_TYPE));\n-    assertFalse(functionInst.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(functionInst.canAssignTo(NUMBER_TYPE));\n-    assertFalse(functionInst.canAssignTo(DATE_TYPE));\n-    assertFalse(functionInst.canAssignTo(REGEXP_TYPE));\n-    assertTrue(functionInst.canAssignTo(UNKNOWN_TYPE));\n-    assertTrue(functionInst.canAssignTo(U2U_CONSTRUCTOR_TYPE));\n+    // isSubtype\n+    assertTrue(functionInst.isSubtype(ALL_TYPE));\n+    assertFalse(functionInst.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(functionInst.isSubtype(NUMBER_TYPE));\n+    assertFalse(functionInst.isSubtype(DATE_TYPE));\n+    assertFalse(functionInst.isSubtype(REGEXP_TYPE));\n+    assertTrue(functionInst.isSubtype(UNKNOWN_TYPE));\n+    assertTrue(functionInst.isSubtype(U2U_CONSTRUCTOR_TYPE));\n \n     // autoboxesTo\n     assertNull(functionInst.autoboxesTo());\n     assertTrue(functionType.getImplicitPrototype().getImplicitPrototype()\n         .isFunctionPrototypeType());\n \n-    // canAssignTo\n-    assertTrue(functionType.canAssignTo(ALL_TYPE));\n-    assertFalse(functionType.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(functionType.canAssignTo(NUMBER_TYPE));\n-    assertFalse(functionType.canAssignTo(DATE_TYPE));\n-    assertFalse(functionType.canAssignTo(REGEXP_TYPE));\n-    assertTrue(functionType.canAssignTo(UNKNOWN_TYPE));\n-    assertTrue(functionType.canAssignTo(U2U_CONSTRUCTOR_TYPE));\n+    // isSubtype\n+    assertTrue(functionType.isSubtype(ALL_TYPE));\n+    assertFalse(functionType.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(functionType.isSubtype(NUMBER_TYPE));\n+    assertFalse(functionType.isSubtype(DATE_TYPE));\n+    assertFalse(functionType.isSubtype(REGEXP_TYPE));\n+    assertTrue(functionType.isSubtype(UNKNOWN_TYPE));\n+    assertTrue(functionType.isSubtype(U2U_CONSTRUCTOR_TYPE));\n \n     // autoboxesTo\n     assertNull(functionType.autoboxesTo());\n    * Tests the behavior of the void type.\n    */\n   public void testVoidType() throws Exception {\n-    // canAssignTo\n-    assertTrue(VOID_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(VOID_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(VOID_TYPE.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertTrue(VOID_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(VOID_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(VOID_TYPE.isSubtype(REGEXP_TYPE));\n \n     // autoboxesTo\n     assertNull(VOID_TYPE.autoboxesTo());\n     // unboxesTo\n     assertTypeEquals(BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE.unboxesTo());\n \n-    // canAssignTo\n-    assertTrue(BOOLEAN_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(functionType));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(NULL_TYPE));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(namedGoogBar));\n-    assertFalse(BOOLEAN_TYPE.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertTrue(BOOLEAN_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(functionType));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(NULL_TYPE));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(BOOLEAN_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(namedGoogBar));\n+    assertFalse(BOOLEAN_TYPE.isSubtype(REGEXP_TYPE));\n \n     // canBeCalled\n     assertFalse(BOOLEAN_TYPE.canBeCalled());\n     assertFalse(BOOLEAN_OBJECT_TYPE.isConstructor());\n     assertTrue(BOOLEAN_OBJECT_TYPE.isInstanceType());\n \n-    // canAssignTo\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(functionType));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(NULL_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canAssignTo(unresolvedNamedType));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(namedGoogBar));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(ALL_TYPE));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(functionType));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NULL_TYPE));\n+    assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(DATE_TYPE));\n+    assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(unresolvedNamedType));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(namedGoogBar));\n+    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(REGEXP_TYPE));\n     // canBeCalled\n     assertFalse(BOOLEAN_OBJECT_TYPE.canBeCalled());\n \n     assertFalse(enumType.isConstructor());\n     assertFalse(enumType.isInstanceType());\n \n-    // canAssignTo\n-    assertTrue(enumType.canAssignTo(ALL_TYPE));\n-    assertFalse(enumType.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(enumType.canAssignTo(NUMBER_TYPE));\n-    assertFalse(enumType.canAssignTo(functionType));\n-    assertFalse(enumType.canAssignTo(NULL_TYPE));\n-    assertTrue(enumType.canAssignTo(OBJECT_TYPE));\n-    assertFalse(enumType.canAssignTo(DATE_TYPE));\n-    assertTrue(enumType.canAssignTo(unresolvedNamedType));\n-    assertFalse(enumType.canAssignTo(namedGoogBar));\n-    assertFalse(enumType.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertTrue(enumType.isSubtype(ALL_TYPE));\n+    assertFalse(enumType.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(enumType.isSubtype(NUMBER_TYPE));\n+    assertFalse(enumType.isSubtype(functionType));\n+    assertFalse(enumType.isSubtype(NULL_TYPE));\n+    assertTrue(enumType.isSubtype(OBJECT_TYPE));\n+    assertFalse(enumType.isSubtype(DATE_TYPE));\n+    assertTrue(enumType.isSubtype(unresolvedNamedType));\n+    assertFalse(enumType.isSubtype(namedGoogBar));\n+    assertFalse(enumType.isSubtype(REGEXP_TYPE));\n \n     // canBeCalled\n     assertFalse(enumType.canBeCalled());\n     assertFalse(elementsType.isConstructor());\n     assertFalse(elementsType.isInstanceType());\n \n-    // canAssignTo\n-    assertTrue(elementsType.canAssignTo(ALL_TYPE));\n-    assertFalse(elementsType.canAssignTo(STRING_OBJECT_TYPE));\n-    assertTrue(elementsType.canAssignTo(NUMBER_TYPE));\n-    assertFalse(elementsType.canAssignTo(functionType));\n-    assertFalse(elementsType.canAssignTo(NULL_TYPE));\n-    assertFalse(elementsType.canAssignTo(OBJECT_TYPE)); // no more autoboxing\n-    assertFalse(elementsType.canAssignTo(DATE_TYPE));\n-    assertTrue(elementsType.canAssignTo(unresolvedNamedType));\n-    assertFalse(elementsType.canAssignTo(namedGoogBar));\n-    assertFalse(elementsType.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertTrue(elementsType.isSubtype(ALL_TYPE));\n+    assertFalse(elementsType.isSubtype(STRING_OBJECT_TYPE));\n+    assertTrue(elementsType.isSubtype(NUMBER_TYPE));\n+    assertFalse(elementsType.isSubtype(functionType));\n+    assertFalse(elementsType.isSubtype(NULL_TYPE));\n+    assertFalse(elementsType.isSubtype(OBJECT_TYPE)); // no more autoboxing\n+    assertFalse(elementsType.isSubtype(DATE_TYPE));\n+    assertTrue(elementsType.isSubtype(unresolvedNamedType));\n+    assertFalse(elementsType.isSubtype(namedGoogBar));\n+    assertFalse(elementsType.isSubtype(REGEXP_TYPE));\n \n     // canBeCalled\n     assertFalse(elementsType.canBeCalled());\n     assertFalse(objectType.isFunctionPrototypeType());\n     assertTrue(objectType.getImplicitPrototype() == OBJECT_TYPE);\n \n-    // canAssignTo\n-    assertTrue(objectType.canAssignTo(ALL_TYPE));\n-    assertFalse(objectType.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(objectType.canAssignTo(NUMBER_TYPE));\n-    assertFalse(objectType.canAssignTo(functionType));\n-    assertFalse(objectType.canAssignTo(NULL_TYPE));\n-    assertFalse(objectType.canAssignTo(DATE_TYPE));\n-    assertTrue(objectType.canAssignTo(OBJECT_TYPE));\n-    assertTrue(objectType.canAssignTo(unresolvedNamedType));\n-    assertFalse(objectType.canAssignTo(namedGoogBar));\n-    assertFalse(objectType.canAssignTo(REGEXP_TYPE));\n+    // isSubtype\n+    assertTrue(objectType.isSubtype(ALL_TYPE));\n+    assertFalse(objectType.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(objectType.isSubtype(NUMBER_TYPE));\n+    assertFalse(objectType.isSubtype(functionType));\n+    assertFalse(objectType.isSubtype(NULL_TYPE));\n+    assertFalse(objectType.isSubtype(DATE_TYPE));\n+    assertTrue(objectType.isSubtype(OBJECT_TYPE));\n+    assertTrue(objectType.isSubtype(unresolvedNamedType));\n+    assertFalse(objectType.isSubtype(namedGoogBar));\n+    assertFalse(objectType.isSubtype(REGEXP_TYPE));\n \n     // autoboxesTo\n     assertNull(objectType.autoboxesTo());\n     assertTrue(namedGoogBar.getConstructor().isConstructor());\n     assertTrue(namedGoogBar.getImplicitPrototype().isFunctionPrototypeType());\n \n-    // canAssignTo\n+    // isSubtype\n     assertTypeCanAssignToItself(googBar);\n     assertTypeCanAssignToItself(namedGoogBar);\n-    googBar.canAssignTo(namedGoogBar);\n-    namedGoogBar.canAssignTo(googBar);\n+    googBar.isSubtype(namedGoogBar);\n+    namedGoogBar.isSubtype(googBar);\n     assertTypeEquals(googBar, googBar);\n     assertTypeNotEquals(googBar, googSubBar);\n \n     assertFalse(namedGoogBar.isFunctionPrototypeType());\n     assertTrue(namedGoogBar.getImplicitPrototype().isFunctionPrototypeType());\n \n-    // canAssignTo\n-    assertTrue(namedGoogBar.canAssignTo(ALL_TYPE));\n-    assertFalse(namedGoogBar.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(namedGoogBar.canAssignTo(NUMBER_TYPE));\n-    assertFalse(namedGoogBar.canAssignTo(functionType));\n-    assertFalse(namedGoogBar.canAssignTo(NULL_TYPE));\n-    assertTrue(namedGoogBar.canAssignTo(OBJECT_TYPE));\n-    assertFalse(namedGoogBar.canAssignTo(DATE_TYPE));\n-    assertTrue(namedGoogBar.canAssignTo(namedGoogBar));\n-    assertTrue(namedGoogBar.canAssignTo(unresolvedNamedType));\n-    assertFalse(namedGoogBar.canAssignTo(REGEXP_TYPE));\n-    assertFalse(namedGoogBar.canAssignTo(ARRAY_TYPE));\n+    // isSubtype\n+    assertTrue(namedGoogBar.isSubtype(ALL_TYPE));\n+    assertFalse(namedGoogBar.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(namedGoogBar.isSubtype(NUMBER_TYPE));\n+    assertFalse(namedGoogBar.isSubtype(functionType));\n+    assertFalse(namedGoogBar.isSubtype(NULL_TYPE));\n+    assertTrue(namedGoogBar.isSubtype(OBJECT_TYPE));\n+    assertFalse(namedGoogBar.isSubtype(DATE_TYPE));\n+    assertTrue(namedGoogBar.isSubtype(namedGoogBar));\n+    assertTrue(namedGoogBar.isSubtype(unresolvedNamedType));\n+    assertFalse(namedGoogBar.isSubtype(REGEXP_TYPE));\n+    assertFalse(namedGoogBar.isSubtype(ARRAY_TYPE));\n \n     // autoboxesTo\n     assertNull(namedGoogBar.autoboxesTo());\n    * Assert that a type can assign to itself.\n    */\n   private void assertTypeCanAssignToItself(JSType type) {\n-    assertTrue(type.canAssignTo(type));\n+    assertTrue(type.isSubtype(type));\n   }\n \n   /**\n--- a/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n    * Assert that a type can assign to itself.\n    */\n   private void assertTypeCanAssignToItself(JSType type) {\n-    assertTrue(type.canAssignTo(type));\n+    assertTrue(type.isSubtype(type));\n   }\n \n   /**\n     ParameterizedType arrOfString = createParameterizedType(\n         ARRAY_TYPE, STRING_TYPE);\n     assertTypeCanAssignToItself(arrOfString);\n-    assertTrue(arrOfString.canAssignTo(ARRAY_TYPE));\n-    assertTrue(ARRAY_TYPE.canAssignTo(arrOfString));\n+    assertTrue(arrOfString.isSubtype(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(arrOfString));\n \n     ParameterizedType arrOfNumber = createParameterizedType(\n         ARRAY_TYPE, NUMBER_TYPE);\n     assertTypeCanAssignToItself(arrOfNumber);\n-    assertTrue(arrOfNumber.canAssignTo(ARRAY_TYPE));\n-    assertTrue(ARRAY_TYPE.canAssignTo(arrOfNumber));\n+    assertTrue(arrOfNumber.isSubtype(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(arrOfNumber));\n \n     assertTrue(arrOfString.isEquivalentTo(createParameterizedType(\n         ARRAY_TYPE, STRING_TYPE)));\n--- a/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n    * Assert that a type can assign to itself.\n    */\n   private void assertTypeCanAssignToItself(JSType type) {\n-    assertTrue(type.canAssignTo(type));\n+    assertTrue(type.isSubtype(type));\n   }\n \n   /**\n     // autoboxing quirks\n     UnionType numbers =\n         (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE);\n-    assertFalse(numbers.canAssignTo(NUMBER_TYPE));\n-    assertFalse(numbers.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertFalse(numbers.canAssignTo(EVAL_ERROR_TYPE));\n+    assertFalse(numbers.isSubtype(NUMBER_TYPE));\n+    assertFalse(numbers.isSubtype(NUMBER_OBJECT_TYPE));\n+    assertFalse(numbers.isSubtype(EVAL_ERROR_TYPE));\n \n     UnionType strings =\n         (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n-    assertFalse(strings.canAssignTo(STRING_TYPE));\n-    assertFalse(strings.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(strings.canAssignTo(DATE_TYPE));\n+    assertFalse(strings.isSubtype(STRING_TYPE));\n+    assertFalse(strings.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(strings.isSubtype(DATE_TYPE));\n \n     UnionType booleans =\n         (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE);\n-    assertFalse(booleans.canAssignTo(BOOLEAN_TYPE));\n-    assertFalse(booleans.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertFalse(booleans.canAssignTo(REGEXP_TYPE));\n+    assertFalse(booleans.isSubtype(BOOLEAN_TYPE));\n+    assertFalse(booleans.isSubtype(BOOLEAN_OBJECT_TYPE));\n+    assertFalse(booleans.isSubtype(REGEXP_TYPE));\n \n     // unknown quirks\n     JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE);\n-    assertTrue(unknown.canAssignTo(STRING_TYPE));\n+    assertTrue(unknown.isSubtype(STRING_TYPE));\n \n     // all members need to be assignable to\n     UnionType stringDate =\n         (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE);\n-    assertTrue(stringDate.canAssignTo(OBJECT_TYPE));\n-    assertFalse(stringDate.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(stringDate.canAssignTo(DATE_TYPE));\n+    assertTrue(stringDate.isSubtype(OBJECT_TYPE));\n+    assertFalse(stringDate.isSubtype(STRING_OBJECT_TYPE));\n+    assertFalse(stringDate.isSubtype(DATE_TYPE));\n   }\n \n   /**", "timestamp": 1353955097, "metainfo": ""}