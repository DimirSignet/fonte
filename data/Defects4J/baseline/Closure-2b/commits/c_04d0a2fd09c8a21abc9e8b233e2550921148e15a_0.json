{"sha": "04d0a2fd09c8a21abc9e8b233e2550921148e15a", "log": "Cleanup some warnings visible in eclipse.  R=dimvar DELTA=12  (0 added, 5 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5633   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import com.google.common.base.Throwables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import com.google.common.collect.Sets;\n import com.google.common.io.CharStreams;\n import com.google.javascript.jscomp.CompilerOptions.DevMode;\n import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n     if (needToCheckDuplications\n         && !isUnnamedMsg\n         && !extractedMessage.isExternal()) {\n-      checkIfMessageDuplicated(extractedMessage, messageKey, msgNode);\n+      checkIfMessageDuplicated(messageKey, msgNode);\n     }\n     trackMessage(traversal, extractedMessage,\n         messageKey, msgNode, isUnnamedMsg);\n    * Checks if message already processed. If so - it generates 'message\n    * duplicated' compiler error.\n    *\n-   * @param sourceName the source file name\n    * @param msgName the name of the message\n    * @param msgNode the node that represents JS message\n    */\n-  private void checkIfMessageDuplicated(JsMessage message, String msgName,\n-      Node msgNode) {\n+  private void checkIfMessageDuplicated(String msgName, Node msgNode) {\n     if (messageNames.containsKey(msgName)) {\n       MessageLocation location = messageNames.get(msgName);\n       compiler.report(JSError.make(msgNode, MESSAGE_DUPLICATE_KEY,\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n \n   /**\n    * Records that the {@link JSDocInfo} being built should have its\n-   * {@link JSDocInfo#isStruct()} flag set to {@code true}.\n+   * {@link JSDocInfo#makesStructs()} flag set to {@code true}.\n    *\n    * @return {@code true} if the struct was recorded and {@code false}\n    * if it was already defined or it was incompatible with the existing flags\n \n   /**\n    * Records that the {@link JSDocInfo} being built should have its\n-   * {@link JSDocInfo#isDict()} flag set to {@code true}.\n+   * {@link JSDocInfo#makesDicts()} flag set to {@code true}.\n    *\n    * @return {@code true} if the dict was recorded and {@code false}\n    * if it was already defined or it was incompatible with the existing flags", "timestamp": 1349824766, "metainfo": ""}