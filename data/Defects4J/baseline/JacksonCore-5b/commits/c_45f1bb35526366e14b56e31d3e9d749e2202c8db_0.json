{"sha": "45f1bb35526366e14b56e31d3e9d749e2202c8db", "log": "Removed the last anonymous inner class generated for switch-on-enum", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.sym.*;\n import com.fasterxml.jackson.core.util.*;\n+\n+import static com.fasterxml.jackson.core.JsonTokenId.*;\n \n /**\n  * This is a concrete implementation of {@link JsonParser}, which is\n         if (t == null) {\n             return null;\n         }\n-        switch (t) {\n-        case FIELD_NAME:\n+        switch (t.id()) {\n+        case ID_FIELD_NAME:\n             return _parsingContext.getCurrentName();\n \n-        case VALUE_STRING:\n+        case ID_STRING:\n             // fall through\n-        case VALUE_NUMBER_INT:\n-        case VALUE_NUMBER_FLOAT:\n+        case ID_NUMBER_INT:\n+        case ID_NUMBER_FLOAT:\n             return _textBuffer.contentsAsString();\n         default:\n         \treturn t.asString();\n         throws IOException, JsonParseException\n     {\n         if (_currToken != null) { // null only before/after document\n-            switch (_currToken) {\n+            switch (_currToken.id()) {\n                 \n-            case FIELD_NAME:\n+            case ID_FIELD_NAME:\n                 if (!_nameCopied) {\n                     String name = _parsingContext.getCurrentName();\n                     int nameLen = name.length();\n                 }\n                 return _nameCopyBuffer;\n     \n-            case VALUE_STRING:\n+            case ID_STRING:\n                 if (_tokenIncomplete) {\n                     _tokenIncomplete = false;\n                     _finishString(); // only strings can be incomplete\n                 }\n                 // fall through\n-            case VALUE_NUMBER_INT:\n-            case VALUE_NUMBER_FLOAT:\n+            case ID_NUMBER_INT:\n+            case ID_NUMBER_FLOAT:\n                 return _textBuffer.getTextBuffer();\n                 \n             default:\n         throws IOException, JsonParseException\n     {\n         if (_currToken != null) { // null only before/after document\n-            switch (_currToken) {\n+            switch (_currToken.id()) {\n                 \n-            case FIELD_NAME:\n+            case ID_FIELD_NAME:\n                 return _parsingContext.getCurrentName().length();\n-            case VALUE_STRING:\n+            case ID_STRING:\n                 if (_tokenIncomplete) {\n                     _tokenIncomplete = false;\n                     _finishString(); // only strings can be incomplete\n                 }\n                 // fall through\n-            case VALUE_NUMBER_INT:\n-            case VALUE_NUMBER_FLOAT:\n+            case ID_NUMBER_INT:\n+            case ID_NUMBER_FLOAT:\n                 return _textBuffer.size();\n                 \n             default:\n     {\n         // Most have offset of 0, only some may have other values:\n         if (_currToken != null) {\n-            switch (_currToken) {\n-            case FIELD_NAME:\n+            switch (_currToken.id()) {\n+            case ID_FIELD_NAME:\n                 return 0;\n-            case VALUE_STRING:\n+            case ID_STRING:\n                 if (_tokenIncomplete) {\n                     _tokenIncomplete = false;\n                     _finishString(); // only strings can be incomplete\n                 }\n                 // fall through\n-            case VALUE_NUMBER_INT:\n-            case VALUE_NUMBER_FLOAT:\n+            case ID_NUMBER_INT:\n+            case ID_NUMBER_FLOAT:\n                 return _textBuffer.getTextOffset();\n             default:\n             }\n             }\n             return null;\n         }\n-        switch (nextToken()) {\n-        case VALUE_TRUE:\n+\n+        switch (nextToken().id()) {\n+        case ID_TRUE:\n             return Boolean.TRUE;\n-        case VALUE_FALSE:\n+        case ID_FALSE:\n             return Boolean.FALSE;\n         default:\n-        \treturn null;\n+            return null;\n         }\n     }\n     ", "timestamp": 1379905243, "metainfo": ""}