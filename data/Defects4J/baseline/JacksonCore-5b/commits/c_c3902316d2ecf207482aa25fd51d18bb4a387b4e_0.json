{"sha": "c3902316d2ecf207482aa25fd51d18bb4a387b4e", "log": "tinkering with ws skipping", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n             String name = _parseName(i);\n             _parsingContext.setCurrentName(name);\n             _currToken = JsonToken.FIELD_NAME;\n-            i = _skipWS();\n-            if (i != INT_COLON) {\n-                _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n-            }\n-            i = _skipWS();\n+            i = _skipColon();\n         }\n \n         // Ok: we must have a value... what is it?\n         _currInputRowStart = _inputPtr;\n     }\n \n+    private int _skipCR(int ptr) throws IOException {\n+        if (ptr < _inputEnd) {\n+            if (_inputBuffer[ptr] == '\\n') {\n+                ++ptr;\n+            }\n+        } else {\n+            _inputPtr = ptr;\n+            if (loadMore()) {\n+                ptr = _inputPtr;\n+                if (_inputBuffer[ptr] == '\\n') {\n+                    ++ptr;\n+                }\n+            }\n+        }\n+        ++_currInputRow;\n+        _currInputRowStart = ptr;\n+        return ptr;\n+    }\n+    \n+    private int _skipColon() throws IOException\n+    {\n+        int ptr = _inputPtr;\n+        if ((ptr + 4) >= _inputEnd) {\n+            return _skipColon2(ptr, false);\n+        }\n+        char c = _inputBuffer[ptr++];\n+        if (c == ':') { // common case, no leading space\n+            int i = _inputBuffer[ptr++];\n+            if (i > 32) { // nor trailing\n+                _inputPtr = ptr;\n+                return i;\n+            }\n+            if (i == INT_SPACE || i == INT_TAB) {\n+                i = (int) _inputBuffer[ptr];\n+                if (i > 32) {\n+                    _inputPtr = ptr+1;\n+                    return i;\n+                }\n+            } else {\n+                --ptr; // push back whatever it was\n+            }\n+            return _skipColon2(ptr, true); // true -> skipped colon\n+        }\n+        if (c == ' ' || c == '\\t') {\n+            c = _inputBuffer[ptr++];\n+        }\n+        if (c == ':') {\n+            int i = _inputBuffer[ptr];\n+            if (i > 32) {\n+                _inputPtr = ptr+1;\n+                return i;\n+            }\n+            if (i == INT_SPACE || i == INT_TAB) {\n+                ++ptr;\n+                i = (int) _inputBuffer[ptr];\n+                if (i > 32) {\n+                    _inputPtr = ptr+1;\n+                    return i;\n+                }\n+            }\n+            return _skipColon2(ptr, true);\n+        }\n+        --ptr; // push back the very first char\n+        return _skipColon2(ptr, false);\n+    }\n+\n+    private int _skipColon2(int ptr, boolean gotColon) throws IOException\n+    {\n+        _inputPtr = ptr;\n+        final int[] codes = _icWS;\n+        while (true) {\n+            if (_inputPtr >= _inputEnd) {\n+                loadMoreGuaranteed();\n+            }\n+            int i = (int) _inputBuffer[_inputPtr++];\n+            if (i >= 64) {\n+                if (gotColon) {\n+                    return i;\n+                }\n+                _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n+            }\n+            switch (codes[i]) {\n+            case -1:\n+                _throwInvalidSpace(i);\n+            case '#':\n+                if (_skipYAMLComment()) {\n+                    continue;\n+                }\n+                // fall through\n+            case 0:\n+                if (gotColon) {\n+                    return i;\n+                }\n+                gotColon = true;\n+                if (i != INT_COLON) {\n+                    _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n+                }\n+                break;\n+            case 1:\n+                continue;\n+            case '\\n':\n+                ++_currInputRow;\n+                _currInputRowStart = _inputPtr;\n+                break;\n+            case '\\r':\n+                _skipCR();\n+                break;\n+            case '/':\n+                _skipComment();\n+                break;\n+            }\n+        }\n+    }\n+    \n     private int _skipWS() throws IOException\n     {\n         final int[] codes = _icWS;", "timestamp": 1398144437, "metainfo": ""}