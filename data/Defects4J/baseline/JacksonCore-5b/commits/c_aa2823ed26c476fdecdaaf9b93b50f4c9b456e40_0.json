{"sha": "aa2823ed26c476fdecdaaf9b93b50f4c9b456e40", "log": "more serializability stuff", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n  * used, which will use an instance of this class for operation.\n  */\n public class DefaultPrettyPrinter\n-    implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>\n+    implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>,\n+        java.io.Serializable\n {\n+    private static final long serialVersionUID = -5512586643324525213L;\n+\n     /**\n      * Constant that specifies default \"root-level\" separator to use between\n      * root values: a single space character.\n     /**\n      * By default, let's use only spaces to separate array values.\n      */\n-    protected Indenter _arrayIndenter = new FixedSpaceIndenter();\n+    protected Indenter _arrayIndenter = FixedSpaceIndenter.instance;\n \n     /**\n      * By default, let's use linefeed-adding indenter for separate\n      * system-specific linefeeds, and 2 spaces per level (as opposed to,\n      * say, single tabs)\n      */\n-    protected Indenter _objectIndenter = new Lf2SpacesIndenter();\n+    protected Indenter _objectIndenter = Lf2SpacesIndenter.instance;\n \n     /**\n      * String printed between root-level values, if any.\n      * Number of open levels of nesting. Used to determine amount of\n      * indentation to use.\n      */\n-    protected int _nesting = 0;\n+    protected transient int _nesting = 0;\n \n     /*\n     /**********************************************************\n     \n     public void indentArraysWith(Indenter i)\n     {\n-        _arrayIndenter = (i == null) ? new NopIndenter() : i;\n+        _arrayIndenter = (i == null) ? NopIndenter.instance : i;\n     }\n \n     public void indentObjectsWith(Indenter i)\n     {\n-        _objectIndenter = (i == null) ? new NopIndenter() : i;\n+        _objectIndenter = (i == null) ? NopIndenter.instance : i;\n     }\n \n     public void spacesInObjectEntries(boolean b) { _spacesInObjectEntries = b; }\n      * Dummy implementation that adds no indentation whatsoever\n      */\n     public static class NopIndenter\n-        implements Indenter\n-    {\n+        implements Indenter, java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        public static NopIndenter instance = new NopIndenter();\n+        \n         public NopIndenter() { }\n //      @Override\n         public void writeIndentation(JsonGenerator jg, int level) { }\n      * indenter for array values.\n      */\n     public static class FixedSpaceIndenter\n-        implements Indenter\n-    {\n+        implements Indenter, java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        public static FixedSpaceIndenter instance = new FixedSpaceIndenter();\n+\n         public FixedSpaceIndenter() { }\n \n //      @Override\n      * 2 spaces for indentation per level.\n      */\n     public static class Lf2SpacesIndenter\n-        implements Indenter\n-    {\n+        implements Indenter, java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n+        public static Lf2SpacesIndenter instance = new Lf2SpacesIndenter();\n+\n         final static String SYSTEM_LINE_SEPARATOR;\n         static {\n             String lf = null;\n--- a/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n  * shared between threads.\n  */\n public class MinimalPrettyPrinter\n-    implements PrettyPrinter\n+    implements PrettyPrinter, java.io.Serializable\n {\n+    private static final long serialVersionUID = -562765100295218442L;\n+\n     /**\n      * Default String used for separating root values is single space.\n      */\n--- a/src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java\n \n import java.io.*;\n \n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.test.BaseTest;\n \n /**\n         byte[] stuff = jdkSerialize(orig);\n         Base64Variant back = jdkDeserialize(stuff);\n         assertSame(orig, back);\n+    }\n+\n+    public void testPrettyPrinter() throws Exception\n+    {\n+        PrettyPrinter p = new DefaultPrettyPrinter();\n+        byte[] stuff = jdkSerialize(p);\n+        PrettyPrinter back = jdkDeserialize(stuff);\n+        // what should we test?\n+        assertNotNull(back);\n     }\n     \n     /*", "timestamp": 1349479231, "metainfo": ""}