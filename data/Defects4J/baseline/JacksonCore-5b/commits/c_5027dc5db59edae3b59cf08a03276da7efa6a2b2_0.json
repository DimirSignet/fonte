{"sha": "5027dc5db59edae3b59cf08a03276da7efa6a2b2", "log": "Fixed #145", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n      *<p>\n      * Note: longest chain we have been able to produce without malicious\n      * intent has been 10 (with \"com.fasterxml.jackson.core.sym.TestSymbolTables\");\n-     * our setting should be reasonable here.\n+     * our setting should be reasonable here. Also note that overflow\n+     * chains are shared between multiple primary cells, which could cause\n+     * problems for lower values.\n      *<p>\n      * Also note that value was lowered from 255 (2.3 and earlier) to 100 for 2.4\n      * \n         int bestIx = -1;\n \n         for (int i = 0, len = _collEnd; i < len; ++i) {\n-            int count = buckets[i].length;\n+            Bucket b = buckets[i];\n+            // [#145] may become null due to long overflow chain\n+            if (b == null) {\n+                return i;\n+            }\n+            int count = b.length;\n             if (count < bestCount) {\n                 if (count == 1) { // best possible\n                     return i;\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n         assertEquals(2, useBytes ? f.byteSymbolCount() : f.charSymbolCount());\n     }\n \n-    @SuppressWarnings(\"resource\")\n     private JsonParser _getParser(MyJsonFactory f, String doc, boolean useBytes) throws IOException\n     {\n         JsonParser jp;\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n package com.fasterxml.jackson.core.sym;\n \n import java.io.IOException;\n+import java.nio.charset.Charset;\n \n import com.fasterxml.jackson.core.JsonFactory;\n \n         // but not super long collision chains:\n         assertEquals(9, symbols.maxCollisionLength());\n     }\n+\n+    // [Issue#145]\n+    public void testThousandsOfSymbols() throws IOException\n+    {\n+        final int SEED = 33333;\n+\n+        BytesToNameCanonicalizer symbolsBRoot = BytesToNameCanonicalizer.createRoot(SEED);\n+        CharsToNameCanonicalizer symbolsCRoot = CharsToNameCanonicalizer.createRoot(SEED);\n+        final Charset utf8 = Charset.forName(\"UTF-8\");\n+        \n+        for (int doc = 0; doc < 100; ++doc) {\n+            CharsToNameCanonicalizer symbolsC =\n+                    symbolsCRoot.makeChild(JsonFactory.Feature.collectDefaults());\n+            BytesToNameCanonicalizer symbolsB =\n+                    symbolsBRoot.makeChild(JsonFactory.Feature.collectDefaults());\n+            for (int i = 0; i < 250; ++i) {\n+                String name = \"f_\"+doc+\"_\"+i;\n+\n+                int[] quads = BytesToNameCanonicalizer.calcQuads(name.getBytes(utf8));\n+                symbolsB.addName(name, quads, quads.length);\n+\n+                char[] ch = name.toCharArray();\n+                String str = symbolsC.findSymbol(ch, 0, ch.length,\n+                        symbolsC.calcHash(name));\n+                assertNotNull(str);\n+            }\n+            symbolsB.release();\n+            symbolsC.release();\n+        }\n+    }\n }", "timestamp": 1404876420, "metainfo": ""}