{"sha": "52a57370530fbdddd058e7a3e1d6e075a04ddcfd", "log": "Merge branch 'master' of github.com:FasterXML/jackson-core", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      */\n \n     /**\n-     * Method for writing starting marker of a JSON Array value\n-     * (character '['; plus possible white space decoration\n+     * Method for writing starting marker of a Array value\n+     * (for JSON this is character '['; plus possible white space decoration\n      * if pretty-printing is enabled).\n      *<p>\n      * Array values can be written in any context where values\n     public abstract void writeStartArray() throws IOException;\n \n     /**\n+     * Method for writing start marker of an Array value, similar\n+     * to {@link #writeStartArray()}, but also specifying how many\n+     * elements will be written for the array before calling\n+     * {@link #writeEndArray()}.\n+     *<p>\n+     * Default implementation simply calls {@link #writeStartArray()}.\n+     * \n+     * @param size Number of elements this array will have: actual\n+     *   number of values written (before matching call to\n+     *   {@link #writeEndArray()} MUST match; generator MAY verify\n+     *   this is the case.\n+     */\n+    public void writeStartArray(int size) throws IOException {\n+        writeStartArray();\n+    }\n+    \n+    /**\n      * Method for writing closing marker of a JSON Array value\n      * (character ']'; plus possible white space decoration\n      * if pretty-printing is enabled).\n      * Marker can be written if the innermost structured type\n      * is Array.\n      */\n-    public abstract void writeEndArray()\n-        throws IOException;\n+    public abstract void writeEndArray() throws IOException;\n \n     /**\n      * Method for writing starting marker of a JSON Object value\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n      */\n \n     @Override\n-    public void writeStartArray() throws IOException, JsonGenerationException { delegate.writeStartArray(); }\n-\n-    @Override\n-    public void writeEndArray() throws IOException, JsonGenerationException { delegate.writeEndArray(); }\n-\n-    @Override\n-    public void writeStartObject() throws IOException, JsonGenerationException { delegate.writeStartObject(); }\n-    \n-    @Override\n-    public void writeEndObject() throws IOException, JsonGenerationException { delegate.writeEndObject(); }\n-\n-    @Override\n-    public void writeFieldName(String name) throws IOException, JsonGenerationException { delegate.writeFieldName(name); }\n-\n-    @Override\n-    public void writeFieldName(SerializableString name) throws IOException, JsonGenerationException { delegate.writeFieldName(name); }\n+    public void writeStartArray() throws IOException { delegate.writeStartArray(); }\n+\n+    @Override\n+    public void writeStartArray(int size) throws IOException { delegate.writeStartArray(size); }\n+    \n+    @Override\n+    public void writeEndArray() throws IOException { delegate.writeEndArray(); }\n+\n+    @Override\n+    public void writeStartObject() throws IOException { delegate.writeStartObject(); }\n+    \n+    @Override\n+    public void writeEndObject() throws IOException { delegate.writeEndObject(); }\n+\n+    @Override\n+    public void writeFieldName(String name) throws IOException { delegate.writeFieldName(name); }\n+\n+    @Override\n+    public void writeFieldName(SerializableString name) throws IOException { delegate.writeFieldName(name); }\n     \n     /*\n     /**********************************************************\n      */\n \n     @Override\n-    public void writeString(String text) throws IOException,JsonGenerationException { delegate.writeString(text); }\n-\n-    @Override\n-    public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException { delegate.writeString(text, offset, len); }\n-\n-    @Override\n-    public void writeString(SerializableString text) throws IOException, JsonGenerationException { delegate.writeString(text); }\n-\n-    @Override\n-    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException { delegate.writeRawUTF8String(text, offset, length); }\n-\n-    @Override\n-    public void writeUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException { delegate.writeUTF8String(text, offset, length); }\n+    public void writeString(String text) throws IOException { delegate.writeString(text); }\n+\n+    @Override\n+    public void writeString(char[] text, int offset, int len) throws IOException { delegate.writeString(text, offset, len); }\n+\n+    @Override\n+    public void writeString(SerializableString text) throws IOException { delegate.writeString(text); }\n+\n+    @Override\n+    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { delegate.writeRawUTF8String(text, offset, length); }\n+\n+    @Override\n+    public void writeUTF8String(byte[] text, int offset, int length) throws IOException { delegate.writeUTF8String(text, offset, length); }\n \n     /*\n     /**********************************************************\n      */\n \n     @Override\n-    public void writeRaw(String text) throws IOException, JsonGenerationException { delegate.writeRaw(text); }\n-\n-    @Override\n-    public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException { delegate.writeRaw(text, offset, len); }\n-\n-    @Override\n-    public void writeRaw(SerializableString raw) throws IOException, JsonGenerationException { delegate.writeRaw(raw); }\n-    \n-    @Override\n-    public void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException { delegate.writeRaw(text, offset, len); }\n-\n-    @Override\n-    public void writeRaw(char c) throws IOException, JsonGenerationException { delegate.writeRaw(c); }\n-\n-    @Override\n-    public void writeRawValue(String text) throws IOException, JsonGenerationException { delegate.writeRawValue(text); }\n-\n-    @Override\n-    public void writeRawValue(String text, int offset, int len) throws IOException, JsonGenerationException { delegate.writeRawValue(text, offset, len); }\n-\n-    @Override\n-    public void writeRawValue(char[] text, int offset, int len) throws IOException, JsonGenerationException { delegate.writeRawValue(text, offset, len); }\n-\n-    @Override\n-    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException { delegate.writeBinary(b64variant, data, offset, len); }\n-\n-    @Override\n-    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException { return delegate.writeBinary(b64variant, data, dataLength); }\n+    public void writeRaw(String text) throws IOException { delegate.writeRaw(text); }\n+\n+    @Override\n+    public void writeRaw(String text, int offset, int len) throws IOException { delegate.writeRaw(text, offset, len); }\n+\n+    @Override\n+    public void writeRaw(SerializableString raw) throws IOException { delegate.writeRaw(raw); }\n+    \n+    @Override\n+    public void writeRaw(char[] text, int offset, int len) throws IOException { delegate.writeRaw(text, offset, len); }\n+\n+    @Override\n+    public void writeRaw(char c) throws IOException { delegate.writeRaw(c); }\n+\n+    @Override\n+    public void writeRawValue(String text) throws IOException { delegate.writeRawValue(text); }\n+\n+    @Override\n+    public void writeRawValue(String text, int offset, int len) throws IOException { delegate.writeRawValue(text, offset, len); }\n+\n+    @Override\n+    public void writeRawValue(char[] text, int offset, int len) throws IOException { delegate.writeRawValue(text, offset, len); }\n+\n+    @Override\n+    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { delegate.writeBinary(b64variant, data, offset, len); }\n+\n+    @Override\n+    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException { return delegate.writeBinary(b64variant, data, dataLength); }\n     \n     /*\n     /**********************************************************\n      */\n \n     @Override\n-    public void writeNumber(short v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(int v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(long v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(BigInteger v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(double v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(float v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(BigDecimal v) throws IOException, JsonGenerationException { delegate.writeNumber(v); }\n-\n-    @Override\n-    public void writeNumber(String encodedValue) throws IOException, JsonGenerationException, UnsupportedOperationException { delegate.writeNumber(encodedValue); }\n-\n-    @Override\n-    public void writeBoolean(boolean state) throws IOException, JsonGenerationException { delegate.writeBoolean(state); }\n-    \n-    @Override\n-    public void writeNull() throws IOException, JsonGenerationException { delegate.writeNull(); }\n+    public void writeNumber(short v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(int v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(long v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(BigInteger v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(double v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(float v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(BigDecimal v) throws IOException { delegate.writeNumber(v); }\n+\n+    @Override\n+    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { delegate.writeNumber(encodedValue); }\n+\n+    @Override\n+    public void writeBoolean(boolean state) throws IOException { delegate.writeBoolean(state); }\n+    \n+    @Override\n+    public void writeNull() throws IOException { delegate.writeNull(); }\n \n     /*\n     /**********************************************************\n      */\n \n     @Override\n-    public void writeOmittedField(String fieldName) throws IOException, JsonGenerationException { delegate.writeOmittedField(fieldName); }\n+    public void writeOmittedField(String fieldName) throws IOException { delegate.writeOmittedField(fieldName); }\n     \n     /*\n     /**********************************************************\n      */\n     \n     @Override\n-    public void writeObjectId(Object id) throws IOException, JsonGenerationException { delegate.writeObjectId(id); }\n-\n-    @Override\n-    public void writeObjectRef(Object id) throws IOException, JsonGenerationException { delegate.writeObjectRef(id); }\n-    \n-    @Override\n-    public void writeTypeId(Object id) throws IOException, JsonGenerationException { delegate.writeTypeId(id); }\n+    public void writeObjectId(Object id) throws IOException { delegate.writeObjectId(id); }\n+\n+    @Override\n+    public void writeObjectRef(Object id) throws IOException { delegate.writeObjectRef(id); }\n+    \n+    @Override\n+    public void writeTypeId(Object id) throws IOException { delegate.writeTypeId(id); }\n     \n     /*\n     /**********************************************************", "timestamp": 1396065314, "metainfo": ""}