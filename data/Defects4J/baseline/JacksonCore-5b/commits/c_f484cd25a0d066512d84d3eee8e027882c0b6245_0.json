{"sha": "f484cd25a0d066512d84d3eee8e027882c0b6245", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n         /* For two quads, let's change algorithm a bit, to spice\n          * things up (can do bit more processing anyway)\n          */\n-        \n         int hash = firstQuad;\n-        hash += (hash >>> 15); // try mixing first and second byte pairs first\n-        hash ^= ((secondQuad + _hashSeed) * MULT); // then add second quad\n-        hash += (hash >>> 9); // and shuffle some more\n+        hash ^= (hash >>> 15); // try mixing first and second byte pairs first\n+        hash += (secondQuad * MULT); // then add second quad\n+        hash ^= _hashSeed;\n+        hash += (hash >>> 7); // and shuffle some more\n         return hash;\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n //System.out.printf(\"Byte stuff: collisions %d, max-coll %d\\n\", symbols.collisionCount(), symbols.maxCollisionLength());\n     \n         // Fewer collisions than with chars, but still quite a few\n-        assertEquals(1760, symbols.collisionCount());\n+        assertEquals(1702, symbols.collisionCount());\n         // but not super long collision chains:\n-        assertEquals(8, symbols.maxCollisionLength());\n+        assertEquals(9, symbols.maxCollisionLength());\n     }\n }", "timestamp": 1342251311, "metainfo": ""}