{"sha": "4769c36b6fe444cb929bc6cb81104903a806e525", "log": "addressing #133", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n         _nextSegment = next;\n         // Ok; may always be a property\n         _matchingPropertyName = segment;\n-        _matchingElementIndex = _parseInt(segment);\n+        _matchingElementIndex = _parseIndex(segment);\n     }\n     \n     /*\n     /**********************************************************\n      */\n \n-    private final static int _parseInt(String str) {\n+    private final static int _parseIndex(String str) {\n         final int len = str.length();\n-        if (len == 0) {\n+        // [Issue#133]: beware of super long indexes; assume we never\n+        // have arrays over 2 billion entries so ints are fine.\n+        if (len == 0 || len > 10) {\n             return -1;\n         }\n         for (int i = 0; i < len; ++i) {\n                 return -1;\n             }\n         }\n-        // for now, we'll assume 32-bit indexes are fine\n+        if (len == 10) {\n+            long l = NumberInput.parseLong(str);\n+            if (l > Integer.MAX_VALUE) {\n+                return -1;\n+            }\n+        }\n         return NumberInput.parseInt(str);\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java\n         assertEquals(-1, ptr.getMatchingIndex());\n         assertEquals(\"a/b\", ptr.getMatchingProperty());\n         assertEquals(\"/a~1b\", ptr.toString());\n-        \n+\n         // done!\n         ptr = ptr.tail();\n         assertTrue(ptr.matches());\n         assertNull(ptr.tail());\n     }\n \n+    // [Issue#133]\n+    public void testLongNumbers() throws Exception\n+    {\n+        final long LONG_ID = ((long) Integer.MAX_VALUE) + 1L;\n+        \n+        final String INPUT = \"/User/\"+LONG_ID;\n+\n+        JsonPointer ptr = JsonPointer.compile(INPUT);\n+        assertEquals(\"User\", ptr.getMatchingProperty());\n+        assertEquals(INPUT, ptr.toString());\n+\n+        ptr = ptr.tail();\n+        assertNotNull(ptr);\n+        assertFalse(ptr.matches());\n+        /* 14-Mar-2014, tatu: We do not support array indexes beyond 32-bit\n+         *    range; can still match textually of course.\n+         */\n+        assertEquals(-1, ptr.getMatchingIndex());\n+        assertEquals(String.valueOf(LONG_ID), ptr.getMatchingProperty());\n+\n+        // done!\n+        ptr = ptr.tail();\n+        assertTrue(ptr.matches());\n+        assertNull(ptr.tail());\n+    }\n }", "timestamp": 1394828790, "metainfo": ""}