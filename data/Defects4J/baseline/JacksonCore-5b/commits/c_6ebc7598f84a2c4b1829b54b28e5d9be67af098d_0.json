{"sha": "6ebc7598f84a2c4b1829b54b28e5d9be67af098d", "log": "VersionUtil: fix fd leak in .versionFor()  If the resource was not null, the opened InputStreamReader was never closed. Fix.  Create a separate private doReadVersion() method to avoid deeply nested try/catch/finally blocks.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n      */\n     public static Version versionFor(Class<?> cls)\n     {\n-        InputStream in;\n-        Version version = null;\n+        final InputStream in = cls.getResourceAsStream(VERSION_FILE);\n+\n+        if (in == null)\n+            return Version.unknownVersion();\n \n         try {\n-            in = cls.getResourceAsStream(VERSION_FILE);\n-            if (in != null) {\n+            InputStreamReader reader = new InputStreamReader(in, \"UTF-8\");\n+            try {\n+                return doReadVersion(reader);\n+            } finally {\n                 try {\n-                    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n-                    String groupStr = null, artifactStr = null;\n-                    String versionStr = br.readLine();\n-                    if (versionStr != null) {\n-                        groupStr = br.readLine();\n-                        if (groupStr != null) {\n-                            groupStr = groupStr.trim();\n-                            artifactStr = br.readLine();\n-                            if (artifactStr != null) {\n-                                artifactStr = artifactStr.trim();\n-                            }\n-                        }\n-                    }\n-                    version = parseVersion(versionStr, groupStr, artifactStr);\n-                } finally {\n-                    try {\n-                        in.close();\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(e);\n-                    }\n+                    reader.close();\n+                } catch (IOException ignored) {\n                 }\n             }\n-        } catch (IOException e) { }\n-        return (version == null) ? Version.unknownVersion() : version;\n+        } catch (UnsupportedEncodingException e) {\n+            return Version.unknownVersion();\n+        } finally {\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private static Version doReadVersion(final Reader reader)\n+    {\n+        String version = null, group = null, artifact = null;\n+\n+        final BufferedReader br = new BufferedReader(reader);\n+        try {\n+            version = br.readLine();\n+            if (version != null) {\n+                group = br.readLine();\n+                if (group != null)\n+                    artifact = br.readLine();\n+            }\n+        } catch (IOException ignored) {\n+        } finally {\n+            try {\n+                br.close();\n+            } catch (IOException ignored) {\n+            }\n+        }\n+\n+        // We don't trim() version: parseVersion() takes care ot that\n+        if (group != null)\n+            group = group.trim();\n+        if (artifact != null)\n+            artifact = artifact.trim();\n+        return parseVersion(version, group, artifact);\n     }\n \n     /**", "timestamp": 1352825487, "metainfo": ""}