{"sha": "ad28e352b60c5b50e13b7535fe003aa1afc7d1a6", "log": "Fix #77", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n             }\n             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n         }\n+        // [Issue#77] Try to decode most likely token\n+        if (Character.isJavaIdentifierStart(i)) {\n+            _reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");\n+        }\n+        // but if it doesn't look like a token:\n         _reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             }\n             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n         }\n-\n+        // [Issue#77] Try to decode most likely token\n+        if (Character.isJavaIdentifierStart(c)) {\n+            _reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");\n+        }\n+        // but if it doesn't look like a token:\n         _reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\n         return null;\n     }\n-    \n+\n     protected JsonToken _handleApostropheValue()\n         throws IOException, JsonParseException\n     {\n         reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\n         return null;\n     }\n-    \n+\n     protected void _matchToken(String matchStr, int i)\n         throws IOException, JsonParseException\n     {\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n     }\n \n-    public void testInvalidKeywordsStream() throws Exception {\n-        _testInvalidKeywords(true);\n-    }\n-    \n-    public void testInvalidKeywordsReader() throws Exception {\n-        _testInvalidKeywords(false);\n-    }\n-\n-    private void _testInvalidKeywords(boolean useStream) throws Exception\n-    {\n-        doTestInvalidKeyword1(useStream, \"nul\");\n-        doTestInvalidKeyword1(useStream, \"Null\");\n-        doTestInvalidKeyword1(useStream, \"nulla\");\n-        doTestInvalidKeyword1(useStream, \"fal\");\n-        doTestInvalidKeyword3(useStream, \"False\");\n-        doTestInvalidKeyword1(useStream, \"fals0\");\n-        doTestInvalidKeyword1(useStream, \"falsett0\");\n-        doTestInvalidKeyword1(useStream, \"tr\");\n-        doTestInvalidKeyword1(useStream, \"truE\");\n-        doTestInvalidKeyword1(useStream, \"treu\");\n-        doTestInvalidKeyword1(useStream, \"trueenough\");\n-    }\n-\n     public void testSkipping()\n         throws Exception\n     {\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         jp.close();\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Helper methods\n         verifyJsonSpecSampleDoc(jp, verify);\n         jp.close();\n     }\n-\n-    private void doTestInvalidKeyword1(boolean useStream, String value)\n-        throws IOException\n-    {\n-        final String doc = \"{ \\\"key1\\\" : \"+value+\" }\";\n-        JsonParser jp = useStream ? createParserUsingStream(doc, \"UTF-8\")\n-                : createParserUsingReader(doc);\n-        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n-        /* 24-Nov-2008, tatu: Note that depending on parser impl, we may\n-         *   get the exception early or late...\n-         */\n-        try {\n-            assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n-            jp.nextToken();\n-            fail(\"Expected an exception for malformed value keyword\");\n-        } catch (JsonParseException jex) {\n-            verifyException(jex, \"Unrecognized token\");\n-            verifyException(jex, value);\n-        } finally {\n-            jp.close();\n-        }\n-\n-        // Try as root-level value as well:\n-        jp = useStream ? createParserUsingStream(value, \"UTF-8\")\n-                : createParserUsingReader(value);\n-        try {\n-            jp.nextToken();\n-            fail(\"Expected an exception for malformed value keyword\");\n-        } catch (JsonParseException jex) {\n-            verifyException(jex, \"Unrecognized token\");\n-            verifyException(jex, value);\n-        } finally {\n-            jp.close();\n-        }\n-    }\n-\n-    private void doTestInvalidKeyword3(boolean useStream, String value)\n-        throws IOException\n-    {\n-        final String doc = \"{ \\\"key1\\\" : \"+value+\" }\";\n-        JsonParser jp = useStream ? createParserUsingStream(doc, \"UTF-8\")\n-                : this.createParserUsingReader(doc);\n-        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n-        /* 24-Nov-2008, tatu: Note that depending on parser impl, we may\n-         *   get the exception early or late...\n-         */\n-        try {\n-            assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n-            jp.nextToken();\n-            fail(\"Expected an exception for malformed value keyword\");\n-        } catch (JsonParseException jex) {\n-            verifyException(jex, \"expected a valid value\");\n-        } finally {\n-            jp.close();\n-        }\n-    }\n }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserErrorHandling.java\n+package com.fasterxml.jackson.core.json;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+\n+public class TestParserErrorHandling\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+\n+    public void testInvalidKeywordsStream() throws Exception {\n+        _testInvalidKeywords(true);\n+    }\n+    \n+    public void testInvalidKeywordsReader() throws Exception {\n+        _testInvalidKeywords(false);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    private void _testInvalidKeywords(boolean useStream) throws Exception\n+    {\n+        doTestInvalidKeyword1(useStream, \"nul\");\n+        doTestInvalidKeyword1(useStream, \"Null\");\n+        doTestInvalidKeyword1(useStream, \"nulla\");\n+        doTestInvalidKeyword1(useStream, \"fal\");\n+        doTestInvalidKeyword1(useStream, \"False\");\n+        doTestInvalidKeyword1(useStream, \"fals0\");\n+        doTestInvalidKeyword1(useStream, \"falsett0\");\n+        doTestInvalidKeyword1(useStream, \"tr\");\n+        doTestInvalidKeyword1(useStream, \"truE\");\n+        doTestInvalidKeyword1(useStream, \"treu\");\n+        doTestInvalidKeyword1(useStream, \"trueenough\");\n+        doTestInvalidKeyword1(useStream, \"C\");\n+    }\n+\n+    private void doTestInvalidKeyword1(boolean useStream, String value)\n+        throws IOException\n+    {\n+        final String doc = \"{ \\\"key1\\\" : \"+value+\" }\";\n+        JsonParser jp = useStream ? createParserUsingStream(doc, \"UTF-8\")\n+                : createParserUsingReader(doc);\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        /* 24-Nov-2008, tatu: Note that depending on parser impl, we may\n+         *   get the exception early or late...\n+         */\n+        try {\n+            assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+            jp.nextToken();\n+            fail(\"Expected an exception for malformed value keyword\");\n+        } catch (JsonParseException jex) {\n+            verifyException(jex, \"Unrecognized token\");\n+            verifyException(jex, value);\n+        } finally {\n+            jp.close();\n+        }\n+\n+        // Try as root-level value as well:\n+        jp = useStream ? createParserUsingStream(value, \"UTF-8\")\n+                : createParserUsingReader(value);\n+        try {\n+            jp.nextToken();\n+            fail(\"Expected an exception for malformed value keyword\");\n+        } catch (JsonParseException jex) {\n+            verifyException(jex, \"Unrecognized token\");\n+            verifyException(jex, value);\n+        } finally {\n+            jp.close();\n+        }\n+    }\n+}", "timestamp": 1372981218, "metainfo": ""}