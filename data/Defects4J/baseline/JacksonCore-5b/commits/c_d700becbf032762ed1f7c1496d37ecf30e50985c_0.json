{"sha": "d700becbf032762ed1f7c1496d37ecf30e50985c", "log": "Improve handling of low-level format auto-detection", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java\n     {\n         return _findFormat(new InputAccessor.Std(fullInputData));\n     }\n+\n+    /**\n+     * Method to call to find format that given content (full document)\n+     * has, as per configuration of this detector instance.\n+     * \n+     * @return Matcher object which contains result; never null, even in cases\n+     *    where no match (with specified minimal match strength) is found.\n+     * \n+     * @since 2.1\n+     */\n+    public DataFormatMatcher findFormat(byte[] fullInputData, int offset, int len) throws IOException\n+    {\n+        return _findFormat(new InputAccessor.Std(fullInputData, offset, len));\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java\n     protected final byte[] _bufferedData;\n \n     /**\n-     * Number of bytes in {@link #_bufferedData} that were read.\n+     * Pointer to the first byte in buffer available for reading\n+     */\n+    protected final int _bufferedStart;\n+    \n+    /**\n+     * Number of bytes available in buffer.\n      */\n     protected final int _bufferedLength;\n \n      */\n     protected final MatchStrength _matchStrength;\n     \n-    protected DataFormatMatcher(InputStream in, byte[] buffered, int bufferedLength,\n+    protected DataFormatMatcher(InputStream in, byte[] buffered,\n+            int bufferedStart, int bufferedLength,\n             JsonFactory match, MatchStrength strength)\n     {\n         _originalStream = in;\n         _bufferedData = buffered;\n+        _bufferedStart = bufferedStart;\n         _bufferedLength = bufferedLength;\n         _match = match;\n         _matchStrength = strength;\n             return null;\n         }\n         if (_originalStream == null) {\n-            return _match.createJsonParser(_bufferedData, 0, _bufferedLength);\n+            return _match.createJsonParser(_bufferedData, _bufferedStart, _bufferedLength);\n         }\n         return _match.createJsonParser(getDataStream());\n     }\n      */\n     public InputStream getDataStream() {\n         if (_originalStream == null) {\n-            return new ByteArrayInputStream(_bufferedData, 0, _bufferedLength);\n+            return new ByteArrayInputStream(_bufferedData, _bufferedStart, _bufferedLength);\n         }\n-        return new MergedStream(null, _originalStream, _bufferedData, 0, _bufferedLength);\n+        return new MergedStream(null, _originalStream, _bufferedData, _bufferedStart, _bufferedLength);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java\n \n         protected final byte[] _buffer;\n \n+        protected final int _bufferedStart;\n+\n         /**\n-         * Number of bytes in {@link #_buffer} that are valid\n-         * buffered content.\n+         * End of valid bytes in the buffer (points to one past last valid)\n          */\n-        protected int _bufferedAmount;\n+        protected int _bufferedEnd;\n         \n         /**\n          * Pointer to next available buffered byte in {@link #_buffer}.\n         {\n             _in = in;\n             _buffer = buffer;\n-            _bufferedAmount = 0;\n+            _bufferedStart = 0;\n+            _ptr = 0;\n+            _bufferedEnd = 0;\n         }\n \n         /**\n             _in = null;\n             _buffer = inputDocument;\n             // we have it all:\n-            _bufferedAmount = inputDocument.length;\n+            _bufferedStart = 0;\n+            _bufferedEnd = inputDocument.length;\n+        }\n+\n+        /**\n+         * Constructor used when the full input (or at least enough leading bytes\n+         * of full input) is available.\n+         * \n+         * @since 2.1\n+         */\n+        public Std(byte[] inputDocument, int start, int len)\n+        {\n+            _in = null;\n+            _buffer = inputDocument;\n+            _ptr = start;\n+            _bufferedStart = start;\n+            _bufferedEnd = start+len;\n         }\n         \n //      @Override\n         public boolean hasMoreBytes() throws IOException\n         {\n-            if (_ptr < _bufferedAmount) { // already got more\n+            if (_ptr < _bufferedEnd) { // already got more\n                 return true;\n+            }\n+            if (_in == null) { // nowhere to read from\n+                return false;\n             }\n             int amount = _buffer.length - _ptr;\n             if (amount < 1) { // can not load any more\n             if (count <= 0) { // EOF\n                 return false;\n             }\n-            _bufferedAmount += count;\n+            _bufferedEnd += count;\n             return true;\n         }\n \n         public byte nextByte() throws IOException\n         {\n             // should we just try loading more automatically?\n-            if (_ptr >- _bufferedAmount) {\n+            if (_ptr >= _bufferedEnd) {\n                 if (!hasMoreBytes()) {\n-                    throw new EOFException(\"Could not read more than \"+_ptr+\" bytes (max buffer size: \"+_buffer.length+\")\");\n+                    throw new EOFException(\"Failed auto-detect: could not read more than \"+_ptr+\" bytes (max buffer size: \"+_buffer.length+\")\");\n                 }\n             }\n             return _buffer[_ptr++];\n \n //      @Override\n         public void reset() {\n-            _ptr = 0;\n+            _ptr = _bufferedStart;\n         }\n \n         /*\n \n         public DataFormatMatcher createMatcher(JsonFactory match, MatchStrength matchStrength)\n         {\n-            return new DataFormatMatcher(_in, _buffer, _bufferedAmount, match, matchStrength);\n+            return new DataFormatMatcher(_in, _buffer, _bufferedStart, (_bufferedEnd - _bufferedStart),\n+                    match, matchStrength);\n         }\n     }\n }", "timestamp": 1345158009, "metainfo": ""}