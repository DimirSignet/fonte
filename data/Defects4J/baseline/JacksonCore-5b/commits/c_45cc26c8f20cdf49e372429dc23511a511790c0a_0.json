{"sha": "45cc26c8f20cdf49e372429dc23511a511790c0a", "log": "Worked on improving DefaultPrettyPrinter, to allow changing linefeeds, fluent/builder style configuration", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n \n         _rootSeparator = rootSeparator;\n     }\n-\n+    \n     public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator)\n     {\n         if (_rootSeparator == rootSeparator ||\n         return new DefaultPrettyPrinter(this, rootSeparator);\n     }\n     \n-    public void indentArraysWith(Indenter i)\n-    {\n+    public void indentArraysWith(Indenter i) {\n         _arrayIndenter = (i == null) ? NopIndenter.instance : i;\n     }\n \n-    public void indentObjectsWith(Indenter i)\n-    {\n+    public void indentObjectsWith(Indenter i) {\n         _objectIndenter = (i == null) ? NopIndenter.instance : i;\n     }\n \n+    /**\n+     * @deprecated Since 2.3 use {@link #withSpacesInObjectEntries} and {@link #withoutSpacesInObjectEntries()}\n+     */\n+    @Deprecated\n     public void spacesInObjectEntries(boolean b) { _spacesInObjectEntries = b; }\n \n+    /**\n+     * @since 2.3\n+     */\n+    public DefaultPrettyPrinter withArrayIndenter(Indenter i) {\n+        if (i == null) {\n+            i = NopIndenter.instance;\n+        }\n+        if (_arrayIndenter == i) {\n+            return this;\n+        }\n+        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n+        pp._arrayIndenter = i;\n+        return pp;\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public DefaultPrettyPrinter withObjectIndenter(Indenter i) {\n+        if (i == null) {\n+            i = NopIndenter.instance;\n+        }\n+        if (_objectIndenter == i) {\n+            return this;\n+        }\n+        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n+        pp._objectIndenter = i;\n+        return pp;\n+    }\n+\n+    /**\n+     * \"Mutant factory\" method that will return a pretty printer instance\n+     * that does use spaces inside object entries; if 'this' instance already\n+     * does this, it is returned; if not, a new instance will be constructed\n+     * and returned.\n+     *\n+     * @since 2.3\n+     */\n+    public DefaultPrettyPrinter withSpacesInObjectEntries() {\n+        return _withSpaces(true);\n+    }\n+\n+    /**\n+     * \"Mutant factory\" method that will return a pretty printer instance\n+     * that does not use spaces inside object entries; if 'this' instance already\n+     * does this, it is returned; if not, a new instance will be constructed\n+     * and returned.\n+     * \n+     * @since 2.3\n+     */\n+    public DefaultPrettyPrinter withoutSpacesInObjectEntries() {\n+        return _withSpaces(false);\n+    }\n+\n+    protected DefaultPrettyPrinter _withSpaces(boolean state)\n+    {\n+        if (_spacesInObjectEntries == state) {\n+            return this;\n+        }\n+        DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);\n+        pp._spacesInObjectEntries = state;\n+        return pp;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Instantiatable impl\n      */\n     public static class Lf2SpacesIndenter extends NopIndenter\n     {\n-        @SuppressWarnings(\"hiding\")\n-        public static final Lf2SpacesIndenter instance = new Lf2SpacesIndenter();\n-\n         private final static String SYS_LF;\n         static {\n             String lf = null;\n             Arrays.fill(SPACES, ' ');\n         }\n \n+        @SuppressWarnings(\"hiding\")\n+        public static final Lf2SpacesIndenter instance = new Lf2SpacesIndenter();\n+\n+        /**\n+         * Linefeed used; default value is the platform-specific linefeed.\n+         */\n+        protected final String _lf;\n+\n+        public Lf2SpacesIndenter() { this(SYS_LF); }\n+        \n+        /**\n+         * @since 2.3\n+         */\n+        public Lf2SpacesIndenter(String lf) {\n+            _lf = lf;\n+        }\n+\n+        /**\n+         * \"Mutant factory\" method that will return an instance that uses\n+         * specified String as linefeed.\n+         * \n+         * @since 2.3\n+         */\n+        public Lf2SpacesIndenter withLinefeed(String lf)\n+        {\n+            if (lf.equals(_lf)) {\n+                return this;\n+            }\n+            return new Lf2SpacesIndenter(lf);\n+        }\n+        \n         @Override\n         public boolean isInline() { return false; }\n \n         public void writeIndentation(JsonGenerator jg, int level)\n             throws IOException, JsonGenerationException\n         {\n-            jg.writeRaw(SYS_LF);\n+            jg.writeRaw(_lf);\n             if (level > 0) { // should we err on negative values (as there's some flaw?)\n                 level += level; // 2 spaces per level\n                 while (level > SPACE_COUNT) { // should never happen but...", "timestamp": 1375943044, "metainfo": ""}