{"sha": "5db03b63daf09a8e118cb10f9342520f5f22f016", "log": "Try to clear up final/non-final confusion for UTF-8 backed generator; to allow overriding", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n      */\n \n     @Override\n-    public final void writeFieldName(String name)  throws IOException, JsonGenerationException\n+    public void writeFieldName(String name)  throws IOException, JsonGenerationException\n     {\n         int status = _writeContext.writeFieldName(name);\n         if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n             _outputBuffer[_outputTail++] = BYTE_COMMA;\n         }\n         _writeFieldName(name);\n-    }\n-\n-    @Override\n-    public final void writeFieldName(SerializableString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        // Object is a value, need to verify it's allowed\n-        int status = _writeContext.writeFieldName(name.getValue());\n-        if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n-            _reportError(\"Can not write a field name, expecting a value\");\n-        }\n-        if (_cfgPrettyPrinter != null) {\n-            _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n-            return;\n-        }\n-        if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_COMMA;\n-        }\n-        _writeFieldName(name);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Output method implementations, structural\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public final void writeStartArray() throws IOException, JsonGenerationException\n-    {\n-        _verifyValueWrite(\"start an array\");\n-        _writeContext = _writeContext.createChildArrayContext();\n-        if (_cfgPrettyPrinter != null) {\n-            _cfgPrettyPrinter.writeStartArray(this);\n-        } else {\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_LBRACKET;\n-        }\n-    }\n-\n-    @Override\n-    public final void writeEndArray() throws IOException, JsonGenerationException\n-    {\n-        if (!_writeContext.inArray()) {\n-            _reportError(\"Current context not an ARRAY but \"+_writeContext.getTypeDesc());\n-        }\n-        if (_cfgPrettyPrinter != null) {\n-            _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());\n-        } else {\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_RBRACKET;\n-        }\n-        _writeContext = _writeContext.getParent();\n-    }\n-\n-    @Override\n-    public final void writeStartObject() throws IOException, JsonGenerationException\n-    {\n-        _verifyValueWrite(\"start an object\");\n-        _writeContext = _writeContext.createChildObjectContext();\n-        if (_cfgPrettyPrinter != null) {\n-            _cfgPrettyPrinter.writeStartObject(this);\n-        } else {\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_LCURLY;\n-        }\n-    }\n-\n-    @Override\n-    public final void writeEndObject() throws IOException, JsonGenerationException\n-    {\n-        if (!_writeContext.inObject()) {\n-            _reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());\n-        }\n-        if (_cfgPrettyPrinter != null) {\n-            _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());\n-        } else {\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_RCURLY;\n-        }\n-        _writeContext = _writeContext.getParent();\n     }\n \n     protected final void _writeFieldName(String name)\n         }\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }\n+    \n+    @Override\n+    public void writeFieldName(SerializableString name)\n+        throws IOException, JsonGenerationException\n+    {\n+        // Object is a value, need to verify it's allowed\n+        int status = _writeContext.writeFieldName(name.getValue());\n+        if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n+            _reportError(\"Can not write a field name, expecting a value\");\n+        }\n+        if (_cfgPrettyPrinter != null) {\n+            _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n+            return;\n+        }\n+        if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n+            if (_outputTail >= _outputEnd) {\n+                _flushBuffer();\n+            }\n+            _outputBuffer[_outputTail++] = BYTE_COMMA;\n+        }\n+        _writeFieldName(name);\n+    }\n \n     protected final void _writeFieldName(SerializableString name)\n         throws IOException, JsonGenerationException\n         }\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }    \n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Output method implementations, structural\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public final void writeStartArray() throws IOException, JsonGenerationException\n+    {\n+        _verifyValueWrite(\"start an array\");\n+        _writeContext = _writeContext.createChildArrayContext();\n+        if (_cfgPrettyPrinter != null) {\n+            _cfgPrettyPrinter.writeStartArray(this);\n+        } else {\n+            if (_outputTail >= _outputEnd) {\n+                _flushBuffer();\n+            }\n+            _outputBuffer[_outputTail++] = BYTE_LBRACKET;\n+        }\n+    }\n+\n+    @Override\n+    public final void writeEndArray() throws IOException, JsonGenerationException\n+    {\n+        if (!_writeContext.inArray()) {\n+            _reportError(\"Current context not an ARRAY but \"+_writeContext.getTypeDesc());\n+        }\n+        if (_cfgPrettyPrinter != null) {\n+            _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());\n+        } else {\n+            if (_outputTail >= _outputEnd) {\n+                _flushBuffer();\n+            }\n+            _outputBuffer[_outputTail++] = BYTE_RBRACKET;\n+        }\n+        _writeContext = _writeContext.getParent();\n+    }\n+\n+    @Override\n+    public final void writeStartObject() throws IOException, JsonGenerationException\n+    {\n+        _verifyValueWrite(\"start an object\");\n+        _writeContext = _writeContext.createChildObjectContext();\n+        if (_cfgPrettyPrinter != null) {\n+            _cfgPrettyPrinter.writeStartObject(this);\n+        } else {\n+            if (_outputTail >= _outputEnd) {\n+                _flushBuffer();\n+            }\n+            _outputBuffer[_outputTail++] = BYTE_LCURLY;\n+        }\n+    }\n+\n+    @Override\n+    public final void writeEndObject() throws IOException, JsonGenerationException\n+    {\n+        if (!_writeContext.inObject()) {\n+            _reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());\n+        }\n+        if (_cfgPrettyPrinter != null) {\n+            _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());\n+        } else {\n+            if (_outputTail >= _outputEnd) {\n+                _flushBuffer();\n+            }\n+            _outputBuffer[_outputTail++] = BYTE_RCURLY;\n+        }\n+        _writeContext = _writeContext.getParent();\n+    }\n+\n     /**\n      * Specialized version of <code>_writeFieldName</code>, off-lined\n      * to keep the \"fast path\" as simple (and hopefully fast) as possible.\n         _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);\n     }\n     \n-    private void _writeQuotedShort(short s) throws IOException {\n+    private final void _writeQuotedShort(short s) throws IOException {\n         if ((_outputTail + 8) >= _outputEnd) {\n             _flushBuffer();\n         }\n         _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);\n     }\n \n-    private void _writeQuotedInt(int i) throws IOException {\n+    private final void _writeQuotedInt(int i) throws IOException\n+    {\n         if ((_outputTail + 13) >= _outputEnd) {\n             _flushBuffer();\n         }\n         _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);\n     }\n \n-    private void _writeQuotedLong(long l) throws IOException {\n+    private final void _writeQuotedLong(long l) throws IOException\n+    {\n         if ((_outputTail + 23) >= _outputEnd) {\n             _flushBuffer();\n         }\n         }\n     }\n \n-    private void _writeQuotedRaw(Object value) throws IOException\n+    private final void _writeQuotedRaw(Object value) throws IOException\n     {\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n      */\n \n     @Override\n-    public final void flush()\n+    public void flush()\n         throws IOException\n     {\n         _flushBuffer();\n      * Same as <code>_writeStringSegmentASCII2(char[], ...)</code., but with\n      * additional checking for completely custom escapes\n      */\n-    private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)\n+    private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     {\n         // Ok: caller guarantees buffer can have room; but that may require flushing:\n         _outputTail = outputPtr;\n     }\n \n-    private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars)\n+    private final int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars)\n         throws IOException, JsonGenerationException\n     {\n         byte[] raw = esc.asUnquotedUTF8(); // must be escaped at this point, shouldn't double-quote\n         return (outputPtr + len);\n     }\n     \n-    private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw,\n+    private final int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw,\n             int remainingChars)\n         throws IOException, JsonGenerationException\n     {\n      * to fit in the output buffer after escaping; as such, we just need to\n      * chunk writes.\n      */\n-    private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen)\n+    private final void _writeUTF8Segments(byte[] utf8, int offset, int totalLen)\n         throws IOException, JsonGenerationException\n     {\n         do {\n         } while (totalLen > 0);\n     }\n     \n-    private void _writeUTF8Segment(byte[] utf8, final int offset, final int len)\n+    private final void _writeUTF8Segment(byte[] utf8, final int offset, final int len)\n         throws IOException, JsonGenerationException\n     {\n         // fast loop to see if escaping is needed; don't copy, just look\n         _outputTail += len;\n     }\n \n-    private void _writeUTF8Segment2(final byte[] utf8, int offset, int len)\n+    private final void _writeUTF8Segment2(final byte[] utf8, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         int outputPtr = _outputTail;\n     /**********************************************************\n      */\n     \n-    protected void _writeBinary(Base64Variant b64variant,\n+    protected final void _writeBinary(Base64Variant b64variant,\n             byte[] input, int inputPtr, final int inputEnd)\n         throws IOException, JsonGenerationException\n     {\n     }\n \n     // write-method called when length is definitely known\n-    protected int _writeBinary(Base64Variant b64variant,\n+    protected final int _writeBinary(Base64Variant b64variant,\n             InputStream data, byte[] readBuffer, int bytesLeft)\n         throws IOException, JsonGenerationException\n     {\n     }\n \n     // write method when length is unknown\n-    protected int _writeBinary(Base64Variant b64variant,\n+    protected final int _writeBinary(Base64Variant b64variant,\n             InputStream data, byte[] readBuffer)\n         throws IOException, JsonGenerationException\n     {\n         return bytesDone;\n     }\n     \n-    private int _readMore(InputStream in,\n+    private final int _readMore(InputStream in,\n             byte[] readBuffer, int inputPtr, int inputEnd,\n             int maxRead) throws IOException\n     {\n      * 1- and 2-byte UTF-8 encodings, when outputting \"raw\" \n      * text (meaning it is not to be escaped or quoted)\n      */\n-    private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen)\n+    private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen)\n         throws IOException\n     {\n         // Let's handle surrogates gracefully (as 4 byte output):\n      * \n      * @throws IOException\n      */\n-    private int _outputMultiByteChar(int ch, int outputPtr)\n+    private final int _outputMultiByteChar(int ch, int outputPtr)\n         throws IOException\n     {\n         byte[] bbuf = _outputBuffer;\n         return c;\n     }\n     \n-    private void _writeNull() throws IOException\n+    private final void _writeNull() throws IOException\n     {\n         if ((_outputTail + 4) >= _outputEnd) {\n             _flushBuffer();", "timestamp": 1380820425, "metainfo": ""}