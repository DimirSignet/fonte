{"sha": "84869742a3f3d10ae771ed88558baf02b7aaa1db", "log": "Streaminling on byte-source side again", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n     // Latin1 encoding is not supported, but we do use 8-bit subset for\n     // pre-processing task, to simplify first pass, keep it fast.\n     protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();\n-\n-    // White-space processing is done all the time, pre-fetch as well\n-    private final static int[] _icWS = CharTypes.getInputCodeWS();\n \n     /*\n     /**********************************************************\n             }\n         }\n     }\n-    \n+ \n+    // Primary loop: no reloading, comment handling\n     private final int _skipComma(int i) throws IOException\n     {\n         if (i != INT_COMMA) {\n         while (_inputPtr < _inputEnd) {\n             int i = (int) _inputBuffer[_inputPtr++];\n             if (i > INT_SPACE) {\n-                if (i == INT_SLASH) {\n-                    _skipComment();\n-                    continue;\n-                }\n-                if (i == INT_HASH) {\n-                    if (_skipYAMLComment()) {\n-                        continue;\n-                    }\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    --_inputPtr;\n+                    return _skipWSOrEnd2();\n                 }\n                 return i;\n-            } else if (i != INT_SPACE) {\n+            }\n+            if (i != INT_SPACE) {\n                 if (i == INT_LF) {\n                     ++_currInputRow;\n                     _currInputRowStart = _inputPtr;\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     // pre-processing task, to simplify first pass, keep it fast.\n     protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();\n \n-    // White-space processing is done all the time, pre-fetch as well\n-//    private final static int[] _icWS = CharTypes.getInputCodeWS();\n-    \n     /*\n     /**********************************************************\n     /* Configuration\n     /* Internal methods, ws skipping, escape/unescape\n     /**********************************************************\n      */\n-    \n+\n     private final int _skipWS() throws IOException\n     {\n-        while (_inputPtr < _inputEnd || loadMore()) {\n+        while (_inputPtr < _inputEnd) {\n             int i = _inputBuffer[_inputPtr++] & 0xFF;\n             if (i > INT_SPACE) {\n-                if (i == INT_SLASH) {\n-                    _skipComment();\n-                    continue;\n-                }\n-                if (i == INT_HASH) {\n-                    if (_skipYAMLComment()) {\n-                        continue;\n-                    }\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    --_inputPtr;\n+                    return _skipWS2();\n                 }\n                 return i;\n-            } else if (i != INT_SPACE) {\n+            }\n+            if (i != INT_SPACE) {\n                 if (i == INT_LF) {\n                     ++_currInputRow;\n                     _currInputRowStart = _inputPtr;\n                     _throwInvalidSpace(i);\n                 }\n             }\n+        }\n+        return _skipWS2();\n+    }\n+\n+    private final int _skipWS2() throws IOException\n+    {\n+        while (_inputPtr < _inputEnd || loadMore()) {\n+            int i = _inputBuffer[_inputPtr++] & 0xFF;\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n+                return i;\n+            }\n+            if (i != INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n         }        \n         throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n     }\n-\n+    \n     private final int _skipWSOrEnd() throws IOException\n+    {\n+        while (_inputPtr < _inputEnd) {\n+            int i = _inputBuffer[_inputPtr++] & 0xFF;\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    --_inputPtr;\n+                    return _skipWSOrEnd2();\n+                }\n+                return i;\n+            }\n+            if (i != INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n+        }\n+        return _skipWSOrEnd2();\n+    }\n+\n+    private final int _skipWSOrEnd2() throws IOException\n     {\n         while ((_inputPtr < _inputEnd) || loadMore()) {\n             int i = _inputBuffer[_inputPtr++] & 0xFF;", "timestamp": 1398970132, "metainfo": ""}