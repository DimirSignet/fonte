{"sha": "7b0d0918b23f8dc188ab30b612a2b1155b7a3dff", "log": "Start work on [JACKSON-718]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonNode.java\n     // // (along with defaults to be overridden)\n \n     /**\n-     * @return True if this node represents Json Array\n+     * @return True if this node represents JSON Array\n      */\n     public boolean isArray() { return false; }\n \n     /**\n-     * @return True if this node represents Json Object\n+     * @return True if this node represents JSON Object\n      */\n     public boolean isObject() { return false; }\n \n     public boolean isPojo() { return false; }\n \n     /**\n-     * @return True if this node represents a numeric Json\n+     * @return True if this node represents a numeric JSON\n      *   value\n      */\n     public boolean isNumber() { return false; }\n \n     /**\n      * @return True if this node represents an integral (integer)\n-     *   numeric Json value\n+     *   numeric JSON value\n      */\n     public boolean isIntegralNumber() { return false; }\n \n     /**\n      * @return True if this node represents a non-integral\n-     *   numeric Json value\n+     *   numeric JSON value\n      */\n     public boolean isFloatingPointNumber() { return false; }\n \n     /**\n      * @return True if this node represents an integral\n-     *   numeric Json value that withs in Java int value space\n+     *   numeric JSON value that withs in Java int value space\n      */\n     public boolean isInt() { return false; }\n \n     /**\n      * @return True if this node represents an integral\n-     *   numeric Json value that fits in Java long value space\n+     *   numeric JSON value that fits in Java long value space\n      *   (but not int value space, i.e. {@link #isInt} returns false)\n      */\n     public boolean isLong() { return false; }\n \n     /**\n      * Method that can be used to check if this node was created from\n-     * Json boolean value (literals \"true\" and \"false\").\n+     * JSON boolean value (literals \"true\" and \"false\").\n      */\n     public boolean isBoolean() { return false; }\n \n     /**\n      * Method that can be used to check if this node was created from\n-     * Json liternal null value.\n+     * JSON literal null value.\n      */\n     public boolean isNull() { return false; }\n \n     /**\n      * Method that can be used to check if this node represents\n      * binary data (Base64 encoded). Although this will be externally\n-     * written as Json String value, {@link #isTextual} will\n+     * written as JSON String value, {@link #isTextual} will\n      * return false if this method returns true.\n      *\n      * @return True if this node represents base64 encoded binary data\n      */\n     public abstract JsonParser.NumberType getNumberType();\n \n+    /**\n+     * Method that can be used to check whether this node is a numeric\n+     * node ({@link #isNumber} would return true) AND its value fits\n+     * within Java's 32-bit signed integer type, <code>int</code>.\n+     * Note that floating-point numbers are convertible if the integral\n+     * part fits without overflow (as per standard Java coercion rules)\n+     * \n+     * @since 2.0\n+     */\n+    public boolean canConvertToInt() { return false; }\n+\n+    /**\n+     * Method that can be used to check whether this node is a numeric\n+     * node ({@link #isNumber} would return true) AND its value fits\n+     * within Java's 64-bit signed integer type, <code>long</code>.\n+     * Note that floating-point numbers are convertible if the integral\n+     * part fits without overflow (as per standard Java coercion rules)\n+     * \n+     * @since 2.0\n+     */\n+    public boolean canConvertToLong() { return false; }\n+    \n     /*\n     /**********************************************************\n     /* Public API, straight value access\n      * For String values, null is never returned (but empty Strings may be)\n      *\n      * @return Textual value this node contains, iff it is a textual\n-     *   json node (comes from Json String value entry)\n+     *   JSON node (comes from JSON String value entry)\n      */\n     public String getTextValue() { return null; }\n \n      * For other types, always returns false.\n      *\n      * @return Textual value this node contains, iff it is a textual\n-     *   json node (comes from Json String value entry)\n+     *   json node (comes from JSON String value entry)\n      */\n     public boolean getBooleanValue() { return false; }\n ", "timestamp": 1326921941, "metainfo": ""}