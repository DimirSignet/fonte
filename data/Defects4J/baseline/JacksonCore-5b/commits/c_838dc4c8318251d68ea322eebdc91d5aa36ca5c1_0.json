{"sha": "838dc4c8318251d68ea322eebdc91d5aa36ca5c1", "log": "and more cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n      */\n     public static Version packageVersionFor(Class<?> cls)\n     {\n-        Class<?> vClass = null;\n         try {\n             String versionInfoClassName = cls.getPackage().getName() + \".PackageVersion\";\n-            vClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());\n+            Class<?> vClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());\n+            // However, if class exists, it better work correctly, no swallowing exceptions\n+            try {\n+                return ((Versioned) vClass.newInstance()).version();\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(\"Failed to get Versioned out of \"+vClass);\n+            }\n         } catch (Exception e) { // ok to be missing (not good, acceptable)\n             return null;\n         }\n-        if (vClass == null) {\n-            return null;\n-        }\n-        // However, if class exists, it better work correctly, no swallowing exceptions\n-        Object v;\n-        try {\n-            v = vClass.newInstance();\n-        } catch (RuntimeException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Failed to create \"+vClass+\": \"+e.getMessage(), e);\n-        }\n-        if (!(v instanceof Versioned)) {\n-            throw new IllegalArgumentException(\"\"+vClass+\": does not implement Versioned\");\n-        }\n-        return ((Versioned) v).version();\n     }\n \n     private static Version doReadVersion(final Reader reader)\n         final BufferedReader br = new BufferedReader(reader);\n         try {\n             version = br.readLine();\n-                if (version != null) {\n-                    group = br.readLine();\n-                    if (group != null) {\n-                        artifact = br.readLine();\n-                    }\n+            if (version != null) {\n+                group = br.readLine();\n+                if (group != null) {\n+                    artifact = br.readLine();\n                 }\n-            } catch (IOException ignored) {\n+            }\n+        } catch (IOException ignored) {\n         } finally {\n             _close(br);\n         }\n-\n         // We don't trim() version: parseVersion() takes care ot that\n         if (group != null) {\n             group = group.trim();\n     @SuppressWarnings(\"resource\")\n     public static Version mavenVersionFor(ClassLoader classLoader, String groupId, String artifactId)\n     {\n-        InputStream pomProperties = classLoader.getResourceAsStream(\"META-INF/maven/\" + groupId.replaceAll(\"\\\\.\", \"/\")\n-                + \"/\" + artifactId + \"/pom.properties\");\n+        InputStream pomProperties = classLoader.getResourceAsStream(\"META-INF/maven/\"\n+                + groupId.replaceAll(\"\\\\.\", \"/\")+ \"/\" + artifactId + \"/pom.properties\");\n         if (pomProperties != null) {\n             try {\n                 Properties props = new Properties();\n     {\n         if (versionStr != null && (versionStr = versionStr.trim()).length() > 0) {\n             String[] parts = VERSION_SEPARATOR.split(versionStr);\n-            int major = parseVersionPart(parts[0]);\n-            int minor = (parts.length > 1) ? parseVersionPart(parts[1]) : 0;\n-            int patch = (parts.length > 2) ? parseVersionPart(parts[2]) : 0;\n-            String snapshot = (parts.length > 3) ? parts[3] : null;\n-            return new Version(major, minor, patch, snapshot, groupId, artifactId);\n+            return new Version(parseVersionPart(parts[0]),\n+                    (parts.length > 1) ? parseVersionPart(parts[1]) : 0,\n+                    (parts.length > 2) ? parseVersionPart(parts[2]) : 0,\n+                    (parts.length > 3) ? parts[3] : null,\n+                    groupId, artifactId);\n         }\n         return null;\n     }", "timestamp": 1378528904, "metainfo": ""}