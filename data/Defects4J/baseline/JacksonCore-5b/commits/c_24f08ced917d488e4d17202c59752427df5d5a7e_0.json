{"sha": "24f08ced917d488e4d17202c59752427df5d5a7e", "log": "Merge pull request #49 from bgertzfield/master  VersionUtil: Improve Android memory usage (merging now that CLA part is resolved)", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/json/PackageVersion.java.in\n+package @package@;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+/**\n+ * Automatically generated from PackageVersion.java.in during\n+ * packageVersion-generate execution of maven-replacer-plugin in\n+ * pom.xml.\n+ */\n+public final class PackageVersion implements Versioned {\n+    public final static Version VERSION = VersionUtil.parseVersion(\n+        \"@projectversion@\", \"@projectgroupid@\", \"@projectartifactid@\");\n+\n+    @Override\n+    public Version version() {\n+        return VERSION;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n public class VersionUtil\n {\n     public final static String VERSION_FILE = \"VERSION.txt\";\n+    public final static String PACKAGE_VERSION_CLASS_NAME = \"PackageVersion\";\n+    public final static String PACKAGE_VERSION_FIELD = \"VERSION\";\n \n     private final static Pattern VERSION_SEPARATOR = Pattern.compile(\"[-_./;:]\");\n \n     \n     /**\n      * Helper method that will try to load version information for specified\n-     * class. Implementation is simple: class loader that loaded specified\n-     * class is asked to load resource with name \"VERSION\" from same\n-     * location (package) as class itself had.\n-     * If no version information is found, {@link Version#unknownVersion()} is\n-     * returned.\n+     * class. Implementation is as follows:\n+     *\n+     * First, tries to load version info from a class named\n+     * \"PackageVersion\" in the same package as the class.\n+     *\n+     * Next, if that fails, class loader that loaded specified class is\n+     * asked to load resource with name \"VERSION\" from same location\n+     * (package) as class itself had.\n+     *\n+     * If no version information is found, {@link Version#unknownVersion()} is returned.\n      */\n     public static Version versionFor(Class<?> cls)\n     {\n+        Version packageVersion = packageVersionFor(cls);\n+        if (packageVersion != null) {\n+            return packageVersion;\n+        }\n+\n         final InputStream in = cls.getResourceAsStream(VERSION_FILE);\n \n         if (in == null)\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n+        }\n+    }\n+\n+    /**\n+     * Loads version information by introspecting a class named\n+     * \"PackageVersion\" in the same package as the given class.\n+     *\n+     * If the class could not be found or does not have a public\n+     * static Version field named \"VERSION\", returns null.\n+     */\n+    public static Version packageVersionFor(Class<?> cls)\n+    {\n+        try {\n+            Package p = cls.getPackage();\n+            String versionInfoClassName =\n+                new StringBuilder(p.getName())\n+                    .append(\".\")\n+                    .append(PACKAGE_VERSION_CLASS_NAME)\n+                    .toString();\n+            Class<?> versionInfoClass = Class.forName(\n+                versionInfoClassName, true, cls.getClassLoader());\n+            return (Version)versionInfoClass.getField(PACKAGE_VERSION_FIELD).get(null);\n+        } catch (Exception e) {\n+            return null;\n         }\n     }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/test/PackageVersion.java\n+package com.fasterxml.jackson.core.test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+public final class PackageVersion {\n+    public final static Version VERSION = VersionUtil.parseVersion(\n+        \"23.42.64738-foobar\", \"foobar-group\", \"foobar-artifact\");\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/test/TestPackageVersion.java\n+package com.fasterxml.jackson.core.test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+public class TestPackageVersion extends com.fasterxml.jackson.test.BaseTest\n+{\n+    public void testPackageVersion()\n+    {\n+        Version expected = new Version(23, 42, 64738, \"foobar\", \"foobar-group\", \"foobar-artifact\");\n+        assertEquals(expected, VersionUtil.packageVersionFor(this.getClass()));\n+        assertEquals(expected, VersionUtil.versionFor(this.getClass()));\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java\n package com.fasterxml.jackson.core.util;\n \n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.json.CoreVersion;\n+import com.fasterxml.jackson.core.json.PackageVersion;\n \n public class TestVersionUtil extends com.fasterxml.jackson.test.BaseTest\n {\n         assertEquals(new Version(1, 2, 3, \"SNAPSHOT\", \"foo.bar\", \"foo-bar\"),\n                 VersionUtil.mavenVersionFor(TestVersionUtil.class.getClassLoader(), \"foo.bar\", \"foo-bar\"));\n     }\n+\n+    public void testPackageVersionMatches() {\n+        assertEquals(PackageVersion.VERSION, CoreVersion.instance.version());\n+    }\n }", "timestamp": 1357840841, "metainfo": ""}