{"sha": "e774d74c280a49a835211dab0380f3ea76ce4887", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     protected JsonToken _parsePosNumber(int c) throws IOException\n     {\n         char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n-        int outPtr = 0;\n         // One special case: if first char is 0, must not be followed by a digit\n         if (c == INT_0) {\n             c = _verifyNoLeadingZeroes();\n         }\n         // Ok: we can first just add digit we saw first:\n-        outBuf[outPtr++] = (char) c;\n+        outBuf[0] = (char) c;\n         int intLen = 1;\n+        int outPtr = 1;\n         // And then figure out how far we can read without further checks\n         // for either input or output\n-        int end = _inputPtr + outBuf.length;\n+        int end = _inputPtr + outBuf.length - 1; // 1 == outPtr\n         if (end > _inputEnd) {\n             end = _inputEnd;\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n         }\n     }\n \n+    // [jackson-core#157]\n+    public void testLongNumbers() throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder(9000);\n+        for (int i = 0; i < 9000; ++i) {\n+            sb.append('9');\n+        }\n+        String NUM = sb.toString();\n+        JsonFactory f = new JsonFactory();\n+        _testLongNumbers(f, NUM, false);\n+        _testLongNumbers(f, NUM, true);\n+    }\n+    \n+    private void _testLongNumbers(JsonFactory f, String num, boolean useStream) throws Exception\n+    {\n+        final String doc = \"[ \"+num+\" ]\";\n+        JsonParser jp = useStream\n+                ? FACTORY.createParser(doc.getBytes(\"UTF-8\"))\n+                        : FACTORY.createParser(doc);\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(num, jp.getText());\n+        assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests for invalid access\n     /**********************************************************\n      */\n     \n-    public void testInvalidBooleanAccess()\n-        throws Exception\n+    public void testInvalidBooleanAccess() throws Exception\n     {\n         JsonParser jp = FACTORY.createParser(\"[ \\\"abc\\\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());", "timestamp": 1412809618, "metainfo": ""}