{"sha": "108c640075e9d9e08238cbd8bd4d22150fe13187", "log": "Fix [Issue-24] for 2.1", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n         if (max >= len) {\n             System.arraycopy(c, start, curr, _currentSize, len);\n             _currentSize += len;\n-        } else {\n-            // No room for all, need to copy part(s):\n-            if (max > 0) {\n-                System.arraycopy(c, start, curr, _currentSize, max);\n-                start += max;\n-                len -= max;\n-            }\n-            // And then allocate new segment; we are guaranteed to now\n-            // have enough room in segment.\n-            expand(len); // note: curr != _currentSegment after this\n-            System.arraycopy(c, start, _currentSegment, 0, len);\n-            _currentSize = len;\n-        }\n+            return;\n+        }\n+        // No room for all, need to copy part(s):\n+        if (max > 0) {\n+            System.arraycopy(c, start, curr, _currentSize, max);\n+            start += max;\n+            len -= max;\n+        }\n+        /* And then allocate new segment; we are guaranteed to now\n+         * have enough room in segment.\n+         */\n+        // Except, as per [Issue-24], not for HUGE appends... so:\n+        do {\n+            expand(len);\n+            int amount = Math.min(_currentSegment.length, len);\n+            System.arraycopy(c, start, _currentSegment, 0, amount);\n+            _currentSize += amount;\n+            start += amount;\n+            len -= amount;\n+        } while (len > 0);\n     }\n \n     public void append(String str, int offset, int len)\n         if (max >= len) {\n             str.getChars(offset, offset+len, curr, _currentSize);\n             _currentSize += len;\n-        } else {\n-            // No room for all, need to copy part(s):\n-            if (max > 0) {\n-                str.getChars(offset, offset+max, curr, _currentSize);\n-                len -= max;\n-                offset += max;\n-            }\n-            /* And then allocate new segment; we are guaranteed to now\n-             * have enough room in segment.\n-             */\n+            return;\n+        }\n+        // No room for all, need to copy part(s):\n+        if (max > 0) {\n+            str.getChars(offset, offset+max, curr, _currentSize);\n+            len -= max;\n+            offset += max;\n+        }\n+        /* And then allocate new segment; we are guaranteed to now\n+         * have enough room in segment.\n+         */\n+        // Except, as per [Issue-24], not for HUGE appends... so:\n+        do {\n             expand(len);\n-            str.getChars(offset, offset+len, _currentSegment, 0);\n-            _currentSize = len;\n-        }\n+            int amount = Math.min(_currentSegment.length, len);\n+            str.getChars(offset, offset+amount, _currentSegment, 0);\n+            _currentSize += amount;\n+            offset += amount;\n+            len -= amount;\n+        } while (len > 0);\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n         tb.resetWithShared(new char[] { 'a' }, 0, 1);\n         assertEquals(1, tb.toString().length());\n     }\n+\n+      public void testLongAppend()\n+      {\n+          final int len = TextBuffer.MAX_SEGMENT_LEN * 3 / 2;\n+          StringBuilder sb = new StringBuilder(len);\n+          for (int i = 0; i < len; ++i) {\n+              sb.append('x');\n+          }\n+         final String STR = sb.toString();\n+         final String EXP = \"a\" + STR + \"c\";\n+ \n+         // ok: first test with String:\n+         TextBuffer tb = new TextBuffer(new BufferRecycler());\n+         tb.append('a');\n+         tb.append(STR, 0, len);\n+         tb.append('c');\n+         assertEquals(len+2, tb.size());\n+         assertEquals(EXP, tb.contentsAsString());\n+ \n+         // then char[]\n+         tb = new TextBuffer(new BufferRecycler());\n+         tb.append('a');\n+         tb.append(STR.toCharArray(), 0, len);\n+         tb.append('c');\n+         assertEquals(len+2, tb.size());\n+         assertEquals(EXP, tb.contentsAsString());\n+      }\n }", "timestamp": 1342654729, "metainfo": ""}