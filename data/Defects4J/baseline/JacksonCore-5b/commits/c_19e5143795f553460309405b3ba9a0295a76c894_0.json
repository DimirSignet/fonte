{"sha": "19e5143795f553460309405b3ba9a0295a76c894", "log": "Start implementing incremental base64-decoding for std JsonParser", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java\n     public void testBase64UsingReader() throws Exception\n     {\n         _testBase64Text(false);\n+    }\n+\n+    // [Issue-15] (streaming binary reads)\n+    public void testStreaming() throws IOException\n+    {\n+        _testStreaming(false);\n+        _testStreaming(true);\n     }\n \n     /*\n         }\n     }\n \n+    private byte[] _generateData(int size)\n+    {\n+        byte[] result = new byte[size];\n+        for (int i = 0; i < size; ++i) {\n+            result[i] = (byte) (i % 255);\n+        }\n+        return result;\n+    }\n+\n+    private void _testStreaming(boolean useBytes) throws IOException\n+    {\n+        final int[] SIZES = new int[] {\n+            1, 2, 3, 4, 5, 6,\n+            7, 8, 12,\n+            100, 350, 1900, 6000, 19000, 65000,\n+            139000\n+        };\n+\n+        JsonFactory jsonFactory = new JsonFactory();\n+        final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        StringWriter chars = null;\n+\n+        for (int size : SIZES) {\n+            byte[] data = _generateData(size);\n+            JsonGenerator g;\n+            if (useBytes) {\n+                bytes.reset();\n+                g = jsonFactory.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+            } else {\n+                chars = new StringWriter();\n+                g = jsonFactory.createJsonGenerator(chars);\n+            }\n+\n+            ByteArrayOutputStream bo = new ByteArrayOutputStream(size+10);            \n+            g.writeStartObject();\n+            g.writeFieldName(\"b\");\n+            g.writeBinary(data);\n+            g.writeEndObject();\n+            g.close();\n+\n+            // and verify\n+            JsonParser p;\n+            if (useBytes) {\n+                p = jsonFactory.createJsonParser(bytes.toByteArray());\n+            } else {\n+                p = jsonFactory.createJsonParser(chars.toString());\n+            }\n+            assertToken(JsonToken.START_OBJECT, p.nextToken());\n+    \n+            assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+            assertEquals(\"b\", p.getCurrentName());\n+            assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+            ByteArrayOutputStream result = new ByteArrayOutputStream(size);\n+            int gotten = p.readBinaryValue(result);\n+            assertEquals(size, gotten);\n+            assertArrayEquals(data, result.toByteArray());\n+            assertToken(JsonToken.END_OBJECT, p.nextToken());\n+            assertNull(p.nextToken());\n+            p.close();\n+        }\n+    }\n }", "timestamp": 1340772668, "metainfo": ""}