{"sha": "c3ef9f34f3664903016bf065aa6364089c7a8776", "log": "Fixed #51, problems with JsonLocation serialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonLocation.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonLocation.java\n     final int _columnNr;\n \n     /**\n-     * Displayable description for input source: file path, url\n+     * Displayable description for input source: file path, URL.\n+     *<p>\n+     * NOTE: <code>transient</code> since 2.2 so that Location itself is Serializable.\n      */\n-    final Object _sourceRef;\n+    final transient Object _sourceRef;\n \n     public JsonLocation(Object srcRef, long totalChars, int lineNr, int colNr)\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n         _objectCodec = codec;\n         _cfgNumbersAsStrings = isEnabled(Feature.WRITE_NUMBERS_AS_STRINGS);\n     }\n+\n     /**\n      * Implemented with detection that tries to find \"VERSION.txt\" in same\n      * package as the implementation class.\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n  * Note that this class can be used in two roles: first, as a static\n  * utility class for loading purposes, and second, as a singleton\n  * loader of per-module version information.\n- * In latter case one must sub-class to get proper per-module instance;\n- * and sub-class must reside in same Java package as matching \"VERSION.txt\"\n- * file.\n+ *<p>\n+ * Note that method for accessing version information changed between versions\n+ * 2.1 and 2.2; earlier code used file named \"VERSION.txt\"; but this has serious\n+ * performance issues on some platforms (Android), so a replacement system\n+ * was implemented to use class generation and dynamic class loading.\n  */\n public class VersionUtil\n {\n     @Deprecated\n     public final static String VERSION_FILE = \"VERSION.txt\";\n     public final static String PACKAGE_VERSION_CLASS_NAME = \"PackageVersion\";\n-    public final static String PACKAGE_VERSION_FIELD = \"VERSION\";\n+//    public final static String PACKAGE_VERSION_FIELD = \"VERSION\";\n \n     private final static Pattern VERSION_SEPARATOR = Pattern.compile(\"[-_./;:]\");\n \n      */\n     public static Version packageVersionFor(Class<?> cls)\n     {\n-    \tClass<?> versionInfoClass = null;\n+        Class<?> versionInfoClass = null;\n         try {\n             Package p = cls.getPackage();\n             String versionInfoClassName =\n             return null;\n         }\n         if (versionInfoClass == null) {\n-        \treturn null;\n+            return null;\n         }\n         // However, if class exists, it better work correctly, no swallowing exceptions\n         Object v;\n         try {\n-        \tv = versionInfoClass.newInstance();\n+            v = versionInfoClass.newInstance();\n         } catch (RuntimeException e) {\n-        \tthrow e;\n+            throw e;\n         } catch (Exception e) {\n-        \tthrow new IllegalArgumentException(\"Failed to instantiate \"+versionInfoClass.getName()\n-        \t\t\t+\" to find version information, problem: \"+e.getMessage(), e);\n+            throw new IllegalArgumentException(\"Failed to instantiate \"+versionInfoClass.getName()\n+                    +\" to find version information, problem: \"+e.getMessage(), e);\n         }\n         if (!(v instanceof Versioned)) {\n-        \tthrow new IllegalArgumentException(\"Bad version class \"+versionInfoClass.getName()\n+            throw new IllegalArgumentException(\"Bad version class \"+versionInfoClass.getName()\n         \t\t\t+\": does not implement \"+Versioned.class.getName());\n         }\n         return ((Versioned) v).version();", "timestamp": 1360038922, "metainfo": ""}