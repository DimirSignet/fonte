{"sha": "7b796a8cddab8cf95953bdd4ab44df1d16990dc2", "log": "Fixed #72", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n         java.io.Serializable // since 2.1 (for Android, mostly)\n {\n     /**\n-     * Computed for Jackson 2.1.0 release\n+     * Computed for Jackson 2.2.0 release\n      */\n     private static final long serialVersionUID = 8726401676402117450L;\n \n-    /**\n-     * Name used to identify JSON format\n-     * (and returned by {@link #getFormatName()}\n-     */\n-    public final static String FORMAT_NAME_JSON = \"JSON\";\n-    \n-    /**\n-     * Bitfield (set of flags) of all factory features that are enabled by default.\n-     */\n-    protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();\n-\n-    /**\n-     * Bitfield (set of flags) of all parser features that are enabled\n-     * by default.\n-     */\n-    protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();\n-    \n-    /**\n-     * Bitfield (set of flags) of all generator features that are enabled\n-     * by default.\n-     */\n-    protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();\n-\n-    private final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n     \n     /**\n      * Enumeration that defines all on/off features that can only be\n         public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n         \n         public int getMask() { return (1 << ordinal()); }\n-    }    \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Constants\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Name used to identify JSON format\n+     * (and returned by {@link #getFormatName()}\n+     */\n+    public final static String FORMAT_NAME_JSON = \"JSON\";\n+    \n+    /**\n+     * Bitfield (set of flags) of all factory features that are enabled by default.\n+     */\n+    protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();\n+\n+    /**\n+     * Bitfield (set of flags) of all parser features that are enabled\n+     * by default.\n+     */\n+    protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();\n+    \n+    /**\n+     * Bitfield (set of flags) of all generator features that are enabled\n+     * by default.\n+     */\n+    protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();\n+\n+    private final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n+    \n     /*\n     /**********************************************************\n     /* Buffer, symbol table management\n      * and this reuse only works within context of a single\n      * factory instance.\n      */\n-    public JsonFactory() { this(null); }\n+    public JsonFactory() { this((ObjectCodec) null); }\n \n     public JsonFactory(ObjectCodec oc) { _objectCodec = oc; }\n \n+    /**\n+     * Constructor used when copy()ing a factory instance.\n+     * \n+     * @since 2.2.1\n+     */\n+    protected JsonFactory(JsonFactory src, ObjectCodec codec)\n+    {\n+        _objectCodec = null;\n+        _factoryFeatures = src._factoryFeatures;\n+        _parserFeatures = src._parserFeatures;\n+        _generatorFeatures = src._generatorFeatures;\n+        _characterEscapes = src._characterEscapes;\n+        _inputDecorator = src._inputDecorator;\n+        _outputDecorator = src._outputDecorator;\n+        _rootValueSeparator = src._rootValueSeparator;\n+        \n+        /* 27-Apr-2013, tatu: How about symbol table; should we try to\n+         *   reuse shared symbol tables? Could be more efficient that way;\n+         *   although can slightly add to concurrency overhead.\n+         */\n+    }\n+    \n     /**\n      * Method for constructing a new {@link JsonFactory} that has\n      * the same settings as this instance, but is otherwise\n      * are separate).\n      * Note that {@link ObjectCodec} reference is not copied but is\n      * set to null; caller typically needs to set it after calling\n-     * this method.\n+     * this method. Reason for this is that the codec is used for\n+     * callbacks, and assumption is that there is strict 1-to-1\n+     * mapping between codec, factory. Caller has to, then, explicitly\n+     * set codec after making the copy.\n      * \n      * @since 2.1\n      */\n     public JsonFactory copy()\n     {\n         _checkInvalidCopy(JsonFactory.class);\n-        return new JsonFactory(null);\n-    }\n-\n+        // as per above, do clear ObjectCodec\n+        return new JsonFactory(this, null);\n+    }\n+    \n     /**\n      * @since 2.1\n      * @param exp\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/TestJsonFactory.java\n+package com.fasterxml.jackson.core;\n+\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+public class TestJsonFactory extends BaseTest\n+{\n+    // #72\n+    public void testCopy() throws Exception\n+    {\n+        JsonFactory jf = new JsonFactory();\n+        // first, verify defaults\n+        assertTrue(jf.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n+        assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n+        assertFalse(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));\n+        jf.disable(JsonFactory.Feature.INTERN_FIELD_NAMES);\n+        jf.enable(JsonParser.Feature.ALLOW_COMMENTS);\n+        jf.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);\n+        // then change, verify that changes \"stick\"\n+        assertFalse(jf.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n+        assertTrue(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n+        assertTrue(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));\n+\n+        JsonFactory jf2 = jf.copy();\n+        assertFalse(jf2.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n+        assertTrue(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n+        assertTrue(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));\n+    }\n+}", "timestamp": 1367083110, "metainfo": ""}