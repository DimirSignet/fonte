{"sha": "4ab04ce94cdcf20ae7c92e7ead1ca1f52a4b541d", "log": "Finished switch to 'createXxx' (over 'createJsonXxx')", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      *<p>\n      * Note: there are formats that use fixed encoding (like most binary data formats)\n      * and that ignore passed in encoding.\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n-     * \n-     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n      *\n      * @param out OutputStream to use for writing JSON content \n      * @param enc Character encoding to use\n+     * \n+     * @since 2.1\n      */\n     public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc)\n         throws IOException\n     {\n-        return createJsonGenerator(out, enc);\n-    }\n-\n-    /**\n-     * Method for constructing JSON generator for writing JSON content\n-     * using specified Writer.\n-     *<p>\n-     * Underlying stream <b>is NOT owned</b> by the generator constructed,\n-     * so that generator will NOT close the Reader when\n-     * {@link JsonGenerator#close} is called (unless auto-closing\n-     * feature,\n-     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).\n-     * Using application needs to close it explicitly.\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n-     * \n-     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n-     *\n-     * @param out Writer to use for writing JSON content \n-     */\n-    public JsonGenerator createGenerator(Writer out)\n-        throws IOException\n-    {\n-        return createJsonGenerator(out);\n-    }\n-\n-    /**\n-     * Convenience method for constructing generator that uses default\n-     * encoding of the format (UTF-8 for JSON and most other data formats).\n-     *<p>\n-     * Note: there are formats that use fixed encoding (like most binary data formats).\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n-     * \n-     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n-     */\n-    public JsonGenerator createGenerator(OutputStream out) throws IOException {\n-        return createJsonGenerator(out);\n-    }\n-    \n-    /**\n-     * Method for constructing JSON generator for writing JSON content\n-     * to specified file, overwriting contents it might have (or creating\n-     * it if such file does not yet exist).\n-     * Encoding to use must be specified, and needs to be one of available\n-     * types (as per JSON specification).\n-     *<p>\n-     * Underlying stream <b>is owned</b> by the generator constructed,\n-     * i.e. generator will handle closing of file when\n-     * {@link JsonGenerator#close} is called.\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n-     * \n-     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n-     *\n-     * @param f File to write contents to\n-     * @param enc Character encoding to use\n-     */\n-    public JsonGenerator createGenerator(File f, JsonEncoding enc)\n-        throws IOException\n-    {\n-        return createJsonGenerator(f, enc);\n-    }    \n-\n-    /*\n-    /**********************************************************\n-    /* Generator factories, old (as per [Issue-25]\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method for constructing JSON generator for writing JSON content\n-     * using specified output stream.\n-     * Encoding to use must be specified, and needs to be one of available\n-     * types (as per JSON specification).\n-     *<p>\n-     * Underlying stream <b>is NOT owned</b> by the generator constructed,\n-     * so that generator will NOT close the output stream when\n-     * {@link JsonGenerator#close} is called (unless auto-closing\n-     * feature,\n-     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET}\n-     * is enabled).\n-     * Using application needs to close it explicitly if this is the case.\n-     *<p>\n-     * Note: there are formats that use fixed encoding (like most binary data formats)\n-     * and that ignore passed in encoding.\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n-     *\n-     * @param out OutputStream to use for writing JSON content \n-     * @param enc Character encoding to use\n-     */\n-    public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)\n-        throws IOException\n-    {\n-\t// false -> we won't manage the stream unless explicitly directed to\n+        // false -> we won't manage the stream unless explicitly directed to\n         IOContext ctxt = _createContext(out, false);\n         ctxt.setEncoding(enc);\n         if (enc == JsonEncoding.UTF8) {\n             if (_outputDecorator != null) {\n                 out = _outputDecorator.decorate(ctxt, out);\n             }\n-            return _createUTF8JsonGenerator(out, ctxt);\n+            return _createUTF8Generator(out, ctxt);\n         }\n         Writer w = _createWriter(out, enc, ctxt);\n         // [JACKSON-512]: allow wrapping with _outputDecorator\n         if (_outputDecorator != null) {\n             w = _outputDecorator.decorate(ctxt, w);\n         }\n-\treturn _createGenerator(w, ctxt);\n-    }\n-\n+        return _createGenerator(w, ctxt);\n+    }\n+\n+    /**\n+     * Convenience method for constructing generator that uses default\n+     * encoding of the format (UTF-8 for JSON and most other data formats).\n+     *<p>\n+     * Note: there are formats that use fixed encoding (like most binary data formats).\n+     * \n+     * @since 2.1\n+     */\n+    public JsonGenerator createGenerator(OutputStream out) throws IOException {\n+        return createGenerator(out, JsonEncoding.UTF8);\n+    }\n+    \n     /**\n      * Method for constructing JSON generator for writing JSON content\n      * using specified Writer.\n      * feature,\n      * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).\n      * Using application needs to close it explicitly.\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n+     * \n+     * @since 2.1\n      *\n      * @param out Writer to use for writing JSON content \n      */\n-    public JsonGenerator createJsonGenerator(Writer out)\n+    public JsonGenerator createGenerator(Writer out)\n         throws IOException\n     {\n         IOContext ctxt = _createContext(out, false);\n             out = _outputDecorator.decorate(ctxt, out);\n         }\n         return _createGenerator(out, ctxt);\n-    }\n-\n-    /**\n-     * Convenience method for constructing generator that uses default\n-     * encoding of the format (UTF-8 for JSON and most other data formats).\n-     *<p>\n-     * Note: there are formats that use fixed encoding (like most binary data formats).\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n-     */\n-    public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {\n-        return createJsonGenerator(out, JsonEncoding.UTF8);\n     }\n     \n     /**\n      * Underlying stream <b>is owned</b> by the generator constructed,\n      * i.e. generator will handle closing of file when\n      * {@link JsonGenerator#close} is called.\n-     *<p>\n-     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createGenerator</code>.\n      *\n      * @param f File to write contents to\n      * @param enc Character encoding to use\n-     */\n-    public JsonGenerator createJsonGenerator(File f, JsonEncoding enc)\n+     * \n+     * @since 2.1\n+     */\n+    public JsonGenerator createGenerator(File f, JsonEncoding enc)\n         throws IOException\n     {\n         OutputStream out = new FileOutputStream(f);\n             if (_outputDecorator != null) {\n                 out = _outputDecorator.decorate(ctxt, out);\n             }\n-            return _createUTF8JsonGenerator(out, ctxt);\n+            return _createUTF8Generator(out, ctxt);\n         }\n         Writer w = _createWriter(out, enc, ctxt);\n         // [JACKSON-512]: allow wrapping with _outputDecorator\n             w = _outputDecorator.decorate(ctxt, w);\n         }\n         return _createGenerator(w, ctxt);\n+    }    \n+\n+    /*\n+    /**********************************************************\n+    /* Generator factories, old (as per [Issue-25]\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for constructing JSON generator for writing JSON content\n+     * using specified output stream.\n+     * Encoding to use must be specified, and needs to be one of available\n+     * types (as per JSON specification).\n+     *<p>\n+     * Underlying stream <b>is NOT owned</b> by the generator constructed,\n+     * so that generator will NOT close the output stream when\n+     * {@link JsonGenerator#close} is called (unless auto-closing\n+     * feature,\n+     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET}\n+     * is enabled).\n+     * Using application needs to close it explicitly if this is the case.\n+     *<p>\n+     * Note: there are formats that use fixed encoding (like most binary data formats)\n+     * and that ignore passed in encoding.\n+     *\n+     * @param out OutputStream to use for writing JSON content \n+     * @param enc Character encoding to use\n+     *\n+     * @deprecated Since 2.2, use {@link #createGenerator(OutputStream, JsonEncoding)} instead.\n+     */\n+    @Deprecated\n+    public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)\n+        throws IOException\n+    {\n+        return createGenerator(out, enc);\n+    }\n+\n+    /**\n+     * Method for constructing JSON generator for writing JSON content\n+     * using specified Writer.\n+     *<p>\n+     * Underlying stream <b>is NOT owned</b> by the generator constructed,\n+     * so that generator will NOT close the Reader when\n+     * {@link JsonGenerator#close} is called (unless auto-closing\n+     * feature,\n+     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).\n+     * Using application needs to close it explicitly.\n+     *\n+     * @param out Writer to use for writing JSON content \n+     * \n+     * @deprecated Since 2.2, use {@link #createGenerator(Writer)} instead.\n+     */\n+    @Deprecated\n+    public JsonGenerator createJsonGenerator(Writer out)\n+        throws IOException\n+    {\n+        return createGenerator(out);\n+    }\n+\n+    /**\n+     * Convenience method for constructing generator that uses default\n+     * encoding of the format (UTF-8 for JSON and most other data formats).\n+     *<p>\n+     * Note: there are formats that use fixed encoding (like most binary data formats).\n+     * \n+     * @deprecated Since 2.2, use {@link #createGenerator(OutputStream)} instead.\n+     */\n+    @Deprecated\n+    public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {\n+        return createGenerator(out, JsonEncoding.UTF8);\n+    }\n+    \n+    /**\n+     * Method for constructing JSON generator for writing JSON content\n+     * to specified file, overwriting contents it might have (or creating\n+     * it if such file does not yet exist).\n+     * Encoding to use must be specified, and needs to be one of available\n+     * types (as per JSON specification).\n+     *<p>\n+     * Underlying stream <b>is owned</b> by the generator constructed,\n+     * i.e. generator will handle closing of file when\n+     * {@link JsonGenerator#close} is called.\n+     *\n+     * @param f File to write contents to\n+     * @param enc Character encoding to use\n+     * \n+     * \n+     * @deprecated Since 2.2, use {@link #createGenerator(File,JsonEncoding)} instead.\n+     */\n+    @Deprecated\n+    public JsonGenerator createJsonGenerator(File f, JsonEncoding enc)\n+        throws IOException\n+    {\n+        return createGenerator(f, enc);\n     }\n \n     /*", "timestamp": 1353040936, "metainfo": ""}