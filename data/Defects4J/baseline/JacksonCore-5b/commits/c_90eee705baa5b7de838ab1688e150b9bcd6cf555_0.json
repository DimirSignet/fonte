{"sha": "90eee705baa5b7de838ab1688e150b9bcd6cf555", "log": "Add skeletal micro-benchmark to verify perf of json parsing at raw streaming level", "commit": "\n--- /dev/null\n+++ b/src/test/java/perf/ManualReadPerfWithMedia.java\n+package perf;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class ManualReadPerfWithMedia extends ParserTestBase\n+{\n+    protected final JsonFactory _factory;\n+    \n+    protected final String _json;\n+    \n+    private ManualReadPerfWithMedia(JsonFactory f, String json) throws Exception {\n+        _factory = f;\n+        _json = json;\n+    }\n+ \n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        MediaItem.Content content = new MediaItem.Content();\n+        content.setTitle(\"Performance micro-benchmark, to be run manually\");\n+        content.addPerson(\"William\");\n+        content.addPerson(\"Robert\");\n+        content.setWidth(900);\n+        content.setHeight(120);\n+        content.setBitrate(256000);\n+        content.setDuration(3600 * 1000L);\n+        content.setCopyright(\"none\");\n+        content.setPlayer(MediaItem.Player.FLASH);\n+        content.setUri(\"http://whatever.biz\");\n+\n+        MediaItem input = new MediaItem(content);\n+        input.addPhoto(new MediaItem.Photo(\"http://a.com\", \"title1\", 200, 100, MediaItem.Size.LARGE));\n+        input.addPhoto(new MediaItem.Photo(\"http://b.org\", \"title2\", 640, 480, MediaItem.Size.SMALL));\n+\n+        final JsonFactory f = new JsonFactory();\n+        final String jsonStr = input.asJsonString(f);\n+        final byte[] json = jsonStr.getBytes(\"UTF-8\");\n+\n+        new ManualReadPerfWithMedia(f, jsonStr).test(\"Reader\", \"char[]\", json.length);\n+    }\n+\n+    protected void testRead1(int reps) throws Exception\n+    {\n+        final String input = _json;\n+        while (--reps >= 0) {\n+            JsonParser p = _factory.createParser(input);\n+            _stream(p);\n+            p.close();\n+        }\n+    }\n+\n+    protected void testRead2(int reps) throws Exception\n+    {\n+        final String input = _json;\n+        while (--reps >= 0) {\n+            /*\n+            final char[] ch = input.toCharArray();\n+            JsonParser p = _factory.createParser(ch, 0, ch.length);\n+            */\n+            JsonParser p = _factory.createParser(input);\n+            _stream(p);\n+            p.close();\n+        }\n+    }\n+\n+    private final void _stream(JsonParser p) throws Exception\n+    {\n+        JsonToken t;\n+\n+        while ((t = p.nextToken()) != null) {\n+            // force decoding/reading of scalar values too (booleans are fine, nulls too)\n+            if (t == JsonToken.VALUE_STRING) {\n+                p.getText();\n+            } else if (t == JsonToken.VALUE_NUMBER_INT) {\n+                p.getLongValue();\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/MediaItem.java\n+package perf;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class MediaItem\n+{\n+    public enum Player { JAVA, FLASH;  }\n+    public enum Size { SMALL, LARGE; }\n+\n+    private List<Photo> _photos;\n+    private Content _content;\n+\n+    public MediaItem() { }\n+\n+    public MediaItem(Content c)\n+    {\n+        _content = c;\n+    }\n+\n+    public void addPhoto(Photo p) {\n+        if (_photos == null) {\n+            _photos = new ArrayList<Photo>();\n+        }\n+        _photos.add(p);\n+    }\n+    \n+    public List<Photo> getImages() { return _photos; }\n+    public void setImages(List<Photo> p) { _photos = p; }\n+\n+    public Content getContent() { return _content; }\n+    public void setContent(Content c) { _content = c; }\n+\n+    public String asJsonString(JsonFactory f) throws IOException\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = f.createGenerator(w);\n+        write(gen);\n+        gen.close();\n+        w.close();\n+        return w.toString();\n+    }\n+    \n+    public void write(JsonGenerator gen) throws IOException\n+    {\n+        gen.writeStartObject();\n+\n+        gen.writeFieldName(\"content\");\n+        if (_content == null) {\n+            gen.writeNull();\n+        } else {\n+            _content.write(gen);\n+        }\n+        gen.writeFieldName(\"photos\");\n+        if (_photos == null) {\n+            gen.writeNull();\n+        } else {\n+            gen.writeStartArray();\n+            for (int i = 0, len = _photos.size(); i < len; ++i) {\n+                _photos.get(i).write(gen);\n+            }\n+            gen.writeEndArray();\n+        }\n+        gen.writeEndObject();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    public static class Photo\n+    {\n+        private String _uri;\n+        private String _title;\n+        private int _width;\n+        private int _height;\n+        private Size _size;\n+    \n+        public Photo() {}\n+        public Photo(String uri, String title, int w, int h, Size s)\n+        {\n+          _uri = uri;\n+          _title = title;\n+          _width = w;\n+          _height = h;\n+          _size = s;\n+        }\n+    \n+      public String getUri() { return _uri; }\n+      public String getTitle() { return _title; }\n+      public int getWidth() { return _width; }\n+      public int getHeight() { return _height; }\n+      public Size getSize() { return _size; }\n+    \n+      public void setUri(String u) { _uri = u; }\n+      public void setTitle(String t) { _title = t; }\n+      public void setWidth(int w) { _width = w; }\n+      public void setHeight(int h) { _height = h; }\n+      public void setSize(Size s) { _size = s; }\n+\n+      public void write(JsonGenerator gen) throws IOException\n+      {\n+          gen.writeStartObject();\n+          gen.writeStringField(\"uri\", _uri);\n+          gen.writeStringField(\"title\", _title);\n+          gen.writeNumberField(\"width\", _width);\n+          gen.writeNumberField(\"height\", _height);\n+          if (_size == null) {\n+              gen.writeNullField(\"size\");\n+          } else {\n+              gen.writeStringField(\"size\", _size.name());\n+          }\n+          gen.writeEndObject();\n+      }\n+    }\n+\n+    public static class Content\n+    {\n+        private String _uri;\n+        private String _title;\n+        private int _width;\n+        private int _height;\n+        private String _format;\n+        private long _duration;\n+        private long _size;\n+        private int _bitrate;\n+        private String _copyright;\n+        private Player _player;\n+\n+        private List<String> _persons;\n+        \n+        public void write(JsonGenerator gen) throws IOException\n+        {\n+            gen.writeStartObject();\n+            \n+            gen.writeStringField(\"uri\", _uri);\n+            gen.writeStringField(\"title\", _title);\n+\n+            gen.writeNumberField(\"width\", _width);\n+            gen.writeNumberField(\"height\", _height);\n+\n+            gen.writeStringField(\"format\", _format);\n+\n+            gen.writeNumberField(\"duration\", _duration);\n+            gen.writeNumberField(\"size\", _size);\n+            gen.writeNumberField(\"bitrate\", _bitrate);\n+            gen.writeStringField(\"copyright\", _copyright);\n+\n+            if (_player == null) {\n+                gen.writeNullField(\"player\");\n+            } else {\n+                gen.writeStringField(\"player\", _player.name());\n+            }\n+\n+            gen.writeFieldName(\"photos\");\n+            if (_persons == null) {\n+                gen.writeNull();\n+            } else {\n+                gen.writeStartArray();\n+                for (int i = 0, len = _persons.size(); i < len; ++i) {\n+                    gen.writeString(_persons.get(i));\n+                }\n+                gen.writeEndArray();\n+            }\n+            gen.writeEndObject();\n+        }\n+        \n+        public Content() { }\n+\n+        public void addPerson(String p) {\n+            if (_persons == null) {\n+                _persons = new ArrayList<String>();\n+            }\n+            _persons.add(p);\n+        }\n+        \n+        public Player getPlayer() { return _player; }\n+        public String getUri() { return _uri; }\n+        public String getTitle() { return _title; }\n+        public int getWidth() { return _width; }\n+        public int getHeight() { return _height; }\n+        public String getFormat() { return _format; }\n+        public long getDuration() { return _duration; }\n+        public long getSize() { return _size; }\n+        public int getBitrate() { return _bitrate; }\n+        public List<String> getPersons() { return _persons; }\n+        public String getCopyright() { return _copyright; }\n+    \n+        public void setPlayer(Player p) { _player = p; }\n+        public void setUri(String u) {  _uri = u; }\n+        public void setTitle(String t) {  _title = t; }\n+        public void setWidth(int w) {  _width = w; }\n+        public void setHeight(int h) {  _height = h; }\n+        public void setFormat(String f) {  _format = f;  }\n+        public void setDuration(long d) {  _duration = d; }\n+        public void setSize(long s) {  _size = s; }\n+        public void setBitrate(int b) {  _bitrate = b; }\n+        public void setPersons(List<String> p) {  _persons = p; }\n+        public void setCopyright(String c) {  _copyright = c; }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/ParserTestBase.java\n+package perf;\n+\n+abstract class ParserTestBase\n+{\n+    protected int hash;\n+\n+    protected <T1, T2> void test(String desc1, String desc2, int expSize)\n+        throws Exception\n+    {\n+        // guessing we have 500 byte\n+        final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) expSize);\n+\n+        System.out.printf(\"Estimating %d bytes to read; will do %d repetitions\\n\",\n+                expSize, REPS);\n+\n+        int i = 0;\n+        int roundsDone = 0;\n+        final int TYPES = 2;\n+        final int WARMUP_ROUNDS = 5;\n+\n+        final long[] times = new long[TYPES];\n+        \n+        while (true) {\n+            try {  Thread.sleep(100L); } catch (InterruptedException ie) { }\n+            int round = (i++ % TYPES);\n+\n+            String msg;\n+            boolean lf = (round == 0);\n+\n+            long msecs;\n+            \n+            switch (round) {\n+            case 0:\n+                msg = desc1;\n+                msecs = _testRead1(REPS);\n+                break;\n+            case 1:\n+                msg = desc2;\n+                msecs = _testRead2(REPS);\n+                break;\n+            default:\n+                throw new Error();\n+            }\n+\n+            // skip first 5 rounds to let results stabilize\n+            if (roundsDone >= WARMUP_ROUNDS) {\n+                times[round] += msecs;\n+            }\n+            \n+            System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n+            if (lf) {\n+                ++roundsDone;\n+                if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n+                    double den = (double) (roundsDone - WARMUP_ROUNDS);\n+                    System.out.printf(\"Averages after %d rounds (\"+desc1+\" / \"+desc2+\"): %.1f / %.1f msecs\\n\",\n+                            (int) den,\n+                            times[0] / den, times[1] / den);\n+                            \n+                }\n+                System.out.println();\n+            }\n+            if ((i % 17) == 0) {\n+                System.out.println(\"[GC]\");\n+                Thread.sleep(100L);\n+                System.gc();\n+                Thread.sleep(100L);\n+            }\n+        }\n+    }\n+\n+    protected long _testRead1(int reps) throws Exception {\n+        final long start = System.currentTimeMillis();\n+        testRead1(reps);\n+        return System.currentTimeMillis() - start;\n+    }\n+\n+    protected long _testRead2(int reps) throws Exception {\n+        final long start = System.currentTimeMillis();\n+        testRead2(reps);\n+        return System.currentTimeMillis() - start;\n+    }\n+    \n+    protected abstract void testRead1(int reps) throws Exception;\n+\n+    protected abstract void testRead2(int reps) throws Exception;\n+}", "timestamp": 1397847086, "metainfo": ""}