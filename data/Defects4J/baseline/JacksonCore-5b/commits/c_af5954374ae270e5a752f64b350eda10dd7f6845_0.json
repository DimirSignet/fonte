{"sha": "af5954374ae270e5a752f64b350eda10dd7f6845", "log": "remove unnecessary return value", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n \n         // One special case: if first char is 0, must not be followed by a digit\n         if (c == INT_0) {\n-            c = _verifyNoLeadingZeroes();\n+            _verifyNoLeadingZeroes();\n         }\n         \n         // Ok: we can first just add digit we saw first:\n      * Method called when we have seen one zero, and want to ensure\n      * it is not followed by another\n      */\n-    private final int _verifyNoLeadingZeroes() throws IOException\n+    private final void _verifyNoLeadingZeroes() throws IOException\n     {\n         // Ok to have plain \"0\"\n         if (_inputPtr >= _inputEnd && !loadMore()) {\n-            return INT_0;\n+            return;\n         }\n         int ch = _inputBuffer[_inputPtr] & 0xFF;\n         // if not followed by a number (probably '.'); return zero as is, to be included\n         if (ch < INT_0 || ch > INT_9) {\n-            return INT_0;\n+            return;\n         }\n         // [JACKSON-358]: we may want to allow them, after all...\n         if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\n             while (_inputPtr < _inputEnd || loadMore()) {\n                 ch = _inputBuffer[_inputPtr] & 0xFF;\n                 if (ch < INT_0 || ch > INT_9) { // followed by non-number; retain one zero\n-                    return INT_0;\n+                    return;\n                 }\n                 ++_inputPtr; // skip previous zeroes\n                 if (ch != INT_0) { // followed by other number; return \n                 }\n             }\n         }\n-        return ch;\n     }\n     \n     private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,", "timestamp": 1398999693, "metainfo": ""}