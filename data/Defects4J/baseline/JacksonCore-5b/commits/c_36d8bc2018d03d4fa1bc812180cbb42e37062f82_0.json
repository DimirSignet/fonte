{"sha": "36d8bc2018d03d4fa1bc812180cbb42e37062f82", "log": "Improved unit testing for root value generation", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestRootValues.java\n+package com.fasterxml.jackson.core.json;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class TestRootValues\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    private final JsonFactory JSON_F = new JsonFactory();\n+\n+    public void testSimpleNumbers() throws Exception\n+    {\n+        _testSimpleNumbers(false);\n+        _testSimpleNumbers(true);\n+    }\n+\n+    private void _testSimpleNumbers(boolean useStream) throws Exception\n+    {\n+        final String DOC = \"1 2\\t3\\r4\\n5\\r\\n6\\r\\n   7\";\n+        JsonParser jp = useStream ?\n+                createParserUsingStream(JSON_F, DOC, \"UTF-8\")\n+                : createParserUsingReader(JSON_F, DOC);\n+        for (int i = 1; i <= 7; ++i) {\n+            assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+            assertEquals(i, jp.getIntValue());\n+        }\n+        assertNull(jp.nextToken());\n+        jp.close();\n+    }\n+\n+    public void testSimpleBooleans() throws Exception\n+    {\n+        _testSimpleBooleans(false);\n+        _testSimpleBooleans(true);\n+    }\n+\n+    private void _testSimpleBooleans(boolean useStream) throws Exception\n+    {\n+        final String DOC = \"true false\\ttrue\\rfalse\\ntrue\\r\\nfalse\\r\\n   true\";\n+        JsonParser jp = useStream ?\n+                createParserUsingStream(JSON_F, DOC, \"UTF-8\")\n+                : createParserUsingReader(JSON_F, DOC);\n+        boolean exp = true;\n+        for (int i = 1; i <= 7; ++i) {\n+            assertToken(exp ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE, jp.nextToken());\n+            exp = !exp;\n+        }\n+        assertNull(jp.nextToken());\n+        jp.close();\n+    }\n+\n+    public void testSimpleWrites() throws Exception\n+    {\n+        _testSimpleWrites(false);\n+        _testSimpleWrites(true);\n+    }\n+\n+    public void _testSimpleWrites(boolean useStream) throws Exception\n+    {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen;\n+\n+        if (useStream) {\n+            gen = JSON_F.createGenerator(out, JsonEncoding.UTF8);\n+        } else {\n+            gen = JSON_F.createGenerator(w);\n+        }\n+        gen.writeNumber(123);\n+        gen.writeString(\"abc\");\n+        gen.writeBoolean(true);\n+        \n+        gen.close();\n+        out.close();\n+        w.close();\n+\n+        // and verify\n+        String json = useStream ? out.toString(\"UTF-8\") : w.toString();\n+        assertEquals(\"123 \\\"abc\\\" true\", json);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java\n \n import java.io.ByteArrayOutputStream;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.json.UTF8JsonGenerator;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.util.BufferRecycler;\n import com.fasterxml.jackson.test.BaseTest;\n         gen.writeString(str);\n         gen.flush();\n         gen.close();\n+        \n+        // Also verify it's parsable?\n+        JsonFactory f = new JsonFactory();\n+        JsonParser p = f.createParser(bytes.toByteArray());\n+        for (int i = 1; i <= length; ++i) {\n+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+            assertEquals(1, p.getIntValue());\n+        }\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(str, p.getText());\n+        assertNull(p.nextToken());\n+        p.close();\n     }\n }", "timestamp": 1380819207, "metainfo": ""}