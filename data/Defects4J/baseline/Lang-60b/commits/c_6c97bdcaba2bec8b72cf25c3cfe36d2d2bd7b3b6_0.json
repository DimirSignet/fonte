{"sha": "6c97bdcaba2bec8b72cf25c3cfe36d2d2bd7b3b6", "log": "Add new Enum class (similar to enum in C) plus associated Utils and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Abstract superclass for type-safe enums.\n+ * <p>\n+ * One feature of the C programming language lacking in Java is enumerations. The\n+ * C implementation based on ints was poor and open to abuse. The original Java\n+ * recommendation and most of the JDK also uses int constants. It has been recognised\n+ * however that a more robust type-safe class-based solution can be designed. This\n+ * class follows the basic Java type-safe enumeration pattern.\n+ * <p>\n+ * <em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing Enum objects\n+ * should always be done using the equals() method, not ==. The equals() method will\n+ * try == first so in most cases the effect is the same.\n+ * <p>\n+ * To use this class, it must be subclassed. For example:\n+ *\n+ * <pre>\n+ * public final class ColorEnum extends Enum {\n+ *   public static final ColorEnum RED = new ColorEnum(\"Red\");\n+ *   public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+ *   public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+ *\n+ *   private ColorEnum(String color) {\n+ *     super(color);\n+ *   }\n+ * \n+ *   public static ColorEnum getEnum(String color) {\n+ *     return (ColorEnum) getEnum(ColorEnum.class, color);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(ColorEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(ColorEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(ColorEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * As shown, each enum has a name. This can be accessed using <code>getName</code>.\n+ * <p>\n+ * The <code>getEnum</code> and <code>iterator</code> methods are recommended. \n+ * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n+ * An alternative choice is to use the {@link EnumUtils} class.\n+ * <p>\n+ * <em>NOTE:</em> This class originated in the Jakarta Avalon project.\n+ * </p>\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: Enum.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+public abstract class Enum implements Comparable, Serializable {\n+    /**\n+     * Map, key of class name, value of Entry.\n+     */\n+    private static final Map cEnumClasses = new HashMap();\n+    /**\n+     * The string representation of the Enum.\n+     */\n+    private final String iName;\n+\n+    /**\n+     * Enable the iterator to retain the source code order\n+     */\n+    private static class Entry {\n+        final Map map = new HashMap(50);\n+        final List list = new ArrayList(25);\n+\n+        private Entry() {\n+        }\n+    }\n+\n+    /**\n+     * Constructor to add a new named item to the enumeration.\n+     *\n+     * @param name  the name of the enum object\n+     * @throws IllegalArgumentException if the name is null or a blank string\n+     */\n+    protected Enum(String name) {\n+        super();\n+        if (name == null || name.length() == 0) {\n+            throw new IllegalArgumentException(\"The Enum name must not be empty\");\n+        }\n+        iName = name;\n+        Entry entry = (Entry) cEnumClasses.get(getClass().getName());\n+        if (entry == null) {\n+            entry = new Entry();\n+            cEnumClasses.put(getClass().getName(), entry);\n+        }\n+        entry.map.put(name, this);\n+        entry.list.add(this);\n+    }\n+\n+    /**\n+     * Handle the deserialization of the class to ensure that multiple\n+     * copies are not wastefully created, or illegal enum types created.\n+     */\n+    protected Object readResolve() {\n+        return Enum.getEnum(getClass(), getName());\n+    }\n+\n+    /**\n+     * Gets an Enum object by class and name.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @param name  the name of the Enum to get, may be null\n+     * @return the enum object, or null if the enum does not exist\n+     * @throws IllegalArgumentException if the enum class is null\n+     */\n+    protected static Enum getEnum(Class enumClass, String name) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        if (entry == null) {\n+            return null;\n+        }\n+        return (Enum) entry.map.get(name);\n+    }\n+\n+    /**\n+     * Gets the Map of Enum objects by name using the Enum class.\n+     * If the requested class has no enum objects an empty Map is returned.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    protected static Map getEnumMap(Class enumClass) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        if (Enum.class.isAssignableFrom(enumClass) == false) {\n+            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n+        }\n+        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        if (entry == null) {\n+            return Collections.EMPTY_MAP;\n+        }\n+        return Collections.unmodifiableMap(entry.map);\n+    }\n+\n+    /**\n+     * Gets the List of Enum objects using the Enum class.\n+     * The list is in the order that the objects were created (source code order).\n+     * If the requested class has no enum objects an empty List is returned.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    protected static List getEnumList(Class enumClass) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        if (Enum.class.isAssignableFrom(enumClass) == false) {\n+            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n+        }\n+        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        if (entry == null) {\n+            return Collections.EMPTY_LIST;\n+        }\n+        return Collections.unmodifiableList(entry.list);\n+    }\n+\n+    /**\n+     * Gets an iterator over the Enum objects in an Enum class.\n+     * The iterator is in the order that the objects were created (source code order).\n+     * If the requested class has no enum objects an empty Iterator is returned.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return an iterator of the Enum objects\n+     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    protected static Iterator iterator(Class enumClass) {\n+        return Enum.getEnumList(enumClass).iterator();\n+    }\n+\n+    /**\n+     * Retrieve the name of this Enum item, set in the constructor.\n+     * \n+     * @return the <code>String</code> name of this Enum item\n+     */\n+    public final String getName() {\n+        return iName;\n+    }\n+\n+    /**\n+     * Tests for equality. Two Enum objects are considered equal\n+     * if they have the same class names and the same names.\n+     * Identity is tested for first, so this method usually runs fast.\n+     *\n+     * @param other  the other object to compare for equality\n+     */\n+    public final boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        } else if (other == null) {\n+            return false;\n+        } else if (other.getClass() == this.getClass()) {\n+            // shouldn't happen, but...\n+            return iName.equals(((Enum) other).iName);\n+        } else if (other.getClass().getName().equals(this.getClass().getName())) {\n+            // different classloaders\n+            try {\n+                // try to avoid reflection\n+                return iName.equals(((Enum) other).iName);\n+\n+            } catch (ClassCastException ex) {\n+                // use reflection\n+                try {\n+                    Method mth = other.getClass().getMethod(\"getName\", null);\n+                    String name = (String) mth.invoke(other, null);\n+                    return iName.equals(name);\n+                } catch (NoSuchMethodException ex2) {\n+                    // ignore - should never happen\n+                } catch (IllegalAccessException ex2) {\n+                    // ignore - should never happen\n+                } catch (InvocationTargetException ex2) {\n+                    // ignore - should never happen\n+                }\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Returns a suitable hashCode for the enumeration.\n+     *\n+     * @return a hashcode based on the name\n+     */\n+    public final int hashCode() {\n+        return 7 + iName.hashCode();\n+    }\n+\n+    /**\n+     * Tests for order. The default ordering is alphabetic by name, but this\n+     * can be overridden by subclasses.\n+     * \n+     * @see java.lang.Comparable#compareTo(Object)\n+     * @param other  the other object to compare to\n+     * @return -ve if this is less than the other object, +ve if greater than, 0 of equal\n+     * @throws ClassCastException if other is not an Enum\n+     * @throws NullPointerException if other is null\n+     */\n+    public int compareTo(Object other) {\n+        return iName.compareTo(((Enum) other).iName);\n+    }\n+\n+    /**\n+     * Human readable description of this Enum item. For use when debugging.\n+     * \n+     * @return String in the form <code>type[name]</code>, for example:\n+     * <code>Color[Red]</code>. Note that the package name is stripped from\n+     * the type name.\n+     */\n+    public String toString() {\n+        String shortName = getClass().getName();\n+        int pos = shortName.lastIndexOf('.');\n+        if (pos != -1) {\n+            shortName = shortName.substring(pos + 1);\n+        }\n+        return shortName + \"[\" + getName() + \"]\";\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.io.Serializable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Utility class for accessing and manipulating Enums.\n+ *\n+ * @see Enum\n+ * @see ExtensibleEnum\n+ * @see ValuedEnum\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EnumUtils.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+public abstract class EnumUtils implements Comparable, Serializable {\n+\n+    /**\n+     * Restricted constructor\n+     */\n+    private EnumUtils() {\n+    }\n+\n+    /**\n+     * Gets an Enum object by class and name.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @param name  the name of the Enum to get, may be null\n+     * @return the enum object\n+     * @throws IllegalArgumentException if the enum class is null\n+     */\n+    public static Enum getEnum(Class enumClass, String name) {\n+        return Enum.getEnum(enumClass, name);\n+    }\n+\n+    /**\n+     * Gets a ValuedEnum object by class and value.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @param value  the value of the Enum to get\n+     * @return the enum object, or null if the enum does not exist\n+     * @throws IllegalArgumentException if the enum class is null\n+     */\n+    public static ValuedEnum getEnum(Class enumClass, int value) {\n+        return (ValuedEnum) ValuedEnum.getEnum(enumClass, value);\n+    }\n+\n+    /**\n+     * Gets the Map of Enum objects by name using the Enum class.\n+     * If the requested class has no enum objects an empty Map is returned.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    public static Map getEnumMap(Class enumClass) {\n+        return Enum.getEnumMap(enumClass);\n+    }\n+\n+    /**\n+     * Gets the List of Enum objects using the Enum class.\n+     * The list is in the order that the objects were created (source code order).\n+     * If the requested class has no enum objects an empty List is returned.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    public static List getEnumList(Class enumClass) {\n+        return Enum.getEnumList(enumClass);\n+    }\n+\n+    /**\n+     * Gets an iterator over the Enum objects in an Enum class.\n+     * The iterator is in the order that the objects were created (source code order).\n+     * If the requested class has no enum objects an empty Iterator is returned.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return an iterator of the Enum objects\n+     * @throws IllegalArgumentException if the enum class is null\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    public static Iterator iterator(Class enumClass) {\n+        return Enum.getEnumList(enumClass).iterator();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+/**\n+ * Abstract superclass for type-safe enums with integer values.\n+ * <p>\n+ * <em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing Enum objects\n+ * should always be done using the equals() method, not ==. The equals() method will\n+ * try == first so in most cases the effect is the same.\n+ * <p>\n+ * To use this class, it must be subclassed. For example:\n+ *\n+ * <pre>\n+ * public final class JavaVersion extends ValuedEnum {\n+ *   //standard enums for version of JVM\n+ *   public static final int  JAVA1_0_VALUE  = 100;\n+ *   public static final int  JAVA1_1_VALUE  = 110;\n+ *   public static final int  JAVA1_2_VALUE  = 120;\n+ *   public static final int  JAVA1_3_VALUE  = 130;\n+ *   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( \"Java 1.0\", JAVA1_0_VALUE );\n+ *   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( \"Java 1.1\", JAVA1_1_VALUE );\n+ *   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( \"Java 1.2\", JAVA1_2_VALUE );\n+ *   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( \"Java 1.3\", JAVA1_3_VALUE );\n+ *\n+ *   private JavaVersionEnum(String name, int value) {\n+ *     super( name, value );\n+ *   }\n+ * \n+ *   public static JavaVersionEnum getEnum(String javaVersion) {\n+ *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n+ *   }\n+ * \n+ *   public static JavaVersionEnum getEnum(int javaVersion) {\n+ *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(JavaVersionEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(JavaVersionEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(JavaVersionEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * The above class could then be used as follows:\n+ * <pre>\n+ * public void doSomething(JavaVersion ver) {\n+ *   switch (ver.getValue()) {\n+ *     case JAVA1_0_VALUE:\n+ *       // ...\n+ *       break;\n+ *     case JAVA1_1_VALUE:\n+ *       // ...\n+ *       break;\n+ *     //...\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * As shown, each enum has a name and a value. These can be accessed using \n+ * <code>getName</code> and <code>getValue</code>.\n+ * <p>\n+ * The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n+ * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n+ * An alternative choice is to use the {@link EnumUtils} class.\n+ * <p>\n+ * <em>NOTE:</em> This class originated in the Jakarta Avalon project.\n+ * </p>\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValuedEnum.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+public abstract class ValuedEnum extends Enum {\n+    /**\n+     * The value contained in enum.\n+     */\n+    private final int iValue;\n+\n+    /**\n+     * Constructor for enum item.\n+     *\n+     * @param name the name of enum item.\n+     * @param value the value of enum item.\n+     */\n+    protected ValuedEnum(String name, int value) {\n+        super(name);\n+        iValue = value;\n+    }\n+\n+    /**\n+     * Gets an Enum object by class and value.\n+     * This method loops through the list of Enums, thus if there\n+     * are many Enums this will be slow.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @param value  the value of the Enum to get\n+     * @return the enum object, or null if the enum does not exist\n+     * @throws IllegalArgumentException if the enum class is null\n+     */\n+    protected static Enum getEnum(Class enumClass, int value) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        List list = Enum.getEnumList(enumClass);\n+        for (Iterator it = list.iterator(); it.hasNext();) {\n+            ValuedEnum enum = (ValuedEnum) it.next();\n+            if (enum.getValue() == value) {\n+                return enum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get value of enum item.\n+     *\n+     * @return the enum item's value.\n+     */\n+    public final int getValue() {\n+        return iValue;\n+    }\n+\n+    /**\n+     * Tests for order. The default ordering is numeric by value, but this\n+     * can be overridden by subclasses.\n+     * \n+     * @see java.lang.Comparable#compareTo(Object)\n+     * @param other  the other object to compare to\n+     * @return -ve if this is less than the other object, +ve if greater than, 0 of equal\n+     * @throws ClassCastException if other is not an Enum\n+     * @throws NullPointerException if other is null\n+     */\n+    public int compareTo(Object other) {\n+        return iValue - ((ValuedEnum) other).iValue;\n+    }\n+\n+    /**\n+     * Human readable description of this Enum item. For use when debugging.\n+     * \n+     * @return String in the form <code>type[name=value]</code>, for example:\n+     * <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n+     * stripped from the type name.\n+     */\n+    public String toString() {\n+        String shortName = getClass().getName();\n+        int pos = shortName.lastIndexOf('.');\n+        if (pos != -1) {\n+            shortName = shortName.substring(pos + 1);\n+        }\n+        return shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/ColorEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ColorEnum.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+\n+public final class ColorEnum extends Enum {\n+    public static final ColorEnum RED = new ColorEnum(\"Red\");\n+    public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+    public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+\n+    private ColorEnum(String color) {\n+        super(color);\n+    }\n+\n+    public static ColorEnum getEnum(String color) {\n+        return (ColorEnum) getEnum(ColorEnum.class, color);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(ColorEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(ColorEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(ColorEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.lang.SerializationUtils;\n+/**\n+ * Test cases for the {@link Enum} class.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EnumTest.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+\n+public final class EnumTest extends TestCase {\n+\n+    public EnumTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EnumTest.class);\n+        suite.setName(\"Enum Tests\");\n+        return suite;\n+    }\n+\n+    public void testName() {\n+        assertEquals(\"Red\", ColorEnum.RED.getName());\n+        assertEquals(\"Green\", ColorEnum.GREEN.getName());\n+        assertEquals(\"Blue\", ColorEnum.BLUE.getName());\n+    }\n+\n+    public void testCompareTo() {\n+        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);\n+        assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);\n+        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);\n+    }\n+\n+    public void testEquals() {\n+        assertSame(ColorEnum.RED, ColorEnum.RED);\n+        assertSame(ColorEnum.getEnum(\"Red\"), ColorEnum.RED);\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"ColorEnum[Red]\", ColorEnum.RED.toString());\n+    }\n+\n+    public void testIterator() {\n+        Iterator it = ColorEnum.iterator();\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testList() {\n+        List list = ColorEnum.getEnumList();\n+        Iterator it = list.iterator();\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testMap() {\n+        Map map = ColorEnum.getEnumMap();\n+        assertTrue(map.containsValue(ColorEnum.RED));\n+        assertTrue(map.containsValue(ColorEnum.GREEN));\n+        assertTrue(map.containsValue(ColorEnum.BLUE));\n+        assertSame(ColorEnum.RED, map.get(\"Red\"));\n+        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n+        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n+    }\n+\n+    public void testGet() {\n+        assertSame(ColorEnum.RED, ColorEnum.getEnum(\"Red\"));\n+        assertSame(ColorEnum.GREEN, ColorEnum.getEnum(\"Green\"));\n+        assertSame(ColorEnum.BLUE, ColorEnum.getEnum(\"Blue\"));\n+        assertSame(null, ColorEnum.getEnum(\"Pink\"));\n+    }\n+\n+    public void testSerialization() {\n+        assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));\n+        assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));\n+        assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/EnumTestSuite.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Test suite for the Enum package.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EnumTestSuite.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+public class EnumTestSuite extends TestCase {\n+    \n+    /**\n+     * Construct a new instance.\n+     */\n+    public EnumTestSuite(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Command-line interface.\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Get the suite of tests\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.setName(\"Commons-Lang-Enum Tests\");\n+        suite.addTest(EnumTest.suite());\n+        suite.addTest(EnumUtilsTest.suite());\n+        suite.addTest(ValuedEnumTest.suite());\n+        return suite;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.lang.SerializationUtils;\n+/**\n+ * Test cases for the {@link Enum} class.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EnumUtilsTest.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+\n+public final class EnumUtilsTest extends TestCase {\n+\n+    public EnumUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EnumUtilsTest.class);\n+        suite.setName(\"EnumUtils Tests\");\n+        return suite;\n+    }\n+\n+    public void testIterator() {\n+        Iterator it = EnumUtils.iterator(ColorEnum.class);\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testIteratorEx() {\n+        try {\n+            EnumUtils.iterator(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testList() {\n+        List list = EnumUtils.getEnumList(ColorEnum.class);\n+        Iterator it = list.iterator();\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testListEx() {\n+        try {\n+            EnumUtils.getEnumList(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testMap() {\n+        Map map = EnumUtils.getEnumMap(ColorEnum.class);\n+        assertTrue(map.containsValue(ColorEnum.RED));\n+        assertTrue(map.containsValue(ColorEnum.GREEN));\n+        assertTrue(map.containsValue(ColorEnum.BLUE));\n+        assertSame(ColorEnum.RED, map.get(\"Red\"));\n+        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n+        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n+    }\n+\n+    public void testMapEx() {\n+        try {\n+            EnumUtils.getEnumMap(null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testGet() {\n+        assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, \"Red\"));\n+        assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, \"Green\"));\n+        assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, \"Blue\"));\n+        assertSame(null, EnumUtils.getEnum(ColorEnum.class, \"Pink\"));\n+    }\n+\n+    public void testGetEx() {\n+        try {\n+            EnumUtils.getEnum(null, \"\");\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testGetValue() {\n+        assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));\n+        assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));\n+        assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));\n+        assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));\n+    }\n+\n+    public void testGetValueEx() {\n+        try {\n+            EnumUtils.getEnum(null, 0);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/ValuedColorEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValuedColorEnum.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+\n+public final class ValuedColorEnum extends ValuedEnum {\n+    public static final ValuedColorEnum RED = new ValuedColorEnum(\"Red\", 1);\n+    public static final ValuedColorEnum GREEN = new ValuedColorEnum(\"Green\", 2);\n+    public static final ValuedColorEnum BLUE = new ValuedColorEnum(\"Blue\", 3);\n+\n+    private ValuedColorEnum(String color, int value) {\n+        super(color, value);\n+    }\n+\n+    public static ValuedColorEnum getEnum(String color) {\n+        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, color);\n+    }\n+\n+    public static ValuedColorEnum getEnum(int value) {\n+        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, value);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(ValuedColorEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(ValuedColorEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(ValuedColorEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/ValuedEnumTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.lang.SerializationUtils;\n+/**\n+ * Test cases for the {@link Enum} class.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValuedEnumTest.java,v 1.1 2002/08/11 23:17:54 scolebourne Exp $\n+ */\n+\n+public final class ValuedEnumTest extends TestCase {\n+\n+    public ValuedEnumTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ValuedEnumTest.class);\n+        suite.setName(\"ValuedEnum Tests\");\n+        return suite;\n+    }\n+\n+    public void testName() {\n+        assertEquals(\"Red\", ValuedColorEnum.RED.getName());\n+        assertEquals(\"Green\", ValuedColorEnum.GREEN.getName());\n+        assertEquals(\"Blue\", ValuedColorEnum.BLUE.getName());\n+    }\n+\n+    public void testValue() {\n+        assertEquals(1, ValuedColorEnum.RED.getValue());\n+        assertEquals(2, ValuedColorEnum.GREEN.getValue());\n+        assertEquals(3, ValuedColorEnum.BLUE.getValue());\n+    }\n+\n+    public void testCompareTo() {\n+        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);\n+        assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);\n+        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);\n+    }\n+\n+    public void testEquals() {\n+        assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);\n+        assertSame(ValuedColorEnum.getEnum(\"Red\"), ValuedColorEnum.RED);\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"ValuedColorEnum[Red=1]\", ValuedColorEnum.RED.toString());\n+    }\n+\n+    public void testIterator() {\n+        Iterator it = ValuedColorEnum.iterator();\n+        assertSame(ValuedColorEnum.RED, it.next());\n+        assertSame(ValuedColorEnum.GREEN, it.next());\n+        assertSame(ValuedColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testList() {\n+        List list = ValuedColorEnum.getEnumList();\n+        Iterator it = list.iterator();\n+        assertSame(ValuedColorEnum.RED, it.next());\n+        assertSame(ValuedColorEnum.GREEN, it.next());\n+        assertSame(ValuedColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testMap() {\n+        Map map = ValuedColorEnum.getEnumMap();\n+        assertTrue(map.containsValue(ValuedColorEnum.RED));\n+        assertTrue(map.containsValue(ValuedColorEnum.GREEN));\n+        assertTrue(map.containsValue(ValuedColorEnum.BLUE));\n+        assertSame(ValuedColorEnum.RED, map.get(\"Red\"));\n+        assertSame(ValuedColorEnum.GREEN, map.get(\"Green\"));\n+        assertSame(ValuedColorEnum.BLUE, map.get(\"Blue\"));\n+    }\n+\n+    public void testGet() {\n+        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(\"Red\"));\n+        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(\"Green\"));\n+        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(\"Blue\"));\n+        assertSame(null, ValuedColorEnum.getEnum(\"Pink\"));\n+    }\n+\n+    public void testGetValue() {\n+        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));\n+        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));\n+        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));\n+        assertSame(null, ValuedColorEnum.getEnum(4));\n+    }\n+\n+    public void testSerialization() {\n+        assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));\n+        assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));\n+        assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));\n+    }\n+\n+}", "timestamp": 1029107874, "metainfo": ""}