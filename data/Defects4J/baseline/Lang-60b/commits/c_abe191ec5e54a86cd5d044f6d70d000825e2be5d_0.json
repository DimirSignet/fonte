{"sha": "abe191ec5e54a86cd5d044f6d70d000825e2be5d", "log": "added tests for new splitPreserveAllTokens methods (http://issues.apache.org/bugzilla/show_bug.cgi?id=22692)   ", "commit": "\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Phil Steitz\n  * @author Gary D. Gregory\n  * @author Al Chou\n- * @version $Id: StringUtilsTest.java,v 1.59 2004/03/10 23:54:48 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.60 2004/07/11 16:49:07 stevencaswell Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(msg, str.substring(2), res[1]);\n     }\n \n+    public void testSplitPreserveAllTokens_String() {\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n+        \n+        String str = \"a b .c\";\n+        String[] res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\".c\", res[2]);\n+        \n+        str = \" a b .c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\".c\", res[3]);\n+        \n+        str = \"a  b  .c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(5, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        assertEquals(\".c\", res[4]);\n+        \n+        str = \" a  \";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\"\", res[3]);\n+\n+        str = \" a  b\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\"b\", res[3]);\n+\n+        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(WHITESPACE.length() + 1, res.length);\n+        assertEquals(\"a\", res[0]);\n+        for(int i = 1; i < WHITESPACE.length()-1; i++)\n+        {\n+          assertEquals(\"\", res[i]);\n+        }\n+        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n+    }\n+    \n+    public void testSplitPreserveAllTokens_StringChar() {\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n+\n+        String str = \"a.b. c\";\n+        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\" c\", res[2]);\n+            \n+        str = \"a.b.. c\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(4, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\" c\", res[3]);\n+\n+        str = \".a.\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+       \n+        str = \".a..\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        \n+        str = \"..a.\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"a\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        \n+        str = \"..a\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"a\", res[2]);\n+        \n+        str = \"a b c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"c\", res[2]);\n+\n+        str = \"a  b  c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(5, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        assertEquals(\"c\", res[4]);\n+        \n+        str = \" a b c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\"c\", res[3]);\n+\n+        str = \"  a b c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(5, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"a\", res[2]);\n+        assertEquals(\"b\", res[3]);\n+        assertEquals(\"c\", res[4]);\n+\n+    }\n+    \n+    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n+        \n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n+        \n+        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n+        innerTestSplitPreserveAllTokens('.', \".\", ',');\n+        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n+        for (int i = 0; i < WHITESPACE.length(); i++) {\n+            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n+                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n+                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n+            }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"  de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n+          System.out.println(\"\");\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"::de:fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] expectedResults = {\"ab\", \"cd:ef\"};\n+          String[] results = null;\n+          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \":cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+    }\n+    \n+    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n+        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n+            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n+        \n+        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n+        String[] res;\n+        // (str, sepStr)\n+        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n+        assertEquals(msg, 4, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+        assertEquals(msg, noMatch + \"c\", res[3]);\n+        \n+        final String str2 = separator + \"a\" + separator;\n+        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"\", res[0]);\n+        assertEquals(msg, \"a\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+\n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n+        assertEquals(msg, 4, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+        assertEquals(msg, noMatch + \"c\", res[3]);\n+        \n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n+        assertEquals(msg, 4, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+        assertEquals(msg, noMatch + \"c\", res[3]);\n+        \n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n+        assertEquals(msg, 1, res.length);\n+        assertEquals(msg, str, res[0]);\n+        \n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n+        assertEquals(msg, 2, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, str.substring(2), res[1]);\n+    }\n+    \n     public void testDeleteSpace_String() {\n         assertEquals(null, StringUtils.deleteSpaces(null));\n         assertEquals(\"\", StringUtils.deleteSpaces(\"\"));", "timestamp": 1089564547, "metainfo": ""}