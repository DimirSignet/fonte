{"sha": "ec96b03181b6faf2f1fd14664e3ed2842b74d37f", "log": "Added the split variant from #24910 in which the separator may be a full String rather than a String of characters. Rather than the issues suggested boolean parameter, the name has been changed to splitByWholeSeparator   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Al Chou\n  * @author Michael Davey\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.133 2004/08/15 23:47:05 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.134 2004/08/22 03:40:27 bayard Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     public static String[] split(String str, String separatorChars, int max) {\n         return splitWorker(str, separatorChars, max, false);\n     }\n+\n+    /**\n+     * <p>Splits the provided text into an array, separator string specified.</p>\n+     *\n+     * <p>The separator(s) will not be included in the returned String array.\n+     * Adjacent separators are treated as one separator.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> separator splits on whitespace.</p>\n+     *\n+     * <pre>\n+     * StringUtils.split(null, *)            = null\n+     * StringUtils.split(\"\", *)              = []\n+     * StringUtils.split(\"ab de fg\", null)   = [\"ab\", \"de\", \"fg\"]\n+     * StringUtils.split(\"ab   de fg\", null) = [\"ab\", \"de\", \"fg\"]\n+     * StringUtils.split(\"ab:cd:ef\", \":\")    = [\"ab\", \"cd\", \"ef\"]\n+     * StringUtils.split(\"abstemiouslyaeiouyabstemiously\", \"aeiouy\")  = [\"bst\", \"m\", \"sl\", \"bst\", \"m\", \"sl\"]\n+     * StringUtils.split(\"abstemiouslyaeiouyabstemiously\", \"aeiouy\")  = [\"abstemiously\", \"abstemiously\"]\n+     * </pre>\n+     *\n+     * @param str  the String to parse, may be null\n+     * @param separator  String containing the String to be used as a delimiter,\n+     *  <code>null</code> splits on whitespace\n+     * @return an array of parsed Strings, <code>null</code> if null String was input\n+     */\n+    public static String[] splitByWholeSeparator(String str, String separator) {\n+        return splitByWholeSeparator( str, separator, -1 ) ;\n+    }\n+\n+    /**\n+     * <p>Splits the provided text into an array, separator string specified.\n+     * Returns a maximum of <code>max</code> substrings.</p>\n+     *\n+     * <p>The separator(s) will not be included in the returned String array.\n+     * Adjacent separators are treated as one separator.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> separator splits on whitespace.</p>\n+     *\n+     * <pre>\n+     * StringUtils.splitByWholeSeparator(null, *, *)               = null\n+     * StringUtils.splitByWholeSeparator(\"\", *, *)                 = []\n+     * StringUtils.splitByWholeSeparator(\"ab de fg\", null, 0)      = [\"ab\", \"de\", \"fg\"]\n+     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null, 0)    = [\"ab\", \"de\", \"fg\"]\n+     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\", 2)       = [\"ab\", \"cd\"]\n+     * StringUtils.splitByWholeSeparator(\"abstemiouslyaeiouyabstemiously\", \"aeiouy\", 2) = [\"bst\", \"m\"]\n+     * StringUtils.splitByWholeSeparator(\"abstemiouslyaeiouyabstemiously\", \"aeiouy\", 2)  = [\"abstemiously\", \"abstemiously\"]\n+     * </pre>\n+     *\n+     * @param str  the String to parse, may be null\n+     * @param separator  String containing the String to be used as a delimiter,\n+     *  <code>null</code> splits on whitespace\n+     * @param max  the maximum number of elements to include in the returned\n+     *  array. A zero or negative value implies no limit.\n+     * @return an array of parsed Strings, <code>null</code> if null String was input\n+     */\n+    public static String[] splitByWholeSeparator( String str, String separator, int max ) {\n+        if (str == null) {\n+            return null;\n+        }\n+\n+        int len = str.length() ;\n+\n+        if (len == 0) {\n+            return ArrayUtils.EMPTY_STRING_ARRAY;\n+        }\n+\n+        if ( ( separator == null ) || ( \"\".equals( separator ) ) ) {\n+            // Split on whitespace.\n+            return split( str, null, max ) ;\n+        }\n+\n+\n+        int separatorLength = separator.length() ;\n+\n+        ArrayList substrings = new ArrayList() ;\n+        int numberOfSubstrings = 0 ;\n+        int beg = 0 ;\n+        int end = 0 ;\n+        while ( end < len ) {\n+            end = str.indexOf( separator, beg ) ;\n+\n+            if ( end > -1 ) {\n+                if ( end > beg ) {\n+                    numberOfSubstrings += 1 ;\n+\n+                    if ( numberOfSubstrings == max ) {\n+                        end = len ;\n+                        substrings.add( str.substring( beg ) ) ;\n+                    } else {\n+                        // The following is OK, because String.substring( beg, end ) excludes\n+                        // the character at the position 'end'.\n+                        substrings.add( str.substring( beg, end ) ) ;\n+\n+                        // Set the starting point for the next search.\n+                        // The following is equivalent to beg = end + (separatorLength - 1) + 1,\n+                        // which is the right calculation:\n+                        beg = end + separatorLength ;\n+                    }\n+                } else {\n+                    // We found a consecutive occurrence of the separator, so skip it.\n+                    beg = end + separatorLength ;\n+                }\n+            } else {\n+                // String.substring( beg ) goes from 'beg' to the end of the String.\n+                substrings.add( str.substring( beg ) ) ;\n+                end = len ;\n+            }\n+        }\n+\n+        return (String[]) substrings.toArray( new String[substrings.size()] ) ;\n+    }\n+\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Phil Steitz\n  * @author Gary D. Gregory\n  * @author Al Chou\n- * @version $Id: StringUtilsTest.java,v 1.61 2004/08/15 23:47:05 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.62 2004/08/22 03:40:27 bayard Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(msg, str.substring(2), res[1]);\n     }\n \n+    public void testSplitByWholeString_StringStringBoolean() {\n+        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n+\n+        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n+\n+        String stringToSplitOnNulls = \"ab   de fg\" ;\n+        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n+\n+        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( \"ab   de fg\", null ) ;\n+        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n+        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n+            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n+        }\n+\n+        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n+\n+        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n+        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n+        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n+        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n+            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n+        }\n+    }\n+\n+    public void testSplitByWholeString_StringStringBooleanInt() {\n+        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n+\n+        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n+\n+        String stringToSplitOnNulls = \"ab   de fg\" ;\n+        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n+        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n+\n+        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n+        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n+        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n+            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n+        }\n+\n+        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n+\n+        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n+        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n+        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n+        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n+        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n+            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n+        }\n+    }\n+\n+    \n     public void testSplitPreserveAllTokens_String() {\n         assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n         assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);", "timestamp": 1093146027, "metainfo": ""}