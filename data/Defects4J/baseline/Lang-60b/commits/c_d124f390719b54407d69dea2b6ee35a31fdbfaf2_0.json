{"sha": "d124f390719b54407d69dea2b6ee35a31fdbfaf2", "log": "Javadoc changes, with better description of trace methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import java.util.StringTokenizer;\n \n import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.NullArgumentException;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.SystemUtils;\n-import org.apache.commons.lang.NullArgumentException;\n \n /**\n  * <p>Provides utilities for manipulating and examining \n-<code>Throwable</code> objects.</p>\n+ * <code>Throwable</code> objects.</p>\n  *\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Dmitri Plotnikov\n     };\n \n     /**\n-     * <p>\n-     * The Method object for Java 1.4 getCause.\n-     * </p>\n+     * <p>The Method object for Java 1.4 getCause.</p>\n      */\n     private static final Method THROWABLE_CAUSE_METHOD;\n \n     /**\n-     * <p>\n-     * The Method object for Java 1.4 initCause.\n-     * </p>\n+     * <p>The Method object for Java 1.4 initCause.</p>\n      */\n     private static final Method THROWABLE_INITCAUSE_METHOD;\n     \n     }\n \n     /**\n-     * <p>\n-     * Sets the cause of a <code>Throwable</code> using introspection, allowing source code compatibility between\n-     * pre-1.4 and post-1.4 Java releases.\n-     * </p>\n-     * \n-     * <p>\n-     * The typical use of this method is inside a constructor as in the following example:\n-     * </p>\n-     * \n-     * <p>\n+     * <p>Sets the cause of a <code>Throwable</code> using introspection, allowing\n+     * source code compatibility between pre-1.4 and post-1.4 Java releases.</p>\n+     *\n+     * <p>The typical use of this method is inside a constructor as in\n+     * the following example:</p>\n+     *\n      * <pre>\n      * import org.apache.commons.lang.exception.ExceptionUtils;\n      *  \n      *    public MyException(String msg) {\n      *       super(msg);\n      *    }\n-     *   \n+     *\n      *    public MyException(String msg, Throwable cause) {\n      *       super(msg);\n      *       ExceptionUtils.setCause(this, cause);\n      *    }\n-     * \n-     * }           \n+     * }\n      * </pre>\n-     * </p>\n-     * \n-     * @param target\n-     *            the target <code>Throwable</code>\n-     * @param cause\n-     *            the <code>Throwable</code> to set in the target\n+     *\n+     * @param target  the target <code>Throwable</code>\n+     * @param cause  the <code>Throwable</code> to set in the target\n      * @return a <code>true</code> if the target has been modified\n      * @since 2.2\n      */\n \n     /**\n      * Returns {@link #CAUSE_METHOD_NAMES} as a List.\n+     *\n      * @return {@link #CAUSE_METHOD_NAMES} as a List.\n      */\n     private static ArrayList getCauseMethodNameList() {\n \n     /**\n      * <p>Introspects the <code>Throwable</code> to obtain the cause.</p>\n-     * \n+     *\n      * <p>The method searches for methods with specific names that return a \n      * <code>Throwable</code> object. This will pick up most wrapping exceptions,\n      * including those from JDK 1.4, and\n      * \n      * <p>In the absence of any such method, the object is inspected for a\n      * <code>detail</code> field assignable to a <code>Throwable</code>.</p>\n-     * \n+     *\n      * <p>If none of the above is found, returns <code>null</code>.</p>\n      *\n      * @param throwable  the throwable to introspect for a cause, may be null\n \n     /**\n      * <p>Introspects the <code>Throwable</code> to obtain the cause.</p>\n-     * \n+     *\n      * <ol>\n      * <li>Try known exception types.</li>\n      * <li>Try the supplied array of method names.</li>\n      * <li>Try the field 'detail'.</li>\n      * </ol>\n-     * \n+     *\n      * <p>A <code>null</code> set of method names means use the default set.\n      * A <code>null</code> in the set of method names will be ignored.</p>\n      *\n \n     /**\n      * <p>Introspects the <code>Throwable</code> to obtain the root cause.</p>\n-     * \n+     *\n      * <p>This method walks through the exception chain to the last element,\n      * \"root\" of the tree, using {@link #getCause(Throwable)}, and\n      * returns that exception.</p>\n \n     /**\n      * <p>Finds a <code>Throwable</code> by method name.</p>\n-     * \n+     *\n      * @param throwable  the exception to examine\n      * @param methodName  the name of the method to find and invoke\n      * @return the wrapped exception, or <code>null</code> if not found\n \n     /**\n      * <p>Finds a <code>Throwable</code> by field name.</p>\n-     * \n+     *\n      * @param throwable  the exception to examine\n      * @param fieldName  the name of the attribute to examine\n      * @return the wrapped exception, or <code>null</code> if not found\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Checks if the Throwable class has a <code>getCause</code> method.</p>\n-     * \n+     *\n      * <p>This is true for JDK 1.4 and above.</p>\n-     * \n+     *\n      * @return true if Throwable is nestable\n      * @since 2.0\n      */\n     \n     /**\n      * <p>Checks whether this <code>Throwable</code> class can store a cause.</p>\n-     * \n+     *\n      * <p>This method does <b>not</b> check whether it actually does store a cause.<p>\n      *\n      * @param throwable  the <code>Throwable</code> to examine, may be null\n     /**\n      * <p>Counts the number of <code>Throwable</code> objects in the\n      * exception chain.</p>\n-     * \n+     *\n      * <p>A throwable without cause will return <code>1</code>.\n      * A throwable with one cause will return <code>2</code> and so on.\n      * A <code>null</code> throwable will return <code>0</code>.</p>\n-     * \n+     *\n      * @param throwable  the throwable to inspect, may be null\n      * @return the count of throwables, zero if null input\n      */\n     /**\n      * <p>Returns the list of <code>Throwable</code> objects in the\n      * exception chain.</p>\n-     * \n+     *\n      * <p>A throwable without cause will return an array containing\n      * one element - the input throwable.\n      * A throwable with one cause will return an array containing\n      * that matches the specified class (exactly) in the exception chain.\n      * Subclasses of the specified class do not match - see\n      * {@link #indexOfType(Throwable, Class)} for the opposite.</p>\n-     * \n+     *\n      * <p>A <code>null</code> throwable returns <code>-1</code>.\n      * A <code>null</code> type returns <code>-1</code>.\n      * No match in the chain returns <code>-1</code>.</p>\n      * a specified index.\n      * Subclasses of the specified class do not match - see\n      * {@link #indexOfType(Throwable, Class, int)} for the opposite.</p>\n-     * \n+     *\n      * <p>A <code>null</code> throwable returns <code>-1</code>.\n      * A <code>null</code> type returns <code>-1</code>.\n      * No match in the chain returns <code>-1</code>.\n      * that matches the specified class or subclass in the exception chain.\n      * Subclasses of the specified class do match - see\n      * {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>\n-     * \n+     *\n      * <p>A <code>null</code> throwable returns <code>-1</code>.\n      * A <code>null</code> type returns <code>-1</code>.\n      * No match in the chain returns <code>-1</code>.</p>\n      * a specified index.\n      * Subclasses of the specified class do match - see\n      * {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>\n-     * \n+     *\n      * <p>A <code>null</code> throwable returns <code>-1</code>.\n      * A <code>null</code> type returns <code>-1</code>.\n      * No match in the chain returns <code>-1</code>.\n \n     /**\n      * <p>Worker method for the <code>indexOfType</code> methods.</p>\n-     * \n+     *\n      * @param throwable  the throwable to inspect, may be null\n      * @param type  the type to search for, subclasses match, null returns -1\n      * @param fromIndex  the (zero based) index of the starting position,\n     /**\n      * <p>Prints a compact stack trace for the root cause of a throwable\n      * to <code>System.err</code>.</p>\n-     * \n+     *\n      * <p>The compact stack trace starts with the root cause and prints\n      * stack frames up to the place where it was caught and wrapped.\n      * Then it prints the wrapped exception and continues with stack frames\n      * until the wrapper exception is caught and wrapped again, etc.</p>\n      *\n+     * <p>The output of this method is consistent across JDK versions.\n+     * Note that this is the opposite order to the JDK1.4 display.</p>\n+     *\n      * <p>The method is equivalent to <code>printStackTrace</code> for throwables\n      * that don't have nested causes.</p>\n-     * \n+     *\n      * @param throwable  the throwable to output\n      * @since 2.0\n      */\n      * Then it prints the wrapped exception and continues with stack frames\n      * until the wrapper exception is caught and wrapped again, etc.</p>\n      *\n+     * <p>The output of this method is consistent across JDK versions.\n+     * Note that this is the opposite order to the JDK1.4 display.</p>\n+     *\n      * <p>The method is equivalent to <code>printStackTrace</code> for throwables\n      * that don't have nested causes.</p>\n-     * \n+     *\n      * @param throwable  the throwable to output, may be null\n      * @param stream  the stream to output to, may not be null\n      * @throws IllegalArgumentException if the stream is <code>null</code>\n      * Then it prints the wrapped exception and continues with stack frames\n      * until the wrapper exception is caught and wrapped again, etc.</p>\n      *\n+     * <p>The output of this method is consistent across JDK versions.\n+     * Note that this is the opposite order to the JDK1.4 display.</p>\n+     *\n      * <p>The method is equivalent to <code>printStackTrace</code> for throwables\n      * that don't have nested causes.</p>\n-     * \n+     *\n      * @param throwable  the throwable to output, may be null\n      * @param writer  the writer to output to, may not be null\n      * @throws IllegalArgumentException if the writer is <code>null</code>\n     /**\n      * <p>Creates a compact stack trace for the root cause of the supplied\n      * <code>Throwable</code>.</p>\n-     * \n+     *\n+     * <p>The output of this method is consistent across JDK versions.\n+     * It consists of the root exception followed by each of its wrapping\n+     * exceptions separated by '[wrapped]'. Note that this is the opposite\n+     * order to the JDK1.4 display.</p>\n+     *\n      * @param throwable  the throwable to examine, may be null\n      * @return an array of stack trace frames, never null\n      * @since 2.0\n \n     /**\n      * <p>Removes common frames from the cause trace given the two stack traces.</p>\n-     * \n+     *\n      * @param causeFrames  stack trace of a cause throwable\n      * @param wrapperFrames  stack trace of a wrapper throwable\n      * @throws IllegalArgumentException if either argument is null\n     /**\n      * <p>Gets the stack trace from a Throwable as a String.</p>\n      *\n+     * <p>The result of this method vary by JDK version as this method\n+     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n+     * On JDK1.3 and earlier, the cause exception will not be shown\n+     * unless the specified throwable alters printStackTrace.</p>\n+     *\n      * @param throwable  the <code>Throwable</code> to be examined\n      * @return the stack trace as generated by the exception's\n      *  <code>printStackTrace(PrintWriter)</code> method\n \n     /**\n      * <p>A way to get the entire nested stack-trace of an throwable.</p>\n+     *\n+     * <p>The result of this method is highly dependent on the JDK version\n+     * and whether the exceptions override printStackTrace or not.</p>\n      *\n      * @param throwable  the <code>Throwable</code> to be examined\n      * @return the nested stack trace, with the root cause first\n      * <code>Throwable</code> object, decomposing it into a list of\n      * stack frames.</p>\n      *\n+     * <p>The result of this method vary by JDK version as this method\n+     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n+     * On JDK1.3 and earlier, the cause exception will not be shown\n+     * unless the specified throwable alters printStackTrace.</p>\n+     *\n      * @param throwable  the <code>Throwable</code> to examine, may be null\n      * @return an array of strings describing each stack frame, never null\n      */\n     }\n \n     /**\n-     * <p>\n-     * Returns an array where each element is a line from the argument.\n-     * </p>\n-     * <p>\n-     * The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.\n-     * </p>\n-     * \n-     * <p>\n-     * Functionality shared between the <code>getStackFrames(Throwable)</code> methods of this and the\n-     * {@link org.apache.commons.lang.exception.NestableDelegate} classes.\n-     * </p>\n-     * \n-     * @param stackTrace\n-     *            A stack trace String.\n-     * @return an array where each element is a line from the argument.\n+     * <p>Returns an array where each element is a line from the argument.</p>\n+     *\n+     * <p>The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.</p>\n+     *\n+     * <p>Functionality shared between the\n+     * <code>getStackFrames(Throwable)</code> methods of this and the\n+     * {@link org.apache.commons.lang.exception.NestableDelegate} classes.</p>\n+     *\n+     * @param stackTrace  a stack trace String\n+     * @return an array where each element is a line from the argument\n      */\n     static String[] getStackFrames(String stackTrace) {\n         String linebreak = SystemUtils.LINE_SEPARATOR;\n \n     /**\n      * <p>Produces a <code>List</code> of stack frames - the message\n-     * is not included.</p>\n+     * is not included. Only the trace of the specified exception is\n+     * returned, any caused by trace is stripped.</p>\n      *\n      * <p>This works in most cases - it will only fail if the exception\n      * message contains a line that starts with:\n         }\n         return list;\n     }\n-    \n+\n }", "timestamp": 1136596348, "metainfo": ""}