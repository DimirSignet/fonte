{"sha": "22ae6485cea3594267d5ca4bf8f18d4acda0d64f", "log": "Sorted members (this also give us the Javadoc 'Field Details' section in alphabetical order).   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Michael Becke\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.13 2003/05/30 01:12:26 ggregory Exp $\n+ * @version $Id: SystemUtils.java,v 1.14 2003/05/30 01:15:53 ggregory Exp $\n  */\n public class SystemUtils {\n-    \n-    /**\n-     * <p>SystemUtils instances should NOT be constructed in standard\n-     * programming. Instead, the class should be used as\n-     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n-     *\n-     * <p>This constructor is public to permit tools that require a JavaBean\n-     * instance to operate.</p>\n-     */\n-    public SystemUtils() {\n-    }\n \n     //-----------------------------------------------------------------------\n     /**\n      * @since Java version 1.1.\n      */\n     public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).\n+     * <p>\n+     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n+\n+    /**\n+     * Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).\n+     * <p>\n+     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n+\n+    /**\n+     * Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).\n+     * <p>\n+     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n+\n+    /**\n+     * Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).\n+     * <p>\n+     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n+\n+    /**\n+     * Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).\n+     * <p>\n+     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n+\n+    /**\n+     * Is <code>true</code> if this is AIX.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n+\n+    /**\n+     * Is <code>true</code> if this is HP-UX.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n+\n+    /**\n+     * Is <code>true</code> if this is Irix.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n+\n+    /**\n+     * Is <code>true</code> if this is Linux.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n+    // Windows XP returns 'Windows 2000' just for fun...\n+\n+    /**\n+     * Is <code>true</code> if this is Mac.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n+\n+    /**\n+     * Is <code>true</code> if this is Mac.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n+\n+    /**\n+     * Is <code>true</code> if this is Mac.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n+\n+    /**\n+     * Is <code>true</code> if this is Solaris.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n+\n+    /**\n+     * Is <code>true</code> if this is SunOS.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n+\n+    //-----------------------------------------------------------------------\n+    // OS names from http://www.vamphq.com/os.html\n+    // Selected ones included - please advise commons-dev@jakarta.apache.org\n+    // if you want another added or a mistake corrected\n+\n+    /**\n+     * Is <code>true</code> if this is Windows.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n+\n+    /**\n+     * Is <code>true</code> if this is Windows 2000.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n+\n+    /**\n+     * Is <code>true</code> if this is Windows 95.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n+    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * Is <code>true</code> if this is Windows 98.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n+    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * Is <code>true</code> if this is Windows ME.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n+    // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n+\n+    /**\n+     * Is <code>true</code> if this is Windows NT.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n+    // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n+\n+    /**\n+     * Is <code>true</code> if this is Windows XP.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n \n     /**\n      * The <code>java.class.path</code> System Property.\n      * @since Java 1.1\n      */\n     public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n-\n-    /**\n-     * The <code>java.vm.info</code> System Property.\n-     * Java Virtual Machine implementation info.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n-\n-    /**\n-     * The <code>java.vm.name</code> System Property.\n-     * Java Virtual Machine implementation name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n-\n-    /**\n-     * The <code>java.vm.specification.name</code> System Property.\n-     * Java Virtual Machine specification name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n-\n-    /**\n-     * The <code>java.vm.specification.vendor</code> System Property.\n-     * Java Virtual Machine specification vendor.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n-\n-    /**\n-     * The <code>java.vm.specification.version</code> System Property.\n-     * Java Virtual Machine specification version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n-\n-    /**\n-     * The <code>java.vm.vendor</code> System Property.\n-     * Java Virtual Machine implementation vendor.\n-      * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n-\n-    /**\n-     * The <code>java.vm.version</code> System Property.\n-     * Java Virtual Machine implementation version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n-\n-    /**\n-     * The <code>line.separator</code> System Property.\n-     * Line separator (\"\\n\" on UNIX).\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n-\n-    /**\n-     * The <code>os.arch</code> System Property.\n-     * Operating system architecture.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n-\n-    /**\n-     * The <code>os.name</code> System Property.\n-     * Operating system name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String OS_NAME = getSystemProperty(\"os.name\");\n-\n-    /**\n-     * The <code>os.version</code> System Property.\n-     * Operating system version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n-\n-    /**\n-     * The <code>path.separator</code> System Property.\n-     * Path separator (\":\" on UNIX).\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n-\n-    /**\n-     * The <code>user.dir</code> System Property.\n-     * User's current working directory.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String USER_DIR = getSystemProperty(\"user.dir\");\n-\n-    /**\n-     * The <code>user.home</code> System Property.\n-     * User's home directory.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String USER_HOME = getSystemProperty(\"user.home\");\n-\n-    /**\n-     * The <code>user.language</code> System Property.\n-     * User's language code, such as 'en'.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n-\n-    /**\n-     * The <code>user.country</code> or <code>user.region</code> System Property.\n-     * User's country code, such as <code>GB</code>.\n-     * First in JDK version 1.2 as <code>user.region</code>.\n-     * Renamed to <code>user.country</code> in 1.4\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.2\n-     */\n-    public static final String USER_COUNTRY = \n-        (getSystemProperty(\"user.country\") == null ?\n-            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"));\n-\n-    /**\n-     * The <code>user.name</code> System Property.\n-     * User's account name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property or property not specified.\n-     * \n-     * @since Java 1.1\n-     */\n-    public static final String USER_NAME = getSystemProperty(\"user.name\");\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).\n-     * <p>\n-     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n-\n-    /**\n-     * Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).\n-     * <p>\n-     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n-\n-    /**\n-     * Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).\n-     * <p>\n-     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n-\n-    /**\n-     * Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).\n-     * <p>\n-     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n-\n-    /**\n-     * Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).\n-     * <p>\n-     * The field will return false if <code>JAVA_VERSION</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n \n     //-----------------------------------------------------------------------\n     /**\n      */\n     public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n \n-    //-----------------------------------------------------------------------\n-    // OS names from http://www.vamphq.com/os.html\n-    // Selected ones included - please advise commons-dev@jakarta.apache.org\n-    // if you want another added or a mistake corrected\n-\n-    /**\n-     * Is <code>true</code> if this is Windows.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n-\n-    /**\n-     * Is <code>true</code> if this is Windows 95.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n-    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n-\n-    /**\n-     * Is <code>true</code> if this is Windows 98.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n-    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n-\n-    /**\n-     * Is <code>true</code> if this is Windows ME.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n-    // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n-\n-    /**\n-     * Is <code>true</code> if this is Windows NT.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n-\n-    /**\n-     * Is <code>true</code> if this is Windows 2000.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n-    // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n-\n-    /**\n-     * Is <code>true</code> if this is Windows XP.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n-    // Windows XP returns 'Windows 2000' just for fun...\n-\n-    /**\n-     * Is <code>true</code> if this is Mac.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n-\n-    /**\n-     * Is <code>true</code> if this is Mac.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n-\n-    /**\n-     * Is <code>true</code> if this is Linux.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n-\n-    /**\n-     * Is <code>true</code> if this is Mac.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n-\n-    /**\n-     * Is <code>true</code> if this is Solaris.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n-\n-    /**\n-     * Is <code>true</code> if this is SunOS.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n-\n-    /**\n-     * Is <code>true</code> if this is HP-UX.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n-\n-    /**\n-     * Is <code>true</code> if this is AIX.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n-\n-    /**\n-     * Is <code>true</code> if this is Irix.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n-     */\n-    public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n+    /**\n+     * The <code>java.vm.info</code> System Property.\n+     * Java Virtual Machine implementation info.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n+\n+    /**\n+     * The <code>java.vm.name</code> System Property.\n+     * Java Virtual Machine implementation name.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n+\n+    /**\n+     * The <code>java.vm.specification.name</code> System Property.\n+     * Java Virtual Machine specification name.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n+\n+    /**\n+     * The <code>java.vm.specification.vendor</code> System Property.\n+     * Java Virtual Machine specification vendor.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n+\n+    /**\n+     * The <code>java.vm.specification.version</code> System Property.\n+     * Java Virtual Machine specification version.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n+\n+    /**\n+     * The <code>java.vm.vendor</code> System Property.\n+     * Java Virtual Machine implementation vendor.\n+      * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n+\n+    /**\n+     * The <code>java.vm.version</code> System Property.\n+     * Java Virtual Machine implementation version.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n+\n+    /**\n+     * The <code>line.separator</code> System Property.\n+     * Line separator (\"\\n\" on UNIX).\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n+\n+    /**\n+     * The <code>os.arch</code> System Property.\n+     * Operating system architecture.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n+\n+    /**\n+     * The <code>os.name</code> System Property.\n+     * Operating system name.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String OS_NAME = getSystemProperty(\"os.name\");\n+\n+    /**\n+     * The <code>os.version</code> System Property.\n+     * Operating system version.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n+\n+    /**\n+     * The <code>path.separator</code> System Property.\n+     * Path separator (\":\" on UNIX).\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n+\n+    /**\n+     * The <code>user.country</code> or <code>user.region</code> System Property.\n+     * User's country code, such as <code>GB</code>.\n+     * First in JDK version 1.2 as <code>user.region</code>.\n+     * Renamed to <code>user.country</code> in 1.4\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String USER_COUNTRY = \n+        (getSystemProperty(\"user.country\") == null ?\n+            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"));\n+\n+    /**\n+     * The <code>user.dir</code> System Property.\n+     * User's current working directory.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String USER_DIR = getSystemProperty(\"user.dir\");\n+\n+    /**\n+     * The <code>user.home</code> System Property.\n+     * User's home directory.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String USER_HOME = getSystemProperty(\"user.home\");\n+\n+    /**\n+     * The <code>user.language</code> System Property.\n+     * User's language code, such as 'en'.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.2\n+     */\n+    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n+\n+    /**\n+     * The <code>user.name</code> System Property.\n+     * User's account name.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     * \n+     * @since Java 1.1\n+     */\n+    public static final String USER_NAME = getSystemProperty(\"user.name\");\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * <p>Get the Java version number as a <code>float</code>.</p>\n+     *\n+     * <P>Example output:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * @deprecated Use {@link #JAVA_VERSION_FLOAT} instead.\n+     *             Will be removed in Commons Lang 3.0.\n+     * @return the version, for example 1.31f for JDK 1.3.1\n+     */\n+    public static float getJavaVersion() {\n+        return JAVA_VERSION_FLOAT;\n+    }\n+\n+    /**\n+     * <p>Get the Java version number as a <code>float</code>.</p>\n+     *\n+     * <p>Example output:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 1.31f for JDK 1.3.1\n+     */\n+    private static float getJavaVersionAsFloat() {\n+        if (JAVA_VERSION == null) {\n+            return 0f;\n+        }\n+        String str = JAVA_VERSION.substring(0, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n+        }\n+        return Float.parseFloat(str);\n+    }\n+    \n+    /**\n+     * <p>Get the Java version number as an <code>int</code>.</p>\n+     *\n+     * <p>Example output:</p>\n+     * <ul>\n+     *  <li><code>120</code> for JDK 1.2\n+     *  <li><code>131</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 131 for JDK 1.3.1\n+     */\n+    private static int getJavaVersionAsInt() {\n+        if (JAVA_VERSION == null) {\n+            return 0;\n+        }\n+        String str = JAVA_VERSION.substring(0, 1);\n+        str = str + JAVA_VERSION.substring(2, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n+        } else {\n+            str = str + \"0\";\n+        }\n+        return Integer.parseInt(str);\n+    }\n+\n+    /**\n+     * Decides if the java version matches.\n+     * \n+     * @param versionPrefix  the prefix for the java version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private static boolean getJavaVersionMatches(String versionPrefix) {\n+        if (JAVA_VERSION == null) {\n+            return false;\n+        }\n+        return JAVA_VERSION.startsWith(versionPrefix);\n+    }    \n+    \n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private static boolean getOSMatches(String osNamePrefix) {\n+        if (OS_NAME == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix);\n+    }    \n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @param osVersionPrefix  the prefix for the version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n+        if (OS_NAME == null || OS_VERSION == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n+    }    \n \n     //-----------------------------------------------------------------------\n     /**\n             return null;\n         }\n     }    \n-\n-    /**\n-     * Decides if the java version matches.\n-     * \n-     * @param versionPrefix  the prefix for the java version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private static boolean getJavaVersionMatches(String versionPrefix) {\n-        if (JAVA_VERSION == null) {\n-            return false;\n-        }\n-        return JAVA_VERSION.startsWith(versionPrefix);\n-    }    \n-\n-    /**\n-     * <p>Get the Java version number as a <code>float</code>.</p>\n-     *\n-     * <p>Example output:</p>\n-     * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 1.31f for JDK 1.3.1\n-     */\n-    private static float getJavaVersionAsFloat() {\n-        if (JAVA_VERSION == null) {\n-            return 0f;\n-        }\n-        String str = JAVA_VERSION.substring(0, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n-        }\n-        return Float.parseFloat(str);\n-    }\n-    \n-    /**\n-     * <p>Get the Java version number as an <code>int</code>.</p>\n-     *\n-     * <p>Example output:</p>\n-     * <ul>\n-     *  <li><code>120</code> for JDK 1.2\n-     *  <li><code>131</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 131 for JDK 1.3.1\n-     */\n-    private static int getJavaVersionAsInt() {\n-        if (JAVA_VERSION == null) {\n-            return 0;\n-        }\n-        String str = JAVA_VERSION.substring(0, 1);\n-        str = str + JAVA_VERSION.substring(2, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n-        } else {\n-            str = str + \"0\";\n-        }\n-        return Integer.parseInt(str);\n-    }\n-    \n-    /**\n-     * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix  the prefix for the os name\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private static boolean getOSMatches(String osNamePrefix) {\n-        if (OS_NAME == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix);\n-    }    \n-\n-    /**\n-     * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix  the prefix for the os name\n-     * @param osVersionPrefix  the prefix for the version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n-        if (OS_NAME == null || OS_VERSION == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n-    }    \n-\n-    //-----------------------------------------------------------------------    \n-    /**\n-     * <p>Get the Java version number as a <code>float</code>.</p>\n-     *\n-     * <P>Example output:</p>\n-     * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * @deprecated Use {@link #JAVA_VERSION_FLOAT} instead.\n-     *             Will be removed in Commons Lang 3.0.\n-     * @return the version, for example 1.31f for JDK 1.3.1\n-     */\n-    public static float getJavaVersion() {\n-        return JAVA_VERSION_FLOAT;\n-    }\n     \n     /**\n      * <p>Is the Java version at least the requested version.</p>\n         return (JAVA_VERSION_INT >= requiredVersion);\n     }\n     \n+    /**\n+     * <p>SystemUtils instances should NOT be constructed in standard\n+     * programming. Instead, the class should be used as\n+     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public SystemUtils() {\n+    }\n+    \n }", "timestamp": 1054257353, "metainfo": ""}