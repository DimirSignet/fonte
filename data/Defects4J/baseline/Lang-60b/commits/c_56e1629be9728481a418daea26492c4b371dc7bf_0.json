{"sha": "56e1629be9728481a418daea26492c4b371dc7bf", "log": "Add XOR methods bug 21068, from Matthew Hawthorne   ", "commit": "\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * boolean and Boolean objects.</p>\n  *\n  * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.5 2003/06/24 21:14:50 scolebourne Exp $\n+ * @version $Id: BooleanUtils.java,v 1.6 2003/06/28 18:16:03 scolebourne Exp $\n  */\n public class BooleanUtils {\n \n \n     // Boolean utilities\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Negates the specified boolean.</p>\n      * \n     \n     // boolean Boolean methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>\n      * \n     \n     // Integer to Boolean methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Convert an int to a boolean using the convention that zero is false.</p>\n      * \n     \n     // Boolean to Integer methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Convert a boolean to an int using the convention that zero is false.</p>\n      * \n     \n     // String to Boolean methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Converts a String to a Boolean.</p>\n      * \n \n     // String to boolean methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Converts a String to a boolean.</p>\n      * \n \n     // Boolean to String methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Converts a Boolean to a String returning 'true', 'false', or <code>null</code>.</p>\n      * \n     \n     // boolean to String methods\n     //--------------------------------------------------------------------------\n-    \n     /**\n      * <p>Converts a boolean to a String returning 'true' or 'false'.</p>\n      * \n         return (bool ? trueString : falseString);\n     }\n     \n+    // xor methods\n+    //  --------------------------------------------------------------------------\n+    /**\n+     * Performs an xor on a set of booleans.\n+     * \n+     * @param array  an array of <code>boolean<code>s\n+     * @return <code>true</code> if the xor is successful.\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty.\n+     */\n+    public static boolean xor(boolean[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array is empty\");\n+        }\n+\n+        // Loops through array, comparing each item\n+        int trueCount = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            // If item is true, and trueCount is < 1, increments count\n+            // Else, xor fails\n+            if (array[i]) {\n+                if (trueCount < 1) {\n+                    trueCount++;\n+                } else {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        // Returns true if there was exactly 1 true item\n+        return trueCount == 1;\n+    }\n+\n+    /**\n+     * Performs an xor on an array of Booleans.\n+     * \n+     * @param array  an array of <code>Boolean<code>s\n+     * @return <code>true</code> if the xor is successful.\n+     * @throws NullPointerException if <code>array</code> contains a <code>null</code>\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty.\n+     */\n+    public static Boolean xor(Boolean[] array) {\n+        return new Boolean(xor(ArrayUtils.toPrimitive(array)));\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n  * Unit tests {@link org.apache.commons.lang.BooleanUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: BooleanUtilsTest.java,v 1.3 2003/03/23 21:47:30 scolebourne Exp $\n+ * @author Matthew Hawthorne\n+ * @version $Id: BooleanUtilsTest.java,v 1.4 2003/06/28 18:16:03 scolebourne Exp $\n  */\n public class BooleanUtilsTest extends TestCase {\n \n         assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n     }\n     \n+    //  testXor\n+    //  -----------------------------------------------------------------------\n+    public void testXor_primitive_nullInput() {\n+        final boolean[] b = null;\n+        try {\n+            BooleanUtils.xor(b);\n+            fail(\"Exception was not thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_primitive_emptyInput() {\n+        try {\n+            BooleanUtils.xor(new boolean[] {});\n+            fail(\"Exception was not thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_primitive_validInput_2items() {\n+        assertTrue(\n+            \"True result for (true, true)\",\n+            ! BooleanUtils.xor(new boolean[] { true, true }));\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.xor(new boolean[] { false, false }));\n+\n+        assertTrue(\n+            \"False result for (true, false)\",\n+            BooleanUtils.xor(new boolean[] { true, false }));\n+\n+        assertTrue(\n+            \"False result for (false, true)\",\n+            BooleanUtils.xor(new boolean[] { false, true }));\n+    }\n+\n+    public void testXor_primitive_validInput_3items() {\n+        assertTrue(\n+            \"False result for (false, false, true)\",\n+            BooleanUtils.xor(new boolean[] { false, false, true }));\n+\n+        assertTrue(\n+            \"False result for (false, true, false)\",\n+            BooleanUtils.xor(new boolean[] { false, true, false }));\n+\n+        assertTrue(\n+            \"False result for (true, false, false)\",\n+            BooleanUtils.xor(new boolean[] { true, false, false }));\n+\n+        assertTrue(\n+            \"True result for (true, true, true)\",\n+            ! BooleanUtils.xor(new boolean[] { true, true, true }));\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.xor(new boolean[] { false, false, false }));\n+\n+        assertTrue(\n+            \"True result for (true, true, false)\",\n+            ! BooleanUtils.xor(new boolean[] { true, true, false }));\n+\n+        assertTrue(\n+            \"True result for (true, false, true)\",\n+            ! BooleanUtils.xor(new boolean[] { true, false, true }));\n+\n+        assertTrue(\n+            \"False result for (false, true, true)\",\n+            ! BooleanUtils.xor(new boolean[] { false, true, true }));\n+    }\n+\n+    public void testXor_object_nullInput() {\n+        final Boolean[] b = null;\n+        try {\n+            BooleanUtils.xor(b);\n+            fail(\"Exception was not thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_object_emptyInput() {\n+        try {\n+            BooleanUtils.xor(new Boolean[] {});\n+            fail(\"Exception was not thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_object_validInput_2items() {\n+        assertTrue(\n+            \"True result for (true, true)\",\n+            ! BooleanUtils\n+                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils\n+                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (true, false)\",\n+            BooleanUtils\n+                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (false, true)\",\n+            BooleanUtils\n+                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n+                .booleanValue());\n+    }\n+\n+    public void testXor_object_validInput_3items() {\n+        assertTrue(\n+            \"False result for (false, false, true)\",\n+            BooleanUtils\n+                .xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.FALSE,\n+                        Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (false, true, false)\",\n+            BooleanUtils\n+                .xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.TRUE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (true, false, false)\",\n+            BooleanUtils\n+                .xor(\n+                    new Boolean[] {\n+                        Boolean.TRUE,\n+                        Boolean.FALSE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (true, true, true)\",\n+            ! BooleanUtils\n+                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.FALSE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (true, true, false)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.TRUE,\n+                        Boolean.TRUE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (true, false, true)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.TRUE,\n+                        Boolean.FALSE,\n+                        Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (false, true, true)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.TRUE,\n+                        Boolean.TRUE })\n+                .booleanValue());\n+    }\n+\n }", "timestamp": 1056824163, "metainfo": ""}