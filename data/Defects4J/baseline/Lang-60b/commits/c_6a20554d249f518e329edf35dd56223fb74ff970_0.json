{"sha": "6a20554d249f518e329edf35dd56223fb74ff970", "log": "Change javadoc to descrive the class (and its problems) more thoroughly   ", "commit": "\n--- a/src/java/org/apache/commons/lang/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/NumberRange.java\n-package org.apache.commons.lang;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang;\n \n /**\n  * <p>Represents a range of {@link Number} objects.</p>\n+ * \n+ * <p>This class uses <code>double</code> comparisons. This means that it\n+ * is unsuitable for dealing with large <code>Long</code>, <code>BigDecimal</code>\n+ * or <code>BigInteger</code> numbers.</p>\n  *\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n- * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Revision: 1.3 $ $Date: 2002/11/16 10:41:03 $\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.4 $ $Date: 2002/12/21 14:22:11 $\n  */\n public final class NumberRange {\n \n-\n     /* The minimum number in this range. */\n     private final Number min;\n \n      */\n     public NumberRange(Number num) {\n         if (num == null) {\n-            throw new NullPointerException(\"num cannot be null\");\n+            throw new NullPointerException(\"The number must not be null\");\n         }\n \n         this.min = num;\n     /**\n      * <p>Constructs a new <code>NumberRange</code> with the specified\n      * minimum and maximum numbers.</p>\n+     * \n+     * <p>If the maximum is less than the minimum, the range will be constructed\n+     * from the minimum value to the minimum value, not what you would expect!.</p>\n      *\n      * @param min the minimum number in this range\n      * @param max the maximum number in this range\n      */\n     public NumberRange(Number min, Number max) {\n         if (min == null) {\n-            throw new NullPointerException(\"min cannot be null\");\n+            throw new NullPointerException(\"The minimum value must not be null\");\n         } else if (max == null) {\n-            throw new NullPointerException(\"max cannot be null\");\n+            throw new NullPointerException(\"The maximum value must not be null\");\n         }\n \n         if (max.doubleValue() < min.doubleValue()) {\n \n     /**\n      * <p>Tests whether the specified <code>number</code> occurs within\n-     * this range.</p>\n+     * this range using <code>double</code> comparison.</p>\n      *\n      * @param number the number to test\n      * @return <code>true</code> if the specified number occurs within this\n \n     /**\n      * <p>Tests whether the specified range occurs entirely within this\n-     * range.</p>\n+     * range using <code>double</code> comparison.</p>\n      *\n      * @param range the range to test\n      * @return <code>true</code> if the specified range occurs entirely within\n     }\n \n     /**\n-     * <p>Tests whether the specified range overlaps with this range.</p>\n+     * <p>Tests whether the specified range overlaps with this range\n+     * using <code>double</code> comparison.</p>\n      *\n      * @param range the range to test\n      * @return <code>true</code> if the specified range overlaps with this\n     public String toString() {\n         StringBuffer sb = new StringBuffer();\n \n-        if (min.intValue() < 0) {\n+        if (min.doubleValue() < 0) {\n             sb.append('(')\n                 .append(min)\n                 .append(')');\n \n         sb.append('-');\n \n-        if (max.intValue() < 0) {\n+        if (max.doubleValue() < 0) {\n             sb.append('(')\n                 .append(max)\n                 .append(')');", "timestamp": 1040480531, "metainfo": ""}