{"sha": "f03e83e74e8a723fd8c8fffc84cc7faaf9494ab4", "log": "StringEscapeUtils: escape/unescape Java/JavaScript/HTML   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.StringTokenizer;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.io.StringWriter;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n+/**\n+ * <p>Common <code>String</code> escaping routines.</p>\n+ *\n+ * <p>Originally from \n+ * <a href=\"http://jakarta.apache.org/turbine/\">Turbine</a> and the\n+ * GenerationJavaCore library and from\n+ * <a href=\"http://www.purpletech.com/code/\">Purple Technology</a>\n+ * </p>\n+ *\n+ * @author original author of escape and unescape=?\n+ * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n+ * @author <a href=\"mailto:cybertiger@cyberiantiger.org\">cybertiger@cyberiantiger.org</a>\n+ * @author Helge Tesgaard\n+ * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n+ * @since 2.0\n+ * @version $Id: StringEscapeUtils.java,v 1.1 2003/03/31 03:53:52 alex Exp $\n+ */\n+public class StringEscapeUtils {\n+\n+    /**\n+     * <p><code>StringEscapeUtils<code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used as\n+     * <code>StringEscapeUtils.escapeJava(\"foo\");</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public StringEscapeUtils() {\n+    }\n+\n+    // Java and JavaScript\n+    //--------------------------------------------------------------------------\n+    /**\n+     * <p>Escapes any values it finds into their Java String form.\n+     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n+     *\n+     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n+     * <code>'t'</code>.</p>\n+     *\n+     * <p>The only difference between Java strings and JavaScript strings\n+     * is that in JavaScript, a single quote must be escaped.</p>\n+     *\n+     * <p>Example:\n+     * <pre>\n+     * input string: He didn't say, \"Stop!\"\n+     * output string: He didn't say, \\\"Stop!\\\"\n+     * </pre>\n+     * </p>\n+     *\n+     * @param str String to escape values in\n+     * @return String with escaped values\n+     * @throws NullPointerException if str is <code>null</code>\n+     */\n+    public static String escapeJava(String str) {\n+        return escapeJavaStyleString(str, false);\n+    }\n+\n+    /**\n+     * @see #escapeJava(java.lang.String)\n+     * @param out Writer to write escaped string into\n+     * @param str String to escape values in\n+     * @throws NullPointerException if str is <code>null</code>\n+     * @throws IOException if error occurs on undelying Writer\n+     */\n+    public static void escapeJava(Writer out, String str) throws IOException {\n+        escapeJavaStyleString(out, str, false);\n+    }\n+\n+    /**\n+     * <p>Escapes any values it finds into their JavaScript String form.\n+     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n+     *\n+     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n+     * <code>'t'</code>.</p>\n+     *\n+     * <p>The only difference between Java strings and JavaScript strings\n+     * is that in JavaScript, a single quote must be escaped.</p>\n+     *\n+     * <p>Example:\n+     * <pre>\n+     * input string: He didn't say, \"Stop!\"\n+     * output string: He didn\\'t say, \\\"Stop!\\\"\n+     * </pre>\n+     * </p>\n+     *\n+     * @param str String to escape values in\n+     * @return String with escaped values\n+     * @throws NullPointerException if str is <code>null</code>\n+     */\n+    public static String escapeJavaScript(String str) {\n+        return escapeJavaStyleString(str, true);\n+    }\n+\n+    /**\n+     * @see #escapeJavaScript(java.lang.String)\n+     * @param out Writer to write escaped string into\n+     * @param str String to escape values in\n+     * @throws NullPointerException if str is <code>null</code>\n+     * @throws IOException if error occurs on undelying Writer\n+     **/\n+    public static void escapeJavaScript(Writer out, String str) throws IOException {\n+        escapeJavaStyleString(out, str, true);\n+    }\n+\n+    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n+        try {\n+            StringPrintWriter writer = new StringPrintWriter(str.length() * 2);\n+            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n+            return writer.getString();\n+        }\n+        catch (IOException ioe) {\n+            // this should never ever happen while writing to a StringWriter\n+            ioe.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+        int sz;\n+        sz = str.length();\n+        for (int i = 0; i < sz; i++) {\n+            char ch = str.charAt(i);\n+\n+            // handle unicode\n+            if (ch > 0xfff) {\n+                out.write(\"\\\\u\" + Integer.toHexString(ch));\n+            } else if (ch > 0xff) {\n+                out.write(\"\\\\u0\" + Integer.toHexString(ch));\n+            } else if (ch > 0x7f) {\n+                out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+            } else if (ch < 32) {\n+                switch (ch) {\n+                    case '\\b' :\n+                        out.write('\\\\');\n+                        out.write('b');\n+                        break;\n+                    case '\\n' :\n+                        out.write('\\\\');\n+                        out.write('n');\n+                        break;\n+                    case '\\t' :\n+                        out.write('\\\\');\n+                        out.write('t');\n+                        break;\n+                    case '\\f' :\n+                        out.write('\\\\');\n+                        out.write('f');\n+                        break;\n+                    case '\\r' :\n+                        out.write('\\\\');\n+                        out.write('r');\n+                        break;\n+                    default :\n+                        if (ch > 0xf) {\n+                            out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+                        } else {\n+                            out.write(\"\\\\u000\" + Integer.toHexString(ch));\n+                        }\n+                        break;\n+                }\n+            } else {\n+                switch (ch) {\n+                    case '\\'' :\n+                        if (escapeSingleQuote) out.write('\\\\');\n+                        out.write('\\'');\n+                        break;\n+                    case '\"' :\n+                        out.write('\\\\');\n+                        out.write('\"');\n+                        break;\n+                    case '\\\\' :\n+                        out.write('\\\\');\n+                        out.write('\\\\');\n+                        break;\n+                    default :\n+                        out.write(ch);\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unescapes any Java literals found in the String. For example, \n+     * it will turn a sequence of '\\' and 'n' into a newline character, \n+     * unless the '\\' is preceded by another '\\'.\n+     */\n+    public static String unescapeJava(String str) {\n+        try {\n+            StringPrintWriter writer = new StringPrintWriter(str.length());\n+            unescapeJava(writer, str);\n+            return writer.getString();\n+        }\n+        catch (IOException ioe) {\n+            // this should never ever happen while writing to a StringWriter\n+            ioe.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static void unescapeJava(Writer out, String str) throws IOException {\n+        int sz = str.length();\n+        StringBuffer unicode = new StringBuffer(4);\n+        boolean hadSlash = false;\n+        boolean inUnicode = false;\n+        for (int i = 0; i < sz; i++) {\n+            char ch = str.charAt(i);\n+            if(inUnicode) {\n+                // if in unicode, then we're reading unicode \n+                // values in somehow\n+                if(unicode.length() == 4) {\n+                    // unicode now contains the four hex digits \n+                    // which represents our unicode chacater\n+                    try {\n+                        int value = Integer.parseInt(unicode.toString(), 16);\n+                        out.write( (char)value );\n+                        unicode.setLength(0);\n+                        unicode.setLength(4);\n+                        inUnicode = false;\n+                        hadSlash = false;\n+                    } catch(NumberFormatException nfe) {\n+                        throw new NestableRuntimeException(\"Unable to parse unicode value: \"+unicode, nfe);\n+                    }\n+                } else {\n+                    unicode.append(ch);\n+                    continue;\n+                }\n+            }\n+            if(hadSlash) {\n+                // handle an escaped value\n+                hadSlash = false;\n+                switch(ch) {\n+                    case '\\\\': out.write('\\\\'); break;\n+                    case '\\'': out.write('\\''); break;\n+                    case '\\\"': out.write('\"'); break;\n+                    case 'r':  out.write('\\r'); break;\n+                    case 'f':  out.write('\\f'); break;\n+                    case 't':  out.write('\\t'); break;\n+                    case 'n':  out.write('\\n'); break;\n+                    case 'b':  out.write('\\b'); break;\n+                    case 'u':  {\n+                        // uh-oh, we're in unicode country....\n+                        inUnicode=true;\n+                        break;\n+                    }\n+                    default :\n+                        out.write(ch);\n+                        break;\n+                }\n+                continue;\n+            } else\n+            if(ch == '\\\\') {\n+                hadSlash = true;\n+                continue;\n+            } \n+            out.write(ch);\n+        }\n+        if(hadSlash) {\n+            // then we're in the weird case of a \\ at the end of the \n+            // string, let's output it anyway.\n+            out.write('\\\\');\n+        }\n+    }\n+\n+    public static String unescapeJavaScript(String str) {\n+        return unescapeJava(str);\n+    }\n+\n+    public static void unescapeJavaScript(Writer out, String str) throws IOException {\n+        unescapeJava(out,str);\n+    }\n+\n+    // HTML and XML\n+    //--------------------------------------------------------------------------\n+    \n+    // see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n+    //todo: initialize these lazily (on first request, rather than at classload time)\n+    static Object[][] entities = {\n+       // {\"#39\", new Integer(39)},       // ' - apostrophe\n+        {\"quot\", new Integer(34)},      // \" - double-quote\n+        {\"amp\", new Integer(38)},       // & - ampersand\n+        {\"lt\", new Integer(60)},        // < - less-than\n+        {\"gt\", new Integer(62)},        // > - greater-than\n+        {\"nbsp\", new Integer(160)},     // non-breaking space\n+        {\"copy\", new Integer(169)},     //  - copyright\n+        {\"reg\", new Integer(174)},      //  - registered trademark\n+        {\"Agrave\", new Integer(192)},   //  - uppercase A, grave accent\n+        {\"Aacute\", new Integer(193)},   //  - uppercase A, acute accent\n+        {\"Acirc\", new Integer(194)},    //  - uppercase A, circumflex accent\n+        {\"Atilde\", new Integer(195)},   //  - uppercase A, tilde\n+        {\"Auml\", new Integer(196)},     //  - uppercase A, umlaut\n+        {\"Aring\", new Integer(197)},    //  - uppercase A, ring\n+        {\"AElig\", new Integer(198)},    //  - uppercase AE\n+        {\"Ccedil\", new Integer(199)},   //  - uppercase C, cedilla\n+        {\"Egrave\", new Integer(200)},   //  - uppercase E, grave accent\n+        {\"Eacute\", new Integer(201)},   //  - uppercase E, acute accent\n+        {\"Ecirc\", new Integer(202)},    //  - uppercase E, circumflex accent\n+        {\"Euml\", new Integer(203)},     //  - uppercase E, umlaut\n+        {\"Igrave\", new Integer(204)},   //  - uppercase I, grave accent\n+        {\"Iacute\", new Integer(205)},   //  - uppercase I, acute accent\n+        {\"Icirc\", new Integer(206)},    //  - uppercase I, circumflex accent\n+        {\"Iuml\", new Integer(207)},     //  - uppercase I, umlaut\n+        {\"ETH\", new Integer(208)},      //  - uppercase Eth, Icelandic\n+        {\"Ntilde\", new Integer(209)},   //  - uppercase N, tilde\n+        {\"Ograve\", new Integer(210)},   //  - uppercase O, grave accent\n+        {\"Oacute\", new Integer(211)},   //  - uppercase O, acute accent\n+        {\"Ocirc\", new Integer(212)},    //  - uppercase O, circumflex accent\n+        {\"Otilde\", new Integer(213)},   //  - uppercase O, tilde\n+        {\"Ouml\", new Integer(214)},     //  - uppercase O, umlaut\n+        {\"Oslash\", new Integer(216)},   //  - uppercase O, slash\n+        {\"Ugrave\", new Integer(217)},   //  - uppercase U, grave accent\n+        {\"Uacute\", new Integer(218)},   //  - uppercase U, acute accent\n+        {\"Ucirc\", new Integer(219)},    //  - uppercase U, circumflex accent\n+        {\"Uuml\", new Integer(220)},     //  - uppercase U, umlaut\n+        {\"Yacute\", new Integer(221)},   //  - uppercase Y, acute accent\n+        {\"THORN\", new Integer(222)},    //  - uppercase THORN, Icelandic\n+        {\"szlig\", new Integer(223)},    //  - lowercase sharps, German\n+        {\"agrave\", new Integer(224)},   //  - lowercase a, grave accent\n+        {\"aacute\", new Integer(225)},   //  - lowercase a, acute accent\n+        {\"acirc\", new Integer(226)},    //  - lowercase a, circumflex accent\n+        {\"atilde\", new Integer(227)},   //  - lowercase a, tilde\n+        {\"auml\", new Integer(228)},     //  - lowercase a, umlaut\n+        {\"aring\", new Integer(229)},    //  - lowercase a, ring\n+        {\"aelig\", new Integer(230)},    //  - lowercase ae\n+        {\"ccedil\", new Integer(231)},   //  - lowercase c, cedilla\n+        {\"egrave\", new Integer(232)},   //  - lowercase e, grave accent\n+        {\"eacute\", new Integer(233)},   //  - lowercase e, acute accent\n+        {\"ecirc\", new Integer(234)},    //  - lowercase e, circumflex accent\n+        {\"euml\", new Integer(235)},     //  - lowercase e, umlaut\n+        {\"igrave\", new Integer(236)},   //  - lowercase i, grave accent\n+        {\"iacute\", new Integer(237)},   //  - lowercase i, acute accent\n+        {\"icirc\", new Integer(238)},    //  - lowercase i, circumflex accent\n+        {\"iuml\", new Integer(239)},     //  - lowercase i, umlaut\n+        {\"igrave\", new Integer(236)},   //  - lowercase i, grave accent\n+        {\"iacute\", new Integer(237)},   //  - lowercase i, acute accent\n+        {\"icirc\", new Integer(238)},    //  - lowercase i, circumflex accent\n+        {\"iuml\", new Integer(239)},     //  - lowercase i, umlaut\n+        {\"eth\", new Integer(240)},      //  - lowercase eth, Icelandic\n+        {\"ntilde\", new Integer(241)},   //  - lowercase n, tilde\n+        {\"ograve\", new Integer(242)},   //  - lowercase o, grave accent\n+        {\"oacute\", new Integer(243)},   //  - lowercase o, acute accent\n+        {\"ocirc\", new Integer(244)},    //  - lowercase o, circumflex accent\n+        {\"otilde\", new Integer(245)},   //  - lowercase o, tilde\n+        {\"ouml\", new Integer(246)},     //  - lowercase o, umlaut\n+        {\"oslash\", new Integer(248)},   //  - lowercase o, slash\n+        {\"ugrave\", new Integer(249)},   //  - lowercase u, grave accent\n+        {\"uacute\", new Integer(250)},   //  - lowercase u, acute accent\n+        {\"ucirc\", new Integer(251)},    //  - lowercase u, circumflex accent\n+        {\"uuml\", new Integer(252)},     //  - lowercase u, umlaut\n+        {\"yacute\", new Integer(253)},   //  - lowercase y, acute accent\n+        {\"thorn\", new Integer(254)},    //  - lowercase thorn, Icelandic\n+        {\"yuml\", new Integer(255)},     //  - lowercase y, umlaut\n+        {\"euro\", new Integer(8364)},    // Euro symbol\n+    };\n+    static Map e2i = new HashMap();\n+    static Map i2e = new HashMap();\n+    static {\n+        for (int i=0; i<entities.length; ++i) {\n+            e2i.put(entities[i][0], entities[i][1]);\n+            i2e.put(entities[i][1], entities[i][0]);\n+        }\n+    }\n+\n+    /**\n+     * Turns funky characters into HTML entity equivalents<p>\n+     * e.g. <tt>\"bread\" & \"butter\"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n+     * Supports all known HTML entities, including funky accents. See the source code for more detail.\n+     * see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n+     * @see #unescapeHtml(String)\n+     **/\n+    public static String escapeHtml(String str)\n+    {\n+        StringBuffer buf = new StringBuffer(str.length() * 2);\n+        int i;\n+        for (i=0; i<str.length(); ++i) {\n+            char ch = str.charAt(i);\n+            String entity = (String)i2e.get( new Integer((int)ch) );\n+            if (entity == null) {\n+                if (((int)ch) > 128) {\n+                    int intValue = ((int)ch);\n+                    buf.append(\"&#\" + intValue + \";\");\n+                }\n+                else {\n+                    buf.append(ch);\n+                }\n+            }\n+            else {\n+                buf.append(\"&\" + entity + \";\");\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Given a string containing entity escapes, returns a string\n+     * containing the actual Unicode characters corresponding to the\n+     * escapes.\n+     *\n+     * @see #escapeHtml(String)\n+     **/\n+    public static String unescapeHtml(String str) {\n+        StringBuffer buf = new StringBuffer(str.length());\n+        int i;\n+        for (i=0; i<str.length(); ++i) {\n+            char ch = str.charAt(i);\n+            if (ch == '&') {\n+                int semi = str.indexOf(';', i+1);\n+                if (semi == -1) {\n+                    buf.append(ch);\n+                    continue;\n+                }\n+                String entity = str.substring(i+1, semi);\n+                Integer iso;\n+                if (entity.charAt(0) == '#') {\n+                    iso = new Integer(entity.substring(1));\n+                }\n+                else {\n+                    iso = (Integer)e2i.get(entity);\n+                }\n+                if (iso == null) {\n+                    buf.append(\"&\" + entity + \";\");\n+                }\n+                else {\n+                    buf.append((char)(iso.intValue()));\n+                }\n+                i = semi;\n+            }\n+            else {\n+                buf.append(ch);\n+            }\n+        }\n+        return buf.toString();\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/StringPrintWriter.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.io.*;\n+\n+/**\n+ * A PrintWriter that maintains a String as its backing store.\n+ * Usage: <pre>\n+ * StringPrintWriter out = new StringPrintWriter();\n+ * printTo(out);\n+ * System.out.println( out.getString() );\n+ * </pre>\n+ * @author Alex Chaffee\n+ * @author Scott Stanchfield\n+ **/\n+public class StringPrintWriter extends PrintWriter {\n+    public StringPrintWriter() {\n+        super(new StringWriter());\n+    }\n+\n+    public StringPrintWriter(int initialSize) {\n+        super(new StringWriter(initialSize));\n+    }\n+\n+    /**\n+     * Since toString() returns information *about* this object, we\n+     * want a separate method to extract just the contents of the\n+     * internal buffer as a String.\n+     * @return the contents of the internal string buffer\n+     */\n+    public String getString() {\n+        flush();\n+        return ((StringWriter) out).toString();\n+    }\n+}\n+\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  *\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: LangTestSuite.java,v 1.13 2003/03/23 21:49:13 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.14 2003/03/31 03:53:52 alex Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.addTest(StringUtilsSubstringTest.suite());\n         suite.addTest(StringUtilsEqualsIndexOfTest.suite());\n         suite.addTest(StringUtilsIsTest.suite());\n+        suite.addTest(StringEscapeUtilsTest.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.Arrays;\n+import java.io.IOException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link StringUtils}.\n+ *\n+ * @author of original StringUtilsTest.testEscape = ?\n+ * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.1 2003/03/31 03:53:52 alex Exp $\n+ */\n+public class StringEscapeUtilsTest extends TestCase {\n+    private final static String FOO = \"foo\";\n+\n+    public StringEscapeUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StringEscapeUtilsTest.class);\n+        suite.setName(\"StringEscapeUtilsTest Tests\");\n+        return suite;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testEscapeJava() throws IOException {\n+        assertEscapeJava(\"empty string\", \"\", \"\");\n+        assertEscapeJava(FOO, FOO);\n+        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n+        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n+        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n+        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n+        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n+        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n+        assertEscapeJava(\"\\\\u00fd\", \"\\u00fd\");\n+\n+        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n+                \"He didn't say, \\\"stop!\\\"\");\n+        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00a0\",\n+                \"This space is non-breaking:\\u00a0\");\n+        assertEscapeJava(\"\\\\uabcd\\\\u1234\\\\u012c\",\n+                \"\\uABCD\\u1234\\u012C\");\n+    }\n+\n+    private void assertEscapeJava(String escaped, String original) throws IOException {\n+        assertEscapeJava(null, escaped, original);\n+    }\n+\n+    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n+        String converted = StringEscapeUtils.escapeJava(original);\n+        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n+        assertEquals(message, expected, converted);\n+\n+        StringPrintWriter writer = new StringPrintWriter();\n+        StringEscapeUtils.escapeJava(writer, original);\n+        assertEquals(expected, writer.getString());\n+    }\n+\n+    public void testUnescapeJava() throws IOException {\n+        assertUnescapeJava(\"\", \"\");\n+        assertUnescapeJava(\"test\", \"test\");\n+        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n+        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n+    }\n+\n+    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n+        assertEquals(\"unescape(String) failed\",\n+                unescaped, StringUtils.unescape(original));\n+\n+        StringPrintWriter writer = new StringPrintWriter();\n+        StringEscapeUtils.unescapeJava(writer, original);\n+        assertEquals(unescaped, writer.getString());\n+\n+    }\n+\n+    public void testEscapeJavaScript() {\n+        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n+    }\n+\n+\n+    // HTML\n+    //--------------------------------------------------------------\n+    String[][] htmlEscapes = {\n+        {\"no escaping\", \"plain text\", \"plain text\"},\n+        {\"no escaping\", \"plain text\", \"plain text\"},\n+        {\"empty string\", \"\", \"\"},\n+        {\"ampersand\", \"bread &amp; butter\", \"bread & butter\"},\n+        {\"quotes\", \"&quot;bread&quot; &amp; butter\", \"\\\"bread\\\" & butter\"},\n+        {\"final character only\", \"greater than &gt;\", \"greater than >\"},\n+        {\"first character only\", \"&lt; less than\", \"< less than\"},\n+        {\"apostrophe\", \"Huntington's chorea\", \"Huntington's chorea\"},\n+        {\"languages\", \"English,Fran&ccedil;ais,&#26085;&#26412;&#35486; (nihongo)\", \"English,Franais,\\u65E5\\u672C\\u8A9E (nihongo)\"},\n+    };\n+\n+    public void testEscapeHtml() {\n+        for (int i = 0; i < htmlEscapes.length; ++i) {\n+            assertEquals(htmlEscapes[i][0], htmlEscapes[i][1], StringEscapeUtils.escapeHtml(htmlEscapes[i][2]));\n+            // todo: add test for (and implement) Writer-based version\n+        }\n+    }\n+\n+    public void testHtmlunescape() {\n+        for (int i = 0; i < htmlEscapes.length; ++i) {\n+            assertEquals(htmlEscapes[i][0], htmlEscapes[i][2], StringEscapeUtils.unescapeHtml(htmlEscapes[i][1]));\n+            // todo: add test for (and implement) Writer-based version\n+        }\n+        // should we unicode-escape the cedilla here, for 7-bit cleanliness?\n+        assertEquals(\"funny chars pass through OK\", \"Franais\", StringEscapeUtils.unescapeHtml(\"Franais\"));\n+    }\n+\n+    // SQL\n+    // see http://www.jguru.com/faq/view.jsp?EID=8881\n+    //--------------------\n+//    public void testEscapeSQL() throws Exception {\n+    // sql doubles-up single-quotes\n+//    }\n+}\n+", "timestamp": 1049082832, "metainfo": ""}