{"sha": "ef9c7f7e9f3ec00504ae0e8e7e11ba1b1859e5b9", "log": "Added unit tests for MethodUtils copied from the beanutils component.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/AbstractChild.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.lang.reflect;\n+\n+public class AbstractChild implements Child {\n+    \n+    private String name;\n+    \n+    protected void setName(String name)\n+    {\n+        this.name = name;\n+    }\n+    \n+    public String getName()\n+    {\n+        return name;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/AbstractParent.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.lang.reflect;\n+\n+public abstract class AbstractParent {\n+    \n+    private Child child;\n+    \n+    public Child getChild()\n+    {\n+        return child;\n+    }\n+\n+    /**\n+     * Method which matches signature but which has wrong parameters \n+     */\n+    public String testAddChild(String badParameter) {\n+        return null;\n+    }\n+\n+    /**\n+     * Method which matches signature but which has wrong parameters \n+     */\n+    public String testAddChild2(String ignore, String badParameter) {\n+        return null;\n+    }\n+    \n+    public String testAddChild(Child child) {\n+        this.child = child;\n+        return child.getName();\n+    }\n+    \n+\n+    public String testAddChild2(String ignore, Child child) {\n+        this.child = child;\n+        return child.getName();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/AlphaBean.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.lang.reflect;\n+\n+public class AlphaBean extends AbstractParent implements Child {\n+    \n+    private String name;\n+    \n+    public AlphaBean(String name) {\n+        setName(name);\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }    \n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\t\n+    \n+    /**\n+     * Used for testing that correct exception is thrown.\n+     */\n+    public void bogus(String badParameter){}\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/BetaBean.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.lang.reflect;\n+\n+public class BetaBean extends AbstractChild {\n+    \n+    public BetaBean(String name) {\n+        setName(name);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/Child.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect;\n+\n+public interface Child {\n+    \n+    public String getName();\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect;\n+\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+import org.apache.commons.lang.reflect.priv.PrivateBeanFactory;\n+import org.apache.commons.lang.reflect.priv.PublicSubBean;\n+\n+import junit.framework.TestCase;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+\n+/**\n+ * <p> Test case for <code>MethodUtils</code> </p>\n+ *\n+ */\n+public class MethodUtilsTestCase extends TestCase {\n+\n+    // ---------------------------------------------------- Instance Variables\n+\n+    protected PrivateBeanFactory privateBeanFactory;\n+\n+    // ---------------------------------------------------------- Constructors\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public MethodUtilsTestCase(String name) {\n+        super(name);\n+    }\n+\n+\n+    // -------------------------------------------------- Overall Test Methods\n+\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+        privateBeanFactory = new PrivateBeanFactory();\n+    }\n+\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite() {\n+        return (new TestSuite(MethodUtilsTestCase.class));\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+        privateBeanFactory = null;\n+    }\n+\n+\n+    // ------------------------------------------------ Individual Test Methods\n+\n+    /**\n+     * <p> Test <code>getAccessibleMethod</code>.\n+     */\n+    public void testGetAccessibleMethod() {\n+        // test MethodUtils.getAccessibleMethod\n+        // we'll make things easier by using the convenience methods\n+\n+        // easy bit first - find a public method\n+        // METHOD ONE\n+        Method method = MethodUtils.getAccessibleMethod\n+                (TestBean.class, \"setStringProperty\", String.class);\n+\n+        // check that we've found one that matches\n+        assertNotNull(method);\n+        assertEquals(\"method ONE is named correctly\",\n+                \"setStringProperty\", method.getName());\n+        assertTrue(\"Method ONE is public\",\n+                Modifier.isPublic(method.getModifiers()));\n+\n+        // trickier this one - find a method in a direct interface\n+        // METHOD TWO\n+        method = MethodUtils.getAccessibleMethod\n+                (privateBeanFactory.create().getClass(),\n+                        \"methodBar\",\n+                        String.class);\n+\n+        // check that we've found one that matches\n+        assertNotNull(method);\n+        assertEquals(\"Method TWO is named correctly\",\n+                \"methodBar\", method.getName());\n+        assertTrue(\"Method TWO is public\",\n+                Modifier.isPublic(method.getModifiers()));\n+\n+        // trickier this one - find a method in a indirect interface\n+        // METHOD THREE\n+        method = MethodUtils.getAccessibleMethod\n+                (privateBeanFactory.createSubclass().getClass(),\n+                        \"methodBaz\",\n+                        String.class);\n+\n+        // check that we've found one that matches\n+        assertNotNull(method);\n+        assertEquals(\"Method THREE is named correctly\",\n+                \"methodBaz\", method.getName());\n+        assertTrue(\"Method THREE is public\",\n+                Modifier.isPublic(method.getModifiers()));\n+\n+    }\n+\n+\n+    /**\n+     * <p> Test <code>invokeExactMethod</code>.\n+     */\n+    public void testInvokeExactMethod() {\n+        // test MethodUtils.invokeExactMethod\n+        // easy bit first - invoke a public method\n+        // METHOD ONE\n+        try {\n+\n+            TestBean bean = new TestBean();\n+            Object ret = MethodUtils.invokeExactMethod(bean, \"setStringProperty\", \"TEST\");\n+            // check that the return's right and that the properties been set\n+            assertNull(ret);\n+            assertEquals(\"Method ONE was invoked\", \"TEST\", bean.getStringProperty());\n+\n+        } catch (Throwable t) {\n+            // ONE\n+            fail(\"Exception in method ONE prevented invokation: \" + t.toString());\n+        }\n+\n+        // trickier this one - find a method in a direct interface\n+        // METHOD TWO FAILURE\n+        try {\n+\n+            Object ret = MethodUtils.invokeExactMethod(\n+                    privateBeanFactory.create(),\n+                    \"methodBar\",\n+                    \"ANOTHER TEST\");\n+\n+            // check that we've found one that matches\n+            assertEquals(\"Method TWO was invoked correctly\", \"ANOTHER TEST\", ret);\n+\n+        } catch (Throwable t) {\n+            // METHOD TWO FAILURE\n+            fail(\"Exception in method TWO prevented invokation: \" + t.toString());\n+        }\n+\n+\n+        // trickier this one - find a method in a indirect interface\n+        // METHOD THREE\n+        try {\n+\n+            Object ret = MethodUtils.invokeExactMethod(\n+                    privateBeanFactory.createSubclass(),\n+                    \"methodBaz\",\n+                    \"YET ANOTHER TEST\");\n+\n+\n+            // check that we've found one that matches\n+            assertEquals(\"Method TWO was invoked correctly\", \"YET ANOTHER TEST\", ret);\n+\n+\n+        } catch (Throwable t) {\n+            // METHOD THREE FAILURE\n+            fail(\"Exception in method THREE prevented invokation: \" + t.toString());\n+\n+        }\n+    }\n+    \n+    /**\n+     * <p> Test <code>invokeMethod</code>.\n+     */\n+    public void testInvokeMethod() throws Exception {\n+        // i'm going to test that the actual calls work first and then try them via reflection\n+        \n+        AbstractParent parent = new AlphaBean(\"parent\");\n+        \n+        // try testAddChild through abstract superclass\n+        BetaBean childOne = new BetaBean(\"ChildOne\");\n+        \n+        assertEquals(\"Oh no! Badly coded test case! (1)\", \"ChildOne\", parent.testAddChild(childOne));\n+        \n+        // let's try MethodUtils version\n+        assertEquals(\n+                        \"Cannot invoke through abstract class (1)\", \n+                        \"ChildOne\", \n+                        MethodUtils.invokeMethod(parent, \"testAddChild\", childOne));\n+\n+        \n+        // try adding through interface\n+        AlphaBean childTwo = new AlphaBean(\"ChildTwo\");\n+        \n+        assertEquals(\"Oh no! Badly coded test case! (2)\", \"ChildTwo\", parent.testAddChild(childTwo));\n+        \n+        // let's try MethodUtils version\n+        assertEquals(\n+                        \"Cannot invoke through interface (1)\", \n+                        \"ChildTwo\", \n+                        MethodUtils.invokeMethod(parent, \"testAddChild\", childTwo));\n+       \n+        \n+        Object[] params = new Object[2];\n+\n+        assertEquals(\"Oh no! Badly coded test case! (3)\", \"ChildOne\", parent.testAddChild2(\"parameter\", childOne));\n+        \n+        \n+        // let's try MethodUtils version\n+        params[0] = \"parameter\";\n+        params[1] = childOne;\n+        \n+        assertEquals(\n+                        \"Cannot invoke through abstract class (1)\", \n+                        \"ChildOne\", \n+                        MethodUtils.invokeMethod(parent, \"testAddChild2\", params));\n+                        \n+        assertEquals(\"Oh no! Badly coded test case! (4)\", \"ChildTwo\", parent.testAddChild2(\"parameter\", childTwo));\n+        \n+        // let's try MethodUtils version\n+        params[0] = \"parameter\";\n+        params[1] = childTwo;\n+       \n+        assertEquals(\n+                        \"Cannot invoke through abstract class (1)\", \n+                        \"ChildTwo\", \n+                        MethodUtils.invokeMethod(parent, \"testAddChild2\", params));\n+        \n+        // test that exception is correctly thrown when a method cannot be found with matching params\n+        try {\n+            // the next line\n+            parent = new AlphaBean(\"parent\");\n+            childOne = new BetaBean(\"ChildOne\");\n+            MethodUtils.invokeMethod(parent, \"bogus\", childOne);\n+            // should get here!\n+            fail(\"No exception thrown when no appropriate method exists\");\n+            \n+        } catch (NoSuchMethodException e) {\n+            // this is what we're expecting!\n+        }\n+        \n+        MethodUtils.invokeMethod(parent, \"getName\", null);\n+        MethodUtils.invokeMethod(parent, \"getName\", null, null);\n+        MethodUtils.invokeExactMethod(parent, \"getName\", null);\n+        MethodUtils.invokeExactMethod(parent, \"getName\", null, null);        \n+    }\n+\n+    \n+    /**\n+     * <p> Test <code>invokeMethod</code> with a primitive.\n+     */\n+    public void testInvokeMethodWithPrimitives() throws Exception {\n+        // first test that the bean works \n+        PrimitiveBean bean = new PrimitiveBean();\n+        bean.setFloat(20.0f);\n+        bean.setLong(10l);\n+        bean.setBoolean(true);\n+        bean.setInt(12);\n+        bean.setDouble(25.5d);\n+        \n+        assertEquals(\"Bug in PrimitiveBean (1)\", 20.0f, bean.getFloat(), 0.01f);\n+        assertEquals(\"Bug in PrimitiveBean (2)\", 10, bean.getLong());\n+        assertEquals(\"Bug in PrimitiveBean (3)\", true, bean.getBoolean());\n+        assertEquals(\"Bug in PrimitiveBean (4)\", 12, bean.getInt());\n+        assertEquals(\"Bug in PrimitiveBean (5)\", 25.5d, bean.getDouble(), 0.01f);\n+        \n+        bean = new PrimitiveBean();\n+        MethodUtils.invokeMethod(bean, \"setBoolean\", new Boolean(true));\n+        assertEquals(\"Call boolean property using invokeMethod\", true, bean.getBoolean());\n+\n+        bean = new PrimitiveBean();\n+        MethodUtils.invokeMethod(bean, \"setFloat\", new Float(20.0f));\n+        assertEquals(\"Call float property using invokeMethod\", 20.0f, bean.getFloat(), 0.01f);\n+        \n+        bean = new PrimitiveBean();\n+        MethodUtils.invokeMethod(bean, \"setLong\", new Long(10));\n+        assertEquals(\"Call float property using invokeMethod\", 10, bean.getLong());\n+        \n+        bean = new PrimitiveBean();\n+        MethodUtils.invokeMethod(bean, \"setInt\", new Integer(12));\n+        assertEquals(\"Set float property using invokeMethod\", 12, bean.getInt());\n+        \n+        bean = new PrimitiveBean();\n+        MethodUtils.invokeMethod(bean, \"setDouble\", new Double(25.5d));\n+        assertEquals(\"Set float property using invokeMethod\", 25.5d, bean.getDouble(), 0.01d);\n+    }\n+\n+\n+    /**\n+     * Simple tests for accessing static methods via invokeMethod().\n+     */\n+    public void testSimpleStatic1() {\n+\n+        TestBean bean = new TestBean();\n+        Object value = null;\n+        int current = TestBean.currentCounter();\n+\n+        try {\n+\n+            // Return initial value of the counter\n+            value = MethodUtils.invokeMethod\n+                (bean, \"currentCounter\", new Object[0], new Class[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+            // Increment via no-arguments version\n+            MethodUtils.invokeMethod\n+                (bean, \"incrementCounter\", new Object[0], new Class[0]);\n+\n+            // Validate updated value\n+            current++;\n+            value = MethodUtils.invokeMethod\n+                (bean, \"currentCounter\", new Object[0], new Class[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+            // Increment via specified-argument version\n+            MethodUtils.invokeMethod\n+                (bean, \"incrementCounter\",\n+                 new Object[] { new Integer(5) },\n+                 new Class[] { Integer.TYPE });\n+\n+            // Validate updated value\n+            current += 5;\n+            value = MethodUtils.invokeMethod\n+                (bean, \"currentCounter\", new Object[0], new Class[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+        } catch (Exception e) {\n+            fail(\"Threw exception\" + e);\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Simple tests for accessing static methods via invokeExactMethod().\n+     */\n+    public void testSimpleStatic2() {\n+\n+        TestBean bean = new TestBean();\n+        Object value = null;\n+        int current = TestBean.currentCounter();\n+\n+        try {\n+\n+            // Return initial value of the counter\n+            value = MethodUtils.invokeExactMethod\n+                (bean, \"currentCounter\", new Object[0], new Class[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+            // Increment via no-arguments version\n+            MethodUtils.invokeExactMethod\n+                (bean, \"incrementCounter\", new Object[0], new Class[0]);\n+\n+            // Validate updated value\n+            current++;\n+            value = MethodUtils.invokeExactMethod\n+                (bean, \"currentCounter\", new Object[0], new Class[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+            // Increment via specified-argument version\n+            MethodUtils.invokeExactMethod\n+                (bean, \"incrementCounter\",\n+                 new Object[] { new Integer(5) },\n+                 new Class[] { Integer.TYPE });\n+\n+            // Validate updated value\n+            current += 5;\n+            value = MethodUtils.invokeExactMethod\n+                (bean, \"currentCounter\", new Object[0], new Class[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+\n+        } catch (Exception e) {\n+            fail(\"Threw exception\" + e);\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Simple tests for accessing static methods via getAccessibleMethod()\n+     */\n+    public void testSimpleStatic3() {\n+\n+        Object value = null;\n+        int current = TestBean.currentCounter();\n+\n+        try {\n+\n+            // Acquire the methods we need\n+            Method currentCounterMethod = MethodUtils.getAccessibleMethod\n+                (TestBean.class, \"currentCounter\",\n+                 new Class[0]);\n+            assertNotNull(\"currentCounterMethod exists\",\n+                          currentCounterMethod);\n+            assertEquals(\"currentCounterMethod name\",\n+                         \"currentCounter\",\n+                         currentCounterMethod.getName());\n+            assertEquals(\"currentCounterMethod args\",\n+                         0,\n+                         currentCounterMethod.getParameterTypes().length);\n+            assertTrue(\"currentCounterMethod public\",\n+                       Modifier.isPublic(currentCounterMethod.getModifiers()));\n+            assertTrue(\"currentCounterMethod static\",\n+                       Modifier.isStatic(currentCounterMethod.getModifiers()));\n+            Method incrementCounterMethod1 = MethodUtils.getAccessibleMethod\n+                (TestBean.class, \"incrementCounter\",\n+                 new Class[0]);\n+            assertNotNull(\"incrementCounterMethod1 exists\",\n+                          incrementCounterMethod1);\n+            assertEquals(\"incrementCounterMethod1 name\",\n+                         \"incrementCounter\",\n+                         incrementCounterMethod1.getName());\n+            assertEquals(\"incrementCounterMethod1 args\",\n+                         0,\n+                         incrementCounterMethod1.getParameterTypes().length);\n+            assertTrue(\"incrementCounterMethod1 public\",\n+                       Modifier.isPublic(incrementCounterMethod1.getModifiers()));\n+            assertTrue(\"incrementCounterMethod1 static\",\n+                       Modifier.isStatic(incrementCounterMethod1.getModifiers()));\n+            Method incrementCounterMethod2 = MethodUtils.getAccessibleMethod\n+                (TestBean.class, \"incrementCounter\",\n+                 new Class[] { Integer.TYPE });\n+            assertNotNull(\"incrementCounterMethod2 exists\",\n+                          incrementCounterMethod2);\n+            assertEquals(\"incrementCounterMethod2 name\",\n+                         \"incrementCounter\",\n+                         incrementCounterMethod2.getName());\n+            assertEquals(\"incrementCounterMethod2 args\",\n+                         1,\n+                         incrementCounterMethod2.getParameterTypes().length);\n+            assertTrue(\"incrementCounterMethod2 public\",\n+                       Modifier.isPublic(incrementCounterMethod2.getModifiers()));\n+            assertTrue(\"incrementCounterMethod2 static\",\n+                       Modifier.isStatic(incrementCounterMethod2.getModifiers()));\n+\n+            // Return initial value of the counter\n+            value = currentCounterMethod.invoke(null, new Object[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+            // Increment via no-arguments version\n+            incrementCounterMethod1.invoke(null, new Object[0]);\n+\n+            // Validate updated value\n+            current++;\n+            value = currentCounterMethod.invoke(null, new Object[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+            // Increment via specified-argument version\n+            incrementCounterMethod2.invoke(null,\n+                                           new Object[] { new Integer(5) });\n+\n+            // Validate updated value\n+            current += 5;\n+            value = currentCounterMethod.invoke(null, new Object[0]);\n+            assertNotNull(\"currentCounter exists\", value);\n+            assertTrue(\"currentCounter type\",\n+                       value instanceof Integer);\n+            assertEquals(\"currentCounter value\",\n+                         current,\n+                         ((Integer) value).intValue());\n+\n+        } catch (Exception e) {\n+            fail(\"Threw exception\" + e);\n+        }\n+\n+    }\n+\n+    public void testPublicSub() throws Exception {\n+        // make sure that bean does what it should\n+        PublicSubBean bean = new PublicSubBean();\n+        assertEquals(\"Start value (foo)\", bean.getFoo(), \"This is foo\");\n+        assertEquals(\"Start value (bar)\", bean.getBar(), \"This is bar\");\n+        bean.setFoo(\"new foo\");\n+        bean.setBar(\"new bar\");\n+        assertEquals(\"Set value (foo)\", bean.getFoo(), \"new foo\");\n+        assertEquals(\"Set value (bar)\", bean.getBar(), \"new bar\");\n+        \n+        // see if we can access public methods in a default access superclass\n+        // from a public access subclass instance\n+        MethodUtils.invokeMethod(bean, \"setFoo\", \"alpha\");\n+        assertEquals(\"Set value (foo:2)\", bean.getFoo(), \"alpha\");\n+        MethodUtils.invokeMethod(bean, \"setBar\", \"beta\");\n+        assertEquals(\"Set value (bar:2)\", bean.getFoo(), \"alpha\");\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/PrimitiveBean.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.lang.reflect;\n+\n+/**\n+ * Bean that has primitive properties\n+ */\n+public class PrimitiveBean {\n+\n+    private float _float;\n+    private double _double;\n+    private boolean _boolean;\n+    private long _long;\n+    private int _int;\n+    \n+    public float getFloat() {\n+        return _float;\n+    }\n+    \n+    public void setFloat(float _float) {\n+        this._float = _float;\n+    }\n+    \n+    public double getDouble() {\n+        return _double;\n+    }\n+    \n+    public void setDouble(double _double) {\n+        this._double = _double;\n+    }\n+    \n+    public boolean getBoolean() {\n+        return _boolean;\n+    }\n+    \n+    public void setBoolean(boolean _boolean) {\n+        this._boolean = _boolean;\n+    }\n+    \n+    public long getLong() {\n+        return _long;\n+    }\n+    \n+    public void setLong(long _long) {\n+        this._long = _long;\n+    }\n+    \n+    public int getInt() {\n+        return _int;\n+    }\n+    \n+    public void setInt(int _int) {\n+        this._int = _int;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.reflect;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test suite for the Reflect packages.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a> (of original copied from)\n+ * @author Robert Burrell Donkin\n+ * @version $Id: ReflectTestSuite.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ */\n+public class ReflectTestSuite extends TestCase {\n+    \n+    /**\n+     * Construct a new instance.\n+     */\n+    public ReflectTestSuite(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Executor-line interface.\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Get the suite of tests\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(MethodUtilsTestCase.suite());\n+        return suite;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/TestBean.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/Attic/TestBean.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect;\n+\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * General purpose test bean for JUnit tests for the \"beanutils\" component.\n+ *\n+ * @author Craig R. McClanahan\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+public class TestBean {\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     * A boolean property.\n+     */\n+    private boolean booleanProperty = true;\n+\n+    public boolean getBooleanProperty() {\n+        return (booleanProperty);\n+    }\n+\n+    public void setBooleanProperty(boolean booleanProperty) {\n+        this.booleanProperty = booleanProperty;\n+    }\n+\n+\n+    /**\n+     * A boolean property that uses an \"is\" method for the getter.\n+     */\n+    private boolean booleanSecond = true;\n+\n+    public boolean isBooleanSecond() {\n+        return (booleanSecond);\n+    }\n+\n+    public void setBooleanSecond(boolean booleanSecond) {\n+        this.booleanSecond = booleanSecond;\n+    }\n+\n+\n+    /**\n+     * A double property.\n+     */\n+    private double doubleProperty = 321.0;\n+\n+    public double getDoubleProperty() {\n+        return (this.doubleProperty);\n+    }\n+\n+    public void setDoubleProperty(double doubleProperty) {\n+        this.doubleProperty = doubleProperty;\n+    }\n+\n+\n+    /**\n+     * An \"indexed property\" accessible via both array and subscript\n+     * based getters and setters.\n+     */\n+    private String dupProperty[] =\n+    { \"Dup 0\", \"Dup 1\", \"Dup 2\", \"Dup 3\", \"Dup 4\" };\n+\n+    public String[] getDupProperty() {\n+        return (this.dupProperty);\n+    }\n+\n+    public String getDupProperty(int index) {\n+        return (this.dupProperty[index]);\n+    }\n+\n+    public void setDupProperty(int index, String value) {\n+        this.dupProperty[index] = value;\n+    }\n+\n+    public void setDupProperty(String dupProperty[]) {\n+        this.dupProperty = dupProperty;\n+    }\n+\n+\n+    /**\n+     * A float property.\n+     */\n+    private float floatProperty = (float) 123.0;\n+\n+    public float getFloatProperty() {\n+        return (this.floatProperty);\n+    }\n+\n+    public void setFloatProperty(float floatProperty) {\n+        this.floatProperty = floatProperty;\n+    }\n+\n+\n+    /**\n+     * An integer array property accessed as an array.\n+     */\n+    private int intArray[] = { 0, 10, 20, 30, 40 };\n+\n+    public int[] getIntArray() {\n+        return (this.intArray);\n+    }\n+\n+    public void setIntArray(int intArray[]) {\n+        this.intArray = intArray;\n+    }\n+\n+\n+    /**\n+     * An integer array property accessed as an indexed property.\n+     */\n+    private int intIndexed[] = { 0, 10, 20, 30, 40 };\n+\n+    public int getIntIndexed(int index) {\n+        return (intIndexed[index]);\n+    }\n+\n+    public void setIntIndexed(int index, int value) {\n+        intIndexed[index] = value;\n+    }\n+\n+\n+    /**\n+     * An integer property.\n+     */\n+    private int intProperty = 123;\n+\n+    public int getIntProperty() {\n+        return (this.intProperty);\n+    }\n+\n+    public void setIntProperty(int intProperty) {\n+        this.intProperty = intProperty;\n+    }\n+\n+\n+    /**\n+     * A List property accessed as an indexed property.\n+     */\n+    private static List listIndexed = new ArrayList();\n+\n+    static {\n+        listIndexed.add(\"String 0\");\n+        listIndexed.add(\"String 1\");\n+        listIndexed.add(\"String 2\");\n+        listIndexed.add(\"String 3\");\n+        listIndexed.add(\"String 4\");\n+    }\n+\n+    public List getListIndexed() {\n+        return (listIndexed);\n+    }\n+\n+\n+    /**\n+     * A long property.\n+     */\n+    private long longProperty = 321;\n+\n+    public long getLongProperty() {\n+        return (this.longProperty);\n+    }\n+\n+    public void setLongProperty(long longProperty) {\n+        this.longProperty = longProperty;\n+    }\n+\n+\n+    /**\n+     * A mapped property with only a getter and setter for a Map.\n+     */\n+    private Map mapProperty = null;\n+\n+    public Map getMapProperty() {\n+        // Create the map the very first time\n+        if (mapProperty == null) {\n+            mapProperty = new HashMap();\n+            mapProperty.put(\"First Key\", \"First Value\");\n+            mapProperty.put(\"Second Key\", \"Second Value\");\n+        }\n+        return (mapProperty);\n+    }\n+\n+    public void setMapProperty(Map mapProperty) {\n+        // Create the map the very first time\n+        if (mapProperty == null) {\n+            mapProperty = new HashMap();\n+            mapProperty.put(\"First Key\", \"First Value\");\n+            mapProperty.put(\"Second Key\", \"Second Value\");\n+        }\n+        this.mapProperty = mapProperty;\n+    }\n+\n+\n+    /**\n+     * A mapped property that has String keys and Object values.\n+     */\n+    private HashMap mappedObjects = null;\n+\n+    public Object getMappedObjects(String key) {\n+        // Create the map the very first time\n+        if (mappedObjects == null) {\n+            mappedObjects = new HashMap();\n+            mappedObjects.put(\"First Key\", \"First Value\");\n+            mappedObjects.put(\"Second Key\", \"Second Value\");\n+        }\n+        return (mappedObjects.get(key));\n+    }\n+\n+    public void setMappedObjects(String key, Object value) {\n+        // Create the map the very first time\n+        if (mappedObjects == null) {\n+            mappedObjects = new HashMap();\n+            mappedObjects.put(\"First Key\", \"First Value\");\n+            mappedObjects.put(\"Second Key\", \"Second Value\");\n+        }\n+        mappedObjects.put(key, value);\n+    }\n+\n+\n+    /**\n+     * A mapped property that has String keys and String values.\n+     */\n+    private HashMap mappedProperty = null;\n+\n+    public String getMappedProperty(String key) {\n+        // Create the map the very first time\n+        if (mappedProperty == null) {\n+            mappedProperty = new HashMap();\n+            mappedProperty.put(\"First Key\", \"First Value\");\n+            mappedProperty.put(\"Second Key\", \"Second Value\");\n+        }\n+        return ((String) mappedProperty.get(key));\n+    }\n+\n+    public void setMappedProperty(String key, String value) {\n+        // Create the map the very first time\n+        if (mappedProperty == null) {\n+            mappedProperty = new HashMap();\n+            mappedProperty.put(\"First Key\", \"First Value\");\n+            mappedProperty.put(\"Second Key\", \"Second Value\");\n+        }\n+        mappedProperty.put(key, value);\n+    }\n+\n+\n+    /**\n+     * A mapped property that has String keys and int values.\n+     */\n+    private HashMap mappedIntProperty = null;\n+\n+    public int getMappedIntProperty(String key) {\n+        // Create the map the very first time\n+        if (mappedProperty == null) {\n+            mappedProperty = new HashMap();\n+            mappedProperty.put(\"One\", new Integer(1));\n+            mappedProperty.put(\"Two\", new Integer(2));\n+        }\n+        Integer x = (Integer) mappedIntProperty.get(key);\n+        return ((x == null) ? 0 : x.intValue());\n+    }\n+\n+    public void setMappedIntProperty(String key, int value) {\n+        mappedIntProperty.put(key, new Integer(value));\n+    }\n+\n+\n+    /**\n+     * A nested reference to another test bean (populated as needed).\n+     */\n+    private TestBean nested = null;\n+\n+    public TestBean getNested() {\n+        if (nested == null)\n+            nested = new TestBean();\n+        return (nested);\n+    }\n+\n+\n+    /*\n+     * Another nested reference to a bean containing mapp properties\n+     */\n+    class MappedTestBean { \n+        public void setValue(String key,String val) { }\n+        public String getValue(String key) { return \"Mapped Value\"; }\n+    }\n+    \n+    private MappedTestBean mappedNested = null;\n+\n+    public MappedTestBean getMappedNested() { \n+        if (mappedNested == null) \n+        {\n+            mappedNested = new MappedTestBean();\n+        }\n+        return mappedNested;\n+    }\n+\n+    /**\n+     * A String property with an initial value of null.\n+     */\n+    private String nullProperty = null;\n+\n+    public String getNullProperty() {\n+        return (this.nullProperty);\n+    }\n+\n+    public void setNullProperty(String nullProperty) {\n+        this.nullProperty = nullProperty;\n+    }\n+\n+\n+    /**\n+     * A read-only String property.\n+     */\n+    private String readOnlyProperty = \"Read Only String Property\";\n+\n+    public String getReadOnlyProperty() {\n+        return (this.readOnlyProperty);\n+    }\n+\n+\n+    /**\n+     * A short property.\n+     */\n+    private short shortProperty = (short) 987;\n+\n+    public short getShortProperty() {\n+        return (this.shortProperty);\n+    }\n+\n+    public void setShortProperty(short shortProperty) {\n+        this.shortProperty = shortProperty;\n+    }\n+\n+\n+    /**\n+     * A String array property accessed as a String.\n+     */\n+    private String stringArray[] =\n+            { \"String 0\", \"String 1\", \"String 2\", \"String 3\", \"String 4\" };\n+\n+    public String[] getStringArray() {\n+        return (this.stringArray);\n+    }\n+\n+    public void setStringArray(String stringArray[]) {\n+        this.stringArray = stringArray;\n+    }\n+\n+\n+    /**\n+     * A String array property accessed as an indexed property.\n+     */\n+    private String stringIndexed[] =\n+            { \"String 0\", \"String 1\", \"String 2\", \"String 3\", \"String 4\" };\n+\n+    public String getStringIndexed(int index) {\n+        return (stringIndexed[index]);\n+    }\n+\n+    public void setStringIndexed(int index, String value) {\n+        stringIndexed[index] = value;\n+    }\n+\n+\n+    /**\n+     * A String property.\n+     */\n+    private String stringProperty = \"This is a string\";\n+\n+    public String getStringProperty() {\n+        return (this.stringProperty);\n+    }\n+\n+    public void setStringProperty(String stringProperty) {\n+        this.stringProperty = stringProperty;\n+    }\n+\n+\n+    /**\n+     * A write-only String property.\n+     */\n+    private String writeOnlyProperty = \"Write Only String Property\";\n+\n+    public String getWriteOnlyPropertyValue() {\n+        return (this.writeOnlyProperty);\n+    }\n+\n+    public void setWriteOnlyProperty(String writeOnlyProperty) {\n+        this.writeOnlyProperty = writeOnlyProperty;\n+    }\n+\n+    \n+    // ------------------------------------------------------- Static Variables\n+\n+\n+    /**\n+     * A static variable that is accessed and updated via static methods\n+     * for MethodUtils testing.\n+     */\n+    private static int counter = 0;\n+\n+\n+    /**\n+     * Return the current value of the counter.\n+     */\n+    public static int currentCounter() {\n+\n+        return (counter);\n+\n+    }\n+\n+\n+    /**\n+     * Increment the current value of the counter by 1.\n+     */\n+    public static void incrementCounter() {\n+\n+        incrementCounter(1);\n+\n+    }\n+\n+\n+    /**\n+     * Increment the current value of the counter by the specified amount.\n+     *\n+     * @param amount Amount to be added to the current counter\n+     */\n+    public static void incrementCounter(int amount) {\n+\n+        counter += amount;\n+\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PackageBean.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PackageBean.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * <p>This class is designed to test the default access jvm problem workaround.\n+ * The issue is that public methods of a public subclass contained in a default access\n+ * superclass are returned by reflection but an IllegalAccessException is thrown \n+ * when they are invoked.</p>\n+ *\n+ * <p>This is the default access superclass</p>\n+ * \n+ * @author Robert Burrell Donkin\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+class PackageBean {\n+\n+\n+    // ----------------------------------------------------------- Constructors\n+\n+\n+    /**\n+     * Package private constructor - can only use factory method to create\n+     * beans.\n+     */\n+    PackageBean() {\n+\n+        super();\n+\n+    }\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     */\n+    private String bar = \"This is bar\";\n+\n+    public String getBar() {\n+\n+        return (this.bar);\n+\n+    }\n+    \n+    public void setBar(String bar) {\n+\n+        this.bar = bar;\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PrivateBean.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateBean.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * Bean that has a private constructor that exposes properties via\n+ * various mechanisms (based on property name):\n+ * <ul>\n+ * <li><strong>foo</strong> - Via direct public method\n+ * <li><strong>bar</strong> - Via directly implemented interface\n+ * <li><strong>baz</strong> - Via indirectly implemented interface\n+ * </ul>\n+ *\n+ * @author Craig R. McClanahan\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+class PrivateBean implements PrivateDirect {\n+\n+\n+    // ----------------------------------------------------------- Constructors\n+\n+\n+    /**\n+     * Package private constructor - can only use factory method to create\n+     * beans.\n+     */\n+    PrivateBean() {\n+\n+        super();\n+\n+    }\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     * A directly implemented property.\n+     */\n+    private String foo = \"This is foo\";\n+\n+    public String getFoo() {\n+\n+        return (this.foo);\n+\n+    }\n+\n+\n+    /**\n+     * A property accessible via a directly implemented interface.\n+     */\n+    private String bar = \"This is bar\";\n+\n+    public String getBar() {\n+\n+        return (this.bar);\n+\n+    }\n+\n+\n+    /**\n+     * A method accessible via a directly implemented interface.\n+     */\n+    public String methodBar(String in) {\n+\n+        return (in);\n+\n+    }\n+\n+\n+    /**\n+     * A property accessible via an indirectly implemented interface.\n+     */\n+    private String baz = \"This is baz\";\n+\n+    public String getBaz() {\n+\n+        return (this.baz);\n+\n+    }\n+\n+\n+    /**\n+     * A method accessible via an indirectly implemented interface.\n+     */\n+    public String methodBaz(String in) {\n+\n+        return (in);\n+\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PrivateBeanFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateBeanFactory.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * Factory class for PrivateBean instances.\n+ *\n+ * @author Craig R. McClanahan\n+ * @author Jan Sorensen\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+public class PrivateBeanFactory {\n+\n+\n+    /**\n+     * Factory method to create new beans.\n+     */\n+    public static PrivateDirect create() {\n+\n+        return (new PrivateBean());\n+\n+    }\n+\n+\n+    /**\n+     * Factory method to create new beans.\n+     */\n+    public static PrivateDirect createSubclass() {\n+\n+        return (new PrivateBeanSubclass());\n+\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PrivateBeanSubclass.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateBeanSubclass.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * Bean that exposes methods defined by an interface that is implemented\n+ * in the superclass.\n+ *\n+ * @author Jan Sorensen\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+class PrivateBeanSubclass extends PrivateBean {\n+\n+\n+    // ----------------------------------------------------------- Constructors\n+\n+\n+    /**\n+     * Create a new PrivateBeanSubclass instance.\n+     */\n+    PrivateBeanSubclass() {\n+\n+        super();\n+\n+    }\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     * A property accessible via the superclass.\n+     */\n+    public String getBar() {\n+\n+        return (super.getBar());\n+\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PrivateDirect.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateDirect.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * Interface that is directly implemented by PrivateBean.\n+ *\n+ * @author Craig R. McClanahan\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+public interface PrivateDirect extends PrivateIndirect {\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     * A property accessible via a directly implemented interface.\n+     */\n+    String getBar();\n+\n+\n+    /**\n+     * A method accessible via a directly implemented interface.\n+     */\n+    String methodBar(String in);\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PrivateIndirect.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PrivateIndirect.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * Interface that is indirectly implemented by PrivateBean.\n+ *\n+ * @author Craig R. McClanahan\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+public interface PrivateIndirect {\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     * A property accessible via an indirectly implemented interface.\n+     */\n+    public String getBaz();\n+\n+\n+    /**\n+     * A method accessible via an indirectly implemented interface.\n+     */\n+    public String methodBaz(String in);\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/priv/PublicSubBean.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/reflect/priv/Attic/PublicSubBean.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/14 18:53:36 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect.priv;\n+\n+\n+/**\n+ * <p>This class is designed to test the default access jvm problem workaround.\n+ * The issue is that public methods of a public subclass contained in a default access\n+ * superclass are returned by reflection but an IllegalAccessException is thrown \n+ * when they are invoked.</p>\n+ *\n+ * <p>This is the default access superclass</p>\n+ *\n+ * @author Robert Burrell Donkin\n+ * @version $Revision: 1.1 $ $Date: 2002/11/14 18:53:36 $\n+ */\n+\n+public class PublicSubBean extends PackageBean {\n+\n+\n+    // ----------------------------------------------------------- Constructors\n+\n+\n+    /**\n+     * Package private constructor - can only use factory method to create\n+     * beans.\n+     */\n+    public PublicSubBean() {\n+\n+        super();\n+\n+    }\n+\n+\n+    // ------------------------------------------------------------- Properties\n+\n+\n+    /**\n+     * A directly implemented property.\n+     */\n+    private String foo = \"This is foo\";\n+\n+    public String getFoo() {\n+\n+        return (this.foo);\n+\n+    }\n+    \n+    public void setFoo(String foo) {\n+\n+        this.foo = foo;\n+\n+    }\n+}", "timestamp": 1037300016, "metainfo": ""}