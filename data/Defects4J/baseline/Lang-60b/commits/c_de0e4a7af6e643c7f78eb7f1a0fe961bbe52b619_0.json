{"sha": "de0e4a7af6e643c7f78eb7f1a0fe961bbe52b619", "log": "initial performance testing for Entities   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  */\n package org.apache.commons.lang;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.*;\n \n /**\n  * <p>Provides HTML and XML entity utilities.</p>\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.5 2003/05/24 04:35:06 alex Exp $\n+ * @version $Id: Entities.java,v 1.6 2003/05/24 13:29:44 alex Exp $\n  */\n class Entities {\n \n         {\"gt\", \"62\"}, // > - greater-than\n     };\n \n-    static private String[][] apos = {\n+    static String[][] apos = {\n         {\"apos\", \"39\"}, // XML apostrophe\n     };\n \n-    static private String[][] iso8859_1 = {\n+    static String[][] iso8859_1 = {\n         {\"nbsp\", \"160\"}, // non-breaking space\n         {\"iexcl\", \"161\"}, //inverted exclamation mark\n         {\"cent\", \"162\"}, //cent sign\n \n     static {\n         HTML40 = new Entities();\n-        HTML40.addEntities(basic);\n-        HTML40.addEntities(iso8859_1);\n-        HTML40.addEntities(html40);\n-    }\n-\n-    static class IntMap {\n-        private Map mapNameToValue = new HashMap();\n-        private Map mapValueToName = new HashMap();\n+        fillWithHtml40Entities(HTML40);\n+    }\n+\n+    static void fillWithHtml40Entities(Entities entities) {\n+        entities.addEntities(basic);\n+        entities.addEntities(iso8859_1);\n+        entities.addEntities(html40);\n+    }\n+\n+    static interface IntMap {\n+        void add(String name, int value);\n+\n+        String name(int value);\n+\n+        int value(String name);\n+    }\n+\n+    static abstract class MapIntMap implements IntMap {\n+        protected Map mapNameToValue;\n+        protected Map mapValueToName;\n \n         public void add(String name, int value) {\n             mapNameToValue.put(name, new Integer(value));\n             mapValueToName.put(new Integer(value), name);\n         }\n \n-        private String name(int value) {\n+        public String name(int value) {\n             return (String) mapValueToName.get(new Integer(value));\n         }\n \n-        private int value(String name) {\n+        public int value(String name) {\n             Object value = mapNameToValue.get(name);\n             if (value == null)\n                 return -1;\n         }\n     }\n \n-    IntMap map = new IntMap();\n+    static class HashIntMap extends MapIntMap {\n+        public HashIntMap() {\n+            mapNameToValue = new HashMap();\n+            mapValueToName = new HashMap();\n+        }\n+    }\n+\n+    static class TreeIntMap extends MapIntMap {\n+        public TreeIntMap() {\n+            mapNameToValue = new TreeMap();\n+            mapValueToName = new TreeMap();\n+        }\n+    }\n+\n+    static class ArrayIntMap implements IntMap {\n+        int growBy = 100;\n+        private int size = 0;\n+        private String[] names = new String[growBy];\n+        private int[] values = new int[growBy];\n+\n+        public void add(String name, int value) {\n+            ensureCapacity(size + 1);\n+            names[size] = name;\n+            values[size] = value;\n+            size++;\n+        }\n+\n+        private void ensureCapacity(int capacity) {\n+            if (capacity > names.length) {\n+                int newSize = Math.max(capacity, size + growBy);\n+                String[] newNames = new String[newSize];\n+                System.arraycopy(names, 0, newNames, 0, size);\n+                names = newNames;\n+                int[] newValues = new int[newSize];\n+                System.arraycopy(values, 0, newValues, 0, size);\n+                values = newValues;\n+            }\n+        }\n+\n+        public String name(int value) {\n+            for (int i = 0; i < size; ++i) {\n+                if (values[i] == value) {\n+                    return names[i];\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public int value(String name) {\n+            for (int i = 0; i < size; ++i) {\n+                if (names[i].equals(name)) {\n+                    return values[i];\n+                }\n+            }\n+            return -1;\n+        }\n+    }\n+\n+    IntMap map = new HashIntMap();\n \n     public void addEntities(String[][] entityArray) {\n         for (int i = 0; i < entityArray.length; ++i) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.io.IOException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+import junit.extensions.RepeatedTest;\n+\n+public class EntitiesPerformanceTest extends TestCase {\n+    private int COUNT = 200;\n+    private int STRING_LENGTH = 1000;\n+\n+    private static String stringWithUnicode;\n+    private static String stringWithEntities;\n+    private static Entities treeEntities;\n+    private static Entities hashEntities;\n+    private static Entities arrayEntities;\n+\n+    public EntitiesPerformanceTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EntitiesPerformanceTest.class);\n+//        suite.setName(\"Entities Performance Tests\");\n+//        return new RepeatedTest(suite, 1000);\n+        return suite;\n+    }\n+\n+    public void setUp() {\n+        if (stringWithUnicode == null) {\n+            StringBuffer buf = new StringBuffer(STRING_LENGTH);\n+            for (int i = 0; i < STRING_LENGTH/5; ++i) {\n+                buf.append(\"xxxx\");\n+                String entityValue = Entities.html40[i % Entities.html40.length][1];\n+                char ch = (char) Integer.parseInt(entityValue);\n+                buf.append(ch);\n+            }\n+            stringWithUnicode = buf.toString();\n+            stringWithEntities = Entities.HTML40.unescape(stringWithUnicode);\n+        }\n+\n+    }\n+\n+    public void testBuildHash() throws Exception {\n+        for (int i = 0; i < COUNT; ++i) {\n+            hashEntities = new Entities();\n+            hashEntities.map = new Entities.HashIntMap();\n+            Entities.fillWithHtml40Entities(hashEntities);\n+        }\n+    }\n+\n+    public void testBuildTree() throws Exception {\n+        for (int i = 0; i < COUNT; ++i) {\n+            treeEntities = new Entities();\n+            treeEntities.map = new Entities.TreeIntMap();\n+            Entities.fillWithHtml40Entities(treeEntities);\n+        }\n+    }\n+\n+    public void testBuildArray() throws Exception {\n+        for (int i = 0; i < COUNT; ++i) {\n+            arrayEntities = new Entities();\n+            arrayEntities.map = new Entities.ArrayIntMap();\n+            Entities.fillWithHtml40Entities(arrayEntities);\n+        }\n+    }\n+\n+    public void testEscapeHash() throws Exception {\n+        escapeIt(hashEntities);\n+    }\n+\n+    public void testEscapeTree() throws Exception {\n+        escapeIt(treeEntities);\n+    }\n+\n+    public void testEscapeArray() throws Exception {\n+        escapeIt(arrayEntities);\n+    }\n+\n+    public void testUnscapeHash() throws Exception {\n+        unescapeIt(hashEntities);\n+    }\n+\n+    public void testUnscapeTree() throws Exception {\n+        unescapeIt(treeEntities);\n+    }\n+\n+    public void testUnescapeArray() throws Exception {\n+        unescapeIt(arrayEntities);\n+    }\n+\n+    private void escapeIt(Entities entities) {\n+        for (int i = 0; i < COUNT; ++i) {\n+            String escaped  = entities.escape(stringWithUnicode);\n+            assertEquals(\"xxxx&fnof;\", escaped.substring(0,10));\n+        }\n+    }\n+\n+    private void unescapeIt(Entities entities) {\n+        for (int i = 0; i < COUNT; ++i) {\n+            String unescaped  = entities.unescape(stringWithEntities);\n+            assertEquals(\"xxxx\\u0192\", unescaped.substring(0,5));\n+        }\n+    }\n+\n+\n+\n+}\n+\n--- a/src/test/org/apache/commons/lang/EntitiesTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: EntitiesTest.java,v 1.2 2003/05/24 04:38:05 alex Exp $\n+ * @version $Id: EntitiesTest.java,v 1.3 2003/05/24 13:29:44 alex Exp $\n  */\n public class EntitiesTest extends TestCase\n {\n         assertEquals((int) '>', Entities.XML.entityValue(\"gt\"));\n         assertEquals(-1, Entities.XML.entityValue(\"xyzzy\"));\n     }\n+\n+    public void testArrayIntMap() throws Exception\n+    {\n+        Entities.ArrayIntMap map = new Entities.ArrayIntMap();\n+        map.growBy = 2;\n+        map.add(\"foo\", 1);\n+        assertEquals(1, map.value(\"foo\"));\n+        assertEquals(\"foo\", map.name(1));\n+        map.add(\"bar\", 2);\n+        map.add(\"baz\", 3);\n+        assertEquals(3, map.value(\"baz\"));\n+        assertEquals(\"baz\", map.name(3));\n+    }\n }\n ", "timestamp": 1053782984, "metainfo": ""}