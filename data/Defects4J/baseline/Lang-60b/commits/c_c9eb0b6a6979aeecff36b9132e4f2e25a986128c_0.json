{"sha": "c9eb0b6a6979aeecff36b9132e4f2e25a986128c", "log": "o Changed type of \"cause\" instance field from Nestable to Throwable. Since implementation of Throwable is already required, this doesn't change the interface, but does simplify the internals.  o Simplified code in getThrowableCount() method by removing extraneous null check and extra reference.  o Implemented suggestion by Joachim.Sauer@tp-soft.com to use ExceptionUtils where Nestable.getCause() was previously called.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableDelegate.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n+ * @version $Id: NestableDelegate.java,v 1.3 2002/08/21 07:22:47 dlr Exp $\n  */\n public class NestableDelegate\n {\n         + \"constructor must extend java.lang.Throwable\";\n \n     /**\n-     * Holds the reference to the exception or error that caused\n-     * this exception to be thrown.\n-     */\n-    private Nestable cause = null;\n+     * Holds the reference to the exception or error that caused this\n+     * exception to be thrown.\n+     */\n+    private Throwable cause = null;\n \n     /**\n      * Constructs a new <code>NestableDelegate</code> instance to manage the\n     {\n         if (cause instanceof Throwable)\n         {\n-            this.cause = cause;\n+            this.cause = (Throwable) cause;\n         }\n         else\n         {\n             msg.append(baseMsg);\n         }\n \n-        Throwable nestedCause = cause.getCause();\n+        Throwable nestedCause = ExceptionUtils.getCause(this.cause);\n         if (nestedCause != null)\n         {\n             String causeMsg = nestedCause.getMessage();\n      */\n     String[] getMessages() // package\n     {\n-        Throwable throwables[] = this.getThrowables();\n+        Throwable[] throwables = this.getThrowables();\n         String[] msgs = new String[throwables.length];\n         for(int i = 0; i < throwables.length; i++)\n         {\n     {\n         if(index == 0)\n         {\n-            return (Throwable) this.cause;\n+            return this.cause;\n         }\n         Throwable[] throwables = this.getThrowables();\n         return throwables[index];\n         // Count the number of throwables\n         int count = 1;\n         String msg = null;\n-        if(this.cause.getCause() == null)\n-        {\n-            return count;\n-        }\n-        Throwable t = this.cause.getCause();\n-        while(t != null)\n+        Throwable t = ExceptionUtils.getCause(this.cause);\n+        while (t != null)\n         {\n             ++count;\n-            if(Nestable.class.isInstance(t))\n-            {\n-                t = ((Nestable) t).getCause();\n-            }\n-            else\n-            {\n-                t = null;\n-            }\n+            t = ExceptionUtils.getCause(t);\n         }\n         return count;\n     }\n         count = 0;\n         if(cause != null)\n         {\n-            throwables[count++] = (Throwable) this.cause;\n-            Throwable t = this.cause.getCause();\n+            throwables[count++] = this.cause;\n+            Throwable t = ExceptionUtils.getCause(this.cause);\n             while(t != null)\n             {\n                 throwables[count++] = t;\n-                if(Nestable.class.isInstance(t))\n-                {\n-                    t = ((Nestable) t).getCause();\n-                }\n-                else\n-                {\n-                    t = null;\n-                }\n+                t = ExceptionUtils.getCause(t);\n             }\n         }\n         return throwables;\n     {\n         synchronized (out)\n         {\n-            String[] st = decompose((Throwable) cause);\n-            Throwable nestedCause = cause.getCause();\n+            String[] st = decompose(this.cause);\n+            Throwable nestedCause = ExceptionUtils.getCause(this.cause);\n             if (nestedCause != null)\n             {\n                 if (nestedCause instanceof Nestable)", "timestamp": 1029914567, "metainfo": ""}