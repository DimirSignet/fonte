{"sha": "445e48305353412483819acabe531a4facad187f", "log": "Fix Node equivalence checks for -0.0. Completes fix started with r1519. Fixes issue 582.  R=nicksantos DELTA=24  (21 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4154   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n \n     @Override\n     boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n-      return (super.isEquivalentTo(node, compareJsType, recurse)\n-          && getDouble() == ((NumberNode) node).getDouble());\n+      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n+      if (equivalent) {\n+        double thisValue = getDouble();\n+        double thatValue = ((NumberNode) node).getDouble();\n+        if (thisValue == thatValue) {\n+          // detect the difference between 0.0 and -0.0.\n+          return (thisValue != 0.0) || (1/thisValue == 1/thatValue);\n+        }\n+      }\n+      return false;\n     }\n \n     private double number;\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     test(options, code, result);\n   }\n \n+  public void testNegativeZero() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel.ADVANCED_OPTIMIZATIONS\n+        .setOptionsForCompilationLevel(options);\n+    test(options,\n+        \"function bar(x) { return x; }\\n\" +\n+        \"function foo(x) { print(x / bar(0));\\n\" +\n+        \"                 print(x / bar(-0)); }\\n\" +\n+        \"foo(3);\",\n+        \"print(3/0);print(3/-0);\");\n+  }\n+\n   private void testSame(CompilerOptions options, String original) {\n     testSame(options, new String[] { original });\n   }\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     fold(\"a=!10\", \"a=false\");\n     fold(\"a=!false\", \"a=true\");\n     fold(\"a=!foo()\", \"a=!foo()\");\n-    fold(\"a=-0\", \"a=0\");\n+    fold(\"a=-0\", \"a=-0.0\");\n+    fold(\"a=-(0)\", \"a=-0.0\");\n     fold(\"a=-Infinity\", \"a=-Infinity\");\n     fold(\"a=-NaN\", \"a=NaN\");\n     fold(\"a=-foo()\", \"a=-foo()\");", "timestamp": 1327958490, "metainfo": ""}