{"sha": "5e8beda6713663c93b5784f6a3be276927024bdb", "log": "Do not count leading NOT in EXPR_RESULT.  Ignore the leading NOT in EXPR_RESULTs in PeepholeMinimizeConditions, as it will be optimized away by PeepholeRemoveDeadCode. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=46305466", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java\n+++ b/src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java\n         return tryMinimizeIf(node);\n \n       case Token.EXPR_RESULT:\n-        tryMinimizeCondition(node.getFirstChild(), true);\n+        tryMinimizeCondition(node.getFirstChild(), false);\n         return node;\n \n       case Token.HOOK:\n    * Returns the replacement for n or the original if no change was made\n    */\n   private Node tryMinimizeNot(Node n) {\n+    Preconditions.checkArgument(n.isNot());\n     Node parent = n.getParent();\n \n     Node notChild = n.getFirstChild();\n--- a/test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java\n          \"x ? bar() : foo()\");\n   }\n \n+  public void testMinimizeExprResult() {\n+    fold(\"!x||!y\", \"!(x&&y)\");\n+    fold(\"if(!(x&&!y)) foo()\", \"!(x&&!y||!foo())\");\n+    fold(\"if(!x||y) foo()\", \"!(x&&!y||!foo())\");\n+  }\n+\n   public void testMinimizeDemorgan21() {\n     fold(\"if (0===c && (2===a || 1===a)) f()\",\n          \"(0!==c || 2!==a && 1!==a) || f()\");", "timestamp": 1367968335, "metainfo": ""}