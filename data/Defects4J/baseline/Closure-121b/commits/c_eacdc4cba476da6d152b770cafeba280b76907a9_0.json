{"sha": "eacdc4cba476da6d152b770cafeba280b76907a9", "log": "Use the namespace as a global variable name when using renamePrefixNamespace. The issue here is that if a symbold is not used across modules it remains in the global namespace until the module is wrapped using the output wrapper. This cause the sanity check to fail because the global variable is declared twice one in the externs and then at the usage. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48692547", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     boolean preserveAnonymousFunctionNames =\n         options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n     Set<String> reservedNames = Sets.newHashSet();\n+    if (options.renamePrefixNamespace != null) {\n+      // don't use the prefix name as a global symbol.\n+      reservedNames.add(options.renamePrefixNamespace);\n+    }\n     if (exportedNames != null) {\n       reservedNames.addAll(exportedNames);\n     }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     test(options, code, \"_.x = null; try { +_.x.FOO; } catch (e) {}\");\n   }\n \n+  public void testRenameCollision() {\n+    String code = \"\" +\n+          \"/**\\n\" +\n+          \" * @fileoverview\\n\" +\n+          \" * @suppress {uselessCode}\\n\" +\n+          \" */\" +\n+          \"var x = {};\\ntry {\\n(0,use)(x.FOO);\\n} catch (e) {}\";\n+\n+    CompilerOptions options = createCompilerOptions();\n+    testSame(options, code);\n+\n+    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(\n+        options);\n+    options.renamePrefixNamespace = \"a\";\n+    options.setVariableRenaming(VariableRenamingPolicy.ALL);\n+    WarningLevel.DEFAULT.setOptionsForWarningLevel(options);\n+\n+    RescopeGlobalSymbols.assumeCrossModuleNames = false;\n+\n+    test(options, code,\n+        \"var b = {}; try { (0,window.use)(b.FOO); } catch (c) {}\");\n+  }\n+\n   public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n     CompilerOptions options = createCompilerOptions();\n     String code = \"var x = f; function f() { return 3; }\";", "timestamp": 1372460974, "metainfo": ""}