{"sha": "285589f450c4b4368938ebc24acf236efc7eabb3", "log": "Gather global unrenamable names. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45111786", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   final PassFactory gatherCharBias = new PassFactory(\"gatherCharBias\", true) {\n     @Override\n     protected CompilerPass create(AbstractCompiler compiler) {\n-      return new GatherCharacterEncodingBias(compiler, getNameGenerator());\n+      return new GatherCharacterEncodingBias(\n+          compiler,\n+          getNameGenerator(),\n+          options.variableRenaming != VariableRenamingPolicy.LOCAL);\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n+++ b/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n  */\n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Preconditions;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n     implements CompilerPass {\n   private final NameGenerator nameGenerator;\n   private final AbstractCompiler compiler;\n+  private final boolean renameGlobaVars;\n \n   public GatherCharacterEncodingBias(\n-      final AbstractCompiler compiler, final NameGenerator ng) {\n+      final AbstractCompiler compiler, final NameGenerator ng,\n+      boolean renameGlobalVars) {\n     this.compiler = compiler;\n     this.nameGenerator = ng;\n+    this.renameGlobaVars = renameGlobalVars;\n   }\n \n   @Override\n       // peephole optimization pass.\n         return;\n \n+      case Token.LABEL_NAME:\n+        return;\n+\n+      // Case dealing with renamed names / properties are *NOT* handled here.\n+      // The idea is not to duplicate logics of variable renaming and property\n+      // renaming.\n       case Token.NAME:\n-      case Token.LABEL_NAME:\n-      // Case dealing with names / properties are *NOT* handled here. The idea\n-      // is not to duplicate logics of variable renaming and property renaming.\n-      // Those passes are responsible for calling favors() on anything they\n-      // could not rename.\n+        visitName(t, n);\n+\n         return;\n \n       case Token.FUNCTION:\n \n     }\n   }\n+\n+  private void visitName(NodeTraversal t, Node n) {\n+    Preconditions.checkArgument(n.getType() == Token.NAME);\n+    if (renameGlobaVars) {\n+      // Assumes everything can be renamed. Don't change bias.\n+      return;\n+    }\n+    String name = n.getString();\n+    Var var = t.getScope().getVar(name);\n+    if (var == null || var.scope.isGlobal()) {\n+      nameGenerator.favors(name);\n+    }\n+  }\n }\n--- a/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n+++ b/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n public class GatherCharacterEncodingBiasTest extends CompilerTestCase {\n \n   private NameGenerator generator;\n+  private boolean renameGlobalVars;\n \n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     generator = new NameGenerator(new HashSet<String>(0), \"\", null);\n-    return new GatherCharacterEncodingBias(compiler, generator);\n+    return new GatherCharacterEncodingBias(\n+        compiler, generator, renameGlobalVars);\n+  }\n+\n+  @Override\n+  protected void setUp() {\n+    renameGlobalVars = true;\n   }\n \n   @Override\n     assertEquals(\"u\", generator.generateNextName());\n     assertEquals(\"a\", generator.generateNextName());\n   }\n+\n+  public void testGatheringNames1() {\n+    testSame(\"var MMMMMM\");\n+    generator.restartNaming();\n+    assertEquals(\"a\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringNames2() {\n+    renameGlobalVars = false;\n+    testSame(\"var MMMMMM\");\n+    generator.restartNaming();\n+    assertEquals(\"M\", generator.generateNextName());\n+    assertEquals(\"a\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringNames3() {\n+    testSame(\"var x = function() { var MMMMMMMMMMMMMMMMMMM }\");\n+    generator.restartNaming();\n+    assertNotSame(\"M\", generator.generateNextName());\n+  }\n }", "timestamp": 1365635922, "metainfo": ""}