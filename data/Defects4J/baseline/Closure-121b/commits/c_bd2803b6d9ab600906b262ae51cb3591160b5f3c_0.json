{"sha": "bd2803b6d9ab600906b262ae51cb3591160b5f3c", "log": "Fix bug in MinimizeExitPoints with removing breaks inside finally blocks.  According to the ECMAScript standard, a finally should only resume an exception if it exits without a break, continue, return, or another throw.  This change does unfortunately not yet fix issue 936 because the same bug exists in UnreachableCodeElimination. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44335812", "commit": "\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n         Node catchCodeBlock = catchNode.getLastChild();\n         tryMinimizeExits(catchCodeBlock, exitType, labelName);\n       }\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+      /* Don't try to minimize the exits of finally blocks, as this\n+       * can cause problems if it changes the completion type of the finally\n+       * block. See ECMA 262 Sections 8.9 & 12.14\n+       */\n     }\n \n     // Just a 'label'.\n--- a/src/com/google/javascript/jscomp/RemoveTryCatch.java\n+++ b/src/com/google/javascript/jscomp/RemoveTryCatch.java\n /**\n  * Removes try catch finally blocks from a parse tree for easier debugging\n  * (these statements impact both debugging in IE and sometimes even in FF).\n+ *\n+ * This changes the semantics of the code and should not be used in production!\n  *\n  */\n class RemoveTryCatch implements CompilerPass {\n--- a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java\n+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java\n          \"function f(){while(a())break}\");\n     foldSame(\"function f(){for(x in a())break}\");\n \n-    fold(\"function f(){try{return;}catch(e){return;}finally{return}}\",\n-         \"function f(){try{}catch(e){}finally{}}\");\n+    fold(\"function f(){try{return;}catch(e){throw 9;}finally{return}}\",\n+         \"function f(){try{}catch(e){throw 9;}finally{return}}\");\n+    foldSame(\"function f(){try{throw 9;}finally{return;}}\");\n+\n     fold(\"function f(){try{return;}catch(e){return;}}\",\n          \"function f(){try{}catch(e){}}\");\n-    fold(\"function f(){try{return;}finally{return;}}\",\n-         \"function f(){try{}finally{}}\");\n     fold(\"function f(){try{if(a()){return;}else{return;} return;}catch(e){}}\",\n          \"function f(){try{if(a()){}else{}}catch(e){}}\");\n \n          \"function f(){}\");\n     fold(\"function f(){g:if(a()){return;}else{return;} return;}\",\n          \"function f(){g:if(a()){}else{}}\");\n-    fold(\"function f(){try{g:if(a()){} return;}finally{return}}\",\n-         \"function f(){try{g:if(a()){}}finally{}}\");\n+    fold(\"function f(){try{g:if(a()){throw 9;} return;}finally{return}}\",\n+         \"function f(){try{g:if(a()){throw 9;}}finally{return}}\");\n   }\n \n   public void testWhileContinueOptimization() throws Exception {\n     fold(\"function f() { if (x) return; foo(); function foo() {} }\",\n          \"function f() { if (x); else { function foo() {} foo(); } }\");\n   }\n+\n+  public void testDontRemoveBreakInTryFinally() throws Exception {\n+    foldSame(\"function f() {b:try{throw 9} finally {break b} return 1;}\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/RemoveTryCatchTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveTryCatchTest.java\n   public void testIfTryCatch() {\n     test(\"if(x)try{y;z}catch(e){}\", \"if(x){y;z}\");\n   }\n+\n+  public void testRemoveTryCatchIsNotAnOptimization() {\n+    test(\"try { throw fire } finally { putOutFire() }\",\n+         \"throw fire;putOutFire()\");\n+  }\n }", "timestamp": 1364000149, "metainfo": ""}