{"sha": "1d3903edee0df7fd29badd2e91a110adbdc85e6b", "log": "Do template type replacement of unknown types too  R=johnlenz DELTA=38  (22 added, 1 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5949   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n   private static class TemplateTypeReplacer extends ModificationVisitor {\n     private final Map<TemplateType, JSType> replacements;\n     private final JSTypeRegistry registry;\n+    boolean madeChanges = false;\n \n     TemplateTypeReplacer(\n         JSTypeRegistry registry, Map<TemplateType, JSType> replacements) {\n \n     @Override\n     public JSType caseTemplateType(TemplateType type) {\n+      madeChanges = true;\n       JSType replacement = replacements.get(type);\n       return replacement != null ?\n           replacement : registry.getNativeType(UNKNOWN_TYPE);\n     // Try to infer the template types\n     Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(\n         fnType, n);\n-    if (inferred.size() > 0) {\n-      // Something useful was found, try to replace it.\n-      TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n-          registry, inferred);\n-      Node callTarget = n.getFirstChild();\n-\n-      FunctionType replacementFnType = fnType.visit(replacer)\n-          .toMaybeFunctionType();\n-      Preconditions.checkNotNull(replacementFnType);\n-\n-      callTarget.setJSType(replacementFnType);\n-      n.setJSType(replacementFnType.getReturnType());\n-\n-      return true;\n-    }\n-    return false;\n+\n+    // Replace all template types. If we couldn't find a replacement, we\n+    // replace it with UNKNOWN.\n+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n+        registry, inferred);\n+    Node callTarget = n.getFirstChild();\n+\n+    FunctionType replacementFnType = fnType.visit(replacer)\n+        .toMaybeFunctionType();\n+    Preconditions.checkNotNull(replacementFnType);\n+\n+    callTarget.setJSType(replacementFnType);\n+    n.setJSType(replacementFnType.getReturnType());\n+\n+    return replacer.madeChanges;\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"function foo(x) { return x.index; }\");\n   }\n \n+  public void testBug7701884() throws Exception {\n+    testTypes(\n+        \"/**\\n\" +\n+        \" * @param {Array.<T>} x\\n\" +\n+        \" * @param {function(T)} y\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"var forEach = function(x, y) {\\n\" +\n+        \"  for (var i = 0; i < x.length; i++) y(x[i]);\\n\" +\n+        \"};\" +\n+        \"/** @param {number} x */\" +\n+        \"function f(x) {}\" +\n+        \"/** @param {?} x */\" +\n+        \"function h(x) {\" +\n+        \"  var top = null;\" +\n+        \"  forEach(x, function(z) { top = z; });\" +\n+        \"  if (top) f(top);\" +\n+        \"}\");\n+  }\n+\n   public void testScopedConstructors1() throws Exception {\n     testTypes(\n         \"function foo1() { \" +", "timestamp": 1355168936, "metainfo": ""}