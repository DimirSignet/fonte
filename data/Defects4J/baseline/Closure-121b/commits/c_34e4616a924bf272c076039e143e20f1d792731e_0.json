{"sha": "34e4616a924bf272c076039e143e20f1d792731e", "log": "Automated g4 rollback.  *** Reason for rollback ***  Breaking Closure test. The test looks correct, so rolling back for now.  *** Original change description ***  Don't assume that all Math functions are side-effect free. Fixes issue 501  R=johnlenz DELTA=36  (9 added, 21 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2452   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n       if (callNode.isOnlyModifiesThisCall()\n           && evaluatesToLocalValue(nameNode.getFirstChild())) {\n         return false;\n+      }\n+\n+      // Functions in the \"Math\" namespace have no side effects.\n+      if (nameNode.getFirstChild().getType() == Token.NAME) {\n+        String namespaceName = nameNode.getFirstChild().getString();\n+        if (namespaceName.equals(\"Math\")) {\n+          return false;\n+        }\n       }\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.javascript.rhino.Node;\n-\n /**\n  * Tests for PeepholeRemoveDeadCodeTest in isolation. Tests for the interaction\n  * of multiple peephole passes are in PeepholeIntegrationTest.\n  */\n public class PeepholeRemoveDeadCodeTest extends CompilerTestCase {\n \n-  private static final String MATH =\n-      \"/** @const */ var Math = {};\" +\n-      \"/** @nosideeffects */ Math.random = function(){};\" +\n-      \"/** @nosideeffects */ Math.sin = function(){};\";\n-\n   public PeepholeRemoveDeadCodeTest() {\n-    super(MATH);\n+    super(\"\");\n   }\n \n   @Override\n \n   @Override\n   public CompilerPass getProcessor(final Compiler compiler) {\n-    return new CompilerPass() {\n-      @Override\n-      public void process(Node externs, Node root) {\n-        SimpleDefinitionFinder definitionFinder =\n-            new SimpleDefinitionFinder(compiler);\n-        definitionFinder.process(externs, root);\n-        new PureFunctionIdentifier(compiler, definitionFinder)\n-            .process(externs, root);\n-        PeepholeOptimizationsPass peepholePass =\n-            new PeepholeOptimizationsPass(\n-                compiler, new PeepholeRemoveDeadCode());\n-        peepholePass.process(externs, root);\n-      }\n-    };\n+    PeepholeOptimizationsPass peepholePass =\n+      new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode());\n+\n+    return peepholePass;\n   }\n \n   @Override\n     //  - the FOR init expression\n     //  - the FOR increment expression\n \n+\n     // Known side-effect free functions calls are removed.\n     fold(\"Math.random()\", \"\");\n     fold(\"Math.random(f() + g())\", \"f(),g();\");\n \n     // Calls to functions with unknown side-effects are are left.\n     foldSame(\"f();\");\n-    foldSame(\"(function () { f(); })();\");\n-\n-    // We know that this function has no side effects because of the\n-    // PureFunctionIdentifier.\n-    fold(\"(function () {})();\", \"\");\n+    foldSame(\"(function () {})();\");\n \n     // Uncalled function expressions are removed\n     fold(\"(function () {});\", \"\");", "timestamp": 1309311267, "metainfo": ""}