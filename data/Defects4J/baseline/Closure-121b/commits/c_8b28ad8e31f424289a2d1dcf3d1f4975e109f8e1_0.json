{"sha": "8b28ad8e31f424289a2d1dcf3d1f4975e109f8e1", "log": "Look at addSingletonGetter calls when figuring out unused variables.  R=johnlenz DELTA=36  (20 added, 0 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5512   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n    * returns the name of the class with the singleton getter. By default, always\n    * returns null. Meant to be overridden by subclasses.\n    *\n+   * addSingletonGetter needs a coding convention because in the general case,\n+   * it can't be inlined. The function inliner sees that it creates an alias\n+   * to the given class in an inner closure, and bails out.\n+   *\n    * @param callNode A CALL node.\n    */\n   public String getSingletonGetterClassName(Node callNode);\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n   private final Map<Node, Assign> assignsByNode = Maps.newHashMap();\n \n   /**\n-   * Subclass name -> inherits call EXPR node.\n-   */\n-  private final Multimap<Var, Node> inheritsCalls =\n+   * Subclass name -> class-defining call EXPR node. (like inherits)\n+   */\n+  private final Multimap<Var, Node> classDefiningCalls =\n       ArrayListMultimap.create();\n \n   /**\n         break;\n \n       case Token.CALL:\n+        Var modifiedVar = null;\n+\n         // Look for calls to inheritance-defining calls (such as goog.inherits).\n         SubclassRelationship subclassRelationship =\n             codingConvention.getClassesDefinedByCall(n);\n         if (subclassRelationship != null) {\n-          Var subclassVar = scope.getVar(subclassRelationship.subclassName);\n-          // Don't try to track the inheritance calls for non-globals. It would\n-          // be more correct to only not track when the subclass does not\n-          // reference a constructor, but checking that it is a global is\n-          // easier and mostly the same.\n-          if (subclassVar != null && subclassVar.isGlobal()\n-              && !referenced.contains(subclassVar)) {\n-            // Save a reference to the EXPR node.\n-            inheritsCalls.put(subclassVar, parent);\n-            continuations.put(subclassVar, new Continuation(n, scope));\n-            return;\n-          }\n+          modifiedVar = scope.getVar(subclassRelationship.subclassName);\n+        } else {\n+          // Look for calls to addSingletonGetter calls.\n+          String className = codingConvention.getSingletonGetterClassName(n);\n+          if (className != null) {\n+            modifiedVar = scope.getVar(className);\n+          }\n+        }\n+\n+        // Don't try to track the inheritance calls for non-globals. It would\n+        // be more correct to only not track when the subclass does not\n+        // reference a constructor, but checking that it is a global is\n+        // easier and mostly the same.\n+        if (modifiedVar != null && modifiedVar.isGlobal()\n+            && !referenced.contains(modifiedVar)) {\n+          // Save a reference to the EXPR node.\n+          classDefiningCalls.put(modifiedVar, parent);\n+          continuations.put(modifiedVar, new Continuation(n, scope));\n+          return;\n         }\n         break;\n \n \n       // Remove calls to inheritance-defining functions where the unreferenced\n       // class is the subclass.\n-      for (Node exprCallNode : inheritsCalls.get(var)) {\n+      for (Node exprCallNode : classDefiningCalls.get(var)) {\n         NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode);\n         compiler.reportCodeChange();\n       }\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n     testSame(\"({set s(a) {}})\");\n   }\n \n+  public void testRemoveSingletonClass1() {\n+    test(\"function goog$addSingletonGetter(a){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"goog$addSingletonGetter(a);\",\n+        \"\");\n+  }\n+\n   public void testRemoveInheritedClass1() {\n     test(\"function goog$inherits(){}\" +\n         \"/**@constructor*/function a(){}\" +", "timestamp": 1348027126, "metainfo": ""}