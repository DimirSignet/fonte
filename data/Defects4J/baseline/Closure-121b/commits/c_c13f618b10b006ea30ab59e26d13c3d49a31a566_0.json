{"sha": "c13f618b10b006ea30ab59e26d13c3d49a31a566", "log": "Automated g4 rollback  *** Reason for rollback ***  Breaks tests  *** Original change description ***  reverse type inference order for inner functions  Tested: rollback  R=nicksantos,arahey,ankit DELTA=285  (61 added, 196 deleted, 28 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4644   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInferencePass.java\n+++ b/src/com/google/javascript/jscomp/TypeInferencePass.java\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;\n-import com.google.javascript.jscomp.NodeTraversal.AbstractScopedCallback;\n+import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;\n import com.google.javascript.rhino.Node;\n \n     }\n   }\n \n-  private class TypeInferringCallback extends AbstractScopedCallback {\n+  private class TypeInferringCallback implements ScopedCallback {\n     @Override\n     public void enterScope(NodeTraversal t) {\n-      inferTypes(t, t.getCurrentNode(), t.getScope());\n+      Scope scope = t.getScope();\n+      Node node = t.getCurrentNode();\n+      if (scope.isGlobal()) {\n+        inferTypes(t, node, scope);\n+      }\n+    }\n+\n+    @Override\n+    public void exitScope(NodeTraversal t) {\n+      Scope scope = t.getScope();\n+      Node node = t.getCurrentNode();\n+      if (scope.isLocal()) {\n+        inferTypes(t, node, scope);\n+      }\n+    }\n+\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      return true;\n     }\n \n     @Override\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \" var x = 0 || function() {};\\n\" +\n         \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n         \" g();\" +\n-        \"}\",\n-        \"Function x: called with 1 argument(s). \" +\n-        \"Function requires at least 0 argument(s) \" +\n-        \"and no more than 0 argument(s).\");\n+        \"}\", null);\n   }\n \n   public void testInnerFunction7() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \" var x = 0 || function() {};\\n\" +\n         \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n         \" g();\" +\n-        \"}\",\n-        \"Function x: called with 1 argument(s). \" +\n-        \"Function requires at least 0 argument(s) \" +\n-        \"and no more than 0 argument(s).\");\n+        \"}\", null);\n   }\n \n   public void testInnerFunction7() throws Exception {\n         + \"baz(function() { this; }, {});\");\n   }\n \n-  public void testFunctionLiteralDefinedThisArgument2() throws Exception {\n-    testTypes(\"\"\n-        + \"/** @param {string} x */ function f(x) {}\"\n-        + \"/**\\n\"\n-        + \" * @param {?function(this:T, ...)} fn\\n\"\n-        + \" * @param {T=} opt_obj\\n\"\n-        + \" * @template T\\n\"\n-        + \" */\\n\"\n-        + \"function baz(fn, opt_obj) {}\\n\"\n-        + \"function g() { baz(function() { f(this.length); }, []); }\",\n-        \"actual parameter 1 of f does not match formal parameter\\n\"\n-        + \"found   : number\\n\"\n-        + \"required: string\");\n-  }\n-\n   public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n     testTypes(\"\"\n         + \"/**\\n\"", "timestamp": 1335884417, "metainfo": ""}