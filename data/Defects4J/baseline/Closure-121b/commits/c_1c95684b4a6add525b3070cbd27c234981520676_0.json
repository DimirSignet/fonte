{"sha": "1c95684b4a6add525b3070cbd27c234981520676", "log": "Have parameterized types particpate in the subtype relationships.  R=nicksantos DELTA=1945  (1761 added, 137 deleted, 47 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5973   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n           return true;\n         }\n       }\n-    }\n+      return false;\n+    }\n+\n+    // parameterized types.\n+    if (thisType.isParameterizedType()) {\n+      return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(\n+          thatType);\n+    }\n+\n     // proxy types\n     if (thatType instanceof ProxyObjectType) {\n       return thisType.isSubtype(\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n     return super.hasAnyTemplateTypes() || parameterType.hasAnyTemplateTypes();\n   }\n \n+  @Override\n+  public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n+  }\n+\n+  boolean isParameterizeSubtypeOf(JSType thatType) {\n+    if (thatType.isParameterizedType()) {\n+      JSType thisParameter = this.parameterType;\n+      JSType thatParameter = thatType.toMaybeParameterizedType().parameterType;\n+      // Currently, there is no way to declare a parameterized type so we have\n+      // no way to determine if the type parameters are in anyway related so\n+      // we disallow any subtype relationship between parameterized types.\n+      // This seems appropriate for \"Array.<X>\" and \"Object.<X>\" which are the\n+      // two parameterized types we recognize without a formal declaration.\n+      return this.wrapsSameRawType(thatType)\n+          && (thisParameter.isSubtype(thatParameter)\n+              || thatParameter.isSubtype(thisParameter));\n+    } else {\n+      return this.getReferencedTypeInternal().isSubtype(thatType);\n+    }\n+  }\n+\n   boolean wrapsSameRawType(JSType that) {\n     return that.isParameterizedType() && this.getReferencedTypeInternal()\n         .isEquivalentTo(\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n \n   public void testFilter2()\n       throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testTypes(\n         \"/**\\n\" +\n         \" * @param {!Array.<T>} arr\\n\" +\n         \"/** @type {!Array.<string>} */\" +\n         \"var arr;\\n\" +\n         \"/** @type {!Array.<number>} */\" +\n-        \"var result = filter(arr);\");\n+        \"var result = filter(arr);\",\n+        \"initializing variable\\n\" +\n+        \"found   : Array.<string>\\n\" +\n+        \"required: Array.<number>\");\n   }\n \n   public void testFilter3()\n       throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testTypes(\n         \"/**\\n\" +\n         \" * @param {Array.<T>} arr\\n\" +\n         \"/** @type {Array.<string>} */\" +\n         \"var arr;\\n\" +\n         \"/** @type {Array.<number>} */\" +\n-        \"var result = filter(arr);\");\n+        \"var result = filter(arr);\",\n+        \"initializing variable\\n\" +\n+        \"found   : (Array.<string>|null)\\n\" +\n+        \"required: (Array.<number>|null)\");\n   }\n \n   public void testBackwardsInferenceGoogArrayFilter1()\n       throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testClosureTypes(\n         CLOSURE_DEFS +\n         \"/** @type {Array.<string>} */\" +\n         \"var result = goog.array.filter(\" +\n         \"   arr,\" +\n         \"   function(item,index,src) {return false;});\",\n-        null);\n+        \"initializing variable\\n\" +\n+        \"found   : Array.<string>\\n\" +\n+        \"required: Array.<number>\");\n   }\n \n   public void testBackwardsInferenceGoogArrayFilter2() throws Exception {\n   }\n \n   public void testParameterized1() throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testTypes(\n         \"/** @type {!Array.<string>} */\" +\n         \"var arr1 = [];\\n\" +\n         \"/** @type {!Array.<number>} */\" +\n         \"var arr2 = [];\\n\" +\n-        \"arr1 = arr2;\");\n+        \"arr1 = arr2;\",\n+        \"assignment\\n\" +\n+        \"found   : Array.<number>\\n\" +\n+        \"required: Array.<string>\");\n   }\n \n   public void testParameterized2() throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testTypes(\n         \"/** @type {!Array.<string>} */\" +\n-        \"var arr1 = /** @type {!Array.<number>} */([]);\\n\");\n+        \"var arr1 = /** @type {!Array.<number>} */([]);\\n\",\n+        \"initializing variable\\n\" +\n+        \"found   : Array.<number>\\n\" +\n+        \"required: Array.<string>\");\n   }\n \n   public void testParameterized3() throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testTypes(\n         \"/** @type {Array.<string>} */\" +\n-        \"var arr1 = /** @type {!Array.<number>} */([]);\\n\");\n+        \"var arr1 = /** @type {!Array.<number>} */([]);\\n\",\n+        \"initializing variable\\n\" +\n+        \"found   : Array.<number>\\n\" +\n+        \"required: (Array.<string>|null)\");\n   }\n \n   public void testParameterized4() throws Exception {\n-    // TODO(johnlenz): This should produce a warning.\n     testTypes(\n         \"/** @type {Array.<string>} */\" +\n         \"var arr1 = [];\\n\" +\n         \"/** @type {Array.<number>} */\" +\n-        \"var arr2 = arr1;\\n\");\n+        \"var arr2 = arr1;\\n\",\n+        \"initializing variable\\n\" +\n+        \"found   : (Array.<string>|null)\\n\" +\n+        \"required: (Array.<number>|null)\");\n+  }\n+\n+  public void testParameterizedTypeSubtypes2() throws Exception {\n+    JSType arrayOfNumber = createParameterizedType(\n+        ARRAY_TYPE, NUMBER_TYPE);\n+    JSType arrayOfString = createParameterizedType(\n+        ARRAY_TYPE, STRING_TYPE);\n+    assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber, NULL_VOID)));\n+\n   }\n \n   private void testTypes(String js) throws Exception {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     verifySubtypeChain(typeChain, false);\n   }\n \n+  public void testParameterizedTypeSubtypes() {\n+    JSType objectOfString = createParameterizedType(\n+        OBJECT_TYPE, STRING_TYPE);\n+    JSType arrayOfString = createParameterizedType(\n+        ARRAY_TYPE, STRING_TYPE);\n+    JSType arrayOfNumber = createParameterizedType(\n+        ARRAY_TYPE, NUMBER_TYPE);\n+    JSType arrayOfUnknown = createParameterizedType(\n+        ARRAY_TYPE, UNKNOWN_TYPE);\n+\n+    assertFalse(objectOfString.isSubtype(ARRAY_TYPE));\n+    // TODO(johnlenz): should this be false?\n+    assertTrue(ARRAY_TYPE.isSubtype(objectOfString));\n+    assertFalse(objectOfString.isSubtype(ARRAY_TYPE));\n+    // TODO(johnlenz): should this be false?\n+    assertTrue(ARRAY_TYPE.isSubtype(objectOfString));\n+\n+    assertTrue(arrayOfString.isSubtype(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(arrayOfString));\n+    assertTrue(arrayOfString.isSubtype(arrayOfUnknown));\n+    assertTrue(arrayOfUnknown.isSubtype(arrayOfString));\n+\n+    assertFalse(arrayOfString.isSubtype(arrayOfNumber));\n+    assertFalse(arrayOfNumber.isSubtype(arrayOfString));\n+\n+    assertTrue(arrayOfNumber.isSubtype(createUnionType(arrayOfNumber, NULL_VOID)));\n+    assertFalse(createUnionType(arrayOfNumber, NULL_VOID).isSubtype(arrayOfNumber));\n+    assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber, NULL_VOID)));\n+  }\n+\n   public void testParameterizedTypeRelations() throws Exception {\n     JSType objectOfString = createParameterizedType(\n         OBJECT_TYPE, STRING_TYPE);\n         ARRAY_TYPE, NUMBER_TYPE);\n     JSType arrayOfUnknown = createParameterizedType(\n         ARRAY_TYPE, UNKNOWN_TYPE);\n-\n-    assertFalse(objectOfString.isSubtype(ARRAY_TYPE));\n-    assertTrue(ARRAY_TYPE.isSubtype(objectOfString));\n-    assertFalse(objectOfString.isSubtype(ARRAY_TYPE));\n-    assertTrue(ARRAY_TYPE.isSubtype(objectOfString));\n \n     // Union and least super type cases:\n     //", "timestamp": 1355427532, "metainfo": ""}