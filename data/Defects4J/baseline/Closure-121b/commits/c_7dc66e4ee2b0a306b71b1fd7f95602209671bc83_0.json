{"sha": "7dc66e4ee2b0a306b71b1fd7f95602209671bc83", "log": "fix an infinite loop caused by the new proxy-boxing api  R=johnlenz DELTA=70  (65 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3250   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n   public JSType getLeastSupertype(JSType that) {\n     if (that.isUnionType()) {\n       // Union types have their own implementation of getLeastSupertype.\n-      return that.getLeastSupertype(this);\n+      return that.toMaybeUnionType().getLeastSupertype(this);\n     }\n     return getLeastSupertype(this, that);\n   }\n   public TypePair getTypesUnderEquality(JSType that) {\n     // unions types\n     if (that.isUnionType()) {\n-      TypePair p = that.getTypesUnderEquality(this);\n+      TypePair p = that.toMaybeUnionType().getTypesUnderEquality(this);\n       return new TypePair(p.typeB, p.typeA);\n     }\n \n   public TypePair getTypesUnderInequality(JSType that) {\n     // unions types\n     if (that.isUnionType()) {\n-      TypePair p = that.getTypesUnderInequality(this);\n+      TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this);\n       return new TypePair(p.typeB, p.typeA);\n     }\n \n   public TypePair getTypesUnderShallowInequality(JSType that) {\n     // union types\n     if (that.isUnionType()) {\n-      TypePair p = that.getTypesUnderShallowInequality(this);\n+      TypePair p = that.toMaybeUnionType().getTypesUnderShallowInequality(this);\n       return new TypePair(p.typeB, p.typeA);\n     }\n \n--- a/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n    * Tests the behavior of variants type.\n    */\n   @SuppressWarnings(\"checked\")\n-      public void testUnionType() throws Exception {\n+  public void testUnionType() throws Exception {\n     UnionType nullOrString =\n         (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE);\n     UnionType stringOrNull =\n     assertFalse(type.isEquivalentTo(null));\n     assertTrue(type.isEquivalentTo(type));\n   }\n+\n+  public void testProxyUnionType() throws Exception {\n+    UnionType stringOrNumber =\n+        (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n+    UnionType stringOrBoolean =\n+        (UnionType) createUnionType(BOOLEAN_TYPE, STRING_TYPE);\n+\n+    assertEquals(\n+        \"(boolean|number|string)\",\n+        stringOrNumber.getLeastSupertype(stringOrBoolean).toString());\n+    assertEquals(\n+        \"string\",\n+        stringOrNumber.getGreatestSubtype(stringOrBoolean).toString());\n+    assertEquals(\n+        TernaryValue.UNKNOWN,\n+        stringOrNumber.testForEquality(stringOrBoolean));\n+    assertEquals(\n+        \"(number|string)\",\n+        stringOrNumber.getTypesUnderEquality(\n+            stringOrBoolean).typeA.toString());\n+    assertEquals(\n+        \"string\",\n+        stringOrNumber.getTypesUnderShallowEquality(\n+            stringOrBoolean).typeA.toString());\n+    assertEquals(\n+        \"(number|string)\",\n+        stringOrNumber.getTypesUnderInequality(\n+            stringOrBoolean).typeA.toString());\n+    assertEquals(\n+        \"(number|string)\",\n+        stringOrNumber.getTypesUnderShallowInequality(\n+            stringOrBoolean).typeA.toString());\n+\n+    ObjectType stringOrNumberProxy =\n+        new ProxyObjectType(registry, stringOrNumber);\n+    ObjectType stringOrBooleanProxy =\n+        new ProxyObjectType(registry, stringOrBoolean);\n+    assertEquals(\n+        \"(boolean|number|string)\",\n+        stringOrNumberProxy.getLeastSupertype(\n+            stringOrBooleanProxy).toString());\n+    assertEquals(\n+        \"string\",\n+        stringOrNumberProxy.getGreatestSubtype(\n+            stringOrBooleanProxy).toString());\n+    assertEquals(\n+        TernaryValue.UNKNOWN,\n+        stringOrNumberProxy.testForEquality(stringOrBooleanProxy));\n+    assertEquals(\n+        \"(number|string)\",\n+        stringOrNumberProxy.getTypesUnderEquality(\n+            stringOrBooleanProxy).typeA.toString());\n+    assertEquals(\n+        \"string\",\n+        stringOrNumberProxy.getTypesUnderShallowEquality(\n+            stringOrBooleanProxy).typeA.toString());\n+    assertEquals(\n+        \"(number|string)\",\n+        stringOrNumberProxy.getTypesUnderInequality(\n+            stringOrBooleanProxy).typeA.toString());\n+    assertEquals(\n+        \"(number|string)\",\n+        stringOrNumberProxy.getTypesUnderShallowInequality(\n+            stringOrBooleanProxy).typeA.toString());\n+  }\n }", "timestamp": 1315941976, "metainfo": ""}