{"sha": "3ca6c3aebdfb6a61895f3947e46104c29cc7a917", "log": "Avoid precondition check when building symbol table.  Code looks like:  // NOTE: No @constructor/@interface here. var f = function() {}; f.prototype = expr; ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42870814", "commit": "\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n     ObjectType instanceType = type;\n     Iterable<String> propNames = type.getOwnPropertyNames();\n     if (instanceType.isFunctionPrototypeType()) {\n-      // Merge the properties of \"Foo.prototype\" and \"new Foo()\" together.\n-      instanceType = instanceType.getOwnerFunction().getInstanceType();\n-      Set<String> set = Sets.newHashSet(propNames);\n-      Iterables.addAll(set, instanceType.getOwnPropertyNames());\n-      propNames = set;\n+      // Guard against modifying foo.prototype when foo is a regular (non-constructor) function.\n+      if (instanceType.getOwnerFunction().hasInstanceType()) {\n+        // Merge the properties of \"Foo.prototype\" and \"new Foo()\" together.\n+        instanceType = instanceType.getOwnerFunction().getInstanceType();\n+        Set<String> set = Sets.newHashSet(propNames);\n+        Iterables.addAll(set, instanceType.getOwnPropertyNames());\n+        propNames = set;\n+      }\n     }\n \n     s.setPropertyScope(new SymbolScope(null, parentPropertyScope, type, s));", "timestamp": 1361486425, "metainfo": ""}