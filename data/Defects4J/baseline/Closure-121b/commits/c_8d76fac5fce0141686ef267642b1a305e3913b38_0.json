{"sha": "8d76fac5fce0141686ef267642b1a305e3913b38", "log": "Introduce new @wizaction annotation. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44422134", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   THROWS,\n   TYPE,\n   TYPEDEF,\n-  VERSION;\n+  VERSION,\n+  WIZACTION;\n \n   static final Map<String, Annotation> recognizedAnnotations =\n       new ImmutableMap.Builder<String, Annotation>().\n       put(\"type\", Annotation.TYPE).\n       put(\"typedef\", Annotation.TYPEDEF).\n       put(\"version\", Annotation.VERSION).\n+      put(\"wizaction\", Annotation.WIZACTION).\n       build();\n }\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n         case IDGENERATOR:\n           if (!jsdocBuilder.recordIdGenerator()) {\n             parser.addParserWarning(\"msg.jsdoc.idgen\",\n+              stream.getLineno(), stream.getCharno());\n+          }\n+          return eatTokensUntilEOL();\n+\n+        case WIZACTION:\n+          if (!jsdocBuilder.recordWizaction()) {\n+            parser.addParserWarning(\"msg.jsdoc.wizaction\",\n               stream.getLineno(), stream.getCharno());\n           }\n           return eatTokensUntilEOL();\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n     Set<String> modifies = null;\n     String lendsName = null;\n     boolean ngInject = false;\n+    boolean wizaction = false;\n   }\n \n   private static final class LazilyInitializedDocumentation {\n   }\n \n   /**\n+   * Returns whether JSDoc is annotated with {@code @wizaction} annotation.\n+   */\n+  public boolean isWizaction() {\n+    return (info == null) ? false : info.wizaction;\n+  }\n+\n+  void setWizaction(boolean wizaction) {\n+    lazyInitInfo();\n+    info.wizaction = wizaction;\n+  }\n+\n+  /**\n    * Gets the description specified by the {@code @license} annotation.\n    */\n   public String getLicense() {\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n+   * Returns whether current JSDoc is annotated with {@code @wizaction}.\n+   */\n+  public boolean isWizactionRecorded() {\n+    return currentInfo.isWizaction();\n+  }\n+\n+  /**\n+   * Records that this method is to be exposed as a wizaction.\n+   */\n+  public boolean recordWizaction() {\n+    if (!isWizactionRecorded()) {\n+      currentInfo.setWizaction(true);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n    * Whether the current doc info has other type tags, like\n    * {@code @param} or {@code @return} or {@code @type} or etc.\n    */\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n       \"* @id \\n\" +\n       \"* @ignore \\n\" +\n       \"* @inner \\n\" +\n+      \"* @wizaction \\n\" +\n       \"* @lends {string} \\n\" +\n       \"* @link \\n\" +\n       \"* @member \\n\" +\n \n   public void testParseNgInject2() throws Exception {\n     parse(\"@ngInject \\n@ngInject*/\", \"extra @ngInject tag\");\n+  }\n+\n+  public void testParseWizaction1() throws Exception {\n+    assertTrue(parse(\"@wizaction*/\").isWizaction());\n+  }\n+\n+  public void testParseWizaction2() throws Exception {\n+    parse(\"@wizaction \\n@wizaction*/\", \"extra @wizaction tag\");\n   }\n \n   public void testTextExtents() {", "timestamp": 1364340496, "metainfo": ""}