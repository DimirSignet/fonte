{"sha": "a6a4c718fb161101814a374e48c82ccffed6477f", "log": "GetProp & Call nodes have incorrect Line, Offset, and Charno positions. Calls changed from position of '(' to position of the call target name. GetProp line&char no changed to be the position of the start of the left-most child, not the '.' that the GetProp represents which was incorrect when on multiple lines.  R=bashir,nicksantos DELTA=37  (9 added, 6 deleted, 22 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3882   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n         node.addChildToBack(transform(child));\n       }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n+      node.setLineno(node.getFirstChild().getLineno());\n+      node.setCharno(node.getFirstChild().getCharno());\n       maybeSetLengthFrom(node, callNode);\n       return node;\n     }\n \n     @Override\n     Node processPropertyGet(PropertyGet getNode) {\n-      return newNode(\n-          Token.GETPROP,\n-          transform(getNode.getTarget()),\n-          transformAsString(getNode.getProperty()));\n+      Node leftChild = transform(getNode.getTarget());\n+      Node newNode = newNode(\n+          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));\n+      newNode.setLineno(leftChild.getLineno());\n+      newNode.setCharno(leftChild.getCharno());\n+      maybeSetLengthFrom(newNode, getNode);\n+      return newNode;\n     }\n \n     @Override\n--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n     List<SourcePosition<AliasTransformation>> positions =\n         spy.observedPositions.get(\"testcode\");\n     assertEquals(1, positions.size());\n-    verifyAliasTransformationPosition(\n-        1, GOOG_SCOPE_LEN, 2, 1, positions.get(0));\n+    verifyAliasTransformationPosition(1, 0, 2, 1, positions.get(0));\n \n     assertEquals(1, spy.constructedAliases.size());\n     AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n     List<SourcePosition<AliasTransformation>> positions =\n         spy.observedPositions.get(\"testcode\");\n     assertEquals(1, positions.size());\n-    verifyAliasTransformationPosition(\n-        1, GOOG_SCOPE_LEN, 3, 1, positions.get(0));\n+    verifyAliasTransformationPosition(1, 0, 3, 1, positions.get(0));\n \n     assertEquals(1, spy.constructedAliases.size());\n     AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n         spy.observedPositions.get(\"testcode\");\n     assertEquals(2, positions.size());\n \n-    verifyAliasTransformationPosition(\n-        1, GOOG_SCOPE_LEN, 6, 0, positions.get(0));\n-\n-    verifyAliasTransformationPosition(\n-        8, GOOG_SCOPE_LEN, 11, 4, positions.get(1));\n+    verifyAliasTransformationPosition(1, 0, 6, 0, positions.get(0));\n+\n+    verifyAliasTransformationPosition(8, 0, 11, 4, positions.get(1));\n \n     assertEquals(2, spy.constructedAliases.size());\n     AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n \n     Node firstVarDecl = root.getFirstChild();\n     Node firstVar = firstVarDecl.getFirstChild();\n-    Node firstInitializer = firstVar.getFirstChild();\n     Node callNode = firstVar.getFirstChild();\n     Node fnName = callNode.getFirstChild();\n     Node regexObject = fnName.getNext();\n     Node endRegexString = regexObject.getNext();\n \n     assertNodePosition(1, 0, firstVarDecl);\n-    assertNodePosition(1, 4, firstVar);\n-    assertNodePosition(2, 7, callNode);\n-    assertNodePosition(2, 0, fnName);\n+    assertNodePosition(1, 4, 4, firstVar);\n+    assertNodePosition(2, 0, 18, callNode);\n+    assertNodePosition(2, 0, 7, fnName);\n     assertNodePosition(3, 0, regexObject);\n     assertNodePosition(3, 0, aString);\n     assertNodePosition(3, 5, endRegexString);\n     Node functionProp = functionCall.getFirstChild();\n     Node firstNameComponent = functionProp.getFirstChild();\n     Node lastNameComponent = firstNameComponent.getNext();\n-\n-    assertNodePosition(3, 4, functionCall);\n+    Node aNameComponent = firstNameComponent.getFirstChild();\n+    Node bNameComponent = aNameComponent.getNext();\n+\n+    assertNodePosition(1, 0, 13, functionCall);\n+    assertNodePosition(1, 0, 10, functionProp);\n     // TODO(bowdidge) New Rhino doesn't keep the position of the dot handy.\n     // New Rhino treats the location of the qualified name as the beginning of\n     // the whole name.\n-    // assertNodePosition(1, 0, firstNameComponent);\n-    assertNodePosition(3, 0, lastNameComponent);\n+    assertNodePosition(1, 0, 4, firstNameComponent);\n+    assertNodePosition(3, 0, 4, lastNameComponent);\n+\n+    assertNodePosition(1, 0, 1, aNameComponent);\n+    assertNodePosition(2, 0, 1, bNameComponent);\n   }\n \n   public void testLinenoDeclaration() {\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n     assertEquals(Token.CALL, call.getType());\n     assertEquals(2, call.getLineno());\n-    assertEquals(4, call.getCharno());\n+    assertEquals(1, call.getCharno());\n   }\n \n   public void testLinenoCharnoGetProp1() throws Exception {", "timestamp": 1322661995, "metainfo": ""}