{"sha": "103bd46736cbbbabe6ad27ab11da10d6dbb1a8e5", "log": "Add source info for Enums, just like we have for constructors  R=johnlenz DELTA=35  (19 added, 0 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3674   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n       if (enumType == null) {\n         JSType elementsType =\n             info.getEnumParameterType().evaluate(scope, typeRegistry);\n-        enumType = typeRegistry.createEnumType(name, elementsType);\n+        enumType = typeRegistry.createEnumType(name, rValue, elementsType);\n \n         if (rValue != null && rValue.getType() == Token.OBJECTLIT) {\n           // collect enum elements\n--- a/src/com/google/javascript/rhino/jstype/EnumType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumType.java\n public class EnumType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n \n+  /**\n+   * The object literal or alias which this type represents.\n+   * It may be {@code null}.\n+   */\n+  private final Node source;\n+\n   // the type of the individual elements\n   private EnumElementType elementsType;\n   // the elements' names (they all have the same type)\n    * @param name the enum's name\n    * @param elementsType the base type of the individual elements\n    */\n-  EnumType(JSTypeRegistry registry, String name, JSType elementsType) {\n+  EnumType(JSTypeRegistry registry, String name, Node source,\n+      JSType elementsType) {\n     super(registry, \"enum{\" + name + \"}\", null);\n+    this.source = source;\n     this.elementsType = new EnumElementType(registry, elementsType, name);\n+  }\n+\n+  /**\n+   * Gets the source node or null if this is an unknown enum.\n+   */\n+  public Node getSource() {\n+    return source;\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n   /**\n    * Creates an enum type.\n    */\n-  public EnumType createEnumType(String name, JSType elementsType) {\n-    return new EnumType(this, name, elementsType);\n+  public EnumType createEnumType(\n+      String name, Node source, JSType elementsType) {\n+    return new EnumType(this, name, source, elementsType);\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n   }\n \n   private EnumType createEnumType(String name, JSType elemType) {\n-    return registry.createEnumType(name, elemType);\n+    return registry.createEnumType(name, null, elemType);\n   }\n \n   private JSType createUndefinableType(JSTypeNative type) {\n--- a/test/com/google/javascript/rhino/jstype/EnumElementTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/EnumElementTypeTest.java\n public class EnumElementTypeTest extends BaseJSTypeTestCase {\n   public void testSubtypeRelation() throws Exception {\n     EnumElementType typeA = registry.createEnumType(\n-        \"typeA\", NUMBER_TYPE).getElementsType();\n+        \"typeA\", null, NUMBER_TYPE).getElementsType();\n     EnumElementType typeB = registry.createEnumType(\n-        \"typeB\", NUMBER_TYPE).getElementsType();\n+        \"typeB\", null, NUMBER_TYPE).getElementsType();\n \n     assertFalse(typeA.isSubtype(typeB));\n     assertFalse(typeB.isSubtype(typeA));\n \n   public void testMeet() throws Exception {\n     EnumElementType typeA = registry.createEnumType(\n-        \"typeA\", createUnionType(NUMBER_TYPE, STRING_TYPE)).getElementsType();\n+        \"typeA\", null, createUnionType(NUMBER_TYPE, STRING_TYPE))\n+        .getElementsType();\n \n     JSType stringsOfA = typeA.getGreatestSubtype(STRING_TYPE);\n     assertFalse(stringsOfA.isEmptyType());\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     builder.addProperty(\"b\", STRING_TYPE, null);\n     recordType = builder.build();\n \n-    enumType = new EnumType(registry, \"Enum\", NUMBER_TYPE);\n+    enumType = new EnumType(registry, \"Enum\", null, NUMBER_TYPE);\n     elementsType = enumType.getElementsType();\n     functionType = new FunctionBuilder(registry)\n         .withReturnType(NUMBER_TYPE)\n    * Tests the behavior of the enum type.\n    */\n   public void testEnumType() throws Exception {\n-    EnumType enumType = new EnumType(registry, \"Enum\", NUMBER_TYPE);\n+    EnumType enumType = new EnumType(registry, \"Enum\", null, NUMBER_TYPE);\n \n     // isXxx\n     assertFalse(enumType.isArrayType());\n     assertEquals(\"Enum\", enumType.getDisplayName());\n \n     assertEquals(\"AnotherEnum\", new EnumType(registry, \"AnotherEnum\",\n-        NUMBER_TYPE).getDisplayName());\n-    assertFalse(new EnumType(registry, null, NUMBER_TYPE).hasDisplayName());\n+        null, NUMBER_TYPE).getDisplayName());\n+    assertFalse(\n+        new EnumType(registry, null, null, NUMBER_TYPE).hasDisplayName());\n \n     Asserts.assertResolvesToSame(enumType);\n   }\n \n   public void testStringEnumType() throws Exception {\n     EnumElementType stringEnum =\n-        new EnumType(registry, \"Enum\", STRING_TYPE).getElementsType();\n+        new EnumType(registry, \"Enum\", null, STRING_TYPE).getElementsType();\n \n     assertTypeEquals(UNKNOWN_TYPE, stringEnum.getPropertyType(\"length\"));\n     assertTypeEquals(NUMBER_TYPE, stringEnum.findPropertyType(\"length\"));\n \n   public void testStringObjectEnumType() throws Exception {\n     EnumElementType stringEnum =\n-        new EnumType(registry, \"Enum\", STRING_OBJECT_TYPE).getElementsType();\n+        new EnumType(registry, \"Enum\", null, STRING_OBJECT_TYPE)\n+        .getElementsType();\n \n     assertTypeEquals(NUMBER_TYPE, stringEnum.getPropertyType(\"length\"));\n     assertTypeEquals(NUMBER_TYPE, stringEnum.findPropertyType(\"length\"));\n     ObjectType realA = registry.createConstructorType(\n         \"typeA\", null, null, null).getInstanceType();\n     ObjectType realB = registry.createEnumType(\n-        \"typeB\", NUMBER_TYPE).getElementsType();\n+        \"typeB\", null, NUMBER_TYPE).getElementsType();\n     registry.declareType(\"typeA\", realA);\n     registry.declareType(\"typeB\", realB);\n \n \n   public void testAnonymousEnumElementChain() throws Exception {\n     ObjectType enumElemType = registry.createEnumType(\n-        \"typeB\", registry.createAnonymousObjectType()).getElementsType();\n+        \"typeB\", null, registry.createAnonymousObjectType()).getElementsType();\n     List<JSType> typeChain = Lists.newArrayList(\n         ALL_TYPE,\n         createNullableType(OBJECT_TYPE),", "timestamp": 1320878754, "metainfo": ""}