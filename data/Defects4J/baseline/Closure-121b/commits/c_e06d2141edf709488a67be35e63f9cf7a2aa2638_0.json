{"sha": "e06d2141edf709488a67be35e63f9cf7a2aa2638", "log": "Forgotten test class for new implementation of OptimizeParameters pass.  R=johnlenz DELTA=340  (340 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=241552   ", "commit": "\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersAltTest.java\n+/*\n+ * Copyright 2009 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.google.javascript.jscomp;\n+// TODO(dhans): Tests which does not work are commented out\n+// Some of them may indicate bugs, but some are not supposed to work with\n+// the new implementation\n+/**\n+ * Tests for {@link OptimizeParameters}\n+ *\n+ */\n+public class OptimizeParametersAltTest extends CompilerTestCase {\n+  @Override\n+  public CompilerPass getProcessor(Compiler compiler) {\n+    return new OptimizeParametersAlt(compiler);\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n+  }\n+\n+  public void testNoRemoval() {\n+    testSame(\"function foo(p1) { } foo(1); foo(2)\");\n+    testSame(\"function foo(p1) { } foo(1,2); foo(3,4)\");\n+  }\n+\n+  public void testNotAFunction() {\n+    testSame(\"var x = 1; x; x = 2\");\n+  }\n+\n+  public void testRemoveOneOptionalNamedFunction() {\n+    test(\"function foo(p1) { } foo()\", \"function foo() {var p1} foo()\");\n+  }\n+\n+  // TODO(dhans): add more test cases for that\n+  public void testDifferentScopesDoesNotInterfere() {\n+    test(\"function f(a, b) {} f(1, 2); f(1, 3); \" +\n+        \"function h() {function f(a) {} f(4); f(5);} f(1, 2);\",\n+        \"function f(b) {var a = 1} f(2); f(3); \" +\n+        \"function h() {function f(a) {} f(4); f(5);} f(2);\");\n+  }\n+\n+  public void testOptimizeOnlyImmutableValues() {\n+    test(\"function foo(a) {}; foo(undefined);\",\n+         \"function foo() {var a = undefined}; foo()\");\n+    test(\"function foo(a) {}; foo(null);\",\n+        \"function foo() {var a = null}; foo()\");\n+    test(\"function foo(a) {}; foo(1);\",\n+         \"function foo() {var a = 1}; foo()\");\n+    test(\"function foo(a) {}; foo('abc');\",\n+        \"function foo() {var a = 'abc'}; foo()\");\n+\n+    test(\"var foo = function(a) {}; foo(undefined);\",\n+         \"var foo = function() {var a = undefined}; foo()\");\n+    test(\"var foo = function(a) {}; foo(null);\",\n+         \"var foo = function() {var a = null}; foo()\");\n+    test(\"var foo = function(a) {}; foo(1);\",\n+         \"var foo = function() {var a = 1}; foo()\");\n+    test(\"var foo = function(a) {}; foo('abc');\",\n+         \"var foo = function() {var a = 'abc'}; foo()\");\n+  }\n+\n+  public void testRemoveOneOptionalVarAssignment() {\n+    test(\"var foo = function (p1) { }; foo()\",\n+        \"var foo = function () {var p1}; foo()\");\n+  }\n+\n+  public void testDoOptimizeCall() {\n+    testSame(\"var foo = function () {}; foo(); foo.call();\");\n+    testSame(\"var foo = function () {}; foo(); foo.call(this);\");\n+    test(\"var foo = function (a, b) {}; foo(1); foo.call(this, 1);\",\n+         \"var foo = function () {var a = 1; var b;}; foo(); foo.call(this)\");\n+  }\n+\n+  public void testRemoveOneOptionalExpressionAssign() {\n+    test(\"var foo; foo = function (p1) { }; foo()\",\n+        \"var foo; foo = function () {var p1}; foo()\");\n+  }\n+\n+  public void testRemoveOneOptionalOneRequired() {\n+    test(\"function foo(p1, p2) { } foo(1); foo(2)\",\n+        \"function foo(p1) {var p2} foo(1); foo(2)\");\n+  }\n+\n+  public void testRemoveOneOptionalMultipleCalls() {\n+    test( \"function foo(p1, p2) { } foo(1); foo(2); foo()\",\n+        \"function foo(p1) {var p2} foo(1); foo(2); foo()\");\n+  }\n+\n+  public void testConstructorOptArgsNotRemoved() {\n+    String src =\n+        \"/** @constructor */\" +\n+        \"var goog = function(){};\" +\n+        \"goog.prototype.foo = function(a,b) {};\" +\n+        \"goog.prototype.bar = function(a) {};\" +\n+        \"goog.bar.inherits(goog.foo);\" +\n+        \"new goog.foo(2,3);\" +\n+        \"new goog.foo(1,2);\";\n+    testSame(src);\n+  }\n+\n+  public void testRemoveVarArg() {\n+    test(\"function foo(p1, var_args) { } foo(1); foo(2)\",\n+        \"function foo(p1) { var var_args } foo(1); foo(2)\");\n+  }\n+\n+  public void testAliasMethodsDontGetOptimize() {\n+    String src =\n+        \"var foo = function(a, b) {};\" +\n+        \"var goog = {};\" +\n+        \"goog.foo = foo;\" +\n+        \"goog.prototype.bar = goog.foo;\" +\n+        \"new goog().bar(1,2);\" +\n+        \"foo(2);\";\n+    testSame(src);\n+  }\n+\n+  public void testAliasMethodsDontGetOptimize2() {\n+    String src =\n+        \"var foo = function(a, b) {};\" +\n+        \"var bar = foo;\" +\n+        \"foo(1);\" +\n+        \"bar(2,3);\";\n+    testSame(src);\n+  }\n+\n+  public void testAliasMethodsDontGetOptimize3() {\n+    String src =\n+        \"var array = {};\" +\n+        \"array[0] = function(a, b) {};\" +\n+        \"var foo = array[0];\" + // foo should be marked as aliased.\n+        \"foo(1);\";\n+    testSame(src);\n+  }\n+\n+  public void testAliasMethodsDontGetOptimize4() {\n+    String src =\n+        \"function foo(bar) {};\" +\n+        \"baz = function(a) {};\" +\n+        \"baz(1);\" +\n+        \"foo(baz);\"; // Baz should be aliased.\n+    testSame(src);\n+  }\n+\n+  public void testMethodsDefinedInArraysDontGetOptimized() {\n+    String src =\n+        \"var array = [true, function (a) {}];\" +\n+        \"array[1](1)\";\n+    testSame(src);\n+  }\n+\n+  public void testMethodsDefinedInObjectDontGetOptimized() {\n+    String src =\n+      \"var object = { foo: function bar() {} };\" +\n+      \"object.foo(1)\";\n+    testSame(src);\n+    src =\n+      \"var object = { foo: function bar() {} };\" +\n+      \"object['foo'](1)\";\n+    testSame(src);\n+  }\n+\n+  public void testRemoveConstantArgument() {\n+    // Remove only one parameter\n+    test(\"function foo(p1, p2) {}; foo(1,2); foo(2,2);\",\n+         \"function foo(p1) {var p2 = 2}; foo(1); foo(2)\");\n+\n+    // Remove nothing\n+    testSame(\"function foo(p1, p2) {}; foo(1); foo(2,3);\");\n+\n+    // Remove middle parameter\n+    test(\"function foo(a,b,c){}; foo(1, 2, 3); foo(1, 2, 4); foo(2, 2, 3)\",\n+         \"function foo(a,c){var b=2}; foo(1, 3); foo(1, 4); foo(2, 3)\");\n+\n+    // Number are equals\n+    test(\"function foo(a) {}; foo(1); foo(1.0);\",\n+         \"function foo() {var a = 1;}; foo(); foo();\");\n+  }\n+\n+  public void testCanDeleteArgumentsAtAnyPosition() {\n+    // Argument removed in middle and end\n+    String src =\n+        \"function foo(a,b,c,d,e) {};\" +\n+        \"foo(1,2,3,4,5);\" +\n+        \"foo(2,2,4,4,5);\";\n+    String expected =\n+        \"function foo(a,c) {var b=2; var d=4; var e=5;};\" +\n+        \"foo(1,3);\" +\n+        \"foo(2,4);\";\n+    test(src, expected);\n+  }\n+\n+  public void testNoOptimizationForExternsFunctions() {\n+    testSame(\"function _foo(x, y, z){}; _foo(1);\");\n+  }\n+\n+  public void testNoOptimizationForGoogExportSymbol() {\n+    testSame(\"goog.exportSymbol('foo', foo);\" +\n+             \"function foo(x, y, z){}; foo(1);\");\n+  }\n+\n+  public void testNoArgumentRemovalNonEqualNodes() {\n+    testSame(\"function foo(a){}; foo('bar'); foo('baz');\");\n+    testSame(\"function foo(a){}; foo(1.0); foo(2.0);\");\n+    testSame(\"function foo(a){}; foo(true); foo(false);\");\n+    testSame(\"var a = 1, b = 2; function foo(a){}; foo(a); foo(b);\");\n+    testSame(\"function foo(a){}; foo(/&/g); foo(/</g);\");\n+  }\n+\n+  public void testCallIsIgnore() {\n+    testSame(\"var goog;\" +\n+        \"goog.foo = function(a, opt) {};\" +\n+        \"var bar = function(){goog.foo.call(this, 1)};\" +\n+        \"goog.foo(1);\");\n+  }\n+\n+  public void testApplyIsIgnore() {\n+    testSame(\"var goog;\" +\n+        \"goog.foo = function(a, opt) {};\" +\n+        \"var bar = function(){goog.foo.apply(this, 1)};\" +\n+        \"goog.foo(1);\");\n+  }\n+\n+  public void testFunctionWithReferenceToArgumentsShouldNotBeOptimize() {\n+    testSame(\"function foo(a,b,c) { return arguments.size; };\" +\n+             \"foo(1);\");\n+    testSame(\"var foo = function(a,b,c) { return arguments.size }; foo(1);\");\n+    testSame(\"var foo = function bar(a,b,c) { return arguments.size }; \" +\n+             \"foo(2); bar(2);\");\n+  }\n+\n+  public void testFunctionWithTwoNames() {\n+    test(\"var foo = function bar(a,b) {};\",\n+         \"var foo = function bar() {var a; var b;}\");\n+    test(\"var foo = function bar(a,b) {}; foo(1)\",\n+         \"var foo = function bar() {var a = 1; var b;}; foo()\");\n+    test(\"var foo = function bar(a,b) {}; bar(1);\",\n+         \"var foo = function bar() {var a = 1; var b;}; bar()\");\n+    test(\"var foo = function bar(a,b) {}; foo(1); foo(2)\",\n+         \"var foo = function bar(a) {var b}; foo(1); foo(2)\");\n+    test(\"var foo = function bar(a,b) {}; foo(1); bar(1)\",\n+         \"var foo = function bar() {var a = 1; var b}; foo(); bar()\");\n+    test(\"var foo = function bar(a,b) {}; foo(1); bar(2)\",\n+         \"var foo = function bar(a) {var b}; foo(1); bar(2)\");\n+    testSame(\"var foo = function bar(a,b) {}; foo(1,2); bar(2,1)\");\n+  }\n+  public void testConstantArgumentsToConstructorCanBeOptimized() {\n+    String src = \"function foo(a) {};\" +\n+        \"var bar = new foo(1);\";\n+    String expected = \"function foo() {var a=1;};\" +\n+        \"var bar = new foo();\";\n+    test(src, expected);\n+  }\n+\n+  public void testOptionalArgumentsToConstructorCanBeOptimized() {\n+    String src = \"function foo(a) {};\" +\n+        \"var bar = new foo();\";\n+    String expected = \"function foo() {var a;};\" +\n+        \"var bar = new foo();\";\n+    test(src, expected);\n+  }\n+\n+  public void testRegexesCanBeInlined() {\n+    test(\"function foo(a) {}; foo(/abc/);\",\n+        \"function foo() {var a = /abc/}; foo();\");\n+  }\n+\n+  public void testConstructorUsedAsFunctionCanBeOptimized() {\n+    String src = \"function foo(a) {};\" +\n+        \"var bar = new foo(1);\" +\n+        \"foo(1);\";\n+    String expected = \"function foo() {var a=1;};\" +\n+        \"var bar = new foo();\" +\n+        \"foo();\";\n+    test(src, expected);\n+  }\n+\n+  public void testDoNotOptimizeConstructorWhenArgumentsAreNotEqual() {\n+    testSame(\"function Foo(a) {};\" +\n+        \"var bar = new Foo(1);\" +\n+        \"var baz = new Foo(2);\");\n+  }\n+\n+  public void testDoNotOptimizeArrayElements() {\n+    testSame(\"var array = [function (a, b) {}];\");\n+    testSame(\"var array = [function f(a, b) {}]\");\n+\n+    testSame(\"var array = [function (a, b) {}];\" +\n+        \"array[0](1, 2);\" +\n+        \"array[0](1);\");\n+\n+    testSame(\"var array = [];\" +\n+        \"function foo(a, b) {};\" +\n+        \"array[0] = foo;\");\n+  }\n+\n+  public void testOptimizeThis() {\n+    String src = \"function foo() {\" +\n+        \"var bar = function (a, b) {};\" +\n+        \"this.bar(2);\" +\n+        \"bar(2);}\";\n+    String expected = \"function foo() {\" +\n+        \"var bar = function () {var a = 2; var b};\" +\n+        \"this.bar();\" +\n+        \"bar();}\";\n+    test(src, expected);\n+  }\n+\n+  public void testDoNotOptimizeWhenArgumentsPassedAsParameter() {\n+    testSame(\"function foo(a) {}; foo(arguments)\");\n+    testSame(\"function foo(a) {}; foo(arguments[0])\");\n+\n+    test(\"function foo(a, b) {}; foo(arguments, 1)\",\n+         \"function foo(a) {var b = 1}; foo(arguments)\");\n+\n+    test(\"function foo(a, b) {}; foo(arguments)\",\n+    \"function foo(a) {var b}; foo(arguments)\");\n+  }\n+\n+  public void testDoNotOptimizeGoogExportFunctions() {\n+    testSame(\"function foo(a, b) {}; foo(); goog.export_function(foo);\");\n+  }\n+}", "timestamp": 1285181551, "metainfo": ""}