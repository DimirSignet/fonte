{"sha": "9ac26e8d26f3370de0834ea88000188306b38a4f", "log": "Fixing handling of inner classes.  R=nicksantos DELTA=123  (111 added, 0 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5621   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ClosureRewriteClass.java\n+++ b/src/com/google/javascript/jscomp/ClosureRewriteClass.java\n import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n \n import java.util.Collections;\n import java.util.List;\n       \"JSC_GOOG_CLASS_STATICS_NOT_VALID\",\n       \"The class statics descriptor must be an object literal\");\n \n+  static final DiagnosticType GOOG_CLASS_UNEXPECTED_PARAMS = DiagnosticType.error(\n+      \"JSC_GOOG_CLASS_UNEXPECTED_PARAMS\",\n+      \"The call to goog.defineClass has too many arguments.\");\n+\n   private final AbstractCompiler compiler;\n \n   public ClosureRewriteClass(AbstractCompiler compiler) {\n \n   @Override\n   public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isCall() && isGoogDefineClass(n)) {\n+      if (!validateUsage(n)) {\n+        compiler.report(JSError.make(n, GOOG_CLASS_TARGET_INVALID));\n+      }\n+    }\n+    maybeRewriteClassDefinition(n);\n+  }\n+\n+  private boolean validateUsage(Node n) {\n+    // There are only three valid usage patterns for of goog.defineClass\n+    //   var x = googDefineClass\n+    //   ... = googDefineClass\n+    //   and within an objectlit, used by the goog.defineClass.\n+    Node parent = n.getParent();\n+    switch (parent.getType()) {\n+      case Token.NAME:\n+        return true;\n+      case Token.ASSIGN:\n+        return n == parent.getLastChild() && parent.getParent().isExprResult();\n+      case Token.STRING_KEY:\n+        return isContainedInGoogDefineClass(parent);\n+    }\n+    return false;\n+  }\n+\n+  private boolean isContainedInGoogDefineClass(Node n) {\n+    while (n != null) {\n+      n = n.getParent();\n+      if (n.isCall()) {\n+        if (isGoogDefineClass(n)) {\n+          return true;\n+        }\n+      } else if (!n.isObjectLit() && !n.isStringKey()) {\n+        break;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private void maybeRewriteClassDefinition(Node n) {\n     if (n.isVar()) {\n       Node target = n.getFirstChild();\n       Node value = target.getFirstChild();\n-      maybeRewriteClassDefinition(t, n, target, value);\n+      maybeRewriteClassDefinition(n, target, value);\n     } else if (NodeUtil.isExprAssign(n)) {\n       Node assign = n.getFirstChild();\n       Node target = assign.getFirstChild();\n       Node value = assign.getLastChild();\n-      maybeRewriteClassDefinition(t, n, target, value);\n+      maybeRewriteClassDefinition(n, target, value);\n     }\n   }\n \n   private void maybeRewriteClassDefinition(\n-      NodeTraversal t, Node n, Node target, Node value) {\n+      Node n, Node target, Node value) {\n     if (isGoogDefineClass(value)) {\n       if (!target.isQualifiedName()) {\n-        compiler.report(t.makeError(n, GOOG_CLASS_TARGET_INVALID));\n-      }\n-      ClassDefinition def = extractClassDefinition(t, target, value);\n+        compiler.report(JSError.make(n, GOOG_CLASS_TARGET_INVALID));\n+      }\n+      ClassDefinition def = extractClassDefinition(target, value);\n       if (def != null) {\n         value.detachFromParent();\n         target.detachFromParent();\n    * the class definition from the AST.\n    */\n   private ClassDefinition extractClassDefinition(\n-      NodeTraversal t, Node targetName, Node callNode) {\n+      Node targetName, Node callNode) {\n+\n     // name = goog.defineClass(superClass, {...}, [modifier, ...])\n     Node superClass = NodeUtil.getArgumentForCallOrNew(callNode, 0);\n     if (superClass == null ||\n         (!superClass.isNull() && !superClass.isQualifiedName())) {\n-      compiler.report(t.makeError(callNode, GOOG_CLASS_SUPER_CLASS_NOT_VALID));\n+      compiler.report(JSError.make(callNode, GOOG_CLASS_SUPER_CLASS_NOT_VALID));\n       return null;\n     }\n     if (NodeUtil.isNullOrUndefined(superClass)) {\n         || !description.isObjectLit()\n         || !validateObjLit(description)) {\n       // report bad class definition\n-      compiler.report(t.makeError(callNode, GOOG_CLASS_DESCRIPTOR_NOT_VALID));\n+      compiler.report(JSError.make(callNode, GOOG_CLASS_DESCRIPTOR_NOT_VALID));\n+      return null;\n+    }\n+\n+    int paramCount = callNode.getChildCount() -1;\n+    if (paramCount > 3) {\n+      compiler.report(JSError.make(callNode, GOOG_CLASS_UNEXPECTED_PARAMS));\n       return null;\n     }\n \n     Node constructor = extractProperty(description, \"constructor\");\n     if (constructor == null) {\n       // report missing constructor\n-      compiler.report(t.makeError(description, GOOG_CLASS_CONSTRUCTOR_MISING));\n+      compiler.report(JSError.make(description, GOOG_CLASS_CONSTRUCTOR_MISING));\n       return null;\n     }\n     JSDocInfo info = NodeUtil.getBestJSDocInfo(constructor);\n     Node statics = extractProperty(description, \"statics\");\n     if (statics != null\n         && !(statics.isObjectLit() && validateObjLit(statics))) {\n-      compiler.report(t.makeError(statics, GOOG_CLASS_STATICS_NOT_VALID));\n+      compiler.report(JSError.make(statics, GOOG_CLASS_STATICS_NOT_VALID));\n       return null;\n     }\n     if (statics == null) {\n \n     Node modifiers = NodeUtil.getArgumentForCallOrNew(callNode, 2);\n     if (modifiers != null && !modifiers.isArrayLit()) {\n-      compiler.report(t.makeError(modifiers, GOOG_CLASS_MODIFIERS_NOT_VALID));\n+      compiler.report(JSError.make(modifiers, GOOG_CLASS_MODIFIERS_NOT_VALID));\n       return null;\n     }\n     if (modifiers == null) {\n                   IR.string(def.name.getString()).srcref(def.name))\n                   .srcref(def.name),\n               def.value)).setJSDocInfo(def.info))));\n+      // Handle inner class definitions.\n+      maybeRewriteClassDefinition(block.getLastChild());\n     }\n \n     for (MemberDefinition def : cls.props) {\n                   IR.string(def.name.getString()).srcref(def.name))\n                   .srcref(def.name),\n               def.value)).setJSDocInfo(def.info))));\n+      // Handle inner class definitions.\n+      maybeRewriteClassDefinition(block.getLastChild());\n     }\n \n     for (Node modifier : cls.modifiers) {\n--- a/test/com/google/javascript/jscomp/ClosureRewriteClassTest.java\n+++ b/test/com/google/javascript/jscomp/ClosureRewriteClassTest.java\n import static com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_MODIFIERS_NOT_VALID;\n import static com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_STATICS_NOT_VALID;\n import static com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_SUPER_CLASS_NOT_VALID;\n+import static com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_TARGET_INVALID;\n+import static com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_UNEXPECTED_PARAMS;\n+\n \n /**\n  * Unit tests for ClosureRewriteGoogClass\n     this.enableEcmaScript5(false);\n   }\n \n+  @Override\n+  protected int getNumRepetitions() {\n+    return 1;\n+  }\n+\n   public void testBasic1() {\n     test(\n         \"var x = goog.defineClass(null, {\\n\" +\n \n         \"var x = {};\" +\n         \"{x.y = function() {};}\");\n+  }\n+\n+  public void testInnerClass1() {\n+    test(\n+        \"var x = goog.defineClass(some.Super, {\\n\" +\n+        \"  constructor: function(){\\n\" +\n+        \"    this.foo = 1;\\n\" +\n+        \"  },\\n\" +\n+        \"  statics: {\\n\" +\n+        \"    inner: goog.defineClass(x,{\\n\" +\n+        \"      constructor: function(){\\n\" +\n+        \"        this.bar = 1;\\n\" +\n+        \"      }\\n\" +\n+        \"    })\\n\" +\n+        \"  }\\n\" +\n+        \"});\",\n+\n+        \"{\" +\n+        \"var x=function(){this.foo=1};\" +\n+        \"goog.inherits(x,some.Super);\" +\n+        \"{\" +\n+        \"x.inner=function(){this.bar=1};\" +\n+        \"goog.inherits(x.inner,x);\" +\n+        \"}\" +\n+        \"}\");\n   }\n \n   public void testComplete1() {\n         \"}, foo);\",\n         GOOG_CLASS_MODIFIERS_NOT_VALID, true);\n   }\n+\n+  public void testInvalid6() {\n+    testSame(\n+        \"var x = goog.defineClass(null, {\" +\n+        \"  constructor: function(){}\" +\n+        \"}, [], null);\",\n+        GOOG_CLASS_UNEXPECTED_PARAMS, true);\n+  }\n+\n+  public void testInvalid7() {\n+    testSame(\n+        \"goog.defineClass();\",\n+        GOOG_CLASS_TARGET_INVALID, true);\n+\n+    testSame(\n+        \"var x = goog.defineClass() || null;\",\n+        GOOG_CLASS_TARGET_INVALID, true);\n+\n+    testSame(\n+        \"({foo: goog.defineClass()});\",\n+        GOOG_CLASS_TARGET_INVALID, true);\n+  }\n }", "timestamp": 1349758591, "metainfo": ""}