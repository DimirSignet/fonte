{"sha": "ec197afd8be40888ace6e29ff159041d8011c10a", "log": "fix a failed precondition check  R=johnlenz DELTA=24  (24 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4584   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n   }\n \n   private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed) {\n+    if (node.isThis()) {\n+      // \"this\" references don't need to be modelled in the control flow graph.\n+      return scope;\n+    }\n+\n     scope = scope.createChildFlowScope();\n     if (node.isGetProp()) {\n       scope.inferQualifiedSlot(\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;\n \n import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;\n import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n             \"var out = x.a;\");\n     verify(\"out\", NUMBER_TYPE);\n   }\n+\n+  public void testCast1() {\n+    inFunction(\"var x = /** @type {Object} */ (this);\");\n+    verify(\"x\", createNullableType(OBJECT_TYPE));\n+  }\n+\n+  public void testCast2() {\n+    inFunction(\n+        \"/** @return {boolean} */\" +\n+        \"Object.prototype.method = function() { return true; };\" +\n+        \"var x = /** @type {Object} */ (this).method;\");\n+    verify(\n+        \"x\",\n+        registry.createFunctionType(\n+            registry.getNativeObjectType(OBJECT_TYPE),\n+            registry.getNativeType(BOOLEAN_TYPE),\n+            ImmutableList.<JSType>of() /* params */));\n+  }\n }", "timestamp": 1334867825, "metainfo": ""}