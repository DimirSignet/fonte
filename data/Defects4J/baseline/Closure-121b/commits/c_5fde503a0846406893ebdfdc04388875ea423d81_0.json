{"sha": "5fde503a0846406893ebdfdc04388875ea423d81", "log": "Fix a bug in the old inliner. There are probably cases that i'm missing. i'll think about it a bit more over the weekend.  R=acleung DELTA=50  (30 added, 3 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4940   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeIterators.java\n+++ b/src/com/google/javascript/jscomp/NodeIterators.java\n     }\n \n     /**\n-     * @param iterator The to use while inspecting the node\n+     * @param iterator The iterator to use while inspecting the node\n      *     beginning with the deepest ancestor.\n      */\n     private LocalVarMotion(Node nameNode, FunctionlessLocalScope iterator) {\n       int type = nextNode.getType();\n \n       if (valueHasSideEffects) {\n-        // Reject anything that might read state, i.e. any NAME that is not\n-        // newly redeclared or an assignment to a simple name.\n-\n-        if (type == Token.NAME && !varName.equals(nextNode.getString())) {\n-          boolean blocked = false;\n-          if (nextParent == null) {\n-            blocked = true;\n-          } else {\n-            boolean assignsName = (nextParent.isAssign()\n-                    && nextNode == nextParent.getFirstChild());\n-            boolean isVarDeclaration = (nextParent.isVar());\n-\n-            if (!assignsName && !isVarDeclaration) {\n-              blocked = true;\n-            }\n+        // Reject anything that might read state\n+        boolean readsState = false;\n+\n+        if (// Any read of a different variable.\n+            (nextNode.isName() && !varName.equals(nextNode.getString())) ||\n+            // Any read of a property.\n+            (nextNode.isGetProp() || nextNode.isGetElem())) {\n+\n+          // If this is a simple assign, we'll be ok.\n+          if (nextParent == null ||\n+              !NodeUtil.isVarOrSimpleAssignLhs(nextNode, nextParent)) {\n+            readsState = true;\n           }\n \n-          if (blocked) {\n-            lookAhead = null;\n-            return;\n-          }\n+        } else if (nextNode.isCall() || nextNode.isNew()) {\n+          // This isn't really an important case. In most cases when we use\n+          // CALL or NEW, we're invoking it on a NAME or a GETPROP. And in the\n+          // few cases where we're not, it's because we have an anonymous\n+          // function that escapes the variable we're worried about. But we\n+          // include this for completeness.\n+          readsState = true;\n+        }\n+\n+        if (readsState) {\n+          lookAhead = null;\n+          return;\n         }\n       }\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n         \"window.Foo = a;\");\n   }\n \n+  public void testInlineVariables() {\n+    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n+    test(\n+        \"/** @constructor */ function F() { this.a = 0; }\" +\n+        \"F.prototype.inc = function() { this.a++; return 10; };\" +\n+        \"F.prototype.bar = function() { \" +\n+        \"  var c = 3; var val = inc(); this.a += val + c;\" +\n+        \"};\" +\n+        \"window['f'] = new F();\" +\n+        \"window['f']['bar'] = window['f'].bar;\",\n+        \"function a(){ this.a = 0; }\" +\n+        \"a.prototype.b = function(){ var b=inc(); this.a += b + 3; };\" +\n+        \"window.f = new a;\" +\n+        \"window.f.bar = window.f.b\");\n+  }\n+\n   public void testTypedAdvanced() {\n     args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n     args.add(\"--use_types_for_optimization\");\n--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java\n     test(externs, code, code, null, null);\n   }\n \n+  public void testBug6598844() {\n+    testSame(\n+        \"function F() { this.a = 0; }\" +\n+        \"F.prototype.inc = function() { this.a++; return 10; };\" +\n+        \"F.prototype.bar = function() { var val = inc(); this.a += val; };\");\n+  }\n }", "timestamp": 1338847686, "metainfo": ""}