{"sha": "cc0f81d4520fabbd78ea38aaa283db5805d8946e", "log": "Suggestions in missing properties warning. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=46893799", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n import com.google.javascript.rhino.jstype.TemplateTypeMap;\n import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;\n import com.google.javascript.rhino.jstype.TernaryValue;\n-\n+import com.google.javascript.rhino.jstype.UnionType;\n+\n+import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Set;\n       DiagnosticType.disabled(\n           \"JSC_INEXISTENT_PROPERTY\",\n           \"Property {0} never defined on {1}\");\n+\n+  static final DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION =\n+      DiagnosticType.disabled(\n+          \"JSC_INEXISTENT_PROPERTY\",\n+          \"Property {0} never defined on {1}. Did you mean {2}?\");\n \n   protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n       DiagnosticType.warning(\n   // code.\n   private int noTypeCheckSection = 0;\n \n+  private Method editDistance;\n+\n+  private static final class SuggestionPair {\n+    private final String suggestion;\n+    final int distance;\n+    private SuggestionPair(String suggestion, int distance) {\n+      this.suggestion = suggestion;\n+      this.distance = distance;\n+    }\n+  }\n+\n   public TypeCheck(AbstractCompiler compiler,\n       ReverseAbstractInterpreter reverseInterpreter,\n       JSTypeRegistry typeRegistry,\n     this.reportUnknownTypes = ((Compiler) compiler).getOptions().enables(\n         DiagnosticGroups.REPORT_UNKNOWN_TYPES);\n     this.inferJSDocInfo = new InferJSDocInfo(compiler);\n+\n+    ClassLoader classLoader = TypeCheck.class.getClassLoader();\n+    try {\n+      Class<?> c = classLoader.loadClass(\n+          \"com.google.common.string.EditDistance\");\n+      editDistance = c.getDeclaredMethod(\n+          \"getEditDistance\", String.class, String.class, boolean.class);\n+    } catch (Exception ignored) {\n+      editDistance = null;\n+    }\n   }\n \n   public TypeCheck(AbstractCompiler compiler,\n   private void checkPropertyAccessHelper(JSType objectType, String propName,\n       NodeTraversal t, Node n) {\n     if (!objectType.isEmptyType() &&\n-        reportMissingProperties && (!isPropertyTest(n) || objectType.isStruct())) {\n+        reportMissingProperties &&\n+        (!isPropertyTest(n) || objectType.isStruct())) {\n       if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n-        report(t, n, INEXISTENT_PROPERTY, propName,\n-            validator.getReadableJSTypeName(n.getFirstChild(), true));\n-      }\n-    }\n+        SuggestionPair pair =\n+            getClosestPropertySuggestion(objectType, propName);\n+        if (pair != null && pair.distance * 4 < propName.length()) {\n+          report(t, n, INEXISTENT_PROPERTY_WITH_SUGGESTION, propName,\n+              validator.getReadableJSTypeName(n.getFirstChild(), true),\n+              pair.suggestion);\n+        } else {\n+          report(t, n, INEXISTENT_PROPERTY, propName,\n+              validator.getReadableJSTypeName(n.getFirstChild(), true));\n+        }\n+      }\n+    }\n+  }\n+\n+  private SuggestionPair getClosestPropertySuggestion(\n+      JSType objectType, String propName) {\n+    if (editDistance == null) {\n+      return null;\n+    }\n+\n+    String bestSoFar = null;\n+    int shortest = Integer.MAX_VALUE;\n+    if (objectType instanceof ObjectType) {\n+      ObjectType type = (ObjectType) objectType;\n+      for (String alt : type.getPropertyNames()) {\n+        int distance;\n+        try {\n+          distance = (Integer) editDistance.invoke(null, propName, alt, false);\n+        } catch (Exception e) {\n+          return null;\n+        }\n+        if (distance <= shortest) {\n+          if (distance == shortest) {\n+            // To make warning determistic across runs we 'tie-break' by\n+            // alphabetical order ignore-case.\n+            if (bestSoFar != null && alt.compareToIgnoreCase(bestSoFar) > 0) {\n+              continue;\n+            }\n+          }\n+          shortest = distance;\n+          bestSoFar = alt;\n+        }\n+      }\n+    } else if (objectType.isUnionType()) {\n+      UnionType type = (UnionType) objectType;\n+      for (JSType alt : type.getAlternates()) {\n+        SuggestionPair pair = getClosestPropertySuggestion(alt, propName);\n+        if (pair != null) {\n+          if (pair.distance <= shortest) {\n+            if (pair.distance  == shortest) {\n+              if (bestSoFar != null &&\n+                  pair.suggestion.compareToIgnoreCase(bestSoFar) > 0) {\n+                continue;\n+              }\n+            }\n+            shortest = pair.distance;\n+            bestSoFar = pair.suggestion;\n+          }\n+        }\n+      }\n+    }\n+\n+    if (bestSoFar != null) {\n+      return new SuggestionPair(bestSoFar, shortest);\n+    }\n+\n+    return null;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n public class TypeCheckTest extends CompilerTypeTestCase {\n \n   private CheckLevel reportMissingOverrides = CheckLevel.WARNING;\n+\n+  private static final String SUGGESTION_CLASS =\n+      \"/** @constructor\\n */\\n\" +\n+      \"function Suggest() {}\\n\" +\n+      \"Suggest.prototype.a = 1;\\n\" +\n+      \"Suggest.prototype.veryPossible = 1;\\n\" +\n+      \"Suggest.prototype.veryPossible2 = 1;\\n\";\n \n   @Override\n   public void setUp() throws Exception {\n   public void testIssue725() throws Exception {\n     testTypes(\n         \"/** @typedef {{name: string}} */ var RecordType1;\" +\n-        \"/** @typedef {{name2: string}} */ var RecordType2;\" +\n+        \"/** @typedef {{name2222: string}} */ var RecordType2;\" +\n         \"/** @param {RecordType1} rec */ function f(rec) {\" +\n-        \"  alert(rec.name2);\" +\n+        \"  alert(rec.name2222);\" +\n         \"}\",\n-        \"Property name2 never defined on rec\");\n+        \"Property name2222 never defined on rec\");\n   }\n \n   public void testIssue726() throws Exception {\n         \"Property bar never defined on A\", false);\n   }\n \n+\n   private void testTypes(String js) throws Exception {\n     testTypes(js, (String) null);\n   }", "timestamp": 1369092241, "metainfo": ""}