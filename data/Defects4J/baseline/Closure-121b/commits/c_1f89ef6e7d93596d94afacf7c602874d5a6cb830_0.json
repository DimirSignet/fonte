{"sha": "1f89ef6e7d93596d94afacf7c602874d5a6cb830", "log": "Add GET/SET support to findNearestFunction  R=nicksantos DELTA=47  (44 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=307   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n     // Check for the form { 'x' : function() { } }\n     Node parent = n.getParent();\n     switch (parent.getType()) {\n+      case Token.SET:\n+      case Token.GET:\n       case Token.STRING:\n         // Return the name of the literal's key.\n+        return parent.getString();\n+      case Token.NUMBER:\n         return getStringValue(parent);\n     }\n \n     * @return The Node containing the Function parameters.\n     */\n   static Node getFnParameters(Node fnNode) {\n-   // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]\n-   Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);\n-   return fnNode.getFirstChild().getNext();\n+    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]\n+    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);\n+    return fnNode.getFirstChild().getNext();\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n \n   private static Node parse(String js) {\n     Compiler compiler = new Compiler();\n+    compiler.initCompilerOptionsIfTesting();\n+    compiler.getOptions().languageIn = LanguageMode.ECMASCRIPT5;\n     Node n = compiler.parseTestCode(js);\n     assertEquals(0, compiler.getErrorCount());\n     return n;\n \n   public void testGetNumberValue() {\n     // Strings\n-    assertEquals(1.0, NodeUtil.getNumberValue(getNode(\"'\\\\uFEFF1'\")));    \n+    assertEquals(1.0, NodeUtil.getNumberValue(getNode(\"'\\\\uFEFF1'\")));\n     assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"''\")));\n     assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"' '\")));\n     assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"' \\\\t'\")));\n \n     assertEquals(15.0, NodeUtil.getNumberValue(getNode(\"'0xf'\")));\n     assertEquals(15.0, NodeUtil.getNumberValue(getNode(\"'0xF'\")));\n-    \n+\n     // Chrome and rhino behavior differently from FF and IE. FF and IE\n     // consider a negative hex number to be invalid\n     assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-0xf'\")));\n     assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-0xF'\")));\n     assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xf'\")));\n-    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xF'\")));    \n+    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xF'\")));\n \n     assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"'0X10'\")));\n     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'0X10.8'\")));\n     // FireFox treats \"infinity\" as \"Infinity\", IE treats it as NaN\n     assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-infinity'\")));\n     assertEquals(null, NodeUtil.getNumberValue(getNode(\"'infinity'\")));\n-    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+infinity'\")));    \n+    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+infinity'\")));\n \n     assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'NaN'\")));\n     assertEquals(\n     assertTrue(NodeUtil.mayBeString(getNode(\"([]+1)\")));\n     assertTrue(NodeUtil.mayBeString(getNode(\"(1+[])\")));\n   }\n+\n+  public void testGetNearestFunctionName() {\n+    testFunctionName(\"function a() {}\", \"a\");\n+    testFunctionName(\"(function a() {})\", \"a\");\n+    testFunctionName(\"({a:function () {}})\", \"a\");\n+    testFunctionName(\"({get a() {}})\", \"a\");\n+    testFunctionName(\"({set a(b) {}})\", \"a\");\n+    testFunctionName(\"({set a(b) {}})\", \"a\");\n+    testFunctionName(\"({1:function () {}})\", \"1\");\n+    testFunctionName(\"var a = function a() {}\", \"a\");\n+    testFunctionName(\"var a;a = function a() {}\", \"a\");\n+    testFunctionName(\"var o;o.a = function a() {}\", \"o.a\");\n+    testFunctionName(\"this.a = function a() {}\", \"this.a\");\n+  }\n+\n+  static void testFunctionName(String js, String expected) {\n+    assertEquals(\n+        expected,\n+        NodeUtil.getNearestFunctionName(getFunctionNode(js)));\n+  }\n+\n+  static Node getFunctionNode(String js) {\n+    Node root = parse(js);\n+    return getFunctionNode(root);\n+  }\n+\n+  static Node getFunctionNode(Node n) {\n+    if (n.getType() == Token.FUNCTION) {\n+      return n;\n+    }\n+    for (Node c : n.children()) {\n+      Node result = getFunctionNode(c);\n+      if (result != null) {\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n }", "timestamp": 1295459235, "metainfo": ""}