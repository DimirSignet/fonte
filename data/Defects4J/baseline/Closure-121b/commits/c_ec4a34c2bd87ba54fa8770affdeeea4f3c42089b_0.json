{"sha": "ec4a34c2bd87ba54fa8770affdeeea4f3c42089b", "log": "Parameter types should be declared, rather than inferred. This means that if the programmer re-assignes the argument to a different type, they will get a type warning. Fixes issue 433.   R=zhuyi DELTA=91  (62 added, 14 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1963   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+                  jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n   }\n \n   public void testFunctionArguments13() throws Exception {\n-    // verifying that the argument type have inferable types\n+    // verifying that the argument type have non-inferrable types\n     testTypes(\n         \"/** @return {boolean} */ function u() { return true; }\" +\n-        \"/** @param {boolean} b\\n@return {boolean} */\" +\n+        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n         \"function f(b) { if (u()) { b = null; } return b; }\",\n-        \"inconsistent return type\\n\" +\n-        \"found   : (boolean|null)\\n\" +\n+        \"assignment\\n\" +\n+        \"found   : null\\n\" +\n         \"required: boolean\");\n   }\n \n   }\n \n   public void testDuplicateLocalVarDecl() throws Exception {\n-    testTypes(\n+    testClosureTypesMultipleWarnings(\n         \"/** @param {number} x */\\n\" +\n         \"function f(x) { /** @type {string} */ var x = ''; }\",\n-        \"variable x redefined with type string, \" +\n-        \"original definition at [testcode]:2 with type number\");\n+        Lists.newArrayList(\n+            \"variable x redefined with type string, original definition\" +\n+            \" at  [testcode] :2 with type number\",\n+            \"initializing variable\\n\" +\n+            \"found   : string\\n\" +\n+            \"required: number\"));\n   }\n \n   public void testStubFunctionDeclaration1() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: number\");\n   }\n \n+  public void testScoping12() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function F() {}\" +\n+        \"/** @type {number} */ F.prototype.bar = 3;\" +\n+        \"/** @param {!F} f */ function g(f) {\" +\n+        \"  /** @return {string} */\" +\n+        \"  function h() {\" +\n+        \"    return f.bar;\" +\n+        \"  }\" +\n+        \"}\",\n+        \"inconsistent return type\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: string\");\n+  }\n+\n   public void testFunctionArguments1() throws Exception {\n     testFunctionType(\n         \"/** @param {number} a\\n@return {string} */\" +\n   }\n \n   public void testFunctionArguments13() throws Exception {\n-    // verifying that the argument type have inferable types\n+    // verifying that the argument type have non-inferrable types\n     testTypes(\n         \"/** @return {boolean} */ function u() { return true; }\" +\n-        \"/** @param {boolean} b\\n@return {boolean} */\" +\n+        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n         \"function f(b) { if (u()) { b = null; } return b; }\",\n-        \"inconsistent return type\\n\" +\n-        \"found   : (boolean|null)\\n\" +\n+        \"assignment\\n\" +\n+        \"found   : null\\n\" +\n         \"required: boolean\");\n   }\n \n   }\n \n   public void testDuplicateLocalVarDecl() throws Exception {\n-    testTypes(\n+    testClosureTypesMultipleWarnings(\n         \"/** @param {number} x */\\n\" +\n         \"function f(x) { /** @type {string} */ var x = ''; }\",\n-        \"variable x redefined with type string, \" +\n-        \"original definition at [testcode]:2 with type number\");\n+        Lists.newArrayList(\n+            \"variable x redefined with type string, original definition\" +\n+            \" at  [testcode] :2 with type number\",\n+            \"initializing variable\\n\" +\n+            \"found   : string\\n\" +\n+            \"required: number\"));\n   }\n \n   public void testStubFunctionDeclaration1() throws Exception {", "timestamp": 1305920927, "metainfo": ""}