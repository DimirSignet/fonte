{"sha": "b3f9127e420844fec92153c8485e63f7b487b585", "log": "As per discussion, nerf RemoveUnusedClassProperties to avoid performance regressions and incompatibilities with Object.seal. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49443067", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java\n      switch (n.getType()) {\n        case Token.GETPROP: {\n          String propName = n.getLastChild().getString();\n-         if (inExterns || isPinningPropertyUse(n)) {\n+         if (inExterns || isPinningPropertyUse(n)\n+             || !n.getFirstChild().isThis()) {\n            used.add(propName);\n          } else {\n            // This is a definition of a property but it is only removable\n            // if it is defined on \"this\".\n-           if (n.getFirstChild().isThis()) {\n-             candidates.add(n);\n-           }\n+           candidates.add(n);\n          }\n          break;\n        }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n \n     options.removeUnusedClassProperties = true;\n \n-    // This is still a problem when removeUnusedClassProperties are enabled.\n+    // This is still not a problem when removeUnusedClassProperties is enabled.\n     test(options,\n         code,\n-        \"function a(){Object.seal(this)}\" +\n+        \"function a(){this.b=0;Object.seal(this)}\" +\n         \"(new function(){this.a=new a}).a.b++;\" +\n         \"alert(\\\"hi\\\")\");\n   }\n--- a/test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java\n   public void testSimple3() {\n     // A property defined on an object other than \"this\" can not be removed.\n     testSame(\"y.a = 2\");\n-    // but doesn't prevent the removal of the definition on 'this'.\n-    test(\"y.a = 2; this.a = 2\", \"y.a = 2; 2\");\n+    // and prevents the removal of the definition on 'this'.\n+    testSame(\"y.a = 2; this.a = 2\");\n     // Some use of the property \"a\" prevents the removal.\n     testSame(\"y.a = 2; this.a = 1; alert(x.a)\");\n   }\n   public void testIssue730() {\n     // Partial removal of properties can causes problems if the object is\n     // sealed.\n-    // TODO(johnlenz): should we not allow partial removals?\n-    test(\n+    testSame(\n         \"function A() {this.foo = 0;}\\n\" +\n         \"function B() {this.a = new A();}\\n\" +\n         \"B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\\n\" +\n-        \"new B().dostuff();\\n\",\n-        \"function A(){0}\" +\n-        \"function B(){this.a=new A}\" +\n-        \"B.prototype.dostuff=function(){this.a.foo++;alert(\\\"hi\\\")};\" +\n-        \"new B().dostuff();\");\n+        \"new B().dostuff();\\n\");\n   }\n }", "timestamp": 1374018435, "metainfo": ""}