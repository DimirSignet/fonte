{"sha": "59eec92e364b2ec2cec9dd63449f5c0134983f18", "log": "Do not inline an object literal if it has a property that gets deleted.  Fixes issue 851 (http://code.google.com/p/closure-compiler/issues/detail?id=851).  R=nicksantos DELTA=16  (13 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5863   ", "commit": "\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n         Node parent = ref.getParent();\n         Node gramps = ref.getGrandparent();\n \n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n+        // Ignore most indirect references, like x.y (but not x.y(),\n+        // since the function referenced by y might reference 'this').\n         //\n         if (parent.isGetProp()) {\n           Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n+          // A call target may be using the object as a 'this' value.\n           if (gramps.isCall()\n               && gramps.getFirstChild() == parent) {\n+            return false;\n+          }\n+\n+          // Deleting a property has different semantics from deleting\n+          // a variable, so deleted properties should not be inlined.\n+          if (gramps.isDelProp()) {\n             return false;\n           }\n \n--- a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java\n         \"   '[object Function]';\");\n   }\n \n+  public void testNoInlineDeletedProperties() {\n+    testSameLocal(\n+        \"var foo = {bar:1};\" +\n+        \"delete foo.bar;\" +\n+        \"return foo.bar;\");\n+  }\n+\n   private final String LOCAL_PREFIX = \"function local(){\";\n   private final String LOCAL_POSTFIX = \"}\";\n ", "timestamp": 1353449738, "metainfo": ""}