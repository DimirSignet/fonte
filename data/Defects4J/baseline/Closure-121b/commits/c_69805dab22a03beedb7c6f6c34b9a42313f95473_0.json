{"sha": "69805dab22a03beedb7c6f6c34b9a42313f95473", "log": "Make AngularPassTest spacing consistent with other jscomp tests.  This should also make it slightly clearer where expressions end to make it harder to accidentally add a stray semicolon. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44420863", "commit": "\n--- a/test/com/google/javascript/jscomp/AngularPassTest.java\n+++ b/test/com/google/javascript/jscomp/AngularPassTest.java\n   }\n \n   public void testNgInjectAddsInjectToFunctions() throws Exception {\n-    test(\n-        \"/** @ngInject */\" +\n-        \"function fn(a, b) {}\",\n+    test(\"/** @ngInject */ function fn(a, b) {}\",\n+        \"function fn(a, b) {} fn['$inject']=['a', 'b']\");\n \n-        \"function fn(a, b) {}\\n\" +\n-        \"fn['$inject']=['a', 'b']\"\n-    );\n-\n-    testSame(\n-        \"function fn(a, b) {}\"\n-    );\n+    testSame(\"function fn(a, b) {}\");\n   }\n \n   public void testNgInjectAddsInjectAfterGoogInherits() throws Exception {\n-    test(\n-         \"/** @ngInject \\n @constructor */\" +\n-         \"function fn(a, b) {}\" +\n+    test(\"/** @ngInject \\n @constructor */ function fn(a, b) {}\" +\n          \"goog.inherits(fn, parent);\",\n+         \"function fn(a, b) {}\\n\" +\n+         \"goog.inherits(fn, parent); fn['$inject']=['a', 'b']\");\n \n-         \"function fn(a, b) {}\\n\" +\n-         \"goog.inherits(fn, parent);\" +\n-         \"fn['$inject']=['a', 'b']\"\n-         );\n-\n-    test(\n-         \"/** @ngInject \\n @constructor */\" +\n+    test(\"/** @ngInject \\n @constructor */\" +\n          \"function fn(a, b) {}\" +\n          \"goog.inherits(fn, parent);\" +\n          \"var foo = 42;\",\n-\n          \"function fn(a, b) {}\\n\" +\n-         \"goog.inherits(fn, parent);\" +\n-         \"fn['$inject']=['a', 'b'];\" +\n-         \"var foo = 42;\"\n-         );\n+         \"goog.inherits(fn, parent); fn['$inject']=['a', 'b'];\" +\n+         \"var foo = 42;\");\n   }\n \n   public void testNgInjectAddsInjectToProps() throws Exception {\n-    test(\n-        \"var ns = {};\\n\" +\n-        \"/** @ngInject */\" +\n-        \"ns.fn = function (a, b) {}\",\n+    test(\"var ns = {};\\n\" +\n+         \"/** @ngInject */ ns.fn = function (a, b) {}\",\n+         \"var ns = {};\\n\" +\n+         \"ns.fn = function (a, b) {}; ns.fn['$inject']=['a', 'b']\");\n \n-        \"var ns = {};\\n\" +\n-        \"ns.fn = function (a, b) {}\\n\" +\n-        \"ns.fn['$inject']=['a', 'b']\"\n-    );\n-\n-    testSame(\n-        \"var ns = {};\\n\" +\n-        \"ns.fn = function (a, b) {}\"\n-    );\n+    testSame(\"var ns = {}; ns.fn = function (a, b) {}\");\n   }\n \n   public void testNgInjectAddsInjectToNestedProps() throws Exception {\n-    test(\n-        \"var ns = {}; ns.subns = {};\\n\" +\n-        \"/** @ngInject */\" +\n-        \"ns.subns.fn = function (a, b) {}\",\n+    test(\"var ns = {}; ns.subns = {};\\n\" +\n+         \"/** @ngInject */ ns.subns.fn = function (a, b) {}\",\n+         \"var ns = {}; ns.subns = {};\\n\" +\n+         \"ns.subns.fn = function (a, b) {};ns.subns.fn['$inject']=['a', 'b']\");\n \n-        \"var ns = {};ns.subns = {};\\n\" +\n-        \"ns.subns.fn = function (a, b) {}\\n\" +\n-        \"ns.subns.fn['$inject']=['a', 'b']\"\n-    );\n-\n-    testSame(\n-        \"var ns = {};\\n\" +\n-        \"ns.fn = function (a, b) {}\"\n-    );\n+    testSame(\"var ns = {}; ns.fn = function (a, b) {}\");\n   }\n \n   public void testNgInjectAddsInjectToVars() throws Exception {\n-    test(\n-        \"/** @ngInject */\" +\n-        \"var fn = function (a, b) {}\",\n+    test(\"/** @ngInject */ var fn = function (a, b) {}\",\n+         \"var fn = function (a, b) {}; fn['$inject']=['a', 'b']\");\n \n-        \"var fn = function (a, b) {};\\n\" +\n-        \"fn['$inject']=['a', 'b']\"\n-    );\n-\n-    testSame(\n-        \"var fn = function (a, b) {}\"\n-    );\n+    testSame(\"var fn = function (a, b) {}\");\n   }\n \n   public void testNgInjectAddsInjectToVarsWithChainedAssignment()\n       throws Exception {\n-    test(\n-        \"var ns = {};\\n\" +\n-        \"/** @ngInject */\" +\n-        \"var fn = ns.func = function (a, b) {}\",\n+    test(\"var ns = {};\\n\" +\n+         \"/** @ngInject */ var fn = ns.func = function (a, b) {}\",\n+         \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n+         \"fn['$inject']=['a', 'b']\");\n \n-        \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n-        \"fn['$inject']=['a', 'b']\"\n-    );\n-\n-    testSame(\n-        \"var ns = {};\\n\" +\n-        \"var fn = ns.func = function (a, b) {}\"\n-    );\n+    testSame(\"var ns = {}; var fn = ns.func = function (a, b) {}\");\n   }\n \n   public void testNgInjectInBlock() throws Exception {\n-    test(\n-        \"(function() {\" +\n-        \"var ns = {};\\n\" +\n-        \"/** @ngInject */\" +\n-        \"var fn = ns.func = function (a, b) {}\" +\n-        \"})()\",\n+    test(\"(function() {\" +\n+         \"  var ns = {};\\n\" +\n+         \"  /** @ngInject */ var fn = ns.func = function (a, b) {}\" +\n+         \"})()\",\n+         \"(function() {\" +\n+         \"  var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n+         \"  fn['$inject']=['a', 'b']\" +\n+         \"})()\");\n \n-        \"(function() {\" +\n-        \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n-        \"fn['$inject']=['a', 'b']\" +\n-        \"})()\"\n-    );\n-\n-    testSame(\n-        \"(function() {\" +\n-        \"var ns = {};\\n\" +\n-        \"var fn = ns.func = function (a, b) {}\" +\n-        \"})()\"\n-    );\n+    testSame(\"(function() {\" +\n+             \"  var ns = {}; var fn = ns.func = function (a, b) {}\" +\n+             \"})()\");\n   }\n \n   public void testNgInjectAddsToTheRightBlock() throws Exception {\n-    test(\n-        \"var fn = 10;\\n\" +\n-        \"(function() {\" +\n-        \"var ns = {};\\n\" +\n-        \"/** @ngInject */\" +\n-        \"var fn = ns.func = function (a, b) {}\" +\n-        \"})()\",\n-\n-        \"var fn = 10;\" +\n-        \"(function() {\" +\n-        \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n-        \"fn['$inject']=['a', 'b']\" +\n-        \"})()\"\n-    );\n+    test(\"var fn = 10;\\n\" +\n+         \"(function() {\" +\n+         \"  var ns = {};\\n\" +\n+         \"  /** @ngInject */ var fn = ns.func = function (a, b) {}\" +\n+         \"})()\",\n+         \"var fn = 10;\" +\n+         \"(function() {\" +\n+         \"  var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n+         \"  fn['$inject']=['a', 'b']\" +\n+         \"})()\");\n   }\n \n   public void testNgInjectInNonBlock() throws Exception {\n-    test(\n-        \"function fake(){}; var ns = {};\" +\n-        \"fake(\" +\n-        \"/** @ngInject */\" +\n-        \"ns.func = function (a, b) {}\" +\n-        \")\",\n-        null,\n-        AngularPass.INJECT_IN_NON_GLOBAL_OR_BLOCK_ERROR\n-    );\n+    test(\"function fake(){};\" +\n+         \"var ns = {};\" +\n+         \"fake( /** @ngInject */ ns.func = function (a, b) {} )\",\n+         null, AngularPass.INJECT_IN_NON_GLOBAL_OR_BLOCK_ERROR);\n \n-    test(\n-        \"/** @ngInject */(\" +\n-        \"function (a, b) {}\" +\n-        \")\",\n-        null,\n-        AngularPass.INJECT_IN_NON_GLOBAL_OR_BLOCK_ERROR\n-    );\n+    test(\"/** @ngInject */( function (a, b) {} )\",\n+         null, AngularPass.INJECT_IN_NON_GLOBAL_OR_BLOCK_ERROR);\n   }\n \n   public void testNgInjectNonFunction() throws Exception {\n-    test(\n-        \"/** @ngInject */\" +\n-        \"var a = 10\",\n-        null,\n-        AngularPass.INJECT_NON_FUNCTION_ERROR\n-    );\n+    test(\"/** @ngInject */ var a = 10\",\n+         null, AngularPass.INJECT_NON_FUNCTION_ERROR);\n \n-    test(\n-        \"/** @ngInject */\" +\n-        \"var x\",\n-        null,\n-        AngularPass.INJECT_NON_FUNCTION_ERROR\n-    );\n+    test(\"/** @ngInject */ var x\",\n+         null, AngularPass.INJECT_NON_FUNCTION_ERROR);\n   }\n }", "timestamp": 1364253492, "metainfo": ""}