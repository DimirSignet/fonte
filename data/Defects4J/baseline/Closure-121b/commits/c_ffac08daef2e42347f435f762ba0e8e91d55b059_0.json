{"sha": "ffac08daef2e42347f435f762ba0e8e91d55b059", "log": "Use a better heuristic for detecting base.js  R=agrieve DELTA=35  (34 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4516   ", "commit": "\n--- a/src/com/google/javascript/jscomp/deps/JsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java\n           provides.add(arg);\n         }\n       }\n-    } else if (includeGoogBase && line.startsWith(BASE_JS_START)) {\n+    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n+               provides.isEmpty() && requires.isEmpty()) {\n       provides.add(\"goog\");\n+\n+      // base.js can't provide or require anything else.\n+      return false;\n     }\n \n     return !shortcutMode || lineHasProvidesOrRequires ||\n--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n     // no nodes have out-degree 0. I'll leave the proof of this as an exercise\n     // to the reader.\n     if (sortedList.size() < inputs.size()) {\n+      System.err.println(\"SORTED : \" + sortedList);\n+      System.err.println(\"INPUTS : \" + inputs);\n+\n       List<INPUT> subGraph = Lists.newArrayList(inputs);\n       subGraph.removeAll(sortedList);\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          });\n   }\n \n+  public void testSourceSortingOn2() {\n+    test(new String[] {\n+          \"goog.provide('a');\",\n+          \"goog.require('a');\\n\" +\n+          \"var COMPILED = false;\",\n+         },\n+         new String[] {\n+           \"var a={};\",\n+           \"var COMPILED=!1\"\n+         });\n+  }\n+\n   public void testSourceSortingCircularDeps1() {\n     args.add(\"--manage_closure_dependencies=true\");\n     test(new String[] {\n--- a/test/com/google/javascript/jscomp/deps/JsFileParserTest.java\n+++ b/test/com/google/javascript/jscomp/deps/JsFileParserTest.java\n     assertDeps(expected, result);\n   }\n \n+  public void testIncludeGoog3() {\n+    // This guy is pretending to provide goog, but he really doesn't.\n+    String contents = \"goog.provide('x');\\n\" +\n+        \"/**\\n\" +\n+        \" * the first constant in base.js\\n\" +\n+        \" */\\n\" +\n+        \"var COMPILED = false;\\n\";\n+\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+        ImmutableList.of(\"x\"), ImmutableList.of(\"goog\"));\n+    DependencyInfo result = parser.setIncludeGoogBase(true).parseFile(\n+        SRC_PATH, CLOSURE_PATH, contents);\n+    assertDeps(expected, result);\n+  }\n+\n   /** Asserts the deps match without errors */\n   private void assertDeps(DependencyInfo expected, DependencyInfo actual) {\n     assertEquals(expected, actual);", "timestamp": 1334333021, "metainfo": ""}