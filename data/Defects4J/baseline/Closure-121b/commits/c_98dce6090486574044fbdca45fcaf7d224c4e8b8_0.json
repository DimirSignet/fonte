{"sha": "98dce6090486574044fbdca45fcaf7d224c4e8b8", "log": "Preserve parameter side-effects  R=acleung DELTA=40  (33 added, 2 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3678   ", "commit": "\n--- a/src/com/google/javascript/jscomp/OptimizeParameters.java\n+++ b/src/com/google/javascript/jscomp/OptimizeParameters.java\n  * <ul>\n  * <li>Removes optional parameters if no caller specifies it as argument.</li>\n  * <li>Removes arguments at call site to function that\n- *     ignores the parameter. (Not implemented) </li>\n+ *     ignores the parameter.</li>\n  * <li>Inline a parameter if the function is always called with that constant.\n  *     </li>\n  * </ul>\n     for (int index = parameters.size() - 1; index >= 0; index--) {\n       if (parameters.get(index).shouldRemove()) {\n         Node paramName = eliminateFunctionParamAt(function, index);\n-        if (paramName != null) {\n-          addVariableToFunction(function, paramName,\n-              parameters.get(index).getArg());\n-        }\n+        addVariableToFunction(function, paramName,\n+            parameters.get(index).getArg());\n       }\n     }\n   }\n         \"Node must be a block.\");\n \n     Preconditions.checkState(value.getParent() == null);\n-    Node newVar = NodeUtil.newVarNode(varName.getString(), value);\n-    block.addChildToFront(newVar);\n+    Node stmt;\n+    if (varName != null) {\n+      stmt = NodeUtil.newVarNode(varName.getString(), value);\n+    } else {\n+      stmt = new Node(Token.EXPR_RESULT, value);\n+    }\n+    block.addChildToFront(stmt);\n     compiler.reportCodeChange();\n   }\n \n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n   public void testGlobalCatch() {\n     testSame(\"function foo(a) {} try {} catch (e) {foo(e)}\");\n   }\n+\n+  public void testNamelessParameter1() {\n+    test(\"f(g()); function f(){}\",\n+         \"f(); function f(){g()}\");\n+  }\n+\n+  public void testNamelessParameter2() {\n+    test(\"f(g(),h()); function f(){}\",\n+         \"f(); function f(){g();h()}\");\n+  }\n }", "timestamp": 1320945192, "metainfo": ""}