{"sha": "5222108be8ce0536b4f95d1743be406110afcb4b", "log": "Fix a bug where we would warn you when an interface implemented another interface, but wire it up anyway.  R=dimvar DELTA=47  (24 added, 5 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5585   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n         }\n       }\n \n-      // implemented interfaces\n-      if (isConstructor || isInterface) {\n-        implementedInterfaces = Lists.newArrayList();\n-        for (JSTypeExpression t : info.getImplementedInterfaces()) {\n-          JSType maybeInterType = t.evaluate(scope, typeRegistry);\n-          if (maybeInterType != null &&\n-              maybeInterType.setValidator(new ImplementedTypeValidator())) {\n-            implementedInterfaces.add((ObjectType) maybeInterType);\n+      // Implemented interfaces (for constructors only).\n+      if (info.getImplementedInterfaceCount() > 0) {\n+        if (isConstructor) {\n+          implementedInterfaces = Lists.newArrayList();\n+          for (JSTypeExpression t : info.getImplementedInterfaces()) {\n+            JSType maybeInterType = t.evaluate(scope, typeRegistry);\n+            if (maybeInterType != null &&\n+                maybeInterType.setValidator(new ImplementedTypeValidator())) {\n+              implementedInterfaces.add((ObjectType) maybeInterType);\n+            }\n           }\n+        } else if (isInterface) {\n+          reportWarning(\n+              TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, fnName);\n+        } else {\n+          reportWarning(CONSTRUCTOR_REQUIRED, \"@implements\", fnName);\n         }\n-      } else if (info.getImplementedInterfaceCount() > 0) {\n-        reportWarning(CONSTRUCTOR_REQUIRED, \"@implements\", fnName);\n-      }\n-\n-      // extended interfaces (for interface only)\n+      }\n+\n+      // extended interfaces (for interfaces only)\n+      // We've already emitted a warning if this is not an interface.\n       if (isInterface) {\n         extendedInterfaces = Lists.newArrayList();\n         for (JSTypeExpression t : info.getExtendedInterfaces()) {\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n                           \"interface\", functionPrivateName));\n         }\n       }\n-      // Interface cannot implement any interfaces\n-      if (functionType.hasImplementedInterfaces()) {\n-        compiler.report(t.makeError(n,\n-            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n-      }\n+\n       // Check whether the extended interfaces have any conflicts\n       if (functionType.getExtendedInterfacesCount() > 1) {\n         // Only check when extending more than one interfaces\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n   }\n \n   public void setImplementedInterfaces(List<ObjectType> implementedInterfaces) {\n-    // Records this type for each implemented interface.\n-    for (ObjectType type : implementedInterfaces) {\n-      registry.registerTypeImplementingInterface(this, type);\n-    }\n-    this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);\n+    if (isConstructor()) {\n+      // Records this type for each implemented interface.\n+      for (ObjectType type : implementedInterfaces) {\n+        registry.registerTypeImplementingInterface(this, type);\n+      }\n+      this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);\n+    } else {\n+      throw new UnsupportedOperationException();\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n \n package com.google.javascript.rhino.jstype;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n import com.google.javascript.rhino.Node;\n       .withReturnType(BOOLEAN_TYPE).build();\n     assertEquals(\"function (this:T, ...[?]): boolean\", fn.toString());\n   }\n+\n+  public void testSetImplementsOnInterface() {\n+    FunctionType iface = registry.createInterfaceType(\"I\", null);\n+    FunctionType subIface = registry.createInterfaceType(\"SubI\", null);\n+    try {\n+      subIface.setImplementedInterfaces(\n+          ImmutableList.of(iface.getInstanceType()));\n+      fail(\"Expected exception\");\n+    } catch (UnsupportedOperationException e) {\n+      // OK\n+    }\n+  }\n }", "timestamp": 1349218443, "metainfo": ""}