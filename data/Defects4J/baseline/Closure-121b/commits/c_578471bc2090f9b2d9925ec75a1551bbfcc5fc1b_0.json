{"sha": "578471bc2090f9b2d9925ec75a1551bbfcc5fc1b", "log": "Added diagnostic groups to CheckEventfulObjectDisposal pass. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47933819", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckEventfulObjectDisposal.java\n+++ b/src/com/google/javascript/jscomp/CheckEventfulObjectDisposal.java\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n import com.google.javascript.jscomp.Scope.Var;\n   }\n \n   // Seed types\n-  static final String DISPOSABLE_TYPE_NAME = \"goog.Disposable\";\n-  static final String EVENT_HANDLER_TYPE_NAME = \"goog.events.EventHandler\";\n-  JSType googDisposableType;\n-  JSType googEventsEventHandlerType;\n+  private static final String DISPOSABLE_TYPE_NAME = \"goog.Disposable\";\n+  private static final String EVENT_HANDLER_TYPE_NAME = \"goog.events.EventHandler\";\n+  private JSType googDisposableType;\n+  private JSType googEventsEventHandlerType;\n \n   // Eventful types\n-  Set<JSType> eventfulTypes;\n-\n-  final AbstractCompiler compiler;\n-  final JSTypeRegistry typeRegistry;\n+  private Set<JSType> eventfulTypes;\n+\n+  // Dispose methods is a map from regex to argument disposed/all arguments disposed.\n+  private Map<String, int[]> disposeMethods;\n+  // Member used to signify all arguments should be disposed.\n+  public static int[] disposeAll;\n+\n+  private final AbstractCompiler compiler;\n+  private final JSTypeRegistry typeRegistry;\n \n   // At the moment only ALLOCATED and POSSIBLY_DISPOSED are used\n   private enum SeenType {\n   /*\n    * The disposal checking policy used.\n    */\n-  public DisposalCheckingPolicy checkingPolicy;\n+  private DisposalCheckingPolicy checkingPolicy;\n \n   /*\n    * Eventize DAG represented using adjacency lists.\n    */\n-  public Map<String, Set<String>> eventizes;\n+  private Map<String, Set<String>> eventizes;\n \n   /*\n    * Maps from eventful object name to state.\n    */\n-  static Map<String, EventfulObjectState> eventfulObjectMap;\n+  private static Map<String, EventfulObjectState> eventfulObjectMap;\n+\n \n   public CheckEventfulObjectDisposal(AbstractCompiler compiler,\n       DisposalCheckingPolicy checkingPolicy) {\n     this.compiler = compiler;\n     this.checkingPolicy = checkingPolicy;\n+    this.initializeDisposeMethodsMap();\n     this.typeRegistry = compiler.getTypeRegistry();\n   }\n+\n+\n+  /**\n+   * Add a new call that is used to dispose an JS object.\n+   * @param pattern A regular expression that matches the function used to dispose of/register\n+   *   an object as disposable\n+   * @param argumentsThatAreDisposed An array of integers (ideally sorted) that specifies\n+   *   the arguments of the function being disposed\n+   */\n+  private void addDisposeCall(String pattern, int[] argumentsThatAreDisposed) {\n+    this.disposeMethods.put(pattern, argumentsThatAreDisposed);\n+  }\n+\n+\n+  /*\n+   * Initialize disposeMethods map with calls to dispose calls.\n+   */\n+  private void initializeDisposeMethodsMap() {\n+    this.disposeMethods = Maps.newHashMap();\n+\n+    // Initialize disposeMethods hashmap\n+    this.addDisposeCall(\"goog.dispose\", new int[]{0});\n+    this.addDisposeCall(\"goog.disposeAll\", disposeAll);\n+    this.addDisposeCall(\".push\", new int[]{0});\n+    this.addDisposeCall(\".add\", disposeAll);\n+  }\n+\n \n   private static Node getBase(Node n) {\n     Node base = n;\n \n     return base;\n   }\n+\n \n   /*\n    * Get the type of the this in the current scope of traversal\n         }\n       }\n \n-      // Handles goog.dispose(X)\n-      if (property.equals(\"goog.dispose\")) {\n-        ret.add(n.getLastChild());\n-      }\n-\n-      // Handles goog.disposeAll(X_1, X_2, ...)\n-      if (property.equals(\"goog.disposeAll\")) {\n-        for (Node t = first.getNext(); t != null; t = t.getNext()) {\n-          ret.add(t);\n+      // Call to function known to dispose arguments\n+      for (String disposeMethod : disposeMethods.keySet()) {\n+        if (property.matches(disposeMethod)) {\n+          int[] disposeArguments = disposeMethods.get(disposeMethod);\n+\n+          // Dispose all arguments?\n+          if (disposeArguments == disposeAll) {\n+            for (Node t = first.getNext(); t != null; t = t.getNext()) {\n+              ret.add(t);\n+            }\n+          } else {\n+            // Dispose specific arguments only\n+            Node t = first.getNext();\n+            int tsArgument = 0;\n+            for (int index : disposeArguments) {\n+              // The current item pointed to by t is beyond that requested in\n+              // current array element.\n+              if (tsArgument > disposeArguments[index]) {\n+                t = first.getNext();\n+                tsArgument = 0;\n+              }\n+              for (; tsArgument < disposeArguments[index] && t != null; ++tsArgument) {\n+                t = t.getNext();\n+              }\n+              if (tsArgument == disposeArguments[index] && t != null) {\n+                ret.add(t);\n+              }\n+            }\n+          }\n         }\n       }\n \n         JSType possiblyArrayType = possiblyArray.getJSType();\n         if (possiblyArrayType != null && possiblyArrayType.isArrayType()) {\n           ret.add(n.getLastChild());\n-        }\n-      }\n-\n-      /*\n-       * Heuristic: a variable used in call to push/addChild gets stored\n-       * in object with method push/addChild/addChild_/addChildAt/addPane.\n-       */\n-      if (property.endsWith(\".push\") ||\n-          property.contains(\".add\")) {\n-        for (Node t = first.getNext(); t != null; t = t.getNext()) {\n-          ret.add(t);\n         }\n       }\n \n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   // If a group is suppressible on a per-file basis, it should be added\n   // to parser/ParserConfig.properties\n   static final String DIAGNOSTIC_GROUP_NAMES =\n-      \"accessControls, ambiguousFunctionDecl, checkRegExp, \" +\n+      \"accessControls, ambiguousFunctionDecl, checkEventfulObjectDisposal, checkRegExp, \" +\n       \"checkStructDictInheritance, checkTypes, checkVars, const, \" +\n       \"constantProperty, deprecated, duplicateMessage, \" +\n       \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n       DiagnosticGroups.registerGroup(\"checkTypes\",\n           TypeValidator.ALL_DIAGNOSTICS,\n           TypeCheck.ALL_DIAGNOSTICS);\n+\n+  public static final DiagnosticGroup CHECK_EVENTFUL_OBJECT_DISPOSAL =\n+      DiagnosticGroups.registerGroup(\"checkEventfulObjectDisposal\",\n+          CheckEventfulObjectDisposal.EVENTFUL_OBJECT_NOT_DISPOSED,\n+          CheckEventfulObjectDisposal.EVENTFUL_OBJECT_PURELY_LOCAL,\n+          CheckEventfulObjectDisposal.OVERWRITE_PRIVATE_EVENTFUL_OBJECT,\n+          CheckEventfulObjectDisposal.UNLISTEN_WITH_ANONBOUND);\n \n   public static final DiagnosticGroup REPORT_UNKNOWN_TYPES =\n       DiagnosticGroups.registerGroup(\"reportUnknownTypes\",\n--- a/test/com/google/javascript/jscomp/CheckEventfulObjectDisposalTest.java\n+++ b/test/com/google/javascript/jscomp/CheckEventfulObjectDisposalTest.java\n       + \"goog.isString = function(x) {};\" + \"goog.isObject = function(x) {};\"\n       + \"goog.isDefAndNotNull = function(x) {};\" + \"goog.asserts = {};\"\n       + \"goog.dispose = function(x) {};\"\n+      + \"goog.disposeAll = function(var_args) {};\"\n       + \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\"\n       + \"/** @interface */\\n\"\n       + \"goog.Disposable = goog.abstractMethod;\"\n \n   @Override\n   public CompilerPass getProcessor(Compiler compiler) {\n-    return new CheckEventfulObjectDisposal(compiler, policy);\n+    CheckEventfulObjectDisposal compilerPass = new CheckEventfulObjectDisposal(compiler, policy);\n+\n+    return compilerPass;\n   }\n \n   public void testNoEventHandler() {\n     testSame(js);\n   }\n \n-  public void testFreedGoogDispose() {\n+  public void testFreedGoogDispose1() {\n     String js = CLOSURE_DEFS\n         + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n         + \"var test = function() { this.eh = new goog.events.EventHandler();\"\n         + \"goog.dispose(this.eh); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testNotAllFreedGoogDispose() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() {\"\n+        + \"this.eh1 = new goog.events.EventHandler();\"\n+        + \"this.eh2 = new goog.events.EventHandler();\"\n+        + \"goog.dispose(this.eh1, this.eh2); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js, CheckEventfulObjectDisposal.EVENTFUL_OBJECT_NOT_DISPOSED, true);\n+  }\n+\n+  public void testFreedGoogDisposeAll() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { \"\n+        + \"this.eh1 = new goog.events.EventHandler();\"\n+        + \"this.eh2 = new goog.events.EventHandler();\"\n+        + \"goog.disposeAll(this.eh1, this.eh2); };\"\n         + \"goog.inherits(test, goog.Disposable);\"\n         + \"var testObj = new test();\";\n     testSame(js);\n         + \"var testObj = new test();\";\n     testSame(js, CheckEventfulObjectDisposal.OVERWRITE_PRIVATE_EVENTFUL_OBJECT, true);\n   }\n+\n+  /*\n+   // TODO(user): update & enable when custom dispose call API is implemented\n+  public void testCustomDispose() {\n+    policy = CheckEventfulObjectDisposal.DisposalCheckingPolicy.AGGRESSIVE;\n+    customDispose = Maps.newHashMap();\n+    customDispose.put(\"helpers.disp\", new int[]{0});\n+    String js = CLOSURE_DEFS\n+        + \"helpers.disp = function(todispose, ctx) {\"\n+        + \" ctx.registerDisposable(todispose);\"\n+        + \" return todispose;\"\n+        + \"};\"\n+        + \"var x = helpers.disp(new goog.events.EventHandler(), OBJ);\"\n+        + \"var y = new goog.events.EventHandler();\"\n+        + \"helpers.disp(y, OBJ);\";\n+    testSame(js);\n+  }\n+  */\n }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     options.checkMissingGetCssNameBlacklist = \"foo\";\n     test(options, \"var x = 'foo';\",\n          CheckMissingGetCssName.MISSING_GETCSSNAME);\n+  }\n+\n+  public void testCheckEventfulDisposalWarningLevels() {\n+    CompilerOptions options = createCompilerOptions();\n+    options.setCheckEventfulObjectDisposalPolicy(\n+        CheckEventfulObjectDisposal.DisposalCheckingPolicy.ON);\n+    String js = \"var goog = {};\" + \"goog.inherits = function(x, y) {};\"\n+      + \"goog.dispose = function(x) {};\"\n+      + \"goog.disposeAll = function(var_args) {};\"\n+      + \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\"\n+      + \"/** @interface */\\n\"\n+      + \"goog.Disposable = function() {};\"\n+      + \"goog.Disposable.prototype.dispose = function() {};\"\n+      + \"/** @param {goog.Disposable} fn */\"\n+      + \"goog.Disposable.prototype.registerDisposable = function(fn) {};\"\n+      + \"/** @implements {goog.Disposable}\\n * @constructor */\"\n+      + \"goog.SubDisposable = function() {};\"\n+      + \"/** @inheritDoc */ \"\n+      + \"goog.SubDisposable.prototype.dispose = function() {};\"\n+      + \"/** @inheritDoc */\"\n+      + \"goog.SubDisposable.prototype.registerDisposable = function() {};\"\n+      + \"goog.events = {};\"\n+      + \"/** @extends {goog.SubDisposable}\\n *  @constructor */\"\n+      + \"goog.events.EventHandler = function() {};\"\n+      + \"goog.events.EventHandler.prototype.removeAll = function() {};\"\n+      + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+      + \"var test = function() { this.eh = new goog.events.EventHandler(); };\"\n+      + \"goog.inherits(test, goog.Disposable);\"\n+      + \"var testObj = new test();\";\n+\n+    test(options, js, CheckEventfulObjectDisposal.EVENTFUL_OBJECT_NOT_DISPOSED);\n+\n+    options.setWarningLevel(DiagnosticGroups.CHECK_EVENTFUL_OBJECT_DISPOSAL, CheckLevel.OFF);\n+    testSame(options, js);\n   }\n \n   public void testBug2592659() {", "timestamp": 1371080467, "metainfo": ""}