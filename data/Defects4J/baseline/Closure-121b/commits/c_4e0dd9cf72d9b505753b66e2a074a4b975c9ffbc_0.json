{"sha": "4e0dd9cf72d9b505753b66e2a074a4b975c9ffbc", "log": "Remove naming mismatches in DefaultPassConfig  R=nicksantos DELTA=5 (0 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6007   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   /** Closure pre-processing pass. */\n   @SuppressWarnings(\"deprecation\")\n   final HotSwapPassFactory closurePrimitives =\n-      new HotSwapPassFactory(\"processProvidesAndRequires\", false) {\n+      new HotSwapPassFactory(\"closurePrimitives\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n       maybeInitializePreprocessorSymbolTable(compiler);\n \n   /** Applies aliases and inlines goog.scope. */\n   final HotSwapPassFactory closureGoogScopeAliases =\n-      new HotSwapPassFactory(\"processGoogScopeAliases\", true) {\n+      new HotSwapPassFactory(\"closureGoogScopeAliases\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n       maybeInitializePreprocessorSymbolTable(compiler);\n \n   /** Checks that CSS class names are wrapped in goog.getCssName */\n   final PassFactory closureCheckGetCssName =\n-      new PassFactory(\"checkMissingGetCssName\", true) {\n+      new PassFactory(\"closureCheckGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       String blacklist = options.checkMissingGetCssNameBlacklist;\n    * inlined.\n    */\n   final PassFactory closureReplaceGetCssName =\n-      new PassFactory(\"renameCssNames\", true) {\n+      new PassFactory(\"closureReplaceGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n       return new CompilerPass() {\n \n   /** Inverting name normalization. */\n   final PassFactory invertContextualRenaming =\n-      new PassFactory(\"invertNames\", true) {\n+      new PassFactory(\"invertContextualRenaming\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);", "timestamp": 1355881820, "metainfo": ""}