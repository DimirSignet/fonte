{"sha": "b1b6778cf17b65e36ee01b3853b7e9add923479f", "log": "Remove the now obsolete SOURCENAME_PROP  R=nicksantos DELTA=22  (2 added, 17 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5555   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n   private static final long serialVersionUID = 1L;\n \n   public static final int\n-      // TODO(nicksantos): Remove this prop.\n-      SOURCENAME_PROP   = 16,\n-\n       JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n       VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                   // argument placeholder.\n   private static final String propToString(int propType) {\n       switch (propType) {\n         case VAR_ARGS_NAME:      return \"var_args_name\";\n-        case SOURCENAME_PROP:    return \"sourcename\";\n \n         case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n \n   }\n \n   public Object getProp(int propType) {\n-    if (propType == SOURCENAME_PROP) {\n-      return getSourceFileName();\n-    }\n-\n     PropListItem item = lookupProperty(propType);\n     if (item == null) {\n       return null;\n   }\n \n   public void putProp(int propType, Object value) {\n-    if (propType == SOURCENAME_PROP) {\n-      putProp(\n-          STATIC_SOURCE_FILE, new SimpleSourceFile((String) value, false));\n-      return;\n-    }\n-\n     removeProp(propType);\n     if (value != null) {\n       propListHead = createProp(propType, value, propListHead);\n     if (getProp(STATIC_SOURCE_FILE) == null) {\n       putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n       sourcePosition = other.sourcePosition;\n-    } else if (getProp(SOURCENAME_PROP) == null) {\n-      putProp(SOURCENAME_PROP, other.getProp(SOURCENAME_PROP));\n-      sourcePosition = other.sourcePosition;\n     }\n \n     return this;\n--- a/test/com/google/javascript/jscomp/AstValidatorTest.java\n+++ b/test/com/google/javascript/jscomp/AstValidatorTest.java\n import com.google.javascript.rhino.InputId;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.SimpleSourceFile;\n \n \n /**\n     Node n = new Node(Token.SCRIPT);\n     expectInvalid(n, Check.SCRIPT);\n     n.setInputId(new InputId(\"something_input\"));\n-    n.putProp(Node.SOURCENAME_PROP, \"something\");\n+    n.setStaticSourceFile(new SimpleSourceFile(\"something\", false));\n     expectValid(n, Check.SCRIPT);\n     expectInvalid(n, Check.STATEMENT);\n     expectInvalid(n, Check.EXPRESSION);\n--- a/test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java\n+++ b/test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java\n     globalMap.put(globalScope.getVar(VAR3), var3TempRefs);\n     map.updateGlobalVarReferences(globalMap, root);\n     scriptRoot.setInputId(INPUT2.getInputId());\n-    scriptRoot.putProp(Node.SOURCENAME_PROP, INPUT2.getName());\n+    scriptRoot.setSourceFileForTesting(INPUT2.getName());\n   }\n \n   /** Tests whether the global variable references are set/reset properly. */\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n   public void testGetSourceName() {\n     Node n = new Node(Token.BLOCK);\n     Node parent = new Node(Token.BLOCK, n);\n-    parent.putProp(Node.SOURCENAME_PROP, \"foo\");\n+    parent.setSourceFileForTesting(\"foo\");\n+\n     assertEquals(\"foo\", NodeUtil.getSourceName(n));\n   }\n ", "timestamp": 1348596501, "metainfo": ""}