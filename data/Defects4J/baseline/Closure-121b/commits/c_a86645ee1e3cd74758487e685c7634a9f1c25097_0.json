{"sha": "a86645ee1e3cd74758487e685c7634a9f1c25097", "log": "Assert that there are no parse warnings in tests, and fix a couple bugs in tests ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42843874", "commit": "\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n   /** Whether to check that all line number information is preserved. */\n   private boolean checkLineNumbers = true;\n \n+  /** Whether we expect parse warnings in the current test. */\n+  private boolean expectParseWarningsThisTest = false;\n+\n   /**\n    * An expected symbol table error. Only useful for testing the\n    * symbol table error-handling.\n     this(\"\", true);\n   }\n \n+  @Override protected void tearDown() throws Exception {\n+    super.tearDown();\n+    expectParseWarningsThisTest = false;\n+  }\n+\n   /**\n    * Gets the compiler pass instance to use for a test.\n    *\n    */\n   protected void enableAstValidation(boolean validate) {\n     astValidationEnabled = validate;\n+  }\n+\n+  /** Whether we should ignore parse warnings for the current test method. */\n+  protected void setExpectParseWarningsThisTest() {\n+    expectParseWarningsThisTest = true;\n   }\n \n   /** Returns a newly created TypeCheck. */\n     Node root = compiler.parseInputs();\n     assertTrue(\"Unexpected parse error(s): \" +\n         Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n+    if (!expectParseWarningsThisTest) {\n+      assertTrue(\"Unexpected parse warnings(s): \" +\n+          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n+          compiler.getWarnings().length == 0);\n+    }\n \n     if (astValidationEnabled) {\n       (new AstValidator()).validateRoot(root);\n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n         + \"Foo.prototype.Foo_prototype$a=0;\"\n         + \"var Bar=function(){};\"\n         + \"Bar.prototype.Bar_prototype$a=0;\";\n+\n+    setExpectParseWarningsThisTest();\n     testSets(false, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n         js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n     testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n   public void testClosureInherits() {\n     String js = \"\"\n         + \"var goog = {};\"\n-        + \"/* @param {Function} childCtor Child class.\\n\"\n+        + \"/** @param {Function} childCtor Child class.\\n\"\n         + \" * @param {Function} parentCtor Parent class. */\\n\"\n         + \"goog.inherits = function(childCtor, parentCtor) {\\n\"\n         + \"  /** @constructor */\\n\"\n--- a/test/com/google/javascript/jscomp/TightenTypesTest.java\n+++ b/test/com/google/javascript/jscomp/TightenTypesTest.java\n \n   public void testImplicitPropCall() {\n     testSame(\"/** @constructor */ function Window() {};\\n\"\n-             + \"/** @param {function()} f \\n@param {number} */\\n\"\n+             + \"/** @param {function()} f \\n@param {number} d */\\n\"\n              + \"Window.prototype.setTimeout = function(f, d) {};\",\n              \"function foo() {};\\n\"\n              + \"(new Window).setTimeout(foo, 20);\", null);\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n         \" * @param {function(!Object)} bar\\n\" +\n         \" */\\n\" +\n         \"function foo(bar) {}\\n\" +\n-        \"foo((/** @type {function(string)} */\" +\n-        \"function(baz) { var f = baz; }))\\n\");\n+        \"foo(/** @type {function(string)} */\" +\n+        \"  (function(baz) { var f = baz; }))\\n\");\n     assertEquals(\"string\", findNameType(\"f\", lastLocalScope).toString());\n   }\n ", "timestamp": 1361486262, "metainfo": ""}