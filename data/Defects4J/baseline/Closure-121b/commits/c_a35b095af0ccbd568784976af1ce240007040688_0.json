{"sha": "a35b095af0ccbd568784976af1ce240007040688", "log": "Infer IIFE arguments.  R=dimvar DELTA=58  (48 added, 4 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5620   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n       call.getFirstChild().getNext(), index);\n   }\n \n+  /**\n+   * Returns whether this is a target of a call or new.\n+   */\n+  static boolean isCallOrNewTarget(Node target) {\n+    Node parent = target.getParent();\n+    return parent != null\n+        && NodeUtil.isCallOrNew(parent)\n+        && parent.getFirstChild() == target;\n+  }\n+\n   private static boolean isToStringMethodCall(Node call) {\n     Node getNode = call.getFirstChild();\n     if (isGet(getNode)) {\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n   private void inferArguments(Scope functionScope) {\n     Node functionNode = functionScope.getRootNode();\n     Node astParameters = functionNode.getFirstChild().getNext();\n+    Node iifeArgumentNode = null;\n+\n+    if (NodeUtil.isCallOrNewTarget(functionNode)) {\n+      iifeArgumentNode = functionNode.getNext();\n+    }\n+\n     FunctionType functionType =\n         JSType.toMaybeFunctionType(functionNode.getJSType());\n     if (functionType != null) {\n       if (parameterTypes != null) {\n         Node parameterTypeNode = parameterTypes.getFirstChild();\n         for (Node astParameter : astParameters.children()) {\n-          if (parameterTypeNode == null) {\n-            return;\n-          }\n-\n           Var var = functionScope.getVar(astParameter.getString());\n           Preconditions.checkNotNull(var);\n           if (var.isTypeInferred() &&\n-              var.getType() == unknownType &&\n-              parameterTypeNode.getJSType() != null) {\n-            JSType newType = parameterTypeNode.getJSType();\n-            var.setType(newType);\n-            astParameter.setJSType(newType);\n+              var.getType() == unknownType) {\n+            JSType newType = null;\n+\n+            if (iifeArgumentNode != null) {\n+              newType = iifeArgumentNode.getJSType();\n+            } else if (parameterTypeNode != null) {\n+              newType = parameterTypeNode.getJSType();\n+            }\n+\n+            if (newType != null) {\n+              var.setType(newType);\n+              astParameter.setJSType(newType);\n+            }\n           }\n \n-          parameterTypeNode = parameterTypeNode.getNext();\n+          if (parameterTypeNode != null) {\n+            parameterTypeNode = parameterTypeNode.getNext();\n+          }\n+          if (iifeArgumentNode != null) {\n+            iifeArgumentNode = iifeArgumentNode.getNext();\n+          }\n         }\n       }\n     }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"initializing variable\\n\" +\n         \"found   : Boolean\\n\" +\n         \"required: boolean\");\n+  }\n+\n+  public void testIIFE1() throws Exception {\n+    testTypes(\n+        \"var namespace = {};\" +\n+        \"/** @type {number} */ namespace.prop = 3;\" +\n+        \"(function(ns) {\" +\n+        \"  ns.prop = true;\" +\n+        \"})(namespace);\",\n+        \"assignment to property prop of ns\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testNotIIFE1() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"/** @param {...?} x */ function g(x) {}\" +\n+        \"g(function(y) { f(y); }, true);\");\n   }\n \n   public void testIssue61() throws Exception {", "timestamp": 1349731893, "metainfo": ""}