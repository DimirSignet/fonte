{"sha": "1d806d5becb1be384050f49ffadbb57b7523db35", "log": "Automated g4 rollback.  *** Reason for rollback ***  causing some problems for enums with @const members  *** Original change description ***  If a variable is declared @const, and we know the type of its value, then we can just use that as the type.  DELTA=70  (0 added, 47 deleted, 23 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=695   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n           shouldUseFunctionLiteralType(\n               (FunctionType) rValue.getJSType(), info, lValue)) {\n         return rValue.getJSType();\n-      } else if (info != null) {\n-        if (info.hasEnumParameterType()) {\n-          if (rValue != null && rValue.getType() == Token.OBJECTLIT) {\n-            return rValue.getJSType();\n-          } else {\n-            return createEnumTypeFromNodes(\n-                rValue, lValue.getQualifiedName(), info, lValue);\n-          }\n-        } else if (info.isConstructor() || info.isInterface()) {\n-          return createFunctionTypeFromNodes(\n+      } else if (info != null && info.hasEnumParameterType()) {\n+        if (rValue != null && rValue.getType() == Token.OBJECTLIT) {\n+          return rValue.getJSType();\n+        } else {\n+          return createEnumTypeFromNodes(\n               rValue, lValue.getQualifiedName(), info, lValue);\n-        } else if (info.isConstant() && rValue != null\n-            && rValue.getJSType() != null\n-            && !rValue.getJSType().isUnknownType()) {\n-          return rValue.getJSType();\n-        }\n-      }\n-\n-      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n+        }\n+      } else if (info != null &&\n+                 (info.isConstructor() || info.isInterface())) {\n+        return createFunctionTypeFromNodes(\n+            rValue, lValue.getQualifiedName(), info, lValue);\n+      } else {\n+        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n+      }\n     }\n \n     /**\n       // 1) @type annnotation / @enum annotation\n       // 2) ASSIGN to FUNCTION literal\n       // 3) @param/@return annotation (with no function literal)\n-      // 4) ASSIGN to something marked @const\n-      // 5) ASSIGN to anything else\n+      // 4) ASSIGN to anything else\n       //\n-      // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff\n+      // 1 and 3 are declarations, 4 is inferred, and 2 is a declaration iff\n       // the function has not been declared before.\n       //\n       // FUNCTION literals are special because TypedScopeCreator is very smart\n       // about getting as much type information as possible for them.\n \n-      // Determining type for #1 + #2 + #3 + #4\n+      // Determining type for #1 + #2 + #3\n       JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n       if (valueType == null && rhsValue != null) {\n-        // Determining type for #5\n+        // Determining type for #4\n         valueType = rhsValue.getJSType();\n       }\n \n \n       boolean inferred = true;\n       if (info != null) {\n-        // Determining declaration for #1 + #3 + #4\n-        inferred = !(info.hasType()\n-            || info.hasEnumParameterType()\n-            || (info.isConstant() && valueType != null\n-                && !valueType.isUnknownType())\n-            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n+        // Determining declaration for #1 + #3\n+        inferred = !(info.hasType() || info.hasEnumParameterType() ||\n+            FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n       }\n \n       if (inferred) {\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertEquals(\"number\", yType.toString());\n   }\n \n-  public void testDeclaredConstType1() throws Exception {\n-    testSame(\n-        \"/** @const */ var x = 3;\" +\n-        \"function f() { var y = x; }\");\n-    JSType yType = lastLocalScope.getVar(\"y\").getType();\n-    assertEquals(\"number\", yType.toString());\n-  }\n-\n-  public void testDeclaredConstType2() throws Exception {\n-    testSame(\n-        \"/** @const */ var x = {};\" +\n-        \"function f() { var y = x; }\");\n-    JSType yType = lastLocalScope.getVar(\"y\").getType();\n-    assertEquals(\"{}\", yType.toString());\n-  }\n-\n-  public void testDeclaredConstType3() throws Exception {\n-    testSame(\n-        \"/** @const */ var x = {};\" +\n-        \"/** @const */ x.z = 'hi';\" +\n-        \"function f() { var y = x.z; }\");\n-    JSType yType = lastLocalScope.getVar(\"y\").getType();\n-    assertEquals(\"string\", yType.toString());\n-  }\n-\n-  public void testDeclaredConstType4() throws Exception {\n-    testSame(\n-        \"/** @constructor */ function Foo() {}\" +\n-        \"/** @const */ Foo.prototype.z = 'hi';\" +\n-        \"function f() { var y = (new Foo()).z; }\");\n-    JSType yType = lastLocalScope.getVar(\"y\").getType();\n-    assertEquals(\"string\", yType.toString());\n-\n-    ObjectType fooType =\n-        ((FunctionType) globalScope.getVar(\"Foo\").getType()).getInstanceType();\n-    assertTrue(fooType.isPropertyTypeDeclared(\"z\"));\n-  }\n-\n   public void testBadCtorInit1() throws Exception {\n     testSame(\"/** @constructor */ var f;\", CTOR_INITIALIZER);\n   }", "timestamp": 1298936606, "metainfo": ""}