{"sha": "4adf024b5eb87f6b760b40e9923ed1391bca4152", "log": "add xtb-based translation to the Closure Compiler command-line api  R=johnlenz DELTA=61  (58 added, 1 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3243   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n import org.kohsuke.args4j.spi.StringOptionHandler;\n \n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintStream;\n         handler = BooleanOptionHandler.class,\n         usage = \"Prints the compiler version to stderr.\")\n     private boolean version = false;\n+\n+    @Option(name = \"--translations_file\",\n+        usage = \"Source of translated messages. Currently only supports XTB.\")\n+    private String translationsFile = \"\";\n+\n+    @Option(name = \"--translations_project\",\n+        usage = \"Scopes all translations to the specified project.\" +\n+        \"When specified, we will use different message ids so that messages \" +\n+        \"in different projects can have different translations.\")\n+    private String translationsProject = null;\n \n     @Option(name = \"--flagfile\",\n         usage = \"A file containing additional command-line options.\")\n       level.setDebugOptionsForCompilationLevel(options);\n     }\n \n-    if(flags.generate_exports) {\n+    if (flags.generate_exports) {\n       options.setGenerateExports(flags.generate_exports);\n     }\n \n     }\n \n     options.closurePass = flags.process_closure_primitives;\n+\n+    if (!flags.translationsFile.isEmpty()) {\n+      try {\n+        options.messageBundle = new XtbMessageBundle(\n+            new FileInputStream(flags.translationsFile),\n+            flags.translationsProject);\n+      } catch (IOException e) {\n+        throw new RuntimeException(\"Reading XTB file\", e);\n+      }\n+    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n+      // translations file, they might reasonably try to write their own\n+      // implementation of goog.getMsg that makes the substitution at\n+      // run-time.\n+      //\n+      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n+      // so we might as well inline it.\n+      options.messageBundle = new EmptyMessageBundle();\n+    }\n+\n     return options;\n   }\n \n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/EmptyMessageBundle.java\n+/*\n+ * Copyright 2008 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.javascript.jscomp.JsMessage.IdGenerator;\n+\n+/**\n+ * An implementation of MessageBundle that has no translations.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public class EmptyMessageBundle implements MessageBundle {\n+\n+  /**\n+   * Gets a dummy message ID generator.\n+   */\n+  @Override\n+  public IdGenerator idGenerator() {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns null, to indicate it has no message replacements.\n+   */\n+  @Override\n+  public JsMessage getMessage(String id) {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns an empty list of messages.\n+   */\n+  @Override\n+  public Iterable<JsMessage> getAllMessages() {\n+    return ImmutableList.of();\n+  }\n+}\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     testSame(\"var goog = {}; goog.provide('goog.dom');\");\n   }\n \n+  public void testGetMsgWiring() throws Exception {\n+    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n+         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\",\n+         \"var goog={getMsg:function(a){return a}}, \" +\n+         \"MSG_FOO=goog.getMsg('foo');\");\n+    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n+    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n+         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\" +\n+         \"window['foo'] = MSG_FOO;\",\n+         \"window.foo = 'foo';\");\n+  }\n+\n   public void testCssNameWiring() throws Exception {\n     test(\"var goog = {}; goog.getCssName = function() {};\" +\n          \"goog.setCssNameMapping = function() {};\" +", "timestamp": 1315860886, "metainfo": ""}