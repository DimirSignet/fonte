{"sha": "9d1fbeb46eb8a09b2710d6dd9a94a337d5e676ca", "log": "ES5 Strict changes: * demote ES5 checks from errors to warnings by default. * enable ES5 checks by default * depreciate the compiler option and command-line flag in favor of the diagnostic group. * promote the ES5 strict checks to errors when running in the * ES5_STRICT language mode.  R=acleung DELTA=56  (16 added, 10 deleted, 30 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2502   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n           options.checkGlobalThisLevel);\n     }\n \n+    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.ES5_STRICT,\n+          CheckLevel.ERROR);\n+    }\n+\n     // Initialize the warnings guard.\n     List<WarningsGuard> guards = Lists.newArrayList();\n     guards.add(\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   public String checkMissingGetCssNameBlacklist;\n \n   /** Checks that the synctactic restrictions of ES5 strict mode are met. */\n+  // TODO(johnlenz): remove this.\n   public boolean checkEs5Strict;\n \n   /** Checks that the synctactic restrictions of Caja are met. */\n     checkMissingReturn = CheckLevel.OFF;\n     checkMissingGetCssNameLevel = CheckLevel.OFF;\n     checkMissingGetCssNameBlacklist = null;\n-    checkEs5Strict = false;\n     checkCaja = false;\n     computeFunctionSideEffects = false;\n     chainCalls = false;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       checks.add(checkGlobalNames);\n     }\n \n-    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT\n-        || options.checkCaja\n-        || options.checkEs5Strict) {\n-      checks.add(checkStrictMode);\n-    }\n+    checks.add(checkStrictMode);\n \n     // Replace 'goog.getCssName' before processing defines but after the\n     // other checks have been done.\n--- a/src/com/google/javascript/jscomp/StrictModeCheck.java\n+++ b/src/com/google/javascript/jscomp/StrictModeCheck.java\n \n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n-\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.Scope.Var;\n-\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n class StrictModeCheck extends AbstractPostOrderCallback\n     implements CompilerPass {\n \n-  static final DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.error(\n+  static final DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.warning(\n       \"JSC_UNKNOWN_VARIABLE\", \"unknown variable {0}\");\n \n-  static final DiagnosticType WITH_DISALLOWED = DiagnosticType.error(\n+  static final DiagnosticType WITH_DISALLOWED = DiagnosticType.warning(\n       \"JSC_WITH_DISALLOWED\", \"\\\"with\\\" cannot be used in ES5 strict mode\");\n \n   static final DiagnosticType EVAL_USE = DiagnosticType.error(\n       \"JSC_EVAL_USE\", \"\\\"eval\\\" cannot be used in Caja\");\n \n-  static final DiagnosticType EVAL_DECLARATION = DiagnosticType.error(\n+  static final DiagnosticType EVAL_DECLARATION = DiagnosticType.warning(\n       \"JSC_EVAL_DECLARATION\",\n       \"\\\"eval\\\" cannot be redeclared in ES5 strict mode\");\n \n-  static final DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.error(\n+  static final DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.warning(\n       \"JSC_EVAL_ASSIGNMENT\",\n       \"the \\\"eval\\\" object cannot be reassigned in ES5 strict mode\");\n \n-  static final DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.error(\n+  static final DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.warning(\n       \"JSC_ARGUMENTS_DECLARATION\",\n       \"\\\"arguments\\\" cannot be redeclared in ES5 strict mode\");\n \n-  static final DiagnosticType ARGUMENTS_ASSIGNMENT = DiagnosticType.error(\n+  static final DiagnosticType ARGUMENTS_ASSIGNMENT = DiagnosticType.warning(\n       \"JSC_ARGUMENTS_ASSIGNMENT\",\n       \"the \\\"arguments\\\" object cannot be reassigned in ES5 strict mode\");\n \n-  static final DiagnosticType DELETE_VARIABLE = DiagnosticType.error(\n+  static final DiagnosticType DELETE_VARIABLE = DiagnosticType.warning(\n       \"JSC_DELETE_VARIABLE\",\n       \"variables, functions, and arguments cannot be deleted in \"\n       + \"ES5 strict mode\");\n       \"JSC_ILLEGAL_NAME\",\n       \"identifiers ending in '__' cannot be used in Caja\");\n \n-  static final DiagnosticType DUPLICATE_OBJECT_KEY = DiagnosticType.error(\n+  static final DiagnosticType DUPLICATE_OBJECT_KEY = DiagnosticType.warning(\n       \"JSC_DUPLICATE_OBJECT_KEY\",\n       \"object literals cannot contain duplicate keys in ES5 strict mode\");\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n \n   public void testIssue115() {\n     args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n+    args.add(\"--jscomp_off=es5Strict\");\n     args.add(\"--warning_level=VERBOSE\");\n     test(\"function f() { \" +\n          \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n--- a/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n   }\n \n   public void testWith() {\n-    test(\"var a; function foo(obj) { with (obj) { a = 3; }}\", null,\n+    testSame(\"var a; function foo(obj) { with (obj) { a = 3; }}\",\n          StrictModeCheck.WITH_DISALLOWED);\n   }\n \n   }\n \n   public void testEval2() {\n-    test(\"function foo(eval) {}\", null,\n+    testSame(\"function foo(eval) {}\",\n          StrictModeCheck.EVAL_DECLARATION);\n   }\n \n   }\n \n   public void testEval4() {\n-    test(\"function foo() { var eval = 3; }\", null,\n+    testSame(\"function foo() { var eval = 3; }\",\n          StrictModeCheck.EVAL_DECLARATION);\n   }\n \n   public void testEval5() {\n-    test(\"function eval() {}\", null, StrictModeCheck.EVAL_DECLARATION);\n+    testSame(\"function eval() {}\", StrictModeCheck.EVAL_DECLARATION);\n   }\n \n   public void testEval6() {\n-    test(\"try {} catch (eval) {}\", null, StrictModeCheck.EVAL_DECLARATION);\n+    testSame(\"try {} catch (eval) {}\", StrictModeCheck.EVAL_DECLARATION);\n   }\n \n   public void testEval7() {\n   }\n \n   public void testUnknownVariable() {\n-    test(\"function foo(a) { a = b; }\", null, StrictModeCheck.UNKNOWN_VARIABLE);\n+    testSame(\"function foo(a) { a = b; }\", StrictModeCheck.UNKNOWN_VARIABLE);\n   }\n \n   public void testUnknownVariable2() {\n-    test(\"a: while (true) { a = 3; }\", null, StrictModeCheck.UNKNOWN_VARIABLE);\n+    testSame(\"a: while (true) { a = 3; }\", StrictModeCheck.UNKNOWN_VARIABLE);\n   }\n \n   public void testUnknownVariable3() {\n   }\n \n   public void testArguments() {\n-    test(\"function foo(arguments) {}\", null,\n+    testSame(\"function foo(arguments) {}\",\n          StrictModeCheck.ARGUMENTS_DECLARATION);\n   }\n \n   public void testArguments2() {\n-    test(\"function foo() { var arguments = 3; }\", null,\n+    testSame(\"function foo() { var arguments = 3; }\",\n          StrictModeCheck.ARGUMENTS_DECLARATION);\n   }\n \n   public void testArguments3() {\n-    test(\"function arguments() {}\", null,\n+    testSame(\"function arguments() {}\",\n          StrictModeCheck.ARGUMENTS_DECLARATION);\n   }\n \n   public void testArguments4() {\n-    test(\"try {} catch (arguments) {}\", null,\n+    testSame(\"try {} catch (arguments) {}\",\n          StrictModeCheck.ARGUMENTS_DECLARATION);\n   }\n \n \n   public void testEvalAssignment() {\n     noCajaChecks = true;\n-    test(\"function foo() { eval = []; }\", null,\n+    testSame(\"function foo() { eval = []; }\",\n          StrictModeCheck.EVAL_ASSIGNMENT);\n   }\n \n   }\n \n   public void testAssignToArguments() {\n-    test(\"function foo() { arguments = []; }\", null,\n+    testSame(\"function foo() { arguments = []; }\",\n          StrictModeCheck.ARGUMENTS_ASSIGNMENT);\n   }\n \n   public void testDeleteVar() {\n-    test(\"var a; delete a\", null, StrictModeCheck.DELETE_VARIABLE);\n+    testSame(\"var a; delete a\", StrictModeCheck.DELETE_VARIABLE);\n   }\n \n   public void testDeleteFunction() {\n-    test(\"function a() {} delete a\", null, StrictModeCheck.DELETE_VARIABLE);\n+    testSame(\"function a() {} delete a\", StrictModeCheck.DELETE_VARIABLE);\n   }\n \n   public void testDeleteArgument() {\n-    test(\"function b(a) { delete a; }\", null, StrictModeCheck.DELETE_VARIABLE);\n+    testSame(\"function b(a) { delete a; }\",\n+        StrictModeCheck.DELETE_VARIABLE);\n   }\n \n   public void testDeleteProperty() {\n     testSame(\"var o = {a: 1, b: 2, c: 3};\");\n     testSame(\"var x = { get a() {}, set a(p) {} };\");\n \n-    test(\"var o = {a: 1, b: 2, a: 3};\", null,\n+    testSame(\"var o = {a: 1, b: 2, a: 3};\",\n+        StrictModeCheck.DUPLICATE_OBJECT_KEY);\n+    testSame(\"var x = { get a() {}, get a() {} };\",\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);\n-    test(\"var x = { get a() {}, get a() {} };\", null,\n+    testSame(\"var x = { get a() {}, a: 1 };\",\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);\n-    test(\"var x = { get a() {}, a: 1 };\", null,\n+    testSame(\"var x = { set a(p) {}, a: 1 };\",\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);\n-    test(\"var x = { set a(p) {}, a: 1 };\", null,\n-         StrictModeCheck.DUPLICATE_OBJECT_KEY);\n   }\n }", "timestamp": 1309896469, "metainfo": ""}