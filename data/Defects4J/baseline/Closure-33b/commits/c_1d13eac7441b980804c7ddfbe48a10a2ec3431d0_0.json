{"sha": "1d13eac7441b980804c7ddfbe48a10a2ec3431d0", "log": "Add setters for inline variable, inline functions, and remove unused variables.  R=nicksantos DELTA=90  (78 added, 4 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3103   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n  */\n \n package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.CompilerOptions.Reach;\n \n /**\n  * A CompilationLevel represents the level of optimization that should be\n     // Does not call applyBasicCompilationOptions(options) because the call to\n     // skipAllCompilerPasses() cannot be easily undone.\n     options.closurePass = true;\n-    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n+    options.setRenamingPolicy(\n+        VariableRenamingPolicy.LOCAL, PropertyRenamingPolicy.OFF);\n     options.shadowVariables = true;\n-    options.inlineLocalVariables = true;\n+    options.setInlineVariables(Reach.LOCAL_ONLY);\n     options.flowSensitiveInlineVariables = true;\n-    options.inlineLocalFunctions = true;\n+    options.setInlineFunctions(Reach.LOCAL_ONLY);\n     options.checkGlobalThisLevel = CheckLevel.OFF;\n     options.foldConstants = true;\n     options.coalesceVariableNames = true;\n     options.labelRenaming = true;\n     options.removeDeadCode = true;\n     options.optimizeArgumentsArray = true;\n-    options.removeUnusedVars = false;\n-    options.removeUnusedLocalVars = true;\n+    options.setRemoveUnusedVariable(Reach.LOCAL_ONLY);\n     options.collapseObjectLiterals = true;\n \n     // Allows annotations that are not standard.\n     options.removeClosureAsserts = true;\n     options.aliasKeywords = true;\n     options.reserveRawExports = true;\n-    options.variableRenaming = VariableRenamingPolicy.ALL;\n+    options.setRenamingPolicy(\n+        VariableRenamingPolicy.ALL, PropertyRenamingPolicy.ALL_UNQUOTED);\n     options.shadowVariables = true;\n-    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n     options.removeUnusedPrototypeProperties = true;\n     options.removeUnusedPrototypePropertiesInExterns = true;\n     options.collapseAnonymousFunctions = true;\n     options.rewriteFunctionExpressions = true;\n     options.smartNameRemoval = true;\n     options.inlineConstantVars = true;\n-    options.inlineFunctions = true;\n-    options.inlineLocalFunctions = true;\n+    options.setInlineFunctions(Reach.ALL);\n     options.inlineGetters = true;\n-    options.inlineVariables = true;\n+    options.setInlineVariables(Reach.ALL);\n     options.flowSensitiveInlineVariables = true;\n     options.computeFunctionSideEffects = true;\n \n     // Remove unused vars also removes unused functions.\n-    options.removeUnusedVars = true;\n-    options.removeUnusedLocalVars = true;\n+    options.setRemoveUnusedVariable(Reach.ALL);\n \n     // Move code around based on the defined modules.\n     options.crossModuleCodeMotion = true;\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n  * @author nicksantos@google.com (Nick Santos)\n  */\n public class CompilerOptions implements Serializable, Cloneable {\n+\n+  // A common enum for compiler passes that can run either globally or locally.\n+  public enum Reach {\n+    ALL,\n+    LOCAL_ONLY,\n+    NONE\n+  }\n+\n   // TODO(nicksantos): All public properties of this class should be made\n   // package-private, and have a public setter.\n \n   }\n \n   /**\n+   * Set the function inlining policy for the compiler.\n+   */\n+  public void setInlineFunctions(Reach reach) {\n+    switch (reach) {\n+      case ALL:\n+        this.inlineFunctions = true;\n+        this.inlineLocalFunctions = true;\n+        break;\n+      case LOCAL_ONLY:\n+        this.inlineFunctions = false;\n+        this.inlineLocalFunctions = true;\n+        break;\n+      case NONE:\n+        this.inlineFunctions = false;\n+        this.inlineLocalFunctions = false;\n+        break;\n+      default:\n+        throw new IllegalStateException(\"unexpected\");\n+    }\n+  }\n+\n+  /**\n+   * Set the variable inlining policy for the compiler.\n+   */\n+  public void setInlineVariables(Reach reach) {\n+    switch (reach) {\n+      case ALL:\n+        this.inlineVariables = true;\n+        this.inlineLocalVariables = true;\n+        break;\n+      case LOCAL_ONLY:\n+        this.inlineVariables = false;\n+        this.inlineLocalVariables = true;\n+        break;\n+      case NONE:\n+        this.inlineVariables = false;\n+        this.inlineLocalVariables = false;\n+        break;\n+      default:\n+        throw new IllegalStateException(\"unexpected\");\n+    }\n+  }\n+\n+  /**\n+   * Set the variable removal policy for the compiler.\n+   */\n+  public void setRemoveUnusedVariable(Reach reach) {\n+    switch (reach) {\n+      case ALL:\n+        this.removeUnusedVars = true;\n+        this.removeUnusedLocalVars = true;\n+        break;\n+      case LOCAL_ONLY:\n+        this.removeUnusedVars = false;\n+        this.removeUnusedLocalVars = true;\n+        break;\n+      case NONE:\n+        this.removeUnusedVars = false;\n+        this.removeUnusedLocalVars = false;\n+        break;\n+      default:\n+        throw new IllegalStateException(\"unexpected\");\n+    }\n+  }\n+\n+  /**\n    * Sets the functions whose debug strings to replace.\n    */\n   public void setReplaceStringsConfiguration(", "timestamp": 1314134781, "metainfo": ""}