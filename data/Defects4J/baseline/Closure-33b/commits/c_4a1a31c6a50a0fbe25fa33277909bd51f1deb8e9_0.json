{"sha": "4a1a31c6a50a0fbe25fa33277909bd51f1deb8e9", "log": "Fix a bunch of bugs in record type sup/inf with proxy types Fixes issue 603  R=tylerg DELTA=76  (39 added, 27 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3796   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n         propertyNode);\n   }\n \n-  @Override\n-  public JSType getLeastSupertype(JSType that) {\n-    if (!that.isRecordType()) {\n-      return super.getLeastSupertype(that);\n-    }\n-\n-    RecordType thatRecord = that.toMaybeRecordType();\n-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-\n-    // The least supertype consist of those properties of the record\n-    // type that both record types hold in common both by name and\n-    // type of the properties themselves.\n-    for (String property : properties.keySet()) {\n-      if (thatRecord.hasProperty(property) &&\n-          thatRecord.getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n-\n-    return builder.build();\n-  }\n-\n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n-      RecordType thatRecord = (RecordType) that;\n+      RecordType thatRecord = that.toMaybeRecordType();\n       RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n \n       // The greatest subtype consists of those *unique* properties of both\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     builder.addProperty(\"e\", NUMBER_TYPE, null);\n     builder.addProperty(\"b\", STRING_TYPE, null);\n     builder.addProperty(\"c\", STRING_TYPE, null);\n-    JSType subRecordType = builder.build();\n-\n-    JSType leastSupertype = recordType.getLeastSupertype(subRecordType);\n-\n-    builder = new RecordTypeBuilder(registry);\n-    builder.addProperty(\"b\", STRING_TYPE, null);\n-\n-    assertTypeEquals(leastSupertype, builder.build());\n+    JSType otherRecordType = builder.build();\n+\n+    assertTypeEquals(\n+        registry.createUnionType(recordType, otherRecordType),\n+        recordType.getLeastSupertype(otherRecordType));\n   }\n \n   public void testRecordTypeLeastSuperType3() {\n     builder.addProperty(\"d\", NUMBER_TYPE, null);\n     builder.addProperty(\"e\", STRING_TYPE, null);\n     builder.addProperty(\"f\", STRING_TYPE, null);\n-    JSType subRecordType = builder.build();\n-\n-    JSType leastSupertype = recordType.getLeastSupertype(subRecordType);\n-    assertTypeEquals(leastSupertype, OBJECT_TYPE);\n+    JSType otherRecordType = builder.build();\n+\n+    assertTypeEquals(\n+        registry.createUnionType(recordType, otherRecordType),\n+        recordType.getLeastSupertype(otherRecordType));\n   }\n \n   public void testRecordTypeLeastSuperType4() {\n \n     builder = new RecordTypeBuilder(registry);\n     builder.addProperty(\"a\", STRING_TYPE, null);\n+    builder.addProperty(\"c\", STRING_TYPE, null);\n+    JSType acType = builder.build();\n+    JSType abOrAcType = registry.createUnionType(abType, acType);\n+\n+    builder = new RecordTypeBuilder(registry);\n+    builder.addProperty(\"a\", STRING_TYPE, null);\n     builder.addProperty(\"b\", STRING_TYPE, null);\n     builder.addProperty(\"c\", NUMBER_TYPE, null);\n     JSType abcType = builder.build();\n         registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n         registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n         aType,\n+        abOrAcType,\n         abType,\n         abcType,\n         registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n--- a/test/com/google/javascript/rhino/jstype/RecordTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/RecordTypeTest.java\n     assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n         record.toString());\n   }\n+\n+  public void testSupAndInf() {\n+    JSType recordA = new RecordTypeBuilder(registry)\n+        .addProperty(\"a\", NUMBER_TYPE, null)\n+        .addProperty(\"b\", NUMBER_TYPE, null)\n+        .build();\n+    JSType recordC = new RecordTypeBuilder(registry)\n+        .addProperty(\"b\", NUMBER_TYPE, null)\n+        .addProperty(\"c\", NUMBER_TYPE, null)\n+        .build();\n+    ProxyObjectType proxyRecordA = new ProxyObjectType(registry, recordA);\n+    ProxyObjectType proxyRecordC = new ProxyObjectType(registry, recordC);\n+\n+    JSType aInfC = new RecordTypeBuilder(registry)\n+        .addProperty(\"a\", NUMBER_TYPE, null)\n+        .addProperty(\"b\", NUMBER_TYPE, null)\n+        .addProperty(\"c\", NUMBER_TYPE, null)\n+        .build();\n+\n+    JSType aSupC = registry.createUnionType(recordA, recordC);\n+\n+    Asserts.assertTypeEquals(\n+        aInfC, recordA.getGreatestSubtype(recordC));\n+    Asserts.assertTypeEquals(\n+        aSupC, recordA.getLeastSupertype(recordC));\n+\n+    Asserts.assertTypeEquals(\n+        aInfC, proxyRecordA.getGreatestSubtype(proxyRecordC));\n+    Asserts.assertTypeEquals(\n+        aSupC, proxyRecordA.getLeastSupertype(proxyRecordC));\n+  }\n }", "timestamp": 1321980770, "metainfo": ""}