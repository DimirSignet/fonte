{"sha": "b3f276d6736aee24a5a847ba87a44ffdf078221d", "log": "Patch for specifying additional annotation names contributed by klaus Fixes Issue 514.  R=nicksantos DELTA=40  (36 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2640   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n       parserConfig = ParserRunner.createConfig(\n         isIdeMode(),\n         mode,\n-        acceptConstKeyword());\n+        acceptConstKeyword(),\n+        options.extraAnnotationNames);\n     }\n     return parserConfig;\n   }\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Checks that the synctactic restrictions of Caja are met. */\n   public boolean checkCaja;\n+\n+  /**\n+   * A set of extra annotation names which are accepted and silently ignored\n+   * when encountered in a source file. Defaults to null which has the same\n+   * effect as specifying an empty set.\n+   */\n+  Set<String> extraAnnotationNames;\n \n   //--------------------------------\n   // Optimizations\n     checkCaja = false;\n     computeFunctionSideEffects = false;\n     chainCalls = false;\n+    extraAnnotationNames = null;\n \n     // Optimizations\n     foldConstants = false;\n     this.externExports = enable;\n   }\n \n+  public void setExtraAnnotationNames(Set<String> extraAnnotationNames) {\n+    this.extraAnnotationNames = Sets.newHashSet(extraAnnotationNames);\n+  }\n+\n   public boolean isExternExportsEnabled() {\n     return externExports;\n   }\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n import com.google.javascript.rhino.jstype.StaticSourceFile;\n \n import java.io.IOException;\n+import java.util.HashSet;\n import java.util.ResourceBundle;\n import java.util.Set;\n import java.util.logging.Logger;\n   public static Config createConfig(boolean isIdeMode,\n                                     LanguageMode languageMode,\n                                     boolean acceptConstKeyword) {\n+    return createConfig(isIdeMode, languageMode, acceptConstKeyword, null);\n+  }\n+\n+  public static Config createConfig(boolean isIdeMode,\n+                                    LanguageMode languageMode,\n+                                    boolean acceptConstKeyword,\n+                                    Set<String> extraAnnotationNames) {\n     initResourceConfig();\n-    return new Config(annotationNames, suppressionNames,\n-                      isIdeMode, languageMode,\n-                      acceptConstKeyword);\n+    Set<String> effectiveAnnotationNames;\n+    if (extraAnnotationNames == null) {\n+      effectiveAnnotationNames = annotationNames;\n+    } else {\n+      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n+      effectiveAnnotationNames.addAll(extraAnnotationNames);\n+    }\n+    return new Config(effectiveAnnotationNames, suppressionNames,\n+        isIdeMode, languageMode, acceptConstKeyword);\n   }\n \n   private static synchronized void initResourceConfig() {", "timestamp": 1311116948, "metainfo": ""}