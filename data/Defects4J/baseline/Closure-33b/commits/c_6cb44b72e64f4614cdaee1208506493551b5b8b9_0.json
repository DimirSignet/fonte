{"sha": "6cb44b72e64f4614cdaee1208506493551b5b8b9", "log": "Add Reorder constant expression ex. \"x === 0\" => \"0 === x\", check the new gzip size.  R=acleung   Revision created by MOE tool push_codebase. MOE_MIGRATION=2927   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n     }\n \n     return false;\n+  }\n+\n+  /**\n+   * Returns true if the operator on this node is symmetric\n+   */\n+  public static boolean isSymmetricOperation(Node n) {\n+    switch (n.getType()) {\n+      case Token.EQ: // equal\n+      case Token.NE: // not equal\n+      case Token.SHEQ: // exactly equal\n+      case Token.SHNE: // exactly not equal\n+      case Token.MUL: // multiply, unlike add it only works on numbers\n+                      // or results NaN if any of the operators is not a number\n+        return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if the operator on this node is relational.\n+   * the returned set does not include the equalities.\n+   */\n+  public static boolean isRelationalOperation(Node n) {\n+    switch (n.getType()) {\n+      case Token.GT: // equal\n+      case Token.GE: // not equal\n+      case Token.LT: // exactly equal\n+      case Token.LE: // exactly not equal\n+        return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the inverse of an operator if it is invertible.\n+   * ex. '>' ==> '<'\n+   */\n+  public static int getInverseOperator(int type) {\n+    switch (type) {\n+      case Token.GT:\n+        return Token.LT;\n+      case Token.LT:\n+        return Token.GT;\n+      case Token.GE:\n+        return Token.LE;\n+      case Token.LE:\n+        return Token.GE;\n+    }\n+    return Token.ERROR;\n   }\n \n   /**\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ReorderConstantExpression.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+\n+/**\n+ * Reorder constant expression hoping for a better compression.\n+ * ex. x === 0 -> 0 === x\n+ * After reordering, expressions like 0 === x and 0 === y may have higher\n+ * compression together than their original counterparts.\n+ *\n+ */\n+class ReorderConstantExpression implements CompilerPass {\n+\n+  private AbstractCompiler compiler;\n+\n+  ReorderConstantExpression(AbstractCompiler compiler) {\n+    this.compiler = compiler;\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node node) {\n+    // if the operator is symertric\n+    if (NodeUtil.isSymmetricOperation(node)\n+        || NodeUtil.isRelationalOperation(node)) {\n+      // right value is immutable and left is not\n+      if (NodeUtil.isImmutableValue(node.getLastChild())\n+          && !NodeUtil.isImmutableValue(node.getFirstChild())) {\n+\n+        // if relational, get the inverse operator.\n+        if (NodeUtil.isRelationalOperation(node)){\n+          int inverseOperator = NodeUtil.getInverseOperator(node.getType());\n+          node.setType(inverseOperator);\n+        }\n+\n+        // swap them\n+        Node firstNode = node.getFirstChild().detachFromParent();\n+        Node lastNode = node.getLastChild().detachFromParent();\n+\n+        node.addChildrenToFront(lastNode);\n+        node.addChildrenToBack(firstNode);\n+        this.compiler.reportCodeChange();\n+      }\n+    }\n+\n+    // process children then siblings.\n+    if (node.hasChildren()) {\n+      Node child = node.getFirstChild();\n+      while (child != null) {\n+        process(externs, child);\n+        child = child.getNext();\n+      }\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+/**\n+ * Unit test for {@ReorderConstantExpression}\n+ *\n+ */\n+public class ReorderConstantExpressionTest extends CompilerTestCase {\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    return new ReorderConstantExpression(compiler);\n+  }\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    super.enableLineNumberCheck(true);\n+    disableTypeCheck();\n+  }\n+\n+  public void testSymmetricOperations() throws Exception {\n+    set1Tests(\"==\");\n+    set2Tests(\"==\");\n+    set3Tests(\"==\");\n+\n+    set1Tests(\"!=\");\n+    set2Tests(\"!=\");\n+    set3Tests(\"!=\");\n+\n+    set1Tests(\"===\");\n+    set2Tests(\"===\");\n+    set3Tests(\"===\");\n+\n+    set1Tests(\"!==\");\n+    set2Tests(\"!==\");\n+    set3Tests(\"!==\");\n+\n+    set1Tests(\"*\");\n+    set2Tests(\"*\");\n+    set3Tests(\"*\");\n+  }\n+\n+  public void testRelationalOperations() throws Exception {\n+    set1Tests(\">\", \"<\");\n+    set3Tests(\">\");\n+    set1Tests(\"<\", \">\");\n+    set3Tests(\"<\");\n+\n+    set1Tests(\">=\", \"<=\");\n+    set3Tests(\">=\");\n+    set1Tests(\"<=\", \">=\");\n+    set3Tests(\"<=\");\n+  }\n+\n+  private void set1Tests(String op) throws Exception {\n+    set1Tests(op, op);\n+  }\n+\n+  /**\n+   * This set has a mutable on the right and an Immutable on the left.\n+   * Applies for relational and symmetric operations.\n+   */\n+  private void set1Tests(String op1, String op2) throws Exception {\n+    test(\"a \" + op1 + \" 0\", \"0 \" + op2 + \" a\");\n+    test(\"a \" + op1 + \" '0'\", \"'0' \" + op2 + \" a\");\n+    test(\"a \" + op1 + \" ''\", \"'' \" + op2 + \" a\");\n+    test(\"a \" + op1 + \" -1.0\", \"-1.0 \" + op2 + \" a\");\n+\n+    test(\"function f(a){a \" + op1 + \" 0}\",\n+         \"function f(a){0 \" + op2 + \" a}\");\n+    test(\"f() \" + op1 + \" 0\", \"0 \" + op2 + \" f()\");\n+    test(\"(a + b) \" + op1 + \" 0\", \"0 \" + op2 + \" (a + b)\");\n+    test(\"(a + 1) \" + op1 + \" 0\", \"0 \" + op2 + \" (a + 1)\");\n+\n+    test(\"x++ \" + op1 + \" 0\", \"0 \" + op2 + \" x++\");\n+    test(\"x = 0; function f(){x++; return x}; f() \" + op1 + \" 0\",\n+         \"x = 0; function f(){x++; return x}; 0 \" + op2 + \" f()\");\n+  }\n+\n+  /**\n+   * This set has a mutable on the right and an Immutable on the left.\n+   * Applies only for symmetric operations.\n+   */\n+  private void set2Tests(String op) throws Exception {\n+    test(\"a \" + op + \" NaN\", \"NaN \" + op + \" a\");\n+    test(\"a \" + op + \" Infinity\", \"Infinity \" + op + \" a\");\n+\n+    testSame(\"NaN \" + op + \" a\");\n+    testSame(\"Infinity \" + op + \" a\");\n+  }\n+\n+  /**\n+   * This set has an the immutable on the left already, or both non-immutable.\n+   */\n+  private void set3Tests(String op) throws Exception {\n+    testSame(\"0 \" + op + \" a\");\n+    testSame(\"'0' \" + op + \" a\");\n+    testSame(\"'' \" + op + \" a\");\n+    testSame(\"-1.0 \" + op + \" a\");\n+    testSame(\"-1.0 \" + op + \" a\");\n+\n+    testSame(\"0 \" + op + \" 1\");\n+\n+    testSame(\"a \" + op + \" b\");\n+  }\n+}", "timestamp": 1312832162, "metainfo": ""}