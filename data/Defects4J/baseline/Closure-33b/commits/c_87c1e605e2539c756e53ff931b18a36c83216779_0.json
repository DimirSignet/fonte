{"sha": "87c1e605e2539c756e53ff931b18a36c83216779", "log": "make closureGoogScopeAliases pass hot-swappable  R=nicksantos DELTA=52  (37 added, 2 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1943   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   };\n \n   /** Applies aliases and inlines goog.scope. */\n-  final PassFactory closureGoogScopeAliases =\n-      new PassFactory(\"processGoogScopeAliases\", true) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+  final HotSwapPassFactory closureGoogScopeAliases =\n+      new HotSwapPassFactory(\"processGoogScopeAliases\", true) {\n+    @Override\n+    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n       return new ScopedAliases(\n               compiler, options.getAliasTransformationHandler());\n     }\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n  *\n  * @author robbyw@google.com (Robby Walker)\n  */\n-class ScopedAliases implements CompilerPass {\n+class ScopedAliases implements HotSwapCompilerPass {\n   /** Name used to denote an scoped function block used for aliasing. */\n   static final String SCOPING_METHOD_NAME = \"goog.scope\";\n \n \n   @Override\n   public void process(Node externs, Node root) {\n+    hotSwapScript(root);\n+  }\n+\n+  @Override\n+  public void hotSwapScript(Node root) {\n     Traversal traversal = new Traversal();\n     NodeTraversal.traverse(compiler, root, traversal);\n \n \n   private class Traversal implements NodeTraversal.ScopedCallback {\n     // The job of this class is to collect these three data sets.\n-    private List<Node> aliasDefinitions = Lists.newArrayList();\n-\n-    private List<Node> scopeCalls = Lists.newArrayList();\n-\n-    private List<AliasUsage> aliasUsages = Lists.newArrayList();\n+    private final List<Node> aliasDefinitions = Lists.newArrayList();\n+\n+    private final List<Node> scopeCalls = Lists.newArrayList();\n+\n+    private final List<AliasUsage> aliasUsages = Lists.newArrayList();\n \n     // This map is temporary and cleared for each scope.\n-    private Map<String, Var> aliases = Maps.newHashMap();\n+    private final Map<String, Var> aliases = Maps.newHashMap();\n \n     private boolean hasErrors = false;\n ", "timestamp": 1305671222, "metainfo": ""}