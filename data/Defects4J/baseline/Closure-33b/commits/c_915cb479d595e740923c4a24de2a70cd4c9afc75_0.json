{"sha": "915cb479d595e740923c4a24de2a70cd4c9afc75", "log": "Fix comma splitting, which happen early not late.  R=acleung DELTA=57  (33 added, 16 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4262   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n    * @param late When late is false, this mean we are currently running before\n    * most of the other optimizations. In this case we would avoid optimizations\n    * that would make the code harder to analyze (such as using string spliting,\n-   * merging statements with commans, etc). When this is true, we would\n+   * merging statements with commas, etc). When this is true, we would\n    * do anything to minimize for size.\n    */\n   PeepholeSubstituteAlternateSyntax(boolean late) {\n   }\n \n   private Node trySplitComma(Node n) {\n-    if (!late) {\n+    if (late) {\n       return n;\n     }\n     Node parent = n.getParent();\n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n   @Override\n   public void setUp() throws Exception {\n     super.setUp();\n-    this.late = true;\n+    this.late = false;\n     enableLineNumberCheck(true);\n \n     // TODO(nicksantos): Turn this on. There are some normalizations\n     fold(\"function z() {if (a) { return true }\" +\n          \"else if (b) { return true }\" +\n          \"else { return true }}\",\n-         \"function z() {return !0;}\");\n+         \"function z() {return true;}\");\n \n     fold(\"function z() {if (a()) { return true }\" +\n          \"else if (b()) { return true }\" +\n          \"else { return true }}\",\n-         \"function z() {a()||b();return !0;}\");\n+         \"function z() {a()||b();return true;}\");\n   }\n \n   public void testFoldLogicalOpIntegration() {\n   }\n \n   public void testTrueFalseFolding() {\n+    late = true;\n     fold(\"x = true\", \"x = !0\");\n     fold(\"x = false\", \"x = !1\");\n     fold(\"x = !3\", \"x = !1\");\n   }\n \n   public void testCommaSplitingConstantCondition() {\n+    late = false;\n     fold(\"(b=0,b=1);if(b)x=b;\", \"b=0;b=1;x=b;\");\n     fold(\"(b=0,b=1);if(b)x=b;\", \"b=0;b=1;x=b;\");\n   }\n \n   public void testAvoidCommaSplitting() {\n+    late = false;\n     fold(\"x(),y(),z()\", \"x();y();z()\");\n-    late = false;\n+    late = true;\n     foldSame(\"x(),y(),z()\");\n   }\n \n          \"function f() {x?a():y&&a();}\");\n   }\n \n-\n+  public void testFoldHook2() {\n+    fold(\"function f(a) {if (!a) return a; else return a;}\",\n+         \"function f(a) {return a}\");\n+  }\n+\n+  public void disable_testFoldHook1() {\n+    fold(\"function f(a) {return (!a)?a:a;}\",\n+         \"function f(a) {return a}\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n   }\n \n   public void testSplitCommaExpressions() {\n+    late = false;\n     // Don't try to split in expressions.\n     foldSame(\"while (foo(), !0) boo()\");\n     foldSame(\"var a = (foo(), !0);\");\n   }\n \n   public void testComma1() {\n+    late = false;\n     fold(\"1, 2\", \"1; 1\");\n+    late = true;\n+    foldSame(\"1, 2\");\n+  }\n+\n+  public void testComma2() {\n     late = false;\n-    foldSame(\"1, 2\");\n-  }\n-\n-  public void testComma2() {\n     test(\"1, a()\", \"1; a()\");\n+    late = true;\n+    foldSame(\"1, a()\");\n+  }\n+\n+  public void testComma3() {\n     late = false;\n-    foldSame(\"1, a()\");\n-  }\n-\n-  public void testComma3() {\n     test(\"1, a(), b()\", \"1; a(); b()\");\n+    late = true;\n+    foldSame(\"1, a(), b()\");\n+  }\n+\n+  public void testComma4() {\n     late = false;\n-    foldSame(\"1, a(), b()\");\n-  }\n-\n-  public void testComma4() {\n     test(\"a(), b()\", \"a();b()\");\n+    late = true;\n+    foldSame(\"a(), b()\");\n+  }\n+\n+  public void testComma5() {\n     late = false;\n-    foldSame(\"a(), b()\");\n-  }\n-\n-  public void testComma5() {\n     test(\"a(), b(), 1\", \"a();b();1\");\n-    late = false;\n+    late = true;\n     foldSame(\"a(), b(), 1\");\n   }\n ", "timestamp": 1330043732, "metainfo": ""}