{"sha": "13fa93d548673546ea7b13471858cf3febbd1f40", "log": "Better dead assignment elimination.  Turn on function inlining into local scopes by default.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n     options.smartNameRemoval = true;\n     options.inlineConstantVars = true;\n     options.inlineFunctions = true;\n+    options.inlineLocalFunctions = true;\n+    options.inlineAnonymousFunctionExpressions = true;\n     options.inlineGetters = true;\n     options.inlineVariables = true;\n+    \n     // Remove unused vars also removes unused functions.\n     options.removeUnusedVars = true;\n     options.removeUnusedVarsInGlobalScope = true;\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n   private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n       FlowState<LiveVariableLattice> state) {\n \n-    // TODO(user): Add implemenation to handle x++ and ++x by replacing\n-    // them with x or x+1 respectively.\n-    if (NodeUtil.isAssignmentOp(n)) {\n+    Node parent = n.getParent();\n+    \n+    if (NodeUtil.isAssignmentOp(n) ||\n+        n.getType() == Token.INC || n.getType() == Token.DEC) {\n \n       Node lhs = n.getFirstChild();\n       Node rhs = lhs.getNext();\n         n.removeChild(rhs);\n         n.removeChild(lhs);\n         Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n-        n.getParent().replaceChild(n, op);\n+        parent.replaceChild(n, op);\n+      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {        \n+        if (NodeUtil.isExpressionNode(parent)) {\n+          parent.replaceChild(n, new Node(Token.VOID, Node.newNumber(0)));\n+        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n+          parent.removeChild(n);\n+        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n+            NodeUtil.getConditionExpression(parent) != n) {\n+          parent.replaceChild(n, new Node(Token.EMPTY));\n+        } else {\n+          // Cannot replace x = a++ with x = a because that's not valid\n+          // when a is not a number.\n+          return;\n+        }\n       } else {\n-        // TODO(user): this is where the code that handles dead x++ and x--\n-        // should go.\n-        \n         // Not reachable.\n-        Preconditions.checkState(false, \"Unknow statement\");\n+        Preconditions.checkState(false, \"Unknown statement\");\n       }\n       \n       compiler.reportCodeChange();\n--- a/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n     inFunction(\"var x; for(;;x -= 1){}\");\n     inFunction(\"var x; for(;;x = 0){}\", \"var x; for(;;0){}\");\n     \n-    // TODO(user): Add support of INC and DEC.\n-    inFunction(\"var x; for(--x;;){}\");\n-    inFunction(\"var x; for(x--;;){}\");\n+    inFunction(\"var x; for(--x;;){}\", \"var x; for(;;){}\");\n+    inFunction(\"var x; for(x--;;){}\", \"var x; for(;;){}\");\n     inFunction(\"var x; for(x -= 1;;){}\", \"var x; for(x - 1;;){}\");\n     inFunction(\"var x; for(x = 0;;){}\", \"var x; for(0;;){}\");\n   }\n   \n   public void testDeadIncrement() {\n     // TODO(user): Optimize this.\n-    inFunction(\"var x; x ++\");\n-    inFunction(\"var x; x --\");\n+    inFunction(\"var x; x ++\", \"var x; void 0\");\n+    inFunction(\"var x; x --\", \"var x; void 0\");\n   }\n   \n   public void testDeadButAlivePartiallyWithinTheExpression() {\n   \n   public void testIncDecInSubExpressions() {\n     inFunction(\"var a; a = 1, a++; a\");\n+    inFunction(\"var a; a = 1, ++a; a\");\n+    inFunction(\"var a; a = 1, a--; a\");\n+    inFunction(\"var a; a = 1, --a; a\");\n+\n+    inFunction(\"var a; a = 1, a++, print(a)\");\n+    inFunction(\"var a; a = 1, ++a, print(a)\");\n+    inFunction(\"var a; a = 1, a--, print(a)\");\n+    inFunction(\"var a; a = 1, --a, print(a)\");\n+    \n+    inFunction(\"var a; a = 1, print(a++)\");\n+    inFunction(\"var a; a = 1, print(++a)\");\n+\n+    inFunction(\"var a; a = 1, print(a++)\");\n+    inFunction(\"var a; a = 1, print(++a)\");\n+\n+    inFunction(\"var a; a = 1, print(a--)\");\n+    inFunction(\"var a; a = 1, print(--a)\");\n   }\n   \n   public void testNestedReassignments() {\n     inFunction(\"var a; a = (a = 1)\", \"var a; 1\");\n     inFunction(\"var a; a = (a *= 2)\", \"var a; a*2\");\n-    \n-    // TODO(user): ++ not supported.\n-    \n+       \n     // Note a = (a++) is not same as a++. Only if 'a' is dead.\n-    inFunction(\"var a; a = (a++)\", \"var a; a++\");\n-    inFunction(\"var a; a = (++a)\", \"var a; ++a\");\n+    inFunction(\"var a; a = (a++)\", \"var a; void 0\");\n+    inFunction(\"var a; a = (++a)\", \"var a; void 0\");\n     \n     inFunction(\"var a; a = (b = (a = 1))\", \"var a; b = 1\");\n     inFunction(\"var a; a = (b = (a *= 2))\", \"var a; b = a * 2\");\n     // Include b as local.\n     inFunction(\"var a,b; a = (b = (a = 1))\", \"var a,b; 1\");\n     inFunction(\"var a,b; a = (b = (a *= 2))\", \"var a,b; a * 2\");\n-    inFunction(\"var a,b; a = (b = (a++))\", \"var a,b; a++\");\n-    inFunction(\"var a,b; a = (b = (++a))\", \"var a,b; ++a\");\n-    \n-    inFunction(\"var a; a += (a++)\", \"var a; a+a++\");\n-    inFunction(\"var a; a += (++a)\", \"var a; a+ ++a\");\n+    inFunction(\"var a,b; a = (b = (a++))\", \"var a,b; void 0\");\n+    inFunction(\"var a,b; a = (b = (++a))\", \"var a,b; void 0\");\n+    \n+    inFunction(\"var a; a += (a++)\", \"var a; a + a++\");\n+    inFunction(\"var a; a += (++a)\", \"var a; a+ (++a)\");\n     \n     // Include b as local.\n     inFunction(\"var a,b; a += (b = (a = 1))\", \"var a,b; a + 1\");\n     inFunction(\"for(;x+=1;){foo(x)}\");\n     inFunction(\"for(;1;x+=1){foo(x)}\");\n   }\n-  \n+\n   private void inFunction(String src) {\n     inFunction(src, src);\n   }", "timestamp": 1260394341, "metainfo": ""}