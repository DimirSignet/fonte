{"sha": "e4ff227e00d764aeaa362b6a1dac23b81b73d13a", "log": "Fix a symbol table crash  R=acleung DELTA=27  (26 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3582   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n         // If we have a declaration node, we can ensure the symbol is declared.\n         mySymbol = symbols.get(declNode, name);\n         if (mySymbol == null) {\n-          mySymbol = copySymbolTo(otherSymbol, myScope);\n+          // Sometimes, our symbol tables will disagree on where the\n+          // declaration node should be. In the rare case where this happens,\n+          // trust the existing symbol.\n+          // See SymbolTableTest#testDeclarationDisagreement.\n+          mySymbol = myScope.ownSymbols.get(otherSymbol.getName());\n+          if (mySymbol == null) {\n+            mySymbol = copySymbolTo(otherSymbol, myScope);\n+          }\n         }\n       } else {\n         // If we don't have a declaration node, we won't be able to declare\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     assertSymmetricOrdering(ordering, f, x);\n   }\n \n+  public void testDeclarationDisagreement() {\n+    SymbolTable table = createSymbolTable(\n+        \"/** @const */ var goog = goog || {};\\n\" +\n+        \"/** @param {!Function} x */\\n\" +\n+        \"goog.addSingletonGetter2 = function(x) {};\\n\" +\n+        \"/** Wakka wakka wakka */\\n\" +\n+        \"goog.addSingletonGetter = goog.addSingletonGetter2;\\n\" +\n+        \"/** @param {!Function} x */\\n\" +\n+        \"goog.addSingletonGetter = function(x) {};\\n\");\n+\n+    Symbol method = getGlobalVar(table, \"goog.addSingletonGetter\");\n+    List<Reference> refs = table.getReferenceList(method);\n+    assertEquals(2, refs.size());\n+\n+    // Note that the declaration should show up second.\n+    assertEquals(7, method.getDeclaration().getNode().getLineno());\n+    assertEquals(5, refs.get(1).getNode().getLineno());\n+  }\n+\n   private void assertSymmetricOrdering(\n       Ordering<Symbol> ordering, Symbol first, Symbol second) {\n     assertTrue(ordering.compare(first, first) == 0);", "timestamp": 1320080859, "metainfo": ""}