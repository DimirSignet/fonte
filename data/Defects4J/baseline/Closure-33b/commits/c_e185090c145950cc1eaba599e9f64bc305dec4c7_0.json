{"sha": "e185090c145950cc1eaba599e9f64bc305dec4c7", "log": "Improve the error-reporting infrastructure to work without source info (Nick) R=robert  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n  */\n public class CompilerInput implements SourceAst {\n   private static final long serialVersionUID = 1L;\n+\n+  // Info about where the file lives.\n   private JSModule module;\n   private final boolean isExtern;\n+  final private String name;\n+\n+  // The AST.\n   private final SourceAst ast;\n-  final private String name;\n+\n+  // Provided and required symbols.\n   private final Set<String> provides = Sets.newHashSet();\n   private final Set<String> requires = Sets.newHashSet();\n \n--- a/src/com/google/javascript/jscomp/ErrorFormat.java\n+++ b/src/com/google/javascript/jscomp/ErrorFormat.java\n       formatter.setColorize(colorize);\n       return formatter;\n     }\n+  },\n+  SOURCELESS {\n+    @Override\n+    public MessageFormatter toFormatter(\n+        SourceExcerptProvider source, boolean colorize) {\n+      return new SourcelessMessageFormatter();\n+    }\n   };\n \n   /**\n    */\n   public abstract MessageFormatter toFormatter(\n       SourceExcerptProvider source, boolean colorize);\n+\n+  // A message formatter that does not know how to get source information.\n+  private static class SourcelessMessageFormatter\n+      extends AbstractMessageFormatter {\n+\n+    private SourcelessMessageFormatter() {\n+      super(null);\n+    }\n+\n+    @Override\n+    public String formatError(JSError error) {\n+      return format(error, false);\n+    }\n+\n+    @Override\n+    public String formatWarning(JSError warning) {\n+      return format(warning, true);\n+    }\n+\n+    private String format(JSError error, boolean warning) {\n+      // formatting the message\n+      StringBuilder b = new StringBuilder();\n+      if (error.sourceName != null) {\n+        b.append(error.sourceName);\n+        if (error.lineNumber > 0) {\n+          b.append(':');\n+          b.append(error.lineNumber);\n+        }\n+        b.append(\": \");\n+      }\n+\n+      b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n+      b.append(\" - \");\n+\n+      b.append(error.description);\n+      b.append('\\n');\n+      return b.toString();\n+    }\n+  }\n }\n--- a/src/com/google/javascript/jscomp/LoggerErrorManager.java\n+++ b/src/com/google/javascript/jscomp/LoggerErrorManager.java\n     this.logger = logger;\n   }\n \n+  /**\n+   * Creates an instance with a source-less error formatter.\n+   */\n+  public LoggerErrorManager(Logger logger) {\n+    this(ErrorFormat.SOURCELESS.toFormatter(null, false), logger);\n+  }\n+\n   @Override\n   public void println(CheckLevel level, JSError error) {\n     switch (level) {\n--- a/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\n+++ b/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\n     this.stream = stream;\n   }\n \n+  /**\n+   * Creates an instance with a source-less error formatter.\n+   */\n+  public PrintStreamErrorManager(PrintStream stream) {\n+    this(ErrorFormat.SOURCELESS.toFormatter(null, false), stream);\n+  }\n+\n   @Override\n   public void println(CheckLevel level, JSError error) {\n     stream.println(error.format(level, formatter));", "timestamp": 1268931768, "metainfo": ""}