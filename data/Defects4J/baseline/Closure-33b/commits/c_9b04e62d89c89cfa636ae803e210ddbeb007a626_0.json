{"sha": "9b04e62d89c89cfa636ae803e210ddbeb007a626", "log": "@return should only treat stuff in {} as type annotations  R=acleung DELTA=118  (28 added, 2 deleted, 88 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=856   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n \n                   token = next();\n \n-                  Node typeNode = parseAndRecordTypeNode(token, lineno, charno);\n+                  Node typeNode = null;\n+                  if (annotation == Annotation.RETURN &&\n+                      token != JsDocToken.LC) {\n+                    // If RETURN doesn't have a type annotation, record\n+                    // it as the unknown type.\n+                    typeNode = newNode(Token.QMARK);\n+                  } else {\n+                    typeNode = parseAndRecordTypeNode(token, lineno, charno);\n+                  }\n \n                   if (annotation == Annotation.THIS) {\n                     typeNode = wrapNode(Token.BANG, typeNode);\n--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n   public void testFunctionType() {\n     String js = \"\"\n         + \"/** @constructor */ function Foo(){};\\n\"\n-        + \"/** @return Bar */\\n\"\n+        + \"/** @return {Bar} */\\n\"\n         + \"Foo.prototype.fun = function() { return new Bar(); };\\n\"\n         + \"/** @constructor */ function Bar(){};\\n\"\n         + \"Bar.prototype.bazz;\\n\"\n--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n     static final String INPUT = newlineJoin(\n         \"/** @constructor */\",\n         \"function a(){ this.x = 3; }\",\n-        \"/** @return number */\",\n+        \"/** @return {number} */\",\n         \"a.prototype.foo = function() {return this.x};\",\n-        \"/** @param {number} p\\n@return number */\",\n+        \"/** @param {number} p\\n@return {number} */\",\n         \"a.prototype.bar = function(p) {return this.x};\",\n         \"a.prototype.baz = function() {};\",\n         \"var o = new a;\",\n     static final String CALL = \"o.foo()\";\n \n     static final String SINGLE_DEFINITION_EXPECTED =\n-        \"var JSCompiler_StaticMethods_foo = function(JSCompiler_StaticMethods_foo$self) {};\" +\n+        \"var JSCompiler_StaticMethods_foo = \" +\n+        \"  function(JSCompiler_StaticMethods_foo$self) {};\" +\n         \"JSCompiler_StaticMethods_foo(o)\";\n \n     private NoRewriteMultipleDefinitionTestInput() {}\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n   }\n \n   public void testNumericComparison6() throws Exception {\n-    testTypes(\"/**@return void*/ function foo() { if (3 >= foo()) return; }\",\n+    testTypes(\"/**@return {void}*/ function foo() { if (3 >= foo()) return; }\",\n         \"right side of numeric comparison\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: number\");\n   }\n \n   public void testStringComparison6() throws Exception {\n-    testTypes(\"/**@return void*/ function foo() { if ('a' >= foo()) return; }\",\n+    testTypes(\"/**@return {void} */ \" +\n+        \"function foo() { if ('a' >= foo()) return; }\",\n         \"right side of comparison\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: string\");\n     // named anonymous functions create a binding in their body only\n     // the return is wrong but the assignment is ok since the type of b is ?\n     testTypes(\n-        \"/** @return number */var a = function b(){ return b };\",\n+        \"/** @return {number} */var a = function b(){ return b };\",\n         \"inconsistent return type\\n\" +\n         \"found   : function (): number\\n\" +\n         \"required: number\");\n \n   public void testFunctionArguments1() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} a\\n@return string */\" +\n+        \"/** @param {number} a\\n@return {string} */\" +\n         \"function f(a) {}\",\n         \"function (number): string\");\n   }\n \n   public void testFunctionArguments2() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(opt_a) {}\",\n         \"function ((number|undefined)): string\");\n   }\n \n   public void testFunctionArguments3() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} b\\n@return string */\" +\n+        \"/** @param {number} b\\n@return {string} */\" +\n         \"function f(a,b) {}\",\n         \"function (?, number): string\");\n   }\n \n   public void testFunctionArguments4() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(a,opt_a) {}\",\n         \"function (?, (number|undefined)): string\");\n   }\n \n   public void testFunctionArguments7() throws Exception {\n     testTypes(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function a(a,opt_a,var_args) {}\");\n   }\n \n     // verifying that the argument type have inferable types\n     testTypes(\n         \"/** @return {boolean} */ function u() { return true; }\" +\n-        \"/** @param {boolean} b\\n@return boolean */\" +\n+        \"/** @param {boolean} b\\n@return {boolean} */\" +\n         \"function f(b) { if (u()) { b = null; } return b; }\",\n         \"inconsistent return type\\n\" +\n         \"found   : (boolean|null)\\n\" +\n \n   public void testFunctionInference5() throws Exception {\n     testFunctionType(\n-        \"/** @this Date\\n@return string */function f(a) {}\",\n+        \"/** @this Date\\n@return {string} */function f(a) {}\",\n         \"function (this:Date, ?): string\");\n   }\n \n   public void testFunctionInference6() throws Exception {\n     testFunctionType(\n-        \"/** @this Date\\n@return string */function f(opt_a) {}\",\n+        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n         \"function (this:Date, ?): string\");\n   }\n \n \n   public void testFunctionInference10() throws Exception {\n     testFunctionType(\n-        \"/** @this Date\\n@param {boolean} b\\n@return string */\" +\n+        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n         \"var f = function(a,b) {};\",\n         \"function (this:Date, ?, boolean): string\");\n   }\n   public void testFunctionInference11() throws Exception {\n     testFunctionType(\n         \"var goog = {};\" +\n-        \"/** @return number*/goog.f = function(){};\",\n+        \"/** @return {number}*/goog.f = function(){};\",\n         \"goog.f\",\n         \"function (): number\");\n   }\n \n   public void testReturn6() throws Exception {\n     testTypes(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function a(opt_a) { return opt_a }\",\n         \"inconsistent return type\\n\" +\n         \"found   : (number|undefined)\\n\" +\n   public void testThis1() throws Exception {\n     testTypes(\"var goog = {};\" +\n         \"/** @constructor */goog.A = function(){};\" +\n-        \"/** @return number */goog.A.prototype.n = function() { return this };\",\n+        \"/** @return {number} */goog.A.prototype.n = \" +\n+        \"  function() { return this };\",\n         \"inconsistent return type\\n\" +\n         \"found   : goog.A\\n\" +\n         \"required: number\");\n         \"/** @constructor */goog.A = function(){\" +\n         \"  this.foo = null;\" +\n         \"};\" +\n-        \"/** @return number */\" +\n+        \"/** @return {number} */\" +\n         \"goog.A.prototype.n = function() { return this.foo };\",\n         \"inconsistent return type\\n\" +\n         \"found   : null\\n\" +\n         \"/** @constructor */goog.A = function(){\" +\n         \"  /** @type {string?} */this.foo = null;\" +\n         \"};\" +\n-        \"/** @return number */goog.A.prototype.n = function() {\" +\n+        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n         \"  return this.foo };\",\n         \"inconsistent return type\\n\" +\n         \"found   : (null|string|undefined)\\n\" +\n   }\n \n   public void testThis5() throws Exception {\n-    testTypes(\"/** @this Date\\n@return number*/function h() { return this }\",\n+    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n         \"inconsistent return type\\n\" +\n         \"found   : Date\\n\" +\n         \"required: number\");\n \n   public void testThis6() throws Exception {\n     testTypes(\"var goog = {};\" +\n-        \"/** @constructor\\n@return !Date */\" +\n+        \"/** @constructor\\n@return {!Date} */\" +\n         \"goog.A = function(){ return this };\",\n         \"inconsistent return type\\n\" +\n         \"found   : goog.A\\n\" +\n \n   public void testThis7() throws Exception {\n     testTypes(\"/** @constructor */function A(){};\" +\n-        \"/** @return number */A.prototype.n = function() { return this };\",\n+        \"/** @return {number} */A.prototype.n = function() { return this };\",\n         \"inconsistent return type\\n\" +\n         \"found   : A\\n\" +\n         \"required: number\");\n     testTypes(\"/** @constructor */function A(){\" +\n         \"  /** @type {string?} */this.foo = null;\" +\n         \"};\" +\n-        \"/** @return number */A.prototype.n = function() {\" +\n+        \"/** @return {number} */A.prototype.n = function() {\" +\n         \"  return this.foo };\",\n         \"inconsistent return type\\n\" +\n         \"found   : (null|string|undefined)\\n\" +\n   public void testBug909000() throws Exception {\n     testTypes(\"/** @constructor */function A(){}\\n\" +\n         \"/** @param {!A} a\\n\" +\n-        \"@return boolean*/\\n\" +\n+        \"@return {boolean}*/\\n\" +\n         \"function y(a) { return a }\",\n         \"inconsistent return type\\n\" +\n         \"found   : A\\n\" +\n     Node n = parseAndTypeCheck(\n         \"/** @constructor */function A() {}\\n\" +\n         \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n-        \"/** @return number */\\n\" +\n+        \"/** @return {number} */\\n\" +\n         \"B.prototype.p = function() { return 1; }\\n\" +\n         \"/** @param {A} a\\n @param {B} b */\\n\" +\n         \"function f(a, b) {\\n\" +\n   }\n \n   public void testUnknownConstructorInstanceType1() throws Exception {\n-    testTypes(\"/** @return Array */ function g(f) { return new f(); }\");\n+    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n   }\n \n   public void testUnknownConstructorInstanceType2() throws Exception {\n         \"/** @constructor */function Super() {};\" +\n         \"Super.prototype.foo = function() { return 3; };\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\");\n   }\n \n   public void testInheritanceCheck9_2() throws Exception {\n     testTypes(\n         \"/** @constructor */function Super() {};\" +\n-        \"/** @return number */Super.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Super.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n         \"/** @override */Sub.prototype.foo =\\n\" +\n         \"function() {};\");\n   public void testInheritanceCheck9_3() throws Exception {\n     testTypes(\n         \"/** @constructor */function Super() {};\" +\n-        \"/** @return number */Super.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Super.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return string */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n         \"function() { return \\\"some string\\\" };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from superclass Super\\n\" +\n         \"Root.prototype.foo = function() { return 4; };\" +\n         \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\");\n   }\n \n   public void testInheritanceCheck10_2() throws Exception {\n     testTypes(\n         \"/** @constructor */function Root() {};\" +\n-        \"/** @return number */Root.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Root.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n         \"/** @override */Sub.prototype.foo =\\n\" +\n   public void testInheritanceCheck10_3() throws Exception {\n     testTypes(\n         \"/** @constructor */function Root() {};\" +\n-        \"/** @return number */Root.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Root.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return string */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n         \"function() { return \\\"some string\\\" };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from superclass Root\\n\" +\n   public void testInterfaceInheritanceCheck5() throws Exception {\n     testTypes(\n         \"/** @interface */function Super() {};\" +\n-        \"/** @return string */Super.prototype.foo = function() {};\" +\n+        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n         \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from interface Super\\n\" +\n   public void testInterfaceInheritanceCheck6() throws Exception {\n     testTypes(\n         \"/** @interface */function Root() {};\" +\n-        \"/** @return string */Root.prototype.foo = function() {};\" +\n+        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n         \"/** @interface\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from interface Root\\n\" +\n   }\n \n   public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n-    testTypes(\"/** @return The result. */ function f() {}\",\n-        \"Bad type annotation. Unknown type The\");\n+    testTypes(\"/** @return The result. */ function f() {}\");\n   }\n \n   public void testForwardTypeDeclaration1() throws Exception {\n--- a/test/com/google/javascript/jscomp/TightenTypesTest.java\n+++ b/test/com/google/javascript/jscomp/TightenTypesTest.java\n   public void testExternType() {\n     testSame(\"/** @constructor */ function T() {};\\n\"\n              + \"/** @constructor */ function Ext() {};\\n\"\n-             + \"/** @return T */\\n\"\n+             + \"/** @return {T} */\\n\"\n              + \"Ext.prototype.getT = function() {};\\n\"\n              + \"/** @type T */ Ext.prototype.prop;\\n\"\n              + \"/** @type Ext */ var ext;\",\n              + \"/** @type A */ Ext.prototype.a;\\n\"\n              + \"/** @type B */ Ext.prototype.b;\\n\"\n              + \"/** @type D */ Ext.prototype.d;\\n\"\n-             + \"/** @return A */ Ext.prototype.getA = function() {};\\n\"\n-             + \"/** @return B */ Ext.prototype.getB = function() {};\\n\",\n+             + \"/** @return {A} */ Ext.prototype.getA = function() {};\\n\"\n+             + \"/** @return {B} */ Ext.prototype.getB = function() {};\\n\",\n              \"var a = (new Ext).a;\\n\"\n              + \"var a2 = (new Ext).getA();\\n\"\n              + \"var b = (new Ext).b;\\n\"\n     testSame(\"/** @constructor */ function Element() {};\\n\"\n              + \"/** @type {?function(Event)} */Element.prototype.onclick;\\n\"\n              + \"/** @constructor */ function Event() {};\"\n-             + \"/** @return Event */ Event.prototype.erv;\",\n+             + \"/** @return {Event} */ Event.prototype.erv;\",\n              \" function foo(evt) { return bar(evt); };\\n\"\n              + \"function bar(a) { return a.type() }\\n\"\n              + \"/** @type Object */ var ar = new Element;\\n\"\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   }\n \n   public void testNumericComparison6() throws Exception {\n-    testTypes(\"/**@return void*/ function foo() { if (3 >= foo()) return; }\",\n+    testTypes(\"/**@return {void} */ function foo() { if (3 >= foo()) return; }\",\n         \"right side of numeric comparison\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: number\");\n   }\n \n   public void testStringComparison6() throws Exception {\n-    testTypes(\"/**@return void*/ function foo() { if ('a' >= foo()) return; }\",\n+    testTypes(\"/**@return {void} */ \" +\n+        \"function foo() { if ('a' >= foo()) return; }\",\n         \"right side of comparison\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: string\");\n     // named function expressions create a binding in their body only\n     // the return is wrong but the assignment is ok since the type of b is ?\n     testTypes(\n-        \"/** @return number */var a = function b(){ return b };\",\n+        \"/** @return {number} */var a = function b(){ return b };\",\n         \"inconsistent return type\\n\" +\n         \"found   : function (): number\\n\" +\n         \"required: number\");\n \n   public void testFunctionArguments1() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} a\\n@return string */\" +\n+        \"/** @param {number} a\\n@return {string} */\" +\n         \"function f(a) {}\",\n         \"function (number): string\");\n   }\n \n   public void testFunctionArguments2() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(opt_a) {}\",\n         \"function ((number|undefined)): string\");\n   }\n \n   public void testFunctionArguments3() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} b\\n@return string */\" +\n+        \"/** @param {number} b\\n@return {string} */\" +\n         \"function f(a,b) {}\",\n         \"function (?, number): string\");\n   }\n \n   public void testFunctionArguments4() throws Exception {\n     testFunctionType(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(a,opt_a) {}\",\n         \"function (?, (number|undefined)): string\");\n   }\n \n   public void testFunctionArguments7() throws Exception {\n     testTypes(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function a(a,opt_a,var_args) {}\");\n   }\n \n     // verifying that the argument type have inferable types\n     testTypes(\n         \"/** @return {boolean} */ function u() { return true; }\" +\n-        \"/** @param {boolean} b\\n@return boolean */\" +\n+        \"/** @param {boolean} b\\n@return {boolean} */\" +\n         \"function f(b) { if (u()) { b = null; } return b; }\",\n         \"inconsistent return type\\n\" +\n         \"found   : (boolean|null)\\n\" +\n \n   public void testFunctionInference5() throws Exception {\n     testFunctionType(\n-        \"/** @this Date\\n@return string */function f(a) {}\",\n+        \"/** @this Date\\n@return {string} */function f(a) {}\",\n         \"function (this:Date, ?): string\");\n   }\n \n   public void testFunctionInference6() throws Exception {\n     testFunctionType(\n-        \"/** @this Date\\n@return string */function f(opt_a) {}\",\n+        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n         \"function (this:Date, ?): string\");\n   }\n \n \n   public void testFunctionInference10() throws Exception {\n     testFunctionType(\n-        \"/** @this Date\\n@param {boolean} b\\n@return string */\" +\n+        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n         \"var f = function(a,b) {};\",\n         \"function (this:Date, ?, boolean): string\");\n   }\n   public void testFunctionInference11() throws Exception {\n     testFunctionType(\n         \"var goog = {};\" +\n-        \"/** @return number*/goog.f = function(){};\",\n+        \"/** @return {number}*/goog.f = function(){};\",\n         \"goog.f\",\n         \"function (): number\");\n   }\n \n   public void testReturn6() throws Exception {\n     testTypes(\n-        \"/** @param {number} opt_a\\n@return string */\" +\n+        \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function a(opt_a) { return opt_a }\",\n         \"inconsistent return type\\n\" +\n         \"found   : (number|undefined)\\n\" +\n   public void testThis1() throws Exception {\n     testTypes(\"var goog = {};\" +\n         \"/** @constructor */goog.A = function(){};\" +\n-        \"/** @return number */goog.A.prototype.n = function() { return this };\",\n+        \"/** @return {number} */\" +\n+        \"goog.A.prototype.n = function() { return this };\",\n         \"inconsistent return type\\n\" +\n         \"found   : goog.A\\n\" +\n         \"required: number\");\n         \"/** @constructor */goog.A = function(){\" +\n         \"  this.foo = null;\" +\n         \"};\" +\n-        \"/** @return number */\" +\n+        \"/** @return {number} */\" +\n         \"goog.A.prototype.n = function() { return this.foo };\",\n         \"inconsistent return type\\n\" +\n         \"found   : null\\n\" +\n         \"/** @constructor */goog.A = function(){\" +\n         \"  /** @type {string?} */this.foo = null;\" +\n         \"};\" +\n-        \"/** @return number */goog.A.prototype.n = function() {\" +\n+        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n         \"  return this.foo };\",\n         \"inconsistent return type\\n\" +\n         \"found   : (null|string)\\n\" +\n   }\n \n   public void testThis5() throws Exception {\n-    testTypes(\"/** @this Date\\n@return number*/function h() { return this }\",\n+    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n         \"inconsistent return type\\n\" +\n         \"found   : Date\\n\" +\n         \"required: number\");\n \n   public void testThis6() throws Exception {\n     testTypes(\"var goog = {};\" +\n-        \"/** @constructor\\n@return !Date */\" +\n+        \"/** @constructor\\n@return {!Date} */\" +\n         \"goog.A = function(){ return this };\",\n         \"inconsistent return type\\n\" +\n         \"found   : goog.A\\n\" +\n \n   public void testThis7() throws Exception {\n     testTypes(\"/** @constructor */function A(){};\" +\n-        \"/** @return number */A.prototype.n = function() { return this };\",\n+        \"/** @return {number} */A.prototype.n = function() { return this };\",\n         \"inconsistent return type\\n\" +\n         \"found   : A\\n\" +\n         \"required: number\");\n     testTypes(\"/** @constructor */function A(){\" +\n         \"  /** @type {string?} */this.foo = null;\" +\n         \"};\" +\n-        \"/** @return number */A.prototype.n = function() {\" +\n+        \"/** @return {number} */A.prototype.n = function() {\" +\n         \"  return this.foo };\",\n         \"inconsistent return type\\n\" +\n         \"found   : (null|string)\\n\" +\n   public void testBug909000() throws Exception {\n     testTypes(\"/** @constructor */function A(){}\\n\" +\n         \"/** @param {!A} a\\n\" +\n-        \"@return boolean*/\\n\" +\n+        \"@return {boolean}*/\\n\" +\n         \"function y(a) { return a }\",\n         \"inconsistent return type\\n\" +\n         \"found   : A\\n\" +\n     Node n = parseAndTypeCheck(\n         \"/** @constructor */function A() {}\\n\" +\n         \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n-        \"/** @return number */\\n\" +\n+        \"/** @return {number} */\\n\" +\n         \"B.prototype.p = function() { return 1; }\\n\" +\n         \"/** @param {A} a\\n @param {B} b */\\n\" +\n         \"function f(a, b) {\\n\" +\n   }\n \n   public void testUnknownConstructorInstanceType1() throws Exception {\n-    testTypes(\"/** @return Array */ function g(f) { return new f(); }\");\n+    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n   }\n \n   public void testUnknownConstructorInstanceType2() throws Exception {\n         \"/** @constructor */function Super() {};\" +\n         \"Super.prototype.foo = function() { return 3; };\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\");\n   }\n \n   public void testInheritanceCheck9_2() throws Exception {\n     testTypes(\n         \"/** @constructor */function Super() {};\" +\n-        \"/** @return number */Super.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Super.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n         \"/** @override */Sub.prototype.foo =\\n\" +\n         \"function() {};\");\n   public void testInheritanceCheck9_3() throws Exception {\n     testTypes(\n         \"/** @constructor */function Super() {};\" +\n-        \"/** @return number */Super.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Super.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return string */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n         \"function() { return \\\"some string\\\" };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from superclass Super\\n\" +\n         \"Root.prototype.foo = function() { return 3; };\" +\n         \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\");\n   }\n \n   public void testInheritanceCheck10_2() throws Exception {\n     testTypes(\n         \"/** @constructor */function Root() {};\" +\n-        \"/** @return number */Root.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Root.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n         \"/** @override */Sub.prototype.foo =\\n\" +\n   public void testInheritanceCheck10_3() throws Exception {\n     testTypes(\n         \"/** @constructor */function Root() {};\" +\n-        \"/** @return number */Root.prototype.foo = function() { return 1; };\" +\n+        \"/** @return {number} */\" +\n+        \"Root.prototype.foo = function() { return 1; };\" +\n         \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return string */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n         \"function() { return \\\"some string\\\" };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from superclass Root\\n\" +\n   public void testInterfaceInheritanceCheck5() throws Exception {\n     testTypes(\n         \"/** @interface */function Super() {};\" +\n-        \"/** @return string */Super.prototype.foo = function() {};\" +\n+        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n         \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from interface Super\\n\" +\n   public void testInterfaceInheritanceCheck6() throws Exception {\n     testTypes(\n         \"/** @interface */function Root() {};\" +\n-        \"/** @return string */Root.prototype.foo = function() {};\" +\n+        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n         \"/** @interface\\n @extends {Root} */function Super() {};\" +\n         \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n-        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n+        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n         \"function() { return 1; };\",\n         \"mismatch of the foo property type and the type of the property it \" +\n         \"overrides from interface Root\\n\" +\n   }\n \n   public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n-    testTypes(\"/** @return The result. */ function f() {}\",\n-        \"Bad type annotation. Unknown type The\");\n+    testTypes(\"/** @return The result. */ function f() {}\");\n   }\n \n   public void testForwardTypeDeclaration1() throws Exception {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n \n   public void testTypeTagConflict13() throws Exception {\n     parse(\"@typedef {boolean} \\n * @extends {Object} */\",\n+        \"Bad type annotation. \" +\n+        \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict14() throws Exception {\n+    parse(\"@return x \\n * @return y */\",\n         \"Bad type annotation. \" +\n         \"type annotation incompatible with other annotations\");\n   }\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n     assertNotNull(info);\n     assertFalse(info.hasParameter(\"index\"));\n     assertTrue(info.hasReturnType());\n+    assertTypeEquals(UNKNOWN_TYPE, info.getReturnType());\n   }\n \n   public void testJSDocAttachment7() {", "timestamp": 1300133667, "metainfo": ""}