{"sha": "0ea5dcbd06d744efc2b74f8c072006e3ddbf3ea7", "log": "Change on 2010/05/20 by johnlenz          Remove obsolete TODO.          R=bowdidge         DELTA=1  (0 added, 1 deleted, 0 changed)  Change on 2010/05/21 by nicksantos          shave a couple seconds off deps-generation          R=agrieve         DELTA=30  (13 added, 2 deleted, 15 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=10003   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckRegExp.java\n+++ b/src/com/google/javascript/jscomp/CheckRegExp.java\n  */\n class CheckRegExp extends AbstractPostOrderCallback implements CompilerPass {\n \n-  // TODO(johnlenz): Get this warning turned on by default.\n   static final DiagnosticType REGEXP_REFERENCE =\n     DiagnosticType.warning(\"JSC_REGEXP_REFERENCE\",\n         \"References to the global RegExp object prevents \" +\n--- a/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n    */\n   @Override\n   protected boolean parseLine(String line) throws ParseException {\n+    // Quick sanity check that will catch most cases. This is a performance\n+    // win for people with a lot of JS.\n+    if (line.indexOf(\"addDependency\") == -1) {\n+      return true;\n+    }\n+\n     depMatcher.reset(line);\n     // See if the line looks like: goog.addDependency(...)\n     if (depMatcher.matches()) {\n--- a/src/com/google/javascript/jscomp/deps/JsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java\n   protected boolean parseLine(String line) throws ParseException {\n     boolean hasProvidesOrRequires = false;\n \n-    // Iterate over the provides/requires.\n-    googMatcher.reset(line);\n-    while (googMatcher.find()) {\n-      hasProvidesOrRequires = true;\n+    // Quick sanity check that will catch most cases. This is a performance\n+    // win for people with a lot of JS.\n+    if (line.indexOf(\"provide\") != -1 ||\n+        line.indexOf(\"require\") != -1) {\n+      // Iterate over the provides/requires.\n+      googMatcher.reset(line);\n+      while (googMatcher.find()) {\n+        hasProvidesOrRequires = true;\n \n-      // See if it's a require or provide.\n-      boolean isRequire = googMatcher.group(1).charAt(0) == 'r';\n-      // Parse the param.\n-      String arg = parseJsString(googMatcher.group(2));\n+        // See if it's a require or provide.\n+        boolean isRequire = googMatcher.group(1).charAt(0) == 'r';\n+        // Parse the param.\n+        String arg = parseJsString(googMatcher.group(2));\n \n-      // Add the dependency.\n-      if (isRequire) {\n-        // goog is always implicit.\n-        // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n-        // Remove this later.\n-        if (!\"goog\".equals(arg)) {\n-          requires.add(arg);\n+        // Add the dependency.\n+        if (isRequire) {\n+          // goog is always implicit.\n+          // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n+          // Remove this later.\n+          if (!\"goog\".equals(arg)) {\n+            requires.add(arg);\n+          }\n+        } else {\n+          provides.add(arg);\n         }\n-      } else {\n-        provides.add(arg);\n       }\n     }\n ", "timestamp": 1274469015, "metainfo": ""}