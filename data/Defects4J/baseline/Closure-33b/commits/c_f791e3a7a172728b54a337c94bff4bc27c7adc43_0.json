{"sha": "f791e3a7a172728b54a337c94bff4bc27c7adc43", "log": "Don't inline function with inner function into loops.  R=acleung DELTA=30  (26 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3083   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n     // an inner function into another function can capture a variable and cause\n     // a memory leak.  This isn't a problem in the global scope as those values\n     // last until explicitly cleared.\n-    if (containsFunctions && !t.inGlobalScope()) {\n-      // TODO(johnlenz): Allow inlining into any scope without local names or\n-      // inner functions.\n-      return CanInlineResult.NO;\n+    if (containsFunctions) {\n+      if (!t.inGlobalScope()) {\n+        // TODO(johnlenz): Allow inlining into any scope without local names or\n+        // inner functions.\n+        return CanInlineResult.NO;\n+      } else if (NodeUtil.isWithinLoop(callNode)) {\n+        // An inner closure maybe relying on a local value holding a value for a\n+        // single iteration through a loop.\n+        return CanInlineResult.NO;\n+      }\n     }\n \n     // TODO(johnlenz): Add support for 'apply'\n--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n         \"foo\", INLINE_BLOCK, true);\n   }\n \n+  public void testCanInlineReferenceToFunctionInLoop1() {\n+    helperCanInlineReferenceToFunction(\n+        CanInlineResult.YES,\n+        \"function foo(){return a;}; \" +\n+        \"while(1) { foo(); }\",\n+        \"foo\", INLINE_BLOCK, true);\n+  }\n+\n+  public void testCanInlineReferenceToFunctionInLoop2() {\n+    // If function contains function, don't inline it into a loop.\n+    // TODO(johnlenz): this can be improved by looking to see\n+    // if the inner function contains any references to values defined\n+    // in the outer function.\n+    helperCanInlineReferenceToFunction(\n+        CanInlineResult.NO,\n+        \"function foo(){return function() {};}; \" +\n+        \"while(1) { foo(); }\",\n+        \"foo\", INLINE_BLOCK, true);\n+  }\n+\n   public void testInline1() {\n     helperInlineReferenceToFunction(\n         \"function foo(){}; foo();\",", "timestamp": 1314048958, "metainfo": ""}