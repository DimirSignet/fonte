{"sha": "749d75ccbf82ffee5c613dbed9f9782cd740a01f", "log": "Point to a slightly better node when checking index types  R=johnlenz DELTA=7  (2 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2762   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n    * first type.\n    *\n    * @param t The node traversal.\n-   * @param n The node to issue warnings on.\n+   * @param n The GETELEM node to issue warnings on.\n    * @param objType The type of the left side of the GETELEM.\n    * @param indexType The type inside the brackets of the GETELEM.\n    */\n   void expectIndexMatch(NodeTraversal t, Node n, JSType objType,\n       JSType indexType) {\n+    Preconditions.checkState(n.getType() == Token.GETELEM);\n+    Node indexNode = n.getLastChild();\n     if (objType.isUnknownType()) {\n-      expectStringOrNumber(t, n, indexType, \"property access\");\n+      expectStringOrNumber(t, indexNode, indexType, \"property access\");\n     } else {\n       ObjectType dereferenced = objType.dereference();\n       if (dereferenced != null && dereferenced.getIndexType() != null) {\n-        expectCanAssignTo(t, n, indexType, dereferenced.getIndexType(),\n+        expectCanAssignTo(t, indexNode, indexType, dereferenced.getIndexType(),\n             \"restricted index type\");\n       } else if (dereferenced != null && dereferenced.isArrayType()) {\n-        expectNumber(t, n, indexType, \"array access\");\n+        expectNumber(t, indexNode, indexType, \"array access\");\n       } else if (objType.matchesObjectContext()) {\n-        expectString(t, n, indexType, \"property access\");\n+        expectString(t, indexNode, indexType, \"property access\");\n       } else {\n         mismatch(t, n, \"only arrays or objects can be accessed\",\n             objType,", "timestamp": 1311784384, "metainfo": ""}