{"sha": "d1786567e42515c7cea795a6b72a59aa142e96ae", "log": "Apply patch for bug 17250 (http://issues.apache.org/bugzilla/show_bug.cgi?id=17250) with some additional minor improvements. Added tests for reflection methods with array arguments.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringBuilder}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilderTest.java,v 1.4 2003/01/19 18:49:05 scolebourne Exp $\n+ * @version $Id: ToStringBuilderTest.java,v 1.5 2003/03/20 05:33:35 ggregory Exp $\n  */\n public class ToStringBuilderTest extends TestCase {\n \n     private String toBaseString(Object o) {\n         return o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o));\n     }\n+    \n+    // Reflection Array tests\n+    \n+    //\n+    // Note on the following line of code repeated in the reflection array tests.\n+    //\n+    // assertReflectionArray(\"<null>\", array);\n+    //\n+    // The expected value is not baseStr + \"[<null>]\" since array==null and is typed as Object.\n+    // The null array does not carry array type information.\n+    // If we added a primitive array type constructor and pile of associated methods, \n+    // then type declaring type information could be carried forward. IMHO, null is null.\n+    //\n+    // Gary Gregory - 2003-03-12 - ggregory@seagullsw.com  \n+    //\n+    \n+    public void assertReflectionArray(String expected, Object actual) {\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual));\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));\n+    }\n+\n+    public void testReflectionObjectArray() {\n+        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionLongArray() {\n+        long[] array = new long[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionIntArray() {\n+        int[] array = new int[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionShortArray() {\n+        short[] array = new short[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionyteArray() {\n+        byte[] array = new byte[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionCharArray() {\n+        char[] array = new char[] { 'A', '2', '_', 'D' };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionDoubleArray() {\n+        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionFloatArray() {\n+        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionBooleanArray() {\n+        boolean[] array = new boolean[] { true, false, false };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+    \n+    // Reflection Array Array tests\n+\n+    public void testReflectionFloatArrayArray() {\n+        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+\n+    public void testReflectionLongArrayArray() {\n+        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionIntArrayArray() {\n+        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionhortArrayArray() {\n+        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionByteArrayArray() {\n+        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionCharArrayArray() {\n+        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionDoubleArrayArray() {\n+        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+\n+    public void testReflectionBooleanArrayArray() {\n+        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+    }\n+    \n+    // Reflection hierarchy tests\n \n     public void testReflectionHierarchyArrayList() {\n         List base = new ArrayList();\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n-\n     public void testLongArrayArray() {\n         long[][] array = new long[][] {{1, 2}, null, {5}};\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());", "timestamp": 1048138415, "metainfo": ""}