{"sha": "d39c5d72d575b36d562f5b6cc54c42083015145f", "log": "Remove cloning from char array methods   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Tokenizer.java\n+++ b/src/java/org/apache/commons/lang/Tokenizer.java\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n  * @since 2.1\n- * @version $Id: Tokenizer.java,v 1.9 2004/08/28 11:46:19 scolebourne Exp $\n+ * @version $Id: Tokenizer.java,v 1.10 2004/09/02 07:52:35 scolebourne Exp $\n  */\n public class Tokenizer implements ListIterator, Cloneable {\n \n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting on the specified delimiter character.\n      * \n      * @param input  the string which is to be parsed\n      * @param delim  the field delimiter character\n     /**\n      * Constructs a tokenizer splitting on space, tab, newline and formfeed\n      * as per StringTokenizer.\n-     * \n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * This method is designed for use when you are using a character array in\n+     * your own code. The input is not cloned, so using the tokenizer in this way\n+     * is not thread-safe.\n+     * \n+     * @param input  the string which is to be parsed\n      */\n     public Tokenizer(char[] input) {\n         super();\n         this.text = null;\n-        this.chars = (char[]) input.clone();\n-    }\n-\n-    /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n-     * \n-     * @param input  the string which is to be parsed, cloned\n+        this.chars = input;\n+    }\n+\n+    /**\n+     * Constructs a tokenizer splitting on the specified delimiter character.\n+     * <p>\n+     * This method is designed for use when you are using a character array in\n+     * your own code. The input is not cloned, so using the tokenizer in this way\n+     * is not thread-safe.\n+     * \n+     * @param input  the string which is to be parsed\n      * @param delim the field delimiter character\n      */\n     public Tokenizer(char[] input, char delim) {\n \n     /**\n      * Constructs a tokenizer splitting using the specified delimiter matcher.\n-     * \n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * This method is designed for use when you are using a character array in\n+     * your own code. The input is not cloned, so using the tokenizer in this way\n+     * is not thread-safe.\n+     * \n+     * @param input  the string which is to be parsed\n      * @param delim  the field delimiter matcher\n      */\n     public Tokenizer(char[] input, Matcher delim) {\n     /**\n      * Constructs a tokenizer splitting on the specified delimiter character\n      * and handling quotes using the specified quote character.\n-     * \n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * This method is designed for use when you are using a character array in\n+     * your own code. The input is not cloned, so using the tokenizer in this way\n+     * is not thread-safe.\n+     * \n+     * @param input  the string which is to be parsed\n      * @param delim  the field delimiter character\n      * @param quote  the field quoted string character\n      */\n      * Constructs a tokenizer splitting using the specified delimiter matcher\n      * and handling quotes using the specified quote matcher.\n      * \n-     * @param input  the string which is to be parsed, cloned\n+     * @param input  the string which is to be parsed\n      * @param delim  the field delimiter character\n      * @param quote  the field quoted string character\n      */\n      * Reset this tokenizer, giving it a new input string to parse.\n      * In this manner you can re-use a tokenizer with the same settings\n      * on multiple input lines.\n+     * <p>\n+     * This method is designed for use when you are using a character array in\n+     * your own code. The input is not cloned, so using the tokenizer in this way\n+     * is not thread-safe.\n      * \n      * @param input  the new character array to tokenize, cloned\n      */\n     public void reset(char [] input) {\n         reset();\n         this.text = null;\n-        chars = (char[]) input.clone();\n+        chars = input;\n     }\n \n     // ListIterator", "timestamp": 1094111555, "metainfo": ""}