{"sha": "d047ec84e5df3d5328dc477134ad197f5a7a16ab", "log": "Checkstyle fixes   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author <a href=\"mailto:janekdb@yahoo.co.uk\">Janek Bogucki</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ObjectUtils.java,v 1.3 2002/09/18 20:11:53 scolebourne Exp $\n+ * @version $Id: ObjectUtils.java,v 1.4 2002/09/22 09:18:33 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n         }\n         \n         /**\n-         * Ensure singleton\n+         * Ensure singleton.\n+         * @return the singleton value\n          */\n         private Object readResolve() {\n             return ObjectUtils.NULL;\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * </pre>\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CompareToBuilder.java,v 1.2 2002/09/17 22:06:37 scolebourne Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.3 2002/09/22 09:18:32 scolebourne Exp $\n  */\n public class CompareToBuilder {\n     /**\n      * If the fields tested are equals.\n      */\n-    protected int comparison;\n+    private int comparison;\n \n     /**\n      * Constructor for CompareToBuilder.\n         for (int i = 0; i < fields.length && compareToBuilder.comparison == 0; ++i) {\n             Field f = fields[i];\n             if (testTransients || !Modifier.isTransient(f.getModifiers())) {\n-                if ( !Modifier.isStatic(f.getModifiers())) {\n+                if (!Modifier.isStatic(f.getModifiers())) {\n                     try {\n                         compareToBuilder.append(f.get(lhs), f.get(rhs));\n                     } catch (IllegalAccessException e) {\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n             //the simple case, not an array, just test the element \n-            comparison = ((Comparable)lhs).compareTo(rhs);\n+            comparison = ((Comparable) lhs).compareTo(rhs);\n         } else {\n             //'Switch' on type of array, to dispatch to the correct handler\n             // This handles multi dimensional arrays\n             return this;\n         }\n         if (lhs == rhs) {\n-        \treturn this;\n+            return this;\n         }\n         if (lhs == false) {\n-        \tcomparison = -1;\n+            comparison = -1;\n         } else {\n-        \tcomparison = +1;\n+            comparison = +1;\n         }\n         return this;\n     }\n         }\n         if (lhs == null || rhs == null) {\n             throw new NullPointerException();\n-         }\n-         \n+        }\n+\n         int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;\n         for (int i = 0; i < length && comparison == 0; ++i) {\n             Class lhsClass = lhs[i].getClass();\n             if (!lhsClass.isInstance(rhs[i])) {\n-            \tthrow new ClassCastException();\n+                throw new ClassCastException();\n             }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n             append(lhs[i], rhs[i]);\n         }\n         if (comparison == 0 && lhs.length != rhs.length) {\n-        \tcomparison = (lhs.length < rhs.length) ? -1 : +1;\n+            comparison = (lhs.length < rhs.length) ? -1 : +1;\n         }\n         return this;\n     }\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * \n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EqualsBuilder.java,v 1.2 2002/09/17 22:06:38 scolebourne Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.3 2002/09/22 09:18:32 scolebourne Exp $\n  */\n public class EqualsBuilder {\n     /**\n      * If the fields tested are equals.\n      */\n-    protected boolean isEquals;\n+    private boolean isEquals;\n \n     /**\n      * Constructor for EqualsBuilder.\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  * </code>\n  * \n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: HashCodeBuilder.java,v 1.2 2002/09/17 22:06:38 scolebourne Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.3 2002/09/22 09:18:32 scolebourne Exp $\n  */\n public class HashCodeBuilder {\n     \n      * these should be different for each class, however this is not vital.\n      * Prime numbers are preferred, especially for the multiplier.\n      * \n-     * @param initialNonZeroOddNumber\n-     * @param multiplierNonZeroOddNumber\n+     * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n+     * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @throws IllegalArgumentException if the number is zero or even\n      */\n     public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {\n      * these should be different for each class, however this is not vital.\n      * Prime numbers are preferred, especially for the multiplier.\n      * \n-     * @param initialNonZeroOddNumber\n-     * @param multiplierNonZeroOddNumber\n+     * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n+     * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @param object  the object to create a hash code for\n      * @return int hash code\n      * @throws IllegalArgumentException if the object is null\n      * @throws IllegalArgumentException if the number is zero or even\n      */\n     public static int reflectionHashCode(\n-            int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,\n+            int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, \n             Object object) {\n         return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false);\n     }\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  * public static final variable for the rest of the program to access.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StandardToStringStyle.java,v 1.3 2002/09/19 19:45:22 scolebourne Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.4 2002/09/22 09:18:32 scolebourne Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n \n     /**\n      * Sets whether to use the identity hash code.\n-     * @param useFieldNames  the new useIdentityHashCode flag\n+     * @param useIdentityHashCode  the new useIdentityHashCode flag\n      */\n     public void setUseIdentityHashCode(boolean useIdentityHashCode) {\n         super.setUseIdentityHashCode(useIdentityHashCode);\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Map;\n /**\n  * <code>ToString</code> generation routine.\n  * <p>\n  * passed into the constructor.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilder.java,v 1.2 2002/09/19 19:42:59 scolebourne Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.3 2002/09/22 09:18:32 scolebourne Exp $\n  */\n public class ToStringBuilder {\n     \n     /**\n      * Append to the toString an Object value.\n      *\n-     * @param value  the value to add to the toString\n+     * @param object  the value to add to the toString\n      * @return this\n      */\n     public ToStringBuilder append(Object object) {\n     /**\n      * Append to the toString an Object value.\n      *\n-     * @param value  the value to add to the toString\n+     * @param object  the value to add to the toString\n      * @param fieldName  the field name\n      * @return this\n      */\n     /**\n      * Append to the toString an Object value.\n      *\n-     * @param value  the value to add to the toString\n+     * @param object  the value to add to the toString\n      * @param fieldName  the field name\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      * Append to the toString an Object array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(Object[] array) {\n     /**\n      * Append to the toString an Object array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, Object[] array) {\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a long array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(long[] array) {\n     /**\n      * Append a hashCode for a long array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a int array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(int[] array) {\n     /**\n      * Append a hashCode for an int array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a short array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(short[] array) {\n     /**\n      * Append a hashCode for a short array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a char array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(char[] array) {\n     /**\n      * Append a hashCode for a char array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a byte array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(byte[] array) {\n     /**\n      * Append a hashCode for a byte array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a double array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(double[] array) {\n     /**\n      * Append a hashCode for a double array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a float array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(float[] array) {\n     /**\n      * Append a hashCode for a float array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n      * Append to the toString a boolean array.\n      *\n      * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n      * @return this\n      */\n     public ToStringBuilder append(boolean[] array) {\n     /**\n      * Append a hashCode for a boolean array.\n      *\n+     * @param fieldName  the field name\n      * @param array  the array to add to the hashCode\n      * @return this\n      */\n      * will output the array in full. Setting false will output a summary,\n      * typically the size of the array.\n      *\n-     * @param array  the array to add to the toString\n-     * @param fieldName  the field name\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n      * @param fullDetail  true for detail, false for summary info\n      * @return this\n      */\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * whole array, whereas the summary method will just output the array length.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringStyle.java,v 1.3 2002/09/19 19:44:10 scolebourne Exp $\n+ * @version $Id: ToStringStyle.java,v 1.4 2002/09/22 09:18:32 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n     \n     /**\n      * Append the class name.\n      * \n+     * @param buffer  the StringBuffer to populate\n      * @param object  the object whose name to output\n      */\n     protected void appendClassName(StringBuffer buffer, Object object) {\n     /**\n      * Append the IdentityHashCode.\n      * \n+     * @param buffer  the StringBuffer to populate\n      * @param object  the object whose id to output\n      */\n     protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n      * return false. The calling code may pass in null indicating that it doesn't\n      * care about the detail level. In this case the default detail level is used.\n      * \n-     * @param fullDetail  the detail level requested\n+     * @param fullDetailRequest  the detail level requested\n      * @return whether full detail is to be shown\n      */\n     protected boolean isFullDetail(Boolean fullDetailRequest) {\n \n     /**\n      * Sets whether to use the identity hash code.\n-     * @param useFieldNames  the new useIdentityHashCode flag\n+     * @param useIdentityHashCode  the new useIdentityHashCode flag\n      */\n     protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n         this.useIdentityHashCode = useIdentityHashCode;\n         \n         /**\n          * Ensure singleton after serialization.\n+         * @return the singleton\n          */\n         private Object readResolve() {\n             return ToStringStyle.DEFAULT_STYLE;\n         \n         /**\n          * Ensure singleton after serialization.\n+         * @return the singleton\n          */\n         private Object readResolve() {\n             return ToStringStyle.NO_FIELD_NAMES_STYLE;\n         \n         /**\n          * Ensure singleton after serialization.\n+         * @return the singleton\n          */\n         private Object readResolve() {\n             return ToStringStyle.SIMPLE_STYLE;\n         \n         /**\n          * Ensure singleton after serialization.\n+         * @return the singleton\n          */\n         private Object readResolve() {\n             return ToStringStyle.MULTI_LINE_STYLE;", "timestamp": 1032686313, "metainfo": ""}