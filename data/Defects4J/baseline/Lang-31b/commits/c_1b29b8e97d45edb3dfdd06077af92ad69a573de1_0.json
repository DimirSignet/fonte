{"sha": "1b29b8e97d45edb3dfdd06077af92ad69a573de1", "log": "Javadoc fixes and enhancements   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * </pre>\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CompareToBuilder.java,v 1.3 2002/09/22 09:18:32 scolebourne Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.4 2002/09/28 10:44:51 scolebourne Exp $\n  */\n public class CompareToBuilder {\n     /**\n      * Static fields will not be tested.\n      * @param lhs  Left Hand Side\n      * @param rhs  Right Hand Side\n-     * @return int  a negative integer, zero, or a positive integer as this \n+     * @return a negative integer, zero, or a positive integer as this \n      * object is less than, equal to, or greater than the specified object.\n-     * @throws ClassCastException - if the specified object's type prevents it \n+     * @throws NullPointerException  if either (but not both) parameter is null\n+     * @throws ClassCastException  if the specified object's type prevents it \n      * from being compared to this Object.\n      */\n     public static int reflectionCompare(Object lhs, Object rhs) {\n      * @param lhs  Left Hand Side\n      * @param rhs  Right Hand Side\n      * @param testTransients  whether to include transient fields\n-     * @return int - a negative integer, zero, or a positive integer as this \n+     * @return a negative integer, zero, or a positive integer as this \n      * object is less than, equal to, or greater than the specified object.\n-     * @throws ClassCastException - if the specified object's type prevents it \n+     * @throws NullPointerException  if either (but not both) parameter is null\n+     * @throws ClassCastException  if the specified object's type prevents it \n      * from being compared to this Object.\n      */\n     public static int reflectionCompare(Object lhs, Object rhs, \n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n-     * @throws ClassCastException - if the specified object's type prevents it\n+     * @throws NullPointerException  if either (but not both) parameter is null\n+     * @throws ClassCastException if the specified object's type prevents it\n      * from being compared to this Object.\n      */\n     public CompareToBuilder append(Object lhs, Object rhs) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n-     * @throws ClassCastException - if the specified object's type prevents it \n+     * @throws NullPointerException  if either (but not both) parameter is null\n+     * @throws ClassCastException  if the specified object's type prevents it \n      * from being compared to this Object.\n      */\n     public CompareToBuilder append(Object[] lhs, Object[] rhs) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(long[] lhs, long[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(int[] lhs, int[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(short[] lhs, short[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(char[] lhs, char[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(byte[] lhs, byte[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(double[] lhs, double[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(float[] lhs, float[] rhs) {\n         if (comparison != 0) {\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is null\n      */\n     public CompareToBuilder append(boolean[] lhs, boolean[] rhs) {\n         if (comparison != 0) {\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * passed into the constructor.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilder.java,v 1.3 2002/09/22 09:18:32 scolebourne Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.4 2002/09/28 10:44:51 scolebourne Exp $\n  */\n public class ToStringBuilder {\n     \n             throw new IllegalArgumentException(\"The object to create a toString for must not be null\");\n         }\n         if (style == null) {\n-            style = ToStringStyle.DEFAULT_STYLE;\n+            style = getDefaultStyle();\n         }\n         if (buffer == null) {\n             buffer = new StringBuffer(512);\n      * @param style  the style of the toString to create, may be null\n      * @param outputTransients  whether to include transient fields\n      * @return the String result\n-     * @throws IllegalArgumentException if the object or style is null\n+     * @throws IllegalArgumentException if the object is null\n      */\n     public static String reflectionToString(Object object, ToStringStyle style, \n             boolean outputTransients) {", "timestamp": 1033209891, "metainfo": ""}