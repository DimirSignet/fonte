{"sha": "e28c95ac2ce95852add84bdf3d2d9c00ac98f5de", "log": "Applying Niall's patch from LANG-569 adding indexOfIgnoreCase() and lastIndexOfIgnoreCase() methods to StringUtils  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n         return str.indexOf(searchStr, startPos);\n     }\n \n+    /**\n+     * <p>Case in-sensitive find of the first index within a String.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position is treated as zero.\n+     * An empty (\"\") search String always matches.\n+     * A start position greater than the string length only matches\n+     * an empty search String.</p>\n+     *\n+     * <pre>\n+     * StringUtils.indexOfIgnoreCase(null, *)          = -1\n+     * StringUtils.indexOfIgnoreCase(*, null)          = -1\n+     * StringUtils.indexOfIgnoreCase(\"\", \"\")           = 0\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\")  = 0\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\")  = 2\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\") = 1\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     * @since 3.0\n+     */\n+    public static int indexOfIgnoreCase(String str, String searchStr) {\n+        return indexOfIgnoreCase(str, searchStr, 0);\n+    }\n+\n+    /**\n+     * <p>Case in-sensitive find of the first index within a String\n+     * from the specified position.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position is treated as zero.\n+     * An empty (\"\") search String always matches.\n+     * A start position greater than the string length only matches\n+     * an empty search String.</p>\n+     *\n+     * <pre>\n+     * StringUtils.indexOfIgnoreCase(null, *, *)          = -1\n+     * StringUtils.indexOfIgnoreCase(*, null, *)          = -1\n+     * StringUtils.indexOfIgnoreCase(\"\", \"\", 0)           = 0\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  = 0\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = 2\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0) = 1\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 3)  = 5\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  = -1\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", -1) = 2\n+     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 2)   = 2\n+     * StringUtils.indexOfIgnoreCase(\"abc\", \"\", 9)        = 3\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @param startPos  the start position, negative treated as zero\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     * @since 3.0\n+     */\n+    public static int indexOfIgnoreCase(String str, String searchStr, int startPos) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        if (startPos < 0) {\n+            startPos = 0;\n+        }\n+        int endLimit = (str.length() - searchStr.length()) + 1;\n+        if (startPos > endLimit) {\n+            return -1;\n+        }\n+        if (searchStr.length() == 0) {\n+            return startPos;\n+        }\n+        for (int i = startPos; i < endLimit; i++) {\n+            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n     // LastIndexOf\n     //-----------------------------------------------------------------------\n     /**\n             return -1;\n         }\n         return str.lastIndexOf(searchStr, startPos);\n+    }\n+\n+    /**\n+     * <p>Case in-sensitive find of the last index within a String.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position returns <code>-1</code>.\n+     * An empty (\"\") search String always matches unless the start position is negative.\n+     * A start position greater than the string length searches the whole string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.lastIndexOfIgnoreCase(null, *)          = -1\n+     * StringUtils.lastIndexOfIgnoreCase(*, null)          = -1\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\")  = 7\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\")  = 5\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\") = 4\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     * @since 3.0\n+     */\n+    public static int lastIndexOfIgnoreCase(String str, String searchStr) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        return lastIndexOfIgnoreCase(str, searchStr, str.length());\n+    }\n+\n+    /**\n+     * <p>Case in-sensitive find of the last index within a String\n+     * from the specified position.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position returns <code>-1</code>.\n+     * An empty (\"\") search String always matches unless the start position is negative.\n+     * A start position greater than the string length searches the whole string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1\n+     * StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8)  = 7\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8)  = 5\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8) = 4\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  = 5\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1) = -1\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  = 0\n+     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = -1\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @param startPos  the start position\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     * @since 3.0\n+     */\n+    public static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        if (startPos > (str.length() - searchStr.length())) {\n+            startPos = str.length() - searchStr.length();\n+        }\n+        if (startPos < 0) {\n+            return -1;\n+        }\n+        if (searchStr.length() == 0) {\n+            return startPos;\n+        }\n+\n+        for (int i = startPos; i >= 0; i--) {\n+            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {\n+                return i;\n+            }\n+        }\n+        return -1;\n     }\n \n     // Contains\n--- a/src/test/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n         assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n         assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n         assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n+    }\n+\n+    public void testIndexOfIgnoreCase_String() {\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"\", null));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\"));\n+        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\"));\n+        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\"));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\n+    }\n+\n+    public void testIndexOfIgnoreCase_StringInt() {\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 1));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 2));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 3));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 4));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 5));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 6));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 7));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aab\", \"AB\", 1));\n+        assertEquals(5, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 5));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"ab\", \"AAB\", 0));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\n     }\n \n     public void testOrdinalIndexOf() {\n         assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n         assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n         assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n+    }\n+\n+    public void testLastIndexOfIgnoreCase_String() {\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\"));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"a\"));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\"));\n+        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"\"));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"a\"));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\"));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"b\"));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\"));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"ab\", \"AAB\"));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\n+    }\n+\n+    public void testLastIndexOfIgnoreCase_StringInt() {\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, -1));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 9));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n+        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 3));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0));\n+        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1261020939, "metainfo": ""}