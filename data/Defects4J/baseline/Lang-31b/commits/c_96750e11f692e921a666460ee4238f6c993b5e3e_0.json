{"sha": "96750e11f692e921a666460ee4238f6c993b5e3e", "log": "* src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java   testPrintThrowables(): Previously printing some stack traces to   stdout as part of its tests which at first glance looks like a test   failure (but in reality isn't).  Here's a truncated example:    test.exception:        [echo] Running exception package tests ...        [java] .........................................        [java] ......org.apache.commons.lang.exception.ExceptionUtilsTestCase$Ex        [java]     at org.apache.commons.lang.exception.ExceptionUtilsTestCase.c        [java]  [wrapped] org.apache.commons.lang.exception.ExceptionUtilsTestCa        [java]     at org.apache.commons.lang.exception.ExceptionUtilsTestCase.c        [java]  [wrapped] org.apache.commons.lang.exception.ExceptionUtilsTestCa        [java]     at org.apache.commons.lang.exception.ExceptionUtilsTestCase.c        [java]     at org.apache.commons.lang.exception.ExceptionUtilsTestCase.t   * src/java/org/apache/commons/lang/exception/ExceptionUtils.java   WRAPPED_MARKER: New constant for the \" [wrapped] \" text used when   printing exception stack traces.    getRootCauseStackTrace(Throwable): Replaced inline \" [wrapped] \"   text with use of new WRAPPED_MARKER constant.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author Dmitri Plotnikov\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.19 2002/12/23 00:03:47 scolebourne Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.20 2003/01/20 23:04:19 dlr Exp $\n  */\n public class ExceptionUtils {\n+    /**\n+     * Used when printing stack frames to denote the start of a\n+     * wrapped exception.  Package private for accessibility by test\n+     * suite.\n+     */\n+    static final String WRAPPED_MARKER = \" [wrapped] \";\n+\n     /**\n      * The names of methods commonly used to access a wrapped\n      * exception.\n             if (i == count - 1) {\n                 frames.add(throwables[i].toString());\n             } else {\n-                frames.add(\" [wrapped] \" + throwables[i].toString());\n+                frames.add(WRAPPED_MARKER + throwables[i].toString());\n             }\n             for (int j = 0; j < trace.size(); j++) {\n                 frames.add(trace.get(j));\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n  */\n \n import java.io.PrintWriter;\n+import java.io.StringWriter;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n     }\n \n     public void testPrintThrowables()\n+        throws Exception\n     {\n+        StringWriter writer = new StringWriter(1024);\n         Throwable withCause = createExceptionWithCause();\n         ExceptionUtils.printRootCauseStackTrace(withCause, \n-            new PrintWriter(System.out));\n+            new PrintWriter(writer));\n+        String stackTrace = writer.toString();\n+        assertTrue(\"printRootCauseStackTrace(Throwable, PrintWriter) failed\",\n+                   stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        writer = new StringWriter(1024);\n         ExceptionUtils.printRootCauseStackTrace(withoutCause, \n-            System.out);\n+            new PrintWriter(writer));\n+        stackTrace = writer.toString();\n+        assertTrue(\"printRootCauseStackTrace(Throwable, PrintWriter) failed\",\n+                   stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n     }\n     \n     /**", "timestamp": 1043103859, "metainfo": ""}