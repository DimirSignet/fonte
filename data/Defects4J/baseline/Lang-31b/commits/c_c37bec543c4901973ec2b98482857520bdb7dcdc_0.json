{"sha": "c37bec543c4901973ec2b98482857520bdb7dcdc", "log": "Add equals, equalsIgnoreCase and hashCode  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n //        }\n //    }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks the contents of this builder against another to see if they\n+     * contain the same character content ignoring case.\n+     *\n+     * @param other  the object to check, null returns false\n+     * @return true if the builders contain the same characters in the same order\n+     */\n+    public boolean equalsIgnoreCase(StrBuilder other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (this.size != other.size) {\n+            return false;\n+        }\n+        char thisBuf[] = this.buffer;\n+        char otherBuf[] = other.buffer;\n+        for (int i = size - 1; i >= 0; i--) {\n+            char c1 = thisBuf[i];\n+            char c2 = otherBuf[i];\n+            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks the contents of this builder against another to see if they\n+     * contain the same character content.\n+     *\n+     * @param other  the object to check, null returns false\n+     * @return true if the builders contain the same characters in the same order\n+     */\n+    public boolean equals(StrBuilder other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (this.size != other.size) {\n+            return false;\n+        }\n+        char thisBuf[] = this.buffer;\n+        char otherBuf[] = other.buffer;\n+        for (int i = size - 1; i >= 0; i--) {\n+            if (thisBuf[i] != otherBuf[i]) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks the contents of this builder against another to see if they\n+     * contain the same character content.\n+     *\n+     * @param obj  the object to check, null returns false\n+     * @return true if the builders contain the same characters in the same order\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof StrBuilder) {\n+            return equals((StrBuilder) obj);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets a suitable hash code for this builder.\n+     *\n+     * @return a hash code\n+     */\n+    public int hashCode() {\n+        char buf[] = buffer;\n+        int hash = 0;\n+        for (int i = size - 1; i >= 0; i--) {\n+            hash = 31 * hash + buf[i];\n+        }\n+        return hash;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a String version of the string builder, creating a new instance\n      * each time the method is called.\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testEqualsIgnoreCase() {\n+        StrBuilder sb1 = new StrBuilder();\n+        StrBuilder sb2 = new StrBuilder();\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        \n+        sb1.append(\"abc\");\n+        assertEquals(false, sb1.equalsIgnoreCase(sb2));\n+        \n+        sb2.append(\"ABC\");\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        \n+        sb2.clear().append(\"abc\");\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        \n+        sb2.clear().append(\"aBc\");\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquals() {\n+        StrBuilder sb1 = new StrBuilder();\n+        StrBuilder sb2 = new StrBuilder();\n+        assertEquals(true, sb1.equals((StrBuilder) sb2));\n+        assertEquals(true, sb1.equals((Object) sb2));\n+        \n+        sb1.append(\"abc\");\n+        assertEquals(false, sb1.equals((StrBuilder) sb2));\n+        assertEquals(false, sb1.equals((Object) sb2));\n+        \n+        sb2.append(\"ABC\");\n+        assertEquals(false, sb1.equals((StrBuilder) sb2));\n+        assertEquals(false, sb1.equals((Object) sb2));\n+        \n+        sb2.clear().append(\"abc\");\n+        assertEquals(true, sb1.equals((StrBuilder) sb2));\n+        assertEquals(true, sb1.equals((Object) sb2));\n+        \n+        assertEquals(false, sb1.equals(new Integer(1)));\n+        assertEquals(false, sb1.equals(\"abc\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testHashCode() {\n+        StrBuilder sb = new StrBuilder();\n+        int hc1a = sb.hashCode();\n+        int hc1b = sb.hashCode();\n+        assertEquals(0, hc1a);\n+        assertEquals(hc1a, hc1b);\n+        \n+        sb.append(\"abc\");\n+        int hc2a = sb.hashCode();\n+        int hc2b = sb.hashCode();\n+        assertEquals(true, hc2a != 0);\n+        assertEquals(hc2a, hc2b);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         StrBuilder sb = new StrBuilder(\"abc\");\n         assertEquals(\"abc\", sb.toString());", "timestamp": 1125142283, "metainfo": ""}