{"sha": "81365529667e9a775e1010c01be11833c8c57b28", "log": "cleaning up use restructured EntityMap classes   ", "commit": "\n--- a/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n     private static Entities hashEntities;\n     private static Entities arrayEntities;\n     private static Entities binaryEntities;\n+    private static Entities primitiveEntities;\n+    private static Entities lookupEntities;\n \n     public EntitiesPerformanceTest(String name) {\n         super(name);\n     public void setUp() {\n         if (stringWithUnicode == null) {\n             StringBuffer buf = new StringBuffer(STRING_LENGTH);\n-            for (int i = 0; i < STRING_LENGTH/5; ++i) {\n+            for (int i = 0; i < STRING_LENGTH / 5; ++i) {\n                 buf.append(\"xxxx\");\n-                char ch = html40value(i);\n+                char ch = isovalue(i);\n                 buf.append(ch);\n             }\n             stringWithUnicode = buf.toString();\n         return ch;\n     }\n \n+    private char isovalue(int i) {\n+        String entityValue = Entities.iso8859_1[i % Entities.iso8859_1.length][1];\n+        char ch = (char) Integer.parseInt(entityValue);\n+        return ch;\n+    }\n+\n     public void testBuildHash() throws Exception {\n         for (int i = 0; i < COUNT; ++i) {\n-            hashEntities = new Entities();\n-            hashEntities.map = new Entities.HashIntMap();\n-            Entities.fillWithHtml40Entities(hashEntities);\n-        }\n-    }\n+            hashEntities = build(new Entities.HashEntityMap());\n+        }\n+    }\n+\n \n     public void testBuildTree() throws Exception {\n         for (int i = 0; i < COUNT; ++i) {\n-            treeEntities = new Entities();\n-            treeEntities.map = new Entities.TreeIntMap();\n-            Entities.fillWithHtml40Entities(treeEntities);\n+            treeEntities = build(new Entities.TreeEntityMap());\n         }\n     }\n \n     public void testBuildArray() throws Exception {\n         for (int i = 0; i < COUNT; ++i) {\n-            arrayEntities = new Entities();\n-            arrayEntities.map = new Entities.ArrayIntMap();\n-            Entities.fillWithHtml40Entities(arrayEntities);\n+            arrayEntities = build(new Entities.ArrayEntityMap());\n         }\n     }\n \n     public void testBuildBinary() throws Exception {\n         for (int i = 0; i < COUNT; ++i) {\n-            binaryEntities = new Entities();\n-            binaryEntities.map = new Entities.BinaryIntMap();\n-            Entities.fillWithHtml40Entities(binaryEntities);\n-        }\n+            binaryEntities = build(new Entities.BinaryEntityMap());\n+        }\n+    }\n+\n+    public void testBuildPrimitive() throws Exception {\n+        for (int i = 0; i < COUNT; ++i) {\n+            buildPrimitive();\n+        }\n+    }\n+\n+    private void buildPrimitive()\n+    {\n+        primitiveEntities = build(new Entities.PrimitiveEntityMap());\n+    }\n+\n+    public void testBuildLookup() throws Exception {\n+        for (int i = 0; i < COUNT; ++i) {\n+            buildLookup();\n+        }\n+    }\n+\n+    private void buildLookup()\n+    {\n+        lookupEntities = build(new Entities.LookupEntityMap());\n+    }\n+\n+    private Entities build(Entities.EntityMap intMap) {\n+        Entities entities;\n+        entities = new Entities();\n+        entities.map = intMap;\n+        Entities.fillWithHtml40Entities(entities);\n+        return entities;\n     }\n \n     public void testLookupHash() throws Exception {\n         lookup(binaryEntities);\n     }\n \n+    public void testLookupPrimitive() throws Exception {\n+        if (primitiveEntities == null) buildPrimitive();\n+        lookup(primitiveEntities);\n+    }\n+\n+    public void testLookupLookup() throws Exception {\n+        if (lookupEntities == null) buildLookup();\n+        lookup(lookupEntities);\n+    }\n+\n     public void testEscapeHash() throws Exception {\n         escapeIt(hashEntities);\n     }\n         escapeIt(binaryEntities);\n     }\n \n+    public void testEscapePrimitive() throws Exception {\n+        escapeIt(primitiveEntities);\n+    }\n+\n+    public void testEscapeLookup() throws Exception {\n+        escapeIt(lookupEntities);\n+    }\n+\n     public void testUnescapeHash() throws Exception {\n         unescapeIt(hashEntities);\n     }\n     }\n \n     private void lookup(Entities entities) {\n-        for (int i = 0; i < COUNT*1000; ++i) {\n-            entities.entityName(html40value(i));\n+        for (int i = 0; i < COUNT * 1000; ++i) {\n+            entities.entityName(isovalue(i));\n         }\n     }\n \n     private void escapeIt(Entities entities) {\n         for (int i = 0; i < COUNT; ++i) {\n-            String escaped  = entities.escape(stringWithUnicode);\n-            assertEquals(\"xxxx&fnof;\", escaped.substring(0,10));\n+            String escaped = entities.escape(stringWithUnicode);\n+            assertEquals(\"xxxx&nbsp;\", escaped.substring(0, 10));\n         }\n     }\n \n     private void unescapeIt(Entities entities) {\n         for (int i = 0; i < COUNT; ++i) {\n-            String unescaped  = entities.unescape(stringWithEntities);\n-            assertEquals(\"xxxx\\u0192\", unescaped.substring(0,5));\n-        }\n-    }\n+            String unescaped = entities.unescape(stringWithEntities);\n+            assertEquals(\"xxxx\\u00A0\", unescaped.substring(0, 5));\n+        }\n+    }\n+\n+\n }\n ", "timestamp": 1056855819, "metainfo": ""}