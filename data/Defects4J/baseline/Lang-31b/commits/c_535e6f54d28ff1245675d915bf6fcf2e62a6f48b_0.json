{"sha": "535e6f54d28ff1245675d915bf6fcf2e62a6f48b", "log": "Fix infinite recursion in replace() when blank string used from Holger Krauth   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n+ * @author Holger Krauth\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.30 2002/12/23 00:32:24 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.31 2003/01/19 18:15:38 scolebourne Exp $\n  */\n public class StringUtils {\n \n     \n     /**\n      * <p>Replace a String with another String inside a larger String, once.</p>\n-     *\n+     * \n+     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n+     * \n      * @see #replace(String text, String repl, String with, int max)\n      * @param text text to search and replace in\n      * @param repl String to search for\n     /**\n      * <p>Replace all occurances of a String within another String.</p>\n      *\n+     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n+     * \n      * @see #replace(String text, String repl, String with, int max)\n      * @param text text to search and replace in\n      * @param repl String to search for\n      * <p>Replace a String with another String inside a larger String,\n      * for the first <code>max</code> values of the search String.</p>\n      *\n-     * <p>A <code>null</code> reference is passed to this method is a\n-     * no-op.</p>\n+     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      *\n      * @param text text to search and replace in\n      * @param repl String to search for\n      * @param with String to replace with\n-     * @param max maximum number of values to replace, or\n-     *  <code>-1</code> if no maximum\n+     * @param max maximum number of values to replace, or <code>-1</code> if no maximum\n      * @return the text with any replacements processed\n-     * @throws NullPointerException if repl is <code>null</code>\n-     */\n-    public static String replace(String text, String repl, String with,\n-                                 int max) {\n-        if (text == null) {\n-            return null;\n+     */\n+    public static String replace(String text, String repl, String with, int max) {\n+        if (text == null || repl == null || with == null || repl.length() == 0) {\n+            return text;\n         }\n \n         StringBuffer buf = new StringBuffer(text.length());\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n-package org.apache.commons.lang;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang;\n \n import java.util.Arrays;\n \n  *\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n- * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n- * @version $Id: StringUtilsTest.java,v 1.11 2002/12/07 21:50:30 bayard Exp $\n+ * @author Holger Krauth\n+ * @version $Id: StringUtilsTest.java,v 1.12 2003/01/19 18:15:38 scolebourne Exp $\n  */\n-public class StringUtilsTest extends TestCase\n-{\n+public class StringUtilsTest extends TestCase {\n+\n     private static final String[] ARRAY_LIST = { \"foo\", \"bar\", \"baz\" };\n \n     private static final String SEPARATOR = \",\";\n \n     //-----------------------------------------------------------------------\n \n-    public void testCaseFunctions()\n-    {\n+    public void testCaseFunctions() {\n         assertEquals(\"capitalise(String) failed\",\n                      CAP_FOO, StringUtils.capitalise(FOO) );\n         assertEquals(\"capitalise(empty-string) failed\",\n                      \"Hello aPACHE\", StringUtils.swapCase(\"hELLO Apache\") );\n     }\n \n-    public void testJoin()\n-    {\n+    public void testJoin() {\n         assertEquals(\"concatenate(Object[]) failed\", \n                      \"foobarbaz\", StringUtils.concatenate(ARRAY_LIST));\n         assertEquals(\"join(Object[], String) failed\", TEXT_LIST,\n                                       SEPARATOR));\n     }\n \n-    public void testSplit()\n-    {\n+    public void testSplit() {\n         String[] result = StringUtils.split(TEXT_LIST, SEPARATOR, 2);\n         String[] expected = { \"foo\", \"bar,baz\" };\n         assertEquals(\"split(Object[], String, int) yielded unexpected length\",\n         assertEquals(\"split(Object[], null, int)[2] failed\", \"three four five six\", result[2]);\n     }\n \n-    public void testReplaceFunctions()\n-    {\n+    public void testReplaceFunctions() {\n         assertEquals(\"replace(String, String, String, int) failed\",\n                      FOO, StringUtils.replace(\"oo\" + FOO, \"o\", \"\", 2));\n         assertEquals(\"replace(String, String, String) failed\",\n                      FOO, StringUtils.replaceOnce(FOO + FOO, FOO, \"\"));\n         assertEquals(\"carriage-return replace(String,String,String) failed\",\n                      \"test123\", StringUtils.replace(\"test\\r1\\r2\\r3\", \"\\r\", \"\"));\n-    }\n-\n-    public void testOverlayString()\n-    {\n+\n+        assertEquals(\"replace(String, String, String) failed\",\n+            \"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n+        assertEquals(\"replace(String, String, String) failed\",\n+            \"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n+        assertEquals(\"replace(String, String, String) failed\",\n+            \"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n+        assertEquals(\"replace(String, String, String) failed\",\n+            \"FOO\", StringUtils.replace(\"FOO\", null, null));\n+        assertEquals(\"replace(String, String, String) failed\",\n+            null, StringUtils.replace(null, \"\", \"any\"));\n+    }\n+\n+    public void testOverlayString() {\n         assertEquals(\"overlayString(String, String, int, int) failed\",\n                      \"foo foor baz\", StringUtils.overlayString(SENTENCE, FOO, 4, 6) );\n     }\n \n-    public void testRepeat()\n-    {\n+    public void testRepeat() {\n         assertEquals(\"repeat(String, int) failed\",\n                      FOO + FOO + FOO, StringUtils.repeat(FOO, 3) );\n     }\n \n-    public void testCenter()\n-    {\n+    public void testCenter() {\n         assertEquals(\"center(String, int) failed\",\n                      \"   \"+FOO+\"   \", StringUtils.center(FOO, 9) );\n     }\n \n-    public void testChompFunctions()\n-    {\n-\n+    public void testChompFunctions() {\n         assertEquals(\"chomp(String) failed\",\n                      FOO, StringUtils.chomp(FOO + \"\\n\" + FOO) );\n \n                      FOO, StringUtils.chopNewline(FOO + \"\\r\\n\") );\n     }\n \n-    public void testPadFunctions()\n-    {\n+    public void testPadFunctions() {\n         assertEquals(\"rightPad(String, int) failed\",\n                      \"1234    \", StringUtils.rightPad (\"1234\", 8) );\n ", "timestamp": 1043000138, "metainfo": ""}