{"sha": "85fbc044ced9d3c87b341cd0cd3dd37a86b3bdb2", "log": "Generics  ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n     //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new DateUtils());\n-        Constructor[] cons = DateUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n             Calendar centered = DateUtils.truncate(now, Calendar.DATE);\n             centered.add(Calendar.DATE, -3);\n             \n-            Iterator it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\n+            Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\n             assertWeekIterator(it, sunday);\n             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);\n             assertWeekIterator(it, monday);\n      * Tests the calendar iterator for month-based ranges\n      */\n     public void testMonthIterator() throws Exception {\n-        Iterator it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n+        Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n         assertWeekIterator(it,\n                 dateParser.parse(\"January 27, 2002\"),\n                 dateParser.parse(\"March 2, 2002\"));\n      * This checks that this is a 7 element iterator of Calendar objects\n      * that are dates (no time), and exactly 1 day spaced after each other.\n      */\n-    private static void assertWeekIterator(Iterator it, Calendar start) {\n+    private static void assertWeekIterator(Iterator<?> it, Calendar start) {\n         Calendar end = (Calendar) start.clone();\n         end.add(Calendar.DATE, 6);\n \n     /**\n      * Convenience method for when working with Date objects\n      */\n-    private static void assertWeekIterator(Iterator it, Date start, Date end) {\n+    private static void assertWeekIterator(Iterator<?> it, Date start, Date end) {\n         Calendar calStart = Calendar.getInstance();\n         calStart.setTime(start);\n         Calendar calEnd = Calendar.getInstance();\n      * that are dates (no time), and exactly 1 day spaced after each other\n      * (in addition to the proper start and stop dates)\n      */\n-    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {\n+    private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {\n         Calendar cal = (Calendar) it.next();\n         assertEquals(\"\", start, cal, 0);\n         Calendar last = null;\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n     // -----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new DurationFormatUtils());\n-        Constructor[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));", "timestamp": 1237377947, "metainfo": ""}