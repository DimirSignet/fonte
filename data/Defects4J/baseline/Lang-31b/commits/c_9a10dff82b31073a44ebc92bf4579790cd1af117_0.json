{"sha": "9a10dff82b31073a44ebc92bf4579790cd1af117", "log": "Removed two broken methods from StringUtils.  Since a beta has gone out, this is not good practice.  However, since 1.0 final has not yet been released, it is out-weighed by the trade off of releasing code that just plain doesn't work.  Use str.getBytes(encoding) in place of convertUnicodeToNative().  Use new String(byte[], encoding) in place of convertNativeToUnicode().   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com>Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org>Stephen Colebourne</a>\n- * @version $Id: StringUtils.java,v 1.4 2002/07/23 05:21:28 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.5 2002/07/26 01:40:11 dlr Exp $\n  */\n public class StringUtils {\n \n         return d[n][m];\n     }\n \n-    /**\n-     * Convert a string from unicode to bytes in a native encoding.\n-     * The string must be in unicode (as Java always expects this);\n-     * {@link #convertNativeToUnicode(String, String)} will convert\n-     * strings in native encodings into unicode.  This method is\n-     * generally used to create a <code>String</code> for use as\n-     * output, and is useful when dealing with I18N.\n-     *\n-     * @param source String the unicode string to convert\n-     * @param charset String the name of the charset into which to\n-     * convert.\n-     * @return The string given represented in the native encoding\n-     * specified.\n-     * @see #convertNativeToUnicode(String, String)\n-     */\n-    public static String convertUnicodeToNative(String source, String charset)\n-            throws IOException {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        OutputStreamWriter out = new OutputStreamWriter(baos, charset);\n-        out.write(source);\n-        out.close();\n-        return baos.toString();\n-    }\n-\n-    /**\n-     * Convert a string from a native encoding to unicode.  This\n-     * method is generally used to create a <code>String</code> for\n-     * use as input, and is useful when dealing with I18N.\n-     *\n-     * @param input String the input to convert from native encoding\n-     * to unicode.\n-     * @param charset String the charset from which to convert.\n-     * @return The string given represented in unicode rather than the\n-     * specified native encoding.\n-     */\n-    public static String convertNativeToUnicode(String input, String charset)\n-            throws IOException {\n-        InputStreamReader in = new InputStreamReader\n-            (new ByteArrayInputStream(input.getBytes()), charset);\n-        StringBuffer output = new StringBuffer();\n-        char[] buf = new char[CHAR_BUFFER_SIZE];\n-        int count = 0;\n-        while ((count = in.read(buf, 0, CHAR_BUFFER_SIZE)) > 0)\n-        {\n-            output.append(buf, 0, count);\n-        }\n-        in.close();\n-        return output.toString();\n-    }\n-    \n // these are not really of use in the Java world. Only if you're a C afficionado\n //    public static String sprintf(String format, Object[] list);\n //    public static Object[] sscanf(String str, String format);\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTest.java,v 1.2 2002/07/23 05:21:27 bayard Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.3 2002/07/26 01:40:11 dlr Exp $\n  */\n public class StringUtilsTest extends TestCase\n {\n \n         assertEquals(\"leftPad(String, int, String) failed\",\n                      \"-+~123456\", StringUtils.leftPad(\"123456\", 9, \"-+~\") );\n-    }\n-\n-    public void testUnicodeFunctions() throws java.io.IOException\n-    {\n-        /* this test fails on my window box with an Sun english JDK 1.3.1\n-           I think that the input string is not right\n-        */\n-/* Kept out for the moment.\n-        String input = \"\u001b$B$3$l$OF|K\\\\8l$N%F%9%H$G$9!\u001b(B#\";\n-        String unicode = StringUtils.convertNativeToUnicode(input, \"iso-2022-jp\");\n-        String iso = StringUtils.convertUnicodeToNative(unicode, \"iso-2022-jp\");\n-        assertEquals(\"Unicode conversions failed\", input, iso);\n-*/\n     }\n \n     public void testReverseFunctions() {", "timestamp": 1027647611, "metainfo": ""}