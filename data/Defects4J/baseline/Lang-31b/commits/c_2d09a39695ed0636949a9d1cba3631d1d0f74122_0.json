{"sha": "2d09a39695ed0636949a9d1cba3631d1d0f74122", "log": "Converted invokeMethod to use ReflectionExceptions   ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n  * @author Gregor Raman\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n- * @version $Id: MethodUtils.java,v 1.6 2002/11/20 22:31:40 rdonkin Exp $\n+ * @version $Id: MethodUtils.java,v 1.7 2002/11/21 18:53:32 rdonkin Exp $\n  */\n public class MethodUtils {\n     \n      * @param methodName  get method with this name, must not be null\n      * @param arg  use this argument, must not be null\n      *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the\n-     *  method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible\n-     *  via reflection\n+     * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if any parameter is null\n      */\n     public static Object invokeMethod(\n             String methodName,\n             Object arg)\n                 throws\n-                    NoSuchMethodException,\n-                    IllegalAccessException,\n-                    InvocationTargetException {\n+                    ReflectionException {\n \n         if (objectToInvoke == null) {\n             throw new IllegalArgumentException(\"The object to invoke must not be null\");\n      * @param methodName  get method with this name, must not be null\n      * @param args  use these arguments - treat null as empty array\n      *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the\n-     *  method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible\n-     *  via reflection\n+     * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if the objectToInvoke, methodName or any argument is null\n      */\n     public static Object invokeMethod(\n             String methodName,\n             Object[] args)\n                 throws\n-                    NoSuchMethodException,\n-                    IllegalAccessException,\n-                    InvocationTargetException {\n+                    ReflectionException {\n         \n         if (objectToInvoke == null) {\n             throw new IllegalArgumentException(\"The object to invoke must not be null\");\n      * @param args  use these arguments - treat null as empty array\n      * @param parameterTypes  match these parameters - treat null as empty array\n      *\n-     * @throws NoSuchMethodException if there is no such accessible method\n-     * @throws InvocationTargetException wraps an exception thrown by the\n-     *  method invoked\n-     * @throws IllegalAccessException if the requested method is not accessible\n-     *  via reflection\n+     * @throws ReflectionException if an error occurs during reflection\n      */\n     public static Object invokeMethod(\n             Object object,\n             Object[] args,\n             Class[] parameterTypes)\n                 throws\n-                    NoSuchMethodException,\n-                    IllegalAccessException,\n-                    InvocationTargetException {\n+                    ReflectionException {\n                     \n         if (parameterTypes == null) {\n             parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;\n                 methodName,\n                 parameterTypes);\n         if (method == null)\n-            throw new NoSuchMethodException(\"No such accessible method: \" +\n+            throw new ReflectionException(\"No such accessible method: \" +\n                     methodName + \"() on object: \" + object.getClass().getName());\n-        return method.invoke(object, args);\n+        \n+        try {\n+        \n+            return method.invoke(object, args);\n+            \n+        } catch (IllegalAccessException ex) {\n+            throw new ReflectionException(\n+                ReflectionUtils.getThrowableText(\n+                    ex, \"invoking method\", object.getClass().getName(), parameterTypes, methodName)\n+                , ex);\n+        \n+        } catch (InvocationTargetException ex) {\n+            throw new ReflectionException(\n+                ReflectionUtils.getThrowableText(\n+                    ex, \"invoking method\", object.getClass().getName(), parameterTypes, methodName)\n+                , ex);\n+        \n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/reflect/MethodUtilsTestCase.java\n             // should get here!\n             fail(\"No exception thrown when no appropriate method exists\");\n             \n-        } catch (NoSuchMethodException e) {\n+        } catch (ReflectionException e) {\n             // this is what we're expecting!\n         }\n         ", "timestamp": 1037904812, "metainfo": ""}