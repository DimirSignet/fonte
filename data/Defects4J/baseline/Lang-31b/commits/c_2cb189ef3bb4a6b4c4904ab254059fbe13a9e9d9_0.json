{"sha": "2cb189ef3bb4a6b4c4904ab254059fbe13a9e9d9", "log": "Add WordUtils.initials  ", "commit": "\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n      * @since 2.1\n      */\n     public static String capitalize(String str, char[] delimiters) {\n-        if (str == null || str.length() == 0) {\n+        int delimLen = (delimiters == null ? -1 : delimiters.length);\n+        if (str == null || str.length() == 0 || delimLen == 0) {\n             return str;\n         }\n         int strLen = str.length();\n         StringBuffer buffer = new StringBuffer(strLen);\n-\n-        int delimitersLen = 0;\n-        if(delimiters != null) {\n-            delimitersLen = delimiters.length;\n-        }\n-\n         boolean capitalizeNext = true;\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n \n-            boolean isDelimiter = false;\n-            if(delimiters == null) {\n-                isDelimiter = Character.isWhitespace(ch);\n-            } else {\n-                for(int j=0; j < delimitersLen; j++) {\n-                    if(ch == delimiters[j]) {\n-                        isDelimiter = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if (isDelimiter) {\n+            if (isDelimiter(ch, delimiters)) {\n                 buffer.append(ch);\n                 capitalizeNext = true;\n             } else if (capitalizeNext) {\n         return buffer.toString();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Converts all the whitespace separated words in a String into capitalized words, \n      * that is each word is made up of a titlecase character and then a series of \n      * @since 2.1\n      */\n     public static String capitalizeFully(String str, char[] delimiters) {\n-        if (str == null || str.length() == 0) {\n+        int delimLen = (delimiters == null ? -1 : delimiters.length);\n+        if (str == null || str.length() == 0 || delimLen == 0) {\n             return str;\n         }\n         str = str.toLowerCase();\n         return capitalize(str, delimiters);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Uncapitalizes all the whitespace separated words in a String.\n      * Only the first letter of each word is changed.</p>\n      * @since 2.1\n      */\n     public static String uncapitalize(String str, char[] delimiters) {\n-        if (str == null || str.length() == 0) {\n+        int delimLen = (delimiters == null ? -1 : delimiters.length);\n+        if (str == null || str.length() == 0 || delimLen == 0) {\n             return str;\n         }\n         int strLen = str.length();\n-\n-        int delimitersLen = 0;\n-        if(delimiters != null) {\n-            delimitersLen = delimiters.length;\n-        }\n-\n         StringBuffer buffer = new StringBuffer(strLen);\n         boolean uncapitalizeNext = true;\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n \n-            boolean isDelimiter = false;\n-            if(delimiters == null) {\n-                isDelimiter = Character.isWhitespace(ch);\n-            } else {\n-                for(int j=0; j < delimitersLen; j++) {\n-                    if(ch == delimiters[j]) {\n-                        isDelimiter = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if (isDelimiter) {\n+            if (isDelimiter(ch, delimiters)) {\n                 buffer.append(ch);\n                 uncapitalizeNext = true;\n             } else if (uncapitalizeNext) {\n         return buffer.toString();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Swaps the case of a String using a word based algorithm.</p>\n      * \n         }\n         return buffer.toString();\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Extracts the initial letters from each word in the String.</p>\n+     * \n+     * <p>The first letter of the string and all first letters after\n+     * whitespace are returned as a new string.\n+     * Their case is not changed.</p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * WordUtils.initials(null)             = null\n+     * WordUtils.initials(\"\")               = \"\"\n+     * WordUtils.initials(\"Ben John Lee\")   = \"BJL\"\n+     * WordUtils.initials(\"Ben J.Lee\")      = \"BJ\"\n+     * </pre>\n+     *\n+     * @param str  the String to get initials from, may be null\n+     * @return String of initial letters, <code>null</code> if null String input\n+     * @see #initials(String,char[])\n+     * @since 2.2\n+     */\n+    public static String initials(String str) {\n+        return initials(str, null);\n+    }\n+\n+    /**\n+     * <p>Extracts the initial letters from each word in the String.</p>\n+     * \n+     * <p>The first letter of the string and all first letters after the\n+     * defined delimiters are returned as a new string.\n+     * Their case is not changed.</p>\n+     *\n+     * <p>If the delimiters array is null, then Whitespace is used.\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.\n+     * An empty delimiter array returns an empty String.</p>\n+     *\n+     * <pre>\n+     * WordUtils.initials(null, *)                = null\n+     * WordUtils.initials(\"\", *)                  = \"\"\n+     * WordUtils.initials(\"Ben John Lee\", null)   = \"BJL\"\n+     * WordUtils.initials(\"Ben J.Lee\", null)      = \"BJ\"\n+     * WordUtils.initials(\"Ben J.Lee\", [' ','.']) = \"BJL\"\n+     * WordUtils.initials(*, new char[0])         = \"\"\n+     * </pre>\n+     * \n+     * @param str  the String to get initials from, may be null\n+     * @param delimiters  set of characters to determine words, null means whitespace\n+     * @return String of initial letters, <code>null</code> if null String input\n+     * @see #initials(String)\n+     * @since 2.2\n+     */\n+    public static String initials(String str, char[] delimiters) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        if (delimiters != null && delimiters.length == 0) {\n+            return \"\";\n+        }\n+        int strLen = str.length();\n+        char[] buf = new char[strLen / 2 + 1];\n+        int count = 0;\n+        boolean lastWasGap = true;\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+\n+            if (isDelimiter(ch, delimiters)) {\n+                lastWasGap = true;\n+            } else if (lastWasGap) {\n+                buf[count++] = ch;\n+                lastWasGap = false;\n+            } else {\n+                // ignore ch\n+            }\n+        }\n+        return new String(buf, 0, count);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Is the character a delimiter.\n+     *\n+     * @param ch  the character to check\n+     * @param delimiters  the delimiters\n+     * @return true if it is a delimiter\n+     */\n+    private static boolean isDelimiter(char ch, char[] delimiters) {\n+        if (delimiters == null) {\n+            return Character.isWhitespace(ch);\n+        }\n+        for (int i = 0, isize = delimiters.length; i < isize; i++) {\n+            if (ch == delimiters[i]) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/WordUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n         assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars) );\n         assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null) );\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testInitials_String() {\n+        assertEquals(null, WordUtils.initials(null));\n+        assertEquals(\"\", WordUtils.initials(\"\"));\n+        assertEquals(\"\", WordUtils.initials(\"  \"));\n+\n+        assertEquals(\"I\", WordUtils.initials(\"I\"));\n+        assertEquals(\"i\", WordUtils.initials(\"i\"));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testInitials_String_charArray() {\n+        char[] array = null;\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = new char[0];\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" \".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" .\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" .'\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \"SIJo1\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\" \", WordUtils.initials(\"  \", array));\n+        assertEquals(\"\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\n+    }\n+\n+    // -----------------------------------------------------------------------\n     public void testSwapCase_String() {\n         assertEquals(null, WordUtils.swapCase(null));\n         assertEquals(\"\", WordUtils.swapCase(\"\"));", "timestamp": 1126352315, "metainfo": ""}