{"sha": "a81f0ad75dc8b715897555f6cbae1f53bc3560df", "log": "Reorder methods for consistency within package  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n         this.value = value.booleanValue();\n     }\n \n-    // -----------------------------------------------------------------------\n-    /**\n-     * Returns the value of this MutableBoolean as a boolean.\n-     * \n-     * @return the boolean value represented by this object.\n-     */\n-    public boolean booleanValue() {\n-        return value;\n-    }\n-\n     //-----------------------------------------------------------------------\n-    /**\n-     * Gets this mutable as an instance of Boolean.\n-     *\n-     * @return a Boolean instance containing the value from this mutable, never null\n-     */\n-    public Boolean toBoolean() {\n-        return Boolean.valueOf(booleanValue());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Compares this mutable to another in ascending order.\n-     * \n-     * @param other  the other mutable to compare to, not null\n-     * @return negative if this is less, zero if equal, positive if greater\n-     *  where false is less than true\n-     */\n-    public int compareTo(MutableBoolean other) {\n-        boolean anotherVal = other.value;\n-        return value == anotherVal ? 0 : (value ? 1 : -1);\n-    }\n-\n-    // -----------------------------------------------------------------------\n-    /**\n-     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n-     * not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same\n-     * <code>boolean</code> value as this object.\n-     * \n-     * @param obj  the object to compare with, null returns false\n-     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n-     */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj instanceof MutableBoolean) {\n-            return value == ((MutableBoolean) obj).booleanValue();\n-        }\n-        return false;\n-    }\n-\n-    // -----------------------------------------------------------------------\n     /**\n      * Gets the value as a Boolean instance.\n      * \n      */\n     public Boolean getValue() {\n         return Boolean.valueOf(this.value);\n-    }\n-\n-    /**\n-     * Returns a suitable hash code for this mutable.\n-     * \n-     * @return the hash code returned by <code>Boolean.TRUE</code> or <code>Boolean.FALSE</code>\n-     */\n-    @Override\n-    public int hashCode() {\n-        return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();\n     }\n \n     /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns the value of this MutableBoolean as a boolean.\n+     * \n+     * @return the boolean value represented by this object.\n+     */\n+    public boolean booleanValue() {\n+        return value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets this mutable as an instance of Boolean.\n+     *\n+     * @return a Boolean instance containing the value from this mutable, never null\n+     */\n+    public Boolean toBoolean() {\n+        return Boolean.valueOf(booleanValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n+     * not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same\n+     * <code>boolean</code> value as this object.\n+     * \n+     * @param obj  the object to compare with, null returns false\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableBoolean) {\n+            return value == ((MutableBoolean) obj).booleanValue();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hash code for this mutable.\n+     * \n+     * @return the hash code returned by <code>Boolean.TRUE</code> or <code>Boolean.FALSE</code>\n+     */\n+    @Override\n+    public int hashCode() {\n+        return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     * \n+     * @param other  the other mutable to compare to, not null\n+     * @return negative if this is less, zero if equal, positive if greater\n+     *  where false is less than true\n+     */\n+    public int compareTo(MutableBoolean other) {\n+        boolean anotherVal = other.value;\n+        return value == anotherVal ? 0 : (value ? 1 : -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns the String value of this mutable.\n      * \n      * @return the mutable value as a string\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(byte operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.byteValue();\n+    }\n+\n+    /**\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(byte operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.byteValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     // shortValue relies on Number implementation\n     /**\n      * Returns the value of this MutableByte as a byte.\n      */\n     public Byte toByte() {\n         return Byte.valueOf(byteValue());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Increments the value.\n-     *\n-     * @since Commons Lang 2.2\n-     */\n-    public void increment() {\n-        value++;\n-    }\n-\n-    /**\n-     * Decrements the value.\n-     *\n-     * @since Commons Lang 2.2\n-     */\n-    public void decrement() {\n-        value--;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Adds a value to the value of this instance.\n-     * \n-     * @param operand  the value to add, not null\n-     * @since Commons Lang 2.2\n-     */\n-    public void add(byte operand) {\n-        this.value += operand;\n-    }\n-\n-    /**\n-     * Adds a value to the value of this instance.\n-     * \n-     * @param operand  the value to add, not null\n-     * @throws NullPointerException if the object is null\n-     * @since Commons Lang 2.2\n-     */\n-    public void add(Number operand) {\n-        this.value += operand.byteValue();\n-    }\n-\n-    /**\n-     * Subtracts a value from the value of this instance.\n-     * \n-     * @param operand  the value to subtract, not null\n-     * @since Commons Lang 2.2\n-     */\n-    public void subtract(byte operand) {\n-        this.value -= operand;\n-    }\n-\n-    /**\n-     * Subtracts a value from the value of this instance.\n-     * \n-     * @param operand  the value to subtract, not null\n-     * @throws NullPointerException if the object is null\n-     * @since Commons Lang 2.2\n-     */\n-    public void subtract(Number operand) {\n-        this.value -= operand.byteValue();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Checks whether the double value is the special NaN value.\n+     * \n+     * @return true if NaN\n+     */\n+    public boolean isNaN() {\n+        return Double.isNaN(value);\n+    }\n+\n+    /**\n+     * Checks whether the double value is infinite.\n+     * \n+     * @return true if infinite\n+     */\n+    public boolean isInfinite() {\n+        return Double.isInfinite(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(double operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value to the value of this instance.\n+     * \n+     * @param operand  the value to add, not null\n+     * @throws NullPointerException if the object is null\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.doubleValue();\n+    }\n+\n+    /**\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(double operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value from the value of this instance.\n+     * \n+     * @param operand  the value to subtract, not null\n+     * @throws NullPointerException if the object is null\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.doubleValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n      * Returns the value of this MutableDouble as an int.\n         return value;\n     }\n \n-    /**\n-     * Checks whether the double value is the special NaN value.\n-     * \n-     * @return true if NaN\n-     */\n-    public boolean isNaN() {\n-        return Double.isNaN(value);\n-    }\n-\n-    /**\n-     * Checks whether the double value is infinite.\n-     * \n-     * @return true if infinite\n-     */\n-    public boolean isInfinite() {\n-        return Double.isInfinite(value);\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Gets this mutable as an instance of Double.\n      */\n     public Double toDouble() {\n         return Double.valueOf(doubleValue());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Increments the value.\n-     *\n-     * @since Commons Lang 2.2\n-     */\n-    public void increment() {\n-        value++;\n-    }\n-\n-    /**\n-     * Decrements the value.\n-     *\n-     * @since Commons Lang 2.2\n-     */\n-    public void decrement() {\n-        value--;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Adds a value to the value of this instance.\n-     * \n-     * @param operand  the value to add\n-     * @since Commons Lang 2.2\n-     */\n-    public void add(double operand) {\n-        this.value += operand;\n-    }\n-\n-    /**\n-     * Adds a value to the value of this instance.\n-     * \n-     * @param operand  the value to add, not null\n-     * @throws NullPointerException if the object is null\n-     * @since Commons Lang 2.2\n-     */\n-    public void add(Number operand) {\n-        this.value += operand.doubleValue();\n-    }\n-\n-    /**\n-     * Subtracts a value from the value of this instance.\n-     * \n-     * @param operand  the value to subtract, not null\n-     * @since Commons Lang 2.2\n-     */\n-    public void subtract(double operand) {\n-        this.value -= operand;\n-    }\n-\n-    /**\n-     * Subtracts a value from the value of this instance.\n-     * \n-     * @param operand  the value to subtract, not null\n-     * @throws NullPointerException if the object is null\n-     * @since Commons Lang 2.2\n-     */\n-    public void subtract(Number operand) {\n-        this.value -= operand.doubleValue();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Checks whether the float value is the special NaN value.\n+     * \n+     * @return true if NaN\n+     */\n+    public boolean isNaN() {\n+        return Float.isNaN(value);\n+    }\n+\n+    /**\n+     * Checks whether the float value is infinite.\n+     * \n+     * @return true if infinite\n+     */\n+    public boolean isInfinite() {\n+        return Float.isInfinite(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Increments the value.\n      *\n      * @since Commons Lang 2.2\n     @Override\n     public double doubleValue() {\n         return value;\n-    }\n-\n-    /**\n-     * Checks whether the float value is the special NaN value.\n-     * \n-     * @return true if NaN\n-     */\n-    public boolean isNaN() {\n-        return Float.isNaN(value);\n-    }\n-\n-    /**\n-     * Checks whether the float value is infinite.\n-     * \n-     * @return true if infinite\n-     */\n-    public boolean isInfinite() {\n-        return Float.isInfinite(value);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1256601031, "metainfo": ""}