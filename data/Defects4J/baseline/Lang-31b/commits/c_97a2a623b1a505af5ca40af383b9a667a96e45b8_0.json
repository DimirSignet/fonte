{"sha": "97a2a623b1a505af5ca40af383b9a667a96e45b8", "log": "Applying patch from LANG-514. CharRange constructors removed and replaced with readable static builder methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n     /** Cached toString. */\n     private transient String iToString;\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Constructs a <code>CharRange</code> over a single character.</p>\n-     *\n-     * @param ch  only character in this range\n-     */\n-    public CharRange(char ch) {\n-        this(ch, ch, false);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>CharRange</code> over a single character,\n-     * optionally negating the range.</p>\n-     *\n-     * <p>A negated range includes everything except the specified char.</p>\n-     *\n-     * @param ch  only character in this range\n-     * @param negated  true to express everything except the range\n-     */\n-    public CharRange(char ch, boolean negated) {\n-        this(ch, ch, negated);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>CharRange</code> over a set of characters.</p>\n-     *\n-     * @param start  first character, inclusive, in this range\n-     * @param end  last character, inclusive, in this range\n-     */\n-    public CharRange(char start, char end) {\n-        this(start, end, false);\n-    }\n-\n     /**\n      * <p>Constructs a <code>CharRange</code> over a set of characters,\n      * optionally negating the range.</p>\n      * @param end  last character, inclusive, in this range\n      * @param negated  true to express everything except the range\n      */\n-    public CharRange(char start, char end, boolean negated) {\n+    private CharRange(char start, char end, boolean negated) {\n         super();\n         if (start > end) {\n             char temp = start;\n         this.start = start;\n         this.end = end;\n         this.negated = negated;\n+    }\n+\n+    /**\n+     * <p>Constructs a <code>CharRange</code> over a single character.</p>\n+     *\n+     * @param ch  only character in this range\n+     * @see CharRange#CharRange(char, boolean)\n+     */\n+    public static CharRange is(char ch) {\n+        return new CharRange(ch, ch, false);\n+    }\n+\n+    /**\n+     * <p>Constructs a negated <code>CharRange</code> over a single character.</p>\n+     *\n+     * @param ch  only character in this range\n+     * @see CharRange#CharRange(char, boolean)\n+     */\n+    public static CharRange isNot(char ch) {\n+        return new CharRange(ch, ch, true);\n+    }\n+\n+    /**\n+     * <p>Constructs a <code>CharRange</code> over a set of characters.</p>\n+     *\n+     * @param start  first character, inclusive, in this range\n+     * @param end  last character, inclusive, in this range\n+     * @see CharRange#CharRange(char, char, boolean)\n+     */\n+    public static CharRange isIn(char start, char end) {\n+        return new CharRange(start, end, false);\n+    }\n+\n+    /**\n+     * <p>Constructs a negated <code>CharRange</code> over a set of characters.</p>\n+     *\n+     * @param start  first character, inclusive, in this range\n+     * @param end  last character, inclusive, in this range\n+     * @see CharRange#CharRange(char, char, boolean)\n+     */\n+    public static CharRange isNotIn(char start, char end) {\n+        return new CharRange(start, end, true);\n     }\n \n     // Accessors\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n             int remainder = (len - pos);\n             if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {\n                 // negated range\n-                set.add(new CharRange(str.charAt(pos + 1), str.charAt(pos + 3), true));\n+                set.add(CharRange.isNotIn(str.charAt(pos + 1), str.charAt(pos + 3)));\n                 pos += 4;\n             } else if (remainder >= 3 && str.charAt(pos + 1) == '-') {\n                 // range\n-                set.add(new CharRange(str.charAt(pos), str.charAt(pos + 2)));\n+                set.add(CharRange.isIn(str.charAt(pos), str.charAt(pos + 2)));\n                 pos += 3;\n             } else if (remainder >= 2 && str.charAt(pos) == '^') {\n                 // negated char\n-                set.add(new CharRange(str.charAt(pos + 1), true));\n+                set.add(CharRange.isNot(str.charAt(pos + 1)));\n                 pos += 2;\n             } else {\n                 // char\n-                set.add(new CharRange(str.charAt(pos)));\n+                set.add(CharRange.is(str.charAt(pos)));\n                 pos += 1;\n             }\n         }\n--- a/src/test/org/apache/commons/lang/CharRangeTest.java\n+++ b/src/test/org/apache/commons/lang/CharRangeTest.java\n         assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));\n         assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n-    public void testConstructorAccessors_Char() {\n-        CharRange rangea = new CharRange('a');\n+    public void testConstructorAccessors_is() {\n+        CharRange rangea = CharRange.is('a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n         assertEquals(false, rangea.isNegated());\n         assertEquals(\"a\", rangea.toString());\n     }\n     \n-    public void testConstructorAccessors_CharBoolean_Normal() {\n-        CharRange rangea = new CharRange('a');\n+    public void testConstructorAccessors_isNot() {\n+        CharRange rangea = CharRange.isNot('a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isIn_Same() {\n+        CharRange rangea = CharRange.isIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n         assertEquals(false, rangea.isNegated());\n         assertEquals(\"a\", rangea.toString());\n     }\n     \n-    public void testConstructorAccessors_CharBoolean_Negated() {\n-        CharRange rangea = new CharRange('a', true);\n+    public void testConstructorAccessors_isIn_Normal() {\n+        CharRange rangea = CharRange.isIn('a', 'e');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isIn_Reversed() {\n+        CharRange rangea = CharRange.isIn('e', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isNotIn_Same() {\n+        CharRange rangea = CharRange.isNotIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n         assertEquals(true, rangea.isNegated());\n         assertEquals(\"^a\", rangea.toString());\n     }\n     \n-    public void testConstructorAccessors_CharChar_Same() {\n-        CharRange rangea = new CharRange('a', 'a');\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('a', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n-        assertEquals(\"a\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharChar_Normal() {\n-        CharRange rangea = new CharRange('a', 'e');\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('e', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n-        assertEquals(\"a-e\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharChar_Reversed() {\n-        CharRange rangea = new CharRange('e', 'a');\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('e', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n-        assertEquals(\"a-e\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharCharBoolean_Same() {\n-        CharRange rangea = new CharRange('a', 'a', false);\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('a', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n-        assertEquals(\"a\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharCharBoolean_Normal() {\n-        CharRange rangea = new CharRange('a', 'e', false);\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('e', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n-        assertEquals(\"a-e\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharCharBoolean_Reversed() {\n-        CharRange rangea = new CharRange('e', 'a', false);\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('e', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n-        assertEquals(\"a-e\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharCharBoolean_SameNegated() {\n-        CharRange rangea = new CharRange('a', 'a', true);\n-        assertEquals('a', rangea.getStart());\n-        assertEquals('a', rangea.getEnd());\n-        assertEquals(true, rangea.isNegated());\n-        assertEquals(\"^a\", rangea.toString());\n-    }\n-    \n-    public void testConstructorAccessors_CharCharBoolean_NormalNegated() {\n-        CharRange rangea = new CharRange('a', 'e', true);\n+    public void testConstructorAccessors_isNotIn_Normal() {\n+        CharRange rangea = CharRange.isNotIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals('e', rangea.getEnd());\n         assertEquals(true, rangea.isNegated());\n         assertEquals(\"^a-e\", rangea.toString());\n     }\n     \n-    public void testConstructorAccessors_CharCharBoolean_ReversedNegated() {\n-        CharRange rangea = new CharRange('e', 'a', true);\n+    public void testConstructorAccessors_isNotIn_Reversed() {\n+        CharRange rangea = CharRange.isNotIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('e', rangea.getEnd());\n         assertEquals(true, rangea.isNegated());\n \n     //-----------------------------------------------------------------------    \n     public void testEquals_Object() {\n-        CharRange rangea = new CharRange('a');\n-        CharRange rangeae = new CharRange('a', 'e');\n-        CharRange rangenotbf = new CharRange('b', 'f', false);\n+        CharRange rangea = CharRange.is('a');\n+        CharRange rangeae = CharRange.isIn('a', 'e');\n+        CharRange rangenotbf = CharRange.isIn('b', 'f');\n         \n         assertEquals(false, rangea.equals(null));\n         \n         assertEquals(true, rangea.equals(rangea));\n-        assertEquals(true, rangea.equals(new CharRange('a')));\n+        assertEquals(true, rangea.equals(CharRange.is('a')));\n         assertEquals(true, rangeae.equals(rangeae));\n-        assertEquals(true, rangeae.equals(new CharRange('a', 'e')));\n+        assertEquals(true, rangeae.equals(CharRange.isIn('a', 'e')));\n         assertEquals(true, rangenotbf.equals(rangenotbf));\n-        assertEquals(true, rangenotbf.equals(new CharRange('b', 'f', false)));\n+        assertEquals(true, rangenotbf.equals(CharRange.isIn('b', 'f')));\n         \n         assertEquals(false, rangea.equals(rangeae));\n         assertEquals(false, rangea.equals(rangenotbf));\n     }\n             \n     public void testHashCode() {\n-        CharRange rangea = new CharRange('a');\n-        CharRange rangeae = new CharRange('a', 'e');\n-        CharRange rangenotbf = new CharRange('b', 'f', false);\n+        CharRange rangea = CharRange.is('a');\n+        CharRange rangeae = CharRange.isIn('a', 'e');\n+        CharRange rangenotbf = CharRange.isIn('b', 'f');\n         \n         assertEquals(true, rangea.hashCode() == rangea.hashCode());\n-        assertEquals(true, rangea.hashCode() == new CharRange('a').hashCode());\n+        assertEquals(true, rangea.hashCode() == CharRange.is('a').hashCode());\n         assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n-        assertEquals(true, rangeae.hashCode() == new CharRange('a', 'e').hashCode());\n+        assertEquals(true, rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());\n         assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n-        assertEquals(true, rangenotbf.hashCode() == new CharRange('b', 'f', false).hashCode());\n+        assertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n         \n         assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n         assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n     \n     //-----------------------------------------------------------------------    \n     public void testContains_Char() {\n-        CharRange range = new CharRange('c');\n+        CharRange range = CharRange.is('c');\n         assertEquals(false, range.contains('b'));\n         assertEquals(true, range.contains('c'));\n         assertEquals(false, range.contains('d'));\n         assertEquals(false, range.contains('e'));\n         \n-        range = new CharRange('c', 'd');\n+        range = CharRange.isIn('c', 'd');\n         assertEquals(false, range.contains('b'));\n         assertEquals(true, range.contains('c'));\n         assertEquals(true, range.contains('d'));\n         assertEquals(false, range.contains('e'));\n         \n-        range = new CharRange('d', 'c');\n+        range = CharRange.isIn('d', 'c');\n         assertEquals(false, range.contains('b'));\n         assertEquals(true, range.contains('c'));\n         assertEquals(true, range.contains('d'));\n         assertEquals(false, range.contains('e'));\n         \n-        range = new CharRange('c', 'd', false);\n-        assertEquals(false, range.contains('b'));\n-        assertEquals(true, range.contains('c'));\n-        assertEquals(true, range.contains('d'));\n-        assertEquals(false, range.contains('e'));\n-        \n-        range = new CharRange('c', 'd', true);\n+        range = CharRange.isNotIn('c', 'd');\n         assertEquals(true, range.contains('b'));\n         assertEquals(false, range.contains('c'));\n         assertEquals(false, range.contains('d'));\n     \n     //-----------------------------------------------------------------------    \n     public void testContains_Charrange() {\n-        CharRange a = new CharRange('a');\n-        CharRange b = new CharRange('b');\n-        CharRange c = new CharRange('c');\n-        CharRange c2 = new CharRange('c');\n-        CharRange d = new CharRange('d');\n-        CharRange e = new CharRange('e');\n-        CharRange cd = new CharRange('c', 'd');\n-        CharRange bd = new CharRange('b', 'd');\n-        CharRange bc = new CharRange('b', 'c');\n-        CharRange ab = new CharRange('a', 'b');\n-        CharRange de = new CharRange('d', 'e');\n-        CharRange ef = new CharRange('e', 'f');\n-        CharRange ae = new CharRange('a', 'e');\n+        CharRange a = CharRange.is('a');\n+        CharRange b = CharRange.is('b');\n+        CharRange c = CharRange.is('c');\n+        CharRange c2 = CharRange.is('c');\n+        CharRange d = CharRange.is('d');\n+        CharRange e = CharRange.is('e');\n+        CharRange cd = CharRange.isIn('c', 'd');\n+        CharRange bd = CharRange.isIn('b', 'd');\n+        CharRange bc = CharRange.isIn('b', 'c');\n+        CharRange ab = CharRange.isIn('a', 'b');\n+        CharRange de = CharRange.isIn('d', 'e');\n+        CharRange ef = CharRange.isIn('e', 'f');\n+        CharRange ae = CharRange.isIn('a', 'e');\n         \n         // normal/normal\n         assertEquals(false, c.contains(b));\n         assertEquals(true, ae.contains(cd));\n         assertEquals(true, ae.contains(de));\n         \n-        CharRange notb = new CharRange('b', 'b', true);\n-        CharRange notc = new CharRange('c', 'c', true);\n-        CharRange notd = new CharRange('d', 'd', true);\n-        CharRange notab = new CharRange('a', 'b', true);\n-        CharRange notbc = new CharRange('b', 'c', true);\n-        CharRange notbd = new CharRange('b', 'd', true);\n-        CharRange notcd = new CharRange('c', 'd', true);\n-        CharRange notde = new CharRange('d', 'e', true);\n-        CharRange notae = new CharRange('a', 'e', true);\n-        CharRange all = new CharRange((char) 0, Character.MAX_VALUE);\n-        CharRange allbutfirst = new CharRange((char) 1, Character.MAX_VALUE);\n+        CharRange notb = CharRange.isNot('b');\n+        CharRange notc = CharRange.isNot('c');\n+        CharRange notd = CharRange.isNot('d');\n+        CharRange notab = CharRange.isNotIn('a', 'b');\n+        CharRange notbc = CharRange.isNotIn('b', 'c');\n+        CharRange notbd = CharRange.isNotIn('b', 'd');\n+        CharRange notcd = CharRange.isNotIn('c', 'd');\n+        CharRange notde = CharRange.isNotIn('d', 'e');\n+        CharRange notae = CharRange.isNotIn('a', 'e');\n+        CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE);\n+        CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);\n         \n         // normal/negated\n         assertEquals(false, c.contains(notc));\n     }\n     \n     public void testContainsNullArg() {\n-        CharRange range = new CharRange('a');\n+        CharRange range = CharRange.is('a');\n         try {\n             @SuppressWarnings(\"unused\")\n             boolean contains = range.contains(null);\n     \n     //-----------------------------------------------------------------------    \n     public void testSerialization() {\n-        CharRange range = new CharRange('a');\n+        CharRange range = CharRange.is('a');\n         assertEquals(range, SerializationUtils.clone(range)); \n-        range = new CharRange('a', 'e');\n+        range = CharRange.isIn('a', 'e');\n         assertEquals(range, SerializationUtils.clone(range)); \n-        range = new CharRange('a', 'e', true);\n+        range = CharRange.isNotIn('a', 'e');\n         assertEquals(range, SerializationUtils.clone(range)); \n     }\n     \n--- a/src/test/org/apache/commons/lang/CharSetTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetTest.java\n         set = CharSet.getInstance(\"abc\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"a-ce-f\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n         \n         set = CharSet.getInstance(\"ae-f\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n         \n         set = CharSet.getInstance(\"e-fa\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n         \n         set = CharSet.getInstance(\"ae-fm-pz\");\n         array = set.getCharRanges();\n         assertEquals(4, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('e', 'f')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('m', 'p')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('m', 'p')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('z')));\n     }\n     \n     public void testConstructor_String_comboNegated() {\n         set = CharSet.getInstance(\"^abc\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"b^ac\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"db^ac\");\n         array = set.getCharRanges();\n         assertEquals(4, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"^b^a\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('b', 'b', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n         \n         set = CharSet.getInstance(\"b^a-c^z\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'c', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('z', 'z', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('b')));\n-    }\n-        \n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+    }\n+\n     public void testConstructor_String_oddDash() {\n         CharSet set;\n         CharRange[] array;\n         set = CharSet.getInstance(\"-\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"--\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"---\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"----\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"-a\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n         \n         set = CharSet.getInstance(\"a-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"a--\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '-')));\n         \n         set = CharSet.getInstance(\"--a\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', 'a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\n     }\n     \n     public void testConstructor_String_oddNegate() {\n         set = CharSet.getInstance(\"^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // \"^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n         \n         set = CharSet.getInstance(\"^^^\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^'))); // \"^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^^^^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\" x2\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\" x2\n         \n         set = CharSet.getInstance(\"a^\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a'))); // \"a\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // \"^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a'))); // \"a\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^a-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true))); // \"^a\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // \"-\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a'))); // \"^a\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n         \n         set = CharSet.getInstance(\"^^-c\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true))); // \"^^-c\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // \"^^-c\"\n         \n         set = CharSet.getInstance(\"^c-^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // \"^c-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n         \n         set = CharSet.getInstance(\"^c-^d\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // \"^c-^\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('d'))); // \"d\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d'))); // \"d\"\n         \n         set = CharSet.getInstance(\"^^-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // \"-\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n     }\n     \n     public void testConstructor_String_oddCombinations() {\n         \n         set = CharSet.getInstance(\"a-^c\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^'))); // \"a-^\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // \"c\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // \"a-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n         assertEquals(false, set.contains('b'));\n         assertEquals(true, set.contains('^'));  \n         assertEquals(true, set.contains('_')); // between ^ and a\n         \n         set = CharSet.getInstance(\"^a-^c\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^', true))); // \"^a-^\"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // \"c\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // \"^a-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n         assertEquals(true, set.contains('b'));\n         assertEquals(false, set.contains('^'));  \n         assertEquals(false, set.contains('_')); // between ^ and a\n         \n         set = CharSet.getInstance(\"a- ^-- \"); //contains everything\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', ' '))); // \"a- \"\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', ' ', true))); // \"^-- \"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // \"a- \"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // \"^-- \"\n         assertEquals(true, set.contains('#'));\n         assertEquals(true, set.contains('^'));\n         assertEquals(true, set.contains('a'));\n         \n         set = CharSet.getInstance(\"^-b\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // \"^-b\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"^-b\"\n         assertEquals(true, set.contains('b'));\n         assertEquals(true, set.contains('_')); // between ^ and a\n         assertEquals(false, set.contains('A'));\n         \n         set = CharSet.getInstance(\"b-^\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // \"b-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"b-^\"\n         assertEquals(true, set.contains('b'));\n         assertEquals(true, set.contains('^'));\n         assertEquals(true, set.contains('a')); // between ^ and b\n         \n         array = CharSet.ASCII_ALPHA.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n         \n         array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n         \n         array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('A', 'Z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n         \n         array = CharSet.ASCII_NUMERIC.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('0', '9')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('0', '9')));\n     }\n     \n }", "timestamp": 1256342342, "metainfo": ""}