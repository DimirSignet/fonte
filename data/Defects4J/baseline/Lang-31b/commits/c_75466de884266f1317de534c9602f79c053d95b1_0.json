{"sha": "75466de884266f1317de534c9602f79c053d95b1", "log": "Applying Hendrik Maryns' generics changes for Mutable classes from LANG-336  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class MutableBoolean implements Mutable, Serializable, Comparable {\n+public class MutableBoolean implements Mutable, Serializable, Comparable<MutableBoolean> {\n \n     /**\n      * Required for serialization support.\n      * @throws ClassCastException\n      *             if the argument is not a MutableInt\n      */\n-    public int compareTo(Object obj) {\n-        MutableBoolean other = (MutableBoolean) obj;\n+    public int compareTo(MutableBoolean other) {\n         boolean anotherVal = other.value;\n         return value == anotherVal ? 0 : (value ? 1 : -1);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableByte extends Number implements Comparable, Mutable {\n+public class MutableByte extends Number implements Comparable<MutableByte>, Mutable {\n \n     /**\n      * Required for serialization support.\n      * @return negative if this is less, zero if equal, positive if greater\n      * @throws ClassCastException if the argument is not a MutableByte\n      */\n-    public int compareTo(Object obj) {\n-        MutableByte other = (MutableByte) obj;\n+    public int compareTo(MutableByte other) {\n         byte anotherVal = other.value;\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableDouble extends Number implements Comparable, Mutable {\n+public class MutableDouble extends Number implements Comparable<MutableDouble>, Mutable {\n \n     /**\n      * Required for serialization support.\n      * @return negative if this is less, zero if equal, positive if greater\n      * @throws ClassCastException if the argument is not a MutableDouble\n      */\n-    public int compareTo(Object obj) {\n-        MutableDouble other = (MutableDouble) obj;\n+    public int compareTo(MutableDouble other) {\n         double anotherVal = other.value;\n         return Double.compare(value, anotherVal);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableFloat extends Number implements Comparable, Mutable {\n+public class MutableFloat extends Number implements Comparable<MutableFloat>, Mutable {\n \n     /**\n      * Required for serialization support.\n      *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n-    public int compareTo(Object obj) {\n-        MutableFloat other = (MutableFloat) obj;\n+    public int compareTo(MutableFloat other) {\n         float anotherVal = other.value;\n         return Float.compare(value, anotherVal);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableInt extends Number implements Comparable, Mutable {\n+public class MutableInt extends Number implements Comparable<MutableInt>, Mutable {\n \n     /**\n      * Required for serialization support.\n      * @return negative if this is less, zero if equal, positive if greater\n      * @throws ClassCastException if the argument is not a MutableInt\n      */\n-    public int compareTo(Object obj) {\n-        MutableInt other = (MutableInt) obj;\n+    public int compareTo(MutableInt other) {\n         int anotherVal = other.value;\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableLong extends Number implements Comparable, Mutable {\n+public class MutableLong extends Number implements Comparable<MutableLong>, Mutable {\n \n     /**\n      * Required for serialization support.\n      * @return negative if this is less, zero if equal, positive if greater\n      * @throws ClassCastException if the argument is not a MutableLong\n      */\n-    public int compareTo(Object obj) {\n-        MutableLong other = (MutableLong) obj;\n+    public int compareTo(MutableLong other) {\n         long anotherVal = other.value;\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableShort extends Number implements Comparable, Mutable {\n+public class MutableShort extends Number implements Comparable<MutableShort>, Mutable {\n \n     /**\n      * Required for serialization support.\n      * @return negative if this is less, zero if equal, positive if greater\n      * @throws ClassCastException if the argument is not a MutableShort\n      */\n-    public int compareTo(Object obj) {\n-        MutableShort other = (MutableShort) obj;\n+    public int compareTo(MutableShort other) {\n         short anotherVal = other.value;\n         return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n             mutBool.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {\n-        }\n-        try {\n-            mutBool.compareTo(Boolean.FALSE);\n-            fail();\n-        } catch (ClassCastException ex) {\n-        }\n-        try {\n-            mutBool.compareTo(\"false\");\n-            fail();\n-        } catch (ClassCastException ex) {\n         }\n     }\n \n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n             mutNum.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.compareTo(Byte.valueOf((byte) 0));\n-            fail();\n-        } catch (ClassCastException ex) {}\n-        try {\n-            mutNum.compareTo(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testPrimitiveValues() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n             mutNum.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.compareTo(new Double(0d));\n-            fail();\n-        } catch (ClassCastException ex) {}\n-        try {\n-            mutNum.compareTo(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testPrimitiveValues() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n             mutNum.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.compareTo(new Float(0f));\n-            fail();\n-        } catch (ClassCastException ex) {}\n-        try {\n-            mutNum.compareTo(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testPrimitiveValues() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n             mutNum.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.compareTo(new Integer(0));\n-            fail();\n-        } catch (ClassCastException ex) {}\n-        try {\n-            mutNum.compareTo(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testPrimitiveValues() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n             mutNum.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.compareTo(new Long(0));\n-            fail();\n-        } catch (ClassCastException ex) {}\n-        try {\n-            mutNum.compareTo(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testPrimitiveValues() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n             mutNum.compareTo(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.compareTo(new Short((short) 0));\n-            fail();\n-        } catch (ClassCastException ex) {}\n-        try {\n-            mutNum.compareTo(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testPrimitiveValues() {", "timestamp": 1241077202, "metainfo": ""}