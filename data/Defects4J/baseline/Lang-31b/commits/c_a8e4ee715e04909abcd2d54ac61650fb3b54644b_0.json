{"sha": "a8e4ee715e04909abcd2d54ac61650fb3b54644b", "log": "A reworked mutable int, ready for comments   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A mutable <code>int</code>.\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableInt.java,v 1.1 2004/07/05 22:15:33 scolebourne Exp $\n+ */\n+public class MutableInt extends Number\n+        implements Comparable, Mutable, Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 512176391864L;\n+\n+    /** The mutable value. */\n+    private int value;\n+\n+    /**\n+     * Constructs a new MutableInt with the default value of zero.\n+     */\n+    public MutableInt() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableInt with the specified value.\n+     * \n+     * @param value a value.\n+     */\n+    public MutableInt(int value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object getValue() {\n+        return new Integer(this.value);\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+\n+    public void setValue(Object value) {\n+        setValue(((Number) value).intValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int intValue() {\n+        return value;\n+    }\n+\n+    public long longValue() {\n+        return (long) value;\n+    }\n+\n+    public float floatValue() {\n+        return (float) value;\n+    }\n+\n+    public double doubleValue() {\n+        return (double) value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableInt with the same value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableInt) {\n+            return (value == ((MutableInt) obj).value);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return value;\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     *\n+     * @param obj  the mutable to compare to\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Object obj) {\n+        MutableInt other = (MutableInt) obj;\n+        int anotherVal = other.value;\n+        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf(value);\n+    }\n+\n+}", "timestamp": 1089065733, "metainfo": ""}