{"sha": "d3b1163073c7aeb6011a5b65bfadad15bfc0f108", "log": "Applying the fix and the test patches from LANG-346 - fixes bugs in DateUtils.round() for minutes and seconds. Patch from Dave Meikle  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n-            if (field == Calendar.SECOND) {\n-                done = true;\n-            }\n+        }\n+        if (field == Calendar.SECOND) {\n+            done = true;\n         }\n \n         // truncate seconds\n         int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n-            if (field == Calendar.MINUTE) {\n-                done = true;\n-            }\n+        }\n+        if (field == Calendar.MINUTE) {\n+            done = true;\n         }\n \n         // truncate minutes\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n     }\n \n     /**\n+     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n+     * by DateUtils.round().\n+     */\n+    public void testRoundLang346() throws Exception\n+    {\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n+        Calendar testCalendar = Calendar.getInstance();\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        Date date = testCalendar.getTime();\n+        assertEquals(\"Minute Round Up Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n+                     DateUtils.round(date, Calendar.MINUTE));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 20);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Minute No Round Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n+                     DateUtils.round(date, Calendar.MINUTE));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        testCalendar.set(Calendar.MILLISECOND, 600);\n+        date = testCalendar.getTime();\n+\n+        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        testCalendar.set(Calendar.MILLISECOND, 200);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 20);\n+        testCalendar.set(Calendar.MILLISECOND, 600);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 20);\n+        testCalendar.set(Calendar.MILLISECOND, 200);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Hour Round Down Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n+                     DateUtils.round(date, Calendar.HOUR));\n+\n+        testCalendar.set(2007, 6, 2, 8, 31, 50);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Hour Round Up Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n+                     DateUtils.round(date, Calendar.HOUR));\n+    }\n+\n+    /**\n      * Tests various values with the trunc method\n      */\n     public void testTruncate() throws Exception {", "timestamp": 1186619099, "metainfo": ""}