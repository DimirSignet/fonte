{"sha": "1831657f6b3c3cea0fcaad11c8e8da57456c4d21", "log": "Killing the lang sandbox component  ", "commit": "\n--- /dev/null\n+++ b/src/pending/DateFormatterTest.java\n+package org.apache.commons.lang;\n+/*\n+ * Copyright 2002,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import junit.framework.AssertionFailedError;\n+import junit.framework.TestCase;\n+\n+/*\n+ * This class was created to hold test cases for the parseCVS method extracted from DateUtilsTest in commons-lang.\n+ * The code was originally submitted by Serge Knystautas sergek@lokitech.com. It was never\n+ * fully implemented, and has been moved to the sandbox for further development. Recent discussion\n+ * from the commons-dev mailing list:\n+ * http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=108904098032038&w=2\n+ * Moving the code to the sandbox satisfies bug is a temporary solution to\n+ * http://issues.apache.org/bugzilla/show_bug.cgi?id=22172 but this issue needs to be considered\n+ * when the class/method is further developed.\n+ */\n+public class DateFormatterTest extends TestCase {\n+\n+    /*\n+     * Tests the parse method, which is supposed to handle various strings\n+     * as flexibly as CVS supports.\n+     */\n+    public void testParseCVS() throws Exception {\n+        try {\n+            DateFormatter.parseCVS(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateFormatter.parseCVS(\"gobbledegook\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateFormatter.parseCVS(\"ago\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateFormatter.parseCVS(\"1 junk ago\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateFormatter.parseCVS(\"1month ago\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateFormatter.parseCVS(\"last month\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+\n+        //This is difficult to test since the \"now\" used in the\n+        //  parse function cannot be controlled.  We could possibly control\n+        //  it by trying before and after and making sure the value we expect\n+        //  is between the two values calculated.\n+        //For now we're just using the custom assertEquals that takes a delta\n+\n+        Calendar now = null;\n+\n+        // M/dd/yy H:mm:ss z\n+        now = Calendar.getInstance();\n+        now.set(Calendar.MILLISECOND, 0);\n+        assertEquals(\"parseCVS format M/dd/yy H:mm:ss z\",\n+                  now, DateFormatter.parseCVS(new SimpleDateFormat(\"M/dd/yy H:mm:ss z\").format(now.getTime())), 50);\n+        // MMM d, yyyy h:mm a\n+        now = Calendar.getInstance();\n+        now.set(Calendar.MILLISECOND, 0);\n+        now.set(Calendar.SECOND, 0);\n+        assertEquals(\"parseCVS format MMM d, yyyy h:mm a\",\n+                  now, DateFormatter.parseCVS(new SimpleDateFormat(\"MMM d, yyyy h:mm a\").format(now.getTime())), 50);\n+        // h:mm z\n+        //\n+        // This format is difficult to test using the current time because the\n+        // parseCVS method applies the default date of January 1, 1970 to the\n+        // parsed time. The most straightforward way to test the parse is to\n+        // pass in a known value, and test the output against this know value.\n+        // \n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"16:30 GMT\"));\n+        assertEquals(\"parseCVS format h:mm z 16:30 GMT\", \n+                  now, DateFormatter.parseCVS(\"16:30 GMT\"), 50);\n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"16:30 EST\"));\n+        assertEquals(\"parseCVS format h:mm z 16:30 EST\", \n+                  now, DateFormatter.parseCVS(\"16:30 EST\"), 50);\n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"16:30 GMT-05:00\"));\n+        assertEquals(\"parseCVS format h:mm z 16:30 GMT-05:00\", \n+                  now, DateFormatter.parseCVS(\"16:30 GMT-05:00\"), 50);\n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"16:30 GMT+01:00\"));\n+        assertEquals(\"parseCVS format h:mm z 16:30 GMT+01:00\", \n+                  now, DateFormatter.parseCVS(\"16:30 GMT+01:00\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"06:30 GMT\"));\n+        assertEquals(\"parseCVS format h:mm z 06:30 GMT\", \n+                  now, DateFormatter.parseCVS(\"06:30 GMT\"), 50);\n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"06:30 EST\"));\n+        assertEquals(\"parseCVS format h:mm z 06:30 EST\", \n+                  now, DateFormatter.parseCVS(\"06:30 EST\"), 50);\n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"06:30 GMT-05:00\"));\n+        assertEquals(\"parseCVS format h:mm z 06:30 GMT-05:00\", \n+                  now, DateFormatter.parseCVS(\"06:30 GMT-05:00\"), 50);\n+        now = Calendar.getInstance();\n+        now.setTime(new SimpleDateFormat(\"h:mm z\").parse(\"06:30 GMT+01:00\"));\n+        assertEquals(\"parseCVS format h:mm z 06:30 GMT+01:00\", \n+                  now, DateFormatter.parseCVS(\"06:30 GMT+01:00\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.add(Calendar.WEEK_OF_MONTH, -1);\n+        assertEquals(\"parseCVS a week ago\",\n+                now, DateFormatter.parseCVS(\"a week ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.WEEK_OF_MONTH, -1);\n+        assertEquals(\"parseCVS an week ago\",\n+                now, DateFormatter.parseCVS(\"an week ago\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -14);\n+        assertEquals(\"parseCVS 1 fortnight ago\",\n+                now, DateFormatter.parseCVS(\"1 fortnight ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -14);\n+        assertEquals(\"parseCVS 1 fortnights ago\",\n+                now, DateFormatter.parseCVS(\"1 fortnights ago\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.add(Calendar.MINUTE, -1);\n+        assertEquals(\"parseCVS 1 minute ago\",\n+                now, DateFormatter.parseCVS(\"1 minute ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MINUTE, -8);\n+        assertEquals(\"parseCVS 8 minutes ago\",\n+                now, DateFormatter.parseCVS(\"8 minutes ago\"), 50);\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MILLISECOND, -1);\n+        assertEquals(\"parseCVS 1 millisecond ago\",\n+                now, DateFormatter.parseCVS(\"1 millisecond ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MILLISECOND, -100);\n+        assertEquals(\"parseCVS 1 milliseconds ago\",\n+                now, DateFormatter.parseCVS(\"100 milliseconds ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.SECOND, -30);\n+        assertEquals(\"parseCVS 30 second ago\",\n+                now, DateFormatter.parseCVS(\"30 second ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.SECOND, -30);\n+        assertEquals(\"parseCVS 30 seconds ago\",\n+                now, DateFormatter.parseCVS(\"30 seconds ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.HOUR, -2);\n+        assertEquals(\"parseCVS 2 hour ago\",\n+                now, DateFormatter.parseCVS(\"2 hour ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.HOUR, -2);\n+        assertEquals(\"parseCVS 2 hours ago\",\n+                now, DateFormatter.parseCVS(\"2 hours ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -2);\n+        assertEquals(\"parseCVS 2 day ago\",\n+                now, DateFormatter.parseCVS(\"2 day ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -2);\n+        assertEquals(\"parseCVS 2 days ago\",\n+                now, DateFormatter.parseCVS(\"2 days ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MONTH, -2);\n+        assertEquals(\"parseCVS 2 month ago\",\n+                now, DateFormatter.parseCVS(\"2 month ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MONTH, -2);\n+        assertEquals(\"parseCVS 2 months ago\",\n+                now, DateFormatter.parseCVS(\"2 months ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.YEAR, -2);\n+        assertEquals(\"parseCVS 2 year ago\",\n+                now, DateFormatter.parseCVS(\"2 year ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.YEAR, -2);\n+        assertEquals(\"parseCVS 2 years ago\",\n+                now, DateFormatter.parseCVS(\"2 years ago\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.add(Calendar.DATE, -1);\n+        assertEquals(\"parseCVS yesterday\",\n+                now, DateFormatter.parseCVS(\"yesterday\"), 50);\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DATE, 1);\n+        assertEquals(\"parseCVS tomorrow\",\n+                now, DateFormatter.parseCVS(\"tomorrow\"), 50);\n+\n+        now = Calendar.getInstance();\n+        //Sunday would be 1, Saturday would be 7, so we walk back up to 6 days.\n+        if (now.get(Calendar.DAY_OF_WEEK) == 1) {\n+            //If Sunday already, we go back a full week\n+            now.add(Calendar.DATE, -7);\n+        } else {\n+            now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));\n+        }\n+        assertEquals(\"parseCVS last Sunday\",\n+                now, DateFormatter.parseCVS(\"last Sunday\"), 50);\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DATE, -7);\n+        assertEquals(\"parseCVS last week\",\n+                now, DateFormatter.parseCVS(\"last week\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        //January would be 0, December would be 11, so we walk back up to 11 months\n+        if (now.get(Calendar.MONTH) == 0) {\n+            //If January already, we go back a full year\n+            now.add(Calendar.MONTH, -12);\n+        } else {\n+            now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));\n+        }\n+        assertEquals(\"parseCVS last January\",\n+                now, DateFormatter.parseCVS(\"last January\"), 50);\n+    }\n+\n+    /**\n+     * Used to check that Calendar objects are close enough\n+     * delta is in milliseconds\n+     */\n+    public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n+        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n+            throw new AssertionFailedError(\n+                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n+        }\n+    }\n+}\n+", "timestamp": 1125271936, "metainfo": ""}