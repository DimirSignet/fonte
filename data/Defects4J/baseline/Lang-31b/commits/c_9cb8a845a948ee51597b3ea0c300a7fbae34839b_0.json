{"sha": "9cb8a845a948ee51597b3ea0c300a7fbae34839b", "log": "Fix bug in NumberUtils where '12a' was treated as a number. bug 20538, reported/fix by Eric Pugh/Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n+ * @author Eric Pugh\n+ * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: NumberUtils.java,v 1.9 2003/06/08 14:09:36 scolebourne Exp $\n+ * @version $Id: NumberUtils.java,v 1.10 2003/06/08 14:14:01 scolebourne Exp $\n  */\n public final class NumberUtils {\n     \n                 // not allowing L with an exponoent\n                 return foundDigit && !hasExp;\n             }\n+            // last character is illegal\n+            return false;\n         }\n         // allowSigns is true iff the val ends in 'E'\n         // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n--- a/src/test/org/apache/commons/lang/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/NumberUtilsTest.java\n  *\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: NumberUtilsTest.java,v 1.6 2003/05/21 23:49:15 scolebourne Exp $\n+ * @author Eric Pugh\n+ * @author Phil Steitz\n+ * @author Stephen Colebourne\n+ * @version $Id: NumberUtilsTest.java,v 1.7 2003/06/08 14:14:01 scolebourne Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n         val = \"1234E5l\";\n         assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n         assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n+        val = \"11a\";\n+        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n+        val = \"1a\";\n+        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n+        val = \"a\";\n+        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11g\";\n+        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11z\";\n+        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11def\";\n+        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11d11\";\n+        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n \n     }\n \n     private boolean checkCreateNumber(String val) {\n         try {\n             Object obj = NumberUtils.createNumber(val);\n-            if(obj == null) {\n+            if (obj == null) {\n                 return false;\n             }\n             return true;", "timestamp": 1055081641, "metainfo": ""}