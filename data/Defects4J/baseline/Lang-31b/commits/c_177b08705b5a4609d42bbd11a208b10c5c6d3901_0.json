{"sha": "177b08705b5a4609d42bbd11a208b10c5c6d3901", "log": "Use INDEX_NOT_FOUND instead of magic number.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n         } else if (stripChars.length() == 0) {\n             return str;\n         } else {\n-            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n+            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND)) {\n                 start++;\n             }\n         }\n         } else if (stripChars.length() == 0) {\n             return str;\n         } else {\n-            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {\n+            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND)) {\n                 end--;\n             }\n         }\n      * <p>Finds the first index within a String, handling <code>null</code>.\n      * This method uses {@link String#indexOf(int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n      *\n      * <pre>\n      * StringUtils.indexOf(null, *)         = -1\n      */\n     public static int indexOf(String str, char searchChar) {\n         if (isEmpty(str)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.indexOf(searchChar);\n     }\n      * handling <code>null</code>.\n      * This method uses {@link String#indexOf(int, int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n      * A negative start position is treated as zero.\n      * A start position greater than the string length returns <code>-1</code>.</p>\n      *\n      */\n     public static int indexOf(String str, char searchChar, int startPos) {\n         if (isEmpty(str)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.indexOf(searchChar, startPos);\n     }\n      */\n     public static int indexOf(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.indexOf(searchStr);\n     }\n      */\n     public static int indexOf(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.indexOf(searchStr, startPos);\n     }\n      */\n     public static int indexOfIgnoreCase(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startPos < 0) {\n             startPos = 0;\n         }\n         int endLimit = (str.length() - searchStr.length()) + 1;\n         if (startPos > endLimit) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (searchStr.length() == 0) {\n             return startPos;\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     // LastIndexOf\n      */\n     public static int lastIndexOf(String str, char searchChar) {\n         if (isEmpty(str)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.lastIndexOf(searchChar);\n     }\n      */\n     public static int lastIndexOf(String str, char searchChar, int startPos) {\n         if (isEmpty(str)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.lastIndexOf(searchChar, startPos);\n     }\n      */\n     public static int lastIndexOf(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.lastIndexOf(searchStr);\n     }\n      */\n     public static int lastIndexOf(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return str.lastIndexOf(searchStr, startPos);\n     }\n      */\n     public static int lastIndexOfIgnoreCase(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return lastIndexOfIgnoreCase(str, searchStr, str.length());\n     }\n      */\n     public static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startPos > (str.length() - searchStr.length())) {\n             startPos = str.length() - searchStr.length();\n         }\n         if (startPos < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (searchStr.length() == 0) {\n             return startPos;\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     // Contains\n      */\n     public static int indexOfAny(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         for (int i = 0; i < cs.length(); i++) {\n             char ch = cs.charAt(i);\n                 }\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      */\n     public static int indexOfAny(CharSequence cs, String searchChars) {\n         if (isEmpty(cs) || isEmpty(searchChars)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         return indexOfAny(cs, searchChars.toCharArray());\n     }\n      */\n     public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         outer : for (int i = 0; i < cs.length(); i++) {\n             char ch = cs.charAt(i);\n             }\n             return i;\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      */\n     public static int indexOfAnyBut(String str, String searchChars) {\n         if (isEmpty(str) || isEmpty(searchChars)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         for (int i = 0; i < str.length(); i++) {\n             if (searchChars.indexOf(str.charAt(i)) < 0) {\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     // ContainsOnly\n         if (valid.length == 0) {\n             return false;\n         }\n-        return indexOfAnyBut(cs, valid) == -1;\n+        return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;\n     }\n \n     /**\n      */\n     public static int indexOfAny(String str, String[] searchStrs) {\n         if (str == null || searchStrs == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         int sz = searchStrs.length;\n \n                 continue;\n             }\n             tmp = str.indexOf(search);\n-            if (tmp == -1) {\n+            if (tmp == INDEX_NOT_FOUND) {\n                 continue;\n             }\n \n             }\n         }\n \n-        return (ret == Integer.MAX_VALUE) ? -1 : ret;\n+        return (ret == Integer.MAX_VALUE) ? INDEX_NOT_FOUND : ret;\n     }\n \n     /**\n      * @return the last index of any of the Strings, -1 if no match\n      */\n     public static int lastIndexOfAny(String str, String[] searchStrs) {\n-        if ((str == null) || (searchStrs == null)) {\n-            return -1;\n+        if (str == null || searchStrs == null) {\n+            return INDEX_NOT_FOUND;\n         }\n         int sz = searchStrs.length;\n-        int ret = -1;\n+        int ret = INDEX_NOT_FOUND;\n         int tmp = 0;\n         for (int i = 0; i < sz; i++) {\n             String search = searchStrs[i];\n             return EMPTY;\n         }\n         int pos = str.indexOf(separator);\n-        if (pos == -1) {\n+        if (pos == INDEX_NOT_FOUND) {\n             return str;\n         }\n         return str.substring(0, pos);\n             return EMPTY;\n         }\n         int pos = str.indexOf(separator);\n-        if (pos == -1) {\n+        if (pos == INDEX_NOT_FOUND) {\n             return EMPTY;\n         }\n         return str.substring(pos + separator.length());\n             return str;\n         }\n         int pos = str.lastIndexOf(separator);\n-        if (pos == -1) {\n+        if (pos == INDEX_NOT_FOUND) {\n             return str;\n         }\n         return str.substring(0, pos);\n             return EMPTY;\n         }\n         int pos = str.lastIndexOf(separator);\n-        if (pos == -1 || pos == (str.length() - separator.length())) {\n+        if (pos == INDEX_NOT_FOUND || pos == (str.length() - separator.length())) {\n             return EMPTY;\n         }\n         return str.substring(pos + separator.length());\n             return null;\n         }\n         int start = str.indexOf(open);\n-        if (start != -1) {\n+        if (start != INDEX_NOT_FOUND) {\n             int end = str.indexOf(close, start + open.length());\n-            if (end != -1) {\n+            if (end != INDEX_NOT_FOUND) {\n                 return str.substring(start + open.length(), end);\n             }\n         }\n      * @since 2.1\n      */\n     public static String remove(String str, char remove) {\n-        if (isEmpty(str) || str.indexOf(remove) == -1) {\n+        if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {\n             return str;\n         }\n         char[] chars = str.toCharArray();\n         }\n         int start = 0;\n         int end = text.indexOf(searchString, start);\n-        if (end == -1) {\n+        if (end == INDEX_NOT_FOUND) {\n             return text;\n         }\n         int replLength = searchString.length();\n         increase = (increase < 0 ? 0 : increase);\n         increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));\n         StringBuilder buf = new StringBuilder(text.length() + increase);\n-        while (end != -1) {\n+        while (end != INDEX_NOT_FOUND) {\n             buf.append(text.substring(start, end)).append(replacement);\n             start = end + replLength;\n             if (--max == 0) {\n         }\n         int count = 0;\n         int idx = 0;\n-        while ((idx = str.indexOf(sub, idx)) != -1) {\n+        while ((idx = str.indexOf(sub, idx)) != INDEX_NOT_FOUND) {\n             count++;\n             idx += sub.length();\n         }\n             return str1;\n         }\n         int at = indexOfDifference(str1, str2);\n-        if (at == -1) {\n+        if (at == INDEX_NOT_FOUND) {\n             return EMPTY;\n         }\n         return str2.substring(at);\n      */\n     public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {\n         if (cs1 == cs2) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (cs1 == null || cs2 == null) {\n             return 0;\n         if (i < cs2.length() || i < cs1.length()) {\n             return i;\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      */\n     public static int indexOfDifference(CharSequence[] css) {\n         if (css == null || css.length <= 1) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         boolean anyStringNull = false;\n         boolean allStringsNull = true;\n \n         // handle lists containing all nulls or all empty strings\n         if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n \n         // handle lists containing some nulls or some empty strings\n             return EMPTY;\n         }\n         int smallestIndexOfDiff = indexOfDifference(strs);\n-        if (smallestIndexOfDiff == -1) {\n+        if (smallestIndexOfDiff == INDEX_NOT_FOUND) {\n             // all strings were identical\n             if (strs[0] == null) {\n                 return EMPTY;", "timestamp": 1268086951, "metainfo": ""}