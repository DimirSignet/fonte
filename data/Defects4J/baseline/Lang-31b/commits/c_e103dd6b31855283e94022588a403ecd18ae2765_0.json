{"sha": "e103dd6b31855283e94022588a403ecd18ae2765", "log": "Bug 17882 submitted [by hand as the patch was out of date].  join and split now take chars as separators as well as Strings.  Submitted by:\tHenning P. Schmiedehausen   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.34 2003/03/23 04:58:47 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.35 2003/03/23 05:26:23 bayard Exp $\n  */\n public class StringUtils {\n \n      * @return the concatenated string.\n      */\n     public static String concatenate(Object[] array) {\n-        return join(array, \"\");\n+        return join(array, null);\n     }\n     \n     /**\n      * @return the joined String\n      */\n     public static String join(Object[] array, String separator) {\n-        if (separator == null) {\n-            separator = \"\";\n-        }\n         int arraySize = array.length;\n-        int bufSize = (arraySize == 0 ? 0 : (array[0].toString().length() +\n-                                 separator.length()) * arraySize);\n+\n+        // ArraySize ==  0: Len = 0\n+        // ArraySize > 0:   Len = NofStrings *(len(firstString) + len(separator))\n+        //           (Assuming that all strings are roughly equally long)\n+        int bufSize \n+            = ((arraySize == 0) ? 0 \n+                : arraySize * (array[0].toString().length() \n+                    + ((separator != null) ? separator.length(): 0)));\n+\n+        StringBuffer buf = new StringBuffer(bufSize);\n+\n+        for (int i = 0; i < arraySize; i++) {\n+            if ((separator != null) && (i > 0)) {\n+                buf.append(separator);\n+         }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided array into a single String\n+     * containing the provided list of elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list. A\n+     *\n+     * @param array the array of values to join together\n+     * @param separator the separator character to use\n+     * @return the joined String\n+     */\n+    public static String join(Object[] array, char separator) {\n+        int arraySize = array.length;\n+        int bufSize = (arraySize == 0 ? 0 : (array[0].toString().length() + 1) * arraySize);\n         StringBuffer buf = new StringBuffer(bufSize);\n \n         for (int i = 0; i < arraySize; i++) {\n      * @return the joined String\n      */\n     public static String join(Iterator iterator, String separator) {\n-        if (separator == null) {\n-            separator = \"\";\n-        }\n+        StringBuffer buf = new StringBuffer(256);  // Java default is 16, probably too small\n+        while (iterator.hasNext()) {\n+            buf.append(iterator.next());\n+            if ((separator != null) && iterator.hasNext()) {\n+                buf.append(separator);\n+            }\n+         }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided <code>Iterator</code> into\n+     * a single String containing the provided elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list. A\n+     *\n+     * @param iterator the <code>Iterator</code> of values to join together\n+     * @param separator  the separator character to use\n+     * @return the joined String\n+     */\n+    public static String join(Iterator iterator, char separator) {\n         StringBuffer buf = new StringBuffer(256);  // Java default is 16, probably too small\n         while (iterator.hasNext()) {\n             buf.append(iterator.next());\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n- * @version $Id: StringUtilsTest.java,v 1.14 2003/03/17 05:28:37 alex Exp $\n+ * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @version $Id: StringUtilsTest.java,v 1.15 2003/03/23 05:26:23 bayard Exp $\n  */\n public class StringUtilsTest extends TestCase {\n \n     private static final String[] ARRAY_LIST = { \"foo\", \"bar\", \"baz\" };\n+    private static final String[] EMPTY_ARRAY_LIST = {};\n \n     private static final String SEPARATOR = \",\";\n+    private static final char   SEPARATOR_CHAR = ';';\n \n     private static final String TEXT_LIST = \"foo,bar,baz\";\n+    private static final String TEXT_LIST_CHAR = \"foo;bar;baz\";\n+    private static final String TEXT_LIST_NOSEP = \"foobarbaz\";\n \n     private static final String FOO = \"foo\";\n     private static final String BAR = \"bar\";\n \n     public void testJoin() {\n         assertEquals(\"concatenate(Object[]) failed\", \n-                     \"foobarbaz\", StringUtils.concatenate(ARRAY_LIST));\n+                     TEXT_LIST_NOSEP, StringUtils.concatenate(ARRAY_LIST));\n         assertEquals(\"join(Object[], String) failed\", TEXT_LIST,\n                      StringUtils.join(ARRAY_LIST, SEPARATOR));\n         assertEquals(\"join(Iterator, String) failed\", TEXT_LIST,\n                      StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),\n                                       SEPARATOR));\n+\n+        assertEquals(\"join(Object[], char) failed\", TEXT_LIST_CHAR,\n+                     StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"join(Iterator, char) failed\", TEXT_LIST_CHAR,\n+                     StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),\n+                                      SEPARATOR_CHAR));\n+\n+        assertEquals(\"join(Object[], null) failed\", TEXT_LIST_NOSEP,\n+                     StringUtils.join(ARRAY_LIST, null));\n+        assertEquals(\"join(Iterator, null) failed\", TEXT_LIST_NOSEP,\n+                     StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),\n+                                      null));\n+\n+        assertEquals(\"concatenate(Object[]) failed\", \n+                     \"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));\n+        assertEquals(\"join(Object[], String) failed\", \"\",\n+                     StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n+        assertEquals(\"join(Iterator, String) failed\", \"\",\n+                     StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),\n+                                      SEPARATOR));\n+\n+        assertEquals(\"join(Object[], char) failed\", \"\",\n+                     StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"join(Iterator, char) failed\", \"\",\n+                     StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),\n+                                      SEPARATOR_CHAR));\n+\n+        assertEquals(\"join(Object[], null) failed\", \"\",\n+                     StringUtils.join(EMPTY_ARRAY_LIST, null));\n+        assertEquals(\"join(Iterator, null) failed\", \"\",\n+                     StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),\n+                                      null));\n     }\n \n     public void testSplit() {", "timestamp": 1048397183, "metainfo": ""}