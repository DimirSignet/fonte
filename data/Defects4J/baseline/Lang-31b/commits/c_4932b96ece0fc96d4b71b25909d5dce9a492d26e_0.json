{"sha": "4932b96ece0fc96d4b71b25909d5dce9a492d26e", "log": "Started cloning the input character array. Record in LANG-489 for migration guide.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n import java.util.List;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n+\n+import org.apache.commons.lang.ArrayUtils;\n \n /**\n  * Tokenizes a string based based on delimiters (separators)\n     /**\n      * Constructs a tokenizer splitting on space, tab, newline and formfeed\n      * as per StringTokenizer.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the string which is to be parsed, not cloned\n      */\n     public StrTokenizer(char[] input) {\n         super();\n-        this.chars = input;\n+        this.chars = ArrayUtils.clone(input);\n     }\n \n     /**\n      * Constructs a tokenizer splitting on the specified character.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the string which is to be parsed, not cloned\n      * @param delim the field delimiter character\n \n     /**\n      * Constructs a tokenizer splitting on the specified string.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the string which is to be parsed, not cloned\n      * @param delim the field delimiter string\n \n     /**\n      * Constructs a tokenizer splitting using the specified delimiter matcher.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the string which is to be parsed, not cloned\n      * @param delim  the field delimiter matcher\n     /**\n      * Constructs a tokenizer splitting on the specified delimiter character\n      * and handling quotes using the specified quote character.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the string which is to be parsed, not cloned\n      * @param delim  the field delimiter character\n     /**\n      * Constructs a tokenizer splitting using the specified delimiter matcher\n      * and handling quotes using the specified quote matcher.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the string which is to be parsed, not cloned\n      * @param delim  the field delimiter character\n      * Reset this tokenizer, giving it a new input string to parse.\n      * In this manner you can re-use a tokenizer with the same settings\n      * on multiple input lines.\n-     * <p>\n-     * The input character array is not cloned, and must not be altered after\n-     * passing in to this method.\n      *\n      * @param input  the new character array to tokenize, not cloned, null sets no text to parse\n      * @return this, to enable chaining\n      */\n     public StrTokenizer reset(char[] input) {\n         reset();\n-        this.chars = input;\n+        this.chars = ArrayUtils.clone(input);\n         return this;\n     }\n \n--- a/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n         StrTokenizer tokenizer = new StrTokenizer(input);\n         // Start sanity check\n         assertEquals(\"a\", tokenizer.nextToken());\n-        tokenizer.reset();\n+        tokenizer.reset(input);\n         assertEquals(\"a\", tokenizer.nextToken());\n         // End sanity check\n         StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n         input[0] = 'b';\n-        tokenizer.reset();\n+        tokenizer.reset(input);\n         assertEquals(\"b\", tokenizer.nextToken());\n         assertEquals(\"a\", clonedTokenizer.nextToken());\n     }\n     public void testReset_charArray() {\n         StrTokenizer tok = new StrTokenizer(\"x x x\");\n         \n-        char[] array = new char[] {'a', ' ', 'c'};\n+        char[] array = new char[] {'a', 'b', 'c'};\n         tok.reset(array);\n-        array[1] = 'b'; // test linked array\n         assertEquals(\"abc\", tok.next());\n         assertEquals(false, tok.hasNext());\n         ", "timestamp": 1242461926, "metainfo": ""}