{"sha": "2fce75d4d06ff28db9a59f68b3bb8186968f817a", "log": "Refactor \"\" string literals to use the new: public static final String EMPTY = \"\" I made EMPTY public since I plan on using it when replacing most of our internal StringUtil class with this StringUtil.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.91 2003/08/01 23:58:30 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.92 2003/08/13 21:32:10 ggregory Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     // (not sure who tested this)\n     \n     /**\n+     * The empty String <code>\"\"</code>.\n+     */\n+    public static final String EMPTY = \"\";\n+    \n+    /**\n      * <p>The maximum size to which the padding constant(s) can expand.</p>\n      */\n     private static final int PAD_LIMIT = 8192;\n      *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String clean(String str) {\n-        return (str == null ? \"\" : str.trim());\n+        return (str == null ? EMPTY : str.trim());\n     }\n \n     /**\n      * @return the trimmed String, or an empty String if <code>null</code> input\n      */\n     public static String trimToEmpty(String str) {\n-        return (str == null ? \"\" : str.trim());\n+        return (str == null ? EMPTY : str.trim());\n     }\n     \n     // Stripping\n      * @return the trimmed String, or an empty String if <code>null</code> input\n      */\n     public static String stripToEmpty(String str) {\n-        return (str == null ? \"\" : strip(str, null));\n+        return (str == null ? EMPTY : strip(str, null));\n     }\n     \n     /**\n             start = 0;\n         }\n         if (start > str.length()) {\n-            return \"\";\n+            return EMPTY;\n         }\n \n         return str.substring(start);\n \n         // if start is greater than end, return \"\"\n         if (start > end) {\n-            return \"\";\n+            return EMPTY;\n         }\n \n         if (start < 0) {\n             return null;\n         }\n         if (len < 0) {\n-            return \"\";\n+            return EMPTY;\n         }\n         if (str.length() <= len) {\n             return str;\n             return null;\n         }\n         if (len < 0) {\n-            return \"\";\n+            return EMPTY;\n         }\n         if (str.length() <= len) {\n             return str;\n             return null;\n         }\n         if (len < 0 || pos > str.length()) {\n-            return \"\";\n+            return EMPTY;\n         }\n         if (pos < 0) {\n             pos = 0;\n             return str;\n         }\n         if (separator.length() == 0) {\n-            return \"\";\n+            return EMPTY;\n         }\n         int pos = str.indexOf(separator);\n         if (pos == -1) {\n             return str;\n         }\n         if (separator == null) {\n-            return \"\";\n+            return EMPTY;\n         }\n         int pos = str.indexOf(separator);\n         if (pos == -1) {\n-            return \"\";\n+            return EMPTY;\n         }\n         return str.substring(pos + separator.length());\n     }\n             return str;\n         }\n         if (separator == null || separator.length() == 0) {\n-            return \"\";\n+            return EMPTY;\n         }\n         int pos = str.lastIndexOf(separator);\n         if (pos == -1 || pos == (str.length() - separator.length())) {\n-            return \"\";\n+            return EMPTY;\n         }\n         return str.substring(pos + separator.length());\n     }\n             return null;\n         }\n         if (separator == null) {\n-            separator = \"\";\n+            separator = EMPTY;\n         }\n         int arraySize = array.length;\n \n             return null;\n         }\n         if (overlay == null) {\n-            overlay = \"\";\n+            overlay = EMPTY;\n         }\n         int len = str.length();\n         if (start < 0) {\n         if (str.length() == 1) {\n             char ch = str.charAt(0);\n             if (ch == '\\r' || ch == '\\n') {\n-                return \"\";\n+                return EMPTY;\n             } else {\n                 return str;\n             }\n         } else if (idx != -1) {\n             return str.substring(idx);\n         } else {\n-            return \"\";\n+            return EMPTY;\n         }\n     }\n \n         if (idx != -1) {\n             return str.substring(0, idx + sep.length());\n         } else {\n-            return \"\";\n+            return EMPTY;\n         }\n     }\n \n         }\n         int strLen = str.length();\n         if (strLen < 2) {\n-            return \"\";\n+            return EMPTY;\n         }\n         int lastIdx = strLen - 1;\n         String ret = str.substring(0, lastIdx);\n     public static String chopNewline(String str) {\n         int lastIdx = str.length() - 1;\n         if (lastIdx <= 0) {\n-            return \"\";\n+            return EMPTY;\n         }\n         char last = str.charAt(lastIdx);\n         if (last == '\\n') {\n             return null;\n         }\n         if (repeat <= 0) {\n-            return \"\";\n+            return EMPTY;\n         }\n         int inputLength = str.length();\n         if (repeat == 1 || inputLength == 0) {\n      *  was <code>null</code>\n      */\n     public static String defaultString(String str) {\n-        return (str == null ? \"\" : str);\n+        return (str == null ? EMPTY : str);\n     }\n \n     /**\n         }\n         int at = differenceAt(str1, str2);\n         if (at == -1) {\n-            return \"\";\n+            return EMPTY;\n         }\n         return str2.substring(at);\n     }\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n import java.util.Arrays;\n import java.util.Iterator;\n \n+import junit.framework.Assert;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.44 2003/08/01 23:20:06 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.45 2003/08/13 21:32:27 ggregory Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         }\n     }\n \n+    /**\n+     * A sanity check for {@link StringUtils.EMPTY}.\n+     */\n+    public void testEMPTY() {\n+        Assert.assertNotNull(StringUtils.EMPTY);\n+        Assert.assertEquals(\"\", StringUtils.EMPTY);\n+    }\n }\n ", "timestamp": 1060810347, "metainfo": ""}