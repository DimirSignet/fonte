{"sha": "6cc8b2725300189cc41177be4a371d33a3a9d504", "log": "generics  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n      *\n      * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n-    public static Object invokeConstructor(Class<?> cls, Object arg)\n+    public static <T> T invokeConstructor(Class<T> cls, Object arg)\n             throws NoSuchMethodException, IllegalAccessException,\n             InvocationTargetException, InstantiationException {\n         return invokeConstructor(cls, new Object[] { arg });\n      *\n      * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n-    public static Object invokeConstructor(Class<?> cls, Object[] args)\n+    public static <T> T invokeConstructor(Class<T> cls, Object[] args)\n             throws NoSuchMethodException, IllegalAccessException,\n             InvocationTargetException, InstantiationException {\n         if (null == args) {\n      * @throws InstantiationException thrown on the constructor's invocation\n      * @see Constructor#newInstance\n      */\n-    public static Object invokeConstructor(Class<?> cls, Object[] args,\n+    public static <T> T invokeConstructor(Class<T> cls, Object[] args,\n             Class<?>[] parameterTypes) throws NoSuchMethodException,\n             IllegalAccessException, InvocationTargetException,\n             InstantiationException {\n         if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n-        Constructor<?> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);\n+        Constructor<T> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);\n         if (null == ctor) {\n             throw new NoSuchMethodException(\n                     \"No such accessible constructor on object: \"\n      *\n      * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n-    public static Object invokeExactConstructor(Class<?> cls, Object arg)\n+    public static <T> T invokeExactConstructor(Class<T> cls, Object arg)\n             throws NoSuchMethodException, IllegalAccessException,\n             InvocationTargetException, InstantiationException {\n         return invokeExactConstructor(cls, new Object[] { arg });\n      *\n      * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n-    public static Object invokeExactConstructor(Class<?> cls, Object[] args)\n+    public static <T> T invokeExactConstructor(Class<T> cls, Object[] args)\n             throws NoSuchMethodException, IllegalAccessException,\n             InvocationTargetException, InstantiationException {\n         if (null == args) {\n      * @throws InstantiationException thrown on the constructor's invocation\n      * @see Constructor#newInstance\n      */\n-    public static Object invokeExactConstructor(Class<?> cls, Object[] args,\n+    public static <T> T invokeExactConstructor(Class<T> cls, Object[] args,\n             Class<?>[] parameterTypes) throws NoSuchMethodException,\n             IllegalAccessException, InvocationTargetException,\n             InstantiationException {\n         if (parameterTypes == null) {\n             parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;\n         }\n-        Constructor<?> ctor = getAccessibleConstructor(cls, parameterTypes);\n+        Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);\n         if (null == ctor) {\n             throw new NoSuchMethodException(\n                     \"No such accessible constructor on object: \"\n      * @see Class#getConstructor\n      * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n      */\n-    public static Constructor<?> getAccessibleConstructor(Class<?> cls,\n+    public static <T> Constructor<T> getAccessibleConstructor(Class<T> cls,\n             Class<?> parameterType) {\n         return getAccessibleConstructor(cls, new Class[] { parameterType });\n     }\n      * @see Class#getConstructor\n      * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n      */\n-    public static Constructor<?> getAccessibleConstructor(Class<?> cls,\n+    public static <T> Constructor<T> getAccessibleConstructor(Class<T> cls,\n             Class<?>[] parameterTypes) {\n         try {\n             return getAccessibleConstructor(cls.getConstructor(parameterTypes));\n      * @return <code>null</code> if accessible constructor can not be found.\n      * @see java.lang.SecurityManager\n      */\n-    public static Constructor<?> getAccessibleConstructor(Constructor<?> ctor) {\n+    public static <T> Constructor<T> getAccessibleConstructor(Constructor<T> ctor) {\n         return MemberUtils.isAccessible(ctor)\n                 && Modifier.isPublic(ctor.getDeclaringClass().getModifiers()) ? ctor\n                 : null;\n      * @param parameterTypes find method with compatible parameters\n      * @return a valid Constructor object. If there's no matching constructor, returns <code>null</code>.\n      */\n-    public static Constructor<?> getMatchingAccessibleConstructor(Class<?> cls,\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Constructor<T> getMatchingAccessibleConstructor(Class<T> cls,\n             Class<?>[] parameterTypes) {\n         // see if we can find the constructor directly\n         // most of the time this works and it's much faster\n         try {\n-            Constructor<?> ctor = cls.getConstructor(parameterTypes);\n+            Constructor<T> ctor = cls.getConstructor(parameterTypes);\n             MemberUtils.setAccessibleWorkaround(ctor);\n             return ctor;\n         } catch (NoSuchMethodException e) { /* SWALLOW */\n         }\n-        Constructor<?> result = null;\n+        Constructor<T> result = null;\n         // search through all constructors\n         Constructor<?>[] ctors = cls.getConstructors();\n         for (int i = 0; i < ctors.length; i++) {\n             if (ClassUtils.isAssignable(parameterTypes, ctors[i]\n                     .getParameterTypes(), true)) {\n                 // get accessible version of method\n-                Constructor<?> ctor = getAccessibleConstructor(ctors[i]);\n+                Constructor<T> ctor = getAccessibleConstructor((Constructor<T>) ctors[i]);\n                 if (ctor != null) {\n                     MemberUtils.setAccessibleWorkaround(ctor);\n                     if (result == null", "timestamp": 1265145805, "metainfo": ""}