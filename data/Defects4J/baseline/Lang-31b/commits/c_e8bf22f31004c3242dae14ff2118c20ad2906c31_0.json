{"sha": "e8bf22f31004c3242dae14ff2118c20ad2906c31", "log": "[LANG-501] Added CallableBackgroundInitializer class with unit tests.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * <p>\n+ * A specialized {@link BackgroundInitializer} implementation that wraps a\n+ * {@code Callable} object.\n+ * </p>\n+ * <p>\n+ * An instance of this class is initialized with a {@code Callable} object when\n+ * it is constructed. The implementation of the {@link #initialize()} method\n+ * defined in the super class delegates to this {@code Callable} so that the\n+ * {@code Callable} is executed in the background thread.\n+ * </p>\n+ * <p>\n+ * The {@code java.util.concurrent.Callable} interface is a standard mechanism\n+ * of the JDK to define tasks to be executed by another thread. The {@code\n+ * CallableBackgroundInitializer} class allows combining this standard interface\n+ * with the background initializer API.\n+ * </p>\n+ * <p>\n+ * Usage of this class is very similar to the default usage pattern of the\n+ * {@link BackgroundInitializer} class: Just create an instance and provide the\n+ * {@code Callable} object to be executed, then call the initializer's\n+ * {@link #start()} method. This causes the {@code Callable} to be executed in\n+ * another thread. When the results of the {@code Callable} are needed the\n+ * initializer's {@link #get()} method can be called (which may block until\n+ * background execution is complete). The following code fragment shows a\n+ * typical usage example:\n+ *\n+ * <pre>\n+ * // a Callable that performs a complex computation\n+ * Callable<Integer> computationCallable = new MyComputationCallable();\n+ *\n+ * // setup the background initializer\n+ * CallableBackgroundInitializer<Integer> initializer =\n+ *     new CallableBackgroundInitializer(computationCallable);\n+ * initializer.start();\n+ *\n+ * // Now do some other things. Initialization runs in a parallel thread\n+ * ...\n+ * // Wait for the end of initialization and access the result\n+ * Integer result = initializer.get();\n+ * </pre>\n+ *\n+ * </p>\n+ *\n+ * @version $Id: $\n+ * @param <T> the type of the object managed by this initializer class\n+ */\n+public class CallableBackgroundInitializer<T> extends BackgroundInitializer<T> {\n+    /** The Callable to be executed. */\n+    private final Callable<T> callable;\n+\n+    /**\n+     * Creates a new instance of {@code CallableBackgroundInitializer} and sets\n+     * the {@code Callable} to be executed in a background thread.\n+     *\n+     * @param call the {@code Callable} (must not be <b>null</b>)\n+     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n+     */\n+    public CallableBackgroundInitializer(Callable<T> call) {\n+        checkCallable(call);\n+        callable = call;\n+    }\n+\n+    /**\n+     * Creates a new instance of {@code CallableBackgroundInitializer} and\n+     * initializes it with the {@code Callable} to be executed in a background\n+     * thread and the {@code ExecutorService} for managing the background\n+     * execution.\n+     *\n+     * @param call the {@code Callable} (must not be <b>null</b>)\n+     * @param exec an external {@code ExecutorService} to be used for task\n+     * execution\n+     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n+     */\n+    public CallableBackgroundInitializer(Callable<T> call, ExecutorService exec) {\n+        super(exec);\n+        checkCallable(call);\n+        callable = call;\n+    }\n+\n+    /**\n+     * Performs initialization in a background thread. This implementation\n+     * delegates to the {@code Callable} passed at construction time of this\n+     * object.\n+     *\n+     * @return the result of the initialization\n+     * @throws Exception if an error occurs\n+     */\n+    @Override\n+    protected T initialize() throws Exception {\n+        return callable.call();\n+    }\n+\n+    /**\n+     * Tests the passed in {@code Callable} and throws an exception if it is\n+     * undefined.\n+     *\n+     * @param call the object to check\n+     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n+     */\n+    private void checkCallable(Callable<T> call) {\n+        if (call == null) {\n+            throw new IllegalArgumentException(\"Callable must not be null!\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@code CallableBackgroundInitializer}\n+ *\n+ * @version $Id$\n+ */\n+public class CallableBackgroundInitializerTest extends TestCase {\n+    /** Constant for the result of the call() invocation. */\n+    private static final Integer RESULT = 42;\n+\n+    /**\n+     * Tries to create an instance without a Callable. This should cause an\n+     * exception.\n+     */\n+    public void testInitNullCallable() {\n+        try {\n+            new CallableBackgroundInitializer<Object>(null);\n+            fail(\"Could create instance without a Callable!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the executor service is correctly passed to the super\n+     * class.\n+     */\n+    public void testInitExecutor() {\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n+                new TestCallable(), exec);\n+        assertEquals(\"Executor not set\", exec, init.getExternalExecutor());\n+    }\n+\n+    /**\n+     * Tries to pass a null Callable to the constructor that takes an executor.\n+     * This should cause an exception.\n+     */\n+    public void testInitExecutorNullCallable() {\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        try {\n+            new CallableBackgroundInitializer<Integer>(null, exec);\n+            fail(\"Could create instance without a Callable!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests the implementation of initialize().\n+     */\n+    public void testInitialize() throws Exception {\n+        TestCallable call = new TestCallable();\n+        CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n+                call);\n+        assertEquals(\"Wrong result\", RESULT, init.initialize());\n+        assertEquals(\"Wrong number of invocations\", 1, call.callCount);\n+    }\n+\n+    /**\n+     * A test Callable implementation for checking the initializer's\n+     * implementation of the initialize() method.\n+     */\n+    private static class TestCallable implements Callable<Integer> {\n+        /** A counter for the number of call() invocations. */\n+        int callCount;\n+\n+        /**\n+         * Records this invocation and returns the test result.\n+         */\n+        public Integer call() throws Exception {\n+            callCount++;\n+            return RESULT;\n+        }\n+    }\n+}", "timestamp": 1258909059, "metainfo": ""}