{"sha": "4c0660dd6f35347234caba70e86bfb02fa52546e", "log": "Add  overlay()  as a replacement for  overlayString()   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.86 2003/08/01 22:05:43 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.87 2003/08/01 23:01:52 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * StringUtils.isEmpty(\"  bob  \") = false\n      * </pre>\n      *\n-     * <p>NOTE: This method changed in version 2.0.\n+     * <p>NOTE: This method changed in Lang version 2.0.\n      * It no longer trims the String.\n      * That functionality is available in isBlank().</p>\n      * \n      * <p>Overlays part of a String with another String.</p>\n      *\n      * <pre>\n-     * StringUtils.overlayString(null, *, *, *)           = null\n+     * StringUtils.overlayString(null, *, *, *)           = NullPointerException\n+     * StringUtils.overlayString(*, null, *, *)           = NullPointerException\n      * StringUtils.overlayString(\"\", \"abc\", 0, 0)         = \"abc\"\n      * StringUtils.overlayString(\"abcdef\", null, 2, 4)    = \"abef\"\n      * StringUtils.overlayString(\"abcdef\", \"\", 2, 4)      = \"abef\"\n      * @param start  the position to start overlaying at, must be valid\n      * @param end  the position to stop overlaying before, must be valid\n      * @return overlayed String, <code>null</code> if null String input\n+     * @throws NullPointerException if text or overlay is null\n      * @throws IndexOutOfBoundsException if either position is invalid\n+     * @deprecated Use better named {@link #overlay(String, String, int, int)} instead.\n+     *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String overlayString(String text, String overlay, int start, int end) {\n-        if (text == null) {\n-            return null;\n-        }\n-        if (overlay == null) {\n-            overlay = \"\";\n-        }\n         return new StringBuffer(start + overlay.length() + text.length() - end + 1)\n             .append(text.substring(0, start))\n             .append(overlay)\n             .append(text.substring(end))\n+            .toString();\n+    }\n+\n+    /**\n+     * <p>Overlays part of a String with another String.</p>\n+     * \n+     * <p>A <code>null</code> string input returns <code>null</code>.\n+     * A negative index is treated as zero.\n+     * An index greater than the string length is treated as the string length.\n+     * The start index is always the smaller of the two indices.</p>\n+     *\n+     * <pre>\n+     * StringUtils.overlay(null, *, *, *)            = null\n+     * StringUtils.overlay(\"\", \"abc\", 0, 0)          = \"abc\"\n+     * StringUtils.overlay(\"abcdef\", null, 2, 4)     = \"abef\"\n+     * StringUtils.overlay(\"abcdef\", \"\", 2, 4)       = \"abef\"\n+     * StringUtils.overlay(\"abcdef\", \"\", 4, 2)       = \"abef\"\n+     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4)   = \"abzzzzef\"\n+     * StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2)   = \"abzzzzef\"\n+     * StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4)  = \"zzzzef\"\n+     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 8)   = \"abzzzz\"\n+     * StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -3) = \"zzzzabcdef\"\n+     * StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10)  = \"abcdefzzzz\"\n+     * </pre>\n+     * \n+     * @param str  the String to do overlaying in, may be null\n+     * @param overlay  the String to overlay, may be null\n+     * @param start  the position to start overlaying at\n+     * @param end  the position to stop overlaying before\n+     * @return overlayed String, <code>null</code> if null String input\n+     */\n+    public static String overlay(String str, String overlay, int start, int end) {\n+        if (str == null) {\n+            return null;\n+        }\n+        if (overlay == null) {\n+            overlay = \"\";\n+        }\n+        int len = str.length();\n+        if (start < 0) {\n+            start = 0;\n+        }\n+        if (start > len) {\n+            start = len;\n+        }\n+        if (end < 0) {\n+            end = 0;\n+        }\n+        if (end > len) {\n+            end = len;\n+        }\n+        if (start > end) {\n+            int temp = start;\n+            start = end;\n+            end = temp;\n+        }\n+        return new StringBuffer(len + start - end + overlay.length() + 1)\n+            .append(str.substring(0, start))\n+            .append(overlay)\n+            .append(str.substring(end))\n             .toString();\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.42 2003/08/01 21:02:16 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.43 2003/08/01 23:01:52 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n     }\n     \n-    public void testOverlayString() {\n+    public void testOverlayString_StringStringIntInt() {\n         assertEquals(\"overlayString(String, String, int, int) failed\",\n                      \"foo foor baz\", StringUtils.overlayString(SENTENCE, FOO, 4, 6) );\n-        assertEquals(null, StringUtils.overlayString(null, null, 2, 4));\n-        assertEquals(\"abef\", StringUtils.overlayString(\"abcdef\", null, 2, 4));\n         assertEquals(\"abef\", StringUtils.overlayString(\"abcdef\", \"\", 2, 4));\n         assertEquals(\"abzzzzef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4));\n         assertEquals(\"abcdzzzzcdef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 4, 2));\n         try {\n+            StringUtils.overlayString(null, \"zzzz\", 2, 4);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            StringUtils.overlayString(\"abcdef\", null, 2, 4);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n             StringUtils.overlayString(\"abcdef\", \"zzzz\", -1, 4);\n             fail();\n         } catch (IndexOutOfBoundsException ex) {}\n             StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 8);\n             fail();\n         } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testOverlay_StringStringIntInt() {\n+        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n+        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n+        \n+        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n+        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n+        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n+        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n+        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n+        \n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n+        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n+        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n+        \n+        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n+        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n+        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n+        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n+        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n+        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n+        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n+        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n     }\n \n     public void testRepeat_StringInt() {", "timestamp": 1059778912, "metainfo": ""}