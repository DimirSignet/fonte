{"sha": "dcdea66eff6cee2cd956e8ad2a92ab3a7c3a2f09", "log": "[LANG-380] return when either arg == 0 plus early return when either == 1  ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n      * @return the greatest common divisor, never zero\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n+        //if either op. is abs 0 or 1, return 1:\n+        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+            return 1;\n+        }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n         // (i.e. we can't necessarily negate a negative number without\n         // overflow)\n-        /* assert u!=0 && v!=0; */\n         if (u>0) { u=-u; } // make u negative\n         if (v>0) { v=-v; } // make v negative\n         // B1. [Find power of 2]", "timestamp": 1196184299, "metainfo": ""}