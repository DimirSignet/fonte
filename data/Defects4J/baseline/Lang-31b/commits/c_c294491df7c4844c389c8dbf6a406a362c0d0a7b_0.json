{"sha": "c294491df7c4844c389c8dbf6a406a362c0d0a7b", "log": "Javadoc fixes bug 21758, from Pete Gieser   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n /** \n  * <p><code>CompareTo</code> generation routines.</p>\n  *\n- * <p>This class provides methods to build a good <comde>compareTo()</code>\n- * method for any class. It is consistent with the <code>equals</code> and\n- * <code>hashcode</code> built with {@link EqualsBuilder} and\n+ * <p>This class provides methods to build a good <code>compareTo</code>\n+ * method for any class. It is consistent with the <code>equals()</code> and\n+ * <code>hashcode()</code> built with {@link EqualsBuilder} and\n  * {@link HashCodeBuilder}.</p>\n  *\n- * <p>Two object that compare equal using equals should normally compare \n- * equals using <code>compareTo</code></p>.\n+ * <p>Two Objects that compare equal using <code>equals()</code> should normally\n+ * also compare equal using <code>compareTo()</code></p>.\n  *\n  * <p>All relevant fields should be included in the calculation of the\n  * comparison. Derived fields may be ignored. The same fields, in the same\n- * order, should be used in both <code>compareTo</code> and\n- * <code>equals</code>.</p>\n+ * order, should be used in both <code>compareTo()</code> and\n+ * <code>equals()</code>.</p>\n  *\n  * <p>Typical use for the code is as follows:</p>\n  *\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n+ * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.17 2003/07/19 03:25:38 ggregory Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.18 2003/07/21 23:14:37 scolebourne Exp $\n  */\n public class CompareToBuilder {\n     \n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if the permissions are not set up correctly. It is\n+     * a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>Transient members will be not be tested, as they are likely derived\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if  the permissions are not set up correctly. It is\n+     * a security manager, if  the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>If the <code>testTransients</code> is set to <code>true</code>,\n      *\n      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run under\n-     * a security manger, if  the permissions are not set up correctly. It is\n+     * a security manager, if  the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.</p>\n      *\n      * <p>If the <code>testTransients</code> is set to <code>true</code>,\n     /**\n      * <p>Adds the result of super.hashCode() to this builder.</p>\n      *\n-     * @param superHashCode  the result of calling <code>super.equals()</code>\n-     * @return CompareToBuilder - used to chain calls.\n-     */\n-    public CompareToBuilder appendSuper(int superHashCode) {\n+     * @param superCompareTo  the result of calling <code>super.compareTo()</code>\n+     * @return CompareToBuilder - used to chain calls.\n+     */\n+    public CompareToBuilder appendSuper(int superCompareTo) {\n         if (comparison != 0) {\n             return this;\n         }\n      * <p>Deep comparison of an <code>Object</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a short length array is less than a long length array</li>\n      *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n      * <p>Deep comparison of an <code>Object</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}</li>\n      * <p>Deep comparison of a <code>long</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n      * <p>Deep comparison of an <code>int</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(int, int)}</li>\n      * <p>Deep comparison of a <code>short</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(short, short)}</li>\n      * <p>Deep comparison of a <code>char</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(char, char)}</li>\n      * <p>Deep comparison of a <code>byte</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n      * <p>Deep comparison of a <code>double</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n      * <p>Deep comparison of a <code>float</code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(float, float)}\n      * <p>Deep comparison of a <code>boolean/code> array.</p>\n      *\n      * <ol>\n-     *  <li>Check if arrays are same using <code>==</code></li>\n+     *  <li>Check if arrays are the same using <code>==</code></li>\n      *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n     }\n \n     /**\n-     * <p>Return a negative integer if the <code>Object</code> is less\n-     * than, a positive integer if the <code>Object</code> is greater than,\n-     * or <code>0</code> if the <code>Object</code> is equal.</p>\n+     * <p>Return a negative integer if this <code>Object</code> is less\n+     * than, a positive integer if this <code>Object</code> is greater than,\n+     * or <code>0</code> if this <code>Object</code> is equal to the specified\n+     * Object.</p>\n      * \n      * @return int - a negative integer, zero, or a positive integer as this \n      *  Object is less than, equal to, or greater than the specified Object.", "timestamp": 1058829277, "metainfo": ""}