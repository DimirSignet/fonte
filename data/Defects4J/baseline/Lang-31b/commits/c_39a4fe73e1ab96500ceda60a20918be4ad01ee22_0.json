{"sha": "39a4fe73e1ab96500ceda60a20918be4ad01ee22", "log": "Use valueOf() to convert primitive to wrapper class  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n         return value;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets this mutable as an instance of Boolean.\n+     *\n+     * @return a Boolean instance containing the value from this mutable, never null\n+     */\n+    public Boolean toBoolean() {\n+        return Boolean.valueOf(booleanValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this mutable to another in ascending order.\n      * \n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n     /**\n      * Gets this mutable as an instance of Double.\n      *\n-     * @return a Double instance containing the value from this mutable\n+     * @return a Double instance containing the value from this mutable, never null\n      */\n     public Double toDouble() {\n-        return new Double(doubleValue());\n+        return Double.valueOf(doubleValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n     /**\n      * Gets this mutable as an instance of Float.\n      *\n-     * @return a Float instance containing the value from this mutable\n+     * @return a Float instance containing the value from this mutable, never null\n      */\n     public Float toFloat() {\n-        return new Float(floatValue());\n+        return Float.valueOf(floatValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n     /**\n      * Gets this mutable as an instance of Integer.\n      *\n-     * @return a Integer instance containing the value from this mutable\n+     * @return a Integer instance containing the value from this mutable, never null\n      */\n     public Integer toInteger() {\n-        return new Integer(intValue());\n+        return Integer.valueOf(intValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n     /**\n      * Gets this mutable as an instance of Long.\n      *\n-     * @return a Long instance containing the value from this mutable\n+     * @return a Long instance containing the value from this mutable, never null\n      */\n     public Long toLong() {\n-        return new Long(longValue());\n+        return Long.valueOf(longValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n     /**\n      * Gets this mutable as an instance of Short.\n      *\n-     * @return a Short instance containing the value from this mutable\n+     * @return a Short instance containing the value from this mutable, never null\n      */\n     public Short toShort() {\n-        return new Short(shortValue());\n+        return Short.valueOf(shortValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n     }\n \n     public void testGetSet() {\n-        final MutableBoolean mutBool = new MutableBoolean(false);\n         assertEquals(false, new MutableBoolean().booleanValue());\n         assertEquals(Boolean.FALSE, new MutableBoolean().getValue());\n+        \n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+        assertEquals(Boolean.FALSE, mutBool.toBoolean());\n+        assertEquals(false, mutBool.booleanValue());\n \n         mutBool.setValue(Boolean.TRUE);\n+        assertEquals(Boolean.TRUE, mutBool.toBoolean());\n         assertEquals(true, mutBool.booleanValue());\n \n         mutBool.setValue(false);", "timestamp": 1256598725, "metainfo": ""}