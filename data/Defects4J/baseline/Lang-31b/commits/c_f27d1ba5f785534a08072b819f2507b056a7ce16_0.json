{"sha": "f27d1ba5f785534a08072b819f2507b056a7ce16", "log": "Fix to enable anonymous inner classes as Enums for functionality   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n  * An alternative choice is to use the {@link EnumUtils} class.\n  * <p>\n+ * The enums can have functionality by using anonymous inner classes\n+ * [Effective Java, Bloch01]:\n+ * <pre>\n+ * public abstract class OperationEnum extends Enum {\n+ *   public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+ *     public double eval(double a, double b) {\n+ *       return (a + b);\n+ *     }\n+ *   };\n+ *   public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+ *     public double eval(double a, double b) {\n+ *       return (a - b);\n+ *     }\n+ *   };\n+ *\n+ *   private OperationEnum(String color) {\n+ *     super(color);\n+ *   }\n+ * \n+ *   public abstract double eval(double a, double b);\n+ * \n+ *   public static OperationEnum getEnum(String name) {\n+ *     return (OperationEnum) getEnum(OperationEnum.class, name);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(OperationEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(OperationEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(OperationEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n  * <em>NOTE:</em> This class originated in the Jakarta Avalon project.\n  * </p>\n  *\n  * @author Stephen Colebourne\n+ * @author Chris Webb\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.5 2002/12/23 00:17:06 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.6 2002/12/31 22:39:39 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n     /**\n             throw new IllegalArgumentException(\"The Enum name must not be empty\");\n         }\n         iName = name;\n-        Entry entry = (Entry) cEnumClasses.get(getClass().getName());\n+        String className = Enum.getEnumClassName(getClass());\n+        Entry entry = (Entry) cEnumClasses.get(className);\n         if (entry == null) {\n             entry = new Entry();\n-            cEnumClasses.put(getClass().getName(), entry);\n+            cEnumClasses.put(className, entry);\n         }\n         if (entry.map.containsKey(name)) {\n             throw new IllegalArgumentException(\"The Enum name must be unique, '\" + name + \"' has already been added\");\n      * @return the resolved object\n      */\n     protected Object readResolve() {\n-        return Enum.getEnum(getClass(), getName());\n-    }\n+        Entry entry = (Entry) cEnumClasses.get(Enum.getEnumClassName(getClass()));\n+        if (entry == null) {\n+            return null;\n+        }\n+        return (Enum) entry.map.get(getName());\n+    }\n+    \n+    //--------------------------------------------------------------------------------\n \n     /**\n      * Gets an Enum object by class and name.\n      * \n-     * @param enumClass  the class of the Enum to get\n+     * @param enumClass  the class of the Enum to get, must not be null\n      * @param name  the name of the Enum to get, may be null\n      * @return the enum object, or null if the enum does not exist\n      * @throws IllegalArgumentException if the enum class is null\n      */\n     protected static Enum getEnum(Class enumClass, String name) {\n-        if (enumClass == null) {\n-            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n-        }\n-        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        Entry entry = getEntry(enumClass);\n         if (entry == null) {\n             return null;\n         }\n      * Gets the Map of Enum objects by name using the Enum class.\n      * If the requested class has no enum objects an empty Map is returned.\n      * \n-     * @param enumClass  the class of the Enum to get\n+     * @param enumClass  the class of the Enum to get, must not be null\n      * @return the enum object Map\n      * @throws IllegalArgumentException if the enum class is null\n      * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n      */\n     protected static Map getEnumMap(Class enumClass) {\n-        if (enumClass == null) {\n-            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n-        }\n-        if (Enum.class.isAssignableFrom(enumClass) == false) {\n-            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n-        }\n-        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        Entry entry = getEntry(enumClass);\n         if (entry == null) {\n             return EMPTY_MAP;\n         }\n      * The list is in the order that the objects were created (source code order).\n      * If the requested class has no enum objects an empty List is returned.\n      * \n-     * @param enumClass  the class of the Enum to get\n+     * @param enumClass  the class of the Enum to get, must not be null\n      * @return the enum object Map\n      * @throws IllegalArgumentException if the enum class is null\n      * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n      */\n     protected static List getEnumList(Class enumClass) {\n-        if (enumClass == null) {\n-            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n-        }\n-        if (Enum.class.isAssignableFrom(enumClass) == false) {\n-            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n-        }\n-        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        Entry entry = getEntry(enumClass);\n         if (entry == null) {\n             return Collections.EMPTY_LIST;\n         }\n      * The iterator is in the order that the objects were created (source code order).\n      * If the requested class has no enum objects an empty Iterator is returned.\n      * \n-     * @param enumClass  the class of the Enum to get\n+     * @param enumClass  the class of the Enum to get, must not be null\n      * @return an iterator of the Enum objects\n      * @throws IllegalArgumentException if the enum class is null\n      * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n     protected static Iterator iterator(Class enumClass) {\n         return Enum.getEnumList(enumClass).iterator();\n     }\n+\n+    /**\n+     * Gets an entry from the map of Enums.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum entry\n+     */\n+    private static Entry getEntry(Class enumClass) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        if (Enum.class.isAssignableFrom(enumClass) == false) {\n+            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n+        }\n+        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        return entry;\n+    }\n+    \n+    /**\n+     * Convert a class to a class name accounting for inner classes.\n+     * \n+     * @param cls  the class to get the name for\n+     * @return the class name\n+     */\n+    protected static String getEnumClassName(Class cls) {\n+        String className = cls.getName();\n+        int index = className.lastIndexOf('$');\n+        if (index > -1) {\n+            // is it an anonymous inner class?\n+            String inner = className.substring(index + 1);\n+            if (inner.length() > 0 &&\n+                inner.charAt(0) >= '0' &&\n+                inner.charAt(0) < '9') {\n+                // Strip off anonymous inner class reference.\n+                className = className.substring(0, index);\n+            }\n+        }\n+        return className;\n+    }\n+\n+    //--------------------------------------------------------------------------------\n \n     /**\n      * Retrieve the name of this Enum item, set in the constructor.\n      * the type name.\n      */\n     public String toString() {\n-        String shortName = getClass().getName();\n+        String shortName = Enum.getEnumClassName(getClass());\n         int pos = shortName.lastIndexOf('.');\n         if (pos != -1) {\n             shortName = shortName.substring(pos + 1);\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.3 2002/12/23 00:17:06 scolebourne Exp $\n+ * @version $Id: ValuedEnum.java,v 1.4 2002/12/31 22:39:39 scolebourne Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     /**\n      * stripped from the type name.\n      */\n     public String toString() {\n-        String shortName = getClass().getName();\n+        String shortName = Enum.getEnumClassName(getClass());\n         int pos = shortName.lastIndexOf('.');\n         if (pos != -1) {\n             shortName = shortName.substring(pos + 1);\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n /**\n  * Test cases for the {@link Enum} class.\n  *\n- * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumTest.java,v 1.4 2002/11/06 19:14:43 bayard Exp $\n+ * @author Stephen Colebourne\n+ * @version $Id: EnumTest.java,v 1.5 2002/12/31 22:39:39 scolebourne Exp $\n  */\n \n public final class EnumTest extends TestCase {\n         }\n     }\n \n+    public void testOperationGet() {\n+        assertSame(OperationEnum.PLUS, OperationEnum.getEnum(\"Plus\"));\n+        assertSame(OperationEnum.MINUS, OperationEnum.getEnum(\"Minus\"));\n+        assertSame(null, OperationEnum.getEnum(\"Pink\"));\n+    }\n+\n+    public void testOperationSerialization() {\n+        assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));\n+        assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));\n+    }\n+\n+    public void testOperationToString() {\n+        assertEquals(\"OperationEnum[Plus]\", OperationEnum.PLUS.toString());\n+    }\n+\n+    public void testOperationList() {\n+        List list = OperationEnum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(2, list.size());\n+        assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(OperationEnum.PLUS, it.next());\n+        assertSame(OperationEnum.MINUS, it.next());\n+    }\n+\n+    public void testOperationMap() {\n+        Map map = OperationEnum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(OperationEnum.PLUS));\n+        assertTrue(map.containsValue(OperationEnum.MINUS));\n+        assertSame(OperationEnum.PLUS, map.get(\"Plus\"));\n+        assertSame(OperationEnum.MINUS, map.get(\"Minus\"));\n+    }\n+\n+    public void testOperationCalculation() {\n+        assertEquals(3, OperationEnum.PLUS.eval(1, 2));\n+        assertEquals(-1, OperationEnum.MINUS.eval(1, 2));\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/OperationEnum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Operator enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: OperationEnum.java,v 1.1 2002/12/31 22:39:39 scolebourne Exp $\n+ */\n+public abstract class OperationEnum extends Enum {\n+    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    };\n+    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    };\n+\n+    private OperationEnum(String name) {\n+        super(name);\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static OperationEnum getEnum(String name) {\n+        return (OperationEnum) getEnum(OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(OperationEnum.class);\n+    }\n+}", "timestamp": 1041374379, "metainfo": ""}