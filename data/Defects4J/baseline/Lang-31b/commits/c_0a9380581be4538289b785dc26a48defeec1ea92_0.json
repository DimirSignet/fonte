{"sha": "0a9380581be4538289b785dc26a48defeec1ea92", "log": "Adding 'Deprecated' to tests which are testing deprecated methods and moving CharSetUtils from the deprecated evaluateSet method to a new getInstance(String[]) method. This does mean that getInstance(null) is no longer going to compile for people - they'll need to cast the null.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n             return (CharSet) set;\n         }\n         return new CharSet(setStr);\n+    }\n+\n+    /**\n+     * <p>Constructs a new CharSet using the set syntax.\n+     * Each string is merged in with the set.</p>\n+     *\n+     * @param set  Strings to merge into the initial set, may be null\n+     */\n+    public static CharSet getInstance(String[] setStrs) {\n+        if (setStrs == null) {\n+            return null;\n+        }\n+        return new CharSet(setStrs); \n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n      *\n      * @param set  the set, may be null\n      * @return a CharSet instance, <code>null</code> if null input\n-     * @deprecated Use {@link CharSet#getInstance(String)}.\n+     * @deprecated Use {@link CharSet#getInstance(String[])}.\n      *             Method will be removed in Commons Lang 3.0.\n      */\n     public static CharSet evaluateSet(String[] set) {\n         if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n             return str;\n         }\n-        CharSet chars = evaluateSet(set);\n+        CharSet chars = CharSet.getInstance(set);\n         StringBuffer buffer = new StringBuffer(str.length());\n         char[] chrs = str.toCharArray();\n         int sz = chrs.length;\n         if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {\n             return 0;\n         }\n-        CharSet chars = evaluateSet(set);\n+        CharSet chars = CharSet.getInstance(set);\n         int count = 0;\n         char[] chrs = str.toCharArray();\n         int sz = chrs.length;\n      * @return modified String\n      */\n     private static String modify(String str, String[] set, boolean expect) {\n-        CharSet chars = evaluateSet(set);\n+        CharSet chars = CharSet.getInstance(set);\n         StringBuffer buffer = new StringBuffer(str.length());\n         char[] chrs = str.toCharArray();\n         int sz = chrs.length;\n--- a/src/test/org/apache/commons/lang/CharSetTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetTest.java\n     \n     //-----------------------------------------------------------------------\n     public void testGetInstance() {\n-        assertSame(CharSet.EMPTY, CharSet.getInstance(null));\n+        assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));\n         assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\n         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"a-zA-Z\"));\n         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"A-Za-z\"));\n         assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(\"A-Z\"));\n         assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(\"0-9\"));\n     }\n-            \n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstance_Stringarray() {\n+        assertEquals(null, CharSet.getInstance((String[]) null));\n+        assertEquals(\"[]\", CharSet.getInstance(new String[0]).toString());\n+        assertEquals(\"[]\", CharSet.getInstance(new String[] {null}).toString());\n+        assertEquals(\"[a-e]\", CharSet.getInstance(new String[] {\"a-e\"}).toString());\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void testConstructor_String_simple() {\n         CharSet set;\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n              StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n     }\n \n-    public void testGetNestedString_StringString() {\n+    public void testDeprecatedGetNestedString_StringString() {\n         assertEquals(null, StringUtils.getNestedString(null, \"tag\"));\n         assertEquals(\"\", StringUtils.getNestedString(\"\", \"\"));\n         assertEquals(null, StringUtils.getNestedString(\"\", \"abc\"));\n         assertEquals(\"bar\", StringUtils.getNestedString(\"\\nbar\\n\", \"\\n\"));\n     }\n             \n-    public void testGetNestedString_StringStringString() {\n+    public void testDeprecatedGetNestedString_StringStringString() {\n         assertEquals(null, StringUtils.getNestedString(null, \"\", \"\"));\n         assertEquals(\"\", StringUtils.getNestedString(\"\", \"\", \"\"));\n         assertEquals(\"\", StringUtils.getNestedString(\"    \", \" \", \"  \"));\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n     }\n \n-    public void testConcatenate_Objectarray() {\n+    public void testDeprecatedConcatenate_Objectarray() {\n         assertEquals(null, StringUtils.concatenate(null));\n         assertEquals(\"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));\n         assertEquals(\"\", StringUtils.concatenate(NULL_ARRAY_LIST));\n         assertEquals(msg, str.substring(2), res[1]);\n     }\n     \n-    public void testDeleteSpace_String() {\n+    public void testDeprecatedDeleteSpace_String() {\n         assertEquals(null, StringUtils.deleteSpaces(null));\n         assertEquals(\"\", StringUtils.deleteSpaces(\"\"));\n         assertEquals(\"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n             \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n     }\n     \n-    public void testOverlayString_StringStringIntInt() {\n+    public void testDeprecatedOverlayString_StringStringIntInt() {\n         assertEquals(\"overlayString(String, String, int, int) failed\",\n                      \"foo foor baz\", StringUtils.overlayString(SENTENCE_UNCAP, FOO_UNCAP, 4, 6) );\n         assertEquals(\"abef\", StringUtils.overlayString(\"abcdef\", \"\", 2, 4));\n         assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n     }\n \n-    public void testReverseDelimitedString_StringString() {\n+    public void testDeprecatedReverseDelimitedString_StringString() {\n         assertEquals(null, StringUtils.reverseDelimitedString(null, null) );\n         assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", null) );\n         assertEquals(\"\", StringUtils.reverseDelimitedString(\"\", \".\") );\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testEscapeFunctions_String() {\n+    public void testDeprecatedEscapeFunctions_String() {\n         assertEquals(\"\", StringUtils.escape(\"\") );\n         assertEquals(\"abc\", StringUtils.escape(\"abc\") );\n         assertEquals(\"\\\\t\", StringUtils.escape(\"\\t\") );\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testClean() {\n+    public void testDeprecatedClean() {\n         assertEquals(FOO, StringUtils.clean(FOO + \"  \"));\n         assertEquals(FOO, StringUtils.clean(\" \" + FOO + \"  \"));\n         assertEquals(FOO, StringUtils.clean(\" \" + FOO));\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testJavaVersion() {\n+    public void testDeprecatedJavaVersion() {\n         assertEquals(SystemUtils.JAVA_VERSION_FLOAT, SystemUtils.getJavaVersion(), 0f);\n     }\n \n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n     /**\n      * Test for {@link NumberUtils#stringToInt(String)}.\n      */\n-    public void testStringToIntString() {\n+    public void testDeprecatedStringToIntString() {\n         assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n         assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n         assertTrue(\"stringToInt(empty) failed\", NumberUtils.stringToInt(\"\") == 0);\n     /**\n      * Test for {@link NumberUtils#stringToInt(String, int)}.\n      */\n-    public void testStringToIntStringI() {\n+    public void testDeprecatedStringToIntStringI() {\n         assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n         assertTrue(\"stringToInt(String,int) 2 failed\", NumberUtils.stringToInt(\"1234.5\", 5) == 5);\n     }", "timestamp": 1178131567, "metainfo": ""}