{"sha": "4a650099a75a9325de694060739e160b16c2b21a", "log": "Replace statics *TIMEZONE* with *TIME_ZONE*   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  * @author Stephen Colebourne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DateFormatUtils.java,v 1.5 2003/08/06 02:48:23 ggregory Exp $\n+ * @version $Id: DateFormatUtils.java,v 1.6 2003/08/06 21:13:39 ggregory Exp $\n  */\n public class DateFormatUtils {\n \n      * ISO8601 formatter for date-time with time zone.\n      * The format used is <tt>yyyy-MM-dd'T'HH:mm:ssZZ</tt>.\n      */\n-    public static final FastDateFormat ISO_DATETIME_TIMEZONE_FORMAT\n+    public static final FastDateFormat ISO_DATETIME_TIME_ZONE_FORMAT\n             = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ssZZ\");\n \n     /**\n      * This pattern does not comply with the formal ISO8601 specification\n      * as the standard does not allow a time zone  without a time.\n      */\n-    public static final FastDateFormat ISO_DATE_TIMEZONE_FORMAT\n+    public static final FastDateFormat ISO_DATE_TIME_ZONE_FORMAT\n             = FastDateFormat.getInstance(\"yyyy-MM-ddZZ\");\n \n     /**\n      * ISO8601 formatter for time with time zone.\n      * The format used is <tt>'T'HH:mm:ssZZ</tt>.\n      */\n-    public static final FastDateFormat ISO_TIME_TIMEZONE_FORMAT\n+    public static final FastDateFormat ISO_TIME_TIME_ZONE_FORMAT\n             = FastDateFormat.getInstance(\"'T'HH:mm:ssZZ\");\n \n     /**\n      * This pattern does not comply with the formal ISO8601 specification\n      * as the standard requires the 'T' prefix for times.\n      */\n-    public static final FastDateFormat ISO_TIME_NO_T_TIMEZONE_FORMAT\n+    public static final FastDateFormat ISO_TIME_NO_T_TIME_ZONE_FORMAT\n             = FastDateFormat.getInstance(\"HH:mm:ssZZ\");\n \n     /**\n      * @return the formatted date\n      */\n     public static String formatUTC(long millis, String pattern) {\n-        return format(new Date(millis), pattern, DateUtils.UTC_TIMEZONE, null);\n+        return format(new Date(millis), pattern, DateUtils.UTC_TIME_ZONE, null);\n     }\n \n     /**\n      * @return the formatted date\n      */\n     public static String formatUTC(Date date, String pattern) {\n-        return format(date, pattern, DateUtils.UTC_TIMEZONE, null);\n+        return format(date, pattern, DateUtils.UTC_TIME_ZONE, null);\n     }\n     \n     /**\n      * @return the formatted date\n      */\n     public static String formatUTC(long millis, String pattern, Locale locale) {\n-        return format(new Date(millis), pattern, DateUtils.UTC_TIMEZONE, locale);\n+        return format(new Date(millis), pattern, DateUtils.UTC_TIME_ZONE, locale);\n     }\n \n     /**\n      * @return the formatted date\n      */\n     public static String formatUTC(Date date, String pattern, Locale locale) {\n-        return format(date, pattern, DateUtils.UTC_TIMEZONE, locale);\n+        return format(date, pattern, DateUtils.UTC_TIME_ZONE, locale);\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n  * @author Stephen Colebourne\n  * @author Janek Bogucki\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.9 2003/08/06 01:44:57 ggregory Exp $\n+ * @version $Id: DateUtils.java,v 1.10 2003/08/06 21:13:39 ggregory Exp $\n  */\n public class DateUtils {\n     \n     /**\n      * The UTC time zone  (often referred to as GMT).\n      */\n-    public static final TimeZone UTC_TIMEZONE = TimeZone.getTimeZone(\"GMT\");\n+    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");\n     /**\n      * Number of milliseconds in a standard second.\n      */\n--- a/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  * @author Stephen Colebourne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  */\n public class DateFormatUtilsTest extends TestCase {\n \n         assertEquals(\"2002-02-23T09:11:12\", text);\n         \n         text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n         text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n-        text = DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n     }\n \n         assertEquals(\"2002-02-23\", text);\n         \n         text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_DATE_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"2002-02-23-03:00\", text);\n         text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_DATE_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"2002-02-23-03:00\", text);\n-        text = DateFormatUtils.ISO_DATE_TIMEZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(\"2002-02-23-03:00\", text);\n     }\n \n         assertEquals(\"T10:11:12\", text);\n         \n         text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"T10:11:12-03:00\", text);\n         text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"T10:11:12-03:00\", text);\n-        text = DateFormatUtils.ISO_TIME_TIMEZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(\"T10:11:12-03:00\", text);\n     }\n \n         assertEquals(\"10:11:12\", text);\n         \n         text = DateFormatUtils.format(cal.getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"10:11:12-03:00\", text);\n         text = DateFormatUtils.format(cal.getTime().getTime(), \n-                      DateFormatUtils.ISO_TIME_NO_T_TIMEZONE_FORMAT.getPattern(), timeZone);\n+                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n         assertEquals(\"10:11:12-03:00\", text);\n-        text = DateFormatUtils.ISO_TIME_NO_T_TIMEZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(\"10:11:12-03:00\", text);\n     }\n \n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n         cal.set(Calendar.MILLISECOND, 1);\n         String text;\n         // repeat a test from testDateTimeISO to compare extended and not extended.\n-        text = DateFormatUtils.ISO_DATETIME_TIMEZONE_FORMAT.format(cal);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n         // test fixture is the same as above, but now with extended format.\n         text = DurationFormatUtils.ISO_EXTENDED_FORMAT.format(cal);", "timestamp": 1060204419, "metainfo": ""}