{"sha": "4bedbac4eba5eee46071f4d731e9429f307b8a41", "log": "Purpletech code import:  abbreviate, difference, differenceAt   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @author Holger Krauth\n+ * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.32 2003/01/20 22:15:13 dlr Exp $\n+ * @version $Id: StringUtils.java,v 1.33 2003/03/17 05:28:36 alex Exp $\n  */\n public class StringUtils {\n \n         }\n     }\n \n+    // Abbreviating\n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * Turn \"Now is the time for all good men\" into \"Now is the time for...\"\n+     * <p>\n+     * Specifically:\n+     * <p>\n+     * If str is less than max characters long, return it.\n+     * Else abbreviate it to (substring(str, 0, max-3) + \"...\").\n+     * If maxWidth is less than 3, throw an IllegalArgumentException.\n+     * In no case will it return a string of length greater than maxWidth.\n+     *\n+     * @param maxWidth maximum length of result string\n+     **/\n+    public static String abbreviate(String s, int maxWidth) {\n+        return abbreviate(s, 0, maxWidth);\n+    }\n+\n+    /**\n+     * Turn \"Now is the time for all good men\" into \"...is the time for...\"\n+     * <p>\n+     * Works like abbreviate(String, int), but allows you to specify a \"left edge\"\n+     * offset.  Note that this left edge is not necessarily going to be the leftmost\n+     * character in the result, or the first\n+     * character following the ellipses, but it will appear somewhere in the result.\n+     * In no case will it return a string of length greater than maxWidth.\n+     *\n+     * @param offset left edge of source string\n+     * @param maxWidth maximum length of result string\n+     **/\n+    public static String abbreviate(String s, int offset, int maxWidth) {\n+        if (maxWidth < 4)\n+            throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");\n+        if (s.length() <= maxWidth)\n+            return s;\n+        if (offset > s.length())\n+            offset = s.length();\n+        if ((s.length() - offset) < (maxWidth-3))\n+            offset = s.length() - (maxWidth-3);\n+        if (offset <= 4)\n+            return s.substring(0, maxWidth-3) + \"...\";\n+        if (maxWidth < 7)\n+            throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");\n+        if ((offset + (maxWidth-3)) < s.length())\n+            return \"...\" + abbreviate(s.substring(offset), maxWidth-3);\n+        return \"...\" + s.substring(s.length() - (maxWidth-3));\n+    }\n+\n+    // Difference\n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * Compare two strings, and return the portion where they differ.\n+     * (More precisely, return the remainder of the second string,\n+     * starting from where it's different from the first.)\n+     * <p>\n+     * E.g. strdiff(\"i am a machine\", \"i am a robot\") -> \"robot\"\n+     *\n+     * @return the portion of s2 where it differs from s1; returns the empty string (\"\") if they are equal\n+     **/\n+    public static String difference(String s1, String s2) {\n+        int at = differenceAt(s1, s2);\n+        if (at == -1)\n+            return \"\";\n+        return s2.substring(at);\n+    }\n+\n+    /**\n+     * Compare two strings, and return the index at which the strings begin to differ\n+     * <p>\n+     * E.g. strdiff(\"i am a machine\", \"i am a robot\") -> 7\n+     *\n+     * @return the index where s2 and s1 begin to differ; -1 if they are equal\n+     **/\n+    public static int differenceAt(String s1, String s2)\n+    {\n+        int i;\n+        for (i=0; i<s1.length() && i<s2.length(); ++i) {\n+            if (s1.charAt(i) != s2.charAt(i)) {\n+                break;\n+            }\n+        }\n+        if (i<s2.length() || i<s1.length()) {\n+            return i;\n+        }\n+        return -1;\n+    }\n+\n \n     // Misc\n     //--------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n- * @version $Id: StringUtilsTest.java,v 1.13 2003/01/20 22:15:13 dlr Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.14 2003/03/17 05:28:37 alex Exp $\n  */\n public class StringUtilsTest extends TestCase {\n \n         assertEquals(\"containsOnly(String3, chars3) success\", true, StringUtils.containsOnly(str3, chars3));\n     }\n \n+    public void testAbbreviate()\n+    {\n+        assertEquals(\"abbreviate(String,int) failed\",\n+\t\t     \"short\", StringUtils.abbreviate(\"short\", 10));\n+        assertEquals(\"abbreviate(String,int) failed\",\n+\t\t     \"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n+\n+        String raspberry = \"raspberry peach\";\n+        assertEquals(\"abbreviate(String,int) failed (one past limit)\",\n+\t\t     \"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n+        assertEquals(\"abbreviate(String,int) (at limit)\",\n+\t\t     \"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n+        assertEquals(\"abbreviate(String,int) (one below limit)\",\n+\t\t     \"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n+\n+        assertEquals(\"abbreviate(String,int,int) failed\",\n+                \"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n+\n+        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n+        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n+        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n+        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n+\n+    }\n+\n+    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth)\n+    {\n+        String abcdefghijklmno = \"abcdefghijklmno\";\n+        String message = \"abbreviate(String,int,int) failed\";\n+        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n+        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n+            assertTrue(message + \" -- should contain offset character\",\n+                    actual.indexOf((char)('a'+offset)) != -1);\n+        }\n+        assertTrue(message + \" -- should not be greater than maxWidth\",\n+                actual.length() <= maxWidth);\n+        assertEquals(message, expected, actual);\n+    }\n+\n+    public void testDifference()\n+    {\n+        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n+        assertEquals(\"\", StringUtils.difference(\"foo\", \"foo\"));\n+        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n+    }\n+\n+    public void testDifferenceAt()\n+    {\n+        assertEquals(7, StringUtils.differenceAt(\"i am a machine\", \"i am a robot\"));\n+        assertEquals(-1, StringUtils.differenceAt(\"foo\", \"foo\"));\n+        assertEquals(0, StringUtils.differenceAt(\"i am a robot\", \"you are a robot\"));\n+    }\n+\n }\n ", "timestamp": 1047878917, "metainfo": ""}