{"sha": "9ef58479afdbc67a7f4fd4c9cd6ea4c033ec6fff", "log": "Add to ArrayUtils and test it   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n /**\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: ArrayUtils.java,v 1.4 2002/11/16 10:41:03 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.5 2002/11/16 12:56:43 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     public ArrayUtils() {\n     }\n \n+    // Basic methods handling multi-dimensional arrays\n     //--------------------------------------------------------------------------\n     \n     /**\n      *\n      * <p>The format is that of Java source code, for example {a,b}.</p>\n      * \n-     * @param array  the array to get a toString for, may not be <code>null</code>\n+     * @param array  the array to get a toString for, may be <code>null</code>\n      * @return a String representation of the array, '{}' if <code>null</code> passed in\n      */\n     public static String toString(Object array) {\n         }\n         return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n     }\n+    \n+    /**\n+     * <p>Get a hashCode for an array handling multi-dimensional arrays correctly.</p>\n+     * \n+     * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n+     * \n+     * @param array  the array to get a hashCode for, may be <code>null</code>\n+     * @return a hashCode for the array\n+     */\n+    public static int hashCode(Object array) {\n+        return new HashCodeBuilder().append(array).toHashCode();\n+    }\n+    \n+    /**\n+     * <p>Compares two arrays, using equals(), handling multi-dimensional arrays\n+     * correctly.</p>\n+     * \n+     * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n+     * \n+     * @param array1  the array to get a hashCode for, may be <code>null</code>\n+     * @param array2  the array to get a hashCode for, may be <code>null</code>\n+     * @return <code>true</code> if the arrays are equal\n+     */\n+    public static boolean isEquals(Object array1, Object array2) {\n+        return new EqualsBuilder().append(array1, array2).isEquals();\n+    }\n+    \n+    //--------------------------------------------------------------------------\n     \n     /**\n      * <p>Converts the given array into a {@link Map}. Each element of the array\n      * <p>Shallow clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>The objecs in the array are not cloned.</p>\n-     * \n-     * @param array  the array to shallow clone, may not be <code>null</code>\n+     * <p>The objecs in the array are not cloned, thus there is no special\n+     * handling for multi-dimensional arrays.</p>\n+     * \n+     * @param array  the array to shallow clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n+     */\n+    public static char[] clone(char[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (char[]) array.clone();\n+    }\n+    \n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n+    public static boolean isSameLength(char[] array1, char[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n     public static boolean isSameLength(byte[] array1, byte[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n     /**\n      * <p>Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.</p>\n+     * \n+     * <p>Primitive arrays may be compared using this method too.</p>\n      * \n      * @param array1 the first array, must not be <code>null</code>\n      * @param array2 the second array, must not be <code>null</code>\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * <http://www.apache.org/>.\n  */\n \n+import java.util.Arrays;\n import java.util.Map;\n \n import junit.framework.Test;\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n- * @version $Id: ArrayUtilsTest.java,v 1.1 2002/10/13 22:42:59 scolebourne Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.2 2002/11/16 12:56:44 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testToString() {\n+        assertEquals(\"{}\", ArrayUtils.toString(null));\n+        assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\n+        assertEquals(\"{}\", ArrayUtils.toString(new String[0]));\n+        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}));\n+        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}));\n+        \n+        assertEquals(\"<empty>\", ArrayUtils.toString(null, \"<empty>\"));\n+        assertEquals(\"{}\", ArrayUtils.toString(new Object[0], \"<empty>\"));\n+        assertEquals(\"{}\", ArrayUtils.toString(new String[0], \"<empty>\"));\n+        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}, \"<empty>\"));\n+        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}, \"<empty>\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testHashCode() {\n+        long[][] array1 = new long[][] {{2,5}, {4,5}};\n+        long[][] array2 = new long[][] {{2,5}, {4,6}};\n+        assertEquals(true, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));\n+        assertEquals(false, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));\n+        \n+        Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};\n+        Object[] array4 = new Object[] {\"AB\"};\n+        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));\n+        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEquals() {\n+        long[][] array1 = new long[][] {{2,5}, {4,5}};\n+        long[][] array2 = new long[][] {{2,5}, {4,6}};\n+        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n+        \n+        Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};\n+        Object[] array4 = new Object[] {\"AB\"};\n+        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n+        assertEquals(true, ArrayUtils.isEquals(array3, array4));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testToMap() {\n         Map map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n         \n         try {\n             ArrayUtils.toMap(null);\n             fail(\"exception expected\");\n-        } catch (IllegalArgumentException e) {\n-            // expected.\n-        }\n-        \n+        } catch (IllegalArgumentException ex) {}\n         try {\n             ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"short\"}});\n             fail(\"exception expected\");\n-        } catch (IllegalArgumentException e) {\n-            // expected.\n-        }\n-        \n+        } catch (IllegalArgumentException ex) {}\n         try {\n             ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, \"illegal type\"});\n             fail(\"exception expected\");\n-        } catch (IllegalArgumentException e) {\n-            // expected.\n-        }\n-        \n+        } catch (IllegalArgumentException ex) {}\n         try {\n             ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, null});\n             fail(\"exception expected\");\n-        } catch (IllegalArgumentException e) {\n-            // expected.\n-        }\n+        } catch (IllegalArgumentException ex) {}\n         \n         map = ArrayUtils.toMap(new Object[] {new Map.Entry() {\n             public Object getKey() {\n         assertEquals(\"bar\", map.get(\"foo\"));\n     }\n \n-\n-\n+    //-----------------------------------------------------------------------\n+    public void testClone() {\n+        assertEquals(null, ArrayUtils.clone((Object[]) null));\n+        Object[] original1 = new Object[0];\n+        Object[] cloned1 = ArrayUtils.clone(original1);\n+        assertTrue(Arrays.equals(original1, cloned1));\n+        assertTrue(original1 != cloned1);\n+        \n+        StringBuffer buf = new StringBuffer(\"pick\");\n+        original1 = new Object[] {buf, \"a\", new String[] {\"stick\"}};\n+        cloned1 = ArrayUtils.clone(original1);\n+        assertTrue(Arrays.equals(original1, cloned1));\n+        assertTrue(original1 != cloned1);\n+        assertSame(original1[0], cloned1[0]);\n+        assertSame(original1[1], cloned1[1]);\n+        assertSame(original1[2], cloned1[2]);\n+    }\n+\n+    public void testCloneBoolean() {\n+        boolean[] original = new boolean[] {true, false};\n+        boolean[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneLong() {\n+        long[] original = new long[] {0L, 1L};\n+        long[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneInt() {\n+        int[] original = new int[] {5, 8};\n+        int[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneShort() {\n+        short[] original = new short[] {1, 4};\n+        short[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneChar() {\n+        char[] original = new char[] {'a', '4'};\n+        char[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneByte() {\n+        byte[] original = new byte[] {1, 6};\n+        byte[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneDouble() {\n+        double[] original = new double[] {2.4d, 5.7d};\n+        double[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneFloat() {\n+        float[] original = new float[] {2.6f, 6.4f};\n+        float[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSameLength() {\n+        Object[] nullArray = null;\n+        Object[] emptyArray = new Object[0];\n+        Object[] oneArray = new Object[] {\"pick\"};\n+        Object[] twoArray = new Object[] {\"pick\", \"stick\"};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+\n+    public void testSameLengthBoolean() {\n+        boolean[] nullArray = null;\n+        boolean[] emptyArray = new boolean[0];\n+        boolean[] oneArray = new boolean[] {true};\n+        boolean[] twoArray = new boolean[] {true, false};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthLong() {\n+        long[] nullArray = null;\n+        long[] emptyArray = new long[0];\n+        long[] oneArray = new long[] {0L};\n+        long[] twoArray = new long[] {0L, 76L};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthInt() {\n+        int[] nullArray = null;\n+        int[] emptyArray = new int[0];\n+        int[] oneArray = new int[] {4};\n+        int[] twoArray = new int[] {5, 7};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthShort() {\n+        short[] nullArray = null;\n+        short[] emptyArray = new short[0];\n+        short[] oneArray = new short[] {4};\n+        short[] twoArray = new short[] {6, 8};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthChar() {\n+        char[] nullArray = null;\n+        char[] emptyArray = new char[0];\n+        char[] oneArray = new char[] {'f'};\n+        char[] twoArray = new char[] {'d', 't'};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthByte() {\n+        byte[] nullArray = null;\n+        byte[] emptyArray = new byte[0];\n+        byte[] oneArray = new byte[] {3};\n+        byte[] twoArray = new byte[] {4, 6};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthDouble() {\n+        double[] nullArray = null;\n+        double[] emptyArray = new double[0];\n+        double[] oneArray = new double[] {1.3d};\n+        double[] twoArray = new double[] {4.5d, 6.3d};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthFloat() {\n+        float[] nullArray = null;\n+        float[] emptyArray = new float[0];\n+        float[] oneArray = new float[] {2.5f};\n+        float[] twoArray = new float[] {6.4f, 5.8f};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSameType() {\n+        try {\n+            ArrayUtils.isSameType(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ArrayUtils.isSameType(null, new Object[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ArrayUtils.isSameType(new Object[0], null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));\n+        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));\n+        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n+        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));\n+        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));\n+    }\n+    \n }", "timestamp": 1037451404, "metainfo": ""}