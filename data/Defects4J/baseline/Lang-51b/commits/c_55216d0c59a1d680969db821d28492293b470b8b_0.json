{"sha": "55216d0c59a1d680969db821d28492293b470b8b", "log": "Fix Enum equals to work correctly by reflection bug 28180, from Matthias Eichel   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enums/Enum.java\n+++ b/src/java/org/apache/commons/lang/enums/Enum.java\n  * @author Stephen Colebourne\n  * @author Chris Webb\n  * @author Mike Bowler\n- * @since 1.0\n- * @version $Id: Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @author Matthias Eichel\n+ * @since 2.1 (class existed in enum package from v1.0)\n+ * @version $Id: Enum.java,v 1.2 2004/06/01 20:54:57 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n             // classes are in the same class loader.\n             return iName.equals(((Enum) other).iName);\n         } else {\n-            // This and other are in different class loaders, we must use reflection.\n+            // This and other are in different class loaders, we must check indirectly\n+            if (other.getClass().getName().equals(this.getClass().getName()) == false) {\n+                return false;\n+            }\n             try {\n                 Method mth = other.getClass().getMethod(\"getName\", null);\n                 String name = (String) mth.invoke(other, null);\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/EnumEqualsTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Enum} class equals method.\n+ *\n+ * @author Matthias Eichel\n+ * @author Stephen Colebourne\n+ * @version $Id: EnumEqualsTest.java,v 1.1 2004/06/01 20:54:57 scolebourne Exp $\n+ */\n+public final class EnumEqualsTest extends TestCase {\n+\n+    public EnumEqualsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EnumEqualsTest.class);\n+        suite.setName(\"Enum equals Tests\");\n+        return suite;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static final class CarColorEnum extends Enum {\n+        public static final CarColorEnum BLACK = new CarColorEnum(\"black\");\n+        public static final CarColorEnum BROWN = new CarColorEnum(\"brown\");\n+        public static final CarColorEnum YELLOW = new CarColorEnum(\"yellow\");\n+        public static final CarColorEnum BLUE = new CarColorEnum(\"blue\");\n+        public static final CarColorEnum RED = new CarColorEnum(\"red\");\n+\n+        private CarColorEnum(String enumAsString) {\n+            super(enumAsString);\n+        }\n+    }\n+\n+    static final class TrafficlightColorEnum extends Enum {\n+        public static final TrafficlightColorEnum RED = new TrafficlightColorEnum(\"red\");\n+        public static final TrafficlightColorEnum YELLOW = new TrafficlightColorEnum(\"yellow\");\n+        public static final TrafficlightColorEnum GREEN = new TrafficlightColorEnum(\"green\");\n+\n+        private TrafficlightColorEnum(String enumAsString) {\n+            super(enumAsString);\n+        }\n+    }\n+\n+    static class TotallyUnrelatedClass {\n+        private final String name;\n+\n+        public TotallyUnrelatedClass(final String name) {\n+            this.name = name;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquals() {\n+        assertEquals(false, CarColorEnum.RED.equals(TrafficlightColorEnum.RED));\n+        assertEquals(false, CarColorEnum.YELLOW.equals(TrafficlightColorEnum.YELLOW));\n+        \n+        assertEquals(false, TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass(\"red\")));\n+        assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass(\"red\")));\n+        \n+        assertEquals(false, TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass(\"some\")));\n+        assertEquals(false, CarColorEnum.RED.equals(new TotallyUnrelatedClass(\"some\")));\n+    }\n+}\n--- a/src/test/org/apache/commons/lang/enums/EnumTestSuite.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumTestSuite.java\n  * Test suite for the Enum package.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumTestSuite.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id: EnumTestSuite.java,v 1.2 2004/06/01 20:54:57 scolebourne Exp $\n  */\n public class EnumTestSuite extends TestCase {\n     \n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang-Enum Tests\");\n         suite.addTest(EnumTest.suite());\n+        suite.addTest(EnumEqualsTest.suite());\n         suite.addTest(EnumUtilsTest.suite());\n         suite.addTest(ValuedEnumTest.suite());\n         return suite;", "timestamp": 1086123297, "metainfo": ""}