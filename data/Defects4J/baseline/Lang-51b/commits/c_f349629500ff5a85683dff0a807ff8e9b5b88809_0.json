{"sha": "f349629500ff5a85683dff0a807ff8e9b5b88809", "log": "Removed extra C style parens in return statements (as discussed on commons-dev).  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(Object[] array, Object objectToFind) {\n-        return (indexOf(array, objectToFind) != -1);\n+        return indexOf(array, objectToFind) != -1;\n     }\n \n     // long IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(long[] array, long valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // int IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(int[] array, int valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // short IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(short[] array, short valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // char IndexOf\n      * @since 2.1\n      */\n     public static boolean contains(char[] array, char valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // byte IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(byte[] array, byte valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // double IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(double[] array, double valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     /**\n      * @return true if value falling within tolerance is in array\n      */\n     public static boolean contains(double[] array, double valueToFind, double tolerance) {\n-        return (indexOf(array, valueToFind, 0, tolerance) != -1);\n+        return indexOf(array, valueToFind, 0, tolerance) != -1;\n     }\n \n     // float IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(float[] array, float valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // boolean IndexOf\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(boolean[] array, boolean valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+        return indexOf(array, valueToFind) != -1;\n     }\n \n     // Primitive/Object array converters\n--- a/src/java/org/apache/commons/lang/BitField.java\n+++ b/src/java/org/apache/commons/lang/BitField.java\n      * @return the selected bits\n      */\n     public int getRawValue(int holder) {\n-        return (holder & _mask);\n+        return holder & _mask;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n         if (bool == null) {\n             return false;\n         }\n-        return (bool.booleanValue() ? true : false);\n+        return bool.booleanValue() ? true : false;\n     }\n \n     /**\n         if (bool == null) {\n             return false;\n         }\n-        return (bool.booleanValue() ? false : true);\n+        return bool.booleanValue() ? false : true;\n     }\n \n     /**\n      * @return Boolean.TRUE or Boolean.FALSE as appropriate\n      */\n     public static Boolean toBooleanObject(boolean bool) {\n-        return (bool ? Boolean.TRUE : Boolean.FALSE);\n+        return bool ? Boolean.TRUE : Boolean.FALSE;\n     }\n     \n     /**\n         if (bool == null) {\n             return false;\n         }\n-        return (bool.booleanValue() ? true : false);\n+        return bool.booleanValue() ? true : false;\n     }\n     \n     /**\n         if (bool == null) {\n             return valueIfNull;\n         }\n-        return (bool.booleanValue() ? true : false);\n+        return bool.booleanValue() ? true : false;\n     }\n     \n     // Integer to Boolean methods\n      *  if zero\n      */\n     public static boolean toBoolean(int value) {\n-        return (value == 0 ? false : true);\n+        return value == 0 ? false : true;\n     }\n     \n     /**\n      *  <code>null</code> if <code>null</code>\n      */\n     public static Boolean toBooleanObject(int value) {\n-        return (value == 0 ? Boolean.FALSE : Boolean.TRUE);\n+        return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n     }\n     \n     /**\n         if (value == null) {\n             return null;\n         }\n-        return (value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE);\n+        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n     }\n     \n     /**\n      * @return one if <code>true</code>, zero if <code>false</code>\n      */\n     public static int toInteger(boolean bool) {\n-        return (bool ? 1 : 0);\n+        return bool ? 1 : 0;\n     }\n     \n     /**\n      * @return one if <code>true</code>, zero if <code>false</code>\n      */\n     public static Integer toIntegerObject(boolean bool) {\n-        return (bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);\n+        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     }\n     \n     /**\n         if (bool == null) {\n             return null;\n         }\n-        return (bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);\n+        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     }\n     \n     /**\n      * @return the appropriate value\n      */\n     public static int toInteger(boolean bool, int trueValue, int falseValue) {\n-        return (bool ? trueValue : falseValue);\n+        return bool ? trueValue : falseValue;\n     }\n     \n     /**\n         if (bool == null) {\n             return nullValue;\n         }\n-        return (bool.booleanValue() ? trueValue : falseValue);\n+        return bool.booleanValue() ? trueValue : falseValue;\n     }\n     \n     /**\n      * @return the appropriate value\n      */\n     public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n-        return (bool ? trueValue : falseValue);\n+        return bool ? trueValue : falseValue;\n     }\n     \n     /**\n         if (bool == null) {\n             return nullValue;\n         }\n-        return (bool.booleanValue() ? trueValue : falseValue);\n+        return bool.booleanValue() ? trueValue : falseValue;\n     }\n     \n     // String to Boolean methods\n         if (bool == null) {\n             return nullString;\n         }\n-        return (bool.booleanValue() ? trueString : falseString);\n+        return bool.booleanValue() ? trueString : falseString;\n     }\n     \n     // boolean to String methods\n      * @return one of the two input Strings\n      */\n     public static String toString(boolean bool, String trueString, String falseString) {\n-        return (bool ? trueString : falseString);\n+        return bool ? trueString : falseString;\n     }\n     \n     // xor methods\n         } catch (NullPointerException ex) {\n             throw new IllegalArgumentException(\"The array must not contain any null elements\");\n         }\n-        return (xor(primitive) ? Boolean.TRUE : Boolean.FALSE);\n+        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n      * @return <code>true</code> if this range contains the input character\n      */\n     public boolean contains(char ch) {\n-        return ((ch >= start && ch <= end) != negated);\n+        return (ch >= start && ch <= end) != negated;\n     }\n \n     /**\n         }\n         if (negated) {\n             if (range.negated) {\n-                return (start >= range.start && end <= range.end);\n+                return start >= range.start && end <= range.end;\n             } else {\n-                return (range.end < start || range.start > end);\n+                return range.end < start || range.start > end;\n             }\n         } else {\n             if (range.negated) {\n-                return (start == 0 && end == Character.MAX_VALUE);\n+                return start == 0 && end == Character.MAX_VALUE;\n             } else {\n-                return (start <= range.start && end >= range.end);\n+                return start <= range.start && end >= range.end;\n             }\n         }\n     }\n             return false;\n         }\n         CharRange other = (CharRange) obj;\n-        return (start == other.start && end == other.end && negated == other.negated);\n+        return start == other.start && end == other.end && negated == other.negated;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n             return false;\n         }\n         CharSet other = (CharSet) obj;\n-        return (set.equals(other.set));\n+        return set.equals(other.set);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/CharUtils.java\n+++ b/src/java/org/apache/commons/lang/CharUtils.java\n         if (isAsciiNumeric(ch) == false) {\n             throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range '0' - '9'\");\n         }\n-        return (ch - 48);\n+        return ch - 48;\n     }\n     \n     /**\n         if (isAsciiNumeric(ch) == false) {\n             return defaultValue;\n         }\n-        return (ch - 48);\n+        return ch - 48;\n     }\n     \n     /**\n      * @return true if less than 128\n      */\n     public static boolean isAscii(char ch) {\n-        return (ch < 128);\n+        return ch < 128;\n     }\n     \n     /**\n      * @return true if between 32 and 126 inclusive\n      */\n     public static boolean isAsciiPrintable(char ch) {\n-        return (ch >= 32 && ch < 127);\n+        return ch >= 32 && ch < 127;\n     }\n     \n     /**\n      * @return true if less than 32 or equals 127\n      */\n     public static boolean isAsciiControl(char ch) {\n-        return (ch < 32 || ch == 127);\n+        return ch < 32 || ch == 127;\n     }\n     \n     /**\n      * @return true if between 65 and 90 inclusive\n      */\n     public static boolean isAsciiAlphaUpper(char ch) {\n-        return (ch >= 'A' && ch <= 'Z');\n+        return ch >= 'A' && ch <= 'Z';\n     }\n     \n     /**\n      * @return true if between 97 and 122 inclusive\n      */\n     public static boolean isAsciiAlphaLower(char ch) {\n-        return (ch >= 'a' && ch <= 'z');\n+        return ch >= 'a' && ch <= 'z';\n     }\n     \n     /**\n      * @return true if between 48 and 57 inclusive\n      */\n     public static boolean isAsciiNumeric(char ch) {\n-        return (ch >= '0' && ch <= '9');\n+        return ch >= '0' && ch <= '9';\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n         if (cls == null) {\n             return false;\n         }\n-        return (cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0);\n+        return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n      * @return <code>object</code> if it is not <code>null</code>, defaultValue otherwise\n      */\n     public static Object defaultIfNull(Object object, Object defaultValue) {\n-        return (object != null ? object : defaultValue);\n+        return object != null ? object : defaultValue;\n     }\n \n     /**\n      * @since 2.1\n      */\n     public static int hashCode(Object obj) {\n-        return ((obj == null) ? 0 : obj.hashCode());\n+        return (obj == null) ? 0 : obj.hashCode();\n     }\n \n     // Identity ToString\n      * @since 2.0\n      */\n     public static String toString(Object obj) {\n-        return (obj == null ? \"\" : obj.toString());\n+        return obj == null ? \"\" : obj.toString();\n     }\n \n     /**\n      * @since 2.0\n      */\n     public static String toString(Object obj, String nullStr) {\n-        return (obj == null ? nullStr : obj.toString());\n+        return obj == null ? nullStr : obj.toString();\n     }\n \n     // Null\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n             return null;\n         }\n         str = strip(str, null);\n-        return (str.length() == 0 ? null : str);\n+        return str.length() == 0 ? null : str;\n     }\n \n     /**\n      * @since 2.0\n      */\n     public static String stripToEmpty(String str) {\n-        return (str == null ? EMPTY : strip(str, null));\n+        return str == null ? EMPTY : strip(str, null);\n     }\n \n     /**\n      *  both <code>null</code>\n      */\n     public static boolean equals(String str1, String str2) {\n-        return (str1 == null ? str2 == null : str1.equals(str2));\n+        return str1 == null ? str2 == null : str1.equals(str2);\n     }\n \n     /**\n      *  both <code>null</code>\n      */\n     public static boolean equalsIgnoreCase(String str1, String str2) {\n-        return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));\n+        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);\n     }\n \n     // IndexOf\n         if (isEmpty(str)) {\n             return false;\n         }\n-        return (str.indexOf(searchChar) >= 0);\n+        return str.indexOf(searchChar) >= 0;\n     }\n \n     /**\n         if (str == null || searchStr == null) {\n             return false;\n         }\n-        return (str.indexOf(searchStr) >= 0);\n+        return str.indexOf(searchStr) >= 0;\n     }\n \n     // IndexOfAny chars\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n      *  than the required version\n      */\n     public static boolean isJavaVersionAtLeast(float requiredVersion) {\n-        return (JAVA_VERSION_FLOAT >= requiredVersion);\n+        return JAVA_VERSION_FLOAT >= requiredVersion;\n     }\n     \n     /**\n      * @since 2.0\n      */\n     public static boolean isJavaVersionAtLeast(int requiredVersion) {\n-        return (JAVA_VERSION_INT >= requiredVersion);\n+        return JAVA_VERSION_INT >= requiredVersion;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n //            }\n //        }\n //\n-//        return (stringBuffer.toString());\n+//        return stringBuffer.toString();\n //    }\n \n     // Wrapping\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  *       super(\"Plus\");\n  *     }\n  *     public int eval(int a, int b) {\n- *       return (a + b);\n+ *       return a + b;\n  *     }\n  *   }\n  *   public static final OperationEnum MINUS = new MinusOperation();\n  *       super(\"Minus\");\n  *     }\n  *     public int eval(int a, int b) {\n- *       return (a - b);\n+ *       return a - b;\n  *     }\n  *   }\n  *\n--- a/src/java/org/apache/commons/lang/enums/Enum.java\n+++ b/src/java/org/apache/commons/lang/enums/Enum.java\n  *       super(\"Plus\");\n  *     }\n  *     public int eval(int a, int b) {\n- *       return (a + b);\n+ *       return a + b;\n  *     }\n  *   }\n  *   public static final OperationEnum MINUS = new MinusOperation();\n  *       super(\"Minus\");\n  *     }\n  *     public int eval(int a, int b) {\n- *       return (a - b);\n+ *       return a - b;\n  *     }\n  *   }\n  *\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n      * @since 2.0\n      */\n     public static boolean isThrowableNested() {\n-        return (THROWABLE_CAUSE_METHOD != null);\n+        return THROWABLE_CAUSE_METHOD != null;\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n             }\n \n         }\n-        return (msg.length() > 0 ? msg.toString() : null);\n+        return msg.length() > 0 ? msg.toString() : null;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n      *  range by <code>double</code> comparison\n      */\n     public boolean containsDouble(double value) {\n-        return (value >= min && value <= max);\n+        return value >= min && value <= max;\n     }\n \n     // Range tests\n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n      *  range by <code>float</code> comparison\n      */\n     public boolean containsFloat(float value) {\n-        return (value >= min && value <= max);\n+        return value >= min && value <= max;\n     }\n \n     // Range tests\n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n      *  range by <code>int</code> comparison\n      */\n     public boolean containsInteger(int value) {\n-        return (value >= min && value <= max);\n+        return value >= min && value <= max;\n     }\n \n     // Range tests\n             return false;\n         }\n         IntRange range = (IntRange) obj;\n-        return (min == range.min && max == range.max);\n+        return min == range.min && max == range.max;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/math/JVMRandom.java\n+++ b/src/java/org/apache/commons/lang/math/JVMRandom.java\n      * @return the random boolean\n      */\n     public boolean nextBoolean() {\n-        return (Math.random() > 0.5);\n+        return Math.random() > 0.5;\n     }\n     /**\n      * <p>Returns the next pseudorandom, uniformly distributed float value\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n      *  range by <code>long</code> comparison\n      */\n     public boolean containsLong(long value) {\n-        return (value >= min && value <= max);\n+        return value >= min && value <= max;\n     }\n \n     // Range tests\n             return false;\n         }\n         LongRange range = (LongRange) obj;\n-        return (min == range.min && max == range.max);\n+        return min == range.min && max == range.max;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n         }\n         int compareMin = ((Comparable) min).compareTo(number);\n         int compareMax = ((Comparable) max).compareTo(number);\n-        return (compareMin <= 0 && compareMax >= 0);\n+        return compareMin <= 0 && compareMax >= 0;\n     }\n \n     // Range tests\n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n      *  range by <code>long</code> comparison\n      */\n     public boolean containsLong(long value) {\n-        return (value >= getMinimumLong() && value <= getMaximumLong());\n+        return value >= getMinimumLong() && value <= getMaximumLong();\n     }\n \n     /**\n      *  range by <code>int</code> comparison\n      */\n     public boolean containsInteger(int value) {\n-        return (value >= getMinimumInteger() && value <= getMaximumInteger());\n+        return value >= getMinimumInteger() && value <= getMaximumInteger();\n     }\n \n     /**\n     public boolean containsDouble(double value) {\n         int compareMin = NumberUtils.compare(getMinimumDouble(), value);\n         int compareMax = NumberUtils.compare(getMaximumDouble(), value);\n-        return (compareMin <= 0 && compareMax >= 0);\n+        return compareMin <= 0 && compareMax >= 0;\n     }\n \n     /**\n     public boolean containsFloat(float value) {\n         int compareMin = NumberUtils.compare(getMinimumFloat(), value);\n         int compareMax = NumberUtils.compare(getMaximumFloat(), value);\n-        return (compareMin <= 0 && compareMax >= 0);\n+        return compareMin <= 0 && compareMax >= 0;\n     }\n \n     // Range tests\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n     public int compareTo(Object obj) {\n         MutableByte other = (MutableByte) obj;\n         byte anotherVal = other.value;\n-        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableInt) {\n-            return (value == ((MutableInt) obj).intValue());\n+            return value == ((MutableInt) obj).intValue();\n         }\n         return false;\n     }\n     public int compareTo(Object obj) {\n         MutableInt other = (MutableInt) obj;\n         int anotherVal = other.value;\n-        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n     public int compareTo(Object obj) {\n         MutableLong other = (MutableLong) obj;\n         long anotherVal = other.value;\n-        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/mutable/MutableObject.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableObject.java\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableObject) {\n             Object other = ((MutableObject) obj).value;\n-            return (value == other || (value != null && value.equals(other)));\n+            return value == other || (value != null && value.equals(other));\n         }\n         return false;\n     }\n      * @return the value's hash code or <code>0</code> if the value is <code>null</code>.\n      */\n     public int hashCode() {\n-        return (value == null ? 0 : value.hashCode());\n+        return value == null ? 0 : value.hashCode();\n     }\n \n     /**\n      * @return the mutable value as a string\n      */\n     public String toString() {\n-        return (value == null ? \"null\" : value.toString());\n+        return value == null ? \"null\" : value.toString();\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableShort) {\n-            return (value == ((MutableShort) obj).shortValue());\n+            return value == ((MutableShort) obj).shortValue();\n         }\n         return false;\n     }\n     public int compareTo(Object obj) {\n         MutableShort other = (MutableShort) obj;\n         short anotherVal = other.value;\n-        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+        return value < anotherVal ? -1 : (value == anotherVal ? 0 : 1);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n         if (date1 == null || date2 == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        return (date1.getTime() == date2.getTime());\n+        return date1.getTime() == date2.getTime();\n     }\n \n     /**\n         if (cal1 == null || cal2 == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        return (cal1.getTime().getTime() == cal2.getTime().getTime());\n+        return cal1.getTime().getTime() == cal2.getTime().getTime();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n      */\n     public long getTime() {\n         if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {\n-            return (this.stopTime - this.startTime);\n+            return this.stopTime - this.startTime;\n         } else\n         if(this.runningState == STATE_UNSTARTED) {\n             return 0;\n         } else\n         if(this.runningState == STATE_RUNNING) {\n-            return (System.currentTimeMillis() - this.startTime);\n+            return System.currentTimeMillis() - this.startTime;\n         }\n         throw new RuntimeException(\"Illegal running state has occured. \");\n     }\n         if(this.splitState != STATE_SPLIT) {\n             throw new IllegalStateException(\"Stopwatch must be split to get the split time. \");\n         }\n-        return (this.stopTime - this.startTime);\n+        return this.stopTime - this.startTime;\n     }\n \n     /**", "timestamp": 1113431808, "metainfo": ""}