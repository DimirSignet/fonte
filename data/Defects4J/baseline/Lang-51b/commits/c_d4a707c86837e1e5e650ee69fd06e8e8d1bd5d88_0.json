{"sha": "d4a707c86837e1e5e650ee69fd06e8e8d1bd5d88", "log": "LANG-306 - StrBuilder appendln/appendAll/appendSeparator  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Appends an object followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param obj  the object to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(Object obj) {\n+        return append(obj).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a string followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(String str) {\n+        return append(str).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends part of a string followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(String str, int startIndex, int length) {\n+        return append(str, startIndex, length).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a string buffer followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string buffer to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(StringBuffer str) {\n+        return append(str).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends part of a string buffer followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(StringBuffer str, int startIndex, int length) {\n+        return append(str, startIndex, length).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends another string builder followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string builder to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(StrBuilder str) {\n+        return append(str).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends part of a string builder followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(StrBuilder str, int startIndex, int length) {\n+        return append(str, startIndex, length).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a char array followed by a new line to the string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param chars  the char array to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(char[] chars) {\n+        return append(chars).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a char array followed by a new line to the string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param chars  the char array to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(char[] chars, int startIndex, int length) {\n+        return append(chars, startIndex, length).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a boolean value followed by a new line to the string builder.\n+     *\n+     * @param value  the value to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(boolean value) {\n+        return append(value).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a char value followed by a new line to the string builder.\n+     *\n+     * @param ch  the value to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(char ch) {\n+        return append(ch).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends an int value followed by a new line to the string builder using <code>String.valueOf</code>.\n+     *\n+     * @param value  the value to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(int value) {\n+        return append(value).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a long value followed by a new line to the string builder using <code>String.valueOf</code>.\n+     *\n+     * @param value  the value to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(long value) {\n+        return append(value).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a float value followed by a new line to the string builder using <code>String.valueOf</code>.\n+     *\n+     * @param value  the value to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(float value) {\n+        return append(value).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a double value followed by a new line to the string builder using <code>String.valueOf</code>.\n+     *\n+     * @param value  the value to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendln(double value) {\n+        return append(value).appendNewLine();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Appends each item in an array to the builder without any separators.\n+     * Appending a null array will have no effect.\n+     * Each object is appended using {@link #append(Object)}.\n+     *\n+     * @param array  the array to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendAll(Object[] array) {\n+        if (array != null && array.length > 0) {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends each item in a collection to the builder without any separators.\n+     * Appending a null collection will have no effect.\n+     * Each object is appended using {@link #append(Object)}.\n+     *\n+     * @param coll  the collection to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendAll(Collection coll) {\n+        if (coll != null && coll.size() > 0) {\n+            Iterator it = coll.iterator();\n+            while (it.hasNext()) {\n+                append(it.next());\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends each item in an iterator to the builder without any separators.\n+     * Appending a null iterator will have no effect.\n+     * Each object is appended using {@link #append(Object)}.\n+     *\n+     * @param it  the iterator to append\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendAll(Iterator it) {\n+        if (it != null) {\n+            while (it.hasNext()) {\n+                append(it.next());\n+            }\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Appends an array placing separators between each value, but\n      * not before the first or after the last.\n      * Appending a null array will have no effect.\n                     append(separator);\n                 }\n             }\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Appends a separator if the builder is currently non-empty.\n+     * Appending a null separator will have no effect.\n+     * The separator is appended using {@link #append(String)}.\n+     * <p>\n+     * This method is useful for adding a separator each time around the\n+     * loop except the first.\n+     * <pre>\n+     * for (Iterator it = list.iterator(); it.hasNext(); ) {\n+     *   appendSeparator(\",\");\n+     *   append(it.next());\n+     * }\n+     * </pre>\n+     * Note that for this simple example, you should use\n+     * {@link #appendWithSeparators(Collection, String)}.\n+     * \n+     * @param separator  the separator to use, null means no separator\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendSeparator(String separator) {\n+        if (separator != null && size() > 0) {\n+            append(separator);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a separator if the builder is currently non-empty.\n+     * The separator is appended using {@link #append(char)}.\n+     * <p>\n+     * This method is useful for adding a separator each time around the\n+     * loop except the first.\n+     * <pre>\n+     * for (Iterator it = list.iterator(); it.hasNext(); ) {\n+     *   appendSeparator(',');\n+     *   append(it.next());\n+     * }\n+     * </pre>\n+     * Note that for this simple example, you should use\n+     * {@link #appendWithSeparators(Collection, String)}.\n+     * \n+     * @param separator  the separator to use\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendSeparator(char separator) {\n+        if (size() > 0) {\n+            append(separator);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a separator to the builder if the loop index is greater than zero.\n+     * Appending a null separator will have no effect.\n+     * The separator is appended using {@link #append(String)}.\n+     * <p>\n+     * This method is useful for adding a separator each time around the\n+     * loop except the first.\n+     * <pre>\n+     * for (int i = 0; i < list.size(); i++) {\n+     *   appendSeparator(\",\", i);\n+     *   append(list.get(i));\n+     * }\n+     * </pre>\n+     * Note that for this simple example, you should use\n+     * {@link #appendWithSeparators(Collection, String)}.\n+     * \n+     * @param separator  the separator to use, null means no separator\n+     * @param loopIndex  the loop index\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendSeparator(String separator, int loopIndex) {\n+        if (separator != null && loopIndex > 0) {\n+            append(separator);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a separator to the builder if the loop index is greater than zero.\n+     * The separator is appended using {@link #append(char)}.\n+     * <p>\n+     * This method is useful for adding a separator each time around the\n+     * loop except the first.\n+     * <pre>\n+     * for (int i = 0; i < list.size(); i++) {\n+     *   appendSeparator(\",\", i);\n+     *   append(list.get(i));\n+     * }\n+     * </pre>\n+     * Note that for this simple example, you should use\n+     * {@link #appendWithSeparators(Collection, String)}.\n+     * \n+     * @param separator  the separator to use\n+     * @param loopIndex  the loop index\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendSeparator(char separator, int loopIndex) {\n+        if (loopIndex > 0) {\n+            append(separator);\n         }\n         return this;\n     }\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n import java.util.Collections;\n import java.util.Iterator;\n \n-import org.apache.commons.lang.SystemUtils;\n-\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+\n+import org.apache.commons.lang.SystemUtils;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang.text.StrBuilder}.\n  * @version $Id$\n  */\n public class StrBuilderAppendInsertTest extends TestCase {\n+\n+    /** The system line separator. */\n+    private static final String SEP = SystemUtils.LINE_SEPARATOR;\n \n     /** Test subclass of Object, with a toString method. */\n     private static Object FOO = new Object() {\n     public void testAppendNewLine() {\n         StrBuilder sb = new StrBuilder(\"---\");\n         sb.appendNewLine().append(\"+++\");\n-        assertEquals(\"---\" + SystemUtils.LINE_SEPARATOR + \"+++\", sb.toString());\n+        assertEquals(\"---\" + SEP + \"+++\", sb.toString());\n         \n         sb = new StrBuilder(\"---\");\n         sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\n-        assertEquals(\"---#\" + SystemUtils.LINE_SEPARATOR, sb.toString());\n+        assertEquals(\"---#\" + SEP, sb.toString());\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAppend_Primitive() {\n+    public void testAppend_Boolean() {\n         StrBuilder sb = new StrBuilder();\n         sb.append(true);\n         assertEquals(\"true\", sb.toString());\n \n         sb.append(4.5d);\n         assertEquals(\"012.34.5\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_Object() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendln((Object) null);\n+        assertEquals(\"\" + SEP, sb.toString());\n+\n+        sb.appendln((Object) FOO);\n+        assertEquals(SEP + \"foo\" + SEP, sb.toString());\n+\n+        sb.appendln(new Integer(6));\n+        assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_String() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(String str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\");\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(2, count[0]);  // appendNewLine() calls append(String)\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_String_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(String str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\", 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StringBuffer() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(StringBuffer str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StringBuffer(\"foo\"));\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StringBuffer_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(StringBuffer str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StringBuffer(\"foo\"), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StrBuilder() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(StrBuilder str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StrBuilder(\"foo\"));\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StrBuilder_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(StrBuilder str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StrBuilder(\"foo\"), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_CharArray() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(char[] str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\".toCharArray());\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_CharArray_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            public StrBuilder append(char[] str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\".toCharArray(), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_Boolean() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendln(true);\n+        assertEquals(\"true\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(false);\n+        assertEquals(\"false\" + SEP, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_PrimitiveNumber() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendln(0);\n+        assertEquals(\"0\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(1L);\n+        assertEquals(\"1\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(2.3f);\n+        assertEquals(\"2.3\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(4.5d);\n+        assertEquals(\"4.5\" + SEP, sb.toString());\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testAppendAll_Array() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendAll((Object[]) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(new Object[0]);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(new Object[]{\"foo\", \"bar\", \"baz\"});\n+        assertEquals(\"foobarbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendAll_Collection() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendAll((Collection) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Collections.EMPTY_LIST);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}));\n+        assertEquals(\"foobarbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendAll_Iterator() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendAll((Iterator) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Collections.EMPTY_LIST.iterator());\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator());\n+        assertEquals(\"foobarbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testAppendWithSeparators_Array() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendWithSeparators((Object[]) null, \",\");\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testAppendSeparator_String() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(\",\");  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(\",\");\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_char() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(',');  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(',');\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_String_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(\",\", 0);  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(\",\", 1);\n+        assertEquals(\"foo,\", sb.toString());\n+        \n+        sb.appendSeparator(\",\", -1);  // no effect\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_char_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(',', 0);  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(',', 1);\n+        assertEquals(\"foo,\", sb.toString());\n+        \n+        sb.appendSeparator(',', -1);  // no effect\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testInsert() {\n \n         StrBuilder sb = new StrBuilder();", "timestamp": 1167870945, "metainfo": ""}