{"sha": "b098878d50f6450f61fcd6d75a32b13dc438663c", "log": "comments refactoring add escapeSql method   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n \n import java.io.IOException;\n import java.io.Writer;\n+import java.io.PrintWriter;\n \n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.12 2003/05/24 04:35:06 alex Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.13 2003/06/29 03:03:15 alex Exp $\n  */\n public class StringEscapeUtils {\n \n     }\n \n     /**\n+     * Unescapes any JavaScript literals found in the <code>String</code>.\n+     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n+     * unless the '\\' is preceded by another '\\'.\n+     *\n+     * @param str The <code>String</code> to unescape.\n+     * @return A new unescaped <code>String</code>.\n      * @see #unescapeJava(String)\n      */\n     public static String unescapeJavaScript(String str) {\n     }\n \n     /**\n+     * Unescapes any JavaScript literals found in the <code>String</code> to a <code>Writer</code>.\n+     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n+     * unless the '\\' is preceded by another '\\'.\n+     *\n+     * @param out The <code>Writer</code> used to output unescaped characters.\n+     * @param str The <code>String</code> to unescape.\n+\n      * @see #unescapeJava(Writer,String)\n      */\n     public static void unescapeJavaScript(Writer out, String str) throws IOException {\n      * @see </br><a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n      **/\n     public static String escapeHtml(String str) {\n-        return escapeEntities(str, Entities.HTML40);\n+        //todo: add a version that takes a Writer\n+        //todo: rewrite underlying method to use a Writer instead of a StringBuffer\n+        return Entities.HTML40.escape(str);\n     }\n \n     /**\n      * @see #escapeHtml(String)\n      **/\n     public static String unescapeHtml(String str) {\n-        return unescapeEntities(str, Entities.HTML40);\n+        return Entities.HTML40.unescape(str);\n     }\n \n     /**\n      * @see #unescapeXml(java.lang.String)\n      **/\n     public static String escapeXml(String str) {\n-        return escapeEntities(str, Entities.XML);\n+        return Entities.XML.escape(str);\n     }\n \n     /**\n      * @see #escapeXml(String)\n      **/\n     public static String unescapeXml(String str) {\n-        return unescapeEntities(str, Entities.XML);\n-    }\n-\n-    private static String escapeEntities(String str, Entities entities) {\n-        return entities.escape(str);\n-    }\n-\n-    private static String unescapeEntities(String str, Entities entities) {\n-        return entities.unescape(str);\n+        return Entities.XML.unescape(str);\n+    }\n+\n+    /**\n+     * Escapes the characters in a <code>String</code> to be suitable to pass to\n+     * an SQL query.  For example,\n+     * <code>statement.executeQuery(\"SELECT * FROM MOVIES WHERE TITLE='\" + StringEscapeUtils.escapeSql(\"McHale's Navy\") + \"'\");</code>\n+     * Presently, this method only turns single-quotes into doubled single-quotes.\n+     * It does not handle the cases of percent (%) or underscore (_) for use in LIKE clauses.\n+     * see http://www.jguru.com/faq/view.jsp?EID=8881\n+     * @param s\n+     * @return\n+     */\n+    public static String escapeSql(String s)\n+    {\n+        return StringUtils.replace(s, \"'\", \"''\");\n     }\n \n }", "timestamp": 1056855795, "metainfo": ""}