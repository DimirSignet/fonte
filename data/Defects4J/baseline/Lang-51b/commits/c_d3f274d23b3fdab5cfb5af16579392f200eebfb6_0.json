{"sha": "d3f274d23b3fdab5cfb5af16579392f200eebfb6", "log": "Replace internal use of the magic number -1 with a new constant INDEX_NOT_FOUND. Javadoc changes: Use the active voice \"Finds...\" (was \"Find...\"), mention INDEX_NOT_FOUND, and other minor Javadoc nit picking.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n     public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n \n     /**\n+     * The index value when an element is not found in a list or array: <code>-1</code>.\n+     * This value is returned by methods in this class and can also be used in comparisons with values returned by\n+     * various method from {@link java.util.List}.\n+     */\n+    public static final int INDEX_NOT_FOUND = -1;\n+\n+    /**\n      * <p>ArrayUtils instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n      *\n      *     {\"BLUE\", \"#0000FF\"}});\n      * </pre>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      *\n      * @param array  an array whose elements are either a {@link java.util.Map.Entry} or\n      *  an Array containing at least two elements, may be <code>null</code>\n      * <p>The objects in the array are not cloned, thus there is no special\n      * handling for multi-dimensional arrays.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to shallow clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      *\n      * <p>There is no special handling for multi-dimensional arrays.</p>\n      *\n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     /**\n      * <p>Reverses the order of the given array.</p>\n      * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * <p>This method does nothing for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     // Object IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given object in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given object in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the index of the object within the array, \n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(Object[] array, Object objectToFind) {\n         return indexOf(array, objectToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given object in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given object in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return <code>-1</code>.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the index to start searching at\n      * @return the index of the object within the array starting at the index,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 }\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given object within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given object within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the last index of the object within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(Object[] array, Object objectToFind) {\n         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given object in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return <code>-1</code>. A startIndex larger than\n+     * <p>Finds the last index of the given object in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than\n      * the array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the object within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 }\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(Object[] array, Object objectToFind) {\n-        return indexOf(array, objectToFind) != -1;\n+        return indexOf(array, objectToFind) != INDEX_NOT_FOUND;\n     }\n \n     // long IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(long[] array, long valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(long[] array, long valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(long[] array, long valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(long[] array, long valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // int IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(int[] array, int valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(int[] array, int valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(int[] array, int valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(int[] array, int valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // short IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(short[] array, short valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(short[] array, short valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(short[] array, short valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(short[] array, short valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // char IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      * @since 2.1\n      */\n     public static int indexOf(char[] array, char valueToFind) {\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      * @since 2.1\n      */\n     public static int indexOf(char[] array, char valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      * @since 2.1\n      */\n     public static int lastIndexOf(char[] array, char valueToFind) {\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      * @since 2.1\n      */\n     public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @since 2.1\n      */\n     public static boolean contains(char[] array, char valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // byte IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(byte[] array, byte valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(byte[] array, byte valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(byte[] array, byte valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {\n         if (array == null) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(byte[] array, byte valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // double IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(double[] array, double valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value within a given tolerance in the array.\n+     * <p>Finds the index of the given value within a given tolerance in the array.\n      * This method will return the index of the first value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param tolerance tolerance of the search\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(double[] array, double valueToFind, double tolerance) {\n         return indexOf(array, valueToFind, 0, tolerance);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(double[] array, double valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the index of the given value in the array starting at the given index.\n      * This method will return the index of the first value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @param tolerance tolerance of the search\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value within a given tolerance in the array.\n+     * <p>Finds the last index of the given value within a given tolerance in the array.\n      * This method will return the index of the last value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param tolerance tolerance of the search\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value in the array starting at the given index.\n      * This method will return the index of the last value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @param tolerance  search for value within plus/minus this amount\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(double[] array, double valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return true if value falling within tolerance is in array\n      */\n     public static boolean contains(double[] array, double valueToFind, double tolerance) {\n-        return indexOf(array, valueToFind, 0, tolerance) != -1;\n+        return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND;\n     }\n \n     // float IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(float[] array, float valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(float[] array, float valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(float[] array, float valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(float[] array, float valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // boolean IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(boolean[] array, boolean valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n     /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * <p>Finds the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n+     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>\n+     *  array input\n      */\n     public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n             startIndex = 0;\n                 return i;\n             }\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+        return INDEX_NOT_FOUND;\n+    }\n+\n+    /**\n+     * <p>Finds the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if \n+     * <code>null</code> array input.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(boolean[] array, boolean valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n     /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n+     * <p>Finds the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than \n+     * the array length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         }\n         if (startIndex < 0) {\n-            return -1;\n+            return INDEX_NOT_FOUND;\n         } else if (startIndex >= array.length) {\n             startIndex = array.length - 1;\n         }\n                 return i;\n             }\n         }\n-        return -1;\n+        return INDEX_NOT_FOUND;\n     }\n \n     /**\n      * @return <code>true</code> if the array contains the object\n      */\n     public static boolean contains(boolean[] array, boolean valueToFind) {\n-        return indexOf(array, valueToFind) != -1;\n+        return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     }\n \n     // Primitive/Object array converters\n     /**\n      * <p>Converts an array of object Longs to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Long</code> array, may be <code>null</code>\n      * @return a <code>long</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Long</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive longs to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>long</code> array\n      * @return a <code>Long</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Integers to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Integer</code> array, may be <code>null</code>\n      * @return an <code>int</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Integer</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive ints to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  an <code>int</code> array\n      * @return an <code>Integer</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Shorts to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Short</code> array, may be <code>null</code>\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Short</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive shorts to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>short</code> array\n      * @return a <code>Short</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Bytes to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Byte</code> array, may be <code>null</code>\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Byte</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive bytes to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>byte</code> array\n      * @return a <code>Byte</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Doubles to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Double</code> array, may be <code>null</code>\n      * @return a <code>double</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Double</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive doubles to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>double</code> array\n      * @return a <code>Double</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Floats to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Float</code> array, may be <code>null</code>\n      * @return a <code>float</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Float</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive floats to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>float</code> array\n      * @return a <code>Float</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Booleans to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @return a <code>boolean</code> array, <code>null</code> if null array input\n     /**\n      * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n      * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n     /**\n      * <p>Converts an array of primitive booleans to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      * \n      * @param array  a <code>boolean</code> array\n      * @return a <code>Boolean</code> array, <code>null</code> if null array input\n      */\n     public static Object[] removeElement(Object[] array, Object element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static boolean[] removeElement(boolean[] array, boolean element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static byte[] removeElement(byte[] array, byte element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static char[] removeElement(char[] array, char element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static double[] removeElement(double[] array, double element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static float[] removeElement(float[] array, float element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static int[] removeElement(int[] array, int element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static long[] removeElement(long[] array, long element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);\n      */\n     public static short[] removeElement(short[] array, short element) {\n         int index = indexOf(array, element);\n-        if (index == -1) {\n+        if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n         } \n         return remove(array, index);", "timestamp": 1145254012, "metainfo": ""}