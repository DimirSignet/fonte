{"sha": "756f118be5be30a47ac4a15bec6db2cd2736f406", "log": "Fix some Checkstyle and PMD warnings. Extract constants from in-lined '\\n' and '\\r' in StringUtils.java.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharUtils.java\n+++ b/src/java/org/apache/commons/lang/CharUtils.java\n     private static final String[] CHAR_STRING_ARRAY = new String[128];\n     private static final Character[] CHAR_ARRAY = new Character[128];\n     \n+    /**\n+     * <code>\\u000a</code> linefeed LF ('\\n').\n+     * \n+     * @see <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#101089\">JLF: Escape Sequences\n+     *      for Character and String Literals</a>\n+     * @since 2.2\n+     */\n+    public static final char LF = '\\n';\n+\n+    /**\n+     * <code>\\u000d</code> carriage return CR ('\\r').\n+     * \n+     * @see <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#101089\">JLF: Escape Sequences\n+     *      for Character and String Literals</a>\n+     * @since 2.2\n+     */\n+    public static final char CR = '\\r';\n+    \n+\n     static {\n         for (int i = 127; i >= 0; i--) {\n             CHAR_STRING_ARRAY[i] = CHAR_STRING.substring(i, i + 1);\n             CHAR_ARRAY[i] = new Character((char) i);\n         }\n     }\n-    \n+\n     /**\n      * <p><code>CharUtils</code> instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as <code>CharUtils.toString('c');</code>.</p>\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n \n         if (str.length() == 1) {\n             char ch = str.charAt(0);\n-            if (ch == '\\r' || ch == '\\n') {\n+            if (ch == CharUtils.CR || ch == CharUtils.LF) {\n                 return EMPTY;\n             } else {\n                 return str;\n         int lastIdx = str.length() - 1;\n         char last = str.charAt(lastIdx);\n \n-        if (last == '\\n') {\n-            if (str.charAt(lastIdx - 1) == '\\r') {\n+        if (last == CharUtils.LF) {\n+            if (str.charAt(lastIdx - 1) == CharUtils.CR) {\n                 lastIdx--;\n             }\n-        } else if (last == '\\r') {\n+        } else if (last == CharUtils.CR) {\n             // why is this block empty?\n             // just to skip incrementing the index?\n           ;\n         int lastIdx = strLen - 1;\n         String ret = str.substring(0, lastIdx);\n         char last = str.charAt(lastIdx);\n-        if (last == '\\n') {\n-            if (ret.charAt(lastIdx - 1) == '\\r') {\n+        if (last == CharUtils.LF) {\n+            if (ret.charAt(lastIdx - 1) == CharUtils.CR) {\n                 return ret.substring(0, lastIdx - 1);\n             }\n         }\n             return EMPTY;\n         }\n         char last = str.charAt(lastIdx);\n-        if (last == '\\n') {\n-            if (str.charAt(lastIdx - 1) == '\\r') {\n+        if (last == CharUtils.LF) {\n+            if (str.charAt(lastIdx - 1) == CharUtils.CR) {\n                 lastIdx--;\n             }\n         } else {\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n         if (length < 0) {\n             throw new StringIndexOutOfBoundsException(length);\n         }\n-        if (length == size) {\n-            // ok\n-        } else if (length < size) {\n+        if (length < size) {\n             size = length;\n         } else {\n             ensureCapacity(length);\n     /**\n      * Copies part of the builder's character array into a new character array.\n      * \n-     * @param startIndex  the start index, inclusive, must be valid\n-     * @param endIndex  the end index, exclusive, must be valid except\n-     *  that if too large it is treated as end of string\n+     * @param startIndex\n+     *            the start index, inclusive, must be valid\n+     * @param endIndex\n+     *            the end index, exclusive, must be valid except that if too large it is treated as end of string\n      * @return a new array that holds part of the contents of the builder\n      * \n-     * @throws StringIndexOutOfBoundsException when <code>startIndex</code> is less than 0;\n-     *                   when <code>startIndex</code> is greater than <code>endIndex</code> (if <code>endIndex</code>\n-     *                   is larger than {@link #size() }, then it is massaged to equal {@link #size()} before the validation).\n+     * @throws StringIndexOutOfBoundsException\n+     *             when <code>startIndex</code> is less than 0; when <code>startIndex</code> is greater than\n+     *             <code>endIndex</code> (if <code>endIndex</code> is larger than {@link #size() }, then it is\n+     *             massaged to equal {@link #size()} before the validation).\n      */\n     public char[] toCharArray(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);", "timestamp": 1123527538, "metainfo": ""}