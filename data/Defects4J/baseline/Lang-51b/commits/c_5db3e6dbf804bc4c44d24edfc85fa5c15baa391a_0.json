{"sha": "5db3e6dbf804bc4c44d24edfc85fa5c15baa391a", "log": "Slightly increments the test coverage for NestableDelegate. Includes a rework of the getMessage(String) method. Courtesy of Nathan Beyer [nbeyer@kc.rr.com].  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n     }\n \n     /**\n-     * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbered from 0.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n-     * @return the error message, or null if the <code>Throwable</code> at the\n-     * specified index in the chain does not contain a message\n-     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n-     * negative or not less than the count of <code>Throwable</code>s in the\n-     * chain\n+     * Returns the error message of the <code>Throwable</code> in the chain of <code>Throwable</code>s at the\n+     * specified index, numbered from 0.\n+     * \n+     * @param index\n+     *            the index of the <code>Throwable</code> in the chain of <code>Throwable</code>s\n+     * @return the error message, or null if the <code>Throwable</code> at the specified index in the chain does not\n+     *         contain a message\n+     * @throws IndexOutOfBoundsException\n+     *             if the <code>index</code> argument is negative or not less than the count of <code>Throwable</code>s\n+     *             in the chain\n      * @since 2.0\n      */\n     public String getMessage(int index) {\n         Throwable t = this.getThrowable(index);\n         if (Nestable.class.isInstance(t)) {\n             return ((Nestable) t).getMessage(0);\n-        } else {\n-            return t.getMessage();\n-        }\n-    }\n-\n-    /**\n-     * Returns the full message contained by the <code>Nestable</code>\n-     * and any nested <code>Throwable</code>s.\n-     *\n-     * @param baseMsg the base message to use when creating the full\n-     * message. Should be generally be called via\n-     * <code>nestableHelper.getMessage(super.getMessage())</code>,\n-     * where <code>super</code> is an instance of {@link\n-     * java.lang.Throwable}.\n-     * @return The concatenated message for this and all nested\n-     * <code>Throwable</code>s\n+        }\n+        return t.getMessage();\n+    }\n+\n+    /**\n+     * Returns the full message contained by the <code>Nestable</code> and any nested <code>Throwable</code>s.\n+     * \n+     * @param baseMsg\n+     *            the base message to use when creating the full message. Should be generally be called via\n+     *            <code>nestableHelper.getMessage(super.getMessage())</code>, where <code>super</code> is an\n+     *            instance of {@link java.lang.Throwable}.\n+     * @return The concatenated message for this and all nested <code>Throwable</code>s\n      * @since 2.0\n      */\n     public String getMessage(String baseMsg) {\n-        StringBuffer msg = new StringBuffer();\n-        if (baseMsg != null) {\n-            msg.append(baseMsg);\n-        }\n-\n         Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n-        if (nestedCause != null) {\n-            String causeMsg = nestedCause.getMessage();\n-            if (causeMsg != null) {\n-                if (baseMsg != null) {\n-                    msg.append(\": \");\n-                }\n-                msg.append(causeMsg);\n-            }\n-\n-        }\n-        return msg.length() > 0 ? msg.toString() : null;\n-    }\n-\n-    /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> not containing a message is represented in the\n-     * array by a null. This has the effect of cause the length of the returned\n-     * array to be equal to the result of the {@link #getThrowableCount()}\n-     * operation.\n-     *\n+        String causeMsg = nestedCause == null ? null : nestedCause.getMessage();\n+        if (nestedCause == null || causeMsg == null) {\n+            return baseMsg; // may be null, which is a valid result\n+        }\n+        if (baseMsg == null) {\n+            return causeMsg;\n+        }\n+        return baseMsg + \": \" + causeMsg;\n+    }\n+\n+    /**\n+     * Returns the error message of this and any nested <code>Throwable</code>s in an array of Strings, one element\n+     * for each message. Any <code>Throwable</code> not containing a message is represented in the array by a null.\n+     * This has the effect of cause the length of the returned array to be equal to the result of the\n+     * {@link #getThrowableCount()} operation.\n+     * \n      * @return the error messages\n      * @since 2.0\n      */\n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n         {\n             assertEquals(\"message \" + i, nMsgs[i], dMsgs[i]);\n         }\n+    }\n+    \n+    public void testGetMessageString()\n+    {\n+        NestableDelegateTester1 ndt1 = new NestableDelegateTester1 (new NullPointerException ());\n+        NestableDelegate nd = new NestableDelegate (ndt1);\n+        assertNull (nd.getMessage((String)null));\n+        \n+        ndt1 = new NestableDelegateTester1 (new NullPointerException (\"null pointer\"));\n+        nd = new NestableDelegate (ndt1);\n+        assertNotNull(nd.getMessage((String)null));\n+        \n+        ndt1 = new NestableDelegateTester1 ();\n+        nd = new NestableDelegate (ndt1);\n+        assertNull(nd.getMessage((String)null));\n+        \n+        ndt1 = new NestableDelegateTester1 (\"root\");\n+        nd = new NestableDelegate (ndt1);\n+        assertNull(nd.getMessage((String)null));\n     }\n \n     public void testNestableDelegateGetMessageN()", "timestamp": 1123222579, "metainfo": ""}