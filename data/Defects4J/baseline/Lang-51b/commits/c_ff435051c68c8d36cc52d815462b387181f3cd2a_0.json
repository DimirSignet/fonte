{"sha": "ff435051c68c8d36cc52d815462b387181f3cd2a", "log": "Added tests for the creation of BigInteger from a String, and for catching bad input to isNumber.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/NumberUtilsTest.java\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @author Stephen Colebourne\n- * @version $Id: NumberUtilsTest.java,v 1.9 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: NumberUtilsTest.java,v 1.10 2003/10/11 21:20:24 tobrien Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n         assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n-        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n-        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n-        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n-        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n-        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n-        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n-        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n-        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n-        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n+        assertEquals(\"createNumber(String) 6 failed\", new BigInteger(Long.MAX_VALUE + \"0\"), NumberUtils.createNumber(Long.MAX_VALUE + \"0L\"));\n+        assertEquals(\"createNumber(String) 7 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n+        assertEquals(\"createNumber(String) 8 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n+        assertEquals(\"createNumber(String) 9 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n+        assertTrue(\"createNumber(String) 10 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n+        assertTrue(\"createNumber(String) 11 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n+        assertEquals(\"createNumber(String) 12 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n+        assertEquals(\"createNumber(String) 13 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n+        assertEquals(\"createNumber(String) 14 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n+        assertEquals(\"createNumber(String) 15 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n+        assertEquals(\"createNumber(String) 16 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n \n         // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n         if(SystemUtils.isJavaVersionAtLeast(1.3f)) { \n         assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n \n     }\n+    \n+    public void testIsNumberInvalidInput() {\n+        String val = \"0x\";\n+        assertEquals(\"isNumber() with 0x wasn't false\",  false, NumberUtils.isNumber(val));\n+        val = \"0x3x3\";\n+        assertEquals(\"isNumber() with 0x3x3 wasn't false\",  false, NumberUtils.isNumber(val));\n+        val = \"20EE-3\";\n+        assertEquals(\"isNumber() with 20EE-3 wasn't false\",  false, NumberUtils.isNumber(val));\n+        val = \"2435q\";\n+        assertEquals(\"isNumber() with 2435q wasn't false\",  false, NumberUtils.isNumber(val));\n+        val = \".\";\n+        assertEquals(\"isNumber() with . wasn't false\",  false, NumberUtils.isNumber(val));\n+\n+    }\n \n     private boolean checkCreateNumber(String val) {\n         try {\n         }\n     }\n \n+    public void testPublicNoArgConstructor() {\n+        try {\n+            NumberUtils nu = new NumberUtils();\n+        } catch( Exception e ) {\n+            fail( \"Error calling public no-arg constructor\" );\n+        }\n+    }\n+    \n }", "timestamp": 1065907224, "metainfo": ""}