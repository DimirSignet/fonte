{"sha": "61338c75c585f8142ff80c05bac72c1e9c69fd98", "log": "NestableError suggested by Stephen C.  Basically a clone of NestableException.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/exception/NestableError.java\n+package org.apache.commons.lang.exception;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+/**\n+ * The base class of all errors which can contain other exceptions.\n+ *\n+ * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+ * @see org.apache.commons.lang.exception.NestableException\n+ * @since 1.0\n+ */\n+public class NestableError extends Exception implements Nestable\n+{\n+    /**\n+     * The helper instance which contains much of the code which we\n+     * delegate to.\n+     */\n+    protected NestableDelegate delegate = new NestableDelegate(this);\n+\n+    /**\n+     * Holds the reference to the exception or error that caused\n+     * this exception to be thrown.\n+     */\n+    private Throwable cause = null;\n+\n+    /**\n+     * Constructs a new <code>NestableError</code> without specified\n+     * detail message.\n+     */\n+    public NestableError()\n+    {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new <code>NestableError</code> with specified\n+     * detail message.\n+     *\n+     * @param msg The error message.\n+     */\n+    public NestableError(String msg)\n+    {\n+        super(msg);\n+    }\n+\n+    /**\n+     * Constructs a new <code>NestableError</code> with specified\n+     * nested <code>Throwable</code>.\n+     *\n+     * @param cause the exception or error that caused this exception to be\n+     * thrown\n+     */\n+    public NestableError(Throwable cause)\n+    {\n+        super();\n+        this.cause = cause;\n+    }\n+\n+    /**\n+     * Constructs a new <code>NestableError</code> with specified\n+     * detail message and nested <code>Throwable</code>.\n+     *\n+     * @param msg    the error message\n+     * @param cause  the exception or error that caused this exception to be\n+     * thrown\n+     */\n+    public NestableError(String msg, Throwable cause)\n+    {\n+        super(msg);\n+        this.cause = cause;\n+    }\n+\n+    public Throwable getCause()\n+    {\n+        return cause;\n+    }\n+\n+    public String getMessage()\n+    {\n+        return delegate.getMessage(super.getMessage());\n+    }\n+\n+    public String getMessage(int index)\n+    {\n+        if (index == 0)\n+        {\n+            return super.getMessage();\n+        }\n+        else\n+        {\n+            return delegate.getMessage(index);\n+        }\n+    }\n+    \n+    public String[] getMessages()\n+    {\n+        return delegate.getMessages();\n+    }\n+    \n+    public Throwable getThrowable(int index)\n+    {\n+        return delegate.getThrowable(index);\n+    }\n+    \n+    public int getThrowableCount()\n+    {\n+        return delegate.getThrowableCount();\n+    }\n+    \n+    public Throwable[] getThrowables()\n+    {\n+        return delegate.getThrowables();\n+    }\n+    \n+    public int indexOfThrowable(Class type)\n+    {\n+        return delegate.indexOfThrowable(type, 0);\n+    }\n+\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return delegate.indexOfThrowable(type, fromIndex);\n+    }\n+\n+    public void printStackTrace()\n+    {\n+        delegate.printStackTrace();\n+    }\n+\n+    public void printStackTrace(PrintStream out)\n+    {\n+        delegate.printStackTrace(out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out)\n+    {\n+        delegate.printStackTrace(out);\n+    }\n+\n+    public final void printPartialStackTrace(PrintWriter out)\n+    {\n+        super.printStackTrace(out);\n+    }\n+}", "timestamp": 1030303128, "metainfo": ""}