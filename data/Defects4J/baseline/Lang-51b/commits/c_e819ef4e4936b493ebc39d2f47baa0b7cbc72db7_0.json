{"sha": "e819ef4e4936b493ebc39d2f47baa0b7cbc72db7", "log": "Slightly better unit test code coverage.  ", "commit": "\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n     }\n \n     public void testCreateNumber() {\n-        //a lot of things can go wrong\n+        // a lot of things can go wrong\n         assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n         assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n-        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n+        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n+            + (Integer.MAX_VALUE + 1L)));\n         assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n         assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n         assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n         assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n         assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n         assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n-        \n+        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n+                .createNumber(\"12345678901234567890L\"));\n+\n         // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n-        if(SystemUtils.isJavaVersionAtLeast(1.3f)) { \n-            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils.createNumber(\"1.1E-700F\"));\n+        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n+            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n+                    .createNumber(\"1.1E-700F\"));\n         }\n-        assertEquals(\n-            \"createNumber(String) 16 failed\",\n-            new Long(\"10\" + Integer.MAX_VALUE),\n-            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n-        assertEquals(\n-            \"createNumber(String) 17 failed\",\n-            new Long(\"10\" + Integer.MAX_VALUE),\n-            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE));\n-        assertEquals(\n-            \"createNumber(String) 18 failed\",\n-            new BigInteger(\"10\" + Long.MAX_VALUE),\n-            NumberUtils.createNumber(\"10\" + Long.MAX_VALUE));\n-\n+        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n+                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n+        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n+                .createNumber(\"10\" + Integer.MAX_VALUE));\n+        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n+                .createNumber(\"10\" + Long.MAX_VALUE));\n     }\n \n     public void testCreateFloat() {", "timestamp": 1122854124, "metainfo": ""}