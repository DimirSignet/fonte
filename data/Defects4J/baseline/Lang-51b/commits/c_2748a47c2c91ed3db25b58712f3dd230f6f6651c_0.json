{"sha": "2748a47c2c91ed3db25b58712f3dd230f6f6651c", "log": "Killing the lang sandbox component  ", "commit": "\n--- /dev/null\n+++ b/src/pending/DateFormatter.java\n+package org.apache.commons.lang;\n+/*\n+ * Copyright 2002,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.text.DateFormat;\n+import java.text.DateFormatSymbols;\n+import java.text.ParseException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+/*\n+ * This class was created to hold the parseCVS method extracted from DateUtils in commons-lang.\n+ * The code was originally submitted by Serge Knystautas sergek@lokitech.com. It was never\n+ * fully implemented, and has been moved to the sandbox for further development. Recent discussion\n+ * from the commons-dev mailing list:\n+ * http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=108904098032038&w=2\n+ * Moving the code to the sandbox satisfies bug is a temporary solution to\n+ * http://issues.apache.org/bugzilla/show_bug.cgi?id=22172 but this issue needs to be considered\n+ * when the class/method is further developed.\n+ */\n+public class DateFormatter {\n+\n+    /**\n+     * <p>Parses a date string formatted in CVS format.</p>\n+     * \n+     * @param dateStr  the date to parse\n+     * @return the parsed date\n+     * @throws IllegalArgumentException if the date cannot be parsed\n+     */\n+    public static Calendar parseCVS(String dateStr) {\n+        if (dateStr == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        //Get the symbol names\n+        DateFormatSymbols symbols = new DateFormatSymbols(Locale.ENGLISH);\n+\n+        DateFormat[] dateFormats = new DateFormat[0];\n+\n+        //Prep the string to parse\n+        String value = dateStr.toLowerCase().trim();\n+\n+        //Get the current date/time\n+        Calendar now = Calendar.getInstance();\n+        if (value.endsWith(\" ago\")) {\n+            //If this was a date that was \"ago\" the current time...\n+            //Strip out the ' ago' part\n+            value = value.substring(0, value.length() - 4);\n+\n+            //Split the value and unit\n+            int start = value.indexOf(\" \");\n+            if (start < 0) {\n+                throw new IllegalArgumentException(\"Could not find space in between value and unit\");\n+            }\n+            String unit = value.substring(start + 1);\n+            value = value.substring(0, start);\n+            //We support \"a week\", so we need to parse the value as \"a\"\n+            int val = 0;\n+            if (value.equals(\"a\") || value.equals(\"an\")) {\n+                val = 1;\n+            } else {\n+                val = Integer.parseInt(value);\n+            }\n+\n+            //Determine the unit\n+            if (unit.equals(\"milliseconds\") || unit.equals(\"millisecond\")) {\n+                now.add(Calendar.MILLISECOND, -val);\n+            } else if (unit.equals(\"seconds\") || unit.equals(\"second\")) {\n+                now.add(Calendar.SECOND, -val);\n+            } else if (unit.equals(\"minutes\") || unit.equals(\"minute\")) {\n+                now.add(Calendar.MINUTE, -val);\n+            } else if (unit.equals(\"hours\") || unit.equals(\"hour\")) {\n+                now.add(Calendar.HOUR, -val);\n+            } else if (unit.equals(\"days\") || unit.equals(\"day\")) {\n+                now.add(Calendar.DATE, -val);\n+            } else if (unit.equals(\"weeks\") || unit.equals(\"week\")) {\n+                now.add(Calendar.DATE, -val * 7);\n+            } else if (unit.equals(\"fortnights\") || unit.equals(\"fortnight\")) {\n+                now.add(Calendar.DATE, -val * 14);\n+            } else if (unit.equals(\"months\") || unit.equals(\"month\")) {\n+                now.add(Calendar.MONTH, -val);\n+            } else if (unit.equals(\"years\") || unit.equals(\"year\")) {\n+                now.add(Calendar.YEAR, -val);\n+            } else {\n+                throw new IllegalArgumentException(\"We do not understand that many units ago\");\n+            }\n+            return now;\n+        } else if (value.startsWith(\"last \")) {\n+            //If this was the last time a certain field was met\n+            //Strip out the 'last ' part\n+            value = value.substring(5);\n+            //Get the current date/time\n+            String[] strings = symbols.getWeekdays();\n+            for (int i = 0; i < strings.length; i++) {\n+                if (value.equalsIgnoreCase(strings[i])) {\n+                    //How many days after Sunday\n+                    int daysAgo = now.get(Calendar.DAY_OF_WEEK) - i;\n+                    if (daysAgo <= 0) {\n+                        daysAgo += 7;\n+                    }\n+                    now.add(Calendar.DATE, -daysAgo);\n+                    return now;\n+                }\n+            }\n+            strings = symbols.getMonths();\n+            for (int i = 0; i < strings.length; i++) {\n+                if (value.equalsIgnoreCase(strings[i])) {\n+                    //How many days after January\n+                    int monthsAgo = now.get(Calendar.MONTH) - i;\n+                    if (monthsAgo <= 0) {\n+                        monthsAgo += 12;\n+                    }\n+                    now.add(Calendar.MONTH, -monthsAgo);\n+                    return now;\n+                }\n+            }\n+            if (value.equals(\"week\")) {\n+                now.add(Calendar.DATE, -7);\n+                return now;\n+            }\n+            throw new IllegalArgumentException(\"We do not understand that last units\");\n+        } else if (value.equals(\"yesterday\")) {\n+            now.add(Calendar.DATE, -1);\n+            return now;\n+        } else if (value.equals(\"tomorrow\")) {\n+            now.add(Calendar.DATE, 1);\n+            return now;\n+        }\n+        //Try to parse the date a number of different ways\n+        for (int i = 0; i < dateFormats.length; i++) {\n+            try {\n+                Date datetime = dateFormats[i].parse(dateStr);\n+                Calendar cal = Calendar.getInstance();\n+                cal.setTime(datetime);\n+                return cal;\n+            } catch (ParseException pe) {\n+                //we ignore this and just keep trying\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Unable to parse '\" + dateStr + \"'.\");\n+    }\n+\n+}", "timestamp": 1125271948, "metainfo": ""}