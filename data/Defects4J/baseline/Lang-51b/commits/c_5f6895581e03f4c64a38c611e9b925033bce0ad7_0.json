{"sha": "5f6895581e03f4c64a38c611e9b925033bce0ad7", "log": "comments restructure EntityMap inner classes   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.8 2003/05/24 15:28:38 alex Exp $\n+ * @version $Id: Entities.java,v 1.9 2003/06/29 03:02:29 alex Exp $\n  */\n class Entities {\n \n     static String[][] apos = {\n         {\"apos\", \"39\"}, // XML apostrophe\n     };\n+\n+    //todo: load these from a DTD file\n \n     static String[][] iso8859_1 = {\n         {\"nbsp\", \"160\"}, // non-breaking space\n         {\"euro\", \"8364\"}, //  -- euro sign, U+20AC NEW -->\n     };\n \n+    /**\n+     * The set of entities supported by standard XML\n+     */\n     public static final Entities XML;\n+\n+    /**\n+     * The set of entities supported by HTML 3.2\n+     */\n     public static final Entities HTML32;\n+\n+    /**\n+     * The set of entities supported by HTML 4.0\n+     */\n     public static final Entities HTML40;\n \n     static {\n         entities.addEntities(html40);\n     }\n \n-    static interface IntMap {\n+    static interface EntityMap {\n         void add(String name, int value);\n \n         String name(int value);\n         int value(String name);\n     }\n \n-    static abstract class MapIntMap implements IntMap {\n-        protected Map mapNameToValue;\n-        protected Map mapValueToName;\n+    static class PrimitiveEntityMap implements EntityMap {\n+        private Map mapNameToValue = new HashMap();\n+        private IntHashMap mapValueToName = new IntHashMap();\n \n         public void add(String name, int value) {\n             mapNameToValue.put(name, new Integer(value));\n-            mapValueToName.put(new Integer(value), name);\n+            mapValueToName.put(value, name);\n         }\n \n         public String name(int value) {\n-            return (String) mapValueToName.get(new Integer(value));\n+            return (String) mapValueToName.get(value);\n         }\n \n         public int value(String name) {\n         }\n     }\n \n-    static class HashIntMap extends MapIntMap {\n-        public HashIntMap() {\n+\n+    static abstract class MapIntMap implements Entities.EntityMap {\n+        protected Map mapNameToValue;\n+        protected Map mapValueToName;\n+\n+        public void add(String name, int value) {\n+            mapNameToValue.put(name, new Integer(value));\n+            mapValueToName.put(new Integer(value), name);\n+        }\n+\n+        public String name(int value) {\n+            return (String) mapValueToName.get(new Integer(value));\n+        }\n+\n+        public int value(String name) {\n+            Object value = mapNameToValue.get(name);\n+            if (value == null)\n+                return -1;\n+            return ((Integer) value).intValue();\n+        }\n+    }\n+\n+    static class HashEntityMap extends MapIntMap {\n+        public HashEntityMap() {\n             mapNameToValue = new HashMap();\n             mapValueToName = new HashMap();\n         }\n     }\n \n-    static class TreeIntMap extends MapIntMap {\n-        public TreeIntMap() {\n+    static class TreeEntityMap extends MapIntMap {\n+        public TreeEntityMap() {\n             mapNameToValue = new TreeMap();\n             mapValueToName = new TreeMap();\n         }\n     }\n \n-    static class ArrayIntMap implements IntMap {\n+    static class LookupEntityMap extends PrimitiveEntityMap {\n+        private String[] lookupTable;\n+        private int LOOKUP_TABLE_SIZE = 256;\n+\n+        public String name(int value) {\n+            if (value < LOOKUP_TABLE_SIZE) {\n+                return lookupTable()[value];\n+            }\n+            return super.name(value);\n+        }\n+\n+        private String[] lookupTable() {\n+            if (lookupTable == null) {\n+                createLookupTable();\n+            }\n+            return lookupTable;\n+        }\n+\n+        private void createLookupTable() {\n+            lookupTable = new String[LOOKUP_TABLE_SIZE];\n+            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {\n+                lookupTable[i] = super.name(i);\n+            }\n+        }\n+    }\n+\n+    static class ArrayEntityMap implements EntityMap {\n         protected int growBy = 100;\n         protected int size = 0;\n         protected String[] names;\n         protected int[] values;\n \n-        public ArrayIntMap() {\n+        public ArrayEntityMap() {\n             names = new String[growBy];\n             values = new int[growBy];\n         }\n \n-        public ArrayIntMap(int growBy) {\n+        public ArrayEntityMap(int growBy) {\n             this.growBy = growBy;\n             names = new String[growBy];\n             values = new int[growBy];\n         }\n     }\n \n-    static class BinaryIntMap extends ArrayIntMap {\n-\n-        public BinaryIntMap() {\n-        }\n-\n-        public BinaryIntMap(int growBy) {\n+    static class BinaryEntityMap extends ArrayEntityMap {\n+\n+        public BinaryEntityMap() {\n+        }\n+\n+        public BinaryEntityMap(int growBy) {\n             super(growBy);\n         }\n \n         }\n     }\n \n-    IntMap map = new BinaryIntMap();\n+    EntityMap map = new Entities.LookupEntityMap();\n \n     public void addEntities(String[][] entityArray) {\n         for (int i = 0; i < entityArray.length; ++i) {\n      * @return A new escaped <code>String</code>.\n      */\n     public String escape(String str) {\n+        //todo: rewrite to use a Writer\n         StringBuffer buf = new StringBuffer(str.length() * 2);\n         int i;\n         for (i = 0; i < str.length(); ++i) {", "timestamp": 1056855749, "metainfo": ""}