{"sha": "fd38d2f21e2fff119cd9404e2b2742ccb1488541", "log": "Escaping unicode uses capital letters e.g. \\uABCD Found and fixed bug when unicode character is at the end of a string to unescape Added unit tests for above bug to both StringUtilsTest and StringEscapeUtilsTest StringUtils.[un]escape now call StringEscapeUtils.[un]escapeJava   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author Helge Tesgaard\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.4 2003/04/09 00:07:49 ggregory Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.5 2003/04/09 18:45:28 alex Exp $\n  */\n public class StringEscapeUtils {\n \n \n             // handle unicode\n             if (ch > 0xfff) {\n-                out.write(\"\\\\u\" + Integer.toHexString(ch));\n+                out.write(\"\\\\u\" + hex(ch));\n             } else if (ch > 0xff) {\n-                out.write(\"\\\\u0\" + Integer.toHexString(ch));\n+                out.write(\"\\\\u0\" + hex(ch));\n             } else if (ch > 0x7f) {\n-                out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+                out.write(\"\\\\u00\" + hex(ch));\n             } else if (ch < 32) {\n                 switch (ch) {\n                     case '\\b':\n                         break;\n                     default :\n                         if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + Integer.toHexString(ch));\n+                            out.write(\"\\\\u00\" + hex(ch));\n                         } else {\n-                            out.write(\"\\\\u000\" + Integer.toHexString(ch));\n+                            out.write(\"\\\\u000\" + hex(ch));\n                         }\n                         break;\n                 }\n                 }\n             }\n         }\n+    }\n+\n+    private static String hex(char ch) {\n+        return Integer.toHexString(ch).toUpperCase();\n     }\n \n     /**\n             if (inUnicode) {\n                 // if in unicode, then we're reading unicode\n                 // values in somehow\n+                unicode.append(ch);\n                 if (unicode.length() == 4) {\n                     // unicode now contains the four hex digits\n                     // which represents our unicode chacater\n                         int value = Integer.parseInt(unicode.toString(), 16);\n                         out.write((char) value);\n                         unicode.setLength(0);\n-                        unicode.setLength(4);\n                         inUnicode = false;\n                         hadSlash = false;\n                     } catch (NumberFormatException nfe) {\n                         throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n                     }\n-                } else {\n-                    unicode.append(ch);\n-                    continue;\n-                }\n+                }\n+                continue;\n             }\n             if (hadSlash) {\n                 // handle an escaped value\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Arun Mammen Thomas\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.41 2003/04/09 00:07:50 ggregory Exp $\n+ * @version $Id: StringUtils.java,v 1.42 2003/04/09 18:45:29 alex Exp $\n  */\n public class StringUtils {\n \n      * <p>So a tab becomes the characters <code>'\\\\'</code> and\n      * <code>'t'</code>.</p>\n      *\n+     * <p>As of Lang 2.0, this calls {@link StringEscapeUtils#escapeJava(java.lang.String)}\n+     * behind the scenes.  For convenience, this method is not deprecated.\n+     * </p>\n+     * @see StringEscapeUtils#escapeJava(java.lang.String)\n      * @param str String to escape values in\n      * @return String with escaped values\n      * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String escape(String str) {\n-        // improved with code from  cybertiger@cyberiantiger.org\n-        // unicode from him, and defaul for < 32's.\n-        int sz = str.length();\n-        StringBuffer buffer = new StringBuffer(2 * sz);\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n-\n-            // handle unicode\n-            if (ch > 0xfff) {\n-                buffer.append(\"\\\\u\" + Integer.toHexString(ch));\n-            } else if (ch > 0xff) {\n-                buffer.append(\"\\\\u0\" + Integer.toHexString(ch));\n-            } else if (ch > 0x7f) {\n-                buffer.append(\"\\\\u00\" + Integer.toHexString(ch));\n-            } else if (ch < 32) {\n-                switch (ch) {\n-                    case '\\b' :\n-                        buffer.append('\\\\');\n-                        buffer.append('b');\n-                        break;\n-                    case '\\n' :\n-                        buffer.append('\\\\');\n-                        buffer.append('n');\n-                        break;\n-                    case '\\t' :\n-                        buffer.append('\\\\');\n-                        buffer.append('t');\n-                        break;\n-                    case '\\f' :\n-                        buffer.append('\\\\');\n-                        buffer.append('f');\n-                        break;\n-                    case '\\r' :\n-                        buffer.append('\\\\');\n-                        buffer.append('r');\n-                        break;\n-                    default :\n-                        if (ch > 0xf) {\n-                            buffer.append(\"\\\\u00\" + Integer.toHexString(ch));\n-                        } else {\n-                            buffer.append(\"\\\\u000\" + Integer.toHexString(ch));\n-                        }\n-                        break;\n-                }\n-            } else {\n-                switch (ch) {\n-                    case '\\'' :\n-                        buffer.append('\\\\');\n-                        buffer.append('\\'');\n-                        break;\n-                    case '\"' :\n-                        buffer.append('\\\\');\n-                        buffer.append('\"');\n-                        break;\n-                    case '\\\\' :\n-                        buffer.append('\\\\');\n-                        buffer.append('\\\\');\n-                        break;\n-                    default :\n-                        buffer.append(ch);\n-                        break;\n-                }\n-            }\n-        }\n-        return buffer.toString();\n+        return StringEscapeUtils.escapeJava(str);\n     }\n \n     /**\n      * Unescapes any Java literals found in the String. For example, \n      * it will turn a sequence of '\\' and 'n' into a newline character, \n      * unless the '\\' is preceded by another '\\'.\n+     * <p>\n+     * As of Lang 2.0, this calls {@link StringEscapeUtils#unescapeJava(java.lang.String)}\n+     * behind the scenes.  For convenience, this method is not deprecated.\n+     * <p>\n+     * @see StringEscapeUtils#unescapeJava(java.lang.String)\n      */\n     public static String unescape(String str) {\n-        int sz = str.length();\n-        StringBuffer buffer = new StringBuffer(sz);\n-        StringBuffer unicode = new StringBuffer(4);\n-        boolean hadSlash = false;\n-        boolean inUnicode = false;\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n-            if(inUnicode) {\n-                // if in unicode, then we're reading unicode \n-                // values in somehow\n-                if(unicode.length() == 4) {\n-                    // unicode now contains the four hex digits \n-                    // which represents our unicode chacater\n-                    try {\n-                        int value = Integer.parseInt(unicode.toString(), 16);\n-                        buffer.append( (char)value );\n-                        unicode.setLength(0);\n-                        unicode.setLength(4);\n-                        inUnicode = false;\n-                        hadSlash = false;\n-                    } catch(NumberFormatException nfe) {\n-                        throw new NestableRuntimeException(\"Unable to parse unicode value: \"+unicode, nfe);\n-                    }\n-                } else {\n-                    unicode.append(ch);\n-                    continue;\n-                }\n-            }\n-            if(hadSlash) {\n-                // handle an escaped value\n-                hadSlash = false;\n-                switch(ch) {\n-                    case '\\\\': buffer.append('\\\\'); break;\n-                    case '\\'': buffer.append('\\''); break;\n-                    case '\\\"': buffer.append('\"'); break;\n-                    case 'r':  buffer.append('\\r'); break;\n-                    case 'f':  buffer.append('\\f'); break;\n-                    case 't':  buffer.append('\\t'); break;\n-                    case 'n':  buffer.append('\\n'); break;\n-                    case 'b':  buffer.append('\\b'); break;\n-                    case 'u':  {\n-                        // uh-oh, we're in unicode country....\n-                        inUnicode=true;\n-                        break;\n-                    }\n-                    default :\n-                        buffer.append(ch);\n-                        break;\n-                }\n-                continue;\n-            } else\n-            if(ch == '\\\\') {\n-                hadSlash = true;\n-                continue;\n-            } \n-            buffer.append(ch);\n-        }\n-        if(hadSlash) {\n-            // then we're in the weird case of a \\ at the end of the \n-            // string, let's output it anyway.\n-            buffer.append('\\\\');\n-        }\n-        return buffer.toString();\n+        return StringEscapeUtils.unescapeJava(str);\n     }\n \n     // Padding\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n import junit.textui.TestRunner;\n \n /**\n- * Unit tests {@link StringUtils}.\n+ * Unit tests for {@link StringEscapeUtils}.\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.2 2003/04/09 17:30:29 alex Exp $\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.3 2003/04/09 18:45:29 alex Exp $\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n         assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n         assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n         assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n-        assertEscapeJava(\"\\\\u00fd\", \"\\u00fd\");\n+        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n+        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n+        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n \n         assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n                 \"He didn't say, \\\"stop!\\\"\");\n-        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00a0\",\n+        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n                 \"This space is non-breaking:\\u00a0\");\n-        assertEscapeJava(\"\\\\uabcd\\\\u1234\\\\u012c\",\n+        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n                 \"\\uABCD\\u1234\\u012C\");\n     }\n \n         assertUnescapeJava(\"test\", \"test\");\n         assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n         assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n+        //foo\n+        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n+        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n+        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n     }\n \n     private void assertUnescapeJava(String unescaped, String original) throws IOException {\n-        assertEquals(\"unescape(String) failed\",\n-                unescaped, StringUtils.unescape(original));\n+        assertUnescapeJava(null, unescaped, original);\n+    }\n+\n+    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n+        String expected = unescaped;\n+        String actual = StringEscapeUtils.unescapeJava(original);\n+\n+        assertEquals(\"unescape(String) failed\" +\n+                (message == null ? \"\" : (\": \" + message)) +\n+                // we escape this so we can see it in the error message\n+                \": expected '\" + StringUtils.escape(expected) +\n+                \"' actual '\" + StringUtils.escape(actual) + \"'\",\n+                expected, actual);\n \n         StringPrintWriter writer = new StringPrintWriter();\n         StringEscapeUtils.unescapeJava(writer, original);\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.17 2003/03/29 16:17:21 alex Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.18 2003/04/09 18:45:29 alex Exp $\n  */\n public class StringUtilsTest extends TestCase {\n \n         assertEquals(\"escape(String) failed\",\n                      \"\\\\u0234\", StringUtils.escape(\"\\u0234\") );\n         assertEquals(\"escape(String) failed\",\n-                     \"\\\\u00fd\", StringUtils.escape(\"\\u00fd\") );\n+                     \"\\\\u00FD\", StringUtils.escape(\"\\u00fd\") );\n         assertEquals(\"unescape(String) failed\",\n                      \"\", StringUtils.unescape(\"\") );\n         assertEquals(\"unescape(String) failed\",\n                      \"\\ntest\\b\", StringUtils.unescape(\"\\\\ntest\\\\b\") );\n         assertEquals(\"unescape(String) failed\",\n                      \"\\u123425foo\\ntest\\b\", StringUtils.unescape(\"\\\\u123425foo\\\\ntest\\\\b\") );\n+        assertEquals(\"unescape(String) failed with unicode as final char\",\n+                     \"\\u1234\", StringUtils.unescape(\"\\\\u1234\") );\n     }\n \n     public void testGetLevenshteinDistance() {", "timestamp": 1049913929, "metainfo": ""}