{"sha": "e7f4269d0289f4d47217207ec456219db8efe47c", "log": "Fixes issue 1017 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47616701", "commit": "\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n    * @param value The value node.\n    * @param isLValue Whether it's on the left-hand side of an expr.\n    */\n-  private boolean isCollapsibleValue(Node value, boolean isLValue) {\n+  private static boolean isCollapsibleValue(Node value, boolean isLValue) {\n     switch (value.getType()) {\n       case Token.GETPROP:\n         // Do not collapse GETPROPs on arbitrary objects, because\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n-    Node name = node.getFirstChild();\n-    if (name.isName()\n-        && isNameAssignedTo(name.getString(), replacement)) {\n+    while (node.isGetProp()) {\n+      node = node.getFirstChild();\n+    }\n+    if (node.isName()\n+        && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n     }\n \n--- a/test/com/google/javascript/jscomp/ExploitAssignsTest.java\n+++ b/test/com/google/javascript/jscomp/ExploitAssignsTest.java\n     testSame(\"this.$e$ = []; this.$b$ = null;\");\n   }\n \n+  public void testIssue1017() {\n+    testSame(\"x = x.parentNode.parentNode; x = x.parentNode.parentNode;\");\n+  }\n+\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     return new PeepholeOptimizationsPass(compiler,new ExploitAssigns());", "timestamp": 1370475935, "metainfo": ""}