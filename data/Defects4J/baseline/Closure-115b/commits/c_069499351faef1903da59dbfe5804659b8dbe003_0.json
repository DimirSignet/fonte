{"sha": "069499351faef1903da59dbfe5804659b8dbe003", "log": "Reroll RemoveUnusedClassProperties patch.  Closure style code often defines value on the prototype, we want to remove those if it is the only other property set. Previously we would leave them and the RemoveUnusedPrototypeProperties pass would remove them, but now that we would otherwise back off in the face of them we want to remove them.  Additionally, if a property is exported by convention, don't remove it in any case. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49787523", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java\n      switch (n.getType()) {\n        case Token.GETPROP: {\n          String propName = n.getLastChild().getString();\n-         if (inExterns || isPinningPropertyUse(n)\n+         if (inExterns\n+             || compiler.getCodingConvention().isExported(propName)\n+             || isPinningPropertyUse(n)\n              || !isKnownClassProperty(n)) {\n            used.add(propName);\n          } else {\n   private boolean isKnownClassProperty(Node n) {\n     Preconditions.checkState(n.isGetProp());\n     Node target = n.getFirstChild();\n-    return target.isThis();\n+    return target.isThis()\n+        || (target.isGetProp()\n+            && target.getLastChild().getString().equals(\"prototype\"));\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java\n   }\n \n   public void testPrototypeProps1() {\n-    testSame(\n+    test(\n         \"function A() {this.foo = 1;}\\n\" +\n         \"A.prototype.foo = 0;\\n\" +\n         \"A.prototype.method = function() {this.foo++};\\n\" +\n+        \"new A().method()\\n\",\n+        \"function A() {1;}\\n\" +\n+        \"0;\\n\" +\n+        \"A.prototype.method = function() {0;};\\n\" +\n+        \"new A().method()\\n\");\n+  }\n+\n+  public void testPrototypeProps2() {\n+    // don't remove properties that are exported by convention\n+    testSame(\n+        \"function A() {this._foo = 1;}\\n\" +\n+        \"A.prototype._foo = 0;\\n\" +\n+        \"A.prototype.method = function() {this._foo++};\\n\" +\n         \"new A().method()\\n\");\n   }\n }", "timestamp": 1374623953, "metainfo": ""}