{"sha": "bb214c033706688d66560881312811656c9dd0d0", "log": "Add a command-line option for enable type based optimizations for the open source compiler.  R=nicksantos DELTA=47  (46 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4700   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n     private CompilationLevel compilation_level =\n         CompilationLevel.SIMPLE_OPTIMIZATIONS;\n \n+    @Option(name = \"--use_types_for_optimization\",\n+        usage = \"Experimental: perform additional optimizations \" +\n+        \"based on available information.  Inaccurate type annotations \" +\n+        \"may result in incorrect results.\")\n+    private boolean use_types_for_optimization = false;\n+\n     @Option(name = \"--warning_level\",\n         usage = \"Specifies the warning level to use. Options: \" +\n         \"QUIET, DEFAULT, VERBOSE\")\n     } else {\n       options.setCodingConvention(new ClosureCodingConvention());\n     }\n+\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n+\n     if (flags.debug) {\n       level.setDebugOptionsForCompilationLevel(options);\n+    }\n+\n+    if (flags.use_types_for_optimization) {\n+      level.setTypeBasedOptimizationOptions(options);\n     }\n \n     if (flags.generate_exports) {\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n     options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n         CheckLevel.WARNING);\n   }\n+\n+  /**\n+   * Enable additional optimizations that use type information.\n+   * @param options The CompilerOptions object to set the options on.\n+   */\n+  public void setTypeBasedOptimizationOptions(CompilerOptions options) {\n+    switch (this) {\n+      case ADVANCED_OPTIMIZATIONS:\n+        options.inferTypes = true;\n+        options.disambiguateProperties = true;\n+        options.ambiguateProperties = true;\n+        options.inlineProperties = true;\n+        break;\n+      case SIMPLE_OPTIMIZATIONS:\n+        // TODO(johnlenz): enable peephole type based optimization.\n+        break;\n+    }\n+  }\n }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n         + \"/** @type {Window} */ var window;\"\n         + \"/** @constructor */ function Element() {}\"\n         + \"Element.prototype.offsetWidth;\"\n-        + \"/** @nosideeffects */ function noSideEffects() {}\")\n+        + \"/** @nosideeffects */ function noSideEffects() {}\\n\"\n+        + \"/** @param {...*} x */ function alert(x) {}\\n\")\n   );\n \n   private List<SourceFile> externs;\n         \"var b = goog.c.b(a, {a: 1}),c;\" +\n         \"for (c in b) { b[c].call(b); }\" +\n         \"window.Foo = a;\");\n+  }\n+\n+  public void testTypedAdvanced() {\n+    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n+    args.add(\"--use_types_for_optimization\");\n+    test(\n+        \"/** @constructor */\\n\" +\n+        \"function Foo() {}\\n\" +\n+        \"Foo.prototype.handle1 = function(x, y) { alert(y); };\\n\" +\n+        \"/** @constructor */\\n\" +\n+        \"function Bar() {}\\n\" +\n+        \"Bar.prototype.handle1 = function(x, y) {};\\n\" +\n+        \"new Foo().handle1(1, 2);\\n\" +\n+        \"new Bar().handle1(1, 2);\\n\",\n+        \"alert(2)\");\n   }\n \n   public void testTypeCheckingOnWithVerbose() {", "timestamp": 1336432506, "metainfo": ""}