{"sha": "842545ae3518d18a765b846a6c436ebbffbf4b72", "log": "More IIFE handling.  R=dimvar DELTA=84  (81 added, 1 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5622   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n      */\n     private void declareArguments(Node functionNode) {\n       Node astParameters = functionNode.getFirstChild().getNext();\n+      Node iifeArgumentNode = null;\n+\n+      if (NodeUtil.isCallOrNewTarget(functionNode)) {\n+        iifeArgumentNode = functionNode.getNext();\n+      }\n+\n       Node body = astParameters.getNext();\n       FunctionType functionType =\n           JSType.toMaybeFunctionType(functionNode.getJSType());\n           for (Node astParameter : astParameters.children()) {\n             JSType paramType = jsDocParameter == null ?\n                 unknownType : jsDocParameter.getJSType();\n+            boolean inferred = paramType == null || paramType == unknownType;\n+\n+            if (iifeArgumentNode != null && inferred) {\n+              String argumentName = iifeArgumentNode.getQualifiedName();\n+              Var argumentVar =\n+                  argumentName == null || scope.getParent() == null\n+                  ? null : scope.getParent().getVar(argumentName);\n+              if (argumentVar != null && !argumentVar.isTypeInferred()) {\n+                paramType = argumentVar.getType();\n+              }\n+            }\n+\n             if (paramType == null) {\n               paramType = unknownType;\n             }\n \n-            defineSlot(astParameter, functionNode, paramType,\n-                // inferred iff this is the unknown type.\n-                unknownType == paramType);\n+            defineSlot(astParameter, functionNode, paramType, inferred);\n+\n             if (jsDocParameter != null) {\n               jsDocParameter = jsDocParameter.getNext();\n+            }\n+            if (iifeArgumentNode != null) {\n+              iifeArgumentNode = iifeArgumentNode.getNext();\n             }\n           }\n         }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"assignment to property prop of ns\\n\" +\n         \"found   : boolean\\n\" +\n         \"required: number\");\n+  }\n+\n+  public void testIIFE2() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"(function(ctor) {\" +\n+        \"  /** @type {boolean} */ ctor.prop = true;\" +\n+        \"})(Foo);\" +\n+        \"/** @return {number} */ function f() { return Foo.prop; }\",\n+        \"inconsistent return type\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testIIFE3() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"(function(ctor) {\" +\n+        \"  /** @type {boolean} */ ctor.prop = true;\" +\n+        \"})(Foo);\" +\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"f(Foo.prop);\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testIIFE4() throws Exception {\n+    testTypes(\n+        \"/** @const */ var namespace = {};\" +\n+        \"(function(ns) {\" +\n+        \"  /**\\n\" +\n+        \"   * @constructor\\n\" +\n+        \"   * @param {number} x\\n\" +\n+        \"   */\\n\" +\n+        \"   ns.Ctor = function(x) {};\" +\n+        \"})(namespace);\" +\n+        \"new namespace.Ctor(true);\",\n+        \"actual parameter 1 of namespace.Ctor \" +\n+        \"does not match formal parameter\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testIIFE5() throws Exception {\n+    // TODO(nicksantos): This behavior is currently incorrect.\n+    // To handle this case properly, we'll need to change how we handle\n+    // type resolution.\n+    testTypes(\n+        \"/** @const */ var namespace = {};\" +\n+        \"(function(ns) {\" +\n+        \"  /**\\n\" +\n+        \"   * @constructor\\n\" +\n+        \"   */\\n\" +\n+        \"   ns.Ctor = function() {};\" +\n+        \"   /** @type {boolean} */ ns.Ctor.prototype.bar = true;\" +\n+        \"})(namespace);\" +\n+        \"/** @param {namespace.Ctor} x\\n\" +\n+        \"  * @return {number} */ function f(x) { return x.bar; }\",\n+        \"Bad type annotation. Unknown type namespace.Ctor\");\n   }\n \n   public void testNotIIFE1() throws Exception {", "timestamp": 1349794719, "metainfo": ""}