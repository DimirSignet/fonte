{"sha": "c343b71ee01d27057307a167dcbfc9ac00c4201d", "log": "Add an option to enable more aggressive function inlining.  R=acleung DELTA=23  (18 added, 1 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3132   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Enhanced function inlining */\n   public boolean inlineLocalFunctions;\n+\n+  /** Assume closures capture only what they reference */\n+  public boolean assumeClosuresOnlyCaptureReferences;\n \n   /** Move code to a deeper module */\n   public boolean crossModuleCodeMotion;\n     inlineFunctions = false;\n     inlineLocalFunctions = false;\n     assumeStrictThis = false;\n+    assumeClosuresOnlyCaptureReferences = false;\n     crossModuleCodeMotion = false;\n     crossModuleMethodMotion = false;\n     inlineGetters = false;\n   /**\n    * @return Whether assumeStrictThis is set.\n    */\n-  public boolean isAssumeStrictThis() {\n+  public boolean assumeStrictThis() {\n     return assumeStrictThis;\n   }\n \n     this.assumeStrictThis = enable;\n   }\n \n+  /**\n+   * @return Whether assumeClosuresOnlyCaptureReferences is set.\n+   */\n+  public boolean assumeClosuresOnlyCaptureReferences() {\n+    return assumeClosuresOnlyCaptureReferences;\n+  }\n+\n+  /**\n+   * If true, enables enables additional optimizations.\n+   */\n+  public void setAssumeClosuresOnlyCaptureReferences(boolean enable) {\n+    this.assumeClosuresOnlyCaptureReferences = enable;\n+  }\n+\n   //////////////////////////////////////////////////////////////////////////////\n   // Enums\n \n   /** When to do the extra sanity checks */\n-  static enum LanguageMode {\n+  public static enum LanguageMode {\n     /**\n      * Tranditional JavaScript\n      */\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      boolean assumeMinimumCapture = false;\n       boolean enableBlockInlining = !isInliningForbidden();\n       return new InlineFunctions(\n           compiler,\n           options.inlineFunctions,\n           options.inlineLocalFunctions,\n           enableBlockInlining,\n-          options.isAssumeStrictThis()\n+          options.assumeStrictThis()\n               || options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT,\n-          assumeMinimumCapture);\n+          options.assumeClosuresOnlyCaptureReferences);\n     }\n   };\n ", "timestamp": 1314225338, "metainfo": ""}