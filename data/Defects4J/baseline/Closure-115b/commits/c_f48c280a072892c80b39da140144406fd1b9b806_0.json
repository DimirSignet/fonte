{"sha": "f48c280a072892c80b39da140144406fd1b9b806", "log": "Don't crash on incorrectly translated messages.  R=nicksantos DELTA=21  (18 added, 2 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4131   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ReplaceMessages.java\n+++ b/src/com/google/javascript/jscomp/ReplaceMessages.java\n \n   static final DiagnosticType BUNDLE_DOES_NOT_HAVE_THE_MESSAGE =\n       DiagnosticType.error(\"JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE\",\n-          \"Message with id = {0} cound not be found in replacement bundle\");\n+          \"Message with id = {0} could not be found in replacement bundle\");\n \n   ReplaceMessages(AbstractCompiler compiler, MessageBundle bundle,\n       boolean checkDuplicatedMessages, JsMessage.Style style,\n       JsMessage.PlaceholderReference phRef =\n           (JsMessage.PlaceholderReference) part;\n \n+      // The translated message is null\n+      if (objLitNode == null) {\n+        throw new MalformedException(\"Empty placeholder value map \" +\n+            \"for a translated message with placeholders.\", objLitNode);\n+      }\n+\n       for (Node key = objLitNode.getFirstChild(); key != null;\n            key = key.getNext()) {\n         if (key.getString().equals(phRef.getName())) {\n--- a/test/com/google/javascript/jscomp/ReplaceMessagesTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceMessagesTest.java\n         error.description);\n   }\n \n+  public void testTranslatedPlaceHolderMissMatch() {\n+    registerMessage(new JsMessage.Builder(\"MSG_A\")\n+        .appendPlaceholderReference(\"a\")\n+        .appendStringPart(\"!\")\n+        .build());\n+\n+    process(\"var MSG_A = goog.getMsg('{$a}');\");\n+    assertEquals(1, compiler.getErrors().length);\n+    JSError error = compiler.getErrors()[0];\n+    assertEquals(MESSAGE_TREE_MALFORMED, error.getType());\n+  }\n+\n   private void assertOutputEquals(String input, String output) {\n     String output1 = process(input);\n     JSError[] errors = compiler.getErrors();\n     assertEquals(output, output1);\n   }\n \n-\n   private String process(String input) {\n     compiler = new Compiler();\n     Node root = compiler.parseTestCode(input);\n     return compiler.toSource(root);\n   }\n \n-\n   private void registerMessage(JsMessage message) {\n     messages.put(message.getKey(), message);\n   }", "timestamp": 1327429900, "metainfo": ""}