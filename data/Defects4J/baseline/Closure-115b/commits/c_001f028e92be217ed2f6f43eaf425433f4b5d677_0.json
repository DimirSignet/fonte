{"sha": "001f028e92be217ed2f6f43eaf425433f4b5d677", "log": "Bring the RescopeGlobalSymbols compiler pass in accordance with Java style. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50301553", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * globals.\n    */\n   public String renamePrefixNamespace;\n+\n+  /**\n+   * Used by tests of the RescopeGlobalSymbols pass to avoid having declare 2\n+   * modules in simple cases.\n+   */\n+  boolean renamePrefixNamespaceAssumeCrossModuleNames = false;\n+\n+  void setRenamePrefixNamespaceAssumeCrossModuleNames(boolean assume) {\n+    renamePrefixNamespaceAssumeCrossModuleNames = assume;\n+  }\n \n   /** Aliases true, false, and null to variables with shorter names. */\n   public boolean aliasKeywords;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       new PassFactory(\"rescopeGlobalSymbols\", true) {\n     @Override\n     protected CompilerPass create(AbstractCompiler compiler) {\n-      return new RescopeGlobalSymbols(compiler, options.renamePrefixNamespace);\n+      return new RescopeGlobalSymbols(\n+          compiler,\n+          options.renamePrefixNamespace,\n+          options.renamePrefixNamespaceAssumeCrossModuleNames);\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n+++ b/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n  */\n package com.google.javascript.jscomp;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n  *\n  *\n  */\n-class RescopeGlobalSymbols implements CompilerPass {\n+final class RescopeGlobalSymbols implements CompilerPass {\n \n   // Appended to variables names that conflict with globalSymbolNamespace.\n   private static final String DISAMBIGUATION_SUFFIX = \"$\";\n   private final AbstractCompiler compiler;\n   private final String globalSymbolNamespace;\n   private final boolean addExtern;\n+  private final boolean assumeCrossModuleNames;\n   private final Set<String> crossModuleNames = Sets.newHashSet();\n \n-  @VisibleForTesting\n-  static boolean assumeCrossModuleNames = false;\n-\n-  RescopeGlobalSymbols(AbstractCompiler compiler, String globalSymbolNamespace,\n-      boolean addExtern) {\n+  RescopeGlobalSymbols(\n+      AbstractCompiler compiler,\n+      String globalSymbolNamespace,\n+      boolean addExtern,\n+      boolean assumeCrossModuleNames) {\n     this.compiler = compiler;\n     this.globalSymbolNamespace = globalSymbolNamespace;\n     this.addExtern = addExtern;\n-  }\n-\n-  RescopeGlobalSymbols(AbstractCompiler compiler,\n-      String globalSymbolNamespace) {\n-    this(compiler, globalSymbolNamespace, true);\n+    this.assumeCrossModuleNames = assumeCrossModuleNames;\n+  }\n+\n+  RescopeGlobalSymbols(\n+      AbstractCompiler compiler,\n+      String globalSymbolNamespace,\n+      boolean assumeCrossModuleNames) {\n+    this(compiler, globalSymbolNamespace, true, assumeCrossModuleNames);\n   }\n \n   private boolean isCrossModuleName(String name) {\n     // (If necessary the 4 traversals could be combined. They are left\n     // separate for readability reasons.)\n     // 1. turning global named function statements into var assignments.\n-    NodeTraversal.traverse(compiler, root,\n+    NodeTraversal.traverse(\n+        compiler,\n+        root,\n         new RewriteGlobalFunctionStatementsToVarAssignmentsCallback());\n     // 2. find global names than are used in more than one module. Those that\n     //    are have to be rewritten.\n \n     // Extra pass which makes all extern global symbols reference window\n     // explicitly.\n-    NodeTraversal.traverse(compiler, root,\n+    NodeTraversal.traverse(\n+        compiler,\n+        root,\n         new MakeExternsReferenceWindowExplicitly());\n   }\n \n       // add suffix to avoid shadowing the namespace. Also add a suffix\n       // if a name starts with the name of the globalSymbolNamespace and\n       // the suffix.\n-      if (!var.isExtern() && !var.isGlobal() &&\n-          (name.equals(globalSymbolNamespace) ||\n-          name.indexOf(globalSymbolNamespace + DISAMBIGUATION_SUFFIX) == 0)) {\n+      if (!var.isExtern() && !var.isGlobal()\n+          && (name.equals(globalSymbolNamespace)\n+              || name.indexOf(\n+                  globalSymbolNamespace + DISAMBIGUATION_SUFFIX) == 0)) {\n         n.setString(name + DISAMBIGUATION_SUFFIX);\n         compiler.reportCodeChange();\n       }\n       }\n       Node nameNode = var.getNameNode();\n       // The exception variable (e in try{}catch(e){}) should not be rewritten.\n-      if (nameNode != null && nameNode.getParent() != null &&\n-          nameNode.getParent().isCatch()) {\n+      if (nameNode != null && nameNode.getParent() != null\n+          && nameNode.getParent().isCatch()) {\n         return;\n       }\n       replaceSymbol(n, name, t.getInput());\n       replacement.srcref(node);\n       if (node.hasChildren()) {\n         // var declaration list: var a = 1, b = 2;\n-        Node assign = IR.assign(replacement,\n+        Node assign = IR.assign(\n+            replacement,\n             node.removeFirstChild());\n         parent.replaceChild(node, assign);\n       } else if (isCrossModule) {\n         if (!c.isName()) {\n           allName = false;\n         }\n-        if (c.isAssign() ||\n-            parent.isFor()) {\n+        if (c.isAssign() || parent.isFor()) {\n           interestingChildren.add(c);\n         }\n       }\n         return;\n       }\n       String name = n.getString();\n-      if (globalSymbolNamespace.equals(name) ||\n-          SPECIAL_EXTERNS.contains(name)) {\n+      if (globalSymbolNamespace.equals(name)\n+          || SPECIAL_EXTERNS.contains(name)) {\n         return;\n       }\n       Scope.Var var = t.getScope().getVar(name);\n         compiler.reportCodeChange();\n       }\n     }\n-\n   }\n }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n \n   @Override public void setUp() {\n     super.setUp();\n-    RescopeGlobalSymbols.assumeCrossModuleNames = true;\n   }\n \n   private static final String CLOSURE_BOILERPLATE =\n         options);\n     options.renamePrefixNamespace = \"a\";\n     options.setVariableRenaming(VariableRenamingPolicy.ALL);\n+    options.setRenamePrefixNamespaceAssumeCrossModuleNames(false);\n     WarningLevel.DEFAULT.setOptionsForWarningLevel(options);\n-\n-    RescopeGlobalSymbols.assumeCrossModuleNames = false;\n \n     test(options, code,\n         \"var b = {}; try { (0,window.use)(b.FOO); } catch (c) {}\");\n   protected CompilerOptions createCompilerOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new GoogleCodingConvention());\n+    options.setRenamePrefixNamespaceAssumeCrossModuleNames(true);\n     return options;\n   }\n }\n--- a/test/com/google/javascript/jscomp/RescopeGlobalSymbolsTest.java\n+++ b/test/com/google/javascript/jscomp/RescopeGlobalSymbolsTest.java\n  */\n public class RescopeGlobalSymbolsTest extends CompilerTestCase {\n \n-  private final String namespace = \"_\";\n+  private static final String NAMESPACE = \"_\";\n+\n+  private boolean assumeCrossModuleNames = true;\n \n   public RescopeGlobalSymbolsTest() {\n   }\n \n   @Override protected CompilerPass getProcessor(Compiler compiler) {\n-    return new RescopeGlobalSymbols(compiler, namespace, false);\n+    return new RescopeGlobalSymbols(\n+        compiler,\n+        NAMESPACE,\n+        false,\n+        assumeCrossModuleNames);\n   }\n \n   @Override public void setUp() throws Exception {\n     super.setUp();\n-    RescopeGlobalSymbols.assumeCrossModuleNames = true;\n+    assumeCrossModuleNames = true;\n   }\n \n   @Override\n   public void testVarDeclarations() {\n     test(\"var a = 1;\", \"_.a = 1;\");\n     test(\"var a = 1, b = 2, c = 3;\", \"_.a = 1; _.b = 2; _.c = 3;\");\n-    test(\"var a = 'str', b = 1, c = { foo: 'bar' }, d = function() {};\",\n+    test(\n+        \"var a = 'str', b = 1, c = { foo: 'bar' }, d = function() {};\",\n         \"_.a = 'str'; _.b = 1; _.c = { foo: 'bar' }; _.d = function() {};\");\n     test(\"if(1){var x = 1;}\", \"if(1){_.x = 1;}\");\n     test(\"var x;\", \"\");\n   }\n \n   public void testVarDeclarations_allSameModule() {\n-    RescopeGlobalSymbols.assumeCrossModuleNames = false;\n+    assumeCrossModuleNames = false;\n     testSame(\"var a = 1;\");\n     testSame(\"var a = 1, b = 2, c = 3;\");\n     testSame(\"var a = 'str', b = 1, c = { foo: 'bar' }, d = function() {};\");\n   }\n \n   public void testVarDeclarations_acrossModules() {\n-    RescopeGlobalSymbols.assumeCrossModuleNames = false;\n+    assumeCrossModuleNames = false;\n     test(createModules(\n         \"var a = 1;\", \"a\"),\n         new String[] {\"_.a = 1\", \"_.a\"});\n   }\n \n   public void testForLoops() {\n-    RescopeGlobalSymbols.assumeCrossModuleNames = false;\n+    assumeCrossModuleNames = false;\n     test(createModules(\n         \"for (var i = 0, c = 2; i < 1000; i++);\", \"c\"),\n         new String[] {\"var i;for (i = 0, _.c = 2; i < 1000; i++);\", \"_.c\"});\n   }\n \n   public void testForLoops_acrossModules() {\n-    test(\"for (var i = 0; i < 1000; i++);\",\n+    test(\n+        \"for (var i = 0; i < 1000; i++);\",\n         \"for (_.i = 0; _.i < 1000; _.i++);\");\n-    test(\"for (var i = 0, c = 2; i < 1000; i++);\",\n+    test(\n+        \"for (var i = 0, c = 2; i < 1000; i++);\",\n         \"for (_.i = 0, _.c = 2; _.i < 1000; _.i++);\");\n-    test(\"for (var i = 0, c = 2, d = 3; i < 1000; i++);\",\n+    test(\n+        \"for (var i = 0, c = 2, d = 3; i < 1000; i++);\",\n         \"for (_.i = 0, _.c = 2, _.d = 3; _.i < 1000; _.i++);\");\n-    test(\"for (var i = 0, c = 2, d = 3, e = 4; i < 1000; i++);\",\n+    test(\n+        \"for (var i = 0, c = 2, d = 3, e = 4; i < 1000; i++);\",\n         \"for (_.i = 0, _.c = 2, _.d = 3, _.e = 4; _.i < 1000; _.i++);\");\n-    test(\"for (var i = 0; i < 1000;)i++;\",\n+    test(\n+        \"for (var i = 0; i < 1000;)i++;\",\n         \"for (_.i = 0; _.i < 1000;)_.i++;\");\n-    test(\"for (var i = 0,b; i < 1000;)i++;b++\",\n+    test(\n+        \"for (var i = 0,b; i < 1000;)i++;b++\",\n         \"for (_.i = 0,_.b; _.i < 1000;)_.i++;_.b++\");\n-    test(\"var o={};for (var i in o)i++;\",\n+    test(\n+        \"var o={};for (var i in o)i++;\",\n         \"_.o={};for (_.i in _.o)_.i++;\");\n   }\n \n   public void testFunctionStatements() {\n-    test(\"function test(){}\",\n+    test(\n+        \"function test(){}\",\n         \"_.test=function (){}\");\n-    test(\"if(1)function test(){}\",\n+    test(\n+        \"if(1)function test(){}\",\n         \"if(1)_.test=function (){}\");\n     new StringCompare().testFreeCallSemantics();\n   }\n \n   public void testDeeperScopes() {\n-    test(\"var a = function(b){return b}\",\n+    test(\n+        \"var a = function(b){return b}\",\n         \"_.a = function(b){return b}\");\n-    test(\"var a = function(b){var a; return a+b}\",\n+    test(\n+        \"var a = function(b){var a; return a+b}\",\n         \"_.a = function(b){var a; return a+b}\");\n-    test(\"var a = function(a,b){return a+b}\",\n+    test(\n+        \"var a = function(a,b){return a+b}\",\n         \"_.a = function(a,b){return a+b}\");\n-    test(\"var x=1,a = function(b){var a; return a+b+x}\",\n+    test(\n+        \"var x=1,a = function(b){var a; return a+b+x}\",\n         \"_.x=1;_.a = function(b){var a; return a+b+_.x}\");\n-    test(\"var x=1,a = function(b){return function(){var a;return a+b+x}}\",\n+    test(\n+        \"var x=1,a = function(b){return function(){var a;return a+b+x}}\",\n         \"_.x=1;_.a = function(b){return function(){var a; return a+b+_.x}}\");\n   }\n \n   public void testTryCatch() {\n-    test(\"try{var a = 1}catch(e){throw e}\",\n+    test(\n+        \"try{var a = 1}catch(e){throw e}\",\n         \"try{_.a = 1}catch(e){throw e}\");\n   }\n \n   public void testShadow() {\n-    test(\"var _ = 1; (function () { _ = 2 })()\",\n+    test(\n+        \"var _ = 1; (function () { _ = 2 })()\",\n         \"_._ = 1; (function () { _._ = 2 })()\");\n-    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; }\",\n+    test(\n+        \"function foo() { var _ = {}; _.foo = foo; _.bar = 1; }\",\n         \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1}\");\n-    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n-        \"(function() { var _ = 0;})() }\",\n-        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n-        \"(function() { var _$ = 0;})() }\");\n-    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n-        \"var _$ = 1; }\",\n-        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n-        \"var _$$ = 1; }\");\n-    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n-        \"var _$ = 1; (function() { _ = _$ })() }\",\n-        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n-        \"var _$$ = 1; (function() { _$ = _$$ })() }\");\n-    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n-        \"var _$ = 1, _$$ = 2 (function() { _ = _$ = _$$; \" +\n+    test(\n+        \"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \"\n+        + \"(function() { var _ = 0;})() }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \"\n+        + \"(function() { var _$ = 0;})() }\");\n+    test(\n+        \"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \"\n+        + \"var _$ = 1; }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \"\n+        + \"var _$$ = 1; }\");\n+    test(\n+        \"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \"\n+        + \"var _$ = 1; (function() { _ = _$ })() }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \"\n+        + \"var _$$ = 1; (function() { _$ = _$$ })() }\");\n+    test(\n+        \"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \"\n+        + \"var _$ = 1, _$$ = 2 (function() { _ = _$ = _$$; \" +\n         \"var _$, _$$$ })() }\",\n-        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n-        \"var _$$ = 1, _$$$ = 2 (function() { _$ = _$$ = _$$$; \" +\n-        \"var _$$, _$$$$ })() }\");\n-    test(\"function foo() { var _a = 1;}\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \"\n+        + \"var _$$ = 1, _$$$ = 2 (function() { _$ = _$$ = _$$$; \"\n+        + \"var _$$, _$$$$ })() }\");\n+    test(\n+        \"function foo() { var _a = 1;}\",\n         \"_.foo = function () { var _a = 1;}\");\n     // We accept this unnecessary renaming as acceptable to simplify pattern\n     // matching in the traversal.\n-    test(\"function foo() { var _$a = 1;}\",\n+    test(\n+        \"function foo() { var _$a = 1;}\",\n         \"_.foo = function () { var _$a$ = 1;}\");\n   }\n \n   public void testExterns() {\n-    test(\"var document;\",\n+    test(\n+        \"var document;\",\n         \"document\",\n         \"window.document\", null, null);\n-    test(\"var document;\",\n+    test(\n+        \"var document;\",\n         \"document.getElementsByTagName('test')\",\n         \"window.document.getElementsByTagName('test')\", null, null);\n-    test(\"var document;\",\n+    test(\n+        \"var document;\",\n         \"window.document.getElementsByTagName('test')\",\n         \"window.document.getElementsByTagName('test')\", null, null);\n-    test(\"var document;document.getElementsByTagName\",\n+    test(\n+        \"var document;document.getElementsByTagName\",\n         \"document.getElementsByTagName('test')\",\n         \"window.document.getElementsByTagName('test')\", null, null);\n-    test(\"var document,navigator\",\n+    test(\n+        \"var document,navigator\",\n         \"document.navigator;navigator\",\n         \"window.document.navigator;window.navigator\", null, null);\n-    test(\"var iframes\",\n+    test(\n+        \"var iframes\",\n         \"function test() { iframes.resize(); }\",\n         \"_.test = function() { window.iframes.resize(); }\", null, null);\n-    test(\"var iframes\",\n+    test(\n+        \"var iframes\",\n         \"var foo = iframes;\",\n         \"_.foo = window.iframes;\", null, null);\n     // Special names.\n-    test(\"var arguments, window, eval;\",\n+    test(\n+        \"var arguments, window, eval;\",\n         \"arguments;window;eval;\",\n         \"arguments;window;eval;\", null, null);\n     // Actually not an extern.\n-    test(\"\",\n+    test(\n+        \"\",\n         \"document\",\n         \"window.document\", null, null);\n     // Javascript builtin objects\n-    test(\"Object;Function;Array;String;Boolean;Number;Math;\" +\n-        \"Date;RegExp;JSON;Error;EvalError;ReferenceError;\" +\n-        \"SyntaxError;TypeError;URIError;\",\n-        \"Object;Function;Array;String;Boolean;Number;Math;\" +\n-        \"Date;RegExp;JSON;Error;EvalError;ReferenceError;\" +\n-        \"SyntaxError;TypeError;URIError;\");\n+    test(\n+        \"Object;Function;Array;String;Boolean;Number;Math;\"\n+        + \"Date;RegExp;JSON;Error;EvalError;ReferenceError;\"\n+        + \"SyntaxError;TypeError;URIError;\",\n+        \"Object;Function;Array;String;Boolean;Number;Math;\"\n+        + \"Date;RegExp;JSON;Error;EvalError;ReferenceError;\"\n+        + \"SyntaxError;TypeError;URIError;\");\n   }\n \n   private class StringCompare extends CompilerTestCase {\n     }\n \n     @Override protected CompilerPass getProcessor(Compiler compiler) {\n-      return new RescopeGlobalSymbols(compiler, namespace, false);\n+      return new RescopeGlobalSymbols(\n+          compiler,\n+          NAMESPACE,\n+          false,\n+          assumeCrossModuleNames);\n     }\n \n     public void testFreeCallSemantics() {\n-      test(\"function x(){};var y=function(){var val=x()||{}}\",\n+      test(\n+          \"function x(){};var y=function(){var val=x()||{}}\",\n           \"_.x=function(){};_.y=function(){var val=(0,_.x)()||{}}\");\n-      test(\"function x(){x()}\",\n+      test(\n+          \"function x(){x()}\",\n           \"_.x=function(){(0,_.x)()}\");\n     }\n   }", "timestamp": 1375753541, "metainfo": ""}