{"sha": "2792f8c40f063a67fbce0bef6dada14a909485b8", "log": "Fix type inferencing for asserts with \"||\" ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44522406", "commit": "\n--- a/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java\n         left, blindScope, !condition);\n     StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);\n     if (leftVar == null) {\n-      return blindScope;\n+      // If we did create a more precise scope, blindScope has a child and\n+      // it is frozen. We can't just throw it away to return it. So we\n+      // must create a child instead.\n+      return blindScope == leftScope ?\n+          blindScope : blindScope.createChildFlowScope();\n     }\n     FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(\n         left, blindScope, condition);\n         right, rightScope, !condition);\n     StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);\n     if (rightVar == null || !leftVar.getName().equals(rightVar.getName())) {\n-      return blindScope;\n+      return blindScope == rightScope ?\n+          blindScope : blindScope.createChildFlowScope();\n     }\n     JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());\n     FlowScope informed = blindScope.createChildFlowScope();\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     verify(\"out3\", OBJECT_TYPE);\n   }\n \n+  public void testAssert11() {\n+    JSType startType = createNullableType(OBJECT_TYPE);\n+    assuming(\"x\", startType);\n+    assuming(\"y\", startType);\n+    inFunction(\"var z = goog.asserts.assert(x || y);\");\n+    verify(\"x\", startType);\n+    verify(\"y\", startType);\n+  }\n+\n   public void testAssertNumber() {\n     JSType startType = createNullableType(ALL_TYPE);\n     assuming(\"x\", startType);", "timestamp": 1364426672, "metainfo": ""}