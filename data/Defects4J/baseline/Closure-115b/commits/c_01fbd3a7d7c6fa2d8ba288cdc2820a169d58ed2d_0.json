{"sha": "01fbd3a7d7c6fa2d8ba288cdc2820a169d58ed2d", "log": "Remove support for legacy casts. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43450961", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n     switch (n.getType()) {\n       case Token.CAST:\n         Node expr = n.getFirstChild();\n-        ensureTyped(t, n, getJSType(expr));\n-\n-        // If the cast, tightens the type apply it, so it is available post\n-        // normalization.\n+        JSType exprType = getJSType(expr);\n         JSType castType = getJSType(n);\n-        JSType exprType = getJSType(expr);\n-        if (castType.isSubtype(exprType)) {\n+\n+        // TODO(johnlenz): determine if we can limit object literals in some\n+        // way.\n+        if (!expr.isObjectLit()) {\n+          validator.expectCanCast(t, n, castType, exprType);\n+        }\n+        ensureTyped(t, n, castType);\n+\n+        if (castType.isSubtype(exprType) || expr.isObjectLit()) {\n           expr.setJSType(castType);\n         }\n         break;\n     Preconditions.checkState(!n.isFunction() ||\n             type.isFunctionType() ||\n             type.isUnknownType());\n+    // TODO(johnlenz): this seems like a strange place to check \"@implicitCast\"\n     JSDocInfo info = n.getJSDocInfo();\n     if (info != null) {\n-      if (info.hasType()) {\n-        // TODO(johnlenz): Change this so that we only look for casts on CAST\n-        // nodes one the misplaced type annotation warning is on by default and\n-        // people have been given a chance to fix them.  As is, this is here\n-        // simply for legacy casts.\n-        JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);\n-        validator.expectCanCast(t, n, infoType, type);\n-        type = infoType;\n-      }\n-\n       if (info.isImplicitCast() && !inExterns) {\n         String propName = n.isGetProp() ?\n             n.getLastChild().getString() : \"(missing)\";\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n \n       case Token.CAST:\n         scope = traverseChildren(n, scope);\n-        break;\n-    }\n-\n-    // TODO(johnlenz): remove this after the CAST node change has shaken out.\n-    if (!n.isFunction()) {\n-      JSDocInfo info = n.getJSDocInfo();\n-      if (info != null && info.hasType()) {\n-        JSType castType = info.getType().evaluate(syntacticScope, registry);\n-\n-        // A stubbed type declaration on a qualified name should take\n-        // effect for all subsequent accesses of that name,\n-        // so treat it the same as an assign to that name.\n-        if (n.isQualifiedName() &&\n-            n.getParent().isExprResult()) {\n-          updateScopeForTypeChange(scope, n, n.getJSType(), castType);\n-        }\n-\n-        n.setJSType(castType);\n-      }\n+        JSDocInfo info = n.getJSDocInfo();\n+        if (info != null && info.hasType()) {\n+          n.setJSType(info.getType().evaluate(syntacticScope, registry));\n+        }\n+        break;\n     }\n \n     return scope;\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n       \"found   : {1}\\n\" +\n       \"required: {2}\";\n \n-  // TODO(johnlenz): reenable this after after the next release.\n   static final DiagnosticType INVALID_CAST =\n-      DiagnosticType.disabled(\"JSC_INVALID_CAST\",\n+      DiagnosticType.warning(\"JSC_INVALID_CAST\",\n           \"invalid cast - must be a subtype or supertype\\n\" +\n           \"from: {0}\\n\" +\n           \"to  : {1}\");\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n   private Node maybeInjectCastNode(AstNode node, JSDocInfo info, Node irNode) {\n     if (node.getType() == com.google.javascript.rhino.head.Token.LP\n         && node instanceof ParenthesizedExpression\n-        && info.hasType()\n-        // TODO(johnlenz): for now, attach object literal type directly.\n-        && !irNode.isObjectLit()) {\n+        && info.hasType()) {\n       irNode = newNode(Token.CAST, irNode);\n     }\n     return irNode;\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     WarningLevel warnings = WarningLevel.VERBOSE;\n     warnings.setOptionsForWarningLevel(options);\n \n-    int numAdds = 4750;\n+    int numAdds = 4500;\n     StringBuilder original = new StringBuilder(\"var x = 0\");\n     for (int i = 0; i < numAdds; i++) {\n       original.append(\" + 1\");\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n           \"var x = /** @type {Object|number} */ (\" +\n           \"  {/** @type {string} */ foo: 3});\" +\n         \"}\",\n-        \"assignment to property foo of Object\\n\" +\n+        \"assignment to property foo of {foo: string}\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n   }\n     // Mostly verifying that rhino actually understands these JsDocs.\n     testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n         \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n-  }\n-\n-  public void testCast18() throws Exception {\n-    // Mostly verifying that legacy annotations are applied\n-    // despite the parser warning.\n-    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n-        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\",\n-        \"Type annotations are not allowed here. \" +\n-        \"Are you missing parentheses?\");\n-\n-    // Not really encourage because of possible ambiguity but it works.\n-    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n-        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\",\n-        \"Type annotations are not allowed here. \" +\n-        \"Are you missing parentheses?\");\n   }\n \n   public void testCast19() throws Exception {", "timestamp": 1362616142, "metainfo": ""}