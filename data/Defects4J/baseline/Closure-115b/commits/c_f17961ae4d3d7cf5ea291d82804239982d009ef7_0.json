{"sha": "f17961ae4d3d7cf5ea291d82804239982d009ef7", "log": "Fix DisambiguateProperties handling of quoted properties  Fixes issue 1024 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51382261", "commit": "\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      Node child = n.getFirstChild();\n-      while (child != null) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        if (child.isQuotedString()) {\n+          continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n                 (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n           }\n         }\n-        child = child.getNext();\n       }\n     }\n \n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n     testSets(true, js, js, expected);\n   }\n \n+  public void testOneType4() {\n+    String js = \"\"\n+        + \"/** @constructor */ function Foo() {}\\n\"\n+        + \"Foo.prototype = {'a': 0};\\n\"\n+        + \"/** @type Foo */\\n\"\n+        + \"var F = new Foo;\\n\"\n+        + \"F['a'] = 0;\";\n+    String expected = \"{}\";\n+    testSets(false, js, js, expected);\n+    testSets(true, js, js, expected);\n+  }\n+\n   public void testPrototypeAndInstance() {\n     String js = \"\"\n         + \"/** @constructor */ function Foo() {}\\n\"\n \n     testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n     testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n+  }\n+\n+  public void testTwoTypes4() {\n+    String js = \"\"\n+        + \"/** @constructor */ function Foo() {}\\n\"\n+        + \"Foo.prototype = {a: 0};\"\n+        + \"/** @type Foo */\\n\"\n+        + \"var F = new Foo;\\n\"\n+        + \"F.a = 0;\"\n+        + \"/** @constructor */ function Bar() {}\\n\"\n+        + \"Bar.prototype = {'a': 0};\"\n+        + \"/** @type Bar */\\n\"\n+        + \"var B = new Bar;\\n\"\n+        + \"B['a'] = 0;\";\n+\n+    String output = \"\"\n+        + \"function Foo(){}\"\n+        + \"Foo.prototype = {a: 0};\"\n+        + \"var F=new Foo;\"\n+        + \"F.a=0;\"\n+        + \"function Bar(){}\"\n+        + \"Bar.prototype = {'a': 0};\"\n+        + \"var B=new Bar;\"\n+        + \"B['a']=0\";\n+\n+    testSets(false, js, output, \"{a=[[Foo.prototype]]}\");\n+    testSets(true, js, output, \"{a=[[Foo.prototype]]}\");\n   }\n \n   public void testTwoFields() {", "timestamp": 1377536428, "metainfo": ""}