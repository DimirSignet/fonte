{"sha": "2d6e1c78f41248fbbb1eec43b23e7430e2bc7885", "log": "Fix memory leak from Tracer.ThreadTrace when useThreads is set to false.  Patch from fooberger. Fixes issue 1098 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53518334", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n \n   @SuppressWarnings(\"unchecked\")\n   <T> T runInCompilerThread(final Callable<T> callable) {\n-    final boolean dumpTraceReport = options != null && options.tracer.isOn();\n     T result = null;\n     final Throwable[] exception = new Throwable[1];\n-    Callable<T> bootCompilerThread = new Callable<T>() {\n-      @Override\n-      public T call() {\n-        try {\n-          compilerThread = Thread.currentThread();\n-          if (dumpTraceReport) {\n-            Tracer.initCurrentThreadTrace();\n-          }\n-          return callable.call();\n-        } catch (Throwable e) {\n-          exception[0] = e;\n-        } finally {\n-          compilerThread = null;\n-          if (dumpTraceReport) {\n-            Tracer.logAndClearCurrentThreadTrace();\n-            tracker.outputTracerReport(outStream == null ?\n-                System.out : outStream);\n-          }\n-        }\n-        return null;\n-      }\n-    };\n \n     Preconditions.checkState(\n         compilerThread == null || compilerThread == Thread.currentThread(),\n     // If the compiler thread is available, use it.\n     if (useThreads && compilerThread == null) {\n       try {\n+        final boolean dumpTraceReport =\n+            options != null && options.tracer.isOn();\n+        Callable<T> bootCompilerThread = new Callable<T>() {\n+          @Override\n+          public T call() {\n+            try {\n+              compilerThread = Thread.currentThread();\n+              if (dumpTraceReport) {\n+                Tracer.initCurrentThreadTrace();\n+              }\n+              return callable.call();\n+            } catch (Throwable e) {\n+              exception[0] = e;\n+            } finally {\n+              compilerThread = null;\n+              if (dumpTraceReport) {\n+                Tracer.logCurrentThreadTrace();\n+                tracker.outputTracerReport(outStream == null ?\n+                    System.out : outStream);\n+              }\n+              Tracer.clearCurrentThreadTrace();\n+            }\n+            return null;\n+          }\n+        };\n+\n         result = compilerExecutor.submit(bootCompilerThread).get();\n       } catch (InterruptedException e) {\n         throw Throwables.propagate(e);\n         result = callable.call();\n       } catch (Exception e) {\n         exception[0] = e;\n+      } finally {\n+        Tracer.clearCurrentThreadTrace();\n       }\n     }\n ", "timestamp": 1380671982, "metainfo": ""}