{"sha": "93b021578e479422012dd323b72110b19cbe41f8", "log": "Change on 2010/04/07 by john          Add \"help\" option to the open source command-line.         Fixes issue 141.          R=nick         DELTA=95  (25 added, 28 deleted, 42 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=ijzeqt   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n     AbstractCommandLineRunner<Compiler, CompilerOptions> {\n \n   private static class Flags {\n+    @Option(name = \"--help\",\n+        usage = \"Displays this message\")\n+    private boolean display_help = false;\n+\n     @Option(name = \"--print_tree\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Prints out the parse tree and exits\")\n \n   private final Flags flags = new Flags();\n \n+  private boolean isConfigValid = false;\n+\n   /**\n    * Create a new command-line runner. You should only need to call\n    * the constructor if you're extending this class. Otherwise, the main\n    * method should instantiate it.\n    */\n-  protected CommandLineRunner(String[] args)\n-      throws CmdLineException {\n+  protected CommandLineRunner(String[] args) {\n     super();\n     initConfigFromFlags(args, System.err);\n   }\n \n-  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)\n-      throws CmdLineException {\n+  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) {\n     super(out, err);\n     initConfigFromFlags(args, err);\n   }\n \n-  private void initConfigFromFlags(\n-      String[] args, PrintStream err)\n-      throws CmdLineException {\n+  private void initConfigFromFlags(String[] args, PrintStream err) {\n     // Args4j has a different format that the old command-line parser.\n     // So we use some voodoo to get the args into the format that args4j\n     // expects.\n     }\n \n     CmdLineParser parser = new CmdLineParser(flags);\n+    isConfigValid = true;\n     try {\n       parser.parseArgument(processedArgs.toArray(new String[] {}));\n     } catch (CmdLineException e) {\n       err.println(e.getMessage());\n+      isConfigValid = false;\n+    }\n+\n+    if (!isConfigValid || flags.display_help) {\n+      isConfigValid = false;\n       parser.printUsage(err);\n-      throw e;\n-    }\n-    getCommandLineConfig()\n-        .setPrintTree(flags.print_tree)\n-        .setComputePhaseOrdering(flags.compute_phase_ordering)\n-        .setPrintAst(flags.print_ast)\n-        .setPrintPassGraph(flags.print_pass_graph)\n-        .setJscompDevMode(flags.jscomp_dev_mode)\n-        .setLoggingLevel(flags.logging_level)\n-        .setExterns(flags.externs)\n-        .setJs(flags.js)\n-        .setJsOutputFile(flags.js_output_file)\n-        .setModule(flags.module)\n-        .setVariableMapInputFile(flags.variable_map_input_file)\n-        .setPropertyMapInputFile(flags.property_map_input_file)\n-        .setVariableMapOutputFile(flags.variable_map_output_file)\n-        .setCreateNameMapFiles(flags.create_name_map_files)\n-        .setPropertyMapOutputFile(flags.property_map_output_file)\n-        .setCodingConvention(flags.third_party ?\n-             new DefaultCodingConvention() :\n-             new ClosureCodingConvention())\n-        .setSummaryDetailLevel(flags.summary_detail_level)\n-        .setOutputWrapper(flags.output_wrapper)\n-        .setOutputWrapperMarker(flags.output_wrapper_marker)\n-        .setModuleWrapper(flags.module_wrapper)\n-        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n-        .setCreateSourceMap(flags.create_source_map)\n-        .setJscompError(flags.jscomp_error)\n-        .setJscompWarning(flags.jscomp_warning)\n-        .setJscompOff(flags.jscomp_off)\n-        .setDefine(flags.define)\n-        .setCharset(flags.charset);\n+    } else {\n+      getCommandLineConfig()\n+          .setPrintTree(flags.print_tree)\n+          .setComputePhaseOrdering(flags.compute_phase_ordering)\n+          .setPrintAst(flags.print_ast)\n+          .setPrintPassGraph(flags.print_pass_graph)\n+          .setJscompDevMode(flags.jscomp_dev_mode)\n+          .setLoggingLevel(flags.logging_level)\n+          .setExterns(flags.externs)\n+          .setJs(flags.js)\n+          .setJsOutputFile(flags.js_output_file)\n+          .setModule(flags.module)\n+          .setVariableMapInputFile(flags.variable_map_input_file)\n+          .setPropertyMapInputFile(flags.property_map_input_file)\n+          .setVariableMapOutputFile(flags.variable_map_output_file)\n+          .setCreateNameMapFiles(flags.create_name_map_files)\n+          .setPropertyMapOutputFile(flags.property_map_output_file)\n+          .setCodingConvention(flags.third_party ?\n+               new DefaultCodingConvention() :\n+               new ClosureCodingConvention())\n+          .setSummaryDetailLevel(flags.summary_detail_level)\n+          .setOutputWrapper(flags.output_wrapper)\n+          .setOutputWrapperMarker(flags.output_wrapper_marker)\n+          .setModuleWrapper(flags.module_wrapper)\n+          .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n+          .setCreateSourceMap(flags.create_source_map)\n+          .setJscompError(flags.jscomp_error)\n+          .setJscompWarning(flags.jscomp_warning)\n+          .setJscompOff(flags.jscomp_off)\n+          .setDefine(flags.define)\n+          .setCharset(flags.charset);\n+    }\n   }\n \n   @Override\n   }\n \n   /**\n+   * @return Whether the configuration is valid.\n+   */\n+  public boolean shouldRunCompiler() {\n+    return this.isConfigValid;\n+  }\n+\n+  /**\n    * Runs the Compiler. Exits cleanly in the event of an error.\n    */\n   public static void main(String[] args) {\n-    try {\n-      (new CommandLineRunner(args)).run();\n-    } catch (CmdLineException e) {\n+    CommandLineRunner runner = new CommandLineRunner(args);\n+    if (runner.shouldRunCompiler()) {\n+      runner.run();\n+    } else {\n       System.exit(-1);\n     }\n   }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n \n import junit.framework.TestCase;\n \n-import org.kohsuke.args4j.CmdLineException;\n-\n import java.io.IOException;\n import java.util.List;\n \n         \"function $Foo$$() {};\" +\n         \"throw new $Foo$$().$x$;\");\n   }\n+\n+  public void testHelpFlag() {\n+    args.add(\"--help\");\n+    testSame(\"function f() {}\");\n+  }  \n \n   /* Helper functions */\n \n \n   private Compiler compile(String[] original) {\n     String[] argStrings = args.toArray(new String[] {});\n-    CommandLineRunner runner = null;\n-    try {\n-      runner = new CommandLineRunner(argStrings);\n-    } catch (CmdLineException e) {\n-      throw new RuntimeException(e);\n-    }\n+    CommandLineRunner runner = new CommandLineRunner(argStrings);\n     Compiler compiler = runner.createCompiler();\n     lastCompiler = compiler;\n     JSSourceFile[] inputs = new JSSourceFile[original.length];\n \n   private Node parse(String[] original) {\n     String[] argStrings = args.toArray(new String[] {});\n-    CommandLineRunner runner = null;\n-    try {\n-      runner = new CommandLineRunner(argStrings);\n-    } catch (CmdLineException e) {\n-      throw new RuntimeException(e);\n-    }\n+    CommandLineRunner runner = new CommandLineRunner(argStrings);\n     Compiler compiler = runner.createCompiler();\n     JSSourceFile[] inputs = new JSSourceFile[original.length];\n     for (int i = 0; i < inputs.length; i++) {", "timestamp": 1270750318, "metainfo": ""}