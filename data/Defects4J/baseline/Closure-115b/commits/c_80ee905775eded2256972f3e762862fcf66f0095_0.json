{"sha": "80ee905775eded2256972f3e762862fcf66f0095", "log": "Aggressive varaible declaration collapsing  R=johnlenz DELTA=103  (79 added, 0 deleted, 24 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1006   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n+++ b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n      * Variable declaration that any following var nodes should be\n      * collapsed into\n      */\n-    final Node firstVarNode;\n+    final Node startNode;\n+\n+    /**\n+     * Last node (non-inclusive) of the chain of nodes to collapse.\n+     */\n+    final Node endNode;\n \n     /** Parent of the nodes to the collapse */\n     final Node parent;\n \n-    Collapse(Node firstVarNode, Node parent) {\n-      this.firstVarNode = firstVarNode;\n+    Collapse(Node startNode, Node endNode, Node parent) {\n+      this.startNode = startNode;\n+      this.endNode = endNode;\n       this.parent = parent;\n     }\n   }\n   }\n \n   /**\n-   * Gathers all of the variable declarations that should be collapsed into one.\n+   * Gathers all of the variable declarations / assignments that should be\n+   * collapsed into one.\n+   *\n    * We do not do the collapsing as we go since node traversal would be affected\n    * by the changes we are making to the parse tree.\n    */\n   private class GatherCollapses extends AbstractPostOrderCallback {\n \n+    // TODO(user): This is purely a subtree peep hole optimization. We\n+    // can rewrite this so it no longer have a sperate gather and merge stage.\n+\n     public void visit(NodeTraversal t, Node n, Node parent) {\n       // Only care about var nodes\n-      if (n.getType() != Token.VAR) return;\n+      if (n.getType() != Token.VAR && !canBeRedeclared(n, t.getScope())) return;\n \n       // If we've already looked at this node, skip it\n       if (nodesToCollapse.contains(n)) return;\n \n       Node varNode = n;\n \n+      boolean hasVar = n.getType() == Token.VAR;\n+\n       // Find variable declarations that follow this one (if any)\n       n = n.getNext();\n \n       boolean hasNodesToCollapse = false;\n-      while (n != null && n.getType() == Token.VAR) {\n+\n+      while (n != null &&\n+          (n.getType() == Token.VAR || canBeRedeclared(n, t.getScope()))) {\n+\n+        if (NodeUtil.isVar(n)) {\n+          hasVar = true;\n+        }\n+\n         nodesToCollapse.add(n);\n         hasNodesToCollapse = true;\n \n         n = n.getNext();\n       }\n \n-      if (hasNodesToCollapse) {\n+      if (hasNodesToCollapse && hasVar) {\n         nodesToCollapse.add(varNode);\n-        collapses.add(new Collapse(varNode, parent));\n-      }\n-\n-    }\n+        collapses.add(new Collapse(varNode, n, parent));\n+      }\n+    }\n+  }\n+\n+  private boolean canBeRedeclared(Node n, Scope s) {\n+    if (!NodeUtil.isExprAssign(n)) {\n+      return false;\n+    }\n+    Node assign = n.getFirstChild();\n+    Node lhs = assign.getFirstChild();\n+\n+    if (!NodeUtil.isName(lhs)) {\n+      return false;\n+    }\n+\n+    return s.isDeclared(lhs.getString(), false);\n   }\n \n   private void applyCollapses() {\n     for (Collapse collapse : collapses) {\n-      Node first = collapse.firstVarNode;\n-      while (first.getNext() != null &&\n-          first.getNext().getType() == Token.VAR) {\n-        Node next = collapse.parent.removeChildAfter(first);\n-\n-        // Move all children of the next var node into the first one.\n-        first.addChildrenToBack(next.removeChildren());\n-      }\n-    }\n-  }\n-\n+\n+      Node var = new Node(Token.VAR);\n+      var.copyInformationFrom(collapse.startNode);\n+      collapse.parent.addChildBefore(var, collapse.startNode);\n+\n+      boolean redeclaration = false;\n+      for (Node n = collapse.startNode; n != collapse.endNode;) {\n+        Node next = n.getNext();\n+\n+        Preconditions.checkState(var.getNext() == n);\n+        collapse.parent.removeChildAfter(var);\n+\n+        if (NodeUtil.isVar(n)) {\n+          while(n.hasChildren()) {\n+            var.addChildToBack(n.removeFirstChild());\n+          }\n+        } else {\n+          Node assign = n.getFirstChild();\n+          Node lhs = assign.getFirstChild();\n+          Preconditions.checkState(NodeUtil.isName(lhs));\n+          Node rhs = assign.getLastChild();\n+          lhs.addChildToBack(rhs.detachFromParent());\n+          var.addChildToBack(lhs.detachFromParent());\n+          redeclaration = true;\n+        }\n+        n = next;\n+      }\n+\n+      if (redeclaration) {\n+        JSDocInfo info = new JSDocInfo();\n+        info.addSuppression(\"duplicate\");\n+        var.setJSDocInfo(info);\n+      }\n+    }\n+  }\n }\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   /**\n    * Add a suppressed warning.\n    */\n-  void addSuppression(String suppression) {\n+  public void addSuppression(String suppression) {\n     lazyInitInfo();\n \n     if (info.suppressions == null) {\n--- a/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java\n   }\n \n   public void testIfElseVarDeclarations() throws Exception {\n-    testSame(\"if (x) var a = 1; else var a = 2;\");\n+    testSame(\"if (x) var a = 1; else var b = 2;\");\n+  }\n+\n+  public void testAggressiveRedeclaration() {\n+    test(\"var x = 2; foo(x);     x = 3; var y = 2;\",\n+         \"var x = 2; foo(x); var x = 3,     y = 2;\");\n+\n+    test(\"var x = 2; foo(x);     x = 3; x = 1; var y = 2;\",\n+         \"var x = 2; foo(x); var x = 3, x = 1,     y = 2;\");\n+\n+    test(\"var x = 2; foo(x);     x = 3; x = 1; var y = 2; var z = 4\",\n+         \"var x = 2; foo(x); var x = 3, x = 1,     y = 2,     z = 4\");\n+\n+    test(\"var x = 2; foo(x);     x = 3; x = 1; var y = 2; var z = 4; x = 5\",\n+         \"var x = 2; foo(x); var x = 3, x = 1,     y = 2,     z = 4, x = 5\");\n+  }\n+\n+  public void testAggressiveRedeclarationInFor() {\n+    testSame(\"for(var x = 1; x = 2; x = 3) {x = 4}\");\n+    testSame(\"for(var x = 1; y = 2; z = 3) {var a = 4}\");\n+    testSame(\"var x; for(x = 1; x = 2; z = 3) {x = 4}\");\n   }\n \n   @Override", "timestamp": 1300828539, "metainfo": ""}