{"sha": "27b083a44185add5dd0d3e4bfcc69161462175d9", "log": "Don't inline variables that depends on a parameter if arguments is escaped.  R=johnlenz DELTA=41  (36 added, 3 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1136   ", "commit": "\n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n \n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Set;\n \n import javax.annotation.Nullable;\n   private void escapeParameters(MustDef output) {\n     for (Iterator<Var> i = jsScope.getVars(); i.hasNext();) {\n       Var v = i.next();\n-      if (v.getParentNode().getType() == Token.LP) {\n+      if (isParameter(v)) {\n         // Assume we no longer know where the parameter comes from\n         // anymore.\n         output.reachingDef.put(v, null);\n       }\n     }\n+\n+    // Also, assume we no longer know anything that depends on a parameter.\n+    for (Entry<Var, Definition> pair: output.reachingDef.entrySet()) {\n+      Definition value = pair.getValue();\n+      if (value == null) {\n+        continue;\n+      }\n+      for (Var dep : value.depends) {\n+        if (isParameter(dep)) {\n+          output.reachingDef.put(pair.getKey(), null);\n+        }\n+      }\n+    }\n+  }\n+\n+  private boolean isParameter(Var v) {\n+    return v.getParentNode().getType() == Token.LP;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n          \"function f(x, y) { if (y) { print(1) }}\");\n   }\n \n-  public void testInvalidInlineArguments() {\n+  public void testInvalidInlineArguments1() {\n     testSame(\"function f(x, y) { x = 1; arguments[0] = 2; print(x) }\");\n     testSame(\"function f(x, y) { x = 1; var z = arguments;\" +\n         \"z[0] = 2; z[1] = 3; print(x)}\");\n     testSame(\"function g(a){a[0]=2} function f(x){x=1;g(arguments);print(x)}\");\n   }\n \n+  public void testInvalidInlineArguments2() {\n+    testSame(\"function f(c) {var f = c; arguments[0] = this;\" +\n+             \"f.apply(this, arguments); return this;}\");\n+  }\n+\n   private void noInline(String input) {\n     inline(input, input);\n   }\n--- a/test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java\n+++ b/test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java\n   public void testArgumentsObjectEscaped() {\n     computeDefUse(\"D: param1 = 1; var x = arguments; x[0] = 2; U: param1\");\n     assertNotSame(def, defUse.getDef(\"param1\", use));\n+  }\n+\n+  public void testArgumentsObjectEscapedDependents() {\n+    assertNotMatch(\"param1=1; var x; D:x=param1; var y=arguments; U:x\");\n   }\n \n   /**", "timestamp": 1301364332, "metainfo": ""}