{"sha": "4087fe7373f6376a71bd08c0b12cb9683ef41947", "log": "Allow @suppress on all assignments. Now that we have a CAST node, it's harder to tell if the RHS of an ASSIGN is a FUNCTION. Rather than special-case it, it seemed easier to just allow @suppress on all assigments  R=johnlenz   Revision created by MOE tool push_codebase. MOE_MIGRATION=6183   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java\n   public CheckLevel level(JSError error) {\n     Node node = error.node;\n     if (node != null) {\n+      boolean visitedFunction = false;\n       for (Node current = node;\n            current != null;\n            current = current.getParent()) {\n         int type = current.getType();\n         JSDocInfo info = null;\n \n-        // We only care about function annotations at the FUNCTION and SCRIPT\n-        // level. Otherwise, the @suppress annotation has an implicit\n-        // dependency on the exact structure of our AST, and that seems like\n-        // a bad idea.\n         if (type == Token.FUNCTION) {\n-          info = NodeUtil.getFunctionJSDocInfo(current);\n+          info = NodeUtil.getBestJSDocInfo(current);\n+          visitedFunction = true;\n         } else if (type == Token.SCRIPT) {\n           info = current.getJSDocInfo();\n-        } else if (type == Token.ASSIGN) {\n-          Node rhs = current.getLastChild();\n-          if (rhs.isFunction()) {\n-            info = NodeUtil.getFunctionJSDocInfo(rhs);\n+        } else if (current.isVar() || current.isAssign()) {\n+          // There's one edge case we're worried about:\n+          // if the warning points to an assigment to a function, we\n+          // want the suppressions on that function to apply.\n+          // It's OK if we double-count some cases.\n+          Node rhs = NodeUtil.getRValueOfLValue(current.getFirstChild());\n+          if (rhs != null) {\n+            if (rhs.isCast()) {\n+              rhs = rhs.getFirstChild();\n+            }\n+\n+            if (rhs.isFunction() && !visitedFunction) {\n+              info = NodeUtil.getBestJSDocInfo(current);\n+            }\n           }\n         }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"variable goog.foo redefined with type function (?): undefined, \" +\n         \"original definition at [testcode]:1 with type \" +\n         \"function (?): undefined\");\n+  }\n+\n+  public void testDuplicateStaticMethodDecl6() throws Exception {\n+    // Make sure the CAST node doesn't interfere with the @suppress\n+    // annotation.\n+    testTypes(\n+        \"var goog = goog || {};\" +\n+        \"goog.foo = function(x) {};\" +\n+        \"/**\\n\" +\n+        \" * @suppress {duplicate}\\n\" +\n+        \" * @return {undefined}\\n\" +\n+        \" */\\n\" +\n+        \"goog.foo = \" +\n+        \"   /** @type {!Function} */ (function(x) {});\");\n   }\n \n   public void testDuplicateStaticPropertyDecl1() throws Exception {", "timestamp": 1358978884, "metainfo": ""}