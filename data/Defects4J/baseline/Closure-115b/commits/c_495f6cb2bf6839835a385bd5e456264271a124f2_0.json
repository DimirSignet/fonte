{"sha": "495f6cb2bf6839835a385bd5e456264271a124f2", "log": "Move tryReduceReturn optimization.  This is really an alternate syntax substitution, and has nothing to do with minimizing conditionals, so it probably makes more sense in PeepholeSubstituteAlternateSyntax. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47413309", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java\n+++ b/src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java\n   @SuppressWarnings(\"fallthrough\")\n   public Node optimizeSubtree(Node node) {\n     switch(node.getType()) {\n+      case Token.THROW:\n       case Token.RETURN: {\n-        Node result = tryRemoveRedundantExit(node);\n-        if (result != node) {\n-          return result;\n-        }\n-        result = tryReplaceExitWithBreak(node);\n-        if (result != node) {\n-          return result;\n-        }\n-        return tryReduceReturn(node);\n-      }\n-\n-      case Token.THROW: {\n         Node result = tryRemoveRedundantExit(node);\n         if (result != node) {\n           return result;\n   }\n \n   /**\n-   * Reduce \"return undefined\" or \"return void 0\" to simply \"return\".\n-   *\n-   * @return The original node, maybe simplified.\n-   */\n-  private Node tryReduceReturn(Node n) {\n-    Node result = n.getFirstChild();\n-\n-    if (result != null) {\n-      switch (result.getType()) {\n-        case Token.VOID:\n-          Node operand = result.getFirstChild();\n-          if (!mayHaveSideEffects(operand)) {\n-            n.removeFirstChild();\n-            reportCodeChange();\n-          }\n-          break;\n-        case Token.NAME:\n-          String name = result.getString();\n-          if (name.equals(\"undefined\")) {\n-            n.removeFirstChild();\n-            reportCodeChange();\n-          }\n-          break;\n-      }\n-    }\n-\n-    return n;\n-  }\n-\n-  /**\n    * Replace duplicate exits in control structures.  If the node following\n    * the exit node expression has the same effect as exit node, the node can\n    * be replaced or removed.\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n           }\n         }\n         return result;\n+\n+      case Token.RETURN:\n+        return tryReduceReturn(node);\n \n       case Token.COMMA:\n         return trySplitComma(node);\n     return n;\n   }\n \n+  /**\n+   * Reduce \"return undefined\" or \"return void 0\" to simply \"return\".\n+   *\n+   * @return The original node, maybe simplified.\n+   */\n+  private Node tryReduceReturn(Node n) {\n+    Node result = n.getFirstChild();\n+\n+    if (result != null) {\n+      switch (result.getType()) {\n+        case Token.VOID:\n+          Node operand = result.getFirstChild();\n+          if (!mayHaveSideEffects(operand)) {\n+            n.removeFirstChild();\n+            reportCodeChange();\n+          }\n+          break;\n+        case Token.NAME:\n+          String name = result.getString();\n+          if (name.equals(\"undefined\")) {\n+            n.removeFirstChild();\n+            reportCodeChange();\n+          }\n+          break;\n+      }\n+    }\n+\n+    return n;\n+  }\n \n   private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n     // String, Number, and Boolean functions return non-object types, whereas\n--- a/test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java\n          \"if (x + (y=5) && z && (w,z)) for(;;) foo();\");\n   }\n \n-  public void testFoldReturnResult() {\n-    foldSame(\"function f(){return false;}\");\n-    foldSame(\"function f(){return null;}\");\n-    fold(\"function f(){return void 0;}\",\n-         \"function f(){return}\");\n-    fold(\"function f(){return;}\",\n-         \"function f(){}\");\n-    foldSame(\"function f(){return void foo();}\");\n-    fold(\"function f(){return undefined;}\",\n-         \"function f(){return}\");\n-    fold(\"function f(){if(a()){return undefined;}}\",\n-         \"function f(){if(a()){return}}\");\n-  }\n-\n   public void testSubsituteReturn() {\n \n     fold(\"function f() { while(x) { return }}\",\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n     fold(\"x = false\", \"x = !1\");\n   }\n \n+  public void testFoldReturnResult() {\n+    foldSame(\"function f(){return !1;}\");\n+    foldSame(\"function f(){return null;}\");\n+    fold(\"function f(){return void 0;}\",\n+         \"function f(){return}\");\n+    foldSame(\"function f(){return void foo();}\");\n+    fold(\"function f(){return undefined;}\",\n+         \"function f(){return}\");\n+    fold(\"function f(){if(a()){return undefined;}}\",\n+         \"function f(){if(a()){return}}\");\n+  }\n+\n   public void testUndefined() {\n     foldSame(\"var x = undefined\");\n     foldSame(\"function f(f) {var undefined=2;var x = undefined;}\");", "timestamp": 1370306215, "metainfo": ""}