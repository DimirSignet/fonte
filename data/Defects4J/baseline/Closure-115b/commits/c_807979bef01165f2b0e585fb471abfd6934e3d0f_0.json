{"sha": "807979bef01165f2b0e585fb471abfd6934e3d0f", "log": "Add aggressiveFusion tests ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47564257", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   boolean aggressiveRenaming;\n   boolean alternateRenaming; // triggers RenameVars2.\n+\n+  /** Prefer commas over semicolons when doing statement fusion */\n+  boolean aggressiveFusion;\n \n   /** Folds constants (e.g. (2 + 3) to 5) */\n   public boolean foldConstants;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   };\n \n   /** Verify that all the passes are one-time passes. */\n-  private void assertAllOneTimePasses(List<PassFactory> passes) {\n+  private static void assertAllOneTimePasses(List<PassFactory> passes) {\n     for (PassFactory pass : passes) {\n       Preconditions.checkState(pass.isOneTimePass());\n     }\n   }\n \n   /** Verify that all the passes are multi-run passes. */\n-  private void assertAllLoopablePasses(List<PassFactory> passes) {\n+  private static void assertAllLoopablePasses(List<PassFactory> passes) {\n     for (PassFactory pass : passes) {\n       Preconditions.checkState(!pass.isOneTimePass());\n     }\n     protected CompilerPass create(AbstractCompiler compiler) {\n       final boolean late = true;\n       return new PeepholeOptimizationsPass(compiler,\n-            new StatementFusion(),\n+            new StatementFusion(options.aggressiveFusion),\n             new PeepholeRemoveDeadCode(),\n             new PeepholeMinimizeConditions(late),\n             new PeepholeSubstituteAlternateSyntax(late),\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     options.foldConstants = true;\n     options.syntheticBlockStartMarker = \"START\";\n     options.syntheticBlockEndMarker = \"END\";\n-    testSame(options, \"for(;;) { x = 1; {START(); {y = 1} END()} }\");\n+    options.aggressiveFusion = false;\n+    testSame(options, \"for(;;) { x = 1; {START(); {z = 3} END()} }\");\n+    testSame(options, \"x = 1; y = 2; {START(); {z = 3} END()} f()\");\n+    options.aggressiveFusion = true;\n+    testSame(options, \"x = 1; {START(); {z = 3} END()} f()\");\n+    test(options, \"x = 1; y = 3; {START(); {z = 3} END()} f()\",\n+                  \"x = 1, y = 3; {START(); {z = 3} END()} f()\");\n   }\n \n   public void testBug5786871() {", "timestamp": 1370475908, "metainfo": ""}