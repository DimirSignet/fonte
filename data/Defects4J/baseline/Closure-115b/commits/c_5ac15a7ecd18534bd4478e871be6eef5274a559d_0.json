{"sha": "5ac15a7ecd18534bd4478e871be6eef5274a559d", "log": "Don't disabmiguate private properties that are created for classes by the Closure Framework:  There is only one definition shared between many classes. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48531617", "commit": "\n--- a/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguatePrivateProperties.java\n  */\n package com.google.javascript.jscomp;\n \n+import com.google.common.collect.ImmutableSet;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+\n+import java.util.Collection;\n \n /**\n  * Disambiguate properties by file, when they are private by naming convention.\n    implements NodeTraversal.Callback, CompilerPass {\n \n   private final AbstractCompiler compiler;\n+  private final ImmutableSet<String> blacklist;\n   private String fileid;\n   private int id = 0;\n \n   DisambiguatePrivateProperties(AbstractCompiler compiler) {\n     this.compiler = compiler;\n+    CodingConvention convention = this.compiler.getCodingConvention();\n+    Collection<String> indirect = convention.getIndirectlyDeclaredProperties();\n+    blacklist = ImmutableSet.copyOf(indirect);\n   }\n \n   @Override\n   private void maybeRename(Node n) {\n     CodingConvention convention = compiler.getCodingConvention();\n     String prop = n.getString();\n-    if (!n.getBooleanProp(Node.QUOTED_PROP) && convention.isPrivate(prop)) {\n+    if (!n.getBooleanProp(Node.QUOTED_PROP) && convention.isPrivate(prop)\n+        && !blacklist.contains(prop)) {\n       n.setString(prop + fileid);\n       compiler.reportCodeChange();\n     }\n--- a/test/com/google/javascript/jscomp/DisambiguatePrivatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePrivatePropertiesTest.java\n     test(\n         \"({set prop_(a){this.a = 1} });\",\n         \"({set prop_$0(a){this.a = 1} });\");\n+  }\n \n+  public void testNoRenameIndirectProps() {\n+    useGoogleCodingConvention = true;\n+\n+    testSame(\"({}).superClass_;\");\n+    testSame(\"({superClass_: 1});\");\n+    testSame(\"({get superClass_(){ return 1} });\");\n+    testSame(\"({set superClass_(a){this.a = 1} });\");\n   }\n }", "timestamp": 1372202105, "metainfo": ""}