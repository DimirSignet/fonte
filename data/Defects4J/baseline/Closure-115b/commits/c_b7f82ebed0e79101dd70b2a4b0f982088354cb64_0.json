{"sha": "b7f82ebed0e79101dd70b2a4b0f982088354cb64", "log": "Tighten up Graph and LinkedDirectedGraph. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49904748", "commit": "\n--- a/src/com/google/javascript/jscomp/graph/Graph.java\n+++ b/src/com/google/javascript/jscomp/graph/Graph.java\n   public abstract Collection<GraphNode<N, E>> getNodes();\n \n   /** Gets an immutable list of all edges. */\n-  public abstract List<GraphEdge<N, E>> getEdges();\n+  public abstract List<? extends GraphEdge<N, E>> getEdges();\n \n   /**\n    * Gets the degree of a node.\n    * @param n2 Node two.\n    * @return The list of edges between those two values in the graph.\n    */\n-  public abstract List<GraphEdge<N, E>> getEdges(N n1, N n2);\n+  public abstract List<? extends GraphEdge<N, E>> getEdges(N n1, N n2);\n \n   /**\n    * Retrieves any edge from the graph.\n--- a/src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java\n   }\n \n   @Override\n-  public List<GraphEdge<N, E>> getEdges(N n1, N n2) {\n+  public List<DiGraphEdge<N, E>> getEdges(N n1, N n2) {\n     // Since this is a method from a generic graph, edges from both\n     // directions must be added to the returning list.\n     List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges(n1, n2);\n     List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges(n2, n1);\n     int totalSize = forwardEdges.size() + backwardEdges.size();\n-    List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity(totalSize);\n+    List<DiGraphEdge<N, E>> edges = Lists.newArrayListWithCapacity(totalSize);\n     edges.addAll(forwardEdges);\n     edges.addAll(backwardEdges);\n     return edges;\n   }\n \n   @Override\n-  public List<GraphEdge<N, E>> getEdges() {\n-    List<GraphEdge<N, E>> result = Lists.newArrayList();\n+  public List<DiGraphEdge<N, E>> getEdges() {\n+    List<DiGraphEdge<N, E>> result = Lists.newArrayList();\n     for (DiGraphNode<N, E> node : nodes.values()) {\n       for (DiGraphEdge<N, E> edge : node.getOutEdges()) {\n         result.add(edge);", "timestamp": 1374798924, "metainfo": ""}