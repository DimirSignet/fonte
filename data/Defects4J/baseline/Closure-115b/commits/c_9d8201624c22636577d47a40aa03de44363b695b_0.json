{"sha": "9d8201624c22636577d47a40aa03de44363b695b", "log": "Cleanup a bunch of warnings reported by eclipse.  R=nicksantos DELTA=57  (4 added, 42 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3658   ", "commit": "\n--- a/src/com/google/debugging/sourcemap/SourceMapSection.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapSection.java\n    * @return the name of the map\n    * @deprecated\n    */\n+  @Deprecated\n   public String getSectionUrl() {\n     assert(type.equals(SectionType.URL));\n     return value;\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n   /**\n    * Create a writer with the newer output charset.\n    */\n-  private Writer streamToOutputWriter2(OutputStream stream)\n-      throws IOException {\n+  private Writer streamToOutputWriter2(OutputStream stream) {\n     if (outputCharset2 == null) {\n       return new BufferedWriter(\n           new OutputStreamWriter(stream));\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n-import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;\n-import com.google.javascript.jscomp.CodingConvention.Bind;\n-import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;\n-import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n-import com.google.javascript.jscomp.CodingConvention.SubclassType;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.FunctionType;\n--- a/src/com/google/javascript/jscomp/CodingConventions.java\n+++ b/src/com/google/javascript/jscomp/CodingConventions.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;\n-import com.google.javascript.jscomp.CodingConvention.Bind;\n-import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;\n-import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n-import com.google.javascript.jscomp.CodingConvention.SubclassType;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.FunctionType;\n--- a/src/com/google/javascript/jscomp/ExportTestFunctions.java\n+++ b/src/com/google/javascript/jscomp/ExportTestFunctions.java\n    * Creates a new export test functions compiler pass.\n    * @param compiler\n    * @param exportSymbolFunction The function name used to export symbols in JS.\n-   * @param exportSymbolFunction The function name used to export properties in\n-   *     JS.\n+   * @param exportPropertyFunction The function name used to export properties\n+   *     in JS.\n    */\n   ExportTestFunctions(AbstractCompiler compiler,\n       String exportSymbolFunction, String exportPropertyFunction) {\n--- a/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n+++ b/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n  * <li>PROPERTIES - name.\n  * </ol>\n  *\n- * @see http://cldr.unicode.org/development/development-process/design-proposals/xmb\n+ * @see <a href=\"http://cldr.unicode.org/development/development-process/design-proposals/xmb\">xmb</a>\n  */\n public class GoogleJsMessageIdGenerator implements IdGenerator {\n \n--- a/src/com/google/javascript/jscomp/InferJSDocInfo.java\n+++ b/src/com/google/javascript/jscomp/InferJSDocInfo.java\n         objType.setJSDocInfo(docInfo);\n \n         if (objType.isConstructor() || objType.isInterface()) {\n-          objType.toMaybeFunctionType(objType).getInstanceType().setJSDocInfo(\n+          JSType.toMaybeFunctionType(objType).getInstanceType().setJSDocInfo(\n               docInfo);\n         } else if (objType instanceof EnumType) {\n           ((EnumType) objType).getElementsType().setJSDocInfo(docInfo);\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n     /**\n      * Gets the JSDocInfo for the variable.\n      */\n+    @Override\n     public JSDocInfo getJSDocInfo() {\n       return info;\n     }\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n   /** Collects references to types in JSDocInfo. */\n   private class JSDocInfoCollector\n       extends NodeTraversal.AbstractPostOrderCallback {\n-    private final JSTypeRegistry registry;\n+    private final JSTypeRegistry typeRegistry;\n \n     private JSDocInfoCollector(JSTypeRegistry registry) {\n-      this.registry = registry;\n+      this.typeRegistry = registry;\n     }\n \n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n         if (symbol == null) {\n           // If we can't find this type, it might be a reference to a\n           // primitive type (like {string}). Autobox it to check.\n-          JSType type = registry.getType(n.getString());\n+          JSType type = typeRegistry.getType(n.getString());\n           JSType autobox = type == null ? null : type.autoboxesTo();\n           symbol = autobox == null\n               ? null : getSymbolForTypeHelper(autobox, true);\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n    * <p>Enum aliases are irregular, so we need special code for this :(</p>\n    *\n    * @param value the value used for initialization of the enum\n-   * @param primitiveType The type of each element of the enum.\n    */\n   private void checkEnumAlias(\n       NodeTraversal t, JSDocInfo declInfo, Node value) {\n--- a/src/com/google/javascript/jscomp/TypeInferencePass.java\n+++ b/src/com/google/javascript/jscomp/TypeInferencePass.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n-import com.google.common.collect.HashMultimap;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import com.google.common.collect.Multimap;\n import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;\n import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n-import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.Node;\n \n-import java.util.Collection;\n-import java.util.List;\n import java.util.Map;\n \n /**\n   private Scope topScope;\n   private ScopeCreator scopeCreator;\n   private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;\n-\n-  /**\n-   * Local variables that are declared in an outer scope, but are assigned in\n-   * an inner scope. We cannot do type inference on these vars.\n-   */\n-  private final Multimap<Scope, Var> escapedLocalVars = HashMultimap.create();\n \n   TypeInferencePass(AbstractCompiler compiler,\n       ReverseAbstractInterpreter reverseInterpreter,\n     NodeTraversal inferTypes = new NodeTraversal(\n         compiler, new TypeInferringCallback(), scopeCreator);\n     inferTypes.traverseWithScope(node, topScope);\n-  }\n-\n-  private Collection<Var> getUnflowableVars(Scope scope) {\n-    List<Var> vars = Lists.newArrayList();\n-    for (Scope current = scope;\n-         current.isLocal(); current = current.getParent()) {\n-      vars.addAll(escapedLocalVars.get(current));\n-    }\n-    return vars;\n   }\n \n   void inferTypes(NodeTraversal t, Node n, Scope scope) {\n--- a/src/com/google/javascript/jscomp/XtbMessageBundle.java\n+++ b/src/com/google/javascript/jscomp/XtbMessageBundle.java\n   private static final SecureEntityResolver NOOP_RESOLVER\n       = new SecureEntityResolver();\n \n-  private final String projectId;\n   private final Map<String, JsMessage> messages;\n   private final JsMessage.IdGenerator idGenerator;\n \n    */\n   public XtbMessageBundle(InputStream xtb, @Nullable String projectId) {\n     Preconditions.checkState(!\"\".equals(projectId));\n-    this.projectId = projectId;\n     this.messages = Maps.newHashMap();\n     this.idGenerator = new GoogleJsMessageIdGenerator(projectId);\n \n--- a/src/com/google/javascript/jscomp/graph/StandardUnionFind.java\n+++ b/src/com/google/javascript/jscomp/graph/StandardUnionFind.java\n import com.google.common.collect.ImmutableSet;\n \n import static com.google.common.collect.Iterators.filter;\n-import static com.google.common.collect.Iterators.unmodifiableIterator;\n import com.google.common.collect.Maps;\n \n import java.io.Serializable;\n       }\n \n       @Override public Iterator<E> iterator() {\n-        return unmodifiableIterator(filter(elmap.keySet().iterator(),\n-            isSameRoot));\n+        return filter(elmap.keySet().iterator(),\n+            isSameRoot);\n       }\n \n       @Override public int size() {\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n    * Includes the prototype iff someone has created it. We do not want\n    * to expose the prototype for ordinary functions.\n    */\n+  @Override\n   public Set<String> getOwnPropertyNames() {\n     if (prototypeSlot == null) {\n       return super.getOwnPropertyNames();\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n package com.google.javascript.rhino.jstype;\n \n import static com.google.common.base.Preconditions.checkState;\n-import static com.google.javascript.rhino.jstype.ObjectType.Property;\n-\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Maps;\n--- a/test/com/google/javascript/jscomp/DefaultCodingConventionTest.java\n+++ b/test/com/google/javascript/jscomp/DefaultCodingConventionTest.java\n import junit.framework.TestCase;\n \n /**\n- * Test class for {@link DefaultCodingConvention}.\n+ * Test class for the default {@link CodingConvention}.\n  */\n public class DefaultCodingConventionTest extends TestCase {\n   private CodingConvention conv = CodingConventions.getDefault();\n--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n     test(wrapInFunction(original), wrapInFunction(expected));\n   }\n \n-  private void testSameInFunction(String original) {\n-    testSame(wrapInFunction(original));\n-  }\n-\n   public void testMakeLocalNamesUniqueWithContext1() {\n     // Set the test type\n     this.useDefaultRenamer = true;\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n \n   private CompilerOptions options;\n \n+  @Override\n   public void setUp() throws Exception {\n     super.setUp();\n ", "timestamp": 1320783916, "metainfo": ""}