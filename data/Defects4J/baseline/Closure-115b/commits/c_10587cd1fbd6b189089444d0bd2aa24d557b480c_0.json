{"sha": "10587cd1fbd6b189089444d0bd2aa24d557b480c", "log": "Attempt #2: jscompile_clients passes this time. -Turn on RemoveUnusedVars's optimizeCalls option within the main optimization loop. -This is required to handle call sites that propagate unused parameters.  R=johnlenz DELTA=31  (16 added, 8 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=886   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(devirtualizePrototypeMethods);\n     }\n \n-    // Running \"optimizeCalls\" after devirtualization is useful for removing\n-    // unneeded \"this\" values.\n-    if (options.optimizeCalls\n-        || options.optimizeParameters\n-        || options.optimizeReturns) {\n-      passes.add(optimizeCalls);\n-    }\n-\n     if (options.customPasses != null) {\n       passes.add(getCustomPasses(\n           CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n       passes.add(inlineFunctions);\n     }\n \n+    boolean runOptimizeCalls = options.optimizeCalls\n+        || options.optimizeParameters\n+        || options.optimizeReturns;\n+\n     if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n       if (options.deadAssignmentElimination) {\n         passes.add(deadAssignmentsElimination);\n       }\n-      passes.add(removeUnusedVars);\n+      if (!runOptimizeCalls) {\n+        passes.add(removeUnusedVars);\n+      }\n+    }\n+    if (runOptimizeCalls) {\n+      passes.add(optimizeCallsAndRemoveUnusedVars);\n     }\n     assertAllLoopablePasses(passes);\n     return passes;\n   };\n \n   /**\n-   * Rewrite instance methods as static methods, to make them easier\n-   * to inline.\n-   */\n-  private final PassFactory optimizeCalls =\n-      new PassFactory(\"optimizeCalls\", true) {\n+   * Optimizes unused function arguments, unused return values, and inlines\n+   * constant parameters. Also runs RemoveUnusedVars.\n+   */\n+  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n+      new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       OptimizeCalls passes = new OptimizeCalls(compiler);\n       }\n \n       if (options.optimizeCalls) {\n-        passes.addPass(new RemoveUnusedVars(compiler, false, true, true));\n+        boolean removeOnlyLocals = options.removeUnusedLocalVars\n+            && !options.removeUnusedVars;\n+        boolean preserveAnonymousFunctionNames =\n+            options.anonymousFunctionNaming !=\n+            AnonymousFunctionNamingPolicy.OFF;\n+        passes.addPass(\n+            new RemoveUnusedVars(compiler, !removeOnlyLocals,\n+                preserveAnonymousFunctionNames, true));\n       }\n       return passes;\n     }", "timestamp": 1300284434, "metainfo": ""}