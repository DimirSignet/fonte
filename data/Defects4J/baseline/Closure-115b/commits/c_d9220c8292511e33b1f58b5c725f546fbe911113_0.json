{"sha": "d9220c8292511e33b1f58b5c725f546fbe911113", "log": "Add check that there are no duplicates in prevUsedRenameMap.  R=acleung,johnlenz DELTA=53 (50 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6134   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RenameVars.java\n+++ b/src/com/google/javascript/jscomp/RenameVars.java\n \n   /**\n    * Maps a name node to its pseudo name, null if we are not generating so\n-   * there will not no overhead unless we are debugging.\n+   * there will be no overhead unless we are debugging.\n    */\n   private final Map<Node, String> pseudoNameMap;\n \n    * that were reused.\n    */\n   private void reusePreviouslyUsedVariableMap() {\n+    // If prevUsedRenameMap had duplicate values then this pass would be\n+    // non-deterministic.\n+    // In such a case, the following will throw an IllegalArgumentException.\n+    Preconditions.checkState(\n+        prevUsedRenameMap.getNewNameToOriginalNameMap() instanceof Map);\n     for (Assignment a : assignments.values()) {\n       String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName);\n       if (prevNewName == null || reservedNames.contains(prevNewName)) {\n   /**\n    * Determines which new names to substitute for the original names.\n    */\n-  private void assignNames(Set<Assignment> varsToRename) {\n+  private void assignNames(SortedSet<Assignment> varsToRename) {\n     NameGenerator globalNameGenerator =\n         new NameGenerator(reservedNames, prefix, reservedCharacters);\n \n--- a/test/com/google/javascript/jscomp/RenameVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RenameVarsTest.java\n     assertVariableMapsEqual(expectedVariableMap, previouslyUsedMap);\n   }\n \n+  public void testPrevUsedMapWithDuplicates() {\n+    previouslyUsedMap = makeVariableMap(\"Foo\", \"z\", \"Bar\", \"z\");\n+    try {\n+      testSame(\"\");\n+      fail();\n+    } catch (java.lang.IllegalArgumentException expected) {\n+    }\n+  }\n+\n   public void testExportSimpleSymbolReservesName() {\n     test(\"var goog, x; goog.exportSymbol('a', x);\",\n          \"var a, b; a.exportSymbol('a', b);\");\n--- a/test/com/google/javascript/jscomp/ShadowVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/ShadowVariablesTest.java\n public class ShadowVariablesTest extends CompilerTestCase{\n   // Use pseudo names to make test easier to read.\n   private boolean generatePseudoNames = false;\n+  private RenameVars pass = null;\n+\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n-      return new RenameVars(\n+      pass = new RenameVars(\n           compiler, \"\", false, false,\n           generatePseudoNames, true, null, null, null);\n+      return  pass;\n   }\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     generatePseudoNames = false;\n+  }\n+\n+  @Override\n+  protected void tearDown() throws Exception {\n+    super.tearDown();\n+    pass = null;\n   }\n \n   public void testShadowSimple1() {\n   public void testExportedLocal2() {\n     test(\"function f($super) { $super();$super(); return function(a){} }\",\n          \"function a($super) { $super();$super(); return function(b){} }\");\n+  }\n+\n+  public void testRenameMapHasNoDuplicates() {\n+    test(\"function foo(x) { return function (y) {} }\",\n+         \"function   b(a) { return function (a) {} }\");\n+\n+    VariableMap vm = pass.getVariableMap();\n+    try {\n+      vm.getNewNameToOriginalNameMap();\n+    } catch (java.lang.IllegalArgumentException unexpected) {\n+      fail(\"Invalid VariableMap generated: \" +\n+           vm.getOriginalNameToNewNameMap().toString());\n+    }\n   }\n \n   public void testBug4172539() {\n--- a/test/com/google/javascript/jscomp/VariableMapTest.java\n+++ b/test/com/google/javascript/jscomp/VariableMapTest.java\n       }\n     }\n   }\n+\n+  public void testReverseThrowsErrorOnDuplicate() throws ParseException {\n+    VariableMap vm = new VariableMap(ImmutableMap.of(\"AA\", \"b\", \"BB\", \"b\"));\n+    try {\n+      vm.getNewNameToOriginalNameMap();\n+      fail();\n+    } catch (java.lang.IllegalArgumentException expected) {\n+    }\n+  }\n+\n+  public void testReverseLookupOfNullFindsNoName() throws ParseException {\n+    VariableMap vm = new VariableMap(ImmutableMap.of(\"AA\", \"a\", \"BB\", \"b\"));\n+    assertNull(vm.lookupSourceName(null));\n+  }\n }", "timestamp": 1358195087, "metainfo": ""}