{"sha": "eaf501ca2e9530b674f52b30441f718d2952d6c7", "log": "fix up copyInformationFrom in response to comments made on http://cl/23058796 after submission  R=johnlenz DELTA=58  (51 added, 1 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2963   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n   // TODO(nicksantos): The semantics of this method are ill-defined. Delete it.\n   public Node copyInformationFrom(Node other) {\n     if (getProp(ORIGINALNAME_PROP) == null) {\n-        putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n+      putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n     }\n \n     if (getProp(STATIC_SOURCE_FILE) == null) {\n       putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n-    }\n-\n-    if (getProp(SOURCENAME_PROP) == null) {\n+      sourcePosition = other.sourcePosition;\n+    } else if (getProp(SOURCENAME_PROP) == null) {\n       putProp(SOURCENAME_PROP, other.getProp(SOURCENAME_PROP));\n-    }\n-\n-    sourcePosition = other.sourcePosition;\n+      sourcePosition = other.sourcePosition;\n+    }\n+\n     return this;\n   }\n \n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n     assertEquals(-1, assign.getIndexOfChild(assign));\n   }\n \n+  public void testCopyInformationFrom() {\n+    Node assign = getNode(\"b = c\");\n+    assign.setSourceEncodedPosition(99);\n+    assign.setSourceFileForTesting(\"foo.js\");\n+\n+    Node lhs = assign.getFirstChild();\n+    lhs.copyInformationFrom(assign);\n+    assertEquals(99, lhs.getSourcePosition());\n+    assertEquals(\"foo.js\", lhs.getSourceFileName());\n+\n+    assign.setSourceEncodedPosition(101);\n+    assign.setSourceFileForTesting(\"bar.js\");\n+    lhs.copyInformationFrom(assign);\n+    assertEquals(99, lhs.getSourcePosition());\n+    assertEquals(\"foo.js\", lhs.getSourceFileName());\n+  }\n+\n+  public void testUseSourceInfoIfMissingFrom() {\n+    Node assign = getNode(\"b = c\");\n+    assign.setSourceEncodedPosition(99);\n+    assign.setSourceFileForTesting(\"foo.js\");\n+\n+    Node lhs = assign.getFirstChild();\n+    lhs.useSourceInfoIfMissingFrom(assign);\n+    assertEquals(99, lhs.getSourcePosition());\n+    assertEquals(\"foo.js\", lhs.getSourceFileName());\n+\n+    assign.setSourceEncodedPosition(101);\n+    assign.setSourceFileForTesting(\"bar.js\");\n+    lhs.useSourceInfoIfMissingFrom(assign);\n+    assertEquals(99, lhs.getSourcePosition());\n+    assertEquals(\"foo.js\", lhs.getSourceFileName());\n+  }\n+\n+  public void testUseSourceInfoFrom() {\n+    Node assign = getNode(\"b = c\");\n+    assign.setSourceEncodedPosition(99);\n+    assign.setSourceFileForTesting(\"foo.js\");\n+\n+    Node lhs = assign.getFirstChild();\n+    lhs.useSourceInfoFrom(assign);\n+    assertEquals(99, lhs.getSourcePosition());\n+    assertEquals(\"foo.js\", lhs.getSourceFileName());\n+\n+    assign.setSourceEncodedPosition(101);\n+    assign.setSourceFileForTesting(\"bar.js\");\n+    lhs.useSourceInfoFrom(assign);\n+    assertEquals(101, lhs.getSourcePosition());\n+    assertEquals(\"bar.js\", lhs.getSourceFileName());\n+  }\n+\n   private static Node getNode(String js) {\n     Node root = parse(\"var a=(\" + js + \");\");\n     Node expr = root.getFirstChild();", "timestamp": 1312853564, "metainfo": ""}