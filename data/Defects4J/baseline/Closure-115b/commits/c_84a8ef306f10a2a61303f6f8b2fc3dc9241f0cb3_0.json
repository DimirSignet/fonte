{"sha": "84a8ef306f10a2a61303f6f8b2fc3dc9241f0cb3", "log": "Add whitelist-based suppression to command-line runners.  R=johnlenz DELTA=67  (52 added, 1 deleted, 14 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5283   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n         diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n       }\n+    }\n+\n+    if (!config.warningsWhitelistFile.isEmpty()) {\n+      options.addWarningsGuard(\n+          WhitelistWarningsGuard.fromFile(\n+              new File(config.warningsWhitelistFile)));\n     }\n \n     createDefineOrTweakReplacements(config.define, options, false);\n       return this;\n     }\n \n+    private String warningsWhitelistFile = \"\";\n+\n+    /**\n+     * Sets a whitelist file that suppresses warnings.\n+     */\n+    CommandLineConfig setWarningsWhitelistFile(String fileName) {\n+      this.warningsWhitelistFile = fileName;\n+      return this;\n+    }\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         usage = \"A file containing additional command-line options.\")\n     private String flag_file = \"\";\n \n+    @Option(name = \"--warnings_whitelist_file\",\n+        usage = \"A file containing warnings to suppress. Each line should be \" +\n+            \"of the form\\n\" +\n+            \"<file-name>:<line-number>?  <warning-description>\")\n+    private String warnings_whitelist_file = \"\";\n+\n     @Argument\n     private List<String> arguments = Lists.newArrayList();\n \n           .setLanguageIn(flags.language_in)\n           .setProcessCommonJSModules(flags.process_common_js_modules)\n           .setCommonJSModulePathPrefix(flags.common_js_path_prefix)\n-          .setTransformAMDToCJSModules(flags.transform_amd_modules);\n+          .setTransformAMDToCJSModules(flags.transform_amd_modules)\n+          .setWarningsWhitelistFile(flags.warnings_whitelist_file);\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n \n import com.google.common.base.Charsets;\n import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n import com.google.common.collect.TreeMultimap;\n  */\n public class WhitelistWarningsGuard extends WarningsGuard {\n   /** The set of white-listed warnings, same format as {@code formatWarning}. */\n-  private final Set<String> whiteList;\n+  private final Set<String> whitelist;\n \n   /** Pattern to match line number in error descriptions. */\n   private static final Pattern LINE_NUMBER = Pattern.compile(\":\\\\d+\");\n   /**\n    * This class depends on an input set that contains the white-list. The format\n    * of each white-list string is:\n-   * <file-name>:  <warning-description>\n-   *\n-   * @param whiteList The set of JS-warnings that are white-listed. This is\n+   * <file-name>:<line-number>?  <warning-description>\n+   *\n+   * @param whitelist The set of JS-warnings that are white-listed. This is\n    *     expected to have similar format as {@code formatWarning(JSError)}.\n    */\n-  public WhitelistWarningsGuard(Set<String> whiteList) {\n-    this.whiteList = whiteList;\n+  public WhitelistWarningsGuard(Set<String> whitelist) {\n+    Preconditions.checkNotNull(whitelist);\n+    this.whitelist = normalizeWhitelist(whitelist);\n+  }\n+\n+  private static Set<String> normalizeWhitelist(Set<String> whitelist) {\n+    Set<String> result = Sets.newHashSet();\n+    for (String match : whitelist) {\n+      result.add(LINE_NUMBER.matcher(match).replaceFirst(\":\"));\n+    }\n+    return ImmutableSet.copyOf(result);\n   }\n \n   @Override\n    * @return whether the given warning is white-listed or not.\n    */\n   protected boolean containWarning(String formattedWarning) {\n-    return whiteList.contains(formattedWarning);\n+    return whitelist.contains(formattedWarning);\n   }\n \n   @Override\n \n     /**\n      * Sets whether line number are recorded in the whitelist.\n-     * This means that if lines are added below the warning, the warning\n-     * will need to be fixed or the whitelist will need to be regenerated.\n+     *\n+     * The line numbers are not used by the compiler. The whitelist will still\n+     * match any line in the file. This ensures that unrelated changes in\n+     * the file don't make the build fail.\n+     *\n+     * The line numbers are only there to make it easier for humans to find\n+     * the problem.\n      */\n     public WhitelistBuilder setWithLineNumber(boolean line) {\n       this.withLineNumber = line;", "timestamp": 1343834039, "metainfo": ""}