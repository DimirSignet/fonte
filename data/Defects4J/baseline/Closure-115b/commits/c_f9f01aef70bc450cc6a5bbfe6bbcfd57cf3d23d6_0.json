{"sha": "f9f01aef70bc450cc6a5bbfe6bbcfd57cf3d23d6", "log": "Customize which warnings are used in the ant task Contributed by jamesots Fixes issue 640  R=acleung DELTA=73  (70 added, 1 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4310   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   }\n \n   /** Find the diagnostic group registered under the given name. */\n-  protected DiagnosticGroup forName(String name) {\n+  public DiagnosticGroup forName(String name) {\n     return groupsByName.get(name);\n   }\n \n--- a/src/com/google/javascript/jscomp/ant/CompileTask.java\n+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java\n package com.google.javascript.jscomp.ant;\n \n import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.CommandLineRunner;\n import com.google.javascript.jscomp.CompilationLevel;\n import com.google.javascript.jscomp.Compiler;\n import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.DiagnosticGroup;\n+import com.google.javascript.jscomp.DiagnosticGroups;\n import com.google.javascript.jscomp.JSSourceFile;\n import com.google.javascript.jscomp.MessageFormatter;\n import com.google.javascript.jscomp.Result;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import java.util.logging.Level;\n \n /**\n   private final List<FileList> externFileLists;\n   private final List<FileList> sourceFileLists;\n   private final List<Path> sourcePaths;\n+  private final List<Warning> warnings;\n \n   public CompileTask() {\n     this.warningLevel = WarningLevel.DEFAULT;\n     this.externFileLists = Lists.newLinkedList();\n     this.sourceFileLists = Lists.newLinkedList();\n     this.sourcePaths = Lists.newLinkedList();\n+    this.warnings = Lists.newLinkedList();\n   }\n \n   /**\n   }\n \n   /**\n+   * Adds a <warning/> entry\n+   *\n+   * Each warning entry must have two attributes, group and level. Group must\n+   * contain one of the constants from DiagnosticGroups (e.g.,\n+   * \"ACCESS_CONTROLS\"), while level must contain one of the CheckLevel\n+   * constants (\"ERROR\", \"WARNING\" or \"OFF\").\n+   */\n+  public void addWarning(Warning warning) {\n+    this.warnings.add(warning);\n+  }\n+\n+  /**\n    * Sets the source files.\n    */\n   public void addSources(FileList list) {\n     }\n \n     convertDefineParameters(options);\n+\n+    for (Warning warning : warnings) {\n+      CheckLevel level = warning.getLevel();\n+      String groupName = warning.getGroup();\n+      DiagnosticGroup group = new DiagnosticGroups().forName(groupName);\n+      if (group == null) {\n+        throw new BuildException(\n+            \"Unrecognized 'warning' option value (\" + groupName + \")\");\n+      }\n+      options.setWarningLevel(group, level);\n+    }\n \n     return options;\n   }\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ant/Warning.java\n+/*\n+ * Copyright 2012 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.ant;\n+\n+import com.google.javascript.jscomp.CheckLevel;\n+\n+/** Simple representation of a warning flag in Ant */\n+public class Warning {\n+  private String group;\n+  private CheckLevel level;\n+\n+  public String getGroup() {\n+    return group;\n+  }\n+\n+  public void setGroup(String group) {\n+    this.group = group;\n+  }\n+\n+  public CheckLevel getLevel() {\n+    return level;\n+  }\n+\n+  public void setLevel(CheckLevel level) {\n+    this.level = level;\n+  }\n+}", "timestamp": 1330635075, "metainfo": ""}