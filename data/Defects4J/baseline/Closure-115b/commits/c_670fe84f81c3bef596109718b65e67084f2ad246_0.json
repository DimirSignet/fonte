{"sha": "670fe84f81c3bef596109718b65e67084f2ad246", "log": "Make JS Compiler CodePrinter public. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52050801", "commit": "\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n  *\n  * @see CodeGenerator\n  */\n-class CodePrinter {\n+public final class CodePrinter {\n   // The number of characters after which we insert a line break in the code\n   static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;\n \n \n   }\n \n-  static class Builder {\n+  public static final class Builder {\n     private final Node root;\n     private CompilerOptions options = new CompilerOptions();\n     private boolean outputTypes = false;\n      * Sets the root node from which to generate the source code.\n      * @param node The root node.\n      */\n-    Builder(Node node) {\n+    public Builder(Node node) {\n       root = node;\n     }\n \n     /**\n      * Sets the output options from compiler options.\n      */\n-    Builder setCompilerOptions(CompilerOptions options) {\n+    public Builder setCompilerOptions(CompilerOptions options) {\n       try {\n         this.options = (CompilerOptions) options.clone();\n       } catch (CloneNotSupportedException e) {\n       return this;\n     }\n \n-    Builder setTypeRegistry(JSTypeRegistry registry) {\n+    public Builder setTypeRegistry(JSTypeRegistry registry) {\n       this.registry = registry;\n       return this;\n     }\n      * Sets whether pretty printing should be used.\n      * @param prettyPrint If true, pretty printing will be used.\n      */\n-    Builder setPrettyPrint(boolean prettyPrint) {\n+    public Builder setPrettyPrint(boolean prettyPrint) {\n       options.prettyPrint = prettyPrint;\n       return this;\n     }\n      * Sets whether line breaking should be done automatically.\n      * @param lineBreak If true, line breaking is done automatically.\n      */\n-    Builder setLineBreak(boolean lineBreak) {\n+    public Builder setLineBreak(boolean lineBreak) {\n       options.lineBreak = lineBreak;\n       return this;\n     }\n      * Sets whether to output closure-style type annotations.\n      * @param outputTypes If true, outputs closure-style type annotations.\n      */\n-    Builder setOutputTypes(boolean outputTypes) {\n+    public Builder setOutputTypes(boolean outputTypes) {\n       this.outputTypes = outputTypes;\n       return this;\n     }\n      *\n      * @param sourceMap The source map.\n      */\n-    Builder setSourceMap(SourceMap sourceMap) {\n+    public Builder setSourceMap(SourceMap sourceMap) {\n       this.sourceMap = sourceMap;\n       return this;\n     }\n     /**\n      * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n      */\n-    Builder setTagAsStrict(boolean tagAsStrict) {\n+    public Builder setTagAsStrict(boolean tagAsStrict) {\n       this.tagAsStrict = tagAsStrict;\n       return this;\n     }\n     /**\n      * Generates the source code and returns it.\n      */\n-    String build() {\n+    public String build() {\n       if (root == null) {\n         throw new IllegalStateException(\n             \"Cannot build without root node being specified\");", "timestamp": 1378768095, "metainfo": ""}