{"sha": "888718622d9090cd68b072d3cdf69e4004a6087f", "log": "Fix issue with reflected objects and enums. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49048799", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     // See CodingConvention#getObjectLiteralCase and goog.object.reflect.\n     // Ignore these types of literals.\n     ObjectType objectType = ObjectType.cast(type);\n-    if (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) {\n+    if (objectType == null\n+        || n.getBooleanProp(Node.REFLECTED_OBJECT)\n+        || objectType.isEnumType()) {\n       return scope;\n     }\n \n     }\n   }\n \n-  private void resolvedTemplateType(\n+  private static void resolvedTemplateType(\n       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {\n     JSType previous = map.get(template);\n     if (!resolved.isUnknownType()) {\n    * If we give the anonymous object an inferred property of (number|undefined),\n    * then this code will type-check appropriately.\n    */\n-  private void inferPropertyTypesToMatchConstraint(\n+  private static void inferPropertyTypesToMatchConstraint(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: string\");\n   }\n \n+  public void testEnums() throws Exception {\n+    testTypes(\n+        \"var outer = function() {\" +\n+        \"  /** @enum {number} */\" +\n+        \"  var Level = {\" +\n+        \"    NONE: 0,\" +\n+        \"  };\" +\n+        \"  /** @type {!Level} */\" +\n+        \"  var l = Level.NONE;\" +\n+        \"}\");\n+  }\n+\n   /**\n    * Tests that the || operator is type checked correctly, that is of\n    * the type of the first argument or of the second argument. See", "timestamp": 1373325963, "metainfo": ""}