{"sha": "d2b3ca66b6088c1c08437c120ae215d91d313b7c", "log": "Make sure ScopedAliases doesn't crash when there's a dangling var ref. Fixes issue 1103 R=dimvar", "commit": "\n--- a/src/com/google/javascript/jscomp/JsAst.java\n+++ b/src/com/google/javascript/jscomp/JsAst.java\n   }\n \n   private void parse(AbstractCompiler compiler) {\n+    int startErrorCount = compiler.getErrorManager().getErrorCount();\n     try {\n-      logger_.fine(\"Parsing: \" + sourceFile.getName());\n       ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n           compiler.getParserConfig(),\n           compiler.getDefaultErrorReporter(),\n           JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n     }\n \n-    if (root == null || compiler.hasHaltingErrors()) {\n+\n+    if (root == null ||\n+        // Most passes try to report as many errors as possible,\n+        // so there may already be errors. We only care if there were\n+        // errors in the code we just parsed.\n+        (compiler.getErrorManager().getErrorCount() > startErrorCount && !compiler.isIdeMode())) {\n       // There was a parse error or IOException, so use a dummy block.\n       root = IR.script();\n     } else {\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n     if (nameNode.isName()) {\n       result = IR.var(nameNode, value);\n       result.setJSDocInfo(info);\n+    } else if (value != null) {\n+      result = IR.exprResult(IR.assign(nameNode, value));\n+      result.getFirstChild().setJSDocInfo(info);\n     } else {\n-      result = IR.exprResult(IR.assign(nameNode, value));\n+      result = IR.exprResult(nameNode);\n       result.getFirstChild().setJSDocInfo(info);\n     }\n     return result;\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n         Node parent = n.getParent();\n-        boolean isVarAssign = parent.isVar() && n.hasChildren();\n-        if (isVarAssign && n.getFirstChild().isQualifiedName()) {\n+        boolean isVar = parent.isVar();\n+        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {\n           // Bleeding functions already get a BAD_PARAMETERS error, so just\n         } else if (parent.getType() == Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n-        } else if (isVarAssign) {\n-          Node value = v.getInitialValue().detachFromParent();\n+        } else if (isVar) {\n+          Node value = n.hasChildren() ?\n+              v.getInitialValue().detachFromParent() :\n+              null;\n           String name = n.getString();\n           int nameCount = scopedAliasNames.count(name);\n           scopedAliasNames.add(name);\n \n           // Add $jscomp.scope.name = EXPR;\n           // Make sure we copy over all the jsdoc and debug info.\n-          Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n-              compiler.getCodingConvention(),\n-              globalName,\n-              value,\n-              v.getJSDocInfo())\n-              .useSourceInfoIfMissingFromForTree(n);\n-          NodeUtil.setDebugInformation(\n-              newDecl.getFirstChild().getFirstChild(), n, name);\n-          parent.getParent().addChildBefore(newDecl, parent);\n+          if (value != null || v.getJSDocInfo() != null) {\n+            Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n+                compiler.getCodingConvention(),\n+                globalName,\n+                value,\n+                v.getJSDocInfo())\n+                .useSourceInfoIfMissingFromForTree(n);\n+            NodeUtil.setDebugInformation(\n+                newDecl.getFirstChild().getFirstChild(), n, name);\n+            parent.getParent().addChildBefore(newDecl, parent);\n+          }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n           v.getNameNode().addChildToFront(\n--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n     test(\"goog.scope(function () { var x = 3; });\" +\n          \"goog.scope(function () { var x = 4; });\",\n          SCOPE_NAMESPACE + \"$jscomp.scope.x = 3; $jscomp.scope.x$1 = 4\");\n+  }\n+\n+  public void testIssue1103a() {\n+    test(\"goog.scope(function () {\" +\n+         \"  var a;\" +\n+         \"  foo.bar = function () { a = 1; };\" +\n+         \"});\",\n+         SCOPE_NAMESPACE + \"foo.bar = function () { $jscomp.scope.a = 1; }\");\n+  }\n+\n+  public void testIssue1103b() {\n+    test(\"goog.scope(function () {\" +\n+         \"  var a = foo, b, c = 1;\" +\n+         \"});\",\n+         SCOPE_NAMESPACE + \"$jscomp.scope.c=1\");\n+  }\n+\n+  public void testIssue1103c() {\n+    test(\"goog.scope(function () {\" +\n+         \"  /** @type {number} */ var a;\" +\n+         \"});\",\n+         SCOPE_NAMESPACE + \"/** @type {number} */ $jscomp.scope.a;\");\n   }\n \n   // Alias Recording Tests", "timestamp": 1380396035, "metainfo": ""}