{"sha": "37880c3086088230ee05bc10386d191a2051027c", "log": "Clean up usage of the default output stream. Fixes issue 1007. R=blickly", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n import com.google.common.base.Supplier;\n-import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n   static final DiagnosticType OUTPUT_SAME_AS_INPUT_ERROR = DiagnosticType.error(\n       \"JSC_OUTPUT_SAME_AS_INPUT_ERROR\",\n       \"Bad output file (already listed as input file): {0}\");\n+  static final DiagnosticType NO_TREE_GENERATED_ERROR = DiagnosticType.error(\n+      \"JSC_NO_TREE_GENERATED_ERROR\",\n+      \"Code contains errors. No tree was generated.\");\n \n   private final CommandLineConfig config;\n \n-  private Appendable jsOutput;\n+  private final PrintStream defaultJsOutput;\n   private final PrintStream err;\n   private A compiler;\n \n \n   AbstractCommandLineRunner(PrintStream out, PrintStream err) {\n     this.config = new CommandLineConfig();\n-    this.jsOutput = Preconditions.checkNotNull(out);\n+    this.defaultJsOutput = Preconditions.checkNotNull(out);\n     this.err = Preconditions.checkNotNull(err);\n   }\n \n       result = -2;\n     }\n \n-    try {\n-      if (jsOutput instanceof Closeable) {\n-        ((Closeable) jsOutput).close();\n-      }\n-    } catch (IOException e) {\n-      throw Throwables.propagate(e);\n-    }\n-\n     if (testMode) {\n       exitCodeReceiverForTesting.apply(result);\n     } else {\n     }\n   }\n \n+  private Appendable createDefaultOutput() throws IOException {\n+    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n+    File test = new File(config.jsOutputFile);\n+    if (writeOutputToFile) {\n+      return fileNameToLegacyOutputWriter(config.jsOutputFile);\n+    } else {\n+      return streamToLegacyOutputWriter(defaultJsOutput);\n+    }\n+  }\n+\n+  private static void closeAppendable(Appendable output) throws IOException {\n+    if (output instanceof Flushable) {\n+      ((Flushable) output).flush();\n+    }\n+    if (output instanceof Closeable) {\n+      ((Closeable) output).close();\n+    }\n+  }\n+\n   /**\n    * Parses command-line arguments and runs the compiler.\n    *\n     List<String> outputFileNames = Lists.newArrayList();\n     if (writeOutputToFile) {\n       outputFileNames.add(config.jsOutputFile);\n-      jsOutput = fileNameToLegacyOutputWriter(config.jsOutputFile);\n-    } else if (jsOutput instanceof OutputStream) {\n-      jsOutput = streamToLegacyOutputWriter((OutputStream) jsOutput);\n     }\n \n     List<String> jsFiles = config.js;\n       }\n     }\n \n-    int errCode = processResults(result, modules, options);\n-    // Flush the output if we are writing to a file.\n-    // We can't close yet, because we may need to write phase ordering\n-    // info to it later.\n-    if (jsOutput instanceof Flushable) {\n-      ((Flushable) jsOutput).flush();\n-    }\n-    return errCode;\n+    return processResults(result, modules, options);\n   }\n \n   /**\n       if (compiler.getRoot() == null) {\n         return 1;\n       } else {\n+        Appendable jsOutput = createDefaultOutput();\n         jsOutput.append(\n             DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n         jsOutput.append('\\n');\n+        closeAppendable(jsOutput);\n         return 0;\n       }\n     }\n       if (compiler.getRoot() == null) {\n         return 1;\n       } else {\n+        Appendable jsOutput = createDefaultOutput();\n         ControlFlowGraph<Node> cfg = compiler.computeCFG();\n         DotFormatter.appendDot(\n             compiler.getRoot().getLastChild(), cfg, jsOutput);\n         jsOutput.append('\\n');\n+        closeAppendable(jsOutput);\n         return 0;\n       }\n     }\n \n     if (config.printTree) {\n       if (compiler.getRoot() == null) {\n-        jsOutput.append(\"Code contains errors; no tree was generated.\\n\");\n+        compiler.report(JSError.make(NO_TREE_GENERATED_ERROR));\n         return 1;\n       } else {\n+        Appendable jsOutput = createDefaultOutput();\n         compiler.getRoot().appendStringTree(jsOutput);\n         jsOutput.append(\"\\n\");\n+        closeAppendable(jsOutput);\n         return 0;\n       }\n     }\n       escaper = getJavascriptEscaper();\n     }\n \n+    Appendable jsOutput = createDefaultOutput();\n     writeOutput(\n         jsOutput, compiler, compiler.toSource(), config.outputWrapper,\n         marker, escaper);\n+    closeAppendable(jsOutput);\n   }\n \n   private void outputModuleBinaryAndSourceMaps(", "timestamp": 1379974585, "metainfo": ""}