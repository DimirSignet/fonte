{"sha": "41a46f7bb80c32e2af58ba18ba53b992f933595b", "log": "Move whitelist generation into jscompiler  R=mwr,acleung DELTA=297  (223 added, 59 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4322   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     }\n \n     if (level.isOn()) {\n+      if (getOptions().errorHandler != null) {\n+        getOptions().errorHandler.report(level, error);\n+      }\n       errorManager.report(level, error);\n     }\n   }\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * Data holder Alias Transformation information accumulated during a compile.\n    */\n   private transient AliasTransformationHandler aliasHandler;\n+\n+  /**\n+   * Handler for compiler warnings and errors.\n+   */\n+  transient ErrorHandler errorHandler;\n \n   /**\n    * Initializes compiler options. All options are disabled by default.\n \n     // Debugging\n     aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n+    errorHandler = null;\n   }\n \n   /**\n \n   public AliasTransformationHandler getAliasTransformationHandler() {\n     return this.aliasHandler;\n+  }\n+\n+  /**\n+   * Set a custom handler for warnings and errors.\n+   *\n+   * This is mostly used for piping the warnings and errors to\n+   * a file behind the scenes.\n+   *\n+   * If you want to filter warnings and errors, you should use a WarningsGuard.\n+   *\n+   * If you want to change how warnings and errors are reported to the user,\n+   * you should set a ErrorManager on the Compiler. An ErrorManager is\n+   * intended to summarize the errors for a single compile job.\n+   */\n+  public void setErrorHandler(ErrorHandler handler) {\n+    this.errorHandler = handler;\n   }\n \n   /**\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ErrorHandler.java\n+/*\n+ * Copyright 2012 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.CheckLevel;\n+\n+/**\n+ * The error handler is any generic sink for warnings and errors,\n+ * after they've passed through any filtering {@code WarningsGuard}s.\n+ *\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+public interface ErrorHandler {\n+  /**\n+   * @param level the reporting level\n+   * @param error the error to report\n+   */\n+  void report(CheckLevel level, JSError error);\n+}\n--- a/src/com/google/javascript/jscomp/ErrorManager.java\n+++ b/src/com/google/javascript/jscomp/ErrorManager.java\n  * errors and warnings generated by the compiler.\n  *\n  */\n-public interface ErrorManager {\n+public interface ErrorManager extends ErrorHandler {\n   /**\n    * Reports an error. The errors will be displayed by the\n    * {@link #generateReport()} at the discretion of the implementation.\n--- a/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n \n import com.google.common.base.Charsets;\n import com.google.common.base.Preconditions;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.TreeMultimap;\n import com.google.common.io.CharStreams;\n import com.google.common.io.Files;\n import com.google.common.io.InputSupplier;\n+import com.google.javascript.jscomp.CheckLevel;\n \n import java.io.File;\n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.io.PrintStream;\n import java.util.HashSet;\n import java.util.Set;\n import java.util.regex.Pattern;\n  * @author anatol@google.com (Anatol Pomazau)\n  * @author bashir@google.com (Bashir Sadjad)\n  */\n-public abstract class WhitelistWarningsGuard extends WarningsGuard {\n+public class WhitelistWarningsGuard extends WarningsGuard {\n   /** The set of white-listed warnings, same format as {@code formatWarning}. */\n   private final Set<String> whiteList;\n \n     this.whiteList = whiteList;\n   }\n \n+  @Override\n+  public CheckLevel level(JSError error) {\n+    if (containWarning(formatWarning(error))) {\n+      // If the message matches the guard we use WARNING, so that it\n+      // - Shows up on stderr, and\n+      // - Gets caught by the WhitelistBuilder downstream in the pipeline\n+      return CheckLevel.WARNING;\n+    }\n+\n+    return null;\n+  }\n+\n   /**\n    * Determines whether a given warning is included in the white-list.\n    *\n   @Override\n   public int getPriority() {\n     return WarningsGuard.Priority.SUPPRESS_BY_WHITELIST.getValue();\n+  }\n+\n+  /** Creates a warnings guard from a file. */\n+  public static WhitelistWarningsGuard fromFile(File file) {\n+    return new WhitelistWarningsGuard(loadWhitelistedJsWarnings(file));\n   }\n \n   /**\n     }\n     return warning;\n   }\n+\n+  public static class WhitelistBuilder implements ErrorHandler {\n+    private final Set<JSError> warnings = Sets.newLinkedHashSet();\n+    private String productName = null;\n+    private String generatorTarget = null;\n+    private boolean withLineNumber = false;\n+\n+    /** Fill in your product name to get a fun message! */\n+    public WhitelistBuilder setProductName(String name) {\n+      this.productName = name;\n+      return this;\n+    }\n+\n+    /** Fill in instructions on how to generate this whitelist. */\n+    public WhitelistBuilder setGeneratorTarget(String name) {\n+      this.generatorTarget = name;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets whether line number are recorded in the whitelist.\n+     * This means that if lines are added below the warning, the warning\n+     * will need to be fixed or the whitelist will need to be regenerated.\n+     */\n+    public WhitelistBuilder setWithLineNumber(boolean line) {\n+      this.withLineNumber = line;\n+      return this;\n+    }\n+\n+    @Override\n+    public void report(CheckLevel level, JSError error) {\n+      warnings.add(error);\n+    }\n+\n+    /**\n+     * Writes the warnings collected in a format that the WhitelistWarningsGuard\n+     * can read back later.\n+     */\n+    public void writeWhitelist(File out) throws IOException {\n+      PrintStream stream = new PrintStream(out);\n+      appendWhitelist(stream);\n+      stream.close();\n+    }\n+\n+    /**\n+     * Writes the warnings collected in a format that the WhitelistWarningsGuard\n+     * can read back later.\n+     */\n+    public void appendWhitelist(PrintStream out) {\n+      out.append(\n+          \"# This is a list of legacy warnings that have yet to be fixed.\\n\");\n+\n+      if (productName != null) {\n+        out.append(\"# Please find some time and fix at least one of them \"\n+            + \"and it will be the happiest day for \" + productName + \".\\n\");\n+      }\n+\n+      if (generatorTarget != null) {\n+        out.append(\"# When you fix any of these warnings, run \"\n+            + generatorTarget + \" task.\\n\");\n+      }\n+\n+      Multimap<DiagnosticType, String> warningsByType = TreeMultimap.create();\n+      for (JSError warning : warnings) {\n+        warningsByType.put(\n+            warning.getType(), formatWarning(warning, withLineNumber));\n+      }\n+\n+      for (DiagnosticType type : warningsByType.keySet()) {\n+        out.append(\"\\n# Warning \")\n+            .append(type.key)\n+            .append(\": \")\n+            .println(getFirstLine(type.format.toPattern()));\n+\n+        for (String warning : warningsByType.get(type)) {\n+          out.println(warning);\n+        }\n+      }\n+    }\n+  }\n }", "timestamp": 1330985881, "metainfo": ""}