{"sha": "89507939e4a3fb0cfd03edf9e26434f8a6298db9", "log": "Add support for TemplateType inferrence within record types. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51541850", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Type inference within a script node or a function body, using the data-flow\n             paramFunctionType.getParameters(),\n             argFunctionType.getParameters(), resolvedTypes);\n       }\n+    } else if (paramType.isRecordType() && !paramType.isNominalType()) {\n+      // @param {{foo:T}}\n+      ObjectType paramRecordType = paramType.toObjectType();\n+      ObjectType argObjectType = argType.restrictByNotNullOrUndefined()\n+          .toObjectType();\n+      if (argObjectType != null) {\n+        Set<String> names = paramRecordType.getPropertyNames();\n+        for (String name : names) {\n+          if (paramRecordType.hasOwnProperty(name)\n+              && argObjectType.hasProperty(name)) {\n+            maybeResolveTemplatedType(\n+                paramRecordType.getPropertyType(name),\n+                argObjectType.getPropertyType(name),\n+                resolvedTypes);\n+          }\n+        }\n+      }\n     } else if (paramType.isTemplatizedType()) {\n       // @param {Array.<T>}\n       ObjectType referencedParamType = paramType\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: Foo.<string>\");\n   }\n \n+  public void testTemplateType15() throws Exception {\n+    testTypes(\n+        \"/**\" +\n+        \" * @param {{foo:T}} p\\n\" +\n+        \" * @return {T} \\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function fn(p) { return p.foo; }\\n\" +\n+        \"/** @type {!Object} */ var x;\" +\n+        \"x = fn({foo:3});\",\n+        \"assignment\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: Object\");\n+  }\n+\n+  public void testTemplateType16() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function C() {this.foo = 1}\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {{foo:T}} p\\n\" +\n+        \" * @return {T} \\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function fn(p) { return p.foo; }\\n\" +\n+        \"/** @type {!Object} */ var x;\" +\n+        \"x = fn({foo:3});\",\n+        \"assignment\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: Object\");\n+  }\n+\n+  public void testTemplateType17() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function C() {}\\n\" +\n+        \"C.prototype.foo = 1;\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {{foo:T}} p\\n\" +\n+        \" * @return {T} \\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function fn(p) { return p.foo; }\\n\" +\n+        \"/** @type {!Object} */ var x;\" +\n+        \"x = fn({foo:3});\",\n+        \"assignment\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: Object\");\n+  }\n+\n+  public void testTemplateType18() throws Exception {\n+    // Until template types can be restricted to exclude undefined, they\n+    // are always optional.\n+    testTypes(\n+        \"/** @constructor */ function C() {}\\n\" +\n+        \"C.prototype.foo = 1;\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {{foo:T}} p\\n\" +\n+        \" * @return {T} \\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function fn(p) { return p.foo; }\\n\" +\n+        \"/** @type {!Object} */ var x;\" +\n+        \"x = fn({});\");\n+  }\n+\n   public void disable_testBadTemplateType4() throws Exception {\n     // TODO(johnlenz): Add a check for useless of template types.\n     // Unless there are at least two references to a Template type in", "timestamp": 1377731756, "metainfo": ""}