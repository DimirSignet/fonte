{"sha": "1e399630a104ca43ff65ce5eae53ccc272a694a3", "log": "Change usages of {Input,Output}Supplier in to {Byte,Char}{Source,Sink}. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48039197", "commit": "\n--- a/src/com/google/javascript/jscomp/VariableMap.java\n+++ b/src/com/google/javascript/jscomp/VariableMap.java\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n+import com.google.common.base.Splitter;\n import com.google.common.collect.ImmutableMap;\n-import com.google.common.io.ByteStreams;\n-import com.google.common.io.CharStreams;\n import com.google.common.io.Files;\n \n import java.io.*;\n     return baos.toByteArray();\n   }\n \n+  private static final Splitter LINE_SPLITTER\n+      = Splitter.onPattern(\"\\\\r?\\\\n\").omitEmptyStrings();\n+\n   /**\n    * Deserializes the variable map from a byte array returned by\n    * {@link #toBytes()}.\n    */\n   public static VariableMap fromBytes(byte[] bytes) throws ParseException {\n-    Iterable<String> lines;\n-    try {\n-      lines = CharStreams.readLines(CharStreams.newReaderSupplier(\n-          ByteStreams.newInputStreamSupplier(bytes), Charsets.UTF_8));\n-    } catch (IOException e) {\n-      // Note: An IOException is never thrown while reading from a byte array.\n-      // This try/catch is just here to appease the Java compiler.\n-      throw new RuntimeException(e);\n-    }\n+    Iterable<String> lines = LINE_SPLITTER.split(\n+        new String(bytes, Charsets.UTF_8));\n \n     ImmutableMap.Builder<String, String> map = ImmutableMap.builder();\n \n   Map<String, String> toMap() {\n     return map;\n   }\n-}\n+}\n--- a/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n import com.google.common.collect.TreeMultimap;\n+import com.google.common.io.CharSource;\n import com.google.common.io.CharStreams;\n import com.google.common.io.Files;\n-import com.google.common.io.InputSupplier;\n \n import java.io.File;\n import java.io.IOException;\n    */\n   public static Set<String> loadWhitelistedJsWarnings(File file) {\n     return loadWhitelistedJsWarnings(\n-        Files.newReaderSupplier(file, Charsets.UTF_8));\n+        Files.asCharSource(file, Charsets.UTF_8));\n   }\n \n   /**\n    * Loads legacy warnings list from the file.\n    * @return The lines of the file.\n    */\n-  protected static Set<String> loadWhitelistedJsWarnings(\n-      InputSupplier<? extends Reader> supplier) {\n+  protected static Set<String> loadWhitelistedJsWarnings(CharSource supplier) {\n     try {\n-      return loadWhitelistedJsWarnings(supplier.getInput());\n+      return loadWhitelistedJsWarnings(supplier.openStream());\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }", "timestamp": 1371251772, "metainfo": ""}