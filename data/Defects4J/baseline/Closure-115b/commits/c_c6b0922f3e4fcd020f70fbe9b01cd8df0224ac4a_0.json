{"sha": "c6b0922f3e4fcd020f70fbe9b01cd8df0224ac4a", "log": "Fix bugs around NoResolvedType type relations  R=johnlenz DELTA=44  (34 added, 5 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5915   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n       // unknown type, unless the two types are equal.\n       return thisType.isEquivalentTo(thatType) ? thisType :\n           thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    } else if (thisType.isUnionType()) {\n+      return thisType.toMaybeUnionType().meet(thatType);\n+    } else if (thatType.isUnionType()) {\n+      return thatType.toMaybeUnionType().meet(thisType);\n     } else if (thisType.isSubtype(thatType)) {\n       return filterNoResolvedType(thisType);\n     } else if (thatType.isSubtype(thisType)) {\n       return filterNoResolvedType(thatType);\n-    } else if (thisType.isUnionType()) {\n-      return thisType.toMaybeUnionType().meet(thatType);\n-    } else if (thatType.isUnionType()) {\n-      return thatType.toMaybeUnionType().meet(thisType);\n     } else if (thisType.isRecordType()) {\n       return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);\n     } else if (thatType.isRecordType()) {\n \n       if (needsFiltering) {\n         UnionTypeBuilder builder = new UnionTypeBuilder(type.registry);\n+        builder.addAlternate(type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE));\n         for (JSType alt : unionType.getAlternates()) {\n           if (!alt.isNoResolvedType()) {\n             builder.addAlternate(alt);\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n     JSType result = builder.build();\n     if (!result.isNoType()) {\n       return result;\n-    } else if (this.isObject() && that.isObject()) {\n+    } else if (this.isObject() && (that.isObject() && !that.isNoType())) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     } else {\n       return getNativeType(JSTypeNative.NO_TYPE);\n   public JSType getRestrictedUnion(JSType type) {\n     UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n     for (JSType t : alternates) {\n-      if (t.isUnknownType() || !t.isSubtype(type)) {\n+      // Keep all unknown/unresolved types.\n+      if (t.isUnknownType() || t.isNoResolvedType() || !t.isSubtype(type)) {\n         restricted.addAlternate(t);\n       }\n     }\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE;\n+import static com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE;\n   }\n \n   private void verify(String name, JSType type) {\n-    Asserts.assertTypeEquals(type, getType(name));\n+    Asserts.assertTypeEquals(\"Mismatch for \" + name, type, getType(name));\n   }\n \n   private void verify(String name, JSTypeNative type) {\n   private JSType createUndefinableType(JSTypeNative type) {\n     return registry.createUnionType(\n         registry.getNativeType(type), registry.getNativeType(VOID_TYPE));\n+  }\n+\n+  private JSType getNoResolvedType() {\n+    return registry.getNativeType(NO_RESOLVED_TYPE);\n   }\n \n   private JSType createNullableType(JSTypeNative type) {\n     verify(\"x\", STRING_OBJECT_TYPE);\n   }\n \n-  public void testAssertWithIsDef() {\n+  public void testAssertWithIsDefAndNotNull() {\n     JSType startType = createNullableType(NUMBER_TYPE);\n     assuming(\"x\", startType);\n     inFunction(\n         \"out2 = x;\");\n     verify(\"out1\", startType);\n     verify(\"out2\", NUMBER_TYPE);\n+  }\n+\n+  public void testIsDefAndNoResolvedType() {\n+    JSType startType = createUndefinableType(NO_RESOLVED_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\n+        \"out1 = x;\" +\n+        \"if (goog.isDef(x)) { out2a = x; out2b = x.length; out2c = x; }\" +\n+        \"out3 = x;\" +\n+        \"if (goog.isDef(x)) { out4 = x; }\");\n+    verify(\"out1\", startType);\n+    verify(\"out2a\", NO_RESOLVED_TYPE);\n+    verify(\"out2b\", CHECKED_UNKNOWN_TYPE);\n+    verify(\"out2c\", NO_RESOLVED_TYPE);\n+    verify(\"out3\", startType);\n+    verify(\"out4\", NO_RESOLVED_TYPE);\n   }\n \n   public void testAssertWithNotIsNull() {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n \n     assertTrue(forwardDeclaredNamedType.isEmptyType());\n     assertTrue(forwardDeclaredNamedType.isNoResolvedType());\n+\n+    UnionType nullable =\n+        (UnionType) registry.createNullableType(NO_RESOLVED_TYPE);\n+    assertTypeEquals(\n+        nullable, nullable.getGreatestSubtype(NULL_TYPE));\n+    assertTypeEquals(NO_RESOLVED_TYPE, nullable.getRestrictedUnion(NULL_TYPE));\n   }\n \n   /**\n     assertTrue(\n         NULL_TYPE.isSubtype(\n             createUnionType(forwardDeclaredNamedType, NULL_TYPE)));\n-    assertTypeEquals(NULL_TYPE,\n+    assertTypeEquals(\n+        createUnionType(forwardDeclaredNamedType, NULL_TYPE),\n         NULL_TYPE.getGreatestSubtype(\n             createUnionType(forwardDeclaredNamedType, NULL_TYPE)));\n     assertFalse(NULL_TYPE.isNominalConstructor());\n         googSubSubBar.getPrototype(),\n         googSubSubBar.getInstanceType(),\n         registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n-        registry.getNativeType(JSTypeNative.NO_RESOLVED_TYPE),\n         registry.getNativeType(JSTypeNative.NO_TYPE));\n     verifySubtypeChain(typeChain);\n   }", "timestamp": 1354576690, "metainfo": ""}