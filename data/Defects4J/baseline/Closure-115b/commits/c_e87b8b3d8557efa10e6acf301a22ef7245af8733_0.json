{"sha": "e87b8b3d8557efa10e6acf301a22ef7245af8733", "log": "Move the error message formating methods to the SimpleErrorReporter and remove the ScriptRuntime class. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43455042", "commit": "\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n import com.google.common.collect.ImmutableMap;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.rhino.ErrorReporter;\n-import com.google.javascript.rhino.ScriptRuntime;\n+import com.google.javascript.rhino.SimpleErrorReporter;\n \n import java.util.Map;\n import java.util.Map.Entry;\n             DUPLICATE_PARAM)\n \n         // Unknown @annotations.\n-        .put(replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n+        .put(replacePlaceHolders(\n+            SimpleErrorReporter.getMessage0(\"msg.bad.jsdoc.tag\")),\n             BAD_JSDOC_ANNOTATION)\n \n         .put(Pattern.compile(\"^Type annotations are not allowed here.*\"),\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n import com.google.javascript.rhino.JSDocInfoBuilder;\n import com.google.javascript.rhino.JSTypeExpression;\n import com.google.javascript.rhino.Node;\n-import com.google.javascript.rhino.ScriptRuntime;\n+import com.google.javascript.rhino.SimpleErrorReporter;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.head.ErrorReporter;\n import com.google.javascript.rhino.head.ast.Comment;\n   private class ErrorReporterParser {\n     void addParserWarning(String messageId, String messageArg, int lineno,\n         int charno) {\n-      errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n+      errorReporter.warning(\n+          SimpleErrorReporter.getMessage1(messageId, messageArg),\n           getSourceName(), lineno, null, charno);\n     }\n \n     void addParserWarning(String messageId, int lineno, int charno) {\n-      errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n+      errorReporter.warning(SimpleErrorReporter.getMessage0(messageId),\n           getSourceName(), lineno, null, charno);\n     }\n \n                     int charno) {\n       errorReporter.warning(\n           \"Bad type annotation. \" +\n-          ScriptRuntime.getMessage1(messageId, messageArg),\n+          SimpleErrorReporter.getMessage1(messageId, messageArg),\n           getSourceName(), lineno, null, charno);\n     }\n \n     void addTypeWarning(String messageId, int lineno, int charno) {\n       errorReporter.warning(\n           \"Bad type annotation. \" +\n-          ScriptRuntime.getMessage0(messageId),\n+          SimpleErrorReporter.getMessage0(messageId),\n           getSourceName(), lineno, null, charno);\n     }\n   }\n--- a/src/com/google/javascript/rhino/SimpleErrorReporter.java\n+++ b/src/com/google/javascript/rhino/SimpleErrorReporter.java\n \n package com.google.javascript.rhino;\n \n+import java.text.MessageFormat;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n \n /**\n  * A simple {@link ErrorReporter} that collects warnings and errors and makes\n       buf.append(')');\n       return buf.toString();\n     }\n+\n+    public static String getMessage0(String messageId) {\n+      return getMessage(messageId, null);\n+    }\n+\n+    public static String getMessage1(String messageId, Object arg1) {\n+      Object[] arguments = {arg1};\n+      return getMessage(messageId, arguments);\n+    }\n+\n+    static String getMessage(String messageId, Object[] arguments) {\n+      final String defaultResource\n+          = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n+\n+      Locale locale = Locale.getDefault();\n+\n+      // ResourceBundle does caching.\n+      ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n+\n+      String formatString;\n+      try {\n+          formatString = rb.getString(messageId);\n+      } catch (java.util.MissingResourceException mre) {\n+          throw new RuntimeException\n+              (\"no message resource found for message property \" + messageId);\n+      }\n+\n+      /*\n+       * It's OK to format the string, even if 'arguments' is null;\n+       * we need to format it anyway, to make double ''s collapse to\n+       * single 's.\n+       */\n+      MessageFormat formatter = new MessageFormat(formatString);\n+      return formatter.format(arguments);\n+    }\n+\n }\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n import com.google.javascript.rhino.ErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n-import com.google.javascript.rhino.ScriptRuntime;\n+import com.google.javascript.rhino.SimpleErrorReporter;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty;\n \n                   .restrictByNotNullOrUndefined());\n           if (thisType == null) {\n             reporter.warning(\n-                ScriptRuntime.getMessage0(\n+                SimpleErrorReporter.getMessage0(\n                     current.getType() == Token.THIS ?\n                     \"msg.jsdoc.function.thisnotobject\" :\n                     \"msg.jsdoc.function.newnotobject\"),\n                 boolean addSuccess = paramBuilder.addOptionalParams(type);\n                 if (!addSuccess) {\n                   reporter.warning(\n-                      ScriptRuntime.getMessage0(\"msg.jsdoc.function.varargs\"),\n+                      SimpleErrorReporter.getMessage0(\n+                          \"msg.jsdoc.function.varargs\"),\n                       sourceName, arg.getLineno(), arg.getCharno());\n                 }\n               } else {\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n   private static final String MISSING_GT_MESSAGE =\n       \"Bad type annotation. \" +\n-      com.google.javascript.rhino.ScriptRuntime.getMessage0(\n+      com.google.javascript.rhino.SimpleErrorReporter.getMessage0(\n           \"msg.jsdoc.missing.gt\");\n \n   private static final String MISPLACED_TYPE_ANNOTATION =", "timestamp": 1362616203, "metainfo": ""}