{"sha": "734443da46d32da3e85dbb16e5f14fb425cd0707", "log": "Adds a encoding bias gathering pass. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45059917", "commit": "\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n+/*\n+ * Copyright 2013 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+/**\n+ * Gathers character encoding information based on parts of the code\n+ * that would not be renamed.\n+ *\n+ */\n+class GatherCharacterEncodingBias extends AbstractPostOrderCallback\n+    implements CompilerPass {\n+  private final NameGenerator nameGenerator;\n+  private final AbstractCompiler compiler;\n+\n+  public GatherCharacterEncodingBias(\n+      final AbstractCompiler compiler, final NameGenerator ng) {\n+    this.compiler = compiler;\n+    this.nameGenerator = ng;\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    // TODO(user): Traverse the externs and get and get an estimate\n+    // of what we cannot rename. Use that to estimate some bias information.\n+    new NodeTraversal(compiler, this).traverse(root);\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    switch (n.getType()) {\n+      // TRUE and FALSE are purposely skipped as this gets removed in a late\n+      // peephole optimization pass.\n+\n+      // Case dealing with names / properties are *NOT* handled here. The idea\n+      // is not to duplicate logics of variable renaming and property renaming.\n+      // Those passes are responsible for calling favors() on anything they\n+      // could not rename.\n+\n+      case Token.FUNCTION:\n+        nameGenerator.favors(\"function\");\n+        return;\n+      case Token.IF:\n+        nameGenerator.favors(\"if\");\n+        if (n.getFirstChild().getNext().getNext() != null) {\n+          nameGenerator.favors(\"else\");\n+        }\n+        return;\n+      case Token.FOR:\n+        nameGenerator.favors(\"for\");\n+        return;\n+      // Probably not needed after normalization.\n+      case Token.WHILE:\n+        nameGenerator.favors(\"while\");\n+        return;\n+      case Token.VAR:\n+        nameGenerator.favors(\"var\");\n+        return;\n+      // TODO(user): Deal with getProp..etc.\n+      case Token.STRING:\n+        nameGenerator.favors(n.getString());\n+        return;\n+      case Token.STRING_KEY:\n+        nameGenerator.favors(n.getString());\n+        return;\n+      case Token.TRY:\n+        nameGenerator.favors(\"try\");\n+        if (NodeUtil.hasFinally(n)) {\n+          nameGenerator.favors(\"finally\");\n+        }\n+        return;\n+      case Token.CATCH:\n+        nameGenerator.favors(\"catch\");\n+        return;\n+      case Token.SWITCH:\n+        nameGenerator.favors(\"switch\");\n+        return;\n+      case Token.CASE:\n+        nameGenerator.favors(\"case\");\n+        return;\n+      case Token.DEFAULT_CASE:\n+        nameGenerator.favors(\"default\");\n+        return;\n+      case Token.NEW:\n+        nameGenerator.favors(\"new\");\n+        return;\n+      case Token.RETURN:\n+        nameGenerator.favors(\"return\");\n+        return;\n+      case Token.DO:\n+        nameGenerator.favors(\"do\");\n+        nameGenerator.favors(\"while\");\n+        return;\n+      case Token.VOID:\n+        nameGenerator.favors(\"void\");\n+        return;\n+      case Token.WITH:\n+        nameGenerator.favors(\"with\");\n+        return;\n+      case Token.DELPROP:\n+        nameGenerator.favors(\"delete\");\n+        return;\n+      case Token.TYPEOF:\n+        nameGenerator.favors(\"typeof\");\n+        return;\n+      case Token.THROW:\n+        nameGenerator.favors(\"throw\");\n+        return;\n+      case Token.IN:\n+        nameGenerator.favors(\"in\");\n+        return;\n+      case Token.INSTANCEOF:\n+        nameGenerator.favors(\"instanceof\");\n+        return;\n+      case Token.BREAK:\n+        nameGenerator.favors(\"break\");\n+        return;\n+      case Token.CONTINUE:\n+        nameGenerator.favors(\"continue\");\n+        return;\n+      case Token.THIS:\n+        nameGenerator.favors(\"this\");\n+        return;\n+      case Token.NULL:\n+        nameGenerator.favors(\"null\");\n+        return;\n+      case Token.NUMBER:\n+        // TODO(user): This has to share some code with the code generator\n+        // to figure out how the number will eventually be printed.\n+        return;\n+\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n+/*\n+ * Copyright 2013 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import java.util.HashSet;\n+\n+/**\n+ * Tests for {@link GatherCharacterEncodingBias}.\n+ */\n+public class GatherCharacterEncodingBiasTest extends CompilerTestCase {\n+\n+  private NameGenerator generator;\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    generator = new NameGenerator(new HashSet<String>(0), \"\", null);\n+    return new GatherCharacterEncodingBias(compiler, generator);\n+  }\n+\n+  @Override\n+  protected int getNumRepetitions() {\n+    return 1; // Once only.\n+  }\n+\n+  public void testGathering() {\n+    testSame(\"function j() { return j()}\");\n+    generator.restartNaming();\n+    assertEquals(\"n\", generator.generateNextName());\n+    assertEquals(\"r\", generator.generateNextName());\n+    assertEquals(\"t\", generator.generateNextName());\n+    assertEquals(\"u\", generator.generateNextName());\n+    assertEquals(\"c\", generator.generateNextName());\n+    assertEquals(\"e\", generator.generateNextName());\n+    assertEquals(\"f\", generator.generateNextName());\n+    assertEquals(\"i\", generator.generateNextName());\n+    assertEquals(\"o\", generator.generateNextName());\n+    assertEquals(\"a\", generator.generateNextName());\n+    assertEquals(\"b\", generator.generateNextName());\n+  }\n+\n+  public void testGathering2() {\n+    testSame(\"if(a){}else{}\");\n+    generator.restartNaming();\n+    assertEquals(\"e\", generator.generateNextName());\n+  }\n+\n+  public void testGathering3() {\n+    testSame(\"switch(a){default:}\");\n+    generator.restartNaming();\n+    assertEquals(\"t\", generator.generateNextName());\n+  }\n+\n+  public void testGathering4() {\n+    testSame(\"a instanceof b\");\n+    generator.restartNaming();\n+    assertEquals(\"n\", generator.generateNextName());\n+  }\n+\n+  public void testGathering5() {\n+    testSame(\"a['zzzz']\");\n+    generator.restartNaming();\n+    assertEquals(\"z\", generator.generateNextName());\n+  }\n+  public void testGathering6() {\n+    testSame(\"this\");\n+    generator.restartNaming();\n+    assertEquals(\"h\", generator.generateNextName());\n+    assertEquals(\"i\", generator.generateNextName());\n+    assertEquals(\"s\", generator.generateNextName());\n+    assertEquals(\"t\", generator.generateNextName());\n+    assertEquals(\"a\", generator.generateNextName());\n+  }\n+}", "timestamp": 1365550860, "metainfo": ""}