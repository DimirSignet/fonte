{"sha": "37d853c1501f7a78fb05419bc3b57d74cc81668e", "log": "Moe re-sync of r2139, r2140, r2141, r2142 Revision created by MOE tool push_codebase.  R=johnlenz DELTA=91  (72 added, 2 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5380   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n       return -1;\n     }\n \n-    return matchIndex + separator.length();\n+    return matchIndex;\n   }\n \n   /**\n    */\n   private String[] jsSplit(String stringValue, String separator, int limit) {\n     Preconditions.checkArgument(limit >= 0);\n+    Preconditions.checkArgument(stringValue != null);\n \n     // For limits of 0, return an empty array\n     if (limit == 0) {\n       return new String[0];\n     }\n \n-    /* If a separator is not specified, return the entire string as\n-     * the only element of an array.\n-     */\n+    // If a separator is not specified, return the entire string as\n+    // the only element of an array.\n     if (separator == null) {\n       return new String[] {stringValue};\n     }\n \n     List<String> splitStrings = Lists.newArrayList();\n \n-    /* If an empty string is specified for the separator, split apart each\n-     * character of the string.\n-     */\n+    // If an empty string is specified for the separator, split apart each\n+    // character of the string.\n     if (separator.length() == 0) {\n       for (int i = 0; i < stringValue.length() && i < limit; i++) {\n         splitStrings.add(stringValue.substring(i, i + 1));\n       }\n     } else {\n-      int startIndex = 0, matchEndIndex;\n-      while ((matchEndIndex =\n+      int startIndex = 0, matchIndex;\n+      while ((matchIndex =\n           jsSplitMatch(stringValue, startIndex, separator)) >= 0 &&\n           splitStrings.size() < limit) {\n-        if (separator.length() == 0) {\n-          matchEndIndex++;\n-        }\n-        splitStrings.add(stringValue.substring(startIndex,\n-            matchEndIndex - separator.length()));\n-        startIndex = matchEndIndex;\n-      }\n-      if (startIndex < stringValue.length() && splitStrings.size() < limit) {\n-        splitStrings.add(stringValue.substring(startIndex));\n+        splitStrings.add(stringValue.substring(startIndex, matchIndex));\n+\n+        startIndex = matchIndex + separator.length();\n+      }\n+\n+      if (splitStrings.size() < limit) {\n+        if (startIndex < stringValue.length()) {\n+          splitStrings.add(stringValue.substring(startIndex));\n+        } else {\n+          splitStrings.add(\"\");\n+        }\n       }\n     }\n \n--- a/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\n     fold(\"x = 'a b c d e'.split(' ', 1)\", \"x = ['a']\");\n     fold(\"x = 'a b c d e'.split(' ', 3)\", \"x = ['a','b','c']\");\n     fold(\"x = 'a b c d e'.split(null, 1)\", \"x = ['a b c d e']\");\n-    fold(\"x = 'aaaaa'.split('a')\", \"x = ['', '', '', '', '']\");\n+    fold(\"x = 'aaaaa'.split('a')\", \"x = ['', '', '', '', '', '']\");\n+    fold(\"x = 'xyx'.split('x')\", \"x = ['', 'y', '']\");\n+\n+    // Empty separator\n     fold(\"x = 'abcde'.split('')\", \"x = ['a','b','c','d','e']\");\n     fold(\"x = 'abcde'.split('', 3)\", \"x = ['a','b','c']\");\n+\n+    // Empty separator AND empty string\n+    fold(\"x = ''.split('')\", \"x = []\");\n+\n+    // Separator equals string\n+    fold(\"x = 'aaa'.split('aaa')\", \"x = ['','']\");\n+    fold(\"x = ' '.split(' ')\", \"x = ['','']\");\n \n     foldSame(\"x = 'abcde'.split(/ /)\");\n     foldSame(\"x = 'abcde'.split(' ', -1)\");", "timestamp": 1345139127, "metainfo": ""}