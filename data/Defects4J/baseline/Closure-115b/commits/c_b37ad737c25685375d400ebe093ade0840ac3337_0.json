{"sha": "b37ad737c25685375d400ebe093ade0840ac3337", "log": "Extended EventHandler disposal check to consider objects that need to be disposed to ensure EventHandler disposal or event listener removal.  - Renamed pass and compiler options to reflect new usage - Tracking objects for disposal that = are EventHandler = consists of objects whose developer considered disposal necessary = unlisten to events in disposal - Added command-line option to decide level of checking (OFF, DEFAULT, AGGRESSIVE)  R=johnlenz DELTA=1952  (1355 added, 574 deleted, 23 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5394   ", "commit": "\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/CheckEventfulObjectDisposalTest.java\n+// Copyright 2012 Google Inc. All Rights Reserved.\n+\n+package com.google.javascript.jscomp;\n+\n+/**\n+ * Tests for {@code CheckEventfulObjectDisposal.java}.\n+ *\n+ */\n+\n+public class CheckEventfulObjectDisposalTest extends CompilerTestCase {\n+\n+  static final String CLOSURE_DEFS = \"var goog = {};\" + \"goog.inherits = function(x, y) {};\"\n+      + \"/** @type {!Function} */ goog.abstractMethod = function() {};\"\n+      + \"goog.isArray = function(x) {};\" + \"goog.isDef = function(x) {};\"\n+      + \"goog.isFunction = function(x) {};\" + \"goog.isNull = function(x) {};\"\n+      + \"goog.isString = function(x) {};\" + \"goog.isObject = function(x) {};\"\n+      + \"goog.isDefAndNotNull = function(x) {};\" + \"goog.asserts = {};\"\n+      + \"goog.dispose = function(x) {};\"\n+      + \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\"\n+      + \"/** @interface */\\n\"\n+      + \"goog.Disposable = goog.abstractMethod;\"\n+      + \"goog.Disposable.prototype.dispose = goog.abstractMethod;\"\n+      + \"/** @param {goog.Disposable} fn */\"\n+      + \"goog.Disposable.prototype.registerDisposable = goog.abstractMethod;\"\n+      + \"/** @implements {goog.Disposable}\\n * @constructor */\"\n+      + \"goog.SubDisposable = function() {};\"\n+      + \"/** @inheritDoc */ \"\n+      + \"goog.SubDisposable.prototype.dispose = function() {};\"\n+      + \"/** @inheritDoc */\"\n+      + \"goog.SubDisposable.prototype.registerDisposable = function() {};\"\n+      + \"goog.events = {};\"\n+      + \"/** @extends {goog.SubDisposable}\\n *  @constructor */\"\n+      + \"goog.events.EventHandler = function() {};\"\n+      + \"goog.events.EventHandler.prototype.removeAll = function() {};\";\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    enableTypeCheck(CheckLevel.WARNING);\n+    enableEcmaScript5(true);\n+  }\n+\n+  @Override\n+  public CompilerPass getProcessor(Compiler compiler) {\n+    return new CheckEventfulObjectDisposal(compiler,\n+        CheckEventfulObjectDisposal.DisposalCheckingPolicy.ON);\n+  }\n+\n+  public void testNoEventHandler() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() {  };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testNotFreed1() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { this.eh = new goog.events.EventHandler(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js, CheckEventfulObjectDisposal.EVENTFUL_OBJECT_NOT_DISPOSED, true);\n+  }\n+\n+  public void testLocal() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { var eh = new goog.events.EventHandler();\\n\"\n+        + \"};\\n\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js, CheckEventfulObjectDisposal.EVENTFUL_OBJECT_PURELY_LOCAL, true);\n+  }\n+\n+  public void testFreedLocal1() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { var eh = new goog.events.EventHandler();\"\n+        + \"eh.dispose(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testFreedLocal2() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { var eh = new goog.events.EventHandler();\"\n+        + \"this.registerDisposable(eh); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testLocalLive1() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { var eh = new goog.events.EventHandler();\"\n+        + \"this.eh = eh;\"\n+        + \"eh.dispose(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testLocalLive2() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { var eh = new goog.events.EventHandler();\"\n+        + \"this.eh = eh;\"\n+        + \"this.eh.dispose(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  /*\n+   * Local variable is never freed but as it is assigned to an array\n+   * this is left to the dynamic analyzer to discover it.\n+   */\n+  public void testLocalLive3() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { var eh = new goog.events.EventHandler();\"\n+        + \"this.ehs = [];\"\n+        + \"this.ehs[0] = eh;\"\n+        + \"};\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testFreedDispose() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { this.eh = new goog.events.EventHandler();\"\n+        + \"this.eh.dispose(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testFreedGoogDispose() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { this.eh = new goog.events.EventHandler();\"\n+        + \"goog.dispose(this.eh); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testFreedRegisterDisposable() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { this.eh = new goog.events.EventHandler();\"\n+        + \"this.registerDisposable(this.eh); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testFreedRemoveAll() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { this.eh = new goog.events.EventHandler();\"\n+        + \"this.eh.removeAll(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"var testObj = new test();\";\n+    testSame(js);\n+  }\n+\n+  public void testPrivateInheritance() {\n+    String js = CLOSURE_DEFS\n+        + \"/** @extends {goog.SubDisposable}\\n * @constructor */\"\n+        + \"var test = function() { \"\n+        + \"/** @private */ this.eh = new goog.events.EventHandler();\"\n+        + \"this.eh.removeAll(); };\"\n+        + \"goog.inherits(test, goog.Disposable);\"\n+        + \"/** @extends {test}\\n * @constructor */\"\n+        + \"var subclass = function() {\"\n+        + \"/** @private */ this.eh = new goog.events.EventHandler();\"\n+        + \"this.eh.dispose();\"\n+        + \"};\"\n+        + \"var testObj = new test();\";\n+    testSame(js, CheckEventfulObjectDisposal.OVERWRITE_PRIVATE_EVENTFUL_OBJECT, true);\n+  }\n+}", "timestamp": 1345239531, "metainfo": ""}