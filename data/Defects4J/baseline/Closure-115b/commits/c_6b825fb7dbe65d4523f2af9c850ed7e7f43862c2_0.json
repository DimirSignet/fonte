{"sha": "6b825fb7dbe65d4523f2af9c850ed7e7f43862c2", "log": "In IDE mode, allow partial parsing  R=johnlenz DELTA=19  (18 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3187   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n     if (config.isIdeMode) {\n       compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n+    compilerEnv.setIdeMode(config.isIdeMode);\n \n     Parser p = new Parser(compilerEnv, errorReporter);\n     AstRoot astRoot = null;\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n     parse(\"x.yield;\");\n   }\n \n-  private void parseError(String string, String... errors) {\n+  public void testIdeModePartialTree() {\n+    Node partialTree = parseError(\"function Foo() {} f.\",\n+        \"missing name after . operator\");\n+    assertNull(partialTree);\n+\n+    isIdeMode = true;\n+    partialTree = parseError(\"function Foo() {} f.\",\n+        \"missing name after . operator\");\n+    assertNotNull(partialTree);\n+  }\n+\n+  /**\n+   * Verify that the given code has the given parse errors.\n+   * @return If in IDE mode, returns a partial tree.\n+   */\n+  private Node parseError(String string, String... errors) {\n     TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);\n     Node script = null;\n     try {\n     // verifying that all warnings were seen\n     assertTrue(testErrorReporter.hasEncounteredAllErrors());\n     assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n+\n+    return script;\n   }\n \n   private Node parse(String string, String... warnings) {", "timestamp": 1315341389, "metainfo": ""}