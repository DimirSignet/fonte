{"sha": "d1cfe67977d8f3aaa85ec20c262171da394d5977", "log": "Fix null pointer bug encountered when trying to extend non-existent interfaces.  Original report@closure-compiler-discuss: https://groups.google.com/forum/#!topic/closure-compiler-discuss/kmP0lULzue4  Fixes issue 884 (http://code.google.com/p/closure-compiler/issues/detail?id=884)  R=nicksantos   Revision created by MOE tool push_codebase. MOE_MIGRATION=6042   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;\n       String functionName, HashMap<String, ObjectType> properties,\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n-    Set<String> currentPropertyNames =\n-        interfaceType.getImplicitPrototype().getOwnPropertyNames();\n+    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n+    Set<String> currentPropertyNames;\n+    if (implicitProto == null) {\n+      // This can be the case if interfaceType is proxy to a non-existent\n+      // object (which is a bad type annotation, but shouldn't crash).\n+      currentPropertyNames = ImmutableSet.of();\n+    } else {\n+      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    }\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   public void testBadInterfaceExtends1() throws Exception {\n     testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n         \"Bad type annotation. Unknown type nonExistent\");\n+  }\n+\n+  public void testBadInterfaceExtendsNonExistentInterfaces() throws Exception {\n+    String js = \"/** @interface \\n\" +\n+        \" * @extends {nonExistent1} \\n\" +\n+        \" * @extends {nonExistent2} \\n\" +\n+        \" */function A() {}\";\n+    String[] expectedWarnings = {\n+      \"Bad type annotation. Unknown type nonExistent1\",\n+      \"Bad type annotation. Unknown type nonExistent2\"\n+    };\n+    testTypes(js, expectedWarnings);\n   }\n \n   public void testBadInterfaceExtends2() throws Exception {", "timestamp": 1356135402, "metainfo": ""}