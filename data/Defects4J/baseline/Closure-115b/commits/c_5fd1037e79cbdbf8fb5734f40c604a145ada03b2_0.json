{"sha": "5fd1037e79cbdbf8fb5734f40c604a145ada03b2", "log": "Fix inline object literals pass: referenced name blacklisting and side-effect ordering.  R=acleung DELTA=119  (73 added, 28 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2322   ", "commit": "\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n      * variable. Any code modifications will have potentially made the\n      * ReferenceCollection invalid.\n      */\n-    private void blacklistVarReferencesInTree(Node root, Scope scope) {\n-      for (Node c = root.getFirstChild(); c != null; c = c.getNext()) {\n-        blacklistVarReferencesInTree(c, scope);\n-      }\n-\n-      if (root.getType() == Token.NAME) {\n-        staleVars.add(scope.getVar(root.getString()));\n-      }\n+    private void blacklistVarReferencesInTree(Node root, final Scope scope) {\n+      NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n+        @Override\n+        public void visit(Node node) {\n+          if (node.getType() == Token.NAME) {\n+            staleVars.add(scope.getVar(node.getString()));\n+          }\n+        }\n+      }, NodeUtil.MATCH_NOT_FUNCTION);\n     }\n \n     /**\n      */\n     private Map<String, String> computeVarList(\n         Var v, ReferenceCollection referenceInfo) {\n-      Map<String, String> varmap = Maps.newHashMap();\n+      Map<String, String> varmap = Maps.newLinkedHashMap();\n \n       for (Reference ref : referenceInfo.references) {\n         if (ref.isLvalue() || ref.isInitializingDeclaration()) {\n           Node val = ref.getAssignedValue();\n           if (val != null) {\n+            Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n             for (Node child = val.getFirstChild(); child != null;\n                  child = child.getNext()) {\n               String varname = child.getString();\n           // This is the var. There is no value.\n         } else {\n           Node getprop = ref.getParent();\n-          Preconditions.checkState(\n-            getprop.getType() == Token.GETPROP,\n-            \"Unexpected reference type: \" + Token.name(getprop.getType()));\n-          Preconditions.checkState(\n-            getprop.getFirstChild().getString().equals(v.getName()),\n-            \"Unexpected variable name: \" + getprop.getFirstChild().getString() +\n-            \", expecting: \" + v.getName());\n+          Preconditions.checkState(getprop.getType() == Token.GETPROP);\n \n           // The key being looked up in the original map.\n           String varname = getprop.getLastChild().getString();\n       Node val = ref.getAssignedValue();\n       blacklistVarReferencesInTree(val, v.scope);\n       Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newHashSet(varmap.keySet());\n+      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n       for (Node key = val.getFirstChild(); key != null;\n            key = key.getNext()) {\n         String var = key.getString();\n         if (val == null) {\n           // is this right?\n           varnode.copyInformationFromForTree(vnode);\n+        } else {\n+          blacklistVarReferencesInTree(val, v.scope);\n         }\n         vnode.getParent().addChildBefore(varnode, vnode);\n       }\n         } else {\n           // Make sure that the reference is a GETPROP as we expect it to be.\n           Node getprop = ref.getParent();\n-          Preconditions.checkState(\n-            getprop.getType() == Token.GETPROP,\n-            \"Unexpected reference type: \" + Token.name(getprop.getType()));\n-          Preconditions.checkState(\n-            getprop.getFirstChild().getString().equals(v.getName()),\n-            \"Unexpected variable name: \" + getprop.getFirstChild().getString() +\n-            \", expecting: \" + v.getName());\n+          Preconditions.checkState(getprop.getType() == Token.GETPROP);\n \n           // The key being looked up in the original map.\n           String var = getprop.getChildAtIndex(1).getString();\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n    */\n   static boolean referencesThis(Node n) {\n     Node start = (isFunction(n)) ? n.getLastChild() : n;\n-    return containsType(start, Token.THIS, new MatchNotFunction());\n+    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);\n   }\n \n   /**\n     return isNameReferenced(\n         function.getLastChild(),\n         \"arguments\",\n-        new MatchNotFunction());\n+        MATCH_NOT_FUNCTION);\n   }\n \n   /**\n     visitPreOrder(\n         root,\n         collector,\n-        new MatchNotFunction());\n+        MATCH_NOT_FUNCTION);\n     return collector.vars.values();\n   }\n \n       return !isFunction(n);\n     }\n   }\n+\n+  static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();\n \n   /**\n    * A predicate for matching statements without exiting the current scope.\n--- a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java\n \n   // Test object literal -> variable inlining\n   public void testObject1() {\n-    test(\"var a = {x:x, y:y}; f(a.x, a.y);\",\n-         \"var JSCompiler_object_inline_y_1=y;\" +\n-         \"var JSCompiler_object_inline_x_0=x;\" +\n+    test(\"var a = {x:x(), y:y()}; f(a.x, a.y);\",\n+         \"var JSCompiler_object_inline_x_0=x();\" +\n+         \"var JSCompiler_object_inline_y_1=y();\" +\n+         \"f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y_1);\");\n+  }\n+\n+  public void testObject1a() {\n+    test(\"var a; a = {x:x, y:y}; f(a.x, a.y);\",\n+         \"var JSCompiler_object_inline_x_0;\" +\n+         \"var JSCompiler_object_inline_y_1;\" +\n+         \"(JSCompiler_object_inline_x_0=x,\" +\n+         \"JSCompiler_object_inline_y_1=y, true);\" +\n          \"f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y_1);\");\n   }\n \n     // Inlining the 'y' would cause the 'this' to be different in the\n     // target function.\n     testSame(\"var a = {y:y,x:x}; a.y(); f(a.x);\");\n+    testSame(\"var a; a = {y:y,x:x}; a.y(); f(a.x);\");\n   }\n \n   public void testObject4() {\n     // Object literal is escaped.\n     testSame(\"var a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n+    testSame(\"var a; a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n   }\n \n   public void testObject5() {\n   public void testObject6() {\n     test(\"for (var i = 0; i < 5; i++) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n          \"for (var i = 0; i < 5; i++) {\" +\n+         \"  var JSCompiler_object_inline_i_0=i;\" +\n          \"  var JSCompiler_object_inline_x_1=x;\" +\n-         \"  var JSCompiler_object_inline_i_0=i;\" +\n          \"  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)\" +\n          \"}\");\n     test(\"if (c) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n          \"if (c) {\" +\n+         \"  var JSCompiler_object_inline_i_0=i;\" +\n          \"  var JSCompiler_object_inline_x_1=x;\" +\n-         \"  var JSCompiler_object_inline_i_0=i;\" +\n          \"  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)\" +\n          \"}\");\n   }\n \n   public void testObject7() {\n     test(\"var a = {x:x, y:f()}; g(a.x);\",\n+      \"var JSCompiler_object_inline_x_0=x;\" +\n          \"var JSCompiler_object_inline_y_1=f();\" +\n-         \"var JSCompiler_object_inline_x_0=x;\" +\n          \"g(JSCompiler_object_inline_x_0)\");\n   }\n \n     testSame(\"var a = {x:x,y:y}; var b = {x:y}; f((c?a:b).x);\");\n \n     test(\"var a; if(c) { a={x:x, y:y}; } else { a={x:y}; } f(a.x);\",\n+         \"var JSCompiler_object_inline_x_0;\" +\n          \"var JSCompiler_object_inline_y_1;\" +\n-         \"var JSCompiler_object_inline_x_0;\" +\n          \"if(c) JSCompiler_object_inline_x_0=x,\" +\n          \"      JSCompiler_object_inline_y_1=y,\" +\n          \"      true;\" +\n          \"     true;\" +\n          \"f(JSCompiler_object_inline_x_0)\");\n     test(\"var a = {x:x,y:y}; var b = {x:y}; c ? f(a.x) : f(b.x);\",\n+         \"var JSCompiler_object_inline_x_0 = x; \" +\n          \"var JSCompiler_object_inline_y_1 = y; \" +\n-         \"var JSCompiler_object_inline_x_0 = x; \" +\n          \"var JSCompiler_object_inline_x_2 = y; \" +\n          \"c ? f(JSCompiler_object_inline_x_0):f(JSCompiler_object_inline_x_2)\");\n   }\n          \"  var x = {a:a,b:b}; g(x.a); x = {a:a,b:2}; return x.b;\" +\n          \"}\",\n          \"function f(a,b) {\" +\n+         \"  var JSCompiler_object_inline_a_0 = a;\" +\n          \"  var JSCompiler_object_inline_b_1 = b;\" +\n-         \"  var JSCompiler_object_inline_a_0 = a;\" +\n          \"  g(JSCompiler_object_inline_a_0);\" +\n          \"  JSCompiler_object_inline_a_0 = a,\" +\n          \"  JSCompiler_object_inline_b_1=2,\" +\n          \"  var x = {a:a,b:b}; g(x.a); x.b = x.c = 2; return x.b; \" +\n          \"}\",\n          \"function f(a,b) { \" +\n+         \"  var JSCompiler_object_inline_a_0=a;\" +\n          \"  var JSCompiler_object_inline_b_1=b; \" +\n          \"  var JSCompiler_object_inline_c_2;\" +\n-         \"  var JSCompiler_object_inline_a_0=a;\" +\n          \"  g(JSCompiler_object_inline_a_0);\" +\n          \"  JSCompiler_object_inline_b_1=JSCompiler_object_inline_c_2=2;\" +\n          \"  return JSCompiler_object_inline_b_1\" +\n \n   public void testObject10() {\n     test(\"var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);\",\n-         \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_a_0;\" +\n+         \"var JSCompiler_object_inline_b_1;\" +\n          \"var b = f();\" +\n          \"JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;\" +\n          \"if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)\");\n     test(\"var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c\",\n+         \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_c_2;\" +\n-         \"var JSCompiler_object_inline_a_0;\" +\n          \"var b=f();\" +\n          \"JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,\" +\n          \"  JSCompiler_object_inline_c_2=void 0,true;\" +\n          \"if(JSCompiler_object_inline_a_0) \" +\n          \"  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2\");\n     test(\"var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c\",\n+         \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_c_2;\" +\n-         \"var JSCompiler_object_inline_a_0;\" +\n          \"var b = f();\" +\n          \"JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, \" +\n          \"  JSCompiler_object_inline_c_2=void 0,true;\" +\n          \"if (JSCompiler_object_inline_a_0)\" +\n          \"  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;\");\n     test(\"var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);\",\n-         \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_a_0 = a;\" +\n+         \"var JSCompiler_object_inline_b_1;\" +\n          \"if(b) JSCompiler_object_inline_b_1 = b,\" +\n          \"      JSCompiler_object_inline_a_0 = void 0,\" +\n          \"      true;\" +\n          \"f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)\");\n     test(\"var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);\",\n+         \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_c_2;\" +\n-         \"var JSCompiler_object_inline_a_0;\" +\n          \"var y=5;\" +\n          \"JSCompiler_object_inline_a_0=a,\" +\n          \"JSCompiler_object_inline_b_1=b,\" +\n          \"JSCompiler_object_inline_c_2=c,\" +\n          \"true;\" +\n          \"if (b) JSCompiler_object_inline_b_1=b,\" +\n+         \"       JSCompiler_object_inline_a_0=void 0,\" +\n          \"       JSCompiler_object_inline_c_2=void 0,\" +\n-         \"       JSCompiler_object_inline_a_0=void 0,\" +\n          \"       true;\" +\n          \"f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)\");\n   }\n \n   public void testObject12() {\n     test(\"var a; a = {x:1, y:2}; f(a.x, a.y2);\",\n+         \"var JSCompiler_object_inline_x_0;\" +\n+         \"var JSCompiler_object_inline_y_1;\" +\n          \"var JSCompiler_object_inline_y2_2;\" +\n-         \"var JSCompiler_object_inline_y_1;\" +\n-         \"var JSCompiler_object_inline_x_0;\" +\n          \"JSCompiler_object_inline_x_0=1,\" +\n          \"JSCompiler_object_inline_y_1=2,\" +\n          \"JSCompiler_object_inline_y2_2=void 0,\" +\n       \" if(b) JSCompiler_object_inline_x_1=2;\" +\n       \" f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)\" +\n       \"}\");\n+\n     test(\"var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}\",\n+      \"var JSCompiler_object_inline_x_0;\" +\n       \"var JSCompiler_object_inline_y_1;\" +\n-      \"var JSCompiler_object_inline_x_0;\" +\n       \"for(;1;) {\" +\n       \" f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1);\" +\n       \" JSCompiler_object_inline_x_0=1,\" +\n       \" true\" +\n       \"}\");\n   }\n+\n+  public void testObject23() {\n+    test(\"function f() {\\n\" +\n+         \"  var templateData = {\\n\" +\n+         \"    linkIds: {\\n\" +\n+         \"      CHROME: 'cl',\\n\" +\n+         \"      DISMISS: 'd'\\n\" +\n+         \"    }\\n\" +\n+         \"  };\\n\" +\n+         \"  var html = templateData.linkIds.CHROME \\n\" +\n+         \"       + \\\":\\\" + templateData.linkIds.DISMISS;\\n\" +\n+         \"}\",\n+         \"function f(){\" +\n+         \"var JSCompiler_object_inline_CHROME_1='cl';\" +\n+         \"var JSCompiler_object_inline_DISMISS_2='d';\" +\n+         \"var html=JSCompiler_object_inline_CHROME_1 +\" +\n+         \" ':' +JSCompiler_object_inline_DISMISS_2}\");\n+  }\n+\n+  public void testObject24() {\n+    test(\"function f() {\\n\" +\n+         \"  var linkIds = {\\n\" +\n+         \"      CHROME: 1,\\n\" +\n+         \"  };\\n\" +\n+         \"  var g = function () {var o = {a: linkIds};}\\n\" +\n+         \"}\",\n+         \"function f(){var linkIds={CHROME:1};\" +\n+         \"var g=function(){var JSCompiler_object_inline_a_0=linkIds}}\");\n+  }\n+\n+  public void testObject25() {\n+    test(\"var a = {x:f(), y:g()}; a = {y:g(), x:f()}; f(a.x, a.y);\",\n+         \"var JSCompiler_object_inline_x_0=f();\" +\n+         \"var JSCompiler_object_inline_y_1=g();\" +\n+         \"JSCompiler_object_inline_y_1=g(),\" +\n+         \"  JSCompiler_object_inline_x_0=f(),\" +\n+         \"  true;\" +\n+         \"f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1)\");\n+  }\n }", "timestamp": 1308273128, "metainfo": ""}