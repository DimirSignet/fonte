{"sha": "4fbbc47cb18f241b23dd2d4bf9c15d45b2473523", "log": "Fixes issue 919  Fix exception when parsing erroneous jsdoc /** @return {@code x */  Callers of the jsdoc token stream's getRemainingJSDocLine weren't clearing the token lookahead. Subsequent call to next() then returned the incorrect token.  Fixes: https://code.google.com/p/closure-compiler/issues/detail?id=919 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42819292", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n     int lineno = stream.getLineno();\n     int charno = stream.getCharno() + 1;\n \n-    String line = stream.getRemainingJSDocLine().trim();\n+    String line = getRemainingJSDocLine().trim();\n \n     // Record the textual description.\n     if (line.length() > 0) {\n     int startCharno = stream.getCharno() + 1;\n \n     // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n+    String line = getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n       line = line.trim();\n     }\n \n           builder.append(toString(token));\n \n-          line = stream.getRemainingJSDocLine();\n+          line = getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n             line = trimEnd(line);\n \n           builder.append(toString(token));\n \n-          String line = stream.getRemainingJSDocLine();\n+          String line = getRemainingJSDocLine();\n           line = trimEnd(line);\n           builder.append(line);\n           token = next();\n   }\n \n   /**\n+   * Returns the remainder of the line.\n+   */\n+  private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    unreadToken = NO_UNREAD_TOKEN;\n+    return result;\n+  }\n+\n+  /**\n    * Determines whether the parser has been populated with docinfo with a\n    * fileoverview tag.\n    */\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     parse(\"@ngInject \\n@ngInject*/\", \"extra @ngInject tag\");\n   }\n \n+  public void testTextExtents() {\n+    parse(\"@return {@code foo} bar \\n *    baz. */\",\n+        true, \"Bad type annotation. type not recognized due to syntax error\");\n+  }\n+\n   /**\n    * Asserts that a documentation field exists on the given marker.\n    *", "timestamp": 1361486262, "metainfo": ""}