{"sha": "5b55e9faab08e7d9292d9b1bfe24da8631d08416", "log": "Skips checkPathbetweenNodes if nodes are next to each other.  R=johnlenz DELTA=24  (10 added, 0 deleted, 14 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1911   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n         return false;\n       }\n \n-      // Similar side effect check as above but this time the side effect is\n-      // else where along the path.\n-      // x = readProp(b); while(modifyProp(b)) {}; print(x);\n-      CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>\n-        pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(\n-               cfg,\n-               cfg.getDirectedGraphNode(defCfgNode),\n-               cfg.getDirectedGraphNode(useCfgNode),\n-               SIDE_EFFECT_PREDICATE,\n-               Predicates.\n-                   <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n-               false);\n-      if (pathCheck.somePathsSatisfyPredicate()) {\n-        return false;\n+      // We can skip the side effect check along the paths of two nodes if\n+      // they are just next to each other.\n+      if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&\n+          defCfgNode.getNext() != useCfgNode) {\n+        // Similar side effect check as above but this time the side effect is\n+        // else where along the path.\n+        // x = readProp(b); while(modifyProp(b)) {}; print(x);\n+        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>\n+          pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(\n+                 cfg,\n+                 cfg.getDirectedGraphNode(defCfgNode),\n+                 cfg.getDirectedGraphNode(useCfgNode),\n+                 SIDE_EFFECT_PREDICATE,\n+                 Predicates.\n+                     <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n+                 false);\n+        if (pathCheck.somePathsSatisfyPredicate()) {\n+          return false;\n+        }\n       }\n \n       // TODO(user): Side-effect is ok sometimes. As long as there are no\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n              \"f.apply(this, arguments); return this;}\");\n   }\n \n+  public void testNotOkToSkipCheckPathBetweenNodes() {\n+    noInline(\"var x; for(x = 1; foo(x);) {}\");\n+    noInline(\"var x; for(; x = 1;foo(x)) {}\");\n+  }\n+\n   private void noInline(String input) {\n     inline(input, input);\n   }", "timestamp": 1305330013, "metainfo": ""}