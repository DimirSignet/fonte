{"sha": "7e0ecb47ba5e1f50dc2aefbdf4f20379089f49cd", "log": "Only accept ES5 style getter/setters (the must have 0 and 1 parameters respectively).  R=nicksantos DELTA=38  (37 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=300   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n import static com.google.javascript.jscomp.mozilla.rhino.Token.CommentType.JSDOC;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;\n         }\n \n         Node key = transformAsString(el.getLeft());\n+        Node value = transform(el.getRight());\n         if (el.isGetter()) {\n           key.setType(Token.GET);\n+          Preconditions.checkState(value.getType() == Token.FUNCTION);\n+          if (getFnParamNode(value).hasChildren()) {\n+            reportGetterParam(el.getLeft());\n+          }\n         } else if (el.isSetter()) {\n           key.setType(Token.SET);\n+          Preconditions.checkState(value.getType() == Token.FUNCTION);\n+          if (!getFnParamNode(value).hasOneChild()) {\n+            reportSetterParam(el.getLeft());\n+          }\n         }\n-        key.addChildToFront(transform(el.getRight()));\n+        key.addChildToFront(value);\n         node.addChildToBack(key);\n       }\n       return node;\n     }\n+\n+    /**\n+     * @param fnNode The function.\n+     * @return The Node containing the Function parameters.\n+     */\n+   Node getFnParamNode(Node fnNode) {\n+     // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]\n+     Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);\n+     return fnNode.getFirstChild().getNext();\n+   }\n \n     @Override\n     Node processObjectProperty(ObjectProperty propertyNode) {\n     void reportSetter(AstNode node) {\n       errorReporter.error(\n           \"setters are not supported in Internet Explorer\",\n+          sourceName,\n+          node.getLineno(), \"\", 0);\n+    }\n+\n+    void reportGetterParam(AstNode node) {\n+      errorReporter.error(\n+          \"getters may not have parameters\",\n+          sourceName,\n+          node.getLineno(), \"\", 0);\n+    }\n+\n+    void reportSetterParam(AstNode node) {\n+      errorReporter.error(\n+          \"setters must have exactly one parameter\",\n           sourceName,\n           node.getLineno(), \"\", 0);\n     }\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n         \"getters are not supported in Internet Explorer\");\n     this.es5mode = true;\n     parse(\"var x = {get a(){}};\");\n+    parseError(\"var x = {get a(b){}};\", \"getters may not have parameters\");\n   }\n \n   public void testSetter() {\n         \"setters are not supported in Internet Explorer\");\n     this.es5mode = true;\n     parse(\"var x = {set a(x){}};\");\n+    parseError(\"var x = {set a(){}};\",\n+        \"setters must have exactly one parameter\");\n   }\n \n   public void testLamestWarningEver() {", "timestamp": 1295383704, "metainfo": ""}