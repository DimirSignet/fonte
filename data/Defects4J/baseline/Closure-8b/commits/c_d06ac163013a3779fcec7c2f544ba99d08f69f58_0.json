{"sha": "d06ac163013a3779fcec7c2f544ba99d08f69f58", "log": "Fix may-use data flow analysis in the presence of ON_EX edges. Fixes issue 794  R=acleung DELTA=43  (42 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5337   ", "commit": "\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n import com.google.javascript.jscomp.Scope.Var;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n import com.google.javascript.jscomp.graph.GraphNode;\n import com.google.javascript.jscomp.graph.LatticeElement;\n import com.google.javascript.rhino.Node;\n   @Override\n   ReachingUses flowThrough(Node n, ReachingUses input) {\n     ReachingUses output = new ReachingUses(input);\n-    computeMayUse(n, n, output, false);\n+\n+    // If there's an ON_EX edge, this cfgNode may or may not get executed.\n+    // We can express this concisely by just pretending this happens in\n+    // a conditional.\n+    boolean conditional = hasExceptionHandler(n);\n+    computeMayUse(n, n, output, conditional);\n+\n     return output;\n+  }\n+\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n   }\n \n   private void computeMayUse(\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n         \"function f(x) { var a    ; var b = x; var c    ; x = 3; return b; }\");\n   }\n \n+  public void testIssue794a() {\n+    noInline(\n+        \"var x = 1; \" +\n+        \"try { x += someFunction(); } catch (e) {}\" +\n+        \"x += 1;\" +\n+        \"try { x += someFunction(); } catch (e) {}\" +\n+        \"return x;\");\n+  }\n+\n+  public void testIssue794b() {\n+    noInline(\n+        \"var x = 1; \" +\n+        \"try { x = x + someFunction(); } catch (e) {}\" +\n+        \"x = x + 1;\" +\n+        \"try { x = x + someFunction(); } catch (e) {}\" +\n+        \"return x;\");\n+  }\n+\n   private void noInline(String input) {\n     inline(input, input);\n   }\n--- a/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java\n+++ b/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java\n     assertMatch(\"var x = [], foo; D: for (x in foo) { U:x }\");\n   }\n \n+  public void testTryCatch() {\n+    assertMatch(\n+        \"D: var x = 1; \" +\n+        \"try { U: var y = foo() + x; } catch (e) {} \" +\n+        \"U: var z = x;\");\n+  }\n+\n   /**\n    * The def of x at D: may be used by the read of x at U:.\n    */", "timestamp": 1344627580, "metainfo": ""}