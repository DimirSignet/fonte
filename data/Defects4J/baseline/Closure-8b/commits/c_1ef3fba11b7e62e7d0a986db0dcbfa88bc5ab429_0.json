{"sha": "1ef3fba11b7e62e7d0a986db0dcbfa88bc5ab429", "log": "Fix symboltable crash when a function is not properly annotated as a constructor.  R=acleung DELTA=39  (27 added, 7 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3605   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n   public Symbol getSymbolDeclaredBy(FunctionType fn) {\n     Preconditions.checkState(fn.isConstructor() || fn.isInterface());\n     ObjectType instanceType = fn.getInstanceType();\n-    String name = instanceType.getReferenceName();\n-    if (name == null || globalScope == null) {\n-      return null;\n-    }\n-\n-    Node source = fn.getSource();\n-    return (source == null ?\n-        globalScope : getEnclosingScope(source)).getSlot(name);\n+    return getSymbolForName(fn.getSource(), instanceType.getReferenceName());\n   }\n \n   /**\n   public Symbol getSymbolForInstancesOf(FunctionType fn) {\n     Preconditions.checkState(fn.isConstructor() || fn.isInterface());\n     ObjectType pType = fn.getPrototype();\n-    String name = pType.getReferenceName();\n+    return getSymbolForName(fn.getSource(), pType.getReferenceName());\n+  }\n+\n+  private Symbol getSymbolForName(Node source, String name) {\n     if (name == null || globalScope == null) {\n       return null;\n     }\n \n-    Node source = fn.getSource();\n-    return (source == null ?\n-        globalScope : getEnclosingScope(source)).getSlot(name);\n+    SymbolScope scope = source == null ?\n+        globalScope : getEnclosingScope(source);\n+\n+    // scope will sometimes be null if one of the type-stripping passes\n+    // was run, and the symbol isn't in the AST anymore.\n+    return scope == null ? null : scope.getSlot(name);\n   }\n \n   /**\n           getSymbolDeclaredBy(type.toMaybeFunctionType());\n     } else if (type.isFunctionPrototypeType()) {\n       FunctionType ownerFn = ((ObjectType) type).getOwnerFunction();\n+      if (!ownerFn.isConstructor() && !ownerFn.isInterface()) {\n+        return null;\n+      }\n       return linkToCtor ?\n           getSymbolDeclaredBy(ownerFn) :\n           getSymbolForInstancesOf(ownerFn);\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     assertEquals(26, cCtor.getDeclaration().getNode().getLineno());\n   }\n \n+  public void testMissingConstructorTag() {\n+    SymbolTable table = createSymbolTable(\n+        \"function F() {\" +\n+        \"  this.field1 = 3;\" +\n+        \"}\" +\n+        \"F.prototype.method1 = function() {\" +\n+        \"  this.field1 = 5;\" +\n+        \"};\" +\n+        \"(new F()).method1();\");\n+\n+    // Because the constructor tag is missing, this is going\n+    // to be missing a lot of inference.\n+    assertNull(getGlobalVar(table, \"F.prototype.field1\"));\n+\n+    Symbol sym = getGlobalVar(table, \"F.prototype.method1\");\n+    assertEquals(1, table.getReferenceList(sym).size());\n+  }\n+\n   private void assertSymmetricOrdering(\n       Ordering<Symbol> ordering, Symbol first, Symbol second) {\n     assertTrue(ordering.compare(first, first) == 0);", "timestamp": 1320189047, "metainfo": ""}