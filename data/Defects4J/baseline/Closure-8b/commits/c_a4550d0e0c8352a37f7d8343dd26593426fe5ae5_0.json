{"sha": "a4550d0e0c8352a37f7d8343dd26593426fe5ae5", "log": "Add a list a strings to avoid when creating short strings for \"ReplaceStrings\".  R=nicksantos DELTA=151  (37 added, 0 deleted, 114 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=308   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   /** Configuration strings */\n   List<String> replaceStringsFunctionDescriptions;\n   String replaceStringsPlaceholderToken;\n+  // A list of strings that should not be used as replacements\n+  Set<String> replaceStringsReservedStrings;\n \n   //--------------------------------\n   // Output options\n     idGenerators = Collections.emptySet();\n     replaceStringsFunctionDescriptions = Collections.emptyList();\n     replaceStringsPlaceholderToken = \"\";\n+    replaceStringsReservedStrings = Collections.emptySet();\n \n     // Output\n     printInputDelimiter = false;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n           ReplaceStrings pass = new ReplaceStrings(\n               compiler,\n               options.replaceStringsPlaceholderToken,\n-              options.replaceStringsFunctionDescriptions);\n+              options.replaceStringsFunctionDescriptions,\n+              options.replaceStringsReservedStrings);\n           pass.process(externs, root);\n           stringMap = pass.getStringMap();\n         }\n--- a/src/com/google/javascript/jscomp/ReplaceStrings.java\n+++ b/src/com/google/javascript/jscomp/ReplaceStrings.java\n   //\n   private final Map<String, Config> functions = Maps.newHashMap();\n   private final Multimap<String, String> methods = HashMultimap.create();\n-  private final NameGenerator nameGenerator = createNameGenerator();\n+  private final NameGenerator nameGenerator;\n   private final Map<String, Result> results = Maps.newLinkedHashMap();\n \n   /**\n    *     function($,,,)\n    *   or\n    *     class.prototype.method($,,,)\n+   * @param reservedNames A set of names that should not be used as replacement\n+   *     strings.  Useful to prevent unwanted strings for appearing in the\n+   *     final output.\n    * where '$' is used to indicate which parameter should be replaced.\n    */\n   ReplaceStrings(\n       AbstractCompiler compiler, String placeholderToken,\n-      List<String> functionsToInspect) {\n+      List<String> functionsToInspect,\n+      Set<String> reservedNames) {\n     this.compiler = compiler;\n     this.placeholderToken = placeholderToken.isEmpty()\n         ? DEFAULT_PLACEHOLDER_TOKEN : placeholderToken;\n     this.registry = compiler.getTypeRegistry();\n+    this.nameGenerator = createNameGenerator(reservedNames);\n \n     // Intialize the map of functions to inspect for renaming canidates.\n     parseConfiguration(functionsToInspect);\n    * Use a name generate to create names so the names overlap with the names\n    * used for variable and properties.\n    */\n-  private static NameGenerator createNameGenerator() {\n+  private static NameGenerator createNameGenerator(Set<String> reservedNames) {\n     final String namePrefix = \"\";\n     final char[] reservedChars = new char[0];\n-    final Set<String> reservedNames = ImmutableSet.of();\n-    return new NameGenerator(reservedNames, namePrefix, reservedChars);\n+    return new NameGenerator(\n+        ImmutableSet.copyOf(reservedNames), namePrefix, reservedChars);\n   }\n }\n--- a/test/com/google/javascript/jscomp/ReplaceStringsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceStringsTest.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n import com.google.javascript.jscomp.ReplaceStrings.Result;\n import com.google.javascript.rhino.Node;\n \n+import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n \n /**\n  * Tests for {@link ReplaceStrings}.\n  */\n public class ReplaceStringsTest extends CompilerTestCase {\n   private ReplaceStrings pass;\n+  private Set<String> reserved;\n \n   private final static String EXTERNS =\n     \"var goog = {};\\n\" +\n     super.setUp();\n     super.enableLineNumberCheck(false);\n     super.enableTypeCheck(CheckLevel.OFF);\n+    reserved = Collections.emptySet();\n   }\n \n   @Override\n         \"goog.debug.Logger.getLogger(?)\",\n         \"goog.debug.Logger.prototype.info(?)\"\n         );\n-    pass = new ReplaceStrings(compiler, \"`\", names);\n+    pass = new ReplaceStrings(compiler, \"`\", names, reserved);\n \n     return new CompilerPass() {\n         public void process(Node externs, Node js) {\n             + \"throw Error('a');\");\n   }\n \n+  public void testReserved() {\n+    testDebugStrings(\n+        \"throw Error('xyz');\",\n+        \"throw Error('a');\",\n+        (new String[] { \"a\", \"xyz\" }));\n+    reserved = ImmutableSet.of(\"a\", \"b\", \"c\");\n+    testDebugStrings(\n+        \"throw Error('xyz');\",\n+        \"throw Error('d');\",\n+        (new String[] { \"d\", \"xyz\" }));\n+  }\n+\n   private void testDebugStrings(String js, String expected,\n                                 String[] substitutedStrings) {\n     // Verify that the strings are substituted correctly in the js code.", "timestamp": 1295464406, "metainfo": ""}