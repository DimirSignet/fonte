{"sha": "8f773e34a83ed8f5eb404dcbf4630a779779ea7e", "log": "-Change the ProcessTweaks pass to inject the compiler overrides by replacing calls to goog.tweak.getCompilerOverrides_  R=nicksantos DELTA=87  (49 added, 22 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=237   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ProcessTweaks.java\n+++ b/src/com/google/javascript/jscomp/ProcessTweaks.java\n   private final boolean stripTweaks;\n   private final SortedMap<String, Node> compilerDefaultValueOverrides;\n   \n-  /**\n-   * Var name for the map of tweakId->defaultValue of the compiler-specified\n-   * overrides. Added only when stripTweaks == false.\n-   */\n-  private static final String DEFAULT_VALUES_VAR_NAME =\n-      \"__JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES\";\n-  \n   private static final CharMatcher ID_MATCHER = CharMatcher.inRange('a', 'z').\n       or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.anyOf(\"0123456789_.\"));\n \n     REGISTER_NUMBER(\"goog.tweak.registerNumber\", \"number\", Token.NUMBER),\n     REGISTER_STRING(\"goog.tweak.registerString\", \"string\", Token.STRING),\n     OVERRIDE_DEFAULT_VALUE(\"goog.tweak.overrideDefaultValue\"),\n+    GET_COMPILER_OVERRIDES(\"goog.tweak.getCompilerOverrides_\"),\n     GET_BOOLEAN(\"goog.tweak.getBoolean\", REGISTER_BOOLEAN),\n     GET_NUMBER(\"goog.tweak.getNumber\", REGISTER_NUMBER),\n     GET_STRING(\"goog.tweak.getString\", REGISTER_STRING);\n \n   @Override\n   public void process(Node externs, Node root) {\n-    Map<String, TweakInfo> tweakInfos = collectTweaks(root);\n-    applyCompilerDefaultValueOverrides(tweakInfos);\n+    CollectTweaksResult result = collectTweaks(root);\n+    applyCompilerDefaultValueOverrides(result.tweakInfos);\n \n     boolean changed = false;\n \n     if (stripTweaks) {\n-      changed = stripAllCalls(tweakInfos);\n+      changed = stripAllCalls(result.tweakInfos);\n     } else if (!compilerDefaultValueOverrides.isEmpty()) {\n-      // Pass the compiler default value overrides to the JS through a specially\n-      // named variable.\n-      Node varNode = createCompilerDefaultValueOverridesVarNode(\n-          root.getFirstChild());\n-      root.getFirstChild().addChildToFront(varNode);\n-      changed = true;\n+      changed = replaceGetCompilerOverridesCalls(result.getOverridesCalls);\n     }\n     if (changed) {\n       compiler.reportCodeChange();\n     }\n+  }\n+\n+  /**\n+   * Passes the compiler default value overrides to the JS by replacing calls\n+   * to goog.tweak.getCompilerOverrids_ with a map of tweak ID->default value;\n+   */\n+  private boolean replaceGetCompilerOverridesCalls(\n+      List<TweakFunctionCall> calls) {\n+    for (TweakFunctionCall call : calls) {\n+      Node callNode = call.callNode;\n+      Node objNode = createCompilerDefaultValueOverridesVarNode(callNode);\n+      callNode.getParent().replaceChild(callNode, objNode);\n+    }\n+    return !calls.isEmpty();\n   }\n \n   /**\n   }\n \n   /**\n-   * Creates the var __JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES = { ... };\n-   * snippet that is prepended when there are compiler overrides and tweaks\n-   * are not stripped.\n+   * Creates a JS object that holds a map of tweakId -> default value override. \n    */\n   private Node createCompilerDefaultValueOverridesVarNode(\n       Node sourceInformationNode) {\n-    Node varNode = new Node(Token.VAR)\n-        .copyInformationFrom(sourceInformationNode);\n-    Node nameNode = Node.newString(Token.NAME, DEFAULT_VALUES_VAR_NAME)\n-        .copyInformationFrom(sourceInformationNode);\n     Node objNode = new Node(Token.OBJECTLIT)\n         .copyInformationFrom(sourceInformationNode);\n-    varNode.addChildToBack(nameNode);\n-    nameNode.addChildToBack(objNode);\n     for (Entry<String, Node> entry : compilerDefaultValueOverrides.entrySet()) {\n       Node objKeyNode = Node.newString(entry.getKey())\n           .copyInformationFrom(sourceInformationNode);\n       objKeyNode.addChildToBack(objValueNode);\n       objNode.addChildToBack(objKeyNode);\n     }\n-    return varNode;\n+    return objNode;\n   }\n \n   /** Sets the default values of tweaks based on compiler options. */\n    * of the calls have issues.\n    * @return A map of {@link TweakInfo} structures, keyed by tweak ID.\n    */\n-  private Map<String, TweakInfo> collectTweaks(Node root) {\n+  private CollectTweaksResult collectTweaks(Node root) {\n     CollectTweaks pass = new CollectTweaks();\n     NodeTraversal.traverse(compiler, root, pass);\n     \n     for (TweakInfo tweakInfo: tweakInfos.values()) {\n       tweakInfo.emitAllWarnings();\n     }\n-    return tweakInfos;\n+    return new CollectTweaksResult(tweakInfos, pass.getOverridesCalls);\n+  }\n+  \n+  private final static class CollectTweaksResult {\n+    final Map<String, TweakInfo> tweakInfos;\n+    final List<TweakFunctionCall> getOverridesCalls;\n+    \n+    CollectTweaksResult(Map<String, TweakInfo> tweakInfos,\n+        List<TweakFunctionCall> getOverridesCalls) {\n+      this.tweakInfos = tweakInfos;\n+      this.getOverridesCalls = getOverridesCalls;\n+    }\n   }\n \n   /**\n    */\n   private final class CollectTweaks extends AbstractPostOrderCallback {\n     final Map<String, TweakInfo> allTweaks = Maps.newHashMap();\n+    final List<TweakFunctionCall> getOverridesCalls = Lists.newArrayList();\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n       String callName = n.getFirstChild().getQualifiedName();\n       TweakFunction tweakFunc = TWEAK_FUNCTIONS_MAP.get(callName);\n       if (tweakFunc == null) {\n+        return;\n+      }\n+      \n+      if (tweakFunc == TweakFunction.GET_COMPILER_OVERRIDES) {\n+        getOverridesCalls.add(\n+            new TweakFunctionCall(t.getSourceName(), tweakFunc, n));\n         return;\n       }\n \n--- a/test/com/google/javascript/jscomp/ProcessTweaksTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessTweaksTest.java\n         \"alert(1); alert(false); alert('!')\");\n   }\n \n-  public void testCompilerOverridesNoStripping() {\n+  public void testCompilerOverridesNoStripping1() {\n     defaultValueOverrides.put(\"TweakA\", Node.newNumber(1));\n     defaultValueOverrides.put(\"TweakB\", new Node(Token.FALSE));\n     defaultValueOverrides.put(\"TweakC\", Node.newString(\"!\"));\n     test(\"goog.tweak.registerNumber('TweakA', 'desc');\" +\n         \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n-        \"goog.tweak.registerString('TweakC', 'desc', 'foo')\",\n-        \"var __JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES =\" +\n-        \"  { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\" +\n-        \"goog.tweak.registerNumber('TweakA', 'desc');\" +\n-        \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n-        \"goog.tweak.registerString('TweakC', 'desc', 'foo')\");\n-  }\n-\n+        \"goog.tweak.registerString('TweakC', 'desc', 'foo');\" +\n+        \"var a = goog.tweak.getCompilerOverrides_()\",\n+        \"goog.tweak.registerNumber('TweakA', 'desc');\" +\n+        \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n+        \"goog.tweak.registerString('TweakC', 'desc', 'foo');\" +\n+        \"var a = { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\");\n+  }\n+  \n+  public void testCompilerOverridesNoStripping2() {\n+    defaultValueOverrides.put(\"TweakA\", Node.newNumber(1));\n+    defaultValueOverrides.put(\"TweakB\", new Node(Token.FALSE));\n+    defaultValueOverrides.put(\"TweakC\", Node.newString(\"!\"));\n+    test(\"goog.tweak.registerNumber('TweakA', 'desc');\" +\n+        \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n+        \"goog.tweak.registerString('TweakC', 'desc', 'foo');\" +\n+        \"var a = goog.tweak.getCompilerOverrides_();\" +\n+        \"var b = goog.tweak.getCompilerOverrides_()\",\n+        \"goog.tweak.registerNumber('TweakA', 'desc');\" +\n+        \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n+        \"goog.tweak.registerString('TweakC', 'desc', 'foo');\" +\n+        \"var a = { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\" +\n+        \"var b = { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\");\n+  }\n+  \n   public void testUnknownCompilerOverride() {\n     allowSourcelessWarnings();\n     defaultValueOverrides.put(\"TweakA\", Node.newString(\"!\"));\n-    test(\"\",\n-        \"var __JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES =\" +\n-        \"  { 'TweakA': '!' };\", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING); \n+    testSame(\"var a\", ProcessTweaks.UNKNOWN_TWEAK_WARNING); \n   }\n }", "timestamp": 1294714233, "metainfo": ""}