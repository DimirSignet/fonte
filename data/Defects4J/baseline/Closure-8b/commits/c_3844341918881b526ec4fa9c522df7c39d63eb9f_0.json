{"sha": "3844341918881b526ec4fa9c522df7c39d63eb9f", "log": "tentative proposal for @expose  R=johnlenz DELTA=100  (100 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4353   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n  *    handling).\n  * 5) Removes duplicate variable declarations.\n  * 6) Marks constants with the IS_CONSTANT_NAME annotation.\n+ * 7) Finds properties marked @expose, and rewrites them in [] notation.\n  *\n  * @author johnlenz@google.com (johnlenz)\n  */\n     new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n         .process(externs, root);\n \n+    FindExposeAnnotations findExposeAnnotations = new FindExposeAnnotations();\n+    NodeTraversal.traverse(compiler, root, findExposeAnnotations);\n+    if (!findExposeAnnotations.exposedProperties.isEmpty()) {\n+      NodeTraversal.traverse(compiler, root,\n+          new RewriteExposedProperties(\n+              findExposeAnnotations.exposedProperties));\n+    }\n+\n     if (!compiler.getLifeCycleStage().isNormalized()) {\n       compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n+    }\n+  }\n+\n+  /**\n+   * Find all the @expose annotations.\n+   */\n+  private static class FindExposeAnnotations extends AbstractPostOrderCallback {\n+    private final Set<String> exposedProperties = Sets.newHashSet();\n+\n+    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (NodeUtil.isExprAssign(n)) {\n+        Node assign = n.getFirstChild();\n+        Node lhs = assign.getFirstChild();\n+        if (lhs.isGetProp() && isMarkedExpose(assign)) {\n+          exposedProperties.add(lhs.getLastChild().getString());\n+        }\n+      } else if (NodeUtil.isObjectLitKey(n, parent) &&\n+          n.isString() &&\n+          isMarkedExpose(n)) {\n+        exposedProperties.add(n.getString());\n+      }\n+    }\n+\n+    private boolean isMarkedExpose(Node n) {\n+      JSDocInfo info = n.getJSDocInfo();\n+      return info != null && info.isExpose();\n+    }\n+  }\n+\n+  /**\n+   * Rewrite all exposed properties in [] form.\n+   */\n+  private class RewriteExposedProperties\n+      extends AbstractPostOrderCallback {\n+    private final Set<String> exposedProperties;\n+\n+    RewriteExposedProperties(Set<String> exposedProperties) {\n+      this.exposedProperties = exposedProperties;\n+    }\n+\n+    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.isGetProp()) {\n+        String propName = n.getLastChild().getString();\n+        if (exposedProperties.contains(propName)) {\n+          Node obj = n.removeFirstChild();\n+          Node prop = n.removeFirstChild();\n+          n.getParent().replaceChild(n, IR.getelem(obj, prop));\n+          compiler.reportCodeChange();\n+        }\n+      } else if (n.isString() && NodeUtil.isObjectLitKey(n, parent)) {\n+        String propName = n.getString();\n+        if (exposedProperties.contains(propName)) {\n+          n.setQuotedString();\n+          compiler.reportCodeChange();\n+        }\n+      }\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     test(options, \"function testFoo() {}\",\n          \"/** @export */ function testFoo() {}\" +\n          \"goog.exportSymbol('testFoo', testFoo);\");\n+  }\n+\n+  public void testExpose() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel.ADVANCED_OPTIMIZATIONS\n+        .setOptionsForCompilationLevel(options);\n+    test(options,\n+         \"var x = {eeny: 1, /** @expose */ meeny: 2};\" +\n+         \"/** @constructor */ var Foo = function() {};\" +\n+         \"/** @expose */  Foo.prototype.miny = 3;\" +\n+         \"Foo.prototype.moe = 4;\" +\n+         \"function moe(a, b) { return a.meeny + b.miny; }\" +\n+         \"window['x'] = x;\" +\n+         \"window['Foo'] = Foo;\" +\n+         \"window['moe'] = moe;\",\n+         \"function a(){}\" +\n+         \"a.prototype.miny=3;\" +\n+         \"window.x={a:1,meeny:2};\" +\n+         \"window.Foo=a;\" +\n+         \"window.moe=function(b,c){\" +\n+         \"  return b.meeny+c.miny\" +\n+         \"}\");\n   }\n \n   public void testCheckSymbolsOff() {\n--- a/test/com/google/javascript/jscomp/NormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/NormalizeTest.java\n     }\n   }\n \n+  public void testExposeSimple() {\n+    test(\"var x = {}; /** @expose */ x.y = 3; x.y = 5;\",\n+         \"var x = {}; x['y'] = 3; x['y'] = 5;\");\n+  }\n+\n+  public void testExposeComplex() {\n+    test(\n+        \"var x = {/** @expose */ a: 1, b: 2};\"\n+        + \"x.a = 3; /** @expose */ x.b = 5;\",\n+        \"var x = {'a': 1, 'b': 2};\"\n+        + \"x['a'] = 3; x['b'] = 5;\");\n+  }\n+\n   private Set<Node> findNodesWithProperty(Node root, final int prop) {\n     final Set<Node> set = Sets.newHashSet();\n     NodeTraversal.traverse(", "timestamp": 1331602728, "metainfo": ""}