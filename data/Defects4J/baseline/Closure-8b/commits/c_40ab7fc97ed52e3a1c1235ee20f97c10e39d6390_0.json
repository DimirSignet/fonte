{"sha": "40ab7fc97ed52e3a1c1235ee20f97c10e39d6390", "log": "Delete the heuristic arity checks. Almost all BUILD rules in google3 with this flag turned on are using type-checking, which overrides this flag. I don't think it's worth supporting for the few people left who use it. (Nick) R=John DELTA=659  (0 added, 654 deleted, 5 changed)  use the right error-reporting apis. (Nick) R=John DELTA=19  (2 added, 0 deleted, 17 changed)  inline aliases of 'this' (Nick) R=John DELTA=34  (31 added, 1 deleted, 2 changed)  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       options.checkTypes = false;\n     }\n \n-    // Type-checking already does more accurate method arity checking, so don't\n-    // do legacy method arity checking unless checkTypes is OFF.\n     if (options.checkTypes) {\n       checks.add(resolveTypes.makeOneTimePass());\n       checks.add(inferTypes.makeOneTimePass());\n       checks.add(checkTypes.makeOneTimePass());\n-    } else {\n-      if (options.checkFunctions.isOn()) {\n-        checks.add(checkFunctions);\n-      }\n-\n-      if (options.checkMethods.isOn()) {\n-        checks.add(checkMethods);\n-      }\n     }\n \n     if (options.checkUnreachableCode.isOn() ||\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new ObjectPropertyStringPreprocess(compiler);\n-    }\n-  };\n-\n-  /** Checks number of args passed to functions. */\n-  private final PassFactory checkFunctions =\n-      new PassFactory(\"checkFunctions\", true) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new FunctionCheck(compiler, options.checkFunctions);\n-    }\n-  };\n-\n-  /** Checks number of args passed to methods. */\n-  private final PassFactory checkMethods =\n-      new PassFactory(\"checkMethods\", true) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new MethodCheck(compiler, options.checkMethods);\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n \n         Node value = refInit.getAssignedValue();\n         Preconditions.checkNotNull(value);\n-        if (!(NodeUtil.isImmutableValue(value) &&\n+\n+        boolean isImmutableValueWorthInlining =\n+            NodeUtil.isImmutableValue(value) &&\n             (value.getType() != Token.STRING ||\n-             isStringWorthInlining(v, refInfo.references)))) {\n+                isStringWorthInlining(v, refInfo.references));\n+        boolean isInlinableThisAlias =\n+            value.getType() == Token.THIS &&\n+            !refInfo.isEscaped();\n+        if (!isImmutableValueWorthInlining && !isInlinableThisAlias) {\n           return false;\n         }\n-\n       }\n \n       for (int i = startingReadRef; i < refSet.size(); i++) {\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n     }\n \n     /**\n+     * Whether the variable is escaped into an inner scope.\n+     */\n+    boolean isEscaped() {\n+      Scope scope = null;\n+      for (Reference ref : references) {\n+        if (scope == null) {\n+          scope = ref.scope;\n+        } else if (scope != ref.scope) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    /**\n      * @param index The index into the references array to look for an\n      * assigning declaration.\n      *\n--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java\n     testSame(\"var JSCompiler_renameProperty; \" +\n              \"JSCompiler_renameProperty('foo')\");\n   }\n+\n+  public void testThisAlias() {\n+    test(\"function f() { var a = this; a.y(); a.z(); }\",\n+         \"function f() { this.y(); this.z(); }\");\n+  }\n+\n+  public void testThisEscapedAlias() {\n+    testSame(\n+        \"function f() { var a = this; var g = function() { a.y(); }; a.z(); }\");\n+  }\n }", "timestamp": 1269548509, "metainfo": ""}