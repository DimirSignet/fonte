{"sha": "d6ac4fe53569b1415f66db221d7511c74f4a965b", "log": "Clean up stream-handing a bit Remove compute_phase_ordering flag Fixes issue 412  R=johnlenz DELTA=43  (16 added, 7 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1315   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Supplier;\n+import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import java.io.Closeable;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.Flushable;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n \n   private final CommandLineConfig config;\n \n-  private Appendable out;\n+  private Appendable jsOutput;\n   private final PrintStream err;\n   private A compiler;\n \n \n   AbstractCommandLineRunner(PrintStream out, PrintStream err) {\n     this.config = new CommandLineConfig();\n-    this.out = out;\n-    this.err = err;\n+    this.jsOutput = Preconditions.checkNotNull(out);\n+    this.err = Preconditions.checkNotNull(err);\n   }\n \n   /**\n \n     if (config.computePhaseOrdering) {\n       runTimeStats.outputBestPhaseOrdering();\n+    }\n+\n+    try {\n+      if (jsOutput instanceof Closeable) {\n+        ((Closeable) jsOutput).close();\n+      }\n+    } catch (IOException e) {\n+      throw Throwables.propagate(e);\n     }\n \n     if (testMode) {\n \n     boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n-      out = fileNameToOutputWriter(options.jsOutputFile);\n-    } else if (out instanceof OutputStream) {\n-      out = streamToOutputWriter((OutputStream) out);\n+      jsOutput = fileNameToOutputWriter(options.jsOutputFile);\n+    } else if (jsOutput instanceof OutputStream) {\n+      jsOutput = streamToOutputWriter((OutputStream) jsOutput);\n     }\n \n     List<String> jsFiles = config.js;\n     }\n \n     int errCode = processResults(result, modules, options);\n-    // Close the output if we are writing to a file.\n-    if (out instanceof Closeable) {\n-      ((Closeable) out).close();\n+    // Flush the output if we are writing to a file.\n+    // We can't close yet, because we may need to write phase ordering\n+    // info to it later.\n+    if (jsOutput instanceof Flushable) {\n+      ((Flushable) jsOutput).flush();\n     }\n     return errCode;\n   }\n       if (compiler.getRoot() == null) {\n         return 1;\n       } else {\n-        out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n-        out.append('\\n');\n+        jsOutput.append(\n+            DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n+        jsOutput.append('\\n');\n         return 0;\n       }\n     }\n         return 1;\n       } else {\n         ControlFlowGraph<Node> cfg = compiler.computeCFG();\n-        DotFormatter.appendDot(compiler.getRoot().getLastChild(), cfg, out);\n-        out.append('\\n');\n+        DotFormatter.appendDot(\n+            compiler.getRoot().getLastChild(), cfg, jsOutput);\n+        jsOutput.append('\\n');\n         return 0;\n       }\n     }\n \n     if (config.printTree) {\n       if (compiler.getRoot() == null) {\n-        out.append(\"Code contains errors; no tree was generated.\\n\");\n+        jsOutput.append(\"Code contains errors; no tree was generated.\\n\");\n         return 1;\n       } else {\n-        compiler.getRoot().appendStringTree(out);\n-        out.append(\"\\n\");\n+        compiler.getRoot().appendStringTree(jsOutput);\n+        jsOutput.append(\"\\n\");\n         return 0;\n       }\n     }\n \n     if (result.success) {\n       if (modules == null) {\n-        writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n+        writeOutput(\n+            jsOutput, compiler, compiler.toSource(), config.outputWrapper,\n             OUTPUT_WRAPPER_MARKER);\n \n         // Output the source map if requested.\n      */\n     private void outputBestPhaseOrdering() {\n       try {\n-        out.append(\"Best time: \" + bestRunTime + \"\\n\");\n-        out.append(\"Worst time: \" + worstRunTime + \"\\n\");\n+        jsOutput.append(\"Best time: \" + bestRunTime + \"\\n\");\n+        jsOutput.append(\"Worst time: \" + worstRunTime + \"\\n\");\n \n         int i = 1;\n         for (List<String> loop : loopedPassesInBestRun) {\n-          out.append(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop)+ \"\\n\");\n+          jsOutput.append(\n+              \"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop)+ \"\\n\");\n           i++;\n         }\n       } catch (IOException e) {\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         usage = \"Prints out the parse tree and exits\")\n     private boolean print_tree = false;\n \n-    @Option(name = \"--compute_phase_ordering\",\n-        handler = BooleanOptionHandler.class,\n-        usage = \"Runs the compile job many times, then prints out the \" +\n-        \"best phase ordering from this run\")\n-    private boolean compute_phase_ordering = false;\n-\n     @Option(name = \"--print_ast\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Prints a dot file describing the internal abstract syntax\"\n     } else {\n       getCommandLineConfig()\n           .setPrintTree(flags.print_tree)\n-          .setComputePhaseOrdering(flags.compute_phase_ordering)\n           .setPrintAst(flags.print_ast)\n           .setPrintPassGraph(flags.print_pass_graph)\n           .setJscompDevMode(flags.jscomp_dev_mode)", "timestamp": 1302542890, "metainfo": ""}