{"sha": "167181d67b286cbec3d2b87aacca48cb6278dc24", "log": "Changing the location data for new expression nodes so the beginning of the node is given as the start of \"new\" instead of as the start of the constructor call.  R=tylerg,nicksantos DELTA=31  (26 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5198   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n     @Override\n     Node processNewExpression(NewExpression exprNode) {\n-      return processFunctionCall(exprNode);\n+      Node node = newNode(transformTokenType(exprNode.getType()), transform(exprNode.getTarget()));\n+      for (AstNode child : exprNode.getArguments()) {\n+        node.addChildToBack(transform(child));\n+      }\n+      node.setLineno(exprNode.getLineno());\n+      node.setCharno(position2charno(exprNode.getAbsolutePosition()));\n+      maybeSetLengthFrom(node, exprNode);\n+      return node;\n     }\n \n     @Override\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n     assertNodePosition(2, 0, 1, bNameComponent);\n   }\n \n+  public void testNewLocation() {\n+    Node root = newParse(\n+        \"new c();\\n\");\n+\n+    Node exprStmt = root.getFirstChild();\n+    Node newExpr = exprStmt.getFirstChild();\n+    assertNodePosition(1, 0, 7, newExpr);\n+  }\n+\n+  public void testNewLocationMultiLine() {\n+    Node root = newParse(\n+        \"new   \\n\" +\n+        \"c();\\n\");\n+\n+    Node exprStmt = root.getFirstChild();\n+    Node newExpr = exprStmt.getFirstChild();\n+    assertNodePosition(1, 0, 10, newExpr);\n+  }\n+\n   public void testLinenoDeclaration() {\n     Node root = newParse(\n         \"a.\\n\" +", "timestamp": 1342812362, "metainfo": ""}