{"sha": "4c3e79c9db199b6f79875a343f85face60c207e6", "log": "Add a SourceFile.Builder interface, so that we don't end up with a combinatorial explosion of overloads. Fixes issue 588  R=johnlenz DELTA=89  (62 added, 11 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3636   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n   }\n \n   public static SourceFile fromFile(String fileName, Charset c) {\n-    return fromFile(new File(fileName), c);\n+    return builder().withCharset(c).buildFromFile(fileName);\n   }\n \n   public static SourceFile fromFile(String fileName) {\n-    return fromFile(new File(fileName));\n+    return builder().buildFromFile(fileName);\n   }\n \n   public static SourceFile fromFile(File file, Charset c) {\n-    return new OnDisk(file, c);\n+    return builder().withCharset(c).buildFromFile(file);\n   }\n \n   public static SourceFile fromFile(File file) {\n-    return new OnDisk(file);\n+    return builder().buildFromFile(file);\n   }\n \n   public static SourceFile fromCode(String fileName, String code) {\n-    return new Preloaded(fileName, code);\n+    return builder().buildFromCode(fileName, code);\n   }\n \n   public static SourceFile fromCode(String fileName,\n       String originalPath, String code) {\n-    return new Preloaded(fileName, originalPath, code);\n+    return builder().withOriginalPath(originalPath)\n+        .buildFromCode(fileName, code);\n   }\n \n   public static SourceFile fromInputStream(String fileName, InputStream s)\n       throws IOException {\n-    return fromCode(fileName,\n-        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));\n+    return builder().buildFromInputStream(fileName, s);\n   }\n \n   public static SourceFile fromInputStream(String fileName,\n       String originalPath, InputStream s) throws IOException {\n-    return fromCode(fileName, originalPath,\n-        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));\n+    return builder().withOriginalPath(originalPath)\n+        .buildFromInputStream(fileName, s);\n   }\n \n   public static SourceFile fromReader(String fileName, Reader r)\n       throws IOException {\n-    return fromCode(fileName, CharStreams.toString(r));\n+    return builder().buildFromReader(fileName, r);\n   }\n \n   public static SourceFile fromGenerator(String fileName,\n       Generator generator) {\n-    return new Generated(fileName, generator);\n+    return builder().buildFromGenerator(fileName, generator);\n+  }\n+\n+  /** Create a new builder for source files. */\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * A builder interface for source files.\n+   *\n+   * Allows users to customize the Charset, and the original path of\n+   * the source file (if it differs from the path on disk).\n+   */\n+  public static class Builder {\n+    private Charset charset = Charsets.UTF_8;\n+    private String originalPath = null;\n+\n+    public Builder() {}\n+\n+    /** Set the charset to use when reading from an input stream or file. */\n+    public Builder withCharset(Charset charset) {\n+      this.charset = charset;\n+      return this;\n+    }\n+\n+    /** Set the original path to use. */\n+    public Builder withOriginalPath(String originalPath) {\n+      this.originalPath = originalPath;\n+      return this;\n+    }\n+\n+    public SourceFile buildFromFile(String fileName) {\n+      return buildFromFile(new File(fileName));\n+    }\n+\n+    public SourceFile buildFromFile(File file) {\n+      return new OnDisk(file, originalPath, charset);\n+    }\n+\n+    public SourceFile buildFromCode(String fileName, String code) {\n+      return new Preloaded(fileName, originalPath, code);\n+    }\n+\n+    public SourceFile buildFromInputStream(String fileName, InputStream s)\n+        throws IOException {\n+      return buildFromCode(fileName,\n+          CharStreams.toString(new InputStreamReader(s, charset)));\n+    }\n+\n+    public SourceFile buildFromReader(String fileName, Reader r)\n+        throws IOException {\n+      return buildFromCode(fileName, CharStreams.toString(r));\n+    }\n+\n+    public SourceFile buildFromGenerator(String fileName,\n+        Generator generator) {\n+      return new Generated(fileName, originalPath, generator);\n+    }\n   }\n \n \n    */\n   static class Preloaded extends SourceFile {\n     private static final long serialVersionUID = 1L;\n-\n-    Preloaded(String fileName, String code) {\n-      this(fileName, fileName, code);\n-    }\n \n     Preloaded(String fileName, String originalPath, String code) {\n       super(fileName);\n     private final Generator generator;\n \n     // Not private, so that LazyInput can extend it.\n-    Generated(String fileName, Generator generator) {\n+    Generated(String fileName, String originalPath, Generator generator) {\n       super(fileName);\n+      super.setOriginalPath(originalPath);\n       this.generator = generator;\n     }\n \n     // This is stored as a String, but passed in and out as a Charset so that\n     // we can serialize the class.\n     // Default input file format for JSCompiler has always been UTF_8.\n-    protected String inputCharset = Charsets.UTF_8.name();\n-\n-    OnDisk(File file, Charset c) {\n-      this(file);\n+    private String inputCharset = Charsets.UTF_8.name();\n+\n+    OnDisk(File file, String originalPath, Charset c) {\n+      super(file.getPath());\n+      this.file = file;\n+      super.setOriginalPath(originalPath);\n       if (c != null) {\n         this.setCharset(c);\n       }\n-    }\n-\n-    // No Charset provided?\n-    OnDisk(File file) {\n-      super(file.getPath());\n-      this.file = file;\n     }\n \n     @Override", "timestamp": 1320693185, "metainfo": ""}