{"sha": "3f10aba52b1ed5f94ab75f020c5b938464c5e276", "log": "Enable \"pseudo-ids\" for ReplaceIdGenerators  R=gboyer DELTA=125  (98 added, 3 deleted, 24 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5019   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       return new CompilerPass() {\n         @Override public void process(Node externs, Node root) {\n           ReplaceIdGenerators pass =\n-              new ReplaceIdGenerators(compiler, options.idGenerators);\n+              new ReplaceIdGenerators(\n+                  compiler, options.idGenerators, options.generatePseudoNames);\n           pass.process(externs, root);\n           idGeneratorMap = pass.getIdGeneratorMap();\n         }\n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n           \"Id generator can only be consistent or inconsistent\");\n \n   private final AbstractCompiler compiler;\n-  private final Map<String, NameGenerator> nameGenerators;\n-  private final Map<String, NameGenerator> consistNameGenerators;\n+  private final Map<String, NameSupplier> nameGenerators;\n+  private final Map<String, NameSupplier> consistNameGenerators;\n   private final Map<String, Map<String, String>> consistNameMap;\n \n   private final Map<String, List<Replacement>> idGeneratorMaps;\n \n-  public ReplaceIdGenerators(AbstractCompiler compiler, Set<String> idGens) {\n+  private final boolean generatePseudoNames;\n+\n+  public ReplaceIdGenerators(\n+      AbstractCompiler compiler, Set<String> idGens,\n+      boolean generatePseudoNames) {\n     this.compiler = compiler;\n+    this.generatePseudoNames = generatePseudoNames;\n     nameGenerators = Maps.newLinkedHashMap();\n     consistNameGenerators = Maps.newLinkedHashMap();\n     idGeneratorMaps = Maps.newLinkedHashMap();\n \n     if (idGens != null) {\n       for(String gen : idGens) {\n-        nameGenerators.put(gen,\n-            new NameGenerator(Collections.<String>emptySet(), \"\", null));\n+        nameGenerators.put(gen, createNameSupplier());\n         idGeneratorMaps.put(gen, Lists.<Replacement>newLinkedList());\n       }\n+    }\n+  }\n+\n+  private static interface NameSupplier {\n+    String getName(String name);\n+  }\n+\n+  private static class ObfuscatedNameSuppier implements NameSupplier {\n+    private final NameGenerator generator =\n+        new NameGenerator(Collections.<String>emptySet(), \"\", null);\n+    @Override\n+    public String getName(String name) {\n+      return generator.generateNextName();\n+    }\n+  }\n+\n+  private static class PseudoNameSuppier implements NameSupplier {\n+    private int counter = 0;\n+    @Override\n+    public String getName(String name) {\n+      return name + \"$\" + counter++;\n+    }\n+  }\n+\n+  private NameSupplier createNameSupplier() {\n+    if (generatePseudoNames) {\n+      return new PseudoNameSuppier();\n+    } else {\n+      return new ObfuscatedNameSuppier();\n     }\n   }\n \n       // TODO(user): Error on function that has both. Or redeclartion\n       // on the same function.\n       if (doc.isConsistentIdGenerator()) {\n-        consistNameGenerators.put(name,\n-            new NameGenerator(Collections.<String>emptySet(), \"\", null));\n+        consistNameGenerators.put(name, createNameSupplier());\n         consistNameMap.put(name, Maps.<String, String>newLinkedHashMap());\n       } else {\n-        nameGenerators.put(name,\n-          new NameGenerator(Collections.<String>emptySet(), \"\", null));\n+        nameGenerators.put(name, createNameSupplier());\n       }\n       idGeneratorMaps.put(name, Lists.<Replacement>newArrayList());\n     }\n \n       String callName = n.getFirstChild().getQualifiedName();\n       boolean consistent = false;\n-      NameGenerator nameGenerator = nameGenerators.get(callName);\n+      NameSupplier nameGenerator = nameGenerators.get(callName);\n       if (nameGenerator == null) {\n         nameGenerator = consistNameGenerators.get(callName);\n         consistent = true;\n         Map<String, String> entry = consistNameMap.get(callName);\n         rename = entry.get(id.getString());\n         if (rename == null) {\n-          rename = nameGenerator.generateNextName();\n+          rename = nameGenerator.getName(id.getString());\n           entry.put(id.getString(), rename);\n         }\n       } else {\n-        rename = nameGenerator.generateNextName();\n+        rename = nameGenerator.getName(id.getString());\n       }\n \n       parent.replaceChild(n, IR.string(rename));\n--- a/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n  *\n  */\n public class ReplaceIdGeneratorsTest extends CompilerTestCase {\n+\n+  public boolean generatePseudoNames = false;\n+\n   @Override\n   protected CompilerPass getProcessor(final Compiler compiler) {\n     return new ReplaceIdGenerators(\n         compiler,\n         new ImmutableSet.Builder<String>()\n-        .add(\"goog.events.getUniqueId\")\n-        .add(\"goog.place.getUniqueId\").build());\n+            .add(\"goog.events.getUniqueId\")\n+        .add(\"goog.place.getUniqueId\").build(),\n+        generatePseudoNames);\n+  }\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    generatePseudoNames = false;\n   }\n \n   @Override\n \n   public void testBackwardCompat() {\n     test(\"foo.bar = goog.events.getUniqueId('foo_bar')\",\n-         \"foo.bar = 'a'\");\n+         \"foo.bar = 'a'\",\n+         \"foo.bar = 'foo_bar$0'\");\n   }\n \n   public void testSimple() {\n          \"foo.bar = foo.getUniqueId('foo_bar')\",\n \n          \"foo.getUniqueId = function() {};\" +\n-         \"foo.bar = 'a'\");\n+         \"foo.bar = 'a'\",\n+\n+         \"foo.getUniqueId = function() {};\" +\n+         \"foo.bar = 'foo_bar$0'\");\n \n     test(\"/** @idGenerator */ goog.events.getUniqueId = function() {};\" +\n         \"foo1 = goog.events.getUniqueId('foo1');\" +\n \n         \"goog.events.getUniqueId = function() {};\" +\n         \"foo1 = 'a';\" +\n-        \"foo1 = 'b';\");\n+        \"foo1 = 'b';\",\n+\n+        \"goog.events.getUniqueId = function() {};\" +\n+        \"foo1 = 'foo1$0';\" +\n+        \"foo1 = 'foo1$1';\");\n   }\n \n   public void testSimpleConsistent() {\n          \"foo.bar = id('foo_bar')\",\n \n          \"id = function() {};\" +\n-         \"foo.bar = 'a'\");\n+         \"foo.bar = 'a'\",\n+\n+         \"id = function() {};\" +\n+         \"foo.bar = 'foo_bar$0'\");\n \n     test(\"/** @consistentIdGenerator */ id = function() {};\" +\n          \"f1 = id('f1');\" +\n \n          \"id = function() {};\" +\n          \"f1 = 'a';\" +\n-         \"f1 = 'a'\");\n+         \"f1 = 'a'\",\n+\n+         \"id = function() {};\" +\n+         \"f1 = 'f1$0';\" +\n+         \"f1 = 'f1$0'\");\n \n     test(\"/** @consistentIdGenerator */ id = function() {};\" +\n         \"f1 = id('f1');\" +\n         \"id = function() {};\" +\n         \"f1 = 'a';\" +\n         \"f1 = 'a';\" +\n-        \"f1 = 'a'\");\n+        \"f1 = 'a'\",\n+\n+        \"id = function() {};\" +\n+        \"f1 = 'f1$0';\" +\n+        \"f1 = 'f1$0';\" +\n+        \"f1 = 'f1$0'\");\n   }\n \n   public void testVar() {\n          \"foo.bar = id('foo_bar')\",\n \n          \"var id = function() {};\" +\n-         \"foo.bar = 'a'\");\n+         \"foo.bar = 'a'\",\n+\n+         \"var id = function() {};\" +\n+         \"foo.bar = 'foo_bar$0'\");\n   }\n \n   public void testObjLit() {\n          \"foo.bar = {a: get.id('foo_bar')}\",\n \n          \"get.id = function() {};\" +\n-         \"foo.bar = {a: 'a'}\");\n+         \"foo.bar = {a: 'a'}\",\n+\n+         \"get.id = function() {};\" +\n+         \"foo.bar = {a: 'foo_bar$0'}\");\n   }\n \n   public void testTwoGenerators() {\n          \"f1 = 'a';\" +\n          \"f2 = 'b';\" +\n          \"f3 = 'a';\" +\n-         \"f4 = 'b';\");\n+         \"f4 = 'b';\",\n+\n+         \"var id1 = function() {};\" +\n+         \"var id2 = function() {};\" +\n+         \"f1 = '1$0';\" +\n+         \"f2 = '1$1';\" +\n+         \"f3 = '1$0';\" +\n+         \"f4 = '1$1';\");\n   }\n \n   public void testTwoMixedGenerators() {\n          \"f1 = 'a';\" +\n          \"f2 = 'b';\" +\n          \"f3 = 'a';\" +\n-         \"f4 = 'a';\");\n+         \"f4 = 'a';\",\n+\n+         \"var id1 = function() {};\" +\n+         \"var id2 = function() {};\" +\n+         \"f1 = '1$0';\" +\n+         \"f2 = '1$1';\" +\n+         \"f3 = '1$0';\" +\n+         \"f4 = '1$0';\");\n   }\n \n   public void testLocalCall() {\n         \"function fb() {foo.bar = id('foo_bar')}\",\n \n         \"var id = function() {};\" +\n-        \"function fb() {foo.bar = 'a'}\");\n+        \"function fb() {foo.bar = 'a'}\",\n+\n+        \"var id = function() {};\" +\n+        \"function fb() {foo.bar = 'foo_bar$0'}\");\n   }\n \n   public void testConflictingIdGenerator() {\n         \"if (x) {foo.bar = id('foo_bar')}\",\n \n         \"var id = function() {};\" +\n-        \"if (x) {foo.bar = 'a'}\");\n+        \"if (x) {foo.bar = 'a'}\",\n+\n+        \"var id = function() {};\" +\n+        \"if (x) {foo.bar = 'foo_bar$0'}\");\n+  }\n+\n+  private void test(String code, String expected, String expectedPseudo) {\n+    generatePseudoNames = false;\n+    test(code, expected);\n+    generatePseudoNames = true;\n+    test(code, expectedPseudo);\n   }\n }", "timestamp": 1339795658, "metainfo": ""}