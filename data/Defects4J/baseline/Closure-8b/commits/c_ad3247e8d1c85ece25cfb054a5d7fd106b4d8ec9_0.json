{"sha": "ad3247e8d1c85ece25cfb054a5d7fd106b4d8ec9", "log": "Consistently mark SCRIPT nodes as synthetic.  R=acleung DELTA=12  (8 added, 1 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1312   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SyntheticAst.java\n+++ b/src/com/google/javascript/jscomp/SyntheticAst.java\n   @Override\n   public void clearAst() {\n     root = new Node(Token.SCRIPT);\n+    root.setIsSyntheticBlock(true);\n     root.putProp(Node.SOURCENAME_PROP, sourceName);\n   }\n \n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n       DefaultPassConfig passConfig = new DefaultPassConfig(null);\n       CompilerPass typeResolver = passConfig.resolveTypes.create(compiler);\n       Node externs = new Node(Token.SCRIPT);\n+      externs.setIsSyntheticBlock(true);\n       Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n       externAndJsRoot.setIsSyntheticBlock(true);\n       typeResolver.process(externs, n);\n--- a/test/com/google/javascript/jscomp/NodeTraversalTest.java\n+++ b/test/com/google/javascript/jscomp/NodeTraversalTest.java\n     PruningCallback include =\n       new PruningCallback(ImmutableSet.of(Token.SCRIPT, Token.VAR), true);\n \n-    assertTrue(include.shouldTraverse(null, new Node(Token.SCRIPT), null));\n+    Node script = new Node(Token.SCRIPT);\n+    script.setIsSyntheticBlock(true);\n+    assertTrue(include.shouldTraverse(null, script, null));\n     assertTrue(include.shouldTraverse(null, new Node(Token.VAR), null));\n     assertFalse(include.shouldTraverse(null, new Node(Token.NAME), null));\n     assertFalse(include.shouldTraverse(null, new Node(Token.ADD), null));\n     PruningCallback include =\n       new PruningCallback(ImmutableSet.of(Token.SCRIPT, Token.VAR), false);\n \n-    assertFalse(include.shouldTraverse(null, new Node(Token.SCRIPT), null));\n+    Node script = new Node(Token.SCRIPT);\n+    script.setIsSyntheticBlock(true);\n+    assertFalse(include.shouldTraverse(null, script, null));\n     assertFalse(include.shouldTraverse(null, new Node(Token.VAR), null));\n     assertTrue(include.shouldTraverse(null, new Node(Token.NAME), null));\n     assertTrue(include.shouldTraverse(null, new Node(Token.ADD), null));\n \n   /**\n    * Concrete implementation of AbstractPrunedCallback to test the\n-   * {@link AbstractNodeTypePruningCallback#shouldTraverse(NodeTraversal, Node, Node)}\n-   * method.\n+   * AbstractNodeTypePruningCallback shouldTraverse method.\n    */\n   static class PruningCallback extends AbstractNodeTypePruningCallback {\n     public PruningCallback(Set<Integer> nodeTypes, boolean include) {\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     Node function = NodeUtil.newFunctionNode(\n         \"foo\", params, body, -1, -1);\n     Node actual = new Node(Token.SCRIPT);\n+    actual.setIsSyntheticBlock(true);\n     actual.addChildToFront(function);\n     String difference = expected.checkTreeEquals(actual);\n     if (difference != null) {\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n   private Node createScript(Node n) {\n     Node script = new Node(Token.SCRIPT);\n+    script.setIsSyntheticBlock(true);\n     script.addChildToBack(n);\n     return script;\n   }", "timestamp": 1302304581, "metainfo": ""}