{"sha": "e016169529a2a62b43cd53a2345b2fee8a9f019c", "log": "Add folding of hook expressions with equivalent result expressions to reenable the test case I disabled in my last CL.  R=acleung DELTA=11  (7 added, 2 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4282   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n \n     TernaryValue condValue = NodeUtil.getImpureBooleanValue(cond);\n     if (condValue == TernaryValue.UNKNOWN) {\n-      return n;  // We can't remove branches otherwise!\n+      // If the result nodes are equivalent, then one of the nodes can be\n+      // removed and it doesn't matter which.\n+      if (!areNodesEqualForInlining(thenBody, elseBody)) {\n+        return n;  // We can't remove branches otherwise!\n+      }\n     }\n \n     // Transform \"(a = 2) ? x =2 : y\" into \"a=2,x=2\"\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n       \"  return a;\" +\n       \"}\";\n \n-    // TODO(johnlenz): re-enable this.\n-    // Once a \"x ? a : a\" => \"a\" optimization is added.\n-    // test(options, code, expected);\n+    test(options, code, expected);\n   }\n \n   public void testLateStatementFusion() {\n--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n     foldSame(\"var z=x?y():void 0\");\n     foldSame(\"(w?x:void 0).y=z\");\n     foldSame(\"(w?x:void 0).y+=z\");\n+\n+    fold(\"y = (x ? void 0 : void 0)\", \"y = void 0\");\n+    fold(\"y = (x ? f() : f())\", \"y = f()\");\n   }\n \n   public void testConstantConditionWithSideEffect1() {", "timestamp": 1330384473, "metainfo": ""}