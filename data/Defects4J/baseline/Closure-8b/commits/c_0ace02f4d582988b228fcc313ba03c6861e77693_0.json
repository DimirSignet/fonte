{"sha": "0ace02f4d582988b228fcc313ba03c6861e77693", "log": "Automated g4 rollback.  *** Reason for rollback ***  breaks everything  *** Original change description ***  Peephole collapsing property assignments into objects/array definitions.  R=mgoodman DELTA=380  (3 added, 348 deleted, 29 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1005   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       return new PeepholeOptimizationsPass(compiler,\n             new PeepholeSubstituteAlternateSyntax(true),\n             new PeepholeRemoveDeadCode(),\n-            new PeepholeFoldConstants(),\n-            new PeepholeCollectPropertyAssignments());\n-    }\n-  };\n-\n-  /** Same as peepholeOptimizations but aggressively merges code together */\n+            new PeepholeFoldConstants());\n+    }\n+  };\n+\n+  /** Same as peepholeOptimizations but aggreesively merges code together */\n   private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      VariableMap map = null;\n       return new CompilerPass() {\n         @Override public void process(Node externs, Node root) {\n           ReplaceStrings pass = new ReplaceStrings(\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n         // In the case of JsDoc trees, the first child is often not a string\n         // which causes exceptions to be thrown when calling toString or\n         // toStringTree.\n-        if (first == null || first.getType() != Token.NAME) {\n-          sb.append(\"<invalid>\");\n-        } else {\n+        if (first.getType() == Token.STRING) {\n           sb.append(first.getString());\n         }\n       } else if (this instanceof ScriptOrFnNode) {\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n \n   public void testProcessClosurePrimitives() {\n     test(\"var goog = {}; goog.provide('goog.dom');\",\n-         \"var goog = {dom:{}};\");\n+         \"var goog = {}; goog.dom = {};\");\n     args.add(\"--process_closure_primitives=false\");\n     testSame(\"var goog = {}; goog.provide('goog.dom');\");\n   }\n \n   public void testCssNameWiring() throws Exception {\n-    test(\"var goog = {}; goog.getCssName = function() {};\" +\n-         \"goog.setCssNameMapping = function() {};\" +\n-         \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n+    String prefix =\n+        \"var goog = {}; goog.getCssName = function() {};\" +\n+         \"goog.setCssNameMapping = function() {};\";\n+    test(prefix + \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n          \"var a = goog.getCssName('goog-button');\" +\n          \"var b = goog.getCssName('css-button');\" +\n          \"var c = goog.getCssName('goog-menu');\" +\n          \"var d = goog.getCssName('css-menu');\",\n-         \"var goog = { getCssName: function() {},\" +\n-         \"             setCssNameMapping: function() {} },\" +\n-         \"    a = 'a-b',\" +\n+         prefix +\n+         \"var a = 'a-b',\" +\n          \"    b = 'css-b',\" +\n          \"    c = 'a-menu',\" +\n          \"    d = 'css-menu';\");\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n \n   private void assertSameResultsOrUncollapsed(String exprA, String exprB) {\n     String resultA = process(exprA);\n-    String resultB = process(exprB);  // TODO: why is nothing done with this?\n+    String resultB = process(exprB);\n     if (resultA.equals(print(exprA))) {\n       foldSame(exprA);\n       foldSame(exprB);", "timestamp": 1300827548, "metainfo": ""}