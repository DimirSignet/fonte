{"sha": "c165df989529cc8eaf9b9100595b86b219a9c5de", "log": "Don't ambiguate static function properties when it is not safe.  R=moedinger DELTA=36  (36 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=197192   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n         r.getNativeType(JSTypeNative.NULL_TYPE),\n         r.getNativeType(JSTypeNative.VOID_TYPE),\n         r.getNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE),\n+        r.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n         r.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n         r.getNativeType(JSTypeNative.GLOBAL_THIS),\n         r.getNativeType(JSTypeNative.OBJECT_TYPE),\n--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n     test(js, output);\n   }\n \n+  public void testStaticWithFunctions() {\n+    String js = \"\"\n+      + \"/** @constructor */ var Foo = function() {};\\n\"\n+      + \"Foo.x = 0;\"\n+      + \"/** @param {!Function} x */ function f(x) { x.y = 1 }\"\n+      + \"f(Foo)\";\n+    String output = \"\"\n+      + \"/** @constructor */ var Foo = function() {};\\n\"\n+      + \"Foo.a = 0;\"\n+      + \"/** @param {!Function} x */ function f(x) { x.y = 1 }\"\n+      + \"f(Foo)\";\n+    test(js, output);\n+\n+    js = \"\"\n+      + \"/** @constructor */ var Foo = function() {};\\n\"\n+      + \"Foo.x = 0;\"\n+      + \"/** @param {!Function} x */ function f(x) { x.y = 1; x.x = 2;}\"\n+      + \"f(Foo)\";\n+    test(js, js);\n+\n+    js = \"\"\n+      + \"/** @constructor */ var Foo = function() {};\\n\"\n+      + \"Foo.x = 0;\"\n+      + \"/** @constructor */ var Bar = function() {};\\n\"\n+      + \"Bar.y = 0;\";\n+\n+    output = \"\"\n+      + \"/** @constructor */ var Foo = function() {};\\n\"\n+      + \"Foo.a = 0;\"\n+      + \"/** @constructor */ var Bar = function() {};\\n\"\n+      + \"Bar.a = 0;\";\n+    test(js, output);\n+\n+  }\n+\n   public void testTypeMismatch() {\n     testSame(EXTERNS, \"/** @constructor */var Foo = function(){};\\n\"\n              + \"/** @constructor */var Bar = function(){};\\n\"", "timestamp": 1282933152, "metainfo": ""}