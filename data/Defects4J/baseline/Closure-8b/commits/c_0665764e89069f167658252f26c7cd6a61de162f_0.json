{"sha": "0665764e89069f167658252f26c7cd6a61de162f", "log": "Tests for strict mode parsing or getter and setters. Fixes issue 598  R=acleung DELTA=62  (56 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3788   ", "commit": "\n--- a/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/Parser.java\n+++ b/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/Parser.java\n         }\n     }\n \n+    private static final int PROP_ENTRY = 1;\n+    private static final int GET_ENTRY  = 2;\n+    private static final int SET_ENTRY  = 4;\n+\n     private ObjectLiteral objectLiteral()\n         throws IOException\n     {\n         int pos = ts.tokenBeg, lineno = ts.lineno;\n         int afterComma = -1;\n         List<ObjectProperty> elems = new ArrayList<ObjectProperty>();\n-        Set<String> propertyNames = new HashSet<String>();\n+        Set<String> getterNames = null;\n+        Set<String> setterNames = null;\n+        if (this.inUseStrictDirective) {\n+          getterNames = new HashSet<String>();\n+          setterNames = new HashSet<String>();\n+        }\n         Comment objJsdocNode = getAndResetJsDoc();\n \n       commaLoop:\n         for (;;) {\n             String propertyName = null;\n+            int entryKind = PROP_ENTRY;\n             int tt = peekToken();\n             Comment jsdocNode = getAndResetJsDoc();\n             switch(tt) {\n                           || \"set\".equals(propertyName))))\n                   {\n                       boolean isGet = \"get\".equals(propertyName);\n+                      entryKind = isGet ? GET_ENTRY : SET_ENTRY;\n                       AstNode pname = objliteralProperty();\n                       if (pname == null) {\n                         propertyName = null;\n                   break;\n             }\n \n-            if (this.inUseStrictDirective) {\n-                if (propertyNames.contains(propertyName)) {\n+            if (this.inUseStrictDirective && propertyName != null) {\n+              switch (entryKind) {\n+                case PROP_ENTRY:\n+                  if (getterNames.contains(propertyName)\n+                      || setterNames.contains(propertyName)) {\n                     addError(\"msg.dup.obj.lit.prop.strict\", propertyName);\n-                }\n-                propertyNames.add(propertyName);\n+                  }\n+                  getterNames.add(propertyName);\n+                  setterNames.add(propertyName);\n+                  break;\n+                case GET_ENTRY:\n+                  if (getterNames.contains(propertyName)) {\n+                    addError(\"msg.dup.obj.lit.prop.strict\", propertyName);\n+                  }\n+                  getterNames.add(propertyName);\n+                  break;\n+                case SET_ENTRY:\n+                  if (setterNames.contains(propertyName)) {\n+                    addError(\"msg.dup.obj.lit.prop.strict\", propertyName);\n+                  }\n+                  setterNames.add(propertyName);\n+                  break;\n+              }\n             }\n \n             // Eat any dangling jsdoc in the property.\n--- a/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);\n     testSame(\"var x = { set a(p) {}, a: 1 };\",\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);\n+\n+    testSame(\n+        \"'use strict';\\n\" +\n+        \"function App() {}\\n\" +\n+        \"App.prototype = {\\n\" +\n+        \"  get appData() { return this.appData_; },\\n\" +\n+        \"  set appData(data) { this.appData_ = data; }\\n\" +\n+        \"};\");\n   }\n }", "timestamp": 1321911371, "metainfo": ""}