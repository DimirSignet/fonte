{"sha": "93927a12fc3ef5f9776bdf70e14fcc6bfe4a6251", "log": "Fix a bug where ToNumber(-Infinity) would replace itself with -Infinity, and go into an infinite loop  R=acleung DELTA=12  (9 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4213   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n     double value = result;\n \n     Node replacement = NodeUtil.numberNode(value, n);\n+    if (replacement.isEquivalentTo(n)) {\n+      return;\n+    }\n \n     n.getParent().replaceChild(n, replacement);\n     reportCodeChange();\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n           \"'abc'\",\n           \"'def'\",\n           \"NaN\",\n-          \"Infinity\"\n+          \"Infinity\",\n           // TODO(nicksantos): Add more literals\n-          // \"-Infinity\",\n+          \"-Infinity\"\n           //\"({})\",\n           // \"[]\"\n           //\"[0]\",\n             assertSameResults(join(a, op, b), \"false\");\n             assertSameResults(join(a, inverse, b), \"false\");\n           } else if (a.equals(b) && equalitors.contains(op)) {\n-            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n+            if (a.equals(\"NaN\") ||\n+                a.equals(\"Infinity\") ||\n+                a.equals(\"-Infinity\")) {\n               foldSame(join(a, op, b));\n               foldSame(join(a, inverse, b));\n             } else {\n     }\n   }\n \n+  public void testConvertToNumberNegativeInf() {\n+    foldSame(\"var x = 3 * (r ? Infinity : -Infinity);\");\n+  }\n+\n   private String join(String operandA, String op, String operandB) {\n     return operandA + \" \" + op + \" \" + operandB;\n   }", "timestamp": 1329158837, "metainfo": ""}