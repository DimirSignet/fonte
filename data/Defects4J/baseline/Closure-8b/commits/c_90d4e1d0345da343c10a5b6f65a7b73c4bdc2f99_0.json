{"sha": "90d4e1d0345da343c10a5b6f65a7b73c4bdc2f99", "log": "Add a InlineProperties integration test.  R=nicksantos DELTA=17  (17 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4861   ", "commit": "\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     assertEquals(1, compiler.getWarnings().length);\n   }\n \n+  public void testInlineProperties() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel level = CompilationLevel.ADVANCED_OPTIMIZATIONS;\n+    level.setOptionsForCompilationLevel(options);\n+    level.setTypeBasedOptimizationOptions(options);\n+\n+    String code = \"\" +\n+        \"var ns = {};\\n\" +\n+        \"/** @constructor */\\n\" +\n+        \"ns.C = function () {this.someProperty = 1}\\n\" +\n+        \"alert(new ns.C().someProperty + new ns.C().someProperty);\\n\";\n+    assertTrue(options.inlineProperties);\n+    assertTrue(options.collapseProperties);\n+    // CollapseProperties used to prevent inlining this property.\n+    test(options, code, \"alert(2);\");\n+  }\n+\n   /** Creates a CompilerOptions object with google coding conventions. */\n   @Override\n   protected CompilerOptions createCompilerOptions() {", "timestamp": 1337882841, "metainfo": ""}