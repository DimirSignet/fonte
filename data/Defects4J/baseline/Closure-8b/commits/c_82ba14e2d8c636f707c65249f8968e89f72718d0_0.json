{"sha": "82ba14e2d8c636f707c65249f8968e89f72718d0", "log": "A little more normalization: remove VAR declarations from FOR-IN looops.  R=nicksantos DELTA=84  (71 added, 1 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=207783   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Denormalize.java\n+++ b/src/com/google/javascript/jscomp/Denormalize.java\n \n     // Is the next statement a valid FOR?\n     Node nextSibling = n.getNext();\n-    if (nextSibling != null\n-        && nextSibling.getType() == Token.FOR\n-        && !NodeUtil.isForIn(nextSibling)\n+    if (nextSibling == null) {\n+      return;\n+    } else if (NodeUtil.isForIn(nextSibling)) {\n+      Node forNode = nextSibling;\n+      Node forVar = forNode.getFirstChild();\n+      if (NodeUtil.isName(forVar)\n+          && NodeUtil.isVar(n) && n.hasOneChild()) {\n+        Node name = n.getFirstChild();\n+        if (!name.hasChildren()\n+            && forVar.getString().equals(name.getString())) {\n+          // Ok, the names match, and the var declaration does not have an\n+          // initializer. Move it into the loop.\n+          parent.removeChild(n);\n+          forNode.replaceChild(forVar, n);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else if (nextSibling.getType() == Token.FOR\n         && nextSibling.getFirstChild().getType() == Token.EMPTY) {\n \n       // Does the current node contain an in operator?  If so, embedding\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n             extractForInitializer(c, insertBefore, insertBeforeParent);\n             break;\n           case Token.FOR:\n-            if (!NodeUtil.isForIn(c)\n-                && c.getFirstChild().getType() != Token.EMPTY) {\n+            if (NodeUtil.isForIn(c)) {\n+              Node first = c.getFirstChild();\n+              if (first.getType() == Token.VAR) {\n+                // Transform:\n+                //    for (var a in b) {}\n+                // to:\n+                //    var a; for (a in b) {};\n+                Node newStatement = first.cloneTree();\n+                Node name = first.removeFirstChild();\n+                first.getParent().replaceChild(first, name);\n+                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n+                reportCodeChange(\"FOR-IN var declaration\");\n+              }\n+            } else if (c.getFirstChild().getType() != Token.EMPTY) {\n               Node init = c.getFirstChild();\n               Node empty = new Node(Token.EMPTY);\n               empty.copyInformationFrom(c);\n--- a/test/com/google/javascript/jscomp/DenormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/DenormalizeTest.java\n   }\n \n   public void testFor() {\n-    // Verify assignments are extracted from the FOR init node.\n+    // Verify assignments are moved into the FOR init node.\n     test(\"a = 0; for(; a < 2 ; a++) foo()\",\n          \"for(a = 0; a < 2 ; a++) foo();\");\n-    // Verify vars are extracted from the FOR init node.\n+    // Verify vars are are moved into the FOR init node.\n     test(\"var a = 0; for(; c < b ; c++) foo()\",\n          \"for(var a = 0; c < b ; c++) foo()\");\n \n-    // We don't handle these.\n+    // We don't handle labels yet.\n     testSame(\"var a = 0; a:for(; c < b ; c++) foo()\");\n-    // Verify vars are extracted from the FOR init before the labels node.\n     testSame(\"var a = 0; a:b:for(; c < b ; c++) foo()\");\n \n     // Verify FOR inside IFs.\n     test(\"function(){ var a; for(; a < 2 ; a++) foo() }\",\n          \"function(){ for(var a; a < 2 ; a++) foo() }\");\n     testSame(\"function(){ return; for(; a < 2 ; a++) foo() }\");\n+  }\n+\n+  public void testForIn() {\n+    test(\"var a; for(a in b) foo()\", \"for (var a in b) foo()\");\n+    testSame(\"a = 0; for(a in b) foo()\");\n+    testSame(\"var a = 0; for(a in b) foo()\");\n+\n+    // We don't handle labels yet.\n+    testSame(\"var a; a:for(a in b) foo()\");\n+    testSame(\"var a; a:b:for(a in b) foo()\");\n+\n+    // Verify FOR inside IFs.\n+    test(\"if(x){var a; for(a in b) foo()}\",\n+         \"if(x){for(var a in b) foo()}\");\n+\n+    // Any other expression.\n+    testSame(\"init(); for(a in b) foo()\");\n+\n+    // Other statements are left as is.\n+    testSame(\"function(){ return; for(a in b) foo() }\");\n   }\n \n   public void testInOperatorNotInsideFor() {\n--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n     helperInlineReferenceToFunction(\n         \"function foo(a){for(var b in c)return a;}; \" +\n         \"for(;1;){ foo(1); }\",\n-        \"function foo(a){for(var b in c)return a;}; \" +\n+        \"function foo(a){var b;for(b in c)return a;}; \" +\n         \"for(;1;){ {JSCompiler_inline_label_foo_4:{\" +\n-            \"for(var b$$inline_3 in c){\" +\n+            \"var b$$inline_3=void 0;for(b$$inline_3 in c){\" +\n               \"1;break JSCompiler_inline_label_foo_4\" +\n             \"}}}}\",\n         \"foo\", INLINE_BLOCK);\n--- a/test/com/google/javascript/jscomp/NormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/NormalizeTest.java\n     // Any other expression.\n     test(\"for(init(); a < 2 ; a++) foo();\",\n          \"init(); for(; a < 2 ; a++) foo()\");\n+  }\n+\n+  public void testForIn() {\n+    // Verify nothing happens with simple for-in\n+    testSame(\"for(a in b) foo();\");\n+\n+    // Verify vars are extracted from the FOR-IN node.\n+    test(\"for(var a in b) foo()\",\n+         \"var a; for(a in b) foo()\");\n+\n+    // Verify vars are extracted from the FOR init before the label node.\n+    test(\"a:for(var a in b) foo()\",\n+         \"var a; a:for(a in b) foo()\");\n+    // Verify vars are extracted from the FOR init before the labels node.\n+    test(\"a:b:for(var a in b) foo()\",\n+         \"var a; a:b:for(a in b) foo()\");\n+\n+    // Verify block are properly introduced for ifs.\n+    test(\"if (x) for(var a in b) foo()\",\n+         \"if (x) { var a; for(a in b) foo() }\");\n   }\n \n   public void testWhile() {\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n   }\n \n   public void testUnusedAssign7() {\n+    // This loop is normalized to \"var i;for(i in...\"\n     test(\"var a = 3; for (var i in {}) { i = a; }\",\n-         \"for (var i in {}) {}\");\n+         // TODO(johnlenz): \"i = a\" should be removed here.\n+         \"var a = 3; var i; for (i in {}) {i = a;}\");\n   }\n \n   public void testUnusedAssign8() {\n+    // This loop is normalized to \"var i;for(i in...\"\n     test(\"var a = 3; for (var i in {}) { i = a; } alert(a);\",\n-         \"var a = 3; for (var i in {}) {} alert(a);\");\n+         // TODO(johnlenz): \"i = a\" should be removed here.\n+         \"var a = 3; var i; for (i in {}) {i = a} alert(a);\");\n   }\n \n   public void testUnusedPropAssign1() {", "timestamp": 1283989705, "metainfo": ""}