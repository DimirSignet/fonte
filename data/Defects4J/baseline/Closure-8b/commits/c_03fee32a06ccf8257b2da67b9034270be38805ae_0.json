{"sha": "03fee32a06ccf8257b2da67b9034270be38805ae", "log": "Fix more regressions caused by TRUE/FALSE denormalization. Fixes issue 413  R=acleung DELTA=55  (46 added, 1 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1308   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n           && right.getString().equals(\"undefined\"))\n           || (Token.VOID == right.getType()\n               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n-\n-    switch (left.getType()) {\n+    int lhType = getNormalizedNodeType(left);\n+    int rhType = getNormalizedNodeType(right);\n+    switch (lhType) {\n       case Token.VOID:\n         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n           return n;\n           result = compareToUndefined(left, op);\n           break;\n         }\n-        int rhType = right.getType();\n         if (rhType != Token.TRUE &&\n             rhType != Token.FALSE &&\n             rhType != Token.NULL) {\n         switch (op) {\n           case Token.SHEQ:\n           case Token.EQ:\n-            result = left.getType() == right.getType();\n+            result = lhType == rhType;\n             break;\n \n           case Token.SHNE:\n           case Token.NE:\n-            result = left.getType() != right.getType();\n+            result = lhType != rhType;\n             break;\n \n           case Token.GE:\n     reportCodeChange();\n \n     return newNode;\n+  }\n+\n+  /**\n+   * @return Translate NOT expressions into TRUE or FALSE when possible.\n+   */\n+  private int getNormalizedNodeType(Node n) {\n+    int type = n.getType();\n+    if (type == Token.NOT) {\n+      TernaryValue value = NodeUtil.getPureBooleanValue(n);\n+      switch (value) {\n+        case TRUE:\n+          return Token.TRUE;\n+        case FALSE:\n+          return Token.FALSE;\n+      }\n+    }\n+    return type;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     fold(\"x = -1 >= 9\", \"x = false\");\n \n     fold(\"x = true == true\", \"x = true\");\n-    fold(\"x = true == true\", \"x = true\");\n+    fold(\"x = false == false\", \"x = true\");\n     fold(\"x = false == null\", \"x = false\");\n     fold(\"x = false == true\", \"x = false\");\n     fold(\"x = true == null\", \"x = false\");\n     fold(\"x = y === y\", \"x = y===y\");\n \n     fold(\"x = true === true\", \"x = true\");\n-    fold(\"x = true === true\", \"x = true\");\n+    fold(\"x = false === false\", \"x = true\");\n     fold(\"x = false === null\", \"x = false\");\n     fold(\"x = false === true\", \"x = false\");\n     fold(\"x = true === null\", \"x = false\");\n     fold(\"false === null\", \"false\");\n     fold(\"false === true\", \"false\");\n     fold(\"true === null\", \"false\");\n+  }\n+\n+  public void testFoldComparison3() {\n+    fold(\"x = !1 == !0\", \"x = false\");\n+\n+    fold(\"x = !0 == !0\", \"x = true\");\n+    fold(\"x = !1 == !1\", \"x = true\");\n+    fold(\"x = !1 == null\", \"x = false\");\n+    fold(\"x = !1 == !0\", \"x = false\");\n+    fold(\"x = !0 == null\", \"x = false\");\n+\n+    fold(\"!0 == !0\", \"true\");\n+    fold(\"!1 == null\", \"false\");\n+    fold(\"!1 == !0\", \"false\");\n+    fold(\"!0 == null\", \"false\");\n+\n+    fold(\"x = !0 === !0\", \"x = true\");\n+    fold(\"x = !1 === !1\", \"x = true\");\n+    fold(\"x = !1 === null\", \"x = false\");\n+    fold(\"x = !1 === !0\", \"x = false\");\n+    fold(\"x = !0 === null\", \"x = false\");\n+\n+    fold(\"!0 === !0\", \"true\");\n+    fold(\"!1 === null\", \"false\");\n+    fold(\"!1 === !0\", \"false\");\n+    fold(\"!0 === null\", \"false\");\n   }\n \n   public void testFoldGetElem() {\n           \"void 0\",\n           \"true\",\n           \"false\",\n+          \"!0\",\n+          \"!1\",\n           \"0\",\n           \"1\",\n           \"''\",\n           \"NaN\",\n           \"Infinity\"\n           // TODO(nicksantos): Add more literals\n-          //-Infinity\n+          // \"-Infinity\",\n           //\"({})\",\n-          //\"[]\",\n+          // \"[]\"\n           //\"[0]\",\n           //\"Object\",\n           //\"(function() {})\"", "timestamp": 1302290857, "metainfo": ""}