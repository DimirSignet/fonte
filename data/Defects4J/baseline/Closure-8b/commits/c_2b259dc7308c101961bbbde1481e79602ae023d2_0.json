{"sha": "2b259dc7308c101961bbbde1481e79602ae023d2", "log": "Don't warn about duplicate messages for external message ids.  R=gboyer DELTA=37  (30 added, 4 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=59002   ", "commit": "\n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n \n     boolean isUnnamedMsg = isUnnamedMessageName(messageKey);\n \n-    if (!isUnnamedMsg && needToCheckDuplications) {\n-      checkIfMessageDuplicated(traversal.getSourceName(), messageKey, msgNode);\n-    }\n-\n     Builder builder = new Builder(\n         isUnnamedMsg ? null : messageKey);\n     builder.setSourceName(traversal.getSourceName());\n \n     JsMessage extractedMessage = builder.build(idGenerator);\n \n+    // If asked to check named internal messages.\n+    if (needToCheckDuplications \n+        && !isUnnamedMsg \n+        && !extractedMessage.isExternal()) {\n+      checkIfMessageDuplicated(traversal.getSourceName(), messageKey, msgNode);\n+    }    \n+    \n     if (extractedMessage.isEmpty()) {\n       // value of the message is an empty string. Translators do not like it.\n       compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_TEXT,\n--- a/test/com/google/javascript/jscomp/JsMessageVisitorTest.java\n+++ b/test/com/google/javascript/jscomp/JsMessageVisitorTest.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import static com.google.javascript.jscomp.JsMessage.Style;\n import static com.google.javascript.jscomp.JsMessage.Style.CLOSURE;\n         toLowerCamelCaseWithNumericSuffixes(\"START_SPAN_1_23\"));\n   }\n \n+  public void testDuplicateMessageError() {\n+    extractMessages(\n+        \"(function () {/** @desc Hello */ var MSG_HELLO = goog.getMsg('a')})\" +\n+        \"(function () {/** @desc Hello2 */ var MSG_HELLO = goog.getMsg('a')})\");\n+\n+    assertEquals(0, compiler.getWarningCount());\n+\n+    String errors = Joiner.on(\"\\n\").join(compiler.getErrors());\n+    assertEquals(\"There should be one error. \" + errors,\n+        1, compiler.getErrorCount());\n+    assertEquals(errors, JsMessageVisitor.MESSAGE_DUPLICATE_KEY,\n+        compiler.getErrors()[0].getType());\n+  }\n+\n+  public void testNoDuplicateErrorOnExternMessage() {\n+    extractMessagesSafely(\n+        \"(function () {/** @desc Hello */ \" +\n+        \"var MSG_EXTERNAL_2 = goog.getMsg('a')})\" +\n+        \"(function () {/** @desc Hello2 */ \" +\n+        \"var MSG_EXTERNAL_2 = goog.getMsg('a')})\");\n+  }  \n+  \n   private void extractMessagesSafely(String input) {\n     extractMessages(input);\n     JSError[] errors = compiler.getErrors();\n-    if (errors.length > 0) {\n-      fail(errors[0].description);\n-    }\n+    assertEquals(\n+        \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n+        0, compiler.getErrorCount());\n   }\n \n   private void extractMessages(String input) {", "timestamp": 1279733792, "metainfo": ""}