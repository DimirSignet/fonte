{"sha": "6736f3bb99c899912af8b44a07f0ffa4f0c93ad3", "log": "Added a way to get the reverse mapping info out of source maps. Added an interface so you can know when source maps are reversable, and two new methods on reversable source maps.  One methods allows you to introspect on the sources in the source maps, and the other, given a source file and line + column information, returns the reverse (source --> target) source mapping, if there is one.    ", "commit": "\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n \n /**\n  * Class for parsing version 3 of the SourceMap format, as produced by the\n  * http://code.google.com/p/closure-compiler/wiki/SourceMaps\n  * @author johnlenz@google.com (John Lenz)\n  */\n-public class SourceMapConsumerV3 implements SourceMapConsumer {\n+public class SourceMapConsumerV3 implements SourceMapConsumer, SourceMappingReversable {\n   static final int UNMAPPED = -1;\n \n   private String[] sources;\n     int index = search(entries, column, 0, entries.size() - 1);\n     Preconditions.checkState(index >= 0, \"unexpected:\" + index);\n     return getOriginalMappingForEntry(entries.get(index));\n+  }\n+\n+  @Override\n+  public Collection<String> getOriginalSources() {\n+    return Arrays.asList(sources);\n+  }\n+\n+  @Override\n+  /**\n+   * TODO(devoncarew): this implementation is a prototype. It does an O(n) search of the lines list,\n+   * instead of reversing the source map and doing O(1) lookups. It also does not currently make use\n+   * of the column parameter.\n+   */\n+  public Collection<OriginalMapping> getReverseMapping(String originalFile, int line, int column) {\n+    int sourceFileId = Arrays.binarySearch(sources, originalFile);\n+\n+    if (sourceFileId < 0) {\n+      return Collections.emptyList();\n+    }\n+\n+    for (ArrayList<Entry> entries : lines) {\n+      if (entries != null) {\n+        for (Entry entry : entries) {\n+          if (entry.getSourceFileId() == sourceFileId) {\n+            if (entry.getSourceLine() == line) {\n+              Builder builder = OriginalMapping.newBuilder()\n+                .setOriginalFile(sources[entry.getSourceFileId()])\n+                .setLineNumber(entry.getSourceLine())\n+                .setColumnPosition(entry.getSourceColumn());\n+\n+              OriginalMapping mapping = builder.build();\n+\n+              return Collections.singletonList(mapping);\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    return Collections.emptyList();\n   }\n \n   private String[] getJavaStringArray(JSONArray array) throws JSONException {\n--- /dev/null\n+++ b/src/com/google/debugging/sourcemap/SourceMappingReversable.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.debugging.sourcemap;\n+\n+import com.google.debugging.sourcemap.proto.Mapping.OriginalMapping;\n+\n+import java.util.Collection;\n+\n+/**\n+ * A SourceMappingReversable is a SourceMapping that can provide the reverse\n+ * (source --> target) source mapping.\n+ */\n+public interface SourceMappingReversable extends SourceMapping {\n+\n+  /**\n+   * @return the collection of original sources in this source mapping\n+   */\n+  public Collection<String> getOriginalSources();\n+\n+  /**\n+   * Given a source file, line, and column, return the reverse mapping (source --> target).\n+   * A collection is returned as in some cases (like a function being inlined), one source line\n+   * may map to more then one target location. An empty collection is returned if there were\n+   * no matches.\n+   * @param originalFile the source file\n+   * @param line the source line\n+   * @param column the source column\n+   * @return the reverse mapping (source --> target)\n+   */\n+  public Collection<OriginalMapping> getReverseMapping(String originalFile, int line, int column);\n+\n+}", "timestamp": 1311356669, "metainfo": ""}