{"sha": "9947ca82dc07df299a5e31caf508002844c8cf59", "log": "Add an option to JsFileParser to include the root 'goog' fixes issue 704  R=agrieve DELTA=100  (64 added, 8 deleted, 28 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4514   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n         // this to generate deps files. (We're only using it for\n         // symbol dependencies.)\n         DependencyInfo info =\n-            (new JsFileParser(compiler.getErrorManager())).parseFile(\n-                getName(), getName(), getCode());\n+            (new JsFileParser(compiler.getErrorManager()))\n+            .setIncludeGoogBase(true)\n+            .parseFile(getName(), getName(), getCode());\n \n         provides.addAll(info.getProvides());\n         requires.addAll(info.getRequires());\n--- a/src/com/google/javascript/jscomp/deps/JsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java\n   private static final Pattern GOOG_PROVIDE_REQUIRE_PATTERN = Pattern.compile(\n       \"(?:^|;)\\\\s*goog\\\\.(provide|require)\\\\s*\\\\((.*?)\\\\)\");\n \n+  /** The first non-comment line of base.js */\n+  private static final String BASE_JS_START = \"var COMPILED = false;\";\n+\n   /** Matchers used in the parsing. */\n   private Matcher googMatcher = GOOG_PROVIDE_REQUIRE_PATTERN.matcher(\"\");\n \n   /** The info for the file we are currently parsing. */\n   private List<String> provides;\n   private List<String> requires;\n+  private boolean fileHasProvidesOrRequires;\n+\n+  /** Whether to provide/require the root namespace. */\n+  private boolean includeGoogBase = false;\n \n   /**\n    * Constructor\n    */\n   public JsFileParser(ErrorManager errorManager) {\n     super(errorManager);\n+  }\n+\n+  /**\n+   * Sets whether we should create implicit provides and requires of the\n+   * root namespace.\n+   *\n+   * When generating deps files, you do not want this behavior. Deps files\n+   * need base.js to run anyway, so they don't need information about it.\n+   *\n+   * When generating abstract build graphs, you probably do want this behavior.\n+   * It will create an implicit dependency of all files with provides/requires\n+   * on base.js.\n+   *\n+   * @return this for easy chaining.\n+   */\n+  public JsFileParser setIncludeGoogBase(boolean include) {\n+    includeGoogBase = include;\n+    return this;\n   }\n \n   /**\n       String closureRelativePath, Reader fileContents) {\n     provides = Lists.newArrayList();\n     requires = Lists.newArrayList();\n+    fileHasProvidesOrRequires = false;\n \n     logger.fine(\"Parsing Source: \" + filePath);\n     doParse(filePath, fileContents);\n    */\n   @Override\n   protected boolean parseLine(String line) throws ParseException {\n-    boolean hasProvidesOrRequires = false;\n+    boolean lineHasProvidesOrRequires = false;\n \n     // Quick sanity check that will catch most cases. This is a performance\n     // win for people with a lot of JS.\n       // Iterate over the provides/requires.\n       googMatcher.reset(line);\n       while (googMatcher.find()) {\n-        hasProvidesOrRequires = true;\n+        lineHasProvidesOrRequires = true;\n+\n+        if (includeGoogBase && !fileHasProvidesOrRequires) {\n+          fileHasProvidesOrRequires = true;\n+          requires.add(\"goog\");\n+        }\n \n         // See if it's a require or provide.\n         boolean isRequire = googMatcher.group(1).charAt(0) == 'r';\n           provides.add(arg);\n         }\n       }\n+    } else if (includeGoogBase && line.startsWith(BASE_JS_START)) {\n+      provides.add(\"goog\");\n     }\n \n-    return !shortcutMode || hasProvidesOrRequires ||\n+    return !shortcutMode || lineHasProvidesOrRequires ||\n         CharMatcher.WHITESPACE.matchesAllOf(line);\n   }\n }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n           \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n           \"goog.provide('hops'); var hopsProvided = 1;\",\n           \"goog.provide('scotch'); var scotchProvided = 1;\",\n-          \"var includeFileWithoutProvides = 1;\"\n+          \"var includeFileWithoutProvides = 1;\",\n+          \"/** This is base.js */\\nvar COMPILED = false;\",\n          },\n          new String[] {\n+           \"var COMPILED = !1;\",\n            \"var hops = {}, hopsProvided = 1;\",\n            \"var beer = {}, beerProvided = 1;\"\n          });\n--- a/test/com/google/javascript/jscomp/deps/JsFileParserTest.java\n+++ b/test/com/google/javascript/jscomp/deps/JsFileParserTest.java\n    *  -Correct recording of what was parsed.\n    */\n   public void testParseFile() {\n-    final String CONTENTS = \"/*\"\n+    String contents = \"/*\"\n       + \"goog.provide('no1');*//*\\n\"\n       + \"goog.provide('no2');\\n\"\n       + \"*/goog.provide('yes1');\\n\"\n       + \"goog.require(\\\"bar.data.SuperstarAddStarThreadActionRequestDelegate\\\"); \"\n       + \"//no new line at eof\";\n \n-    DependencyInfo EXPECTED = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n         ImmutableList.of(\"yes1\", \"yes2\"),\n         ImmutableList.of(\"yes3\", \"bar.data.SuperstarAddStarThreadActionRequestDelegate\"));\n \n-    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, CONTENTS);\n+    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, contents);\n \n-    assertEquals(EXPECTED, result);\n-    assertEquals(0, errorManager.getErrorCount());\n-    assertEquals(0, errorManager.getWarningCount());\n+    assertDeps(expected, result);\n   }\n \n   public void testMultiplePerLine() {\n-    final String CONTENTS = \"goog.provide('yes1');goog.provide('yes2');/*\"\n+    String contents = \"goog.provide('yes1');goog.provide('yes2');/*\"\n         + \"goog.provide('no1');*/goog.provide('yes3');//goog.provide('no2');\";\n \n-    DependencyInfo EXPECTED = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n         ImmutableList.of(\"yes1\", \"yes2\", \"yes3\"), Collections.<String>emptyList());\n \n-    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, CONTENTS);\n+    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, contents);\n \n-    assertEquals(EXPECTED, result);\n-    assertEquals(0, errorManager.getErrorCount());\n-    assertEquals(0, errorManager.getWarningCount());\n+    assertDeps(expected, result);\n   }\n \n   public void testShortcutMode1() {\n     // For efficiency reasons, we stop reading after the ctor.\n-    final String CONTENTS = \" // hi ! \\n /* this is a comment */ \"\n+    String contents = \" // hi ! \\n /* this is a comment */ \"\n         + \"goog.provide('yes1');\\n /* and another comment */ \\n\"\n         + \"goog.provide('yes2'); // include this\\n\"\n         + \"function foo() {}\\n\"\n         + \"goog.provide('no1');\";\n \n-    DependencyInfo EXPECTED = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n         ImmutableList.of(\"yes1\", \"yes2\"), Collections.<String>emptyList());\n-    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, CONTENTS);\n+    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, contents);\n \n-    assertEquals(EXPECTED, result);\n-    assertEquals(0, errorManager.getErrorCount());\n-    assertEquals(0, errorManager.getWarningCount());\n+    assertDeps(expected, result);\n   }\n \n   public void testShortcutMode2() {\n-    final String CONTENTS = \"/** goog.provide('no1'); \\n\" +\n+    String contents = \"/** goog.provide('no1'); \\n\" +\n         \" * goog.provide('no2');\\n */\\n\"\n         + \"goog.provide('yes1');\\n\";\n \n-    DependencyInfo EXPECTED = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n         ImmutableList.of(\"yes1\"), Collections.<String>emptyList());\n-    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, CONTENTS);\n+    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, contents);\n \n-    assertEquals(EXPECTED, result);\n-    assertEquals(0, errorManager.getErrorCount());\n-    assertEquals(0, errorManager.getWarningCount());\n+    assertDeps(expected, result);\n   }\n \n   public void testShortcutMode3() {\n-    final String CONTENTS = \"/**\\n\" +\n+    String contents = \"/**\\n\" +\n         \" * goog.provide('no1');\\n */\\n\"\n         + \"goog.provide('yes1');\\n\";\n \n-    DependencyInfo EXPECTED = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n         ImmutableList.of(\"yes1\"), Collections.<String>emptyList());\n-    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, CONTENTS);\n+    DependencyInfo result = parser.parseFile(SRC_PATH, CLOSURE_PATH, contents);\n \n-    assertEquals(EXPECTED, result);\n+    assertDeps(expected, result);\n+  }\n+\n+  public void testIncludeGoog1() {\n+    String contents = \"/**\\n\" +\n+        \" * the first constant in base.js\\n\" +\n+        \" */\\n\" +\n+        \"var COMPILED = false;\\n\";\n+\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+        ImmutableList.of(\"goog\"), Collections.<String>emptyList());\n+    DependencyInfo result = parser.setIncludeGoogBase(true).parseFile(\n+        SRC_PATH, CLOSURE_PATH, contents);\n+    assertDeps(expected, result);\n+  }\n+\n+  public void testIncludeGoog2() {\n+    String contents = \"goog.require('bar');\";\n+\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+        ImmutableList.<String>of(), ImmutableList.of(\"goog\", \"bar\"));\n+    DependencyInfo result = parser.setIncludeGoogBase(true).parseFile(\n+        SRC_PATH, CLOSURE_PATH, contents);\n+    assertDeps(expected, result);\n+  }\n+\n+  /** Asserts the deps match without errors */\n+  private void assertDeps(DependencyInfo expected, DependencyInfo actual) {\n+    assertEquals(expected, actual);\n     assertEquals(0, errorManager.getErrorCount());\n     assertEquals(0, errorManager.getWarningCount());\n   }", "timestamp": 1334177618, "metainfo": ""}