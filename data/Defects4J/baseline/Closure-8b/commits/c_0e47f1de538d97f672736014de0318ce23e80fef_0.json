{"sha": "0e47f1de538d97f672736014de0318ce23e80fef", "log": "Introduces ReplaceMessagesTest to the year 2012.  R=nicksantos DELTA=143  (42 added, 32 deleted, 69 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4605   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ReplaceMessages.java\n+++ b/src/com/google/javascript/jscomp/ReplaceMessages.java\n     }\n \n     if (newValue != msgNode) {\n+      newValue.copyInformationFromForTree(msgNode);\n       definition.getMessageParentNode().replaceChild(msgNode, newValue);\n       compiler.reportCodeChange();\n     }\n         return origValueNode;\n       case Token.STRING:\n         // The message is a simple string. Modify the string node.\n-        origValueNode.setString(message.toString());\n+        String newString = message.toString();\n+        if (!origValueNode.getString().equals(newString)) {\n+          origValueNode.setString(newString);\n+          compiler.reportCodeChange();\n+        }\n         return origValueNode;\n       case Token.ADD:\n         // The message is a simple string. Create a string node.\n         : IR.string(\"\");\n     Node newBlockNode = IR.block(IR.returnNode(valueNode));\n \n-    functionNode.replaceChild(oldBlockNode, newBlockNode);\n+    // TODO(user): checkTreeEqual is overkill. I am in process of rewriting\n+    // these functions.\n+    if (newBlockNode.checkTreeEquals(oldBlockNode) != null) {\n+      newBlockNode.copyInformationFromForTree(oldBlockNode);\n+      functionNode.replaceChild(oldBlockNode, newBlockNode);\n+      compiler.reportCodeChange();\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/ReplaceMessagesTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceMessagesTest.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.common.collect.Maps;\n import static com.google.javascript.jscomp.JsMessage.Style.RELAX;\n import static com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_TREE_MALFORMED;\n-import static com.google.javascript.jscomp.ReplaceMessages.BUNDLE_DOES_NOT_HAVE_THE_MESSAGE;\n-import com.google.javascript.rhino.Node;\n-\n-import junit.framework.TestCase;\n+\n+import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.JsMessage.Style;\n \n import java.util.Map;\n \n /**\n  * Test which checks that replacer works correctly.\n  *\n- * @author anatol@google.com (Anatol Pomazau)\n  */\n-public class ReplaceMessagesTest extends TestCase {\n+public class ReplaceMessagesTest extends CompilerTestCase {\n \n   private Map<String, JsMessage> messages;\n-  private Compiler compiler;\n+  private Style style = RELAX;\n   private boolean strictReplacement;\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    return new ReplaceMessages(compiler,\n+        new SimpleMessageBundle(), false, style, strictReplacement);\n+  }\n+\n+  @Override\n+  protected int getNumRepetitions() {\n+    // No longer valid on the second run.\n+    return 1;\n+  }\n \n   @Override\n   protected void setUp()  {\n     messages = Maps.newHashMap();\n     strictReplacement = false;\n+    style = RELAX;\n   }\n \n   public void testReplaceSimpleMessage() {\n         .appendStringPart(\"Hi\\nthere\")\n         .build());\n \n-    assertOutputEquals(\"var MSG_A = goog.getMsg('asdf');\",\n-        \"var MSG_A=\\\"Hi\\\\nthere\\\"\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_A = goog.getMsg('asdf');\",\n+         \"var MSG_A=\\\"Hi\\\\nthere\\\"\");\n   }\n \n   public void testNameReplacement()  {\n         .appendStringPart(\" ph\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_B = goog.getMsg('asdf {$measly}', {measly: x});\",\n-        \"var MSG_B=\\\"One \\\"+(x+\\\" ph\\\")\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_B=goog.getMsg('asdf {$measly}', {measly: x});\",\n+         \"var MSG_B=\\\"One \\\"+ (x +\\\" ph\\\" )\");\n   }\n \n   public void testGetPropReplacement()  {\n         .appendPlaceholderReference(\"amount\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_C = goog.getMsg('${$amount}', {amount: a.b.amount});\",\n-        \"var MSG_C=a.b.amount\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_C = goog.getMsg('${$amount}', {amount: a.b.amount});\",\n+         \"var MSG_C=a.b.amount\");\n   }\n \n   public void testFunctionCallReplacement()  {\n         .appendPlaceholderReference(\"amount\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_D = goog.getMsg('${$amount}', {amount: getAmt()});\",\n-        \"var MSG_D=getAmt()\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_D = goog.getMsg('${$amount}', {amount: getAmt()});\",\n+         \"var MSG_D=getAmt()\");\n   }\n \n   public void testMethodCallReplacement()  {\n         .appendPlaceholderReference(\"amount\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_E = goog.getMsg('${$amount}', {amount: obj.getAmt()});\",\n-        \"var MSG_E=obj.getAmt()\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_E = goog.getMsg('${$amount}', {amount: obj.getAmt()});\",\n+         \"var MSG_E=obj.getAmt()\");\n   }\n \n   public void testHookReplacement()  {\n         .appendStringPart(\".\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_F = goog.getMsg('${$amount}', {amount: (a ? b : c)});\",\n-        \"var MSG_F=\\\"#\\\"+((a?b:c)+\\\".\\\")\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_F = goog.getMsg('${$amount}', {amount: (a ? b : c)});\",\n+         \"var MSG_F=\\\"#\\\"+((a?b:c)+\\\".\\\")\");\n   }\n \n   public void testAddReplacement()  {\n         .appendPlaceholderReference(\"amount\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_G = goog.getMsg('${$amount}', {amount: x + ''});\",\n-        \"var MSG_G=x+\\\"\\\"\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_G = goog.getMsg('${$amount}', {amount: x + ''});\",\n+         \"var MSG_G=x+\\\"\\\"\");\n   }\n \n   public void testPlaceholderValueReferencedTwice()  {\n         .appendPlaceholderReference(\"jane\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_H = goog.getMsg('{$dick}{$jane}', {jane: x, dick: y});\",\n-        \"var MSG_H=y+(\\\", \\\"+(y+(\\\" and \\\"+x)))\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_H = goog.getMsg('{$dick}{$jane}', {jane: x, dick: y});\",\n+         \"var MSG_H=y+(\\\", \\\"+(y+(\\\" and \\\"+x)))\");\n   }\n \n   public void testPlaceholderNameInLowerCamelCase()  {\n         .appendPlaceholderReference(\"amtEarned\")\n         .build());\n \n-    assertOutputEquals(\n-        \"var MSG_I = goog.getMsg('${$amtEarned}', {amtEarned: x});\",\n-        \"var MSG_I=\\\"Sum: $\\\"+x\");\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_I = goog.getMsg('${$amtEarned}', {amtEarned: x});\",\n+         \"var MSG_I=\\\"Sum: $\\\"+x\");\n   }\n \n   public void testQualifiedMessageName()  {\n         .appendStringPart(\" ph\")\n         .build());\n \n-    assertOutputEquals(\n-        \"a.b.c.MSG_J = goog.getMsg('asdf {$measly}', {measly: x});\",\n-        \"a.b.c.MSG_J=\\\"One \\\"+(x+\\\" ph\\\")\");\n+    test(\"/** @desc d */\\n\" +\n+         \"a.b.c.MSG_J = goog.getMsg('asdf {$measly}', {measly: x});\",\n+         \"a.b.c.MSG_J=\\\"One \\\"+(x+\\\" ph\\\")\");\n   }\n \n   public void testSimpleMessageReplacementMissing()  {\n-    assertOutputEquals(\"var MSG_E = 'd*6a0@z>t';\", \"var MSG_E=\\\"d*6a0@z>t\\\"\");\n+    style = Style.LEGACY;\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_E = 'd*6a0@z>t';\",\n+         \"var MSG_E = 'd*6a0@z>t'\");\n+  }\n+\n+\n+  public void testSimpleMessageReplacementMissingWithNewStyle()  {\n+    test(\"/** @desc d */\\n\" +\n+         \"var MSG_E = goog.getMsg('missing');\",\n+         \"var MSG_E = 'missing'\");\n   }\n \n   public void testStrictModeAndMessageReplacementAbsentInBundle()  {\n     strictReplacement = true;\n-    process(\"var MSG_E = 'Hello';\");\n-    assertEquals(1, compiler.getErrors().length);\n-    assertEquals(BUNDLE_DOES_NOT_HAVE_THE_MESSAGE,\n-        compiler.getErrors()[0].getType());\n+    test(\"var MSG_E = 'Hello';\", \"var MSG_E = 'Hello';\",\n+         ReplaceMessages.BUNDLE_DOES_NOT_HAVE_THE_MESSAGE);\n   }\n \n   public void testStrictModeAndMessageReplacementAbsentInNonEmptyBundle()  {\n         .build());\n \n     strictReplacement = true;\n-    process(\"var MSG_E = 'Hello';\");\n-    assertEquals(1, compiler.getErrors().length);\n-    assertEquals(BUNDLE_DOES_NOT_HAVE_THE_MESSAGE,\n-        compiler.getErrors()[0].getType());\n+    test(\"var MSG_E = 'Hello';\", \"var MSG_E = 'Hello';\",\n+        ReplaceMessages.BUNDLE_DOES_NOT_HAVE_THE_MESSAGE);\n+\n   }\n \n   public void testFunctionReplacementMissing()  {\n-    assertOutputEquals(\"var MSG_F = function() {return 'asdf'};\",\n-        \"var MSG_F=function(){return\\\"asdf\\\"}\");\n+    style = Style.LEGACY;\n+    test(\"var MSG_F = function() {return 'asdf'};\",\n+         \"var MSG_F = function() {return\\\"asdf\\\"}\");\n   }\n \n   public void testFunctionWithParamReplacementMissing()  {\n-    assertOutputEquals(\n+    style = Style.LEGACY;\n+    test(\n         \"var MSG_G = function(measly) {return 'asdf' + measly};\",\n         \"var MSG_G=function(measly){return\\\"asdf\\\"+measly}\");\n   }\n \n   public void testPlaceholderNameInLowerUnderscoreCase()  {\n-    process(\"var MSG_J = goog.getMsg('${$amt_earned}', {amt_earned: x});\");\n-\n-    assertEquals(1, compiler.getErrors().length);\n-    JSError error = compiler.getErrors()[0];\n-    assertEquals(MESSAGE_TREE_MALFORMED, error.getType());\n+    test(\n+        \"var MSG_J = goog.getMsg('${$amt_earned}', {amt_earned: x});\",\n+        \"var MSG_J = goog.getMsg('${$amt_earned}', {amt_earned: x});\",\n+        MESSAGE_TREE_MALFORMED);\n   }\n \n   public void testBadPlaceholderReferenceInReplacement()  {\n         .appendPlaceholderReference(\"amount\")\n         .build());\n \n-    process(\"var MSG_K = goog.getMsg('Hi {$jane}', {jane: x});\");\n-\n-    assertEquals(1, compiler.getErrors().length);\n-    JSError error = compiler.getErrors()[0];\n-    assertEquals(MESSAGE_TREE_MALFORMED, error.getType());\n+    test(\n+        \"var MSG_K = goog.getMsg('Hi {$jane}', {jane: x});\",\n+        \"var MSG_K = goog.getMsg('Hi {$jane}', {jane: x});\",\n+         MESSAGE_TREE_MALFORMED);\n   }\n \n \n     registerMessage(new JsMessage.Builder(\"MSG_A\")\n         .appendStringPart(\"Hi\\nthere\")\n         .build());\n-    assertOutputEquals(\"var MSG_A = 'd*6a0@z>t';\",\n-        \"var MSG_A=\\\"Hi\\\\nthere\\\"\");\n+    style = Style.LEGACY;\n+    test(\"var MSG_A = 'd*6a0@z>t';\",\n+         \"var MSG_A=\\\"Hi\\\\nthere\\\"\");\n   }\n \n   public void testLegacyStyleNoPlaceholdersFunctionSyntax()  {\n     registerMessage(new JsMessage.Builder(\"MSG_B\")\n         .appendStringPart(\"Hi\\nthere\")\n         .build());\n-\n-    assertOutputEquals(\"var MSG_B = function() {return 'asdf'};\",\n-        \"var MSG_B=function(){return\\\"Hi\\\\nthere\\\"}\");\n+    style = Style.LEGACY;\n+    test(\"var MSG_B = function() {return 'asdf'};\",\n+         \"var MSG_B=function(){return\\\"Hi\\\\nthere\\\"}\");\n   }\n \n   public void testLegacyStyleOnePlaceholder()  {\n         .appendPlaceholderReference(\"measly\")\n         .appendStringPart(\" ph\")\n         .build());\n-    assertOutputEquals(\n+    style = Style.LEGACY;\n+    test(\n         \"var MSG_C = function(measly) {return 'asdf' + measly};\",\n         \"var MSG_C=function(measly){return\\\"One \\\"+(measly+\\\" ph\\\")}\");\n   }\n         .appendStringPart(\" and \")\n         .appendPlaceholderReference(\"jane\")\n         .build());\n-    assertOutputEquals(\n+    style = Style.LEGACY;\n+    test(\n         \"var MSG_D = function(jane, dick) {return jane + dick};\",\n         \"var MSG_D=function(jane,dick){return dick+(\\\" and \\\"+jane)}\");\n   }\n         .appendStringPart(\"Sum: $\")\n         .appendPlaceholderReference(\"amtEarned\")\n         .build());\n-    assertOutputEquals(\n+    style = Style.LEGACY;\n+    test(\n         \"var MSG_E = function(amtEarned) {return amtEarned + 'x'};\",\n         \"var MSG_E=function(amtEarned){return\\\"Sum: $\\\"+amtEarned}\");\n   }\n         .build());\n \n     // Placeholder named in lower-underscore case (discouraged nowadays)\n-    assertOutputEquals(\n+    style = Style.LEGACY;\n+    test(\n         \"var MSG_F = function(amt_earned) {return amt_earned + 'x'};\",\n         \"var MSG_F=function(amt_earned){return\\\"Sum: $\\\"+amt_earned}\");\n   }\n         .appendPlaceholderReference(\"chimp\")\n         .build());\n \n-    process(\"var MSG_B = function(chump) {return chump + 'x'};\");\n-    assertEquals(1, compiler.getErrors().length);\n-    JSError error = compiler.getErrors()[0];\n-    assertEquals(\"Message parse tree malformed. \"\n-        + \"Unrecognized message placeholder referenced: chimp\",\n-        error.description);\n+    test(\"var MSG_B = function(chump) {return chump + 'x'};\",\n+         \"var MSG_B = function(chump) {return chump + 'x'};\",\n+         JsMessageVisitor.MESSAGE_TREE_MALFORMED);\n   }\n \n   public void testTranslatedPlaceHolderMissMatch() {\n         .appendStringPart(\"!\")\n         .build());\n \n-    process(\"var MSG_A = goog.getMsg('{$a}');\");\n-    assertEquals(1, compiler.getErrors().length);\n-    JSError error = compiler.getErrors()[0];\n-    assertEquals(MESSAGE_TREE_MALFORMED, error.getType());\n-  }\n-\n-  private void assertOutputEquals(String input, String output) {\n-    String output1 = process(input);\n-    JSError[] errors = compiler.getErrors();\n-    if (errors.length > 0) {\n-      fail(errors[0].description);\n-    }\n-\n-    assertEquals(output, output1);\n-  }\n-\n-  private String process(String input) {\n-    compiler = new Compiler();\n-    Node root = compiler.parseTestCode(input);\n-    JsMessageVisitor visitor = new ReplaceMessages(compiler,\n-        new SimpleMessageBundle(), false, RELAX, strictReplacement);\n-    visitor.process(null, root);\n-\n-    return compiler.toSource(root);\n+    test(\"var MSG_A = goog.getMsg('{$a}');\",\n+         \"var MSG_A = goog.getMsg('{$a}');\",\n+         MESSAGE_TREE_MALFORMED);\n   }\n \n   private void registerMessage(JsMessage message) {", "timestamp": 1335212227, "metainfo": ""}