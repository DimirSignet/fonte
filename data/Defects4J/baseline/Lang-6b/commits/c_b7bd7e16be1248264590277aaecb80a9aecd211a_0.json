{"sha": "b7bd7e16be1248264590277aaecb80a9aecd211a", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * @version $Id$\n  */\n public class EqualsBuilder implements Builder<Boolean> {\n-    \n+\n     /**\n      * <p>\n      * A registry of objects used by reflection methods to detect cyclical object references and avoid infinite loops.\n      * </p>\n-     * \n+     *\n      * @since 3.0\n      */\n     private static final ThreadLocal<Set<Pair<IDKey, IDKey>>> REGISTRY = new ThreadLocal<Set<Pair<IDKey, IDKey>>>();\n     /*\n      * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()\n      * we are in the process of calculating.\n-     * \n+     *\n      * So we generate a one-to-one mapping from the original object to a new object.\n-     * \n+     *\n      * Now HashSet uses equals() to determine if two elements with the same hashcode really\n      * are equal, so we also need to ensure that the replacement objects are only equal\n      * if the original objects are identical.\n-     * \n+     *\n      * The original implementation (2.4 and before) used the System.indentityHashCode()\n      * method - however this is not guaranteed to generate unique ids (e.g. LANG-459)\n-     *  \n+     *\n      * We now use the IDKey helper class (adapted from org.apache.axis.utils.IDKey)\n      * to disambiguate the duplicate ids.\n      */\n      * Returns the registry of object pairs being traversed by the reflection\n      * methods in the current thread.\n      * </p>\n-     * \n+     *\n      * @return Set the registry of objects being traversed\n      * @since 3.0\n      */\n      * <p>\n      * Converters value pair into a register pair.\n      * </p>\n-     * \n+     *\n      * @param lhs <code>this</code> object\n      * @param rhs the other object\n-     * \n-     * @return\n+     *\n+     * @return the pair\n      */\n     static Pair<IDKey, IDKey> getRegisterPair(Object lhs, Object rhs) {\n         IDKey left = new IDKey(lhs);\n      * Objects might be swapped therefore a check is needed if the object pair\n      * is registered in given or swapped order.\n      * </p>\n-     * \n+     *\n      * @param lhs <code>this</code> object to lookup in registry\n      * @param rhs the other object to lookup on registry\n      * @return boolean <code>true</code> if the registry contains the given object.\n      * Registers the given object pair.\n      * Used by the reflection methods to avoid infinite loops.\n      * </p>\n-     * \n+     *\n      * @param lhs <code>this</code> object to register\n      * @param rhs the other object to register\n      */\n      * <p>\n      * Unregisters the given object pair.\n      * </p>\n-     * \n+     *\n      * <p>\n      * Used by the reflection methods to avoid infinite loops.\n-     * \n+     *\n      * @param lhs <code>this</code> object to unregister\n      * @param rhs the other object to unregister\n      * @since 3.0\n             }\n         }\n     }\n-    \n+\n     /**\n      * If the fields tested are equals.\n      * The default value is <code>true</code>.\n         if (lhs == null || rhs == null) {\n             return false;\n         }\n-        // Find the leaf class since there may be transients in the leaf \n+        // Find the leaf class since there may be transients in the leaf\n         // class or in classes between the leaf and root.\n-        // If we are not testing transients or a subclass has no ivars, \n+        // If we are not testing transients or a subclass has no ivars,\n         // then a subclass can test equals to a superclass.\n         Class<?> lhsClass = lhs.getClass();\n         Class<?> rhsClass = rhs.getClass();\n             }\n         } catch (IllegalArgumentException e) {\n             // In this case, we tried to test a subclass vs. a superclass and\n-            // the subclass has ivars or the ivars are transient and \n+            // the subclass has ivars or the ivars are transient and\n             // we are testing transients.\n             // If a subclass has ivars that we are trying to test them, we get an\n             // exception and we know that the objects are not equal.\n     /**\n      * <p>Appends the fields and values defined by the given object of the\n      * given Class.</p>\n-     * \n+     *\n      * @param lhs  the left hand object\n      * @param rhs  the right hand object\n      * @param clazz  the class to append details of\n         EqualsBuilder builder,\n         boolean useTransients,\n         String[] excludeFields) {\n-        \n+\n         if (isRegistered(lhs, rhs)) {\n             return;\n         }\n-        \n+\n         try {\n             register(lhs, rhs);\n             Field[] fields = clazz.getDeclaredFields();\n             // The simple case, not an array, just test the element\n             isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n         }\n         // 'Switch' on type of array, to dispatch to the correct handler\n      * <p>\n      * Test if two <code>long</code> s are equal.\n      * </p>\n-     * \n+     *\n      * @param lhs\n      *                  the left hand <code>long</code>\n      * @param rhs\n     public boolean isEquals() {\n         return this.isEquals;\n     }\n-    \n+\n     /**\n      * <p>Returns <code>true</code> if the fields that have been checked\n      * are all equal.</p>\n      *\n      * @return <code>true</code> if all of the fields that have been checked\n      *         are equal, <code>false</code> otherwise.\n-     *         \n+     *\n      * @since 3.0\n      */\n     public Boolean build() {\n \n     /**\n      * Sets the <code>isEquals</code> value.\n-     * \n+     *\n      * @param isEquals The value to set.\n      * @since 2.1\n      */", "timestamp": 1300552737, "metainfo": ""}