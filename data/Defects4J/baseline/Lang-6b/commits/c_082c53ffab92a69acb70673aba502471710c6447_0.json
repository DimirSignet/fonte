{"sha": "082c53ffab92a69acb70673aba502471710c6447", "log": "[LANG-714] StringUtils doc/comment spelling fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n  *      - abbreviates a string using ellipsis</li>\n  *  <li><b>Difference</b>\n  *      - compares Strings and reports on their differences</li>\n- *  <li><b>LevensteinDistance</b>\n+ *  <li><b>LevenshteinDistance</b>\n  *      - the number of changes needed to change one String into another</li>\n  * </ul>\n  *\n      * StringUtils.stripAccents(null)                = null\n      * StringUtils.stripAccents(\"\")                  = \"\"\n      * StringUtils.stripAccents(\"control\")           = \"control\"\n-     * StringUtils.stripAccents(\"&ecute;clair\")      = \"eclair\"\n+     * StringUtils.stripAccents(\"&eacute;clair\")     = \"eclair\"\n      * </pre>\n      *\n      * @param input String to be stripped\n      *\n      * @since 3.0\n      */\n-    // See also Lucene's ASCIIFoldingFilter (Lucene 2.9) that replaces accented characters by their unaccented equivalent (and uncommited bug fix: https://issues.apache.org/jira/browse/LUCENE-1343?focusedCommentId=12858907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12858907).\n+    // See also Lucene's ASCIIFoldingFilter (Lucene 2.9) that replaces accented characters by their unaccented equivalent (and uncommitted bug fix: https://issues.apache.org/jira/browse/LUCENE-1343?focusedCommentId=12858907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12858907).\n     public static String stripAccents(String input) {\n         if(input == null) {\n             return null;\n \n     /**\n      * Use {@code java.text.Normalizer#normalize(CharSequence, Normalizer.Form)}\n-     * (but be careful, this classe exists in Java 1.3, with an entirely different meaning!)\n+     * (but be careful, this class exists in Java 1.3, with an entirely different meaning!)\n      *\n      * @param text the text to be processed\n      * @return the processed string\n      *  count back from the end of the String by this many characters\n      * @param end  the position to end at (exclusive), negative means\n      *  count back from the end of the String by this many characters\n-     * @return substring from start position to end positon,\n+     * @return substring from start position to end position,\n      *  {@code null} if null String input\n      */\n     public static String substring(String str, int start, int end) {\n     // Remove\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Removes a substring only if it is at the begining of a source string,\n+     * <p>Removes a substring only if it is at the beginning of a source string,\n      * otherwise returns the source string.</p>\n      *\n      * <p>A {@code null} source string will return {@code null}.\n     }\n \n     /**\n-     * <p>Case insensitive removal of a substring if it is at the begining of a source string,\n+     * <p>Case insensitive removal of a substring if it is at the beginning of a source string,\n      * otherwise returns the source string.</p>\n      *\n      * <p>A {@code null} source string will return {@code null}.\n             return text;\n         }\n \n-        // if recursing, this shouldnt be less than 0\n+        // if recursing, this shouldn't be less than 0\n         if (timeToLive < 0) {\n             throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n         }\n \n         int start = 0;\n \n-        // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit\n+        // get a good guess on the size of the result buffer so it doesn't have to double if it goes over a bit\n         int increase = 0;\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n     // Character Tests\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Checks if the CharSequence contains only unicode letters.</p>\n+     * <p>Checks if the CharSequence contains only Unicode letters.</p>\n      *\n      * <p>{@code null} will return {@code false}.\n      * An empty CharSequence (length()=0) will return {@code false}.</p>\n     }\n \n     /**\n-     * <p>Checks if the CharSequence contains only unicode letters and\n+     * <p>Checks if the CharSequence contains only Unicode letters and\n      * space (' ').</p>\n      *\n      * <p>{@code null} will return {@code false}\n     }\n \n     /**\n-     * <p>Checks if the CharSequence contains only unicode letters or digits.</p>\n+     * <p>Checks if the CharSequence contains only Unicode letters or digits.</p>\n      *\n      * <p>{@code null} will return {@code false}.\n      * An empty CharSequence (length()=0) will return {@code false}.</p>\n     }\n \n     /**\n-     * <p>Checks if the CharSequence contains only unicode letters, digits\n+     * <p>Checks if the CharSequence contains only Unicode letters, digits\n      * or space ({@code ' '}).</p>\n      *\n      * <p>{@code null} will return {@code false}.\n     }\n \n     /**\n-     * <p>Checks if the CharSequence contains only unicode digits.\n-     * A decimal point is not a unicode digit and returns false.</p>\n+     * <p>Checks if the CharSequence contains only Unicode digits.\n+     * A decimal point is not a Unicode digit and returns false.</p>\n      *\n      * <p>{@code null} will return {@code false}.\n      * An empty CharSequence (length()=0) will return {@code false}.</p>\n     }\n \n     /**\n-     * <p>Checks if the CharSequence contains only unicode digits or space\n+     * <p>Checks if the CharSequence contains only Unicode digits or space\n      * ({@code ' '}).\n-     * A decimal point is not a unicode digit and returns false.</p>\n+     * A decimal point is not a Unicode digit and returns false.</p>\n      *\n      * <p>{@code null} will return {@code false}.\n      * An empty CharSequence (length()=0) will return {@code true}.</p>\n      * @see java.lang.String#startsWith(String)\n      * @param str  the CharSequence to check, may be null\n      * @param prefix the prefix to find, may be null\n-     * @param ignoreCase inidicates whether the compare should ignore case\n+     * @param ignoreCase indicates whether the compare should ignore case\n      *  (case insensitive) or not.\n      * @return {@code true} if the CharSequence starts with the prefix or\n      *  both {@code null}\n      * @see java.lang.String#endsWith(String)\n      * @param str  the CharSequence to check, may be null\n      * @param suffix the suffix to find, may be null\n-     * @param ignoreCase inidicates whether the compare should ignore case\n+     * @param ignoreCase indicates whether the compare should ignore case\n      *  (case insensitive) or not.\n      * @return {@code true} if the CharSequence starts with the prefix or\n      *  both {@code null}\n      * </p>\n      * <p>\n      * The difference is that Java's whitespace includes vertical tab and form feed, which this functional will also\n-     * normalize. Additonally <code>{@link #trim(String)}</code> removes control characters (char &lt;= 32) from both\n+     * normalize. Additionally <code>{@link #trim(String)}</code> removes control characters (char &lt;= 32) from both\n      * ends of this String.\n      * </p>\n      *", "timestamp": 1310313347, "metainfo": ""}