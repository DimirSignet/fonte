{"sha": "32778350ae36478878ee8415d64afe53bb2e3f28", "log": "junit4ify NumberUtilstest  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n package org.apache.commons.lang3.math;\n \n import static org.apache.commons.lang3.JavaVersion.JAVA_1_3;\n+import static org.junit.Assert.*;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.SystemUtils;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.math.NumberUtils}.\n  *\n  * @version $Id$\n  */\n-public class NumberUtilsTest extends TestCase {\n-\n-    public NumberUtilsTest(String name) {\n-        super(name);\n-    }\n+public class NumberUtilsTest {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new NumberUtils());\n         Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\n     /**\n      * Test for {@link NumberUtils#toInt(String)}.\n      */\n+    @Test\n     public void testToIntString() {\n         assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n         assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n     /**\n      * Test for {@link NumberUtils#toInt(String, int)}.\n      */\n+    @Test\n     public void testToIntStringI() {\n         assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n         assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n     /**\n      * Test for {@link NumberUtils#toLong(String)}.\n      */\n+    @Test\n     public void testToLongString() {\n         assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n         assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n     /**\n      * Test for {@link NumberUtils#toLong(String, long)}.\n      */\n+    @Test\n     public void testToLongStringL() {\n         assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n         assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n     /**\n      * Test for {@link NumberUtils#toFloat(String)}.\n      */\n+    @Test\n     public void testToFloatString() {\n         assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n         assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n     /**\n      * Test for {@link NumberUtils#toFloat(String, float)}.\n      */\n+    @Test\n     public void testToFloatStringF() {\n         assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n         assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n     /**\n      * Test for {@link NumberUtils#toDouble(String)}.\n      */\n+    @Test\n     public void testStringToDoubleString() {\n         assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n         assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n     /**\n      * Test for {@link NumberUtils#toDouble(String, double)}.\n      */\n+    @Test\n     public void testStringToDoubleStringD() {\n         assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n         assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n      /**\n      * Test for {@link NumberUtils#toByte(String)}.\n      */\n+    @Test\n     public void testToByteString() {\n         assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n         assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n     /**\n      * Test for {@link NumberUtils#toByte(String, byte)}.\n      */\n+    @Test\n     public void testToByteStringI() {\n         assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n         assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n     /**\n      * Test for {@link NumberUtils#toShort(String)}.\n      */\n+    @Test\n     public void testToShortString() {\n         assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n         assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n     /**\n      * Test for {@link NumberUtils#toShort(String, short)}.\n      */\n+    @Test\n     public void testToShortStringI() {\n         assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n         assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n     }\n \n+    @Test\n     public void testCreateNumber() {\n         // a lot of things can go wrong\n         assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n                     .createNumber(\"\" + Double.MAX_VALUE));\n     }\n \n+    @Test\n     public void testCreateFloat() {\n         assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n         assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n         }\n     }\n \n+    @Test\n     public void testCreateDouble() {\n         assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n         assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n         }\n     }\n \n+    @Test\n     public void testCreateInteger() {\n         assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n         assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n         }\n     }\n \n+    @Test\n     public void testCreateLong() {\n         assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n         assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n         }\n     }\n \n+    @Test\n     public void testCreateBigInteger() {\n         assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n         assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n         }\n     }\n \n+    @Test\n     public void testCreateBigDecimal() {\n         assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n         assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n \n     // min/max tests\n     // ----------------------------------------------------------------------\n+    @Test\n     public void testMinLong() {\n         final long[] l = null;\n         try {\n         assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n     }\n \n+    @Test\n     public void testMinInt() {\n         final int[] i = null;\n         try {\n         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n     }\n \n+    @Test\n     public void testMinShort() {\n         final short[] s = null;\n         try {\n         assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n     }\n \n+    @Test\n     public void testMinByte() {\n         final byte[] b = null;\n         try {\n         assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n     }\n \n+    @Test\n     public void testMinDouble() {\n         final double[] d = null;\n         try {\n         assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n     }\n \n+    @Test\n     public void testMinFloat() {\n         final float[] f = null;\n         try {\n         assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n     }\n \n+    @Test\n     public void testMaxLong() {\n         final long[] l = null;\n         try {\n         assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n     }\n \n+    @Test\n     public void testMaxInt() {\n         final int[] i = null;\n         try {\n         assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n     }\n \n+    @Test\n     public void testMaxShort() {\n         final short[] s = null;\n         try {\n         assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n     }\n \n+    @Test\n     public void testMaxByte() {\n         final byte[] b = null;\n         try {\n         assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n     }\n \n+    @Test\n     public void testMaxDouble() {\n         final double[] d = null;\n         try {\n         assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n     }\n \n+    @Test\n     public void testMaxFloat() {\n         final float[] f = null;\n         try {\n         assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n     }\n \n+    @Test\n     public void testMinimumLong() {\n         assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n         assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n         assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n     }\n \n+    @Test\n     public void testMinimumInt() {\n         assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n         assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n         assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n     }\n \n+    @Test\n     public void testMinimumShort() {\n         short low = 1234;\n         short mid = 1234 + 1;\n         assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n     }\n \n+    @Test\n     public void testMinimumByte() {\n         byte low = 123;\n         byte mid = 123 + 1;\n         assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n     }\n \n+    @Test\n     public void testMinimumDouble() {\n         double low = 12.3;\n         double mid = 12.3 + 1;\n         assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n     }\n \n+    @Test\n     public void testMinimumFloat() {\n         float low = 12.3f;\n         float mid = 12.3f + 1;\n         assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n     }\n \n+    @Test\n     public void testMaximumLong() {\n         assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n         assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n         assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n     }\n \n+    @Test\n     public void testMaximumInt() {\n         assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n         assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n         assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n     }\n \n+    @Test\n     public void testMaximumShort() {\n         short low = 1234;\n         short mid = 1234 + 1;\n         assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n     }\n \n+    @Test\n     public void testMaximumByte() {\n         byte low = 123;\n         byte mid = 123 + 1;\n         assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n     }\n \n+    @Test\n     public void testMaximumDouble() {\n         double low = 12.3;\n         double mid = 12.3 + 1;\n         assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n     }\n \n+    @Test\n     public void testMaximumFloat() {\n         float low = 12.3f;\n         float mid = 12.3f + 1;\n     }\n \n     // Testing JDK against old Lang functionality\n+    @Test\n     public void testCompareDouble() {\n         assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n         assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n         assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n     }\n \n+    @Test\n     public void testCompareFloat() {\n         assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n         assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n         assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n     }\n \n+    @Test\n     public void testIsDigits() {\n         assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n         assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n      * Tests isNumber(String) and tests that createNumber(String) returns\n      * a valid number iff isNumber(String) returns false.\n      */\n+    @Test\n     public void testIsNumber() {\n         String val = \"12345\";\n         assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n     }\n \n     @SuppressWarnings(\"cast\") // suppress instanceof warning check\n+    @Test\n     public void testConstants() {\n         assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n         assertTrue(NumberUtils.LONG_ONE instanceof Long);\n         assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n     }\n \n+    @Test\n     public void testLang300() {\n         NumberUtils.createNumber(\"-1l\");\n         NumberUtils.createNumber(\"01l\");\n         NumberUtils.createNumber(\"1l\");\n     }\n \n+    @Test\n     public void testLang381() {\n         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));", "timestamp": 1310879894, "metainfo": ""}