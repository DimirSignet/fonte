{"sha": "9f82f6890587a2bde40d3c1780aad28527d0b704", "log": "Checkstyle  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n      *\n      * @param type the subject type to be assigned to the target type\n      * @param toParameterizedType the target parameterized type\n+     * @param typeVarAssigns a map with type variables\n      * @return true if <code>type</code> is assignable to <code>toType</code>.\n      */\n     private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n      *\n      * @param type the subject type to be assigned to the target type\n      * @param toGenericArrayType the target generic array type\n+     * @param typeVarAssigns a map with type variables\n      * @return true if <code>type</code> is assignable to\n      * <code>toGenericArrayType</code>.\n      */\n      *\n      * @param type the subject type to be assigned to the target type\n      * @param toWildcardType the target wildcard type\n+     * @param typeVarAssigns a map with type variables\n      * @return true if <code>type</code> is assignable to\n      * <code>toWildcardType</code>.\n      */\n      *\n      * @param type the subject type to be assigned to the target type\n      * @param toTypeVariable the target type variable\n+     * @param typeVarAssigns a map with type variables\n      * @return true if <code>type</code> is assignable to\n      * <code>toTypeVariable</code>.\n      */\n     /**\n      * <p> </p>\n      *\n-     * @param type\n-     * @param typeVarAssigns\n-     * @return\n+     * @param type the type to be replaced\n+     * @param typeVarAssigns the map with type variables\n+     * @return the replaced type\n+     * @throws IllegalArgumentException if the type cannot be substituted\n      */\n     private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {\n         if (type instanceof TypeVariable<?> && typeVarAssigns != null) {\n     /**\n      * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\n      *\n-     * @param type\n-     * @param toClass\n-     * @param subtypeVarAssigns\n-     * @return\n+     * @param type the type in question\n+     * @param toClass the class\n+     * @param subtypeVarAssigns a map with type variables\n+     * @return the map with type arguments\n      */\n     private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n             Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n     }\n \n     /**\n-     * <p> </p>\n-     *\n-     * @param parameterizedType\n-     * @param toClass\n-     * @param subtypeVarAssigns\n-     * @return\n+     * <p> Return a map of the type arguments of a parameterized type in the context of <code>toClass</code>. </p>\n+     *\n+     * @param parameterizedType the parameterized type\n+     * @param toClass the class\n+     * @param subtypeVarAssigns a map with type variables\n+     * @return the map with type arguments\n      */\n     private static Map<TypeVariable<?>, Type> getTypeArguments(\n             ParameterizedType parameterizedType, Class<?> toClass,\n     }\n \n     /**\n-     * <p> </p>\n-     *\n-     * @param cls\n-     * @param toClass\n-     * @param subtypeVarAssigns\n-     * @return\n+     * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\n+     *\n+     * @param cls the class in question\n+     * @param toClass the context class\n+     * @param subtypeVarAssigns a map with type variables\n+     * @return the map with type arguments\n      */\n     private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n             Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n     }\n \n     /**\n-     * <p> </p>\n-     *\n-     * @param cls\n-     * @param parameterizedType\n-     * @param typeVarAssigns\n+     * <p>Performs a mapping of type variables.</p>\n+     *\n+     * @param cls the class in question\n+     * @param parameterizedType the parameterized type\n+     * @param typeVarAssigns the map to be filled\n      */\n     private static <T> void mapTypeVariablesToArguments(Class<T> cls,\n             ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns) {\n      * <p> Closest parent type? Closest to what? The closest parent type to the\n      * super class specified by <code>superClass</code>. </p>\n      *\n-     * @param cls\n-     * @param superClass\n-     * @return\n+     * @param cls the class in question\n+     * @param superClass the super class\n+     * @return the closes parent type\n      */\n     private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\n         // only look at the interfaces if the super class is also an interface\n      * <p> Checks if the given value can be assigned to the target type\n      * following the Java generics rules. </p>\n      *\n-     * @param value\n-     * @param type\n+     * @param value the value to be checked\n+     * @param type the target type\n      * @return true of <code>value</code> is an instance of <code>type</code>.\n      */\n     public static boolean isInstance(Object value, Type type) {\n     }\n \n     /**\n-     * <p> Type-checking method of convenience. </p>\n-     *\n-     * @param parameterizedType\n-     * @return\n+     * <p> Transforms the passed in type to a {@code Class} object. Type-checking method of convenience. </p>\n+     *\n+     * @param parameterizedType the type to be converted\n+     * @return the corresponding {@code Class} object\n+     * @throws IllegalStateException if the conversion fails\n      */\n     private static Class<?> getRawType(ParameterizedType parameterizedType) {\n         Type rawType = parameterizedType.getRawType();\n \n     /**\n      * Learn whether the specified type denotes an array type.\n-     * @param type\n+     * @param type the type to be checked\n      * @return <code>true</code> if <code>type</code> is an array class or a {@link GenericArrayType}.\n      */\n     public static boolean isArrayType(Type type) {\n \n     /**\n      * Get the array component type of <code>type</code>.\n-     * @param type\n+     * @param type the type to be checked\n      * @return component type or null if type is not an array type\n      */\n     public static Type getArrayComponentType(Type type) {", "timestamp": 1300479762, "metainfo": ""}