{"sha": "54f38ae85c74d497f29eda1776260ea224dc1d75", "log": "Javadoc; Move @since; Add documented constructor  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n package org.apache.commons.lang3;\n \n /**\n- * Null-safe CharSequence utility methods.\n+ * <p>Operations on {@code CharSequence} that are\n+ * <code>null</code> safe.</p>\n  *\n+ * @author Apache Software Foundation\n  * @author Gary Gregory\n+ * @since 3.0\n  * @version $Id$\n  */\n public class CharSequenceUtils {\n \n     /**\n-     * Returns a new <code>CharSequence</code> that is a subsequence of this\n-     * sequence starting with the <code>char</code> value at the specified\n-     * index. The length (in <code>char</code>s) of the returned sequence is\n-     * <code>length() - start</code>, so if <code>start == end</code> then an\n-     * empty sequence is returned. </p>\n+     * <p>{@code CharSequenceUtils} instances should NOT be constructed in\n+     * standard programming. Instead, the static methods on the class should\n+     * be used, such as {@code CharSequenceUtils.subSequence(cs, 4);}.</p>\n      *\n-     * @param cs\n-     *            the specified subsequence, may be null\n-     * @param start\n-     *            the start index, inclusive\n-     * @return a new subsequence or null\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public CharSequenceUtils() {\n+        super();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Returns a new {@code CharSequence} that is a subsequence of this\n+     * sequence starting with the {@code char} value at the specified index.</p>\n+     * \n+     * <p>This provides the {@code CharSequence} equivalent to {@link String#substring(int)}.\n+     * The length (in {@code char}) of the returned sequence is {@code length() - start},\n+     * so if {@start == end} then an empty sequence is returned.</p>\n      *\n-     * @throws IndexOutOfBoundsException\n-     *             if <code>start</code> is negative or if <code>start</code> is\n-     *             greater than <code>length()</code>\n-     * @since 3.0\n+     * @param cs  the specified subsequence, null returns null\n+     * @param start  the start index, inclusive, valid\n+     * @return a new subsequence, may be null\n+     * @throws IndexOutOfBoundsException if {@code start} is negative or if \n+     *  {@code start} is greater than {@code length()}\n      */\n     public static CharSequence subSequence(CharSequence cs, int start) {\n         return cs == null ? null : cs.subSequence(start, cs.length());\n     }\n+\n }", "timestamp": 1299241405, "metainfo": ""}