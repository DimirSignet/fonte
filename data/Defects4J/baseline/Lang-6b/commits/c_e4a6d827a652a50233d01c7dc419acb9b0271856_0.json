{"sha": "e4a6d827a652a50233d01c7dc419acb9b0271856", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n  */\n package org.apache.commons.lang3.builder;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.builder.EqualsBuilder}.\n  *\n  * @version $Id$\n  */\n-public class EqualsBuilderTest extends TestCase {\n-\n-    public EqualsBuilderTest(String name) {\n-        super(name);\n-    }\n+public class EqualsBuilderTest {\n \n     //-----------------------------------------------------------------------\n \n         }\n     }\n \n+    @Test\n     public void testReflectionEquals() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n     }\n     \n+    @Test\n     public void testReflectionHierarchyEquals() {\n         testReflectionHierarchyEquals(false);\n         testReflectionHierarchyEquals(true);\n         assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n     }\n \n-    public void testReflectionHierarchyEquals(boolean testTransients) {\n+    private void testReflectionHierarchyEquals(boolean testTransients) {\n         TestObject to1 = new TestObject(4);\n         TestObject to1Bis = new TestObject(4);\n         TestObject to1Ter = new TestObject(4);\n      * @param oToChange a TestObject that will be changed\n      * @param testTransients whether to test transient instance variables \n      */\n-    public void testReflectionEqualsEquivalenceRelationship(\n+    private void testReflectionEqualsEquivalenceRelationship(\n         TestObject to,\n         TestObject toBis,\n         TestObject toTer,\n         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));\n     }\n \n+    @Test\n     public void testSuper() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n         assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testObject() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n         assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n     }\n     \n+    @Test\n     public void testObjectBuild() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n         assertTrue(new EqualsBuilder().append((Object) null, (Object) null).build());\n     }\n \n+    @Test\n     public void testLong() {\n         long o1 = 1L;\n         long o2 = 2L;\n         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testInt() {\n         int o1 = 1;\n         int o2 = 2;\n         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testShort() {\n         short o1 = 1;\n         short o2 = 2;\n         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testChar() {\n         char o1 = 1;\n         char o2 = 2;\n         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testByte() {\n         byte o1 = 1;\n         byte o2 = 2;\n         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testDouble() {\n         double o1 = 1;\n         double o2 = 2;\n         assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n     }\n \n+    @Test\n     public void testFloat() {\n         float o1 = 1;\n         float o2 = 2;\n         assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n     }\n \n+    @Test\n     public void testAccessors() {\n         EqualsBuilder equalsBuilder = new EqualsBuilder();\n         assertTrue(equalsBuilder.isEquals());\n         assertFalse(equalsBuilder.isEquals());\n     }\n \n+    @Test\n     public void testReset() {\n         EqualsBuilder equalsBuilder = new EqualsBuilder();\n         assertTrue(equalsBuilder.isEquals());\n         assertTrue(equalsBuilder.isEquals());\n     }\n     \n+    @Test\n     public void testBoolean() {\n         boolean o1 = true;\n         boolean o2 = false;\n         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n     }\n \n+    @Test\n     public void testObjectArray() {\n         TestObject[] obj1 = new TestObject[3];\n         obj1[0] = new TestObject(4);\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testLongArray() {\n         long[] obj1 = new long[2];\n         obj1[0] = 5L;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testIntArray() {\n         int[] obj1 = new int[2];\n         obj1[0] = 5;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testShortArray() {\n         short[] obj1 = new short[2];\n         obj1[0] = 5;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testCharArray() {\n         char[] obj1 = new char[2];\n         obj1[0] = 5;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testByteArray() {\n         byte[] obj1 = new byte[2];\n         obj1[0] = 5;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testDoubleArray() {\n         double[] obj1 = new double[2];\n         obj1[0] = 5;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testFloatArray() {\n         float[] obj1 = new float[2];\n         obj1[0] = 5;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testBooleanArray() {\n         boolean[] obj1 = new boolean[2];\n         obj1[0] = true;\n         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testMultiLongArray() {\n         long[][] array1 = new long[2][2];\n         long[][] array2 = new long[2][2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMultiIntArray() {\n         int[][] array1 = new int[2][2];\n         int[][] array2 = new int[2][2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMultiShortArray() {\n         short[][] array1 = new short[2][2];\n         short[][] array2 = new short[2][2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMultiCharArray() {\n         char[][] array1 = new char[2][2];\n         char[][] array2 = new char[2][2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMultiByteArray() {\n         byte[][] array1 = new byte[2][2];\n         byte[][] array2 = new byte[2][2];\n         array1[1][1] = 0;\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n+\n+    @Test\n     public void testMultiFloatArray() {\n         float[][] array1 = new float[2][2];\n         float[][] array2 = new float[2][2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMultiDoubleArray() {\n         double[][] array1 = new double[2][2];\n         double[][] array2 = new double[2][2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMultiBooleanArray() {\n         boolean[][] array1 = new boolean[2][2];\n         boolean[][] array2 = new boolean[2][2];\n         assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n     }\n \n+    @Test\n     public void testRaggedArray() {\n         long array1[][] = new long[2][];\n         long array2[][] = new long[2][];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testMixedArray() {\n         Object array1[] = new Object[2];\n         Object array2[] = new Object[2];\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n     }\n \n+    @Test\n     public void testObjectArrayHiddenByObject() {\n         TestObject[] array1 = new TestObject[2];\n         array1[0] = new TestObject(4);\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testLongArrayHiddenByObject() {\n         long[] array1 = new long[2];\n         array1[0] = 5L;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testIntArrayHiddenByObject() {\n         int[] array1 = new int[2];\n         array1[0] = 5;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testShortArrayHiddenByObject() {\n         short[] array1 = new short[2];\n         array1[0] = 5;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testCharArrayHiddenByObject() {\n         char[] array1 = new char[2];\n         array1[0] = 5;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testByteArrayHiddenByObject() {\n         byte[] array1 = new byte[2];\n         array1[0] = 5;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testDoubleArrayHiddenByObject() {\n         double[] array1 = new double[2];\n         array1[0] = 5;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testFloatArrayHiddenByObject() {\n         float[] array1 = new float[2];\n         array1[0] = 5;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n \n+    @Test\n     public void testBooleanArrayHiddenByObject() {\n         boolean[] array1 = new boolean[2];\n         array1[0] = true;\n      * of each other and do not share a parent aside from Object.\n      * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n      */\n+    @Test\n     public void testUnrelatedClasses() {\n         Object[] x = new Object[]{new TestACanEqualB(1)};\n         Object[] y = new Object[]{new TestBCanEqualA(1)};\n     /**\n      * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n      */\n+    @Test\n     public void testNpeForNullElement() {\n         Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) };\n         Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) };\n         new EqualsBuilder().append(x1, x2);\n     }\n \n+    @Test\n     public void testReflectionEqualsExcludeFields() throws Exception {\n         TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\n         TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\n      * Test cyclical object references which cause a StackOverflowException if\n      * not handled properly. s. LANG-606\n      */\n+    @Test\n     public void testCyclicalObjectReferences() {\n         TestObjectReference refX1 = new TestObjectReference(1);\n         TestObjectReference x1 = new TestObjectReference(1);", "timestamp": 1318950350, "metainfo": ""}