{"sha": "f46f477adddcd555f8f526aba981e5095ddf3617", "log": "Moving abbreviate + abbreviateMiddle to CharSequences  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * <ul>\n      *   <li>If {@code str} is less than {@code maxWidth} characters\n      *       long, return it.</li>\n-     *   <li>Else abbreviate it to {@code (substring(str, 0, max-3) + \"...\")}.</li>\n+     *   <li>Else abbreviate it to {@code (substring(seq, 0, max-3) + \"...\")}.</li>\n      *   <li>If {@code maxWidth} is less than {@code 4}, throw an\n      *       {@code IllegalArgumentException}.</li>\n      *   <li>In no case will it return a String of length greater than\n      * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n+     * @param seq  the CharSequence to check, may be null\n      * @param maxWidth  maximum length of result String, must be at least 4\n      * @return abbreviated String, {@code null} if null String input\n      * @throws IllegalArgumentException if the width is too small\n      * @since 2.0\n      */\n-    public static String abbreviate(String str, int maxWidth) {\n-        return abbreviate(str, 0, maxWidth);\n+    public static String abbreviate(CharSequence seq, int maxWidth) {\n+        return abbreviate(seq, 0, maxWidth);\n     }\n \n     /**\n      * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n      * </pre>\n      *\n-     * @param str  the String to check, may be null\n+     * @param seq  the CharSequence to check, may be null\n      * @param offset  left edge of source String\n      * @param maxWidth  maximum length of result String, must be at least 4\n      * @return abbreviated String, {@code null} if null String input\n      * @throws IllegalArgumentException if the width is too small\n      * @since 2.0\n      */\n-    public static String abbreviate(String str, int offset, int maxWidth) {\n-        if (str == null) {\n+    public static String abbreviate(CharSequence seq, int offset, int maxWidth) {\n+        if (seq == null) {\n             return null;\n         }\n         if (maxWidth < 4) {\n             throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");\n         }\n-        if (str.length() <= maxWidth) {\n-            return str;\n-        }\n-        if (offset > str.length()) {\n-            offset = str.length();\n-        }\n-        if ((str.length() - offset) < (maxWidth - 3)) {\n-            offset = str.length() - (maxWidth - 3);\n+        if (seq.length() <= maxWidth) {\n+            return seq.toString();\n+        }\n+        if (offset > seq.length()) {\n+            offset = seq.length();\n+        }\n+        if ((seq.length() - offset) < (maxWidth - 3)) {\n+            offset = seq.length() - (maxWidth - 3);\n         }\n         final String abrevMarker = \"...\";\n         if (offset <= 4) {\n-            return str.substring(0, maxWidth - 3) + abrevMarker;\n+            return seq.subSequence(0, maxWidth - 3) + abrevMarker;\n         }\n         if (maxWidth < 7) {\n             throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");\n         }\n-        if ((offset + (maxWidth - 3)) < str.length()) {\n-            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);\n-        }\n-        return abrevMarker + str.substring(str.length() - (maxWidth - 3));\n+        if ((offset + (maxWidth - 3)) < seq.length()) {\n+            return abrevMarker + abbreviate(StringUtils.subSequence(seq, offset), maxWidth - 3);\n+        }\n+        return abrevMarker + StringUtils.subSequence(seq, seq.length() - (maxWidth - 3));\n     }\n \n     /**\n      * StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4)     = \"ab.f\"\n      * </pre>\n      *\n-     * @param str  the String to abbreviate, may be null\n-     * @param middle the String to replace the middle characters with, may be null\n-     * @param length the length to abbreviate {@code str} to.\n+     * @param seq  the CharSequence to abbreviate, may be null\n+     * @param middle the CharSequence to replace the middle characters with, may be null\n+     * @param length the length to abbreviate {@code seq} to.\n      * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n      * @since 2.5\n      */\n-    public static String abbreviateMiddle(String str, String middle, int length) {\n-        if (isEmpty(str) || isEmpty(middle)) {\n-            return str;\n-        }\n-\n-        if (length >= str.length() || length < (middle.length()+2)) {\n-            return str;\n+    public static String abbreviateMiddle(CharSequence seq, CharSequence middle, int length) {\n+        if (seq == null) {\n+            return null;\n+        }\n+        if (isEmpty(seq) || isEmpty(middle)) {\n+            return seq.toString();\n+        }\n+\n+        if (length >= seq.length() || length < (middle.length()+2)) {\n+            return seq.toString();\n         }\n \n         int targetSting = length-middle.length();\n         int startOffset = targetSting/2+targetSting%2;\n-        int endOffset = str.length()-targetSting/2;\n+        int endOffset = seq.length()-targetSting/2;\n \n         StringBuilder builder = new StringBuilder(length);\n-        builder.append(str.substring(0,startOffset));\n+        builder.append(seq.subSequence(0,startOffset));\n         builder.append(middle);\n-        builder.append(str.substring(endOffset));\n+        builder.append(StringUtils.subSequence(seq, endOffset));\n \n         return builder.toString();\n     }", "timestamp": 1300251885, "metainfo": ""}