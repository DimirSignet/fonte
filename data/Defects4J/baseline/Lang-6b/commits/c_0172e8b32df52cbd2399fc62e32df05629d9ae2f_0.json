{"sha": "0172e8b32df52cbd2399fc62e32df05629d9ae2f", "log": "Reverting \"generification\" of toMap() method in ArrayUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      * @throws IllegalArgumentException  if the array contains elements other\n      *  than {@link java.util.Map.Entry} and an Array\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <K,V> Map<K, V> toMap(Object[] array) {\n+    public static Map<Object, Object> toMap(Object[] array) {\n         if (array == null) {\n             return null;\n         }\n-        final Map<K, V> map = new HashMap<K, V>((int) (array.length * 1.5));\n+        final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));\n         for (int i = 0; i < array.length; i++) {\n             Object object = array[i];\n             if (object instanceof Map.Entry<?, ?>) {\n                 Map.Entry<?,?> entry = (Map.Entry<?,?>) object;\n-                map.put((K)entry.getKey(), (V)entry.getValue());\n+                map.put(entry.getKey(), entry.getValue());\n             } else if (object instanceof Object[]) {\n                 Object[] entry = (Object[]) object;\n                 if (entry.length < 2) {\n                         + object\n                         + \"', has a length less than 2\");\n                 }\n-                map.put((K)entry[0], (V)entry[1]);\n+                map.put(entry[0], entry[1]);\n             } else {\n                 throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                         + object\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n      */\n     public void testArrayCreationWithDifferentTypes()\n     {\n-        final Number[] array = ArrayUtils.<Number>toArray(42, Math.PI);\n+        final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));\n         assertEquals(2, array.length);\n-        assertEquals(42, array[0]);\n-        assertEquals(Math.PI, array[1]);\n+        assertEquals(Integer.valueOf(42), array[0]);\n+        assertEquals(Double.valueOf(Math.PI), array[1]);\n     }\n \n     /**\n     \n     //-----------------------------------------------------------------------\n     public void testToMap() {\n-        Map<String,String> map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n+        Map<?, ?> map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n         \n         assertEquals(\"bar\", map.get(\"foo\"));\n         assertEquals(\"world\", map.get(\"hello\"));\n         array = new double[0];\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0.3));\n-        assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0.35));\n-        assertEquals(3, ArrayUtils.indexOf(array, 4.15, 2.0));\n-        assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0.0001));\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));\n     }\n \n     @SuppressWarnings(\"cast\")\n         array = new double[0];\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, 0.3));\n-        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, 0.3));\n-        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, 0.3));\n-        assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0, 0.35));\n-        assertEquals(3, ArrayUtils.indexOf(array, 4.15, 0, 2.0));\n-        assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0, 0.0001));\n-        assertEquals(3, ArrayUtils.indexOf(array, 4.15, -1, 2.0));\n-        assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, -300, 0.0001));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));\n+        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));\n     }\n \n     @SuppressWarnings(\"cast\")\n         array = new double[0];\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 0.3));\n-        assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 0.35));\n-        assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, 2.0));\n-        assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, 0.0001));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));\n     }\n \n     @SuppressWarnings(\"cast\")\n         array = new double[] { (double) 3 };\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, 0.3));\n-        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, 0.3));\n-        assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 3, 0.35));\n-        assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, array.length, 2.0));\n-        assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, array.length, 0.0001));\n-        assertEquals(-1, ArrayUtils.lastIndexOf(array, 4.15, -200, 2.0));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));\n     }\n \n     @SuppressWarnings(\"cast\")\n         double[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(false, ArrayUtils.contains(array, 4.0, 0.33));\n-        assertEquals(false, ArrayUtils.contains(array, 2.5, 0.49));\n-        assertEquals(true, ArrayUtils.contains(array, 2.5, 0.50));\n-        assertEquals(true, ArrayUtils.contains(array, 2.5, 0.51));\n+        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n+        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n     }\n     \n     //-----------------------------------------------------------------------\n         \n         assertTrue(Arrays.equals(\n             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n-            ArrayUtils.toPrimitive(new Character[] {Character.MIN_VALUE,\n-                    Character.MAX_VALUE, '0'}))\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n+                new Character(Character.MAX_VALUE), new Character('0')}))\n         );\n \n         try {\n-            ArrayUtils.toPrimitive(new Character[] {Character.MIN_VALUE, null});\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n         \n         assertTrue(Arrays.equals(\n             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n-            ArrayUtils.toPrimitive(new Character[] {Character.MIN_VALUE,\n-                    Character.MAX_VALUE, '0'},\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n+                new Character(Character.MAX_VALUE), new Character('0')}, \n                 Character.MIN_VALUE))\n         );\n         \n         assertTrue(Arrays.equals(\n             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n-            ArrayUtils.toPrimitive(new Character[] {Character.MIN_VALUE, null,\n-                    '0'}, Character.MAX_VALUE))\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n+                new Character('0')}, Character.MAX_VALUE))\n         );\n     }\n \n             ArrayUtils.toObject(new char[0]));\n         \n         assertTrue(Arrays.equals(\n-            new Character[] {Character.MIN_VALUE,\n-                    Character.MAX_VALUE, '0'},\n+            new Character[] {new Character(Character.MIN_VALUE), \n+                new Character(Character.MAX_VALUE), new Character('0')},\n                 ArrayUtils.toObject(new char[] {Character.MIN_VALUE, Character.MAX_VALUE, \n                 '0'} ))\n         );\n         \n         assertTrue(Arrays.equals(\n             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n-            ArrayUtils.toPrimitive(new Byte[] {Byte.MIN_VALUE,\n-                    Byte.MAX_VALUE, (byte) 9999999}))\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}))\n         );\n \n         try {\n-            ArrayUtils.toPrimitive(new Byte[] {Byte.MIN_VALUE, null});\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n         \n         assertTrue(Arrays.equals(\n             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n-            ArrayUtils.toPrimitive(new Byte[] {Byte.MIN_VALUE,\n-                    Byte.MAX_VALUE, (byte) 9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, \n                 Byte.MIN_VALUE))\n         );\n         \n         assertTrue(Arrays.equals(\n             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n-            ArrayUtils.toPrimitive(new Byte[] {Byte.MIN_VALUE, null,\n-                    (byte) 9999999}, Byte.MAX_VALUE))\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null, \n+                Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE))\n         );\n     }\n \n             ArrayUtils.toObject(new byte[0]));\n         \n         assertTrue(Arrays.equals(\n-            new Byte[] {Byte.MIN_VALUE,\n-                    Byte.MAX_VALUE, (byte) 9999999},\n+            new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},\n                 ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, \n                 (byte)9999999}))\n         );\n         \n         assertTrue(Arrays.equals(\n             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n-            ArrayUtils.toPrimitive(new Short[] {Short.MIN_VALUE,\n-                    Short.MAX_VALUE, (short) 9999999}))\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n+                new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n         );\n \n         try {\n-            ArrayUtils.toPrimitive(new Short[] {Short.MIN_VALUE, null});\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n         \n         assertTrue(Arrays.equals(\n             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n-            ArrayUtils.toPrimitive(new Short[] {Short.MIN_VALUE,\n-                    Short.MAX_VALUE, (short) 9999999}, Short.MIN_VALUE))\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n+                new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n         );\n         \n         assertTrue(Arrays.equals(\n             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n-            ArrayUtils.toPrimitive(new Short[] {Short.MIN_VALUE, null,\n-                    (short) 9999999}, Short.MAX_VALUE))\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n+                new Short((short)9999999)}, Short.MAX_VALUE))\n         );\n     }\n \n         ArrayUtils.toObject(new short[0]));\n         \n         assertTrue(Arrays.equals(\n-            new Short[] {Short.MIN_VALUE, Short.MAX_VALUE,\n-                    (short) 9999999},\n+            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n+                new Short((short)9999999)},\n             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, \n                 (short)9999999}))\n         );\n          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n          assertTrue(Arrays.equals(\n              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Integer[] {Integer.MIN_VALUE,\n-                     Integer.MAX_VALUE, 9999999}))\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Integer[] {Integer.MIN_VALUE, null});\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          ArrayUtils.toPrimitive(new Integer[0], 1));\n          assertTrue(Arrays.equals(\n              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Integer[] {Integer.MIN_VALUE,\n-                     Integer.MAX_VALUE, 9999999},1)));\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n          assertTrue(Arrays.equals(\n              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Integer[] {Integer.MIN_VALUE,\n-                 null, 9999999}, Integer.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 null, new Integer(9999999)}, Integer.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Integer[] {\n-                        Integer.MIN_VALUE,\n-                        Integer.MAX_VALUE,\n-                        9999999},\n+                    new Integer(Integer.MIN_VALUE),\n+                    new Integer(Integer.MAX_VALUE),\n+                    new Integer(9999999)},\n             ArrayUtils.toObject(\n                 new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));\n     }\n          \n          assertTrue(Arrays.equals(\n              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Long[] {Long.MIN_VALUE,\n-                     Long.MAX_VALUE, (long) 9999999}))\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 new Long(Long.MAX_VALUE), new Long(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Long[] {Long.MIN_VALUE, null});\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          \n          assertTrue(Arrays.equals(\n              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Long[] {Long.MIN_VALUE,\n-                     Long.MAX_VALUE, (long) 9999999},1)));\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n          \n          assertTrue(Arrays.equals(\n              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Long[] {Long.MIN_VALUE,\n-                 null, (long) 9999999}, Long.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 null, new Long(9999999)}, Long.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Long[] {\n-                        Long.MIN_VALUE,\n-                        Long.MAX_VALUE,\n-                        (long) 9999999},\n+                    new Long(Long.MIN_VALUE),\n+                    new Long(Long.MAX_VALUE),\n+                    new Long(9999999)},\n             ArrayUtils.toObject(\n                 new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));\n     }\n          \n          assertTrue(Arrays.equals(\n              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Float[] {Float.MIN_VALUE,\n-                     Float.MAX_VALUE, (float) 9999999}))\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 new Float(Float.MAX_VALUE), new Float(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Float[] {Float.MIN_VALUE, null});\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          \n          assertTrue(Arrays.equals(\n              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Float[] {Float.MIN_VALUE,\n-                     Float.MAX_VALUE, (float) 9999999},1)));\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n          \n          assertTrue(Arrays.equals(\n              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Float[] {Float.MIN_VALUE,\n-                 null, (float) 9999999}, Float.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 null, new Float(9999999)}, Float.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Float[] {\n-                        Float.MIN_VALUE,\n-                        Float.MAX_VALUE,\n-                        (float) 9999999},\n+                    new Float(Float.MIN_VALUE),\n+                    new Float(Float.MAX_VALUE),\n+                    new Float(9999999)},\n             ArrayUtils.toObject(\n                 new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));\n     }\n          \n          assertTrue(Arrays.equals(\n              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Double[] {Double.MIN_VALUE,\n-                     Double.MAX_VALUE, (double) 9999999}))\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 new Double(Double.MAX_VALUE), new Double(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Float[] {Float.MIN_VALUE, null});\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          \n          assertTrue(Arrays.equals(\n              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Double[] {Double.MIN_VALUE,\n-                     Double.MAX_VALUE, (double) 9999999},1)));\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n          \n          assertTrue(Arrays.equals(\n              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Double[] {Double.MIN_VALUE,\n-                 null, (double) 9999999}, Double.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 null, new Double(9999999)}, Double.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Double[] {\n-                        Double.MIN_VALUE,\n-                        Double.MAX_VALUE,\n-                        (double) 9999999},\n+                    new Double(Double.MIN_VALUE),\n+                    new Double(Double.MAX_VALUE),\n+                    new Double(9999999)},\n             ArrayUtils.toObject(\n                 new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n     }\n         \n         Object[] emptyObjectArray = new Object[0];\n         Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((Object[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\n  \n         int[] emptyIntArray = new int[] {};\n         int[] notEmptyIntArray = new int[] { 1 };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((int[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyIntArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\n \n         short[] emptyShortArray = new short[] {};\n         short[] notEmptyShortArray = new short[] { 1 };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((short[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyShortArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\n \n         char[] emptyCharArray = new char[] {};\n         char[] notEmptyCharArray = new char[] { 1 };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((char[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyCharArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\n \n         byte[] emptyByteArray = new byte[] {};\n         byte[] notEmptyByteArray = new byte[] { 1 };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((byte[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyByteArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\n \n         double[] emptyDoubleArray = new double[] {};\n         double[] notEmptyDoubleArray = new double[] { 1.0 };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((double[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\n \n         float[] emptyFloatArray = new float[] {};\n         float[] notEmptyFloatArray = new float[] { 1.0F };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((float[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\n \n         boolean[] emptyBooleanArray = new boolean[] {};\n         boolean[] notEmptyBooleanArray = new boolean[] { true };\n-        assertEquals(0, ArrayUtils.getLength(null));\n+        assertEquals(0, ArrayUtils.getLength((boolean[]) null));\n         assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\n         assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\n         ", "timestamp": 1281439898, "metainfo": ""}