{"sha": "8a55bb183bd95b2eda6f31d467783e037d6113f5", "log": "Javadoc only.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.32 2004/10/15 20:57:18 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.33 2004/10/21 01:18:33 ggregory Exp $\n  */\n public class ClassUtils {\n \n     private static class ClassNameComparator implements Comparator {\n         /**\n          * Compares two <code>Class</code>s by name.\n+         * @param o1 The receiver of the comparison call to {@link String#compareTo(String)}.\n+         * @param o2 The argument of the comparison call to {@link String#compareTo(String)}.\n+         * @return The return value from {@link String#compareTo(String)}\n          * \n          * @throws ClassCastException\n          *                  If <code>o1</code> or <code>o2</code> are not <code>Class</code>\n         /**\n          * Compares two <code>Package</code>s by name.\n          * \n+         * @param o1 The receiver of the comparison call to {@link String#compareTo(String)}.\n+         * @param o2 The argument of the comparison call to {@link String#compareTo(String)}.\n+         * @return The return value from {@link String#compareTo(String)}\n          * @throws ClassCastException\n          *                  If <code>o1</code> or <code>o2</code> are not <code>Package</code>\n          *                  instances.\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.9 2004/10/15 20:55:01 scolebourne Exp $\n+ * @version $Id: NotImplementedException.java,v 1.10 2004/10/21 01:18:33 ggregory Exp $\n  */\n public class NotImplementedException\n         extends UnsupportedOperationException implements Nestable {\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the root cause of this exception.\n+     * @return the root cause of this exception.\n      * \n      * @since 2.1\n      */\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.42 2004/10/09 10:04:04 scolebourne Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.43 2004/10/21 01:18:33 ggregory Exp $\n  */\n public class ExceptionUtils {\n     \n     }\n \n     /**\n+     * <p>Returns an array where each element is a line from the argument.</p>\n+     * <p>The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.</p>\n+     *  \n      * <p>Functionality shared between the\n      * <code>getStackFrames(Throwable)</code> methods of this and the\n      * {@link org.apache.commons.lang.exception.NestableDelegate}\n      * classes.</p>\n+     * @param stackTrace A stack trace String.\n+     * @return an array where each element is a line from the argument.\n      */\n     static String[] getStackFrames(String stackTrace) {\n         String linebreak = SystemUtils.LINE_SEPARATOR;\n--- a/src/java/org/apache/commons/lang/math/JVMRandom.java\n+++ b/src/java/org/apache/commons/lang/math/JVMRandom.java\n  * \n  * @author Henri Yandell\n  * @since 2.0\n- * @version $Id: JVMRandom.java,v 1.10 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id: JVMRandom.java,v 1.11 2004/10/21 01:18:33 ggregory Exp $\n  */\n public final class JVMRandom extends Random {\n \n     \n     /**\n      * Unsupported in 2.0.\n+     * \n+     * @param seed ignored\n+     * @throws UnsupportedOperationException\n      */\n     public synchronized void setSeed(long seed) {\n         if (this.constructed) {\n \n     /**\n      * Unsupported in 2.0.\n+     * \n+     * @return Nothing, this method always throws an UnsupportedOperationException.\n+     * @throws UnsupportedOperationException\n      */\n     public synchronized double nextGaussian() {\n         throw new UnsupportedOperationException();\n \n     /**\n      * Unsupported in 2.0.\n+     * \n+     * @param byteArray ignored\n+     * @throws UnsupportedOperationException\n      */\n     public void nextBytes(byte[] byteArray) {\n         throw new UnsupportedOperationException();\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: LongRange.java,v 1.7 2004/02/18 22:56:13 ggregory Exp $\n+ * @version $Id: LongRange.java,v 1.8 2004/10/21 01:18:33 ggregory Exp $\n  */\n public final class LongRange extends Range implements Serializable {\n     \n      * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n      * \n      * <p>This conversion can lose information for large values.</p>\n+     * \n+     * @return The maximum number in this range as a <code>double</code>.\n      */\n     public double getMaximumDouble() {\n         return max;\n      * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n      * \n      * <p>This conversion can lose information for large values.</p>\n+     * \n+     * @return The maximum number in this range as a <code>float</code>.\n      */\n     public float getMaximumFloat() {\n         return max;\n--- a/src/java/org/apache/commons/lang/text/MappedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/MappedMessageFormat.java\n     private ArrayList markers = new ArrayList(2);\n     private ArrayList sources = new ArrayList(2);\n     \n+    /**\n+     * Constructs a new instance.\n+     */\n     public MappedMessageFormat() {\n     }\n     \n     /**\n      * Defines a source of data that can later be substituted into\n      * strings passed to the \"format\" methods.\n+     * \n+     * @param marker the marker prefix for the syntax \"marker{key}\", commonly the String <code>\"$\"</code>.\n+     * @param source A Map where the keys are Strings and the values are non-<code>null</code> Objects.\n      */\n     public void addSource(String marker, Map source) {\n         nEntries++;\n      * Expands any variable declarations using any of the known\n      * variable marker strings.\n      * \n+     * @param param The String to expand.\n+     * @return The expanded String\n+     * \n      * @throws IllegalArgumentException if the input param references\n      * a variable which is not known to the specified source.\n      */\n     public String format(String param) {\n         for(int i=0; i<nEntries; i++) {\n-            param = format( param, (String) markers.get(i), (Map) sources.get(i));\n+            param = format(param, (String) markers.get(i), (Map) sources.get(i));\n         }\n         return param;\n     }\n      * Replace any occurrences within the string of the form\n      * \"marker{key}\" with the value from source[key].\n      * <p>\n-     * Commonly, the variable marker is \"$\", in which case variables\n-     * are indicated by ${key} in the string.\n+     * Commonly, the variable marker is <code>\"$\"</code>, in which case variables\n+     * are indicated by <code>${key}</code> in the string.\n      * <p>\n      * Returns the string after performing all substitutions.\n      * <p>\n      * If no substitutions were made, the input string object is\n      * returned (not a copy).\n-     *\n+     * \n+     * @param str The String to expand.\n+     * @param marker The variable marker, commonly, <code>\"$\"</code>, in which case variables\n+     * are indicated by <code>${key}</code> in the string.\n+     * @param source A Map where the keys are Strings and the values are non-<code>null</code> Objects.\n+     * @return The expanded String or, if no substitutions were made, the input String object (not a copy).\n      * @throws IllegalArgumentException if the input param references\n      * a variable which is not known to the specified source.\n      */\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.35 2004/10/16 21:06:18 scolebourne Exp $\n+ * @version $Id: DateUtils.java,v 1.36 2004/10/21 01:18:33 ggregory Exp $\n  */\n public class DateUtils {\n     \n             return spot.clone();\n         }\n \n+        /**\n+         * Always throws UnsupportedOperationException.\n+         * \n+         * @throws UnsupportedOperationException\n+         * @see java.util.Iterator#remove()\n+         */\n         public void remove() {\n             throw new UnsupportedOperationException();\n         }", "timestamp": 1098321514, "metainfo": ""}