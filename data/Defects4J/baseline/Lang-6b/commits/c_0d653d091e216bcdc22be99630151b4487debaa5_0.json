{"sha": "0d653d091e216bcdc22be99630151b4487debaa5", "log": "corrected style issues (mostly empty blocks and missing javadocs)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateFormatUtils.java\n      * to operate.</p>\n      */\n     public DateFormatUtils() {\n+      ; // empty constructor\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n      * instance to operate.</p>\n      */\n     public DateUtils() {\n+      ; // empty constructor\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n      * <p>Inner class defining a rule.</p>\n      */\n     private interface Rule {\n+        /**\n+         * Returns the estimated lentgh of the result.\n+         * \n+         * @return the estimated length\n+         */\n         int estimateLength();\n+        \n+        /**\n+         * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n+         * \n+         * @param buffer the output buffer\n+         * @param calendar calendar to be appended\n+         */\n         void appendTo(StringBuffer buffer, Calendar calendar);\n     }\n \n      * <p>Inner class defining a numeric rule.</p>\n      */\n     private interface NumberRule extends Rule {\n+        /**\n+         * Appends the specified value to the output buffer based on the rule implementation.\n+         * \n+         * @param buffer the output buffer\n+         * @param value the value to be appended\n+         */\n         void appendTo(StringBuffer buffer, int value);\n     }\n \n     private static class CharacterLiteral implements Rule {\n         private final char mValue;\n \n+        /**\n+         * Constructs a new instance of <code>CharacterLiteral</code>\n+         * to hold the specified value.\n+         * \n+         * @param value the character literal\n+         */\n         CharacterLiteral(char value) {\n             mValue = value;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 1;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             buffer.append(mValue);\n         }\n     private static class StringLiteral implements Rule {\n         private final String mValue;\n \n+        /**\n+         * Constructs a new instance of <code>StringLiteral</code>\n+         * to hold the specified value.\n+         * \n+         * @param value the string literal\n+         */\n         StringLiteral(String value) {\n             mValue = value;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return mValue.length();\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             buffer.append(mValue);\n         }\n         private final int mField;\n         private final String[] mValues;\n \n+        /**\n+         * Constructs an instance of <code>TextField</code>\n+         * with the specified field and values.\n+         * \n+         * @param field the field\n+         * @param values the field values\n+         */\n         TextField(int field, String[] values) {\n             mField = field;\n             mValues = values;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             int max = 0;\n             for (int i=mValues.length; --i >= 0; ) {\n             return max;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             buffer.append(mValues[calendar.get(mField)]);\n         }\n         \n         private final int mField;\n \n+        /**\n+         * Constructs an instance of <code>UnpadedNumberField</code> with the specified field.\n+         * \n+         * @param field the field\n+         */\n         UnpaddedNumberField(int field) {\n             mField = field;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 4;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             appendTo(buffer, calendar.get(mField));\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public final void appendTo(StringBuffer buffer, int value) {\n             if (value < 10) {\n                 buffer.append((char)(value + '0'));\n      */\n     private static class UnpaddedMonthField implements NumberRule {\n         static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();\n-        \n+\n+        /**\n+         * Constructs an instance of <code>UnpaddedMonthField</code>.\n+         *\n+         */\n         UnpaddedMonthField() {\n-        }\n-\n+          ; // empty constructor\n+        }\n+\n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 2;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public final void appendTo(StringBuffer buffer, int value) {\n             if (value < 10) {\n                 buffer.append((char)(value + '0'));\n         private final int mField;\n         private final int mSize;\n \n+        /**\n+         * Constructs an instance of <code>PaddedNumberField</code>.\n+         * \n+         * @param field the field\n+         * @param size size of the output field\n+         */\n         PaddedNumberField(int field, int size) {\n             if (size < 3) {\n                 // Should use UnpaddedNumberField or TwoDigitNumberField.\n             mSize = size;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 4;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             appendTo(buffer, calendar.get(mField));\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public final void appendTo(StringBuffer buffer, int value) {\n             if (value < 100) {\n                 for (int i = mSize; --i >= 2; ) {\n     private static class TwoDigitNumberField implements NumberRule {\n         private final int mField;\n \n+        /**\n+         * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n+         * \n+         * @param field the field\n+         */\n         TwoDigitNumberField(int field) {\n             mField = field;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 2;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             appendTo(buffer, calendar.get(mField));\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public final void appendTo(StringBuffer buffer, int value) {\n             if (value < 100) {\n                 buffer.append((char)(value / 10 + '0'));\n      */\n     private static class TwoDigitYearField implements NumberRule {\n         static final TwoDigitYearField INSTANCE = new TwoDigitYearField();\n-        \n+\n+        /**\n+         * Constructs an instance of <code>TwoDigitYearField</code>.\n+         */\n         TwoDigitYearField() {\n-        }\n-\n+          ; // empty constructor\n+        }\n+\n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 2;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             appendTo(buffer, calendar.get(Calendar.YEAR) % 100);\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public final void appendTo(StringBuffer buffer, int value) {\n             buffer.append((char)(value / 10 + '0'));\n             buffer.append((char)(value % 10 + '0'));\n      */\n     private static class TwoDigitMonthField implements NumberRule {\n         static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();\n-        \n+\n+        /**\n+         * Constructs an instance of <code>TwoDigitMonthField</code>.\n+         */\n         TwoDigitMonthField() {\n-        }\n-\n+          ; // empty constructor\n+        }\n+\n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 2;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             appendTo(buffer, calendar.get(Calendar.MONTH) + 1);\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public final void appendTo(StringBuffer buffer, int value) {\n             buffer.append((char)(value / 10 + '0'));\n             buffer.append((char)(value % 10 + '0'));\n     private static class TwelveHourField implements NumberRule {\n         private final NumberRule mRule;\n \n+        /**\n+         * Constructs an instance of <code>TwelveHourField</code> with the specified\n+         * <code>NumberRule</code>.\n+         * \n+         * @param rule the rule\n+         */\n         TwelveHourField(NumberRule rule) {\n             mRule = rule;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return mRule.estimateLength();\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             int value = calendar.get(Calendar.HOUR);\n             if (value == 0) {\n             mRule.appendTo(buffer, value);\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, int value) {\n             mRule.appendTo(buffer, value);\n         }\n     private static class TwentyFourHourField implements NumberRule {\n         private final NumberRule mRule;\n \n+        /**\n+         * Constructs an instance of <code>TwentyFourHourField</code> with the specified\n+         * <code>NumberRule</code>.\n+         * \n+         * @param rule the rule\n+         */\n         TwentyFourHourField(NumberRule rule) {\n             mRule = rule;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return mRule.estimateLength();\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             int value = calendar.get(Calendar.HOUR_OF_DAY);\n             if (value == 0) {\n             mRule.appendTo(buffer, value);\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, int value) {\n             mRule.appendTo(buffer, value);\n         }\n         private final String mStandard;\n         private final String mDaylight;\n \n+        /**\n+         * Constructs an instance of <code>TimeZoneNameRule</code> with the specified properties.\n+         * \n+         * @param timeZone the time zone\n+         * @param timeZoneForced if <code>true</code> the time zone is forced into standard and daylight\n+         * @param locale the locale\n+         * @param style the style\n+         */\n         TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {\n             mTimeZone = timeZone;\n             mTimeZoneForced = timeZoneForced;\n             }\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             if (mTimeZoneForced) {\n                 return Math.max(mStandard.length(), mDaylight.length());\n             }\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             if (mTimeZoneForced) {\n                 if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\n         \n         final boolean mColon;\n         \n+        /**\n+         * Constructs an instance of <code>TimeZoneNumberRule</code> with the specified properties.\n+         * \n+         * @param colon add colon between HH and MM in the output if <code>true</code>\n+         */\n         TimeZoneNumberRule(boolean colon) {\n             mColon = colon;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int estimateLength() {\n             return 5;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n             \n         private final int mStyle;\n         private final Locale mLocale;\n \n+        /**\n+         * Constructs an instance of <code>TimeZoneDisplayKey</code> with the specified properties.\n+         *  \n+         * @param timeZone the time zone\n+         * @param daylight adjust the style for daylight saving time if <code>true</code>\n+         * @param style the timezone style\n+         * @param locale the timezone locale\n+         */\n         TimeZoneDisplayKey(TimeZone timeZone,\n                            boolean daylight, int style, Locale locale) {\n             mTimeZone = timeZone;\n             mLocale = locale;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int hashCode() {\n             return mStyle * 31 + mLocale.hashCode();\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public boolean equals(Object obj) {\n             if (this == obj) {\n                 return true;\n         private final Object mObj1;\n         private final Object mObj2;\n \n+        /**\n+         * Constructs an instance of <code>Pair</code> to hold the specified objects.\n+         * @param obj1 one object in the pair\n+         * @param obj2 second object in the pair\n+         */\n         public Pair(Object obj1, Object obj2) {\n             mObj1 = obj1;\n             mObj2 = obj2;\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public boolean equals(Object obj) {\n             if (this == obj) {\n                 return true;\n                  key.mObj2 == null : mObj2.equals(key.mObj2));\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public int hashCode() {\n             return\n                 (mObj1 == null ? 0 : mObj1.hashCode()) +\n                 (mObj2 == null ? 0 : mObj2.hashCode());\n         }\n \n+        /**\n+         * {@inheritDoc}\n+         */\n         public String toString() {\n             return \"[\" + mObj1 + ':' + mObj2 + ']';\n         }\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n      * <p>Constructor.</p>\n      */\n     public StopWatch() {\n+      ; // empty constructor\n     }\n \n     /**", "timestamp": 1119808098, "metainfo": ""}