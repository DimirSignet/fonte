{"sha": "afe5dff79fc23d222ba1f1481fbbf55e09d2e6da", "log": "LANG-831 FastDateParser does not handle white-space properly  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n      * @return The <code>StringBuilder</code>\n      */\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n         assertEquals(cal.getTime(), fdf.parse(\"'20030210A'B153320989'\"));\n     }\n \n+\n+    @Test\n+    public void testLANG_831() throws Exception {\n+        testSdfAndFdp(\"M E\",\"3  Tue\", true);\n+    }\n+\n+    private void testSdfAndFdp(String format, String date, boolean shouldFail)\n+            throws Exception {\n+        Date dfdp = null;\n+        Date dsdf = null;\n+        Throwable f = null;\n+        Throwable s = null;\n+\n+        try {\n+            SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);\n+            sdf.setTimeZone(NEW_YORK);\n+            dsdf = sdf.parse(date);\n+            if (shouldFail) {\n+                Assert.fail(\"Expected SDF failure, but got \" + dsdf + \" for [\"+format+\",\"+date+\"]\");\n+            }\n+        } catch (Exception e) {\n+            s = e;\n+            if (!shouldFail) {\n+                throw e;\n+            }\n+//            System.out.println(\"sdf:\"+format+\"/\"+date+\"=>\"+e);\n+        }\n+\n+        try {\n+            DateParser fdp = getInstance(format, NEW_YORK, Locale.US);\n+            dfdp = fdp.parse(date);\n+            if (shouldFail) {\n+                Assert.fail(\"Expected FDF failure, but got \" + dfdp + \" for [\"+format+\",\"+date+\"] using \"+((FastDateParser)fdp).getParsePattern());\n+            }\n+        } catch (Exception e) {\n+            f = e;\n+            if (!shouldFail) {\n+                throw e;\n+            }\n+//            System.out.println(\"fdf:\"+format+\"/\"+date+\"=>\"+e);\n+        }\n+        // SDF and FDF should produce equivalent results\n+        assertTrue(\"Should both or neither throw Exceptions\", (f==null)==(s==null));\n+        assertEquals(\"Parsed dates should be equal\", dsdf, dfdp);\n+    }\n+\n     @Test\n     public void testDayOf() throws ParseException {\n         Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);", "timestamp": 1348704555, "metainfo": ""}