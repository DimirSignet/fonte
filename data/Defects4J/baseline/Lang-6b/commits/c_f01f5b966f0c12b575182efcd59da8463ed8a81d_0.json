{"sha": "f01f5b966f0c12b575182efcd59da8463ed8a81d", "log": "junit 4  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.*;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.BooleanUtils}.\n  *\n  * @version $Id$\n  */\n-public class BooleanUtilsTest extends TestCase {\n-\n-    public BooleanUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+public class BooleanUtilsTest {\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new BooleanUtils());\n         Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_negate_Boolean() {\n         assertSame(null, BooleanUtils.negate(null));\n         assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_isTrue_Boolean() {\n         assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));\n         assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));\n         assertEquals(false, BooleanUtils.isTrue((Boolean) null));\n     }\n \n+    @Test\n     public void test_isNotTrue_Boolean() {\n         assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));\n         assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_isFalse_Boolean() {\n         assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));\n         assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));\n         assertEquals(false, BooleanUtils.isFalse((Boolean) null));\n     }\n \n+    @Test\n     public void test_isNotFalse_Boolean() {\n         assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));\n         assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toBoolean_Boolean() {\n         assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n         assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n         assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n     }\n \n+    @Test\n     public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n         assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n         assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toBoolean_int() {\n         assertEquals(true, BooleanUtils.toBoolean(1));\n         assertEquals(true, BooleanUtils.toBoolean(-1));\n         assertEquals(false, BooleanUtils.toBoolean(0));\n     }\n     \n+    @Test\n     public void test_toBooleanObject_int() {\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\n         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\n     }\n     \n+    @Test\n     public void test_toBooleanObject_Integer() {\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toBoolean_int_int_int() {\n         assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n         assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void test_toBoolean_Integer_Integer_Integer() {\n         Integer six = new Integer(6);\n         Integer seven = new Integer(7);\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toBooleanObject_int_int_int() {\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\n         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n         Integer six = new Integer(6);\n         Integer seven = new Integer(7);\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toInteger_boolean() {\n         assertEquals(1, BooleanUtils.toInteger(true));\n         assertEquals(0, BooleanUtils.toInteger(false));\n     }\n     \n+    @Test\n     public void test_toIntegerObject_boolean() {\n         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n         assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n     }\n     \n+    @Test\n     public void test_toIntegerObject_Boolean() {\n         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n         assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toInteger_boolean_int_int() {\n         assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\n         assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\n     }\n     \n+    @Test\n     public void test_toInteger_Boolean_int_int_int() {\n         assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\n         assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\n         assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\n     }\n     \n+    @Test\n     public void test_toIntegerObject_boolean_Integer_Integer() {\n         Integer six = new Integer(6);\n         Integer seven = new Integer(7);\n         assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n     }\n     \n+    @Test\n     public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n         Integer six = new Integer(6);\n         Integer seven = new Integer(7);\n     \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toBooleanObject_String() {\n         assertEquals(null, BooleanUtils.toBooleanObject((String) null));\n         assertEquals(null, BooleanUtils.toBooleanObject(\"\"));\n         assertEquals(null, BooleanUtils.toBooleanObject(\"yoo\"));\n     }\n     \n+    @Test\n     public void test_toBooleanObject_String_String_String_String() {\n         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, \"N\", \"U\"));\n         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, \"Y\", null, \"U\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toBoolean_String() {\n         assertEquals(false, BooleanUtils.toBoolean((String) null));\n         assertEquals(false, BooleanUtils.toBoolean(\"\"));\n         assertEquals(false, BooleanUtils.toBoolean(\"yoo\"));\n     }\n \n+    @Test\n     public void test_toBoolean_String_String_String() {\n         assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n         assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toStringTrueFalse_Boolean() {\n         assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));\n         assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\n         assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\n     }\n     \n+    @Test\n     public void test_toStringOnOff_Boolean() {\n         assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));\n         assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\n         assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\n     }\n     \n+    @Test\n     public void test_toStringYesNo_Boolean() {\n         assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));\n         assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\n         assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\n     }\n     \n+    @Test\n     public void test_toString_Boolean_String_String_String() {\n         assertEquals(\"U\", BooleanUtils.toString((Boolean) null, \"Y\", \"N\", \"U\"));\n         assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void test_toStringTrueFalse_boolean() {\n         assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\n         assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\n     }\n     \n+    @Test\n     public void test_toStringOnOff_boolean() {\n         assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\n         assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\n     }\n     \n+    @Test\n     public void test_toStringYesNo_boolean() {\n         assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\n         assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\n     }\n     \n+    @Test\n     public void test_toString_boolean_String_String_String() {\n         assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\n         assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n     \n     //  testXor\n     //  -----------------------------------------------------------------------\n+    @Test\n     public void testXor_primitive_nullInput() {\n         final boolean[] b = null;\n         try {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Test\n     public void testXor_primitive_emptyInput() {\n         try {\n             BooleanUtils.xor(new boolean[] {});\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Test\n     public void testXor_primitive_validInput_2items() {\n         assertTrue(\n             \"True result for (true, true)\",\n             BooleanUtils.xor(new boolean[] { false, true }));\n     }\n \n+    @Test\n     public void testXor_primitive_validInput_3items() {\n         assertTrue(\n             \"False result for (false, false, true)\",\n             ! BooleanUtils.xor(new boolean[] { false, true, true }));\n     }\n \n+    @Test\n     public void testXor_object_nullInput() {\n         final Boolean[] b = null;\n         try {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Test\n     public void testXor_object_emptyInput() {\n         try {\n             BooleanUtils.xor(new Boolean[] {});\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void testXor_object_nullElementInput() {\n         try {\n             BooleanUtils.xor(new Boolean[] {null});\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Test\n     public void testXor_object_validInput_2items() {\n         assertTrue(\n             \"True result for (true, true)\",\n                 .booleanValue());\n     }\n \n+    @Test\n     public void testXor_object_validInput_3items() {\n         assertTrue(\n             \"False result for (false, false, true)\",\n                         Boolean.TRUE,\n                         Boolean.TRUE })\n                 .booleanValue());\n-                \n     }\n \n }", "timestamp": 1310865005, "metainfo": ""}