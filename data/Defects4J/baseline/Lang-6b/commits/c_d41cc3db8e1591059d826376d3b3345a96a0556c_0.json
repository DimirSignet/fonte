{"sha": "d41cc3db8e1591059d826376d3b3345a96a0556c", "log": "[LANG-824] Conversion of 3.x JUnit tests to 4.x; thanks to Duncan Jones  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.ArrayUtils}.\n  *\n  * @version $Id$\n  */\n-public class ArrayUtilsTest extends TestCase {\n-\n-    public ArrayUtilsTest(String name) {\n-        super(name);\n-    }\n+public class ArrayUtilsTest  {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new ArrayUtils());\n         Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToString() {\n         assertEquals(\"{}\", ArrayUtils.toString(null));\n         assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testHashCode() {\n         long[][] array1 = new long[][] {{2,5}, {4,5}};\n         long[][] array2 = new long[][] {{2,5}, {4,6}};\n         assertEquals(false, ArrayUtils.isEquals(array2, array1));\n     }\n \n+    @Test\n     public void testIsEquals() {\n         long[][] larray1 = new long[][]{{2, 5}, {4, 5}};\n         long[][] larray2 = new long[][]{{2, 5}, {4, 6}};\n     /**\n      * Tests generic array creation with parameters of same type.\n      */\n+    @Test\n     public void testArrayCreation()\n     {\n         final String[] array = ArrayUtils.toArray(\"foo\", \"bar\");\n     /**\n      * Tests generic array creation with general return type.\n      */\n+    @Test\n     public void testArrayCreationWithGeneralReturnType()\n     {\n         final Object obj = ArrayUtils.toArray(\"foo\", \"bar\");\n     /**\n      * Tests generic array creation with parameters of common base type.\n      */\n+    @Test\n     public void testArrayCreationWithDifferentTypes()\n     {\n         final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));\n     /**\n      * Tests generic array creation with generic type.\n      */\n+    @Test\n     public void testIndirectArrayCreation()\n     {\n         final String[] array = toArrayPropagatingType(\"foo\", \"bar\");\n     /**\n      * Tests generic empty array creation with generic type.\n      */\n+    @Test\n     public void testEmptyArrayCreation()\n     {\n         final String[] array = ArrayUtils.<String>toArray();\n     /**\n      * Tests indirect generic empty array creation with generic type.\n      */\n+    @Test\n     public void testIndirectEmptyArrayCreation()\n     {\n         final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToMap() {\n         Map<?, ?> map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n         \n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testClone() {\n-        assertEquals(null, ArrayUtils.clone((Object[]) null));\n+        assertArrayEquals(null, ArrayUtils.clone((Object[]) null));\n         Object[] original1 = new Object[0];\n         Object[] cloned1 = ArrayUtils.clone(original1);\n         assertTrue(Arrays.equals(original1, cloned1));\n         assertSame(original1[2], cloned1[2]);\n     }\n \n+    @Test\n     public void testCloneBoolean() {\n         assertEquals(null, ArrayUtils.clone((boolean[]) null));\n         boolean[] original = new boolean[] {true, false};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneLong() {\n         assertEquals(null, ArrayUtils.clone((long[]) null));\n         long[] original = new long[] {0L, 1L};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneInt() {\n         assertEquals(null, ArrayUtils.clone((int[]) null));\n         int[] original = new int[] {5, 8};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneShort() {\n         assertEquals(null, ArrayUtils.clone((short[]) null));\n         short[] original = new short[] {1, 4};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneChar() {\n         assertEquals(null, ArrayUtils.clone((char[]) null));\n         char[] original = new char[] {'a', '4'};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneByte() {\n         assertEquals(null, ArrayUtils.clone((byte[]) null));\n         byte[] original = new byte[] {1, 6};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneDouble() {\n         assertEquals(null, ArrayUtils.clone((double[]) null));\n         double[] original = new double[] {2.4d, 5.7d};\n         assertTrue(original != cloned);\n     }\n     \n+    @Test\n     public void testCloneFloat() {\n         assertEquals(null, ArrayUtils.clone((float[]) null));\n         float[] original = new float[] {2.6f, 6.4f};\n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testNullToEmptyBoolean() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyLong() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyInt() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyShort() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyChar() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyByte() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyDouble() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyFloat() {\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));\n         assertTrue(empty != result);\n     }\n \n+    @Test\n     public void testNullToEmptyObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\n         // Test valid array handling\n         Object[] original = new Object[] {Boolean.TRUE, Boolean.FALSE};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Object[] empty = new Object[]{};\n         Object[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n \n+    @Test\n     public void testNullToEmptyString() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));\n         // Test valid array handling\n         String[] original = new String[] {\"abc\", \"def\"};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         String[] empty = new String[]{};\n         String[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);\n         assertTrue(empty != result);\n     }\n \n+    @Test\n     public void testNullToEmptyBooleanObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));\n         // Test valid array handling\n         Boolean[] original = new Boolean[] {Boolean.TRUE, Boolean.FALSE};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Boolean[] empty = new Boolean[]{};\n         Boolean[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyLongObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\n         // Test valid array handling\n         @SuppressWarnings(\"boxing\")\n         Long[] original = new Long[] {1L, 2L};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Long[] empty = new Long[]{};\n         Long[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyIntObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));\n         // Test valid array handling\n         Integer[] original = new Integer[] {1, 2};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Integer[] empty = new Integer[]{};\n         Integer[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyShortObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\n         // Test valid array handling\n         @SuppressWarnings(\"boxing\")\n         Short[] original = new Short[] {1, 2};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Short[] empty = new Short[]{};\n         Short[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyCharObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));\n         // Test valid array handling\n         Character[] original = new Character[] {'a', 'b'};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Character[] empty = new Character[]{};\n         Character[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyByteObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));\n         // Test valid array handling\n         Byte[] original = new Byte[] {0x0F, 0x0E};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Byte[] empty = new Byte[]{};\n         Byte[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyDoubleObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));\n         // Test valid array handling\n         Double[] original = new Double[] {1D, 2D};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Double[] empty = new Double[]{};\n         Double[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n     \n+    @Test\n     public void testNullToEmptyFloatObject() {\n         // Test null handling\n-        assertEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));\n+        assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));\n         // Test valid array handling\n         Float[] original = new Float[] {2.6f, 3.8f};\n-        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Float[] empty = new Float[]{};\n         Float[] result = ArrayUtils.nullToEmpty(empty);\n-        assertEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);\n+        assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);\n         assertTrue(empty != result);\n     }\n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testSubarrayObject() {\n         Object[] nullArray = null;\n         Object[] objectArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n         } catch (ClassCastException e) {}\n     }\n \n+    @Test\n     public void testSubarrayLong() {\n         long[] nullArray = null;\n         long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };\n \n     }\n \n+    @Test\n     public void testSubarrayInt() {\n         int[] nullArray = null;\n         int[] array = { 10, 11, 12, 13, 14, 15 };\n \n     }\n \n+    @Test\n     public void testSubarrayShort() {\n         short[] nullArray = null;\n         short[] array = { 10, 11, 12, 13, 14, 15 };\n \n     }\n \n+    @Test\n     public void testSubarrChar() {\n         char[] nullArray = null;\n         char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };\n \n     }\n \n+    @Test\n     public void testSubarrayByte() {\n         byte[] nullArray = null;\n         byte[] array = { 10, 11, 12, 13, 14, 15 };\n \n     }\n \n+    @Test\n     public void testSubarrayDouble() {\n         double[] nullArray = null;\n         double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };\n \n     }\n \n+    @Test\n     public void testSubarrayFloat() {\n         float[] nullArray = null;\n         float[] array = { 10, 11, 12, 13, 14, 15 };\n \n     }\n \n+    @Test\n     public void testSubarrayBoolean() {\n         boolean[] nullArray = null;\n         boolean[] array = { true, true, false, true, false, true };\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSameLength() {\n         Object[] nullArray = null;\n         Object[] emptyArray = new Object[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n \n+    @Test\n     public void testSameLengthBoolean() {\n         boolean[] nullArray = null;\n         boolean[] emptyArray = new boolean[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthLong() {\n         long[] nullArray = null;\n         long[] emptyArray = new long[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthInt() {\n         int[] nullArray = null;\n         int[] emptyArray = new int[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthShort() {\n         short[] nullArray = null;\n         short[] emptyArray = new short[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthChar() {\n         char[] nullArray = null;\n         char[] emptyArray = new char[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthByte() {\n         byte[] nullArray = null;\n         byte[] emptyArray = new byte[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthDouble() {\n         double[] nullArray = null;\n         double[] emptyArray = new double[0];\n         assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n+    @Test\n     public void testSameLengthFloat() {\n         float[] nullArray = null;\n         float[] emptyArray = new float[0];\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSameType() {\n         try {\n             ArrayUtils.isSameType(null, null);\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReverse() {\n         StringBuffer str1 = new StringBuffer(\"pick\");\n         String str2 = \"a\";\n \n         array = null;\n         ArrayUtils.reverse(array);\n-        assertEquals(null, array);\n-    }\n-\n+        assertArrayEquals(null, array);\n+    }\n+\n+    @Test\n     public void testReverseLong() {\n         long[] array = new long[] {1L, 2L, 3L};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseInt() {\n         int[] array = new int[] {1, 2, 3};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseShort() {\n         short[] array = new short[] {1, 2, 3};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseChar() {\n         char[] array = new char[] {'a', 'f', 'C'};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseByte() {\n         byte[] array = new byte[] {2, 3, 4};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseDouble() {\n         double[] array = new double[] {0.3d, 0.4d, 0.5d};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseFloat() {\n         float[] array = new float[] {0.3f, 0.4f, 0.5f};\n         ArrayUtils.reverse(array);\n         assertEquals(null, array);\n     }\n     \n+    @Test\n     public void testReverseBoolean() {\n         boolean[] array = new boolean[] {false, false, true};\n         ArrayUtils.reverse(array);\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOf() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(-1, ArrayUtils.indexOf(null, null));\n         assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n     }\n \n+    @Test\n     public void testIndexOfWithStartIndex() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 8));\n     }\n \n+    @Test\n     public void testLastIndexOf() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n     }\n \n+    @Test\n     public void testLastIndexOfWithStartIndex() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\n         assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n     }\n \n+    @Test\n     public void testContains() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(false, ArrayUtils.contains(null, null));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfLong() {\n         long[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, 99));\n     }\n \n+    @Test\n     public void testIndexOfLongWithStartIndex() {\n         long[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n     }\n \n+    @Test\n     public void testLastIndexOfLong() {\n         long[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n     }\n \n+    @Test\n     public void testLastIndexOfLongWithStartIndex() {\n         long[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n     }\n \n+    @Test\n     public void testContainsLong() {\n         long[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, 1));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfInt() {\n         int[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, 99));\n     }\n \n+    @Test\n     public void testIndexOfIntWithStartIndex() {\n         int[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n     }\n \n+    @Test\n     public void testLastIndexOfInt() {\n         int[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n     }\n \n+    @Test\n     public void testLastIndexOfIntWithStartIndex() {\n         int[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n     }\n \n+    @Test\n     public void testContainsInt() {\n         int[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, 1));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfShort() {\n         short[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\n     }\n \n+    @Test\n     public void testIndexOfShortWithStartIndex() {\n         short[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n     }\n \n+    @Test\n     public void testLastIndexOfShort() {\n         short[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n     }\n \n+    @Test\n     public void testLastIndexOfShortWithStartIndex() {\n         short[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n     }\n \n+    @Test\n     public void testContainsShort() {\n         short[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (short) 1));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfChar() {\n         char[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, 'a'));\n         assertEquals(-1, ArrayUtils.indexOf(array, 'e'));\n     }\n \n+    @Test\n     public void testIndexOfCharWithStartIndex() {\n         char[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));\n     }\n \n+    @Test\n     public void testLastIndexOfChar() {\n         char[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n     }\n \n+    @Test\n     public void testLastIndexOfCharWithStartIndex() {\n         char[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));\n     }\n \n+    @Test\n     public void testContainsChar() {\n         char[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, 'b'));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfByte() {\n         byte[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\n     }\n \n+    @Test\n     public void testIndexOfByteWithStartIndex() {\n         byte[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n     }\n \n+    @Test\n     public void testLastIndexOfByte() {\n         byte[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n     }\n \n+    @Test\n     public void testLastIndexOfByteWithStartIndex() {\n         byte[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n     }\n \n+    @Test\n     public void testContainsByte() {\n         byte[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (byte) 1));\n     \n     //-----------------------------------------------------------------------\n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testIndexOfDouble() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testIndexOfDoubleTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testIndexOfDoubleWithStartIndex() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n     }\n     \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testIndexOfDoubleWithStartIndexTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testLastIndexOfDouble() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testLastIndexOfDoubleTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testLastIndexOfDoubleWithStartIndex() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testLastIndexOfDoubleWithStartIndexTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testContainsDouble() {\n         double[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (double) 1));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testContainsDoubleTolerance() {\n         double[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n     \n     //-----------------------------------------------------------------------\n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testIndexOfFloat() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testIndexOfFloatWithStartIndex() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testLastIndexOfFloat() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testLastIndexOfFloatWithStartIndex() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n     }\n \n     @SuppressWarnings(\"cast\")\n+    @Test\n     public void testContainsFloat() {\n         float[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (float) 1));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfBoolean() {\n         boolean[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, true));\n         assertEquals(-1, ArrayUtils.indexOf(array, false));\n     }\n \n+    @Test\n     public void testIndexOfBooleanWithStartIndex() {\n         boolean[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\n     }\n \n+    @Test\n     public void testLastIndexOfBoolean() {\n         boolean[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\n     }\n \n+    @Test\n     public void testLastIndexOfBooleanWithStartIndex() {\n         boolean[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n     }\n \n+    @Test\n     public void testContainsBoolean() {\n         boolean[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, true));\n     \n     // testToPrimitive/Object for boolean\n     //  -----------------------------------------------------------------------\n+    @Test\n     public void testToPrimitive_boolean() {\n         final Boolean[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testToPrimitive_boolean_boolean() {\n         assertEquals(null, ArrayUtils.toPrimitive(null, false));\n         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));\n         );\n     }\n \n+    @Test\n     public void testToObject_boolean() {\n         final boolean[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n         assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\n         assertTrue(Arrays.equals(\n             new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},\n \n     // testToPrimitive/Object for byte\n     //  -----------------------------------------------------------------------\n+    @Test\n     public void testToPrimitive_char() {\n         final Character[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testToPrimitive_char_char() {\n         final Character[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE));\n         );\n     }\n \n+    @Test\n     public void testToObject_char() {\n         final char[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n         \n         assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \n             ArrayUtils.toObject(new char[0]));\n     \n     // testToPrimitive/Object for byte\n     //  -----------------------------------------------------------------------\n+    @Test\n     public void testToPrimitive_byte() {\n         final Byte[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testToPrimitive_byte_byte() {\n         final Byte[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\n         );\n     }\n \n+    @Test\n     public void testToObject_byte() {\n         final byte[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n         \n         assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, \n             ArrayUtils.toObject(new byte[0]));\n \n     // testToPrimitive/Object for short\n     //  -----------------------------------------------------------------------\n+    @Test\n     public void testToPrimitive_short() {\n         final Short[] b = null;\n         assertEquals(null, ArrayUtils.toPrimitive(b));\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testToPrimitive_short_short() {\n         final Short[] s = null;\n         assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\n         );\n     }\n \n+    @Test\n     public void testToObject_short() {\n         final short[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n         \n         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, \n         ArrayUtils.toObject(new short[0]));\n \n     //  testToPrimitive/Object for int\n     //  -----------------------------------------------------------------------\n+     @Test\n      public void testToPrimitive_int() {\n          final Integer[] b = null;\n          assertEquals(null, ArrayUtils.toPrimitive(b));\n          } catch (NullPointerException ex) {}\n      }\n \n+     @Test\n      public void testToPrimitive_int_int() {\n          final Long[] l = null;\n          assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\n          );\n      }\n      \n+    @Test\n     public void testToPrimitive_intNull() {\n         Integer[] iArray = null;\n         assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));\n     }\n \n+    @Test\n     public void testToObject_int() {\n         final int[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n     \n         assertSame(\n             ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,\n \n     //  testToPrimitive/Object for long\n     //  -----------------------------------------------------------------------\n+     @Test\n      public void testToPrimitive_long() {\n          final Long[] b = null;\n          assertEquals(null, ArrayUtils.toPrimitive(b));\n          } catch (NullPointerException ex) {}\n      }\n \n+     @Test\n      public void testToPrimitive_long_long() {\n          final Long[] l = null;\n          assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\n          );\n      }\n      \n+    @Test\n     public void testToObject_long() {\n         final long[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n     \n         assertSame(\n             ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,\n \n     //  testToPrimitive/Object for float\n     //  -----------------------------------------------------------------------\n+     @Test\n      public void testToPrimitive_float() {\n          final Float[] b = null;\n          assertEquals(null, ArrayUtils.toPrimitive(b));\n          } catch (NullPointerException ex) {}\n      }\n \n+     @Test\n      public void testToPrimitive_float_float() {\n          final Float[] l = null;\n          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\n          );\n      }\n      \n+    @Test\n     public void testToObject_float() {\n         final float[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n     \n         assertSame(\n             ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,\n \n     //  testToPrimitive/Object for double\n     //  -----------------------------------------------------------------------\n+     @Test\n      public void testToPrimitive_double() {\n          final Double[] b = null;\n          assertEquals(null, ArrayUtils.toPrimitive(b));\n          } catch (NullPointerException ex) {}\n      }\n \n+     @Test\n      public void testToPrimitive_double_double() {\n          final Double[] l = null;\n          assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\n          );\n      }\n      \n+    @Test\n     public void testToObject_double() {\n         final double[] b = null;\n-        assertEquals(null, ArrayUtils.toObject(b));\n+        assertArrayEquals(null, ArrayUtils.toObject(b));\n     \n         assertSame(\n             ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,\n     /**\n      * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.\n      */\n+    @Test\n     public void testIsEmptyObject() {\n         Object[] emptyArray = new Object[] {};\n         Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n      * {@link ArrayUtils#isEmpty(float[])} and\n      * {@link ArrayUtils#isEmpty(boolean[])}.\n      */\n+    @Test\n     public void testIsEmptyPrimitives() {\n         long[] emptyLongArray = new long[] {};\n         long[] notEmptyLongArray = new long[] { 1L };\n    /**\n      * Test for {@link ArrayUtils#isNotEmpty(java.lang.Object[])}.\n      */\n+    @Test\n     public void testIsNotEmptyObject() {\n         Object[] emptyArray = new Object[] {};\n         Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n      * {@link ArrayUtils#isNotEmpty(float[])} and\n      * {@link ArrayUtils#isNotEmpty(boolean[])}.\n      */\n+    @Test\n     public void testIsNotEmptyPrimitives() {\n         long[] emptyLongArray = new long[] {};\n         long[] notEmptyLongArray = new long[] { 1L };\n         assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));\n     }\n     // ------------------------------------------------------------------------\n+    @Test\n     public void testGetLength() {\n         assertEquals(0, ArrayUtils.getLength(null));\n         \n--- a/src/test/java/org/apache/commons/lang3/BitFieldTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BitFieldTest.java\n  */\n package org.apache.commons.lang3;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n \n /**\n  * Class to test BitField functionality\n  *\n  * @version $Id$\n  */\n-public class BitFieldTest extends TestCase {\n+public class BitFieldTest  {\n \n     private static final BitField bf_multi  = new BitField(0x3F80);\n     private static final BitField bf_single = new BitField(0x4000);\n     private static final BitField bf_zero = new BitField(0);\n \n     /**\n-     * Constructor BitFieldTest\n-     *\n-     * @param name\n-     */\n-    public BitFieldTest(String name) {\n-        super(name);\n-    }\n-\n-    /**\n      * test the getValue() method\n      */\n+    @Test\n     public void testGetValue() {\n         assertEquals(bf_multi.getValue(-1), 127);\n         assertEquals(bf_multi.getValue(0), 0);\n     /**\n      * test the getShortValue() method\n      */\n+    @Test\n     public void testGetShortValue() {\n         assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);\n         assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\n     /**\n      * test the getRawValue() method\n      */\n+    @Test\n     public void testGetRawValue() {\n         assertEquals(bf_multi.getRawValue(-1), 0x3F80);\n         assertEquals(bf_multi.getRawValue(0), 0);\n     /**\n      * test the getShortRawValue() method\n      */\n+    @Test\n     public void testGetShortRawValue() {\n         assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);\n         assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\n     /**\n      * test the isSet() method\n      */\n+    @Test\n     public void testIsSet() {\n         assertTrue(!bf_multi.isSet(0));\n         assertTrue(!bf_zero.isSet(0));\n     /**\n      * test the isAllSet() method\n      */\n+    @Test\n     public void testIsAllSet() {\n         for (int j = 0; j < 0x3F80; j += 0x80) {\n             assertTrue(!bf_multi.isAllSet(j));\n     /**\n      * test the setValue() method\n      */\n+    @Test\n     public void testSetValue() {\n         for (int j = 0; j < 128; j++) {\n             assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n     /**\n      * test the setShortValue() method\n      */\n+    @Test\n     public void testSetShortValue() {\n         for (int j = 0; j < 128; j++) {\n             assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\n         assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);\n     }\n \n+    @Test\n     public void testByte() {\n         assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));\n         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\n     /**\n      * test the clear() method\n      */\n+    @Test\n     public void testClear() {\n         assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n         assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n     /**\n      * test the clearShort() method\n      */\n+    @Test\n     public void testClearShort() {\n         assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);\n         assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);\n     /**\n      * test the set() method\n      */\n+    @Test\n     public void testSet() {\n         assertEquals(bf_multi.set(0), 0x3F80);\n         assertEquals(bf_single.set(0), 0x4000);\n     /**\n      * test the setShort() method\n      */\n+    @Test\n     public void testSetShort() {\n         assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\n         assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\n     /**\n      * test the setBoolean() method\n      */\n+    @Test\n     public void testSetBoolean() {\n         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n     /**\n      * test the setShortBoolean() method\n      */\n+    @Test\n     public void testSetShortBoolean() {\n         assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\n         assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\n--- a/src/test/java/org/apache/commons/lang3/CharEncodingTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharEncodingTest.java\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_1;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_2;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_3;\n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n \n /**\n  * Tests CharEncoding.\n  * @see CharEncoding\n  * @version $Id$\n  */\n-public class CharEncodingTest extends TestCase {\n+public class CharEncodingTest  {\n \n     private void assertSupportedEncoding(String name) {\n         assertTrue(\"Encoding should be supported: \" + name, CharEncoding.isSupported(name));\n     /**\n      * The class can be instantiated.\n      */\n+    @Test\n     public void testConstructor() {\n         new CharEncoding();\n     }\n \n+    @Test\n     public void testMustBeSupportedJava1_3_1() {\n         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n             this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n         }\n     }\n \n+    @Test\n     public void testSupported() {\n         assertTrue(CharEncoding.isSupported(\"UTF8\"));\n         assertTrue(CharEncoding.isSupported(\"UTF-8\"));\n         assertTrue(CharEncoding.isSupported(\"ASCII\"));\n     }\n \n+    @Test\n     public void testNotSupported() {\n         assertFalse(CharEncoding.isSupported(null));\n         assertFalse(CharEncoding.isSupported(\"\"));\n         assertFalse(CharEncoding.isSupported(\"this is not a valid encoding name\"));\n     }\n \n+    @Test\n     public void testWorksOnJava1_1_8() {\n         //\n         // In this test, I simply deleted the encodings from the 1.3.1 list.\n         }\n     }\n \n+    @Test\n     public void testWorksOnJava1_2_2() {\n         //\n         // In this test, I simply deleted the encodings from the 1.3.1 list.\n--- a/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.lang.reflect.Modifier;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.CharRange}.\n  *\n  * @version $Id$\n  */\n-public class CharRangeTest extends TestCase {\n-\n-    public CharRangeTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+public class CharRangeTest  {\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testClass() {\n         // class changed to non-public in 3.0\n         assertEquals(false, Modifier.isPublic(CharRange.class.getModifiers()));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructorAccessors_is() {\n         CharRange rangea = CharRange.is('a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"a\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isNot() {\n         CharRange rangea = CharRange.isNot('a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"^a\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isIn_Same() {\n         CharRange rangea = CharRange.isIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"a\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isIn_Normal() {\n         CharRange rangea = CharRange.isIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"a-e\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isIn_Reversed() {\n         CharRange rangea = CharRange.isIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"a-e\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isNotIn_Same() {\n         CharRange rangea = CharRange.isNotIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"^a\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isNotIn_Normal() {\n         CharRange rangea = CharRange.isNotIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"^a-e\", rangea.toString());\n     }\n \n+    @Test\n     public void testConstructorAccessors_isNotIn_Reversed() {\n         CharRange rangea = CharRange.isNotIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testEquals_Object() {\n         CharRange rangea = CharRange.is('a');\n         CharRange rangeae = CharRange.isIn('a', 'e');\n         assertEquals(false, rangenotbf.equals(rangeae));\n     }\n \n+    @Test\n     public void testHashCode() {\n         CharRange rangea = CharRange.is('a');\n         CharRange rangeae = CharRange.isIn('a', 'e');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testContains_Char() {\n         CharRange range = CharRange.is('c');\n         assertEquals(false, range.contains('b'));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testContains_Charrange() {\n         CharRange a = CharRange.is('a');\n         CharRange b = CharRange.is('b');\n         assertEquals(true, notbd.contains(notae));\n     }\n \n+    @Test\n     public void testContainsNullArg() {\n         CharRange range = CharRange.is('a');\n         try {\n         }\n     }\n \n+    @Test\n     public void testIterator() {\n         CharRange a = CharRange.is('a');\n         CharRange ad = CharRange.isIn('a', 'd');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSerialization() {\n         CharRange range = CharRange.is('a');\n         assertEquals(range, SerializationUtils.clone(range)); \n--- a/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n+\n+import org.junit.Test;\n \n /**\n  * Tests CharSequenceUtils\n  *\n  * @version $Id: CharSequenceUtilsTest.java 1066341 2011-02-02 06:21:53Z bayard $\n  */\n-public class CharSequenceUtilsTest extends TestCase {\n+public class CharSequenceUtilsTest {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new CharSequenceUtils());\n         Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSubSequence() {\n         //\n         // null input\n--- a/src/test/java/org/apache/commons/lang3/CharSetTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSetTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.CharSet}.\n  *\n  * @version $Id$\n  */\n-public class CharSetTest extends TestCase {\n-    \n-    public CharSetTest(String name) {\n-        super(name);\n-    }\n+public class CharSetTest  {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testClass() {\n         assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetInstance() {\n         assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));\n         assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetInstance_Stringarray() {\n         assertEquals(null, CharSet.getInstance((String[]) null));\n         assertEquals(\"[]\", CharSet.getInstance(new String[0]).toString());\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_String_simple() {\n         CharSet set;\n         CharRange[] array;\n         assertEquals(\"^a-e\", array[0].toString());\n     }\n     \n+    @Test\n     public void testConstructor_String_combo() {\n         CharSet set;\n         CharRange[] array;\n         assertEquals(true, ArrayUtils.contains(array, CharRange.is('z')));\n     }\n     \n+    @Test\n     public void testConstructor_String_comboNegated() {\n         CharSet set;\n         CharRange[] array;\n         assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n     }\n \n+    @Test\n     public void testConstructor_String_oddDash() {\n         CharSet set;\n         CharRange[] array;\n         assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\n     }\n     \n+    @Test\n     public void testConstructor_String_oddNegate() {\n         CharSet set;\n         CharRange[] array;\n         assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n     }\n     \n+    @Test\n     public void testConstructor_String_oddCombinations() {\n         CharSet set;\n         CharRange[] array = null;\n     }\n         \n     //-----------------------------------------------------------------------    \n+    @Test\n     public void testEquals_Object() {\n         CharSet abc = CharSet.getInstance(\"abc\");\n         CharSet abc2 = CharSet.getInstance(\"abc\");\n         assertEquals(true, notatoc.equals(notatoc2));\n     }\n             \n+    @Test\n     public void testHashCode() {\n         CharSet abc = CharSet.getInstance(\"abc\");\n         CharSet abc2 = CharSet.getInstance(\"abc\");\n     }\n     \n     //-----------------------------------------------------------------------    \n+    @Test\n     public void testContains_Char() {\n         CharSet btod = CharSet.getInstance(\"b-d\");\n         CharSet dtob = CharSet.getInstance(\"d-b\");\n     }\n     \n     //-----------------------------------------------------------------------    \n+    @Test\n     public void testSerialization() {\n         CharSet set = CharSet.getInstance(\"a\");\n         assertEquals(set, SerializationUtils.clone(set)); \n     }\n     \n     //-----------------------------------------------------------------------    \n+    @Test\n     public void testStatics() {\n         CharRange[] array;\n         \n--- a/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.CharSetUtils}.\n  *\n  * @version $Id$\n  */\n-public class CharSetUtilsTest extends TestCase {\n-    \n-    public CharSetUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+public class CharSetUtilsTest  {\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new CharSetUtils());\n         Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSqueeze_StringString() {\n         assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n         assertEquals(null, CharSetUtils.squeeze(null, \"\"));\n         assertEquals(\"hello\", CharSetUtils.squeeze(\"helloo\", \"^l\"));\n     }\n     \n+    @Test\n     public void testSqueeze_StringStringarray() {\n         assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n         assertEquals(null, CharSetUtils.squeeze(null, new String[0]));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCount_StringString() {\n         assertEquals(0, CharSetUtils.count(null, (String) null));\n         assertEquals(0, CharSetUtils.count(null, \"\"));\n         assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\n     }\n     \n+    @Test\n     public void testCount_StringStringarray() {\n         assertEquals(0, CharSetUtils.count(null, (String[]) null));\n         assertEquals(0, CharSetUtils.count(null, new String[0]));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testKeep_StringString() {\n         assertEquals(null, CharSetUtils.keep(null, (String) null));\n         assertEquals(null, CharSetUtils.keep(null, \"\"));\n         assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\n     }\n     \n+    @Test\n     public void testKeep_StringStringarray() {\n         assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n         assertEquals(null, CharSetUtils.keep(null, new String[0]));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDelete_StringString() {\n         assertEquals(null, CharSetUtils.delete(null, (String) null));\n         assertEquals(null, CharSetUtils.delete(null, \"\"));\n         assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\n     }\n     \n+    @Test\n     public void testDelete_StringStringarray() {\n         assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n         assertEquals(null, CharSetUtils.delete(null, new String[0]));\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.apache.commons.lang3.JavaVersion.JAVA_1_5;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n import java.util.Map;\n import java.util.Set;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.ClassUtils}.\n  *\n  * @version $Id$\n  */\n-public class ClassUtilsTest extends TestCase {\n-\n-    public ClassUtilsTest(String name) {\n-        super(name);\n-    }\n+public class ClassUtilsTest  {\n \n     private static class Inner {\n         private class DeeplyNested{}\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new ClassUtils());\n         Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\n     }\n \n     // -------------------------------------------------------------------------\n+    @Test\n     public void test_getShortClassName_Object() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n         assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n     }\n \n+    @Test\n     public void test_getShortClassName_Class() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n \n \n \n+    @Test\n     public void test_getShortClassName_String() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n         assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n     }\n \n+    @Test\n     public void test_getSimpleName_Class() {\n         assertEquals(\"ClassUtils\", ClassUtils.getSimpleName(ClassUtils.class));\n         assertEquals(\"Entry\", ClassUtils.getSimpleName(Map.Entry.class));\n         assertEquals(\"Named\", ClassUtils.getSimpleName(Named.class));\n     }\n \n+    @Test\n     public void test_getSimpleName_Object() {\n         assertEquals(\"ClassUtils\", ClassUtils.getSimpleName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"Inner\", ClassUtils.getSimpleName(new Inner(), \"<null>\"));\n     }\n \n     // -------------------------------------------------------------------------\n+    @Test\n     public void test_getPackageName_Object() {\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\n         assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\n     }\n \n+    @Test\n     public void test_getPackageName_Class() {\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(Named.class));\n     }\n \n+    @Test\n     public void test_getPackageName_String() {\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n     }\n \n     // -------------------------------------------------------------------------\n+    @Test\n     public void test_getAllSuperclasses_Class() {\n         List<?> list = ClassUtils.getAllSuperclasses(CY.class);\n         assertEquals(2, list.size());\n         assertEquals(null, ClassUtils.getAllSuperclasses(null));\n     }\n \n+    @Test\n     public void test_getAllInterfaces_Class() {\n         List<?> list = ClassUtils.getAllInterfaces(CY.class);\n         assertEquals(6, list.size());\n     }\n \n     // -------------------------------------------------------------------------\n+    @Test\n     public void test_convertClassNamesToClasses_List() {\n         List<String> list = new ArrayList<String>();\n         List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);\n         assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n     }\n \n+    @Test\n     public void test_convertClassesToClassNames_List() {\n         List<Class<?>> list = new ArrayList<Class<?>>();\n         List<String> result = ClassUtils.convertClassesToClassNames(list);\n     }\n \n     // -------------------------------------------------------------------------\n+    @Test\n     public void test_isInnerClass_Class() {\n         assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n         assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n     }\n \n     // -------------------------------------------------------------------------\n+    @Test\n     public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n         Class<?>[] array2 = new Class[] {Object.class, Object.class};\n         Class<?>[] array1 = new Class[] {Object.class};\n         assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));\n     }\n \n+    @Test\n     public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws Exception {\n         Class<?>[] array2 = new Class[] {Object.class, Object.class};\n         Class<?>[] array1 = new Class[] {Object.class};\n         assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));\n     }\n \n+    @Test\n     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception {\n         Class<?>[] array2 = new Class[] {Object.class, Object.class};\n         Class<?>[] array1 = new Class[] {Object.class};\n         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));\n     }\n \n+    @Test\n     public void test_isAssignable() throws Exception {\n         assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n         assertFalse(ClassUtils.isAssignable(String.class, null));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n     }\n \n+    @Test\n     public void test_isAssignable_Autoboxing() throws Exception {\n         assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\n         assertFalse(ClassUtils.isAssignable(String.class, null, true));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\n     }\n \n+    @Test\n     public void test_isAssignable_NoAutoboxing() throws Exception {\n         assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));\n         assertFalse(ClassUtils.isAssignable(String.class, null, false));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));\n     }\n \n+    @Test\n     public void test_isAssignable_Widening() throws Exception {\n         // test byte conversions\n         assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n         assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n     }\n \n+    @Test\n     public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {\n         boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);\n \n         assertEquals(\"boolean -> boolean\", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n     }\n \n+    @Test\n     public void test_isAssignable_Unboxing_Widening() throws Exception {\n         // test byte conversions\n         assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));\n         assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n     }\n \n+    @Test\n     public void testIsPrimitiveOrWrapper() {\n \n         // test primitive wrapper classes\n         assertFalse(\"this.getClass()\", ClassUtils.isPrimitiveOrWrapper(this.getClass()));\n     }\n     \n+    @Test\n     public void testIsPrimitiveWrapper() {\n \n         // test primitive wrapper classes\n         assertFalse(\"this.getClass()\", ClassUtils.isPrimitiveWrapper(this.getClass()));\n     }\n     \n+    @Test\n     public void testPrimitiveToWrapper() {\n \n         // test primitive classes\n             ClassUtils.primitiveToWrapper(null));\n     }\n \n+    @Test\n     public void testPrimitivesToWrappers() {\n         // test null\n //        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers(null)); // generates warning\n         assertTrue(\"(Class<?>)null -> [null]\", Arrays.equals(new Class<?>[]{null}, castNull));\n         // test empty array is returned unchanged\n         // TODO this is not documented\n-        assertEquals(\"empty -> empty\",\n+        assertArrayEquals(\"empty -> empty\",\n                 ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n \n         // test an array of various classes\n         assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n     }\n \n+    @Test\n     public void testWrapperToPrimitive() {\n         // an array with classes to convert\n         final Class<?>[] primitives = {\n         }\n     }\n \n+    @Test\n     public void testWrapperToPrimitiveNoWrapper() {\n         assertNull(\"Wrong result for non wrapper class\", ClassUtils.wrapperToPrimitive(String.class));\n     }\n \n+    @Test\n     public void testWrapperToPrimitiveNull() {\n         assertNull(\"Wrong result for null class\", ClassUtils.wrapperToPrimitive(null));\n     }\n \n+    @Test\n     public void testWrappersToPrimitives() {\n         // an array with classes to test\n         final Class<?>[] classes = {\n         }\n     }\n \n+    @Test\n     public void testWrappersToPrimitivesNull() {\n //        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null)); // generates warning\n         assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // equivalent cast\n         assertTrue(\"(Class<?>)null -> [null]\", Arrays.equals(new Class<?>[]{null}, castNull));\n }\n \n+    @Test\n     public void testWrappersToPrimitivesEmpty() {\n         Class<?>[] empty = new Class[0];\n-        assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n-    }\n-\n+        assertArrayEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n+    }\n+\n+    @Test\n     public void testGetClassClassNotFound() throws Exception {\n         assertGetClassThrowsClassNotFound( \"bool\" );\n         assertGetClassThrowsClassNotFound( \"bool[]\" );\n         assertGetClassThrowsClassNotFound( \"integer[]\" );\n     }\n \n+    @Test\n     public void testGetClassInvalidArguments() throws Exception {\n         assertGetClassThrowsNullPointerException( null );\n         assertGetClassThrowsClassNotFound( \"[][][]\" );\n         assertGetClassThrowsClassNotFound( \"hello..world\" );\n     }\n \n+    @Test\n     public void testWithInterleavingWhitespace() throws ClassNotFoundException {\n         assertEquals( int[].class, ClassUtils.getClass( \" int [ ] \" ) );\n         assertEquals( long[].class, ClassUtils.getClass( \"\\rlong\\t[\\n]\\r\" ) );\n         assertEquals( byte[].class, ClassUtils.getClass( \"byte[\\t\\t\\n\\r]   \" ) );\n     }\n \n+    @Test\n     public void testGetInnerClass() throws ClassNotFoundException {\n         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested\" ) );\n         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested\" ) );\n         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested\" ) );\n     }\n \n+    @Test\n     public void testGetClassByNormalNameArrays() throws ClassNotFoundException {\n         assertEquals( int[].class, ClassUtils.getClass( \"int[]\" ) );\n         assertEquals( long[].class, ClassUtils.getClass( \"long[]\" ) );\n         assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( \"[Ljava.util.Map$Entry;\" ) );\n     }\n \n+    @Test\n     public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {\n         assertEquals( int[][].class, ClassUtils.getClass( \"int[][]\" ) );\n         assertEquals( long[][].class, ClassUtils.getClass( \"long[][]\" ) );\n         assertEquals( String[][].class, ClassUtils.getClass( \"java.lang.String[][]\" ) );\n     }\n \n+    @Test\n     public void testGetClassWithArrayClasses2D() throws Exception {\n         assertGetClassReturnsClass( String[][].class );\n         assertGetClassReturnsClass( int[][].class );\n         assertGetClassReturnsClass( boolean[][].class );\n     }\n \n+    @Test\n     public void testGetClassWithArrayClasses() throws Exception {\n         assertGetClassReturnsClass( String[].class );\n         assertGetClassReturnsClass( int[].class );\n         assertGetClassReturnsClass( boolean[].class );\n     }\n \n+    @Test\n     public void testGetClassRawPrimitives() throws ClassNotFoundException {\n         assertEquals( int.class, ClassUtils.getClass( \"int\" ) );\n         assertEquals( long.class, ClassUtils.getClass( \"long\" ) );\n \n     // Show the Java bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957\n     // We may have to delete this if a JDK fixes the bug.\n+    @Test\n     public void testShowJavaBug() throws Exception {\n         // Tests with Collections$UnmodifiableSet\n         Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n         }\n     }\n \n+    @Test\n     public void testGetPublicMethod() throws Exception {\n         // Tests with Collections$UnmodifiableSet\n         Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n             assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n     }\n \n+    @Test\n     public void testToClass_object() {\n //        assertNull(ClassUtils.toClass(null)); // generates warning\n         assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast\n                 ClassUtils.toClass(new Object[] { \"Test\", null, Double.valueOf(99d) })));\n     }\n \n+    @Test\n     public void test_getShortCanonicalName_Object() {\n         assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\n         assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(new Inner(), \"<null>\"));\n     }\n \n+    @Test\n     public void test_getShortCanonicalName_Class() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\n         assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\n         assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(Inner.class));\n     }\n \n+    @Test\n     public void test_getShortCanonicalName_String() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n         assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n         assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$Inner\"));\n     }\n \n+    @Test\n     public void test_getPackageCanonicalName_Object() {\n         assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Inner(), \"<null>\"));\n     }\n \n+    @Test\n     public void test_getPackageCanonicalName_Class() {\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(Inner.class));\n     }\n \n+    @Test\n     public void test_getPackageCanonicalName_String() {\n         assertEquals(\"org.apache.commons.lang3\",\n             ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n--- a/src/test/java/org/apache/commons/lang3/JavaVersionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/JavaVersionTest.java\n  */\n package org.apache.commons.lang3;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import static org.apache.commons.lang3.JavaVersion.JAVA_0_9;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_1;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_2;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_8;\n import static org.apache.commons.lang3.JavaVersion.get;\n import static org.apache.commons.lang3.JavaVersion.getJavaVersion;\n-import junit.framework.TestCase;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.JavaVersion}.\n  *\n  * @version $Id: JavaVersionTest.java 918366 2010-03-03 08:56:22Z bayard $\n  */\n-public class JavaVersionTest extends TestCase {\n+public class JavaVersionTest {\n \n+    @Test\n     public void testGetJavaVersion() {\n         assertEquals(\"0.9 failed\", JAVA_0_9, get(\"0.9\"));\n         assertEquals(\"1.1 failed\", JAVA_1_1, get(\"1.1\"));\n         assertEquals(\"Wrapper method failed\", get(\"1.5\"), getJavaVersion(\"1.5\"));\n     }\n \n+    @Test\n     public void testAtLeast() {\n         assertFalse(\"1.2 at least 1.5 passed\", JAVA_1_2.atLeast(JAVA_1_5));\n         assertTrue(\"1.5 at least 1.2 failed\", JAVA_1_5.atLeast(JAVA_1_2));\n         assertFalse(\"0.9 at least 1.6 passed\", JAVA_0_9.atLeast(JAVA_1_6));\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"1.2\", JAVA_1_2.toString());\n     }\n--- a/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.apache.commons.lang3.JavaVersion.JAVA_1_4;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Locale;\n import java.util.Set;\n \n-import junit.framework.TestCase;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link LocaleUtils}.\n  *\n  * @version $Id$\n  */\n-public class LocaleUtilsTest extends TestCase {\n+public class LocaleUtilsTest  {\n \n     private static final Locale LOCALE_EN = new Locale(\"en\", \"\");\n     private static final Locale LOCALE_EN_US = new Locale(\"en\", \"US\");\n     private static final Locale LOCALE_QQ = new Locale(\"qq\", \"\");\n     private static final Locale LOCALE_QQ_ZZ = new Locale(\"qq\", \"ZZ\");\n \n-    /**\n-     * Constructor.\n-     * \n-     * @param name\n-     */\n-    public LocaleUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n+\n+\n+    @Before\n     public void setUp() throws Exception {\n-        super.setUp();\n-\n         // Testing #LANG-304. Must be called before availableLocaleSet is called.\n         LocaleUtils.isAvailableLocale(Locale.getDefault());\n     }\n     /**\n      * Test that constructors are public, and work, etc.\n      */\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new LocaleUtils());\n         Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\n     /**\n      * Test toLocale() method.\n      */\n+    @Test\n     public void testToLocale_1Part() {\n         assertEquals(null, LocaleUtils.toLocale((String) null));\n         \n     /**\n      * Test toLocale() method.\n      */\n+    @Test\n     public void testToLocale_2Part() {\n         assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n         //valid though doesnt exist\n     /**\n      * Test toLocale() method.\n      */\n+    @Test\n     public void testToLocale_3Part() {\n         assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n         // this isn't pretty, but was caused by a jdk bug it seems\n     /**\n      * Test localeLookupList() method.\n      */\n+    @Test\n     public void testLocaleLookupList_Locale() {\n         assertLocaleLookupList(null, null, new Locale[0]);\n         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n     /**\n      * Test localeLookupList() method.\n      */\n+    @Test\n     public void testLocaleLookupList_LocaleLocale() {\n         assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n                 new Locale[]{LOCALE_QQ});\n     /**\n      * Test availableLocaleList() method.\n      */\n+    @Test\n     public void testAvailableLocaleList() {\n         List<Locale> list = LocaleUtils.availableLocaleList();\n         List<Locale> list2 = LocaleUtils.availableLocaleList();\n     /**\n      * Test availableLocaleSet() method.\n      */\n+    @Test\n     public void testAvailableLocaleSet() {\n         Set<Locale> set = LocaleUtils.availableLocaleSet();\n         Set<Locale> set2 = LocaleUtils.availableLocaleSet();\n     /**\n      * Test availableLocaleSet() method.\n      */\n+    @Test\n     public void testIsAvailableLocale() {\n         Set<Locale> set = LocaleUtils.availableLocaleSet();\n         assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n     /**\n      * Test languagesByCountry() method.\n      */\n+    @Test\n     public void testLanguagesByCountry() {\n         assertLanguageByCountry(null, new String[0]);\n         assertLanguageByCountry(\"GB\", new String[]{\"en\"});\n     /**\n      * Test countriesByLanguage() method.\n      */\n+    @Test\n     public void testCountriesByLanguage() {\n         assertCountriesByLanguage(null, new String[0]);\n         assertCountriesByLanguage(\"de\", new String[]{\"DE\", \"CH\", \"AT\", \"LU\"});\n     /**\n      * Tests #LANG-328 - only language+variant\n      */\n+    @Test\n     public void testLang328() {\n         assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n     }\n--- a/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Random;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.RandomStringUtils}.\n  *\n  * @version $Id$\n  */\n-public class RandomStringUtilsTest extends junit.framework.TestCase {\n-    /**\n-     * Construct a new instance of RandomStringUtilsTest with the specified name\n-     */\n-    public RandomStringUtilsTest(String name) {\n-        super(name);\n-    }\n+public class RandomStringUtilsTest {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new RandomStringUtils());\n         Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors();\n     /**\n      * Test the implementation\n      */\n+    @Test\n     public void testRandomStringUtils() {\n         String r1 = RandomStringUtils.random(50);\n         assertEquals(\"random(50) length\", 50, r1.length());\n         assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n     }\n \n+    @Test\n     public void testLANG805() {\n         long seed = System.currentTimeMillis();\n         assertEquals(\"aaa\", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));\n     }\n \n+    @Test\n     public void testLANG807() {\n         try {\n             RandomStringUtils.random(3,5,5,false,false);\n         }\n     }\n \n+    @Test\n     public void testExceptions() {\n         final char[] DUMMY = new char[]{'a'}; // valid char array\n         try {\n      * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n      * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\n      */  \n+    @Test\n     public void testRandomAlphaNumeric() {\n         char[] testChars = {'a', 'z', 'A', 'Z', '0', '9'};\n         boolean[] found = {false, false, false, false, false, false};\n      * Make sure '0' and '9' are generated by randomNumeric\n      * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\n      */  \n+    @Test\n     public void testRandomNumeric() {\n         char[] testChars = {'0','9'};\n         boolean[] found = {false, false};\n      * Make sure boundary alpha characters are generated by randomAlphabetic\n      * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\n      */  \n+    @Test\n     public void testRandomAlphabetic() {\n         char[] testChars = {'a', 'z', 'A', 'Z'};\n         boolean[] found = {false, false, false, false};\n      * Make sure 32 and 127 are generated by randomNumeric\n      * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\n      */  \n+    @Test\n     public void testRandomAscii() {\n         char[] testChars = {(char) 32, (char) 126};\n         boolean[] found = {false, false};\n      * in generated strings.  Will fail randomly about 1 in 1000 times.\n      * Repeated failures indicate a problem.\n      */\n+    @Test\n     public void testRandomStringUtilsHomog() {\n         String set = \"abc\";\n         char[] chars = set.toCharArray();\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testLang100() throws Exception {\n         int size = 5000;\n         String encoding = \"UTF-8\";\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-\n import org.hamcrest.core.IsNot;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n  *\n  * @version $Id$\n  */\n-public class StringUtilsEqualsIndexOfTest extends TestCase {\n+public class StringUtilsEqualsIndexOfTest  {\n     private static final String BAR = \"bar\";\n     /**\n      * Supplementary character U+20000\n \n     private static final String[] FOOBAR_SUB_ARRAY = new String[] {\"ob\", \"ba\"};\n \n-    public StringUtilsEqualsIndexOfTest(String name) {\n-        super(name);\n-    }\n-\n+    @Test\n     public void testContains_Char() {\n         assertEquals(false, StringUtils.contains(null, ' '));\n         assertEquals(false, StringUtils.contains(\"\", ' '));\n         assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n     }\n \n+    @Test\n     public void testContains_String() {\n         assertEquals(false, StringUtils.contains(null, null));\n         assertEquals(false, StringUtils.contains(null, \"\"));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContains_StringWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n         assertEquals(false, StringUtils.contains(CharUSuppCharHigh, CharU20001));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContains_StringWithSupplementaryChars() {\n         assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));\n         assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));\n         assertEquals(false, StringUtils.contains(CharU20000, CharU20001));\n     }\n \n+    @Test\n     public void testContainsAny_StringCharArray() {\n         assertFalse(StringUtils.containsAny(null, (char[]) null));\n         assertFalse(StringUtils.containsAny(null, new char[0]));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n         assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsAny_StringCharArrayWithSupplementaryChars() {\n         assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n         assertEquals(true, StringUtils.containsAny(\"a\" + CharU20000 + CharU20001, \"a\".toCharArray()));\n         assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\n     }\n \n+    @Test\n     public void testContainsAny_StringString() {\n         assertFalse(StringUtils.containsAny(null, (String) null));\n         assertFalse(StringUtils.containsAny(null, \"\"));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsAny_StringWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n         assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsAny_StringWithSupplementaryChars() {\n         assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));\n         assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));\n         assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));\n     }\n \n+    @Test\n     public void testContainsIgnoreCase_LocaleIndependence() {\n         Locale orig = Locale.getDefault();\n \n         }\n     }\n \n+    @Test\n     public void testContainsIgnoreCase_StringString() {\n         assertFalse(StringUtils.containsIgnoreCase(null, null));\n \n         assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n     }\n \n+    @Test\n     public void testContainsNone_CharArray() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n         assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsNone_CharArrayWithSupplementaryChars() {\n         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n         assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n     }\n \n+    @Test\n     public void testContainsNone_String() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsNone_StringWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n         assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testContainsNone_StringWithSupplementaryChars() {\n         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n         assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n     }\n \n+    @Test\n     public void testContainsOnly_CharArray() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n         assertEquals(true, StringUtils.containsOnly(str3, chars3));\n     }\n \n+    @Test\n     public void testContainsOnly_String() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n         assertEquals(true, StringUtils.containsOnly(str3, chars3));\n     }\n \n+    @Test\n     public void testContainsWhitespace() {\n         assertFalse( StringUtils.containsWhitespace(\"\") );\n         assertTrue( StringUtils.containsWhitespace(\" \") );\n         }\n     }\n \n+    @Test\n     public void testCustomCharSequence() {\n         assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));\n         assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));\n         assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));\n     }\n \n+    @Test\n     public void testEquals() {\n         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n         assertTrue(StringUtils.equals(null, null));\n         assertFalse(StringUtils.equals(foobarCs, fooCs));\n     }\n \n+    @Test\n     public void testEqualsOnStrings() {\n         assertTrue(StringUtils.equals(null, null));\n         assertTrue(StringUtils.equals(FOO, FOO));\n         assertFalse(StringUtils.equals(FOOBAR, FOO));\n     }\n \n+    @Test\n     public void testEqualsIgnoreCase() {\n         assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n         assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOf_char() {\n         assertEquals(-1, StringUtils.indexOf(null, ' '));\n         assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n         assertEquals(2, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), 'b'));\n     }\n \n+    @Test\n     public void testIndexOf_charInt() {\n         assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n         assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n         assertEquals(5, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), 'b', 3));\n     }\n \n+    @Test\n     public void testIndexOf_String() {\n         assertEquals(-1, StringUtils.indexOf(null, null));\n         assertEquals(-1, StringUtils.indexOf(\"\", null));\n         assertEquals(2, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), \"b\"));\n     }\n \n+    @Test\n     public void testIndexOf_StringInt() {\n         assertEquals(-1, StringUtils.indexOf(null, null, 0));\n         assertEquals(-1, StringUtils.indexOf(null, null, -1));\n         assertEquals(5, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), \"b\", 3));\n     }\n \n+    @Test\n     public void testIndexOfAny_StringCharArray() {\n         assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n         assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));\n     }\n \n+    @Test\n     public void testIndexOfAny_StringString() {\n         assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n         assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n         assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n     }\n \n+    @Test\n     public void testIndexOfAny_StringStringArray() {\n         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n     /**\n      * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n      */\n+    @Test\n     public void testIndexOfAny_StringStringWithSupplementaryChars() {\n         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));\n     }\n \n+    @Test\n     public void testIndexOfAnyBut_StringCharArray() {\n         assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n         assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n \n     }\n \n+    @Test\n     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));\n     }\n \n+    @Test\n     public void testIndexOfAnyBut_StringString() {\n         assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n         assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n         assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n     }\n \n+    @Test\n     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));\n     }\n \n+    @Test\n     public void testIndexOfIgnoreCase_String() {\n         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\n         assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\n     }\n \n+    @Test\n     public void testIndexOfIgnoreCase_StringInt() {\n         assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\n         assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\n         assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\n     }\n \n+    @Test\n     public void testLastIndexOf_char() {\n         assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n         assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), 'b'));\n     }\n \n+    @Test\n     public void testLastIndexOf_charInt() {\n         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n         assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), 'b', 2));\n     }\n \n+    @Test\n     public void testLastIndexOf_String() {\n         assertEquals(-1, StringUtils.lastIndexOf(null, null));\n         assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n         assertEquals(4, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), \"ab\"));\n     }\n \n+    @Test\n     public void testLastIndexOf_StringInt() {\n         assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n         assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n         assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), \"b\", 3));\n     }\n \n+    @Test\n     public void testLastIndexOfAny_StringStringArray() {\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n     }\n \n+    @Test\n     public void testLastIndexOfIgnoreCase_String() {\n         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\n         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\n         assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\n     }\n \n+    @Test\n     public void testLastIndexOfIgnoreCase_StringInt() {\n         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\n         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\n         assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\n     }\n \n+    @Test\n     public void testLastOrdinalIndexOf() {\n         assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42) );\n         assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42) );\n         assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2) );\n     }\n \n+    @Test\n     public void testOrdinalIndexOf() {\n         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n         assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n  */\n package org.apache.commons.lang3;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n  *\n  * @version $Id$\n  */\n-public class StringUtilsIsTest extends TestCase {\n-\n-    public StringUtilsIsTest(String name) {\n-        super(name);\n-    }\n+public class StringUtilsIsTest  {\n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testIsAlpha() {\n         assertEquals(false, StringUtils.isAlpha(null));\n         assertEquals(false, StringUtils.isAlpha(\"\"));\n         assertEquals(false, StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\n     }\n \n+    @Test\n     public void testIsAlphanumeric() {\n         assertEquals(false, StringUtils.isAlphanumeric(null));\n         assertEquals(false, StringUtils.isAlphanumeric(\"\"));\n         assertEquals(false, StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n     }\n \n+    @Test\n     public void testIsWhitespace() {\n         assertEquals(false, StringUtils.isWhitespace(null));\n         assertEquals(true, StringUtils.isWhitespace(\"\"));\n         assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n     }\n \n+    @Test\n     public void testIsAlphaspace() {\n         assertEquals(false, StringUtils.isAlphaSpace(null));\n         assertEquals(true, StringUtils.isAlphaSpace(\"\"));\n         assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\n     }\n \n+    @Test\n     public void testIsAlphanumericSpace() {\n         assertEquals(false, StringUtils.isAlphanumericSpace(null));\n         assertEquals(true, StringUtils.isAlphanumericSpace(\"\"));\n         assertEquals(false, StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\n     }\n \n+    @Test\n     public void testIsAsciiPrintable_String() {\n         assertEquals(false, StringUtils.isAsciiPrintable(null));\n         assertEquals(true, StringUtils.isAsciiPrintable(\"\"));\n         assertEquals(false, StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\n     }\n   \n+    @Test\n     public void testIsNumeric() {\n         assertEquals(false, StringUtils.isNumeric(null));\n         assertEquals(false, StringUtils.isNumeric(\"\"));\n         assertEquals(false, StringUtils.isNumeric(\"-123\"));\n     }\n \n+    @Test\n     public void testIsNumericSpace() {\n         assertEquals(false, StringUtils.isNumericSpace(null));\n         assertEquals(true, StringUtils.isNumericSpace(\"\"));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java\n  */\n package org.apache.commons.lang3;\n \n-import junit.framework.TestCase;\n-\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import org.apache.commons.lang3.text.StrBuilder;\n \n /**\n  *\n  * @version $Id$\n  */\n-public class StringUtilsStartsEndsWithTest extends TestCase {\n+public class StringUtilsStartsEndsWithTest {\n     private static final String foo    = \"foo\";\n     private static final String bar    = \"bar\";\n     private static final String foobar = \"foobar\";\n     private static final String BAR    = \"BAR\";\n     private static final String FOOBAR = \"FOOBAR\";\n \n-    public StringUtilsStartsEndsWithTest(String name) {\n-        super(name);\n-    }\n-\n     //-----------------------------------------------------------------------\n \n     /**\n      * Test StringUtils.startsWith()\n      */\n+    @Test\n     public void testStartsWith() {\n         assertTrue(\"startsWith(null, null)\", StringUtils.startsWith(null, (String)null));\n         assertFalse(\"startsWith(FOOBAR, null)\", StringUtils.startsWith(FOOBAR, (String)null));\n     /**\n      * Test StringUtils.testStartsWithIgnoreCase()\n      */\n+    @Test\n     public void testStartsWithIgnoreCase() {\n         assertTrue(\"startsWithIgnoreCase(null, null)\",    StringUtils.startsWithIgnoreCase(null, (String)null));\n         assertFalse(\"startsWithIgnoreCase(FOOBAR, null)\", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));\n         assertFalse(\"startsWithIgnoreCase(FOOBAR, bar)\", StringUtils.startsWithIgnoreCase(FOOBAR, bar));\n     }\n \n+    @Test\n     public void testStartsWithAny() {\n         assertFalse(StringUtils.startsWithAny(null, (String[])null));\n         assertFalse(StringUtils.startsWithAny(null, \"abc\"));\n     /**\n      * Test StringUtils.endsWith()\n      */\n+    @Test\n     public void testEndsWith() {\n         assertTrue(\"endsWith(null, null)\",    StringUtils.endsWith(null, (String)null));\n         assertFalse(\"endsWith(FOOBAR, null)\", StringUtils.endsWith(FOOBAR, (String)null));\n     /**\n      * Test StringUtils.endsWithIgnoreCase()\n      */\n+    @Test\n     public void testEndsWithIgnoreCase() {\n         assertTrue(\"endsWithIgnoreCase(null, null)\",    StringUtils.endsWithIgnoreCase(null, (String)null));\n         assertFalse(\"endsWithIgnoreCase(FOOBAR, null)\", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));\n         assertFalse(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\"));\n     }\n \n+    @Test\n     public void testEndsWithAny() {\n         assertFalse(\"StringUtils.endsWithAny(null, null)\", StringUtils.endsWithAny(null, (String)null));\n         assertFalse(\"StringUtils.endsWithAny(null, new String[] {abc})\", StringUtils.endsWithAny(null, new String[] {\"abc\"}));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java\n  */\n package org.apache.commons.lang3;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n  *\n  * @version $Id$\n  */\n-public class StringUtilsSubstringTest extends TestCase {\n+public class StringUtilsSubstringTest  {\n     private static final String FOO = \"foo\";\n     private static final String BAR = \"bar\";\n     private static final String BAZ = \"baz\";\n     private static final String FOOBAR = \"foobar\";\n     private static final String SENTENCE = \"foo bar baz\";\n \n-    public StringUtilsSubstringTest(String name) {\n-        super(name);\n-    }\n-\n     //-----------------------------------------------------------------------\n \n-\n+    @Test\n     public void testSubstring_StringInt() {\n         assertEquals(null, StringUtils.substring(null, 0));\n         assertEquals(\"\", StringUtils.substring(\"\", 0));\n         assertEquals(\"\", StringUtils.substring(\"abc\", 4));\n     }\n     \n+    @Test\n     public void testSubstring_StringIntInt() {\n         assertEquals(null, StringUtils.substring(null, 0, 0));\n         assertEquals(null, StringUtils.substring(null, 1, 2));\n         assertEquals(\"b\",StringUtils.substring(\"abc\", -2, -1));\n     }\n            \n+    @Test\n     public void testLeft_String() {\n         assertSame(null, StringUtils.left(null, -1));\n         assertSame(null, StringUtils.left(null, 0));\n         assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\n     }\n     \n+    @Test\n     public void testRight_String() {\n         assertSame(null, StringUtils.right(null, -1));\n         assertSame(null, StringUtils.right(null, 0));\n         assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\n     }\n     \n+    @Test\n     public void testMid_String() {\n         assertSame(null, StringUtils.mid(null, -1, 0));\n         assertSame(null, StringUtils.mid(null, 0, -1));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSubstringBefore_StringString() {\n         assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", \"XX\"));\n \n         assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"\"));\n     }\n     \n+    @Test\n     public void testSubstringAfter_StringString() {\n         assertEquals(\"barXXbaz\", StringUtils.substringAfter(\"fooXXbarXXbaz\", \"XX\"));\n         \n         assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"d\"));\n     }\n \n+    @Test\n     public void testSubstringBeforeLast_StringString() {\n         assertEquals(\"fooXXbar\", StringUtils.substringBeforeLast(\"fooXXbarXXbaz\", \"XX\"));\n \n         assertEquals(\"\", StringUtils.substringBeforeLast(\"a\", \"a\"));\n     }\n     \n+    @Test\n     public void testSubstringAfterLast_StringString() {\n         assertEquals(\"baz\", StringUtils.substringAfterLast(\"fooXXbarXXbaz\", \"XX\"));\n \n     }        \n         \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSubstringBetween_StringString() {\n         assertEquals(null, StringUtils.substringBetween(null, \"tag\"));\n         assertEquals(\"\", StringUtils.substringBetween(\"\", \"\"));\n         assertEquals(\"bar\", StringUtils.substringBetween(\"\\nbar\\n\", \"\\n\"));\n     }\n             \n+    @Test\n     public void testSubstringBetween_StringStringString() {\n         assertEquals(null, StringUtils.substringBetween(null, \"\", \"\"));\n         assertEquals(null, StringUtils.substringBetween(\"\", null, \"\"));\n    /**\n      * Tests the substringsBetween method that returns an String Array of substrings.\n      */\n+    @Test\n     public void testSubstringsBetween_StringStringString() {\n \n         String[] results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", \"]\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCountMatches_String() {\n         assertEquals(0, StringUtils.countMatches(null, null));\n         assertEquals(0, StringUtils.countMatches(\"blah\", null));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n  */\n package org.apache.commons.lang3;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.StringUtils} - Trim/Empty methods\n  *\n  * @version $Id$\n  */\n-public class StringUtilsTrimEmptyTest extends TestCase {\n+public class StringUtilsTrimEmptyTest  {\n     private static final String FOO = \"foo\";\n \n-    public StringUtilsTrimEmptyTest(String name) {\n-        super(name);\n-    }\n-\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsEmpty() {\n         assertEquals(true, StringUtils.isEmpty(null));\n         assertEquals(true, StringUtils.isEmpty(\"\"));\n         assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n     }\n \n+    @Test\n     public void testIsNotEmpty() {\n         assertEquals(false, StringUtils.isNotEmpty(null));\n         assertEquals(false, StringUtils.isNotEmpty(\"\"));\n         assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n     }\n \n+    @Test\n     public void testIsBlank() {\n         assertEquals(true, StringUtils.isBlank(null));\n         assertEquals(true, StringUtils.isBlank(\"\"));\n         assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n     }\n \n+    @Test\n     public void testIsNotBlank() {\n         assertEquals(false, StringUtils.isNotBlank(null));\n         assertEquals(false, StringUtils.isNotBlank(\"\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTrim() {\n         assertEquals(FOO, StringUtils.trim(FOO + \"  \"));\n         assertEquals(FOO, StringUtils.trim(\" \" + FOO + \"  \"));\n         assertEquals(null, StringUtils.trim(null));\n     }\n \n+    @Test\n     public void testTrimToNull() {\n         assertEquals(FOO, StringUtils.trimToNull(FOO + \"  \"));\n         assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO + \"  \"));\n         assertEquals(null, StringUtils.trimToNull(null));\n     }\n \n+    @Test\n     public void testTrimToEmpty() {\n         assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"  \"));\n         assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO + \"  \"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testStrip_String() {\n         assertEquals(null, StringUtils.strip(null));\n         assertEquals(\"\", StringUtils.strip(\"\"));\n             StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n     }\n     \n+    @Test\n     public void testStripToNull_String() {\n         assertEquals(null, StringUtils.stripToNull(null));\n         assertEquals(null, StringUtils.stripToNull(\"\"));\n             StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n     }\n     \n+    @Test\n     public void testStripToEmpty_String() {\n         assertEquals(\"\", StringUtils.stripToEmpty(null));\n         assertEquals(\"\", StringUtils.stripToEmpty(\"\"));\n             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n     }\n     \n+    @Test\n     public void testStrip_StringString() {\n         // null strip\n         assertEquals(null, StringUtils.strip(null, null));\n         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n     }\n     \n+    @Test\n     public void testStripStart_StringString() {\n         // null stripStart\n         assertEquals(null, StringUtils.stripStart(null, null));\n         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n     }\n     \n+    @Test\n     public void testStripEnd_StringString() {\n         // null stripEnd\n         assertEquals(null, StringUtils.stripEnd(null, null));\n         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n     }\n \n+    @Test\n     public void testStripAll() {\n         // test stripAll method, merely an array version of the above strip\n         String[] empty = new String[0];\n         String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n         String[] foo = new String[] { FOO, FOO, FOO };\n \n-//        assertEquals(null, StringUtils.stripAll(null)); // generates warning\n-        assertEquals(null, StringUtils.stripAll((String[]) null)); // equivalent explicit cast\n+        assertNull(StringUtils.stripAll((String[]) null));\n         // Additional varargs tests\n         assertArrayEquals(empty, StringUtils.stripAll()); // empty array\n         assertArrayEquals(new String[]{null}, StringUtils.stripAll((String) null)); // == new String[]{null}\n         assertArrayEquals(empty, StringUtils.stripAll(empty));\n         assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n         \n-        assertEquals(null, StringUtils.stripAll(null, null));\n+        assertNull(StringUtils.stripAll(null, null));\n         assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));\n         assertArrayEquals(foo, StringUtils.stripAll(fooDots, \".\"));\n     }\n \n+    @Test\n     public void testStripAccents() {\n         String cue = \"\\u00C7\\u00FA\\u00EA\";\n         assertEquals( \"Failed to strip accents from \" + cue, \"Cue\", StringUtils.stripAccents(cue));\n         assertEquals( \"Failed to handle non-accented text\", \"control\", StringUtils.stripAccents(\"control\") );\n         assertEquals( \"Failed to handle easy example\", \"eclair\", StringUtils.stripAccents(\"\\u00E9clair\") );\n     }\n-\n-    //-----------------------------------------------------------------------\n-\n-    private void assertArrayEquals(Object[] o1, Object[] o2) {\n-        if(o1 == null) {\n-            assertEquals(o1,o2);\n-            return;\n-        }\n-        assertEquals(\"Length not equal. \", o1.length, o2.length);\n-        int sz = o1.length;\n-        for(int i=0; i<sz; i++) {\n-            if(o1[i] instanceof Object[]) {\n-                // do an assert equals on type....\n-                assertArrayEquals( (Object[]) o1[i], (Object[]) o2[i] );\n-            } else {\n-                assertEquals(o1[i], o2[i]);\n-            }\n-        }\n-    }\n-\n }\n--- a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n \n package org.apache.commons.lang3;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_4;\n \n import java.io.File;\n import java.util.Locale;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.SystemUtils}.\n  * \n  * @version $Id$\n  */\n-public class SystemUtilsTest extends TestCase {\n-\n-    public SystemUtilsTest(String name) {\n-        super(name);\n-    }\n-\n+public class SystemUtilsTest {\n+\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new SystemUtils());\n         Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\n     /**\n      * Assums no security manager exists.\n      */\n+    @Test\n     public void testGetJavaHome() {\n         File dir = SystemUtils.getJavaHome();\n         Assert.assertNotNull(dir);\n     /**\n      * Assums no security manager exists.\n      */\n+    @Test\n     public void testGetJavaIoTmpDir() {\n         File dir = SystemUtils.getJavaIoTmpDir();\n         Assert.assertNotNull(dir);\n     /**\n      * Assums no security manager exists.\n      */\n+    @Test\n     public void testGetUserDir() {\n         File dir = SystemUtils.getUserDir();\n         Assert.assertNotNull(dir);\n     /**\n      * Assums no security manager exists.\n      */\n+    @Test\n     public void testGetUserHome() {\n         File dir = SystemUtils.getUserHome();\n         Assert.assertNotNull(dir);\n         Assert.assertTrue(dir.exists());\n     }\n \n+    @Test\n     public void testIS_JAVA() {\n         String javaVersion = System.getProperty(\"java.version\");\n         if (javaVersion == null) {\n         }\n     }\n \n+    @Test\n     public void testIS_OS() {\n         String osName = System.getProperty(\"os.name\");\n         if (osName == null) {\n         }\n     }\n \n+    @Test\n     public void testJavaVersionMatches() {\n         String javaVersion = null;\n         assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n         assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n     }\n \n+    @Test\n     public void testOSMatchesName() {\n         String osName = null;\n         assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n         assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n     }\n \n+    @Test\n     public void testOSMatchesNameAndVersion() {\n         String osName = null;\n         String osVersion = null;\n         assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n     }\n \n+    @Test\n     public void testJavaAwtHeadless() {\n         boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4);\n         String expectedStringValue = System.getProperty(\"java.awt.headless\");\n--- a/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.AbstractList;\n import java.util.List;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.Validate}.\n  *\n  * @version $Id$\n  */\n-public class ValidateTest extends TestCase {\n-\n-    public ValidateTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+public class ValidateTest  {\n+    \n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsTrue1() {\n         Validate.isTrue(true);\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsTrue2() {\n         Validate.isTrue(true, \"MSG\");\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsTrue3() {\n         Validate.isTrue(true, \"MSG\", 6);\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsTrue4() {\n         Validate.isTrue(true, \"MSG\", 7);\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsTrue5() {\n         Validate.isTrue(true, \"MSG\", 7.4d);\n         try {\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotNull1() {\n         Validate.notNull(new Object());\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotNull2() {\n         Validate.notNull(new Object(), \"MSG\");\n         try {\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyArray1() {\n         Validate.notEmpty(new Object[] {null});\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyArray2() {\n         Validate.notEmpty(new Object[] {null}, \"MSG\");\n         try {\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyCollection1() {\n         Collection<Integer> coll = new ArrayList<Integer>();\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyCollection2() {\n         Collection<Integer> coll = new ArrayList<Integer>();\n         try {\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyMap1() {\n         Map<String, Integer> map = new HashMap<String, Integer>();\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyMap2() {\n         Map<String, Integer> map = new HashMap<String, Integer>();\n         try {\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyString1() {\n         Validate.notEmpty(\"hjl\");\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotEmptyString2() {\n         Validate.notEmpty(\"a\", \"MSG\");\n         try {\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankNullStringShouldThrow() {\n         //given\n         String string = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgNullStringShouldThrow() {\n         //given\n         String string = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankEmptyStringShouldThrow() {\n         //given\n         String string = \"\";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankBlankStringWithWhitespacesShouldThrow() {\n         //given\n         String string = \"   \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankBlankStringWithNewlinesShouldThrow() {\n         //given\n         String string = \" \\n \\t \\r \\n \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgBlankStringShouldThrow() {\n         //given\n         String string = \" \\n \\t \\r \\n \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgBlankStringWithWhitespacesShouldThrow() {\n         //given\n         String string = \"   \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgEmptyStringShouldThrow() {\n         //given\n         String string = \"\";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankNotBlankStringShouldNotThrow() {\n         //given\n         String string = \"abc\";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankNotBlankStringWithWhitespacesShouldNotThrow() {\n         //given\n         String string = \"  abc   \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankNotBlankStringWithNewlinesShouldNotThrow() {\n         //given\n         String string = \" \\n \\t abc \\r \\n \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgNotBlankStringShouldNotThrow() {\n         //given\n         String string = \"abc\";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow() {\n         //given\n         String string = \"  abc   \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow() {\n         //given\n         String string = \" \\n \\t abc \\r \\n \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNotBlankReturnValues1() {\n         String str = \"Hi\";\n         String test = Validate.notBlank(str);\n         assertSame(str, test);\n     }\n \n+    @Test\n     public void testNotBlankReturnValues2() {\n         String str = \"Hi\";\n         String test = Validate.notBlank(str, \"Message\");\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNoNullElementsArray1() {\n         String[] array = new String[] {\"a\", \"b\"};\n         Validate.noNullElements(array);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNoNullElementsArray2() {\n         String[] array = new String[] {\"a\", \"b\"};\n         Validate.noNullElements(array, \"MSG\");\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNoNullElementsCollection1() {\n         List<String> coll = new ArrayList<String>();\n         coll.add(\"a\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNoNullElementsCollection2() {\n         List<String> coll = new ArrayList<String>();\n         coll.add(\"a\");\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new Validate());\n         Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testValidIndex_withMessage_array() {\n         Object[] array = new Object[2];\n         Validate.validIndex(array, 0, \"Broken: \");\n         assertSame(strArray, test);\n     }\n \n+    @Test\n     public void testValidIndex_array() {\n         Object[] array = new Object[2];\n         Validate.validIndex(array, 0);\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testValidIndex_withMessage_collection() {\n         Collection<String> coll = new ArrayList<String>();\n         coll.add(null);\n         assertSame(strColl, test);\n     }\n \n+    @Test\n     public void testValidIndex_collection() {\n         Collection<String> coll = new ArrayList<String>();\n         coll.add(null);\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testValidIndex_withMessage_charSequence() {\n         CharSequence str = \"Hi\";\n         Validate.validIndex(str, 0, \"Broken: \");\n         assertSame(input, test);\n     }\n \n+    @Test\n     public void testValidIndex_charSequence() {\n         CharSequence str = \"Hi\";\n         Validate.validIndex(str, 0);\n         assertSame(input, test);\n     }\n     \n+    @Test\n     public void testMatchesPattern()\n     {\n         CharSequence str = \"hi\";\n         }\n     }\n     \n+    @Test\n     public void testMatchesPattern_withMessage()\n     {\n         CharSequence str = \"hi\";\n         }\n     }\n     \n+    @Test\n     public void testInclusiveBetween()\n     {\n         Validate.inclusiveBetween(\"a\", \"c\", \"b\");\n         }\n     }\n     \n+    @Test\n     public void testInclusiveBetween_withMessage()\n     {\n         Validate.inclusiveBetween(\"a\", \"c\", \"b\", \"Error\");\n         }\n     }\n     \n+    @Test\n     public void testExclusiveBetween()\n     {\n         Validate.exclusiveBetween(\"a\", \"c\", \"b\");\n         }\n     }\n     \n+    @Test\n     public void testExclusiveBetween_withMessage()\n     {\n         Validate.exclusiveBetween(\"a\", \"c\", \"b\", \"Error\");\n         }\n     }\n \n+    @Test\n     public void testIsInstanceOf() {\n         Validate.isInstanceOf(String.class, \"hi\");\n         Validate.isInstanceOf(Integer.class, 1);\n     }\n     \n+    @Test\n     public void testIsInstanceOfExceptionMessage() {\n         try {\n             Validate.isInstanceOf(List.class, \"hi\");\n         }\n     }\n     \n+    @Test\n     public void testIsInstanceOf_withMessage() {\n         Validate.isInstanceOf(String.class, \"hi\", \"Error\");\n         Validate.isInstanceOf(Integer.class, 1, \"Error\");\n         }\n     }\n     \n+    @Test\n     public void testIsAssignable() {\n         Validate.isAssignableFrom(CharSequence.class, String.class);\n         Validate.isAssignableFrom(AbstractList.class, ArrayList.class);\n     }\n     \n+    @Test\n     public void testIsAssignableExceptionMessage() {\n         try {\n             Validate.isAssignableFrom(List.class, String.class);\n         }\n     }\n     \n+    @Test\n     public void testIsAssignable_withMessage() {\n         Validate.isAssignableFrom(CharSequence.class, String.class, \"Error\");\n         Validate.isAssignableFrom(AbstractList.class, ArrayList.class, \"Error\");\n--- a/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n  */\n package org.apache.commons.lang3.concurrent;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n-import junit.framework.TestCase;\n-\n-public class BackgroundInitializerTest extends TestCase {\n+public class BackgroundInitializerTest {\n     /**\n      * Helper method for checking whether the initialize() method was correctly\n      * called. start() must already have been invoked.\n     /**\n      * Tests whether initialize() is invoked.\n      */\n+    @Test\n     public void testInitialize() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         init.start();\n      * Tries to obtain the executor before start(). It should not have been\n      * initialized yet.\n      */\n+    @Test\n     public void testGetActiveExecutorBeforeStart() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         assertNull(\"Got an executor\", init.getActiveExecutor());\n     /**\n      * Tests whether an external executor is correctly detected.\n      */\n+    @Test\n     public void testGetActiveExecutorExternal() {\n         ExecutorService exec = Executors.newSingleThreadExecutor();\n         try {\n     /**\n      * Tests getActiveExecutor() for a temporary executor.\n      */\n+    @Test\n     public void testGetActiveExecutorTemp() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         init.start();\n      * Tests the execution of the background task if a temporary executor has to\n      * be created.\n      */\n+    @Test\n     public void testInitializeTempExecutor() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         assertTrue(\"Wrong result of start()\", init.start());\n      * Tests whether an external executor can be set using the\n      * setExternalExecutor() method.\n      */\n+    @Test\n     public void testSetExternalExecutor() throws Exception {\n         ExecutorService exec = Executors.newCachedThreadPool();\n         try {\n     /**\n      * Tests that setting an executor after start() causes an exception.\n      */\n+    @Test\n     public void testSetExternalExecutorAfterStart() throws ConcurrentException {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         init.start();\n      * Tests invoking start() multiple times. Only the first invocation should\n      * have an effect.\n      */\n+    @Test\n     public void testStartMultipleTimes() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         assertTrue(\"Wrong result for start()\", init.start());\n     /**\n      * Tests calling get() before start(). This should cause an exception.\n      */\n+    @Test\n     public void testGetBeforeStart() throws ConcurrentException {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         try {\n      * Tests the get() method if background processing causes a runtime\n      * exception.\n      */\n+    @Test\n     public void testGetRuntimeException() throws Exception {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         RuntimeException rex = new RuntimeException();\n      * Tests the get() method if background processing causes a checked\n      * exception.\n      */\n+    @Test\n     public void testGetCheckedException() throws Exception {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         Exception ex = new Exception();\n     /**\n      * Tests the get() method if waiting for the initialization is interrupted.\n      */\n+    @Test\n     public void testGetInterruptedException() throws Exception {\n         ExecutorService exec = Executors.newSingleThreadExecutor();\n         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(\n     /**\n      * Tests isStarted() before start() was called.\n      */\n+    @Test\n     public void testIsStartedFalse() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         assertFalse(\"Already started\", init.isStarted());\n     /**\n      * Tests isStarted() after start().\n      */\n+    @Test\n     public void testIsStartedTrue() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         init.start();\n     /**\n      * Tests isStarted() after the background task has finished.\n      */\n+    @Test\n     public void testIsStartedAfterGet() {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n         init.start();\n--- a/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java\n  */\n package org.apache.commons.lang3.concurrent;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Test class for {@code CallableBackgroundInitializer}\n  *\n  * @version $Id$\n  */\n-public class CallableBackgroundInitializerTest extends TestCase {\n+public class CallableBackgroundInitializerTest  {\n     /** Constant for the result of the call() invocation. */\n     private static final Integer RESULT = Integer.valueOf(42);\n \n      * Tries to create an instance without a Callable. This should cause an\n      * exception.\n      */\n+    @Test\n     public void testInitNullCallable() {\n         try {\n             new CallableBackgroundInitializer<Object>(null);\n      * Tests whether the executor service is correctly passed to the super\n      * class.\n      */\n+    @Test\n     public void testInitExecutor() {\n         ExecutorService exec = Executors.newSingleThreadExecutor();\n         CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n      * Tries to pass a null Callable to the constructor that takes an executor.\n      * This should cause an exception.\n      */\n+    @Test\n     public void testInitExecutorNullCallable() {\n         ExecutorService exec = Executors.newSingleThreadExecutor();\n         try {\n     /**\n      * Tests the implementation of initialize().\n      */\n+    @Test\n     public void testInitialize() throws Exception {\n         TestCallable call = new TestCallable();\n         CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n \n package org.apache.commons.lang3.event;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n import java.beans.PropertyChangeEvent;\n import java.beans.PropertyVetoException;\n import java.beans.VetoableChangeListener;\n import java.util.Date;\n import java.util.List;\n \n-import junit.framework.TestCase;\n-\n import org.easymock.EasyMock;\n+import org.junit.Test;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class EventListenerSupportTest extends TestCase\n+public class EventListenerSupportTest \n {\n+    @Test\n     public void testAddNullListener()\n     {\n         EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         }\n     }\n \n+    @Test\n     public void testRemoveNullListener()\n     {\n         EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         }\n     }\n \n+    @Test\n     public void testEventDispatchOrder() throws PropertyVetoException\n     {\n         EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         assertSame(calledListeners.get(1), listener2);\n     }\n \n+    @Test\n     public void testCreateWithNonInterfaceParameter()\n     {\n         try\n         }\n     }\n \n+    @Test\n     public void testCreateWithNullParameter()\n     {\n         try\n         }\n     }\n \n+    @Test\n     public void testRemoveListenerDuringEvent() throws PropertyVetoException\n     {\n         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         assertEquals(listenerSupport.getListenerCount(), 0);\n     }\n \n+    @Test\n     public void testGetListeners() {\n         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n \n         assertSame(empty, listenerSupport.getListeners());\n     }\n \n+    @Test\n     public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException {\n         EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         listenerSupport.addListener(new VetoableChangeListener() {\n         assertEquals(0, deserializedListenerSupport.getListeners().length);\n     }\n \n+    @Test\n     public void testSubclassInvocationHandling() throws PropertyVetoException {\n \n         @SuppressWarnings(\"serial\")\n--- a/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n  */\n package org.apache.commons.lang3.event;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n import java.beans.PropertyChangeEvent;\n import java.beans.PropertyChangeListener;\n import java.beans.VetoableChangeListener;\n \n import javax.naming.event.ObjectChangeListener;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * @since 3.0\n  * @version $Id$\n  */\n-public class EventUtilsTest extends TestCase\n+public class EventUtilsTest \n {\n \n+    @Test\n     public void testConstructor() {\n         assertNotNull(new EventUtils());\n         Constructor<?>[] cons = EventUtils.class.getDeclaredConstructors();\n         assertEquals(false, Modifier.isFinal(EventUtils.class.getModifiers()));\n     }\n     \n+    @Test\n     public void testAddEventListener()\n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n         assertEquals(1, handler.getEventCount(\"propertyChange\"));\n     }\n \n+    @Test\n     public void testAddEventListenerWithNoAddMethod()\n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n         }\n     }\n \n+    @Test\n     public void testAddEventListenerThrowsException()\n     {\n         final ExceptionEventSource src = new ExceptionEventSource();\n         }\n     }\n \n+    @Test\n     public void testAddEventListenerWithPrivateAddMethod()\n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n         }\n     }\n \n+    @Test\n     public void testBindEventsToMethod()\n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n     }\n \n \n+    @Test\n     public void testBindEventsToMethodWithEvent()\n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n     }\n \n \n+    @Test\n     public void testBindFilteredEventsToMethod()\n     {\n         final MultipleEventSource src = new MultipleEventSource();\n--- a/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n  */\n package org.apache.commons.lang3.exception;\n \n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import java.io.Serializable;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n /**\n  * Abstract test of an ExceptionContext implementation.\n  */\n-public abstract class AbstractExceptionContextTest<T extends ExceptionContext & Serializable> extends TestCase {\n+public abstract class AbstractExceptionContextTest<T extends ExceptionContext & Serializable> {\n \n     protected static final String TEST_MESSAGE_2 = \"This is monotonous\";\n     protected static final String TEST_MESSAGE = \"Test Message\";\n         }\n     }\n \n-    @Override\n-    protected void setUp() throws Exception {\n+\n+    @Before\n+    public void setUp() throws Exception {\n         exceptionContext\n             .addContextValue(\"test1\", null)\n             .addContextValue(\"test2\", \"some value\")\n             .addContextValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n     }\n \n+    @Test\n     public void testAddContextValue() {\n         String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE);\n         assertTrue(message.indexOf(TEST_MESSAGE) >= 0);\n         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n     }\n \n+    @Test\n     public void testSetContextValue() {\n         exceptionContext.addContextValue(\"test2\", \"different value\");\n         exceptionContext.setContextValue(\"test3\", \"3\");\n         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n     }\n \n+    @Test\n     public void testGetFirstContextValue() {\n         exceptionContext.addContextValue(\"test2\", \"different value\");\n \n         assertTrue(exceptionContext.getFirstContextValue(\"test2\").equals(\"another\"));\n     }\n \n+    @Test\n     public void testGetContextValues() {\n         exceptionContext.addContextValue(\"test2\", \"different value\");\n \n         assertTrue(exceptionContext.getFirstContextValue(\"test2\").equals(\"another\"));\n     }\n \n+    @Test\n     public void testGetContextLabels() {\n         assertEquals(5, exceptionContext.getContextEntries().size());\n         \n         assertTrue(labels.contains(\"test Nbr\"));\n     }\n \n+    @Test\n     public void testGetContextEntries() {\n         assertEquals(5, exceptionContext.getContextEntries().size());\n         \n         assertEquals(\"test2\", entries.get(5).getKey());\n     }\n     \n+    @Test\n     public void testJavaSerialization() {\n         exceptionContext.setContextValue(\"test Poorly written obj\", \"serializable replacement\");\n         \n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n  */\n package org.apache.commons.lang3.exception;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.Date;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.junit.Test;\n \n /**\n  * JUnit tests for ContextedException.\n         super.setUp();\n     }\n \n+    @Test\n     public void testContextedException() {\n         exceptionContext = new ContextedException();\n         String message = exceptionContext.getMessage();\n         assertTrue(StringUtils.isEmpty(message));\n     }\n \n+    @Test\n     public void testContextedExceptionString() {\n         exceptionContext = new ContextedException(TEST_MESSAGE);\n         assertEquals(TEST_MESSAGE, exceptionContext.getMessage());\n         assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n     }\n \n+    @Test\n     public void testContextedExceptionThrowable() {\n         exceptionContext = new ContextedException(new Exception(TEST_MESSAGE));\n         String message = exceptionContext.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n     }\n \n+    @Test\n     public void testContextedExceptionStringThrowable() {\n         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n         String message = exceptionContext.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n     }\n     \n+    @Test\n     public void testContextedExceptionStringThrowableContext() {\n         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n         String message = exceptionContext.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n     }\n \n+    @Test\n     public void testNullExceptionPassing() {\n         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n         .addContextValue(\"test1\", null)\n         assertTrue(message != null);\n     }\n \n+    @Test\n     public void testRawMessage() {\n         assertEquals(Exception.class.getName() + \": \" + TEST_MESSAGE, exceptionContext.getRawMessage());\n         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n  */\n package org.apache.commons.lang3.exception;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.Date;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * JUnit tests for ContextedRuntimeException.\n  */\n public class ContextedRuntimeExceptionTest extends AbstractExceptionContextTest<ContextedRuntimeException> {\n     \n-    @Override\n-    protected void setUp() throws Exception {\n+    @Before\n+    public void setUp() throws Exception {\n         exceptionContext = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\n         super.setUp();\n     }\n \n+    @Test\n     public void testContextedException() {\n         exceptionContext = new ContextedRuntimeException();\n         String message = exceptionContext.getMessage();\n         assertTrue(StringUtils.isEmpty(message));\n     }\n \n+    @Test\n     public void testContextedExceptionString() {\n         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE);\n         assertEquals(TEST_MESSAGE, exceptionContext.getMessage());\n         assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n     }\n \n+    @Test\n     public void testContextedExceptionThrowable() {\n         exceptionContext = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\n         String message = exceptionContext.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n     }\n \n+    @Test\n     public void testContextedExceptionStringThrowable() {\n         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n         String message = exceptionContext.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n     }\n     \n+    @Test\n     public void testContextedExceptionStringThrowableContext() {\n         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext() {});\n         String message = exceptionContext.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n     }\n \n+    @Test\n     public void testNullExceptionPassing() {\n         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n         .addContextValue(\"test1\", null)\n         assertTrue(message != null);\n     }\n \n+    @Test\n     public void testRawMessage() {\n         assertEquals(Exception.class.getName() + \": \" + TEST_MESSAGE, exceptionContext.getRawMessage());\n         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n--- a/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n  */\n package org.apache.commons.lang3.exception;\n \n+import org.junit.Before;\n+import org.junit.Test;\n+\n /**\n  * JUnit tests for DefaultExceptionContext.\n  *\n  */\n public class DefaultExceptionContextTest extends AbstractExceptionContextTest<DefaultExceptionContext> {\n     \n-    @Override\n+    @Before\n     public void setUp() throws Exception {\n         exceptionContext = new DefaultExceptionContext();\n         super.setUp();\n     }\n     \n+    @Test\n     public void testFormattedExceptionMessageNull() {\n         exceptionContext = new DefaultExceptionContext();\n         exceptionContext.getFormattedExceptionMessage(null);\n--- a/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n  */\n package org.apache.commons.lang3.exception;\n \n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.List;\n-\n-import junit.framework.TestCase;\n \n /**\n  * Tests {@link org.apache.commons.lang3.exception.ExceptionUtils}.\n  * \n  * @since 1.0\n  */\n-public class ExceptionUtilsTest extends TestCase {\n+public class ExceptionUtilsTest {\n     \n     private NestableException nested;\n     private Throwable withCause;\n     private Throwable jdkNoCause;\n     private ExceptionWithCause cyclicCause;\n \n-    public ExceptionUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n+\n+    @Before\n     public void setUp() {\n         withoutCause = createExceptionWithoutCause();\n         nested = new NestableException(withoutCause);\n         cyclicCause = new ExceptionWithCause(a);\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n+\n+    @After\n+    public void tearDown() throws Exception {\n         withoutCause = null;\n         nested = null;\n         withCause = null;\n \n     //-----------------------------------------------------------------------\n     \n+    @Test\n     public void testConstructor() {\n         assertNotNull(new ExceptionUtils());\n         Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors();\n     \n     //-----------------------------------------------------------------------\n     @SuppressWarnings(\"deprecation\") // Specifically tests the deprecated methods\n+    @Test\n     public void testGetCause_Throwable() {\n         assertSame(null, ExceptionUtils.getCause(null));\n         assertSame(null, ExceptionUtils.getCause(withoutCause));\n     }\n \n     @SuppressWarnings(\"deprecation\") // Specifically tests the deprecated methods\n+    @Test\n     public void testGetCause_ThrowableArray() {\n         assertSame(null, ExceptionUtils.getCause(null, null));\n         assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n         assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getTargetException\"}));\n     }\n \n+    @Test\n     public void testGetRootCause_Throwable() {\n         assertSame(null, ExceptionUtils.getRootCause(null));\n         assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetThrowableCount_Throwable() {\n         assertEquals(0, ExceptionUtils.getThrowableCount(null));\n         assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetThrowables_Throwable_null() {\n         assertEquals(0, ExceptionUtils.getThrowables(null).length);\n     }\n \n+    @Test\n     public void testGetThrowables_Throwable_withoutCause() {\n         Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\n         assertEquals(1, throwables.length);\n         assertSame(withoutCause, throwables[0]);\n     }\n \n+    @Test\n     public void testGetThrowables_Throwable_nested() {\n         Throwable[] throwables = ExceptionUtils.getThrowables(nested);\n         assertEquals(2, throwables.length);\n         assertSame(withoutCause, throwables[1]);\n     }\n \n+    @Test\n     public void testGetThrowables_Throwable_withCause() {\n         Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\n         assertEquals(3, throwables.length);\n         assertSame(withoutCause, throwables[2]);\n     }\n \n+    @Test\n     public void testGetThrowables_Throwable_jdkNoCause() {\n         Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\n         assertEquals(1, throwables.length);\n         assertSame(jdkNoCause, throwables[0]);\n     }\n \n+    @Test\n     public void testGetThrowables_Throwable_recursiveCause() {\n         Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\n         assertEquals(3, throwables.length);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetThrowableList_Throwable_null() {\n         List<?> throwables = ExceptionUtils.getThrowableList(null);\n         assertEquals(0, throwables.size());\n     }\n \n+    @Test\n     public void testGetThrowableList_Throwable_withoutCause() {\n         List<?> throwables = ExceptionUtils.getThrowableList(withoutCause);\n         assertEquals(1, throwables.size());\n         assertSame(withoutCause, throwables.get(0));\n     }\n \n+    @Test\n     public void testGetThrowableList_Throwable_nested() {\n         List<?> throwables = ExceptionUtils.getThrowableList(nested);\n         assertEquals(2, throwables.size());\n         assertSame(withoutCause, throwables.get(1));\n     }\n \n+    @Test\n     public void testGetThrowableList_Throwable_withCause() {\n         List<?> throwables = ExceptionUtils.getThrowableList(withCause);\n         assertEquals(3, throwables.size());\n         assertSame(withoutCause, throwables.get(2));\n     }\n \n+    @Test\n     public void testGetThrowableList_Throwable_jdkNoCause() {\n         List<?> throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n         assertEquals(1, throwables.size());\n         assertSame(jdkNoCause, throwables.get(0));\n     }\n \n+    @Test\n     public void testGetThrowableList_Throwable_recursiveCause() {\n         List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause);\n         assertEquals(3, throwables.size());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOf_ThrowableClass() {\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\n     }\n \n+    @Test\n     public void testIndexOf_ThrowableClassInt() {\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIndexOfType_ThrowableClass() {\n         assertEquals(-1, ExceptionUtils.indexOfType(null, null));\n         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\n         assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\n     }\n \n+    @Test\n     public void testIndexOfType_ThrowableClassInt() {\n         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\n         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testPrintRootCauseStackTrace_Throwable() throws Exception {\n         ExceptionUtils.printRootCauseStackTrace(null);\n         // could pipe system.err to a known stream, but not much point as\n         // internally this method calls stram method anyway\n     }\n     \n+    @Test\n     public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {\n         ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n         ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\n         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n     }\n \n+    @Test\n     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {\n         StringWriter writer = new StringWriter(1024);\n         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetRootCauseStackTrace_Throwable() throws Exception {\n         assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\n         \n         assertEquals(false, match);\n     }\n \n+    @Test\n     public void testRemoveCommonFrames_ListList() throws Exception {\n         try {\n             ExceptionUtils.removeCommonFrames(null, null);\n         }\n     }\n \n+    @Test\n     public void test_getMessage_Throwable() {\n         Throwable th = null;\n         assertEquals(\"\", ExceptionUtils.getMessage(th));\n         assertEquals(\"ExceptionUtilsTest.ExceptionWithCause: Wrapper\", ExceptionUtils.getMessage(th));\n     }\n \n+    @Test\n     public void test_getRootCauseMessage_Throwable() {\n         Throwable th = null;\n         assertEquals(\"\", ExceptionUtils.getRootCauseMessage(th));\n--- a/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n  */\n package org.apache.commons.lang3.math;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n \n /**\n  * Test cases for the {@link Fraction} class\n  *\n  * @version $Id$\n  */\n-public class FractionTest extends TestCase {\n+public class FractionTest  {\n     \n     private static final int SKIP = 500;  //53\n \n-    public FractionTest(String name) {\n-        super(name);\n-    }\n-\n     //--------------------------------------------------------------------------\n-    \n+    @Test\n     public void testConstants() {\n         assertEquals(0, Fraction.ZERO.getNumerator());\n         assertEquals(1, Fraction.ZERO.getDenominator());\n         assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n     }\n \n+    @Test\n     public void testFactory_int_int() {\n         Fraction f = null;\n         \n         } catch (ArithmeticException ex) {}\n     }\n \n+    @Test\n     public void testFactory_int_int_int() {\n         Fraction f = null;\n         \n             fail(\"expecting ArithmeticException\");\n         } catch (ArithmeticException ex) {}\n     }\n+    @Test\n     public void testReducedFactory_int_int() {\n         Fraction f = null;\n         \n         assertEquals(1, f.getDenominator());\n     }\n \n+    @Test\n     public void testFactory_double() {\n         Fraction f = null;\n         \n         }\n     }\n \n+    @Test\n     public void testFactory_String() {\n         try {\n             Fraction.getFraction(null);\n     }\n     \n     \n+    @Test\n     public void testFactory_String_double() {\n         Fraction f = null;\n         \n         } catch (NumberFormatException ex) {}\n     }\n \n+    @Test\n     public void testFactory_String_proper() {\n         Fraction f = null;\n         \n         } catch (NumberFormatException ex) {}\n     }\n \n+    @Test\n     public void testFactory_String_improper() {\n         Fraction f = null;\n         \n         } catch (NumberFormatException ex) {}\n     }\n \n+    @Test\n     public void testGets() {\n         Fraction f = null;\n         \n         assertEquals(1, f.getDenominator());\n     }\n             \n+    @Test\n     public void testConversions() {\n         Fraction f = null;\n         \n         assertEquals(3.875d, f.doubleValue(), 0.00001d);\n     }\n     \n+    @Test\n     public void testReduce() {\n         Fraction f = null;\n         \n         assertEquals(1, result.getDenominator());\n     }\n     \n+    @Test\n     public void testInvert() {\n         Fraction f = null;\n         \n         assertEquals(Integer.MAX_VALUE, f.getDenominator());\n     }\n     \n+    @Test\n     public void testNegate() {\n         Fraction f = null;\n         \n         } catch (ArithmeticException ex) {}\n     }\n     \n+    @Test\n     public void testAbs() {\n         Fraction f = null;\n         \n         } catch (ArithmeticException ex) {}\n     }\n     \n+    @Test\n     public void testPow() {\n         Fraction f = null;\n         \n         } catch (ArithmeticException ex) {}\n     }\n     \n+    @Test\n     public void testAdd() {\n         Fraction f = null;\n         Fraction f1 = null;\n         } catch (ArithmeticException ex) {}\n     }\n             \n+    @Test\n     public void testSubtract() {\n         Fraction f = null;\n         Fraction f1 = null;\n         } catch (ArithmeticException ex) {}\n     }\n             \n+    @Test\n     public void testMultiply() {\n         Fraction f = null;\n         Fraction f1 = null;\n         } catch (ArithmeticException ex) {}\n     }\n             \n+    @Test\n     public void testDivide() {\n         Fraction f = null;\n         Fraction f1 = null;\n         } catch (ArithmeticException ex) {}\n     }\n             \n+    @Test\n     public void testEquals() {\n         Fraction f1 = null;\n         Fraction f2 = null;\n         assertEquals(false, f1.equals(f2));\n     }\n     \n+    @Test\n     public void testHashCode() {\n         Fraction f1 = Fraction.getFraction(3, 5);\n         Fraction f2 = Fraction.getFraction(3, 5);\n         assertTrue(f1.hashCode() != f2.hashCode());\n     }\n     \n+    @Test\n     public void testCompareTo() {\n         Fraction f1 = null;\n         Fraction f2 = null;\n \n     }\n     \n+    @Test\n     public void testToString() {\n         Fraction f = null;\n \n         assertEquals(\"-2147483648/2147483647\", f.toString());\n     }\n     \n+    @Test\n     public void testToProperString() {\n         Fraction f = null;\n \n--- a/src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java\n  */\n package org.apache.commons.lang3.math;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.math.IEEE754rUtils}.\n  *\n  * @version $Id$\n  */\n-public class IEEE754rUtilsTest extends TestCase {\n+public class IEEE754rUtilsTest  {\n \n+    @Test\n     public void testLang381() {\n         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);\n         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);\n         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);\n     }\n \n+    @Test\n     public void testEnforceExceptions() {\n         try {\n             IEEE754rUtils.min( (float[]) null);\n \n     }\n \n+    @Test\n     public void testConstructorExists() {\n         new IEEE754rUtils();\n     }\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n \n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @see MutableBoolean\n  * @version $Id$\n  */\n-public class MutableBooleanTest extends TestCase {\n+public class MutableBooleanTest {\n \n-    public MutableBooleanTest(String testName) {\n-        super(testName);\n-    }\n-\n+    @Test\n     public void testCompareTo() {\n         final MutableBoolean mutBool = new MutableBoolean(false);\n \n     }\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals(false, new MutableBoolean().booleanValue());\n \n         }\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableBoolean mutBoolA = new MutableBoolean(false);\n         final MutableBoolean mutBoolB = new MutableBoolean(false);\n         assertEquals(false, mutBoolA.equals(\"false\"));\n     }\n \n+    @Test\n     public void testGetSet() {\n         assertEquals(false, new MutableBoolean().booleanValue());\n         assertEquals(Boolean.FALSE, new MutableBoolean().getValue());\n         }\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableBoolean mutBoolA = new MutableBoolean(false);\n         final MutableBoolean mutBoolB = new MutableBoolean(false);\n         assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());\n         assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableByte\n  */\n-public class MutableByteTest extends TestCase {\n-\n-    public MutableByteTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableByteTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals((byte) 0, new MutableByte().byteValue());\n         \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableByte mutNum = new MutableByte((byte) 0);\n         assertEquals((byte) 0, new MutableByte().byteValue());\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableByte mutNumA = new MutableByte((byte) 0);\n         final MutableByte mutNumB = new MutableByte((byte) 0);\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableByte mutNumA = new MutableByte((byte) 0);\n         final MutableByte mutNumB = new MutableByte((byte) 0);\n         assertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());\n     }\n \n+    @Test\n     public void testCompareTo() {\n         final MutableByte mutNum = new MutableByte((byte) 0);\n \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testPrimitiveValues() {\n         MutableByte mutNum = new MutableByte( (byte) 1 );\n         \n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    @Test\n     public void testToByte() {\n         assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());\n         assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());\n     }\n \n+    @Test\n     public void testIncrement() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n         mutNum.increment();\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testDecrement() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n         mutNum.decrement();\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValuePrimitive() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n         mutNum.add((byte)1);\n         assertEquals((byte) 2, mutNum.byteValue());\n     }\n \n+    @Test\n     public void testAddValueObject() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n         mutNum.add(Integer.valueOf(1));\n         assertEquals((byte) 2, mutNum.byteValue());\n     }\n \n+    @Test\n     public void testSubtractValuePrimitive() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n         mutNum.subtract((byte) 1);\n         assertEquals((byte) 0, mutNum.byteValue());\n     }\n \n+    @Test\n     public void testSubtractValueObject() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n         mutNum.subtract(Integer.valueOf(1));\n         assertEquals((byte) 0, mutNum.byteValue());\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"0\", new MutableByte((byte) 0).toString());\n         assertEquals(\"10\", new MutableByte((byte) 10).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableDouble\n  */\n-public class MutableDoubleTest extends TestCase {\n-\n-    public MutableDoubleTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableDoubleTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n         \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableDouble mutNum = new MutableDouble(0d);\n         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testNanInfinite() {\n         MutableDouble mutNum = new MutableDouble(Double.NaN);\n         assertEquals(true, mutNum.isNaN());\n         assertEquals(true, mutNum.isInfinite());\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableDouble mutNumA = new MutableDouble(0d);\n         final MutableDouble mutNumB = new MutableDouble(0d);\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableDouble mutNumA = new MutableDouble(0d);\n         final MutableDouble mutNumB = new MutableDouble(0d);\n         assertEquals(true, mutNumA.hashCode() == Double.valueOf(0d).hashCode());\n     }\n \n+    @Test\n     public void testCompareTo() {\n         final MutableDouble mutNum = new MutableDouble(0d);\n \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testPrimitiveValues() {\n         MutableDouble mutNum = new MutableDouble(1.7);\n         \n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    @Test\n     public void testToDouble() {\n         assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble());\n         assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble());\n     }\n \n+    @Test\n     public void testIncrement() {\n         MutableDouble mutNum = new MutableDouble(1);\n         mutNum.increment();\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testDecrement() {\n         MutableDouble mutNum = new MutableDouble(1);\n         mutNum.decrement();\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValuePrimitive() {\n         MutableDouble mutNum = new MutableDouble(1);\n         mutNum.add(1.1d);\n         assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n     }\n \n+    @Test\n     public void testAddValueObject() {\n         MutableDouble mutNum = new MutableDouble(1);\n         mutNum.add(Double.valueOf(1.1d));\n         assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n     }\n \n+    @Test\n     public void testSubtractValuePrimitive() {\n         MutableDouble mutNum = new MutableDouble(1);\n         mutNum.subtract(0.9d);\n         assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n     }\n \n+    @Test\n     public void testSubtractValueObject() {\n         MutableDouble mutNum = new MutableDouble(1);\n         mutNum.subtract(Double.valueOf(0.9d));\n         assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableDouble(0d).toString());\n         assertEquals(\"10.0\", new MutableDouble(10d).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableFloat\n  */\n-public class MutableFloatTest extends TestCase {\n-\n-    public MutableFloatTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableFloatTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n         \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableFloat mutNum = new MutableFloat(0f);\n         assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testNanInfinite() {\n         MutableFloat mutNum = new MutableFloat(Float.NaN);\n         assertEquals(true, mutNum.isNaN());\n         assertEquals(true, mutNum.isInfinite());\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableFloat mutNumA = new MutableFloat(0f);\n         final MutableFloat mutNumB = new MutableFloat(0f);\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableFloat mutNumA = new MutableFloat(0f);\n         final MutableFloat mutNumB = new MutableFloat(0f);\n         assertEquals(true, mutNumA.hashCode() == Float.valueOf(0f).hashCode());\n     }\n \n+    @Test\n     public void testCompareTo() {\n         final MutableFloat mutNum = new MutableFloat(0f);\n \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testPrimitiveValues() {\n         MutableFloat mutNum = new MutableFloat(1.7F);\n         \n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    @Test\n     public void testToFloat() {\n         assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat());\n         assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat());\n     }\n \n+    @Test\n     public void testIncrement() {\n         MutableFloat mutNum = new MutableFloat(1);\n         mutNum.increment();\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testDecrement() {\n         MutableFloat mutNum = new MutableFloat(1);\n         mutNum.decrement();\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValuePrimitive() {\n         MutableFloat mutNum = new MutableFloat(1);\n         mutNum.add(1.1f);\n         assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n     }\n \n+    @Test\n     public void testAddValueObject() {\n         MutableFloat mutNum = new MutableFloat(1);\n         mutNum.add(Float.valueOf(1.1f));\n         assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n     }\n \n+    @Test\n     public void testSubtractValuePrimitive() {\n         MutableFloat mutNum = new MutableFloat(1);\n         mutNum.subtract(0.9f);\n         assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n     }\n \n+    @Test\n     public void testSubtractValueObject() {\n         MutableFloat mutNum = new MutableFloat(1);\n         mutNum.subtract(Float.valueOf(0.9f));\n         assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableFloat(0f).toString());\n         assertEquals(\"10.0\", new MutableFloat(10f).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableInt\n  */\n-public class MutableIntTest extends TestCase {\n-\n-    public MutableIntTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableIntTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals(0, new MutableInt().intValue());\n         \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableInt mutNum = new MutableInt(0);\n         assertEquals(0, new MutableInt().intValue());\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testEquals() {\n         this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));\n         // Should Numbers be supported? GaryG July-21-2005.\n         assertEquals(false, numA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableInt mutNumA = new MutableInt(0);\n         final MutableInt mutNumB = new MutableInt(0);\n         assertEquals(true, mutNumA.hashCode() == Integer.valueOf(0).hashCode());\n     }\n \n+    @Test\n     public void testCompareTo() {\n         final MutableInt mutNum = new MutableInt(0);\n \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testPrimitiveValues() {\n         MutableInt mutNum = new MutableInt(1);\n         \n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    @Test\n     public void testToInteger() {\n         assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger());\n         assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger());\n     }\n \n+    @Test\n     public void testIncrement() {\n         MutableInt mutNum = new MutableInt(1);\n         mutNum.increment();\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testDecrement() {\n         MutableInt mutNum = new MutableInt(1);\n         mutNum.decrement();\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValuePrimitive() {\n         MutableInt mutNum = new MutableInt(1);\n         mutNum.add(1);\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValueObject() {\n         MutableInt mutNum = new MutableInt(1);\n         mutNum.add(Integer.valueOf(1));\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testSubtractValuePrimitive() {\n         MutableInt mutNum = new MutableInt(1);\n         mutNum.subtract(1);\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testSubtractValueObject() {\n         MutableInt mutNum = new MutableInt(1);\n         mutNum.subtract(Integer.valueOf(1));\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"0\", new MutableInt(0).toString());\n         assertEquals(\"10\", new MutableInt(10).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableLong\n  */\n-public class MutableLongTest extends TestCase {\n-\n-    public MutableLongTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableLongTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals(0, new MutableLong().longValue());\n         \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableLong mutNum = new MutableLong(0);\n         assertEquals(0, new MutableLong().longValue());\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableLong mutNumA = new MutableLong(0);\n         final MutableLong mutNumB = new MutableLong(0);\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableLong mutNumA = new MutableLong(0);\n         final MutableLong mutNumB = new MutableLong(0);\n         assertEquals(true, mutNumA.hashCode() == Long.valueOf(0).hashCode());\n     }\n \n+    @Test\n     public void testCompareTo() {\n         final MutableLong mutNum = new MutableLong(0);\n \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testPrimitiveValues() {\n         MutableLong mutNum = new MutableLong(1L);\n \n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    @Test\n     public void testToLong() {\n         assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong());\n         assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong());\n     }\n \n+    @Test\n     public void testIncrement() {\n         MutableLong mutNum = new MutableLong(1);\n         mutNum.increment();\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testDecrement() {\n         MutableLong mutNum = new MutableLong(1);\n         mutNum.decrement();\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValuePrimitive() {\n         MutableLong mutNum = new MutableLong(1);\n         mutNum.add(1);\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValueObject() {\n         MutableLong mutNum = new MutableLong(1);\n         mutNum.add(Long.valueOf(1));\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testSubtractValuePrimitive() {\n         MutableLong mutNum = new MutableLong(1);\n         mutNum.subtract(1);\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testSubtractValueObject() {\n         MutableLong mutNum = new MutableLong(1);\n         mutNum.subtract(Long.valueOf(1));\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"0\", new MutableLong(0).toString());\n         assertEquals(\"10\", new MutableLong(10).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableShort\n  */\n-public class MutableObjectTest extends TestCase {\n-\n-    public MutableObjectTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableObjectTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals(null, new MutableObject<String>().getValue());\n         \n         assertSame(null, new MutableObject<Object>(null).getValue());\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableObject<String> mutNum = new MutableObject<String>();\n         assertEquals(null, new MutableObject<Object>().getValue());\n         assertSame(null, mutNum.getValue());\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n         final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n         final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n         assertEquals(0, mutNumD.hashCode());\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"HI\", new MutableObject<String>(\"HI\").toString());\n         assertEquals(\"10.0\", new MutableObject<Double>(Double.valueOf(10)).toString());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n  */\n package org.apache.commons.lang3.mutable;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * JUnit tests.\n  * @version $Id$\n  * @see MutableShort\n  */\n-public class MutableShortTest extends TestCase {\n-\n-    public MutableShortTest(String testName) {\n-        super(testName);\n-    }\n+public class MutableShortTest {\n \n     // ----------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         assertEquals((short) 0, new MutableShort().shortValue());\n         \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testGetSet() {\n         final MutableShort mutNum = new MutableShort((short) 0);\n         assertEquals((short) 0, new MutableShort().shortValue());\n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testEquals() {\n         final MutableShort mutNumA = new MutableShort((short) 0);\n         final MutableShort mutNumB = new MutableShort((short) 0);\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         final MutableShort mutNumA = new MutableShort((short) 0);\n         final MutableShort mutNumB = new MutableShort((short) 0);\n         assertEquals(true, mutNumA.hashCode() == Short.valueOf((short) 0).hashCode());\n     }\n \n+    @Test\n     public void testCompareTo() {\n         final MutableShort mutNum = new MutableShort((short) 0);\n \n         } catch (NullPointerException ex) {}\n     }\n \n+    @Test\n     public void testPrimitiveValues() {\n         MutableShort mutNum = new MutableShort( (short) 1 );\n         \n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    @Test\n     public void testToShort() {\n         assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort());\n         assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort());\n     }\n \n+    @Test\n     public void testIncrement() {\n         MutableShort mutNum = new MutableShort((short) 1);\n         mutNum.increment();\n         assertEquals(2L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testDecrement() {\n         MutableShort mutNum = new MutableShort((short) 1);\n         mutNum.decrement();\n         assertEquals(0L, mutNum.longValue());\n     }\n \n+    @Test\n     public void testAddValuePrimitive() {\n         MutableShort mutNum = new MutableShort((short) 1);\n         mutNum.add((short) 1);\n         assertEquals((short) 2, mutNum.shortValue());\n     }\n \n+    @Test\n     public void testAddValueObject() {\n         MutableShort mutNum = new MutableShort((short) 1);\n         mutNum.add(Short.valueOf((short) 1));\n         assertEquals((short) 2, mutNum.shortValue());\n     }\n \n+    @Test\n     public void testSubtractValuePrimitive() {\n         MutableShort mutNum = new MutableShort((short) 1);\n         mutNum.subtract((short) 1);\n         assertEquals((short) 0, mutNum.shortValue());\n     }\n \n+    @Test\n     public void testSubtractValueObject() {\n         MutableShort mutNum = new MutableShort((short) 1);\n         mutNum.subtract(Short.valueOf((short) 1));\n         assertEquals((short) 0, mutNum.shortValue());\n     }\n \n+    @Test\n     public void testToString() {\n         assertEquals(\"0\", new MutableShort((short) 0).toString());\n         assertEquals(\"10\", new MutableShort((short) 10).toString());\n--- a/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n  */\n package org.apache.commons.lang3.reflect;\n \n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import java.lang.reflect.Constructor;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.commons.lang3.mutable.MutableObject;\n  * Unit tests ConstructorUtils\n  * @version $Id$\n  */\n-public class ConstructorUtilsTest extends TestCase {\n+public class ConstructorUtilsTest {\n     public static class TestBean {\n         private String toString;\n \n \n     private Map<Class<?>, Class<?>[]> classCache;\n \n-    public ConstructorUtilsTest(String name) {\n-        super(name);\n+    public ConstructorUtilsTest() {\n         classCache = new HashMap<Class<?>, Class<?>[]>();\n     }\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+\n+    @Before\n+    public void setUp() throws Exception {\n         classCache.clear();\n     }\n \n+    @Test\n     public void testConstructor() throws Exception {\n         assertNotNull(MethodUtils.class.newInstance());\n     }\n \n+    @Test\n     public void testInvokeConstructor() throws Exception {\n         assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class,\n                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());\n                 TestBean.class, NumberUtils.DOUBLE_ONE).toString());\n     }\n \n+    @Test\n     public void testInvokeExactConstructor() throws Exception {\n         assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(\n                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());\n         }\n     }\n \n+    @Test\n     public void testGetAccessibleConstructor() throws Exception {\n         assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class\n                 .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n                 .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n     }\n \n+    @Test\n     public void testGetAccessibleConstructorFromDescription() throws Exception {\n         assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,\n                 ArrayUtils.EMPTY_CLASS_ARRAY));\n                 PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));\n     }\n \n+    @Test\n     public void testGetMatchingAccessibleMethod() throws Exception {\n         expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\n                 singletonArray(Double.TYPE), singletonArray(Double.TYPE));\n     }\n \n+    @Test\n     public void testNullArgument() {\n         expectMatchingAccessibleConstructorParameterTypes(MutableObject.class,\n                 singletonArray(null), singletonArray(Object.class));\n--- a/src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java\n \n package org.apache.commons.lang3.text;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-\n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.CompositeFormat}.\n  */\n-public class CompositeFormatTest extends TestCase {\n-\n-    /**\n-     * Create a new test case with the specified name.\n-     * \n-     * @param name\n-     *            name\n-     */\n-    public CompositeFormatTest(String name) {\n-        super(name);\n-    }\n-\n+public class CompositeFormatTest {\n \n     /**\n      * Ensures that the parse/format separation is correctly maintained. \n      */\n+    @Test\n     public void testCompositeFormat() {\n \n         Format parser = new Format() {\n         assertEquals( \"Formatter get method incorrectly implemented\", formatter, composite.getFormatter() );\n     }\n \n+    @Test\n     public void testUsage() throws Exception {\n         Format f1 = new SimpleDateFormat(\"MMddyyyy\", Locale.ENGLISH);\n         Format f2 = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\n--- a/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n  */\n package org.apache.commons.lang3.text;\n \n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_4;\n \n import java.text.ChoiceFormat;\n import java.util.Locale;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.SystemUtils;\n \n /**\n  * @since 2.4\n  * @version $Id$\n  */\n-public class ExtendedMessageFormatTest extends TestCase {\n+public class ExtendedMessageFormatTest {\n \n     private final Map<String, FormatFactory> registry = new HashMap<String, FormatFactory>();\n \n-    /**\n-     * Create a new test case.\n-     *\n-     * @param name The name of the test\n-     */\n-    public ExtendedMessageFormatTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         registry.put(\"lower\", new LowerCaseFormatFactory());\n         registry.put(\"upper\", new UpperCaseFormatFactory());\n     }\n     /**\n      * Test extended formats.\n      */\n+    @Test\n     public void testExtendedFormats() {\n         String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\n         ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n     /**\n      * Test Bug LANG-477 - out of memory error with escaped quote\n      */\n+    @Test\n     public void testEscapedQuote_LANG_477() {\n         String pattern = \"it''s a {0,lower} 'test'!\";\n         ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n     /**\n      * Test extended and built in formats.\n      */\n+    @Test\n     public void testExtendedAndBuiltInFormats() {\n         Calendar cal = Calendar.getInstance();\n         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n     /**\n      * Test the built in choice format.\n      */\n+    @Test\n     public void testBuiltInChoiceFormat() {\n         Object[] values = new Number[] {Integer.valueOf(1), Double.valueOf(\"2.2\"), Double.valueOf(\"1234.5\")};\n         String choicePattern = null;\n     /**\n      * Test the built in date/time formats\n      */\n+    @Test\n     public void testBuiltInDateTimeFormat() {\n         Calendar cal = Calendar.getInstance();\n         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n         checkBuiltInFormat(\"12: {0,time}\",         args, availableLocales);\n     }\n \n+    @Test\n     public void testOverriddenBuiltinFormat() {\n         Calendar cal = Calendar.getInstance();\n         cal.set(2007, Calendar.JANUARY, 23);\n     /**\n      * Test the built in number formats.\n      */\n+    @Test\n     public void testBuiltInNumberFormat() {\n         Object[] args = new Object[] {Double.valueOf(\"6543.21\")};\n         Locale[] availableLocales = NumberFormat.getAvailableLocales();\n     /**\n      * Test equals() and hashcode.\n      */\n+    @Test\n     public void testEqualsHashcode() {\n         Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n         Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n \n package org.apache.commons.lang3.text;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.lang3.SystemUtils;\n \n  *\n  * @version $Id$\n  */\n-public class StrBuilderAppendInsertTest extends TestCase {\n+public class StrBuilderAppendInsertTest {\n \n     /** The system line separator. */\n     private static final String SEP = SystemUtils.LINE_SEPARATOR;\n         }\n     };\n \n-    /**\n-     * Create a new test case with the specified name.\n-     * \n-     * @param name  the name\n-     */\n-    public StrBuilderAppendInsertTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendNewLine() {\n         StrBuilder sb = new StrBuilder(\"---\");\n         sb.appendNewLine().append(\"+++\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendWithNullText() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_Object() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendNull();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_String() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((String) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_String_int_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((String) null, 0, 1);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_StringBuffer() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((StringBuffer) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_StringBuffer_int_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_StrBuilder() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((StrBuilder) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_StrBuilder_int_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_CharArray() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((char[]) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_CharArray_int_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_Boolean() {\n         StrBuilder sb = new StrBuilder();\n         sb.append(true);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppend_PrimitiveNumber() {\n         StrBuilder sb = new StrBuilder();\n         sb.append(0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_Object() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendln((Object) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_String() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_String_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_StringBuffer() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_StringBuffer_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_StrBuilder() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_StrBuilder_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_CharArray() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_CharArray_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_Boolean() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendln(true);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_PrimitiveNumber() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendln(0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendPadding() {\n         StrBuilder sb = new StrBuilder();\n         sb.append(\"foo\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendFixedWidthPadLeft() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendFixedWidthPadLeft_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendFixedWidthPadLeft(123, -1, '-');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendFixedWidthPadRight() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n     }\n \n     // See: http://issues.apache.org/jira/browse/LANG-299\n+    @Test\n     public void testLang299() {\n         StrBuilder sb = new StrBuilder(1);\n         sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendFixedWidthPadRight_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendFixedWidthPadRight(123, -1, '-');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendAll_Array() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendAll((Object[]) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendAll_Collection() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendAll((Collection<?>) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendAll_Iterator() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendAll((Iterator<?>) null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendWithSeparators_Array() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendWithSeparators((Object[]) null, \",\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendWithSeparators_Collection() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendWithSeparators((Collection<?>) null, \",\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendWithSeparators_Iterator() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendWithSeparators((Iterator<?>) null, \",\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendWithSeparatorsWithNullText() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"null\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendSeparator_String() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendSeparator(\",\");  // no effect\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendSeparator_String_String() {\n         StrBuilder sb = new StrBuilder();\n         final String startSeparator = \"order by \";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendSeparator_char() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendSeparator(',');  // no effect\n         sb.appendSeparator(',');\n         assertEquals(\"foo,\", sb.toString());\n     }\n+    @Test\n     public void testAppendSeparator_char_char() {\n         StrBuilder sb = new StrBuilder();\n         final char startSeparator = ':';\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendSeparator_String_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendSeparator(\",\", 0);  // no effect\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendSeparator_char_int() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendSeparator(',', 0);  // no effect\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testInsert() {\n \n         StrBuilder sb = new StrBuilder();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testInsertWithNullText() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"null\");\n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n \n package org.apache.commons.lang3.text;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.io.Reader;\n import java.io.Writer;\n import java.util.Arrays;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.lang3.ArrayUtils;\n \n  * \n  * @version $Id$\n  */\n-public class StrBuilderTest extends TestCase {\n-\n-    /**\n-     * Create a new test case with the specified name.\n-     * \n-     * @param name\n-     *            name\n-     */\n-    public StrBuilderTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+public class StrBuilderTest {\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructors() {\n         StrBuilder sb0 = new StrBuilder();\n         assertEquals(32, sb0.capacity());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testChaining() {\n         StrBuilder sb = new StrBuilder();\n         assertSame(sb, sb.setNewLineText(null));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetSetNewLineText() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(null, sb.getNewLineText());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetSetNullText() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(null, sb.getNullText());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCapacityAndLength() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(32, sb.capacity());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testLength() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(0, sb.length());\n         assertEquals(5, sb.length());\n     }\n \n+    @Test\n     public void testSetLength() {\n         StrBuilder sb = new StrBuilder();\n         sb.append(\"Hello\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCapacity() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(sb.buffer.length, sb.capacity());\n         assertEquals(sb.buffer.length, sb.capacity());\n     }\n \n+    @Test\n     public void testEnsureCapacity() {\n         StrBuilder sb = new StrBuilder();\n         sb.ensureCapacity(2);\n         assertEquals(true, sb.capacity() >= 40);\n     }\n \n+    @Test\n     public void testMinimizeCapacity() {\n         StrBuilder sb = new StrBuilder();\n         sb.minimizeCapacity();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSize() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(0, sb.size());\n         assertEquals(5, sb.size());\n     }\n \n+    @Test\n     public void testIsEmpty() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(true, sb.isEmpty());\n         assertEquals(true, sb.isEmpty());\n     }\n \n+    @Test\n     public void testClear() {\n         StrBuilder sb = new StrBuilder();\n         sb.append(\"Hello\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCharAt() {\n         StrBuilder sb = new StrBuilder();\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSetCharAt() {\n         StrBuilder sb = new StrBuilder();\n         try {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDeleteCharAt() {\n         StrBuilder sb = new StrBuilder(\"abc\");\n         sb.deleteCharAt(0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToCharArray() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n         assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n     }\n \n+    @Test\n     public void testToCharArrayIntInt() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n         }\n     }\n \n+    @Test\n     public void testGetChars ( ) {\n         StrBuilder sb = new StrBuilder();\n         \n         assertNotSame(input, a);\n     }\n \n+    @Test\n     public void testGetCharsIntIntCharArrayInt( ) {\n         StrBuilder sb = new StrBuilder();\n                \n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDeleteIntInt() {\n         StrBuilder sb = new StrBuilder(\"abc\");\n         sb.delete(0, 1);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDeleteAll_char() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.deleteAll('X');\n         assertEquals(\"\", sb.toString());\n     }\n \n+    @Test\n     public void testDeleteFirst_char() {\n         StrBuilder sb = new StrBuilder(\"abcba\");\n         sb.deleteFirst('X');\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testDeleteAll_String() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.deleteAll((String) null);\n         assertEquals(\"\", sb.toString());\n     }\n \n+    @Test\n     public void testDeleteFirst_String() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.deleteFirst((String) null);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testDeleteAll_StrMatcher() {\n         StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n         sb.deleteAll((StrMatcher) null);\n         assertEquals(\"\", sb.toString());\n     }\n \n+    @Test\n     public void testDeleteFirst_StrMatcher() {\n         StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n         sb.deleteFirst((StrMatcher) null);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testReplace_int_int_String() {\n         StrBuilder sb = new StrBuilder(\"abc\");\n         sb.replace(0, 1, \"d\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReplaceAll_char_char() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replaceAll('x', 'y');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReplaceFirst_char_char() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replaceFirst('x', 'y');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReplaceAll_String_String() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replaceAll((String) null, null);\n         assertEquals(\"xbxxbx\", sb.toString());\n     }\n \n+    @Test\n     public void testReplaceFirst_String_String() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replaceFirst((String) null, null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReplaceAll_StrMatcher_String() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replaceAll((StrMatcher) null, null);\n         assertEquals(\"***-******-***\", sb.toString());\n     }\n \n+    @Test\n     public void testReplaceFirst_StrMatcher_String() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replaceFirst((StrMatcher) null, null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n         assertEquals(\"\", sb.toString());\n     }\n \n+    @Test\n     public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n         StrBuilder sb = new StrBuilder(\"abcbccba\");\n         sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n         assertEquals(\"abca\", sb.toString());\n     }\n \n+    @Test\n     public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n         StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n         sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n         assertEquals(\"aaxaaaayaa\", sb.toString());\n     }\n \n+    @Test\n     public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n         StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n         sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n         assertEquals(\"aaxaaaayaa\", sb.toString());\n     }\n \n+    @Test\n     public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n         StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n         sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReverse() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(\"\", sb.reverse().toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTrim() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(\"\", sb.reverse().toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testStartsWith() {\n         StrBuilder sb = new StrBuilder();\n         assertFalse(sb.startsWith(\"a\"));\n         assertFalse(sb.startsWith(\"cba\"));\n     }\n \n+    @Test\n     public void testEndsWith() {\n         StrBuilder sb = new StrBuilder();\n         assertFalse(sb.endsWith(\"a\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSubSequenceIntInt() {\n        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n        // Start index is negative\n         assertEquals (\"hello goodbye\".subSequence(6,13), sb.subSequence(6, 13));\n     }\n \n+    @Test\n     public void testSubstringInt() {\n         StrBuilder sb = new StrBuilder (\"hello goodbye\");\n         assertEquals (\"goodbye\", sb.substring(6));\n     \n     }\n     \n+    @Test\n     public void testSubstringIntInt() {\n         StrBuilder sb = new StrBuilder (\"hello goodbye\");\n         assertEquals (\"hello\", sb.substring(0, 5));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testMidString() {\n         StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n         assertEquals(\"goodbye\", sb.midString(6, 7));\n         assertEquals(\"hello\", sb.midString(14, 22));\n     }\n \n+    @Test\n     public void testRightString() {\n         StrBuilder sb = new StrBuilder(\"left right\");\n         assertEquals(\"right\", sb.rightString(5));\n         assertEquals(\"left right\", sb.rightString(15));\n     }\n \n+    @Test\n     public void testLeftString() {\n         StrBuilder sb = new StrBuilder(\"left right\");\n         assertEquals(\"left\", sb.leftString(4));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testContains_char() {\n         StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n         assertEquals(true, sb.contains('a'));\n         assertEquals(false, sb.contains('1'));\n     }\n \n+    @Test\n     public void testContains_String() {\n         StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n         assertEquals(true, sb.contains(\"a\"));\n         assertEquals(false, sb.contains((String) null));\n     }\n \n+    @Test\n     public void testContains_StrMatcher() {\n         StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n         assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testIndexOf_char() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         assertEquals(0, sb.indexOf('a'));\n         assertEquals(-1, sb.indexOf('z'));\n     }\n \n+    @Test\n     public void testIndexOf_char_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         assertEquals(0, sb.indexOf('a', -1));\n         assertEquals(-1, sb.indexOf('z', 3));\n     }\n \n+    @Test\n     public void testLastIndexOf_char() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         \n         assertEquals (-1, sb.lastIndexOf('z'));\n     }\n \n+    @Test\n     public void testLastIndexOf_char_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         assertEquals(-1, sb.lastIndexOf('a', -1));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testIndexOf_String() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         \n         assertEquals(-1, sb.indexOf((String) null));\n     }\n \n+    @Test\n     public void testIndexOf_String_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         assertEquals(0, sb.indexOf(\"a\", -1));\n         assertEquals(-1, sb.indexOf((String) null, 2));\n     }\n \n+    @Test\n     public void testLastIndexOf_String() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         \n         assertEquals(-1, sb.lastIndexOf((String) null));\n     }\n \n+    @Test\n     public void testLastIndexOf_String_int() {\n         StrBuilder sb = new StrBuilder(\"abab\");\n         assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testIndexOf_StrMatcher() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(-1, sb.indexOf((StrMatcher) null));\n         assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n     }\n \n+    @Test\n     public void testIndexOf_StrMatcher_int() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n         assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n     }\n \n+    @Test\n     public void testLastIndexOf_StrMatcher() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n     }\n \n+    @Test\n     public void testLastIndexOf_StrMatcher_int() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n     };\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAsTokenizer() throws Exception {\n         // from Javadoc\n         StrBuilder b = new StrBuilder();\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testAsReader() throws Exception {\n         StrBuilder sb = new StrBuilder(\"some text\");\n         Reader reader = sb.asReader();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAsWriter() throws Exception {\n         StrBuilder sb = new StrBuilder(\"base\");\n         Writer writer = sb.asWriter();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testEqualsIgnoreCase() {\n         StrBuilder sb1 = new StrBuilder();\n         StrBuilder sb2 = new StrBuilder();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testEquals() {\n         StrBuilder sb1 = new StrBuilder();\n         StrBuilder sb2 = new StrBuilder();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testHashCode() {\n         StrBuilder sb = new StrBuilder();\n         int hc1a = sb.hashCode();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToString() {\n         StrBuilder sb = new StrBuilder(\"abc\");\n         assertEquals(\"abc\", sb.toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToStringBuffer() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testLang294() {\n         StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\n         sb.deleteAll(\"\\n%BLAH%\");\n         assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString()); \n     }\n \n+    @Test\n     public void testIndexOfLang294() {\n         StrBuilder sb = new StrBuilder(\"onetwothree\");\n         sb.deleteFirst(\"three\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testLang295() {\n         StrBuilder sb = new StrBuilder(\"onetwothree\");\n         sb.deleteFirst(\"three\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testLang412Right() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendFixedWidthPadRight(null, 10, '*');\n         assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n     }\n \n+    @Test\n     public void testLang412Left() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendFixedWidthPadLeft(null, 10, '*');\n--- a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n \n package org.apache.commons.lang3.text;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import java.util.HashMap;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Test class for StrLookup.\n  *\n  * @version $Id$\n  */\n-public class StrLookupTest extends TestCase {\n+public class StrLookupTest  {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNoneLookup() {\n         assertEquals(null, StrLookup.noneLookup().lookup(null));\n         assertEquals(null, StrLookup.noneLookup().lookup(\"\"));\n         assertEquals(null, StrLookup.noneLookup().lookup(\"any\"));\n     }\n \n+    @Test\n     public void testSystemProperiesLookup() {\n         assertEquals(System.getProperty(\"os.name\"), StrLookup.systemPropertiesLookup().lookup(\"os.name\"));\n         assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"\"));\n         }\n     }\n \n+    @Test\n     public void testMapLookup() {\n         Map<String, Object> map = new HashMap<String, Object>();\n         map.put(\"key\", \"value\");\n         assertEquals(null, StrLookup.mapLookup(map).lookup(\"other\"));\n     }\n \n+    @Test\n     public void testMapLookup_nullMap() {\n         Map<String, ?> map = null;\n         assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n--- a/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java\n \n package org.apache.commons.lang3.text;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.StrMatcher}.\n  *\n  * @version $Id$\n  */\n-public class StrMatcherTest extends TestCase {\n+public class StrMatcherTest  {\n \n     private static final char[] BUFFER1 = \"0,1\\t2 3\\n\\r\\f\\u0000'\\\"\".toCharArray();\n \n     private static final char[] BUFFER2 = \"abcdef\".toCharArray();\n \n-    /**\n-     * Create a new test case with the specified name.\n-     * \n-     * @param name  the name\n-     */\n-    public StrMatcherTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testCommaMatcher() {\n         StrMatcher matcher = StrMatcher.commaMatcher();\n         assertSame(matcher, StrMatcher.commaMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTabMatcher() {\n         StrMatcher matcher = StrMatcher.tabMatcher();\n         assertSame(matcher, StrMatcher.tabMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSpaceMatcher() {\n         StrMatcher matcher = StrMatcher.spaceMatcher();\n         assertSame(matcher, StrMatcher.spaceMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSplitMatcher() {\n         StrMatcher matcher = StrMatcher.splitMatcher();\n         assertSame(matcher, StrMatcher.splitMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTrimMatcher() {\n         StrMatcher matcher = StrMatcher.trimMatcher();\n         assertSame(matcher, StrMatcher.trimMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSingleQuoteMatcher() {\n         StrMatcher matcher = StrMatcher.singleQuoteMatcher();\n         assertSame(matcher, StrMatcher.singleQuoteMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDoubleQuoteMatcher() {\n         StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\n         assertSame(matcher, StrMatcher.doubleQuoteMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testQuoteMatcher() {\n         StrMatcher matcher = StrMatcher.quoteMatcher();\n         assertSame(matcher, StrMatcher.quoteMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testNoneMatcher() {\n         StrMatcher matcher = StrMatcher.noneMatcher();\n         assertSame(matcher, StrMatcher.noneMatcher());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCharMatcher_char() {\n         StrMatcher matcher = StrMatcher.charMatcher('c');\n         assertEquals(0, matcher.isMatch(BUFFER2, 0));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCharSetMatcher_String() {\n         StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\n         assertEquals(1, matcher.isMatch(BUFFER2, 0));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCharSetMatcher_charArray() {\n         StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\n         assertEquals(1, matcher.isMatch(BUFFER2, 0));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testStringMatcher_String() {\n         StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n         assertEquals(0, matcher.isMatch(BUFFER2, 0));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testMatcherIndices() {\n         // remember that the API contract is tight for the isMatch() method\n         // all the onus is on the caller, so invalid inputs are not\n--- a/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java\n \n package org.apache.commons.lang3.text;\n \n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.lang3.mutable.MutableObject;\n \n  *\n  * @version $Id$\n  */\n-public class StrSubstitutorTest extends TestCase {\n+public class StrSubstitutorTest {\n \n     private Map<String, String> values;\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         values = new HashMap<String, String>();\n         values.put(\"animal\", \"quick brown fox\");\n         values.put(\"target\", \"lazy dog\");\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n+    @After\n+    public void tearDown() throws Exception {\n         values = null;\n     }\n \n     /**\n      * Tests simple key replace.\n      */\n+    @Test\n     public void testReplaceSimple() {\n         doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests simple key replace.\n      */\n+    @Test\n     public void testReplaceSolo() {\n         doTestReplace(\"quick brown fox\", \"${animal}\", false);\n     }\n     /**\n      * Tests replace with no variables.\n      */\n+    @Test\n     public void testReplaceNoVariables() {\n         doTestNoReplace(\"The balloon arrived.\");\n     }\n     /**\n      * Tests replace with null.\n      */\n+    @Test\n     public void testReplaceNull() {\n         doTestNoReplace(null);\n     }\n     /**\n      * Tests replace with null.\n      */\n+    @Test\n     public void testReplaceEmpty() {\n         doTestNoReplace(\"\");\n     }\n     /**\n      * Tests key replace changing map after initialization (not recommended).\n      */\n+    @Test\n     public void testReplaceChangedMap() {\n         StrSubstitutor sub = new StrSubstitutor(values);\n         values.put(\"target\", \"moon\");\n     /**\n      * Tests unknown key replace.\n      */\n+    @Test\n     public void testReplaceUnknownKey() {\n         doTestReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests adjacent keys.\n      */\n+    @Test\n     public void testReplaceAdjacentAtStart() {\n         values.put(\"code\", \"GBP\");\n         values.put(\"amount\", \"12.50\");\n     /**\n      * Tests adjacent keys.\n      */\n+    @Test\n     public void testReplaceAdjacentAtEnd() {\n         values.put(\"code\", \"GBP\");\n         values.put(\"amount\", \"12.50\");\n     /**\n      * Tests simple recursive replace.\n      */\n+    @Test\n     public void testReplaceRecursive() {\n         values.put(\"animal\", \"${critter}\");\n         values.put(\"target\", \"${pet}\");\n     /**\n      * Tests escaping.\n      */\n+    @Test\n     public void testReplaceEscaping() {\n         doTestReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests escaping.\n      */\n+    @Test\n     public void testReplaceSoloEscaping() {\n         doTestReplace(\"${animal}\", \"$${animal}\", false);\n     }\n     /**\n      * Tests complex escaping.\n      */\n+    @Test\n     public void testReplaceComplexEscaping() {\n         doTestReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests when no prefix or suffix.\n      */\n+    @Test\n     public void testReplaceNoPrefixNoSuffix() {\n         doTestReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests when no incomplete prefix.\n      */\n+    @Test\n     public void testReplaceIncompletePrefix() {\n         doTestReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests when prefix but no suffix.\n      */\n+    @Test\n     public void testReplacePrefixNoSuffix() {\n         doTestReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\n     }\n     /**\n      * Tests when suffix but no prefix.\n      */\n+    @Test\n     public void testReplaceNoPrefixSuffix() {\n         doTestReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests when no variable name.\n      */\n+    @Test\n     public void testReplaceEmptyKeys() {\n         doTestReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\n     }\n     /**\n      * Tests replace creates output same as input.\n      */\n+    @Test\n     public void testReplaceToIdentical() {\n         values.put(\"animal\", \"$${${thing}}\");\n         values.put(\"thing\", \"animal\");\n      * Tests a cyclic replace operation.\n      * The cycle should be detected and cause an exception to be thrown.\n      */\n+    @Test\n     public void testCyclicReplacement() {\n         Map<String, String> map = new HashMap<String, String>();\n         map.put(\"animal\", \"${critter}\");\n     /**\n      * Tests interpolation with weird boundary patterns.\n      */\n+    @Test\n     public void testReplaceWeirdPattens() {\n         doTestNoReplace(\"\");\n         doTestNoReplace(\"${}\");\n     /**\n      * Tests simple key replace.\n      */\n+    @Test\n     public void testReplacePartialString_noReplace() {\n         StrSubstitutor sub = new StrSubstitutor();\n         assertEquals(\"${animal} jumps\", sub.replace(\"The ${animal} jumps over the ${target}.\", 4, 15));\n     /**\n      * Tests whether a variable can be replaced in a variable name.\n      */\n+    @Test\n     public void testReplaceInVariable() {\n         values.put(\"animal.1\", \"fox\");\n         values.put(\"animal.2\", \"mouse\");\n     /**\n      * Tests whether substitution in variable names is disabled per default.\n      */\n+    @Test\n     public void testReplaceInVariableDisabled() {\n         values.put(\"animal.1\", \"fox\");\n         values.put(\"animal.2\", \"mouse\");\n     /**\n      * Tests complex and recursive substitution in variable names.\n      */\n+    @Test\n     public void testReplaceInVariableRecursive() {\n         values.put(\"animal.2\", \"brown fox\");\n         values.put(\"animal.1\", \"white mouse\");\n     /**\n      * Tests protected.\n      */\n+    @Test\n     public void testResolveVariable() {\n         final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\n         Map<String, String> map = new HashMap<String, String>();\n     /**\n      * Tests constructor.\n      */\n+    @Test\n     public void testConstructorNoArgs() {\n         StrSubstitutor sub = new StrSubstitutor();\n         assertEquals(\"Hi ${name}\", sub.replace(\"Hi ${name}\"));\n     /**\n      * Tests constructor.\n      */\n+    @Test\n     public void testConstructorMapPrefixSuffix() {\n         Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n     /**\n      * Tests constructor.\n      */\n+    @Test\n     public void testConstructorMapFull() {\n         Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n     /**\n      * Tests get set.\n      */\n+    @Test\n     public void testGetSetEscape() {\n         StrSubstitutor sub = new StrSubstitutor();\n         assertEquals('$', sub.getEscapeChar());\n     /**\n      * Tests get set.\n      */\n+    @Test\n     public void testGetSetPrefix() {\n         StrSubstitutor sub = new StrSubstitutor();\n         assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n     /**\n      * Tests get set.\n      */\n+    @Test\n     public void testGetSetSuffix() {\n         StrSubstitutor sub = new StrSubstitutor();\n         assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n     /**\n      * Tests static.\n      */\n+    @Test\n     public void testStaticReplace() {\n         Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n     /**\n      * Tests static.\n      */\n+    @Test\n     public void testStaticReplacePrefixSuffix() {\n         Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n     /**\n      * Tests interpolation with system properties.\n      */\n+    @Test\n     public void testStaticReplaceSystemProperties() {\n         StrBuilder buf = new StrBuilder();\n         buf.append(\"Hi \").append(System.getProperty(\"user.name\"));\n     /**\n      * Test the replace of a properties object\n      */\n+    @Test\n     public void testSubstituteDefaultProperties(){\n         String org = \"${doesnotwork}\";\n         System.setProperty(\"doesnotwork\", \"It works!\");\n         assertEquals(\"It works!\", StrSubstitutor.replace(org, props));\n     }\n     \n+    @Test\n     public void testSamePrefixAndSuffix() {\n         Map<String, String> map = new HashMap<String, String>();\n         map.put(\"greeting\", \"Hello\");\n--- a/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java\n \n package org.apache.commons.lang3.text;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.NoSuchElementException;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.ObjectUtils;\n \n  * Unit test for Tokenizer.\n  * \n  */\n-public class StrTokenizerTest extends TestCase {\n+public class StrTokenizerTest {\n \n     private static final String CSV_SIMPLE_FIXTURE = \"A,b,c\";\n \n     private static final String TSV_SIMPLE_FIXTURE = \"A\\tb\\tc\";\n-\n-    /**\n-     * JUnit constructor.\n-     * \n-     * @param name\n-     */\n-    public StrTokenizerTest(String name) {\n-        super(name);\n-    }\n \n     private void checkClone(StrTokenizer tokenizer) {\n         assertFalse(StrTokenizer.getCSVInstance() == tokenizer);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void test1() {\n \n         String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\n \n     }\n \n+    @Test\n     public void test2() {\n \n         String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n \n     }\n \n+    @Test\n     public void test3() {\n \n         String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n \n     }\n \n+    @Test\n     public void test4() {\n \n         String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n \n     }\n \n+    @Test\n     public void test5() {\n \n         String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n \n     }\n \n+    @Test\n     public void test6() {\n \n         String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n \n     }\n \n+    @Test\n     public void test7() {\n \n         String input = \"a   b c \\\"d e\\\" f \";\n \n     }\n \n+    @Test\n     public void test8() {\n \n         String input = \"a   b c \\\"d e\\\" f \";\n \n     }\n \n+    @Test\n     public void testBasic1() {\n         String input = \"a  b c\";\n         StrTokenizer tok = new StrTokenizer(input);\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasic2() {\n         String input = \"a \\nb\\fc\";\n         StrTokenizer tok = new StrTokenizer(input);\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasic3() {\n         String input = \"a \\nb\\u0001\\fc\";\n         StrTokenizer tok = new StrTokenizer(input);\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasic4() {\n         String input = \"a \\\"b\\\" c\";\n         StrTokenizer tok = new StrTokenizer(input);\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasic5() {\n         String input = \"a:b':c\";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicDelim1() {\n         String input = \"a:b:c\";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicDelim2() {\n         String input = \"a:b:c\";\n         StrTokenizer tok = new StrTokenizer(input, ',');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicEmpty1() {\n         String input = \"a  b c\";\n         StrTokenizer tok = new StrTokenizer(input);\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicEmpty2() {\n         String input = \"a  b c\";\n         StrTokenizer tok = new StrTokenizer(input);\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted1() {\n         String input = \"a 'b' c\";\n         StrTokenizer tok = new StrTokenizer(input, ' ', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted2() {\n         String input = \"a:'b':\";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted3() {\n         String input = \"a:'b''c'\";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted4() {\n         String input = \"a: 'b' 'c' :d\";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted5() {\n         String input = \"a: 'b'x'c' :d\";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted6() {\n         String input = \"a:'b'\\\"c':d\";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuoted7() {\n         String input = \"a:\\\"There's a reason here\\\":b\";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicQuotedTrimmed1() {\n         String input = \"a: 'b' :\";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicTrimmed1() {\n         String input = \"a: b :  \";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicTrimmed2() {\n         String input = \"a:  b  :\";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicIgnoreTrimmed1() {\n         String input = \"a: bIGNOREc : \";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicIgnoreTrimmed2() {\n         String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicIgnoreTrimmed3() {\n         String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n         StrTokenizer tok = new StrTokenizer(input, ':');\n         assertEquals(false, tok.hasNext());\n     }\n \n+    @Test\n     public void testBasicIgnoreTrimmed4() {\n         String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\n         StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testListArray() {\n         String input = \"a  b c\";\n         StrTokenizer tok = new StrTokenizer(input);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testCSV(String data) {\n+    private void testCSV(String data) {\n         this.testXSVAbc(StrTokenizer.getCSVInstance(data));\n         this.testXSVAbc(StrTokenizer.getCSVInstance(data.toCharArray()));\n     }\n \n+    @Test\n     public void testCSVEmpty() {\n         this.testEmpty(StrTokenizer.getCSVInstance());\n         this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n     }\n \n+    @Test\n     public void testCSVSimple() {\n         this.testCSV(CSV_SIMPLE_FIXTURE);\n     }\n \n+    @Test\n     public void testCSVSimpleNeedsTrim() {\n         this.testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\n         this.testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\n         } catch (NoSuchElementException ex) {}\n     }\n \n+    @Test\n     public void testGetContent() {\n         String input = \"a   b c \\\"d e\\\" f \";\n         StrTokenizer tok = new StrTokenizer(input);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testChaining() {\n         StrTokenizer tok = new StrTokenizer();\n         assertEquals(tok, tok.reset());\n      * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns\n      * <code>null</code>.\n      */\n+    @Test\n     public void testCloneNotSupportedException() {\n         Object notCloned = new StrTokenizer() {\n             @Override\n         assertNull(notCloned);\n     }\n \n+    @Test\n     public void testCloneNull() {\n         StrTokenizer tokenizer = new StrTokenizer((char[]) null);\n         // Start sanity check\n         assertEquals(null, clonedTokenizer.nextToken());\n     }\n \n+    @Test\n     public void testCloneReset() {\n         char[] input = new char[]{'a'};\n         StrTokenizer tokenizer = new StrTokenizer(input);\n     }\n   \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_String() {\n         StrTokenizer tok = new StrTokenizer(\"a b\");\n         assertEquals(\"a\", tok.next());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_String_char() {\n         StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\n         assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_String_char_char() {\n         StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\n         assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_charArray() {\n         StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n         assertEquals(\"a\", tok.next());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_charArray_char() {\n         StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\n         assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor_charArray_char_char() {\n         StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\n         assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReset() {\n         StrTokenizer tok = new StrTokenizer(\"a b c\");\n         assertEquals(\"a\", tok.next());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReset_String() {\n         StrTokenizer tok = new StrTokenizer(\"x x x\");\n         tok.reset(\"d e\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReset_charArray() {\n         StrTokenizer tok = new StrTokenizer(\"x x x\");\n         \n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTSV() {\n         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\n         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\n     }\n \n+    @Test\n     public void testTSVEmpty() {\n         this.testEmpty(StrTokenizer.getCSVInstance());\n         this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n         assertEquals(3, tokenizer.size());\n     }\n \n+    @Test\n     public void testIteration() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c\");\n         assertEquals(false, tkn.hasPrevious());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTokenizeSubclassInputChange() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\n             @Override\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testTokenizeSubclassOutputChange() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c\") {\n             @Override\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToString() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c d e\");\n         assertEquals(\"StrTokenizer[not tokenized yet]\", tkn.toString());\n--- a/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n  */\n package org.apache.commons.lang3.text;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests for WordUtils class.\n  * \n  * @version $Id$\n  */\n-public class WordUtilsTest extends TestCase {\n-\n-    public WordUtilsTest(String name) {\n-        super(name);\n-    }\n+public class WordUtilsTest {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new WordUtils());\n         Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testWrap_StringInt() {\n         assertEquals(null, WordUtils.wrap(null, 20));\n         assertEquals(null, WordUtils.wrap(null, -1));\n         assertEquals(expected, WordUtils.wrap(input, 20));\n     }\n     \n+    @Test\n     public void testWrap_StringIntStringBoolean() {\n         assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n         assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCapitalize_String() {\n         assertEquals(null, WordUtils.capitalize(null));\n         assertEquals(\"\", WordUtils.capitalize(\"\"));\n         assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n     }\n     \n+    @Test\n     public void testCapitalizeWithDelimiters_String() {\n         assertEquals(null, WordUtils.capitalize(null, null));\n         assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n         assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null) );\n     }\n \n+    @Test\n     public void testCapitalizeFully_String() {\n         assertEquals(null, WordUtils.capitalizeFully(null));\n         assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n         assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n     }\n     \n+    @Test\n     public void testCapitalizeFullyWithDelimiters_String() {\n         assertEquals(null, WordUtils.capitalizeFully(null, null));\n         assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n         assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null) );\n     }\n \n+    @Test\n     public void testUncapitalize_String() {\n         assertEquals(null, WordUtils.uncapitalize(null));\n         assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n         assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n     }\n     \n+    @Test\n     public void testUncapitalizeWithDelimiters_String() {\n         assertEquals(null, WordUtils.uncapitalize(null, null));\n         assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testInitials_String() {\n         assertEquals(null, WordUtils.initials(null));\n         assertEquals(\"\", WordUtils.initials(\"\"));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testInitials_String_charArray() {\n         char[] array = null;\n         assertEquals(null, WordUtils.initials(null, array));\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSwapCase_String() {\n         assertEquals(null, WordUtils.swapCase(null));\n         assertEquals(\"\", WordUtils.swapCase(\"\"));\n--- a/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.util.HashSet;\n import java.util.Set;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.EntityArrays}.\n  * @version $Id$\n  */\n-public class EntityArraysTest extends TestCase {\n+public class EntityArraysTest  {\n \n+    @Test\n     public void testConstructorExists() {\n         new EntityArrays();\n     }\n     \n     // LANG-659 - check arrays for duplicate entries\n+    @Test\n     public void testHTML40_EXTENDED_ESCAPE(){\n         Set<String> col0 = new HashSet<String>();\n         Set<String> col1 = new HashSet<String>();\n     }\n     \n    // LANG-658 - check arrays for duplicate entries\n+    @Test\n     public void testISO8859_1_ESCAPE(){\n         Set<String> col0 = new HashSet<String>();\n         Set<String> col1 = new HashSet<String>();\n--- a/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n+import static org.junit.Assert.assertEquals;\n+\n import java.io.IOException;\n import java.io.StringWriter;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.LookupTranslator}.\n  * @version $Id$\n  */\n-public class LookupTranslatorTest extends TestCase {\n+public class LookupTranslatorTest  {\n \n+    @Test\n     public void testBasicLookup() throws IOException {\n         LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { \"one\", \"two\" } });\n         StringWriter out = new StringWriter();\n--- a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.NumericEntityEscaper}.\n  * @version $Id$\n  */\n-public class NumericEntityEscaperTest extends TestCase {\n+public class NumericEntityEscaperTest  {\n \n+    @Test\n     public void testBelow() {\n         NumericEntityEscaper nee = NumericEntityEscaper.below('F');\n \n         assertEquals(\"Failed to escape numeric entities via the below method\", \"&#65;&#68;FGZ\", result);\n     }\n \n+    @Test\n     public void testBetween() {\n         NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L');\n \n         assertEquals(\"Failed to escape numeric entities via the between method\", \"AD&#70;&#71;Z\", result);\n     }\n \n+    @Test\n     public void testAbove() {\n         NumericEntityEscaper nee = NumericEntityEscaper.above('F');\n \n     }\n \n     // See LANG-617\n+    @Test\n     public void testSupplementary() {\n         NumericEntityEscaper nee = new NumericEntityEscaper();\n         String input = \"\\uD803\\uDC22\";\n--- a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.NumericEntityUnescaper}.\n  * @version $Id$\n  */\n-public class NumericEntityUnescaperTest extends TestCase {\n+public class NumericEntityUnescaperTest  {\n \n+    @Test\n     public void testSupplementaryUnescaping() {\n         NumericEntityUnescaper neu = new NumericEntityUnescaper();\n         String input = \"&#68642;\";\n         assertEquals(\"Failed to unescape numeric entities supplementary characters\", expected, result);\n     }\n \n+    @Test\n     public void testOutOfBounds() {\n         NumericEntityUnescaper neu = new NumericEntityUnescaper();\n \n         assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));\n     }\n \n+    @Test\n     public void testUnfinishedEntity() {\n         // parse it\n         NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional);\n--- a/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.OctalUnescaper}.\n  * @version $Id: OctalUnescaperTest.java 979392 2010-07-26 18:09:52Z mbenson $\n  */\n-public class OctalUnescaperTest extends TestCase {\n+public class OctalUnescaperTest {\n \n+    @Test\n     public void testBetween() {\n         OctalUnescaper oue = new OctalUnescaper();   //.between(\"1\", \"377\");\n \n--- a/src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.UnicodeEscaper}.\n  * @version $Id$\n  */\n-public class UnicodeEscaperTest extends TestCase {\n+public class UnicodeEscaperTest  {\n \n+    @Test\n     public void testBelow() {\n         UnicodeEscaper ue = UnicodeEscaper.below('F');\n \n         assertEquals(\"Failed to escape Unicode characters via the below method\", \"\\\\u0041\\\\u0044FGZ\", result);\n     }\n \n+    @Test\n     public void testBetween() {\n         UnicodeEscaper ue = UnicodeEscaper.between('F', 'L');\n \n         assertEquals(\"Failed to escape Unicode characters via the between method\", \"AD\\\\u0046\\\\u0047Z\", result);\n     }\n \n+    @Test\n     public void testAbove() {\n         UnicodeEscaper ue = UnicodeEscaper.above('F');\n \n--- a/src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java\n \n package org.apache.commons.lang3.text.translate;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.UnicodeEscaper}.\n  * @version $Id$\n  */\n-public class UnicodeUnescaperTest extends TestCase {\n+public class UnicodeUnescaperTest {\n \n     // Requested in LANG-507\n+    @Test\n     public void testUPlus() {\n         UnicodeUnescaper uu = new UnicodeUnescaper();\n \n         assertEquals(\"Failed to unescape Unicode characters with 'u+' notation\", \"G\", uu.translate(input));\n     }\n \n+    @Test\n     public void testUuuuu() {\n         UnicodeUnescaper uu = new UnicodeUnescaper();\n \n         assertEquals(\"Failed to unescape Unicode characters with many 'u' characters\", \"G\", result);\n     }\n \n+    @Test\n     public void testLessThanFour() {\n         UnicodeUnescaper uu = new UnicodeUnescaper();\n \n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n  */\n package org.apache.commons.lang3.time;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Calendar;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-\n /**\n  * TestCase for DateFormatUtils.\n  *\n  */\n-public class DateFormatUtilsTest extends TestCase {\n-\n-    public DateFormatUtilsTest(String s) {\n-        super(s);\n-    }\n+public class DateFormatUtilsTest {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new DateFormatUtils());\n         Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testFormat() {\n         Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n         c.set(2005,0,1,12,0,0);\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testFormatCalendar() {\n         Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n         c.set(2005,0,1,12,0,0);\n         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n     }\n     \n+    @Test\n     public void testFormatUTC() {\n         Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n         c.set(2005,0,1,12,0,0);\n         assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n     }\n     \n+    @Test\n     public void testDateTimeISO(){\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar cal = Calendar.getInstance(timeZone);\n         assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n     }\n \n+    @Test\n     public void testDateISO(){\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar cal = Calendar.getInstance(timeZone);\n         assertEquals(\"2002-02-23-03:00\", text);\n     }\n \n+    @Test\n     public void testTimeISO(){\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar cal = Calendar.getInstance(timeZone);\n         assertEquals(\"T10:11:12-03:00\", text);\n     }\n \n+    @Test\n     public void testTimeNoTISO(){\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar cal = Calendar.getInstance(timeZone);\n         assertEquals(\"10:11:12-03:00\", text);\n     }\n \n+    @Test\n     public void testSMTP(){\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar cal = Calendar.getInstance(timeZone);\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n  */\n package org.apache.commons.lang3.time;\n \n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import java.util.Calendar;\n import java.util.Date;\n \n-import junit.framework.TestCase;\n-\n-public class DateUtilsFragmentTest extends TestCase {\n+public class DateUtilsFragmentTest {\n \n     private static final int months = 7;   // second final prime before 12\n     private static final int days = 23;    // second final prime before 31 (and valid)\n     private Date aDate;\n     private Calendar aCalendar;\n \n-    @Override\n-    protected void setUp() {\n+\n+    @Before\n+    public void setUp() {\n         aCalendar = Calendar.getInstance();\n         aCalendar.set(2005, months, days, hours, minutes, seconds);\n         aCalendar.set(Calendar.MILLISECOND, millis);\n         aDate = aCalendar.getTime();\n     }\n     \n+    @Test\n     public void testNullDate() {\n         try {\n             DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);\n         } catch(IllegalArgumentException iae) {}\n     }\n \n+    @Test\n     public void testNullCalendar() {\n         try {\n             DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);\n         } catch(IllegalArgumentException iae) {}\n     }\n     \n+    @Test\n     public void testInvalidFragmentWithDate() {\n         try {\n             DateUtils.getFragmentInMilliseconds(aDate, 0);\n         } catch(IllegalArgumentException iae) {}\n     }\n \n+    @Test\n     public void testInvalidFragmentWithCalendar() {\n         try {\n             DateUtils.getFragmentInMilliseconds(aCalendar, 0);\n         } catch(IllegalArgumentException iae) {}\n     }\n \n+    @Test\n     public void testMillisecondFragmentInLargerUnitWithDate() {\n         assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n         assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n     }\n \n+    @Test\n     public void testMillisecondFragmentInLargerUnitWithCalendar() {\n         assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n         assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n     }\n     \n+    @Test\n     public void testSecondFragmentInLargerUnitWithDate() {\n         assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n     }\n \n+    @Test\n     public void testSecondFragmentInLargerUnitWithCalendar() {\n         assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n         assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n     }\n     \n+    @Test\n     public void testMinuteFragmentInLargerUnitWithDate() {\n         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n     }\n \n+    @Test\n     public void testMinuteFragmentInLargerUnitWithCalendar() {\n         assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n         assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n     }\n \n+    @Test\n     public void testHourOfDayFragmentInLargerUnitWithDate() {\n         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n     }\n \n+    @Test\n     public void testHourOfDayFragmentInLargerUnitWithCalendar() {\n         assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n     }\n \n+    @Test\n     public void testDayOfYearFragmentInLargerUnitWithDate() {\n         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n     }\n \n+    @Test\n     public void testDayOfYearFragmentInLargerUnitWithCalendar() {\n         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n     }\n \n+    @Test\n     public void testDateFragmentInLargerUnitWithDate() {\n         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n     }\n \n+    @Test\n     public void testDateFragmentInLargerUnitWithCalendar() {\n         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n     }\n \n     //Calendar.SECOND as useful fragment\n     \n+    @Test\n     public void testMillisecondsOfSecondWithDate() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n         assertEquals(millis, testResult);\n     }\n \n+    @Test\n     public void testMillisecondsOfSecondWithCalendar() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n         assertEquals(millis, testResult);\n \n     //Calendar.MINUTE as useful fragment\n \n+    @Test\n     public void testMillisecondsOfMinuteWithDate() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n     }\n \n+    @Test\n     public void testMillisecondsOfMinuteWithCalender() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n     }\n \n+    @Test\n     public void testSecondsofMinuteWithDate() {\n         long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n         assertEquals(seconds, testResult);\n     }\n \n+    @Test\n     public void testSecondsofMinuteWithCalendar() {\n         long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n         assertEquals(seconds, testResult);\n \n     //Calendar.HOUR_OF_DAY as useful fragment\n     \n+    @Test\n     public void testMillisecondsOfHourWithDate() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n     }\n     \n+    @Test\n     public void testMillisecondsOfHourWithCalendar() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n     }\n \n+    @Test\n     public void testSecondsofHourWithDate() {\n         long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n         assertEquals(\n                 testResult);\n     }\n \n+    @Test\n     public void testSecondsofHourWithCalendar() {\n         long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n         assertEquals(\n                 testResult);\n     }\n \n+    @Test\n     public void testMinutesOfHourWithDate() {\n         long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n         assertEquals(minutes, testResult);\n     }\n \n+    @Test\n     public void testMinutesOfHourWithCalendar() {\n         long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n         assertEquals(minutes, testResult);\n     }\n \n     //Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment\n+    @Test\n     public void testMillisecondsOfDayWithDate() {\n         long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n         long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n         assertEquals(expectedValue, testresult);\n     }\n     \n+    @Test\n     public void testMillisecondsOfDayWithCalendar() {\n         long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n         long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n         assertEquals(expectedValue, testresult);\n     }\n \n+    @Test\n     public void testSecondsOfDayWithDate() {\n         long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n         long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n         assertEquals(expectedValue, testresult);\n     }\n \n+    @Test\n     public void testSecondsOfDayWithCalendar() {\n         long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n         long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n         assertEquals(expectedValue, testresult);\n     }\n \n+    @Test\n     public void testMinutesOfDayWithDate() {\n         long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n         long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n         assertEquals(expectedValue,testResult);\n     }\n \n+    @Test\n     public void testMinutesOfDayWithCalendar() {\n         long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n         long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n         assertEquals(expectedValue, testResult);\n     }\n     \n+    @Test\n     public void testHoursOfDayWithDate() {\n         long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n         long expectedValue = hours; \n         assertEquals(expectedValue,testResult);\n     }\n \n+    @Test\n     public void testHoursOfDayWithCalendar() {\n         long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n         long expectedValue = hours; \n     \n     \n     //Calendar.MONTH as useful fragment\n+    @Test\n     public void testMillisecondsOfMonthWithDate() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n                 testResult);\n     }\n \n+    @Test\n     public void testMillisecondsOfMonthWithCalendar() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n testResult);\n     }\n     \n+    @Test\n     public void testSecondsOfMonthWithDate() {\n         long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n         assertEquals(\n                 testResult);\n     }\n \n+    @Test\n     public void testSecondsOfMonthWithCalendar() {\n         long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n         assertEquals(\n                 testResult);\n     }\n \n+    @Test\n     public void testMinutesOfMonthWithDate() {\n         long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n         assertEquals(minutes\n                 testResult);\n     }\n \n+    @Test\n     public void testMinutesOfMonthWithCalendar() {\n         long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n         assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n                 testResult);\n     }\n \n+    @Test\n     public void testHoursOfMonthWithDate() {\n         long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n         assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))\n                 testResult);\n     }\n \n+    @Test\n     public void testHoursOfMonthWithCalendar() {\n         long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n         assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))\n     }\n     \n     //Calendar.YEAR as useful fragment\n+    @Test\n     public void testMillisecondsOfYearWithDate() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n         Calendar cal = Calendar.getInstance();\n                 testResult);\n     }\n \n+    @Test\n     public void testMillisecondsOfYearWithCalendar() {\n         long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n         assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n testResult);\n     }\n     \n+    @Test\n     public void testSecondsOfYearWithDate() {\n         long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\n         Calendar cal = Calendar.getInstance();\n                 testResult);\n     }\n \n+    @Test\n     public void testSecondsOfYearWithCalendar() {\n         long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\n         assertEquals(\n                 testResult);\n     }\n \n+    @Test\n     public void testMinutesOfYearWithDate() {\n         long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\n         Calendar cal = Calendar.getInstance();\n                 testResult);\n     }\n \n+    @Test\n     public void testMinutesOfYearWithCalendar() {\n         long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\n         assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n                 testResult);\n     }\n \n+    @Test\n     public void testHoursOfYearWithDate() {\n         long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\n         Calendar cal = Calendar.getInstance();\n                 testResult);\n     }\n \n+    @Test\n     public void testHoursOfYearWithCalendar() {\n         long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\n         assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java\n  */\n package org.apache.commons.lang3.time;\n \n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Locale;\n-\n-import junit.framework.TestCase;\n \n /**\n  * These Unit-tests will check all possible extremes when using some rounding-methods of DateUtils.\n  * @since 3.0\n  * @version $Id$\n  */\n-public class DateUtilsRoundingTest extends TestCase {\n+public class DateUtilsRoundingTest {\n \n     DateFormat dateTimeParser;\n     \n     Calendar januaryOneCalendar;\n     FastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n         dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n         \n         targetYearDate = dateTimeParser.parse(\"January 1, 2007 0:00:00.000\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundYear() throws Exception {\n         final int calendarField = Calendar.YEAR;\n         Date roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundMonth() throws Exception {\n         final int calendarField = Calendar.MONTH;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundSemiMonth() throws Exception {\n         final int calendarField = DateUtils.SEMI_MONTH;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundDate() throws Exception {\n         final int calendarField = Calendar.DATE;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundDayOfMonth() throws Exception {\n         final int calendarField = Calendar.DAY_OF_MONTH;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundAmPm() throws Exception {\n         final int calendarField = Calendar.AM_PM;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundHourOfDay() throws Exception {\n         final int calendarField = Calendar.HOUR_OF_DAY;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundHour() throws Exception {\n         final int calendarField = Calendar.HOUR;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundMinute() throws Exception {\n         final int calendarField = Calendar.MINUTE;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundSecond() throws Exception {\n         final int calendarField = Calendar.SECOND;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testRoundMilliSecond() throws Exception {\n         final int calendarField = Calendar.MILLISECOND;\n         Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateYear() throws Exception {\n         final int calendarField = Calendar.YEAR;\n         Date lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateMonth() throws Exception {\n         final int calendarField = Calendar.MONTH;\n         Date truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateSemiMonth() throws Exception {\n         final int calendarField = DateUtils.SEMI_MONTH;\n         Date truncatedDate, lastTruncateDate;\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateDate() throws Exception {\n         final int calendarField = Calendar.DATE;\n         Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateDayOfMonth() throws Exception {\n         final int calendarField = Calendar.DAY_OF_MONTH;\n         Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateAmPm() throws Exception {\n         final int calendarField = Calendar.AM_PM;\n         \n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateHour() throws Exception {\n         final int calendarField = Calendar.HOUR;\n         Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateHourOfDay() throws Exception {\n         final int calendarField = Calendar.HOUR_OF_DAY;\n         Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateMinute() throws Exception {\n         final int calendarField = Calendar.MINUTE;\n         Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateSecond() throws Exception {\n         final int calendarField = Calendar.SECOND;\n         Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\n      * @throws Exception\n      * @since 3.0\n      */\n+    @Test\n     public void testTruncateMilliSecond() throws Exception {\n         final int calendarField = Calendar.MILLISECOND;\n         baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n  */\n package org.apache.commons.lang3.time;\n \n+import org.junit.Test;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_4;\n \n import java.lang.reflect.Constructor;\n import java.util.TimeZone;\n \n import junit.framework.AssertionFailedError;\n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.SystemUtils;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.time.DateUtils}.\n  *\n  */\n-public class DateUtilsTest extends TestCase {\n+public class DateUtilsTest {\n \n     private static final long MILLIS_TEST;\n     static {\n     TimeZone zone = null;\n     TimeZone defaultZone = null;\n \n-    public DateUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n \n         dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);\n         dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new DateUtils());\n         Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsSameDay_Date() {\n         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsSameDay_Cal() {\n         GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);\n         GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsSameInstant_Date() {\n         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsSameInstant_Cal() {\n         GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n         GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsSameLocalTime_Cal() {\n         GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n         GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testParseDate() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\n         String dateStr = \"1972-12-03\";\n         } catch (ParseException ex) {}\n     }\n     // LANG-486\n+    @Test\n     public void testParseDateWithLeniency() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);\n         String dateStr = \"02 942, 1996\";\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddYears() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addYears(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddMonths() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addMonths(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddWeeks() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addWeeks(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddDays() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addDays(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddHours() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addHours(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddMinutes() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addMinutes(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddSeconds() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addSeconds(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAddMilliseconds() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.addMilliseconds(base, 0);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetYears() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setYears(base, 2000);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetMonths() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setMonths(base, 5);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetDays() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setDays(base, 1);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetHours() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setHours(base, 0);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetMinutes() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setMinutes(base, 0);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetSeconds() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setSeconds(base, 0);\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testSetMilliseconds() throws Exception {\n         Date base = new Date(MILLIS_TEST);\n         Date result = DateUtils.setMilliseconds(base, 0);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testToCalendar() {\n         assertEquals(\"Failed to convert to a Calendar and back\", date1, DateUtils.toCalendar(date1).getTime());\n         try {\n     /**\n      * Tests various values with the round method\n      */\n+    @Test\n     public void testRound() throws Exception {\n         // tests for public static Date round(Date date, int field)\n         assertEquals(\"round year-1 failed\",\n      * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n      * by DateUtils.round().\n      */\n+    @Test\n     public void testRoundLang346() throws Exception\n     {\n         TimeZone.setDefault(defaultZone);\n     /**\n      * Tests various values with the trunc method\n      */\n+    @Test\n     public void testTruncate() throws Exception {\n         // tests public static Date truncate(Date date, int field)\n         assertEquals(\"truncate year-1 failed\",\n      *\n      * see http://issues.apache.org/jira/browse/LANG-59\n      */\n+    @Test\n     public void testTruncateLang59() throws Exception {\n         if (!SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\n             this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_SPECIFICATION_VERSION);\n     }\n \n     // http://issues.apache.org/jira/browse/LANG-530\n+    @Test\n     public void testLang530() throws ParseException {\n         Date d = new Date();\n         String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\n     /**\n      * Tests various values with the ceiling method\n      */\n+    @Test\n     public void testCeil() throws Exception {\n         // test javadoc\n         assertEquals(\"ceiling javadoc-1 failed\",\n     /**\n      * Tests the iterator exceptions\n      */\n+    @Test\n     public void testIteratorEx() throws Exception {\n         try {\n             DateUtils.iterator(Calendar.getInstance(), -9999);\n     /**\n      * Tests the calendar iterator for week ranges\n      */\n+    @Test\n     public void testWeekIterator() throws Exception {\n         Calendar now = Calendar.getInstance();\n         for (int i = 0; i< 7; i++) {\n     /**\n      * Tests the calendar iterator for month-based ranges\n      */\n+    @Test\n     public void testMonthIterator() throws Exception {\n         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n         assertWeekIterator(it,\n      */\n     private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {\n         Calendar cal = (Calendar) it.next();\n-        assertEquals(\"\", start, cal, 0);\n+        assertCalendarsEquals(\"\", start, cal, 0);\n         Calendar last = null;\n         int count = 1;\n         while (it.hasNext()) {\n             //Check this is just a date (no time component)\n-            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n+            assertCalendarsEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n \n             last = cal;\n             cal = (Calendar) it.next();\n \n             //Check that this is one day more than the last date\n             last.add(Calendar.DATE, 1);\n-            assertEquals(\"\", last, cal, 0);\n+            assertCalendarsEquals(\"\", last, cal, 0);\n         }\n         if (count % 7 != 0) {\n             throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n         }\n-        assertEquals(\"\", end, cal, 0);\n+        assertCalendarsEquals(\"\", end, cal, 0);\n     }\n \n     /**\n      * Used to check that Calendar objects are close enough\n      * delta is in milliseconds\n      */\n-    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n+    private static void assertCalendarsEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n         if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n             throw new AssertionFailedError(\n                     message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n \n package org.apache.commons.lang3.time;\n \n+import org.junit.Test;\n+import static org.junit.Assert.*;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Calendar;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-\n /**\n  * TestCase for DurationFormatUtils.\n  * \n  */\n-public class DurationFormatUtilsTest extends TestCase {\n-\n-    public DurationFormatUtilsTest(String s) {\n-        super(s);\n-    }\n+public class DurationFormatUtilsTest {\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new DurationFormatUtils());\n         Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n     }\n \n     // -----------------------------------------------------------------------\n+    @Test\n     public void testFormatDurationWords() {\n         String text = null;\n \n     /**\n      * Tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.\n      */\n+    @Test\n     public void testFormatDurationPluralWords() {\n         long oneSecond = 1000;\n         long oneMinute = oneSecond * 60;\n         assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\n     }\n \n+    @Test\n     public void testFormatDurationHMS() {\n         long time = 0;\n         assertEquals(\"0:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\n         assertEquals(\"1:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n+    @Test\n     public void testFormatDurationISO() {\n         assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatDurationISO(0L));\n         assertEquals(\"P0Y0M0DT0H0M0.001S\", DurationFormatUtils.formatDurationISO(1L));\n         assertEquals(\"P0Y0M0DT0H1M15.321S\", DurationFormatUtils.formatDurationISO(75321L));\n     }\n \n+    @Test\n     public void testFormatDuration() {\n         long duration = 0;\n         assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n         assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\n     }\n \n+    @Test\n     public void testFormatPeriodISO() {\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar base = Calendar.getInstance(timeZone);\n         // assertEquals(\"P1Y2M3DT10H30M\", text);\n     }\n \n+    @Test\n     public void testFormatPeriod() {\n         Calendar cal1970 = Calendar.getInstance();\n         cal1970.set(1970, 0, 1, 0, 0, 0);\n         assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\n     }\n \n+    @Test\n     public void testLexx() {\n         // tests each constant\n         assertArrayEquals(new DurationFormatUtils.Token[]{\n \n \n     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401\n+    @Test\n     public void testBugzilla38401() {\n         assertEqualDuration( \"0000/00/30 16:00:00 000\", new int[] { 2006, 0, 26, 18, 47, 34 }, \n                              new int[] { 2006, 1, 26, 10, 47, 34 }, \"yyyy/MM/dd HH:mm:ss SSS\");\n     }\n \n     // https://issues.apache.org/jira/browse/LANG-281\n+    @Test\n     public void testJiraLang281() {\n         assertEqualDuration( \"09\", new int[] { 2005, 11, 31, 0, 0, 0 }, \n                              new int[] { 2006, 9, 6, 0, 0, 0 }, \"MM\");\n     }\n     \n     // Testing the under a day range in DurationFormatUtils.formatPeriod\n+    @Test\n     public void testLowDurations() {\n         for(int hr=0; hr < 24; hr++) {\n             for(int min=0; min < 60; min++) {\n     }\n \n     // Attempting to test edge cases in DurationFormatUtils.formatPeriod\n+    @Test\n     public void testEdgeDurations() {\n         assertEqualDuration( \"01\", new int[] { 2006, 0, 15, 0, 0, 0 }, \n                              new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM\");\n         \n     }\n     \n+    @Test\n     public void testDurationsByBruteForce() {\n         bruteForce(2006, 0, 1, \"d\", Calendar.DAY_OF_MONTH);\n         bruteForce(2006, 0, 2, \"d\", Calendar.DAY_OF_MONTH);\n--- a/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n  */\n package org.apache.commons.lang3.time;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n import junit.framework.Assert;\n-import junit.framework.TestCase;\n+\n+import org.junit.Test;\n \n /**\n  * TestCase for StopWatch.\n  *\n  * @version $Id$\n  */\n-public class StopWatchTest extends TestCase {\n-\n-    public StopWatchTest(String s) {\n-        super(s);\n-    }\n+public class StopWatchTest  {\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testStopWatchSimple(){\n         StopWatch watch = new StopWatch();\n         watch.start();\n         assertEquals(0, watch.getTime());\n     }\n     \n+    @Test\n     public void testStopWatchSimpleGet(){\n         StopWatch watch = new StopWatch();\n         assertEquals(0, watch.getTime());\n         assertTrue(watch.getTime() < 2000);\n     }\n     \n+    @Test\n     public void testStopWatchSplit(){\n         StopWatch watch = new StopWatch();\n         watch.start();\n         assertTrue(totalTime < 1900);\n     }\n     \n+    @Test\n     public void testStopWatchSuspend(){\n         StopWatch watch = new StopWatch();\n         watch.start();\n         assertTrue(totalTime < 1300);\n     }\n \n+    @Test\n     public void testLang315() {\n         StopWatch watch = new StopWatch();\n         watch.start();\n     }\n \n     // test bad states\n+    @Test\n     public void testBadStates() {\n         StopWatch watch = new StopWatch();\n         try {\n         }\n     }\n \n+    @Test\n     public void testGetStartTime() {\n         long beforeStopWatch = System.currentTimeMillis();\n         StopWatch watch = new StopWatch();", "timestamp": 1348002462, "metainfo": ""}