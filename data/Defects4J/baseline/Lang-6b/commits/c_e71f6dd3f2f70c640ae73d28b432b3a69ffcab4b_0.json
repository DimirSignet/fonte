{"sha": "e71f6dd3f2f70c640ae73d28b432b3a69ffcab4b", "log": "LANG-822: NumberUtils#createNumber - bad behaviour for leading \"--\"   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n         // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n+        }\n+        if (str.trim().startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n         return new BigDecimal(str);\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n         // LANG-693\n         assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                     .createNumber(\"\" + Double.MAX_VALUE));\n+        \n+        // LANG-822\n+        // ensure that the underlying negative number would create a BigDecimal\n+        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n+        assertEquals(BigDecimal.class,bigNum.getClass());\n+        assertNotNull(bigNum);\n+\n+        // Check that the code fails to create a valid number when preceeded by -- rather than -\n+        try {\n+            NumberUtils.createNumber(\"--1.1E-700F\");\n+            fail(\"Expected NumberFormatException\");\n+        } catch (NumberFormatException nfe) {\n+            // expected\n+        }\n     }\n \n     @Test", "timestamp": 1352639782, "metainfo": ""}