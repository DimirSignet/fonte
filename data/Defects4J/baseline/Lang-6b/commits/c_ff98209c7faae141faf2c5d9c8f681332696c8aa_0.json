{"sha": "ff98209c7faae141faf2c5d9c8f681332696c8aa", "log": "Convert Strategy to abstract class; simplifies the subclasses  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n     /**\n      * A strategy to parse a single field from the parsing pattern\n      */\n-    private interface Strategy {\n+    private static abstract class Strategy {\n         /**\n          * Is this field a number?\n+         * The default implementation returns true.\n+         * \n          * @return true, if field is a number\n          */\n-        boolean isNumber();\n-        /**\n-         * Set the Calendar with the parsed field\n+        boolean isNumber() {\n+            return false;\n+        }\n+        /**\n+         * Set the Calendar with the parsed field.\n+         * \n+         * The default implementation does nothing.\n+         * \n          * @param parser The parser calling this strategy\n          * @param cal The <code>Calendar</code> to set\n          * @param value The parsed field to translate and set in cal\n          */\n-        void setCalendar(FastDateParser parser, Calendar cal, String value);\n+        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n+            \n+        }\n         /**\n          * Generate a <code>Pattern</code> regular expression to the <code>StringBuilder</code>\n          * which will accept this field\n          * @return true, if this field will set the calendar;\n          * false, if this field is a constant value\n          */\n-        boolean addRegex(FastDateParser parser, StringBuilder regex);\n+        abstract boolean addRegex(FastDateParser parser, StringBuilder regex);\n     }\n \n     /**\n     /**\n      * A strategy that copies the static or quoted field in the parsing pattern\n      */\n-    private static class CopyQuotedStrategy implements Strategy {\n+    private static class CopyQuotedStrategy extends Strategy {\n         private final String formatField;\n \n         /**\n          * {@inheritDoc}\n          */\n         @Override\n-        public boolean isNumber() {\n+        boolean isNumber() {\n             char c= formatField.charAt(0);\n             if(c=='\\'') {\n                 c= formatField.charAt(1);\n          * {@inheritDoc}\n          */\n         @Override\n-        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n+        boolean addRegex(FastDateParser parser, StringBuilder regex) {\n             escapeRegex(regex, formatField, true);\n             return false;\n         }\n-\n-        /**\n-         * {@inheritDoc}\n-         */\n-        @Override\n-        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n-        }\n     }\n \n     /**\n      * A strategy that handles a text field in the parsing pattern\n      */\n-     private static class TextStrategy implements Strategy {\n+     private static class TextStrategy extends Strategy {\n         private final int field;\n         private final Map<String, Integer> keyValues;\n \n          * {@inheritDoc}\n          */\n         @Override\n-        public boolean isNumber() {\n-            return false;\n-        }\n-\n-        /**\n-         * {@inheritDoc}\n-         */\n-        @Override\n-        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n+        boolean addRegex(FastDateParser parser, StringBuilder regex) {\n             regex.append('(');\n             for(String textKeyValue : keyValues.keySet()) {\n                 escapeRegex(regex, textKeyValue, false).append('|');\n          * {@inheritDoc}\n          */\n         @Override\n-        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n+        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n             Integer iVal = keyValues.get(value);\n             if(iVal == null) {\n                 StringBuilder sb= new StringBuilder(value);\n     /**\n      * A strategy that handles a number field in the parsing pattern\n      */\n-    private static class NumberStrategy implements Strategy {\n-        protected final int field;\n+    private static class NumberStrategy extends Strategy {\n+        private final int field;\n \n         /**\n          * Construct a Strategy that parses a Number field\n          * {@inheritDoc}\n          */\n         @Override\n-        public boolean isNumber() {\n+        boolean isNumber() {\n             return true;\n         }\n \n          * {@inheritDoc}\n          */\n         @Override\n-        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n+        boolean addRegex(FastDateParser parser, StringBuilder regex) {\n             if(parser.isNextNumber()) {\n                 regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");\n             }\n          * {@inheritDoc}\n          */\n         @Override\n-        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n+        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n             cal.set(field, modify(Integer.parseInt(value)));\n         }\n \n          * @param iValue The parsed integer\n          * @return The modified value\n          */\n-        public int modify(int iValue) {\n+        int modify(int iValue) {\n             return iValue;\n         }\n     }\n          * {@inheritDoc}\n          */\n         @Override\n-        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n+        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n             int iValue= Integer.parseInt(value);\n             if(iValue<100) {\n                 iValue= parser.adjustYear(iValue);\n     /**\n      * A strategy that handles a timezone field in the parsing pattern\n      */\n-    private static class TimeZoneStrategy implements Strategy {\n-\n-        final String validTimeZoneChars;\n-        final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);\n+    private static class TimeZoneStrategy extends Strategy {\n+\n+        private final String validTimeZoneChars;\n+        private final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);\n \n         /**\n          * Construct a Strategy that parses a TimeZone\n          * {@inheritDoc}\n          */\n         @Override\n-        public boolean isNumber() {\n-            return false;\n-        }\n-\n-        /**\n-         * {@inheritDoc}\n-         */\n-        @Override\n-        public boolean addRegex(FastDateParser parser, StringBuilder regex) {\n+        boolean addRegex(FastDateParser parser, StringBuilder regex) {\n             regex.append(validTimeZoneChars);\n             return true;\n         }\n          * {@inheritDoc}\n          */\n         @Override\n-        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n+        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n             TimeZone tz;\n             if(value.charAt(0)=='+' || value.charAt(0)=='-') {\n                 tz= TimeZone.getTimeZone(\"GMT\"+value);\n \n     private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {\n         @Override\n-        public int modify(int iValue) {\n+        int modify(int iValue) {\n             return iValue-1;\n         }\n     };\n     private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);\n     private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n         @Override\n-        public int modify(int iValue) {\n+        int modify(int iValue) {\n             return iValue%24;\n         }\n     };\n     private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n         @Override\n-        public int modify(int iValue) {\n+        int modify(int iValue) {\n             return iValue%12;\n         }\n     };", "timestamp": 1348774893, "metainfo": ""}