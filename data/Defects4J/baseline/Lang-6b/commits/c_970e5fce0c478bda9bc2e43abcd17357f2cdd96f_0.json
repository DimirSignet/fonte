{"sha": "970e5fce0c478bda9bc2e43abcd17357f2cdd96f", "log": "verify that a user-generated annotation which does not directly implement equals() nevertheless compares equivalently to a 'real' annotation  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java\n import java.lang.annotation.Target;\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n import java.util.ArrayList;\n import java.util.Arrays;\n \n  * @version $Id$\n  */\n public class AnnotationUtilsTest {\n-    @TestAnnotation(\n-            booleanValue = false,\n-            booleanValues = { false },\n-            byteValue = 0,\n-            byteValues = { 0 },\n-            charValue = 0,\n-            charValues = { 0 },\n-            doubleValue = 0,\n-            doubleValues = { 0 },\n-            floatValue = 0,\n-            floatValues = { 0 },\n-            intValue = 0,\n-            intValues = { 0 },\n-            longValue = 0,\n-            longValues = { 0 },\n-            nest = @NestAnnotation(\n-                    booleanValue = false,\n-                    booleanValues = { false },\n-                    byteValue = 0,\n-                    byteValues = { 0 },\n-                    charValue = 0,\n-                    charValues = { 0 },\n-                    doubleValue = 0,\n-                    doubleValues = { 0 },\n-                    floatValue = 0,\n-                    floatValues = { 0 },\n-                    intValue = 0,\n-                    intValues = { 0 },\n-                    longValue = 0,\n-                    longValues = { 0 },\n-                    shortValue = 0,\n-                    shortValues = { 0 },\n-                    stooge = CURLY,\n-                    stooges = { MOE, LARRY, SHEMP },\n-                    string = \"\",\n-                    strings = { \"\" },\n-                    type = Object.class,\n-                    types = { Object.class }\n-            ),\n-            nests = {\n-                @NestAnnotation(\n-                        booleanValue = false,\n-                        booleanValues = { false },\n-                        byteValue = 0,\n-                        byteValues = { 0 },\n-                        charValue = 0,\n-                        charValues = { 0 },\n-                        doubleValue = 0,\n-                        doubleValues = { 0 },\n-                        floatValue = 0,\n-                        floatValues = { 0 },\n-                        intValue = 0,\n-                        intValues = { 0 },\n-                        longValue = 0,\n-                        longValues = { 0 },\n-                        shortValue = 0,\n-                        shortValues = { 0 },\n-                        stooge = CURLY,\n-                        stooges = { MOE, LARRY, SHEMP },\n-                        string = \"\",\n-                        strings = { \"\" },\n-                        type = Object[].class,\n-                        types = { Object[].class }\n-                )\n-            },\n-            shortValue = 0,\n-            shortValues = { 0 },\n-            stooge = SHEMP,\n-            stooges = { MOE, LARRY, CURLY },\n-            string = \"\",\n-            strings = { \"\" },\n-            type = Object.class,\n-            types = { Object.class }\n-    )\n+    @TestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, nest = @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+            MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object.class, types = { Object.class }), nests = { @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+            MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object[].class, types = { Object[].class }) }, shortValue = 0, shortValues = { 0 }, stooge = SHEMP, stooges = {\n+            MOE, LARRY, CURLY }, string = \"\", strings = { \"\" }, type = Object.class, types = { Object.class })\n     public Object dummy1;\n \n-    @TestAnnotation(\n-            booleanValue = false,\n-            booleanValues = { false },\n-            byteValue = 0,\n-            byteValues = { 0 },\n-            charValue = 0,\n-            charValues = { 0 },\n-            doubleValue = 0,\n-            doubleValues = { 0 },\n-            floatValue = 0,\n-            floatValues = { 0 },\n-            intValue = 0,\n-            intValues = { 0 },\n-            longValue = 0,\n-            longValues = { 0 },\n-            nest = @NestAnnotation(\n-                    booleanValue = false,\n-                    booleanValues = { false },\n-                    byteValue = 0,\n-                    byteValues = { 0 },\n-                    charValue = 0,\n-                    charValues = { 0 },\n-                    doubleValue = 0,\n-                    doubleValues = { 0 },\n-                    floatValue = 0,\n-                    floatValues = { 0 },\n-                    intValue = 0,\n-                    intValues = { 0 },\n-                    longValue = 0,\n-                    longValues = { 0 },\n-                    shortValue = 0,\n-                    shortValues = { 0 },\n-                    stooge = CURLY,\n-                    stooges = { MOE, LARRY, SHEMP },\n-                    string = \"\",\n-                    strings = { \"\" },\n-                    type = Object.class,\n-                    types = { Object.class }\n-            ),\n-            nests = {\n-                @NestAnnotation(\n-                        booleanValue = false,\n-                        booleanValues = { false },\n-                        byteValue = 0,\n-                        byteValues = { 0 },\n-                        charValue = 0,\n-                        charValues = { 0 },\n-                        doubleValue = 0,\n-                        doubleValues = { 0 },\n-                        floatValue = 0,\n-                        floatValues = { 0 },\n-                        intValue = 0,\n-                        intValues = { 0 },\n-                        longValue = 0,\n-                        longValues = { 0 },\n-                        shortValue = 0,\n-                        shortValues = { 0 },\n-                        stooge = CURLY,\n-                        stooges = { MOE, LARRY, SHEMP },\n-                        string = \"\",\n-                        strings = { \"\" },\n-                        type = Object[].class,\n-                        types = { Object[].class }\n-                )\n-            },\n-            shortValue = 0,\n-            shortValues = { 0 },\n-            stooge = SHEMP,\n-            stooges = { MOE, LARRY, CURLY },\n-            string = \"\",\n-            strings = { \"\" },\n-            type = Object.class,\n-            types = { Object.class }\n-    )\n+    @TestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, nest = @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+            MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object.class, types = { Object.class }), nests = { @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+            MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object[].class, types = { Object[].class }) }, shortValue = 0, shortValues = { 0 }, stooge = SHEMP, stooges = {\n+            MOE, LARRY, CURLY }, string = \"\", strings = { \"\" }, type = Object.class, types = { Object.class })\n     public Object dummy2;\n \n-    @TestAnnotation(\n-            booleanValue = false,\n-            booleanValues = { false },\n-            byteValue = 0,\n-            byteValues = { 0 },\n-            charValue = 0,\n-            charValues = { 0 },\n-            doubleValue = 0,\n-            doubleValues = { 0 },\n-            floatValue = 0,\n-            floatValues = { 0 },\n-            intValue = 0,\n-            intValues = { 0 },\n-            longValue = 0,\n-            longValues = { 0 },\n-            nest = @NestAnnotation(\n-                    booleanValue = false,\n-                    booleanValues = { false },\n-                    byteValue = 0,\n-                    byteValues = { 0 },\n-                    charValue = 0,\n-                    charValues = { 0 },\n-                    doubleValue = 0,\n-                    doubleValues = { 0 },\n-                    floatValue = 0,\n-                    floatValues = { 0 },\n-                    intValue = 0,\n-                    intValues = { 0 },\n-                    longValue = 0,\n-                    longValues = { 0 },\n-                    shortValue = 0,\n-                    shortValues = { 0 },\n-                    stooge = CURLY,\n-                    stooges = { MOE, LARRY, SHEMP },\n-                    string = \"\",\n-                    strings = { \"\" },\n-                    type = Object.class,\n-                    types = { Object.class }\n-            ),\n-            nests = {\n-                @NestAnnotation(\n-                        booleanValue = false,\n-                        booleanValues = { false },\n-                        byteValue = 0,\n-                        byteValues = { 0 },\n-                        charValue = 0,\n-                        charValues = { 0 },\n-                        doubleValue = 0,\n-                        doubleValues = { 0 },\n-                        floatValue = 0,\n-                        floatValues = { 0 },\n-                        intValue = 0,\n-                        intValues = { 0 },\n-                        longValue = 0,\n-                        longValues = { 0 },\n-                        shortValue = 0,\n-                        shortValues = { 0 },\n-                        stooge = CURLY,\n-                        stooges = { MOE, LARRY, SHEMP },\n-                        string = \"\",\n-                        strings = { \"\" },\n-                        type = Object[].class,\n-                        types = { Object[].class }\n-                ),\n-                //add a second NestAnnotation to break equality:\n-                @NestAnnotation(\n-                        booleanValue = false,\n-                        booleanValues = { false },\n-                        byteValue = 0,\n-                        byteValues = { 0 },\n-                        charValue = 0,\n-                        charValues = { 0 },\n-                        doubleValue = 0,\n-                        doubleValues = { 0 },\n-                        floatValue = 0,\n-                        floatValues = { 0 },\n-                        intValue = 0,\n-                        intValues = { 0 },\n-                        longValue = 0,\n-                        longValues = { 0 },\n-                        shortValue = 0,\n-                        shortValues = { 0 },\n-                        stooge = CURLY,\n-                        stooges = { MOE, LARRY, SHEMP },\n-                        string = \"\",\n-                        strings = { \"\" },\n-                        type = Object[].class,\n-                        types = { Object[].class }\n-                )\n-            },\n-            shortValue = 0,\n-            shortValues = { 0 },\n-            stooge = SHEMP,\n-            stooges = { MOE, LARRY, CURLY },\n-            string = \"\",\n-            strings = { \"\" },\n-            type = Object.class,\n-            types = { Object.class }\n-    )\n+    @TestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, nest = @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+            MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object.class, types = { Object.class }), nests = {\n+            @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+                    MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object[].class, types = { Object[].class }),\n+            //add a second NestAnnotation to break equality:\n+            @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+                    MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object[].class, types = { Object[].class }) }, shortValue = 0, shortValues = { 0 }, stooge = SHEMP, stooges = {\n+            MOE, LARRY, CURLY }, string = \"\", strings = { \"\" }, type = Object.class, types = { Object.class })\n     public Object dummy3;\n \n-    @NestAnnotation(\n-            booleanValue = false,\n-            booleanValues = { false },\n-            byteValue = 0,\n-            byteValues = { 0 },\n-            charValue = 0,\n-            charValues = { 0 },\n-            doubleValue = 0,\n-            doubleValues = { 0 },\n-            floatValue = 0,\n-            floatValues = { 0 },\n-            intValue = 0,\n-            intValues = { 0 },\n-            longValue = 0,\n-            longValues = { 0 },\n-            shortValue = 0,\n-            shortValues = { 0 },\n-            stooge = CURLY,\n-            stooges = { MOE, LARRY, SHEMP },\n-            string = \"\",\n-            strings = { \"\" },\n-            type = Object[].class,\n-            types = { Object[].class }\n-    )\n-\n+    @NestAnnotation(booleanValue = false, booleanValues = { false }, byteValue = 0, byteValues = { 0 }, charValue = 0, charValues = { 0 }, doubleValue = 0, doubleValues = { 0 }, floatValue = 0, floatValues = { 0 }, intValue = 0, intValues = { 0 }, longValue = 0, longValues = { 0 }, shortValue = 0, shortValues = { 0 }, stooge = CURLY, stooges = {\n+            MOE, LARRY, SHEMP }, string = \"\", strings = { \"\" }, type = Object[].class, types = { Object[].class })\n     public Object dummy4;\n \n     @Target(FIELD)\n     @Retention(RUNTIME)\n     public @interface TestAnnotation {\n         String string();\n+\n         String[] strings();\n+\n         Class<?> type();\n+\n         Class<?>[] types();\n+\n         byte byteValue();\n+\n         byte[] byteValues();\n+\n         short shortValue();\n+\n         short[] shortValues();\n+\n         int intValue();\n+\n         int[] intValues();\n+\n         char charValue();\n+\n         char[] charValues();\n+\n         long longValue();\n+\n         long[] longValues();\n+\n         float floatValue();\n+\n         float[] floatValues();\n+\n         double doubleValue();\n+\n         double[] doubleValues();\n+\n         boolean booleanValue();\n+\n         boolean[] booleanValues();\n+\n         Stooge stooge();\n+\n         Stooge[] stooges();\n+\n         NestAnnotation nest();\n+\n         NestAnnotation[] nests();\n     }\n \n     public @interface NestAnnotation {\n         String string();\n+\n         String[] strings();\n+\n         Class<?> type();\n+\n         Class<?>[] types();\n+\n         byte byteValue();\n+\n         byte[] byteValues();\n+\n         short shortValue();\n+\n         short[] shortValues();\n+\n         int intValue();\n+\n         int[] intValues();\n+\n         char charValue();\n+\n         char[] charValues();\n+\n         long longValue();\n+\n         long[] longValues();\n+\n         float floatValue();\n+\n         float[] floatValues();\n+\n         double doubleValue();\n+\n         double[] doubleValues();\n+\n         boolean booleanValue();\n+\n         boolean[] booleanValues();\n+\n         Stooge stooge();\n+\n         Stooge[] stooges();\n     }\n \n \n     @Test\n     public void testEquivalence() {\n-        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class)));\n+        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2\n+                .getAnnotation(TestAnnotation.class)));\n     }\n \n     @Test\n     public void testSameInstance() {\n-        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));\n+        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1\n+                .getAnnotation(TestAnnotation.class)));\n     }\n \n     @Test\n     public void testNonEquivalentAnnotationsOfSameType() {\n-        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class)));\n+        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3\n+                .getAnnotation(TestAnnotation.class)));\n     }\n \n     @Test\n     public void testAnnotationsOfDifferingTypes() {\n-        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class)));\n+        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4\n+                .getAnnotation(NestAnnotation.class)));\n     }\n \n     @Test\n                     .getClass()));\n         }\n     }\n+\n+    @Test(timeout = 666)\n+    public void testGeneratedAnnotationEquivalentToRealAnnotation() throws Exception {\n+        final Test real = getClass().getDeclaredMethod(\n+                \"testGeneratedAnnotationEquivalentToRealAnnotation\").getAnnotation(Test.class);\n+\n+        InvocationHandler generatedTestInvocationHandler = new InvocationHandler() {\n+\n+            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                if (\"equals\".equals(method.getName()) && method.getParameterTypes().length == 1) {\n+                    return proxy == args[0];\n+                }\n+                if (\"hashCode\".equals(method.getName()) && method.getParameterTypes().length == 0) {\n+                    return System.identityHashCode(proxy);\n+                }\n+                if (\"toString\".equals(method.getName()) && method.getParameterTypes().length == 0) {\n+                    return \"Test proxy\";\n+                }\n+                return method.invoke(real, args);\n+            }\n+        };\n+\n+        Test generated = (Test) Proxy.newProxyInstance(Thread.currentThread()\n+                .getContextClassLoader(), new Class[] { Test.class },\n+                generatedTestInvocationHandler);\n+        assertTrue(real.equals(generated));\n+        assertFalse(generated.equals(real));\n+        assertTrue(AnnotationUtils.equals(generated, real));\n+        assertTrue(AnnotationUtils.equals(real, generated));\n+\n+        Test generated2 = (Test) Proxy.newProxyInstance(Thread.currentThread()\n+                .getContextClassLoader(), new Class[] { Test.class },\n+                generatedTestInvocationHandler);\n+        assertFalse(generated.equals(generated2));\n+        assertFalse(generated2.equals(generated));\n+        assertTrue(AnnotationUtils.equals(generated, generated2));\n+        assertTrue(AnnotationUtils.equals(generated2, generated));\n+    }\n }", "timestamp": 1284415392, "metainfo": ""}