{"sha": "19b6372018c6b800f8e2bf1b85e15ef4cbd500da", "log": "https://issues.apache.org/jira/browse/LANG-607 StringUtils methods do not handle Unicode 2.0+ supplementary characters correctly.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return INDEX_NOT_FOUND;\n         }\n-        for (int i = 0; i < cs.length(); i++) {\n+        int csLen = cs.length();\n+        int csLast = csLen - 1;\n+        int searchLen = searchChars.length;\n+        int searchLast = searchLen - 1;\n+        for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n-            for (int j = 0; j < searchChars.length; j++) {\n+            for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n-                    return i;\n+                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                        // ch is a supplementary character\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return i;\n+                        }\n+                    } else {\n+                        return i;\n+                    }\n                 }\n             }\n         }\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n+    public static boolean containsAny(String cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n         int csLength = cs.length();\n         int searchLength = searchChars.length;\n-        int csLastIndex = csLength - 1;\n-        int searchLastIndex = searchLength - 1;\n+        int csLast = csLength - 1;\n+        int searchLast = searchLength - 1;\n         for (int i = 0; i < csLength; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n-                    if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                        // ch is a supplementary character\n-                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLast) {\n+                            // missing low surrogate, fine, like String.indexOf(String)\n+                            return true;\n+                        }\n+                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n      * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(CharSequence cs, String searchChars) {\n+    public static boolean containsAny(String cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return INDEX_NOT_FOUND;\n         }\n-        outer : for (int i = 0; i < cs.length(); i++) {\n+        int csLen = cs.length();\n+        int csLast = csLen - 1;\n+        int searchLen = searchChars.length;\n+        int searchLast = searchLen - 1;\n+        outer:\n+        for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n-            for (int j = 0; j < searchChars.length; j++) {\n+            for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n-                    continue outer;\n+                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            continue outer;\n+                        }\n+                    } else {\n+                        continue outer;\n+                    }\n                 }\n             }\n             return i;\n         if (isEmpty(str) || isEmpty(searchChars)) {\n             return INDEX_NOT_FOUND;\n         }\n-        for (int i = 0; i < str.length(); i++) {\n-            if (searchChars.indexOf(str.charAt(i)) < 0) {\n-                return i;\n+        int strLen = str.length();\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+            boolean chFound = searchChars.indexOf(ch) >= 0;\n+            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n+                char ch2 = str.charAt(i + 1);\n+                if (chFound && searchChars.indexOf(ch2) < 0) {\n+                    return i;\n+                }\n+            } else {\n+                if (!chFound) {\n+                    return i;\n+                }\n             }\n         }\n         return INDEX_NOT_FOUND;\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @param invalidChars  an array of invalid chars, may be null\n+     * @param searchChars  an array of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * @since 2.0\n      */\n-    public static boolean containsNone(CharSequence cs, char[] invalidChars) {\n-        if (cs == null || invalidChars == null) {\n+    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n+        if (cs == null || searchChars == null) {\n             return true;\n         }\n-        int strSize = cs.length();\n-        int validSize = invalidChars.length;\n-        for (int i = 0; i < strSize; i++) {\n+        int csLen = cs.length();\n+        int csLast = csLen - 1;\n+        int searchLen = searchChars.length;\n+        int searchLast = searchLen - 1;\n+        for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n-            for (int j = 0; j < validSize; j++) {\n-                if (invalidChars[j] == ch) {\n-                    return false;\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLast) {\n+                            // missing low surrogate, fine, like String.indexOf(String)\n+                            return false;\n+                        }\n+                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return false;\n+                        }\n+                    } else {\n+                        // ch is in the Basic Multilingual Plane\n+                        return false;\n+                    }\n                 }\n             }\n         }\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n  * @version $Id$\n  */\n public class StringUtilsEqualsIndexOfTest extends TestCase {\n-    private static final String FOO = \"foo\";\n     private static final String BAR = \"bar\";\n-    private static final String FOOBAR = \"foobar\";\n-    private static final String[] FOOBAR_SUB_ARRAY = new String[] {\"ob\", \"ba\"};\n-\t\n-    /**\n-\t * Supplementary character U+20000\n-\t * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n-\t */\n-\tprivate static final String CharU20000 = \"\\uD840\\uDC00\";\n-\n-\t/**\n+    /**\n+     * Supplementary character U+20000\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    private static final String CharU20000 = \"\\uD840\\uDC00\";\n+    /**\n \t * Supplementary character U+20001\n \t * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n \t */\n \tprivate static final String CharU20001 = \"\\uD840\\uDC01\";\n+    /**\n+     * Incomplete supplementary character U+20000, high surrogate only.\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    private static final String CharUSuppCharHigh = \"\\uDC00\";\n+\t\n+    /**\n+     * Incomplete supplementary character U+20000, low surrogate only.\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    private static final String CharUSuppCharLow = \"\\uD840\";\n+\n+    private static final String FOO = \"foo\";\n+\n+    private static final String FOOBAR = \"foobar\";\n+\n+\tprivate static final String[] FOOBAR_SUB_ARRAY = new String[] {\"ob\", \"ba\"};\n \t\n     public StringUtilsEqualsIndexOfTest(String name) {\n         super(name);\n     }\n \n-    //-----------------------------------------------------------------------\n-\n-    public void testEquals() {\n-        assertEquals(true, StringUtils.equals(null, null));\n-        assertEquals(true, StringUtils.equals(FOO, FOO));\n-        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\n-        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\n-        assertEquals(false, StringUtils.equals(FOO, BAR));\n-        assertEquals(false, StringUtils.equals(FOO, null));\n-        assertEquals(false, StringUtils.equals(null, FOO));\n-    }\n-\n-    public void testEqualsIgnoreCase() {\n-        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testIndexOf_char() {\n-        assertEquals(-1, StringUtils.indexOf(null, ' '));\n-        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n-        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n-        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n-    }\n-\n-    public void testIndexOf_charInt() {\n-        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n-        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n-        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n-        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n-        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n-        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n-        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n-        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n-        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n-    }\n-\n-    public void testIndexOf_String() {\n-        assertEquals(-1, StringUtils.indexOf(null, null));\n-        assertEquals(-1, StringUtils.indexOf(\"\", null));\n-        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n-        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n-        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n-        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n-        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n-    }\n-\n-    public void testIndexOfIgnoreCase_String() {\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"\", null));\n-        assertEquals(0, StringUtils.indexOfIgnoreCase(\"\", \"\"));\n-        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\"));\n-        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\"));\n-        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\"));\n-        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\"));\n-        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n-        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n-        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\n-    }\n-\n-    public void testIndexOfIgnoreCase_StringInt() {\n-        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\n-        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\n-        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 1));\n-        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 2));\n-        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 3));\n-        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 4));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 5));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 6));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 7));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n-        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aab\", \"AB\", 1));\n-        assertEquals(5, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 5));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"ab\", \"AAB\", 0));\n-        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\n-    }\n-\n-    public void testOrdinalIndexOf() {\n-        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\n-        \n-        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\n-\n-        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\n-\n-        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\n-        assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\n-        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\n-\n-        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\n-        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\n-        assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\n-        assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\n-        \n-        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\n-        \n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\n-        assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\n-        assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\n-        assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\n-        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\n-        assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\n-        assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\n-        assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\n-        assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\n-        assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\n-        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\n-    }\n-\n-    public void testIndexOf_StringInt() {\n-        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n-        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n-        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n-        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n-        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n-        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n-        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n-        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n-        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n-        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n-        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n-        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n-        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\n-        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n-        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n-        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n-        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n-        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n-        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n-        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testLastIndexOf_char() {\n-        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n-        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n-        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n-    }\n-\n-    public void testLastIndexOf_charInt() {\n-        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n-        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n-        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n-        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n-        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n-        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n-    }\n-\n-    public void testLastIndexOf_String() {\n-        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n-        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n-        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n-        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n-        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n-        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n-    }\n-\n-    public void testLastOrdinalIndexOf() {\n-        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42) );\n-        assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42) );\n-        assertEquals(0, StringUtils.lastOrdinalIndexOf(\"\", \"\", 42) );\n-        assertEquals(7, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1) );\n-        assertEquals(6, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2) );\n-        assertEquals(5, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1) );\n-        assertEquals(2, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2) );\n-        assertEquals(4, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) );\n-        assertEquals(1, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) );\n-        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1) );\n-        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2) );\n-    }\n-\n-    public void testLastIndexOf_StringInt() {\n-        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n-        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n-        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n-        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n-        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n-        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n-        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n-        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n-        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n-        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n-        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n-        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n-        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n-    }\n-\n-    public void testLastIndexOfIgnoreCase_String() {\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\"));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"a\"));\n-        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\"));\n-        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"\"));\n-        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"a\"));\n-        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\"));\n-        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"b\"));\n-        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\"));\n-        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n-        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"ab\", \"AAB\"));\n-        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\n-    }\n-\n-    public void testLastIndexOfIgnoreCase_StringInt() {\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", 0));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", -1));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, 0));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, -1));\n-        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 0));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", -1));\n-        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 9));\n-        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 0));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", -1));\n-        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 9));\n-        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8));\n-        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8));\n-        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n-        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 3));\n-        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1));\n-        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0));\n-        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0));\n-        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testContainsChar() {\n+    public void testContains_Char() {\n         assertEquals(false, StringUtils.contains(null, ' '));\n         assertEquals(false, StringUtils.contains(\"\", ' '));\n-        assertEquals(false, StringUtils.contains(\"\",null));\n-        assertEquals(false, StringUtils.contains(null,null));\n+        assertEquals(false, StringUtils.contains(\"\", null));\n+        assertEquals(false, StringUtils.contains(null, null));\n         assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n         assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n         assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n         assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n     }\n \n-    public void testContainsString() {\n+    public void testContains_String() {\n         assertEquals(false, StringUtils.contains(null, null));\n         assertEquals(false, StringUtils.contains(null, \"\"));\n         assertEquals(false, StringUtils.contains(null, \"a\"));\n         assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n     }\n \n-    public void testContainsIgnoreCase_StringString() {\n-        assertFalse(StringUtils.containsIgnoreCase(null, null));\n-        \n-        // Null tests\n-        assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\n-        assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\n-        assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\n-        \n-        assertFalse(StringUtils.containsIgnoreCase(\"\", null));\n-        assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\n-        assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\n-        \n-        // Match len = 0\n-        assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\n-\n-        // Match len = 1\n-        assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\n-        assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\n-        \n-        // Match len > 1\n-        assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\n-        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\n-        assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\n-        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\n-        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContains_StringWithBadSupplementaryChars() {\n+        // Test edge case: 1/2 of a (broken) supplementary char\n+        assertEquals(false, StringUtils.contains(CharUSuppCharHigh, CharU20001));\n+        assertEquals(false, StringUtils.contains(CharUSuppCharLow, CharU20001));\n+        assertEquals(false, StringUtils.contains(CharU20001, CharUSuppCharHigh));\n+        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n+        assertEquals(true, StringUtils.contains(CharU20001, CharUSuppCharLow));\n+        assertEquals(true, StringUtils.contains(CharU20001 + CharUSuppCharLow + \"a\", \"a\"));\n+        assertEquals(true, StringUtils.contains(CharU20001 + CharUSuppCharHigh + \"a\", \"a\"));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContains_StringWithSupplementaryChars() {\n+        assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));\n+        assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));\n+        assertEquals(true, StringUtils.contains(CharU20000, CharU20000));\n+        assertEquals(false, StringUtils.contains(CharU20000, CharU20001));\n+    }\n+\n+    public void testContainsAny_StringCharArray() {\n+        assertFalse(StringUtils.containsAny(null, (char[]) null));\n+        assertFalse(StringUtils.containsAny(null, new char[0]));\n+        assertFalse(StringUtils.containsAny(null, new char[] { 'a', 'b' }));\n+\n+        assertFalse(StringUtils.containsAny(\"\", (char[]) null));\n+        assertFalse(StringUtils.containsAny(\"\", new char[0]));\n+        assertFalse(StringUtils.containsAny(\"\", new char[] { 'a', 'b' }));\n+\n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null));\n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0]));\n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] { 'z', 'a' }));\n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] { 'b', 'y' }));\n+        assertFalse(StringUtils.containsAny(\"ab\", new char[] { 'z' }));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n+        // Test edge case: 1/2 of a (broken) supplementary char\n+        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n+        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n+        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n+        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n+        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n+        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n+        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsAny_StringCharArrayWithSupplementaryChars() {\n+        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n+        assertEquals(true, StringUtils.containsAny(\"a\" + CharU20000 + CharU20001, \"a\".toCharArray()));\n+        assertEquals(true, StringUtils.containsAny(CharU20000 + \"a\" + CharU20001, \"a\".toCharArray()));\n+        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001 + \"a\", \"a\".toCharArray()));\n+        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n+        assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));\n+        // Sanity check:\n+        assertEquals(-1, CharU20000.indexOf(CharU20001));\n+        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n+        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n+        // Test:\n+        assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));\n+        assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\n+    }\n+\n+    public void testContainsAny_StringString() {\n+        assertFalse(StringUtils.containsAny(null, (String) null));\n+        assertFalse(StringUtils.containsAny(null, \"\"));\n+        assertFalse(StringUtils.containsAny(null, \"ab\"));\n+        \n+        assertFalse(StringUtils.containsAny(\"\", (String) null));\n+        assertFalse(StringUtils.containsAny(\"\", \"\"));\n+        assertFalse(StringUtils.containsAny(\"\", \"ab\"));\n+        \n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null)); \n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\")); \n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\")); \n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\n+        assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsAny_StringWithBadSupplementaryChars() {\n+        // Test edge case: 1/2 of a (broken) supplementary char\n+        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n+        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n+        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n+        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n+        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n+        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsAny_StringWithSupplementaryChars() {\n+        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));\n+        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));\n+        assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));\n+        // Sanity check:\n+        assertEquals(-1, CharU20000.indexOf(CharU20001));\n+        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n+        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n+        // Test:\n+        assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));\n+        assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));\n     }\n \n     public void testContainsIgnoreCase_LocaleIndependence() {\n         }\n     }\n \n-    // -----------------------------------------------------------------------\n-    public void testIndexOfAny_StringStringarray() {\n-        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n-        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n-        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n-        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n-        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n-        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n-        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n-        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n-        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n-        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n-        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n-    }\n-\n-    public void testLastIndexOfAny_StringStringarray() {\n-        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n-        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n-        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n-        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testIndexOfAny_StringChararray() {\n-        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n-        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n-        \n-        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n-        \n-        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n-        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n-        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n-        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n-        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n-    }\n-\n-    public void testIndexOfAny_StringString() {\n-        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n-        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n-        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n-        \n-        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n-        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n-        \n-        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n-        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n-        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n-        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n-        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testContainsAny_StringChararray() {\n-        assertFalse(StringUtils.containsAny(null, (char[]) null));\n-        assertFalse(StringUtils.containsAny(null, new char[0]));\n-        assertFalse(StringUtils.containsAny(null, new char[] {'a','b'}));\n-        \n-        assertFalse(StringUtils.containsAny(\"\", (char[]) null));\n-        assertFalse(StringUtils.containsAny(\"\", new char[0]));\n-        assertFalse(StringUtils.containsAny(\"\", new char[] {'a','b'}));\n-        \n-        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null)); \n-        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0])); \n-        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'z','a'})); \n-        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'b','y'}));\n-        assertFalse(StringUtils.containsAny(\"ab\", new char[] {'z'}));\n-    }\n-\n-    public void testContainsAny_StringString() {\n-        assertFalse(StringUtils.containsAny(null, (String) null));\n-        assertFalse(StringUtils.containsAny(null, \"\"));\n-        assertFalse(StringUtils.containsAny(null, \"ab\"));\n-        \n-        assertFalse(StringUtils.containsAny(\"\", (String) null));\n-        assertFalse(StringUtils.containsAny(\"\", \"\"));\n-        assertFalse(StringUtils.containsAny(\"\", \"ab\"));\n-        \n-        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null)); \n-        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\")); \n-        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\")); \n-        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\n-        assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testIndexOfAnyBut_StringChararray() {\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n-        \n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n-        \n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n-        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n-        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n-        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n-    }\n-\n-    public void testIndexOfAnyBut_StringString() {\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n-        \n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n-        \n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n-        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n-        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n-        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n-    }\n-    \n-    //-----------------------------------------------------------------------\n+    public void testContainsIgnoreCase_StringString() {\n+        assertFalse(StringUtils.containsIgnoreCase(null, null));\n+        \n+        // Null tests\n+        assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\n+        assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\n+        assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\n+        \n+        assertFalse(StringUtils.containsIgnoreCase(\"\", null));\n+        assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\n+        assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\n+        \n+        // Match len = 0\n+        assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\n+\n+        // Match len = 1\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\n+        \n+        // Match len > 1\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n+    }\n+\n+    public void testContainsNone_CharArray() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab.\";\n+        char[] chars1= {'b'};\n+        char[] chars2= {'.'};\n+        char[] chars3= {'c', 'd'};\n+        char[] emptyChars = new char[0];\n+        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n+        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n+        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n+        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n+        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n+        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars2));\n+        assertEquals(true, StringUtils.containsNone(str1, chars3));\n+        assertEquals(false, StringUtils.containsNone(str2, chars1));\n+        assertEquals(true, StringUtils.containsNone(str2, chars2));\n+        assertEquals(true, StringUtils.containsNone(str2, chars3));\n+        assertEquals(false, StringUtils.containsNone(str3, chars1));\n+        assertEquals(false, StringUtils.containsNone(str3, chars2));\n+        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n+        // Test edge case: 1/2 of a (broken) supplementary char\n+        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n+        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n+        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n+        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n+        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n+        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n+        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsNone_CharArrayWithSupplementaryChars() {\n+        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n+        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n+        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n+        // Sanity check:\n+        assertEquals(-1, CharU20000.indexOf(CharU20001));\n+        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n+        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n+        // Test:\n+        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n+        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n+    }\n+\n+    public void testContainsNone_String() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab.\";\n+        String chars1= \"b\";\n+        String chars2= \".\";\n+        String chars3= \"cd\";\n+        assertEquals(true, StringUtils.containsNone(null, (String) null));\n+        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n+        assertEquals(true, StringUtils.containsNone(null, \"\"));\n+        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n+        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n+        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars2));\n+        assertEquals(true, StringUtils.containsNone(str1, chars3));\n+        assertEquals(false, StringUtils.containsNone(str2, chars1));\n+        assertEquals(true, StringUtils.containsNone(str2, chars2));\n+        assertEquals(true, StringUtils.containsNone(str2, chars3));\n+        assertEquals(false, StringUtils.containsNone(str3, chars1));\n+        assertEquals(false, StringUtils.containsNone(str3, chars2));\n+        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsNone_StringWithBadSupplementaryChars() {\n+        // Test edge case: 1/2 of a (broken) supplementary char\n+        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n+        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n+        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n+        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n+        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n+        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n+        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testContainsNone_StringWithSupplementaryChars() {\n+        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n+        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n+        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n+        // Sanity check:\n+        assertEquals(-1, CharU20000.indexOf(CharU20001));\n+        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n+        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n+        // Test:\n+        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n+        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n+    }\n+\n+    public void testContainsOnly_CharArray() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab\";\n+        char[] chars1= {'b'};\n+        char[] chars2= {'a'};\n+        char[] chars3= {'a', 'b'};\n+        char[] emptyChars = new char[0];\n+        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n+        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n+        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n+        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n+        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n+        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n+        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+    }\n+\n     public void testContainsOnly_String() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n         assertEquals(true, StringUtils.containsOnly(str3, chars3));\n     }\n \n-    public void testContainsOnly_Chararray() {\n-        String str1 = \"a\";\n-        String str2 = \"b\";\n-        String str3 = \"ab\";\n-        char[] chars1= {'b'};\n-        char[] chars2= {'a'};\n-        char[] chars3= {'a', 'b'};\n-        char[] emptyChars = new char[0];\n-        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n-        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n-        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n-        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n-        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n-        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n-        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n-        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n-        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n-        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n-        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n-        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n-    }\n-\n-    public void testContainsNone_String() {\n-        String str1 = \"a\";\n-        String str2 = \"b\";\n-        String str3 = \"ab.\";\n-        String chars1= \"b\";\n-        String chars2= \".\";\n-        String chars3= \"cd\";\n-        assertEquals(true, StringUtils.containsNone(null, (String) null));\n-        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n-        assertEquals(true, StringUtils.containsNone(null, \"\"));\n-        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n-        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n-        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars2));\n-        assertEquals(true, StringUtils.containsNone(str1, chars3));\n-        assertEquals(false, StringUtils.containsNone(str2, chars1));\n-        assertEquals(true, StringUtils.containsNone(str2, chars2));\n-        assertEquals(true, StringUtils.containsNone(str2, chars3));\n-        assertEquals(false, StringUtils.containsNone(str3, chars1));\n-        assertEquals(false, StringUtils.containsNone(str3, chars2));\n-        assertEquals(true, StringUtils.containsNone(str3, chars3));\n-    }\n-\n-    public void testContainsNone_Chararray() {\n-        String str1 = \"a\";\n-        String str2 = \"b\";\n-        String str3 = \"ab.\";\n-        char[] chars1= {'b'};\n-        char[] chars2= {'.'};\n-        char[] chars3= {'c', 'd'};\n-        char[] emptyChars = new char[0];\n-        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n-        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n-        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n-        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n-        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n-        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars2));\n-        assertEquals(true, StringUtils.containsNone(str1, chars3));\n-        assertEquals(false, StringUtils.containsNone(str2, chars1));\n-        assertEquals(true, StringUtils.containsNone(str2, chars2));\n-        assertEquals(true, StringUtils.containsNone(str2, chars3));\n-        assertEquals(false, StringUtils.containsNone(str3, chars1));\n-        assertEquals(false, StringUtils.containsNone(str3, chars2));\n-        assertEquals(true, StringUtils.containsNone(str3, chars3));\n-    }\n-\n-\t/**\n-\t * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n-\t */\n-\tpublic void testContainsStringWithSupplementaryChars() {\n-\t\tassertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));\n-\t\tassertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));\n-\t\tassertEquals(true, StringUtils.contains(CharU20000, CharU20000));\n-\t\tassertEquals(false, StringUtils.contains(CharU20000, CharU20001));\n-\t}\n-\n-\t/**\n-\t * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n-\t */\n-\tpublic void testContainsAnyStringWithSupplementaryChars() {\n-\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));\n-\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));\n-\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));\n-\t\t// Sanity check:\n-\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));\n-\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n-\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n-\t\t// Test:\n-\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));\n-\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));\n-\t}\n+    public void testEquals() {\n+        assertEquals(true, StringUtils.equals(null, null));\n+        assertEquals(true, StringUtils.equals(FOO, FOO));\n+        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\n+        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\n+        assertEquals(false, StringUtils.equals(FOO, BAR));\n+        assertEquals(false, StringUtils.equals(FOO, null));\n+        assertEquals(false, StringUtils.equals(null, FOO));\n+    }\n+\n+    public void testEqualsIgnoreCase() {\n+        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n+        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n+        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n+        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n+        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n+        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n+        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_char() {\n+        assertEquals(-1, StringUtils.indexOf(null, ' '));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n+    }\n+\n+    public void testIndexOf_charInt() {\n+        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n+        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n+        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n+        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n+    }\n+\n+    public void testIndexOf_String() {\n+        assertEquals(-1, StringUtils.indexOf(null, null));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n+        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n+    }\n+\n+    public void testIndexOf_StringInt() {\n+        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n+        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n+        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n+        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n+        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n+        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n+    }\n+\n+    public void testIndexOfAny_StringCharArray() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n+        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n+        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n+        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n+        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n+        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n+    }\n+\n+    public void testIndexOfAny_StringString() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n+        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n+        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n+        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n+    }\n+\n+    public void testIndexOfAny_StringStringArray() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n+        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n+        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n+        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n+    }\n+\n+    /**\n+     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     */\n+    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n+        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n+        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n+        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n+        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n+    }\n+\n+    public void testIndexOfAnyBut_StringCharArray() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n+    }\n+    \n+    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n+        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n+        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n+        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n+    }\n+    \n+    public void testIndexOfAnyBut_StringString() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n+        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n+    }\n+    \n+    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n+        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n+        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n+        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n+    }\n+\n+    public void testIndexOfIgnoreCase_String() {\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"\", null));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\"));\n+        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\"));\n+        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\"));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\n+    }\n+\n+    public void testIndexOfIgnoreCase_StringInt() {\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 1));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 2));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 3));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 4));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 5));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 6));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 7));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aab\", \"AB\", 1));\n+        assertEquals(5, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 5));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"ab\", \"AAB\", 0));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\n+    }\n+\n+    public void testLastIndexOf_char() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n+    }\n+\n+    public void testLastIndexOf_charInt() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n+        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n+    }\n+\n+    public void testLastIndexOf_String() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n+        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n+        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n+    }\n+\n+    public void testLastIndexOf_StringInt() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n+        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n+        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n+    }\n+\n+    public void testLastIndexOfAny_StringStringArray() {\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n+        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n+        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n+        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n+    }\n+\n+    public void testLastIndexOfIgnoreCase_String() {\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\"));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"a\"));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\"));\n+        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"\"));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"a\"));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\"));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"b\"));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\"));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"ab\", \"AAB\"));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\n+    }\n+\n+\tpublic void testLastIndexOfIgnoreCase_StringInt() {\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, -1));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 9));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n+        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 3));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0));\n+        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\n+    }\n \t\n-\t/**\n-\t * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n-\t */\n-\tpublic void testContainsAnyCharArrayWithSupplementaryChars() {\n-\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n-\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n-\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));\n-\t\t// Sanity check:\n-\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));\n-\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n-\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n-\t\t// Test:\n-\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));\n-\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\n-\t}\n+    public void testLastOrdinalIndexOf() {\n+        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42) );\n+        assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42) );\n+        assertEquals(0, StringUtils.lastOrdinalIndexOf(\"\", \"\", 42) );\n+        assertEquals(7, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1) );\n+        assertEquals(6, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2) );\n+        assertEquals(5, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1) );\n+        assertEquals(2, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2) );\n+        assertEquals(4, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) );\n+        assertEquals(1, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) );\n+        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1) );\n+        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2) );\n+    }\n+\n+    public void testOrdinalIndexOf() {\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\n+        \n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\n+\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\n+\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\n+        assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\n+        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\n+\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\n+        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\n+        assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\n+        assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\n+        \n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\n+        \n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\n+        assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\n+        assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\n+        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\n+        assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\n+        assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\n+        assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\n+        assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\n+        assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\n+    }\n+\n }", "timestamp": 1268699827, "metainfo": ""}