{"sha": "80bd78ea0685d28ddec9b8162d652db9dec949ce", "log": "LANG-571 ArrayUtils.add(T[] array[, offset], T element) can create unexpected ClassCastException  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      * @param element  the object to add, may be <code>null</code>\n      * @return A new array containing the existing elements plus the new element\n      * The returned array type will be that of the input array (unless null),\n-     * in which case it will have the same type as the element (unless that is also null)\n-     * in which case the returned type will be Object[].\n-     * @since 2.1\n+     * in which case it will have the same type as the element.\n+     * If both are null, an IllegalArgumentException is thrown\n+     * @since 2.1\n+     * @throws IllegalArgumentException if both arguments are null\n      */\n     public static <T> T[] add(T[] array, T element) {\n-        Class<?> type = array != null ? array.getClass() : (element != null ? element.getClass() : Object.class);\n-        // TODO - this is NOT safe to ignore - see LANG-571\n+        Class<?> type;\n+        if (array != null){\n+            type = array.getClass();\n+        } else if (element != null) {\n+            type = element.getClass();\n+        } else {\n+            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n+        }\n+        @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n         newArray[newArray.length - 1] = element;\n         return newArray;\n      * @return A new array containing the existing elements and the new element\n      * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n+     * @throws IllegalArgumentException if both array and element are null\n      */\n     public static <T> T[] add(T[] array, int index, T element) {\n         Class<?> clss = null;\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n-            // TODO this is not type-safe - see LANG-571\n-            final T[] emptyArray = (T[]) new Object[] { null };\n-            return emptyArray;\n+            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n         final T[] newArray = (T[]) add(array, index, element, clss);\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n         assertTrue(Arrays.equals((new Object[]{null}), newArray));\n         assertEquals(Object.class, newArray.getClass().getComponentType());\n     }\n+    \n+    public void testLANG571(){\n+        String[] stringArray=null;\n+        String aString=null;\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            String[] sa = ArrayUtils.add(stringArray, aString);\n+            fail(\"Should have caused IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae){\n+            //expected\n+        }\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            String[] sa = ArrayUtils.add(stringArray, 0, aString);\n+            fail(\"Should have caused IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae){\n+            //expected\n+        }\n+    }\n \n     public void testAddObjectArrayToObjectArray() {\n         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));", "timestamp": 1263645560, "metainfo": ""}