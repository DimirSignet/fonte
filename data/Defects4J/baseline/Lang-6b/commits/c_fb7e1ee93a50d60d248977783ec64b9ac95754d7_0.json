{"sha": "fb7e1ee93a50d60d248977783ec64b9ac95754d7", "log": "Fix test failures by clearing out the registry for tests that try to show that the registry is left clean.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n \n     @Test\n     public void testReflectionIntArray() {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         int[] array = new int[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n \n     @Test\n     public void testReflectionShortArray() {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         short[] array = new short[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n \n     @Test\n     public void testReflectionCharArray() {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         char[] array = new char[] { 'A', '2', '_', 'D' };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n \n     @Test\n     public void testReflectionByteArrayArray() {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n \n     @Test\n     public void testReflectionCharArrayArray() {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n      */\n     @Test\n     public void testSimpleReflectionObjectCycle() throws Exception {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n         simple.o = simple;\n         assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());\n      */\n     @Test\n     public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n         assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n         this.validateNullToStringStyleRegistry();\n      */\n     @Test\n     public void testReflectionObjectCycle() throws Exception {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         ReflectionTestCycleA a = new ReflectionTestCycleA();\n         ReflectionTestCycleB b = new ReflectionTestCycleB();\n         a.b = b;\n                 + \"}]\",\n             ToStringBuilder.reflectionToString(simple));\n         this.validateNullToStringStyleRegistry();\n+    }\n+\n+    private static final Object DUMMY = new Object();\n+    void emptyToStringStyleRegistry() {\n+        final Map<Object, Object> registry = ToStringStyle.getRegistry();\n+        if (registry == null) {\n+            return;\n+        }\n+        registry.clear(); // empty\n+        ToStringStyle.register(DUMMY); // add key\n+        ToStringStyle.unregister(DUMMY); // remove key and drop registry\n     }\n \n     void validateNullToStringStyleRegistry() {\n \n     @Test\n     public void testObjectCycle() {\n-        validateNullToStringStyleRegistry(); // Ensure registry starts out empty\n+        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         ObjectCycle a = new ObjectCycle();\n         ObjectCycle b = new ObjectCycle();\n         a.obj = b;", "timestamp": 1331174484, "metainfo": ""}