{"sha": "07114c79be22fbb40296cb2fe6c2ea6946eae802", "log": "Adding Henning's GitHub pull request with a Triple implementation. LANG-675  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.tuple;\n+\n+/**\n+ * <p>An immutable triple consisting of three {@code Object} elements.</p>\n+ * \n+ * <p>Although the implementation is immutable, there is no restriction on the objects\n+ * that may be stored. If mutable objects are stored in the triple, then the triple\n+ * itself effectively becomes mutable. The class is also not {@code final}, so a subclass\n+ * could add undesirable behaviour.</p>\n+ * \n+ * <p>#ThreadSafe# if all three objects are thread-safe</p>\n+ *\n+ * @param <L> the left element type\n+ * @param <M> the middle element type\n+ * @param <R> the right element type\n+ *\n+ * @version $Id$\n+ */\n+public final class ImmutableTriple<L, M, R> extends Triple<L, M, R> {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 1L;\n+\n+    /** Left object */\n+    public final L left;\n+    /** Middle object */\n+    public final M middle;\n+    /** Right object */\n+    public final R right;\n+\n+    /**\n+     * <p>Obtains an immutable triple of from three objects inferring the generic types.</p>\n+     * \n+     * <p>This factory allows the triple to be created using inference to\n+     * obtain the generic types.</p>\n+     * \n+     * @param <L> the left element type\n+     * @param <M> the middle element type\n+     * @param <R> the right element type\n+     * @param left  the left element, may be null\n+     * @param middle  the middle element, may be null\n+     * @param right  the right element, may be null\n+     * @return a triple formed from the three parameters, not null\n+     */\n+    public static <L, M, R> ImmutableTriple<L, M, R> of(L left, M middle, R right) {\n+        return new ImmutableTriple<L, M, R>(left, middle, right);\n+    }\n+\n+    /**\n+     * Create a new triple instance.\n+     *\n+     * @param left  the left value, may be null\n+     * @param middle the middle value, may be null\n+     * @param right  the right value, may be null\n+     */\n+    public ImmutableTriple(L left, M middle, R right) {\n+        super();\n+        this.left = left;\n+        this.middle = middle;\n+        this.right = right;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public L getLeft() {\n+        return left;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public M getMiddle() {\n+        return middle;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public R getRight() {\n+        return right;\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.tuple;\n+\n+/**\n+ * <p>A mutable triple consisting of three {@code Object} elements.</p>\n+ *\n+ * <p>Not #ThreadSafe#</p>\n+ *\n+ * @param <L> the left element type\n+ * @param <M> the middle element type\n+ * @param <R> the right element type\n+ *\n+ * @version $Id$\n+ */\n+public class MutableTriple<L, M, R> extends Triple<L, M, R> {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 1L;\n+\n+    /** Left object */\n+    public L left;\n+    /** Middle object */\n+    public M middle;\n+    /** Right object */\n+    public R right;\n+\n+    /**\n+     * <p>Obtains an mutable triple of three objects inferring the generic types.</p>\n+     *\n+     * <p>This factory allows the triple to be created using inference to\n+     * obtain the generic types.</p>\n+     *\n+     * @param <L> the left element type\n+     * @param <M> the middle element type\n+     * @param <R> the right element type\n+     * @param left  the left element, may be null\n+     * @param middle  the middle element, may be null\n+     * @param right  the right element, may be null\n+     * @return a triple formed from the three parameters, not null\n+     */\n+    public static <L, M, R> MutableTriple<L, M, R> of(L left, M middle, R right) {\n+        return new MutableTriple<L, M, R>(left, middle, right);\n+    }\n+\n+    /**\n+     * Create a new triple instance of three nulls.\n+     */\n+    public MutableTriple() {\n+        super();\n+    }\n+\n+    /**\n+     * Create a new triple instance.\n+     *\n+     * @param left  the left value, may be null\n+     * @param middle  the middle value, may be null\n+     * @param right  the right value, may be null\n+     */\n+    public MutableTriple(L left, M middle, R right) {\n+        super();\n+        this.left = left;\n+        this.middle = middle;\n+        this.right = right;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public L getLeft() {\n+        return left;\n+    }\n+\n+    /**\n+     * Sets the left element of the triple.\n+     *\n+     * @param left  the new value of the left element, may be null\n+     */\n+    public void setLeft(L left) {\n+        this.left = left;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public M getMiddle() {\n+        return middle;\n+    }\n+\n+    /**\n+     * Sets the middle element of the triple.\n+     *\n+     * @param middle  the new value of the middle element, may be null\n+     */\n+    public void setMiddle(M middle) {\n+        this.middle = middle;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public R getRight() {\n+        return right;\n+    }\n+\n+    /**\n+     * Sets the right element of the triple.\n+     *\n+     * @param right  the new value of the right element, may be null\n+     */\n+    public void setRight(R right) {\n+        this.right = right;\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/tuple/Triple.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.tuple;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.apache.commons.lang3.builder.CompareToBuilder;\n+\n+/**\n+ * <p>A triple consisting of three elements.</p>\n+ *\n+ * <p>This class is an abstract implementation defining the basic API.\n+ * It refers to the elements as 'left', 'middle' and 'right'.</p>\n+ *\n+ * <p>Subclass implementations may be mutable or immutable.\n+ * However, there is no restriction on the type of the stored objects that may be stored.\n+ * If mutable objects are stored in the triple, then the triple itself effectively becomes mutable.</p>\n+ *\n+ * @param <L> the left element type\n+ * @param <M> the middle element type\n+ * @param <R> the right element type\n+ *\n+ * @version $Id$\n+ */\n+public abstract class Triple<L, M, R> implements Comparable<Triple<L, M, R>>, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * <p>Obtains an immutable triple of from three objects inferring the generic types.</p>\n+     *\n+     * <p>This factory allows the triple to be created using inference to\n+     * obtain the generic types.</p>\n+     *\n+     * @param <L> the left element type\n+     * @param <M> the middle element type\n+     * @param <R> the right element type\n+     * @param left  the left element, may be null\n+     * @param middle the middle element, may be null\n+     * @param right  the right element, may be null\n+     * @return a triple formed from the three parameters, not null\n+     */\n+    public static <L, M, R> Triple<L, M, R> of(L left, M middle, R right) {\n+        return new ImmutableTriple<L, M, R>(left, middle, right);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the left element from this triple.</p>\n+     *\n+     * @return the left element, may be null\n+     */\n+    public abstract L getLeft();\n+\n+    /**\n+     * <p>Gets the middle element from this triple.</p>\n+     *\n+     * @return the middle element, may be null\n+     */\n+    public abstract M getMiddle();\n+\n+    /**\n+     * <p>Gets the right element from this triple.</p>\n+     *\n+     * @return the right element, may be null\n+     */\n+    public abstract R getRight();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Compares the triple based on the left element, followed by the middle element,\n+     * finally the right element.\n+     * The types must be {@code Comparable}.</p>\n+     *\n+     * @param other  the other triple, not null\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Triple<L, M, R> other) {\n+      return new CompareToBuilder().append(getLeft(), other.getLeft())\n+          .append(getMiddle(), other.getMiddle())\n+          .append(getRight(), other.getRight()).toComparison();\n+    }\n+\n+    /**\n+     * <p>Compares this triple to another based on the three elements.</p>\n+     *\n+     * @param obj  the object to compare to, null returns false\n+     * @return true if the elements of the triple are equal\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Triple<?, ?, ?>) {\n+            Triple<?, ?, ?> other = (Triple<?, ?, ?>) obj;\n+            return ObjectUtils.equals(getLeft(), other.getLeft())\n+                && ObjectUtils.equals(getMiddle(), other.getMiddle())\n+                && ObjectUtils.equals(getRight(), other.getRight());\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Returns a suitable hash code.</p>\n+     *\n+     * @return the hash code\n+     */\n+    @Override\n+    public int hashCode() {\n+        return (getLeft() == null ? 0 : getLeft().hashCode()) ^\n+            (getMiddle() == null ? 0 : getMiddle().hashCode()) ^\n+            (getRight() == null ? 0 : getRight().hashCode());\n+    }\n+\n+    /**\n+     * <p>Returns a String representation of this triple using the format {@code ($left,$middle,$right)}.</p>\n+     *\n+     * @return a string describing this object, not null\n+     */\n+    @Override\n+    public String toString() {\n+        return new StringBuilder().append('(').append(getLeft()).append(',').append(getMiddle()).append(',')\n+            .append(getRight()).append(')').toString();\n+    }\n+\n+    /**\n+     * <p>Formats the receiver using the given format.</p>\n+     *\n+     * <p>This uses {@link java.util.Formattable} to perform the formatting. Three variables may\n+     * be used to embed the left and right elements. Use {@code %1$s} for the left\n+     * element, {@code %2$s} for the middle and {@code %3$s} for the right element.\n+     * The default format used by {@code toString()} is {@code (%1$s,%2$s,%3$s)}.</p>\n+     *\n+     * @param format  the format string, optionally containing {@code %1$s}, {@code %2$s} and {@code %3$s}, not null\n+     * @return the formatted string, not null\n+     */\n+    public String toString(String format) {\n+        return String.format(format, getLeft(), getMiddle(), getRight());\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.tuple;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test the Triple class.\n+ * @version $Id$\n+ */\n+public class ImmutableTripleTest {\n+\n+    @Test\n+    public void testBasic() throws Exception {\n+        ImmutableTriple<Integer, String, Boolean> triple = new ImmutableTriple<Integer, String, Boolean>(0, \"foo\", Boolean.TRUE);\n+        assertEquals(0, triple.left.intValue());\n+        assertEquals(0, triple.getLeft().intValue());\n+        assertEquals(\"foo\", triple.middle);\n+        assertEquals(\"foo\", triple.getMiddle());\n+        assertEquals(Boolean.TRUE, triple.right);\n+        assertEquals(Boolean.TRUE, triple.getRight());\n+        ImmutableTriple<Object, String, Integer> triple2 = new ImmutableTriple<Object, String, Integer>(null, \"bar\", 42);\n+        assertNull(triple2.left);\n+        assertNull(triple2.getLeft());\n+        assertEquals(\"bar\", triple2.middle);\n+        assertEquals(\"bar\", triple2.getMiddle());\n+        assertEquals(new Integer(42), triple2.right);\n+        assertEquals(new Integer(42), triple2.getRight());\n+    }\n+\n+    @Test\n+    public void testTripleOf() throws Exception {\n+        ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, \"foo\", Boolean.FALSE);\n+        assertEquals(0, triple.left.intValue());\n+        assertEquals(0, triple.getLeft().intValue());\n+        assertEquals(\"foo\", triple.middle);\n+        assertEquals(\"foo\", triple.getMiddle());\n+        assertEquals(Boolean.FALSE, triple.right);\n+        assertEquals(Boolean.FALSE, triple.getRight());\n+        ImmutableTriple<Object, String, Boolean> triple2 = ImmutableTriple.of(null, \"bar\", Boolean.TRUE);\n+        assertNull(triple2.left);\n+        assertNull(triple2.getLeft());\n+        assertEquals(\"bar\", triple2.middle);\n+        assertEquals(\"bar\", triple2.getMiddle());\n+        assertEquals(Boolean.TRUE, triple2.right);\n+        assertEquals(Boolean.TRUE, triple2.getRight());\n+    }\n+\n+    @Test\n+    public void testEquals() throws Exception {\n+        assertEquals(ImmutableTriple.of(null, \"foo\", 42), ImmutableTriple.of(null, \"foo\", 42));\n+        assertFalse(ImmutableTriple.of(\"foo\", 0, Boolean.TRUE).equals(ImmutableTriple.of(\"foo\", null, null)));\n+        assertFalse(ImmutableTriple.of(\"foo\", \"bar\", \"baz\").equals(ImmutableTriple.of(\"xyz\", \"bar\", \"blo\")));\n+\n+        ImmutableTriple<String, String, String> p = ImmutableTriple.of(\"foo\", \"bar\", \"baz\");\n+        assertTrue(p.equals(p));\n+        assertFalse(p.equals(new Object()));\n+    }\n+\n+    @Test\n+    public void testHashCode() throws Exception {\n+        assertEquals(ImmutableTriple.of(null, \"foo\", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, \"foo\", Boolean.TRUE).hashCode());\n+    }\n+\n+    @Test\n+    public void testToString() throws Exception {\n+        assertEquals(\"(null,null,null)\", ImmutableTriple.of(null, null, null).toString());\n+        assertEquals(\"(null,two,null)\", ImmutableTriple.of(null, \"two\", null).toString());\n+        assertEquals(\"(one,null,null)\", ImmutableTriple.of(\"one\", null, null).toString());\n+        assertEquals(\"(one,two,null)\", ImmutableTriple.of(\"one\", \"two\", null).toString());\n+        assertEquals(\"(null,two,three)\", ImmutableTriple.of(null, \"two\", \"three\").toString());\n+        assertEquals(\"(one,null,three)\", ImmutableTriple.of(\"one\", null, \"three\").toString());\n+        assertEquals(\"(one,two,three)\", MutableTriple.of(\"one\", \"two\", \"three\").toString());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerialization() throws Exception {\n+        ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, \"foo\", Boolean.TRUE);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(baos);\n+        out.writeObject(origTriple);\n+        ImmutableTriple<Integer, String, Boolean> deserializedTriple = (ImmutableTriple<Integer, String, Boolean>) new ObjectInputStream(\n+                new ByteArrayInputStream(baos.toByteArray())).readObject();\n+        assertEquals(origTriple, deserializedTriple);\n+        assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.tuple;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test the MutableTriple class.\n+ * @version $Id$\n+ */\n+public class MutableTripleTest {\n+\n+    @Test\n+    public void testBasic() throws Exception {\n+        MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, \"foo\", Boolean.FALSE);\n+        assertEquals(0, triple.getLeft().intValue());\n+        assertEquals(\"foo\", triple.getMiddle());\n+        assertEquals(Boolean.FALSE, triple.getRight());\n+        MutableTriple<Object, String, String> triple2 = new MutableTriple<Object, String, String>(null, \"bar\", \"hello\");\n+        assertNull(triple2.getLeft());\n+        assertEquals(\"bar\", triple2.getMiddle());\n+        assertEquals(\"hello\", triple2.getRight());\n+    }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>();\n+        assertNull(triple.getLeft());\n+        assertNull(triple.getMiddle());\n+        assertNull(triple.getRight());\n+    }\n+    \n+    @Test\n+    public void testMutate() throws Exception {\n+        MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, \"foo\", Boolean.TRUE);\n+        triple.setLeft(42);\n+        triple.setMiddle(\"bar\");\n+        triple.setRight(Boolean.FALSE);\n+        assertEquals(42, triple.getLeft().intValue());\n+        assertEquals(\"bar\", triple.getMiddle());\n+        assertFalse(triple.getRight());\n+    }\n+\n+    @Test\n+    public void testTripleOf() throws Exception {\n+        MutableTriple<Integer, String, Boolean> triple = MutableTriple.of(0, \"foo\", Boolean.TRUE);\n+        assertEquals(0, triple.getLeft().intValue());\n+        assertEquals(\"foo\", triple.getMiddle());\n+        assertTrue(triple.getRight());\n+        MutableTriple<Object, String, String> triple2 = MutableTriple.of(null, \"bar\", \"hello\");\n+        assertNull(triple2.getLeft());\n+        assertEquals(\"bar\", triple2.getMiddle());\n+        assertEquals(\"hello\", triple2.getRight());\n+    }\n+\n+    @Test\n+    public void testEquals() throws Exception {\n+        assertEquals(MutableTriple.of(null, \"foo\", \"baz\"), MutableTriple.of(null, \"foo\", \"baz\"));\n+        assertFalse(MutableTriple.of(\"foo\", 0, Boolean.TRUE).equals(MutableTriple.of(\"foo\", null, Boolean.TRUE)));\n+        assertFalse(MutableTriple.of(\"foo\", \"bar\", \"baz\").equals(MutableTriple.of(\"xyz\", \"bar\", \"baz\")));\n+        assertFalse(MutableTriple.of(\"foo\", \"bar\", \"baz\").equals(MutableTriple.of(\"foo\", \"bar\", \"blo\")));\n+\n+        MutableTriple<String, String, String> p = MutableTriple.of(\"foo\", \"bar\", \"baz\");\n+        assertTrue(p.equals(p));\n+        assertFalse(p.equals(new Object()));\n+    }\n+\n+    @Test\n+    public void testHashCode() throws Exception {\n+        assertEquals(MutableTriple.of(null, \"foo\", \"baz\").hashCode(), MutableTriple.of(null, \"foo\", \"baz\").hashCode());\n+    }\n+\n+    @Test\n+    public void testToString() throws Exception {\n+        assertEquals(\"(null,null,null)\", MutableTriple.of(null, null, null).toString());\n+        assertEquals(\"(null,two,null)\", MutableTriple.of(null, \"two\", null).toString());\n+        assertEquals(\"(one,null,null)\", MutableTriple.of(\"one\", null, null).toString());\n+        assertEquals(\"(one,two,null)\", MutableTriple.of(\"one\", \"two\", null).toString());\n+        assertEquals(\"(null,two,three)\", MutableTriple.of(null, \"two\", \"three\").toString());\n+        assertEquals(\"(one,null,three)\", MutableTriple.of(\"one\", null, \"three\").toString());\n+        assertEquals(\"(one,two,three)\", MutableTriple.of(\"one\", \"two\", \"three\").toString());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerialization() throws Exception {\n+        MutableTriple<Integer, String, Boolean> origTriple = MutableTriple.of(0, \"foo\", Boolean.TRUE);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(baos);\n+        out.writeObject(origTriple);\n+        MutableTriple<Integer, String, Boolean> deserializedTriple = (MutableTriple<Integer, String, Boolean>) new ObjectInputStream(\n+                new ByteArrayInputStream(baos.toByteArray())).readObject();\n+        assertEquals(origTriple, deserializedTriple);\n+        assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.tuple;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Calendar;\n+import java.util.HashSet;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test the Triple class.\n+ *\n+ * @version $Id$\n+ */\n+public class TripleTest {\n+\n+    @Test\n+    public void testTripleOf() throws Exception {\n+        Triple<Integer, String, Boolean> triple = Triple.of(0, \"foo\", Boolean.TRUE);\n+        assertTrue(triple instanceof ImmutableTriple<?, ?, ?>);\n+        assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue());\n+        assertEquals(\"foo\", ((ImmutableTriple<Integer, String, Boolean>) triple).middle);\n+        assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right);\n+        Triple<Object, String, Long> triple2 = Triple.of(null, \"bar\", 200L);\n+        assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>);\n+        assertNull(((ImmutableTriple<Object, String, Long>) triple2).left);\n+        assertEquals(\"bar\", ((ImmutableTriple<Object, String, Long>) triple2).middle);\n+        assertEquals(new Long(200L), ((ImmutableTriple<Object, String, Long>) triple2).right);\n+    }\n+\n+    @Test\n+    public void testCompatibilityBetweenTriples() throws Exception {\n+        Triple<Integer, String, Boolean> triple = ImmutableTriple.of(0, \"foo\", Boolean.TRUE);\n+        Triple<Integer, String, Boolean> triple2 = MutableTriple.of(0, \"foo\", Boolean.TRUE);\n+        assertEquals(triple, triple2);\n+        assertEquals(triple.hashCode(), triple2.hashCode());\n+        HashSet<Triple<Integer, String, Boolean>> set = new HashSet<Triple<Integer, String, Boolean>>();\n+        set.add(triple);\n+        assertTrue(set.contains(triple2));\n+    }\n+\n+    @Test\n+    public void testComparable1() throws Exception {\n+        Triple<String, String, String> triple1 = Triple.of(\"A\", \"D\", \"A\");\n+        Triple<String, String, String> triple2 = Triple.of(\"B\", \"C\", \"A\");\n+        assertTrue(triple1.compareTo(triple1) == 0);\n+        assertTrue(triple1.compareTo(triple2) < 0);\n+        assertTrue(triple2.compareTo(triple2) == 0);\n+        assertTrue(triple2.compareTo(triple1) > 0);\n+    }\n+\n+    @Test\n+    public void testComparable2() throws Exception {\n+        Triple<String, String, String> triple1 = Triple.of(\"A\", \"C\", \"B\");\n+        Triple<String, String, String> triple2 = Triple.of(\"A\", \"D\", \"B\");\n+        assertTrue(triple1.compareTo(triple1) == 0);\n+        assertTrue(triple1.compareTo(triple2) < 0);\n+        assertTrue(triple2.compareTo(triple2) == 0);\n+        assertTrue(triple2.compareTo(triple1) > 0);\n+    }\n+\n+    @Test\n+    public void testComparable3() throws Exception {\n+        Triple<String, String, String> triple1 = Triple.of(\"A\", \"A\", \"D\");\n+        Triple<String, String, String> triple2 = Triple.of(\"A\", \"B\", \"C\");\n+        assertTrue(triple1.compareTo(triple1) == 0);\n+        assertTrue(triple1.compareTo(triple2) < 0);\n+        assertTrue(triple2.compareTo(triple2) == 0);\n+        assertTrue(triple2.compareTo(triple1) > 0);\n+    }\n+\n+    @Test\n+    public void testComparable4() throws Exception {\n+        Triple<String, String, String> triple1 = Triple.of(\"B\", \"A\", \"C\");\n+        Triple<String, String, String> triple2 = Triple.of(\"B\", \"A\", \"D\");\n+        assertTrue(triple1.compareTo(triple1) == 0);\n+        assertTrue(triple1.compareTo(triple2) < 0);\n+        assertTrue(triple2.compareTo(triple2) == 0);\n+        assertTrue(triple2.compareTo(triple1) > 0);\n+    }\n+\n+    @Test\n+    public void testToString() throws Exception {\n+        Triple<String, String, String> triple = Triple.of(\"Key\", \"Something\", \"Value\");\n+        assertEquals(\"(Key,Something,Value)\", triple.toString());\n+    }\n+\n+    @Test\n+    public void testToStringCustom() throws Exception {\n+        Calendar date = Calendar.getInstance();\n+        date.set(2011, Calendar.APRIL, 25);\n+        Triple<String, String, Calendar> triple = Triple.of(\"DOB\", \"string\", date);\n+        assertEquals(\"Test created on \" + \"04-25-2011\", triple.toString(\"Test created on %3$tm-%3$td-%3$tY\"));\n+    }\n+\n+    @Test\n+    public void testFormattable_simple() throws Exception {\n+        Triple<String, String, String> triple = Triple.of(\"Key\", \"Something\", \"Value\");\n+        assertEquals(\"(Key,Something,Value)\", String.format(\"%1$s\", triple));\n+    }\n+\n+    @Test\n+    public void testFormattable_padded() throws Exception {\n+        Triple<String, String, String> triple = Triple.of(\"Key\", \"Something\", \"Value\");\n+        assertEquals(\"         (Key,Something,Value)\", String.format(\"%1$30s\", triple));\n+    }\n+\n+}\n+", "timestamp": 1322115659, "metainfo": ""}