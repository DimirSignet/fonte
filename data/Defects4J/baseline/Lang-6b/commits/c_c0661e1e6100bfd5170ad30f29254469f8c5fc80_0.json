{"sha": "c0661e1e6100bfd5170ad30f29254469f8c5fc80", "log": "One reason why the ja_JP_JP and th_TH_* locales don't work  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import java.io.Serializable;\n+import java.text.DateFormatSymbols;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Set;\n import java.util.TimeZone;\n \n import junit.framework.Assert;\n \n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.junit.Test;\n \n /**\n     }\n \n     @Test\n+    // Check that all Locales generate Strings containing the expected eras\n+    public void testEras() throws Exception {\n+        Set<ImmutablePair<Locale, String>> locale2Absent = new HashSet<ImmutablePair<Locale, String>>();\n+        Map<Locale, String[]> locale2Eras = new HashMap<Locale, String[]>();\n+        for(Locale locale : Locale.getAvailableLocales()) {\n+            for(TimeZone tz : new TimeZone[]{GMT}) {\n+                Calendar cal = Calendar.getInstance(tz);\n+                String[] eras = DateFormatSymbols.getInstance(locale).getEras();\n+                String[] erasPrint = new String[eras.length];\n+                for(int i = 0; i < eras.length ; i++) {\n+                    String s = eras[i];\n+                    if (s.length() > 4) {\n+                        erasPrint[i] = s;\n+                    } else {\n+                        erasPrint[i] = display(s);\n+                    }\n+                }\n+                for(int year : new int[]{2003, 1927, 1913, 1868, 1867, -2003}) {\n+                    cal.clear();\n+                    if (year < 0) {\n+                        cal.set(-year, 1, 10);\n+                        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+                    } else {\n+                        cal.set(year, 1, 10);\n+                    }\n+                    Date in = cal.getTime();\n+                    for(String format : new String[]{\"GGGG\",\"G\"}) {\n+                        SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n+                        String fmt = sdf.format(in);\n+                        boolean found = false;\n+                        for(String era : eras) {\n+                            if (fmt.startsWith(era)) {\n+                                found=true;\n+                            }\n+                        }\n+                        if (!found) {\n+                            locale2Absent.add(ImmutablePair.of(locale, fmt));\n+                            locale2Eras.put(locale, erasPrint);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        \n+        if (locale2Absent.size() > 0) {\n+            System.out.println(\"One or more missing era designators detected\");\n+            for(ImmutablePair<Locale, String> me : locale2Absent) {\n+                Locale loc = me.getKey();\n+                String [] erasPrint = locale2Eras.get(loc);\n+                System.out.println(\"Locale: \"+loc.toString()+\" era: '\"+display(me.getValue())+\"' not found in eras: \" + Arrays.toString(erasPrint));                \n+            }\n+        }\n+//        assertFalse(\"One or more failures detected\",fail);\n+    }\n+\n+    private String display(String fmt) {\n+        if (fmt.matches(\"\\\\p{ASCII}*\")) {\n+            return fmt;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(fmt);\n+        sb.append(\" = \");\n+        for(int i =0; i < fmt.length(); i++) {\n+            if (i > 0) {\n+                sb.append(' ');\n+            }\n+            String s = fmt.substring(i,i+1);\n+            if (s.matches(\"\\\\p{ASCII}\")) {\n+                sb.append(s);\n+            } else {\n+                char charAt = fmt.charAt(i);\n+                sb.append(\"\\\\u\");\n+                sb.append(Integer.toHexString(charAt));                \n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Test\n     public void testLocales_Long_AD() throws Exception {\n         testLocales(LONG_FORMAT, false);\n     }", "timestamp": 1348607494, "metainfo": ""}