{"sha": "2799ebf2e8aa4ef759c1e118d68aa0bbc916ce31", "log": "Use better method names. Document possible ArrayIndexOutOfBoundsException and StringIndexOutOfBoundsException.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n  *  - \"Hex\": a String containing hexadecimal digits\n  *  - \"HexDigit\": a Char containing a hexadecimal digit\n  * Endianness field: little endian is the default, in this case the field is absent. In case of big endian, the field is \"Be\".\n- * Bit ordering: Lsb0 is the default, in this case the field is absent. In case of Msb0, the field is \"M0\".\n+ * Bit ordering: Lsb0 is the default, in this case the field is absent. In case of Msb0, the field is \"Msb0\".\n  * \n- * Example: intBeM0ToHex convert an int with big endian byte order and Msb0 bit order into its hexadecimal string representation\n+ * Example: intBeMsb0ToHex convert an int with big endian byte order and Msb0 bit order into its hexadecimal string representation\n  * </pre>\n  * <p>\n  * Most of the methods provide only default encoding for destination, this limits the number of\n  * ways to do one thing. Unless you are dealing with data from/to outside of the JVM platform,\n- * you should not need to use \"Be\" and \"M0\" methods.\n+ * you should not need to use \"Be\" and \"Msb0\" methods.\n  * </p>\n  * <p>\n  * Development status: work on going, only a part of the little endian, Lsb0 methods implemented\n      * @return an int equals to {@code hexDigit}\n      * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit\n      */\n-    public static int hexDigitM0ToInt(char hexDigit) {\n+    public static int hexDigitMsb0ToInt(char hexDigit) {\n         switch (hexDigit) {\n         case '0':\n             return 0x0;\n      * @return a boolean array with the binary representation of {@code hexDigit}\n      * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit\n      */\n-    public static boolean[] hexDigitToBools(char hexDigit) {\n+    public static boolean[] hexDigitToBoolArray(char hexDigit) {\n         switch (hexDigit) {\n         case '0':\n             return new boolean[]{false, false, false, false};\n      * @return a boolean array with the binary representation of {@code hexDigit}\n      * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit\n      */\n-    public static boolean[] hexDigitM0ToBools(char hexDigit) {\n+    public static boolean[] hexDigitMsb0ToBoolArray(char hexDigit) {\n         switch (hexDigit) {\n         case '0':\n             return new boolean[]{false, false, false, false};\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolsToHexDigit(boolean[] src) {\n-        return boolsToHexDigit(src, 0);\n+    public static char boolArrayToHexDigit(boolean[] src) {\n+        return boolArrayToHexDigit(src, 0);\n     }\n \n     /**\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolsToHexDigit(boolean[] src, int srcPos) {\n+    public static char boolArrayToHexDigit(boolean[] src, int srcPos) {\n         if (src.length == 0) {\n-            throw new IllegalArgumentException(\"Cannot convert empty array.\");\n+            throw new IllegalArgumentException(\"Cannot convert an empty array.\");\n         }\n         if (src.length > srcPos + 3 && src[srcPos + 3]) {\n             if (src.length > srcPos + 2 && src[srcPos + 2]) {\n      *             {@code src.length > 8}\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolsToHexDigitM0_4bits(boolean[] src) {\n-        return boolsToHexDigitM0_4bits(src, 0);\n+    public static char boolArrayToHexDigitMsb0_4bits(boolean[] src) {\n+        return boolArrayToHexDigitMsb0_4bits(src, 0);\n     }\n \n     /**\n      *             {@code src.length - srcPos < 4}\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolsToHexDigitM0_4bits(boolean[] src, int srcPos) {\n+    public static char boolArrayToHexDigitMsb0_4bits(boolean[] src, int srcPos) {\n         if (src.length > 8) {\n             throw new IllegalArgumentException(\"src.length>8: src.length=\" + src.length);\n         }\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolsBeM0ToHexDigit(boolean[] src) {\n-        return boolsBeM0ToHexDigit(src, 0);\n+    public static char boolArrayBeMsb0ToHexDigit(boolean[] src) {\n+        return boolArrayBeMsb0ToHexDigit(src, 0);\n     }\n \n     /**\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolsBeM0ToHexDigit(boolean[] src, int srcPos) {\n+    public static char boolArrayBeMsb0ToHexDigit(boolean[] src, int srcPos) {\n         if (src.length == 0) {\n-            throw new IllegalArgumentException(\"Cannot convert empty array.\");\n+            throw new IllegalArgumentException(\"Cannot convert an empty array.\");\n         }\n         int beSrcPos = src.length - 1 - srcPos;\n         int srcLen = Math.min(4, beSrcPos + 1);\n      * @return a hexadecimal digit representing the 4 lsb of {@code nibble}\n      * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}\n      */\n-    public static char intToHexDigitM0(int nibble) {\n+    public static char intToHexDigitMsb0(int nibble) {\n         switch (nibble) {\n         case 0x0:\n             return '0';\n      * @param nInts the number of ints to convert\n      * @return a long containing the selected bits\n      * @throws IllegalArgumentException if {@code (nInts-1)*32+dstPos >= 64}\n-     */\n-    public static long intsToLong(int[] src, int srcPos, long dstInit, int dstPos, int nInts) {\n-        if (0 == nInts) {\n+     * @throws NullPointerException if {@code src} is {@code null}\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nInts > src.length}\n+     */\n+    public static long intArrayToLong(int[] src, int srcPos, long dstInit, int dstPos, int nInts) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nInts) {\n             return dstInit;\n         }\n         if ((nInts - 1) * 32 + dstPos >= 64) {\n      * @param dstPos the position of the lsb, in bits, in the result long\n      * @param nShorts the number of shorts to convert\n      * @return a long containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code (nShorts-1)*16+dstPos >= 64}\n-     */\n-    public static long shortsToLong(short[] src, int srcPos, long dstInit, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nShorts > src.length}\n+     */\n+    public static long shortArrayToLong(short[] src, int srcPos, long dstInit, int dstPos,\n         int nShorts) {\n-        if (0 == nShorts) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {\n             return dstInit;\n         }\n         if ((nShorts - 1) * 16 + dstPos >= 64) {\n      * @param dstPos the position of the lsb, in bits, in the result int\n      * @param nShorts the number of shorts to convert\n      * @return a int containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code (nShorts-1)*16+dstPos >= 32}\n-     */\n-    public static int shortsToInt(short[] src, int srcPos, int dstInit, int dstPos, int nShorts) {\n-        if (0 == nShorts) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nShorts > src.length}\n+     */\n+    public static int shortArrayToInt(short[] src, int srcPos, int dstInit, int dstPos,\n+        int nShorts) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {\n             return dstInit;\n         }\n         if ((nShorts - 1) * 16 + dstPos >= 32) {\n      * @param dstPos the position of the lsb, in bits, in the result long\n      * @param nBytes the number of bytes to convert\n      * @return a long containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 64}\n-     */\n-    public static long bytesToLong(byte[] src, int srcPos, long dstInit, int dstPos, int nBytes) {\n-        if (0 == nBytes) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}\n+     */\n+    public static long byteArrayToLong(byte[] src, int srcPos, long dstInit, int dstPos,\n+        int nBytes) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {\n             return dstInit;\n         }\n         if ((nBytes - 1) * 8 + dstPos >= 64) {\n      * @param dstPos the position of the lsb, in bits, in the result int\n      * @param nBytes the number of bytes to convert\n      * @return a int containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 32}\n-     */\n-    public static int bytesToInt(byte[] src, int srcPos, int dstInit, int dstPos, int nBytes) {\n-        if (0 == nBytes) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}\n+     */\n+    public static int byteArrayToInt(byte[] src, int srcPos, int dstInit, int dstPos, int nBytes) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {\n             return dstInit;\n         }\n         if ((nBytes - 1) * 8 + dstPos >= 32) {\n      * @param dstPos the position of the lsb, in bits, in the result short\n      * @param nBytes the number of bytes to convert\n      * @return a short containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 16}\n-     */\n-    public static short bytesToShort(byte[] src, int srcPos, short dstInit, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}\n+     */\n+    public static short byteArrayToShort(byte[] src, int srcPos, short dstInit, int dstPos,\n         int nBytes) {\n-        if (0 == nBytes) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {\n             return dstInit;\n         }\n         if ((nBytes - 1) * 8 + dstPos >= 16) {\n      *            conversion\n      * @param dstInit initial value of the destination long\n      * @param dstPos the position of the lsb, in bits, in the result long\n-     * @param nHexs the number of Chars to convert\n+     * @param nHex the number of Chars to convert\n      * @return a long containing the selected bits\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 64}\n      */\n-    public static long hexsToLong(String src, int srcPos, long dstInit, int dstPos, int nHexs) {\n-        if (0 == nHexs) {\n+    public static long hexToLong(String src, int srcPos, long dstInit, int dstPos, int nHex) {\n+        if (0 == nHex) {\n             return dstInit;\n         }\n-        if ((nHexs - 1) * 4 + dstPos >= 64) {\n+        if ((nHex - 1) * 4 + dstPos >= 64) {\n             throw new IllegalArgumentException(\n                 \"(nHexs-1)*4+dstPos is greather or equal to than 64\");\n         }\n         long out = dstInit;\n         int shift = 0;\n-        for (int i = 0; i < nHexs; i++ ) {\n+        for (int i = 0; i < nHex; i++ ) {\n             shift = i * 4 + dstPos;\n             long bits = (0xfL & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n             long mask = 0xfL << shift;\n      *            conversion\n      * @param dstInit initial value of the destination int\n      * @param dstPos the position of the lsb, in bits, in the result int\n-     * @param nHexs the number of Chars to convert\n+     * @param nHex the number of Chars to convert\n      * @return a int containing the selected bits\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 32}\n      */\n-    public static int hexsToInt(String src, int srcPos, int dstInit, int dstPos, int nHexs) {\n-        if (0 == nHexs) {\n+    public static int hexToInt(String src, int srcPos, int dstInit, int dstPos, int nHex) {\n+        if (0 == nHex) {\n             return dstInit;\n         }\n-        if ((nHexs - 1) * 4 + dstPos >= 32) {\n+        if ((nHex - 1) * 4 + dstPos >= 32) {\n             throw new IllegalArgumentException(\n                 \"(nHexs-1)*4+dstPos is greather or equal to than 32\");\n         }\n         int out = dstInit;\n         int shift = 0;\n-        for (int i = 0; i < nHexs; i++ ) {\n+        for (int i = 0; i < nHex; i++ ) {\n             shift = i * 4 + dstPos;\n             int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n             int mask = 0xf << shift;\n      *            conversion\n      * @param dstInit initial value of the destination short\n      * @param dstPos the position of the lsb, in bits, in the result short\n-     * @param nHexs the number of Chars to convert\n+     * @param nHex the number of Chars to convert\n      * @return a short containing the selected bits\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 16}\n      */\n-    public static short hexsToShort(String src, int srcPos, short dstInit, int dstPos, int nHexs) {\n-        if (0 == nHexs) {\n+    public static short hexToShort(String src, int srcPos, short dstInit, int dstPos, int nHex) {\n+        if (0 == nHex) {\n             return dstInit;\n         }\n-        if ((nHexs - 1) * 4 + dstPos >= 16) {\n+        if ((nHex - 1) * 4 + dstPos >= 16) {\n             throw new IllegalArgumentException(\n                 \"(nHexs-1)*4+dstPos is greather or equal to than 16\");\n         }\n         short out = dstInit;\n         int shift = 0;\n-        for (int i = 0; i < nHexs; i++ ) {\n+        for (int i = 0; i < nHex; i++ ) {\n             shift = i * 4 + dstPos;\n             int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n             int mask = 0xf << shift;\n      *            conversion\n      * @param dstInit initial value of the destination byte\n      * @param dstPos the position of the lsb, in bits, in the result byte\n-     * @param nHexs the number of Chars to convert\n+     * @param nHex the number of Chars to convert\n      * @return a byte containing the selected bits\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 8}\n      */\n-    public static byte hexsToByte(String src, int srcPos, byte dstInit, int dstPos, int nHexs) {\n-        if (0 == nHexs) {\n+    public static byte hexToByte(String src, int srcPos, byte dstInit, int dstPos, int nHex) {\n+        if (0 == nHex) {\n             return dstInit;\n         }\n-        if ((nHexs - 1) * 4 + dstPos >= 8) {\n+        if ((nHex - 1) * 4 + dstPos >= 8) {\n             throw new IllegalArgumentException(\n                 \"(nHexs-1)*4+dstPos is greather or equal to than 8\");\n         }\n         byte out = dstInit;\n         int shift = 0;\n-        for (int i = 0; i < nHexs; i++ ) {\n+        for (int i = 0; i < nHex; i++ ) {\n             shift = i * 4 + dstPos;\n             int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n             int mask = 0xf << shift;\n      * @param dstPos the position of the lsb, in bits, in the result long\n      * @param nBools the number of booleans to convert\n      * @return a long containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 64}\n-     */\n-    public static long boolsToLong(boolean[] src, int srcPos, long dstInit, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n+     */\n+    public static long boolArrayToLong(boolean[] src, int srcPos, long dstInit, int dstPos,\n         int nBools) {\n-        if (0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 64) {\n      * @param dstPos the position of the lsb, in bits, in the result int\n      * @param nBools the number of booleans to convert\n      * @return a int containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 32}\n-     */\n-    public static int boolsToInt(boolean[] src, int srcPos, int dstInit, int dstPos, int nBools) {\n-        if (0 == nBools) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n+     */\n+    public static int boolArrayToInt(boolean[] src, int srcPos, int dstInit, int dstPos,\n+        int nBools) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 32) {\n      * @param dstPos the position of the lsb, in bits, in the result short\n      * @param nBools the number of booleans to convert\n      * @return a short containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 16}\n-     */\n-    public static short boolsToShort(boolean[] src, int srcPos, short dstInit, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n+     */\n+    public static short boolArrayToShort(boolean[] src, int srcPos, short dstInit, int dstPos,\n         int nBools) {\n-        if (0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 16) {\n      * @param dstPos the position of the lsb, in bits, in the result byte\n      * @param nBools the number of booleans to convert\n      * @return a byte containing the selected bits\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 8}\n-     */\n-    public static byte boolsToByte(boolean[] src, int srcPos, byte dstInit, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n+     */\n+    public static byte boolArrayToByte(boolean[] src, int srcPos, byte dstInit, int dstPos,\n         int nBools) {\n-        if (0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 8) {\n      * @param nInts the number of ints to copy to {@code dst}, must be smaller or equal to the\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null} and {@code nInts > 0}\n      * @throws IllegalArgumentException if {@code (nInts-1)*32+srcPos >= 64}\n-     */\n-    public static int[] longToInts(long src, int srcPos, int[] dst, int dstPos, int nInts) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nInts > dst.length}\n+     */\n+    public static int[] longToIntArray(long src, int srcPos, int[] dst, int dstPos, int nInts) {\n         if (0 == nInts) {\n             return dst;\n         }\n      * @param nShorts the number of shorts to copy to {@code dst}, must be smaller or equal to\n      *            the width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code (nShorts-1)*16+srcPos >= 64}\n-     */\n-    public static short[] longToShorts(long src, int srcPos, short[] dst, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nShorts > dst.length}\n+     */\n+    public static short[] longToShortArray(long src, int srcPos, short[] dst, int dstPos,\n         int nShorts) {\n         if (0 == nShorts) {\n             return dst;\n      * @param nShorts the number of shorts to copy to {@code dst}, must be smaller or equal to\n      *            the width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code (nShorts-1)*16+srcPos >= 32}\n-     */\n-    public static short[] intToShorts(int src, int srcPos, short[] dst, int dstPos, int nShorts) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nShorts > dst.length}\n+     */\n+    public static short[] intToShortArray(int src, int srcPos, short[] dst, int dstPos,\n+        int nShorts) {\n         if (0 == nShorts) {\n             return dst;\n         }\n      * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 64}\n-     */\n-    public static byte[] longToBytes(long src, int srcPos, byte[] dst, int dstPos, int nBytes) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}\n+     */\n+    public static byte[] longToByteArray(long src, int srcPos, byte[] dst, int dstPos,\n+        int nBytes) {\n         if (0 == nBytes) {\n             return dst;\n         }\n      * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 32}\n-     */\n-    public static byte[] intToBytes(int src, int srcPos, byte[] dst, int dstPos, int nBytes) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}\n+     */\n+    public static byte[] intToByteArray(int src, int srcPos, byte[] dst, int dstPos, int nBytes) {\n         if (0 == nBytes) {\n             return dst;\n         }\n      * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 16}\n-     */\n-    public static byte[] shortToBytes(short src, int srcPos, byte[] dst, int dstPos, int nBytes) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}\n+     */\n+    public static byte[] shortToByteArray(short src, int srcPos, byte[] dst, int dstPos,\n+        int nBytes) {\n         if (0 == nBytes) {\n             return dst;\n         }\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 64}\n-     */\n-    public static String longToHexs(long src, int srcPos, String dstInit, int dstPos, int nHexs) {\n+     * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}\n+     */\n+    public static String longToHex(long src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) {\n             return dstInit;\n         }\n         }\n         StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n+        int append = sb.length();\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + srcPos;\n             int bits = (int)(0xF & (src >> shift));\n-            sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            if (dstPos + i == append) {\n+                ++append;\n+                sb.append(intToHexDigit(bits));\n+            } else {\n+                sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            }\n         }\n         return sb.toString();\n     }\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 32}\n-     */\n-    public static String intToHexs(int src, int srcPos, String dstInit, int dstPos, int nHexs) {\n+     * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}\n+     */\n+    public static String intToHex(int src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) {\n             return dstInit;\n         }\n         }\n         StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n+        int append = sb.length();\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + srcPos;\n             int bits = 0xF & (src >> shift);\n-            sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            if (dstPos + i == append) {\n+                ++append;\n+                sb.append(intToHexDigit(bits));\n+            } else {\n+                sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            }\n         }\n         return sb.toString();\n     }\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 16}\n-     */\n-    public static String shortToHexs(short src, int srcPos, String dstInit, int dstPos,\n-        int nHexs) {\n+     * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}\n+     */\n+    public static String shortToHex(short src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) {\n             return dstInit;\n         }\n         }\n         StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n+        int append = sb.length();\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + srcPos;\n             int bits = 0xF & (src >> shift);\n-            sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            if (dstPos + i == append) {\n+                ++append;\n+                sb.append(intToHexDigit(bits));\n+            } else {\n+                sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            }\n         }\n         return sb.toString();\n     }\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n      * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 8}\n-     */\n-    public static String byteToHexs(byte src, int srcPos, String dstInit, int dstPos, int nHexs) {\n+     * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}\n+     */\n+    public static String byteToHex(byte src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) {\n             return dstInit;\n         }\n         }\n         StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n+        int append = sb.length();\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + srcPos;\n             int bits = 0xF & (src >> shift);\n-            sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            if (dstPos + i == append) {\n+                ++append;\n+                sb.append(intToHexDigit(bits));\n+            } else {\n+                sb.setCharAt(dstPos + i, intToHexDigit(bits));\n+            }\n         }\n         return sb.toString();\n     }\n      * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to\n      *            the width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 64}\n-     */\n-    public static boolean[] longToBools(long src, int srcPos, boolean[] dst, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n+     */\n+    public static boolean[] longToBoolArray(long src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to\n      *            the width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 32}\n-     */\n-    public static boolean[] intToBools(int src, int srcPos, boolean[] dst, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n+     */\n+    public static boolean[] intToBoolArray(int src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to\n      *            the width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 16}\n-     */\n-    public static boolean[] shortToBools(short src, int srcPos, boolean[] dst, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n+     */\n+    public static boolean[] shortToBoolArray(short src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to\n      *            the width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 8}\n-     */\n-    public static boolean[] byteToBools(byte src, int srcPos, boolean[] dst, int dstPos,\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n+     */\n+    public static boolean[] byteToBoolArray(byte src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the\n      *            width of the input (from srcPos to msb)\n      * @return {@code dst}\n+     * @throws NullPointerException if {@code dst} is {@code null}\n      * @throws IllegalArgumentException if {@code nBytes > 16}\n-     */\n-    public static byte[] uuidToBytes(UUID src, byte[] dst, int dstPos, int nBytes) {\n+     * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}\n+     */\n+    public static byte[] uuidToByteArray(UUID src, byte[] dst, int dstPos, int nBytes) {\n         if (0 == nBytes) {\n             return dst;\n         }\n         if (nBytes > 16) {\n             throw new IllegalArgumentException(\"nBytes is greather than 16\");\n         }\n-        longToBytes(src.getMostSignificantBits(), 0, dst, dstPos, nBytes > 8 ? 8 : nBytes);\n+        longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, nBytes > 8 ? 8 : nBytes);\n         if (nBytes >= 8) {\n-            longToBytes(src.getLeastSignificantBits(), 0, dst, dstPos + 8, nBytes - 8);\n+            longToByteArray(src.getLeastSignificantBits(), 0, dst, dstPos + 8, nBytes - 8);\n         }\n         return dst;\n     }\n      * @param src the source byte array\n      * @param srcPos the position in {@code src} where to copy the result from\n      * @return a UUID\n+     * @throws NullPointerException if {@code src} is {@code null}\n      * @throws IllegalArgumentException if array does not contain at least 16 bytes beginning\n      *             with {@code srcPos}\n      */\n-    public static UUID bytesToUuid(byte[] src, int srcPos) {\n+    public static UUID byteArrayToUuid(byte[] src, int srcPos) {\n         if (src.length - srcPos < 16) {\n             throw new IllegalArgumentException(\"Need at least 16 bytes for UUID\");\n         }\n-        return new UUID(\n-            bytesToLong(src, srcPos, 0, 0, 8), bytesToLong(src, srcPos + 8, 0, 0, 8));\n+        return new UUID(byteArrayToLong(src, srcPos, 0, 0, 8), byteArrayToLong(\n+            src, srcPos + 8, 0, 0, 8));\n     }\n }\n--- a/src/test/java/org/apache/commons/lang3/ConversionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ConversionTest.java\n     }\n \n     /**\n-     * Tests {@link Conversion#hexDigitM0ToInt(char)}.\n-     */\n-    @Test\n-    public void testHexDigitM0ToInt() {\n-        assertEquals(0x0, Conversion.hexDigitM0ToInt('0'));\n-        assertEquals(0x8, Conversion.hexDigitM0ToInt('1'));\n-        assertEquals(0x4, Conversion.hexDigitM0ToInt('2'));\n-        assertEquals(0xC, Conversion.hexDigitM0ToInt('3'));\n-        assertEquals(0x2, Conversion.hexDigitM0ToInt('4'));\n-        assertEquals(0xA, Conversion.hexDigitM0ToInt('5'));\n-        assertEquals(0x6, Conversion.hexDigitM0ToInt('6'));\n-        assertEquals(0xE, Conversion.hexDigitM0ToInt('7'));\n-        assertEquals(0x1, Conversion.hexDigitM0ToInt('8'));\n-        assertEquals(0x9, Conversion.hexDigitM0ToInt('9'));\n-        assertEquals(0x5, Conversion.hexDigitM0ToInt('A'));\n-        assertEquals(0x5, Conversion.hexDigitM0ToInt('a'));\n-        assertEquals(0xD, Conversion.hexDigitM0ToInt('B'));\n-        assertEquals(0xD, Conversion.hexDigitM0ToInt('b'));\n-        assertEquals(0x3, Conversion.hexDigitM0ToInt('C'));\n-        assertEquals(0x3, Conversion.hexDigitM0ToInt('c'));\n-        assertEquals(0xB, Conversion.hexDigitM0ToInt('D'));\n-        assertEquals(0xB, Conversion.hexDigitM0ToInt('d'));\n-        assertEquals(0x7, Conversion.hexDigitM0ToInt('E'));\n-        assertEquals(0x7, Conversion.hexDigitM0ToInt('e'));\n-        assertEquals(0xF, Conversion.hexDigitM0ToInt('F'));\n-        assertEquals(0xF, Conversion.hexDigitM0ToInt('f'));\n+     * Tests {@link Conversion#hexDigitMsb0ToInt(char)}.\n+     */\n+    @Test\n+    public void testHexDigitMsb0ToInt() {\n+        assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0'));\n+        assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1'));\n+        assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2'));\n+        assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3'));\n+        assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4'));\n+        assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5'));\n+        assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6'));\n+        assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7'));\n+        assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8'));\n+        assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9'));\n+        assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A'));\n+        assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a'));\n+        assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B'));\n+        assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b'));\n+        assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C'));\n+        assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c'));\n+        assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D'));\n+        assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d'));\n+        assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E'));\n+        assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e'));\n+        assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F'));\n+        assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f'));\n         try {\n-            Conversion.hexDigitM0ToInt('G');\n+            Conversion.hexDigitMsb0ToInt('G');\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#hexDigitToBools(char)}.\n-     */\n-    @Test\n-    public void testHexDigitToBools() {\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, false}, Conversion.hexDigitToBools('0'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, false}, Conversion.hexDigitToBools('1'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, false}, Conversion.hexDigitToBools('2'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, false}, Conversion.hexDigitToBools('3'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, false}, Conversion.hexDigitToBools('4'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, false}, Conversion.hexDigitToBools('5'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, false}, Conversion.hexDigitToBools('6'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, false}, Conversion.hexDigitToBools('7'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, true}, Conversion.hexDigitToBools('8'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, true}, Conversion.hexDigitToBools('9'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, true}, Conversion.hexDigitToBools('A'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, true}, Conversion.hexDigitToBools('a'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitToBools('B'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitToBools('b'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, true}, Conversion.hexDigitToBools('C'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, true}, Conversion.hexDigitToBools('c'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitToBools('D'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitToBools('d'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, true}, Conversion.hexDigitToBools('E'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, true}, Conversion.hexDigitToBools('e'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('F'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('f'));\n+     * Tests {@link Conversion#hexDigitToBoolArray(char)}.\n+     */\n+    @Test\n+    public void testHexDigitToBoolArray() {\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, false, false}, Conversion.hexDigitToBoolArray('0'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, false, false}, Conversion.hexDigitToBoolArray('1'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, false, false}, Conversion.hexDigitToBoolArray('2'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, false}, Conversion.hexDigitToBoolArray('3'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, true, false}, Conversion.hexDigitToBoolArray('4'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, false}, Conversion.hexDigitToBoolArray('5'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, true, false}, Conversion.hexDigitToBoolArray('6'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, false}, Conversion.hexDigitToBoolArray('7'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, false, true}, Conversion.hexDigitToBoolArray('8'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, false, true}, Conversion.hexDigitToBoolArray('9'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, false, true}, Conversion.hexDigitToBoolArray('A'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, false, true}, Conversion.hexDigitToBoolArray('a'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitToBoolArray('B'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitToBoolArray('b'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, true, true}, Conversion.hexDigitToBoolArray('C'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, true, true}, Conversion.hexDigitToBoolArray('c'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitToBoolArray('D'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitToBoolArray('d'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, true, true}, Conversion.hexDigitToBoolArray('E'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, true, true}, Conversion.hexDigitToBoolArray('e'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitToBoolArray('F'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitToBoolArray('f'));\n         try {\n-            Conversion.hexDigitToBools('G');\n+            Conversion.hexDigitToBoolArray('G');\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#hexDigitM0ToBools(char)}.\n-     */\n-    @Test\n-    public void testHexDigitM0ToBools() {\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, false}, Conversion.hexDigitM0ToBools('0'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, true}, Conversion.hexDigitM0ToBools('1'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, false}, Conversion.hexDigitM0ToBools('2'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, true}, Conversion.hexDigitM0ToBools('3'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, false}, Conversion.hexDigitM0ToBools('4'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, true}, Conversion.hexDigitM0ToBools('5'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, false}, Conversion.hexDigitM0ToBools('6'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, true}, Conversion.hexDigitM0ToBools('7'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, false}, Conversion.hexDigitM0ToBools('8'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, true}, Conversion.hexDigitM0ToBools('9'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, false}, Conversion.hexDigitM0ToBools('A'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, false}, Conversion.hexDigitM0ToBools('a'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitM0ToBools('B'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitM0ToBools('b'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, false}, Conversion.hexDigitM0ToBools('C'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, false}, Conversion.hexDigitM0ToBools('c'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitM0ToBools('D'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitM0ToBools('d'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, false}, Conversion.hexDigitM0ToBools('E'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, false}, Conversion.hexDigitM0ToBools('e'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('F'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('f'));\n+     * Tests {@link Conversion#hexDigitMsb0ToBoolArray(char)}.\n+     */\n+    @Test\n+    public void testHexDigitMsb0ToBoolArray() {\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBoolArray('0'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBoolArray('1'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('2'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('3'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('4'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('5'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('6'));\n+        assertBoolArrayEquals(\n+            new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('7'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBoolArray('8'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBoolArray('9'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('A'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('a'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('B'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('b'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('C'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('c'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('D'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('d'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('E'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('e'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('F'));\n+        assertBoolArrayEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('f'));\n         try {\n-            Conversion.hexDigitM0ToBools('G');\n+            Conversion.hexDigitMsb0ToBoolArray('G');\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolsToHexDigit(boolean[])}.\n-     */\n-    @Test\n-    public void testBoolsToHexDigit() {\n-        assertEquals('0', Conversion.boolsToHexDigit(new boolean[]{false, false, false, false}));\n-        assertEquals('1', Conversion.boolsToHexDigit(new boolean[]{true, false, false, false}));\n-        assertEquals('2', Conversion.boolsToHexDigit(new boolean[]{false, true, false, false}));\n-        assertEquals('3', Conversion.boolsToHexDigit(new boolean[]{true, true, false, false}));\n-        assertEquals('4', Conversion.boolsToHexDigit(new boolean[]{false, false, true, false}));\n-        assertEquals('5', Conversion.boolsToHexDigit(new boolean[]{true, false, true, false}));\n-        assertEquals('6', Conversion.boolsToHexDigit(new boolean[]{false, true, true, false}));\n-        assertEquals('7', Conversion.boolsToHexDigit(new boolean[]{true, true, true, false}));\n-        assertEquals('8', Conversion.boolsToHexDigit(new boolean[]{false, false, false, true}));\n-        assertEquals('9', Conversion.boolsToHexDigit(new boolean[]{true, false, false, true}));\n-        assertEquals('a', Conversion.boolsToHexDigit(new boolean[]{false, true, false, true}));\n-        assertEquals('b', Conversion.boolsToHexDigit(new boolean[]{true, true, false, true}));\n-        assertEquals('c', Conversion.boolsToHexDigit(new boolean[]{false, false, true, true}));\n-        assertEquals('d', Conversion.boolsToHexDigit(new boolean[]{true, false, true, true}));\n-        assertEquals('e', Conversion.boolsToHexDigit(new boolean[]{false, true, true, true}));\n-        assertEquals('f', Conversion.boolsToHexDigit(new boolean[]{true, true, true, true}));\n-        assertEquals('1', Conversion.boolsToHexDigit(new boolean[]{true}));\n-        assertEquals(\n-            'f', Conversion.boolsToHexDigit(new boolean[]{true, true, true, true, true}));\n+     * Tests {@link Conversion#boolArrayToHexDigit(boolean[])}.\n+     */\n+    @Test\n+    public void testBoolArrayToHexDigit() {\n+        assertEquals(\n+            '0', Conversion.boolArrayToHexDigit(new boolean[]{false, false, false, false}));\n+        assertEquals(\n+            '1', Conversion.boolArrayToHexDigit(new boolean[]{true, false, false, false}));\n+        assertEquals(\n+            '2', Conversion.boolArrayToHexDigit(new boolean[]{false, true, false, false}));\n+        assertEquals(\n+            '3', Conversion.boolArrayToHexDigit(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            '4', Conversion.boolArrayToHexDigit(new boolean[]{false, false, true, false}));\n+        assertEquals(\n+            '5', Conversion.boolArrayToHexDigit(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            '6', Conversion.boolArrayToHexDigit(new boolean[]{false, true, true, false}));\n+        assertEquals(\n+            '7', Conversion.boolArrayToHexDigit(new boolean[]{true, true, true, false}));\n+        assertEquals(\n+            '8', Conversion.boolArrayToHexDigit(new boolean[]{false, false, false, true}));\n+        assertEquals(\n+            '9', Conversion.boolArrayToHexDigit(new boolean[]{true, false, false, true}));\n+        assertEquals(\n+            'a', Conversion.boolArrayToHexDigit(new boolean[]{false, true, false, true}));\n+        assertEquals(\n+            'b', Conversion.boolArrayToHexDigit(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'c', Conversion.boolArrayToHexDigit(new boolean[]{false, false, true, true}));\n+        assertEquals(\n+            'd', Conversion.boolArrayToHexDigit(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'e', Conversion.boolArrayToHexDigit(new boolean[]{false, true, true, true}));\n+        assertEquals('f', Conversion.boolArrayToHexDigit(new boolean[]{true, true, true, true}));\n+        assertEquals('1', Conversion.boolArrayToHexDigit(new boolean[]{true}));\n+        assertEquals(\n+            'f', Conversion.boolArrayToHexDigit(new boolean[]{true, true, true, true, true}));\n         try {\n-            Conversion.boolsToHexDigit(new boolean[]{});\n+            Conversion.boolArrayToHexDigit(new boolean[]{});\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolsBeM0ToHexDigit(boolean[], int)}.\n-     */\n-    @Test\n-    public void testBoolsToHexDigit_2args() {\n+     * Tests {@link Conversion#boolArrayBeMsb0ToHexDigit(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBoolArrayToHexDigit_2args() {\n         boolean[] shortArray = new boolean[]{false, true, true};\n-        assertEquals('6', Conversion.boolsToHexDigit(shortArray, 0));\n-        assertEquals('3', Conversion.boolsToHexDigit(shortArray, 1));\n-        assertEquals('1', Conversion.boolsToHexDigit(shortArray, 2));\n+        assertEquals('6', Conversion.boolArrayToHexDigit(shortArray, 0));\n+        assertEquals('3', Conversion.boolArrayToHexDigit(shortArray, 1));\n+        assertEquals('1', Conversion.boolArrayToHexDigit(shortArray, 2));\n         boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};\n-        assertEquals('5', Conversion.boolsToHexDigit(longArray, 0));\n-        assertEquals('2', Conversion.boolsToHexDigit(longArray, 1));\n-        assertEquals('9', Conversion.boolsToHexDigit(longArray, 2));\n-        assertEquals('c', Conversion.boolsToHexDigit(longArray, 3));\n-        assertEquals('6', Conversion.boolsToHexDigit(longArray, 4));\n-        assertEquals('3', Conversion.boolsToHexDigit(longArray, 5));\n-        assertEquals('1', Conversion.boolsToHexDigit(longArray, 6));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolsToHexDigitM0_4bits(boolean[])}.\n-     */\n-    @Test\n-    public void testBoolsToHexDigitM0_bits() {\n-        assertEquals(\n-            '0', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, false, false, false}));\n-        assertEquals(\n-            '1', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, false, false, true}));\n-        assertEquals(\n-            '2', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, false, true, false}));\n-        assertEquals(\n-            '3', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, false, true, true}));\n-        assertEquals(\n-            '4', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, true, false, false}));\n-        assertEquals(\n-            '5', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, true, false, true}));\n-        assertEquals(\n-            '6', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, true, true, false}));\n-        assertEquals(\n-            '7', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, true, true, true}));\n-        assertEquals(\n-            '8', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, false, false}));\n-        assertEquals(\n-            '9', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, false, true}));\n-        assertEquals(\n-            'a', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            'b', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'c', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            'd', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'e', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, true, false}));\n-        assertEquals(\n-            'f', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, true, true}));\n+        assertEquals('5', Conversion.boolArrayToHexDigit(longArray, 0));\n+        assertEquals('2', Conversion.boolArrayToHexDigit(longArray, 1));\n+        assertEquals('9', Conversion.boolArrayToHexDigit(longArray, 2));\n+        assertEquals('c', Conversion.boolArrayToHexDigit(longArray, 3));\n+        assertEquals('6', Conversion.boolArrayToHexDigit(longArray, 4));\n+        assertEquals('3', Conversion.boolArrayToHexDigit(longArray, 5));\n+        assertEquals('1', Conversion.boolArrayToHexDigit(longArray, 6));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#boolArrayToHexDigitMsb0_4bits(boolean[])}.\n+     */\n+    @Test\n+    public void testBoolArrayToHexDigitMsb0_bits() {\n+        assertEquals(\n+            '0',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, false, false}));\n+        assertEquals(\n+            '1',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, false, true}));\n+        assertEquals(\n+            '2',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, true, false}));\n+        assertEquals(\n+            '3',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, true, true}));\n+        assertEquals(\n+            '4',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, false, false}));\n+        assertEquals(\n+            '5',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, false, true}));\n+        assertEquals(\n+            '6',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, true, false}));\n+        assertEquals(\n+            '7',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, true, true}));\n+        assertEquals(\n+            '8',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, false, false}));\n+        assertEquals(\n+            '9',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, false, true}));\n+        assertEquals(\n+            'a',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            'b',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'c',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            'd',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'e',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, true, false}));\n+        assertEquals(\n+            'f',\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, true, true}));\n         try {\n-            Conversion.boolsToHexDigitM0_4bits(new boolean[]{});\n+            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{});\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolsToHexDigitM0_4bits(boolean[], int)}.\n-     */\n-    @Test\n-    public void testBoolsToHexDigitM0_4bits_2args() {\n+     * Tests {@link Conversion#boolArrayToHexDigitMsb0_4bits(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBoolArrayToHexDigitMsb0_4bits_2args() {\n         // boolean[] shortArray = new boolean[]{true,true,false};\n-        // assertEquals('6', Conversion.boolsToHexDigitM0(shortArray,0));\n-        // assertEquals('3', Conversion.boolsToHexDigitM0(shortArray,1));\n-        // assertEquals('1', Conversion.boolsToHexDigitM0(shortArray,2));\n+        // assertEquals('6', Conversion.BoolArrayToHexDigitMsb0(shortArray,0));\n+        // assertEquals('3', Conversion.BoolArrayToHexDigitMsb0(shortArray,1));\n+        // assertEquals('1', Conversion.BoolArrayToHexDigitMsb0(shortArray,2));\n         boolean[] shortArray = new boolean[]{true, true, false, true};\n-        assertEquals('d', Conversion.boolsToHexDigitM0_4bits(shortArray, 0));\n+        assertEquals('d', Conversion.boolArrayToHexDigitMsb0_4bits(shortArray, 0));\n         boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};\n-        assertEquals('a', Conversion.boolsToHexDigitM0_4bits(longArray, 0));\n-        assertEquals('4', Conversion.boolsToHexDigitM0_4bits(longArray, 1));\n-        assertEquals('9', Conversion.boolsToHexDigitM0_4bits(longArray, 2));\n-        assertEquals('3', Conversion.boolsToHexDigitM0_4bits(longArray, 3));\n-        // assertEquals('6', Conversion.boolsToHexDigitM0(longArray,4));\n-        // assertEquals('3', Conversion.boolsToHexDigitM0(longArray,5));\n-        // assertEquals('1', Conversion.boolsToHexDigitM0(longArray,6));\n+        assertEquals('a', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 0));\n+        assertEquals('4', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 1));\n+        assertEquals('9', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 2));\n+        assertEquals('3', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 3));\n+        // assertEquals('6', Conversion.BoolArrayToHexDigitMsb0(longArray,4));\n+        // assertEquals('3', Conversion.BoolArrayToHexDigitMsb0(longArray,5));\n+        // assertEquals('1', Conversion.BoolArrayToHexDigitMsb0(longArray,6));\n         boolean[] maxLengthArray = new boolean[]{\n             true, false, true, false, false, true, true, true};\n-        assertEquals('a', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 0));\n-        assertEquals('4', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 1));\n-        assertEquals('9', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 2));\n-        assertEquals('3', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 3));\n-        assertEquals('7', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 4));\n-        // assertEquals('7', Conversion.boolsToHexDigitM0(longArray,5));\n-        // assertEquals('3', Conversion.boolsToHexDigitM0(longArray,6));\n-        // assertEquals('1', Conversion.boolsToHexDigitM0(longArray,7));\n+        assertEquals('a', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 0));\n+        assertEquals('4', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 1));\n+        assertEquals('9', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 2));\n+        assertEquals('3', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 3));\n+        assertEquals('7', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 4));\n+        // assertEquals('7', Conversion.BoolArrayToHexDigitMsb0(longArray,5));\n+        // assertEquals('3', Conversion.BoolArrayToHexDigitMsb0(longArray,6));\n+        // assertEquals('1', Conversion.BoolArrayToHexDigitMsb0(longArray,7));\n         boolean[] javaDocCheck = new boolean[]{\n             true, false, false, true, true, false, true, false};\n-        assertEquals('d', Conversion.boolsToHexDigitM0_4bits(javaDocCheck, 3));\n-\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolsToHexDigit(boolean[])}.\n-     */\n-    @Test\n-    public void testBoolsBeM0ToHexDigit() {\n-        assertEquals(\n-            '0', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, false, false, false}));\n-        assertEquals(\n-            '1', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, false, false, true}));\n-        assertEquals(\n-            '2', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, false, true, false}));\n-        assertEquals(\n-            '3', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, false, true, true}));\n-        assertEquals(\n-            '4', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, true, false, false}));\n-        assertEquals(\n-            '5', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, true, false, true}));\n-        assertEquals(\n-            '6', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, true, true, false}));\n-        assertEquals(\n-            '7', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, true, true, true}));\n-        assertEquals(\n-            '8', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, false, false}));\n-        assertEquals(\n-            '9', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, false, true}));\n-        assertEquals(\n-            'a', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            'b', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'c', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            'd', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'e', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, true, false}));\n-        assertEquals('f', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, true, true}));\n+        assertEquals('d', Conversion.boolArrayToHexDigitMsb0_4bits(javaDocCheck, 3));\n+\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#boolArrayToHexDigit(boolean[])}.\n+     */\n+    @Test\n+    public void testBoolArrayBeMsb0ToHexDigit() {\n+        assertEquals(\n+            '0',\n+            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, false, false}));\n+        assertEquals(\n+            '1', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, false, true}));\n+        assertEquals(\n+            '2', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, true, false}));\n+        assertEquals(\n+            '3', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, true, true}));\n+        assertEquals(\n+            '4', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, false, false}));\n+        assertEquals(\n+            '5', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, false, true}));\n+        assertEquals(\n+            '6', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, true, false}));\n+        assertEquals(\n+            '7', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, true, true}));\n+        assertEquals(\n+            '8', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, false, false}));\n+        assertEquals(\n+            '9', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, false, true}));\n+        assertEquals(\n+            'a', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            'b', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'c', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            'd', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'e', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, true, false}));\n+        assertEquals(\n+            'f', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, true, true}));\n         assertEquals(\n             '4',\n-            Conversion.boolsBeM0ToHexDigit(new boolean[]{\n+            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, true, false, false}));\n         try {\n-            Conversion.boolsBeM0ToHexDigit(new boolean[]{});\n+            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{});\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolsToHexDigit(boolean[], int)}.\n-     */\n-    @Test\n-    public void testBoolsBeM0ToHexDigit_2args() {\n+     * Tests {@link Conversion#boolArrayToHexDigit(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBoolArrayBeMsb0ToHexDigit_2args() {\n         assertEquals(\n             '5',\n-            Conversion.boolsBeM0ToHexDigit(new boolean[]{\n+            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 true, false, true, false, false}, 2));\n \n         boolean[] shortArray = new boolean[]{true, true, false};\n-        assertEquals('6', Conversion.boolsBeM0ToHexDigit(shortArray, 0));\n-        assertEquals('3', Conversion.boolsBeM0ToHexDigit(shortArray, 1));\n-        assertEquals('1', Conversion.boolsBeM0ToHexDigit(shortArray, 2));\n+        assertEquals('6', Conversion.boolArrayBeMsb0ToHexDigit(shortArray, 0));\n+        assertEquals('3', Conversion.boolArrayBeMsb0ToHexDigit(shortArray, 1));\n+        assertEquals('1', Conversion.boolArrayBeMsb0ToHexDigit(shortArray, 2));\n         boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true};\n-        assertEquals('5', Conversion.boolsBeM0ToHexDigit(shortArray2, 0));\n-        assertEquals('2', Conversion.boolsBeM0ToHexDigit(shortArray2, 1));\n-        assertEquals('9', Conversion.boolsBeM0ToHexDigit(shortArray2, 2));\n-        assertEquals('c', Conversion.boolsBeM0ToHexDigit(shortArray2, 3));\n-        assertEquals('e', Conversion.boolsBeM0ToHexDigit(shortArray2, 4));\n-        assertEquals('7', Conversion.boolsBeM0ToHexDigit(shortArray2, 5));\n-        assertEquals('3', Conversion.boolsBeM0ToHexDigit(shortArray2, 6));\n-        assertEquals('1', Conversion.boolsBeM0ToHexDigit(shortArray2, 7));\n+        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 0));\n+        assertEquals('2', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 1));\n+        assertEquals('9', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 2));\n+        assertEquals('c', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 3));\n+        assertEquals('e', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 4));\n+        assertEquals('7', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 5));\n+        assertEquals('3', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 6));\n+        assertEquals('1', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 7));\n         boolean[] multiBytesArray = new boolean[]{\n             true, true, false, false, true, false, true, false, true, true, true, false, false,\n             true, false, true};\n-        assertEquals('5', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 0));\n-        assertEquals('2', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 1));\n-        assertEquals('9', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 2));\n-        assertEquals('c', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 3));\n-        assertEquals('e', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 4));\n-        assertEquals('7', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 5));\n-        assertEquals('b', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 6));\n-        assertEquals('5', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 7));\n-\n-        assertEquals('a', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 8));\n-        assertEquals('5', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 9));\n-        assertEquals('2', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 10));\n-        assertEquals('9', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 11));\n-        assertEquals('c', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 12));\n-        assertEquals('6', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 13));\n-        assertEquals('3', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 14));\n-        assertEquals('1', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 15));\n+        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 0));\n+        assertEquals('2', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 1));\n+        assertEquals('9', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 2));\n+        assertEquals('c', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 3));\n+        assertEquals('e', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 4));\n+        assertEquals('7', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 5));\n+        assertEquals('b', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 6));\n+        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 7));\n+\n+        assertEquals('a', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 8));\n+        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 9));\n+        assertEquals('2', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 10));\n+        assertEquals('9', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 11));\n+        assertEquals('c', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 12));\n+        assertEquals('6', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 13));\n+        assertEquals('3', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 14));\n+        assertEquals('1', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 15));\n \n     }\n \n     }\n \n     /**\n-     * Tests {@link Conversion#intToHexDigitM0(int)}.\n-     */\n-    @Test\n-    public void testIntToHexDigitM0() {\n-        assertEquals('0', Conversion.intToHexDigitM0(0));\n-        assertEquals('8', Conversion.intToHexDigitM0(1));\n-        assertEquals('4', Conversion.intToHexDigitM0(2));\n-        assertEquals('c', Conversion.intToHexDigitM0(3));\n-        assertEquals('2', Conversion.intToHexDigitM0(4));\n-        assertEquals('a', Conversion.intToHexDigitM0(5));\n-        assertEquals('6', Conversion.intToHexDigitM0(6));\n-        assertEquals('e', Conversion.intToHexDigitM0(7));\n-        assertEquals('1', Conversion.intToHexDigitM0(8));\n-        assertEquals('9', Conversion.intToHexDigitM0(9));\n-        assertEquals('5', Conversion.intToHexDigitM0(10));\n-        assertEquals('d', Conversion.intToHexDigitM0(11));\n-        assertEquals('3', Conversion.intToHexDigitM0(12));\n-        assertEquals('b', Conversion.intToHexDigitM0(13));\n-        assertEquals('7', Conversion.intToHexDigitM0(14));\n-        assertEquals('f', Conversion.intToHexDigitM0(15));\n+     * Tests {@link Conversion#intToHexDigitMsb0(int)}.\n+     */\n+    @Test\n+    public void testIntToHexDigitMsb0() {\n+        assertEquals('0', Conversion.intToHexDigitMsb0(0));\n+        assertEquals('8', Conversion.intToHexDigitMsb0(1));\n+        assertEquals('4', Conversion.intToHexDigitMsb0(2));\n+        assertEquals('c', Conversion.intToHexDigitMsb0(3));\n+        assertEquals('2', Conversion.intToHexDigitMsb0(4));\n+        assertEquals('a', Conversion.intToHexDigitMsb0(5));\n+        assertEquals('6', Conversion.intToHexDigitMsb0(6));\n+        assertEquals('e', Conversion.intToHexDigitMsb0(7));\n+        assertEquals('1', Conversion.intToHexDigitMsb0(8));\n+        assertEquals('9', Conversion.intToHexDigitMsb0(9));\n+        assertEquals('5', Conversion.intToHexDigitMsb0(10));\n+        assertEquals('d', Conversion.intToHexDigitMsb0(11));\n+        assertEquals('3', Conversion.intToHexDigitMsb0(12));\n+        assertEquals('b', Conversion.intToHexDigitMsb0(13));\n+        assertEquals('7', Conversion.intToHexDigitMsb0(14));\n+        assertEquals('f', Conversion.intToHexDigitMsb0(15));\n         try {\n-            Conversion.intToHexDigitM0(16);\n+            Conversion.intToHexDigitMsb0(16);\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#intsToLong(int[], int, long, int, int)}.\n-     */\n-    @Test\n-    public void testIntsToLong() {\n+     * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testIntArrayToLong() {\n         int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000};\n-        assertEquals(0x0000000000000000L, Conversion.intsToLong(src, 0, 0L, 0, 0));\n-        assertEquals(0x0000000000000000L, Conversion.intsToLong(src, 1, 0L, 0, 0));\n-        assertEquals(0x00000000CDF1F0C1L, Conversion.intsToLong(src, 0, 0L, 0, 1));\n-        assertEquals(0x0F123456CDF1F0C1L, Conversion.intsToLong(src, 0, 0L, 0, 2));\n-        assertEquals(0x000000000F123456L, Conversion.intsToLong(src, 1, 0L, 0, 1));\n-        assertEquals(\n-            0x123456789ABCDEF0L, Conversion.intsToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\n-        assertEquals(\n-            0x1234567878000000L, Conversion.intsToLong(src, 2, 0x123456789ABCDEF0L, 0, 1));\n+        assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0));\n+        assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0));\n+        assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1));\n+        assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2));\n+        assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1));\n+        assertEquals(\n+            0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\n+        assertEquals(\n+            0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1));\n         // assertEquals(0x0F12345678000000L,Conversion.intsToLong(src,1,0x123456789ABCDEF0L,32,2));\n     }\n \n     /**\n-     * Tests {@link Conversion#shortsToLong(short[], int, long, int, int)}.\n-     */\n-    @Test\n-    public void testShortsToLong() {\n+     * Tests {@link Conversion#shortArrayToLong(short[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testShortArrayToLong() {\n         short[] src = new short[]{\n             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800};\n-        assertEquals(0x0000000000000000L, Conversion.shortsToLong(src, 0, 0L, 0, 0));\n-        assertEquals(0x000000000000CDF1L, Conversion.shortsToLong(src, 0, 0L, 0, 1));\n-        assertEquals(0x00000000F0C1CDF1L, Conversion.shortsToLong(src, 0, 0L, 0, 2));\n-        assertEquals(0x780034560F12F0C1L, Conversion.shortsToLong(src, 1, 0L, 0, 4));\n-        assertEquals(\n-            0x123456789ABCDEF0L, Conversion.shortsToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\n-        assertEquals(\n-            0x123456CDF1BCDEF0L, Conversion.shortsToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));\n-        assertEquals(\n-            0x123478003456DEF0L, Conversion.shortsToLong(src, 3, 0x123456789ABCDEF0L, 16, 2));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#bytesToLong(byte[], int, long, int, int)}.\n-     */\n-    @Test\n-    public void testBytesToLong() {\n+        assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0));\n+        assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1));\n+        assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2));\n+        assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4));\n+        assertEquals(\n+            0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\n+        assertEquals(\n+            0x123456CDF1BCDEF0L,\n+            Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));\n+        assertEquals(\n+            0x123478003456DEF0L,\n+            Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#byteArrayToLong(byte[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testByteArrayToLong() {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n             (byte)0x56, (byte)0x78};\n-        assertEquals(0x0000000000000000L, Conversion.bytesToLong(src, 0, 0L, 0, 0));\n-        assertEquals(0x00000000000000CDL, Conversion.bytesToLong(src, 0, 0L, 0, 1));\n-        assertEquals(0x00000000C1F0F1CDL, Conversion.bytesToLong(src, 0, 0L, 0, 4));\n-        assertEquals(0x000000000FC1F0F1L, Conversion.bytesToLong(src, 1, 0L, 0, 4));\n-        assertEquals(\n-            0x123456789ABCDEF0L, Conversion.bytesToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\n-        assertEquals(\n-            0x12345678CDBCDEF0L, Conversion.bytesToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));\n-        assertEquals(\n-            0x123456789A7856F0L, Conversion.bytesToLong(src, 7, 0x123456789ABCDEF0L, 8, 2));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#shortsToInt(short[], int, int, int, int)}.\n-     */\n-    @Test\n-    public void testShortsToInt() {\n+        assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0));\n+        assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1));\n+        assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4));\n+        assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4));\n+        assertEquals(\n+            0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\n+        assertEquals(\n+            0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));\n+        assertEquals(\n+            0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#shortArrayToInt(short[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testShortArrayToInt() {\n         short[] src = new short[]{\n             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800};\n-        assertEquals(0x00000000, Conversion.shortsToInt(src, 0, 0, 0, 0));\n-        assertEquals(0x0000CDF1, Conversion.shortsToInt(src, 0, 0, 0, 1));\n-        assertEquals(0xF0C1CDF1, Conversion.shortsToInt(src, 0, 0, 0, 2));\n-        assertEquals(0x0F12F0C1, Conversion.shortsToInt(src, 1, 0, 0, 2));\n-        assertEquals(0x12345678, Conversion.shortsToInt(src, 0, 0x12345678, 0, 0));\n-        assertEquals(0xCDF15678, Conversion.shortsToInt(src, 0, 0x12345678, 16, 1));\n-        // assertEquals(0x34567800,Conversion.shortsToInt(src, 3, 0x12345678, 16, 2));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#bytesToInt(byte[], int, int, int, int)}.\n-     */\n-    @Test\n-    public void testBytesToInt() {\n+        assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0));\n+        assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1));\n+        assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2));\n+        assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2));\n+        assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0));\n+        assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1));\n+        // assertEquals(0x34567800,Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#byteArrayToInt(byte[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testByteArrayToInt() {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n             (byte)0x56, (byte)0x78};\n-        assertEquals(0x00000000, Conversion.bytesToInt(src, 0, 0, 0, 0));\n-        assertEquals(0x000000CD, Conversion.bytesToInt(src, 0, 0, 0, 1));\n-        assertEquals(0xC1F0F1CD, Conversion.bytesToInt(src, 0, 0, 0, 4));\n-        assertEquals(0x0FC1F0F1, Conversion.bytesToInt(src, 1, 0, 0, 4));\n-        assertEquals(0x12345678, Conversion.bytesToInt(src, 0, 0x12345678, 0, 0));\n-        assertEquals(0xCD345678, Conversion.bytesToInt(src, 0, 0x12345678, 24, 1));\n-        // assertEquals(0x56341278,Conversion.bytesToInt(src, 5, 0x01234567, 8, 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#bytesToShort(byte[], int, short, int, int)}.\n-     */\n-    @Test\n-    public void testBytesToShort() {\n+        assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0));\n+        assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1));\n+        assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4));\n+        assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4));\n+        assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0));\n+        assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1));\n+        // assertEquals(0x56341278,Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#byteArrayToShort(byte[], int, short, int, int)}.\n+     */\n+    @Test\n+    public void testByteArrayToShort() {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n             (byte)0x56, (byte)0x78};\n-        assertEquals((short)0x0000, Conversion.bytesToShort(src, 0, (short)0, 0, 0));\n-        assertEquals((short)0x00CD, Conversion.bytesToShort(src, 0, (short)0, 0, 1));\n-        assertEquals((short)0xF1CD, Conversion.bytesToShort(src, 0, (short)0, 0, 2));\n-        assertEquals((short)0xF0F1, Conversion.bytesToShort(src, 1, (short)0, 0, 2));\n-        assertEquals((short)0x1234, Conversion.bytesToShort(src, 0, (short)0x1234, 0, 0));\n-        assertEquals((short)0xCD34, Conversion.bytesToShort(src, 0, (short)0x1234, 8, 1));\n-        // assertEquals((short)0x5678,Conversion.bytesToShort(src, 7, (short) 0x0123, 8, 2));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#hexsToLong(String, int, long, int, int)}.\n-     */\n-    @Test\n-    public void testHexsToLong() {\n+        assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0));\n+        assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1));\n+        assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2));\n+        assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2));\n+        assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0));\n+        assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1));\n+        // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8,\n+        // 2));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#hexToLong(String, int, long, int, int)}.\n+     */\n+    @Test\n+    public void testHexToLong() {\n         String src = \"CDF1F0C10F12345678\";\n-        assertEquals(0x0000000000000000L, Conversion.hexsToLong(src, 0, 0L, 0, 0));\n-        assertEquals(0x000000000000000CL, Conversion.hexsToLong(src, 0, 0L, 0, 1));\n-        assertEquals(0x000000001C0F1FDCL, Conversion.hexsToLong(src, 0, 0L, 0, 8));\n-        assertEquals(0x0000000001C0F1FDL, Conversion.hexsToLong(src, 1, 0L, 0, 8));\n-        assertEquals(\n-            0x123456798ABCDEF0L, Conversion.hexsToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\n-        assertEquals(\n-            0x1234567876BCDEF0L, Conversion.hexsToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#hexsToInt(String, int, int, int, int)}.\n-     */\n-    @Test\n-    public void testHexsToInt() {\n+        assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0));\n+        assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1));\n+        assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8));\n+        assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8));\n+        assertEquals(\n+            0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\n+        assertEquals(\n+            0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#hexToInt(String, int, int, int, int)}.\n+     */\n+    @Test\n+    public void testHexToInt() {\n         String src = \"CDF1F0C10F12345678\";\n-        assertEquals(0x00000000, Conversion.hexsToInt(src, 0, 0, 0, 0));\n-        assertEquals(0x0000000C, Conversion.hexsToInt(src, 0, 0, 0, 1));\n-        assertEquals(0x1C0F1FDC, Conversion.hexsToInt(src, 0, 0, 0, 8));\n-        assertEquals(0x01C0F1FD, Conversion.hexsToInt(src, 1, 0, 0, 8));\n-        assertEquals(0x12345679, Conversion.hexsToInt(src, 0, 0x12345679, 0, 0));\n-        assertEquals(0x87645679, Conversion.hexsToInt(src, 15, 0x12345679, 20, 3));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#hexsToShort(String, int, short, int, int)}.\n-     */\n-    @Test\n-    public void testHexsToShort() {\n+        assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0));\n+        assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1));\n+        assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8));\n+        assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8));\n+        assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0));\n+        assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#hexToShort(String, int, short, int, int)}.\n+     */\n+    @Test\n+    public void testHexToShort() {\n         String src = \"CDF1F0C10F12345678\";\n-        assertEquals((short)0x0000, Conversion.hexsToShort(src, 0, (short)0, 0, 0));\n-        assertEquals((short)0x000C, Conversion.hexsToShort(src, 0, (short)0, 0, 1));\n-        assertEquals((short)0x1FDC, Conversion.hexsToShort(src, 0, (short)0, 0, 4));\n-        assertEquals((short)0xF1FD, Conversion.hexsToShort(src, 1, (short)0, 0, 4));\n-        assertEquals((short)0x1234, Conversion.hexsToShort(src, 0, (short)0x1234, 0, 0));\n-        assertEquals((short)0x8764, Conversion.hexsToShort(src, 15, (short)0x1234, 4, 3));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#hexsToByte(String, int, byte, int, int)}.\n-     */\n-    @Test\n-    public void testHexsToByte() {\n+        assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0));\n+        assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1));\n+        assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4));\n+        assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4));\n+        assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0));\n+        assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#hexToByte(String, int, byte, int, int)}.\n+     */\n+    @Test\n+    public void testHexToByte() {\n         String src = \"CDF1F0C10F12345678\";\n-        assertEquals((byte)0x00, Conversion.hexsToByte(src, 0, (byte)0, 0, 0));\n-        assertEquals((byte)0x0C, Conversion.hexsToByte(src, 0, (byte)0, 0, 1));\n-        assertEquals((byte)0xDC, Conversion.hexsToByte(src, 0, (byte)0, 0, 2));\n-        assertEquals((byte)0xFD, Conversion.hexsToByte(src, 1, (byte)0, 0, 2));\n-        assertEquals((byte)0x34, Conversion.hexsToByte(src, 0, (byte)0x34, 0, 0));\n-        assertEquals((byte)0x84, Conversion.hexsToByte(src, 17, (byte)0x34, 4, 1));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolsToLong(boolean[], int, long, int, int)}.\n-     */\n-    @Test\n-    public void testBoolsToLong() {\n+        assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0));\n+        assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1));\n+        assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2));\n+        assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2));\n+        assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0));\n+        assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#boolArrayToLong(boolean[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testBoolArrayToLong() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n-        assertEquals(0x0000000000000000L, Conversion.boolsToLong(src, 0, 0L, 0, 0));\n-        assertEquals(0x000000000000000CL, Conversion.boolsToLong(src, 0, 0L, 0, 1 * 4));\n-        assertEquals(0x000000001C0F1FDCL, Conversion.boolsToLong(src, 0, 0L, 0, 8 * 4));\n-        assertEquals(0x0000000001C0F1FDL, Conversion.boolsToLong(src, 1 * 4, 0L, 0, 8 * 4));\n-        assertEquals(\n-            0x123456798ABCDEF0L, Conversion.boolsToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n+        assertEquals(0x0000000000000000L, Conversion.boolArrayToLong(src, 0, 0L, 0, 0));\n+        assertEquals(0x000000000000000CL, Conversion.boolArrayToLong(src, 0, 0L, 0, 1 * 4));\n+        assertEquals(0x000000001C0F1FDCL, Conversion.boolArrayToLong(src, 0, 0L, 0, 8 * 4));\n+        assertEquals(0x0000000001C0F1FDL, Conversion.boolArrayToLong(src, 1 * 4, 0L, 0, 8 * 4));\n+        assertEquals(\n+            0x123456798ABCDEF0L, Conversion.boolArrayToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\n         assertEquals(\n             0x1234567876BCDEF0L,\n-            Conversion.boolsToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolsToInt(boolean[], int, int, int, int)}.\n-     */\n-    @Test\n-    public void testBoolsToInt() {\n+            Conversion.boolArrayToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#boolArrayToInt(boolean[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testBoolArrayToInt() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n-        assertEquals(0x00000000, Conversion.boolsToInt(src, 0 * 4, 0, 0, 0 * 4));\n-        assertEquals(0x0000000C, Conversion.boolsToInt(src, 0 * 4, 0, 0, 1 * 4));\n-        assertEquals(0x1C0F1FDC, Conversion.boolsToInt(src, 0 * 4, 0, 0, 8 * 4));\n-        assertEquals(0x01C0F1FD, Conversion.boolsToInt(src, 1 * 4, 0, 0, 8 * 4));\n-        assertEquals(0x12345679, Conversion.boolsToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));\n-        assertEquals(0x87645679, Conversion.boolsToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolsToShort(boolean[], int, short, int, int)}.\n-     */\n-    @Test\n-    public void testBoolsToShort() {\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n+        assertEquals(0x00000000, Conversion.boolArrayToInt(src, 0 * 4, 0, 0, 0 * 4));\n+        assertEquals(0x0000000C, Conversion.boolArrayToInt(src, 0 * 4, 0, 0, 1 * 4));\n+        assertEquals(0x1C0F1FDC, Conversion.boolArrayToInt(src, 0 * 4, 0, 0, 8 * 4));\n+        assertEquals(0x01C0F1FD, Conversion.boolArrayToInt(src, 1 * 4, 0, 0, 8 * 4));\n+        assertEquals(0x12345679, Conversion.boolArrayToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));\n+        assertEquals(0x87645679, Conversion.boolArrayToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#boolArrayToShort(boolean[], int, short, int, int)}.\n+     */\n+    @Test\n+    public void testBoolArrayToShort() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n-        assertEquals((short)0x0000, Conversion.boolsToShort(src, 0 * 4, (short)0, 0, 0 * 4));\n-        assertEquals((short)0x000C, Conversion.boolsToShort(src, 0 * 4, (short)0, 0, 1 * 4));\n-        assertEquals((short)0x1FDC, Conversion.boolsToShort(src, 0 * 4, (short)0, 0, 4 * 4));\n-        assertEquals((short)0xF1FD, Conversion.boolsToShort(src, 1 * 4, (short)0, 0, 4 * 4));\n-        assertEquals(\n-            (short)0x1234, Conversion.boolsToShort(src, 0 * 4, (short)0x1234, 0, 0 * 4));\n-        assertEquals(\n-            (short)0x8764, Conversion.boolsToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolsToByte(boolean[], int, byte, int, int)}.\n-     */\n-    @Test\n-    public void testBoolsToByte() {\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n+        assertEquals((short)0x0000, Conversion.boolArrayToShort(src, 0 * 4, (short)0, 0, 0 * 4));\n+        assertEquals((short)0x000C, Conversion.boolArrayToShort(src, 0 * 4, (short)0, 0, 1 * 4));\n+        assertEquals((short)0x1FDC, Conversion.boolArrayToShort(src, 0 * 4, (short)0, 0, 4 * 4));\n+        assertEquals((short)0xF1FD, Conversion.boolArrayToShort(src, 1 * 4, (short)0, 0, 4 * 4));\n+        assertEquals(\n+            (short)0x1234, Conversion.boolArrayToShort(src, 0 * 4, (short)0x1234, 0, 0 * 4));\n+        assertEquals(\n+            (short)0x8764, Conversion.boolArrayToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#boolArrayToByte(boolean[], int, byte, int, int)}.\n+     */\n+    @Test\n+    public void testBoolArrayToByte() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n-        assertEquals((byte)0x00, Conversion.boolsToByte(src, 0 * 4, (byte)0, 0, 0 * 4));\n-        assertEquals((byte)0x0C, Conversion.boolsToByte(src, 0 * 4, (byte)0, 0, 1 * 4));\n-        assertEquals((byte)0xDC, Conversion.boolsToByte(src, 0 * 4, (byte)0, 0, 2 * 4));\n-        assertEquals((byte)0xFD, Conversion.boolsToByte(src, 1 * 4, (byte)0, 0, 2 * 4));\n-        assertEquals((byte)0x34, Conversion.boolsToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4));\n-        assertEquals((byte)0x84, Conversion.boolsToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#longToInts(long, int, int[], int, int)}.\n-     */\n-    @Test\n-    public void testLongToInts() {\n-        assertArrayEquals(\n-            new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 0, 0));\n-        assertArrayEquals(\n-            new int[]{}, Conversion.longToInts(0x0000000000000000L, 100, new int[]{}, 0, 0));\n-        assertArrayEquals(\n-            new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 100, 0));\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n+        assertEquals((byte)0x00, Conversion.boolArrayToByte(src, 0 * 4, (byte)0, 0, 0 * 4));\n+        assertEquals((byte)0x0C, Conversion.boolArrayToByte(src, 0 * 4, (byte)0, 0, 1 * 4));\n+        assertEquals((byte)0xDC, Conversion.boolArrayToByte(src, 0 * 4, (byte)0, 0, 2 * 4));\n+        assertEquals((byte)0xFD, Conversion.boolArrayToByte(src, 1 * 4, (byte)0, 0, 2 * 4));\n+        assertEquals((byte)0x34, Conversion.boolArrayToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4));\n+        assertEquals((byte)0x84, Conversion.boolArrayToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#longToIntArray(long, int, int[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToIntArray() {\n+        assertArrayEquals(\n+            new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0));\n+        assertArrayEquals(\n+            new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0));\n+        assertArrayEquals(\n+            new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 100, 0));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));\n         assertArrayEquals(\n             new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));\n         // assertArrayEquals(new\n-        // int[]{0x90ABCDEF,0x12345678,0x90ABCDEF,0x12345678},Conversion.longToInts(0x1234567890ABCDEFL,\n+        // int[]{0x90ABCDEF,0x12345678,0x90ABCDEF,0x12345678},Conversion.longToIntArray(0x1234567890ABCDEFL,\n         // 0,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion\n         // assertArrayEquals(new\n-        // int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToInts(0x1234567890ABCDEFL,\n+        // int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToIntArray(0x1234567890ABCDEFL,\n         // 0,new int[]{-1,-1,-1,-1},1,3));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));\n         // assertArrayEquals(new\n-        // int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToInts(0x1234567890ABCDEFL,\n+        // int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToIntArray(0x1234567890ABCDEFL,\n         // 1,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion\n         assertArrayEquals(\n             new int[]{0x091A2B3C},\n-            Conversion.longToInts(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#longToShorts(long, int, short[], int, int)}.\n-     */\n-    @Test\n-    public void testLongToShorts() {\n-        assertArrayEquals(\n-            new short[]{}, Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 0, 0));\n+            Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#longToShortArray(long, int, short[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToShortArray() {\n         assertArrayEquals(\n             new short[]{},\n-            Conversion.longToShorts(0x0000000000000000L, 100, new short[]{}, 0, 0));\n+            Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0));\n         assertArrayEquals(\n             new short[]{},\n-            Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 100, 0));\n+            Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0));\n+        assertArrayEquals(\n+            new short[]{},\n+            Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n         assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0xFFFF, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n         assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));\n         assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0x1234},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xCDEF, (short)0x90AB, (short)0x5678},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0x90AB},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xCDEF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xE6F7, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xF37B, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x79BD, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xBCDE, (short)0xFFFF},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xE6F7, (short)0x4855, (short)0x2B3C, (short)0x091A},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));\n+            Conversion.longToShortArray(\n+                0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));\n         assertArrayEquals(\n             new short[]{(short)0x2B3C},\n-            Conversion.longToShorts(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#intToShorts(int, int, short[], int, int)}.\n-     */\n-    @Test\n-    public void testIntToShorts() {\n-        assertArrayEquals(\n-            new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 0, 0));\n-        assertArrayEquals(\n-            new short[]{}, Conversion.intToShorts(0x00000000, 100, new short[]{}, 0, 0));\n-        assertArrayEquals(\n-            new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 100, 0));\n+            Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#intToShortArray(int, int, short[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToShortArray() {\n+        assertArrayEquals(\n+            new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0));\n+        assertArrayEquals(\n+            new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0));\n+        assertArrayEquals(\n+            new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n+            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n         assertArrayEquals(\n             new short[]{(short)0x5678, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n+            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new short[]{(short)0x5678, (short)0x1234, (short)0xFFFF, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n+            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n         // assertArrayEquals(new\n-        // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShorts(0x12345678,\n+        // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShortArray(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},0,3));//rejected by assertion\n         // assertArrayEquals(new\n-        // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShorts(0x12345678,\n+        // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShortArray(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},0,4));\n         // assertArrayEquals(new\n-        // short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShorts(0x12345678,\n+        // short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShortArray(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},1,3));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0x1234},\n-            Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n+            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0x5678},\n-            Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n+            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x2B3C, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.intToShortArray(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x159E, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.intToShortArray(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x8ACF, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.intToShortArray(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n         assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x4567, (short)0xFFFF},\n-            Conversion.intToShorts(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n+            Conversion.intToShortArray(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n         // assertArrayEquals(new\n-        // short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShorts(0x12345678,\n+        // short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShortArray(0x12345678,\n         // 1,new short[]{-1,-1,-1,-1},0,4));//rejected by assertion\n-        // assertArrayEquals(new short[]{(short)0x2B3C},Conversion.intToShorts(0x12345678,33,new\n+        // assertArrayEquals(new\n+        // short[]{(short)0x2B3C},Conversion.intToShortArray(0x12345678,33,new\n         // short[]{0},0,1));//rejected by assertion\n         assertArrayEquals(\n             new short[]{(short)0x091A},\n-            Conversion.intToShorts(0x12345678, 17, new short[]{0}, 0, 1));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#longToBytes(long, int, byte[], int, int)}.\n-     */\n-    @Test\n-    public void testLongToBytes() {\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 100, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 100, 0));\n+            Conversion.intToShortArray(0x12345678, 17, new short[]{0}, 0, 1));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#longToByteArray(long, int, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToByteArray() {\n+        assertArrayEquals(\n+            new byte[]{},\n+            Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0));\n+        assertArrayEquals(\n+            new byte[]{},\n+            Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0));\n+        assertArrayEquals(\n+            new byte[]{},\n+            Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,\n                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,\n                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 1, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 2, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,\n                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 5, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));\n         // assertArrayEquals(new\n-        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToBytes(0x1234567890ABCDEFL,13,new\n+        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4,\n                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF},\n-            Conversion.longToBytes(0x1234567890ABCDEFL, 13, new byte[]{\n+            Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));\n     }\n \n     /**\n-     * Tests {@link Conversion#intToBytes(int, int, byte[], int, int)}.\n-     */\n-    @Test\n-    public void testIntToBytes() {\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.intToBytes(0x00000000, 100, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 100, 0));\n+     * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToByteArray() {\n+        assertArrayEquals(\n+            new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0));\n+        assertArrayEquals(\n+            new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0));\n+        assertArrayEquals(\n+            new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 100, 0));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 1, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 2, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,\n                 (byte)0xFC, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 5, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n         // assertArrayEquals(new\n-        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToBytes(0x90ABCDEF,13,new\n+        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToByteArray(0x90ABCDEF,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,4));//rejected by assertion\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xFC,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n-            Conversion.intToBytes(0x90ABCDEF, 13, new byte[]{\n+            Conversion.intToByteArray(0x90ABCDEF, 13, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3));\n     }\n \n     /**\n-     * Tests {@link Conversion#shortToBytes(short, int, byte[], int, int)}.\n-     */\n-    @Test\n-    public void testShortToBytes() {\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.shortToBytes((short)0x0000, 100, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n-            new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 100, 0));\n+     * Tests {@link Conversion#shortToByteArray(short, int, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testShortToByteArray() {\n+        assertArrayEquals(\n+            new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0));\n+        assertArrayEquals(\n+            new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0));\n+        assertArrayEquals(\n+            new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 1, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 2, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0xFE, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 5, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1}, 3, 2));\n         // assertArrayEquals(new\n-        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToBytes((short)0xCDEF,13,new\n+        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToByteArray((short)0xCDEF,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion\n         assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xFF,\n-                (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 13, new byte[]{\n+                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 13, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1}, 3, 1));\n     }\n \n     /**\n-     * Tests {@link Conversion#longToHexs(long, int, String, int, int)}.\n-     */\n-    @Test\n-    public void testLongToHexs() {\n-        assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 0, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 100, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 0, \"\", 100, 0));\n+     * Tests {@link Conversion#longToHex(long, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testLongToHex() {\n+        assertEquals(\"\", Conversion.longToHex(0x0000000000000000L, 0, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.longToHex(0x0000000000000000L, 100, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.longToHex(0x0000000000000000L, 0, \"\", 100, 0));\n         assertEquals(\n             \"ffffffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 0));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 0));\n         assertEquals(\n             \"3fffffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.longToHex(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"feffffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 2));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 2));\n         assertEquals(\n             \"fedcffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 4));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 4));\n         assertEquals(\n             \"fedcba098765432fffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 15));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 15));\n         assertEquals(\n             \"fedcba0987654321ffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 16));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 16));\n         assertEquals(\n             \"fff3ffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 3, 1));\n+            Conversion.longToHex(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 3, 1));\n         assertEquals(\n             \"ffffefffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 2));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 2));\n         assertEquals(\n             \"ffffedcfffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 4));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 4));\n         assertEquals(\n             \"ffffedcba098765432ffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 15));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 15));\n         assertEquals(\n             \"ffffedcba0987654321fffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 16));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 16));\n         assertEquals(\n             \"7fffffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 1, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 1, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"bfffffffffffffffffffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 2, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 2, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"fffdb975121fca86420fffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 3, \"ffffffffffffffffffffffff\", 3, 16));\n-        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.longToHexs(0x1234567890ABCDEFL,4,\"ffffffffffffffffffffffff\",3,16));//rejected\n+            Conversion.longToHex(0x1234567890ABCDEFL, 3, \"ffffffffffffffffffffffff\", 3, 16));\n+        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.longToHex(0x1234567890ABCDEFL,4,\"ffffffffffffffffffffffff\",3,16));//rejected\n         // by assertion\n         assertEquals(\n             \"fffedcba0987654321ffffff\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 4, \"ffffffffffffffffffffffff\", 3, 15));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#intToHexs(int, int, String, int, int)}.\n-     */\n-    @Test\n-    public void testIntToHexs() {\n-        assertEquals(\"\", Conversion.intToHexs(0x00000000, 0, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.intToHexs(0x00000000, 100, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.intToHexs(0x00000000, 0, \"\", 100, 0));\n+            Conversion.longToHex(0x1234567890ABCDEFL, 4, \"ffffffffffffffffffffffff\", 3, 15));\n+        assertEquals(\n+            \"fedcba0987654321\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"\", 0, 16));\n+        try {\n+            Conversion.longToHex(0x1234567890ABCDEFL, 0, \"\", 1, 8);\n+            fail(\"Thrown \" + StringIndexOutOfBoundsException.class.getName() + \" expected\");\n+        } catch (final StringIndexOutOfBoundsException e) {\n+            // OK\n+        }\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#intToHex(int, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testIntToHex() {\n+        assertEquals(\"\", Conversion.intToHex(0x00000000, 0, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.intToHex(0x00000000, 100, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.intToHex(0x00000000, 0, \"\", 100, 0));\n         assertEquals(\n             \"ffffffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\n         assertEquals(\n             \"3fffffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.intToHex(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"feffffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\n         assertEquals(\n             \"fedcffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\n         assertEquals(\n             \"fedcba0fffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 7));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 7));\n         assertEquals(\n             \"fedcba09ffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 8));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 8));\n         assertEquals(\n             \"fff3ffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\n+            Conversion.intToHex(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\n         assertEquals(\n             \"ffffefffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\n         assertEquals(\n             \"ffffedcfffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 4));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 4));\n         assertEquals(\n             \"ffffedcba0ffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 7));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 7));\n         assertEquals(\n             \"ffffedcba09fffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 8));\n+            Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 8));\n         assertEquals(\n             \"7fffffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.intToHex(0x90ABCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"bfffffffffffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.intToHex(0x90ABCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"fffdb97512ffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 3, \"ffffffffffffffffffffffff\", 3, 8));\n-        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.intToHexs(0x90ABCDEF,\n+            Conversion.intToHex(0x90ABCDEF, 3, \"ffffffffffffffffffffffff\", 3, 8));\n+        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.intToHex(0x90ABCDEF,\n         // 4,\"ffffffffffffffffffffffff\",3,8));//rejected by assertion\n         assertEquals(\n             \"fffedcba09ffffffffffffff\",\n-            Conversion.intToHexs(0x90ABCDEF, 4, \"ffffffffffffffffffffffff\", 3, 7));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#shortToHexs(short, int, String, int, int)}.\n-     */\n-    @Test\n-    public void testShortToHexs() {\n-        assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 0, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 100, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 0, \"\", 100, 0));\n+            Conversion.intToHex(0x90ABCDEF, 4, \"ffffffffffffffffffffffff\", 3, 7));\n+        assertEquals(\"fedcba09\", Conversion.intToHex(0x90ABCDEF, 0, \"\", 0, 8));\n+        try {\n+            Conversion.intToHex(0x90ABCDEF, 0, \"\", 1, 8);\n+            fail(\"Thrown \" + StringIndexOutOfBoundsException.class.getName() + \" expected\");\n+        } catch (final StringIndexOutOfBoundsException e) {\n+            // OK\n+        }\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#shortToHex(short, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testShortToHex() {\n+        assertEquals(\"\", Conversion.shortToHex((short)0x0000, 0, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.shortToHex((short)0x0000, 100, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.shortToHex((short)0x0000, 0, \"\", 100, 0));\n         assertEquals(\n             \"ffffffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\n+            Conversion.shortToHex((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\n         assertEquals(\n             \"3fffffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.shortToHex((short)0xCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"feffffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\n+            Conversion.shortToHex((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\n         assertEquals(\n             \"fedfffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 3));\n+            Conversion.shortToHex((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 3));\n         assertEquals(\n             \"fedcffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\n+            Conversion.shortToHex((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\n         assertEquals(\n             \"fff3ffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\n+            Conversion.shortToHex((short)0xCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\n         assertEquals(\n             \"ffffefffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\n+            Conversion.shortToHex((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\n         assertEquals(\n             \"7fffffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.shortToHex((short)0xCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"bfffffffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\n+            Conversion.shortToHex((short)0xCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\n         assertEquals(\n             \"fffdb9ffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 3, \"ffffffffffffffffffffffff\", 3, 4));\n-        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.shortToHexs((short)0xCDEF,\n+            Conversion.shortToHex((short)0xCDEF, 3, \"ffffffffffffffffffffffff\", 3, 4));\n+        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.shortToHex((short)0xCDEF,\n         // 4,\"ffffffffffffffffffffffff\",3,4));//rejected by assertion\n         assertEquals(\n             \"fffedcffffffffffffffffff\",\n-            Conversion.shortToHexs((short)0xCDEF, 4, \"ffffffffffffffffffffffff\", 3, 3));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#byteToHexs(byte, int, String, int, int)}.\n-     */\n-    @Test\n-    public void testByteToHexs() {\n-        assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 0, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 100, \"\", 0, 0));\n-        assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 0, \"\", 100, 0));\n-        assertEquals(\"00000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 0));\n-        assertEquals(\"f0000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 1));\n-        assertEquals(\"fe000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 2));\n-        assertEquals(\"000f0\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 3, 1));\n-        assertEquals(\"000fe\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 3, 2));\n-        assertEquals(\"70000\", Conversion.byteToHexs((byte)0xEF, 1, \"00000\", 0, 1));\n-        assertEquals(\"b0000\", Conversion.byteToHexs((byte)0xEF, 2, \"00000\", 0, 1));\n-        assertEquals(\"000df\", Conversion.byteToHexs((byte)0xEF, 3, \"00000\", 3, 2));\n-        // assertEquals(\"00000\",Conversion.byteToHexs((byte)0xEF, 4,\"00000\",3,2));//rejected by\n+            Conversion.shortToHex((short)0xCDEF, 4, \"ffffffffffffffffffffffff\", 3, 3));\n+        assertEquals(\"fedc\", Conversion.shortToHex((short)0xCDEF, 0, \"\", 0, 4));\n+        try {\n+            Conversion.shortToHex((short)0xCDEF, 0, \"\", 1, 4);\n+            fail(\"Thrown \" + StringIndexOutOfBoundsException.class.getName() + \" expected\");\n+        } catch (final StringIndexOutOfBoundsException e) {\n+            // OK\n+        }\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#byteToHex(byte, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testByteToHex() {\n+        assertEquals(\"\", Conversion.byteToHex((byte)0x00, 0, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.byteToHex((byte)0x00, 100, \"\", 0, 0));\n+        assertEquals(\"\", Conversion.byteToHex((byte)0x00, 0, \"\", 100, 0));\n+        assertEquals(\"00000\", Conversion.byteToHex((byte)0xEF, 0, \"00000\", 0, 0));\n+        assertEquals(\"f0000\", Conversion.byteToHex((byte)0xEF, 0, \"00000\", 0, 1));\n+        assertEquals(\"fe000\", Conversion.byteToHex((byte)0xEF, 0, \"00000\", 0, 2));\n+        assertEquals(\"000f0\", Conversion.byteToHex((byte)0xEF, 0, \"00000\", 3, 1));\n+        assertEquals(\"000fe\", Conversion.byteToHex((byte)0xEF, 0, \"00000\", 3, 2));\n+        assertEquals(\"70000\", Conversion.byteToHex((byte)0xEF, 1, \"00000\", 0, 1));\n+        assertEquals(\"b0000\", Conversion.byteToHex((byte)0xEF, 2, \"00000\", 0, 1));\n+        assertEquals(\"000df\", Conversion.byteToHex((byte)0xEF, 3, \"00000\", 3, 2));\n+        // assertEquals(\"00000\",Conversion.byteToHex((byte)0xEF, 4,\"00000\",3,2));//rejected by\n         // assertion\n-        assertEquals(\"000e0\", Conversion.byteToHexs((byte)0xEF, 4, \"00000\", 3, 1));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#longToBools(long, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testLongToBools() {\n+        assertEquals(\"000e0\", Conversion.byteToHex((byte)0xEF, 4, \"00000\", 3, 1));\n+        assertEquals(\"fe\", Conversion.byteToHex((byte)0xEF, 0, \"\", 0, 2));\n+        try {\n+            Conversion.byteToHex((byte)0xEF, 0, \"\", 1, 2);\n+            fail(\"Thrown \" + StringIndexOutOfBoundsException.class.getName() + \" expected\");\n+        } catch (final StringIndexOutOfBoundsException e) {\n+            // OK\n+        }\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#longToBoolArray(long, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToBoolArray() {\n         assertBoolArrayEquals(\n             new boolean[]{},\n-            Conversion.longToBools(0x0000000000000000L, 0, new boolean[]{}, 0, 0));\n+            Conversion.longToBoolArray(0x0000000000000000L, 0, new boolean[]{}, 0, 0));\n         assertBoolArrayEquals(\n             new boolean[]{},\n-            Conversion.longToBools(0x0000000000000000L, 100, new boolean[]{}, 0, 0));\n+            Conversion.longToBoolArray(0x0000000000000000L, 100, new boolean[]{}, 0, 0));\n         assertBoolArrayEquals(\n             new boolean[]{},\n-            Conversion.longToBools(0x0000000000000000L, 0, new boolean[]{}, 100, 0));\n+            Conversion.longToBoolArray(0x0000000000000000L, 0, new boolean[]{}, 100, 0));\n         assertBoolArrayEquals(\n             new boolean[69],\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));\n \n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 true, true, true, true, false, false, true, true, false, true, false, true,\n                 false, false, false, true, false, true, true, false, false, false, true, false,\n                 false, true, false, false, false, false, false, false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 true, true, true, true, false, false, true, true, false, true, false, true,\n                 false, false, false, true, false, true, true, false, false, false, true, false,\n                 false, true, false, false, false, false, false, false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 false, false, true, true, true, true, false, false, true, true, false, true,\n                 false, true, false, false, false, true, false, true, true, false, false, false,\n                 true, false, false, true, false, false, false, false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 true, true, false, false, true, true, false, true, false, true, false, false,\n                 false, true, false, true, true, false, false, false, true, false, false, true,\n                 false, false, false, false, false, false, false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, false, false, true, true, false, true, false, true, false, false, false,\n                 true, false, true, true, false, false, false, true, false, false, true, false,\n                 false, false, false, false, false, false, false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));\n \n         // assertBoolArrayEquals(new boolean[]{false,false,false, true, true, false, true, true,\n         // true, true, false, true, true, false, false, true, true, true, true, false, true,\n         // false, false, false, true, true, true, true, false, false, true, true, false, true,\n         // false, true, false, false, false, true, false, true, true, false, false, false, true,\n         // false, false, true, false, false, false\n-        // ,false,false,false,false},Conversion.longToBools(0x1234567890ABCDEFL, 2,new\n+        // ,false,false,false,false},Conversion.longToBoolArray(0x1234567890ABCDEFL, 2,new\n         // boolean[69], 3, 63));//rejected by assertion\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, true, true, true, true, false, false, true, true, false, true, false,\n                 true, false, false, false, true, false, true, true, false, false, false, true,\n                 false, false, true, false, false, false, false, false, false, false},\n-            Conversion.longToBools(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#intToBools(int, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testIntToBools() {\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.intToBools(0x00000000, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.intToBools(0x00000000, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.intToBools(0x00000000, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n-            new boolean[69], Conversion.intToBools(0x90ABCDEF, 0, new boolean[69], 0, 0));\n+            Conversion.longToBoolArray(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#intToBoolArray(int, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToBoolArray() {\n+        assertBoolArrayEquals(\n+            new boolean[]{}, Conversion.intToBoolArray(0x00000000, 0, new boolean[]{}, 0, 0));\n+        assertBoolArrayEquals(\n+            new boolean[]{}, Conversion.intToBoolArray(0x00000000, 100, new boolean[]{}, 0, 0));\n+        assertBoolArrayEquals(\n+            new boolean[]{}, Conversion.intToBoolArray(0x00000000, 0, new boolean[]{}, 100, 0));\n+        assertBoolArrayEquals(\n+            new boolean[69], Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[69], 0, 0));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 1));\n+            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 1));\n         assertBoolArrayEquals(new boolean[]{\n             true, true, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 2));\n+            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 2));\n         assertBoolArrayEquals(new boolean[]{\n             true, true, true, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 3));\n+            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 3));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, false, true, false, false, false, false, false, false,\n-                false, false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 31));\n+                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 31));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, false, true, false, false, true, false, false, false,\n-                false, false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 32));\n+                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 32));\n         assertBoolArrayEquals(new boolean[]{\n             false, false, true, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 2, 1));\n+            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 2, 1));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, true, true, false, true, false, true,\n                 false, true, false, false, false, false, true, false, false, true, false,\n-                false, false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 2, 32));\n+                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 2, 32));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, true, true, false, true, false, true, false, true, false,\n                 false, false, false, true, false, false, true, false, false, false, false,\n-                false, false}, Conversion.intToBools(0x90ABCDEF, 1, new boolean[37], 0, 31));\n+                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 1, new boolean[37], 0, 31));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, true, true, false, true, false, true, false, true, false, false,\n                 false, false, true, false, false, true, false, false, false, false, false,\n-                false, false}, Conversion.intToBools(0x90ABCDEF, 2, new boolean[37], 0, 30));\n+                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 2, new boolean[37], 0, 30));\n         // assertBoolArrayEquals(new boolean[]{false, false, false, true, true, false, true,\n         // true,\n         // true, true, false, true, true, false, false, true, true, true, true, false, true,\n         // false, true, false, true, false, false, false, false, true, false, false, false,\n-        // false, false, false, false},Conversion.intToBools(0x90ABCDEF, 2,new boolean[37],\n+        // false, false, false, false},Conversion.intToBoolArray(0x90ABCDEF, 2,new boolean[37],\n         // 3,31));//rejected by assertion\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, true, true, false, true, false, true, false,\n                 true, false, false, false, false, true, false, false, true, false, false,\n-                false, false}, Conversion.intToBools(0x90ABCDEF, 2, new boolean[37], 3, 30));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#shortToBools(short, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testShortToBools() {\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.shortToBools((short)0x0000, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.shortToBools((short)0x0000, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.shortToBools((short)0x0000, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n-            new boolean[69], Conversion.shortToBools((short)0xCDEF, 0, new boolean[69], 0, 0));\n+                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 2, new boolean[37], 3, 30));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#shortToBoolArray(short, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testShortToBoolArray() {\n+        assertBoolArrayEquals(\n+            new boolean[]{},\n+            Conversion.shortToBoolArray((short)0x0000, 0, new boolean[]{}, 0, 0));\n+        assertBoolArrayEquals(\n+            new boolean[]{},\n+            Conversion.shortToBoolArray((short)0x0000, 100, new boolean[]{}, 0, 0));\n+        assertBoolArrayEquals(\n+            new boolean[]{},\n+            Conversion.shortToBoolArray((short)0x0000, 0, new boolean[]{}, 100, 0));\n+        assertBoolArrayEquals(\n+            new boolean[69],\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[69], 0, 0));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 1));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 1));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 2));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 2));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 3));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 3));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 15));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 15));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 16));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 16));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 2, 1));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 2, 1));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 2, 16));\n+            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 2, 16));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 1, new boolean[21], 0, 15));\n+            Conversion.shortToBoolArray((short)0xCDEF, 1, new boolean[21], 0, 15));\n         assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, false, false, false, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 2, new boolean[21], 0, 14));\n+            Conversion.shortToBoolArray((short)0xCDEF, 2, new boolean[21], 0, 14));\n         // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\n         // true, true, false, true, true, false, false, true, false, false, false, false,\n-        // false},Conversion.shortToBools((short)0xCDEF, 2,new boolean[21], 3,15));//rejected by\n+        // false},Conversion.shortToBoolArray((short)0xCDEF, 2,new boolean[21],\n+        // 3,15));//rejected by\n         // assertion\n         assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, false, false, false, false},\n-            Conversion.shortToBools((short)0xCDEF, 2, new boolean[21], 3, 14));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#byteToBools(byte, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testByteToBools() {\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.byteToBools((byte)0x00, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.byteToBools((byte)0x00, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.byteToBools((byte)0x00, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n-            new boolean[69], Conversion.byteToBools((byte)0xEF, 0, new boolean[69], 0, 0));\n+            Conversion.shortToBoolArray((short)0xCDEF, 2, new boolean[21], 3, 14));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#byteToBoolArray(byte, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testByteToBoolArray() {\n+        assertBoolArrayEquals(\n+            new boolean[]{}, Conversion.byteToBoolArray((byte)0x00, 0, new boolean[]{}, 0, 0));\n+        assertBoolArrayEquals(\n+            new boolean[]{}, Conversion.byteToBoolArray((byte)0x00, 100, new boolean[]{}, 0, 0));\n+        assertBoolArrayEquals(\n+            new boolean[]{}, Conversion.byteToBoolArray((byte)0x00, 0, new boolean[]{}, 100, 0));\n+        assertBoolArrayEquals(\n+            new boolean[69], Conversion.byteToBoolArray((byte)0xEF, 0, new boolean[69], 0, 0));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 1));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 1));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 2));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 2));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 3));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 3));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, true, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 7));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 7));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, true, false, false, true, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 8));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 8));\n         assertBoolArrayEquals(new boolean[]{\n             false, false, true, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 2, 1));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 2, 1));\n         assertBoolArrayEquals(new boolean[]{\n             false, false, true, false, true, false, true, false, false, true, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 2, 8));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 2, 8));\n         assertBoolArrayEquals(new boolean[]{\n             false, true, false, true, false, false, true, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 1, new boolean[13], 0, 7));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 1, new boolean[13], 0, 7));\n         assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, false, true, false, false, false, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 2, new boolean[13], 0, 6));\n+            false}, Conversion.byteToBoolArray((byte)0x95, 2, new boolean[13], 0, 6));\n         // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\n-        // false, false, false, false, false},Conversion.byteToBools((byte)0x95, 2,new\n+        // false, false, false, false, false},Conversion.byteToBoolArray((byte)0x95, 2,new\n         // boolean[13], 3, 7));//rejected by assertion\n         assertBoolArrayEquals(new boolean[]{\n             false, false, false, true, false, true, false, false, true, false, false, false,\n-            false}, Conversion.byteToBools((byte)0x95, 2, new boolean[13], 3, 6));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#uuidToBytes(UUID, byte[], int, int)}.\n-     */\n-    @Test\n-    public void testUuidToBytes() {\n+            false}, Conversion.byteToBoolArray((byte)0x95, 2, new boolean[13], 3, 6));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#uuidToByteArray(UUID, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testUuidToByteArray() {\n         assertArrayEquals(new byte[]{\n             (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,\n             (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,\n-            (byte)0xff, (byte)0xff}, Conversion.uuidToBytes(new UUID(\n+            (byte)0xff, (byte)0xff}, Conversion.uuidToByteArray(new UUID(\n             0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16));\n         assertArrayEquals(new byte[]{\n             (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd, (byte)0xee,\n             (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33, (byte)0x44, (byte)0x55,\n-            (byte)0x66, (byte)0x77}, Conversion.uuidToBytes(new UUID(\n+            (byte)0x66, (byte)0x77}, Conversion.uuidToByteArray(new UUID(\n             0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16));\n         assertArrayEquals(new byte[]{\n             (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x88, (byte)0x99, (byte)0xaa,\n             (byte)0xbb, (byte)0xcc, (byte)0xdd, (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x00,\n-            (byte)0x00, (byte)0x00}, Conversion.uuidToBytes(new UUID(\n+            (byte)0x00, (byte)0x00}, Conversion.uuidToByteArray(new UUID(\n             0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8));\n         assertArrayEquals(new byte[]{\n             (byte)0x00, (byte)0x00, (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc,\n             (byte)0xdd, (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33,\n-            (byte)0x00, (byte)0x00}, Conversion.uuidToBytes(new UUID(\n+            (byte)0x00, (byte)0x00}, Conversion.uuidToByteArray(new UUID(\n             0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12));\n     }\n \n     /**\n-     * Tests {@link Conversion#bytesToUuid(byte[], int)}.\n-     */\n-    @Test\n-    public void testBytesToUuid() {\n+     * Tests {@link Conversion#byteArrayToUuid(byte[], int)}.\n+     */\n+    @Test\n+    public void testByteArrayToUuid() {\n         assertEquals(\n             new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL),\n-            Conversion.bytesToUuid(new byte[]{\n+            Conversion.byteArrayToUuid(new byte[]{\n                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,\n                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,\n                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff}, 0));\n         assertEquals(\n             new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),\n-            Conversion.bytesToUuid(new byte[]{\n+            Conversion.byteArrayToUuid(new byte[]{\n                 (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd,\n                 (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33,\n                 (byte)0x44, (byte)0x55, (byte)0x66, (byte)0x77}, 0));\n         assertEquals(\n             new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),\n-            Conversion.bytesToUuid(new byte[]{\n+            Conversion.byteArrayToUuid(new byte[]{\n                 0, 0, (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd,\n                 (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33,\n                 (byte)0x44, (byte)0x55, (byte)0x66, (byte)0x77}, 2));", "timestamp": 1349301911, "metainfo": ""}