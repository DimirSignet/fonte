{"sha": "5be68dc7271c56a1ae0d52f48589436aa6057316", "log": "Javadoc fixes and change from append(String) to append(char)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n import org.apache.commons.lang.ClassUtils;\n import org.apache.commons.lang.StringUtils;\n /**\n- * <code>ReflectionUtils</code> contains utility methods for working for\n- * reflection.\n+ * <p><code>ReflectionUtils</code> contains utility methods for working for\n+ * reflection.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionUtils.java,v 1.6 2002/12/25 22:03:00 scolebourne Exp $\n+ * @version $Id: ReflectionUtils.java,v 1.7 2003/07/14 22:28:48 bayard Exp $\n  */\n public class ReflectionUtils {\n     \n     /**\n-     * ReflectionUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ReflectionUtils.getShortClassName(obj)</code>.\n+     * <p>ReflectionUtils instances should NOT be constructed in standard programming.</p>\n+     *\n+     * <p>Instead, the class should be used as <code>ReflectionUtils.getShortClassName(obj)</code>.\n      * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * to operate.</p>\n      */\n     public ReflectionUtils() {\n     }\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Tests whether the specified field or method is \n-     * <code>static</code>.\n-     * \n-     * @param member  the member to test, must not be null\n-     * @return true if the member is static\n+     * <p>Tests whether the specified field or method is\n+     * <code>static</code>.</p>\n+     * \n+     * @param member  the member to test, must not be <code>null</code>\n+     * @return <code>true</code> if the member is static\n      */\n     public static boolean isStatic(Member member) {\n         if (member == null) {\n     }\n \n     /**\n-     * Tests whether the specified field or method is \n-     * <code>final</code>.\n-     * \n-     * @param member  the member to test, must not be null\n-     * @return true if the member is final\n+     * <p>Tests whether the specified field or method is\n+     * <code>final</code>.</p>\n+     * \n+     * @param member  the member to test, must not be <code>null</code>\n+     * @return <code>true</code> if the member is final\n      */\n     public static boolean isFinal(Member member) {\n         if (member == null) {\n     }\n \n     /**\n-     * Tests whether the specified field, method or constructor is \n-     * <code>public</code>.\n-     * \n-     * @param member  the member to test, must not be null\n-     * @return true if the member is public scoped\n+     * <p>Tests whether the specified field, method or constructor is\n+     * <code>public</code>.</p>\n+     * \n+     * @param member  the member to test, must not be <code>null</code>\n+     * @return <code>true</code> if the member is public scoped\n      */\n     public static boolean isPublicScope(Member member) {\n         if (member == null) {\n     }\n \n     /**\n-     * Tests whether the specified field, method or constructor is \n-     * <code>protected</code>.\n-     * \n-     * @param member  the member to test, must not be null\n-     * @return true if the member is protected scoped\n+     * <p>Tests whether the specified field, method or constructor is\n+     * <code>protected</code>.</p>\n+     * \n+     * @param member  the member to test, must not be <code>null</code>\n+     * @return <code>true</code> if the member is protected scoped\n      */\n     public static boolean isProtectedScope(Member member) {\n         if (member == null) {\n     }\n \n     /**\n-     * Tests whether the specified field, method or constructor is \n-     * package (default) scoped.\n-     * \n-     * @param member  the member to test, must not be null\n-     * @return true if the member is package scoped\n+     * <p>Tests whether the specified field, method or constructor is\n+     * package (default) scoped.</p>\n+     * \n+     * @param member  the member to test, must not be <code>null</code>\n+     * @return <code>true</code> if the member is package scoped\n      */\n     public static boolean isPackageScope(Member member) {\n         return !(isPublicScope(member) || isProtectedScope(member) || isPrivateScope(member));\n     }\n \n     /**\n-     * Tests whether the specified field, method or constructor is \n-     * <code>private</code>.\n-     * \n-     * @param member  the member to test, must not be null\n-     * @return true if the member is private scoped\n+     * <p>Tests whether the specified field, method or constructor is\n+     * <code>private</code>.</p>\n+     * \n+     * @param member  the member to test, must not be <code>null</code>\n+     * @return <code>true</code> if the member is private scoped\n      */\n     public static boolean isPrivateScope(Member member) {\n         if (member == null) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a class object for the specified string.\n+     * <p>Gets a class object for the specified string.</p>\n      *\n      * @param className  fully qualified class name to find, must not be empty\n      * @return Class object for class\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Checks if the requested Class array is compatible with the specified\n-     * parameter array.\n-     * Primitive classes are handled correctly .\n-     * <p>\n-     * In other words, a <code>boolean</code> Class will be converted to \n+     * <p>Checks if the requested Class array is compatible with the specified\n+     * parameter array.</p>\n+     *\n+     * <p>Primitive classes are handled correctly .</p>\n+     *\n+     * <p>In other words, a <code>boolean</code> Class will be converted to\n      * a <code>Boolean</code> Class and so on.</p>\n      *\n      * <p>This method also handles widening for primitives as given in section 5.1.2 of the\n      *\n      * @param requestedTypes  the class array requested\n      * @param paramTypes  the actual class array for the method\n-     * @return true if the parameters are compatible\n+     * @return <code>true</code> if the parameters are compatible\n      */\n     public static boolean isCompatible(Class[] requestedTypes, Class[] paramTypes) {\n         if (ArrayUtils.isSameLength(requestedTypes, paramTypes) == false) {\n      * @param parameterType the type of parameter accepted by the method\n      * @param requestedType the type of parameter being requested \n      *\n-     * @return true if the assignement is compatible.\n+     * @return <code>true</code> if the assignement is compatible.\n      */\n     public static boolean isCompatible(Class requestedType, Class parameterType) {\n         // try plain assignment\n \n     \n     /**\n-     * Converts a primitive class to its matching object class.\n-     * Non-primitive classes are unaffected.\n-     * <p>\n-     * In other words, a <code>boolean</code> Class will be converted to \n-     * a <code>Boolean</code> Class and so on.\n+     * <p>Converts a primitive class to its matching object class.\n+     * Non-primitive classes are unaffected.</p>\n+     *\n+     * <p>In other words, a <code>boolean</code> Class will be converted to\n+     * a <code>Boolean</code> Class and so on.</p>\n      *\n      * @param cls  the class to convert\n      * @return converted class\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static Class convertPrimitiveClass(Class cls) {\n         if (cls == null) {\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Produces nicely formatted informational error messages for reflection errors.\n+     * <p>Produces nicely formatted informational error messages for reflection\n+     * errors.</p>\n      * \n      * @param th  the throwable\n      * @param desc  the short description of the action, such as 'getting field'\n         buf.append(desc);\n         buf.append(\" on Class '\");\n         buf.append(className);\n-        buf.append(\"'\");\n+        buf.append('\\'');\n         if (types != null) {\n             buf.append(\" for types \");\n             buf.append(ArrayUtils.toString(types));\n         if (memberName != null) {\n             buf.append(\" for method '\");\n             buf.append(memberName);\n-            buf.append(\"'\");\n+            buf.append('\\'');\n         }\n         if (message != null) {\n             buf.append(\" - \");", "timestamp": 1058221728, "metainfo": ""}