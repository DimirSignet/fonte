{"sha": "ac343e1af466d62bc1aee05644d6fee675723914", "log": "[LANG-653] Added ConstantInitializer class  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import org.apache.commons.lang3.ObjectUtils;\n+\n+/**\n+ * <p>\n+ * A very simple implementation of the {@link ConcurrentInitializer} interface\n+ * which always returns the same object.\n+ * </p>\n+ * <p>\n+ * An instance of this class is passed a reference to an object when it is\n+ * constructed. The {@link #get()} method just returns this object. No\n+ * synchronization is required.\n+ * </p>\n+ * <p>\n+ * This class is useful for instance for unit testing or in cases where a\n+ * specific object has to be passed to an object which expects a\n+ * {@link ConcurrentInitializer}.\n+ * </p>\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ * @param <T> the type of the object managed by this initializer\n+ */\n+public class ConstantInitializer<T> implements ConcurrentInitializer<T> {\n+    /** Constant for the format of the string representation. */\n+    private static final String FMT_TO_STRING = \"ConstantInitializer@%d [ object = %s ]\";\n+\n+    /** Stores the managed object. */\n+    private final T object;\n+\n+    /**\n+     * Creates a new instance of {@code ConstantInitializer} and initializes it\n+     * with the object to be managed. The {@code get()} method will always\n+     * return the object passed here. This class does not place any restrictions\n+     * on the object. It may be <b>null</b>, then {@code get()} will return\n+     * <b>null</b>, too.\n+     *\n+     * @param obj the object to be managed by this initializer\n+     */\n+    public ConstantInitializer(T obj) {\n+        object = obj;\n+    }\n+\n+    /**\n+     * Directly returns the object that was passed to the constructor. This is\n+     * the same object as returned by {@code get()}. However, this method does\n+     * not declare that it throws an exception.\n+     *\n+     * @return the object managed by this initializer\n+     */\n+    public final T getObject() {\n+        return object;\n+    }\n+\n+    /**\n+     * Returns the object managed by this initializer. This implementation just\n+     * returns the object passed to the constructor.\n+     *\n+     * @return the object managed by this initializer\n+     * @throws ConcurrentException if an error occurs\n+     */\n+    public T get() throws ConcurrentException {\n+        return getObject();\n+    }\n+\n+    /**\n+     * Returns a hash code for this object. This implementation returns the hash\n+     * code of the managed object.\n+     *\n+     * @return a hash code for this object\n+     */\n+    @Override\n+    public int hashCode() {\n+        return (getObject() != null) ? getObject().hashCode() : 0;\n+    }\n+\n+    /**\n+     * Compares this object with another one. This implementation returns\n+     * <b>true</b> if and only if the passed in object is an instance of\n+     * {@code ConstantInitializer} which refers to an object equals to the\n+     * object managed by this instance.\n+     *\n+     * @param obj the object to compare to\n+     * @return a flag whether the objects are equal\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!(obj instanceof ConstantInitializer<?>)) {\n+            return false;\n+        }\n+\n+        ConstantInitializer<?> c = (ConstantInitializer<?>) obj;\n+        return ObjectUtils.equals(getObject(), c.getObject());\n+    }\n+\n+    /**\n+     * Returns a string representation for this object. This string also\n+     * contains a string representation of the object managed by this\n+     * initializer.\n+     *\n+     * @return a string for this object\n+     */\n+    @Override\n+    public String toString() {\n+        return String.format(FMT_TO_STRING, System.identityHashCode(this),\n+                String.valueOf(getObject()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.regex.Pattern;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test class for {@code ConstantInitializer}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class ConstantInitializerTest {\n+    /** Constant for the object managed by the initializer. */\n+    private static final Integer VALUE = 42;\n+\n+    /** The initializer to be tested. */\n+    private ConstantInitializer<Integer> init;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        init = new ConstantInitializer<Integer>(VALUE);\n+    }\n+\n+    /**\n+     * Helper method for testing equals() and hashCode().\n+     *\n+     * @param obj the object to compare with the test instance\n+     * @param expected the expected result\n+     */\n+    private void checkEquals(Object obj, boolean expected) {\n+        assertEquals(\"Wrong result of equals\", expected, init.equals(obj));\n+        if (obj != null) {\n+            assertEquals(\"Not symmetric\", expected, obj.equals(init));\n+        }\n+        if (expected) {\n+            assertEquals(\"Different hash codes\", init.hashCode(),\n+                    obj.hashCode());\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the correct object is returned.\n+     */\n+    @Test\n+    public void testGetObject() {\n+        assertEquals(\"Wrong object\", VALUE, init.getObject());\n+    }\n+\n+    /**\n+     * Tests whether get() returns the correct object.\n+     */\n+    @Test\n+    public void testGet() throws ConcurrentException {\n+        assertEquals(\"Wrong object\", VALUE, init.get());\n+    }\n+\n+    /**\n+     * Tests equals() if the expected result is true.\n+     */\n+    @Test\n+    public void testEqualsTrue() {\n+        checkEquals(init, true);\n+        ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(\n+                new Integer(VALUE.intValue()));\n+        checkEquals(init2, true);\n+        init = new ConstantInitializer<Integer>(null);\n+        init2 = new ConstantInitializer<Integer>(null);\n+        checkEquals(init2, true);\n+    }\n+\n+    /**\n+     * Tests equals() if the expected result is false.\n+     */\n+    @Test\n+    public void testEqualsFalse() {\n+        ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(\n+                null);\n+        checkEquals(init2, false);\n+        init2 = new ConstantInitializer<Integer>(VALUE + 1);\n+        checkEquals(init2, false);\n+    }\n+\n+    /**\n+     * Tests equals() with objects of other classes.\n+     */\n+    @Test\n+    public void testEqualsWithOtherObjects() {\n+        checkEquals(null, false);\n+        checkEquals(this, false);\n+        checkEquals(new ConstantInitializer<String>(\"Test\"), false);\n+    }\n+\n+    /**\n+     * Tests the string representation.\n+     */\n+    @Test\n+    public void testToString() {\n+        String s = init.toString();\n+        Pattern pattern = Pattern\n+                .compile(\"ConstantInitializer@\\\\d+ \\\\[ object = \" + VALUE\n+                        + \" \\\\]\");\n+        assertTrue(\"Wrong string: \" + s, pattern.matcher(s).matches());\n+    }\n+\n+    /**\n+     * Tests the string representation if the managed object is null.\n+     */\n+    @Test\n+    public void testToStringNull() {\n+        String s = new ConstantInitializer<Object>(null).toString();\n+        assertTrue(\"Object not found: \" + s, s.indexOf(\"object = null\") > 0);\n+    }\n+}", "timestamp": 1287779529, "metainfo": ""}