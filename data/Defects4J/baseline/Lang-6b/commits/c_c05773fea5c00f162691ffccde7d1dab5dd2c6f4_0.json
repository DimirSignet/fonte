{"sha": "c05773fea5c00f162691ffccde7d1dab5dd2c6f4", "log": "Filling out ReverseComparator testing  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java\n+++ b/src/test/java/org/apache/commons/lang3/compare/ReverseComparatorTest.java\n         assertTrue(\"Comparison wasn't reversed\", rc.compare( \"aardvark\", \"baa\" ) > 0 );\n     }\n \n+    @Test\n+    public void testTwoCallsCancel() {\n+        ReverseComparator rc = new ReverseComparator(new ReverseComparator());\n+\n+        // back to front tests\n+        assertTrue(\"Reversal wasn't cancelled out\", rc.compare( 1, 2 ) < 0 );\n+        assertTrue(\"Reversal wasn't cancelled out\", rc.compare( 2, 1 ) > 0 );\n+        assertTrue(\"Reversal wasn't cancelled out\", rc.compare( \"aardvark\", \"baa\" ) < 0 );\n+        assertTrue(\"Reversal wasn't cancelled out\", rc.compare( \"baa\", \"aardvark\" ) > 0 );\n+    }\n+\n+    @Test\n+    public void testEquality() {\n+        ReverseComparator rc1 = new ReverseComparator();\n+        ReverseComparator rc2 = new ReverseComparator(rc1);\n+        ReverseComparator rc3 = new ReverseComparator(rc1);\n+\n+        // test same instance\n+        assertTrue(\"Same instance wasn't equal\", rc1.equals(rc1));\n+        assertEquals(\"Equal instance has different hash code\", rc1.hashCode(), rc1.hashCode());\n+\n+        // test null not equal\n+        assertFalse(\"Null was equal\", rc1.equals(null));\n+\n+        // test diff subcomparator not equal\n+        assertFalse(\"Was equal despite different nested comparators\", rc1.equals(rc2));\n+\n+        // test same subcomparator equal\n+        assertTrue(\"Wasn't equal despite same nested comparator\", rc2.equals(rc3));\n+        assertEquals(\"Same subcomparator had different hash code\", rc2.hashCode(), rc3.hashCode());\n+\n+        // test different type not equal\n+        assertFalse(\"Was equal despite not being same class\", rc1.equals(this));\n+    }\n+\n }", "timestamp": 1313947596, "metainfo": ""}