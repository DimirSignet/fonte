{"sha": "d6eefecdec741e4843be1d96b806778245f30fa3", "log": "[LANG-845] Spelling fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      *\n      * @param array  the array to retrieve the length from, may be null\n      * @return The length of the array, or {@code 0} if the array is {@code null}\n-     * @throws IllegalArgumentException if the object arguement is not an array.\n+     * @throws IllegalArgumentException if the object argument is not an array.\n      * @since 2.1\n      */\n     public static int getLength(Object array) {\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n      * @param parameterTypes  the list of parameters\n      * @return the method\n      * @throws NullPointerException if the class is null\n-     * @throws SecurityException if a a security violation occured\n+     * @throws SecurityException if a security violation occurred\n      * @throws NoSuchMethodException if the method is not found in the given class\n      *  or if the metothod doen't conform with the requirements\n      */\n--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n      *  negative treated as zero, larger than chain size returns -1\n      * @param subclass if <code>true</code>, compares with {@link Class#isAssignableFrom(Class)}, otherwise compares\n      * using references\n-     * @return index of the <code>type</code> within throwables nested withing the specified <code>throwable</code>\n+     * @return index of the <code>type</code> within throwables nested within the specified <code>throwable</code>\n      */\n     private static int indexOf(Throwable throwable, Class<?> type, int fromIndex, boolean subclass) {\n         if (throwable == null || type == null) {\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n      * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>\n      *\n      * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.\n-     * If the whole number is zero it will be ommitted. If the numerator is zero,\n+     * If the whole number is zero it will be omitted. If the numerator is zero,\n      * only the whole number is returned.</p>\n      *\n      * @return a <code>String</code> form of the fraction\n--- a/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n      * Deletes all parts of the builder that the matcher matches.\n      * <p>\n      * Matchers can be used to perform advanced deletion behaviour.\n-     * For example you could write a matcher to delete all occurances\n+     * For example you could write a matcher to delete all occurrences\n      * where the character 'a' is followed by a number.\n      *\n      * @param matcher  the matcher to use to find the deletion, null causes no action\n      * Replaces all matches within the builder with the replace string.\n      * <p>\n      * Matchers can be used to perform advanced replace behaviour.\n-     * For example you could write a matcher to replace all occurances\n+     * For example you could write a matcher to replace all occurrences\n      * where the character 'a' is followed by a number.\n      *\n      * @param matcher  the matcher to use to find the deletion, null causes no action\n      * Advanced search and replaces within the builder using a matcher.\n      * <p>\n      * Matchers can be used to perform advanced behaviour.\n-     * For example you could write a matcher to delete all occurances\n+     * For example you could write a matcher to delete all occurrences\n      * where the character 'a' is followed by a number.\n      *\n      * @param matcher  the matcher to use to find the deletion, null causes no action\n      * Replaces within the builder using a matcher.\n      * <p>\n      * Matchers can be used to perform advanced behaviour.\n-     * For example you could write a matcher to delete all occurances\n+     * For example you could write a matcher to delete all occurrences\n      * where the character 'a' is followed by a number.\n      *\n      * @param matcher  the matcher to use to find the deletion, null causes no action\n--- a/src/main/java/org/apache/commons/lang3/text/StrMatcher.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrMatcher.java\n      * Only values in the buffer between the specifed indices may be accessed.\n      * <p>\n      * The matching code may check one character or many.\n-     * It may check characters preceeding <code>pos</code> as well as those\n+     * It may check characters preceding <code>pos</code> as well as those\n      * after, so long as no checks exceed the bounds specified.\n      * <p>\n      * It must return zero for no match, or a positive number if a match was found.\n      * The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>.\n      * <p>\n      * The matching code may check one character or many.\n-     * It may check characters preceeding <code>pos</code> as well as those after.\n+     * It may check characters preceding <code>pos</code> as well as those after.\n      * <p>\n      * It must return zero for no match, or a positive number if a match was found.\n      * The number indicates the number of characters that matched.\n--- a/src/main/java/org/apache/commons/lang3/time/StopWatch.java\n+++ b/src/main/java/org/apache/commons/lang3/time/StopWatch.java\n         } else if (this.runningState == STATE_RUNNING) {\n             return System.nanoTime() - this.startTime;\n         }\n-        throw new RuntimeException(\"Illegal running state has occured. \");\n+        throw new RuntimeException(\"Illegal running state has occurred.\");\n     }\n \n     /**", "timestamp": 1351039852, "metainfo": ""}