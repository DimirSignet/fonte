{"sha": "e6bd69471a4df367f95aa3846a7af288665f3290", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Tests for ComparatorChain.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Unknown\n+ */\n+public class TestComparatorChain extends AbstractTestComparator<TestComparatorChain.PseudoRow> {\n+\n+    public TestComparatorChain(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public Comparator<PseudoRow> makeObject() {\n+        ComparatorChain<PseudoRow> chain = new ComparatorChain<PseudoRow>(new ColumnComparator(0));\n+        chain.addComparator(new ColumnComparator(1), true); // reverse the second column\n+        chain.addComparator(new ColumnComparator(2), false);\n+        return chain;\n+    }\n+\n+    public void testNoopComparatorChain() {\n+        ComparatorChain<Integer> chain = new ComparatorChain<Integer>();\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+        chain.addComparator(new ComparableComparator<Integer>());\n+\n+        int correctValue = i1.compareTo(i2);\n+        assertTrue(\"Comparison returns the right order\", chain.compare(i1, i2) == correctValue);\n+    }\n+\n+    public void testBadNoopComparatorChain() {\n+        ComparatorChain<Integer> chain = new ComparatorChain<Integer>();\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+        try {\n+            chain.compare(i1,i2);\n+            fail(\"An exception should be thrown when a chain contains zero comparators.\");\n+        } catch (UnsupportedOperationException e) {\n+        }\n+    }\n+\n+    public void testListComparatorChain() {\n+        List<Comparator<Integer>> list = new LinkedList<Comparator<Integer>>();\n+        list.add(new ComparableComparator<Integer>());\n+        ComparatorChain<Integer> chain = new ComparatorChain<Integer>(list);\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+\n+        int correctValue = i1.compareTo(i2);\n+        assertTrue(\"Comparison returns the right order\", chain.compare(i1, i2) == correctValue);\n+    }\n+\n+    public void testBadListComparatorChain() {\n+        List<Comparator<Integer>> list = new LinkedList<Comparator<Integer>>();\n+        ComparatorChain<Integer> chain = new ComparatorChain<Integer>(list);\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+        try {\n+            chain.compare(i1, i2);\n+            fail(\"An exception should be thrown when a chain contains zero comparators.\");\n+        } catch (UnsupportedOperationException e) {\n+        }\n+    }\n+\n+    public void testComparatorChainOnMinvaluedCompatator() {\n+        // -1 * Integer.MIN_VALUE is less than 0,\n+        // test that ComparatorChain handles this edge case correctly\n+        ComparatorChain<Integer> chain = new ComparatorChain<Integer>();\n+        chain.addComparator(new Comparator<Integer>() {\n+            public int compare(Integer a, Integer b) {\n+                int result = a.compareTo(b);\n+                if (result < 0) {\n+                    return Integer.MIN_VALUE;\n+                }\n+                if (result > 0) {\n+                    return Integer.MAX_VALUE;\n+                }\n+                return 0;\n+            }\n+        }, true);\n+\n+        assertTrue(chain.compare(new Integer(4), new Integer(5)) > 0);\n+        assertTrue(chain.compare(new Integer(5), new Integer(4)) < 0);\n+        assertTrue(chain.compare(new Integer(4), new Integer(4)) == 0);\n+    }\n+\n+    @Override\n+    public List<PseudoRow> getComparableObjectsOrdered() {\n+        List<PseudoRow> list = new LinkedList<PseudoRow>();\n+        // this is the correct order assuming a\n+        // \"0th forward, 1st reverse, 2nd forward\" sort\n+        list.add(new PseudoRow(1, 2, 3));\n+        list.add(new PseudoRow(2, 3, 5));\n+        list.add(new PseudoRow(2, 2, 4));\n+        list.add(new PseudoRow(2, 2, 8));\n+        list.add(new PseudoRow(3, 1, 0));\n+        list.add(new PseudoRow(4, 4, 4));\n+        list.add(new PseudoRow(4, 4, 7));\n+        return list;\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    public static class PseudoRow implements Serializable {\n+\n+        public int cols[] = new int[3];\n+\n+        public PseudoRow(int col1, int col2, int col3) {\n+            cols[0] = col1;\n+            cols[1] = col2;\n+            cols[2] = col3;\n+        }\n+\n+        public int getColumn(int colIndex) {\n+            return cols[colIndex];\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder buf = new StringBuilder();\n+            buf.append(\"[\");\n+            buf.append(cols[0]);\n+            buf.append(\",\");\n+            buf.append(cols[1]);\n+            buf.append(\",\");\n+            buf.append(cols[2]);\n+            buf.append(\"]\");\n+            return buf.toString();\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (!(o instanceof PseudoRow)) {\n+                return false;\n+            }\n+\n+            PseudoRow row = (PseudoRow) o;\n+            if (getColumn(0) != row.getColumn(0)) {\n+                return false;\n+            }\n+\n+            if (getColumn(1) != row.getColumn(1)) {\n+                return false;\n+            }\n+\n+            if (getColumn(2) != row.getColumn(2)) {\n+                return false;\n+            }\n+\n+            return true;\n+        }\n+\n+    }\n+\n+    public static class ColumnComparator implements Comparator<PseudoRow>, Serializable {\n+        private static final long serialVersionUID = -2284880866328872105L;\n+\n+        protected int colIndex = 0;\n+\n+        public ColumnComparator(int colIndex) {\n+            this.colIndex = colIndex;\n+        }\n+\n+        public int compare(PseudoRow o1, PseudoRow o2) {\n+\n+            int col1 = o1.getColumn(colIndex);\n+            int col2 = o2.getColumn(colIndex);\n+\n+            if (col1 > col2) {\n+                return 1;\n+            }\n+            if (col1 < col2) {\n+                return -1;\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return colIndex;\n+        }\n+\n+        @Override\n+        public boolean equals(Object that) {\n+            return that instanceof ColumnComparator && colIndex == ((ColumnComparator) that).colIndex;\n+        }\n+    }\n+}", "timestamp": 1312780796, "metainfo": ""}