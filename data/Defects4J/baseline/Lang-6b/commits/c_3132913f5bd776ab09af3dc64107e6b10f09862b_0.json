{"sha": "3132913f5bd776ab09af3dc64107e6b10f09862b", "log": "[LANG-726] Add a method e.g. Range<T> Range<T>.intersectionWith(Range<T>)  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Range.java\n+++ b/src/main/java/org/apache/commons/lang3/Range.java\n         return isBefore(otherRange.minimum);\n     }\n \n+    /**\n+     * Calculate the intersection of {@code this} and an overlapping Range.\n+     * @param other overlapping Range\n+     * @return range representing the intersection of {@code this} and {@code other} ({@code this} if equal)\n+     * @throws IllegalArgumentException if {@code other} does not overlap {@code this}\n+     * @since 3.0.1\n+     */\n+    public Range<T> intersectionWith(Range<T> other) {\n+        if (!this.isOverlappedBy(other)) {\n+            throw new IllegalArgumentException(String.format(\n+                \"Cannot calculate intersection with non-overlapping range %s\", other));\n+        }\n+        if (this.equals(other)) {\n+            return this;\n+        }\n+        T min = getComparator().compare(minimum, other.minimum) < 0 ? other.minimum : minimum;\n+        T max = getComparator().compare(maximum, other.maximum) < 0 ? maximum : other.maximum;\n+        return between(min, max, getComparator());\n+    }\n+\n     // Basics\n     //--------------------------------------------------------------------\n \n--- a/src/test/java/org/apache/commons/lang3/RangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/RangeTest.java\n         assertFalse(intRange.isBeforeRange(Range.between(10, 20)));\n     }\n \n+    @Test\n+    public void testIntersectionWith() {\n+        assertSame(intRange, intRange.intersectionWith(intRange));\n+        assertSame(byteRange, byteRange.intersectionWith(byteRange));\n+        assertSame(longRange, longRange.intersectionWith(longRange));\n+        assertSame(floatRange, floatRange.intersectionWith(floatRange));\n+        assertSame(doubleRange, doubleRange.intersectionWith(doubleRange));\n+\n+        assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15)));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testIntersectionWithNull() {\n+        intRange.intersectionWith(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testIntersectionWithNonOverlapping() {\n+        intRange.intersectionWith(Range.between(0, 9));\n+    }\n+\n     //-----------------------------------------------------------------------\n     @Test\n     public void testSerializing() {", "timestamp": 1310883037, "metainfo": ""}