{"sha": "c0a363cf984b19010d956fd39aaac8baf7eeb103", "log": "Severity\tDescription\tResource\tIn Folder\tLocation\tCreation Time \tThe static method setAccessible(AccessibleObject[], boolean) from the type AccessibleObject should be accessed directly \tReflectionToStringBuilder.java\tApache Jakarta Commons/lang/src/java/org/apache/commons/lang/builder\tline 346\tJuly 18, 2003 8:21:31 PM   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n package org.apache.commons.lang.builder;\n \n+import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n import java.util.HashSet;\n  *\n  * <p>This class uses reflection to determine the fields to append. \n  * Because these fields are usually private, the class \n- * uses <code>Field.setAccessible</code> to\n+ * uses <code>AccessibleObject.setAccessible</code> to\n  * change the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set up correctly.</p>\n  *\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: ReflectionToStringBuilder.java,v 1.5 2003/07/15 23:12:51 scolebourne Exp $\n+ * @version $Id: ReflectionToStringBuilder.java,v 1.6 2003/07/20 01:13:14 ggregory Exp $\n  */\n public class ReflectionToStringBuilder extends ToStringBuilder {\n \n      * <p>This method uses reflection to build a suitable\n      * <code>toString</code> using the default <code>ToStringStyle</code>.\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n      * under a security manger, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly.</p>\n      * <p>This method uses reflection to build a suitable\n      * <code>toString</code>.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n      * under a security manger, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly.</p>\n      * <p>This method uses reflection to build a suitable\n      * <code>toString</code>.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n      * under a security manger, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly. </p>\n      * <p>This method uses reflection to build a suitable\n      * <code>toString</code>.</p>\n      *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n      * fields. This means that it will throw a security exception if run\n      * under a security manger, if the permissions are not set up correctly.\n      * It is also not as efficient as testing explicitly. </p>\n                 return;\n             }\n             Field[] fields = clazz.getDeclaredFields();\n-            Field.setAccessible(fields, true);\n+            AccessibleObject.setAccessible(fields, true);\n             for (int i = 0; i < fields.length; i++) {\n                 Field field = fields[i];\n                 String fieldName = field.getName();", "timestamp": 1058663594, "metainfo": ""}