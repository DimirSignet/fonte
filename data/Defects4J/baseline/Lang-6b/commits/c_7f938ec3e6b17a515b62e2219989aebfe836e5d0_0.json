{"sha": "7f938ec3e6b17a515b62e2219989aebfe836e5d0", "log": "Fix missing new in example. Fix javadoc. Fix code style.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      * <p>Arrays are covariant i.e. they cannot be created from a generic type:</p>\n      *\n      * <pre>\n-    public static &lt;T&gt; T[] createAnArray(int size)\n-    {\n+    public static &lt;T&gt; T[] createAnArray(int size) {\n         return T[size]; // compiler error here\n     }\n-    public static &lt;T&gt; T[] createAnArray(int size)\n-    {\n-        return (T[])Object[size]; // ClassCastException at runtime\n+    public static &lt;T&gt; T[] createAnArray(int size) {\n+        return (T[])new Object[size]; // ClassCastException at runtime\n     }\n      * </pre>\n      *\n      * \n      * Note, this method makes only sense to provide arguments of the same type so that the\n      * compiler can deduce the type of the array itself. While it is possible to select the\n-     * type explicitly like in <code>Number[] array = ArrayUtils.<Number>toArray(new\n+     * type explicitly like in <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(new\n      * Integer(42), new Double(Math.PI))</code>, there is no real advantage to <code>new\n      * Number[] {new Integer(42), new Double(Math.PI)}</code> anymore.\n      *\n      * @return the array\n      * @since  3.0\n      */\n-    public static <T> T[] toArray(final T... items)\n-    {\n+    public static <T> T[] toArray(final T... items) {\n         return items;\n     }\n     ", "timestamp": 1299174504, "metainfo": ""}