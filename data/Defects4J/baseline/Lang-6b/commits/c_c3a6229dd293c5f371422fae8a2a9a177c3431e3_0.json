{"sha": "c3a6229dd293c5f371422fae8a2a9a177c3431e3", "log": "All tests should leave the registry empty  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n import java.util.List;\n import java.util.Map;\n \n+import org.junit.After;\n import org.junit.Test;\n \n import org.apache.commons.lang3.SystemUtils;\n     private final Integer base = Integer.valueOf(5);\n     private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n \n+    /*\n+     * All tests should leave the registry empty. \n+     */\n+    @After\n+    public void after(){\n+        validateNullToStringStyleRegistry();\n+    }\n+\n     //-----------------------------------------------------------------------\n \n     @Test\n     @Test\n     public void testConstructorEx3() {\n         assertEquals(\"<null>\", new ToStringBuilder(null, null, null).toString());\n-        new ToStringBuilder(this.base, null, null);\n-        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);\n+        new ToStringBuilder(this.base, null, null).toString();\n+        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null).toString();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n     public void testReflectionIntArray() {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         int[] array = new int[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n     public void testReflectionShortArray() {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         short[] array = new short[] { 1, 2, -3, 4 };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n     public void testReflectionCharArray() {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         char[] array = new char[] { 'A', '2', '_', 'D' };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     // Reflection Array Array tests\n         assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n \n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n     public void testReflectionByteArrayArray() {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n     public void testReflectionCharArrayArray() {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n         String baseStr = this.toBaseString(array);\n         assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n         array = null;\n         assertReflectionArray(\"<null>\", array);\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     // Reflection hierarchy tests\n                 assertEquals(expectedWithoutTransients, toStringWithoutTransients);\n             }\n         }\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n         assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\n         assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\n         assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     static class ReflectionTestFixtureA {\n         assertEquals(\n             this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n             ToStringBuilder.reflectionToString(objects));\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     /**\n         assertEquals(\n             this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n             ToStringBuilder.reflectionToString(objectsLevel2));\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     @Test\n                 + basicToString\n                 + \"}}]\",\n             ToStringBuilder.reflectionToString(objects));\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     /**\n      */\n     @Test\n     public void testSimpleReflectionObjectCycle() throws Exception {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n         simple.o = simple;\n         assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     /**\n      */\n     @Test\n     public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n         assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n-        this.validateNullToStringStyleRegistry();\n     }\n \n     /**\n     public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {\n         SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n         assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());\n-        this.validateNullToStringStyleRegistry();\n     }\n \n \n      */\n     @Test\n     public void testReflectionObjectCycle() throws Exception {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         ReflectionTestCycleA a = new ReflectionTestCycleA();\n         ReflectionTestCycleB b = new ReflectionTestCycleB();\n         a.b = b;\n         assertEquals(\n             this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n             a.toString());\n-        validateNullToStringStyleRegistry();\n     }\n \n     /**\n                 + this.toBaseString(simple)\n                 + \"}]\",\n             ToStringBuilder.reflectionToString(simple));\n-        this.validateNullToStringStyleRegistry();\n-    }\n-\n-    private static final Object DUMMY = new Object();\n-    void emptyToStringStyleRegistry() {\n-        final Map<Object, Object> registry = ToStringStyle.getRegistry();\n-        if (registry == null) {\n-            return;\n-        }\n-        registry.clear(); // empty\n-        ToStringStyle.register(DUMMY); // add key\n-        ToStringStyle.unregister(DUMMY); // remove key and drop registry\n     }\n \n     void validateNullToStringStyleRegistry() {\n \n     @Test\n     public void testObjectCycle() {\n-        emptyToStringStyleRegistry(); // Ensure registry starts out empty\n         ObjectCycle a = new ObjectCycle();\n         ObjectCycle b = new ObjectCycle();\n         a.obj = b;\n \n         String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n         assertEquals(expected, a.toString());\n-        validateNullToStringStyleRegistry();\n     }\n \n     static class ObjectCycle {\n         Integer val = Integer.valueOf(5);\n         ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n         test.setUpToClass(Number.class);\n+        test.toString();\n     }\n \n     /**\n             fail();\n         } catch (IllegalArgumentException ex) {\n             // expected\n+        } finally {\n+            test.toString();\n         }\n     }\n ", "timestamp": 1331232394, "metainfo": ""}