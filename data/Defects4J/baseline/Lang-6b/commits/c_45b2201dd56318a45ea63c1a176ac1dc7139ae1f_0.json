{"sha": "45b2201dd56318a45ea63c1a176ac1dc7139ae1f", "log": "Typos. Parameter name mismatch in Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n import org.apache.commons.lang3.ClassUtils;\n \n /**\n- * <p> Utility reflection methods focussed on constructors, modelled after\n+ * <p> Utility reflection methods focused on constructors, modeled after\n  * {@link MethodUtils}. </p>\n  *\n  * <h3>Known Limitations</h3> <h4>Accessing Public Constructors In A Default\n  * <p><code>ConstructorUtils</code> contains a workaround for this situation. It\n  * will attempt to call <code>setAccessible</code> on this constructor. If this\n  * call succeeds, then the method can be invoked as normal. This call will only\n- * succeed when the application has sufficient security privilages. If this call\n+ * succeed when the application has sufficient security privileges. If this call\n  * fails then a warning will be logged and the method may fail.</p>\n  *\n  * @since 2.5\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>klazz</code> created using the actual\n+     * <p>Returns a new instance of <code>cls</code> created using the actual\n      * arguments <code>args</code>. The formal parameter types are inferred from\n      * the actual values of <code>args</code>. See\n      * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n      * @param <T> the type to be constructed\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n-     * @return new instance of <code>klazz</code>\n+     * @return new instance of <code>cls</code>\n      *\n      * @throws NoSuchMethodException If the constructor cannot be found\n      * @throws IllegalAccessException If an error occurs accessing the\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>klazz</code> created using constructor\n+     * <p>Returns a new instance of <code>cls</code> created using constructor\n      * with signature <code>parameterTypes</code> and actual arguments\n      * <code>args</code>.</p>\n      *\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @param parameterTypes parameter types array\n-     * @return new instance of <code>klazz</code>\n+     * @return new instance of <code>cls</code>\n      *\n      * @throws NoSuchMethodException if matching constructor cannot be found\n      * @throws IllegalAccessException thrown on the constructor's invocation\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>klazz</code> created using the actual\n+     * <p>Returns a new instance of <code>cls</code> created using the actual\n      * arguments <code>args</code>. The formal parameter types are inferred from\n      * the actual values of <code>args</code>. See\n      * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n      * @param <T> the type to be constructed\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n-     * @return new instance of <code>klazz</code>\n+     * @return new instance of <code>cls</code>\n      *\n      * @throws NoSuchMethodException If the constructor cannot be found\n      * @throws IllegalAccessException If an error occurs accessing the\n     }\n \n     /**\n-     * <p>Returns a new instance of <code>klazz</code> created using constructor\n+     * <p>Returns a new instance of <code>cls</code> created using constructor\n      * with signature <code>parameterTypes</code> and actual arguments\n      * <code>args</code>.</p>\n      *\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @param parameterTypes parameter types array\n-     * @return new instance of <code>klazz</code>\n+     * @return new instance of <code>cls</code>\n      *\n      * @throws NoSuchMethodException if matching constructor cannot be found\n      * @throws IllegalAccessException thrown on the constructor's invocation", "timestamp": 1309981111, "metainfo": ""}