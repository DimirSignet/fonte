{"sha": "3cc14f685e78a4f5842e518c4d7dcb79152aeb0c", "log": "Added more @since 3.0 CharSequence changes. Fixed an @since 3.1 to 3.0  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n+     * @since 3.0 Changed signature from indexOfAnyBut(String, String) to indexOfAnyBut(CharSequence, CharSequence)\n      */\n     public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars) {\n         if (isEmpty(seq) || isEmpty(searchChars)) {\n      * @param str  the CharSequence to check, may be null\n      * @param searchStrs  the CharSequences to search for, may be null\n      * @return the first index of any of the searchStrs in str, -1 if no match\n+     * @since 3.0 Changed signature from indexOfAny(String, String[]) to indexOfAny(CharSequence, CharSequence[])\n      */\n     public static int indexOfAny(CharSequence str, CharSequence[] searchStrs) {\n         if (str == null || searchStrs == null) {\n      * @param str  the CharSequence to check, may be null\n      * @param searchStrs  the CharSequences to search for, may be null\n      * @return the last index of any of the CharSequences, -1 if no match\n+     * @since 3.0 Changed signature from lastIndexOfAny(String, String[]) to lastIndexOfAny(CharSequence, CharSequence[])\n      */\n     public static int lastIndexOfAny(CharSequence str, CharSequence[] searchStrs) {\n         if (str == null || searchStrs == null) {\n      * @param str  the CharSequence to check, may be null\n      * @param sub  the substring to count, may be null\n      * @return the number of occurrences, 0 if either CharSequence is {@code null}\n+     * @since 3.0 Changed signature from countMatches(String, String) to countMatches(CharSequence, CharSequence)\n      */\n     public static int countMatches(CharSequence str, CharSequence sub) {\n         if (isEmpty(str) || isEmpty(sub)) {\n      * @return {@code true} if the CharSequence starts with the prefix, case sensitive, or\n      *  both {@code null}\n      * @since 2.4\n+     * @since 3.0 Changed signature from startsWith(String, String) to startsWith(CharSequence, CharSequence)\n      */\n     public static boolean startsWith(CharSequence str, CharSequence prefix) {\n         return startsWith(str, prefix, false);\n      * @return {@code true} if the CharSequence starts with the prefix, case insensitive, or\n      *  both {@code null}\n      * @since 2.4\n+     * @since 3.0 Changed signature from startsWithIgnoreCase(String, String) to startsWithIgnoreCase(CharSequence, CharSequence)\n      */\n     public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix) {\n         return startsWith(str, prefix, true);\n      * @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, or\n      *  both {@code null}\n      * @since 2.5\n+     * @since 3.0 Changed signature from startsWithAny(String, String[]) to startsWithAny(CharSequence, CharSequence...)\n      */\n     public static boolean startsWithAny(CharSequence string, CharSequence... searchStrings) {\n         if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n      * @return {@code true} if the CharSequence ends with the suffix, case sensitive, or\n      *  both {@code null}\n      * @since 2.4\n+     * @since 3.0 Changed signature from endsWith(String, String) to endsWith(CharSequence, CharSequence)\n      */\n     public static boolean endsWith(CharSequence str, CharSequence suffix) {\n         return endsWith(str, suffix, false);\n      * @return {@code true} if the CharSequence ends with the suffix, case insensitive, or\n      *  both {@code null}\n      * @since 2.4\n+     * @since 3.0 Changed signature from endsWithIgnoreCase(String, String) to endsWithIgnoreCase(CharSequence, CharSequence)\n      */\n     public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix) {\n         return endsWith(str, suffix, true);\n      * @param searchStrings the CharSequences to find, may be null or empty\n      * @return {@code true} if the CharSequence ends with any of the the prefixes, case insensitive, or\n      *  both {@code null}\n-     * @since 3.1\n+     * @since 3.0\n      */\n     public static boolean endsWithAny(CharSequence string, CharSequence... searchStrings) {\n         if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {", "timestamp": 1302903741, "metainfo": ""}