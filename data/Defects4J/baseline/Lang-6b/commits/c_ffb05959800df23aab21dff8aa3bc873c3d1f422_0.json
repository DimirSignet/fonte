{"sha": "ffb05959800df23aab21dff8aa3bc873c3d1f422", "log": "Adding nullToEmpty methods to ArrayUtils per LANG-534 and Levon Karayan's patch.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n  * @author Gary Gregory\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n+ * @author <a href=\"mailto:levon@lk.otherinbox.com\">Levon Karayan</a>\n  * @since 2.0\n  * @version $Id$\n  */\n         return array.clone();\n     }\n \n+    // nullToEmpty\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Object[] nullToEmpty(Object[] array) {\n+        if (array == null) {\n+            return EMPTY_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static String[] nullToEmpty(String[] array) {\n+        if (array == null) {\n+            return EMPTY_STRING_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_STRING_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static long[] nullToEmpty(long[] array) {\n+        if (array == null) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+        if (array.length == 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static int[] nullToEmpty(int[] array) {\n+        if (array == null) {\n+            return EMPTY_INT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static short[] nullToEmpty(short[] array) {\n+        if (array == null) {\n+            return EMPTY_SHORT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static char[] nullToEmpty(char[] array) {\n+        if (array == null) {\n+            return EMPTY_CHAR_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_CHAR_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static byte[] nullToEmpty(byte[] array) {\n+        if (array == null) {\n+            return EMPTY_BYTE_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static double[] nullToEmpty(double[] array) {\n+        if (array == null) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static float[] nullToEmpty(float[] array) {\n+        if (array == null) {\n+            return EMPTY_FLOAT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static boolean[] nullToEmpty(boolean[] array) {\n+        if (array == null) {\n+            return EMPTY_BOOLEAN_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_BOOLEAN_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Long[] nullToEmpty(Long[] array) {\n+        if (array == null) {\n+            return EMPTY_LONG_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Integer[] nullToEmpty(Integer[] array) {\n+        if (array == null) {\n+            return EMPTY_INTEGER_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_INTEGER_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Short[] nullToEmpty(Short[] array) {\n+        if (array == null) {\n+            return EMPTY_SHORT_OBJECT_ARRAY;\n+        }else if (array.length == 0) {\n+            return EMPTY_SHORT_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Character[] nullToEmpty(Character[] array) {\n+        if (array == null) {\n+            return EMPTY_CHARACTER_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_CHARACTER_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Byte[] nullToEmpty(Byte[] array) {\n+        if (array == null) {\n+            return EMPTY_BYTE_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Double[] nullToEmpty(Double[] array) {\n+        if (array == null) {\n+            return EMPTY_DOUBLE_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Float[] nullToEmpty(Float[] array) {\n+        if (array == null) {\n+            return EMPTY_FLOAT_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * <p>Defensive programming technique to change a <code>null</code>\n+     * reference to an empty one..</p>\n+     *\n+     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * \n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     * the empty <code>public static</code> references in this class.</p>\n+     *\n+     * @param array  the array to check for <code>null</code> or empty\n+     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     */\n+    public static Boolean[] nullToEmpty(Boolean[] array) {\n+        if (array == null) {\n+            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n+        } else if (array.length == 0) {\n+            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n+        }\n+        return array;\n+    }\n+\n     // Subarrays\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n  * @author Maarten Coene\n+ * @author <a href=\"mailto:levon@lk.otherinbox.com\">Levon Karayan</a>\n  * @version $Id$\n  */\n public class ArrayUtilsTest extends TestCase {\n         float[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n         assertTrue(original != cloned);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testNullToEmptyBoolean() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));\n+        // Test valid array handling\n+        boolean[] original = new boolean[] {true, false};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        boolean[] empty = new boolean[]{};\n+        boolean[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyLong() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));\n+        // Test valid array handling\n+        long[] original = new long[] {1L, 2L};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        long[] empty = new long[]{};\n+        long[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyInt() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));\n+        // Test valid array handling\n+        int[] original = new int[] {1, 2};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        int[] empty = new int[]{};\n+        int[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyShort() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));\n+        // Test valid array handling\n+        short[] original = new short[] {1, 2};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        short[] empty = new short[]{};\n+        short[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyChar() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));\n+        // Test valid array handling\n+        char[] original = new char[] {'a', 'b'};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        char[] empty = new char[]{};\n+        char[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyByte() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));\n+        // Test valid array handling\n+        byte[] original = new byte[] {0x0F, 0x0E};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        byte[] empty = new byte[]{};\n+        byte[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyDouble() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));\n+        // Test valid array handling\n+        double[] original = new double[] {1L, 2L};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        double[] empty = new double[]{};\n+        double[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyFloat() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));\n+        // Test valid array handling\n+        float[] original = new float[] {2.6f, 3.8f};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        float[] empty = new float[]{};\n+        float[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+\n+    public void testNullToEmptyObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\n+        // Test valid array handling\n+        Object[] original = new Object[] {true, false};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Object[] empty = new Object[]{};\n+        Object[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+\n+    public void testNullToEmptyString() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));\n+        // Test valid array handling\n+        String[] original = new String[] {\"abc\", \"def\"};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        String[] empty = new String[]{};\n+        String[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+\n+    public void testNullToEmptyBooleanObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));\n+        // Test valid array handling\n+        Boolean[] original = new Boolean[] {Boolean.TRUE, Boolean.FALSE};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Boolean[] empty = new Boolean[]{};\n+        Boolean[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyLongObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\n+        // Test valid array handling\n+        Long[] original = new Long[] {1L, 2L};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Long[] empty = new Long[]{};\n+        Long[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyIntObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));\n+        // Test valid array handling\n+        Integer[] original = new Integer[] {1, 2};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Integer[] empty = new Integer[]{};\n+        Integer[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyShortObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\n+        // Test valid array handling\n+        Short[] original = new Short[] {1, 2};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Short[] empty = new Short[]{};\n+        Short[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyCharObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));\n+        // Test valid array handling\n+        Character[] original = new Character[] {'a', 'b'};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Character[] empty = new Character[]{};\n+        Character[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyByteObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));\n+        // Test valid array handling\n+        Byte[] original = new Byte[] {0x0F, 0x0E};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Byte[] empty = new Byte[]{};\n+        Byte[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyDoubleObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));\n+        // Test valid array handling\n+        Double[] original = new Double[] {1D, 2D};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Double[] empty = new Double[]{};\n+        Double[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n+    }\n+    \n+    public void testNullToEmptyFloatObject() {\n+        // Test null handling\n+        assertEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));\n+        // Test valid array handling\n+        Float[] original = new Float[] {2.6f, 3.8f};\n+        assertEquals(original, ArrayUtils.nullToEmpty(original));\n+        // Test empty array handling\n+        Float[] empty = new Float[]{};\n+        Float[] result = ArrayUtils.nullToEmpty(empty);\n+        assertEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);\n+        assertTrue(empty != result);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1265183627, "metainfo": ""}