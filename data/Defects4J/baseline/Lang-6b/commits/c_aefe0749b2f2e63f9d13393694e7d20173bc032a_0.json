{"sha": "aefe0749b2f2e63f9d13393694e7d20173bc032a", "log": "Removing the option around whether or not to support the + in \\u+0000. JDK 7 now supports the + sign, so UnicodeUnescaper will unescape \\u0000 or \\u+0000.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnescaper.java\n \n /**\n  * Translates escaped unicode values of the form \\\\u+\\d\\d\\d\\d back to \n- * unicode.\n+ * unicode. It supports multiple 'u' characters and will work with or \n+ * without the +.\n  * \n  * @since 3.0\n  * @version $Id$\n  */\n public class UnicodeUnescaper extends CharSequenceTranslator {\n-\n-    public static enum OPTION { escapePlus }\n-\n-    // TODO?: Create an OptionsSet class to hide some of the conditional logic below\n-    private final EnumSet<OPTION> options;\n-\n-    /**\n-     * Create a UnicodeUnescaper.\n-     *\n-     * The constructor takes a list of options, only one of which is currently \n-     * available (whether to expect a plus sign after the 'u'). \n-     *\n-     * For example, to handle \"\\\\u+0047\":\n-     *    new UnicodeUnescaper(UnicodeUnescaper.OPTION.escapePlus)\n-     *\n-     * @param options to apply to this unescaper\n-     */\n-    public UnicodeUnescaper(OPTION... options) {\n-        if(options.length > 0) {\n-            this.options = EnumSet.copyOf(Arrays.asList(options));\n-        } else {\n-            this.options = null;\n-        }\n-    }\n-\n-    /**\n-     * Whether the passed in option is currently set.\n-     *\n-     * @param option to check state of\n-     * @return whether the option is set\n-     */\n-    public boolean isSet(OPTION option) { \n-        return (options == null) ? false : options.contains(option);\n-    }\n \n     /**\n      * {@inheritDoc}\n                     i++;\n                 }\n \n-                // consume + symbol in \\\\u+0045\n-                if(isSet(OPTION.escapePlus)) {\n-                    if( (index + i < input.length()) && (input.charAt(index + i) == '+') ) {\n-                        i++;\n-                    }\n+                if( (index + i < input.length()) && (input.charAt(index + i) == '+') ) {\n+                    i++;\n                 }\n \n                 if( (index + i + 4 <= input.length()) ) {\n--- a/src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java\n         UnicodeUnescaper uu = new UnicodeUnescaper();\n \n         String input = \"\\\\u+0047\";\n-        try {\n-            uu.translate(input);\n-            fail(\"Default behaviour should not parse u+\");\n-        } catch(IllegalArgumentException iae) {\n-            // expected\n-        }\n-\n-        uu = new UnicodeUnescaper(UnicodeUnescaper.OPTION.escapePlus);\n         assertEquals(\"Failed to unescape unicode characters with 'u+' notation\", \"G\", uu.translate(input));\n     }\n ", "timestamp": 1310527874, "metainfo": ""}