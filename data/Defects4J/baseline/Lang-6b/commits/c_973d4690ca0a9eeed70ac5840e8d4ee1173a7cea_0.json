{"sha": "973d4690ca0a9eeed70ac5840e8d4ee1173a7cea", "log": "@since 3.0 Changed signature from methodName(String) to methodName(CharSequence)  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      *\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if the CharSequence is empty or null\n+     * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)\n      */\n     public static boolean isEmpty(CharSequence cs) {\n         return cs == null || cs.length() == 0;\n      *\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if the CharSequence is not empty and not null\n+     * @since 3.0 Changed signature from isNotEmpty(String) to isNotEmpty(CharSequence)\n      */\n     public static boolean isNotEmpty(CharSequence cs) {\n         return !StringUtils.isEmpty(cs);\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if the CharSequence is null, empty or whitespace\n      * @since 2.0\n+     * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)\n      */\n     public static boolean isBlank(CharSequence cs) {\n         int strLen;\n      * @return <code>true</code> if the CharSequence is\n      *  not empty and not null and not whitespace\n      * @since 2.0\n+     * @since 3.0 Changed signature from isNotBlank(String) to isNotBlank(CharSequence)\n      */\n     public static boolean isNotBlank(CharSequence cs) {\n         return !StringUtils.isBlank(cs);\n      * @param cs2  the second CharSequence, may be null\n      * @return <code>true</code> if the CharSequences are equal, case sensitive, or\n      *  both <code>null</code>\n+     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n      */\n     public static boolean equals(CharSequence cs1, CharSequence cs2) {\n         return cs1 == null ? cs2 == null : cs1.equals(cs2);\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n+     * @since 3.0 Changed signature from indexOfAny(String, char[]) to indexOfAny(CharSequence, char[])\n      */\n     public static int indexOfAny(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n+     * @since 3.0 Changed signature from indexOfAny(String, String) to indexOfAny(CharSequence, String)\n      */\n     public static int indexOfAny(CharSequence cs, String searchChars) {\n         if (isEmpty(cs) || isEmpty(searchChars)) {\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * @since 2.0\n+     * @since 3.0 Changed signature from indexOfAnyBut(String, char[]) to indexOfAnyBut(CharSequence, char[])\n      */\n     public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n      * @param cs  the String to check, may be null\n      * @param valid  an array of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n+     * @since 3.0 Changed signature from containsOnly(String, char[]) to containsOnly(CharSequence, char[])\n      */\n     public static boolean containsOnly(CharSequence cs, char[] valid) {\n         // All these pre-checks are to maintain API with an older version\n      * @param validChars  a String of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n      * @since 2.0\n+     * @since 3.0 Changed signature from containsOnly(String, String) to containsOnly(CharSequence, String)\n      */\n     public static boolean containsOnly(CharSequence cs, String validChars) {\n         if (cs == null || validChars == null) {\n      * @param searchChars  an array of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * @since 2.0\n+     * @since 3.0 Changed signature from containsNone(String, char[]) to containsNone(CharSequence, char[])\n      */\n     public static boolean containsNone(CharSequence cs, char[] searchChars) {\n         if (cs == null || searchChars == null) {\n      * @param invalidChars  a String of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * @since 2.0\n+     * @since 3.0 Changed signature from containsNone(String, String) to containsNone(CharSequence, String)\n      */\n     public static boolean containsNone(CharSequence cs, String invalidChars) {\n         if (cs == null || invalidChars == null) {\n      *         <code>null</code>.\n      * @since 2.4\n      * @deprecated See {@link CharSequenceUtils#length(CharSequence)}\n+     * @since 3.0 Changed signature from length(String) to length(CharSequence)\n      */\n     public static int length(CharSequence cs) {\n         return CharSequenceUtils.length(cs);\n      * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)\n      * @see #uncapitalize(CharSequence)\n      * @since 2.0\n+     * @since 3.0 Changed signature from capitalize(String) to capitalize(CharSequence)\n      */\n     public static String capitalize(CharSequence cs) {\n         if (cs == null ) {\n      * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)\n      * @see #capitalize(CharSequence)\n      * @since 2.0\n+     * @since 3.0 Changed signature from uncapitalize(String) to uncapitalize(CharSequence)\n      */\n     public static String uncapitalize(CharSequence cs) {\n         if (cs == null ) {\n      *\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains letters, and is non-null\n+     * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)\n      */\n     public static boolean isAlpha(CharSequence cs) {\n         if (cs == null) {\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains letters and space,\n      *  and is non-null\n+     * @since 3.0 Changed signature from isAlphaSpace(String) to isAlphaSpace(CharSequence)\n      */\n     public static boolean isAlphaSpace(CharSequence cs) {\n         if (cs == null) {\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains letters or digits,\n      *  and is non-null\n+     * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)\n      */\n     public static boolean isAlphanumeric(CharSequence cs) {\n         if (cs == null) {\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains letters, digits or space,\n      *  and is non-null\n+     * @since 3.0 Changed signature from isAlphanumericSpace(String) to isAlphanumericSpace(CharSequence)\n      */\n     public static boolean isAlphanumericSpace(CharSequence cs) {\n         if (cs == null) {\n      * @return <code>true</code> if every character is in the range\n      *  32 thru 126\n      * @since 2.1\n+     * @since 3.0 Changed signature from isAsciiPrintable(String) to isAsciiPrintable(CharSequence)\n      */\n     public static boolean isAsciiPrintable(CharSequence cs) {\n         if (cs == null) {\n      *\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains digits, and is non-null\n+     * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)\n      */\n     public static boolean isNumeric(CharSequence cs) {\n         if (cs == null) {\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains digits or space,\n      *  and is non-null\n+     * @since 3.0 Changed signature from isNumericSpace(String) to isNumericSpace(CharSequence)\n      */\n     public static boolean isNumericSpace(CharSequence cs) {\n         if (cs == null) {\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains whitespace, and is non-null\n      * @since 2.0\n+     * @since 3.0 Changed signature from isWhitespace(String) to isWhitespace(CharSequence)\n      */\n     public static boolean isWhitespace(CharSequence cs) {\n         if (cs == null) {\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains lowercase characters, and is non-null\n      * @since 2.5\n+     * @since 3.0 Changed signature from isAllLowerCase(String) to isAllLowerCase(CharSequence)\n      */\n     public static boolean isAllLowerCase(CharSequence cs) {\n         if (cs == null || isEmpty(cs)) {\n      * @param cs the CharSequence to check, may be null\n      * @return <code>true</code> if only contains uppercase characters, and is non-null\n      * @since 2.5\n+     * @since 3.0 Changed signature from isAllUpperCase(String) to isAllUpperCase(CharSequence)\n      */\n     public static boolean isAllUpperCase(CharSequence cs) {\n         if (cs == null || isEmpty(cs)) {\n      * @param cs2  the second CharSequence, may be null\n      * @return the index where cs1 and cs2 begin to differ; -1 if they are equal\n      * @since 2.0\n+     * @since 3.0 Changed signature from indexOfDifference(String, String) to indexOfDifference(CharSequence, CharSequence)\n      */\n     public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {\n         if (cs1 == cs2) {\n      * @param css  array of CharSequences, entries may be null\n      * @return the index where the strings begin to differ; -1 if they are all equal\n      * @since 2.4\n+     * @since 3.0 Changed signature from indexOfDifference(String...) to indexOfDifference(CharSequence...)\n      */\n     public static int indexOfDifference(CharSequence... css) {\n         if (css == null || css.length <= 1) {\n      * @param t  the second String, must not be null\n      * @return result distance\n      * @throws IllegalArgumentException if either String input <code>null</code>\n+     * @since 3.0 Changed signature from getLevenshteinDistance(String, String) to getLevenshteinDistance(CharSequence, CharSequence)\n      */\n     public static int getLevenshteinDistance(CharSequence s, CharSequence t) {\n         if (s == null || t == null) {", "timestamp": 1270488288, "metainfo": ""}