{"sha": "31f90b96baae98ed5a7b8ed7127a6184508219f9", "log": "Javdoc and minor tweaks to contexted exception  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/exception/ContextedException.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ContextedException.java\n \n /**\n  * <p>\n- * An exception that provides an easy and safe way to add contextual\n- * information.\n+ * An exception that provides an easy and safe way to add contextual information.\n  * </p><p>\n  * An exception trace itself is often insufficient to provide rapid diagnosis of the issue.\n  * Frequently what is needed is a select few pieces of local contextual data.\n     }\n \n     //-----------------------------------------------------------------------\n-\n-    /**\n-     * Adds information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Different values\n-     * can be added with the same label multiple times. \n+    /**\n+     * Adds information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Different values can be added with the same label multiple times.\n      * <p>\n      * Note: This exception is only serializable if the object added is serializable.\n      * </p>\n      * \n      * @param label  a textual label associated with information, {@code null} not recommended\n      * @param value  information needed to understand exception, may be {@code null}\n-     * @return this, for method chaining\n+     * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ContextedException addContextValue(String label, Object value) {        \n         exceptionContext.addContextValue(label, value);\n     }\n \n     /**\n-     * Adds information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Different values\n-     * can be added with the same label multiple times. \n+     * Adds information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Different values can be added with the same label multiple times.\n      * <p>\n      * Note: This exception is only serializable if the object added as value is serializable.\n      * </p>\n      * \n-     * @param pair a pair of textual label and information\n+     * @param pair  a pair of textual label and information, not {@code null}\n+     * @return {@code this}, for method chaining, not {@code null}\n      * @throws NullPointerException if {@code pair} is {@code null}\n-     * @return this, for method chaining\n      */\n     public ContextedException addContextValue(Pair<String, Object> pair) {\n         this.exceptionContext.addContextValue(pair);\n     }\n \n     /**\n-     * Set information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Existing values\n-     * with the same labels are removed before the new one is added.\n+     * Sets information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Any existing values with the same labels are removed before the new one is added.\n      * <p>\n      * Note: This exception is only serializable if the object added as value is serializable.\n      * </p>\n      * \n      * @param label  a textual label associated with information, {@code null} not recommended\n      * @param value  information needed to understand exception, may be {@code null}\n-     * @return this, for method chaining\n+     * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ContextedException setContextValue(String label, Object value) {        \n         exceptionContext.setContextValue(label, value);\n         return this;\n     }\n-    \n-    /**\n-     * Set information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Existing values\n-     * with the same labels are removed before the new one is added.\n+\n+    /**\n+     * Sets information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Any existing values with the same labels are removed before the new one is added.\n      * <p>\n      * Note: This exception is only serializable if the object added as value is serializable.\n      * </p>\n      * \n-     * @param pair a pair of textual label and information\n+     * @param pair  a pair of textual label and information, not {@code null}\n+     * @return {@code this}, for method chaining, not {@code null}\n      * @throws NullPointerException if {@code pair} is {@code null}\n-     * @return this, for method chaining\n      */\n     public ContextedException setContextValue(Pair<String, Object> pair) {\n         this.exceptionContext.setContextValue(pair);\n     public String getFormattedExceptionMessage(String baseMessage) {\n         return exceptionContext.getFormattedExceptionMessage(baseMessage);\n     }\n+\n }\n--- a/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java\n  * list of context label-value pairs. This additional information is automatically included in\n  * the message and printed stack trace.\n  * </p><p>\n- * An checked version of this exception is provided by ContextedException.\n+ * A checked version of this exception is provided by ContextedException.\n  * </p>\n  * <p>\n  * To use this class write code as follows:\n \n     /**\n      * Instantiates ContextedRuntimeException with cause, message, and ExceptionContext.\n-     * <p>\n-     * Note: This exception is only serializable if the object added is serializable.\n-     * </p>\n      * \n      * @param message  the exception message, may be null\n      * @param cause  the underlying cause of the exception, may be null\n     }\n \n     //-----------------------------------------------------------------------\n-\n-    /**\n-     * Adds information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Different values\n-     * can be added with the same label multiple times. \n+    /**\n+     * Adds information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Different values can be added with the same label multiple times.\n      * <p>\n      * Note: This exception is only serializable if the object added is serializable.\n      * </p>\n      * \n      * @param label  a textual label associated with information, {@code null} not recommended\n      * @param value  information needed to understand exception, may be {@code null}\n-     * @return this, for method chaining\n+     * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ContextedRuntimeException addContextValue(String label, Object value) {        \n         exceptionContext.addContextValue(label, value);\n     }\n \n     /**\n-     * Adds information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Different values\n-     * can be added with the same label multiple times. \n+     * Adds information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Different values can be added with the same label multiple times.\n      * <p>\n      * Note: This exception is only serializable if the object added as value is serializable.\n      * </p>\n      * \n-     * @param pair a pair of textual label and information\n+     * @param pair  a pair of textual label and information, not {@code null}\n+     * @return {@code this}, for method chaining, not {@code null}\n      * @throws NullPointerException if {@code pair} is {@code null}\n-     * @return this, for method chaining\n      */\n     public ContextedRuntimeException addContextValue(Pair<String, Object> pair) {\n         this.exceptionContext.addContextValue(pair);\n     }\n \n     /**\n-     * Set information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Existing values\n-     * with the same labels are removed before the new one is added.\n+     * Sets information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Any existing values with the same labels are removed before the new one is added.\n      * <p>\n      * Note: This exception is only serializable if the object added as value is serializable.\n      * </p>\n      * \n      * @param label  a textual label associated with information, {@code null} not recommended\n      * @param value  information needed to understand exception, may be {@code null}\n-     * @return this, for method chaining\n+     * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ContextedRuntimeException setContextValue(String label, Object value) {        \n         exceptionContext.setContextValue(label, value);\n         return this;\n     }\n-    \n-    /**\n-     * Set information helpful to a developer in diagnosing and correcting\n-     * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.  Existing values\n-     * with the same labels are removed before the new one is added.\n+\n+    /**\n+     * Sets information helpful to a developer in diagnosing and correcting the problem.\n+     * For the information to be meaningful, the value passed should have a reasonable\n+     * toString() implementation.\n+     * Any existing values with the same labels are removed before the new one is added.\n      * <p>\n      * Note: This exception is only serializable if the object added as value is serializable.\n      * </p>\n      * \n-     * @param pair a pair of textual label and information\n+     * @param pair  a pair of textual label and information, not {@code null}\n+     * @return {@code this}, for method chaining, not {@code null}\n      * @throws NullPointerException if {@code pair} is {@code null}\n-     * @return this, for method chaining\n      */\n     public ContextedRuntimeException setContextValue(Pair<String, Object> pair) {\n         this.exceptionContext.setContextValue(pair);\n     public String getFormattedExceptionMessage(String baseMessage) {\n         return exceptionContext.getFormattedExceptionMessage(baseMessage);\n     }\n+\n }\n--- a/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java\n \n     /** The serialization version. */\n     private static final long serialVersionUID = 20110706L;\n+\n     /** The list storing the label-data pairs. */\n     private List<Pair<String, Object>> contextValues = new ArrayList<Pair<String,Object>>();\n \n         }\n         return buffer.toString();\n     }\n+\n }\n--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java\n      * \n      * @param label  the label of the item to add, {@code null} not recommended\n      * @param value  the value of item to add, may be {@code null}\n-     * @return context itself to allow method chaining\n+     * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ExceptionContext addContextValue(String label, Object value);\n \n      * existing pair with the same label.\n      * </p>\n      * \n-     * @param pair  the label-value pair to add\n-     * @return context itself to allow method chaining\n+     * @param pair  the label-value pair to add, not {@code null}\n+     * @return {@code this}, for method chaining, not {@code null}\n      * @throws NullPointerException if pair is {@code null}\n      */\n     public ExceptionContext addContextValue(Pair<String, Object> pair);\n \n     /**\n-     * Sets a contextual label-value pair of this context.\n+     * Sets a contextual label-value pair into this context.\n      * <p>\n      * The pair will be added normally, but any existing label-value pair with\n      * the same label is removed from the context.\n      * \n      * @param label  the label of the item to add, {@code null} not recommended\n      * @param value  the value of item to add, may be {@code null}\n-     * @return context itself to allow method chaining\n+     * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ExceptionContext setContextValue(String label, Object value);\n \n     /**\n-     * Sets a contextual label-value pair of this context.\n+     * Sets a contextual label-value pair into this context.\n      * <p>\n      * The pair will be added normally, but any existing label-value pair with\n      * the same label is removed from the context.\n      * </p>\n      * \n-     * @param pair  the label-value pair to add\n-     * @return context itself to allow method chaining\n+     * @param pair  the label-value pair to add, not {@code null}\n+     * @return {@code this}, for method chaining, not {@code null}\n      * @throws NullPointerException if pair is {@code null}\n      */\n     public ExceptionContext setContextValue(Pair<String, Object> pair);\n \n     /**\n-     * Retrieves contextual data values associated with the label.\n+     * Retrieves all the contextual data values associated with the label.\n      * \n      * @param label  the label to get the contextual values for, may be {@code null}\n      * @return the contextual values associated with the label, never {@code null}\n     public Object getFirstContextValue(String label);\n \n     /**\n-     * Retrieves the labels defined in the contextual data.\n+     * Retrieves the full set of labels defined in the contextual data.\n      * \n-     * @return the set of labels, never {@code null}\n+     * @return the set of labels, not {@code null}\n      */\n     public Set<String> getContextLabels();\n \n     /**\n-     * Retrieves the label-value pairs defined in the contextual data.\n+     * Retrieves the full list of label-value pairs defined in the contextual data.\n      * \n-     * @return the list of pairs, never {@code null}\n+     * @return the list of pairs, not {@code null}\n      */\n     public List<Pair<String, Object>> getContextEntries();\n \n     /**\n-     * Implementors provide the given base message with context label/value item \n-     * information appended.\n+     * Gets the contextualized error message based on a base message.\n+     * This will add the context label-value pairs to the message.\n      * \n      * @param baseMessage  the base exception message <b>without</b> context information appended\n-     * @return the exception message <b>with</b> context information appended, never {@code null}\n+     * @return the exception message <b>with</b> context information appended, not {@code null}\n      */\n     public String getFormattedExceptionMessage(String baseMessage);\n ", "timestamp": 1310033226, "metainfo": ""}