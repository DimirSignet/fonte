{"sha": "633e4f6c3629f98744ec2b0c24b2b06b4b3f010d", "log": "Added stringToDouble, stringToLong functions to NumberUtils. Patch supplied by Fredrik Westermarck Reviewd by Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.11 2003/09/04 07:27:12 psteitz Exp $\n+ * @version $Id: NumberUtils.java,v 1.12 2003/09/05 15:55:09 psteitz Exp $\n  */\n public class NumberUtils {\n     \n     }\n \n     /**\n+     * <p>Convert a <code>String</code> to a <code>long</code>, returning\n+     * <code>zero</code> if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @return the long represented by the string, or <code>0</code> if\n+     *  conversion fails\n+     * @since 2.1\n+     */\n+    public static long stringToLong(String str) {\n+        return stringToLong(str, 0L);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>long</code>, returning a\n+     * default value if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, the default value is returned.</p>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @param defaultValue  the default value\n+     * @return the long represented by the string, or the default if conversion fails\n+     * @since 2.1\n+     */\n+    public static long stringToLong(String str, long defaultValue) {\n+        try {\n+            return Long.parseLong(str);\n+        } catch (NumberFormatException nfe) {\n+            return defaultValue;\n+        }\n+    }\n+\n+    /**\n      * <p>Convert a <code>String</code> to a <code>float</code>, returning\n      * <code>0.0f</code> if the conversion fails.</p>\n      *\n     public static float stringToFloat(String str, float defaultValue) {\n       if(str==null) {\n           return defaultValue;\n-      }\n-      \n+      }     \n       try {\n           return Float.parseFloat(str);\n+      } catch (NumberFormatException nfe) {\n+          return defaultValue;\n+      }\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>double</code>, returning\n+     * <code>0.0d</code> if the conversion fails.</p>\n+     *\n+     * <p>If the string <code>str</code> is <code>null</code>,\n+     * <code>0.0d</code> is returned.</p>\n+     *\n+     * @param str the string to convert, may be <code>null</code>\n+     * @return the double represented by the string, or <code>0.0d</code>\n+     *  if conversion fails\n+     * @since 2.1\n+     */\n+    public static double stringToDouble(String str) {\n+        return stringToDouble(str, 0.0d);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>double</code>, returning a\n+     * default value if the conversion fails.</p>\n+     *\n+     * <p>If the string <code>str</code> is <code>null</code>, the default\n+     * value is returned.</p>\n+     *\n+     * @param str the string to convert, may be <code>null</code>\n+     * @param defaultValue the default value\n+     * @return the double represented by the string, or defaultValue\n+     *  if conversion fails\n+     * @since 2.1\n+     */\n+    public static double stringToDouble(String str, double defaultValue) {\n+      if(str==null) {\n+          return defaultValue;\n+      }\n+      try {\n+          return Double.parseDouble(str);\n       } catch (NumberFormatException nfe) {\n           return defaultValue;\n       }\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: NumberUtilsTest.java,v 1.8 2003/09/04 07:27:12 psteitz Exp $\n+ * @version $Id: NumberUtilsTest.java,v 1.9 2003/09/05 15:55:09 psteitz Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n     }\n \n     /**\n+     * Test for long stringToLong(String)\n+     */\n+    public void testStringToLongString() {\n+        assertTrue(\"stringToLong(String) 1 failed\", NumberUtils.stringToLong(\"12345\") == 12345l);\n+        assertTrue(\"stringToLong(String) 2 failed\", NumberUtils.stringToLong(\"abc\") == 0l);\n+        assertTrue(\"stringToLong(String) 3 failed\", NumberUtils.stringToLong(\"1L\") == 0l);\n+        assertTrue(\"stringToLong(String) 4 failed\", NumberUtils.stringToLong(\"1l\") == 0l);\n+        assertTrue(\"stringToLong(Long.MAX_VALUE) failed\", NumberUtils.stringToLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n+        assertTrue(\"stringToLong(Long.MIN_VALUE) failed\", NumberUtils.stringToLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n+        assertTrue(\"stringToLong(empty) failed\", NumberUtils.stringToLong(\"\") == 0l);\n+        assertTrue(\"stringToLong(null) failed\", NumberUtils.stringToLong(null) == 0l);\n+    }\n+\n+    /**\n+     * Test for long stringToLong(String, long)\n+     */\n+    public void testStringToLongStringL() {\n+        assertTrue(\"stringToLong(String,long) 1 failed\", NumberUtils.stringToLong(\"12345\", 5l) == 12345l);\n+        assertTrue(\"stringToLong(String,long) 2 failed\", NumberUtils.stringToLong(\"1234.5\", 5l) == 5l);\n+    }\n+\n+    /**\n      * Test for float stringToFloat(String)\n      */\n     public void testStringToFloatString() {\n         assertTrue(\"stringToFloat(String) 1 failed\", NumberUtils.stringToFloat(\"-1.2345\") == -1.2345f);\n         assertTrue(\"stringToFloat(String) 2 failed\", NumberUtils.stringToFloat(\"1.2345\") == 1.2345f);\n         assertTrue(\"stringToFloat(String) 3 failed\", NumberUtils.stringToFloat(\"abc\") == 0.0f);\n+        assertTrue(\"stringToFloat(Float.MAX_VALUE) failed\", NumberUtils.stringToFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n+        assertTrue(\"stringToFloat(Float.MIN_VALUE) failed\", NumberUtils.stringToFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n         assertTrue(\"stringToFloat(empty) failed\", NumberUtils.stringToFloat(\"\") == 0.0f);\n         assertTrue(\"stringToFloat(null) failed\", NumberUtils.stringToFloat(null) == 0.0f);\n     }\n     public void testStringToFloatStringF() {\n         assertTrue(\"stringToFloat(String,int) 1 failed\", NumberUtils.stringToFloat(\"1.2345\", 5.1f) == 1.2345f);\n         assertTrue(\"stringToFloat(String,int) 2 failed\", NumberUtils.stringToFloat(\"a\", 5.0f) == 5.0f);\n+    }\n+\n+    /**\n+     * Test for double stringToDouble(String)\n+     */\n+    public void testStringToDoubleString() {\n+        assertTrue(\"stringToDouble(String) 1 failed\", NumberUtils.stringToDouble(\"-1.2345\") == -1.2345d);\n+        assertTrue(\"stringToDouble(String) 2 failed\", NumberUtils.stringToDouble(\"1.2345\") == 1.2345d);\n+        assertTrue(\"stringToDouble(String) 3 failed\", NumberUtils.stringToDouble(\"abc\") == 0.0d);\n+        assertTrue(\"stringToDouble(Double.MAX_VALUE) failed\", NumberUtils.stringToDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n+        assertTrue(\"stringToDouble(Double.MIN_VALUE) failed\", NumberUtils.stringToDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n+        assertTrue(\"stringToDouble(empty) failed\", NumberUtils.stringToDouble(\"\") == 0.0d);\n+        assertTrue(\"stringToDouble(null) failed\", NumberUtils.stringToDouble(null) == 0.0d);\n+    }\n+\n+    /**\n+     * Test for double stringToFloat(String, float)\n+     */\n+    public void testStringToDoubleStringD() {\n+        assertTrue(\"stringToDouble(String,int) 1 failed\", NumberUtils.stringToDouble(\"1.2345\", 5.1d) == 1.2345d);\n+        assertTrue(\"stringToDouble(String,int) 2 failed\", NumberUtils.stringToDouble(\"a\", 5.0d) == 5.0d);\n     }\n \n     public void testCreateNumber() {", "timestamp": 1062777309, "metainfo": ""}