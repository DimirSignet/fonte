{"sha": "043babf502ddf5a8fa731cb6b3a56814c14952a1", "log": "Great set of javadoc improvements from Fredrik. Also an optimisation to StringUtils.leftPad/rightPad. Submitted by: Fredrik Westermarck   ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.13 2003/06/09 21:36:02 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.14 2003/07/08 05:59:58 bayard Exp $\n  */\n public class RandomStringUtils {\n \n      * <p>Creates a random string based on a variety of options, using\n      * default source of randomness.</p>\n      *\n-     * This method has exactly the same semantics as {@link\n+     * <p>This method has exactly the same semantics as {@link\n      * #random(int,int,int,boolean,boolean,char[],Random)}, but\n      * instead of using an externally supplied source of randomness, it uses\n-     * the internal static {@link Random} instance ({@link #RANDOM}).\n+     * the internal static {@link Random} instance ({@link #RANDOM}).</p>\n      *\n      * @param count length of random string to create\n      * @param start position in set of chars to start at\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n \n import java.io.IOException;\n import java.io.Writer;\n-import java.io.PrintWriter;\n-\n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.15 2003/07/05 23:37:30 alex Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.16 2003/07/08 05:59:58 bayard Exp $\n  */\n public class StringEscapeUtils {\n \n \n     /**\n      * <p><code>StringEscapeUtils</code> instances should NOT be constructed in\n-     * standard programming.</p> \n-     * <p>Instead, the class should be used as:</p>\n-     * <pre>StringEscapeUtils.escapeJava(\"foo\");</pre>\n+     * standard programming.</p>\n+     *\n+     * <p>Instead, the class should be used as:\n+     * <pre>StringEscapeUtils.escapeJava(\"foo\");</pre></p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n     //--------------------------------------------------------------------------\n     /**\n      * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n+     *\n      * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n      *\n      * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     }\n \n     /**\n-     * <p>Escapes the characters in a <code>String</code> using Java String rules to a <code>Writer</code>.</p>\n+     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n+     * a <code>Writer</code>.</p>\n      * \n      * @see #escapeJava(java.lang.String)\n      * @param out Writer to write escaped string into\n     }\n \n     /**\n-     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules to a <code>Writer</code>.</p>\n+     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n+     * to a <code>Writer</code>.</p>\n      * \n      * @see #escapeJavaScript(java.lang.String)\n      * @param out Writer to write escaped string into\n     }\n \n     /**\n-     * Returns an upper case hexadecimal <code>String</code> for the given character.\n+     * <p>Returns an upper case hexadecimal <code>String</code> for the given\n+     * character.</p>\n      * \n      * @param ch The character to convert.\n      * @return An upper case hexadecimal <code>String</code>\n     }\n \n     /**\n-     * Unescapes any Java literals found in the <code>String</code>. \n-     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n-     * unless the '\\' is preceded by another '\\'.\n+     * <p>Unescapes any Java literals found in the <code>String</code>.\n+     * For example, it will turn a sequence of <code>'\\'</code> and\n+     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n+     * is preceded by another <code>'\\'</code>.</p>\n      * \n      * @param str The <code>String</code> to unescape.\n      * @return A new unescaped <code>String</code>.\n     }\n \n     /**\n-     * Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>. \n-     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n-     * unless the '\\' is preceded by another '\\'.\n+     * <p>Unescapes any Java literals found in the <code>String</code> to a\n+     * <code>Writer</code>.</p>\n+     *\n+     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n+     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n+     * is preceded by another <code>'\\'</code>.</p>\n      * \n      * @param out The <code>Writer</code> used to output unescaped characters.\n      * @param str The <code>String</code> to unescape.\n     }\n \n     /**\n-     * Unescapes any JavaScript literals found in the <code>String</code>.\n-     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n-     * unless the '\\' is preceded by another '\\'.\n+     * <p>Unescapes any JavaScript literals found in the <code>String</code>.</p>\n+     *\n+     * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n+     * into a newline character, unless the <code>'\\'</code> is preceded by another\n+     * <code>'\\'</code>.</p>\n      *\n      * @param str The <code>String</code> to unescape.\n      * @return A new unescaped <code>String</code>.\n     }\n \n     /**\n-     * Unescapes any JavaScript literals found in the <code>String</code> to a <code>Writer</code>.\n-     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n-     * unless the '\\' is preceded by another '\\'.\n+     * <p>Unescapes any JavaScript literals found in the <code>String</code> to a\n+     * <code>Writer</code>.</p>\n+     *\n+     * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n+     * into a newline character, unless the <code>'\\'</code> is preceded by another\n+     * <code>'\\'</code>.</p>\n      *\n      * @param out The <code>Writer</code> used to output unescaped characters.\n      * @param str The <code>String</code> to unescape.\n \n     /**\n      * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n+     *\n      * <p>\n      * For example: <tt>\"bread\" & \"butter\"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      * </p>\n-     * <p>Supports all known HTML 4.0 entities, including funky accents.\n-     * </p>\n+     *\n+     * <p>Supports all known HTML 4.0 entities, including funky accents.</p>\n      * \n      * @param str The <code>String</code> to escape\n      * @return A new escaped <code>String</code>.\n      * <p>Unescapes a string containing entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n      * escapes. Supports HTML 4.0 entities.</p>\n+     *\n      * <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n      * will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n+     *\n      * <p>If an entity is unrecognized, it is left alone, and inserted\n      * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      * become \"&gt;&amp;zzzz;x\".</p>\n \n     /**\n      * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n-     * <p>\n-     * For example: <tt>\"bread\" & \"butter\"</tt> =>\n+     *\n+     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n      * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      * </p>\n-     * <p>\n-     * Supports only the four basic XML entities (gt, lt, quot, amp).\n-     * Does not support DTDs or external entities.\n-     * </p>\n+     *\n+     * <p>Supports only the four basic XML entities (gt, lt, quot, amp).\n+     * Does not support DTDs or external entities.</p>\n+     *\n      * @param str The <code>String</code> to escape\n      * @return A new escaped <code>String</code>.\n      * @see #unescapeXml(java.lang.String)\n     /**\n      * <p>Unescapes a string containing XML entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n-     * escapes.\n-     * </p>\n-     * <p>\n-     * Supports only the four basic XML entities (gt, lt, quot, amp).\n-     * Does not support DTDs or external entities.\n-     * </p>\n+     * escapes.</p>\n+     *\n+     * <p>Supports only the four basic XML entities (gt, lt, quot, amp).\n+     * Does not support DTDs or external entities.</p>\n      *\n      * @param str The <code>String</code> to unescape\n      * @return A new unescaped <code>String</code>.\n     }\n \n     /**\n-     * Escapes the characters in a <code>String</code> to be suitable to pass to\n-     * an SQL query.  For example,\n+     * <p>Escapes the characters in a <code>String</code> to be suitable to pass to\n+     * an SQL query.</p>\n+     *\n+     * <p>For example,\n      * <pre>statement.executeQuery(\"SELECT * FROM MOVIES WHERE TITLE='\" + \n      *   StringEscapeUtils.escapeSql(\"McHale's Navy\") + \n      *   \"'\");</pre>\n-     * At present, this method only turns single-quotes into doubled single-quotes (<code>\"McHale's Navy\"</code> => <code>\"McHale''s Navy\"</code>).\n-     * It does not handle the cases of percent (%) or underscore (_) for use in LIKE clauses.\n+     * </p>\n+     *\n+     * <p>At present, this method only turns single-quotes into doubled single-quotes\n+     * (<code>\"McHale's Navy\"</code> => <code>\"McHale''s Navy\"</code>). It does not\n+     * handle the cases of percent (%) or underscore (_) for use in LIKE clauses.</p>\n+     *\n      * see http://www.jguru.com/faq/view.jsp?EID=8881\n      * @param s the string to escape\n      * @return A new String, escaped for SQL\n--- a/src/java/org/apache/commons/lang/StringPrintWriter.java\n+++ b/src/java/org/apache/commons/lang/StringPrintWriter.java\n import java.io.*;\n \n /**\n- * A PrintWriter that maintains a String as its backing store.\n- * Usage: <pre>\n+ * <p>A PrintWriter that maintains a String as its backing store.</p>\n+ *\n+ * <p>Usage:\n+ * <pre>\n  * StringPrintWriter out = new StringPrintWriter();\n  * printTo(out);\n  * System.out.println( out.getString() );\n  * </pre>\n+ * </p>\n+ *\n  * @author Alex Chaffee\n  * @author Scott Stanchfield\n  **/\n     }\n \n     /**\n-     * Since toString() returns information *about* this object, we\n+     * <p>Since toString() returns information *about* this object, we\n      * want a separate method to extract just the contents of the\n-     * internal buffer as a String.\n+     * internal buffer as a String.</p>\n+     *\n      * @return the contents of the internal string buffer\n      */\n     public String getString() {\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.51 2003/06/24 21:14:50 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.52 2003/07/08 05:59:58 bayard Exp $\n  */\n public class StringUtils {\n \n     /**\n      * <p>An array of <code>String</code>s used for padding.</p>\n      *\n-     * <p>Used for efficient blank padding.  The length of each string expands as needed.</p>\n+     * <p>Used for efficient blank padding. The length of each string expands as needed.</p>\n      */\n     private final static String[] padding = new String[Character.MAX_VALUE];\n        // String.concat about twice as fast as StringBuffer.append\n \n     /**\n      * <p>Remove one newline from end of a String if it's there,\n-     * otherwise leave it alone.  A newline is \"\\n\", \"\\r\", or \"\\r\\n\".\n-     * <p>\n-     * Note that this behavior has changed from 1.0.  It\n+     * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n+     * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n+     *\n+     * <p>Note that this behavior has changed from 1.0.  It\n      * now more closely matches Perl chomp.  For the previous behavior,\n-     * use slice(String).\n+     * use {@link #slice(String)}.</p>\n      *\n      * @param str String to chomp a newline from\n      * @return String without newline\n     }\n \n     /**\n-     * <p>Remove one string (the separator) from the end of another\n-     * string if it's there, otherwise leave it alone.\n-     * <p>\n-     *\n-     * Note that this behavior has changed from 1.0.  It\n+     * <p>Remove <code>separator</code> from the end of\n+     * <code>str</code> if it's there, otherwise leave it alone.</p>\n+     *\n+     * <p>Note that this behavior has changed from 1.0.  It\n      * now more closely matches Perl chomp.  For the previous behavior,\n-     * use {@link #slice(String,String)}.\n+     * use {@link #slice(String,String)}.</p>\n      *\n      * @param str string to chomp from\n      * @param separator separator string\n     }\n \n     /**\n-     * <p>Remove a newline if and only if it is at the end\n+     * <p>Remove any &quot;\\n&quot; if and only if it is at the end\n      * of the supplied String.</p>\n      * \n      * @param str String to chomp from\n \n     /**\n      * <p>Remove the last newline, and everything after it from a String.</p>\n-     * (This method was formerly named chomp or chopNewline.)\n+     *\n+     * <p><em>(This method was formerly named chomp or chopNewline.)</em></p>\n      *\n      * @param str String to slice the newline from\n      * @return String without sliced newline\n     /**\n      * <p>Find the last occurence of a separator String;\n      * remove it and everything after it.</p>\n-     * (This method was formerly named chomp.)\n+     *\n+     * <p><em>(This method was formerly named chomp.)</em></p>\n      *\n      * @param str String to slice from\n      * @param sep String to slice\n     /**\n      * <p>Find the last occurence of a separator String, and return\n      * everything after it.</p>\n-     * (This method was formerly named getchomp. Also, now it does not\n-     * include the separator in the return value.)\n+     *\n+     * <p><em>(This method was formerly named getchomp. Also, now it does not\n+     * include the separator in the return value.)</em></p>\n      *\n      * @param str String to slice from\n      * @param sep String to slice\n     /**\n      * <p>Find the first occurence of a separator String, and return\n      * everything after it.</p>\n-     * (This method was formerly named prechomp.  Also, previously\n-     * it included the separator in the return value; now it does not.)\n+     *\n+     * <p><em>(This method was formerly named prechomp.  Also, previously\n+     * it included the separator in the return value; now it does not.)</em></p>\n      *\n      * @param str String to slice from\n      * @param sep String to slice\n     /**\n      * <p>Find the first occurence of a separator string;\n      * return everything before it (but not including the separator).</p>\n-     * (This method was formerly named getPrechomp.  Also, it used to\n-     * include the separator, but now it does not.)\n+     *\n+     * <p><em>(This method was formerly named getPrechomp.  Also, it used to\n+     * include the separator, but now it does not.)</em></p>\n      *\n      * @param str String to slice from\n      * @param sep String to slice\n     }\n \n     /**\n-     * Unescapes any Java literals found in the String. For example, \n-     * it will turn a sequence of '\\' and 'n' into a newline character, \n-     * unless the '\\' is preceded by another '\\'.\n-     * <p>\n-     * As of Lang 2.0, this calls {@link StringEscapeUtils#unescapeJava(java.lang.String)}\n-     * behind the scenes. \n-     * <p>\n+     * <p>Unescapes any Java literals found in the String. For example,\n+     * it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n+     * into a newline character, unless the <code>'\\'</code> is preceded\n+     * by another <code>'\\'</code>.</p>\n+     *\n+     * <p>As of Lang 2.0, this calls {@link StringEscapeUtils#unescapeJava(java.lang.String)}\n+     * behind the scenes.</p>\n+     *\n      * @see StringEscapeUtils#unescapeJava(java.lang.String)\n      * @deprecated Use {@link StringEscapeUtils#unescapeJava(java.lang.String)}\n      *             This method will be removed in Commons Lang 3.0\n     }\n \n     /**\n-     * <p>Returns padding using the specified delimiter repeated to a given length.\n-     * </p>\n+     * <p>Returns padding using the specified delimiter repeated\n+     * to a given length.</p>\n      *\n      * @param repeat number of times to repeat delim\n      * @param delim character to repeat\n             return str; // returns original string when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return rightPad(str, size, \" \");\n+            return rightPad(str, size, ' ');\n         }\n         return str + padding(pads);\n     }\n             return str; // returns original string when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return leftPad(str, size, \" \");\n+            return leftPad(str, size, ' ');\n         }\n         return padding(pads).concat(str);\n     }\n \n     /**\n-     * Left pad a String with a specified character. Pad to a size of n.\n+     * <p>Left pad a String with a specified character.</p>\n+     *\n+     * <p>Pad to a size of <code>n</code>.</p>\n      *\n      * @param str String to pad out\n      * @param size size to pad to\n             return str; // returns original string when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return leftPad(str, size, \" \");\n+            return leftPad(str, size, ' ');\n         }\n         return padding(pads, delim).concat(str);\n     }\n \n     /**\n-     * Left pad a String with a specified string. Pad to a size of n.\n+     * <p>Left pad a String with a specified string.</p>\n+     *\n+     * <p>Pad to a size of <code>n</code>.</p>\n      *\n      * @param str String to pad out\n      * @param size size to pad to\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Turn \"Now is the time for all good men\" into \"Now is the time for...\"\n-     * <p>\n-     * Specifically:\n-     * <p>\n-     * If str is less than max characters long, return it.\n-     * Else abbreviate it to (substring(str, 0, max-3) + \"...\").\n-     * If maxWidth is less than 3, throw an IllegalArgumentException.\n-     * In no case will it return a string of length greater than maxWidth.\n+     * <p>Turn \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n+     *\n+     * <p>Specifically:\n+     * <ul>\n+     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n+     *       long, return it.</li>\n+     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n+     *   <li>If <code>maxWidth</code> is less than </code>3, throw an\n+     *       <code>IllegalArgumentException</code>.</li>\n+     *   <li>In no case will it return a string of length greater than\n+     *       <code>maxWidth</code>.</li>\n+     * </ul>\n+     * </p>\n      *\n      * @param maxWidth maximum length of result string\n      */\n     }\n \n     /**\n-     * Turn \"Now is the time for all good men\" into \"...is the time for...\"\n-     * <p>\n-     * Works like abbreviate(String, int), but allows you to specify a \"left edge\"\n-     * offset.  Note that this left edge is not necessarily going to be the leftmost\n-     * character in the result, or the first\n-     * character following the ellipses, but it will appear somewhere in the result.\n-     * In no case will it return a string of length greater than maxWidth.\n+     * <p>Turn \"Now is the time for all good men\" into \"...is the time for...\"</p>\n+     *\n+     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n+     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n+     * be the leftmost character in the result, or the first character following the\n+     * ellipses, but it will appear somewhere in the result.\n+     *\n+     * <p>In no case will it return a string of length greater than\n+     * <code>maxWidth</code>.</p>\n      *\n      * @param offset left edge of source string\n      * @param maxWidth maximum length of result string\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Compare two strings, and return the portion where they differ.\n+     * <p>Compare two strings, and return the portion where they differ.\n      * (More precisely, return the remainder of the second string,\n-     * starting from where it's different from the first.)\n+     * starting from where it's different from the first.)</p>\n+     *\n      * <p>\n      * For example, <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>\n      *\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Michael Becke\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.16 2003/06/08 14:10:54 scolebourne Exp $\n+ * @version $Id: SystemUtils.java,v 1.17 2003/07/08 05:59:58 bayard Exp $\n  */\n public class SystemUtils {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * The <code>file.encoding</code> System Property.\n+     * <p>The <code>file.encoding</code> System Property.</p>\n      * <p>File encoding, such as <code>Cp1252</code>.</p>\n      * \n      * <p>Defaults to <code>null</code> if the runtime does not have\n     public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\");\n \n     /**\n-     * The <code>file.separator</code> System Property.\n-     * File separator (\"/\" on UNIX).\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>file.separator</code> System Property.\n+     * File separator (<code>&quot;/&quot;</code> on UNIX).</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java version 1.1.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).\n-     * <p>\n-     * The field will return false if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n \n     /**\n-     * Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).\n-     * <p>\n-     * The field will return false if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n \n     /**\n-     * Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).\n-     * <p>\n-     * The field will return false if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n \n     /**\n-     * Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).\n-     * <p>\n-     * The field will return false if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).</p>\n+     *\n+     * <p>The field will <code>false</code> false if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n \n     /**\n-     * Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).\n-     * <p>\n-     * The field will return false if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).</p>\n+     *\n+     * <p>The field will return <code>false</code> if {@link #JAVA_VERSION} is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n \n     /**\n-     * Is <code>true</code> if this is AIX.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is AIX.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n \n     /**\n-     * Is <code>true</code> if this is HP-UX.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is HP-UX.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n \n     /**\n-     * Is <code>true</code> if this is Irix.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Irix.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n \n     /**\n-     * Is <code>true</code> if this is Linux.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Linux.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n     // Windows XP returns 'Windows 2000' just for fun...\n \n     /**\n-     * Is <code>true</code> if this is Mac.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Mac.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n \n     /**\n-     * Is <code>true</code> if this is Mac.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Mac.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n \n     /**\n-     * Is <code>true</code> if this is Mac.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Mac.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n \n     /**\n-     * Is <code>true</code> if this is Solaris.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Solaris.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n \n     /**\n-     * Is <code>true</code> if this is SunOS.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is SunOS.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n \n     // if you want another added or a mistake corrected\n \n     /**\n-     * Is <code>true</code> if this is Windows.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n \n     /**\n-     * Is <code>true</code> if this is Windows 2000.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows 2000.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n \n     /**\n-     * Is <code>true</code> if this is Windows 95.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows 95.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n     // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n \n     /**\n-     * Is <code>true</code> if this is Windows 98.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows 98.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n     // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n \n     /**\n-     * Is <code>true</code> if this is Windows ME.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows ME.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n     // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n \n     /**\n-     * Is <code>true</code> if this is Windows NT.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows NT.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n     // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n \n     /**\n-     * Is <code>true</code> if this is Windows XP.\n-     * <p>\n-     * The field will return false if <code>OS_NAME</code> is <code>null</code>.</p>\n+     * <p>Is <code>true</code> if this is Windows XP.</p>\n+     *\n+     * <p>The field will return <code>false</code> if <code>OS_NAME</code> is\n+     * <code>null</code>.</p>\n      */\n     public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n \n     /**\n-     * The <code>java.class.path</code> System Property.\n-     * Java class path.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.class.path</code> System Property. Java class path.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java version 1.1.\n     public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n \n     /**\n-     * The <code>java.class.version</code> System Property.\n-     * Java class format version number.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.class.version</code> System Property.\n+     * Java class format version number.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java version 1.1.\n     public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n \n     /**\n-     * The <code>java.compiler</code> System Property.\n-     * Name of JIT compiler to use.\n-     * First in JDK version 1.2. Not used in Sun JDKs after 1.2.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.compiler</code> System Property. Name of JIT compiler to use.\n+     * First in JDK version 1.2. Not used in Sun JDKs after 1.2.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java version 1.2. Not used in Sun versions after 1.2.\n     public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n \n     /**\n-     * The <code>java.ext.dirs</code> System Property.\n-     * Path of extension directory or directories.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.ext.dirs</code> System Property. Path of extension directory\n+     * or directories.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.3\n     public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n \n     /**\n-     * The <code>java.home</code> System Property.\n-     * Java installation directory.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.home</code> System Property. Java installation directory.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_HOME = getSystemProperty(\"java.home\");\n \n     /**\n-     * The <code>java.io.tmpdir</code> System Property.\n-     * Default temp file path.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.io.tmpdir</code> System Property. Default temp file path.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_IO_TMPDIR = getSystemProperty(\"java.io.tmpdir\");\n \n     /**\n-     * The <code>java.library.path</code> System Property.\n-     * List of paths to search when loading libraries.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.library.path</code> System Property. List of paths to search\n+     * when loading libraries.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n \n     /**\n-     * The <code>java.runtime.name</code> System Property.\n-     * Java Runtime Environment name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.runtime.name</code> System Property. Java Runtime Environment\n+     * name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.3\n     public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\");\n \n     /**\n-     * The <code>java.runtime.version</code> System Property.\n-     * Java Runtime Environment version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.runtime.version</code> System Property. Java Runtime Environment\n+     * version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.3\n     public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\");\n \n     /**\n-     * The <code>java.specification.name</code> System Property.\n-     * Java Runtime Environment specification name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.specification.name</code> System Property. Java Runtime Environment\n+     * specification name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n \n     /**\n-     * The <code>java.specification.vendor</code> System Property.\n-     * Java Runtime Environment specification vendor.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.specification.vendor</code> System Property. Java Runtime Environment\n+     * specification vendor.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n \n     /**\n-     * The <code>java.specification.version</code> System Property.\n-     * Java Runtime Environment specification version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.specification.version</code> System Property. Java Runtime Environment\n+     * specification version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.3\n     public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n \n     /**\n-     * The <code>java.vendor</code> System Property.\n-     * Java vendor-specific string.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vendor</code> System Property. Java vendor-specific string.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n \n     /**\n-     * The <code>java.vendor.url</code> System Property.\n-     * Java vendor URL.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vendor.url</code> System Property. Java vendor URL.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n       * \n      * @since Java 1.1\n     public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n \n     /**\n-     * The <code>java.version</code> System Property.\n-     * Java version number.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.version</code> System Property. Java version number.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the Java version as a <code>float</code>.\n+     * <p>Gets the Java version as a <code>float</code>.</p>\n+     *\n      * <p>Example return values:</p>\n      * <ul>\n      *  <li><code>1.2f</code> for JDK 1.2\n      *  <li><code>1.31f</code> for JDK 1.3.1\n      * </ul>\n-     * <p>\n-     * The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     *\n+     * <p>The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.</p>\n      */\n     public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();\n \n     /**\n-     * Gets the Java version as an <code>int</code>.\n+     * <p>Gets the Java version as an <code>int</code>.</p>\n+     *\n      * <p>Example return values:</p>\n      * <ul>\n      *  <li><code>120</code> for JDK 1.2\n      *  <li><code>131</code> for JDK 1.3.1\n      * </ul>\n-     * <p>\n-     * The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     *\n+     * <p>The field will return zero if {@link #JAVA_VERSION} is <code>null</code>.</p>\n      */\n     public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n \n     /**\n-     * The <code>java.vm.info</code> System Property.\n-     * Java Virtual Machine implementation info.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.info</code> System Property. Java Virtual Machine implementation\n+     * info.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n \n     /**\n-     * The <code>java.vm.name</code> System Property.\n-     * Java Virtual Machine implementation name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.name</code> System Property. Java Virtual Machine implementation\n+     * name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n \n     /**\n-     * The <code>java.vm.specification.name</code> System Property.\n-     * Java Virtual Machine specification name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.specification.name</code> System Property. Java Virtual Machine\n+     * specification name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n \n     /**\n-     * The <code>java.vm.specification.vendor</code> System Property.\n-     * Java Virtual Machine specification vendor.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.specification.vendor</code> System Property. Java Virtual\n+     * Machine specification vendor.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n \n     /**\n-     * The <code>java.vm.specification.version</code> System Property.\n-     * Java Virtual Machine specification version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.specification.version</code> System Property. Java Virtual Machine\n+     * specification version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n \n     /**\n-     * The <code>java.vm.vendor</code> System Property.\n-     * Java Virtual Machine implementation vendor.\n-      * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.vendor</code> System Property. Java Virtual Machine implementation\n+     * vendor.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n \n     /**\n-     * The <code>java.vm.version</code> System Property.\n-     * Java Virtual Machine implementation version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>java.vm.version</code> System Property. Java Virtual Machine\n+     * implementation version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n \n     /**\n-     * The <code>line.separator</code> System Property.\n-     * Line separator (\"\\n\" on UNIX).\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>line.separator</code> System Property. Line separator\n+     * (<code>&quot;\\n<&quot;</code> on UNIX).</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n \n     /**\n-     * The <code>os.arch</code> System Property.\n-     * Operating system architecture.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>os.arch</code> System Property. Operating system architecture.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n \n     /**\n-     * The <code>os.name</code> System Property.\n-     * Operating system name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>os.name</code> System Property. Operating system name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String OS_NAME = getSystemProperty(\"os.name\");\n \n     /**\n-     * The <code>os.version</code> System Property.\n-     * Operating system version.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>os.version</code> System Property. Operating system version.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String OS_VERSION = getSystemProperty(\"os.version\");\n \n     /**\n-     * The <code>path.separator</code> System Property.\n-     * Path separator (\":\" on UNIX).\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>path.separator</code> System Property. Path separator\n+     * (<code>&quot;:&quot;</code> on UNIX).</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n \n     /**\n-     * The <code>user.country</code> or <code>user.region</code> System Property.\n-     * User's country code, such as <code>GB</code>.\n-     * First in JDK version 1.2 as <code>user.region</code>.\n-     * Renamed to <code>user.country</code> in 1.4\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>user.country</code> or <code>user.region</code> System Property.\n+     * User's country code, such as <code>GB</code>. First in JDK version 1.2 as\n+     * <code>user.region</code>. Renamed to <code>user.country</code> in 1.4</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n             getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"));\n \n     /**\n-     * The <code>user.dir</code> System Property.\n-     * User's current working directory.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>user.dir</code> System Property. User's current working\n+     * directory.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String USER_DIR = getSystemProperty(\"user.dir\");\n \n     /**\n-     * The <code>user.home</code> System Property.\n-     * User's home directory.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>user.home</code> System Property. User's home directory.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     public static final String USER_HOME = getSystemProperty(\"user.home\");\n \n     /**\n-     * The <code>user.language</code> System Property.\n-     * User's language code, such as 'en'.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>user.language</code> System Property. User's language code,\n+     * such as 'en'.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.2\n     public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n \n     /**\n-     * The <code>user.name</code> System Property.\n-     * User's account name.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n+     * <p>The <code>user.name</code> System Property. User's account name.</p>\n+     *\n+     * <p>Defaults to <code>null</code> if the runtime does not have\n      * security access to read this property or the property does not exist.</p>\n      * \n      * @since Java 1.1\n     }\n \n     /**\n-     * Decides if the java version matches.\n+     * <p>Decides if the java version matches.</p>\n      * \n      * @param versionPrefix  the prefix for the java version\n      * @return true if matches, or false if not or can't determine\n     }    \n     \n     /**\n-     * Decides if the operating system matches.\n+     * <p>Decides if the operating system matches.</p>\n      * \n      * @param osNamePrefix  the prefix for the os name\n      * @return true if matches, or false if not or can't determine\n     }    \n \n     /**\n-     * Decides if the operating system matches.\n+     * <p>Decides if the operating system matches.</p>\n      * \n      * @param osNamePrefix  the prefix for the os name\n      * @param osVersionPrefix  the prefix for the version\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a System property, defaulting to <code>null</code> if the property \n-     * cannot be read. If a <code>SecurityException</code> is caught, the return\n-     * value is <code>null</code> and a message is written to <code>System.err</code>.\n+     * <p>Gets a System property, defaulting to <code>null</code> if the property\n+     * cannot be read.</p>\n+     *\n+     * <p>If a <code>SecurityException</code> is caught, the return\n+     * value is <code>null</code> and a message is written to <code>System.err</code>.</p>\n      * \n      * @param property the system property name\n      * @return the system property value or <code>null</code> if a security problem occurs\n--- a/src/java/org/apache/commons/lang/WordWrapUtils.java\n+++ b/src/java/org/apache/commons/lang/WordWrapUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: WordWrapUtils.java,v 1.4 2003/06/08 23:27:26 scolebourne Exp $\n+ * @version $Id: WordWrapUtils.java,v 1.5 2003/07/08 05:59:58 bayard Exp $\n  */\n public class WordWrapUtils {\n \n     //--------------------------------------------------------------------------\n \n     /**\n-     * Wraps a block of text to a specified line length.\n-     * <p>\n-     * This method takes a block of text, which might have long lines in it\n+     * <p>Wraps a block of text to a specified line length.</p>\n+     *\n+     * <p>This method takes a block of text, which might have long lines in it\n      * and wraps the long lines based on the supplied wrapColumn parameter. \n      * It was initially implemented for use by VelocityEmail. If there are tabs\n      * in inString, you are going to get results that are a bit strange,\n      * since tabs are a single character but are displayed as 4 or 8\n-     * spaces. Remove the tabs.\n+     * spaces. Remove the tabs.</p>\n      *\n      * @param str  text which is in need of word-wrapping\n      * @param newline  the characters that define a newline\n     }\n \n     /**\n-     * Wraps a single line of text. \n-     * Called by wrapText() to do the real work of wrapping.\n+     * <p>Wraps a single line of text. Called by wrapText() to do the real\n+     * work of wrapping.</p>\n      *\n      * @param line  a line which is in need of word-wrapping\n      * @param newline  the characters that define a newline\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Create a word-wrapped version of a String. Wrap at 80 characters and \n+     * <p>Create a word-wrapped version of a String. Wrap at 80 characters and\n      * use newlines as the delimiter. If a word is over 80 characters long \n-     * use a - sign to split it.\n+     * use a - sign to split it.</p>\n      */\n     public static String wordWrap(String str) {\n         return wordWrap(str, 80, \"\\n\", \"-\");\n     }\n     /**\n-     * Create a word-wrapped version of a String. Wrap at a specified width and \n+     * <p>Create a word-wrapped version of a String. Wrap at a specified width and\n      * use newlines as the delimiter. If a word is over the width in lenght \n-     * use a - sign to split it.\n+     * use a - sign to split it.</p>\n      */\n     public static String wordWrap(String str, int width) {\n         return wordWrap(str, width, \"\\n\", \"-\");\n     }\n     /**\n-     * Word-wrap a string.\n+     * <p>Word-wrap a string.</p>\n      *\n      * @param str   String to word-wrap\n      * @param width int to wrap at", "timestamp": 1057643998, "metainfo": ""}