{"sha": "cfafb7af5c0bd617603221d65e2c30c9b0b3fbaf", "log": "Applying Felix M\u00fcller's patch from LANG-462 to fix a timezone assumption in a test and remove Java 6 interface implementation @Override statements  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n     /* (non-Javadoc)\n      * @see DateParser#parse(java.lang.String)\n      */\n-    @Override\n     public Date parse(String source) throws ParseException {\n         return parser.parse(source);\n     }\n     /* (non-Javadoc)\n      * @see DateParser#parse(java.lang.String, java.text.ParsePosition)\n      */\n-    @Override\n     public Date parse(String source, ParsePosition pos) {\n             return parser.parse(source, pos);\n     }\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#getPattern()\n      */\n-    @Override\n     public String getPattern() {\n         return pattern;\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#getTimeZone()\n      */\n-    @Override\n     public TimeZone getTimeZone() {\n         return timeZone;\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#getLocale()\n      */\n-    @Override\n     public Locale getLocale() {\n         return locale;\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#parseObject(java.lang.String)\n      */\n-    @Override\n     public Object parseObject(String source) throws ParseException {\n         return parse(source);\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String)\n      */\n-    @Override\n     public Date parse(String source) throws ParseException {\n         Date date= parse(source, new ParsePosition(0));\n         if(date==null) {\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#parseObject(java.lang.String, java.text.ParsePosition)\n      */\n-    @Override\n     public Object parseObject(String source, ParsePosition pos) {\n         return parse(source, pos);\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DateParser#parse(java.lang.String, java.text.ParsePosition)\n      */\n-    @Override\n     public Date parse(String source, ParsePosition pos) {\n         int offset= pos.getIndex();\n         Matcher matcher= parsePattern.matcher(source.substring(offset));\n--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n      * @param pos  the position - ignored\n      * @return the buffer passed in\n      */\n-    @Override\n     public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n         if (obj instanceof Date) {\n             return format((Date) obj, toAppendTo);\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#format(long)\n      */\n-    @Override\n     public String format(long millis) {\n         return format(new Date(millis));\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date)\n      */\n-    @Override\n     public String format(Date date) {\n         Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar\n         c.setTime(date);\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)\n      */\n-    @Override\n     public String format(Calendar calendar) {\n         return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)\n      */\n-    @Override\n     public StringBuffer format(long millis, StringBuffer buf) {\n         return format(new Date(millis), buf);\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)\n      */\n-    @Override\n     public StringBuffer format(Date date, StringBuffer buf) {\n         Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar\n         c.setTime(date);\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)\n      */\n-    @Override\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         return applyRules(calendar, buf);\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#getPattern()\n      */\n-    @Override\n     public String getPattern() {\n         return mPattern;\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#getTimeZone()\n      */\n-    @Override\n     public TimeZone getTimeZone() {\n         return mTimeZone;\n     }\n     /* (non-Javadoc)\n      * @see org.apache.commons.lang3.time.DatePrinter#getLocale()\n      */\n-    @Override\n     public Locale getLocale() {\n         return mLocale;\n     }\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n         Date parse = fdf.parse(\"2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00\");\n                 assertEquals(cal.getTime(), parse);\n                 \n-        fdf = getInstance(\"y G M d a E H m s S Z\");\n+        fdf = getInstance(\"y G M d a E H m s S Z\", NEW_YORK, Locale.US);\n         assertEquals(cal.getTime(), fdf.parse(\"03 BC 2 10 PM Sat 15 33 20 989 -0500\"));\n         \n         cal.set(Calendar.ERA, GregorianCalendar.AD);", "timestamp": 1329643566, "metainfo": ""}