{"sha": "1fb95c93ba93ad713045da7e732bf59c0292c019", "log": "Applying 'fix' for LANG-530. DateUtils.parseDate now protects the common use case of FastDateFormat ZZ output, namely ZZ on the end of the pattern, from being passed to SimpleDateFormat as is. Use of ZZ elsewhere in the pattern isn't protected and will want to consider emulating the String changes made in this patch.   ", "commit": "\n--- a/src/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang3/time/DateUtils.java\n         SimpleDateFormat parser = null;\n         ParsePosition pos = new ParsePosition(0);\n         for (int i = 0; i < parsePatterns.length; i++) {\n+\n+            String pattern = parsePatterns[i];\n+\n+            // LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat\n+            if (parsePatterns[i].endsWith(\"ZZ\")) {\n+                pattern = pattern.substring(0, pattern.length() - 1);\n+            }\n+            \n             if (i == 0) {\n-                parser = new SimpleDateFormat(parsePatterns[0]);\n+                parser = new SimpleDateFormat(pattern);\n             } else {\n-                parser.applyPattern(parsePatterns[i]); // cannot be null if i != 0\n+                parser.applyPattern(pattern); // cannot be null if i != 0\n             }\n             pos.setIndex(0);\n-            Date date = parser.parse(str, pos);\n-            if (date != null && pos.getIndex() == str.length()) {\n+\n+            String str2 = str;\n+            // LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException\n+            if (parsePatterns[i].endsWith(\"ZZ\")) {\n+                str2 = str.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\"); \n+            }\n+\n+            Date date = parser.parse(str2, pos);\n+            if (date != null && pos.getIndex() == str2.length()) {\n                 return date;\n             }\n         }\n--- a/src/test/org/apache/commons/lang3/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/time/DateUtilsTest.java\n         // restore default time zone\n         TimeZone.setDefault(defaultZone);\n     }\n+\n+    // http://issues.apache.org/jira/browse/LANG-520\n+    public void testLang520() throws ParseException {\n+        Date d = new Date();\n+        String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\n+        Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });\n+        // the format loses milliseconds so have to reintroduce them\n+        assertEquals(\"Date not equal to itself ISO formatted and parsed\", d.getTime(), d2.getTime() + d.getTime() % 1000); \n+    }\n     \n     /**\n      * Tests various values with the ceiling method", "timestamp": 1261034485, "metainfo": ""}