{"sha": "7b2eb8418720fb33f4e15073e4198e5e1babd836", "log": "Revert 1391258 by veto of Sebb.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n  */\n \n public class Conversion {\n-\n-    private static final boolean[] BOOL_FFFF = {false, false, false, false};\n-    private static final boolean[] BOOL_TFFF = {true, false, false, false};\n-    private static final boolean[] BOOL_FTFF = {false, true, false, false};\n-    private static final boolean[] BOOL_TTFF = {true, true, false, false};\n-    private static final boolean[] BOOL_FFTF = {false, false, true, false};\n-    private static final boolean[] BOOL_TFTF = {true, false, true, false};\n-    private static final boolean[] BOOL_FTTF = {false, true, true, false};\n-    private static final boolean[] BOOL_TTTF = {true, true, true, false};\n-    private static final boolean[] BOOL_FFFT = {false, false, false, true};\n-    private static final boolean[] BOOL_TFFT = {true, false, false, true};\n-    private static final boolean[] BOOL_FTFT = {false, true, false, true};\n-    private static final boolean[] BOOL_TTFT = {true, true, false, true};\n-    private static final boolean[] BOOL_FFTT = {false, false, true, true};\n-    private static final boolean[] BOOL_TFTT = {true, false, true, true};\n-    private static final boolean[] BOOL_FTTT = {false, true, true, true};\n-    private static final boolean[] BOOL_TTTT = {true, true, true, true};\n-\n     /**\n      * <p>\n      * Converts a hexadecimal digit into an int using the default (Lsb0) bit ordering.\n      * @return a boolean array with the binary representation of <code>hexDigit</code>\n      */\n     public static boolean[] hexDigitToBools(char hexDigit) {\n-        final boolean[] array;\n         switch (hexDigit) {\n         case '0':\n-            array = BOOL_FFFF;\n-            break;\n+            return new boolean[]{false, false, false, false};\n         case '1':\n-            array = BOOL_TFFF;\n-            break;\n+            return new boolean[]{true, false, false, false};\n         case '2':\n-            array = BOOL_FTFF;\n-            break;\n+            return new boolean[]{false, true, false, false};\n         case '3':\n-            array = BOOL_TTFF;\n-            break;\n+            return new boolean[]{true, true, false, false};\n         case '4':\n-            array = BOOL_FFTF;\n-            break;\n+            return new boolean[]{false, false, true, false};\n         case '5':\n-            array = BOOL_TFTF;\n-            break;\n+            return new boolean[]{true, false, true, false};\n         case '6':\n-            array = BOOL_FTTF;\n-            break;\n+            return new boolean[]{false, true, true, false};\n         case '7':\n-            array = BOOL_TTTF;\n-            break;\n+            return new boolean[]{true, true, true, false};\n         case '8':\n-            array = BOOL_FFFT;\n-            break;\n+            return new boolean[]{false, false, false, true};\n         case '9':\n-            array = BOOL_TFFT;\n-            break;\n+            return new boolean[]{true, false, false, true};\n         case 'a':// fall through\n         case 'A':\n-            array = BOOL_FTFT;\n-            break;\n+            return new boolean[]{false, true, false, true};\n         case 'b':// fall through\n         case 'B':\n-            array = BOOL_TTFT;\n-            break;\n+            return new boolean[]{true, true, false, true};\n         case 'c':// fall through\n         case 'C':\n-            array = BOOL_FFTT;\n-            break;\n+            return new boolean[]{false, false, true, true};\n         case 'd':// fall through\n         case 'D':\n-            array = BOOL_TFTT;\n-            break;\n+            return new boolean[]{true, false, true, true};\n         case 'e':// fall through\n         case 'E':\n-            array = BOOL_FTTT;\n-            break;\n+            return new boolean[]{false, true, true, true};\n         case 'f':// fall through\n         case 'F':\n-            array = BOOL_TTTT;\n-            break;\n+            return new boolean[]{true, true, true, true};\n         default:\n             throw new IllegalArgumentException(\"Cannot interpret '\"\n                 + hexDigit\n                 + \"' as a hexadecimal digit\");\n         }\n-        return array.clone();\n     }\n \n     /**\n      * @return a boolean array with the binary representation of <code>hexDigit</code>\n      */\n     public static boolean[] hexDigitM0ToBools(char hexDigit) {\n-        final boolean[] array;\n         switch (hexDigit) {\n         case '0':\n-            array = BOOL_FFFF;\n-            break;\n+            return new boolean[]{false, false, false, false};\n         case '1':\n-            array = BOOL_FFFT;\n-            break;\n+            return new boolean[]{false, false, false, true};\n         case '2':\n-            array = BOOL_FFTF;\n-            break;\n+            return new boolean[]{false, false, true, false};\n         case '3':\n-            array = BOOL_FFTT;\n-            break;\n+            return new boolean[]{false, false, true, true};\n         case '4':\n-            array = BOOL_FTFF;\n-            break;\n+            return new boolean[]{false, true, false, false};\n         case '5':\n-            array = BOOL_FTFT;\n-            break;\n+            return new boolean[]{false, true, false, true};\n         case '6':\n-            array = BOOL_FTTF;\n-            break;\n+            return new boolean[]{false, true, true, false};\n         case '7':\n-            array = BOOL_FTTT;\n-            break;\n+            return new boolean[]{false, true, true, true};\n         case '8':\n-            array = BOOL_TFFF;\n-            break;\n+            return new boolean[]{true, false, false, false};\n         case '9':\n-            array = BOOL_TFFT;\n-            break;\n+            return new boolean[]{true, false, false, true};\n         case 'a':// fall through\n         case 'A':\n-            array = BOOL_TFTF;\n-            break;\n+            return new boolean[]{true, false, true, false};\n         case 'b':// fall through\n         case 'B':\n-            array = BOOL_TFTT;\n-            break;\n+            return new boolean[]{true, false, true, true};\n         case 'c':// fall through\n         case 'C':\n-            array = BOOL_TTFF;\n-            break;\n+            return new boolean[]{true, true, false, false};\n         case 'd':// fall through\n         case 'D':\n-            array = BOOL_TTFT;\n-            break;\n+            return new boolean[]{true, true, false, true};\n         case 'e':// fall through\n         case 'E':\n-            array = BOOL_TTTF;\n-            break;\n+            return new boolean[]{true, true, true, false};\n         case 'f':// fall through\n         case 'F':\n-            array = BOOL_TTTT;\n-            break;\n+            return new boolean[]{true, true, true, true};\n         default:\n             throw new IllegalArgumentException(\"Cannot interpret '\"\n                 + hexDigit\n                 + \"' as a hexadecimal digit\");\n         }\n-        return array.clone();\n     }\n \n     /**", "timestamp": 1348854016, "metainfo": ""}