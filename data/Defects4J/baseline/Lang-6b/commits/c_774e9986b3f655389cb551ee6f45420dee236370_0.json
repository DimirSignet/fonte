{"sha": "774e9986b3f655389cb551ee6f45420dee236370", "log": "Eat own dog food: StringUtils#isEmpty(String) and replace some but not all String#length() == 0 with String#isEmpty()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSetUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSetUtils.java\n             return null;\n         }\n         if (str.length() == 0 || deepEmpty(set)) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n         return modify(str, set, true);\n     }\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n      * @param className  the className to get the short name for\n      * @return the class name of the class without the package name or an empty string\n      */\n-    public static String getShortClassName(String className) {\n-        if (className == null) {\n-            return StringUtils.EMPTY;\n-        }\n-        if (className.length() == 0) {\n+    public static String getShortClassName(String className) {   \n+        if (StringUtils.isEmpty(className)) {\n             return StringUtils.EMPTY;\n         }\n \n      * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n-        if (className == null || className.length() == 0) {\n+        if (StringUtils.isEmpty(className)) {\n             return StringUtils.EMPTY;\n         }\n \n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n             for (int i = 0; i < locales.size(); i++) {\n                 Locale locale = locales.get(i);\n                 if (countryCode.equals(locale.getCountry()) &&\n-                        locale.getVariant().length() == 0) {\n+                        locale.getVariant().isEmpty()) {\n                     langs.add(locale);\n                 }\n             }\n                 Locale locale = locales.get(i);\n                 if (languageCode.equals(locale.getLanguage()) &&\n                         locale.getCountry().length() != 0 &&\n-                        locale.getVariant().length() == 0) {\n+                        locale.getVariant().isEmpty()) {\n                     countries.add(locale);\n                 }\n             }\n--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n             String token = frames.nextToken();\n             // Determine if the line starts with <whitespace>at\n             int at = token.indexOf(\"at\");\n-            if (at != -1 && token.substring(0, at).trim().length() == 0) {\n+            if (at != -1 && token.substring(0, at).trim().isEmpty()) {\n                 traceStarted = true;\n                 list.add(token);\n             } else if (traceStarted) {\n--- a/src/main/java/org/apache/commons/lang3/text/StrMatcher.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrMatcher.java\n      * @return a new Matcher for the given characters\n      */\n     public static StrMatcher charSetMatcher(String chars) {\n-        if (chars == null || chars.length() == 0) {\n+        if (StringUtils.isEmpty(chars)) {\n             return NONE_MATCHER;\n         }\n         if (chars.length() == 1) {\n--- a/src/main/java/org/apache/commons/lang3/text/StrTokenizer.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrTokenizer.java\n import java.util.NoSuchElementException;\n \n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n \n /**\n  * Tokenizes a string based based on delimiters (separators)\n      * @param tok  the token to add\n      */\n     private void addToken(List<String> list, String tok) {\n-        if (tok == null || tok.length() == 0) {\n+        if (StringUtils.isEmpty(tok)) {\n             if (isIgnoreEmptyTokens()) {\n                 return;\n             }\n--- a/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n         assertNotNull(\"valid locale\", locale);\n         assertEquals(language, locale.getLanguage());\n         //country and variant are empty\n-        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);\n-        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n+        assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty());\n+        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());\n     }\n \n     /**\n         assertEquals(language, locale.getLanguage());\n         assertEquals(country, locale.getCountry());\n         //variant is empty\n-        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n+        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());\n     }\n \n     /**\n                 Locale locale = iterator.next();\n                 // should have an en empty variant\n                 assertTrue(locale.getVariant() == null\n-                        || locale.getVariant().length() == 0);\n+                        || locale.getVariant().isEmpty());\n                 assertEquals(country, locale.getCountry());\n                 if (language.equals(locale.getLanguage())) {\n                     found = true;\n                 Locale locale = iterator.next();\n                 // should have an en empty variant\n                 assertTrue(locale.getVariant() == null\n-                        || locale.getVariant().length() == 0);\n+                        || locale.getVariant().isEmpty());\n                 assertEquals(language, locale.getLanguage());\n                 if (countrie.equals(locale.getCountry())) {\n                     found = true;", "timestamp": 1331488529, "metainfo": ""}