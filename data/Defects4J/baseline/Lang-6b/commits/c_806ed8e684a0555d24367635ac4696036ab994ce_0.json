{"sha": "806ed8e684a0555d24367635ac4696036ab994ce", "log": "unused imports + uh, why would you synchronize access to a ThreadLocal?  :P  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Map;\n-import java.util.Set;\n import java.util.WeakHashMap;\n \n import org.apache.commons.lang3.ClassUtils;\n      */\n     static void register(Object value) {\n         if (value != null) {\n-            WeakHashMap<Object, Object> m;\n-            synchronized (ToStringStyle.class) {\n-                m = REGISTRY.get();\n-                if (m == null) {\n-                    m = new WeakHashMap<Object, Object>();\n-                    REGISTRY.set(m);\n-                }\n+            WeakHashMap<Object, Object> m = REGISTRY.get();\n+            if (m == null) {\n+                m = new WeakHashMap<Object, Object>();\n+                REGISTRY.set(m);\n             }\n             m.put(value, null);\n         }\n      */\n     static void unregister(Object value) {\n         if (value != null) {\n-            WeakHashMap<Object, Object> m;\n-            synchronized (ToStringStyle.class) {\n-                m = REGISTRY.get();\n-                if (m != null) {\n-                    m.remove(value);\n-                    if (m.isEmpty()) {\n-                        REGISTRY.remove();\n-                    }\n+            WeakHashMap<Object, Object> m = REGISTRY.get();\n+            if (m != null) {\n+                m.remove(value);\n+                if (m.isEmpty()) {\n+                    REGISTRY.remove();\n                 }\n             }\n         }", "timestamp": 1265321424, "metainfo": ""}