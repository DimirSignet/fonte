{"sha": "0f3d2a3fb6d3d9b111e2820eceed46d077577533", "log": "Some code clean-up.  Removing unnecessary boxing, array creation for varargs, etc.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n     private static final String[] EMPTY_ARRAY_LIST = {};\n     private static final String[] NULL_ARRAY_LIST = {null};\n     private static final String[] MIXED_ARRAY_LIST = {null, \"\", \"foo\"};\n-    private static final Object[] MIXED_TYPE_LIST = {new String(\"foo\"), new Long(2)};\n+    private static final Object[] MIXED_TYPE_LIST = {\"foo\", 2L};\n \n     private static final String SEPARATOR = \",\";\n     private static final char   SEPARATOR_CHAR = ';';\n     public void testConcat_Objects() {\n         assertEquals(\"abc\", StringUtils.concat(\"a\", \"b\", \"c\"));\n         assertEquals(\"a\",   StringUtils.concat(null, \"\", \"a\"));\n-        assertEquals(null,  StringUtils.concat(null));\n+        assertEquals(null,  StringUtils.concat((String[])null));\n     }\n \n     public void testConcatWith_StringObjects() {\n         assertEquals(\"a...b...c\", StringUtils.concatWith(\"...\", \"a\", \"b\", \"c\"));\n         assertEquals(\"a\",     StringUtils.concatWith(\"\", null, \"\", \"a\"));\n         assertEquals(\"a\",     StringUtils.concatWith(null, null, \"\", \"a\"));\n-        assertEquals(null,    StringUtils.concatWith(null, null));\n+        assertEquals(null,    StringUtils.concatWith(null, (String[])null));\n     }\n \n     public void testJoin_Objectarray() {\n             }\n         }\n         \n-        String[] results = null;\n+        String[] results;\n         String[] expectedResults = {\"ab\", \"de fg\"};\n         results = StringUtils.split(\"ab   de fg\", null, 2);\n         assertEquals(expectedResults.length, results.length);\n \n         // Match example in javadoc\n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n           results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n           assertEquals(expectedResults.length, results.length);\n         }\n \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"de fg\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n           assertEquals(expectedResults.length, results.length);\n         }\n \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"  de fg\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n           assertEquals(expectedResults.length, results.length);\n         }\n         \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"::de:fg\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n           assertEquals(expectedResults.length, results.length);\n         }\n         \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n           assertEquals(expectedResults.length, results.length);\n         }\n         \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n           assertEquals(expectedResults.length, results.length);\n \n         {\n           String[] expectedResults = {\"ab\", \"cd:ef\"};\n-          String[] results = null;\n+          String[] results;\n           results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n           assertEquals(expectedResults.length, results.length);\n           for (int i = 0; i < expectedResults.length; i++) {\n         }\n \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \":cd:ef\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n           assertEquals(expectedResults.length, results.length);\n         }\n \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n           assertEquals(expectedResults.length, results.length);\n         }\n \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n           results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n           assertEquals(expectedResults.length, results.length);\n         }\n \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n           results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n           assertEquals(expectedResults.length, results.length);\n         }\n         \n         {\n-          String[] results = null;\n+          String[] results;\n           String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n           results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n           assertEquals(expectedResults.length, results.length);\n     }\n \n     public void testLengthString() {\n-        assertEquals(0, StringUtils.length(null));\n-        assertEquals(0, StringUtils.length(\"\"));\n-        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n-        assertEquals(1, StringUtils.length(\"A\"));\n-        assertEquals(1, StringUtils.length(\" \"));\n-        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n+        assertEquals(0, CharSequenceUtils.length(null));\n+        assertEquals(0, CharSequenceUtils.length(\"\"));\n+        assertEquals(0, CharSequenceUtils.length(StringUtils.EMPTY));\n+        assertEquals(1, CharSequenceUtils.length(\"A\"));\n+        assertEquals(1, CharSequenceUtils.length(\" \"));\n+        assertEquals(8, CharSequenceUtils.length(\"ABCDEFGH\"));\n     }\n \n     public void testLengthStringBuffer() {\n-        assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\n-        assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\n-        assertEquals(1, StringUtils.length(new StringBuffer(\"A\")));\n-        assertEquals(1, StringUtils.length(new StringBuffer(\" \")));\n-        assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\n+        assertEquals(0, CharSequenceUtils.length(new StringBuffer(\"\")));\n+        assertEquals(0, CharSequenceUtils.length(new StringBuffer(StringUtils.EMPTY)));\n+        assertEquals(1, CharSequenceUtils.length(new StringBuffer(\"A\")));\n+        assertEquals(1, CharSequenceUtils.length(new StringBuffer(\" \")));\n+        assertEquals(8, CharSequenceUtils.length(new StringBuffer(\"ABCDEFGH\")));\n     }\n \n     public void testLengthStringBuilder() {\n-        assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\n-        assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\n-        assertEquals(1, StringUtils.length(new StringBuilder(\"A\")));\n-        assertEquals(1, StringUtils.length(new StringBuilder(\" \")));\n-        assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\n+        assertEquals(0, CharSequenceUtils.length(new StringBuilder(\"\")));\n+        assertEquals(0, CharSequenceUtils.length(new StringBuilder(StringUtils.EMPTY)));\n+        assertEquals(1, CharSequenceUtils.length(new StringBuilder(\"A\")));\n+        assertEquals(1, CharSequenceUtils.length(new StringBuilder(\" \")));\n+        assertEquals(8, CharSequenceUtils.length(new StringBuilder(\"ABCDEFGH\")));\n     }\n     \n     //-----------------------------------------------------------------------\n     }\n     \n     public void testDifferenceAt_StringArray(){        \n-        assertEquals(-1, StringUtils.indexOfDifference(null));\n+        assertEquals(-1, StringUtils.indexOfDifference((String[])null));\n         assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n         assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n         assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n     }\n     \n     public void testGetCommonPrefix_StringArray(){        \n-        assertEquals(\"\", StringUtils.getCommonPrefix(null));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\n-        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\n-        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\n-        assertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\n-        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\n-        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\n-        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\n-        assertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix((String[])null));\n+        assertEquals(\"\", StringUtils.getCommonPrefix());\n+        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\"));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(null, null));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", null));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", null, null));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(null, null, \"abc\"));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"abc\"));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", \"\"));\n+        assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\", \"abc\"));\n+        assertEquals(\"a\", StringUtils.getCommonPrefix(\"abc\", \"a\"));\n+        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"ab\", \"abxyz\"));\n+        assertEquals(\"ab\", StringUtils.getCommonPrefix(\"abcde\", \"abxyz\"));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"abcde\", \"xyz\"));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(\"xyz\", \"abcde\"));\n+        assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\n     }\n         \n     public void testStartsWithAny() {\n-        assertFalse(StringUtils.startsWithAny(null, null));\n-        assertFalse(StringUtils.startsWithAny(null, new String[] {\"abc\"}));\n-        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null));\n-        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {}));\n-        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}));\n-        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}));\n-        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abcd\"}));\n+        assertFalse(StringUtils.startsWithAny(null, (String[])null));\n+        assertFalse(StringUtils.startsWithAny(null, \"abc\"));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", (String[])null));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\"));\n+        assertTrue(StringUtils.startsWithAny(\"abcxyz\", \"abc\"));\n+        assertTrue(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abc\"));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abcd\"));\n     }\n  \n     public void testNormalizeSpace() {", "timestamp": 1281182686, "metainfo": ""}