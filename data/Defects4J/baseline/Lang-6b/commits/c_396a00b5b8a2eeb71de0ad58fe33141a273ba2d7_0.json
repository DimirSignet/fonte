{"sha": "396a00b5b8a2eeb71de0ad58fe33141a273ba2d7", "log": "LANG-855 NumberUtils#createBigInteger does not allow for hex and octal numbers  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n     }\n \n     /**\n-     * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n+     * <p>Convert a <code>String</code> to a <code>BigInteger</code>;\n+     * since 3.2 it handles hex (0x or #) and octal (0) notations.</p>\n      *\n      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n      * \n         if (str == null) {\n             return null;\n         }\n-        return new BigInteger(str);\n+        int pos = 0; // offset within string\n+        int radix = 10;\n+        boolean negate = false; // need to negate later?\n+        if (str.startsWith(\"-\")) {\n+            negate = true;\n+            pos = 1;\n+        }\n+        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n+            radix = 16;\n+            pos += 2;\n+        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n+            radix = 16;\n+            pos ++;\n+        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n+            radix = 8;\n+            pos ++;\n+        } // default is to treat as decimal\n+\n+        final BigInteger value = new BigInteger(str.substring(pos), radix);\n+        return negate ? value.negate() : value;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n         this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n         // Funky whitespaces\n         this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0xff\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"#ff\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0xff\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0377\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0377\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0377\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-0\"), NumberUtils.createBigInteger(\"-0\"));\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"0\"), NumberUtils.createBigInteger(\"0\"));\n+        testCreateBigIntegerFailure(\"#\");\n+        testCreateBigIntegerFailure(\"-#\");\n+        testCreateBigIntegerFailure(\"0x\");\n+        testCreateBigIntegerFailure(\"-0x\");\n     }\n \n     protected void testCreateBigIntegerFailure(String str) {", "timestamp": 1352768362, "metainfo": ""}