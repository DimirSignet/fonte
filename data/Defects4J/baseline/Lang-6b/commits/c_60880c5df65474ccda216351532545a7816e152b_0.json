{"sha": "60880c5df65474ccda216351532545a7816e152b", "log": "Making ComparatorChain implement Iterable. Including test and package private copy of Collections' UnmodifiableIterator  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/compare/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/lang3/compare/ComparatorChain.java\n  * @since Commons Collections 2.0\n  * @version $Revision$ $Date$\n  */\n-public class ComparatorChain<E> implements Comparator<E>, Serializable {\n+public class ComparatorChain<E> implements Comparator<E>, Serializable, Iterable {\n \n     /** The list of comparators in the chain. */\n     protected List<Comparator<E>> comparatorChain = null;\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Iterate through the chained comparators. \n+     *\n+     * @return Unmodifiable iterator over the chained comparators\n+     */\n+    public Iterator<Comparator<E>> iterator() {\n+        return new UnmodifiableIterator(comparatorChain.iterator());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Implement a hash code for this comparator that is consistent with\n      * {@link #equals(Object) equals}.\n      *\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/compare/UnmodifiableIterator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.compare;\n+\n+import java.util.Iterator;\n+\n+/** \n+ * Decorates an iterator such that it cannot be modified.\n+ * <p>\n+ * Attempts to modify it will result in an UnsupportedOperationException. \n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1148801 $ $Date: 2011-07-20 07:44:46 -0700 (Wed, 20 Jul 2011) $\n+ */\n+final class UnmodifiableIterator<E> implements Iterator<E> {\n+\n+    /** The iterator being decorated */\n+    private final Iterator<E> iterator;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor.\n+     *\n+     * @param iterator  the iterator to decorate\n+     */\n+    public UnmodifiableIterator(Iterator<E> iterator) {\n+        super();\n+        if (iterator == null) {\n+            throw new IllegalArgumentException(\"Iterator must not be null\");\n+        }\n+        this.iterator = iterator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    public E next() {\n+        return iterator.next();\n+    }\n+\n+    public void remove() {\n+        throw new UnsupportedOperationException(\"remove() is not supported\");\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/lang3/compare/ComparatorChainTest.java\n+++ b/src/test/java/org/apache/commons/lang3/compare/ComparatorChainTest.java\n import static org.junit.Assert.*;\n \n import java.util.Comparator;\n+import java.util.Iterator;\n \n import org.junit.Before;\n import org.junit.Test;\n         assertTrue(\"Comparison failed\", cc.compare( \"ABC-123\", \"ABC-123\" ) == 0 );\n     }\n \n+    @Test\n+    public void testIterate() {\n+        Comparator c1 = ComparableComparator.INSTANCE;\n+        Comparator c2 = new ComparableComparator();\n+        Comparator c3 = new NullComparator();\n+        Comparator c4 = new ReverseComparator();\n+        Iterable cc = new ComparatorChain(c1, c2, c3, c4);\n+\n+        Iterator itr = cc.iterator();\n+        assertEquals( \"Iteration failed\", c1, itr.next() );\n+        assertEquals( \"Iteration failed\", c2, itr.next() );\n+        assertEquals( \"Iteration failed\", c3, itr.next() );\n+        assertEquals( \"Iteration failed\", c4, itr.next() );\n+        assertFalse( \"Iteration failed\", itr.hasNext() );\n+    }\n+\n }", "timestamp": 1315720053, "metainfo": ""}