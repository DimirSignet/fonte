{"sha": "adb143e730674a1e645be647f8b5ecb3ba278ef1", "log": "updated tests to reflect the following changes: deprecated method getLength(), replaced with getThrowableCount(); deprecated indexOfThrowable(int, Class), replaced with indexOfThrowable(Class, int) to make signature consistent with other APIs; changed functionality of methods that receive an index argument to throw an IndexOutOfBoundsException if the index is specified incorrectly, rather than absorbing invalid indices silently, to bring in line with the String API   ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @version $Id: NestableDelegateTestCase.java,v 1.1 2002/07/19 03:35:55 bayard Exp $\n+ * @version $Id: NestableDelegateTestCase.java,v 1.2 2002/07/26 20:30:58 stevencaswell Exp $\n  */\n public class NestableDelegateTestCase extends junit.framework.TestCase\n {\n             nd2.getMessage(\"base\").equals(\"base: \" + ne2.getCause().getMessage()));\n     }\n \n-    public void testNestableDelegateGetLength()\n+    public void testNestableDelegateGetThrowableCount()\n     {\n         Nestable n = null;\n         NestableDelegate d = null;\n         \n         n = new NestableDelegateTester1();\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetLength(d, 1);\n+        doNestableDelegateGetThrowableCount(d, 1);\n         \n         n = new NestableDelegateTester1(\"level 1\");\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetLength(d, 1);\n+        doNestableDelegateGetThrowableCount(d, 1);\n         \n         n = new NestableDelegateTester1(new Exception());\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetLength(d, 2);\n+        doNestableDelegateGetThrowableCount(d, 2);\n         \n         n = new NestableDelegateTester1(new Exception(\"level 2\"));\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetLength(d, 2);\n+        doNestableDelegateGetThrowableCount(d, 2);\n         \n         n = new NestableDelegateTester1(\"level 1\", new NestableDelegateTester2(\"level 2\", new NestableDelegateTester1(new NestableDelegateTester2(\"level 4\", new Exception(\"level 5\")))));\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetLength(d, 5);\n-    }\n-\n-    private void doNestableDelegateGetLength(NestableDelegate d, int len)\n+        doNestableDelegateGetThrowableCount(d, 5);\n+    }\n+\n+    private void doNestableDelegateGetThrowableCount(NestableDelegate d, int len)\n     {\n         // Compare the lengths\n-        assertEquals(\"delegate length\", len, d.getLength());\n+        assertEquals(\"delegate length\", len, d.getThrowableCount());\n     }\n     \n     public void testNestableDelegateGetMessages()\n         {\n             assertEquals(\"message \" + i, msgs[i], d.getMessage(i));\n         }\n-        assertEquals(\"message -1\", msgs[0], d.getMessage(-1));\n-        assertEquals(\"message -1\", msgs[msgs.length - 1], d.getMessage(msgs.length + 100));\n-    }\n-\n-    public void testNestableDelegateGetThrowable()\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            String msg = d.getMessage(-1);\n+            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+        try\n+        {\n+            String msg = d.getMessage(msgs.length + 100);\n+            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+    }\n+\n+    public void testNestableDelegateGetThrowableN()\n     {\n         Nestable n = null;\n         NestableDelegate d = null;\n         throwables[1] = Exception.class;\n         n = new NestableDelegateTester1(new Exception(msgs[1]));\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetThrowable(d, throwables, msgs);\n+        doNestableDelegateGetThrowableN(d, throwables, msgs);\n  \n         msgs = new String[5];\n         msgs[0] = \"level 1\";\n         throwables[4] = Exception.class;        \n         n = new NestableDelegateTester1(msgs[0], new NestableDelegateTester2(msgs[1], new NestableDelegateTester1(new NestableDelegateTester2(msgs[3], new Exception(msgs[4])))));\n         d = new NestableDelegate(n);\n-        doNestableDelegateGetThrowable(d, throwables, msgs);\n-    }\n-\n-    private void doNestableDelegateGetThrowable(NestableDelegate d, Class[] classes, String[] msgs)\n+        doNestableDelegateGetThrowableN(d, throwables, msgs);\n+    }\n+\n+    private void doNestableDelegateGetThrowableN(NestableDelegate d, Class[] classes, String[] msgs)\n     {\n         Throwable t = null;\n         String msg = null;\n             }\n             assertEquals(\"throwable message\", msgs[i], msg);\n         }\n-        t = d.getThrowable(-1);\n-        assertEquals(\"throwable(-1)\", classes[0], t.getClass());\n-        if(Nestable.class.isInstance(t))\n-        {\n-            msg = ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            msg = t.getMessage();\n-        }\n-        assertEquals(\"throwable message\", msgs[0], msg);\n-        t = d.getThrowable(999);\n-        assertEquals(\"throwable(999)\", classes[classes.length - 1], t.getClass());\n-        if(Nestable.class.isInstance(t))\n-        {\n-            msg = ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            msg = t.getMessage();\n-        }\n-        assertEquals(\"throwable message\", msgs[msgs.length - 1], msg);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            t = d.getThrowable(-1);\n+            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+        try\n+        {\n+            t = d.getThrowable(999);\n+            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n     }\n \n     public void testNestableDelegateGetThrowables()\n         }\n         doNestableDelegateIndexOfThrowable(d, NestableDelegateTester2.class, 2, 3, msgs[3]);\n         doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 1, 2, msgs[2]);\n+        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 3, -1, null);\n+        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 4, -1, null);\n+        doNestableDelegateIndexOfThrowable(d, Exception.class, 2, 4, msgs[4]);\n         doNestableDelegateIndexOfThrowable(d, java.util.Date.class, 0, -1, null);\n-    }\n-\n-    private void doNestableDelegateIndexOfThrowable(NestableDelegate d, Class type, int pos, int expectedIndex, String expectedMsg)\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            int index = d.indexOfThrowable(NestableDelegateTester1.class, -1);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        try\n+        {\n+            int index = d.indexOfThrowable(NestableDelegateTester1.class, 5);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+    }\n+\n+    private void doNestableDelegateIndexOfThrowable(NestableDelegate d, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n     {\n         Throwable t = null;\n         \n-        int index = d.indexOfThrowable(pos, type);\n+        int index = d.indexOfThrowable(type, fromIndex);\n         assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        t = d.getThrowable(index);\n-        if(expectedMsg != null)\n-        {\n-            String msg = null;\n-            if(Nestable.class.isInstance(t))\n+        if(expectedIndex > -1)\n+        {\n+            t = d.getThrowable(index);\n+            if(expectedMsg != null)\n             {\n-                msg = ((Nestable) t).getMessage(0);\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n             }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n         }\n     }\n     \n      * Returns the number of nested <code>Throwable</code>s represented by\n      * this <code>Nestable</code>, including this <code>Nestable</code>.\n      */\n-    public int getLength()\n+    public int getThrowableCount()\n     {\n         return 1;\n     }\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n      */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return -1;\n+    }\n+    \n+    /** Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated\n+     */\n+    public int getLength()\n+    {\n+        return 1;\n+    }\n+    \n+    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified position, or -1 if\n+     * the type is not found. If <code>pos</code> is negative, the effect is the\n+     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n+     * length of the chain, the effect is the same as if it were the index of\n+     * the last element in the chain.\n+     *\n+     * @param pos index, numbered from 0, of the starting position in the chain\n+     * to be searched\n+     * @param type <code>Class</code> to be found\n+     *\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n+     */\n     public int indexOfThrowable(int pos, Class type)\n     {\n         return -1;\n      * Returns the number of nested <code>Throwable</code>s represented by\n      * this <code>Nestable</code>, including this <code>Nestable</code>.\n      */\n-    public int getLength()\n+    public int getThrowableCount()\n     {\n         return 1;\n     }\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n      */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return -1;\n+    }\n+    \n+    /** Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated\n+     */\n+    public int getLength()\n+    {\n+        return 1;\n+    }\n+    \n+    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified position, or -1 if\n+     * the type is not found. If <code>pos</code> is negative, the effect is the\n+     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n+     * length of the chain, the effect is the same as if it were the index of\n+     * the last element in the chain.\n+     *\n+     * @param pos index, numbered from 0, of the starting position in the chain\n+     * to be searched\n+     * @param type <code>Class</code> to be found\n+     *\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n+     */\n     public int indexOfThrowable(int pos, Class type)\n     {\n         return -1;\n      * Returns the number of nested <code>Throwable</code>s represented by\n      * this <code>Nestable</code>, including this <code>Nestable</code>.\n      */\n-    public int getLength()\n+    public int getThrowableCount()\n     {\n         return 1;\n     }\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n      */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return indexOfThrowable(type);\n+    }\n+    \n+    /** Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated\n+     */\n+    public int getLength()\n+    {\n+        return 1;\n+    }\n+    \n+    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified position, or -1 if\n+     * the type is not found. If <code>pos</code> is negative, the effect is the\n+     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n+     * length of the chain, the effect is the same as if it were the index of\n+     * the last element in the chain.\n+     *\n+     * @param pos index, numbered from 0, of the starting position in the chain\n+     * to be searched\n+     * @param type <code>Class</code> to be found\n+     *\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n+     */\n     public int indexOfThrowable(int pos, Class type)\n     {\n         return indexOfThrowable(type);\n         this.cause = cause;\n     }\n     \n-    public int getLength()\n+    public int getThrowableCount()\n     {\n         return 1;\n     }\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n      */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return indexOfThrowable(type);\n+    }\n+    \n+    /** Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated\n+     */\n+    public int getLength()\n+    {\n+        return 1;\n+    }\n+    \n+    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified position, or -1 if\n+     * the type is not found. If <code>pos</code> is negative, the effect is the\n+     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n+     * length of the chain, the effect is the same as if it were the index of\n+     * the last element in the chain.\n+     *\n+     * @param pos index, numbered from 0, of the starting position in the chain\n+     * to be searched\n+     * @param type <code>Class</code> to be found\n+     *\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n+     */\n     public int indexOfThrowable(int pos, Class type)\n     {\n         return indexOfThrowable(type);\n \n class NonThrowableNestable implements Nestable\n {\n-    public int getLength()\n+    public int getThrowableCount()\n     {\n         return 1;\n     }\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n      */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return -1;\n+    }\n+    \n+    /** Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated\n+     */\n+    public int getLength()\n+    {\n+        return 1;\n+    }\n+    \n+    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified position, or -1 if\n+     * the type is not found. If <code>pos</code> is negative, the effect is the\n+     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n+     * length of the chain, the effect is the same as if it were the index of\n+     * the last element in the chain.\n+     *\n+     * @param pos index, numbered from 0, of the starting position in the chain\n+     * to be searched\n+     * @param type <code>Class</code> to be found\n+     *\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n+     */\n     public int indexOfThrowable(int pos, Class type)\n     {\n         return -1;\n--- a/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableExceptionTestCase.java,v 1.1 2002/07/19 03:35:55 bayard Exp $\n+ * @version $Id: NestableExceptionTestCase.java,v 1.2 2002/07/26 20:30:58 stevencaswell Exp $\n  */\n public class NestableExceptionTestCase extends junit.framework.TestCase\n {\n \n     public void testGetLength()\n     {\n+        // test the deprecated method\n         NestableException ne1 = new NestableException();\n         assertEquals(\"ne1 length\", 1, ne1.getLength());\n \n         assertEquals(\"ne 8 length\", 5, ne8.getLength());\n     }\n     \n+    public void testGetThrowableCount()\n+    {\n+        NestableException ne1 = new NestableException();\n+        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n+\n+        NestableException ne2 = new NestableException(\"ne2\");\n+        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n+        \n+        NestableException ne3 = new NestableException(new Exception(\"ne3 exception\"));\n+        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n+        \n+        NestableException ne4 = new NestableException(\"ne4\", new Exception(\"ne4 exception\"));\n+        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n+        \n+        NestableException ne5 = new NestableException(\"ne5\", null);\n+        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n+        \n+        NestableException ne6 = new NestableException(null, new Exception(\"ne6 exception\"));\n+        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n+        \n+        NestableException ne7 = new NestableException(\"ne7o\", new NestableException(\"ne7i\", new Exception(\"ne7 exception\")));\n+        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n+\n+        NestableException ne8 = new NestableException(\"level 1\", new NestableException(\"level 2\", new NestableException(new NestableException(\"level 4\", new Exception(\"level 5\")))));\n+        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n+    }\n+    \n+\n     public void testGetMessage()\n     {\n         NestableException ne1 = new NestableException();\n \n     }\n \n-    public void testGetMessageN()\n+    public void testGetMessageI()\n     {\n         String[] msgs = new String[5];\n         msgs[0] = \"level 1\";\n         {\n             assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n         }\n-        assertEquals(\"message -1\", msgs[0], ne.getMessage(-1));\n-        assertEquals(\"message 999\", msgs[4], ne.getMessage(999));\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            String msg = ne.getMessage(-1);\n+            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+        try\n+        {\n+            String msg = ne.getMessage(msgs.length + 100);\n+            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n     }\n     \n     public void testGetMessages()\n         }\n     }\n \n-    public void testGetThrowable()\n+    public void testGetThrowableI()\n     {\n         Nestable n = null;\n         String msgs[] = null;\n         throwables[0] = NestableExceptionTester1.class;\n         throwables[1] = Exception.class;\n         n = new NestableExceptionTester1(new Exception(msgs[1]));\n-        doNestableExceptionGetThrowable(n, throwables, msgs);\n+        doNestableExceptionGetThrowableI(n, throwables, msgs);\n  \n         msgs = new String[5];\n         msgs[0] = \"level 1\";\n         throwables[3] = NestableExceptionTester2.class;\n         throwables[4] = Exception.class;        \n         n = new NestableExceptionTester1(msgs[0], new NestableExceptionTester2(msgs[1], new NestableExceptionTester1(new NestableExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        doNestableExceptionGetThrowable(n, throwables, msgs);\n-    }\n-    \n-    private void doNestableExceptionGetThrowable(Nestable n, Class[] classes, String[] msgs)\n+        doNestableExceptionGetThrowableI(n, throwables, msgs);\n+    }\n+    \n+    private void doNestableExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n     {\n         Throwable t = null;\n         String msg = null;\n             }\n             assertEquals(\"throwable message\", msgs[i], msg);\n         }\n-        t = n.getThrowable(-1);\n-        assertEquals(\"throwable(-1)\", classes[0], t.getClass());\n-        if(Nestable.class.isInstance(t))\n-        {\n-            msg = ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            msg = t.getMessage();\n-        }\n-        assertEquals(\"throwable message\", msgs[0], msg);\n-        t = n.getThrowable(999);\n-        assertEquals(\"throwable(999)\", classes[classes.length - 1], t.getClass());\n-        if(Nestable.class.isInstance(t))\n-        {\n-            msg = ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            msg = t.getMessage();\n-        }\n-        assertEquals(\"throwable message\", msgs[msgs.length - 1], msg);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            t = n.getThrowable(-1);\n+            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+        try\n+        {\n+            t = n.getThrowable(999);\n+            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n     }\n     \n     public void testGetThrowables()\n         \n         int index = n.indexOfThrowable(type);\n         assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        t = n.getThrowable(index);\n-        if(expectedMsg != null)\n-        {\n-            String msg = null;\n-            if(Nestable.class.isInstance(t))\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n             {\n-                msg = ((Nestable) t).getMessage(0);\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n             }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n-        }\n-    }\n-    \n-    public void testIndexOfThrowableN()\n+        }\n+    }\n+    \n+    public void testIndexOfThrowableI()\n     {\n         Nestable n = null;\n         String msgs[] = null;\n         n = new NestableExceptionTester1(msgs[0], new NestableExceptionTester2(msgs[1], new NestableExceptionTester1(new NestableExceptionTester2(msgs[3], new Exception(msgs[4])))));\n         for(int i = 0; i < throwables.length; i++)\n         {\n-            doNestableExceptionIndexOfThrowableN(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n-        }\n-        doNestableExceptionIndexOfThrowableN(n, NestableExceptionTester2.class, 2, 3, msgs[3]);\n-        doNestableExceptionIndexOfThrowableN(n, NestableExceptionTester1.class, 1, 2, msgs[2]);\n-        doNestableExceptionIndexOfThrowableN(n, java.util.Date.class, 0, -1, null);\n-    }\n-\n-    private void doNestableExceptionIndexOfThrowableN(Nestable n, Class type, int pos, int expectedIndex, String expectedMsg)\n+            doNestableExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester2.class, 2, 3, msgs[3]);\n+        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester1.class, 1, 2, msgs[2]);\n+        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester1.class, 3, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester1.class, 4, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, Exception.class, 2, 4, msgs[4]);\n+        doNestableExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            int index = n.indexOfThrowable(NestableExceptionTester1.class, -1);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        try\n+        {\n+            int index = n.indexOfThrowable(NestableExceptionTester1.class, 5);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        \n+        // test the deprecated method\n+        int index = n.indexOfThrowable(-1, NestableExceptionTester1.class);\n+        assertEquals(\"deprecated method index\", 0, index);\n+        index = n.indexOfThrowable(999, Exception.class);\n+        assertEquals(\"deprecated method index\", 4, index);\n+    }\n+\n+    private void doNestableExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n     {\n         Throwable t = null;\n         \n-        int index = n.indexOfThrowable(pos, type);\n+        int index = n.indexOfThrowable(type, fromIndex);\n         assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        t = n.getThrowable(index);\n-        if(expectedMsg != null)\n-        {\n-            String msg = null;\n-            if(Nestable.class.isInstance(t))\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n             {\n-                msg = ((Nestable) t).getMessage(0);\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n             }\n-            else\n+        }\n+        \n+        // test the deprecated method\n+        int index1 = n.indexOfThrowable(fromIndex, type);\n+        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index1);\n+            if(expectedMsg != null)\n             {\n-                msg = t.getMessage();\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n             }\n-            assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n         }\n     }\n     \n--- a/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableRuntimeException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.1 2002/07/19 03:35:56 bayard Exp $\n+ * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.2 2002/07/26 20:30:58 stevencaswell Exp $\n  */\n public class NestableRuntimeExceptionTestCase extends junit.framework.TestCase\n {\n             ne6.getCause()); \n     }\n     \n+    public void testGetThrowableCount()\n+    {\n+        NestableRuntimeException ne1 = new NestableRuntimeException();\n+        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n+\n+        NestableRuntimeException ne2 = new NestableRuntimeException(\"ne2\");\n+        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n+        \n+        NestableRuntimeException ne3 = new NestableRuntimeException(new Exception(\"ne3 exception\"));\n+        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n+        \n+        NestableRuntimeException ne4 = new NestableRuntimeException(\"ne4\", new Exception(\"ne4 exception\"));\n+        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n+        \n+        NestableRuntimeException ne5 = new NestableRuntimeException(\"ne5\", null);\n+        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n+        \n+        NestableRuntimeException ne6 = new NestableRuntimeException(null, new Exception(\"ne6 exception\"));\n+        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n+        \n+        NestableRuntimeException ne7 = new NestableRuntimeException(\"ne7o\", new NestableRuntimeException(\"ne7i\", new Exception(\"ne7 exception\")));\n+        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n+\n+        NestableRuntimeException ne8 = new NestableRuntimeException(\"level 1\", new NestableRuntimeException(\"level 2\", new NestableRuntimeException(new NestableRuntimeException(\"level 4\", new Exception(\"level 5\")))));\n+        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n+    }\n+    \n     public void testGetLength()\n     {\n+        // test the deprecated method\n         NestableRuntimeException ne1 = new NestableRuntimeException();\n         assertEquals(\"ne1 length\", 1, ne1.getLength());\n \n         NestableRuntimeException ne8 = new NestableRuntimeException(\"level 1\", new NestableRuntimeException(\"level 2\", new NestableRuntimeException(new NestableRuntimeException(\"level 4\", new Exception(\"level 5\")))));\n         assertEquals(\"ne 8 length\", 5, ne8.getLength());\n     }\n-    \n+\n     public void testGetMessage()\n     {\n         NestableRuntimeException ne1 = new NestableRuntimeException();\n             ne7.getMessage().equals(\"ne7o: ne7i: ne7 exception\")); \n     }\n     \n-    public void testGetMessageN()\n+    public void testGetMessageI()\n     {\n         String[] msgs = new String[5];\n         msgs[0] = \"level 1\";\n         {\n             assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n         }\n-        assertEquals(\"message -1\", msgs[0], ne.getMessage(-1));\n-        assertEquals(\"message 999\", msgs[4], ne.getMessage(999));\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            String msg = ne.getMessage(-1);\n+            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+        try\n+        {\n+            String msg = ne.getMessage(msgs.length + 100);\n+            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n     }\n     \n     public void testGetMessages()\n         }\n     }\n \n-    public void testGetThrowable()\n+    public void testGetThrowableI()\n     {\n         Nestable n = null;\n         String msgs[] = null;\n         throwables[0] = NestableRuntimeExceptionTester1.class;\n         throwables[1] = Exception.class;\n         n = new NestableRuntimeExceptionTester1(new Exception(msgs[1]));\n-        doNestableRuntimeExceptionGetThrowable(n, throwables, msgs);\n+        doNestableRuntimeExceptionGetThrowableI(n, throwables, msgs);\n  \n         msgs = new String[5];\n         msgs[0] = \"level 1\";\n         throwables[3] = NestableRuntimeExceptionTester2.class;\n         throwables[4] = Exception.class;        \n         n = new NestableRuntimeExceptionTester1(msgs[0], new NestableRuntimeExceptionTester2(msgs[1], new NestableRuntimeExceptionTester1(new NestableRuntimeExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        doNestableRuntimeExceptionGetThrowable(n, throwables, msgs);\n-    }\n-    \n-    private void doNestableRuntimeExceptionGetThrowable(Nestable n, Class[] classes, String[] msgs)\n+        doNestableRuntimeExceptionGetThrowableI(n, throwables, msgs);\n+    }\n+    \n+    private void doNestableRuntimeExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n     {\n         Throwable t = null;\n         String msg = null;\n             }\n             assertEquals(\"throwable message\", msgs[i], msg);\n         }\n-        t = n.getThrowable(-1);\n-        assertEquals(\"throwable(-1)\", classes[0], t.getClass());\n-        if(Nestable.class.isInstance(t))\n-        {\n-            msg = ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            msg = t.getMessage();\n-        }\n-        assertEquals(\"throwable message\", msgs[0], msg);\n-        t = n.getThrowable(999);\n-        assertEquals(\"throwable(999)\", classes[classes.length - 1], t.getClass());\n-        if(Nestable.class.isInstance(t))\n-        {\n-            msg = ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            msg = t.getMessage();\n-        }\n-        assertEquals(\"throwable message\", msgs[msgs.length - 1], msg);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            t = n.getThrowable(-1);\n+            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+        try\n+        {\n+            t = n.getThrowable(999);\n+            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n     }\n     \n     public void testGetThrowables()\n         \n         int index = n.indexOfThrowable(type);\n         assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        t = n.getThrowable(index);\n         if(expectedMsg != null)\n         {\n+            t = n.getThrowable(index);\n             String msg = null;\n             if(Nestable.class.isInstance(t))\n             {\n         }\n     }\n     \n-    public void testIndexOfThrowableN()\n+    public void testIndexOfThrowableI()\n     {\n         Nestable n = null;\n         String msgs[] = null;\n         n = new NestableRuntimeExceptionTester1(msgs[0], new NestableRuntimeExceptionTester2(msgs[1], new NestableRuntimeExceptionTester1(new NestableRuntimeExceptionTester2(msgs[3], new Exception(msgs[4])))));\n         for(int i = 0; i < throwables.length; i++)\n         {\n-            doNestableRuntimeExceptionIndexOfThrowableN(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n-        }\n-        doNestableRuntimeExceptionIndexOfThrowableN(n, NestableRuntimeExceptionTester2.class, 2, 3, msgs[3]);\n-        doNestableRuntimeExceptionIndexOfThrowableN(n, NestableRuntimeExceptionTester1.class, 1, 2, msgs[2]);\n-        doNestableRuntimeExceptionIndexOfThrowableN(n, java.util.Date.class, 0, -1, null);\n-    }\n-\n-    private void doNestableRuntimeExceptionIndexOfThrowableN(Nestable n, Class type, int pos, int expectedIndex, String expectedMsg)\n+            doNestableRuntimeExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester2.class, 2, 3, msgs[3]);\n+        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester1.class, 1, 2, msgs[2]);\n+        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester1.class, 3, -1, null);\n+        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester1.class, 4, -1, null);\n+        doNestableRuntimeExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n+        \n+        try\n+        {\n+            int index = n.indexOfThrowable(NestableRuntimeExceptionTester1.class, -1);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        try\n+        {\n+            int index = n.indexOfThrowable(NestableRuntimeExceptionTester1.class, 5);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        \n+        // test the deprecated method\n+        int index = n.indexOfThrowable(-1, NestableRuntimeExceptionTester1.class);\n+        assertEquals(\"deprecated method index\", 0, index);\n+        index = n.indexOfThrowable(999, Exception.class);\n+        assertEquals(\"deprecated method index\", 4, index);\n+    }\n+\n+    private void doNestableRuntimeExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n     {\n         Throwable t = null;\n         \n-        int index = n.indexOfThrowable(pos, type);\n+        int index = n.indexOfThrowable(type, fromIndex);\n         assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        t = n.getThrowable(index);\n-        if(expectedMsg != null)\n-        {\n-            String msg = null;\n-            if(Nestable.class.isInstance(t))\n-            {\n-                msg = ((Nestable) t).getMessage(0);\n-            }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n+        }\n+        \n+        // test the deprecated method\n+        int index1 = n.indexOfThrowable(fromIndex, type);\n+        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n         }\n     }\n     ", "timestamp": 1027715458, "metainfo": ""}