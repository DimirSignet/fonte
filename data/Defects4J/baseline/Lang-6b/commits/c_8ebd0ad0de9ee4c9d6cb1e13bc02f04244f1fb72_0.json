{"sha": "8ebd0ad0de9ee4c9d6cb1e13bc02f04244f1fb72", "log": "I don't know why we declared new escape(StringWriter, String) methods. I've removed these and inlined their code into the escape(String, String) type methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n      */\n     public String escape(String str) {\n         StringWriter stringWriter = createStringWriter(str);\n-        this.escape(stringWriter, str);\n+        try {\n+            this.escape(stringWriter, str);\n+        } catch (IOException e) {\n+            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not\n+            // throw IOExceptions.\n+            throw new UnhandledException(e);\n+        }\n         return stringWriter.toString();\n     }\n \n \n     /**\n      * <p>\n-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>StringWriter</code>\n-     * passed.\n-     * </p>\n-     * \n-     * @param writer\n-     *            The <code>StringWriter</code> to write the results of the escaping to. Assumed to be a non-null\n-     *            value.\n+     * Unescapes the entities in a <code>String</code>.\n+     * </p>\n+     * \n+     * <p>\n+     * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return\n+     * &quot;\\u00A1&quot;\n+     * </p>\n+     * \n      * @param str\n-     *            The <code>String</code> to escape. Assumed to be a non-null value.\n-     * \n-     * @see #escape(String)\n-     * @see Writer\n-     * @since 2.3\n-     */\n-    public void escape(StringWriter writer, String str) {\n+     *            The <code>String</code> to escape.\n+     * @return A new escaped <code>String</code>.\n+     */\n+    public String unescape(String str) {\n+        StringWriter stringWriter = createStringWriter(str);\n         try {\n-            this.escape((Writer) writer, str);\n+            this.unescape(stringWriter, str);\n         } catch (IOException e) {\n             // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not\n             // throw IOExceptions.\n             throw new UnhandledException(e);\n         }\n-    }\n-\n-    /**\n-     * <p>\n-     * Unescapes the entities in a <code>String</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return\n-     * &quot;\\u00A1&quot;\n-     * </p>\n-     * \n-     * @param str\n-     *            The <code>String</code> to escape.\n-     * @return A new escaped <code>String</code>.\n-     */\n-    public String unescape(String str) {\n-        StringWriter stringWriter = createStringWriter(str);\n-        this.unescape(stringWriter, str);\n         return stringWriter.toString();\n     }\n \n     private StringWriter createStringWriter(String str) {\n         // Make the StringWriter 10% larger than the source String to avoid growing the writer\n         return new StringWriter((int) (str.length() + (str.length() * 0.1)));\n-    }\n-\n-    /**\n-     * <p>\n-     * Unescapes the escaped entities in the <code>String</code> passed and writes the result to the\n-     * <code>StringWriter</code> passed.\n-     * </p>\n-     * \n-     * @param writer\n-     *            The <code>StringWriter</code> to write the results to; assumed to be non-null.\n-     * @param string\n-     *            The <code>String</code> to write the results to; assumed to be non-null.\n-     * \n-     * @see #escape(String)\n-     * @see Writer\n-     * @since 2.3\n-     */\n-    public void unescape(StringWriter writer, String string) {\n-        try {\n-            this.unescape((Writer) writer, string);\n-        } catch (IOException e) {\n-            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not\n-            // throw IOExceptions.\n-            throw new UnhandledException(e);\n-        }\n     }\n \n     /**", "timestamp": 1170799441, "metainfo": ""}