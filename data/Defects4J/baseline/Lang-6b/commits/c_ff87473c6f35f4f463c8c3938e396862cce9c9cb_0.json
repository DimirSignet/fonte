{"sha": "ff87473c6f35f4f463c8c3938e396862cce9c9cb", "log": "[LANG-853] StringUtils join APIs for primitives.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n     }\n \n     /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(long[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(int[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(short[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(byte[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(char[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(float[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(double[] array, char separator) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+\n+    /**\n      * <p>Joins the elements of the provided array into a single String\n      * containing the provided list of elements.</p>\n      *\n         if (noOfItems <= 0) {\n             return EMPTY;\n         }\n-        \n         StringBuilder buf = new StringBuilder(noOfItems * 16);\n-\n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n                 buf.append(separator);\n         }\n         return buf.toString();\n     }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(long[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(int[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(byte[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(short[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(char[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(double[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * <p>\n+     * Joins the elements of the provided array into a single String containing the provided list of elements.\n+     * </p>\n+     * \n+     * <p>\n+     * No delimiter is added before or after the list. Null objects or empty strings within the array are represented\n+     * by empty strings.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([1, 2, 3], ';')  = \"1;2;3\"\n+     * StringUtils.join([1, 2, 3], null) = \"123\"\n+     * </pre>\n+     * \n+     * @param array\n+     *            the array of values to join together, may be null\n+     * @param separator\n+     *            the separator character to use\n+     * @param startIndex\n+     *            the first index to start joining from. It is an error to pass in an end index past the end of the\n+     *            array\n+     * @param endIndex\n+     *            the index to stop joining from (exclusive). It is an error to pass in an end index past the end of\n+     *            the array\n+     * @return the joined String, {@code null} if null array input\n+     * @since 3.2\n+     */\n+    public static String join(float[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int noOfItems = endIndex - startIndex;\n+        if (noOfItems <= 0) {\n+            return EMPTY;\n+        }\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n+                buf.append(separator);\n+            }\n+            buf.append(array[i]);\n+        }\n+        return buf.toString();\n+    }\n+\n \n     /**\n      * <p>Joins the elements of the provided array into a single String\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n     };\n     private static final String[] MIXED_ARRAY_LIST = {null, \"\", \"foo\"};\n     private static final Object[] MIXED_TYPE_LIST = {\"foo\", Long.valueOf(2L)};\n+    private static final long[] LONG_PRIM_LIST = {1, 2};\n+    private static final int[] INT_PRIM_LIST = {1, 2};\n+    private static final byte[] BYTE_PRIM_LIST = {1, 2};\n+    private static final short[] SHORT_PRIM_LIST = {1, 2};\n+    private static final char[] CHAR_PRIM_LIST = {'1', '2'};\n+    private static final float[] FLOAT_PRIM_LIST = {1, 2};\n+    private static final double[] DOUBLE_PRIM_LIST = {1, 2};\n \n     private static final String SEPARATOR = \",\";\n     private static final char   SEPARATOR_CHAR = ';';\n     }\n         \n     @Test\n-    public void testJoin_ArrayChar() {\n+    public void testJoin_ArrayCharSeparator() {\n         assertEquals(null, StringUtils.join((Object[]) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n         assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n         assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n         assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfChars() {\n+        assertEquals(null, StringUtils.join((char[]) null, ','));\n+        assertEquals(\"1;2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfBytes() {\n+        assertEquals(null, StringUtils.join((byte[]) null, ','));\n+        assertEquals(\"1;2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfInts() {\n+        assertEquals(null, StringUtils.join((int[]) null, ','));\n+        assertEquals(\"1;2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfLongs() {\n+        assertEquals(null, StringUtils.join((long[]) null, ','));\n+        assertEquals(\"1;2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfFloats() {\n+        assertEquals(null, StringUtils.join((float[]) null, ','));\n+        assertEquals(\"1.0;2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfDoubles() {\n+        assertEquals(null, StringUtils.join((double[]) null, ','));\n+        assertEquals(\"1.0;2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n+    }\n+    \n+    @Test\n+    public void testJoin_ArrayOfShorts() {\n+        assertEquals(null, StringUtils.join((short[]) null, ','));\n+        assertEquals(\"1;2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\n     }\n     \n     @Test", "timestamp": 1352590243, "metainfo": ""}