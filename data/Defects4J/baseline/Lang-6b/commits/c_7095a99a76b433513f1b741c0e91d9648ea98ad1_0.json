{"sha": "7095a99a76b433513f1b741c0e91d9648ea98ad1", "log": "Add missing @Override markers  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/translate/AggregateTranslator.java\n+++ b/src/java/org/apache/commons/lang/text/translate/AggregateTranslator.java\n      * Execution stops with the number of consumed codepoints being returned. \n      * {@inheritDoc}\n      */\n+    @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         for (CharSequenceTranslator translator : translators) {\n             int consumed = translator.translate(input, index, out);\n--- a/src/java/org/apache/commons/lang/text/translate/CodePointTranslator.java\n+++ b/src/java/org/apache/commons/lang/text/translate/CodePointTranslator.java\n      * Implementation of translate that maps onto the abstract translate(int, Writer) method. \n      * {@inheritDoc}\n      */\n+    @Override\n     public final int translate(CharSequence input, int index, Writer out) throws IOException {\n         int codepoint = Character.codePointAt(input, index);\n         boolean consumed = translate(codepoint, out);\n--- a/src/java/org/apache/commons/lang/text/translate/EscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/text/translate/EscapeUtils.java\n         private static final char[] CSV_SEARCH_CHARS = new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};\n \n         // TODO: Replace with a RegexTranslator. That should consume the number of characters the regex uses up?\n+        @Override\n         public int translate(CharSequence input, int index, Writer out) throws IOException {\n \n             if(index != 0) {\n--- a/src/java/org/apache/commons/lang/text/translate/LookupTranslator.java\n+++ b/src/java/org/apache/commons/lang/text/translate/LookupTranslator.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int max = longest;\n         if(index + longest > input.length()) {\n--- a/src/java/org/apache/commons/lang/text/translate/NumericEntityEscaper.java\n+++ b/src/java/org/apache/commons/lang/text/translate/NumericEntityEscaper.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean translate(int codepoint, Writer out) throws IOException {\n         if(between) {\n             if (codepoint < below || codepoint > above) {\n--- a/src/java/org/apache/commons/lang/text/translate/NumericEntityUnescaper.java\n+++ b/src/java/org/apache/commons/lang/text/translate/NumericEntityUnescaper.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         // TODO: Protect from ArrayIndexOutOfBounds\n         if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n--- a/src/java/org/apache/commons/lang/text/translate/UnescapeUtils.java\n+++ b/src/java/org/apache/commons/lang/text/translate/UnescapeUtils.java\n         private static final char[] CSV_SEARCH_CHARS = new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};\n \n         // TODO: Replace with a RegexTranslator. That should consume the number of characters the regex uses up?\n+        @Override\n         public int translate(CharSequence input, int index, Writer out) throws IOException {\n \n             if(index != 0) {\n--- a/src/java/org/apache/commons/lang/text/translate/UnicodeEscaper.java\n+++ b/src/java/org/apache/commons/lang/text/translate/UnicodeEscaper.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean translate(int codepoint, Writer out) throws IOException {\n         if(between) {\n             if (codepoint < below || codepoint > above) {\n--- a/src/java/org/apache/commons/lang/text/translate/UnicodeUnescaper.java\n+++ b/src/java/org/apache/commons/lang/text/translate/UnicodeUnescaper.java\n      * {@inheritDoc}\n      */\n     // TODO: Handle \\\\u+0045 variant\n+    @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         if(input.charAt(index) == '\\\\') {\n             if( (index + 1 < input.length()) && input.charAt(index + 1) == 'u') {\n--- a/src/test/org/apache/commons/lang/exception/DefaultExceptionContextTest.java\n+++ b/src/test/org/apache/commons/lang/exception/DefaultExceptionContextTest.java\n         super(name);\n     }\n     \n+    @Override\n     public void setUp() {\n         defaultExceptionContext = new DefaultExceptionContext()\n         .addLabeledValue(\"test1\", null)", "timestamp": 1255868491, "metainfo": ""}