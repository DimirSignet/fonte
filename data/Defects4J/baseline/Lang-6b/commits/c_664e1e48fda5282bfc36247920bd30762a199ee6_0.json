{"sha": "664e1e48fda5282bfc36247920bd30762a199ee6", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Range.java\n+++ b/src/main/java/org/apache/commons/lang3/Range.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>{@code Range} represents an immutable range of comparables of the same type.</p>\n  * <p>The objects need to either be implementations of {@code java.lang.Comparable}\n  * or you need to supply a {@code java.util.Comparator}. </p>\n- * \n+ *\n  * <p>#ThreadSafe# if the comparables are thread-safe</p>\n  * @author Apache Software Foundation\n  * @since 3.0\n \n     /**\n      * Required for serialization support.\n-     * \n+     *\n      * @see java.io.Serializable\n      */\n     private static final long serialVersionUID = 1L;\n     /**\n      * <p>Constructs a new {@code Range} using the specified\n      * element as both the minimum and maximum in this range.</p>\n-     * <p>The range uses the natural ordering of the elements to \n+     * <p>The range uses the natural ordering of the elements to\n      * determine where values lie in the range.</p>\n      *\n+     * @param <T> the type of this {@code Range}\n      * @param element  the value to use for this range, must not be {@code null}\n      * @return the new range object\n      * @throws IllegalArgumentException if the value is {@code null}\n     /**\n      * <p>Constructs a new {@code Range} with the specified\n      * minimum and maximum values (both inclusive).</p>\n-     * <p>The range uses the natural ordering of the elements to \n+     * <p>The range uses the natural ordering of the elements to\n      * determine where values lie in the range.</p>\n      *\n      * <p>The arguments may be passed in the order (min,max) or (max,min). The\n      * getMinimum and getMaximum methods will return the correct values.</p>\n      *\n+     * @param <T> the type of this {@code Range}\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n      * @return the new range object\n     /**\n      * <p>Constructs a new {@code Range} using the specified\n      * element as both the minimum and maximum in this range.</p>\n-     * <p>The range uses the passed in {@code Comparator} to \n+     * <p>The range uses the passed in {@code Comparator} to\n      * determine where values lie in the range.</p>\n      *\n+     * @param <T> the type of this {@code Range}\n      * @param element  the value to use for this range, must not be {@code null}\n      * @param c comparator to be used\n      * @return the new range object\n     /**\n      * <p>Constructs a new {@code Range} with the specified\n      * minimum and maximum values (both inclusive).</p>\n-     * <p>The range uses the passed in {@code Comparator} to \n+     * <p>The range uses the passed in {@code Comparator} to\n      * determine where values lie in the range.</p>\n      *\n      * <p>The arguments may be passed in the order (min,max) or (max,min). The\n      * getMinimum and getMaximum methods will return the correct values.</p>\n      *\n+     * @param <T> the type of this {@code Range}\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n      * @param c comparator to be used\n         return new Range<T>(element1, element2, c);\n     }\n \n+    /**\n+     * Creates a new instance of {@code Range}.\n+     *\n+     * @param element1 the first element\n+     * @param element2 the second element\n+     * @param c the comparator to be used\n+     */\n     private Range(T element1, T element2, Comparator<T> c) {\n         if(element1 == null || element2 == null) {\n-            throw new IllegalArgumentException(\"Elements in a range must not be null: element1=\" + \n+            throw new IllegalArgumentException(\"Elements in a range must not be null: element1=\" +\n                                                element1 + \", element2=\" + element2);\n         }\n \n     }\n \n     /**\n-     * <p>Whether or not the Range is using the default natural comparison method \n+     * <p>Whether or not the Range is using the default natural comparison method\n      * to compare elements. </p>\n      *\n      * @return whether or not the default Comparator is in use\n \n     // Include tests\n     //--------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Tests whether the specified element occurs within this range.</p>\n-     * \n+     *\n      * <p>{@code null} is handled and returns {@code false}.</p>\n      *\n      * @param element  the element to test, may be {@code null}\n         if (element == null) {\n             return false;\n         }\n-        \n+\n         return this.comparator.compare(element, this.minimum) < 0;\n     }\n \n         if (element == null) {\n             return false;\n         }\n-        \n+\n         return this.comparator.compare(element, this.maximum) > 0;\n     }\n \n     /**\n      * <p>Tests where the specified element occurs relative to this range.</p>\n-     * <p>The API is reminiscent of the Comparable interface returning {@code -1} if \n-     * the element is before the range, {@code 0} if contained within the range and \n+     * <p>The API is reminiscent of the Comparable interface returning {@code -1} if\n+     * the element is before the range, {@code 0} if contained within the range and\n      * {@code 1} if the element is after the range. </p>\n      *\n      * @param element  the element to test\n \n     /**\n      * <p>Tests whether the specified range occurs entirely within this range.</p>\n-     * \n+     *\n      * <p>{@code null} is handled and returns {@code false}.</p>\n-     * \n+     *\n      * @param range  the range to test, may be {@code null}\n      * @return {@code true} if the specified range occurs entirely within\n      *  this range; otherwise, {@code false}\n         if (range == null) {\n             return false;\n         }\n-        return contains(range.getMinimum()) \n+        return contains(range.getMinimum())\n             && contains(range.getMaximum());\n     }\n \n     /**\n      * <p>Tests whether the specified range overlaps with this range.</p>\n-     * \n+     *\n      * <p>{@code null} is handled and returns {@code false}.</p>\n-     * \n+     *\n      * @param range  the range to test, may be {@code null}\n      * @return {@code true} if the specified range overlaps with this\n      *  range; otherwise, {@code false}\n \n     /**\n      * <p>Compares this range to another object to test if they are equal.</p>.\n-     * \n+     *\n      * <p>To be equal, the class, minimum and maximum must be equal.</p>\n-     * \n+     *\n      * @param obj the reference object with which to compare\n      * @return {@code true} if this object is equal\n      */\n \n     /**\n      * <p>Gets a hashCode for the range.</p>\n-     * \n+     *\n      * @return a hash code value for this object\n      */\n     @Override\n      * <p>Gets the range as a {@code String}.</p>\n      *\n      * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n-     * \n+     *\n      * @return the {@code String} representation of this range\n      */\n     @Override\n         @SuppressWarnings(\"rawtypes\") // Comparator works for all types\n         public static final ComparableComparator<?> INSTANCE = new ComparableComparator();\n \n+        /**\n+         * Returns a comparator for the specified {@code Comparable} type.\n+         *\n+         * @param <E> the {@code Comparable} type\n+         * @return the comparator for this type\n+         */\n         @SuppressWarnings(\"unchecked\") // OK to cast, because comparator works for all types\n         public static <E extends Comparable<? super E>> ComparableComparator<E> getInstance() {\n             return (ComparableComparator<E>) INSTANCE;\n         }\n \n+        /**\n+         * Creates a new instance of {@code ComparableComparator}.\n+         */\n         public ComparableComparator() {\n             super();\n         }\n \n+        /**\n+         * Compares two objects.\n+         *\n+         * @param obj1 the first object\n+         * @param obj2 the second object\n+         * @return the result of the comparison\n+         */\n         public int compare(E obj1, E obj2) {\n             return obj1.compareTo(obj2);\n         }\n \n         @Override\n         public boolean equals(Object object) {\n-            return (this == object) || \n+            return (this == object) ||\n                    ((null != object) && (object.getClass().equals(this.getClass())));\n         }\n ", "timestamp": 1300550840, "metainfo": ""}