{"sha": "dabefc570554f2c2ad5c07e81cdb2a47313473a3", "log": "Remove add and set methods of ExceptionContext types taking a pair. Format entries with index. Improve Javadoc. Add serialization test.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/exception/ContextedException.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ContextedException.java\n  *     ...\n  *   } catch (Exception e) {\n  *     throw new ContextedException(\"Error posting account transaction\", e)\n- *          .addContextValue(\"accountNumber\", accountNumber)\n- *          .addContextValue(\"amountPosted\", amountPosted)\n- *          .addContextValue(\"previousBalance\", previousBalance)\n+ *          .addContextValue(\"Account Number\", accountNumber)\n+ *          .addContextValue(\"Amount Posted\", amountPosted)\n+ *          .addContextValue(\"Previous Balance\", previousBalance)\n+ *   }\n+ * }\n+ * </pre> or improve diagnose data at a higher level:\n+ * <pre>\n+ *   try {\n+ *     ...\n+ *   } catch (ContextedException e) {\n+ *     throw e.setContextValue(\"Transaction Id\", transactionId);\n+ *   } catch (Exception e) {\n+ *     if (e instanceof ExceptionContext) {\n+ *       e.setContextValue(\"Transaction Id\", transactionId);\n+ *     }\n+ *     throw e;\n  *   }\n  * }\n  * </pre>\n  * <pre>\n  * org.apache.commons.lang3.exception.ContextedException: java.lang.Exception: Error posting account transaction\n  *  Exception Context:\n- *  [accountNumber=null]\n- *  [amountPosted=100.00]\n- *  [previousBalance=-2.17]\n+ *  [1:Account Number=null]\n+ *  [2:Amount Posted=100.00]\n+ *  [3:Previous Balance=-2.17]\n+ *  [4:Transaction Id=94ef1d15-d443-46c4-822b-637f26244899]\n  *\n  *  ---------------------------------\n  *  at org.apache.commons.lang3.exception.ContextedExceptionTest.testAddValue(ContextedExceptionTest.java:88)\n     }\n \n     /**\n-     * Adds information helpful to a developer in diagnosing and correcting the problem.\n-     * For the information to be meaningful, the value passed should have a reasonable\n-     * toString() implementation.\n-     * Different values can be added with the same label multiple times.\n-     * <p>\n-     * Note: This exception is only serializable if the object added as value is serializable.\n-     * </p>\n-     * \n-     * @param pair  a pair of textual label and information, not {@code null}\n-     * @return {@code this}, for method chaining, not {@code null}\n-     * @throws NullPointerException if {@code pair} is {@code null}\n-     */\n-    public ContextedException addContextValue(Pair<String, Object> pair) {\n-        this.exceptionContext.addContextValue(pair);\n-        return this;\n-    }\n-\n-    /**\n      * Sets information helpful to a developer in diagnosing and correcting the problem.\n      * For the information to be meaningful, the value passed should have a reasonable\n      * toString() implementation.\n     }\n \n     /**\n-     * Sets information helpful to a developer in diagnosing and correcting the problem.\n-     * For the information to be meaningful, the value passed should have a reasonable\n-     * toString() implementation.\n-     * Any existing values with the same labels are removed before the new one is added.\n-     * <p>\n-     * Note: This exception is only serializable if the object added as value is serializable.\n-     * </p>\n-     * \n-     * @param pair  a pair of textual label and information, not {@code null}\n-     * @return {@code this}, for method chaining, not {@code null}\n-     * @throws NullPointerException if {@code pair} is {@code null}\n-     */\n-    public ContextedException setContextValue(Pair<String, Object> pair) {\n-        this.exceptionContext.setContextValue(pair);\n-        return this;\n-    }\n-\n-    /**\n      * {@inheritDoc}\n      */\n     public List<Object> getContextValues(String label) {\n--- a/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java\n  *   try {\n  *     ...\n  *   } catch (Exception e) {\n- *     throw new ContextedException(\"Error posting account transaction\", e)\n- *          .addContextValue(\"accountNumber\", accountNumber)\n- *          .addContextValue(\"amountPosted\", amountPosted)\n- *          .addContextValue(\"previousBalance\", previousBalance)\n+ *     throw new ContextedRuntimeException(\"Error posting account transaction\", e)\n+ *          .addContextValue(\"Account Number\", accountNumber)\n+ *          .addContextValue(\"Amount Posted\", amountPosted)\n+ *          .addContextValue(\"Previous Balance\", previousBalance)\n+ *   }\n+ * }\n+ * </pre> or improve diagnose data at a higher level:\n+ * <pre>\n+ *   try {\n+ *     ...\n+ *   } catch (ContextedRuntimeException e) {\n+ *     throw e.setContextValue(\"Transaction Id\", transactionId);\n+ *   } catch (Exception e) {\n+ *     if (e instanceof ExceptionContext) {\n+ *       e.setContextValue(\"Transaction Id\", transactionId);\n+ *     }\n+ *     throw e;\n  *   }\n  * }\n  * </pre>\n  * <pre>\n  * org.apache.commons.lang3.exception.ContextedRuntimeException: java.lang.Exception: Error posting account transaction\n  *  Exception Context:\n- *  [accountNumber=null]\n- *  [amountPosted=100.00]\n- *  [previousBalance=-2.17]\n+ *  [1:Account Number=null]\n+ *  [2:Amount Posted=100.00]\n+ *  [3:Previous Balance=-2.17]\n+ *  [4:Transaction Id=94ef1d15-d443-46c4-822b-637f26244899]\n  *\n  *  ---------------------------------\n  *  at org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddValue(ContextedExceptionTest.java:88)\n     }\n \n     /**\n-     * Adds information helpful to a developer in diagnosing and correcting the problem.\n-     * For the information to be meaningful, the value passed should have a reasonable\n-     * toString() implementation.\n-     * Different values can be added with the same label multiple times.\n-     * <p>\n-     * Note: This exception is only serializable if the object added as value is serializable.\n-     * </p>\n-     * \n-     * @param pair  a pair of textual label and information, not {@code null}\n-     * @return {@code this}, for method chaining, not {@code null}\n-     * @throws NullPointerException if {@code pair} is {@code null}\n-     */\n-    public ContextedRuntimeException addContextValue(Pair<String, Object> pair) {\n-        this.exceptionContext.addContextValue(pair);\n-        return this;\n-    }\n-\n-    /**\n      * Sets information helpful to a developer in diagnosing and correcting the problem.\n      * For the information to be meaningful, the value passed should have a reasonable\n      * toString() implementation.\n     }\n \n     /**\n-     * Sets information helpful to a developer in diagnosing and correcting the problem.\n-     * For the information to be meaningful, the value passed should have a reasonable\n-     * toString() implementation.\n-     * Any existing values with the same labels are removed before the new one is added.\n-     * <p>\n-     * Note: This exception is only serializable if the object added as value is serializable.\n-     * </p>\n-     * \n-     * @param pair  a pair of textual label and information, not {@code null}\n-     * @return {@code this}, for method chaining, not {@code null}\n-     * @throws NullPointerException if {@code pair} is {@code null}\n-     */\n-    public ContextedRuntimeException setContextValue(Pair<String, Object> pair) {\n-        this.exceptionContext.setContextValue(pair);\n-        return this;\n-    }\n-\n-    /**\n      * {@inheritDoc}\n      */\n     public List<Object> getContextValues(String label) {\n--- a/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java\n  * <p>\n  * This implementation is serializable, however this is dependent on the values that\n  * are added also being serializable.\n+ * </p>\n  * \n+ * @see ContextedException\n+ * @see ContextedRuntimeException\n  * @since 3.0\n  */\n public class DefaultExceptionContext implements ExceptionContext, Serializable {\n      * {@inheritDoc}\n      */\n     public DefaultExceptionContext addContextValue(String label, Object value) {\n-        return addContextValue(new ImmutablePair<String, Object>(label, value));\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public DefaultExceptionContext addContextValue(Pair<String, Object> pair) {\n-        if (pair == null) {\n-            throw new NullPointerException();\n-        }\n-        contextValues.add(pair);\n+        contextValues.add(new ImmutablePair<String, Object>(label, value));\n         return this;\n     }\n \n      * {@inheritDoc}\n      */\n     public DefaultExceptionContext setContextValue(String label, Object value) {\n-        return setContextValue(new ImmutablePair<String, Object>(label, value));\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public DefaultExceptionContext setContextValue(Pair<String, Object> pair) {\n-        final String label = pair.getKey(); // implicit NPE\n         for (final Iterator<Pair<String, Object>> iter = contextValues.iterator(); iter.hasNext();) {\n             final Pair<String, Object> p = iter.next();\n             if (StringUtils.equals(label, p.getKey())) {\n                 iter.remove();\n             }\n         }\n-        return addContextValue(pair);\n+        addContextValue(label, value);\n+        return this;\n     }\n \n     /**\n             }\n             buffer.append(\"Exception Context:\\n\");\n             \n-            Object value;\n-            String valueStr;\n+            int i = 0;\n             for (final Pair<String, Object> pair : contextValues) {\n                 buffer.append(\"\\t[\");\n+                buffer.append(++i);\n+                buffer.append(':');\n                 buffer.append(pair.getKey());\n                 buffer.append(\"=\");\n-                value = pair.getValue();\n+                final Object value = pair.getValue();\n                 if (value == null) {\n                     buffer.append(\"null\");\n                 } else {\n+                    String valueStr;\n                     try {\n                         valueStr = value.toString();\n                     } catch (Exception e) {\n--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java\n     public ExceptionContext addContextValue(String label, Object value);\n \n     /**\n-     * Adds a contextual label-value pair into this context.\n-     * <p>\n-     * The pair will be added to the context, independently of an already\n-     * existing pair with the same label.\n-     * </p>\n-     * \n-     * @param pair  the label-value pair to add, not {@code null}\n-     * @return {@code this}, for method chaining, not {@code null}\n-     * @throws NullPointerException if pair is {@code null}\n-     */\n-    public ExceptionContext addContextValue(Pair<String, Object> pair);\n-\n-    /**\n      * Sets a contextual label-value pair into this context.\n      * <p>\n      * The pair will be added normally, but any existing label-value pair with\n      * @return {@code this}, for method chaining, not {@code null}\n      */\n     public ExceptionContext setContextValue(String label, Object value);\n-\n-    /**\n-     * Sets a contextual label-value pair into this context.\n-     * <p>\n-     * The pair will be added normally, but any existing label-value pair with\n-     * the same label is removed from the context.\n-     * </p>\n-     * \n-     * @param pair  the label-value pair to add, not {@code null}\n-     * @return {@code this}, for method chaining, not {@code null}\n-     * @throws NullPointerException if pair is {@code null}\n-     */\n-    public ExceptionContext setContextValue(Pair<String, Object> pair);\n \n     /**\n      * Retrieves all the contextual data values associated with the label.\n--- a/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n import java.util.List;\n import java.util.Set;\n \n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n \n import junit.framework.TestCase;\n /**\n  * Abstract test of an ExceptionContext implementation.\n  */\n-public abstract class AbstractExceptionContextTest<T extends ExceptionContext> extends TestCase {\n+public abstract class AbstractExceptionContextTest<T extends ExceptionContext & Serializable> extends TestCase {\n \n     protected static final String TEST_MESSAGE_2 = \"This is monotonous\";\n     protected static final String TEST_MESSAGE = \"Test Message\";\n     protected T exceptionContext;\n \n-    protected static class ObjectWithFaultyToString implements Serializable {\n-\n-        private static final long serialVersionUID = 3495843995332310458L;\n-\n+    protected static class ObjectWithFaultyToString {\n         @Override\n         public String toString() {\n             throw new RuntimeException(\"Crap\");\n         assertEquals(\"test Poorly written obj\", entries.get(4).getKey());\n         assertEquals(\"test2\", entries.get(5).getKey());\n     }\n+    \n+    public void testJavaSerialization() {\n+        exceptionContext.setContextValue(\"test Poorly written obj\", \"serializable replacement\");\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        T clone = (T)SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext));\n+        assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null));\n+    }\n }", "timestamp": 1310070591, "metainfo": ""}