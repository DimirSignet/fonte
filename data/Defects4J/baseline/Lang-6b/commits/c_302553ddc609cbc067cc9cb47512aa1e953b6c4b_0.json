{"sha": "302553ddc609cbc067cc9cb47512aa1e953b6c4b", "log": "[LANG-697] Add FormattableUtils class  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/util/FormattableUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.util;\n+\n+import static java.util.FormattableFlags.LEFT_JUSTIFY;\n+\n+import java.util.Formattable;\n+import java.util.Formatter;\n+\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.apache.commons.lang3.Validate;\n+\n+/**\n+ * Provides utilities for working with {@link Formattable}s.\n+ * \n+ * @since Lang 3.0\n+ * @version $Id$\n+ */\n+public class FormattableUtils {\n+\n+    private static final String SIMPLEST_FORMAT = \"%1$s\";\n+\n+    /**\n+     * <p>{@link FormattableUtils} instances should NOT be constructed in\n+     * standard programming. Instead, the methods of the class should be invoked\n+     * statically.</p>\n+     * \n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public FormattableUtils() {\n+        super();\n+    }\n+\n+    /**\n+     * Get the default formatted representation of the specified\n+     * {@link Formattable}.\n+     * \n+     * @param formattable\n+     * @return String\n+     */\n+    public static String toString(Formattable formattable) {\n+        return String.format(SIMPLEST_FORMAT, formattable);\n+    }\n+\n+    /**\n+     * Handles the common {@link Formattable} operations of truncate-pad-append,\n+     * with no ellipsis on precision overflow, and padding width underflow with\n+     * spaces.\n+     * \n+     * @param seq to handle\n+     * @param formatter destination\n+     * @param flags for formatting\n+     * @param width of output\n+     * @param precision of output\n+     * @return {@code formatter}\n+     */\n+    public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n+            int precision) {\n+        return append(seq, formatter, flags, width, precision, ' ', null);\n+    }\n+\n+    /**\n+     * Handles the common {@link Formattable} operations of truncate-pad-append,\n+     * with no ellipsis on precision overflow.\n+     * \n+     * @param seq to handle\n+     * @param formatter destination\n+     * @param flags for formatting\n+     * @param width of output\n+     * @param precision of output\n+     * @param padChar to use\n+     * @return {@code formatter}\n+     */\n+    public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n+            int precision, char padChar) {\n+        return append(seq, formatter, flags, width, precision, padChar, null);\n+    }\n+\n+    /**\n+     * Handles the common {@link Formattable} operations of truncate-pad-append,\n+     * padding width underflow with spaces.\n+     * \n+     * @param seq to handle\n+     * @param formatter destination\n+     * @param flags for formatting\n+     * @param width of output\n+     * @param precision of output\n+     * @param ellipsis to use when precision dictates truncation; a {@code null}\n+     * or empty value causes a hard truncation\n+     * @return {@code formatter}\n+     */\n+    public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n+            int precision, CharSequence ellipsis) {\n+        return append(seq, formatter, flags, width, precision, ' ', ellipsis);\n+    }\n+\n+    /**\n+     * Handles the common {@link Formattable} operations of truncate-pad-append.\n+     * \n+     * @param seq to handle\n+     * @param formatter destination\n+     * @param flags for formatting\n+     * @param width of output\n+     * @param precision of output\n+     * @param padChar to use\n+     * @param ellipsis to use when precision dictates truncation; a {@code null}\n+     * or empty value causes a hard truncation\n+     * @return {@code formatter}\n+     */\n+    public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n+            int precision, char padChar, CharSequence ellipsis) {\n+        Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision,\n+                \"Specified ellipsis '%1$s' exceeds precision of %2$s\", ellipsis, precision);\n+        StringBuilder buf = new StringBuilder(seq);\n+        if (precision >= 0 && precision < seq.length()) {\n+            CharSequence _ellipsis = ObjectUtils.defaultIfNull(ellipsis, \"\");\n+            buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());\n+        }\n+        boolean leftJustify = (flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;\n+        for (int i = buf.length(); i < width; i++) {\n+            buf.insert(leftJustify ? i : 0, padChar);\n+        }\n+        formatter.format(buf.toString());\n+        return formatter;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/util/FormattableUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.util;\n+\n+import static java.util.FormattableFlags.LEFT_JUSTIFY;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Formatter;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests {@link FormattableUtils}.\n+ *\n+ * @version $Id$\n+ */\n+public class FormattableUtilsTest {\n+\n+    @Test\n+    public void testDefaultAppend() {\n+        assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1).toString());\n+        assertEquals(\"fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2).toString());\n+        assertEquals(\" foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1).toString());\n+        assertEquals(\"   foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1).toString());\n+        assertEquals(\" fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2).toString());\n+        assertEquals(\"   fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2).toString());\n+        assertEquals(\"foo \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 4, -1).toString());\n+        assertEquals(\"foo   \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 6, -1).toString());\n+        assertEquals(\"fo \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 3, 2).toString());\n+        assertEquals(\"fo   \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2).toString());\n+    }\n+\n+    @Test\n+    public void testAlternatePadCharacter() {\n+        char pad='_';\n+        assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, pad).toString());\n+        assertEquals(\"fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, pad).toString());\n+        assertEquals(\"_foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, pad).toString());\n+        assertEquals(\"___foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, pad).toString());\n+        assertEquals(\"_fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, pad).toString());\n+        assertEquals(\"___fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, pad).toString());\n+        assertEquals(\"foo_\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 4, -1, pad).toString());\n+        assertEquals(\"foo___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 6, -1, pad).toString());\n+        assertEquals(\"fo_\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 3, 2, pad).toString());\n+        assertEquals(\"fo___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2, pad).toString());\n+    }\n+\n+    @Test\n+    public void testEllipsis() {\n+        assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, \"*\").toString());\n+        assertEquals(\"f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, \"*\").toString());\n+        assertEquals(\" foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, \"*\").toString());\n+        assertEquals(\"   foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, \"*\").toString());\n+        assertEquals(\" f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, \"*\").toString());\n+        assertEquals(\"   f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, \"*\").toString());\n+        assertEquals(\"foo \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 4, -1, \"*\").toString());\n+        assertEquals(\"foo   \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 6, -1, \"*\").toString());\n+        assertEquals(\"f* \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 3, 2, \"*\").toString());\n+        assertEquals(\"f*   \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2, \"*\").toString());\n+\n+        assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, \"+*\").toString());\n+        assertEquals(\"+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, \"+*\").toString());\n+        assertEquals(\" foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, \"+*\").toString());\n+        assertEquals(\"   foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, \"+*\").toString());\n+        assertEquals(\" +*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, \"+*\").toString());\n+        assertEquals(\"   +*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, \"+*\").toString());\n+        assertEquals(\"foo \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 4, -1, \"+*\").toString());\n+        assertEquals(\"foo   \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 6, -1, \"+*\").toString());\n+        assertEquals(\"+* \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 3, 2, \"+*\").toString());\n+        assertEquals(\"+*   \", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2, \"+*\").toString());\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testIllegalEllipsis() {\n+        FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 1, \"xx\");\n+    }\n+\n+    @Test\n+    public void testAlternatePadCharAndEllipsis() {\n+        assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, '_', \"*\").toString());\n+        assertEquals(\"f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, '_', \"*\").toString());\n+        assertEquals(\"_foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, '_', \"*\").toString());\n+        assertEquals(\"___foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, '_', \"*\").toString());\n+        assertEquals(\"_f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, '_', \"*\").toString());\n+        assertEquals(\"___f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, '_', \"*\").toString());\n+        assertEquals(\"foo_\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', \"*\").toString());\n+        assertEquals(\"foo___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', \"*\").toString());\n+        assertEquals(\"f*_\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', \"*\").toString());\n+        assertEquals(\"f*___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', \"*\").toString());\n+\n+        assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, '_', \"+*\").toString());\n+        assertEquals(\"+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, '_', \"+*\").toString());\n+        assertEquals(\"_foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, '_', \"+*\").toString());\n+        assertEquals(\"___foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, '_', \"+*\").toString());\n+        assertEquals(\"_+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, '_', \"+*\").toString());\n+        assertEquals(\"___+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, '_', \"+*\").toString());\n+        assertEquals(\"foo_\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', \"+*\").toString());\n+        assertEquals(\"foo___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', \"+*\").toString());\n+        assertEquals(\"+*_\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', \"+*\").toString());\n+        assertEquals(\"+*___\", FormattableUtils.append(\"foo\", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', \"+*\").toString());\n+    }\n+\n+    @Test\n+    public void testToStringFormattable() {\n+        assertEquals(\"(Key,Value)\", FormattableUtils.toString(Pair.of(\"Key\", \"Value\")));\n+    }\n+}", "timestamp": 1303424473, "metainfo": ""}