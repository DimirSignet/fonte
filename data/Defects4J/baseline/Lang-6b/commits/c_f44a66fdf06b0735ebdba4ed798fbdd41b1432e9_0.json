{"sha": "f44a66fdf06b0735ebdba4ed798fbdd41b1432e9", "log": "Fail if BitSet not faster overall  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/HashSetvBitSetTest.java\n+++ b/src/test/java/org/apache/commons/lang3/HashSetvBitSetTest.java\n     public void testTimes() {\n         timeHashSet(10); // warmup\n         timeBitSet(10); // warmup\n-        printTimes(0);\n-        printTimes(5);\n-        printTimes(10);\n-        printTimes(200);\n-        printTimes(50);\n-        printTimes(100);\n-        printTimes(1000);\n-        printTimes(2000);\n+        long timeDiff = printTimes(0);\n+        timeDiff += printTimes(5);\n+        timeDiff += printTimes(10);\n+        timeDiff += printTimes(200);\n+        timeDiff += printTimes(50);\n+        timeDiff += printTimes(100);\n+        timeDiff += printTimes(1000);\n+        timeDiff += printTimes(2000);\n+        Assert.assertTrue(timeDiff <= 0);\n     }\n \n-    private void printTimes(int count) {\n+    /**\n+     * @return bitSet - HashSet\n+     */\n+    private long printTimes(int count) {\n         long hashSet = timeHashSet(count);\n         long bitSet = timeBitSet(count);\n         // If percent is less than 100, then bitset is faster\n         System.out.println(\"Ratio=\"+(bitSet*100/hashSet)+\"% count=\"+count+\" hash=\"+hashSet+\" bits=\"+bitSet);\n+        return bitSet - hashSet;\n     }\n \n     private static long timeHashSet(int count) {\n         toRemove.set(10, 20);\n         timeBitSetRemoveAll(array, toRemove); // warmup\n         timeExtractRemoveAll(array, toRemove); // warmup\n-        printTimes(100,1);\n-        printTimes(100,10);\n-        printTimes(100,50);\n-        printTimes(100,100);\n-        printTimes(1000,10);\n-        printTimes(1000,100);\n-        printTimes(1000,500);\n-        printTimes(1000,1000);\n+        long timeDiff = printTimes(100,1);\n+        timeDiff += printTimes(100,10);\n+        timeDiff += printTimes(100,50);\n+        timeDiff += printTimes(100,100);\n+        timeDiff += printTimes(1000,10);\n+        timeDiff += printTimes(1000,100);\n+        timeDiff += printTimes(1000,500);\n+        timeDiff += printTimes(1000,1000);\n+        Assert.assertTrue(timeDiff <= 0);\n     }\n \n-    private void printTimes(int arraySize, int bitSetSize) {\n+    private long printTimes(int arraySize, int bitSetSize) {\n         int[] array = new int[arraySize];\n         BitSet remove = new BitSet();\n         for (int i = 0; i < bitSetSize; i++) {\n         long extract = timeExtractRemoveAll(array, remove);\n         // If percent is less than 100, then direct use of bitset is faster\n         System.out.println(\"Ratio=\"+(bitSet*100/extract)+\"% array=\"+array.length+\" count=\"+remove.cardinality()+\" extract=\"+extract+\" bitset=\"+bitSet);\n+        return bitSet - extract;\n     }\n \n     private long timeBitSetRemoveAll(int[] array, BitSet toRemove) {", "timestamp": 1349810939, "metainfo": ""}