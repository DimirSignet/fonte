{"sha": "c426e1f716002618629f135718cf377c1fa5fb45", "log": "[LANG-762] Handle or document ReflectionToStringBuilder and ToStringBuilder for collections that are not thread safe.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests concurrent access for {@link ReflectionToStringBuilder}.\n+ * <p>\n+ * The {@link ToStringStyle} class includes a registry to avoid infinite loops for objects with circular references. We\n+ * want to make sure that we do not get concurrency exceptions accessing this registry.\n+ * </p>\n+ * <p>\n+ * The tests on the non-thread-safe collections do not pass.\n+ * </p>\n+ * \n+ * @see <a href=\"https://issues.apache.org/jira/browse/LANG-762\">[LANG-762] Handle or document ReflectionToStringBuilder\n+ *      and ToStringBuilder for collections that are not thread safe</a>\n+ * @since 3.0.2\n+ */\n+public class ReflectionToStringBuilderConcurrencyTest {\n+\n+    static class CollectionHolder<T extends Collection<?>> {\n+        T collection;\n+\n+        CollectionHolder(T collection) {\n+            this.collection = collection;\n+        }\n+    }\n+\n+    private static final int DATA_SIZE = 100000;\n+    private static final int REPEAT = 100;\n+\n+    @Test\n+    @Ignore\n+    public void testLinkedList() throws InterruptedException, ExecutionException {\n+        this.testConcurrency(new CollectionHolder<List<Integer>>(new LinkedList<Integer>()));\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void testArrayList() throws InterruptedException, ExecutionException {\n+        this.testConcurrency(new CollectionHolder<List<Integer>>(new ArrayList<Integer>()));\n+    }\n+\n+    @Test\n+    public void testCopyOnWriteArrayList() throws InterruptedException, ExecutionException {\n+        this.testConcurrency(new CollectionHolder<List<Integer>>(new CopyOnWriteArrayList<Integer>()));\n+    }\n+\n+    private void testConcurrency(final CollectionHolder<List<Integer>> holder) throws InterruptedException,\n+            ExecutionException {\n+        final List<Integer> list = holder.collection;\n+        // make a big array that takes a long time to toString()\n+        for (int i = 0; i < DATA_SIZE; i++) {\n+            list.add(Integer.valueOf(i));\n+        }\n+        // Create a thread pool with two threads to cause the most contention on the underlying resource.\n+        final ExecutorService threadPool = Executors.newFixedThreadPool(2);\n+        // Consumes toStrings\n+        Callable<Integer> consumer = new Callable<Integer>() {\n+            public Integer call() {\n+                for (int i = 0; i < REPEAT; i++) {\n+                    String s = ReflectionToStringBuilder.toString(holder);\n+                    Assert.assertNotNull(s);\n+                }\n+                return REPEAT;\n+            }\n+        };\n+        // Produces changes in the list\n+        Callable<Integer> producer = new Callable<Integer>() {\n+            public Integer call() {\n+                for (int i = 0; i < DATA_SIZE; i++) {\n+                    list.remove(list.get(0));\n+                }\n+                return REPEAT;\n+            }\n+        };\n+        Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n+        tasks.add(consumer);\n+        tasks.add(producer);\n+        final List<Future<Integer>> futures = threadPool.invokeAll(tasks);\n+        for (Future<Integer> future : futures) {\n+            Assert.assertEquals(REPEAT, future.get().intValue());\n+        }\n+    }\n+}", "timestamp": 1320851236, "metainfo": ""}