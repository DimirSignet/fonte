{"sha": "2c7a80af4b48d3143670aebaaf8c951664d7de6f", "log": "Improve javadocs   ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/Mutable.java\n+++ b/src/java/org/apache/commons/lang/mutable/Mutable.java\n package org.apache.commons.lang.mutable;\n \n /**\n- * A mutable object.\n+ * Defines an object that allows mutable access to a value.\n+ * <p>\n+ * <code>Mutable</code> is used as a generic interface to the implementations\n+ * in this package.\n+ * <p>\n+ * A typical use case would be to enable a primitive or string to be passed\n+ * to a method and allow that method to effectively change the value of the\n+ * primitive/string. Another use case is to store a frequently changing\n+ * primitive in a collection (for example a total in a map) without needing\n+ * to create new Integer/Long wrapper objects.\n  *\n  * @author Matthew Hawthorne\n  * @since 2.1\n- * @version $Id: Mutable.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @version $Id: Mutable.java,v 1.2 2004/07/05 22:12:22 scolebourne Exp $\n  */\n public interface Mutable {\n \n     /**\n-     * Sets the value of this object.\n+     * Gets the value of this mutable.\n      *\n-     * @param value the value of this object.\n+     * @return the stored value\n      */\n-    public void setValue(Object value);\n+    Object getValue();\n \n     /**\n-     * Gets the value of this object.\n+     * Sets the value of this mutable.\n      *\n-     * @return a value.\n+     * @param value  the value to store\n+     * @throws NullPointerException if the object is null and null is invalid\n+     * @throws ClassCastException if the type is invalid\n      */\n-    public Object getValue();\n+    void setValue(Object value);\n \n }", "timestamp": 1089065542, "metainfo": ""}