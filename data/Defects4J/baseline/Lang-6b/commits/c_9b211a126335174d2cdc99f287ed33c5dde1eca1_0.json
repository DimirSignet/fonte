{"sha": "9b211a126335174d2cdc99f287ed33c5dde1eca1", "log": "Applying a set of updates for new Java features from Hendrik Maryns in LANG-336  ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n  * @since 2.0\n  * @version $Id$\n  */\n-public final class Fraction extends Number implements Comparable {\n+public final class Fraction extends Number implements Comparable<Fraction> {\n \n     /**\n      * Required for serialization support. Lang version 2.0.\n      * with equals, because, for example, equals treats 1/2 and 2/4 as\n      * different, whereas compareTo treats them as equal.\n      *\n-     * @param object  the object to compare to\n+     * @param other  the object to compare to\n      * @return -1 if this is less, 0 if equal, +1 if greater\n      * @throws ClassCastException if the object is not a <code>Fraction</code>\n      * @throws NullPointerException if the object is <code>null</code>\n      */\n-    public int compareTo(Object object) {\n-        Fraction other = (Fraction) object;\n+    public int compareTo(Fraction other) {\n         if (this==other) {\n             return 0;\n         }\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n             }\n         }\n         \n-        int compare = ((Comparable) num1).compareTo(num2);\n+        int compare = ((Comparable<Number>) num1).compareTo(num2);\n         if (compare == 0) {\n             this.min = num1;\n             this.max = num1;\n         if (number.getClass() != min.getClass()) {\n             throw new IllegalArgumentException(\"The number must be of the same type as the range numbers\");\n         }\n-        int compareMin = ((Comparable) min).compareTo(number);\n-        int compareMax = ((Comparable) max).compareTo(number);\n+        int compareMin = ((Comparable<Number>) min).compareTo(number);\n+        int compareMax = ((Comparable<Number>) max).compareTo(number);\n         return compareMin <= 0 && compareMax >= 0;\n     }\n \n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n     public List<String> getTokenList() {\n         checkTokenized();\n         List<String> list = new ArrayList<String>(tokens.length);\n-        for (int i = 0; i < tokens.length; i++) {\n-            list.add(tokens[i]);\n+        for (String element : tokens) {\n+            list.add(element);\n         }\n         return list;\n     }\n--- a/src/test/org/apache/commons/lang/math/FractionTest.java\n+++ b/src/test/org/apache/commons/lang/math/FractionTest.java\n             fail(\"expecting NullPointerException\");\n         } catch (NullPointerException ex) {}\n         \n-        try {\n-            f1.compareTo(new Object());\n-            fail(\"expecting ClassCastException\");\n-        } catch (ClassCastException ex) {}\n-        \n         f2 = Fraction.getFraction(2, 5);\n         assertTrue(f1.compareTo(f2) > 0);\n         assertTrue(f2.compareTo(f2) == 0);", "timestamp": 1241078928, "metainfo": ""}