{"sha": "73c2ddbe8dc4469257272fd4e777f4b5a806b5b6", "log": "Simplify boolean tests and avoid boxing  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n     public void testHashCode() {\n         long[][] array1 = new long[][] {{2,5}, {4,5}};\n         long[][] array2 = new long[][] {{2,5}, {4,6}};\n-        assertEquals(true, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));\n-        assertEquals(false, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));\n+        assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));\n+        assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));\n         \n         Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};\n         Object[] array4 = new Object[] {\"AB\"};\n-        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));\n-        assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));\n+        assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));\n+        assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));\n         \n         Object[] arrayA = new Object[] {new boolean[] {true, false}, new int[] {6, 7}};\n         Object[] arrayB = new Object[] {new boolean[] {true, false}, new int[] {6, 7}};\n-        assertEquals(true, ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA));\n+        assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n         CharRange rangeae = CharRange.isIn('a', 'e');\n         CharRange rangenotbf = CharRange.isIn('b', 'f');\n \n-        assertEquals(true, rangea.hashCode() == rangea.hashCode());\n-        assertEquals(true, rangea.hashCode() == CharRange.is('a').hashCode());\n-        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n-        assertEquals(true, rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());\n-        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n-        assertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n+        assertTrue(rangea.hashCode() == rangea.hashCode());\n+        assertTrue(rangea.hashCode() == CharRange.is('a').hashCode());\n+        assertTrue(rangeae.hashCode() == rangeae.hashCode());\n+        assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());\n+        assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode());\n+        assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n \n         assertFalse(rangea.hashCode() == rangeae.hashCode());\n         assertFalse(rangea.hashCode() == rangenotbf.hashCode());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n         final MutableByte mutNumB = new MutableByte((byte) 0);\n         final MutableByte mutNumC = new MutableByte((byte) 1);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n         final MutableDouble mutNumB = new MutableDouble(0d);\n         final MutableDouble mutNumC = new MutableDouble(1d);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == Double.valueOf(0d).hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n         final MutableFloat mutNumB = new MutableFloat(0f);\n         final MutableFloat mutNumC = new MutableFloat(1f);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == Float.valueOf(0f).hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n         final MutableInt mutNumB = new MutableInt(0);\n         final MutableInt mutNumC = new MutableInt(1);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == Integer.valueOf(0).hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n         final MutableLong mutNumB = new MutableLong(0);\n         final MutableLong mutNumC = new MutableLong(1);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == Long.valueOf(0).hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n         final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n         final MutableObject<String> mutNumD = new MutableObject<String>(null);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == \"ALPHA\".hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumD.hashCode());\n+        assertTrue(mutNumA.hashCode() == \"ALPHA\".hashCode());\n         assertEquals(0, mutNumD.hashCode());\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n         final MutableShort mutNumB = new MutableShort((short) 0);\n         final MutableShort mutNumC = new MutableShort((short) 1);\n \n-        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n-        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == Short.valueOf((short) 0).hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumA.hashCode());\n+        assertTrue(mutNumA.hashCode() == mutNumB.hashCode());\n+        assertFalse(mutNumA.hashCode() == mutNumC.hashCode());\n+        assertTrue(mutNumA.hashCode() == Short.valueOf((short) 0).hashCode());\n     }\n \n     @Test", "timestamp": 1348018887, "metainfo": ""}