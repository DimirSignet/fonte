{"sha": "632989ce41d777855ce2c5b5bcb9364e64dbe2b0", "log": "Fix some raw types  ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/ConstructorUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ConstructorUtils.java\n      * @see Class#getConstructor\n      * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n      */\n-    public static Constructor getAccessibleConstructor(Class<?> cls,\n+    public static Constructor<?> getAccessibleConstructor(Class<?> cls,\n             Class<?> parameterType) {\n         return getAccessibleConstructor(cls, new Class[] { parameterType });\n     }\n      * @see Class#getConstructor\n      * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n      */\n-    public static Constructor getAccessibleConstructor(Class<?> cls,\n+    public static Constructor<?> getAccessibleConstructor(Class<?> cls,\n             Class<?>[] parameterTypes) {\n         try {\n             return getAccessibleConstructor(cls.getConstructor(parameterTypes));\n      * @return <code>null</code> if accessible constructor can not be found.\n      * @see java.lang.SecurityManager\n      */\n-    public static Constructor getAccessibleConstructor(Constructor ctor) {\n+    public static Constructor<?> getAccessibleConstructor(Constructor<?> ctor) {\n         return MemberUtils.isAccessible(ctor)\n                 && Modifier.isPublic(ctor.getDeclaringClass().getModifiers()) ? ctor\n                 : null;\n      * @param parameterTypes find method with compatible parameters\n      * @return a valid Constructor object. If there's no matching constructor, returns <code>null</code>.\n      */\n-    public static Constructor getMatchingAccessibleConstructor(Class<?> cls,\n+    public static Constructor<?> getMatchingAccessibleConstructor(Class<?> cls,\n             Class<?>[] parameterTypes) {\n         // see if we can find the constructor directly\n         // most of the time this works and it's much faster", "timestamp": 1256471055, "metainfo": ""}