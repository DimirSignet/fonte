{"sha": "734a45976c8f9e71c3e2e2cf6fbc94c77031c1bd", "log": "Explicit boxing  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FormatCache.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FormatCache.java\n             try {\n                 DateFormat formatter;\n                 if (dateStyle == null) {\n-                    formatter = DateFormat.getTimeInstance(timeStyle, locale);                    \n+                    formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);                    \n                 }\n                 else if (timeStyle == null) {\n-                    formatter = DateFormat.getDateInstance(dateStyle, locale);                    \n+                    formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);                    \n                 }\n                 else {\n-                    formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n+                    formatter = DateFormat.getDateTimeInstance(dateStyle.intValue(), timeStyle.intValue(), locale);\n                 }\n                 pattern = ((SimpleDateFormat)formatter).toPattern();\n                 String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);\n--- a/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java\n                     String s = ReflectionToStringBuilder.toString(holder);\n                     Assert.assertNotNull(s);\n                 }\n-                return REPEAT;\n+                return Integer.valueOf(REPEAT);\n             }\n         };\n         // Produces changes in the list\n                 for (int i = 0; i < DATA_SIZE; i++) {\n                     list.remove(list.get(0));\n                 }\n-                return REPEAT;\n+                return Integer.valueOf(REPEAT);\n             }\n         };\n         Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringStyleConcurrencyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringStyleConcurrencyTest.java\n                     // Calls ToStringStyle\n                     new ToStringBuilder(holder).append(holder.collection);\n                 }\n-                return REPEAT;\n+                return Integer.valueOf(REPEAT);\n             }\n         };\n         Collection<Callable<Integer>> tasks = new ArrayList<Callable<Integer>>();\n--- a/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n             if (shouldSleep) {\n                 Thread.sleep(60000L);\n             }\n-            return ++initializeCalls;\n+            return Integer.valueOf(++initializeCalls);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java\n                 throw ex;\n             }\n \n-            return initializeCalls;\n+            return Integer.valueOf(initializeCalls);\n         }\n     }\n }", "timestamp": 1348755610, "metainfo": ""}