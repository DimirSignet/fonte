{"sha": "6823c3742ee16f5b28e550a6afb685553befc0c2", "log": "LANG-856 Code refactoring in NumberUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n  */\n package org.apache.commons.lang3.math;\n \n+import java.lang.reflect.Array;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n      */\n     public static long min(long[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns min\n         long min = array[0];\n      */\n     public static int min(int[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns min\n         int min = array[0];\n      */\n     public static short min(short[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns min\n         short min = array[0];\n      */\n     public static byte min(byte[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns min\n         byte min = array[0];\n      */\n     public static double min(double[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns min\n         double min = array[0];\n      */\n     public static float min(float[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns min\n         float min = array[0];\n      */\n     public static long max(long[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n \n         // Finds and returns max\n         long max = array[0];\n      */\n     public static int max(int[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns max\n         int max = array[0];\n      */\n     public static short max(short[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns max\n         short max = array[0];\n      */\n     public static byte max(byte[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n     \n         // Finds and returns max\n         byte max = array[0];\n      */\n     public static double max(double[] array) {\n         // Validates input\n-        if (array== null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n-    \n+        validateArray(array);\n+\n         // Finds and returns max\n         double max = array[0];\n         for (int j = 1; j < array.length; j++) {\n      */\n     public static float max(float[] array) {\n         // Validates input\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        } else if (array.length == 0) {\n-            throw new IllegalArgumentException(\"Array cannot be empty.\");\n-        }\n+        validateArray(array);\n \n         // Finds and returns max\n         float max = array[0];\n         }\n \n         return max;\n+    }\n+\n+    private static void validateArray(Object array) {\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        } else if (Array.getLength(array) == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n     }\n      \n     // 3 param min", "timestamp": 1352812897, "metainfo": ""}