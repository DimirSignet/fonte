{"sha": "dac41d3cd35628bb0534de01f25dd0f2ca255f0b", "log": "Add @since 2.0 tags based on http://www.apache.org/~bayard/commons-lang-2.0/Commons-Lang-1.0.1-to-2.0/missingSinces.txt   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SerializationUtils.java\n+++ b/src/java/org/apache/commons/lang/SerializationUtils.java\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Stephen Colebourne\n  * @author Jeff Varszegi\n+ * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: SerializationUtils.java,v 1.10 2003/08/18 02:22:23 bayard Exp $\n+ * @version $Id: SerializationUtils.java,v 1.11 2003/08/21 05:35:23 ggregory Exp $\n  */\n public class SerializationUtils {\n     \n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n+     * @since 2.0\n      */\n     public SerializationUtils() {\n         super();\n--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n  * @see Enum\n  * @see ValuedEnum\n  * @author Stephen Colebourne\n+ * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: EnumUtils.java,v 1.9 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: EnumUtils.java,v 1.10 2003/08/21 05:29:08 ggregory Exp $\n  */\n public class EnumUtils {\n \n     /**\n      * Public constructor. This class should not normally be instantiated.\n+     * @since 2.0\n      */\n     public EnumUtils() {\n     }\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author Sean C. Sullivan\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: NestableDelegate.java,v 1.18 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: NestableDelegate.java,v 1.19 2003/08/21 05:33:10 ggregory Exp $\n  */\n public class NestableDelegate implements Serializable {\n \n     /**\n      * Whether to print the stack trace top-down.\n      * This public flag may be set by calling code, typically in initialisation.\n+     * @since 2.0\n      */\n     public static boolean topDown = true;\n     \n     /**\n      * Whether to trim the repeated stack trace.\n      * This public flag may be set by calling code, typically in initialisation.\n+     * @since 2.0\n      */\n     public static boolean trimStackFrames = true;\n \n      *\n      * @param nestable the Nestable implementation (<i>must</i> extend\n      * {@link java.lang.Throwable})\n+     * @since 2.0\n      */\n     public NestableDelegate(Nestable nestable) {\n         if (nestable instanceof Throwable) {\n      * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n      * negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n+     * @since 2.0\n      */\n     public String getMessage(int index) {\n         Throwable t = this.getThrowable(index);\n      * java.lang.Throwable}.\n      * @return The concatenated message for this and all nested\n      * <code>Throwable</code>s\n+     * @since 2.0\n      */\n     public String getMessage(String baseMsg) {\n         StringBuffer msg = new StringBuffer();\n      * operation.\n      *\n      * @return the error messages\n+     * @since 2.0\n      */\n     public String[] getMessages() {\n         Throwable[] throwables = this.getThrowables();\n      * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n      * negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n+     * @since 2.0\n      */\n     public Throwable getThrowable(int index) {\n         if (index == 0) {\n      * <code>Nestable</code> contained by this delegate.\n      *\n      * @return the throwable count\n+     * @since 2.0\n      */\n     public int getThrowableCount() {\n         return ExceptionUtils.getThrowableCount(this.nestable);\n      * element for each <code>Throwable</code>.\n      *\n      * @return the <code>Throwable</code>s\n+     * @since 2.0\n      */\n     public Throwable[] getThrowables() {\n         return ExceptionUtils.getThrowables(this.nestable);\n      * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n      * is negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n+     * @since 2.0\n      */\n     public int indexOfThrowable(Class type, int fromIndex) {\n         if (fromIndex < 0) {\n      *\n      * @param t The <code>Throwable</code>.\n      * @return  An array of strings describing each stack frame.\n+     * @since 2.0\n      */\n     protected String[] getStackFrames(Throwable t) {\n         StringWriter sw = new StringWriter();\n      * one just on top.\n      *\n      * @param stacks The list containing String[] elements\n+     * @since 2.0\n      */\n     protected void trimStackFrames(List stacks) {\n          for (int size=stacks.size(), i=size-1; i > 0; i--) {", "timestamp": 1061444123, "metainfo": ""}