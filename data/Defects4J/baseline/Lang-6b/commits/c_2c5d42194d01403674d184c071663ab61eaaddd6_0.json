{"sha": "2c5d42194d01403674d184c071663ab61eaaddd6", "log": "Fix bug where add() didn't use array type Remove unecessary calls to lastIndex() for performance   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.47 2004/10/08 00:11:00 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.48 2004/10/09 11:55:51 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      * @since 2.1\n      */\n     public static Object[] add(Object[] array, Object element) {\n-        Object newArray = copyArrayGrow1(array, element != null ? element.getClass() : Object.class);\n-        Array.set(newArray, lastIndex(newArray), element);\n-        return (Object[]) newArray;\n+        Class type = (array != null ? array.getClass() : (element != null ? element.getClass() : Object.class));\n+        Object[] newArray = (Object[]) copyArrayGrow1(array, type);\n+        newArray[newArray.length - 1] = element;\n+        return newArray;\n     }\n     \n     /**\n      */\n     public static boolean[] add(boolean[] array, boolean element) {\n         boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static byte[] add(byte[] array, byte element) {\n         byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static char[] add(char[] array, char element) {\n         char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static double[] add(double[] array, double element) {\n         double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static float[] add(float[] array, float element) {\n         float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static int[] add(int[] array, int element) {\n         int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static long[] add(long[] array, long element) {\n         long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n      */\n     public static short[] add(short[] array, short element) {\n         short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE);\n-        newArray[lastIndex(newArray)] = element;\n+        newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n--- a/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n  * Tests ArrayUtils add methods.\n  * \n  * @author Gary D. Gregory\n- * @version $Id: ArrayUtilsAddTest.java,v 1.3 2004/03/16 01:40:57 ggregory Exp $\n+ * @version $Id: ArrayUtilsAddTest.java,v 1.4 2004/10/09 11:55:51 scolebourne Exp $\n  */\n public class ArrayUtilsAddTest extends TestCase {\n     public static void main(String[] args) {\n         newArray = ArrayUtils.add((Object[])null, null);\n         assertTrue(Arrays.equals((new Object[]{null}), newArray));\n         assertEquals(Object.class, newArray.getClass().getComponentType());\n+        \n         newArray = ArrayUtils.add((Object[])null, \"a\");\n         assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n         assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n+        \n         String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n         newArray = ArrayUtils.add(stringArray1, null);\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n+        \n         newArray = ArrayUtils.add(stringArray1, \"d\");\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n+        \n+        Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n+        newArray = ArrayUtils.add(numberArray1, new Float(3));\n+        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n+        assertEquals(Number.class, newArray.getClass().getComponentType());\n+        \n+        numberArray1 = null;\n+        newArray = ArrayUtils.add(numberArray1, new Float(3));\n+        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n+        assertEquals(Float.class, newArray.getClass().getComponentType());\n+        \n+        numberArray1 = null;\n+        newArray = ArrayUtils.add(numberArray1, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n     }\n     \n     public void testAddObjectArrayToObjectArray() {", "timestamp": 1097322951, "metainfo": ""}