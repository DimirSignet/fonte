{"sha": "b93a1df555f168e59e032158f1976837cc5e6725", "log": "junit4ify ObjectUtilsTest  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.*;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.exception.CloneFailedException;\n import org.apache.commons.lang3.mutable.MutableObject;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.ObjectUtils}.\n  *\n  * @version $Id$\n  */\n-public class ObjectUtilsTest extends TestCase {\n+public class ObjectUtilsTest {\n     private static final String FOO = \"foo\";\n     private static final String BAR = \"bar\";\n \n-    public ObjectUtilsTest(String name) {\n-        super(name);\n-    }\n-\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new ObjectUtils());\n         Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testIsNull() {\n         Object o = FOO;\n         Object dflt = BAR;\n         assertSame(\"dflt was returned when o was not null\", o, ObjectUtils.defaultIfNull(o, dflt));\n     }\n \n+    @Test\n     public void testFirstNonNull() {\n         assertEquals(null, ObjectUtils.firstNonNull(null, null));\n         assertEquals(\"\", ObjectUtils.firstNonNull(null, \"\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testEquals() {\n         assertTrue(\"ObjectUtils.equals(null, null) returned false\", ObjectUtils.equals(null, null));\n         assertTrue(\"ObjectUtils.equals(\\\"foo\\\", null) returned true\", !ObjectUtils.equals(FOO, null));\n         assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"foo\\\") returned false\", ObjectUtils.equals(FOO, FOO));\n     }\n \n+    @Test\n     public void testNotEqual() {\n         assertFalse(\"ObjectUtils.notEqual(null, null) returned false\", ObjectUtils.notEqual(null, null));\n         assertTrue(\"ObjectUtils.notEqual(\\\"foo\\\", null) returned true\", ObjectUtils.notEqual(FOO, null));\n         assertFalse(\"ObjectUtils.notEqual(\\\"foo\\\", \\\"foo\\\") returned false\", ObjectUtils.notEqual(FOO, FOO));\n     }\n \n+    @Test\n     public void testHashCode() {\n         assertEquals(0, ObjectUtils.hashCode(null));\n         assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\n     }\n \n+    @Test\n     public void testHashCodeMulti_multiple_emptyArray() {\n         Object[] array = new Object[0];\n         assertEquals(1, ObjectUtils.hashCodeMulti(array));\n     }\n \n+    @Test\n     public void testHashCodeMulti_multiple_nullArray() {\n         Object[] array = null;\n         assertEquals(1, ObjectUtils.hashCodeMulti(array));\n     }\n \n+    @Test\n     public void testHashCodeMulti_multiple_likeList() {\n         List<Object> list0 = new ArrayList<Object>(Arrays.asList());\n         assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti());\n //        //assertFalse(\"java.util.Date and java.sql.Timestamp should be equal\", ObjectUtils.equals(date, timestamp));\n //    }\n     \n+    @Test\n     public void testIdentityToString() {\n         assertEquals(null, ObjectUtils.identityToString(null));\n         assertEquals(\n         }\n     }\n \n+    @Test\n     public void testToString_Object() {\n         assertEquals(\"\", ObjectUtils.toString((Object) null) );\n         assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );\n     }\n             \n+    @Test\n     public void testToString_ObjectString() {\n         assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );\n         assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );\n     }\n \n+    @Test\n     public void testNull() {\n         assertNotNull(ObjectUtils.NULL);\n         assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);\n         assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));\n     }\n-    \n-    \n-    \n+\n+    @Test\n     public void testMax() {\n         Calendar calendar = Calendar.getInstance();\n         Date nonNullComparable1 = calendar.getTime();\n \n         assertNull( ObjectUtils.max((String)null, (String)null) );\n     }\n-    \n+\n+    @Test\n     public void testMin() {\n         Calendar calendar = Calendar.getInstance();\n         Date nonNullComparable1 = calendar.getTime();\n     /**\n      * Tests {@link ObjectUtils#compare(Comparable, Comparable, boolean)}.\n      */\n+    @Test\n     public void testCompare() {\n         Integer one = Integer.valueOf(1);\n         Integer two = Integer.valueOf(2);\n     /**\n      * Tests {@link ObjectUtils#clone(Object)} with a cloneable object.\n      */\n+    @Test\n     public void testCloneOfCloneable() {\n         final CloneableString string = new CloneableString(\"apache\");\n         final CloneableString stringClone = ObjectUtils.clone(string);\n     /**\n      * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object.\n      */\n+    @Test\n     public void testCloneOfNotCloneable() {\n         final String string = new String(\"apache\");\n         assertNull(ObjectUtils.clone(string));\n     /**\n      * Tests {@link ObjectUtils#clone(Object)} with an uncloneable object.\n      */\n-    public void testCloneOfUncloneable() {\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testCloneOfUncloneable() throws Throwable {\n         final UncloneableString string = new UncloneableString(\"apache\");\n         try {\n             ObjectUtils.clone(string);\n             fail(\"Thrown \" + CloneFailedException.class.getName() + \" expected\");\n         } catch (final CloneFailedException e) {\n-            assertEquals(NoSuchMethodException.class, e.getCause().getClass());\n+            throw e.getCause();\n         }\n     }\n \n     /**\n      * Tests {@link ObjectUtils#clone(Object)} with an object array.\n      */\n+    @Test\n     public void testCloneOfStringArray() {\n         assertTrue(Arrays.deepEquals(\n             new String[]{\"string\"}, ObjectUtils.clone(new String[]{\"string\"})));\n     /**\n      * Tests {@link ObjectUtils#clone(Object)} with an array of primitives.\n      */\n+    @Test\n     public void testCloneOfPrimitiveArray() {\n         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1})));\n     }\n     /**\n      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.\n      */\n+    @Test\n     public void testPossibleCloneOfCloneable() {\n         final CloneableString string = new CloneableString(\"apache\");\n         final CloneableString stringClone = ObjectUtils.cloneIfPossible(string);\n     /**\n      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a not cloneable object.\n      */\n+    @Test\n     public void testPossibleCloneOfNotCloneable() {\n         final String string = new String(\"apache\");\n         assertSame(string, ObjectUtils.cloneIfPossible(string));\n     /**\n      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object.\n      */\n-    public void testPossibleCloneOfUncloneable() {\n+    @Test(expected = NoSuchMethodException.class)\n+    public void testPossibleCloneOfUncloneable() throws Throwable {\n         final UncloneableString string = new UncloneableString(\"apache\");\n         try {\n             ObjectUtils.cloneIfPossible(string);\n             fail(\"Thrown \" + CloneFailedException.class.getName() + \" expected\");\n         } catch (final CloneFailedException e) {\n-            assertEquals(NoSuchMethodException.class, e.getCause().getClass());\n+            throw e.getCause();\n         }\n     }\n ", "timestamp": 1310874404, "metainfo": ""}