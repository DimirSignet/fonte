{"sha": "0d059443776a539ed955bd50ac2c2812067c98ae", "log": "Explicit boxing  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n         assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));\n     }\n-    \n+\n     //---------------------------------------------------------------------\n \n     /**\n         assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n \n         // LANG-693\n-        assertEquals(\"createNumber(String) LANG-693 failed\", Double.MAX_VALUE, NumberUtils\n+        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                     .createNumber(\"\" + Double.MAX_VALUE));\n     }\n \n         assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n         assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n     }\n- \n+\n     public void testMaxFloat() {\n         final float[] f = null;\n         try {\n         assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n         assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n         assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n         assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n         assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n         assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n         assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n         assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n         assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n         assertTrue(Double.compare(1.2d, -1.2d) == +1);\n         assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n         assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n         assertTrue(Double.compare(0.0d, -1.2d) == +1);\n         assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n         assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n         assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n         assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n         assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n         assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n         assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n         assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n         assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n         assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n         assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n         assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n         assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n         assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n         assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n         assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n         assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n         assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n         assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n         assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n         assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n         assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n         assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n         assertTrue(Float.compare(1.2f, -1.2f) == +1);\n         assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n         assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n         assertTrue(Float.compare(0.0f, -1.2f) == +1);\n         assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n         assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n         assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n         assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n         assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n         assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n         assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n         assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n         assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n         assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n         assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n         assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n-        \n+\n         assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n         assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n         assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n         assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n         assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n     }\n-    \n+\n     /**\n      * Tests isNumber(String) and tests that createNumber(String) returns\n      * a valid number iff isNumber(String) returns false.\n         assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n         val = \"11a\";\n         assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val));\n         val = \"1a\";\n         assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val));\n         val = \"a\";\n         assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val));\n         val = \"11g\";\n         assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val));\n         val = \"11z\";\n         assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val));\n         val = \"11def\";\n         assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val));\n         val = \"11d11\";\n         assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n-        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n+        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val));\n         val = \"11 11\";\n         assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n         assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n         assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n         assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n         assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n-        \n+\n         assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n         assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n         assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n         float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n         assertTrue(Float.isNaN(NumberUtils.max(bF)));\n     }\n-    \n+\n }", "timestamp": 1303814647, "metainfo": ""}