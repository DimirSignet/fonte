{"sha": "c1708e906e777e205bc93e7c6417ab813f6deb45", "log": "Adding green regionMatches implementation and moving endsWith and startsWith methods to use it; thus giving them CharSequence based APIs. LANG-687  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Check if a String starts with a specified prefix.</p>\n+     * <p>Check if a CharSequence starts with a specified prefix.</p>\n      *\n      * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case sensitive.</p>\n      * </pre>\n      *\n      * @see java.lang.String#startsWith(String)\n-     * @param str  the String to check, may be null\n+     * @param str  the CharSequence to check, may be null\n      * @param prefix the prefix to find, may be null\n-     * @return {@code true} if the String starts with the prefix, case sensitive, or\n+     * @return {@code true} if the CharSequence starts with the prefix, case sensitive, or\n      *  both {@code null}\n      * @since 2.4\n      */\n-    public static boolean startsWith(String str, String prefix) {\n+    public static boolean startsWith(CharSequence str, CharSequence prefix) {\n         return startsWith(str, prefix, false);\n     }\n \n     /**\n-     * <p>Case insensitive check if a String starts with a specified prefix.</p>\n+     * <p>Case insensitive check if a CharSequence starts with a specified prefix.</p>\n      *\n      * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case insensitive.</p>\n      * </pre>\n      *\n      * @see java.lang.String#startsWith(String)\n-     * @param str  the String to check, may be null\n+     * @param str  the CharSequence to check, may be null\n      * @param prefix the prefix to find, may be null\n-     * @return {@code true} if the String starts with the prefix, case insensitive, or\n+     * @return {@code true} if the CharSequence starts with the prefix, case insensitive, or\n      *  both {@code null}\n      * @since 2.4\n      */\n-    public static boolean startsWithIgnoreCase(String str, String prefix) {\n+    public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix) {\n         return startsWith(str, prefix, true);\n     }\n \n     /**\n-     * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n+     * <p>Check if a CharSequence starts with a specified prefix (optionally case insensitive).</p>\n      *\n      * @see java.lang.String#startsWith(String)\n-     * @param str  the String to check, may be null\n+     * @param str  the CharSequence to check, may be null\n      * @param prefix the prefix to find, may be null\n      * @param ignoreCase inidicates whether the compare should ignore case\n      *  (case insensitive) or not.\n-     * @return {@code true} if the String starts with the prefix or\n+     * @return {@code true} if the CharSequence starts with the prefix or\n      *  both {@code null}\n      */\n-    private static boolean startsWith(String str, String prefix, boolean ignoreCase) {\n+    private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase) {\n         if (str == null || prefix == null) {\n             return (str == null && prefix == null);\n         }\n         if (prefix.length() > str.length()) {\n             return false;\n         }\n-        return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());\n-    }\n-\n-    /**\n-     * <p>Check if a String starts with any of an array of specified strings.</p>\n+        return regionMatchesSequence(str, ignoreCase, 0, prefix, 0, prefix.length());\n+    }\n+\n+    /**\n+     * <p>Check if a CharSequence starts with any of an array of specified strings.</p>\n      *\n      * <pre>\n      * StringUtils.startsWithAny(null, null)      = false\n      * StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) = true\n      * </pre>\n      *\n-     * @param string  the String to check, may be null\n-     * @param searchStrings the Strings to find, may be null or empty\n-     * @return {@code true} if the String starts with any of the the prefixes, case insensitive, or\n+     * @param string  the CharSequence to check, may be null\n+     * @param searchStrings the CharSequences to find, may be null or empty\n+     * @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, or\n      *  both {@code null}\n      * @since 2.5\n      */\n-    public static boolean startsWithAny(String string, String... searchStrings) {\n+    public static boolean startsWithAny(CharSequence string, CharSequence... searchStrings) {\n         if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n             return false;\n         }\n         for (int i = 0; i < searchStrings.length; i++) {\n-            String searchString = searchStrings[i];\n+            CharSequence searchString = searchStrings[i];\n             if (StringUtils.startsWith(string, searchString)) {\n                 return true;\n             }\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Check if a String ends with a specified suffix.</p>\n+     * <p>Check if a CharSequence ends with a specified suffix.</p>\n      *\n      * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case sensitive.</p>\n      * </pre>\n      *\n      * @see java.lang.String#endsWith(String)\n-     * @param str  the String to check, may be null\n+     * @param str  the CharSequence to check, may be null\n      * @param suffix the suffix to find, may be null\n-     * @return {@code true} if the String ends with the suffix, case sensitive, or\n+     * @return {@code true} if the CharSequence ends with the suffix, case sensitive, or\n      *  both {@code null}\n      * @since 2.4\n      */\n-    public static boolean endsWith(String str, String suffix) {\n+    public static boolean endsWith(CharSequence str, CharSequence suffix) {\n         return endsWith(str, suffix, false);\n     }\n \n     /**\n-     * <p>Case insensitive check if a String ends with a specified suffix.</p>\n+     * <p>Case insensitive check if a CharSequence ends with a specified suffix.</p>\n      *\n      * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case insensitive.</p>\n      * </pre>\n      *\n      * @see java.lang.String#endsWith(String)\n-     * @param str  the String to check, may be null\n+     * @param str  the CharSequence to check, may be null\n      * @param suffix the suffix to find, may be null\n-     * @return {@code true} if the String ends with the suffix, case insensitive, or\n+     * @return {@code true} if the CharSequence ends with the suffix, case insensitive, or\n      *  both {@code null}\n      * @since 2.4\n      */\n-    public static boolean endsWithIgnoreCase(String str, String suffix) {\n+    public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix) {\n         return endsWith(str, suffix, true);\n     }\n \n     /**\n-     * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n+     * <p>Check if a CharSequence ends with a specified suffix (optionally case insensitive).</p>\n      *\n      * @see java.lang.String#endsWith(String)\n-     * @param str  the String to check, may be null\n+     * @param str  the CharSequence to check, may be null\n      * @param suffix the suffix to find, may be null\n      * @param ignoreCase inidicates whether the compare should ignore case\n      *  (case insensitive) or not.\n-     * @return {@code true} if the String starts with the prefix or\n+     * @return {@code true} if the CharSequence starts with the prefix or\n      *  both {@code null}\n      */\n-    private static boolean endsWith(String str, String suffix, boolean ignoreCase) {\n+    private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase) {\n         if (str == null || suffix == null) {\n             return str == null && suffix == null;\n         }\n             return false;\n         }\n         int strOffset = str.length() - suffix.length();\n-        return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());\n+        return regionMatchesSequence(str, ignoreCase, strOffset, suffix, 0, suffix.length());\n     }\n \n     /**\n     }\n \n     /**\n-     * <p>Check if a String ends with any of an array of specified strings.</p>\n+     * <p>Check if a CharSequence ends with any of an array of specified strings.</p>\n      *\n      * <pre>\n      * StringUtils.endsWithAny(null, null)      = false\n      * StringUtils.endsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) = true\n      * </pre>\n      *\n-     * @param string  the String to check, may be null\n-     * @param searchStrings the Strings to find, may be null or empty\n-     * @return {@code true} if the String ends with any of the the prefixes, case insensitive, or\n+     * @param string  the CharSequence to check, may be null\n+     * @param searchStrings the CharSequences to find, may be null or empty\n+     * @return {@code true} if the CharSequence ends with any of the the prefixes, case insensitive, or\n      *  both {@code null}\n      * @since 3.1\n      */\n-    public static boolean endsWithAny(String string, String... searchStrings) {\n+    public static boolean endsWithAny(CharSequence string, CharSequence... searchStrings) {\n         if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n             return false;\n         }\n         for (int i = 0; i < searchStrings.length; i++) {\n-            String searchString = searchStrings[i];\n+            CharSequence searchString = searchStrings[i];\n             if (StringUtils.endsWith(string, searchString)) {\n                 return true;\n             }\n         }\n     }\n \n+    static boolean regionMatchesSequence(CharSequence cs, boolean ignoreCase, int thisStart, \n+                                         CharSequence substring, int start, int length)\n+    {\n+        if (cs instanceof String && substring instanceof String) {\n+            return ((String) cs).regionMatches(ignoreCase, thisStart, ((String)substring), start, length);\n+        } else {\n+            // TODO: Implement rather than convert to String\n+            return cs.toString().regionMatches(ignoreCase, thisStart, substring.toString(), start, length);\n+        }\n+    }\n+\n }", "timestamp": 1302110496, "metainfo": ""}