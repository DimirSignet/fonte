{"sha": "39098c04c4b8140a52bf96cc83a0509f6f859cac", "log": "Change HashCodeUtils to HashCodeBuilder   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/HashCodeBuilder.java\n+package org.apache.commons.lang;\n+\n+\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+/**\n+ * <code>HashCode</code> generation routines.\n+ * <p>\n+ * This class enables a good hashcode to be built for any class. It follows\n+ * the rules laid out in the book Effective Java, by Joshua Bloch. Writing a \n+ * good hashCode is actually quite difficult. This class aims to simplify the \n+ * process.\n+ * <p>\n+ * All relevant fields from the object should be included in the hashCode. Derived\n+ * fields may be excluded. In general, any field used in the equals method must be\n+ * used in the hashCode method. \n+ * <p>\n+ * To use this class write code as follows:\n+ * <code>\n+ * public class Person {\n+ *   String name;\n+ *   int age;\n+ *   boolean isSmoker;\n+ * \n+ *   ...\n+ * \n+ *   public int hashCode() {\n+ *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n+ *     // ideally different for each class\n+ *     return new HashCodeBuilder(17).   \n+ *       append(name).\n+ *       append(age).\n+ *       append(smoker).\n+ *       toHashCode();\n+ *   }\n+ * }\n+ * </code>\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: HashCodeBuilder.java,v 1.1 2002/08/15 22:37:29 scolebourne Exp $\n+ */\n+public class HashCodeBuilder {\n+    \n+    /**\n+     * Constant to use in building the hashCode\n+     */\n+    private final int iConstant;\n+    /**\n+     * Running total of the hashCode\n+     */\n+    private int iTotal = 0;\n+    \n+    /**\n+     * Constructor for HashCodeBuilder.\n+     * This constructor uses two hard coded choices for the constants needed\n+     * to build a hashCode.\n+     */\n+    public HashCodeBuilder() {\n+        super();\n+        iConstant = 37;\n+        iTotal = 17;\n+    }\n+    \n+    /**\n+     * Constructor for HashCodeBuilder.\n+     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n+     * these should be different for each class, however this is not vital.\n+     * Prime numbers are preferred, especially for the multiplier.\n+     * \n+     * @param initialNonZeroOddNumber\n+     * @param multiplierNonZeroOddNumber\n+     * @throws IllegalArgumentException if the number is zero or even\n+     */\n+    public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {\n+        super();\n+        if (initialNonZeroOddNumber == 0) {\n+            throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\");\n+        }\n+        if (initialNonZeroOddNumber % 2 == 0) {\n+            throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");\n+        }\n+        if (multiplierNonZeroOddNumber == 0) {\n+            throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\");\n+        }\n+        if (multiplierNonZeroOddNumber % 2 == 0) {\n+            throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\");\n+        }\n+        iConstant = multiplierNonZeroOddNumber;\n+        iTotal = initialNonZeroOddNumber;\n+    }\n+\n+    /**\n+     * Append a hashCode for an Object.\n+     *\n+     * @param object  the object to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public HashCodeBuilder append(Object object) {\n+        if (object == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            iTotal = iTotal * iConstant + object.hashCode();\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a long.\n+     *\n+     * @param value  the long to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(long value) {\n+        iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for an int.\n+     *\n+     * @param value  the int to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(int value) {\n+        iTotal = iTotal * iConstant + value;\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a short.\n+     *\n+     * @param value  the short to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(short value) {\n+        iTotal = iTotal * iConstant + (int) value;\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a char.\n+     *\n+     * @param value  the char to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(char value) {\n+        iTotal = iTotal * iConstant + (int) value;\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a byte.\n+     *\n+     * @param value  the byte to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(byte value) {\n+        iTotal = iTotal * iConstant + (int) value;\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a double.\n+     *\n+     * @param value  the double to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(double value) {\n+        return append(Double.doubleToLongBits(value));\n+    }\n+\n+    /**\n+     * Append a hashCode for a float.\n+     *\n+     * @param value  the float to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(float value) {\n+        iTotal = iTotal * iConstant + Float.floatToIntBits(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a long.\n+     *\n+     * @param value  the long to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(boolean value) {\n+        iTotal = iTotal * iConstant + (value ? 0 : 1);\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for an Object array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(Object[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a long array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(long[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for an int array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(int[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a short array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(short[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a char array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(char[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a byte array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(byte[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a double array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(double[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a float array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(float[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Append a hashCode for a boolean array.\n+     *\n+     * @param array  the array to add to the hashCode\n+     * @return this\n+     */\n+    public HashCodeBuilder append(boolean[] array) {\n+        if (array == null) {\n+            iTotal = iTotal * iConstant;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                append(array[i]);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Return the computed hashCode\n+     * \n+     * @return int hashCode based on the fields appended\n+     */    \n+    public int toHashCode() {\n+        return iTotal;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/HashCodeBuilderTest.java\n+package org.apache.commons.lang;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.HashCodeBuilder}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: HashCodeBuilderTest.java,v 1.1 2002/08/15 22:37:30 scolebourne Exp $\n+ */\n+public class HashCodeBuilderTest extends TestCase {\n+\n+    public HashCodeBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(HashCodeBuilderTest.class);\n+        suite.setName(\"HashCodeBuilder Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testConstructorEx1() {\n+        try {\n+            new HashCodeBuilder(0, 0);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testConstructorEx2() {\n+        try {\n+            new HashCodeBuilder(2, 2);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testObject() {\n+        Object obj = null;\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj = new Object();\n+        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n+        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append((long) 123456789L).toHashCode());\n+    }\n+\n+    public void testInt() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n+        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n+    }\n+\n+    public void testShort() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\n+        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\n+    }\n+\n+    public void testChar() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\n+        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\n+    }\n+\n+    public void testByte() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\n+        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n+    }\n+\n+    public void testDouble() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n+        double d = 1234567.89;\n+        long l = Double.doubleToLongBits(d);\n+        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n+    }\n+\n+    public void testFloat() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n+        float f = 1234.89f;\n+        int i = Float.floatToIntBits(f);\n+        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\n+    }\n+\n+    public void testBoolean() {\n+        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\n+        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\n+    }\n+\n+    public void testObjectArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\n+        Object[] obj = new Object[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = new Object();\n+        assertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testLongArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\n+        long[] obj = new long[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5L;\n+        int h1 = (int) (5L ^ (5L >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6L;\n+        int h2 = (int) (6L ^ (6L >> 32));\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testIntArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\n+        int[] obj = new int[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testShortArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\n+        short[] obj = new short[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (short) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (short) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testCharArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\n+        char[] obj = new char[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (char) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (char) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testByteArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\n+        byte[] obj = new byte[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (byte) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (byte) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testDoubleArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\n+        double[] obj = new double[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5.4d;\n+        long l1 = Double.doubleToLongBits(5.4d);\n+        int h1 = (int) (l1 ^ (l1 >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6.3d;\n+        long l2 = Double.doubleToLongBits(6.3d);\n+        int h2 = (int) (l2 ^ (l2 >> 32));\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testFloatArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\n+        float[] obj = new float[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5.4f;\n+        int h1 = Float.floatToIntBits(5.4f);\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6.3f;\n+        int h2 = Float.floatToIntBits(6.3f);\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testBooleanArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\n+        boolean[] obj = new boolean[2];\n+        assertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = true;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = false;\n+        assertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: LangTestSuite.java,v 1.2 2002/08/10 12:13:28 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.3 2002/08/15 22:37:29 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang Tests\");\n         suite.addTest(CharSetUtilsTest.suite());\n-        suite.addTest(HashCodeUtilsTest.suite());\n+        suite.addTest(HashCodeBuilderTest.suite());\n         suite.addTest(NumberRangeTest.suite());\n         suite.addTest(NumberUtilsTest.suite());\n         suite.addTest(ObjectUtilsTest.suite());", "timestamp": 1029451050, "metainfo": ""}