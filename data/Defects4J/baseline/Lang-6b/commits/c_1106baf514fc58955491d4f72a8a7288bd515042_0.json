{"sha": "1106baf514fc58955491d4f72a8a7288bd515042", "log": "Javadoc and add toString()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/JavaVersion.java\n+++ b/src/main/java/org/apache/commons/lang3/JavaVersion.java\n     JAVA_1_7(1.7f, \"1.7\"),\n     JAVA_1_8(1.8f, \"1.8\");\n \n+    /**\n+     * The float value.\n+     */\n     private float value;\n+    /**\n+     * The standard name.\n+     */\n     private String name;\n \n+    /**\n+     * Constructor.\n+     * \n+     * @param value  the float value\n+     * @param name  the standard name, not null\n+     */\n     JavaVersion(final float value, final String name) {\n         this.value = value;\n         this.name = name;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n-     * Whether this version of Java is at least the version \n-     * of Java passed in.\n+     * <p>Whether this version of Java is at least the version of Java passed in.</p>\n      *\n-     * For example:\n-     *  myVersion.atLeast(JavaVersion.JAVA_1_4)\n+     * <p>For example:<br />\n+     *  {@code myVersion.atLeast(JavaVersion.JAVA_1_4)}<p>\n      *\n-     * @param requiredVersion to check this version is at least equivalent to\n-     *\n-     * @return Whether this version is at least the passed in version\n+     * @param requiredVersion  the version to check against, not null\n+     * @return true if this version is equal to or greater than the specified version\n      */\n     public boolean atLeast(JavaVersion requiredVersion) {\n         return this.value >= requiredVersion.value;\n     static JavaVersion getJavaVersion(final String nom) {\n         return get(nom);\n     }\n+\n     static JavaVersion get(final String nom) {\n-        if(\"0.9\".equals(nom)) {\n+        if (\"0.9\".equals(nom)) {\n             return JAVA_0_9;\n-        } else\n-        if(\"1.1\".equals(nom)) {\n+        } else if (\"1.1\".equals(nom)) {\n             return JAVA_1_1;\n-        } else\n-        if(\"1.2\".equals(nom)) {\n+        } else if (\"1.2\".equals(nom)) {\n             return JAVA_1_2;\n-        } else\n-        if(\"1.3\".equals(nom)) {\n+        } else if (\"1.3\".equals(nom)) {\n             return JAVA_1_3;\n-        } else\n-        if(\"1.4\".equals(nom)) {\n+        } else if (\"1.4\".equals(nom)) {\n             return JAVA_1_4;\n-        } else\n-        if(\"1.5\".equals(nom)) {\n+        } else if (\"1.5\".equals(nom)) {\n             return JAVA_1_5;\n-        } else\n-        if(\"1.6\".equals(nom)) {\n+        } else if (\"1.6\".equals(nom)) {\n             return JAVA_1_6;\n-        } else\n-        if(\"1.7\".equals(nom)) {\n+        } else if (\"1.7\".equals(nom)) {\n             return JAVA_1_7;\n-        } else\n-        if(\"1.8\".equals(nom)) {\n+        } else if (\"1.8\".equals(nom)) {\n             return JAVA_1_8;\n         } else {\n             return null;\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>The string value is overridden to return the standard name.</p>\n+     * \n+     * <p>For example, '1.5'.</p>\n+     * \n+     * @return the name, not null\n+     */\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/lang3/JavaVersionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/JavaVersionTest.java\n  */\n package org.apache.commons.lang3;\n \n-import static org.apache.commons.lang3.JavaVersion.*;\n-\n+import static org.apache.commons.lang3.JavaVersion.JAVA_0_9;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_1;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_2;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_3;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_4;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_5;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_6;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_7;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_1_8;\n+import static org.apache.commons.lang3.JavaVersion.get;\n+import static org.apache.commons.lang3.JavaVersion.getJavaVersion;\n import junit.framework.TestCase;\n \n /**\n         assertFalse(\"0.9 at least 1.6 passed\", JAVA_0_9.atLeast(JAVA_1_6));\n     }\n \n+    public void testToString() {\n+        assertEquals(\"1.2\", JAVA_1_2.toString());\n+    }\n+\n }", "timestamp": 1299249245, "metainfo": ""}