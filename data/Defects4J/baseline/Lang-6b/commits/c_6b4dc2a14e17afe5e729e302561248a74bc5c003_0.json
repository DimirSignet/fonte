{"sha": "6b4dc2a14e17afe5e729e302561248a74bc5c003", "log": "Per David M. Sledge's patch to LANG-599, added support to ClassUtils.getClass(String) to support inner classes being separated by '.' as well as the official '$'  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n     // ----------------------------------------------------------------------\n     /**\n      * Returns the class represented by <code>className</code> using the\n-     * <code>classLoader</code>.  This implementation supports names like\n-     * \"<code>java.lang.String[]</code>\" as well as \"<code>[Ljava.lang.String;</code>\".\n+     * <code>classLoader</code>.  This implementation supports the syntaxes\n+     * \"<code>java.util.Map.Entry[]</code>\", \"<code>java.util.Map$Entry[]</code>\",\n+     * \"<code>[Ljava.util.Map.Entry;</code>\", and \"<code>[Ljava.util.Map$Entry;</code>\".\n      *\n      * @param classLoader  the class loader to use to load the class\n      * @param className  the class name\n      */\n     public static Class<?> getClass(\n             ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {\n-        Class<?> clazz;\n-        if (abbreviationMap.containsKey(className)) {\n-            String clsName = \"[\" + abbreviationMap.get(className);\n-            clazz = Class.forName(clsName, initialize, classLoader).getComponentType();\n-        } else {\n-            clazz = Class.forName(toCanonicalName(className), initialize, classLoader);\n-        }\n-        return clazz;\n+        try {\n+            Class<?> clazz;\n+            if (abbreviationMap.containsKey(className)) {\n+                String clsName = \"[\" + abbreviationMap.get(className);\n+                clazz = Class.forName(clsName, initialize, classLoader).getComponentType();\n+            } else {\n+                clazz = Class.forName(toCanonicalName(className), initialize, classLoader);\n+            }\n+            return clazz;\n+        } catch (ClassNotFoundException ex) {\n+            // allow path separators (.) as inner class name separators\n+            int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n+\n+            if (lastDotIndex != -1) {\n+                try {\n+                    return getClass(classLoader, className.substring(0, lastDotIndex) +\n+                            INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1),\n+                            initialize);\n+                } catch (ClassNotFoundException ex2) {\n+                }\n+            }\n+\n+            throw ex;\n+        }\n     }\n \n     /**\n      * Returns the (initialized) class represented by <code>className</code>\n-     * using the <code>classLoader</code>.  This implementation supports names\n-     * like \"<code>java.lang.String[]</code>\" as well as\n-     * \"<code>[Ljava.lang.String;</code>\".\n+     * using the <code>classLoader</code>.  This implementation supports\n+     * the syntaxes \"<code>java.util.Map.Entry[]</code>\",\n+     * \"<code>java.util.Map$Entry[]</code>\", \"<code>[Ljava.util.Map.Entry;</code>\",\n+     * and \"<code>[Ljava.util.Map$Entry;</code>\".\n      *\n      * @param classLoader  the class loader to use to load the class\n      * @param className  the class name\n     /**\n      * Returns the (initialized) class represented by <code>className</code>\n      * using the current thread's context class loader. This implementation\n-     * supports names like \"<code>java.lang.String[]</code>\" as well as\n-     * \"<code>[Ljava.lang.String;</code>\".\n+     * supports the syntaxes \"<code>java.util.Map.Entry[]</code>\",\n+     * \"<code>java.util.Map$Entry[]</code>\", \"<code>[Ljava.util.Map.Entry;</code>\",\n+     * and \"<code>[Ljava.util.Map$Entry;</code>\".\n      *\n      * @param className  the class name\n      * @return the class represented by <code>className</code> using the current thread's context class loader\n \n     /**\n      * Returns the class represented by <code>className</code> using the\n-     * current thread's context class loader. This implementation supports\n-     * names like \"<code>java.lang.String[]</code>\" as well as\n-     * \"<code>[Ljava.lang.String;</code>\".\n+     * current thread's context class loader. This implementation supports the\n+     * syntaxes \"<code>java.util.Map.Entry[]</code>\", \"<code>java.util.Map$Entry[]</code>\",\n+     * \"<code>[Ljava.util.Map.Entry;</code>\", and \"<code>[Ljava.util.Map$Entry;</code>\".\n      *\n      * @param className  the class name\n      * @param initialize  whether the class must be initialized\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n     }\n \n     private static class Inner {\n+        private class DeeplyNested{}\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals( byte[].class, ClassUtils.getClass( \"byte[\\t\\t\\n\\r]   \" ) );\n     }\n \n+    public void testGetInnerClass() throws ClassNotFoundException {\n+        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested\" ) );\n+        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested\" ) );\n+        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested\" ) );\n+        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( \"org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested\" ) );\n+    }\n+\n     public void testGetClassByNormalNameArrays() throws ClassNotFoundException {\n         assertEquals( int[].class, ClassUtils.getClass( \"int[]\" ) );\n         assertEquals( long[].class, ClassUtils.getClass( \"long[]\" ) );\n         assertEquals( double[].class, ClassUtils.getClass( \"double[]\" ) );\n         assertEquals( boolean[].class, ClassUtils.getClass( \"boolean[]\" ) );\n         assertEquals( String[].class, ClassUtils.getClass( \"java.lang.String[]\" ) );\n+        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( \"java.util.Map.Entry[]\" ) );\n+        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( \"java.util.Map$Entry[]\" ) );\n+        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( \"[Ljava.util.Map.Entry;\" ) );\n+        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( \"[Ljava.util.Map$Entry;\" ) );\n     }\n \n     public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {", "timestamp": 1267779947, "metainfo": ""}