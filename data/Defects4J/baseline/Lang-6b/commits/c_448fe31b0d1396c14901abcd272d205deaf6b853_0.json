{"sha": "448fe31b0d1396c14901abcd272d205deaf6b853", "log": "Use internal Java's Number caches instead creating new objects:  - Use more efficient Integer cache: Use \"Integer.valueOf(int)\" instead of \"new Integer(int)\". - Use more efficient Long cache: Use \"Long.valueOf(int)\" instead of \"new Long(long)\". - Use more efficient Short cache: Use \"Short.valueOf(int)\" instead of \"new Short(short)\".  In Java version 1.6.0_24 (vendor: Sun Microsystems Inc.), Float and Double do not implement caches, but I've made the same changes for consistency and future proofing.  - Use \"Double.valueOf(int)\" instead of \"new Double(double)\". - Use \"Float.valueOf(int)\" instead of \"new Float(float)\".  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      * <p>Note, this method makes only sense to provide arguments of the same type so that the\n      * compiler can deduce the type of the array itself. While it is possible to select the\n      * type explicitly like in\n-     * <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), new Double(Math.PI))</code>,\n+     * <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))</code>,\n      * there is no real advantage when compared to\n-     * <code>new Number[] {Integer.valueOf(42), new Double(Math.PI)}</code>.</p>\n+     * <code>new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}</code>.</p>\n      *\n      * @param  <T>   the array's element type\n      * @param  items  the varargs array items, null allowed\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n      */\n     public static void isTrue(boolean expression, String message, double value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(String.format(message, new Double(value)));\n+            throw new IllegalArgumentException(String.format(message, Double.valueOf(value)));\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n     /** Reusable Byte constant for minus one. */\n     public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);\n     /** Reusable Double constant for zero. */\n-    public static final Double DOUBLE_ZERO = new Double(0.0d);\n+    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);\n     /** Reusable Double constant for one. */\n-    public static final Double DOUBLE_ONE = new Double(1.0d);\n+    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);\n     /** Reusable Double constant for minus one. */\n-    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n+    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);\n     /** Reusable Float constant for zero. */\n-    public static final Float FLOAT_ZERO = new Float(0.0f);\n+    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);\n     /** Reusable Float constant for one. */\n-    public static final Float FLOAT_ONE = new Float(1.0f);\n+    public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n     /** Reusable Float constant for minus one. */\n-    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n+    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n \n     /**\n      * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming.\n     // Byte.valueOf(String)\n     // Double.valueOf(String)\n     // Float.valueOf(String)\n-    // new Float(String)\n+    // Float.valueOf(String)\n     // Integer.valueOf(String,int radix)\n     // Integer.valueOf(String)\n     // Integer.decode(String)\n     // Integer.getInteger(String,int val)\n     // Integer.getInteger(String,Integer val)\n     // Integer.valueOf(String)\n-    // new Double(String)\n+    // Double.valueOf(String)\n     // new Byte(String)\n     // Long.valueOf(String)\n     // Long.getLong(String)\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java\n      * @return the value as a Double, never null\n      */\n     public Double getValue() {\n-        return new Double(this.value);\n+        return Double.valueOf(this.value);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java\n      * @return the value as a Float, never null\n      */\n     public Float getValue() {\n-        return new Float(this.value);\n+        return Float.valueOf(this.value);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n \n-        Number[] numberArray1 = new Number[]{Integer.valueOf(1), new Double(2)};\n-        newArray = ArrayUtils.add(numberArray1, new Float(3));\n-        assertTrue(Arrays.equals((new Number[]{Integer.valueOf(1), new Double(2), new Float(3)}), newArray));\n+        Number[] numberArray1 = new Number[]{Integer.valueOf(1), Double.valueOf(2)};\n+        newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));\n+        assertTrue(Arrays.equals((new Number[]{Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3)}), newArray));\n         assertEquals(Number.class, newArray.getClass().getComponentType());\n \n         numberArray1 = null;\n-        newArray = ArrayUtils.add(numberArray1, new Float(3));\n-        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n+        newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));\n+        assertTrue(Arrays.equals((new Float[]{Float.valueOf(3)}), newArray));\n         assertEquals(Float.class, newArray.getClass().getComponentType());\n     }\n     \n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n          \n          assertTrue(Arrays.equals(\n              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n-                 new Float(Float.MAX_VALUE), new Float(9999999)}))\n+             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), \n+                 Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n+             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          \n          assertTrue(Arrays.equals(\n              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n-                 new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n+             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), \n+                 Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1)));\n          \n          assertTrue(Arrays.equals(\n              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n-                 null, new Float(9999999)}, Float.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), \n+                 null, Float.valueOf(9999999)}, Float.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Float[] {\n-                    new Float(Float.MIN_VALUE),\n-                    new Float(Float.MAX_VALUE),\n-                    new Float(9999999)},\n+                    Float.valueOf(Float.MIN_VALUE),\n+                    Float.valueOf(Float.MAX_VALUE),\n+                    Float.valueOf(9999999)},\n             ArrayUtils.toObject(\n                 new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));\n     }\n          \n          assertTrue(Arrays.equals(\n              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n-                 new Double(Double.MAX_VALUE), new Double(9999999)}))\n+             ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE), \n+                 Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n+             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          \n          assertTrue(Arrays.equals(\n              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n-                 new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n+             ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE), \n+                 Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)},1)));\n          \n          assertTrue(Arrays.equals(\n              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n-                 null, new Double(9999999)}, Double.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE), \n+                 null, Double.valueOf(9999999)}, Double.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Double[] {\n-                    new Double(Double.MIN_VALUE),\n-                    new Double(Double.MAX_VALUE),\n-                    new Double(9999999)},\n+                    Double.valueOf(Double.MIN_VALUE),\n+                    Double.valueOf(Double.MAX_VALUE),\n+                    Double.valueOf(9999999)},\n             ArrayUtils.toObject(\n                 new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n     }\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n     @Test\n     public void testCreateNumber() {\n         // a lot of things can go wrong\n-        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n+        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n         assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n-        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n-        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n-        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n-        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n+        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n+        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n+        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n+        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n         assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n             + (Integer.MAX_VALUE + 1L)));\n         assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n         assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n-        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n+        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n         assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n         assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n         assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n-        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n-        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n-        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n-        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n+        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n+        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n+        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n+        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n         assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n         assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                 .createNumber(\"12345678901234567890L\"));\n                 .createNumber(\"10\" + Long.MAX_VALUE));\n \n         // LANG-521\n-        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n+        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n \n         // LANG-638\n         assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n \n     @Test\n     public void testCreateFloat() {\n-        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n+        assertEquals(\"createFloat(String) failed\", Float.valueOf(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n         assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n         this.testCreateFloatFailure(\"\");\n         this.testCreateFloatFailure(\" \");\n \n     @Test\n     public void testCreateDouble() {\n-        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n+        assertEquals(\"createDouble(String) failed\", Double.valueOf(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n         assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n         this.testCreateDoubleFailure(\"\");\n         this.testCreateDoubleFailure(\" \");\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n         \n         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);\n         \n-        assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);\n+        assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d);\n         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\n         \n         assertEquals(2d, new MutableDouble(\"2.0\").doubleValue(), 0.0001d);\n     public void testGetSet() {\n         final MutableDouble mutNum = new MutableDouble(0d);\n         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n-        assertEquals(new Double(0), new MutableDouble().getValue());\n+        assertEquals(Double.valueOf(0), new MutableDouble().getValue());\n         \n         mutNum.setValue(1);\n         assertEquals(1d, mutNum.doubleValue(), 0.0001d);\n-        assertEquals(new Double(1d), mutNum.getValue());\n+        assertEquals(Double.valueOf(1d), mutNum.getValue());\n         \n-        mutNum.setValue(new Double(2d));\n+        mutNum.setValue(Double.valueOf(2d));\n         assertEquals(2d, mutNum.doubleValue(), 0.0001d);\n-        assertEquals(new Double(2d), mutNum.getValue());\n+        assertEquals(Double.valueOf(2d), mutNum.getValue());\n         \n         mutNum.setValue(new MutableDouble(3d));\n         assertEquals(3d, mutNum.doubleValue(), 0.0001d);\n-        assertEquals(new Double(3d), mutNum.getValue());\n+        assertEquals(Double.valueOf(3d), mutNum.getValue());\n         try {\n             mutNum.setValue(null);\n             fail();\n         assertEquals(false, mutNumB.equals(mutNumC));\n         assertEquals(true, mutNumC.equals(mutNumC));\n         assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(new Double(0d)));\n+        assertEquals(false, mutNumA.equals(Double.valueOf(0d)));\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n         assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Double.valueOf(0d).hashCode());\n     }\n \n     public void testCompareTo() {\n     }\n \n     public void testToDouble() {\n-        assertEquals(new Double(0d), new MutableDouble(0d).toDouble());\n-        assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());\n+        assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble());\n+        assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble());\n     }\n \n     public void testIncrement() {\n \n     public void testAddValueObject() {\n         MutableDouble mutNum = new MutableDouble(1);\n-        mutNum.add(new Double(1.1d));\n+        mutNum.add(Double.valueOf(1.1d));\n         \n         assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n     }\n \n     public void testSubtractValueObject() {\n         MutableDouble mutNum = new MutableDouble(1);\n-        mutNum.subtract(new Double(0.9d));\n+        mutNum.subtract(Double.valueOf(0.9d));\n         \n         assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n     }\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n         \n         assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);\n         \n-        assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);\n+        assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f);\n         assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\n \n         assertEquals(2f, new MutableFloat(\"2.0\").floatValue(), 0.0001f);\n     public void testGetSet() {\n         final MutableFloat mutNum = new MutableFloat(0f);\n         assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n-        assertEquals(new Float(0), new MutableFloat().getValue());\n+        assertEquals(Float.valueOf(0), new MutableFloat().getValue());\n         \n         mutNum.setValue(1);\n         assertEquals(1f, mutNum.floatValue(), 0.0001f);\n-        assertEquals(new Float(1f), mutNum.getValue());\n+        assertEquals(Float.valueOf(1f), mutNum.getValue());\n         \n-        mutNum.setValue(new Float(2f));\n+        mutNum.setValue(Float.valueOf(2f));\n         assertEquals(2f, mutNum.floatValue(), 0.0001f);\n-        assertEquals(new Float(2f), mutNum.getValue());\n+        assertEquals(Float.valueOf(2f), mutNum.getValue());\n         \n         mutNum.setValue(new MutableFloat(3f));\n         assertEquals(3f, mutNum.floatValue(), 0.0001f);\n-        assertEquals(new Float(3f), mutNum.getValue());\n+        assertEquals(Float.valueOf(3f), mutNum.getValue());\n         try {\n             mutNum.setValue(null);\n             fail();\n         assertEquals(false, mutNumB.equals(mutNumC));\n         assertEquals(true, mutNumC.equals(mutNumC));\n         assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(new Float(0f)));\n+        assertEquals(false, mutNumA.equals(Float.valueOf(0f)));\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n         assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Float.valueOf(0f).hashCode());\n     }\n \n     public void testCompareTo() {\n     }\n \n     public void testToFloat() {\n-        assertEquals(new Float(0f), new MutableFloat(0f).toFloat());\n-        assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());\n+        assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat());\n+        assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat());\n     }\n \n     public void testIncrement() {\n \n     public void testAddValueObject() {\n         MutableFloat mutNum = new MutableFloat(1);\n-        mutNum.add(new Float(1.1f));\n+        mutNum.add(Float.valueOf(1.1f));\n         \n         assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n     }\n \n     public void testSubtractValueObject() {\n         MutableFloat mutNum = new MutableFloat(1);\n-        mutNum.subtract(new Float(0.9f));\n+        mutNum.subtract(Float.valueOf(0.9f));\n         \n         assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n     }\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n \n     public void testToString() {\n         assertEquals(\"HI\", new MutableObject<String>(\"HI\").toString());\n-        assertEquals(\"10.0\", new MutableObject<Double>(new Double(10)).toString());\n+        assertEquals(\"10.0\", new MutableObject<Double>(Double.valueOf(10)).toString());\n         assertEquals(\"null\", new MutableObject<Object>(null).toString());\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n     static final String SS = \"ss\";\n     static final Integer I0 = Integer.valueOf(0);\n     static final Integer I1 = Integer.valueOf(1);\n-    static final Double D0 = new Double(0.0);\n-    static final Double D1 = new Double(1.0);\n+    static final Double D0 = Double.valueOf(0.0);\n+    static final Double D1 = Double.valueOf(1.0);\n \n     private PublicChild publicChild;\n     private PubliclyShadowedChild publiclyShadowedChild;\n         }\n         field = parentClass.getDeclaredField(\"d\");\n         try {\n-            FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE));\n+            FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE));\n         } catch (IllegalAccessException e) {\n             // pass\n         }\n         FieldUtils.writeField(field, publicChild, Integer.valueOf(Integer.MAX_VALUE), true);\n         assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild));\n         field = parentClass.getDeclaredField(\"d\");\n-        FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);\n-        assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));\n+        FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE), true);\n+        assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild));\n     }\n \n     @Test\n             // pass\n         }\n         try {\n-            FieldUtils.writeField(publicChild, \"d\", new Double(1.0));\n+            FieldUtils.writeField(publicChild, \"d\", Double.valueOf(1.0));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\n         FieldUtils.writeField(publiclyShadowedChild, \"i\", Integer.valueOf(0));\n         assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, \"i\"));\n-        FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0));\n-        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\"));\n+        FieldUtils.writeField(publiclyShadowedChild, \"d\", Double.valueOf(0.0));\n+        assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\"));\n \n         FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\");\n         assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\n             // pass\n         }\n         try {\n-            FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(1.0));\n+            FieldUtils.writeField(privatelyShadowedChild, \"d\", Double.valueOf(1.0));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, \"b\", true));\n         FieldUtils.writeField(publicChild, \"i\", Integer.valueOf(1), true);\n         assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, \"i\", true));\n-        FieldUtils.writeField(publicChild, \"d\", new Double(1.0), true);\n-        assertEquals(new Double(1.0), FieldUtils.readField(publicChild, \"d\", true));\n+        FieldUtils.writeField(publicChild, \"d\", Double.valueOf(1.0), true);\n+        assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, \"d\", true));\n \n         FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\", true);\n         assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n         assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\n         FieldUtils.writeField(publiclyShadowedChild, \"i\", Integer.valueOf(0), true);\n         assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n-        FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n-        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n+        FieldUtils.writeField(publiclyShadowedChild, \"d\", Double.valueOf(0.0), true);\n+        assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n \n         FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\", true);\n         assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\n         assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\n         FieldUtils.writeField(privatelyShadowedChild, \"i\", Integer.valueOf(0), true);\n         assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n-        FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n-        assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n+        FieldUtils.writeField(privatelyShadowedChild, \"d\", Double.valueOf(0.0), true);\n+        assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n     }\n \n     @Test\n             // pass\n         }\n         try {\n-            FieldUtils.writeDeclaredField(publicChild, \"d\", new Double(1.0));\n+            FieldUtils.writeDeclaredField(publicChild, \"d\", Double.valueOf(1.0));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\n         FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", Integer.valueOf(0));\n         assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n-        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0));\n-        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", Double.valueOf(0.0));\n+        assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n \n         try {\n             FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\");\n             // pass\n         }\n         try {\n-            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(1.0));\n+            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", Double.valueOf(1.0));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n             // pass\n         }\n         try {\n-            FieldUtils.writeDeclaredField(publicChild, \"d\", new Double(1.0), true);\n+            FieldUtils.writeDeclaredField(publicChild, \"d\", Double.valueOf(1.0), true);\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\n         FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", Integer.valueOf(0), true);\n         assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n-        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n-        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", Double.valueOf(0.0), true);\n+        assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n \n         FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\", true);\n         assertEquals(\"S\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\n         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\n         FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", Integer.valueOf(0), true);\n         assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n-        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n-        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n+        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", Double.valueOf(0.0), true);\n+        assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n     }\n \n     @Test(expected=IllegalArgumentException.class)\n--- a/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n     public void testExtendedAndBuiltInFormats() {\n         Calendar cal = Calendar.getInstance();\n         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n-        Object[] args = new Object[] {\"John Doe\", cal.getTime(), new Double(\"12345.67\")};\n+        Object[] args = new Object[] {\"John Doe\", cal.getTime(), Double.valueOf(\"12345.67\")};\n         String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\n         String extendedPattern = \"Name: {0,upper} \";\n         String pattern = extendedPattern + builtinsPattern;\n //     */\n //    public void testExtendedAndBuiltInWithChoiceFormat() {\n //        String pattern = \"Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}\";\n-//        Object[] lowArgs  = new Object[] {Integer.valueOf(1), \"Low\",  new Double(\"1234.56\")};\n-//        Object[] highArgs = new Object[] {Integer.valueOf(2), \"High\", new Double(\"9876.54\")};\n+//        Object[] lowArgs  = new Object[] {Integer.valueOf(1), \"Low\",  Double.valueOf(\"1234.56\")};\n+//        Object[] highArgs = new Object[] {Integer.valueOf(2), \"High\", Double.valueOf(\"9876.54\")};\n //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n //        Locale[] testLocales = new Locale[availableLocales.length + 1];\n //        testLocales[0] = null;\n      * Test the built in choice format.\n      */\n     public void testBuiltInChoiceFormat() {\n-        Object[] values = new Number[] {Integer.valueOf(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n+        Object[] values = new Number[] {Integer.valueOf(1), Double.valueOf(\"2.2\"), Double.valueOf(\"1234.5\")};\n         String choicePattern = null;\n         Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n \n      * Test the built in number formats.\n      */\n     public void testBuiltInNumberFormat() {\n-        Object[] args = new Object[] {new Double(\"6543.21\")};\n+        Object[] args = new Object[] {Double.valueOf(\"6543.21\")};\n         Locale[] availableLocales = NumberFormat.getAvailableLocales();\n         checkBuiltInFormat(\"1: {0,number}\",            args, availableLocales);\n         checkBuiltInFormat(\"2: {0,number,integer}\",    args, availableLocales);", "timestamp": 1312379615, "metainfo": ""}