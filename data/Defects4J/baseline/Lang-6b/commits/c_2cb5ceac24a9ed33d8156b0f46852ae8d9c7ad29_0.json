{"sha": "2cb5ceac24a9ed33d8156b0f46852ae8d9c7ad29", "log": "[LANG-814] MethodUtils.invoke*(*, Object... args) variants cannot handle null values  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n         if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n-        int arguments = args.length;\n-        Class<?>[] parameterTypes = new Class[arguments];\n-        for (int i = 0; i < arguments; i++) {\n-            parameterTypes[i] = args[i].getClass();\n-        }\n+        Class<?>[] parameterTypes = ClassUtils.toClass(args);\n         return invokeMethod(object, methodName, args, parameterTypes);\n     }\n \n         if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n-        int arguments = args.length;\n-        Class<?>[] parameterTypes = new Class[arguments];\n-        for (int i = 0; i < arguments; i++) {\n-            parameterTypes[i] = args[i].getClass();\n-        }\n+        Class<?>[] parameterTypes = ClassUtils.toClass(args);\n         return invokeExactMethod(object, methodName, args, parameterTypes);\n     }\n \n         if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n-        int arguments = args.length;\n-        Class<?>[] parameterTypes = new Class[arguments];\n-        for (int i = 0; i < arguments; i++) {\n-            parameterTypes[i] = args[i].getClass();\n-        }\n+        Class<?>[] parameterTypes = ClassUtils.toClass(args);\n         return invokeStaticMethod(cls, methodName, args, parameterTypes);\n     }\n \n         if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n-        int arguments = args.length;\n-        Class<?>[] parameterTypes = new Class[arguments];\n-        for (int i = 0; i < arguments; i++) {\n-            parameterTypes[i] = args[i].getClass();\n-        }\n+        Class<?>[] parameterTypes = ClassUtils.toClass(args);\n         return invokeExactStaticMethod(cls, methodName, args, parameterTypes);\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n                 singletonArray(ChildObject.class), singletonArray(ChildInterface.class));\n     }\n \n+    @Test\n+    public void testNullArgument() {\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"oneParameter\",\n+                singletonArray(null), singletonArray(String.class));\n+    }\n+\n     private void expectMatchingAccessibleMethodParameterTypes(Class<?> cls,\n             String methodName, Class<?>[] requestTypes, Class<?>[] actualTypes) {\n         Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,", "timestamp": 1344014238, "metainfo": ""}