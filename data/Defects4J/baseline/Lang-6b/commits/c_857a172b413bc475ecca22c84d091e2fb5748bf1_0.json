{"sha": "857a172b413bc475ecca22c84d091e2fb5748bf1", "log": "applied javadoc cleanup patch from http://issues.apache.org/bugzilla/show_bug.cgi?id=35676 (did not apply the VariableFormatter javadoc path since this class is still being worked)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  * <p>Provides HTML and XML entity utilities.</p>\n  *\n  * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n- * @see <br/><a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n- * @see <br/><a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n- * @see <br/><a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n- * @see <br/><a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n+ * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n+ * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n+ * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n+ * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n  *\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n     }\n \n     /**\n-     * <p>Worker method for the {@link escapeJavaScript(String) method.</p>\n+     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n      * \n      * @param str String to escape values in, may be null\n      * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n     }\n \n     /**\n-     * <p>Worker method for the {@link escapeJavaScript(String) method.</p>\n+     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n      * \n      * @param out write to receieve the escaped string\n      * @param str String to escape values in, may be null\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * }\n  * </pre>\n  *\n- * <p>Alternatively, there is are {@link #reflectionCompare reflectionCompare} method that uses\n+ * <p>Alternatively, there is are {@link #reflectionCompare(Object, Object) reflectionCompare} method that uses\n  * reflection to determine the fields to append. Because fields can be private,\n  * <code>reflectionCompare</code> uses {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} to\n  * bypass normal access control checks. This will fail under a security manager,\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n      * @param type  the type to search for, subclasses match, null returns -1\n      * @param fromIndex  the (zero based) index of the starting position,\n      *  negative treated as zero, larger than chain size returns -1\n-     * @param subclass if <code>true</code>, compares with {@link Class.isAssignableFrom(Class)}, otherwise compares\n+     * @param subclass if <code>true</code>, compares with {@link Class#isAssignableFrom(Class)}, otherwise compares\n      * using references\n      * @return index of the <code>type</code> within throwables nested withing the specified <code>throwable</code>\n      */", "timestamp": 1120956258, "metainfo": ""}