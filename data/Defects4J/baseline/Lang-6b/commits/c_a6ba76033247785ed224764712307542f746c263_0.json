{"sha": "a6ba76033247785ed224764712307542f746c263", "log": "Use the active voice in Javadocs.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n import org.apache.commons.lang3.ClassUtils;\n \n /**\n- * <p> Utility reflection methods focused on methods, originally from Commons BeanUtils.\n+ * <p>Utility reflection methods focused on methods, originally from Commons BeanUtils.\n  * Differences from the BeanUtils version may be noted, especially where similar functionality\n  * already existed within Lang.\n  * </p>\n     }\n \n     /**\n-     * <p>Invoke a named method whose parameter type matches the object type.</p>\n+     * <p>Invokes a named method whose parameter type matches the object type.</p>\n      *\n      * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n      *\n      * via passing in wrapping classes. So, for example, a <code>Boolean</code> object\n      * would match a <code>boolean</code> primitive.</p>\n      *\n-     * <p> This is a convenient wrapper for\n+     * <p>This is a convenient wrapper for\n      * {@link #invokeMethod(Object object,String methodName, Object[] args, Class[] parameterTypes)}.\n      * </p>\n      *\n     }\n \n     /**\n-     * <p>Invoke a named method whose parameter type matches the object type.</p>\n+     * <p>Invokes a named method whose parameter type matches the object type.</p>\n      *\n      * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n      *\n     }\n \n     /**\n-     * <p>Invoke a method whose parameter types match exactly the object\n+     * <p>Invokes a method whose parameter types match exactly the object\n      * types.</p>\n      *\n-     * <p> This uses reflection to invoke the method obtained from a call to\n+     * <p>This uses reflection to invoke the method obtained from a call to\n      * <code>getAccessibleMethod()</code>.</p>\n      *\n      * @param object invoke method on this object\n     }\n \n     /**\n-     * <p>Invoke a method whose parameter types match exactly the parameter\n+     * <p>Invokes a method whose parameter types match exactly the parameter\n      * types given.</p>\n      *\n      * <p>This uses reflection to invoke the method obtained from a call to\n     }\n \n     /**\n-     * <p>Invoke a static method whose parameter types match exactly the parameter\n+     * <p>Invokes a static method whose parameter types match exactly the parameter\n      * types given.</p>\n      *\n      * <p>This uses reflection to invoke the method obtained from a call to\n     }\n \n     /**\n-     * <p>Invoke a named static method whose parameter type matches the object type.</p>\n+     * <p>Invokes a named static method whose parameter type matches the object type.</p>\n      *\n      * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n      *\n      * via passing in wrapping classes. So, for example, a <code>Boolean</code> class\n      * would match a <code>boolean</code> primitive.</p>\n      *\n-     * <p> This is a convenient wrapper for\n+     * <p>This is a convenient wrapper for\n      * {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args,Class[] parameterTypes)}.\n      * </p>\n      *\n     }\n \n     /**\n-     * <p>Invoke a named static method whose parameter type matches the object type.</p>\n+     * <p>Invokes a named static method whose parameter type matches the object type.</p>\n      *\n      * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>\n      *\n     }\n \n     /**\n-     * <p>Invoke a static method whose parameter types match exactly the object\n+     * <p>Invokes a static method whose parameter types match exactly the object\n      * types.</p>\n      *\n-     * <p> This uses reflection to invoke the method obtained from a call to\n+     * <p>This uses reflection to invoke the method obtained from a call to\n      * {@link #getAccessibleMethod(Class, String, Class[])}.</p>\n      *\n      * @param cls invoke static method on this class\n     }\n \n     /**\n-     * <p>Return an accessible method (that is, one that can be invoked via\n+     * <p>Returns an accessible method (that is, one that can be invoked via\n      * reflection) with given name and parameters.  If no such method\n      * can be found, return <code>null</code>.\n      * This is just a convenient wrapper for\n     }\n \n     /**\n-     * <p>Return an accessible method (that is, one that can be invoked via\n+     * <p>Returns an accessible method (that is, one that can be invoked via\n      * reflection) that implements the specified Method.  If no such method\n      * can be found, return <code>null</code>.</p>\n      *\n     }\n \n     /**\n-     * <p>Return an accessible method (that is, one that can be invoked via\n+     * <p>Returns an accessible method (that is, one that can be invoked via\n      * reflection) by scanning through the superclasses. If no such method\n      * can be found, return <code>null</code>.</p>\n      *\n     }\n \n     /**\n-     * <p>Return an accessible method (that is, one that can be invoked via\n+     * <p>Returns an accessible method (that is, one that can be invoked via\n      * reflection) that implements the specified method, by scanning through\n      * all implemented interfaces and subinterfaces.  If no such method\n      * can be found, return <code>null</code>.</p>\n      *\n-     * <p> There isn't any good reason why this method must be private.\n+     * <p>There isn't any good reason why this method must be private.\n      * It is because there doesn't seem any reason why other classes should\n      * call this rather than the higher level methods.</p>\n      *\n     }\n \n     /**\n-     * <p>Find an accessible method that matches the given name and has compatible parameters.\n+     * <p>Finds an accessible method that matches the given name and has compatible parameters.\n      * Compatible parameters mean that every method parameter is assignable from \n      * the given parameters.\n      * In other words, it finds a method with the given name ", "timestamp": 1309760805, "metainfo": ""}