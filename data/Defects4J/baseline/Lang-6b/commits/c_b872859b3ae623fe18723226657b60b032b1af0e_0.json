{"sha": "b872859b3ae623fe18723226657b60b032b1af0e", "log": "LANG-668 - change ObjectUtils min() & max() functions to use varargs rather than just two parameters  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n     /**\n      * Null safe comparison of Comparables.\n      * \n-     * @param c1  the first comparable, may be null\n-     * @param c2  the second comparable, may be null\n+     * @param values the set of comparable values, may be null\n      * @return\n      *  <ul>\n-     *   <li>If both objects are non-null and unequal, the lesser object.\n-     *   <li>If both objects are non-null and equal, c1.\n-     *   <li>If one of the comparables is null, the non-null object.\n-     *   <li>If both the comparables are null, null is returned.\n+     *   <li>If any objects are non-null and unequal, the lesser object.\n+     *   <li>If all objects are non-null and equal, the first.\n+     *   <li>If any of the comparables are null, the lesser of the non-null object.\n+     *   <li>If all the comparables are null, null is returned.\n      *  </ul>\n      */\n-    public static <T extends Comparable<? super T>> T min(T c1, T c2) {\n-        return compare(c1, c2, true) <= 0 ? c1 : c2;\n+    public static <T extends Comparable<? super T>> T min(T... values) {\n+        T result = null;\n+        if (values != null) {\n+            for (T value : values) {\n+                if (compare(value, result, true) < 0) {\n+                    result = value;\n+                }\n+            }\n+        }\n+        return result;\n     }\n \n     /**\n      * Null safe comparison of Comparables.\n      * \n-     * @param c1  the first comparable, may be null\n-     * @param c2  the second comparable, may be null\n+     * @param values the set of comparable values, may be null\n      * @return\n      *  <ul>\n-     *   <li>If both objects are non-null and unequal, the greater object.\n-     *   <li>If both objects are non-null and equal, c1.\n-     *   <li>If one of the comparables is null, the non-null object.\n-     *   <li>If both the comparables are null, null is returned.\n+     *   <li>If any objects are non-null and unequal, the greater object.\n+     *   <li>If all objects are non-null and equal, the first.\n+     *   <li>If any of the comparables are null, the greater of the non-null object.\n+     *   <li>If all the comparables are null, null is returned.\n      *  </ul>\n      */\n-    public static <T extends Comparable<? super T>> T max(T c1, T c2) {\n-        return compare(c1, c2, false) >= 0 ? c1 : c2;\n+    public static <T extends Comparable<? super T>> T max(T... values) {\n+        T result = null;\n+        if (values != null) {\n+            for (T value : values) {\n+                if (compare(value, result, false) > 0) {\n+                    result = value;\n+                }\n+            }\n+        }\n+        return result;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n         Calendar calendar = Calendar.getInstance();\n         Date nonNullComparable1 = calendar.getTime();\n         Date nonNullComparable2 = calendar.getTime();\n+        String[] nullAray = null;\n         \n         calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n         Date minComparable = calendar.getTime();\n         \n         assertNotSame( nonNullComparable1, nonNullComparable2 );\n         \n+        assertNull(ObjectUtils.max( (String) null ) );\n+        assertNull(ObjectUtils.max( nullAray ) );\n         assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );\n         assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1, null ) );\n         assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );\n         assertSame( nonNullComparable2, ObjectUtils.max( nonNullComparable2, nonNullComparable1 ) );\n         assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );\n         assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( null, minComparable, null, nonNullComparable1 ) );\n \n         assertNull( ObjectUtils.max((String)null, (String)null) );\n     }\n         Calendar calendar = Calendar.getInstance();\n         Date nonNullComparable1 = calendar.getTime();\n         Date nonNullComparable2 = calendar.getTime();\n+        String[] nullAray = null;\n         \n         calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n         Date minComparable = calendar.getTime();\n         \n         assertNotSame( nonNullComparable1, nonNullComparable2 );\n         \n+        assertNull(ObjectUtils.min( (String) null ) );\n+        assertNull(ObjectUtils.min( nullAray ) );\n         assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );\n         assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );\n+        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1, null ) );\n         assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );\n         assertSame( nonNullComparable2, ObjectUtils.min( nonNullComparable2, nonNullComparable1 ) );\n         assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );\n         assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );\n+        assertSame( minComparable, ObjectUtils.min( null, nonNullComparable1, null, minComparable ) );\n \n         assertNull( ObjectUtils.min((String)null, (String)null) );\n     }", "timestamp": 1294359199, "metainfo": ""}