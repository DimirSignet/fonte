{"sha": "daf77e8e67e424962440286bbc5d9a13f5045a9c", "log": "[LANG-825] Create StrBuilder APIs similar to String.format(String, Object...)  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n     }\n \n     /**\n+     * Calls {@link String#format(String, Object...)} and appends the result.\n+     *\n+     * @param format the format string\n+     * @param objs the objects to use in the format string\n+     * @return {@code this} to enable chaining\n+     * @see String#format(String, Object...)\n+     * @since 3.2\n+     */\n+    public StrBuilder append(String format, Object... objs) {\n+        return append(String.format(format, objs));\n+    }\n+\n+    /**\n      * Appends a string buffer to this string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n      */\n     public StrBuilder appendln(String str, int startIndex, int length) {\n         return append(str, startIndex, length).appendNewLine();\n+    }\n+\n+    /**\n+     * Calls {@link String#format(String, Object...)} and appends the result.\n+     *\n+     * @param format the format string\n+     * @param objs the objects to use in the format string\n+     * @return {@code this} to enable chaining\n+     * @see String#format(String, Object...)\n+     * @since 3.2\n+     */\n+    public StrBuilder appendln(String format, Object... objs) {\n+        return append(format, objs).appendNewLine();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n \n     //-----------------------------------------------------------------------\n     @Test\n+    public void testAppendln_FormattedString() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(String str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"Hello %s\", \"Alice\");\n+        assertEquals(\"Hello Alice\" + SEP, sb.toString());\n+        assertEquals(2, count[0]);  // appendNewLine() calls append(String)\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_Object() {\n         StrBuilder sb = new StrBuilder();\n         sb.appendln((Object) null);\n         assertEquals(10, sb.length());\n         //            1234567890\n         assertEquals(\"123-------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n+    public void testAppend_FormattedString() {\n+        StrBuilder sb;\n+\n+        sb = new StrBuilder();\n+        sb.append(\"Hi\", (Object[]) null);\n+        assertEquals(\"Hi\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(\"Hi\", \"Alice\");\n+        assertEquals(\"Hi\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(\"Hi %s\", \"Alice\");\n+        assertEquals(\"Hi Alice\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(\"Hi %s %,d\", \"Alice\", 5000);\n+        assertEquals(\"Hi Alice 5,000\", sb.toString());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1348405287, "metainfo": ""}