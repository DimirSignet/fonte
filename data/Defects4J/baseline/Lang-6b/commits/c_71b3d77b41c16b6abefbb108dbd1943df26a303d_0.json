{"sha": "71b3d77b41c16b6abefbb108dbd1943df26a303d", "log": "Rather than writing specific translators to handle unicode between different ranges, UnicodeEscaper now supports a range filter. cf LANG-505  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/translate/UnicodeEscaper.java\n+++ b/src/java/org/apache/commons/lang/text/translate/UnicodeEscaper.java\n  */\n public class UnicodeEscaper extends CodePointTranslator {\n \n+    private int below = 0;\n+    private int above = Integer.MAX_VALUE;\n+    private boolean between = true;\n+\n+    public static UnicodeEscaper below(int codepoint) {\n+        return between(0, codepoint);\n+    }\n+\n+    public static UnicodeEscaper above(int codepoint) {\n+        return between(codepoint, Integer.MAX_VALUE);\n+    }\n+\n+    public static UnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {\n+        UnicodeEscaper escaper = new UnicodeEscaper();\n+        escaper.above = codepointHigh;\n+        escaper.below = codepointLow;\n+        escaper.between = false;\n+        return escaper;\n+    }\n+\n+    public static UnicodeEscaper between(int codepointLow, int codepointHigh) {\n+        UnicodeEscaper escaper = new UnicodeEscaper();\n+        escaper.above = codepointHigh;\n+        escaper.below = codepointLow;\n+        return escaper;\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n     public boolean translate(int codepoint, Writer out) throws IOException {\n+        if(between) {\n+            if (codepoint < below || codepoint > above) {\n+                return false;\n+            }\n+        } else {\n+            if (codepoint >= below && codepoint <= above) {\n+                return false;\n+            }\n+        }\n+\n         if (codepoint > 0xffff) {\n             // TODO: Figure out what to do. Output as two unicodes?\n             //       Does this make this a Java-specific output class?", "timestamp": 1245902083, "metainfo": ""}