{"sha": "4eea16efaef2bc8c61fc0a83b472e8bdce33ac25", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n /**\n  * <p> Utility reflection methods focussed on constructors, modelled after\n  * {@link MethodUtils}. </p>\n- * \n+ *\n  * <h3>Known Limitations</h3> <h4>Accessing Public Constructors In A Default\n  * Access Superclass</h4> <p>There is an issue when invoking public constructors\n  * contained in a default access superclass. Reflection locates these\n  * constructors fine and correctly assigns them as public. However, an\n  * <code>IllegalAccessException</code> is thrown if the constructors is\n  * invoked.</p>\n- * \n+ *\n  * <p><code>ConstructorUtils</code> contains a workaround for this situation. It\n  * will attempt to call <code>setAccessible</code> on this constructor. If this\n  * call succeeds, then the method can be invoked as normal. This call will only\n  * succeed when the application has sufficient security privilages. If this call\n  * fails then a warning will be logged and the method may fail.</p>\n- * \n+ *\n  * @author Apache Software Foundation\n  * @author Craig R. McClanahan\n  * @author Ralph Schaer\n      * <p>ConstructorUtils instances should NOT be constructed in standard\n      * programming. Instead, the class should be used as\n      * <code>ConstructorUtils.invokeConstructor(cls, args)</code>.</p>\n-     * \n+     *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n      */\n      * the actual values of <code>args</code>. See\n      * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n      * details.</p>\n-     * \n+     *\n      * <p>The signatures should be assignment compatible.</p>\n-     * \n+     *\n+     * @param <T> the type to be constructed\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @return new instance of <code>klazz</code>\n-     * \n+     *\n      * @throws NoSuchMethodException If the constructor cannot be found\n      * @throws IllegalAccessException If an error occurs accessing the\n      * constructor\n      * @throws InvocationTargetException If an error occurs invoking the\n      * constructor\n      * @throws InstantiationException If an error occurs instantiating the class\n-     * \n+     *\n      * @see #invokeConstructor(java.lang.Class, java.lang.Object[],\n      * java.lang.Class[])\n      */\n      * <p>Returns new instance of <code>klazz</code> created using constructor\n      * with signature <code>parameterTypes</code> and actual arguments\n      * <code>args</code>.</p>\n-     * \n+     *\n      * <p>The signatures should be assignment compatible.</p>\n-     * \n+     *\n+     * @param <T> the type to be constructed\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @param parameterTypes parameter types array\n      * @return new instance of <code>klazz</code>\n-     * \n+     *\n      * @throws NoSuchMethodException if matching constructor cannot be found\n      * @throws IllegalAccessException thrown on the constructor's invocation\n      * @throws InvocationTargetException thrown on the constructor's invocation\n      * the actual values of <code>args</code>. See\n      * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n      * details.</p>\n-     * \n+     *\n      * <p>The signatures should match exactly.</p>\n-     * \n+     *\n+     * @param <T> the type to be constructed\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @return new instance of <code>klazz</code>\n-     * \n+     *\n      * @throws NoSuchMethodException If the constructor cannot be found\n      * @throws IllegalAccessException If an error occurs accessing the\n      * constructor\n      * @throws InvocationTargetException If an error occurs invoking the\n      * constructor\n      * @throws InstantiationException If an error occurs instantiating the class\n-     * \n+     *\n      * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[],\n      * java.lang.Class[])\n      */\n      * <p>Returns new instance of <code>klazz</code> created using constructor\n      * with signature <code>parameterTypes</code> and actual arguments\n      * <code>args</code>.</p>\n-     * \n+     *\n      * <p>The signatures should match exactly.</p>\n-     * \n+     *\n+     * @param <T> the type to be constructed\n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @param parameterTypes parameter types array\n      * @return new instance of <code>klazz</code>\n-     * \n+     *\n      * @throws NoSuchMethodException if matching constructor cannot be found\n      * @throws IllegalAccessException thrown on the constructor's invocation\n      * @throws InvocationTargetException thrown on the constructor's invocation\n \n     /**\n      * Returns a constructor given a class and signature.\n+     *\n+     * @param <T> the type to be constructed\n      * @param cls the class to be constructed\n      * @param parameterTypes the parameter array\n      * @return null if matching accessible constructor can not be found\n \n     /**\n      * Returns accessible version of the given constructor.\n+     *\n+     * @param <T> the type to be constructed\n      * @param ctor prototype constructor object.\n      * @return <code>null</code> if accessible constructor can not be found.\n      * @see java.lang.SecurityManager\n      * parameters mean that every method parameter is assignable from the given\n      * parameters. In other words, it finds constructor that will take the\n      * parameters given.</p>\n-     * \n+     *\n      * <p>First it checks if there is constructor matching the exact signature.\n      * If no such, all the constructors of the class are tested if their\n      * signatures are assignment compatible with the parameter types. The first\n      * matching constructor is returned.</p>\n-     * \n+     *\n+     * @param <T> the type to be constructed\n      * @param cls find constructor for this class\n      * @param parameterTypes find method with compatible parameters\n      * @return a valid Constructor object. If there's no matching constructor,\n                             || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result\n                                     .getParameterTypes(), parameterTypes) < 0) {\n                         // temporary variable for annotation, see comment above (1)\n-                        @SuppressWarnings(\"unchecked\") \n+                        @SuppressWarnings(\"unchecked\")\n                         Constructor<T> constructor = (Constructor<T>)ctor;\n                         result = constructor;\n                     }", "timestamp": 1300310653, "metainfo": ""}