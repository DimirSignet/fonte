{"sha": "a5ff053fd8444556c869f9c8cbcd1f55ae48f924", "log": "improve documentation  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n import org.apache.commons.lang.Validate;\n \n /**\n- * Extends <code>MessageFormat</code> to allow pluggable/additional formatting\n- * options for embedded format elements; requires elaboration.\n+ * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n+ * options for embedded format elements.  Client code should specify a registry\n+ * of <code>FormatFactory</code> instances associated with <code>String</code>\n+ * format names.  This registry will be consulted when the format elements are \n+ * parsed from the message pattern.  In this way custom patterns can be specified,\n+ * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n+ * at the format and/or format style level (@see MessageFormat).  A \"format element\"\n+ * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n+ * <pre>\n+ * <code>{</code\n+ * <i>argument-number</i>\n+ * <b>(</b>\n+ *     <code>,</code><i>format-name</i>\n+ *     <b>(</b><code>,</code><i>format-style</i><b>)?</b>\n+ * <b>)?</b>\n+ * <code>}</code>\n+ * </pre>\n  *\n- * Note that the mutator methods for the replacement Formats are to be considered\n- * unnecessary and thus have been disabled (UnsupportedOperationException).\n+ * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n+ * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n+ * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n+ * matching <i>format-name</i> and <i>format-style</i> is requested from\n+ * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n+ * found is used for this format element.\n+ *\n+ * <p>NOTICE: The various subformat mutator methods are considered unnecessary; they exist on the parent\n+ * class to allow the type of customization which it is the job of this class to provide in\n+ * a configurable fashion.  These methods have thus been disabled and will throw\n+ * <code>UnsupportedOperationException</code>s if called.</p>\n  * \n  * @author Matt Benson\n  * @author Niall Pemberton\n \n     /**\n      * {@inheritDoc}\n-     * UNSUPPORTED\n+     * @throws UnsupportedOperationException\n      */\n     public void setFormat(int formatElementIndex, Format newFormat) {\n         throw new UnsupportedOperationException();\n \n     /**\n      * {@inheritDoc}\n-     * UNSUPPORTED\n+     * @throws UnsupportedOperationException\n      */\n     public void setFormatByArgumentIndex(int argumentIndex, Format newFormat) {\n         throw new UnsupportedOperationException();\n \n     /**\n      * {@inheritDoc}\n-     * UNSUPPORTED\n+     * @throws UnsupportedOperationException\n      */\n     public void setFormats(Format[] newFormats) {\n         throw new UnsupportedOperationException();\n \n     /**\n      * {@inheritDoc}\n-     * UNSUPPORTED\n+     * @throws UnsupportedOperationException\n      */\n     public void setFormatsByArgumentIndex(Format[] newFormats) {\n         throw new UnsupportedOperationException();\n--- a/src/java/org/apache/commons/lang/text/FormatFactory.java\n+++ b/src/java/org/apache/commons/lang/text/FormatFactory.java\n      * Create or retrieve a format instance.\n      *\n      * @param name The format type name\n-     * @param arguments Arguments used to create the format instance\n+     * @param arguments Arguments used to create the format instance. This allows the\n+     *                  <code>FormatFactory</code> to implement the \"format style\"\n+     *                  concept from <code>java.text.MessageFormat</code>.\n      * @param locale The locale, may be null\n      * @return The format instance\n      */", "timestamp": 1204040215, "metainfo": ""}