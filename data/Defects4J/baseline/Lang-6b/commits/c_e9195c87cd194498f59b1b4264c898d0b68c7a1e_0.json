{"sha": "e9195c87cd194498f59b1b4264c898d0b68c7a1e", "log": "Improving error checking logic and adding test cases to verify.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n  */\n \n package org.apache.commons.lang3.event;\n+\n+import org.apache.commons.lang3.Validate;\n \n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n  * </pre>\n  *\n  * @param <L> The event listener type\n+ *\n+ * @since 3.0\n  */\n public class EventListenerSupport<L>\n {\n      */\n     public EventListenerSupport(Class<L> listenerInterface, ClassLoader classLoader)\n     {\n+        Validate.notNull(listenerInterface, \"Listener interface cannot be null.\");\n+        Validate.notNull(classLoader, \"ClassLoader cannot be null.\");\n+        Validate.isTrue(listenerInterface.isInterface(), \"Class {0} is not an interface\", listenerInterface.getName());\n         proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, new Class[]{listenerInterface},\n                 new ProxyInvocationHandler()));\n     }\n      */\n     public void addListener(L listener)\n     {\n+        Validate.notNull(listener, \"Listener object cannot be null.\");\n         listeners.add(0, listener);\n     }\n \n      */\n     public void removeListener(L listener)\n     {\n+        Validate.notNull(listener, \"Listener object cannot be null.\");\n         listeners.remove(listener);\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n         assertSame(calledListeners.get(1), listener2);\n     }\n \n+    public void testCreateWithNonInterfaceParameter()\n+    {\n+        try\n+        {\n+            EventListenerSupport.create(String.class);\n+            fail(\"Should not be able to create using non-interface class.\");\n+        }\n+        catch(IllegalArgumentException e)\n+        {\n+            \n+        }\n+    }\n+\n+    public void testCreateWithNullParameter()\n+    {\n+        try\n+        {\n+            EventListenerSupport.create(null);\n+            fail(\"Should not be able to create using null class.\");\n+        }\n+        catch(NullPointerException e)\n+        {\n+\n+        }\n+    }\n+    \n     public void testRemoveListenerDuringEvent()\n     {\n         final EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);", "timestamp": 1279825758, "metainfo": ""}