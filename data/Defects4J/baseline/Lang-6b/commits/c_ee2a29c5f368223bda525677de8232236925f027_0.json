{"sha": "ee2a29c5f368223bda525677de8232236925f027", "log": "[LANG-798] Use generics in SerializationUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n      * @throws IllegalArgumentException if {@code inputStream} is {@code null}\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n-    public static Object deserialize(InputStream inputStream) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T deserialize(InputStream inputStream) {\n         if (inputStream == null) {\n             throw new IllegalArgumentException(\"The InputStream must not be null\");\n         }\n         try {\n             // stream closed in the finally\n             in = new ObjectInputStream(inputStream);\n-            return in.readObject();\n+            return (T) in.readObject();\n \n         } catch (ClassNotFoundException ex) {\n             throw new SerializationException(ex);\n      * @throws IllegalArgumentException if {@code objectData} is {@code null}\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n-    public static Object deserialize(byte[] objectData) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n-        ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n-        return deserialize(bais);\n+        return (T) deserialize(new ByteArrayInputStream(objectData));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n         exceptionContext.setContextValue(\"test Poorly written obj\", \"serializable replacement\");\n         \n         @SuppressWarnings(\"unchecked\")\n-        T clone = (T)SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext));\n+        T clone = SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext));\n         assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null));\n     }\n }\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n     public void testLang303() throws ParseException {\n         DateParser parser = getInstance(YMD_SLASH);\n         Calendar cal = Calendar.getInstance();\n-        cal.set(2004,11,31);\n+        cal.set(2004, 11, 31);\n \n         Date date = parser.parse(\"2004/11/31\");\n \n-        parser = (DateParser) SerializationUtils.deserialize( SerializationUtils.serialize( (Serializable)parser ) );\n+        parser = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) parser));\n         assertEquals(date, parser.parse(\"2004/11/31\"));\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n     @Test\n     public void testLang303() {\n         Calendar cal = Calendar.getInstance();\n-        cal.set(2004,11,31);\n+        cal.set(2004, 11, 31);\n \n         DatePrinter format = getInstance(YYYY_MM_DD);\n         String output = format.format(cal);\n \n-        format = (DatePrinter) SerializationUtils.deserialize( SerializationUtils.serialize( (Serializable)format ) );\n+        format = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) format));\n         assertEquals(output, format.format(cal));\n     }\n ", "timestamp": 1333642177, "metainfo": ""}