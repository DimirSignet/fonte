{"sha": "5db61a56d8fb78f4161b60ca0dffec2df565f245", "log": "Removing WordUtils.abbreviate as it's already found in StringUtils.abbreviate. This was identified in LANG-673  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/WordUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/text/WordUtils.java\n         return false;\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Abbreviates a string nicely.\n-     * \n-     * This method searches for the first space after the lower limit and abbreviates\n-     * the String there. It will also append any String passed as a parameter\n-     * to the end of the String. The upper limit can be specified to forcibly\n-     * abbreviate a String.\n-     * \n-     * @param str         the string to be abbreviated. If null is passed, null is returned.\n-     *                    If the empty String is passed, the empty string is returned.\n-     * @param lower       the lower limit.\n-     * @param upper       the upper limit; specify -1 if no limit is desired.\n-     *                    If the upper limit is lower than the lower limit, it will be\n-     *                    adjusted to be the same as the lower limit.\n-     * @param appendToEnd String to be appended to the end of the abbreviated string.\n-     *                    This is appended ONLY if the string was indeed abbreviated.\n-     *                    The append does not count towards the lower or upper limits.\n-     * @return the abbreviated String.\n-     * @since 2.4\n-     */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n-\n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        if (lower > str.length()) {\n-            lower = str.length();    \n-        }\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n-\n-        StringBuilder result = new StringBuilder();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        }\n-        return result.toString();\n-    }\n-\n }\n--- a/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n         assertEquals(expect, WordUtils.swapCase(test));\n     }\n \n-    // -----------------------------------------------------------------------\n-    public void testAbbreviate() {\n-        // check null and empty are returned respectively\n-        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n-        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n-\n-        // test upper limit\n-        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n-        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n-        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n-        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n-        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n-\n-        // test upper limit + append string\n-        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n-        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n-        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n-        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n-        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n-\n-        // test lower value\n-        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n-        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n-        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n-        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n-        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n-\n-        // test lower value + append\n-        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n-        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n-        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n-        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n-\n-        // others\n-        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n-        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n-    }\n-\n }", "timestamp": 1295760766, "metainfo": ""}