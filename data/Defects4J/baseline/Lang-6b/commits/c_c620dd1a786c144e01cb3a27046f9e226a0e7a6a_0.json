{"sha": "c620dd1a786c144e01cb3a27046f9e226a0e7a6a", "log": "Avoid boolean boxing in asserts where possible  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n         assertNotNull(new BooleanUtils());\n         Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     @Test\n     public void test_isTrue_Boolean() {\n-        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));\n-        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));\n-        assertEquals(false, BooleanUtils.isTrue((Boolean) null));\n+        assertTrue(BooleanUtils.isTrue(Boolean.TRUE));\n+        assertFalse(BooleanUtils.isTrue(Boolean.FALSE));\n+        assertFalse(BooleanUtils.isTrue((Boolean) null));\n     }\n \n     @Test\n     public void test_isNotTrue_Boolean() {\n-        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));\n-        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));\n-        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));\n+        assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE));\n+        assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE));\n+        assertTrue(BooleanUtils.isNotTrue((Boolean) null));\n     }\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void test_isFalse_Boolean() {\n-        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));\n-        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));\n-        assertEquals(false, BooleanUtils.isFalse((Boolean) null));\n+        assertFalse(BooleanUtils.isFalse(Boolean.TRUE));\n+        assertTrue(BooleanUtils.isFalse(Boolean.FALSE));\n+        assertFalse(BooleanUtils.isFalse((Boolean) null));\n     }\n \n     @Test\n     public void test_isNotFalse_Boolean() {\n-        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));\n-        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));\n-        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));\n+        assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE));\n+        assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE));\n+        assertTrue(BooleanUtils.isNotFalse((Boolean) null));\n     }\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void test_toBoolean_Boolean() {\n-        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n-        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n-        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n+        assertTrue(BooleanUtils.toBoolean(Boolean.TRUE));\n+        assertFalse(BooleanUtils.toBoolean(Boolean.FALSE));\n+        assertFalse(BooleanUtils.toBoolean((Boolean) null));\n     }\n \n     @Test\n     public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n-        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n-        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n-        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n-        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n-        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n-        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n+        assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n+        assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n+        assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n+        assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n+        assertTrue(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n+        assertFalse(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n     }\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     @Test\n     public void test_toBoolean_int() {\n-        assertEquals(true, BooleanUtils.toBoolean(1));\n-        assertEquals(true, BooleanUtils.toBoolean(-1));\n-        assertEquals(false, BooleanUtils.toBoolean(0));\n+        assertTrue(BooleanUtils.toBoolean(1));\n+        assertTrue(BooleanUtils.toBoolean(-1));\n+        assertFalse(BooleanUtils.toBoolean(0));\n     }\n     \n     @Test\n     //-----------------------------------------------------------------------\n     @Test\n     public void test_toBoolean_int_int_int() {\n-        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n-        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n+        assertTrue(BooleanUtils.toBoolean(6, 6, 7));\n+        assertFalse(BooleanUtils.toBoolean(7, 6, 7));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n         Integer six = Integer.valueOf(6);\n         Integer seven = Integer.valueOf(7);\n \n-        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n-        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n-\n-        assertEquals(true, BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));\n-        assertEquals(false, BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));\n+        assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven));\n+        assertFalse(BooleanUtils.toBoolean((Integer) null, six, null));\n+\n+        assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));\n+        assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     //-----------------------------------------------------------------------\n     @Test\n     public void test_toBoolean_String() {\n-        assertEquals(false, BooleanUtils.toBoolean((String) null));\n-        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n-        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n-        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n-\n-        assertEquals(false, BooleanUtils.toBoolean(\"no\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"yoo\"));\n+        assertFalse(BooleanUtils.toBoolean((String) null));\n+        assertFalse(BooleanUtils.toBoolean(\"\"));\n+        assertFalse(BooleanUtils.toBoolean(\"off\"));\n+        assertFalse(BooleanUtils.toBoolean(\"oof\"));\n+        assertFalse(BooleanUtils.toBoolean(\"yep\"));\n+        assertFalse(BooleanUtils.toBoolean(\"trux\"));\n+        assertFalse(BooleanUtils.toBoolean(\"false\"));\n+        assertFalse(BooleanUtils.toBoolean(\"a\"));\n+        assertTrue(BooleanUtils.toBoolean(\"true\")); // interned handled differently\n+        assertTrue(BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n+        assertTrue(BooleanUtils.toBoolean(\"truE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"trUe\"));\n+        assertTrue(BooleanUtils.toBoolean(\"trUE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"tRue\"));\n+        assertTrue(BooleanUtils.toBoolean(\"tRuE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"tRUe\"));\n+        assertTrue(BooleanUtils.toBoolean(\"tRUE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TRUE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TRUe\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TRuE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TRue\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TrUE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TrUe\"));\n+        assertTrue(BooleanUtils.toBoolean(\"TruE\"));\n+        assertTrue(BooleanUtils.toBoolean(\"True\"));\n+        assertTrue(BooleanUtils.toBoolean(\"on\"));\n+        assertTrue(BooleanUtils.toBoolean(\"oN\"));\n+        assertTrue(BooleanUtils.toBoolean(\"On\"));\n+        assertTrue(BooleanUtils.toBoolean(\"ON\"));\n+        assertTrue(BooleanUtils.toBoolean(\"yes\"));\n+        assertTrue(BooleanUtils.toBoolean(\"yeS\"));\n+        assertTrue(BooleanUtils.toBoolean(\"yEs\"));\n+        assertTrue(BooleanUtils.toBoolean(\"yES\"));\n+        assertTrue(BooleanUtils.toBoolean(\"Yes\"));\n+        assertTrue(BooleanUtils.toBoolean(\"YeS\"));\n+        assertTrue(BooleanUtils.toBoolean(\"YEs\"));\n+        assertTrue(BooleanUtils.toBoolean(\"YES\"));\n+        assertFalse(BooleanUtils.toBoolean(\"yes?\"));\n+        assertFalse(BooleanUtils.toBoolean(\"tru\"));\n+\n+        assertFalse(BooleanUtils.toBoolean(\"no\"));\n+        assertFalse(BooleanUtils.toBoolean(\"off\"));\n+        assertFalse(BooleanUtils.toBoolean(\"yoo\"));\n     }\n \n     @Test\n     public void test_toBoolean_String_String_String() {\n-        assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n-        assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n-        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"Y\", new String(\"Y\"), new String(\"N\")));\n-        assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n-        assertEquals(false, BooleanUtils.toBoolean(\"N\", new String(\"Y\"), new String(\"N\")));\n-        assertEquals(true, BooleanUtils.toBoolean((String) null, null, null));\n-        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"Y\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"Y\", new String(\"Y\"), new String(\"Y\")));\n+        assertTrue(BooleanUtils.toBoolean((String) null, null, \"N\"));\n+        assertFalse(BooleanUtils.toBoolean((String) null, \"Y\", null));\n+        assertTrue(BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n+        assertTrue(BooleanUtils.toBoolean(\"Y\", new String(\"Y\"), new String(\"N\")));\n+        assertFalse(BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n+        assertFalse(BooleanUtils.toBoolean(\"N\", new String(\"Y\"), new String(\"N\")));\n+        assertTrue(BooleanUtils.toBoolean((String) null, null, null));\n+        assertTrue(BooleanUtils.toBoolean(\"Y\", \"Y\", \"Y\"));\n+        assertTrue(BooleanUtils.toBoolean(\"Y\", new String(\"Y\"), new String(\"Y\")));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n--- a/src/test/java/org/apache/commons/lang3/CharUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n         assertNotNull(new CharUtils());\n         Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));\n     }\n     \n     @Test\n     \n     @Test\n     public void testIsAscii_char() {\n-        assertEquals(true, CharUtils.isAscii('a'));\n-        assertEquals(true, CharUtils.isAscii('A'));\n-        assertEquals(true, CharUtils.isAscii('3'));\n-        assertEquals(true, CharUtils.isAscii('-'));\n-        assertEquals(true, CharUtils.isAscii('\\n'));\n-        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n+        assertTrue(CharUtils.isAscii('a'));\n+        assertTrue(CharUtils.isAscii('A'));\n+        assertTrue(CharUtils.isAscii('3'));\n+        assertTrue(CharUtils.isAscii('-'));\n+        assertTrue(CharUtils.isAscii('\\n'));\n+        assertFalse(CharUtils.isAscii(CHAR_COPY));\n        \n         for (int i = 0; i < 128; i++) {\n             if (i < 128) {\n-                assertEquals(true, CharUtils.isAscii((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAscii((char) i));\n+                assertTrue(CharUtils.isAscii((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAscii((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiPrintable_char() {\n-        assertEquals(true, CharUtils.isAsciiPrintable('a'));\n-        assertEquals(true, CharUtils.isAsciiPrintable('A'));\n-        assertEquals(true, CharUtils.isAsciiPrintable('3'));\n-        assertEquals(true, CharUtils.isAsciiPrintable('-'));\n-        assertEquals(false, CharUtils.isAsciiPrintable('\\n'));\n-        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n+        assertTrue(CharUtils.isAsciiPrintable('a'));\n+        assertTrue(CharUtils.isAsciiPrintable('A'));\n+        assertTrue(CharUtils.isAsciiPrintable('3'));\n+        assertTrue(CharUtils.isAsciiPrintable('-'));\n+        assertFalse(CharUtils.isAsciiPrintable('\\n'));\n+        assertFalse(CharUtils.isAscii(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if (i >= 32 && i <= 126) {\n-                assertEquals(true, CharUtils.isAsciiPrintable((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiPrintable((char) i));\n+                assertTrue(CharUtils.isAsciiPrintable((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiPrintable((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiControl_char() {\n-        assertEquals(false, CharUtils.isAsciiControl('a'));\n-        assertEquals(false, CharUtils.isAsciiControl('A'));\n-        assertEquals(false, CharUtils.isAsciiControl('3'));\n-        assertEquals(false, CharUtils.isAsciiControl('-'));\n-        assertEquals(true, CharUtils.isAsciiControl('\\n'));\n-        assertEquals(false, CharUtils.isAsciiControl(CHAR_COPY));\n+        assertFalse(CharUtils.isAsciiControl('a'));\n+        assertFalse(CharUtils.isAsciiControl('A'));\n+        assertFalse(CharUtils.isAsciiControl('3'));\n+        assertFalse(CharUtils.isAsciiControl('-'));\n+        assertTrue(CharUtils.isAsciiControl('\\n'));\n+        assertFalse(CharUtils.isAsciiControl(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if (i < 32 || i == 127) {\n-                assertEquals(true, CharUtils.isAsciiControl((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiControl((char) i));\n+                assertTrue(CharUtils.isAsciiControl((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiControl((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiAlpha_char() {\n-        assertEquals(true, CharUtils.isAsciiAlpha('a'));\n-        assertEquals(true, CharUtils.isAsciiAlpha('A'));\n-        assertEquals(false, CharUtils.isAsciiAlpha('3'));\n-        assertEquals(false, CharUtils.isAsciiAlpha('-'));\n-        assertEquals(false, CharUtils.isAsciiAlpha('\\n'));\n-        assertEquals(false, CharUtils.isAsciiAlpha(CHAR_COPY));\n+        assertTrue(CharUtils.isAsciiAlpha('a'));\n+        assertTrue(CharUtils.isAsciiAlpha('A'));\n+        assertFalse(CharUtils.isAsciiAlpha('3'));\n+        assertFalse(CharUtils.isAsciiAlpha('-'));\n+        assertFalse(CharUtils.isAsciiAlpha('\\n'));\n+        assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {\n-                assertEquals(true, CharUtils.isAsciiAlpha((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiAlpha((char) i));\n+                assertTrue(CharUtils.isAsciiAlpha((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiAlpha((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiAlphaUpper_char() {\n-        assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));\n-        assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));\n-        assertEquals(false, CharUtils.isAsciiAlphaUpper('3'));\n-        assertEquals(false, CharUtils.isAsciiAlphaUpper('-'));\n-        assertEquals(false, CharUtils.isAsciiAlphaUpper('\\n'));\n-        assertEquals(false, CharUtils.isAsciiAlphaUpper(CHAR_COPY));\n+        assertFalse(CharUtils.isAsciiAlphaUpper('a'));\n+        assertTrue(CharUtils.isAsciiAlphaUpper('A'));\n+        assertFalse(CharUtils.isAsciiAlphaUpper('3'));\n+        assertFalse(CharUtils.isAsciiAlphaUpper('-'));\n+        assertFalse(CharUtils.isAsciiAlphaUpper('\\n'));\n+        assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if (i >= 'A' && i <= 'Z') {\n-                assertEquals(true, CharUtils.isAsciiAlphaUpper((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiAlphaUpper((char) i));\n+                assertTrue(CharUtils.isAsciiAlphaUpper((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiAlphaUpper((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiAlphaLower_char() {\n-        assertEquals(true, CharUtils.isAsciiAlphaLower('a'));\n-        assertEquals(false, CharUtils.isAsciiAlphaLower('A'));\n-        assertEquals(false, CharUtils.isAsciiAlphaLower('3'));\n-        assertEquals(false, CharUtils.isAsciiAlphaLower('-'));\n-        assertEquals(false, CharUtils.isAsciiAlphaLower('\\n'));\n-        assertEquals(false, CharUtils.isAsciiAlphaLower(CHAR_COPY));\n+        assertTrue(CharUtils.isAsciiAlphaLower('a'));\n+        assertFalse(CharUtils.isAsciiAlphaLower('A'));\n+        assertFalse(CharUtils.isAsciiAlphaLower('3'));\n+        assertFalse(CharUtils.isAsciiAlphaLower('-'));\n+        assertFalse(CharUtils.isAsciiAlphaLower('\\n'));\n+        assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if (i >= 'a' && i <= 'z') {\n-                assertEquals(true, CharUtils.isAsciiAlphaLower((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiAlphaLower((char) i));\n+                assertTrue(CharUtils.isAsciiAlphaLower((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiAlphaLower((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiNumeric_char() {\n-        assertEquals(false, CharUtils.isAsciiNumeric('a'));\n-        assertEquals(false, CharUtils.isAsciiNumeric('A'));\n-        assertEquals(true, CharUtils.isAsciiNumeric('3'));\n-        assertEquals(false, CharUtils.isAsciiNumeric('-'));\n-        assertEquals(false, CharUtils.isAsciiNumeric('\\n'));\n-        assertEquals(false, CharUtils.isAsciiNumeric(CHAR_COPY));\n+        assertFalse(CharUtils.isAsciiNumeric('a'));\n+        assertFalse(CharUtils.isAsciiNumeric('A'));\n+        assertTrue(CharUtils.isAsciiNumeric('3'));\n+        assertFalse(CharUtils.isAsciiNumeric('-'));\n+        assertFalse(CharUtils.isAsciiNumeric('\\n'));\n+        assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if (i >= '0' && i <= '9') {\n-                assertEquals(true, CharUtils.isAsciiNumeric((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiNumeric((char) i));\n+                assertTrue(CharUtils.isAsciiNumeric((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiNumeric((char) i));\n             }\n         }\n     }\n     \n     @Test\n     public void testIsAsciiAlphanumeric_char() {\n-        assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));\n-        assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));\n-        assertEquals(true, CharUtils.isAsciiAlphanumeric('3'));\n-        assertEquals(false, CharUtils.isAsciiAlphanumeric('-'));\n-        assertEquals(false, CharUtils.isAsciiAlphanumeric('\\n'));\n-        assertEquals(false, CharUtils.isAsciiAlphanumeric(CHAR_COPY));\n+        assertTrue(CharUtils.isAsciiAlphanumeric('a'));\n+        assertTrue(CharUtils.isAsciiAlphanumeric('A'));\n+        assertTrue(CharUtils.isAsciiAlphanumeric('3'));\n+        assertFalse(CharUtils.isAsciiAlphanumeric('-'));\n+        assertFalse(CharUtils.isAsciiAlphanumeric('\\n'));\n+        assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY));\n        \n         for (int i = 0; i < 196; i++) {\n             if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {\n-                assertEquals(true, CharUtils.isAsciiAlphanumeric((char) i));\n-            } else {\n-                assertEquals(false, CharUtils.isAsciiAlphanumeric((char) i));\n+                assertTrue(CharUtils.isAsciiAlphanumeric((char) i));\n+            } else {\n+                assertFalse(CharUtils.isAsciiAlphanumeric((char) i));\n             }\n         }\n     }\n--- a/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n         Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);\n         assertEquals( \"getEnumMap not created correctly\", \"{RED=RED, AMBER=AMBER, GREEN=GREEN}\", test.toString());\n         assertEquals(3, test.size());\n-        assertEquals(true, test.containsKey(\"RED\"));\n+        assertTrue(test.containsKey(\"RED\"));\n         assertEquals(Traffic.RED, test.get(\"RED\"));\n-        assertEquals(true, test.containsKey(\"AMBER\"));\n+        assertTrue(test.containsKey(\"AMBER\"));\n         assertEquals(Traffic.AMBER, test.get(\"AMBER\"));\n-        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertTrue(test.containsKey(\"GREEN\"));\n         assertEquals(Traffic.GREEN, test.get(\"GREEN\"));\n-        assertEquals(false, test.containsKey(\"PURPLE\"));\n+        assertFalse(test.containsKey(\"PURPLE\"));\n     }\n \n     @Test\n \n     @Test\n     public void test_isEnum() {\n-        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"RED\"));\n-        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\n-        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"GREEN\"));\n-        assertEquals(false, EnumUtils.isValidEnum(Traffic.class, \"PURPLE\"));\n-        assertEquals(false, EnumUtils.isValidEnum(Traffic.class, null));\n+        assertTrue(EnumUtils.isValidEnum(Traffic.class, \"RED\"));\n+        assertTrue(EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\n+        assertTrue(EnumUtils.isValidEnum(Traffic.class, \"GREEN\"));\n+        assertFalse(EnumUtils.isValidEnum(Traffic.class, \"PURPLE\"));\n+        assertFalse(EnumUtils.isValidEnum(Traffic.class, null));\n     }\n \n     @Test(expected=NullPointerException.class)\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n         assertNotNull(new ObjectUtils());\n         Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers()));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import org.apache.commons.lang3.text.translate.CharSequenceTranslator;\n import org.apache.commons.lang3.text.translate.NumericEntityEscaper;\n-import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;\n \n /**\n  * Unit tests for {@link StringEscapeUtils}.\n         assertNotNull(new StringEscapeUtils());\n         Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n     }\n     \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertNotNull(new StringUtils());\n         Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n         assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n         String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n         assertEquals(10000, str.length());\n-        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n \n     @Test\n         assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n         String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n         assertEquals(10000, str.length());\n-        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n \n     @Test\n         assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n         String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n         assertEquals(10000, str.length());\n-        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n         \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n     public void testSuper() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n-        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n-        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n-        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n-        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n+        assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n+        assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n+        assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n+        assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n     }\n \n     @Test\n     public void testObjectBuild() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(5);\n-        assertTrue(new EqualsBuilder().append(o1, o1).build());\n-        assertTrue(!new EqualsBuilder().append(o1, o2).build());\n+        assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build());\n+        assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build());\n         o2.setA(4);\n-        assertTrue(new EqualsBuilder().append(o1, o2).build());\n-\n-        assertTrue(!new EqualsBuilder().append(o1, this).build());\n+        assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build());\n+\n+        assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build());\n         \n-        assertTrue(!new EqualsBuilder().append(o1, null).build());\n-        assertTrue(!new EqualsBuilder().append(null, o2).build());\n-        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).build());\n+        assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build());\n+        assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build());\n+        assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n package org.apache.commons.lang3.reflect;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n import static org.junit.Assume.assumeNotNull;\n \n         assertNotNull(new FieldUtils());\n         Constructor<?>[] cons = FieldUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(FieldUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(FieldUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers()));\n     }\n     \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/tuple/PairTest.java\n+++ b/src/test/java/org/apache/commons/lang3/tuple/PairTest.java\n     public void testComparable1() throws Exception {\n         Pair<String, String> pair1 = Pair.of(\"A\", \"D\");\n         Pair<String, String> pair2 = Pair.of(\"B\", \"C\");\n-        assertEquals(true, pair1.compareTo(pair1) == 0);\n-        assertEquals(true, pair1.compareTo(pair2) < 0);\n-        assertEquals(true, pair2.compareTo(pair2) == 0);\n-        assertEquals(true, pair2.compareTo(pair1) > 0);\n+        assertTrue(pair1.compareTo(pair1) == 0);\n+        assertTrue(pair1.compareTo(pair2) < 0);\n+        assertTrue(pair2.compareTo(pair2) == 0);\n+        assertTrue(pair2.compareTo(pair1) > 0);\n     }\n \n     @Test\n     public void testComparable2() throws Exception {\n         Pair<String, String> pair1 = Pair.of(\"A\", \"C\");\n         Pair<String, String> pair2 = Pair.of(\"A\", \"D\");\n-        assertEquals(true, pair1.compareTo(pair1) == 0);\n-        assertEquals(true, pair1.compareTo(pair2) < 0);\n-        assertEquals(true, pair2.compareTo(pair2) == 0);\n-        assertEquals(true, pair2.compareTo(pair1) > 0);\n+        assertTrue(pair1.compareTo(pair1) == 0);\n+        assertTrue(pair1.compareTo(pair2) < 0);\n+        assertTrue(pair2.compareTo(pair2) == 0);\n+        assertTrue(pair2.compareTo(pair1) > 0);\n     }\n \n     @Test", "timestamp": 1320843112, "metainfo": ""}