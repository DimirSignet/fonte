{"sha": "90b53a5a3089464bda10a6c58b6bf9abd33107e2", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n  */\n package org.apache.commons.lang3.reflect;\n \n-import static org.junit.Assume.*;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeNotNull;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.lang3.reflect.testbed.Ambig;\n import org.apache.commons.lang3.reflect.testbed.Foo;\n         assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n     }\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testAmbig() {\n-        try {\n-            FieldUtils.getField(Ambig.class, \"VALUE\");\n-            fail(\"should have failed on interface field ambiguity\");\n-        } catch (IllegalArgumentException e) {\n-            // pass\n-        }\n+        FieldUtils.getField(Ambig.class, \"VALUE\");\n     }\n \n }", "timestamp": 1309791030, "metainfo": ""}