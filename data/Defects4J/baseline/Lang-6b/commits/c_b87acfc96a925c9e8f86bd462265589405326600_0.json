{"sha": "b87acfc96a925c9e8f86bd462265589405326600", "log": "Make ClassUtils handle null more nicely   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n /**\n  * <p>Provides utility methods for working for classes without using reflection.</p>\n  *\n- * <p>This class throws exceptions for invalid <code>null</code> inputs.\n+ * <p>This class handles invalid <code>null</code> inputs as best it can.\n  * Each method documents its behaviour in more detail.</p>\n  *\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.17 2003/07/19 21:55:05 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.18 2003/07/31 23:47:20 scolebourne Exp $\n  */\n public class ClassUtils {\n \n      * \n      * @param cls  the class to look up, must not be <code>null</code>\n      * @return the <code>List</code> of superclasses in order going up from this one\n-     * @throws IllegalArgumentException if the class is <code>null</code>\n+     *  <code>null</code> if null input\n      */\n     public static List getAllSuperclasses(Class cls) {\n         if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n+            return null;\n         }\n         List classes = new ArrayList();\n         Class superclass = cls.getSuperclass();\n      * so the order is maintained.</p>\n      * \n      * @param cls  the class to look up, must not be <code>null</code>\n-     * @return the <code>List</code> of interfaces in order\n-     * @throws IllegalArgumentException if the class is <code>null</code>\n+     * @return the <code>List</code> of interfaces in order,\n+     *  <code>null</code> if null input\n      */\n     public static List getAllInterfaces(Class cls) {\n         if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n+            return null;\n         }\n         List list = new ArrayList();\n         while (cls != null) {\n      * <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>\n      * \n      * @param classNames  the classNames to change\n-     * @return a <code>List</code> of Class objects corresponding to the class names\n-     * @throws IllegalArgumentException if the classNames is <code>null</code>\n+     * @return a <code>List</code> of Class objects corresponding to the class names,\n+     *  <code>null</code> if null input\n      * @throws ClassCastException if classNames contains a non String entry\n      */\n     public static List convertClassNamesToClasses(List classNames) {\n         if (classNames == null) {\n-            throw new IllegalArgumentException(\"The class names must not be null\");\n+            return null;\n         }\n         List classes = new ArrayList(classNames.size());\n         for (Iterator it = classNames.iterator(); it.hasNext();) {\n      * the returned list as <code>null</code>.</p>\n      * \n      * @param classes  the classes to change\n-     * @return a <code>List</code> of Class objects corresponding to the class names\n-     * @throws IllegalArgumentException if the classNames is <code>null</code>\n+     * @return a <code>List</code> of Class objects corresponding to the class names,\n+     *  <code>null</code> if null input\n      * @throws ClassCastException if classNames contains a non Class or null entry\n      */\n     public static List convertClassesToClassNames(List classes) {\n         if (classes == null) {\n-            throw new IllegalArgumentException(\"The classes list must not be null\");\n+            return null;\n         }\n         List classNames = new ArrayList(classes.size());\n         for (Iterator it = classes.iterator(); it.hasNext();) {\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n-     * @param cls  the Class to check, may be <code>null</code>\n-     * @param toClass  the Class to try to assign into, must not be <code>null</code>\n+     * @param cls  the Class to check, may be null\n+     * @param toClass  the Class to try to assign into, returns false if null\n      * @return <code>true</code> if assignment possible\n-     * @throws IllegalArgumentException if the toClass is <code>null</code>\n      */\n     public static boolean isAssignable(Class cls, Class toClass) {\n         if (toClass == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n+            return false;\n         }\n         // have to check for null, as isAssignableFrom doesn't\n         if (cls == null) {\n      * <p>Is the specified class an inner class or static nested class.</p>\n      * \n      * @param cls  the class to check\n-     * @return <code>true</code> if the class is an inner or static nested class\n-     * @throws IllegalArgumentException if the class is <code>null</code>\n+     * @return <code>true</code> if the class is an inner or static nested class,\n+     *  false if not or <code>null</code>\n      */\n     public static boolean isInnerClass(Class cls) {\n         if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n+            return false;\n         }\n         return (cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0);\n     }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  * Unit tests {@link org.apache.commons.lang.ClassUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: ClassUtilsTest.java,v 1.4 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.5 2003/07/31 23:47:20 scolebourne Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n         assertEquals(2, list.size());\n         assertEquals(CX.class, list.get(0));\n         assertEquals(Object.class, list.get(1));\n-        try {\n-            ClassUtils.getAllSuperclasses(null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(null, ClassUtils.getAllSuperclasses(null));\n     }\n     \n     public void test_getAllInterfaces_Class() {\n         assertEquals(IE.class, list.get(3));\n         assertEquals(IF.class, list.get(4));\n         assertEquals(IA.class, list.get(5));\n-        try {\n-            ClassUtils.getAllInterfaces(null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(null, ClassUtils.getAllInterfaces(null));\n     }\n     \n     private static interface IA {\n             ClassUtils.convertClassNamesToClasses(list);\n             fail();\n         } catch (ClassCastException ex) {}\n-        \n-        try {\n-            ClassUtils.convertClassNamesToClasses(null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n     }\n     \n     public void test_convertClassesToClassNames_List() {\n             ClassUtils.convertClassesToClassNames(list);\n             fail();\n         } catch (ClassCastException ex) {}\n-        \n-        try {\n-            ClassUtils.convertClassesToClassNames(null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(null, ClassUtils.convertClassesToClassNames(null));\n     }\n     \n     // -------------------------------------------------------------------------\n         }.getClass()));\n         assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n         assertEquals(false, ClassUtils.isInnerClass(String.class));\n-        try {\n-            ClassUtils.isInnerClass(null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(false, ClassUtils.isInnerClass(null));\n     }\n     \n     // -------------------------------------------------------------------------\n     }\n     \n     public void test_isAssignable() throws Exception {\n-        try {\n-            ClassUtils.isAssignable(String.class, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClassUtils.isAssignable((Class) null, (Class) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(false, ClassUtils.isAssignable((Class) null, null));\n+        assertEquals(false, ClassUtils.isAssignable(String.class, null));\n+        \n         assertEquals(true, ClassUtils.isAssignable(null, Object.class));\n         assertEquals(true, ClassUtils.isAssignable(null, Integer.class));\n         assertEquals(false, ClassUtils.isAssignable(null, Integer.TYPE));", "timestamp": 1059695240, "metainfo": ""}