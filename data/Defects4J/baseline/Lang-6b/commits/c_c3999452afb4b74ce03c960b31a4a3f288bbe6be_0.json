{"sha": "c3999452afb4b74ce03c960b31a4a3f288bbe6be", "log": "Applying Matt's patch with my modifications from LANG-588. Adds a Pair class to Lang.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/Pair.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+/**\n+ * A basic immutable Object pair.\n+ * @since Lang 3.0\n+ * @author Matt Benson\n+ */\n+public final class Pair<L, R> implements Serializable {\n+    /** Serialization version */\n+    private static final long serialVersionUID = 4954918890077093841L;\n+\n+    /** Left object */\n+    public final L left;\n+\n+    /** Right object */\n+    public final R right;\n+\n+    /**\n+     * Create a new Pair instance.\n+     * @param left\n+     * @param right\n+     */\n+    public Pair(L left, R right) {\n+        this.left = left;\n+        this.right = right;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Pair<?, ?> == false) {\n+            return false;\n+        }\n+        Pair<?, ?> other = (Pair<?, ?>) obj;\n+        return ObjectUtils.equals(left, other.left) && ObjectUtils.equals(right, other.right);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public int hashCode() {\n+        return new HashCodeBuilder().append(left).append(right).toHashCode();\n+    }\n+\n+    /**\n+     * Returns a String representation of the Pair in the form: (L,R)\n+     */\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(\"(\");\n+        builder.append(left);\n+        builder.append(\",\");\n+        builder.append(right);\n+        builder.append(\")\");\n+        return builder.toString();\n+    }\n+\n+    /**\n+     * Static creation method for a Pair<L, R>.\n+     * @param <L>\n+     * @param <R>\n+     * @param left\n+     * @param right\n+     * @return Pair<L, R>(left, right)\n+     */\n+    public static <L, R> Pair<L, R> of(L left, R right) {\n+        return new Pair<L, R>(left, right);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/PairTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test the Pair class.\n+ * @author Matt Benson\n+ */\n+public class PairTest {\n+\n+    @Test\n+    public void testBasic() throws Exception {\n+        Pair<Integer, String> pair = new Pair<Integer, String>(0, \"foo\");\n+        assertEquals(0, pair.left.intValue());\n+        assertEquals(\"foo\", pair.right);\n+        Pair<Object, String> pair2 = new Pair<Object, String>(null, \"bar\");\n+        assertNull(pair2.left);\n+        assertEquals(\"bar\", pair2.right);\n+    }\n+\n+    @Test\n+    public void testPairOf() throws Exception {\n+        Pair<Integer, String> pair = Pair.of(0, \"foo\");\n+        assertEquals(0, pair.left.intValue());\n+        assertEquals(\"foo\", pair.right);\n+        Pair<Object, String> pair2 = Pair.of(null, \"bar\");\n+        assertNull(pair2.left);\n+        assertEquals(\"bar\", pair2.right);\n+    }\n+\n+    @Test\n+    public void testEquals() throws Exception {\n+        assertEquals(Pair.of(null, \"foo\"), Pair.of(null, \"foo\"));\n+        assertFalse(Pair.of(\"foo\", 0).equals(Pair.of(\"foo\", null)));\n+    }\n+\n+    @Test\n+    public void testHashCode() throws Exception {\n+        assertEquals(Pair.of(null, \"foo\").hashCode(), Pair.of(null, \"foo\").hashCode());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerialization() throws Exception {\n+        Pair<Integer, String> origPair = Pair.of(0, \"foo\");\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(baos);\n+        out.writeObject(origPair);\n+        Pair<Integer, String> deserializedPair = (Pair<Integer, String>) new ObjectInputStream(\n+                new ByteArrayInputStream(baos.toByteArray())).readObject();\n+        assertEquals(origPair, deserializedPair);\n+        assertEquals(origPair.hashCode(), deserializedPair.hashCode());\n+    }\n+}", "timestamp": 1267067059, "metainfo": ""}