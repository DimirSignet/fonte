{"sha": "34f6fa81df95503553f62d30a4ba87f7641ed1d3", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/compare/FixedOrderComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A Comparator which imposes a specific order on a specific set of Objects.\n+ * Objects are presented to the FixedOrderComparator in a specified order and\n+ * subsequent calls to {@link #compare(Object, Object) compare} yield that order.\n+ * For example:\n+ * <pre>\n+ * String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"};\n+ * FixedOrderComparator distanceFromSun = new FixedOrderComparator(planets);\n+ * Arrays.sort(planets);                     // Sort to alphabetical order\n+ * Arrays.sort(planets, distanceFromSun);    // Back to original order\n+ * </pre>\n+ * <p>\n+ * Once <code>compare</code> has been called, the FixedOrderComparator is locked\n+ * and attempts to modify it yield an UnsupportedOperationException.\n+ * <p>\n+ * Instances of FixedOrderComparator are not synchronized.  The class is not\n+ * thread-safe at construction time, but it is thread-safe to perform\n+ * multiple comparisons  after all the setup operations are complete.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision$ $Date$\n+ *\n+ * @author David Leppik\n+ * @author Stephen Colebourne\n+ * @author Janek Bogucki\n+ */\n+public class FixedOrderComparator<T> implements Comparator<T> {\n+\n+    /**\n+     * Unknown object behavior enum.\n+     * @since Commons Collections 5\n+     */\n+    public static enum UnknownObjectBehavior {\n+        BEFORE, AFTER, EXCEPTION;\n+    }\n+\n+    /** Internal map of object to position */\n+    private final Map<T, Integer> map = new HashMap<T, Integer>();\n+\n+    /** Counter used in determining the position in the map */\n+    private int counter = 0;\n+\n+    /** Is the comparator locked against further change */\n+    private boolean isLocked = false;\n+\n+    /** The behaviour in the case of an unknown object */\n+    private UnknownObjectBehavior unknownObjectBehavior = UnknownObjectBehavior.EXCEPTION;\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs an empty FixedOrderComparator.\n+     */\n+    public FixedOrderComparator() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a FixedOrderComparator which uses the order of the given array\n+     * to compare the objects.\n+     * <p>\n+     * The array is copied, so later changes will not affect the comparator.\n+     *\n+     * @param items  the items that the comparator can compare in order\n+     * @throws IllegalArgumentException if the array is null\n+     */\n+    public FixedOrderComparator(T[] items) {\n+        super();\n+        if (items == null) {\n+            throw new IllegalArgumentException(\"The list of items must not be null\");\n+        }\n+        for (int i = 0; i < items.length; i++) {\n+            add(items[i]);\n+        }\n+    }\n+\n+    /**\n+     * Constructs a FixedOrderComparator which uses the order of the given list\n+     * to compare the objects.\n+     * <p>\n+     * The list is copied, so later changes will not affect the comparator.\n+     *\n+     * @param items  the items that the comparator can compare in order\n+     * @throws IllegalArgumentException if the list is null\n+     */\n+    public FixedOrderComparator(List<T> items) {\n+        super();\n+        if (items == null) {\n+            throw new IllegalArgumentException(\"The list of items must not be null\");\n+        }\n+        for (T t : items) {\n+            add(t);\n+        }\n+    }\n+\n+    // Bean methods / state querying methods\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns true if modifications cannot be made to the FixedOrderComparator.\n+     * FixedOrderComparators cannot be modified once they have performed a comparison.\n+     *\n+     * @return true if attempts to change the FixedOrderComparator yield an\n+     *  UnsupportedOperationException, false if it can be changed.\n+     */\n+    public boolean isLocked() {\n+        return isLocked;\n+    }\n+\n+    /**\n+     * Checks to see whether the comparator is now locked against further changes.\n+     *\n+     * @throws UnsupportedOperationException if the comparator is locked\n+     */\n+    protected void checkLocked() {\n+        if (isLocked()) {\n+            throw new UnsupportedOperationException(\"Cannot modify a FixedOrderComparator after a comparison\");\n+        }\n+    }\n+\n+    /**\n+     * Gets the behavior for comparing unknown objects.\n+     *\n+     * @return {@link UnknownObjectBehavior}\n+     */\n+    public UnknownObjectBehavior getUnknownObjectBehavior() {\n+        return unknownObjectBehavior;\n+    }\n+\n+    /**\n+     * Sets the behavior for comparing unknown objects.\n+     *\n+     * @param unknownObjectBehavior  the flag for unknown behaviour -\n+     * UNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION\n+     * @throws UnsupportedOperationException if a comparison has been performed\n+     * @throws IllegalArgumentException if the unknown flag is not valid\n+     */\n+    public void setUnknownObjectBehavior(UnknownObjectBehavior unknownObjectBehavior) {\n+        checkLocked();\n+        if (unknownObjectBehavior == null) {\n+            throw new IllegalArgumentException(\"Unknown object behavior must not be null\");\n+        }\n+        this.unknownObjectBehavior = unknownObjectBehavior;\n+    }\n+\n+    // Methods for adding items\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds an item, which compares as after all items known to the Comparator.\n+     * If the item is already known to the Comparator, its old position is\n+     * replaced with the new position.\n+     *\n+     * @param obj  the item to be added to the Comparator.\n+     * @return true if obj has been added for the first time, false if\n+     *  it was already known to the Comparator.\n+     * @throws UnsupportedOperationException if a comparison has already been made\n+     */\n+    public boolean add(T obj) {\n+        checkLocked();\n+        Integer position = map.put(obj, new Integer(counter++));\n+        return (position == null);\n+    }\n+\n+    /**\n+     * Adds a new item, which compares as equal to the given existing item.\n+     *\n+     * @param existingObj  an item already in the Comparator's set of\n+     *  known objects\n+     * @param newObj  an item to be added to the Comparator's set of\n+     *  known objects\n+     * @return true if newObj has been added for the first time, false if\n+     *  it was already known to the Comparator.\n+     * @throws IllegalArgumentException if existingObject is not in the\n+     *  Comparator's set of known objects.\n+     * @throws UnsupportedOperationException if a comparison has already been made\n+     */\n+    public boolean addAsEqual(T existingObj, T newObj) {\n+        checkLocked();\n+        Integer position = map.get(existingObj);\n+        if (position == null) {\n+            throw new IllegalArgumentException(existingObj + \" not known to \" + this);\n+        }\n+        Integer result = map.put(newObj, position);\n+        return (result == null);\n+    }\n+\n+    // Comparator methods\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares two objects according to the order of this Comparator.\n+     * <p>\n+     * It is important to note that this class will throw an IllegalArgumentException\n+     * in the case of an unrecognised object. This is not specified in the\n+     * Comparator interface, but is the most appropriate exception.\n+     *\n+     * @param obj1  the first object to compare\n+     * @param obj2  the second object to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     * @throws IllegalArgumentException if obj1 or obj2 are not known\n+     *  to this Comparator and an alternative behavior has not been set\n+     *  via {@link #setUnknownObjectBehavior(UnknownObjectBehavior)}.\n+     */\n+    public int compare(T obj1, T obj2) {\n+        isLocked = true;\n+        Integer position1 = map.get(obj1);\n+        Integer position2 = map.get(obj2);\n+        if (position1 == null || position2 == null) {\n+            switch (unknownObjectBehavior) {\n+            case BEFORE:\n+                return position1 == null ? position2 == null ? 0 : -1 : 1;\n+            case AFTER:\n+                return position1 == null ? position2 == null ? 0 : 1 : -1;\n+            case EXCEPTION:\n+                Object unknownObj = (position1 == null) ? obj1 : obj2;\n+                throw new IllegalArgumentException(\"Attempting to compare unknown object \"\n+                        + unknownObj);\n+            default: //could be null\n+                throw new UnsupportedOperationException(\"Unknown unknownObjectBehavior: \"\n+                        + unknownObjectBehavior);\n+            }\n+        }\n+        return position1.compareTo(position2);\n+    }\n+\n+}", "timestamp": 1312780259, "metainfo": ""}