{"sha": "727950849ba99e380706b6ddd93cf13a761764f2", "log": "LANG-799 - DateUtils#parseDate uses default locale; add Locale support Remove unnecessary test  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n-import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Locale;\n import java.util.NoSuchElementException;\n-import java.util.Set;\n import java.util.TimeZone;\n \n import junit.framework.AssertionFailedError;\n     }\n     \n     /**\n-     * Tests that an IllegalArgumentException is thrown if the\n-     * locale supplied is not supported by the DateFormat class\n-     * hierarchy. Note: this test is likely to pass without testing\n-     * the behaviour, as typically all locales are supported.\n-     * \n-     * @throws Exception\n-     */\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testParseBadLocale() throws Exception {\n-        Set<Locale> availableLocales = new HashSet<Locale>(\n-                Arrays.asList(Locale.getAvailableLocales()));\n-        \n-        Set<Locale> dateLocales = new HashSet<Locale>(\n-                Arrays.asList(DateFormat.getAvailableLocales()));\n-\n-        Set<Locale> intersection = new HashSet<Locale>(availableLocales);\n-        intersection.retainAll(dateLocales);\n-        availableLocales.removeAll(intersection);\n-        \n-        // availableLocales now contains only those Locales that are\n-        // not supported by the DateFormat class hierarchy. Could be\n-        // empty, in which case we skip the test.\n-        assumeTrue(availableLocales.size() > 0);\n-        \n-        Locale invalidLocale = availableLocales.iterator().next();\n-        \n-        String[] parsers = {\"yyyy\"};        \n-        DateUtils.parseDate(\"foo\", invalidLocale, parsers);         \n-    }\n-    \n-    /**\n      * Retrieves a non-system locale date pattern string and attempts\n      * to use it.\n      * ", "timestamp": 1348327660, "metainfo": ""}